[
  {
    "label": "AudioFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioFrame"
  },
  {
    "label": "AudioDecoderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDecoderFactory"
  },
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "NetEqNetworkStatistics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetEqNetworkStatistics"
  },
  {
    "label": "NetEqLifetimeStatistics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetEqLifetimeStatistics"
  },
  {
    "label": "NetEqOperationsAndState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetEqOperationsAndState"
  },
  {
    "label": "NetEq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEq"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "ReturnCodes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ReturnCodes"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DecoderFormat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DecoderFormat"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (# ifndef API_NETEQ_NETEQ_H_ # define API_NETEQ_NETEQ_H_ # include<stddef . h> # include<map> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / audio_codecs / audio_codec_pair_id . h \" # include \" api / audio_codecs / audio_decoder . h \" # include \" api / audio_codecs / audio_format . h \" # include \" api / rtp_headers . h \" # include \" api / scoped_refptr . h \" namespace webrtc { class AudioFrame ; class AudioDecoderFactory ; class Clock ; struct NetEqNetworkStatistics { uint16_t current_buffer_size_ms ; uint16_t preferred_buffer_size_ms ; uint16_t jitter_peaks_found ; uint16_t expand_rate ; uint16_t speech_expand_rate ; uint16_t preemptive_rate ; uint16_t accelerate_rate ; uint16_t secondary_decoded_rate ; uint16_t secondary_discarded_rate ; int mean_waiting_time_ms ; int median_waiting_time_ms ; int min_waiting_time_ms ; int max_waiting_time_ms ; } ; struct NetEqLifetimeStatistics { uint64_t total_samples_received = 0 ; uint64_t concealed_samples = 0 ; uint64_t concealment_events = 0 ; uint64_t jitter_buffer_delay_ms = 0 ; uint64_t jitter_buffer_emitted_count = 0 ; uint64_t jitter_buffer_target_delay_ms = 0 ; uint64_t jitter_buffer_minimum_delay_ms = 0 ; uint64_t inserted_samples_for_deceleration = 0 ; uint64_t removed_samples_for_acceleration = 0 ; uint64_t silent_concealed_samples = 0 ; uint64_t fec_packets_received = 0 ; uint64_t fec_packets_discarded = 0 ; uint64_t packets_discarded = 0 ; uint64_t delayed_packet_outage_samples = 0 ; uint64_t relative_packet_arrival_delay_ms = 0 ; uint64_t jitter_buffer_packets_received = 0 ; int32_t interruption_count = 0 ; int32_t total_interruption_duration_ms = 0 ; uint64_t generated_noise_samples = 0 ; } ; struct NetEqOperationsAndState { uint64_t preemptive_samples = 0 ; uint64_t accelerate_samples = 0 ; uint64_t packet_buffer_flushes = 0 ; uint64_t last_waiting_time_ms = 0 ; uint64_t current_buffer_size_ms = 0 ; uint64_t current_frame_size_ms = 0 ; bool next_packet_available = false ; } ; class NetEq { public : struct Config {)",
    "insertText": "Config()"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Config(const Config&)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Config(Config&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Config&)",
    "insertText": "operator(const Config&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Config&)",
    "insertText": "operator(Config&&)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "NetEq()",
    "kind": "Method",
    "detail": "Function (int sample_rate_hz = 4 8 0 0 0 ; bool enable_post_decode_vad = false ; size_t max_packets_in_buffer = 2 0 0 ; int max_delay_ms = 0 ; int min_delay_ms = 0 ; bool enable_fast_accelerate = false ; bool enable_muted_state = false ; bool enable_rtx_handling = false ; absl::optional<AudioCodecPairId> codec_pair_id ; bool for_test_no_time_stretching = false ; } ; enum ReturnCodes { kOK = 0,kFail = - 1 } ; enum class Operation { kNormal,kMerge,kExpand,kAccelerate,kFastAccelerate,kPreemptiveExpand,kRfc3389Cng,kRfc3389CngNoPacket,kCodecInternalCng,kDtmf,kUndefined,} ; enum class Mode { kNormal,kExpand,kMerge,kAccelerateSuccess,kAccelerateLowEnergy,kAccelerateFail,kPreemptiveExpandSuccess,kPreemptiveExpandLowEnergy,kPreemptiveExpandFail,kRfc3389Cng,kCodecInternalCng,kCodecPlc,kDtmf,kError,kUndefined,} ; struct DecoderFormat { int sample_rate_hz ; int num_channels ; SdpAudioFormat sdp_format ; } ; ~)",
    "insertText": "NetEq()"
  },
  {
    "label": "InsertPacket()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "InsertPacket(const RTPHeader& rtp_header, rtc::ArrayView<const uint8_t> payload)"
  },
  {
    "label": "InsertEmptyPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertEmptyPacket(const RTPHeader& rtp_header)"
  },
  {
    "label": "GetAudio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetAudio(AudioFrame* audio_frame, bool* muted, int* current_sample_rate_hz = nullptr, absl::optional<Operation> action_override = absl::nullopt)"
  },
  {
    "label": "SetCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCodecs(const std::map<int, SdpAudioFormat>& codecs)"
  },
  {
    "label": "RegisterPayloadType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterPayloadType(int rtp_payload_type, const SdpAudioFormat& audio_format)"
  },
  {
    "label": "RemovePayloadType()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RemovePayloadType(uint8_t rtp_payload_type)"
  },
  {
    "label": "RemoveAllPayloadTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllPayloadTypes()"
  },
  {
    "label": "SetMinimumDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMinimumDelay(int delay_ms)"
  },
  {
    "label": "SetMaximumDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMaximumDelay(int delay_ms)"
  },
  {
    "label": "SetBaseMinimumDelayMs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBaseMinimumDelayMs(int delay_ms)"
  },
  {
    "label": "GetBaseMinimumDelayMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetBaseMinimumDelayMs()"
  },
  {
    "label": "TargetDelayMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "TargetDelayMs()"
  },
  {
    "label": "FilteredCurrentDelayMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FilteredCurrentDelayMs()"
  },
  {
    "label": "NetworkStatistics()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NetworkStatistics(NetEqNetworkStatistics* stats)"
  },
  {
    "label": "CurrentNetworkStatistics()",
    "kind": "Method",
    "detail": "Function (NetEqNetworkStatistics)",
    "insertText": "CurrentNetworkStatistics()"
  },
  {
    "label": "GetLifetimeStatistics()",
    "kind": "Method",
    "detail": "Function (NetEqLifetimeStatistics)",
    "insertText": "GetLifetimeStatistics()"
  },
  {
    "label": "GetOperationsAndState()",
    "kind": "Method",
    "detail": "Function (NetEqOperationsAndState)",
    "insertText": "GetOperationsAndState()"
  },
  {
    "label": "EnableVad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableVad()"
  },
  {
    "label": "DisableVad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableVad()"
  },
  {
    "label": "GetPlayoutTimestamp()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t>)",
    "insertText": "GetPlayoutTimestamp()"
  },
  {
    "label": "last_output_sample_rate_hz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "last_output_sample_rate_hz()"
  },
  {
    "label": "GetDecoderFormat()",
    "kind": "Method",
    "detail": "Function (absl::optional<DecoderFormat>)",
    "insertText": "GetDecoderFormat(int payload_type)"
  },
  {
    "label": "FlushBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushBuffers()"
  },
  {
    "label": "EnableNack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableNack(size_t max_nack_list_size)"
  },
  {
    "label": "DisableNack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableNack()"
  },
  {
    "label": "GetNackList()",
    "kind": "Method",
    "detail": "Function (std::vector<uint16_t>)",
    "insertText": "GetNackList(int64_t round_trip_time_ms)"
  },
  {
    "label": "SyncBufferSizeMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SyncBufferSizeMs()"
  }
]