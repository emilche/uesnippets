[
  {
    "label": "FNetTypeStatsData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetTypeStatsData"
  },
  {
    "label": "EStatsIndex",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EStatsIndex"
  },
  {
    "label": "FStatsValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatsValue"
  },
  {
    "label": "FNetStatsContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetStatsContext"
  },
  {
    "label": "FNetTypeStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTypeStats"
  },
  {
    "label": "FNetStatsTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetStatsTimer"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Iris / Stats / NetStats . h \" # include \" ProfilingDebugging / CsvProfilerConfig . h \" # include \" Iris / ReplicationSystem / NetRefHandleManager . h \" # include \" Iris / ReplicationSystem / ReplicationProtocol . h \" namespace UE::Net::Private { struct FNetTypeStatsData { enum EStatsIndex : unsigned { PreUpdate = 0 U,Poll,PollWaste,Quantize,Write,WriteWaste,WriteCreationInfo,WriteExports,Count } ; struct FStatsValue { void)",
    "insertText": "Accumulate(const FStatsValue& Other)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (Time + = Other . Time ; Bits + = Other . Bits ; Count + = Other . Count ; } uint64 Time =)",
    "insertText": "uint64(0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (uint32 Bits = 0 U ; uint32 Count = 0 U ; } ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "FNetTypeStatsData()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FNetTypeStatsData()"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Accumulate(const FNetTypeStatsData& Other)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (Values [ Index ] .)",
    "insertText": "Accumulate(Other.Values[Index])"
  },
  {
    "label": "FNetStatsContext()",
    "kind": "Method",
    "detail": "Function (} } FStatsValue Values [ EStatsIndex::Count ] ; } ; class FNetStatsContext { public :)",
    "insertText": "FNetStatsContext()"
  },
  {
    "label": "FNetStatsContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetStatsContext(const FNetStatsContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetStatsContext&)",
    "insertText": "operator(const FNetStatsContext&)"
  },
  {
    "label": "ResetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStats(int32 NumTypeStats)"
  },
  {
    "label": "GetTypeStatsDataForObject()",
    "kind": "Method",
    "detail": "Function (FNetTypeStatsData&)",
    "insertText": "GetTypeStatsDataForObject(FNetStatsContext& Context, FInternalNetRefIndex InternalIndex, uint32& OutUpdateCount)"
  },
  {
    "label": "GetTypeStatsDataForObject()",
    "kind": "Method",
    "detail": "Function (FNetTypeStatsData&)",
    "insertText": "GetTypeStatsDataForObject(FNetStatsContext& Context, FInternalNetRefIndex InternalIndex)"
  },
  {
    "label": "GetTypeStatsData()",
    "kind": "Method",
    "detail": "Function (FNetTypeStatsData&)",
    "insertText": "GetTypeStatsData(FNetStatsContext& Context, const FNetRefHandleManager::FReplicatedObjectData& ObjectData, bool bTreatAsRoot)"
  },
  {
    "label": "FNetStatsTimer()",
    "kind": "Method",
    "detail": "Function (private : class FNetTypeStats ; const FNetRefHandleManager* NetRefHandleManager = nullptr ; TArray<FNetTypeStatsData> TypeStatsData ; bool bShouldIncludeSubObjectWithRoot = false ; } ; class FNetStatsTimer { public :)",
    "insertText": "FNetStatsTimer(FNetStatsContext* InStatsContext) : NetStatsContext(InStatsContext) , StartCycle(InStatsContext ? FPlatformTime::Cycles64() : uint64(0))"
  },
  {
    "label": "GetCyclesSinceStart()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetCyclesSinceStart()"
  },
  {
    "label": "GetNetStatsContext()",
    "kind": "Method",
    "detail": "Function (} FNetStatsContext*)",
    "insertText": "GetNetStatsContext()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 TypeStatsIndex = FNetTypeStats::DefaultTypeStatsIndex ;)",
    "insertText": "if(bTreatAsRoot)"
  },
  {
    "label": "GetReplicatedObjectDataNoCheck()",
    "kind": "Method",
    "detail": "Function (TypeStatsIndex = ObjectData . Protocol ? ObjectData . Protocol -> TypeStatsIndex : FNetTypeStats::OOBChannelTypeStatsIndex ; } else { const FNetRefHandleManager::FReplicatedObjectData& RootObjectData = Context . NetRefHandleManager ->)",
    "insertText": "GetReplicatedObjectDataNoCheck(ObjectData.SubObjectRootIndex)"
  },
  {
    "label": "GetReplicatedObjectDataNoCheck()",
    "kind": "Method",
    "detail": "Function (const FNetRefHandleManager::FReplicatedObjectData& ObjectData = Context . NetRefHandleManager ->)",
    "insertText": "GetReplicatedObjectDataNoCheck(InternalIndex)"
  },
  {
    "label": "IsSubObject()",
    "kind": "Method",
    "detail": "Function (const bool bTreatAsRoot = ! Context . bShouldIncludeSubObjectWithRoot | | ! ObjectData .)",
    "insertText": "IsSubObject()"
  },
  {
    "label": "GetTypeStatsData()",
    "kind": "Method",
    "detail": "Function (OutUpdateCount = bTreatAsRoot ? 1 U : 0 U ; return)",
    "insertText": "GetTypeStatsData(Context, ObjectData, bTreatAsRoot)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TypeStatsData .)",
    "insertText": "SetNum(NumTypeStats)"
  },
  {
    "label": "UE_NET_IRIS_STATS_TIMER()",
    "kind": "Method",
    "detail": "Function (} } } # if UE_NET_IRIS_CSV_STATS # define)",
    "insertText": "UE_NET_IRIS_STATS_TIMER(TimerName, NetStatsContext) UE::Net::Private::FNetStatsTimer TimerName(NetStatsContext)"
  },
  {
    "label": "UE_NET_IRIS_STATS_ADD_TIME_AND_COUNT_FOR_OBJECT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_NET_IRIS_STATS_ADD_TIME_AND_COUNT_FOR_OBJECT(Timer, StatName, ObjectIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(UE::Net::Private::FNetStatsContext* LocalNetStatsContext = Timer.GetNetStatsContext())"
  },
  {
    "label": "GetTypeStatsDataForObject()",
    "kind": "Method",
    "detail": "Function (\\ uint32 CountIncrement = 0 U ; \\ UE::Net::Private::FNetTypeStatsData& StatsData = UE::Net::Private::)",
    "insertText": "GetTypeStatsDataForObject(*LocalNetStatsContext, ObjectIndex, CountIncrement)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ StatsData . Values [ UE::Net::Private::FNetTypeStatsData::EStatsIndex::StatName ] . Count + = CountIncrement ; \\ } \\ })",
    "insertText": "while(0) #define UE_NET_IRIS_STATS_ADD_TIME_AND_COUNT_FOR_OBJECT_AS_WASTE(Timer, StatName, ObjectIndex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ StatsData . Values [ UE::Net::Private::FNetTypeStatsData::EStatsIndex::StatName ] . Time + = DeltaTimeForStat ; \\ StatsData . Values [ UE::Net::Private::FNetTypeStatsData::EStatsIndex::StatName ] . Count + = CountIncrement ; \\ StatsData . Values [ UE::Net::Private::FNetTypeStatsData::EStatsIndex::StatName # # Waste ] . Time + = DeltaTimeForStat ; \\ StatsData . Values [ UE::Net::Private::FNetTypeStatsData::EStatsIndex::StatName # # Waste ] . Count + = CountIncrement ; \\ } \\ })",
    "insertText": "while(0) #define UE_NET_IRIS_STATS_ADD_BITS_WRITTEN_AND_COUNT_FOR_OBJECT(NetStatsContext, BitCount, StatName, ObjectIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(NetStatsContext)"
  },
  {
    "label": "GetTypeStatsDataForObject()",
    "kind": "Method",
    "detail": "Function (\\ uint32 CountIncrement = 0 U ; \\ UE::Net::Private::FNetTypeStatsData& StatsData = UE::Net::Private::)",
    "insertText": "GetTypeStatsDataForObject(*NetStatsContext, ObjectIndex, CountIncrement)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ StatsData . Values [ UE::Net::Private::FNetTypeStatsData::EStatsIndex::StatName ] . Bits + = BitCount ; \\ StatsData . Values [ UE::Net::Private::FNetTypeStatsData::EStatsIndex::StatName ] . Count + = CountIncrement ; \\ } \\ })",
    "insertText": "while(0) #define UE_NET_IRIS_STATS_ADD_BITS_WRITTEN_FOR_OBJECT(NetStatsContext, BitCount, StatName, ObjectIndex)"
  },
  {
    "label": "GetTypeStatsDataForObject()",
    "kind": "Method",
    "detail": "Function (\\ UE::Net::Private::FNetTypeStatsData& StatsData = UE::Net::Private::)",
    "insertText": "GetTypeStatsDataForObject(*NetStatsContext, ObjectIndex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ StatsData . Values [ UE::Net::Private::FNetTypeStatsData::EStatsIndex::StatName ] . Bits + = BitCount ; \\ } \\ })",
    "insertText": "while(0) #define UE_NET_IRIS_STATS_ADD_BITS_WRITTEN_FOR_OBJECT_AS_WASTE(NetStatsContext, BitCount, StatName, ObjectIndex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ StatsData . Values [ UE::Net::Private::FNetTypeStatsData::EStatsIndex::StatName ] . Bits + = BitCount ; \\ StatsData . Values [ UE::Net::Private::FNetTypeStatsData::EStatsIndex::StatName # # Waste ] . Bits + = BitCount ; \\ } \\ })",
    "insertText": "while(0) #define UE_NET_IRIS_STATS_INCREMENT_FOR_OBJECT(NetStatsContext, StatName, ObjectIndex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ StatsData . Values [ UE::Net::Private::FNetTypeStatsData::EStatsIndex::StatName ] . Count + + ; \\ } \\ })",
    "insertText": "while(0) #define UE_NET_IRIS_STATS_ADD_COUNT_FOR_OBJECT(NetStatsContext, StatName, ObjectIndex, CountToAdd)"
  }
]