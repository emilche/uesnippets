[
  {
    "label": "SurfaceFactoryCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SurfaceFactoryCache"
  },
  {
    "label": "SurfaceFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SurfaceFactory"
  },
  {
    "label": "MUTEX_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MUTEX_TYPE"
  },
  {
    "label": "READ_LOCK_GUARD_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "READ_LOCK_GUARD_TYPE"
  },
  {
    "label": "WRITE_LOCK_GUARD_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WRITE_LOCK_GUARD_TYPE"
  },
  {
    "label": "SurfaceFactoryCacheThreaded",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SurfaceFactoryCacheThreaded"
  },
  {
    "label": "SurfaceFactoryCache()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_BFR_SURFACE_FACTORY_CACHE_H # define OPENSUBDIV3_BFR_SURFACE_FACTORY_CACHE_H # include \" . . / version . h \" # include \" . . / bfr / irregularPatchType . h \" # include<map> # include<cstdint> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Bfr { class SurfaceFactoryCache { public :)",
    "insertText": "SurfaceFactoryCache()"
  },
  {
    "label": "SurfaceFactoryCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SurfaceFactoryCache(SurfaceFactoryCache const &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SurfaceFactoryCache&)",
    "insertText": "operator(SurfaceFactoryCache const &)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (protected : class SurfaceFactory ; typedef std::uint64_t KeyType ; typedef internal::IrregularPatchSharedPtr DataType ; protected : size_t)",
    "insertText": "Size()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} DataType)",
    "insertText": "Find(KeyType const & key)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DataType)",
    "insertText": "Add(KeyType const & key, DataType const & data)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (DataType)",
    "insertText": "find(KeyType const & key)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (DataType)",
    "insertText": "add(KeyType const & key, DataType const & data)"
  },
  {
    "label": "SurfaceFactoryCacheThreaded()",
    "kind": "Method",
    "detail": "Function (private : typedef std::map<KeyType,DataType> MapType ; MapType _map ; } ; template<class MUTEX_TYPE,class READ_LOCK_GUARD_TYPE,class WRITE_LOCK_GUARD_TYPE> class SurfaceFactoryCacheThreaded : public SurfaceFactoryCache { public :)",
    "insertText": "SurfaceFactoryCacheThreaded() : SurfaceFactoryCache()"
  },
  {
    "label": "SurfaceFactoryCacheThreaded()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SurfaceFactoryCacheThreaded()"
  },
  {
    "label": "lockGuard()",
    "kind": "Method",
    "detail": "Function (READ_LOCK_GUARD_TYPE)",
    "insertText": "lockGuard(_mutex)"
  }
]