[
  {
    "label": "FEnvelope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEnvelope"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEnvData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvData"
  },
  {
    "label": "FADEnvelope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FADEnvelope"
  },
  {
    "label": "FEnvelope()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Osc . h \" # include \" DSP / ModulationMatrix . h \" # include \" DSP / BufferVectorOperations . h \" namespace Audio { class FEnvelope { public : enum class EEnvelopeState { Off,Attack,Decay,Sustain,Release,Shutdown } ;)",
    "insertText": "FEnvelope()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const float InSampleRate, const int32 InVoiceId = 0, FModulationMatrix* InModMatrix = nullptr, const bool bInSimulateAnalog = true)"
  },
  {
    "label": "SetSimulateAnalog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSimulateAnalog(const bool bInSimulatingAnalog)"
  },
  {
    "label": "SetLegato()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLegato(const bool bInLegatoMode)"
  },
  {
    "label": "SetRetrigger()",
    "kind": "Method",
    "detail": "Function (bIsLegatoMode = bInLegatoMode ; } void)",
    "insertText": "SetRetrigger(const bool bInRetrigger)"
  },
  {
    "label": "IsRetrigger()",
    "kind": "Method",
    "detail": "Function (bIsRetriggerMode = bInRetrigger ; } bool)",
    "insertText": "IsRetrigger()"
  },
  {
    "label": "StartLegato()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartLegato(const float InNewDepth)"
  },
  {
    "label": "StartLegato()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartLegato()"
  },
  {
    "label": "StartLegato()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartLegato(Depth)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Stop()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Kill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Kill()"
  },
  {
    "label": "IsDone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDone()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Generate(float* BiasedOutput = nullptr)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (EEnvelopeState)",
    "insertText": "GetState()"
  },
  {
    "label": "SetAttackTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttackTime(const float InAttackTimeMsec)"
  },
  {
    "label": "SetDecayTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDecayTime(const float InDecayTimeMsec)"
  },
  {
    "label": "SetSustainGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSustainGain(const float InSustainGain)"
  },
  {
    "label": "SetReleaseTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReleaseTime(const float InReleaseTimeMsec)"
  },
  {
    "label": "SetInvert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInvert(const bool bInInvert)"
  },
  {
    "label": "SetBiasInvert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBiasInvert(const bool bInBiasInvert)"
  },
  {
    "label": "SetDepth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDepth(const float InDepth)"
  },
  {
    "label": "SetBiasDepth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBiasDepth(const float InDepth)"
  },
  {
    "label": "GetModSourceEnv()",
    "kind": "Method",
    "detail": "Function (const FPatchSource)",
    "insertText": "GetModSourceEnv()"
  },
  {
    "label": "FADEnvelope()",
    "kind": "Method",
    "detail": "Function (} } ; int32 VoiceId ; float CurrentEnvelopeValue ; float CurrentEnvelopeBiasValue ; float SampleRate ; float AttackTimeMSec ; float DecayTimeMsec ; float SustainGain ; float ReleaseTimeMsec ; float ShutdownTimeMsec ; float ShutdownDelta ; float Depth ; float BiasDepth ; float OutputGain ; FEnvData AttackData ; FEnvData DecayData ; FEnvData ReleaseData ; EEnvelopeState CurrentState ; FModulationMatrix* ModMatrix ; FPatchSource EnvSource ; FPatchSource BiasedEnvSource ; uint8 bIsSimulatingAnalog : 1 ; uint8 bIsLegatoMode : 1 ; uint8 bIsRetriggerMode : 1 ; uint8 bChanged : 1 ; uint8 bInvert : 1 ; uint8 bBiasInvert : 1 ; uint8 bCurrentCycleIsADOnly : 1 ; } ; class FADEnvelope { public :)",
    "insertText": "FADEnvelope()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(int32 InSampleRate)"
  },
  {
    "label": "SetAttackTimeSeconds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttackTimeSeconds(float InAttackTimeSeconds)"
  },
  {
    "label": "SetDecayTimeSeconds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDecayTimeSeconds(float InReleaseTimeSeconds)"
  },
  {
    "label": "SetAttackCurveFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttackCurveFactor(float InAttackCurve)"
  },
  {
    "label": "SetDecayCurveFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDecayCurveFactor(float InDecayCurve)"
  },
  {
    "label": "SetLooping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLooping(bool bInIsLooping)"
  },
  {
    "label": "IsLooping()",
    "kind": "Method",
    "detail": "Function (bIsLooping = bInIsLooping ; } bool)",
    "insertText": "IsLooping()"
  },
  {
    "label": "GetNextEnvelopeOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNextEnvelopeOut(int32 StartFrame, int32 EndFrame, TArray<int32>& OutFinishedFrames, Audio::AlignedFloatBuffer& OutEnvelope)"
  },
  {
    "label": "GetNextEnvelopeOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNextEnvelopeOut(int32 StartFrame, int32 EndFrame, TArray<int32>& OutFinishedFrames, float& OutEnvelope)"
  },
  {
    "label": "GetNextEnvelopeOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNextEnvelopeOut(float& OutEnvelope)"
  }
]