[
  {
    "label": "FMediaPlayerFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaPlayerFacade"
  },
  {
    "label": "IMediaPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaPlayer"
  },
  {
    "label": "IMediaTextureSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaTextureSample"
  },
  {
    "label": "UMediaTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMediaTexture"
  },
  {
    "label": "FGenerateMipsStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenerateMipsStruct"
  },
  {
    "label": "FPriorSamples",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPriorSamples"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMediaTextureResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaTextureResource"
  },
  {
    "label": "FRenderParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderParams"
  },
  {
    "label": "FMediaTextureResource()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Queue . h \" # include \" Math / Color . h \" # include \" MediaSampleSource . h \" # include \" Misc / Guid . h \" # include \" Misc / Timespan . h \" # include \" Templates / RefCounting . h \" # include \" Templates / SharedPointer . h \" # include \" TextureResource . h \" # include \" UnrealClient . h \" # include \" IMediaTimeSource . h \" # include \" RHIResources . h \" # include \" Async / Async . h \" # include \" RenderingThread . h \" # include \" RendererInterface . h \" # include \" ColorManagement / ColorSpace . h \" class FMediaPlayerFacade ; class IMediaPlayer ; class IMediaTextureSample ; class UMediaTexture ; struct FGenerateMipsStruct ; struct FPriorSamples ; enum class EMediaTextureSinkFormat ; enum class EMediaTextureSinkMode ; class FMediaTextureResource : public FRenderTarget,public FTextureResource { public :)",
    "insertText": "FMediaTextureResource(UMediaTexture& InOwner, FIntPoint& InOwnerDim, SIZE_T& InOwnerSize, FLinearColor InClearColor, FGuid InTextureGuid, bool bEnableGenMips, uint8 InNumMips, UE::Color::EColorSpace OverrideColorSpaceType)"
  },
  {
    "label": "FMediaTextureResource()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMediaTextureResource()"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (} public : struct FRenderParams { bool CanClear ; FLinearColor ClearColor ; FGuid CurrentGuid ; FGuid PreviousGuid ; float Rate ; TWeakPtr<FMediaTextureSampleSource,ESPMode::ThreadSafe> SampleSource ; uint8 NumMips ; FMediaTimeStamp Time ; TSharedPtr<IMediaTextureSample,ESPMode::ThreadSafe> TextureSample ; } ; void)",
    "insertText": "Render(const FRenderParams& Params)"
  },
  {
    "label": "FlushPendingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPendingData()"
  },
  {
    "label": "SetJustInTimeRenderParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJustInTimeRenderParams(const FRenderParams& InJustInTimeRenderParams)"
  },
  {
    "label": "ResetJustInTimeRenderParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetJustInTimeRenderParams()"
  },
  {
    "label": "JustInTimeRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JustInTimeRender()"
  },
  {
    "label": "GetSizeXY()",
    "kind": "Method",
    "detail": "Function (public : FIntPoint)",
    "insertText": "GetSizeXY()"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (public : FString)",
    "insertText": "GetFriendlyName()"
  },
  {
    "label": "GetSizeX()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSizeX()"
  },
  {
    "label": "GetSizeY()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSizeY()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "ClearTexture()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ClearTexture(FRHICommandListImmediate& RHICmdList, const FLinearColor& ClearColor, bool SrgbOutput)"
  },
  {
    "label": "ConvertSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertSample(FRHICommandListImmediate& RHICmdList, const TSharedPtr<IMediaTextureSample, ESPMode::ThreadSafe>& Sample, const FLinearColor& ClearColor, uint8 InNumMips)"
  },
  {
    "label": "ConvertTextureToOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertTextureToOutput(FRHICommandListImmediate& RHICmdList, FRHITexture* InputTexture, const TSharedPtr<IMediaTextureSample, ESPMode::ThreadSafe>& Sample)"
  },
  {
    "label": "CopySample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySample(FRHICommandListImmediate& RHICmdList, const TSharedPtr<IMediaTextureSample, ESPMode::ThreadSafe>& Sample, const FLinearColor& ClearColor, uint8 InNumMips, const FGuid & TextureGUID)"
  },
  {
    "label": "UpdateResourceSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResourceSize()"
  },
  {
    "label": "UpdateTextureReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextureReference(FRHICommandListImmediate& RHICmdList, FRHITexture* NewTexture)"
  },
  {
    "label": "CreateIntermediateRenderTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateIntermediateRenderTarget(FRHICommandListImmediate& RHICmdList, const FIntPoint & InDim, EPixelFormat InPixelFormat, bool bInSRGB, const FLinearColor & InClearColor, uint8 InNumMips, bool bNeedsUAVSupport)"
  },
  {
    "label": "CacheNextAvailableSampleTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheNextAvailableSampleTime(const TSharedPtr<FMediaTextureSampleSource, ESPMode::ThreadSafe>& InSampleQueue)"
  },
  {
    "label": "SetupSampler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupSampler()"
  },
  {
    "label": "CopyFromExternalTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFromExternalTexture(FRHICommandListImmediate& RHICmdList, const TSharedPtr <IMediaTextureSample, ESPMode::ThreadSafe>& Sample, const FGuid & TextureGUID)"
  },
  {
    "label": "RequiresConversion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresConversion(const TSharedPtr<IMediaTextureSample, ESPMode::ThreadSafe>& Sample, uint8 numMips)"
  },
  {
    "label": "RequiresConversion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresConversion(const FTextureRHIRef& SampleTexture, const FIntPoint & OutputDim, uint8 numMips)"
  },
  {
    "label": "GetColorSpaceConversionMatrixForSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetColorSpaceConversionMatrixForSample(const TSharedPtr<IMediaTextureSample, ESPMode::ThreadSafe> Sample, FMatrix44f& ColorSpaceMtx)"
  }
]