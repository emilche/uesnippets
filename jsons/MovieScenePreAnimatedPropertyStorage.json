[
  {
    "label": "TPreAnimatedPropertyValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPreAnimatedPropertyValue"
  },
  {
    "label": "TPreAnimatedPropertyTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPreAnimatedPropertyTraits"
  },
  {
    "label": "TPreAnimatedPropertyStorageImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPreAnimatedPropertyStorageImpl"
  },
  {
    "label": "TPreAnimatedPropertyValue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Evaluation / MovieSceneEvaluationKey . h \" # include \" UObject / ObjectKey . h \" # include \" UObject / Object . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieScenePropertySystemTypes . h \" # include \" EntitySystem / MovieScenePropertyRegistry . h \" # include \" EntitySystem / BuiltInComponentTypes . h \" # include \" EntitySystem / MovieSceneEntitySystemTask . h \" # include \" EntitySystem / MovieScenePropertyBinding . h \" # include \" Evaluation / PreAnimatedState / MovieSceneRestoreStateParams . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedStorageID . inl \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedObjectStorage . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedCaptureSources . h \" namespace UE { namespace MovieScene { template<StorageType,. . . MetaDataTypes> struct TPreAnimatedPropertyValue {)",
    "insertText": "TPreAnimatedPropertyValue()"
  },
  {
    "label": "TPreAnimatedPropertyValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPreAnimatedPropertyValue(typename TCallTraits<MetaDataTypes>::ParamType... InMetaData) : MetaData(InMetaData...)"
  },
  {
    "label": "RestorePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (} StorageType Data ; TVariant<const FCustomPropertyAccessor*,uint16,TSharedPtr<FTrackInstancePropertyBindings>> Binding ; TTuple<MetaDataTypes . . .> MetaData ; } ; template<StorageType> struct TPreAnimatedPropertyValue<StorageType> { StorageType Data ; TVariant<const FCustomPropertyAccessor*,uint16,TSharedPtr<FTrackInstancePropertyBindings>> Binding ; } ; template<PropertyTraits,MetaDataIndices,. . . MetaDataTypes> struct TPreAnimatedPropertyTraits ; template<PropertyTraits,int . . . MetaDataIndices,. . . MetaDataTypes> struct TPreAnimatedPropertyTraits<PropertyTraits,TIntegerSequence<int,MetaDataIndices . . .>,MetaDataTypes . . .> : FBoundObjectPreAnimatedStateTraits { using KeyType = TTuple<FObjectKey,FName> ; using StorageType = TPreAnimatedPropertyValue<PropertyTraits::StorageType,MetaDataTypes . . .> ; void)",
    "insertText": "RestorePreAnimatedValue(const KeyType& InKey, StorageType& CachedValue, const FRestoreStateParams& Params)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UObject* Object = InKey .)",
    "insertText": "Get().ResolveObjectPtr()"
  },
  {
    "label": "SetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPropertyValue(Object, CachedValue.MetaData.template Get<MetaDataIndices>()..., *FastOffset, CachedValue.Data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(const TSharedPtr<FTrackInstancePropertyBindings>* Bindings = CachedValue.Binding.template TryGet<TSharedPtr<FTrackInstancePropertyBindings>>())"
  },
  {
    "label": "SetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPropertyValue(Object, CachedValue.MetaData.template Get<MetaDataIndices>()..., Bindings->Get(), CachedValue.Data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(const FCustomPropertyAccessor* CustomAccessor = CachedValue.Binding.template Get<const FCustomPropertyAccessor*>())"
  },
  {
    "label": "SetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPropertyValue(Object, CachedValue.MetaData.template Get<MetaDataIndices>()..., *CustomAccessor, CachedValue.Data)"
  },
  {
    "label": "SetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPropertyValue(Object, *FastOffset, CachedValue.Data)"
  },
  {
    "label": "SetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPropertyValue(Object, Bindings->Get(), CachedValue.Data)"
  },
  {
    "label": "SetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPropertyValue(Object, *CustomAccessor, CachedValue.Data)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } } ; template<PropertyTraits,MetaDataTypes,MetaDataIndices> struct TPreAnimatedPropertyStorageImpl ; template<PropertyTraits,. . . MetaDataTypes,int . . . MetaDataIndices> struct TPreAnimatedPropertyStorageImpl<PropertyTraits,TPropertyMetaData<MetaDataTypes . . .>,TIntegerSequence<int,MetaDataIndices . . .>> : TPreAnimatedStateStorage<TPreAnimatedPropertyTraits<PropertyTraits,TIntegerSequence<int,MetaDataIndices . . .>,MetaDataTypes . . .>>,IPreAnimatedObjectPropertyStorage { using StorageTraits = TPreAnimatedPropertyTraits<PropertyTraits,TIntegerSequence<int,MetaDataIndices . . .>,MetaDataTypes . . .> ; using StorageType = StorageTraits::StorageType ;)",
    "insertText": "static_assert(StorageTraits::SupportsGrouping, \"Pre-animated storage for properties should support grouping by object\")"
  },
  {
    "label": "TPreAnimatedPropertyStorageImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TPreAnimatedPropertyStorageImpl(const FPropertyDefinition& InPropertyDefinition) : MetaDataComponents(InPropertyDefinition.MetaDataTypes)"
  },
  {
    "label": "GetAccessors()",
    "kind": "Method",
    "detail": "Function (CustomAccessors = InPropertyDefinition . CustomPropertyRegistration ->)",
    "insertText": "GetAccessors()"
  },
  {
    "label": "AsPropertyStorage()",
    "kind": "Method",
    "detail": "Function (} } IPreAnimatedObjectPropertyStorage*)",
    "insertText": "AsPropertyStorage()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 Num = Params . Num ; const bool bWantsRestore = Params . bWantsRestoreState ;)",
    "insertText": "if(!this->ParentExtension->IsCapturingGlobalState() && !bWantsRestore)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UObject* BoundObject = BoundObjects [ Index ] ;)",
    "insertText": "if(!BoundObject)"
  },
  {
    "label": "MakeEntry()",
    "kind": "Method",
    "detail": "Function (continue ; } FPreAnimatedStateEntry Entry = this ->)",
    "insertText": "MakeEntry(BoundObject, PropertyBindings[Index].PropertyPath)"
  },
  {
    "label": "BeginTrackingEntity()",
    "kind": "Method",
    "detail": "Function (EntityMetaData ->)",
    "insertText": "BeginTrackingEntity(Entry, EntityIDs[Index], InstanceHandles[Index], bWantsRestore)"
  },
  {
    "label": "CachePreAnimatedValues()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CachePreAnimatedValues(const FCachePreAnimatedValueParams& Params, FEntityAllocationProxy Item, TRead<UObject*> BoundObjects, TRead<FMovieScenePropertyBinding> PropertyBindings, FThreeWayAccessor Properties)"
  },
  {
    "label": "GetAllocation()",
    "kind": "Method",
    "detail": "Function (const FEntityAllocation* Allocation = Item .)",
    "insertText": "GetAllocation()"
  },
  {
    "label": "MetaData()",
    "kind": "Method",
    "detail": "Function (TTuple<TComponentReader<MetaDataTypes> . . .>)",
    "insertText": "MetaData(Allocation->ReadComponents(MetaDataComponents[MetaDataIndices].template ReinterpretCast<MetaDataTypes>())...)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const uint16* Fast = Properties .)",
    "insertText": "Get()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 Num = Allocation ->)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(!this->ShouldTrackCaptureSource(EPreAnimatedCaptureSourceTracking::CacheIfTracked, BoundObject, PropertyBindings[Index].PropertyPath))"
  },
  {
    "label": "TrackCaptureSource()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "TrackCaptureSource(Entry, EPreAnimatedCaptureSourceTracking::CacheIfTracked)"
  },
  {
    "label": "GetStorageRequirement()",
    "kind": "Method",
    "detail": "Function (EPreAnimatedStorageRequirement StorageRequirement = this -> ParentExtension ->)",
    "insertText": "GetStorageRequirement(Entry)"
  },
  {
    "label": "NewValue()",
    "kind": "Method",
    "detail": "Function (StorageType)",
    "insertText": "NewValue(MetaData.template Get<MetaDataIndices>()[Index]...)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (NewValue . Binding . template Set<)",
    "insertText": "uint16(Fast[Index])"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectPropertyValue(BoundObjects[Index], MetaData.template Get<MetaDataIndices>()[Index]..., Fast[Index], NewValue.Data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Custom)"
  },
  {
    "label": "FCustomPropertyAccessor()",
    "kind": "Method",
    "detail": "Function (const FCustomPropertyAccessor& Accessor = this -> CustomAccessors [ Custom [ Index ] . Value ] ; NewValue . Binding . template Set<const)",
    "insertText": "FCustomPropertyAccessor(&Accessor)"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectPropertyValue(BoundObjects[Index], MetaData.template Get<MetaDataIndices>()[Index]..., Accessor, NewValue.Data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Slow)"
  },
  {
    "label": "FTrackInstancePropertyBindings()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FTrackInstancePropertyBindings>& Bindings = Slow [ Index ] ; NewValue . Binding . template Set<TSharedPtr<)",
    "insertText": "FTrackInstancePropertyBindings(Bindings)"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectPropertyValue(BoundObjects[Index], MetaData.template Get<MetaDataIndices>()[Index]..., Bindings.Get(), NewValue.Data)"
  },
  {
    "label": "AssignPreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (} this ->)",
    "insertText": "AssignPreAnimatedValue(Entry.ValueHandle.StorageIndex, StorageRequirement, MoveTemp(NewValue))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Params.bForcePersist)"
  },
  {
    "label": "ForciblyPersistStorage()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "ForciblyPersistStorage(Entry.ValueHandle.StorageIndex)"
  }
]