[
  {
    "label": "FGPUScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUScene"
  },
  {
    "label": "FInstanceCullingDrawParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceCullingDrawParams"
  },
  {
    "label": "FSimpleMeshDrawCommandPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleMeshDrawCommandPass"
  },
  {
    "label": "FSimpleMeshDrawCommandPass()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MeshMaterialShader . h \" # include \" SceneUtils . h \" # include \" MeshPassProcessor . h \" # include \" InstanceCulling / InstanceCullingContext . h \" # include \" RenderGraphBuilder . h \" class FGPUScene ; class FInstanceCullingDrawParams ; class FSimpleMeshDrawCommandPass { public :)",
    "insertText": "FSimpleMeshDrawCommandPass(const FSceneView& View, FInstanceCullingManager* InstanceCullingManager, bool bEnableStereo = false)"
  },
  {
    "label": "BuildRenderingCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildRenderingCommands(FRDGBuilder& GraphBuilder, const FSceneView& View, const FGPUScene& GPUScene, FInstanceCullingDrawParams& OutInstanceCullingDrawParams)"
  },
  {
    "label": "BuildRenderingCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildRenderingCommands(FRDGBuilder& GraphBuilder, const FSceneView& View, const FScene& Scene, FInstanceCullingDrawParams& OutInstanceCullingDrawParams)"
  },
  {
    "label": "SubmitDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitDraw(FRHICommandList& RHICmdList, const FInstanceCullingDrawParams& InstanceCullingDrawParams)"
  },
  {
    "label": "GetDynamicPassMeshDrawListContext()",
    "kind": "Method",
    "detail": "Function (FDynamicPassMeshDrawListContext*)",
    "insertText": "GetDynamicPassMeshDrawListContext()"
  },
  {
    "label": "FSimpleMeshDrawCommandPass()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FSimpleMeshDrawCommandPass()"
  },
  {
    "label": "FSimpleMeshDrawCommandPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleMeshDrawCommandPass(const FSimpleMeshDrawCommandPass&)"
  },
  {
    "label": "AddSimpleMeshPass()",
    "kind": "Method",
    "detail": "Function (FMeshCommandOneFrameArray VisibleMeshDrawCommands ; FInstanceCullingContext InstanceCullingContext ; FGraphicsMinimalPipelineStateSet GraphicsMinimalPipelineStateSet ; FDynamicMeshDrawCommandStorage DynamicMeshDrawCommandStorage ; bool bNeedsInitialization = false ; FDynamicPassMeshDrawListContext DynamicPassMeshDrawListContext ; bool bSupportsScenePrimitives = false ; bool bUsingStereo = false ; bool bWasDrawCommandsSetup = false ; uint32 InstanceFactor = 1 ; FRHIBuffer* PrimitiveIdVertexBuffer = nullptr ; } ; template<PassParametersType,AddMeshBatchesCallbackLambdaType,PassPrologueLambdaType> void)",
    "insertText": "AddSimpleMeshPass(FRDGBuilder& GraphBuilder, PassParametersType* PassParametersIn, const FScene* Scene, const FSceneView &View, FInstanceCullingManager* InstanceCullingManager, FRDGEventName&& PassName, const ERDGPassFlags& PassFlags, AddMeshBatchesCallbackLambdaType AddMeshBatchesCallback, PassPrologueLambdaType PassPrologueCallback, bool bAllowIndirectArgsOverride=true)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(AddSimpleMeshPass)"
  },
  {
    "label": "PassParametersType()",
    "kind": "Method",
    "detail": "Function (PassParametersType* PassParameters = GraphBuilder . AllocParameters<)",
    "insertText": "PassParametersType()"
  },
  {
    "label": "FSimpleMeshDrawCommandPass()",
    "kind": "Method",
    "detail": "Function (* PassParameters =* PassParametersIn ; FSimpleMeshDrawCommandPass* SimpleMeshDrawCommandPass = GraphBuilder . AllocObject<)",
    "insertText": "FSimpleMeshDrawCommandPass(View, InstanceCullingManager)"
  },
  {
    "label": "AddMeshBatchesCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeshBatchesCallback(SimpleMeshDrawCommandPass->GetDynamicPassMeshDrawListContext())"
  },
  {
    "label": "BuildRenderingCommands()",
    "kind": "Method",
    "detail": "Function (SimpleMeshDrawCommandPass ->)",
    "insertText": "BuildRenderingCommands(GraphBuilder, View, *Scene, PassParameters->InstanceCullingDrawParams)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bAllowIndirectArgsOverride)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (PassParameters -> InstanceCullingDrawParams . DrawIndirectArgsBuffer = nullptr ; } GraphBuilder .)",
    "insertText": "AddPass(MoveTemp(PassName), PassParameters, PassFlags, [SimpleMeshDrawCommandPass, PassParameters, PassPrologueCallback](FRDGAsyncTask, FRHICommandList& RHICmdList) { PassPrologueCallback(RHICmdList); SimpleMeshDrawCommandPass->SubmitDraw(RHICmdList, PassParameters->InstanceCullingDrawParams); })"
  },
  {
    "label": "AddSimpleMeshPass()",
    "kind": "Method",
    "detail": "Function (} template<PassParametersType,AddMeshBatchesCallbackLambdaType> void)",
    "insertText": "AddSimpleMeshPass(FRDGBuilder& GraphBuilder, PassParametersType* PassParameters, const FScene* Scene, const FSceneView& View, FInstanceCullingManager *InstanceCullingManager, FRDGEventName&& PassName, const FIntRect& ViewPortRect, AddMeshBatchesCallbackLambdaType AddMeshBatchesCallback)"
  },
  {
    "label": "AddSimpleMeshPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSimpleMeshPass(GraphBuilder, PassParameters, Scene, View, InstanceCullingManager, MoveTemp(PassName), ERDGPassFlags::Raster, AddMeshBatchesCallback, [ViewPortRect](FRHICommandList& RHICmdList) { RHICmdList.SetViewport(static_cast<float>(ViewPortRect.Min.X), static_cast<float>(ViewPortRect.Min.Y), 0.0f, static_cast<float>(ViewPortRect.Max.X), static_cast<float>(ViewPortRect.Max.Y), 1.0f); })"
  },
  {
    "label": "AddSimpleMeshPass()",
    "kind": "Method",
    "detail": "Function (} template<PassParametersType,AddMeshBatchesCallbackLambdaType> void)",
    "insertText": "AddSimpleMeshPass(FRDGBuilder& GraphBuilder, PassParametersType* PassParameters, const FScene* Scene, const FSceneView& View, FInstanceCullingManager *InstanceCullingManager, FRDGEventName&& PassName, const FIntRect& ViewPortRect, bool bAllowIndirectArgsOverride, AddMeshBatchesCallbackLambdaType AddMeshBatchesCallback)"
  },
  {
    "label": "AddSimpleMeshPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSimpleMeshPass(GraphBuilder, PassParameters, Scene, View, InstanceCullingManager, MoveTemp(PassName), ERDGPassFlags::Raster, AddMeshBatchesCallback, [ViewPortRect](FRHICommandList& RHICmdList) { RHICmdList.SetViewport(static_cast<float>(ViewPortRect.Min.X), static_cast<float>(ViewPortRect.Min.Y), 0.0f, static_cast<float>(ViewPortRect.Max.X), static_cast<float>(ViewPortRect.Max.Y), 1.0f); }, bAllowIndirectArgsOverride)"
  },
  {
    "label": "AddSimpleMeshPass()",
    "kind": "Method",
    "detail": "Function (} template<PassParametersType,AddMeshBatchesCallbackLambdaType> void)",
    "insertText": "AddSimpleMeshPass(FRDGBuilder& GraphBuilder, PassParametersType* PassParameters, const FScene* Scene, const FSceneView& View, FInstanceCullingManager *InstanceCullingManager, FRDGEventName&& PassName, const FIntRect& ViewPortRect, const ERDGPassFlags &PassFlags, AddMeshBatchesCallbackLambdaType AddMeshBatchesCallback)"
  },
  {
    "label": "AddSimpleMeshPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSimpleMeshPass(GraphBuilder, PassParameters, Scene, View, InstanceCullingManager, MoveTemp(PassName), PassFlags, AddMeshBatchesCallback, [ViewPortRect](FRHICommandList& RHICmdList) { RHICmdList.SetViewport(ViewPortRect.Min.X, ViewPortRect.Min.Y, 0.0f, ViewPortRect.Max.X, ViewPortRect.Max.Y, 1.0f); })"
  },
  {
    "label": "AddSimpleMeshPass()",
    "kind": "Method",
    "detail": "Function (} template<PassParametersType,AddMeshBatchesCallbackLambdaType,PassPrologueLambdaType> void)",
    "insertText": "AddSimpleMeshPass(FRDGBuilder& GraphBuilder, PassParametersType* PassParametersIn, const FGPUScene& GPUScene, const FSceneView& View, FInstanceCullingManager* InstanceCullingManager, FRDGEventName&& PassName, const ERDGPassFlags& PassFlags, AddMeshBatchesCallbackLambdaType AddMeshBatchesCallback, PassPrologueLambdaType PassPrologueCallback)"
  },
  {
    "label": "BuildRenderingCommands()",
    "kind": "Method",
    "detail": "Function (SimpleMeshDrawCommandPass ->)",
    "insertText": "BuildRenderingCommands(GraphBuilder, View, GPUScene, PassParameters->InstanceCullingDrawParams)"
  },
  {
    "label": "AddSimpleMeshPass()",
    "kind": "Method",
    "detail": "Function (} template<PassParametersType,AddMeshBatchesCallbackLambdaType> void)",
    "insertText": "AddSimpleMeshPass(FRDGBuilder& GraphBuilder, PassParametersType* PassParameters, const FGPUScene& GPUScene, const FSceneView& View, FInstanceCullingManager* InstanceCullingManager, FRDGEventName&& PassName, const FIntRect& ViewPortRect, AddMeshBatchesCallbackLambdaType AddMeshBatchesCallback)"
  },
  {
    "label": "AddSimpleMeshPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSimpleMeshPass(GraphBuilder, PassParameters, GPUScene, View, InstanceCullingManager, MoveTemp(PassName), ERDGPassFlags::Raster, AddMeshBatchesCallback, [ViewPortRect](FRHICommandList& RHICmdList) { RHICmdList.SetViewport(ViewPortRect.Min.X, ViewPortRect.Min.Y, 0.0f, ViewPortRect.Max.X, ViewPortRect.Max.Y, 1.0f); })"
  },
  {
    "label": "AddSimpleMeshPass()",
    "kind": "Method",
    "detail": "Function (} template<PassParametersType,AddMeshBatchesCallbackLambdaType> void)",
    "insertText": "AddSimpleMeshPass(FRDGBuilder& GraphBuilder, PassParametersType* PassParameters, const FGPUScene& GPUScene, const FSceneView& View, FInstanceCullingManager* InstanceCullingManager, FRDGEventName&& PassName, const FIntRect& ViewPortRect, const ERDGPassFlags& PassFlags, AddMeshBatchesCallbackLambdaType AddMeshBatchesCallback)"
  },
  {
    "label": "AddSimpleMeshPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSimpleMeshPass(GraphBuilder, PassParameters, GPUScene, View, InstanceCullingManager, MoveTemp(PassName), PassFlags, AddMeshBatchesCallback, [ViewPortRect](FRHICommandList& RHICmdList) { RHICmdList.SetViewport(ViewPortRect.Min.X, ViewPortRect.Min.Y, 0.0f, ViewPortRect.Max.X, ViewPortRect.Max.Y, 1.0f); })"
  },
  {
    "label": "AddSimpleMeshPass()",
    "kind": "Method",
    "detail": "Function (} # if 0 template<PassParametersType,AddMeshBatchesCallbackLambdaType,PassPrologueLambdaType> void)",
    "insertText": "AddSimpleMeshPass(FRDGBuilder& GraphBuilder, PassParametersType* PassParameters, const FScene* Scene, const FSceneView& View, FRDGEventName&& PassName, AddMeshBatchesCallbackLambdaType AddMeshBatchesCallback)"
  },
  {
    "label": "AddSimpleMeshPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSimpleMeshPass(GraphBuilder, PassParameters, Scene, View, MoveTemp(PassName), View.ViewRect, AddMeshBatchesCallback)"
  }
]