[
  {
    "label": "SListView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SListView"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "STableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableRow"
  },
  {
    "label": "FSlateAccessibleTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateAccessibleTableRow"
  },
  {
    "label": "SMultiColumnTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultiColumnTableRow"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" ITableRow . h \" # include \" Framework / Views / ITypedTableView . h \" # include \" Framework / Views / TableViewTypeTraits . h \" # include \" Input / DragAndDrop . h \" # include \" Input / Events . h \" # include \" Input / Reply . h \" # include \" Layout / Geometry . h \" # include \" Layout / Margin . h \" # include \" Misc / Attribute . h \" # include \" Rendering / DrawElements . h \" # include \" Styling / CoreStyle . h \" # include \" Styling / SlateColor . h \" # include \" Styling / SlateTypes . h \" # include \" Types / SlateStructs . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / SExpanderArrow . h \" # include \" Widgets / Views / SHeaderRow . h \" # include \" Widgets / Views / STableViewBase . h \" # if WITH_ACCESSIBILITY # include \" GenericPlatform / Accessibility / GenericAccessibleInterfaces . h \" # include \" Widgets / Accessibility / SlateCoreAccessibleWidgets . h \" # include \" Widgets / Accessibility / SlateAccessibleWidgetCache . h \" # include \" Widgets / Accessibility / SlateAccessibleMessageHandler . h \" # endif template<ItemType> class SListView ; enum class ETableRowSignalSelectionMode { Deferred,Instantaneous } ; enum class EItemDropZone { AboveItem,OntoItem,BelowItem } ; template<ItemType> class SListView ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnTableRowDragEnter, FDragDropEvent const&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnTableRowDragLeave, FDragDropEvent const&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FReply, FOnTableRowDrop, FDragDropEvent const&)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (template<ItemType> class STableRow : public ITableRow,public SBorder {)",
    "insertText": "static_assert(TIsValidListItem<ItemType>::Value, \"Item type T must be UObjectBase*, TObjectPtr<>, TWeakObjectPtr<>, TSharedRef<>, or TSharedPtr<>.\")"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_ThreeParams()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_DELEGATE_RetVal_ThreeParams(TOptional<EItemDropZone>, FOnCanAcceptDrop, const FDragDropEvent&, EItemDropZone, ItemType)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_ThreeParams(FReply, FOnAcceptDrop, const FDragDropEvent&, EItemDropZone, ItemType)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_EightParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_EightParams(int32, FOnPaintDropIndicator, EItemDropZone, const FPaintArgs&, const FGeometry&, const FSlateRect&, FSlateWindowElementList&, int32, const FWidgetStyle&, bool)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_BEGIN_ARGS(STableRow< ItemType > ) : _Style( &FCoreStyle::Get().GetWidgetStyle<FTableRowStyle>(\"TableView.Row\") ) , _ExpanderStyleSet( &FCoreStyle::Get() ) , _Padding( FMargin(0) ) , _ShowSelection( true ) , _ShowWires( false ) , _bAllowPreselectedItemActivation(false) , _SignalSelectionMode( ETableRowSignalSelectionMode::Deferred ) , _Content()"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FTableRowStyle, Style ) SLATE_ARGUMENT(const ISlateStyle*, ExpanderStyleSet) SLATE_EVENT( FOnCanAcceptDrop, OnCanAcceptDrop ) SLATE_EVENT( FOnAcceptDrop, OnAcceptDrop ) SLATE_EVENT( FOnPaintDropIndicator, OnPaintDropIndicator ) SLATE_EVENT( FOnDragDetected, OnDragDetected ) SLATE_EVENT( FOnTableRowDragEnter, OnDragEnter ) SLATE_EVENT( FOnTableRowDragLeave, OnDragLeave ) SLATE_EVENT( FOnTableRowDrop, OnDrop ) SLATE_ATTRIBUTE( FMargin, Padding ) SLATE_ARGUMENT( bool, ShowSelection ) SLATE_ARGUMENT( bool, ShowWires) SLATE_ARGUMENT( bool, bAllowPreselectedItemActivation) SLATE_ARGUMENT( ETableRowSignalSelectionMode , SignalSelectionMode) SLATE_DEFAULT_SLOT( typename STableRow<ItemType>::FArguments, Content ) SLATE_END_ARGS() void Construct(const typename STableRow<ItemType>::FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "ConstructInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructInternal(InArgs, InOwnerTableView)"
  },
  {
    "label": "ConstructChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructChildren(InOwnerTableView->TableViewMode, InArgs._Padding, InArgs._Content.Widget)"
  },
  {
    "label": "ConstructChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConstructChildren(ETableViewMode::Type InOwnerTableMode, const TAttribute<FMargin>& InPadding, const TSharedRef<SWidget>& InContent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> Content = InContent ; InnerContentSlot = nullptr ;)",
    "insertText": "if(InOwnerTableMode == ETableViewMode::List || InOwnerTableMode == ETableViewMode::Tile)"
  },
  {
    "label": "Padding()",
    "kind": "Method",
    "detail": "Function (this -> ChildSlot .)",
    "insertText": "Padding(InPadding)"
  },
  {
    "label": "AsSlot()",
    "kind": "Method",
    "detail": "Function (InnerContentSlot =& ChildSlot .)",
    "insertText": "AsSlot()"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} else { SHorizontalBox::FSlot* InnerContentSlotNativePtr = nullptr ; this -> ChildSlot [)",
    "insertText": "SNew(SHorizontalBox) + SHorizontalBox::Slot() .AutoWidth() .HAlign(HAlign_Right) .VAlign(VAlign_Fill) [ SAssignNew(ExpanderArrowWidget, SExpanderArrow, SharedThis(this) ) .StyleSet(ExpanderStyleSet) .ShouldDrawWires(bShowWires) ] + SHorizontalBox::Slot() .FillWidth(1) .Expose( InnerContentSlotNativePtr ) .Padding( InPadding)"
  },
  {
    "label": "FSlateAccessibleTableRow()",
    "kind": "Method",
    "detail": "Function (InnerContentSlot = InnerContentSlotNativePtr ; } } # if WITH_ACCESSIBILITY protected : class FSlateAccessibleTableRow ; class FSlateAccessibleTableRow : public FSlateAccessibleWidget,public IAccessibleTableRow { public :)",
    "insertText": "FSlateAccessibleTableRow(TWeakPtr<SWidget> InWidget, EAccessibleWidgetType InWidgetType) : FSlateAccessibleWidget(InWidget, InWidgetType)"
  },
  {
    "label": "AsTableRow()",
    "kind": "Method",
    "detail": "Function (} IAccessibleTableRow*)",
    "insertText": "AsTableRow()"
  },
  {
    "label": "ItemType()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<STableRow<ItemType>> TableRow = StaticCastSharedPtr<STableRow<)",
    "insertText": "ItemType(Widget.Pin())"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITypedTableView<ItemType>> OwnerTable = TableRow -> OwnerTablePtr .)",
    "insertText": "Pin().ToSharedRef()"
  },
  {
    "label": "AsWidget()",
    "kind": "Method",
    "detail": "Function (const bool bIsActive = OwnerTable ->)",
    "insertText": "AsWidget()->HasKeyboardFocus()"
  },
  {
    "label": "Private_IsItemSelected()",
    "kind": "Method",
    "detail": "Function (const ItemType& MyItem =* MyItemPtr ; const bool bIsSelected = OwnerTable ->)",
    "insertText": "Private_IsItemSelected(MyItem)"
  },
  {
    "label": "Private_ClearSelection()",
    "kind": "Method",
    "detail": "Function (OwnerTable ->)",
    "insertText": "Private_ClearSelection()"
  },
  {
    "label": "Private_SetItemSelection()",
    "kind": "Method",
    "detail": "Function (OwnerTable ->)",
    "insertText": "Private_SetItemSelection(MyItem, true, true)"
  },
  {
    "label": "Private_SignalSelectionChanged()",
    "kind": "Method",
    "detail": "Function (OwnerTable ->)",
    "insertText": "Private_SignalSelectionChanged(ESelectInfo::Direct)"
  },
  {
    "label": "AddToSelection()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "AddToSelection()"
  },
  {
    "label": "RemoveFromSelection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveFromSelection()"
  },
  {
    "label": "IsSelected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSelected()"
  },
  {
    "label": "GetOwningTable()",
    "kind": "Method",
    "detail": "Function (} return false ; } TSharedPtr<IAccessibleWidget>)",
    "insertText": "GetOwningTable()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget> OwningTableWidget = TableRow -> OwnerTablePtr .)",
    "insertText": "Pin()->AsWidget()"
  },
  {
    "label": "CreateAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } } ; public : TSharedRef<FSlateAccessibleWidget>)",
    "insertText": "CreateAccessibleWidget()"
  },
  {
    "label": "FSlateAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (EAccessibleWidgetType WidgetType = EAccessibleWidgetType::ListItem ; return MakeShareable<)",
    "insertText": "FSlateAccessibleWidget(new STableRow<ItemType>::FSlateAccessibleTableRow(SharedThis(this), WidgetType))"
  },
  {
    "label": "GetDropIndicatorBrush()",
    "kind": "Method",
    "detail": "Function (} # endif const FSlateBrush*)",
    "insertText": "GetDropIndicatorBrush(EItemDropZone InItemDropZone)"
  },
  {
    "label": "MakeBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeBox(OutDrawElements, LayerId++, AllottedGeometry.ToPaintGeometry(), &Style->SelectorFocusedBrush, ESlateDrawEffect::None, Style->SelectorFocusedBrush.GetTint(InWidgetStyle) * InWidgetStyle.GetColorAndOpacityTint())"
  },
  {
    "label": "PaintBorder()",
    "kind": "Method",
    "detail": "Function (} } return LayerId ; } int32)",
    "insertText": "PaintBorder(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "PaintDropIndicator()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "PaintDropIndicator(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnPaintDropIndicator()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "OnPaintDropIndicator(ItemDropZone.GetValue(), Args, AllottedGeometry, MyCullingRect, OutDrawElements, LayerId, InWidgetStyle, bParentEnabled)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (} } return LayerId ; } int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "PaintSelection()",
    "kind": "Method",
    "detail": "Function (LayerId =)",
    "insertText": "PaintSelection(Args, AllottedGeometry, MyCullingRect, OutDrawElements, LayerId, InWidgetStyle, bParentEnabled)"
  },
  {
    "label": "PaintBorder()",
    "kind": "Method",
    "detail": "Function (LayerId =)",
    "insertText": "PaintBorder(Args, AllottedGeometry, MyCullingRect, OutDrawElements, LayerId, InWidgetStyle, bParentEnabled)"
  },
  {
    "label": "PaintDropIndicator()",
    "kind": "Method",
    "detail": "Function (LayerId =)",
    "insertText": "PaintDropIndicator(Args, AllottedGeometry, MyCullingRect, OutDrawElements, LayerId, InWidgetStyle, bParentEnabled)"
  },
  {
    "label": "GetDropIndicatorBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush* DropIndicatorBrush =)",
    "insertText": "GetDropIndicatorBrush(InItemDropZone)"
  },
  {
    "label": "MakeBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeBox(OutDrawElements, LayerId++, AllottedGeometry.ToPaintGeometry(), DropIndicatorBrush, ESlateDrawEffect::None, DropIndicatorBrush->GetTint(InWidgetStyle) * InWidgetStyle.GetColorAndOpacityTint())"
  },
  {
    "label": "LocalSize()",
    "kind": "Method",
    "detail": "Function (} else { const FVector2f)",
    "insertText": "LocalSize(AllottedGeometry.GetLocalSize())"
  },
  {
    "label": "Pivot()",
    "kind": "Method",
    "detail": "Function (const FVector2f)",
    "insertText": "Pivot(LocalSize * 0.5f)"
  },
  {
    "label": "RotatedLocalSize()",
    "kind": "Method",
    "detail": "Function (const FVector2f)",
    "insertText": "RotatedLocalSize(LocalSize.Y, LocalSize.X)"
  },
  {
    "label": "RotatedTransform()",
    "kind": "Method",
    "detail": "Function (FSlateLayoutTransform)",
    "insertText": "RotatedTransform(Pivot - RotatedLocalSize * 0.5f)"
  },
  {
    "label": "MakeRotatedBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeRotatedBox(OutDrawElements, LayerId++, AllottedGeometry.ToPaintGeometry(RotatedLocalSize, RotatedTransform), DropIndicatorBrush, ESlateDrawEffect::None, -UE_HALF_PI, RotatedLocalSize * 0.5f, FSlateDrawElement::RelativeToElement, DropIndicatorBrush->GetTint(InWidgetStyle) * InWidgetStyle.GetColorAndOpacityTint())"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (} return LayerId ; } FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "Private_OnItemDoubleClicked()",
    "kind": "Method",
    "detail": "Function (const bool bWasHandled = OwnerTable ->)",
    "insertText": "Private_OnItemDoubleClicked(*MyItemPtr)"
  },
  {
    "label": "ToggleExpansion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleExpansion()"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Handled()"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "Unhandled()"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bChangedSelectionOnMouseDown = false ; bDragWasDetected = false ;)",
    "insertText": "if(MouseEvent.GetEffectingButton() == EKeys::LeftMouseButton)"
  },
  {
    "label": "GetSelectionMode()",
    "kind": "Method",
    "detail": "Function (const ESelectionMode::Type SelectionMode =)",
    "insertText": "GetSelectionMode()"
  },
  {
    "label": "Private_SelectRangeFromCurrentTo()",
    "kind": "Method",
    "detail": "Function (OwnerTable ->)",
    "insertText": "Private_SelectRangeFromCurrentTo(MyItem)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bChangedSelectionOnMouseDown = true ;)",
    "insertText": "if(SignalSelectionMode == ETableRowSignalSelectionMode::Instantaneous)"
  },
  {
    "label": "Private_SignalSelectionChanged()",
    "kind": "Method",
    "detail": "Function (OwnerTable ->)",
    "insertText": "Private_SignalSelectionChanged(ESelectInfo::OnMouseClick)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(MouseEvent.IsControlDown())"
  },
  {
    "label": "Private_SetItemSelection()",
    "kind": "Method",
    "detail": "Function (OwnerTable ->)",
    "insertText": "Private_SetItemSelection(MyItem, !bIsSelected, true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if((bAllowPreselectedItemActivation || !bIsSelected) && !bChangedSelectionOnMouseDown)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "Handled() .DetectDrag(SharedThis(this), EKeys::LeftMouseButton) .SetUserFocus(OwnerTable->AsWidget(), EFocusCause::Mouse) .CaptureMouse(SharedThis(this))"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ItemType()",
    "kind": "Method",
    "detail": "Function (TSharedRef<STableViewBase> OwnerTableViewBase = StaticCastSharedRef<SListView<)",
    "insertText": "ItemType(OwnerTable)"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (FReply Reply =)",
    "insertText": "Unhandled().ReleaseMouseCapture()"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (Reply =)",
    "insertText": "Handled().ReleaseMouseCapture()"
  },
  {
    "label": "IsUnderLocation()",
    "kind": "Method",
    "detail": "Function (} const bool bIsUnderMouse = MyGeometry .)",
    "insertText": "IsUnderLocation(MouseEvent.GetScreenSpacePosition())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} break ; case ESelectionMode::Multi : {)",
    "insertText": "if(!bChangedSelectionOnMouseDown && !MouseEvent.IsControlDown() && !MouseEvent.IsShiftDown())"
  },
  {
    "label": "Private_IsItemSelected()",
    "kind": "Method",
    "detail": "Function (const bool bIsSelected = OwnerTable ->)",
    "insertText": "Private_IsItemSelected(*MyItemPtr)"
  },
  {
    "label": "Private_SetItemSelection()",
    "kind": "Method",
    "detail": "Function (OwnerTable ->)",
    "insertText": "Private_SetItemSelection(*MyItemPtr, true, true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } break ; } })",
    "insertText": "if(const TObjectPtrWrapTypeOf<ItemType>* MyItemPtr = GetItemForThis(OwnerTable))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(bChangedSelectionOnMouseDown && !bDragWasDetected && (SignalSelectionMode == ETableRowSignalSelectionMode::Deferred))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return Reply ; } } else)",
    "insertText": "if(MouseEvent.GetEffectingButton() == EKeys::RightMouseButton && !OwnerTableViewBase->IsRightClickScrolling())"
  },
  {
    "label": "Private_OnItemRightClicked()",
    "kind": "Method",
    "detail": "Function (} OwnerTable ->)",
    "insertText": "Private_OnItemRightClicked(*MyItemPtr, MouseEvent)"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnTouchStarted(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (bProcessingSelectionTouch = true ; return)",
    "insertText": "Handled() .DetectDrag( SharedThis(this), EKeys::LeftMouseButton)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnTouchEnded(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SelectionMode == ESelectionMode::SingleToggle || SelectionMode == ESelectionMode::Multi)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(OwnerTable->Private_OnItemClicked(*MyItemPtr))"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (} } } return Reply ; } FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (bProcessingSelectionTouch = false ; return)",
    "insertText": "Handled().CaptureMouse( OwnerTablePtr.Pin()->AsWidget())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(HasMouseCapture())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bDragWasDetected = true ;)",
    "insertText": "if(bChangedSelectionOnMouseDown && SignalSelectionMode == ETableRowSignalSelectionMode::Deferred)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITypedTableView<ItemType>> OwnerTable = OwnerTablePtr .)",
    "insertText": "Pin()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(OnDragDetected_Handler.IsBound())"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnDragEnter(FGeometry const& MyGeometry, FDragDropEvent const& DragDropEvent)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (OnDragEnter_Handler .)",
    "insertText": "Execute(DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnDragLeave(FDragDropEvent const& DragDropEvent)"
  },
  {
    "label": "EItemDropZone()",
    "kind": "Method",
    "detail": "Function (ItemDropZone = TOptional<)",
    "insertText": "EItemDropZone()"
  },
  {
    "label": "ZoneFromPointerPosition()",
    "kind": "Method",
    "detail": "Function (} } EItemDropZone)",
    "insertText": "ZoneFromPointerPosition(UE::Slate::FDeprecateVector2DParameter LocalPointerPos, UE::Slate::FDeprecateVector2DParameter LocalSize, EOrientation Orientation)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const float PointerPos = Orientation = = EOrientation::Orient_Horizontal ? LocalPointerPos . X : LocalPointerPos . Y ; const float Size = Orientation = = EOrientation::Orient_Horizontal ? LocalSize . X : LocalSize . Y ; const float ZoneBoundarySu =)",
    "insertText": "Clamp(Size * 0.25f, 3.0f, 10.0f)"
  },
  {
    "label": "AbsoluteToLocal()",
    "kind": "Method",
    "detail": "Function (const FVector2f LocalPointerPos = MyGeometry .)",
    "insertText": "AbsoluteToLocal(DragDropEvent.GetScreenSpacePosition())"
  },
  {
    "label": "ZoneFromPointerPosition()",
    "kind": "Method",
    "detail": "Function (const EItemDropZone ItemHoverZone =)",
    "insertText": "ZoneFromPointerPosition(LocalPointerPos, MyGeometry.GetLocalSize(), OwnerTable->Private_GetOrientation())"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (ItemDropZone = [ ItemHoverZone,DragDropEvent,)",
    "insertText": "this()"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (} } FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "Reply()",
    "kind": "Method",
    "detail": "Function (const FReply)",
    "insertText": "Reply()"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (const TOptional<EItemDropZone> ReportedZone = OnCanAcceptDrop .)",
    "insertText": "IsBound() ? OnCanAcceptDrop.Execute(DragDropEvent, HoveredZone, *MyItemPtr)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (FReply DropReply = OnAcceptDrop .)",
    "insertText": "Execute(DragDropEvent, ReportedZone.GetValue(), *MyItemPtr)"
  },
  {
    "label": "Private_SetItemExpansion()",
    "kind": "Method",
    "detail": "Function (OwnerTable ->)",
    "insertText": "Private_SetItemExpansion(*MyItemPtr, true)"
  },
  {
    "label": "InitializeRow()",
    "kind": "Method",
    "detail": "Function (} return Reply ; } void)",
    "insertText": "InitializeRow()"
  },
  {
    "label": "ResetRow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetRow()"
  },
  {
    "label": "SetIndexInList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIndexInList(int32 InIndexInList)"
  },
  {
    "label": "GetIndexInList()",
    "kind": "Method",
    "detail": "Function (IndexInList = InIndexInList ; } int32)",
    "insertText": "GetIndexInList()"
  },
  {
    "label": "Private_DoesItemHaveChildren()",
    "kind": "Method",
    "detail": "Function (const bool bItemHasChildren = OwnerTable ->)",
    "insertText": "Private_DoesItemHaveChildren(IndexInList)"
  },
  {
    "label": "Private_IsItemExpanded()",
    "kind": "Method",
    "detail": "Function (const bool bIsItemExpanded = bItemHasChildren&& OwnerTable ->)",
    "insertText": "Private_IsItemExpanded(*MyItemPtr)"
  },
  {
    "label": "Private_SetItemExpansion()",
    "kind": "Method",
    "detail": "Function (OwnerTable ->)",
    "insertText": "Private_SetItemExpansion(*MyItemPtr, !bIsItemExpanded)"
  },
  {
    "label": "IsItemSelected()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "IsItemSelected()"
  },
  {
    "label": "GetIndentLevel()",
    "kind": "Method",
    "detail": "Function (} return false ; } int32)",
    "insertText": "GetIndentLevel()"
  },
  {
    "label": "DoesItemHaveChildren()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "DoesItemHaveChildren()"
  },
  {
    "label": "GetWiresNeededByDepth()",
    "kind": "Method",
    "detail": "Function (} TBitArray<>)",
    "insertText": "GetWiresNeededByDepth()"
  },
  {
    "label": "IsLastChild()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLastChild()"
  },
  {
    "label": "AsWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "AsWidget()"
  },
  {
    "label": "SetRowContent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRowContent(TSharedRef< SWidget > InContent)"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (this -> Content = InContent ; InnerContentSlot = nullptr ;)",
    "insertText": "SetContent(InContent)"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetContent(TSharedRef< SWidget > InContent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> Content = InContent ;)",
    "insertText": "if(InnerContentSlot)"
  },
  {
    "label": "AttachWidget()",
    "kind": "Method",
    "detail": "Function (InnerContentSlot ->)",
    "insertText": "AttachWidget(InContent)"
  },
  {
    "label": "GetContent()",
    "kind": "Method",
    "detail": "Function (} } TSharedPtr<SWidget>)",
    "insertText": "GetContent()"
  },
  {
    "label": "SWidget()",
    "kind": "Method",
    "detail": "Function (} else { return TSharedPtr<)",
    "insertText": "SWidget()"
  },
  {
    "label": "Private_OnExpanderArrowShiftClicked()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Private_OnExpanderArrowShiftClicked()"
  },
  {
    "label": "Private_OnExpanderArrowShiftClicked()",
    "kind": "Method",
    "detail": "Function (OwnerTable ->)",
    "insertText": "Private_OnExpanderArrowShiftClicked(*MyItemPtr, !IsItemExpanded)"
  },
  {
    "label": "GetBorder()",
    "kind": "Method",
    "detail": "Function (} } } const FSlateBrush*)",
    "insertText": "GetBorder()"
  },
  {
    "label": "GenericWhiteBoxBrush()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GenericWhiteBoxBrush(\"GenericWhiteBox\")"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush* WhiteBox =)",
    "insertText": "Get().GetBrush(GenericWhiteBoxBrush)"
  },
  {
    "label": "Private_IsItemHighlighted()",
    "kind": "Method",
    "detail": "Function (const bool bIsHighlighted = OwnerTable ->)",
    "insertText": "Private_IsItemHighlighted(*MyItemPtr)"
  },
  {
    "label": "bEvenEntryIndex()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bEvenEntryIndex(IndexInList % 2 == 0)"
  },
  {
    "label": "IsHovered()",
    "kind": "Method",
    "detail": "Function (InactiveHoveredBrush\n\t\t\t\t\t\t: &Style->InactiveBrush)",
    "insertText": "IsHovered()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(!bIsSelected && bIsHighlighted)"
  },
  {
    "label": "IsHovered()",
    "kind": "Method",
    "detail": "Function (InactiveHighlightedBrush)",
    "insertText": "IsHovered() ? (bEvenEntryIndex ? &Style->EvenRowBackgroundHoveredBrush : &Style->OddRowBackgroundHoveredBrush)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(bItemHasChildren && Style->bUseParentRowBrush && GetIndentLevel() == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(bEvenEntryIndex)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (OddRowBackgroundHoveredBrush\n\t\t\t\t\t\t: &Style->OddRowBackgroundBrush)",
    "insertText": "return(IsHovered() && bAllowSelection)"
  },
  {
    "label": "IsSelectedExclusively()",
    "kind": "Method",
    "detail": "Function (} } } return nullptr ; } bool)",
    "insertText": "IsSelectedExclusively()"
  },
  {
    "label": "IsHighlighted()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "IsHighlighted()"
  },
  {
    "label": "GetRowSizeForColumn()",
    "kind": "Method",
    "detail": "Function (} return false ; } FVector2D)",
    "insertText": "GetRowSizeForColumn(const FName& InColumnName)"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (ExpanderArrowWidget ->)",
    "insertText": "SetVisibility(InExpanderArrowVisibility)"
  },
  {
    "label": "STableRow()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "STableRow() : IndexInList(0) , bShowSelection(true) , SignalSelectionMode( ETableRowSignalSelectionMode::Deferred)"
  },
  {
    "label": "ConstructInternal()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY AccessibleBehavior = EAccessibleBehavior::Summary ; bCanChildrenBeAccessible = true ; # endif } protected : void)",
    "insertText": "ConstructInternal(FArguments const& InArgs, TSharedRef<STableViewBase> const& InOwnerTableView)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (bProcessingSelectionTouch = false ;)",
    "insertText": "check(InArgs._Style)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Style = InArgs . _Style ;)",
    "insertText": "check(InArgs._ExpanderStyleSet)"
  },
  {
    "label": "SetBorderImage()",
    "kind": "Method",
    "detail": "Function (ExpanderStyleSet = InArgs . _ExpanderStyleSet ;)",
    "insertText": "SetBorderImage(TAttribute<const FSlateBrush*>(this, &STableRow::GetBorder))"
  },
  {
    "label": "SetForegroundColor()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetForegroundColor(TAttribute<FSlateColor>( this, &STableRow::GetForegroundBasedOnSelection ))"
  },
  {
    "label": "SetOwnerTableView()",
    "kind": "Method",
    "detail": "Function (this -> OnCanAcceptDrop = InArgs . _OnCanAcceptDrop ; this -> OnAcceptDrop = InArgs . _OnAcceptDrop ; this -> OnDragDetected_Handler = InArgs . _OnDragDetected ; this -> OnDragEnter_Handler = InArgs . _OnDragEnter ; this -> OnDragLeave_Handler = InArgs . _OnDragLeave ; this -> OnDrop_Handler = InArgs . _OnDrop ; this ->)",
    "insertText": "SetOwnerTableView(InOwnerTableView)"
  },
  {
    "label": "SetOwnerTableView()",
    "kind": "Method",
    "detail": "Function (this -> bShowSelection = InArgs . _ShowSelection ; this -> SignalSelectionMode = InArgs . _SignalSelectionMode ; this -> bShowWires = InArgs . _ShowWires ; this -> bAllowPreselectedItemActivation = InArgs . _bAllowPreselectedItemActivation ; } void)",
    "insertText": "SetOwnerTableView(TSharedPtr<STableViewBase> OwnerTableView)"
  },
  {
    "label": "ItemType()",
    "kind": "Method",
    "detail": "Function (this -> OwnerTablePtr = StaticCastSharedPtr<SListView<)",
    "insertText": "ItemType(OwnerTableView)"
  },
  {
    "label": "GetForegroundBasedOnSelection()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "GetForegroundBasedOnSelection()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FSlateColor& NonSelectedForeground = Style -> TextColor ; const FSlateColor& SelectedForeground = Style -> SelectedTextColor ;)",
    "insertText": "if(!bShowSelection || !OwnerTable.IsValid())"
  },
  {
    "label": "GetItemForThis()",
    "kind": "Method",
    "detail": "Function (} const TObjectPtrWrapTypeOf<ItemType>*)",
    "insertText": "GetItemForThis(const TSharedRef<ITypedTableView<ItemType>>& OwnerTable)"
  },
  {
    "label": "Private_ItemFromWidget()",
    "kind": "Method",
    "detail": "Function (const TObjectPtrWrapTypeOf<ItemType>* MyItemPtr = OwnerTable ->)",
    "insertText": "Private_ItemFromWidget(this)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } protected : TWeakPtr<ITypedTableView<ItemType>> OwnerTablePtr ; int32 IndexInList ; bool bShowSelection ; ETableRowSignalSelectionMode SignalSelectionMode ; const FTableRowStyle* Style ; const ISlateStyle* ExpanderStyleSet ; TSharedPtr<SExpanderArrow> ExpanderArrowWidget ; FOnCanAcceptDrop OnCanAcceptDrop ; FOnAcceptDrop OnAcceptDrop ; FOnPaintDropIndicator PaintDropIndicatorEvent ; TOptional<EItemDropZone> ItemDropZone ; FOnDragDetected OnDragDetected_Handler ; FOnTableRowDragEnter OnDragEnter_Handler ; FOnTableRowDragLeave OnDragLeave_Handler ; FOnTableRowDrop OnDrop_Handler ; FSlotBase* InnerContentSlot ; TWeakPtr<SWidget> Content ; bool bChangedSelectionOnMouseDown ; bool bDragWasDetected ; bool bProcessingSelectionTouch ; bool bAllowPreselectedItemActivation ; private : bool bShowWires ; } ; template<ItemType> class SMultiColumnTableRow : public STableRow<ItemType> { public : TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& InColumnName)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (typedef SMultiColumnTableRow<ItemType> FSuperRowType ; typedef STableRow<ItemType>::FArguments FTableRowArgs ; protected : void)",
    "insertText": "Construct(const FTableRowArgs& InArgs, const TSharedRef<STableViewBase>& OwnerTableView)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (STableRow<ItemType)",
    "insertText": "Construct(FTableRowArgs() .Style(InArgs._Style) .ExpanderStyleSet(InArgs._ExpanderStyleSet) .Padding(InArgs._Padding) .ShowSelection(InArgs._ShowSelection) .OnCanAcceptDrop(InArgs._OnCanAcceptDrop) .OnAcceptDrop(InArgs._OnAcceptDrop) .OnDragDetected(InArgs._OnDragDetected) .OnDragEnter(InArgs._OnDragEnter) .OnDragLeave(InArgs._OnDragLeave) .OnDrop(InArgs._OnDrop) .Content() [ SAssignNew( Box, SHorizontalBox ) ] , OwnerTableView)"
  },
  {
    "label": "GetHeaderRow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SHeaderRow> HeaderRow = OwnerTableView ->)",
    "insertText": "GetHeaderRow()"
  },
  {
    "label": "OnColumnsChanged()",
    "kind": "Method",
    "detail": "Function (HeaderRow ->)",
    "insertText": "OnColumnsChanged()->AddSP( this, &SMultiColumnTableRow<ItemType>::GenerateColumns)"
  },
  {
    "label": "GenerateColumns()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "GenerateColumns(HeaderRow.ToSharedRef())"
  },
  {
    "label": "GenerateColumns()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenerateColumns(const TSharedRef<SHeaderRow>& InColumnHeaders)"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (Box ->)",
    "insertText": "ClearChildren()"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (const TIndirectArray<SHeaderRow::FColumn>& Columns = InColumnHeaders ->)",
    "insertText": "GetColumns()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumColumns = Columns .)",
    "insertText": "Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TMap<FName,TSharedRef<SWidget>> NewColumnIdToSlotContents ;)",
    "insertText": "for(int32 ColumnIndex = 0; ColumnIndex < NumColumns; ++ColumnIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const SHeaderRow::FColumn& Column = Columns [ ColumnIndex ] ;)",
    "insertText": "if(InColumnHeaders->ShouldGeneratedColumn(Column.ColumnId))"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>* ExistingWidget = ColumnIdToSlotContents .)",
    "insertText": "Find(Column.ColumnId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget> CellContents = SNullWidget::NullWidget ;)",
    "insertText": "if(ExistingWidget != nullptr)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (CellContents =* ExistingWidget ; } else { CellContents =)",
    "insertText": "GenerateWidgetForColumn(Column.ColumnId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CellContents != SNullWidget::NullWidget)"
  },
  {
    "label": "SetClipping()",
    "kind": "Method",
    "detail": "Function (CellContents ->)",
    "insertText": "SetClipping(EWidgetClipping::OnDemand)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "switch(Column.SizeRule)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (Box ->)",
    "insertText": "AddSlot() .HAlign(Column.CellHAlignment) .VAlign(Column.CellVAlignment) .FillWidth(WidthBinding)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (} break ; case EColumnSizeMode::Fixed : { Box ->)",
    "insertText": "AddSlot() .AutoWidth() [ SNew(SBox) .WidthOverride(Column.Width.Get()) .HAlign(Column.CellHAlignment) .VAlign(Column.CellVAlignment) .Clipping(EWidgetClipping::OnDemand)"
  },
  {
    "label": "Column()",
    "kind": "Method",
    "detail": "Function (FOptionalSize)",
    "insertText": "Column()"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (const float DesiredWidth = Column .)",
    "insertText": "GetWidth()"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (} ; TAttribute<FOptionalSize> WidthBinding ; WidthBinding .)",
    "insertText": "Bind(TAttribute<FOptionalSize>::FGetter::CreateLambda(GetColumnWidthAsOptionalSize))"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (Box ->)",
    "insertText": "AddSlot() .AutoWidth() [ SNew(SBox) .WidthOverride(WidthBinding) .HAlign(Column.CellHAlignment) .VAlign(Column.CellVAlignment) .Clipping(EWidgetClipping::OnDemand)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (} break ; default :)",
    "insertText": "ensure(false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (break ; } NewColumnIdToSlotContents .)",
    "insertText": "Add(Column.ColumnId, CellContents)"
  },
  {
    "label": "ClearCellCache()",
    "kind": "Method",
    "detail": "Function (} } ColumnIdToSlotContents = NewColumnIdToSlotContents ; } void)",
    "insertText": "ClearCellCache()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ColumnIdToSlotContents .)",
    "insertText": "Empty()"
  },
  {
    "label": "GetWidgetFromColumnId()",
    "kind": "Method",
    "detail": "Function (} const TSharedRef<SWidget>*)",
    "insertText": "GetWidgetFromColumnId(const FName& ColumnId)"
  }
]