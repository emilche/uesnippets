[
  {
    "label": "FGridCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGridCell"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGridCell_Empty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGridCell_Empty"
  },
  {
    "label": "FGridCell_StaticString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGridCell_StaticString"
  },
  {
    "label": "FGridCell_ShaderValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGridCell_ShaderValue"
  },
  {
    "label": "FMaterialStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialStats"
  },
  {
    "label": "FStatsGridRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsGridRow"
  },
  {
    "label": "FStatsGridRow_Empty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsGridRow_Empty"
  },
  {
    "label": "FStatsGridRow_Name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsGridRow_Name"
  },
  {
    "label": "FStatsGridRow_Quality",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsGridRow_Quality"
  },
  {
    "label": "FStatsGridRow_Shaders",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsGridRow_Shaders"
  },
  {
    "label": "FStatsGridRow_Samplers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsGridRow_Samplers"
  },
  {
    "label": "FStatsGridRow_Interpolators",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsGridRow_Interpolators"
  },
  {
    "label": "FStatsGridRow_NumTextureSamples",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsGridRow_NumTextureSamples"
  },
  {
    "label": "FStatsGridRow_NumVirtualTextureLookups",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsGridRow_NumVirtualTextureLookups"
  },
  {
    "label": "FStatsGridRow_NumShaders",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsGridRow_NumShaders"
  },
  {
    "label": "FStatsGridRow_NumPreshaders",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsGridRow_NumPreshaders"
  },
  {
    "label": "FStatsGridRow_LWCUsage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsGridRow_LWCUsage"
  },
  {
    "label": "FMaterialStatsGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialStatsGrid"
  },
  {
    "label": "FColumnInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColumnInfo"
  },
  {
    "label": "FGridCell()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EngineGlobals . h \" # include \" SceneTypes . h \" # include \" Types / SlateEnums . h \" # include \" RHIDefinitions . h \" # include \" MaterialStatsCommon . h \" # include \" Containers / StaticArray . h \" # include \" MaterialStats . h \" # include \" Styling / StyleColors . h \" class FGridCell { public : enum class EIcon { None,Error } ; protected : FSlateColor CellColor ; bool bBoldContent = false ; EHorizontalAlignment HAlignment = EHorizontalAlignment::HAlign_Center ; EVerticalAlignment VAlignment = EVerticalAlignment::VAlign_Center ; public :)",
    "insertText": "FGridCell()"
  },
  {
    "label": "GetCellContent()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetCellContent()"
  },
  {
    "label": "GetCellContentLong()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCellContentLong()"
  },
  {
    "label": "GetHorizontalAlignment()",
    "kind": "Method",
    "detail": "Function (EHorizontalAlignment)",
    "insertText": "GetHorizontalAlignment()"
  },
  {
    "label": "GetIcon()",
    "kind": "Method",
    "detail": "Function (EIcon)",
    "insertText": "GetIcon()"
  },
  {
    "label": "FGridCell_StaticString()",
    "kind": "Method",
    "detail": "Function (} ; class FGridCell_StaticString : public FGridCell { FString Content ; FString ContentLong ; public :)",
    "insertText": "FGridCell_StaticString(const FString& _Content, const FString& _ContentLong)"
  },
  {
    "label": "InternalGetContent()",
    "kind": "Method",
    "detail": "Function (} ; enum class EShaderInfoType { Name,InstructionsCount,SamplersCount,InterpolatorsCount,TextureSampleCount,VirtualTextureLookupCount,ShaderCount,PreShaderCount,LWCUsage,GenericShaderStatistics,} ; class FGridCell_ShaderValue : public FGridCell { private : TWeakPtr<class FMaterialStats> MaterialStatsWPtr ; EShaderInfoType InfoType ; ERepresentativeShader ShaderType ; EMaterialQualityLevel::Type QualityLevel ; EShaderPlatform PlatformType ; int32 InstanceIndex ; FString)",
    "insertText": "InternalGetContent(bool bLongContent)"
  },
  {
    "label": "FGridCell_ShaderValue()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FGridCell_ShaderValue(const TWeakPtr<FMaterialStats>& _MaterialStatsWPtr, const EShaderInfoType _InfoType, const ERepresentativeShader _ShaderType, const EMaterialQualityLevel::Type _QualityLevel, const EShaderPlatform _PlatformType, const int32 _InstanceIndex)"
  },
  {
    "label": "AddCell()",
    "kind": "Method",
    "detail": "Function (} ; class FStatsGridRow { protected : TMap<FName,TSharedPtr<FGridCell>> RowCells ; protected : void)",
    "insertText": "AddCell(FName ColumnName, TSharedPtr<FGridCell> Cell)"
  },
  {
    "label": "RemoveCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCell(FName ColumnName)"
  },
  {
    "label": "FillPlatformCellsHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillPlatformCellsHelper(TSharedPtr<FMaterialStats> StatsManager)"
  },
  {
    "label": "FStatsGridRow()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FStatsGridRow()"
  },
  {
    "label": "CreateRow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateRow(TSharedPtr<FMaterialStats> StatsManager)"
  },
  {
    "label": "AddPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPlatform(TSharedPtr<FMaterialStats> StatsManager, const TSharedPtr<FShaderPlatformSettings> PlatformPtr, const EMaterialQualityLevel::Type QualityLevel, const int32 InstanceIndex)"
  },
  {
    "label": "RemovePlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePlatform(TSharedPtr<FMaterialStats> StatsManager, const TSharedPtr<FShaderPlatformSettings> PlatformPtr, const EMaterialQualityLevel::Type QualityLevel, const int32 InstanceIndex)"
  },
  {
    "label": "GetCell()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGridCell>)",
    "insertText": "GetCell(const FName ColumnName)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAll()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (RowCells .)",
    "insertText": "Empty()"
  },
  {
    "label": "AddPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPlatform(TSharedPtr<FMaterialStats> StatsManager, const TSharedPtr<FShaderPlatformSettings> Platform, const EMaterialQualityLevel::Type QualityLevel, const int32 InstanceIndex)"
  },
  {
    "label": "GetShaderClass()",
    "kind": "Method",
    "detail": "Function (} ; class FStatsGridRow_Shaders : public FStatsGridRow { public : enum class EShaderClass { VertexShader,FragmentShader,ComputeShader } ; private : bool bIsHeaderRow = false ; bool bInstructionRow = true ; ERepresentativeShader ShaderType ; private : EShaderClass)",
    "insertText": "GetShaderClass(const ERepresentativeShader Shader)"
  },
  {
    "label": "FStatsGridRow_Shaders()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FStatsGridRow_Shaders(ERepresentativeShader RepresentativeShader, bool bHeader, bool bInstructionRow)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} ; class FMaterialStatsGrid { enum class EGlobalErrorsType { NoErrors,SpecificPlatformErrors,GlobalPlatformErrors } ; enum class ERowType { Empty,Name,Quality,Samplers,Interpolators,TextureSamples,VirtualTextureLookups,Shaders,PreShaders,LWCUsage,VertexShader,FragmentShader,} ; TMap<ERowType,TSharedPtr<FStatsGridRow>> StaticRows ; TArray<TSharedPtr<FStatsGridRow>> VertexShaderRows ; TArray<TSharedPtr<FStatsGridRow>> FragmentShaderRows ; struct FColumnInfo { FString Content =)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (FSlateColor Color = FStyleColors::Foreground ; } ; TMap<FName,FColumnInfo> GridColumnContent ; TArray<TSharedPtr<int32>> RowIDs ; TWeakPtr<class FMaterialStats> StatsManagerWPtr ; TStaticArray<)",
    "insertText": "bool(int32)"
  },
  {
    "label": "AddColumnInfo()",
    "kind": "Method",
    "detail": "Function (EGlobalErrorsType PlatformErrorsType ; public : const FName DescriptorColumnName ; const FName ShaderColumnName ; const FName ShaderStatisticColumnName ; private : void)",
    "insertText": "AddColumnInfo(TSharedPtr<FShaderPlatformSettings> PlatformPtr, const EMaterialQualityLevel::Type QualityLevel, const int32 InstanceIndex)"
  },
  {
    "label": "RemoveColumnInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumnInfo(TSharedPtr<FShaderPlatformSettings> PlatformPtr, const EMaterialQualityLevel::Type QualityLevel, const int32 InstanceIndex)"
  },
  {
    "label": "BuildColumnInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildColumnInfo()"
  },
  {
    "label": "BuildShaderRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildShaderRows()"
  },
  {
    "label": "BuildStaticRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildStaticRows()"
  },
  {
    "label": "CheckForErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForErrors()"
  },
  {
    "label": "CollectShaderInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectShaderInfo(const TSharedPtr<FShaderPlatformSettings>& PlatformPtr, const EMaterialQualityLevel::Type QualityLevel, const int32 InstanceIndex)"
  },
  {
    "label": "CollectShaderInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectShaderInfo()"
  },
  {
    "label": "BuildKeyAndInsert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildKeyAndInsert(const ERowType RowType, int16 Index = 0)"
  },
  {
    "label": "BuildRowIds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildRowIds()"
  },
  {
    "label": "AddOrRemovePlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrRemovePlatform(TSharedPtr<FShaderPlatformSettings> PlatformPtr, const bool bAdd, const EMaterialQualityLevel::Type QualityLevel, const int32 InstanceIndex)"
  },
  {
    "label": "FMaterialStatsGrid()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialStatsGrid(TWeakPtr<FMaterialStats> _StatsManager)"
  },
  {
    "label": "FMaterialStatsGrid()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMaterialStatsGrid()"
  },
  {
    "label": "GetCell()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGridCell>)",
    "insertText": "GetCell(int32 RowID, FName ColumnName)"
  },
  {
    "label": "OnShaderChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShaderChanged()"
  },
  {
    "label": "OnColumnNumChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnColumnNumChanged()"
  },
  {
    "label": "OnAddOrRemovePlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddOrRemovePlatform(TSharedPtr<FShaderPlatformSettings> PlatformPtr)"
  },
  {
    "label": "OnQualitySettingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnQualitySettingChanged(const EMaterialQualityLevel::Type QualityLevel)"
  },
  {
    "label": "BuildGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildGrid()"
  },
  {
    "label": "GetColumnContent()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetColumnContent(const FName ColumnName)"
  },
  {
    "label": "GetColumnContentLong()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetColumnContentLong(const FName ColumnName)"
  },
  {
    "label": "GetColumnColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetColumnColor(const FName ColumnName)"
  },
  {
    "label": "MakePlatformColumnName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "MakePlatformColumnName(const TSharedPtr<FShaderPlatformSettings>& Platform, const EMaterialQualityLevel::Type Quality, const int32 InstanceIndex)"
  },
  {
    "label": "GetGridRowIDs()",
    "kind": "Method",
    "detail": "Function (} ; const TArray<TSharedPtr<int32>>*)",
    "insertText": "GetGridRowIDs()"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Key((int32)Index << 16) | (int32)"
  },
  {
    "label": "RowType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RowType(ERowType)(Key & 0xffff)"
  },
  {
    "label": "GetVisibleColumnNames()",
    "kind": "Method",
    "detail": "Function (Index = Key>> 1 6 ; } TArray<FName>)",
    "insertText": "GetVisibleColumnNames()"
  },
  {
    "label": "GenerateKeyArray()",
    "kind": "Method",
    "detail": "Function (TArray<FName> ColumnList ; GridColumnContent .)",
    "insertText": "GenerateKeyArray(ColumnList)"
  },
  {
    "label": "IsContentBold()",
    "kind": "Method",
    "detail": "Function (CellColor = Color ; } bool)",
    "insertText": "IsContentBold()"
  },
  {
    "label": "GetVerticalAlignment()",
    "kind": "Method",
    "detail": "Function (HAlignment = Align ; } EVerticalAlignment)",
    "insertText": "GetVerticalAlignment()"
  }
]