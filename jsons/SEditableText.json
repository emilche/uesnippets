[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FPlainTextLayoutMarshaller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlainTextLayoutMarshaller"
  },
  {
    "label": "FSlateEditableTextLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateEditableTextLayout"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "IBreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBreakIterator"
  },
  {
    "label": "FTextLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextLocation"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEditableText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableText"
  },
  {
    "label": "SEditableText()",
    "kind": "Method",
    "detail": "Function (SLATE_API)",
    "insertText": "SEditableText()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct( const FArguments& InArgs )"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText( const TAttribute< FText >& InNewText )"
  },
  {
    "label": "SetHintText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHintText( const TAttribute< FText >& InHintText )"
  },
  {
    "label": "SetSearchText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSearchText(const TAttribute<FText>& InSearchText)"
  },
  {
    "label": "SetIsReadOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsReadOnly( TAttribute< bool > InIsReadOnly )"
  },
  {
    "label": "SetIsPassword()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsPassword( TAttribute< bool > InIsPassword )"
  },
  {
    "label": "SetColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColorAndOpacity(TAttribute<FSlateColor> Color)"
  },
  {
    "label": "SetAllowContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowContextMenu(const TAttribute< bool >& InAllowContextMenu)"
  },
  {
    "label": "SetVirtualKeyboardDismissAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVirtualKeyboardDismissAction(TAttribute< EVirtualKeyboardDismissAction > InVirtualKeyboardDismissAction)"
  },
  {
    "label": "SetFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFont(const TAttribute< FSlateFontInfo >& InNewFont)"
  },
  {
    "label": "SetTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextStyle( const FEditableTextStyle& InNewTextStyle )"
  },
  {
    "label": "SetTextBlockStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextBlockStyle(const FTextBlockStyle* InTextStyle)"
  },
  {
    "label": "SetMinDesiredWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinDesiredWidth(const TAttribute<float>& InMinDesiredWidth)"
  },
  {
    "label": "SetIsCaretMovedWhenGainFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsCaretMovedWhenGainFocus(const TAttribute<bool>& InIsCaretMovedWhenGainFocus)"
  },
  {
    "label": "SetSelectAllTextWhenFocused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectAllTextWhenFocused(const TAttribute<bool>& InSelectAllTextWhenFocused)"
  },
  {
    "label": "SetRevertTextOnEscape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRevertTextOnEscape(const TAttribute<bool>& InRevertTextOnEscape)"
  },
  {
    "label": "SetClearKeyboardFocusOnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClearKeyboardFocusOnCommit(const TAttribute<bool>& InClearKeyboardFocusOnCommit)"
  },
  {
    "label": "SetSelectAllTextOnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectAllTextOnCommit(const TAttribute<bool>& InSelectAllTextOnCommit)"
  },
  {
    "label": "SetSelectWordOnMouseDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectWordOnMouseDoubleClick(const TAttribute<bool>& InSelectWordOnMouseDoubleClick)"
  },
  {
    "label": "SetJustification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJustification(const TAttribute<ETextJustify::Type>& InJustification)"
  },
  {
    "label": "SetTextShapingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextShapingMethod(const TOptional<ETextShapingMethod>& InTextShapingMethod)"
  },
  {
    "label": "SetTextFlowDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextFlowDirection(const TOptional<ETextFlowDirection>& InTextFlowDirection)"
  },
  {
    "label": "SetOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverflowPolicy(TOptional<ETextOverflowPolicy> InOverflowPolicy)"
  },
  {
    "label": "SelectAllText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllText()"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "GoTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoTo(const FTextLocation& NewLocation)"
  },
  {
    "label": "GoTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoTo(const ETextLocation NewLocation)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollTo(const FTextLocation& NewLocation)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollTo(const ETextLocation NewLocation)"
  },
  {
    "label": "BeginSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSearch(const FText& InSearchText, const ESearchCase::Type InSearchCase = ESearchCase::IgnoreCase, const bool InReverse = false)"
  },
  {
    "label": "AdvanceSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceSearch(const bool InReverse = false)"
  },
  {
    "label": "EnableTextInputMethodContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableTextInputMethodContext()"
  },
  {
    "label": "SynchronizeTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronizeTextStyle()"
  }
]