[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FPlainTextLayoutMarshaller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlainTextLayoutMarshaller"
  },
  {
    "label": "FSlateEditableTextLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateEditableTextLayout"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "IBreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBreakIterator"
  },
  {
    "label": "FTextLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextLocation"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEditableText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableText"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Styling / SlateColor . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Framework / SlateDelegates . h \" # include \" Framework / MultiBox / MultiBoxExtender . h \" # include \" Framework / Text / TextLayout . h \" # include \" Widgets / Text / ISlateEditableTextWidget . h \" class FActiveTimerHandle ; class FArrangedChildren ; class FChildren ; class FPaintArgs ; class FPlainTextLayoutMarshaller ; class FSlateEditableTextLayout ; class FSlateWindowElementList ; class IBreakIterator ; struct FTextLocation ; enum class ETextFlowDirection : uint8 ; enum class ETextShapingMethod : uint8 ; class SEditableText : public SWidget,public ISlateEditableTextWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SEditableText ) : _Text() , _HintText() , _SearchText() , _Style(&FCoreStyle::Get().GetWidgetStyle< FEditableTextStyle >(\"NormalEditableText\")) , _Font() , _ColorAndOpacity() , _BackgroundImageSelected() , _BackgroundImageComposing() , _CaretImage() , _IsReadOnly( false ) , _IsPassword( false ) , _IsCaretMovedWhenGainFocus( true ) , _SelectAllTextWhenFocused( false ) , _SelectWordOnMouseDoubleClick(true) , _RevertTextOnEscape( false ) , _ClearKeyboardFocusOnCommit(true) , _Justification(ETextJustify::Left) , _AllowContextMenu(true) , _MinDesiredWidth(0.0f) , _SelectAllTextOnCommit( false ) , _VirtualKeyboardType(EKeyboardType::Keyboard_Default) , _VirtualKeyboardOptions(FVirtualKeyboardOptions()) , _VirtualKeyboardTrigger(EVirtualKeyboardTrigger::OnFocusByPointer) , _VirtualKeyboardDismissAction(EVirtualKeyboardDismissAction::TextChangeOnDismiss) , _TextShapingMethod() , _TextFlowDirection() , _OverflowPolicy()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_ATTRIBUTE(FText, Text ) SLATE_ATTRIBUTE( FText, HintText ) SLATE_ATTRIBUTE( FText, SearchText ) SLATE_STYLE_ARGUMENT( FEditableTextStyle, Style ) SLATE_ATTRIBUTE( FSlateFontInfo, Font ) SLATE_ATTRIBUTE( FSlateColor, ColorAndOpacity ) SLATE_ATTRIBUTE( const FSlateBrush*, BackgroundImageSelected ) SLATE_ATTRIBUTE( const FSlateBrush*, BackgroundImageComposing ) SLATE_ATTRIBUTE( const FSlateBrush*, CaretImage ) SLATE_ATTRIBUTE( bool, IsReadOnly ) SLATE_ATTRIBUTE( bool, IsPassword ) SLATE_ATTRIBUTE( bool, IsCaretMovedWhenGainFocus ) SLATE_ATTRIBUTE( bool, SelectAllTextWhenFocused ) SLATE_ATTRIBUTE(bool, SelectWordOnMouseDoubleClick) SLATE_ATTRIBUTE( bool, RevertTextOnEscape ) SLATE_ATTRIBUTE( bool, ClearKeyboardFocusOnCommit ) SLATE_ATTRIBUTE(ETextJustify::Type, Justification) SLATE_ATTRIBUTE(bool, AllowContextMenu) SLATE_EVENT(FOnContextMenuOpening, OnContextMenuOpening) SLATE_EVENT( FOnIsTypedCharValid, OnIsTypedCharValid ) SLATE_EVENT( FOnTextChanged, OnTextChanged ) SLATE_EVENT( FOnTextCommitted, OnTextCommitted ) SLATE_ATTRIBUTE( float, MinDesiredWidth ) SLATE_ATTRIBUTE( bool, SelectAllTextOnCommit ) SLATE_EVENT(FOnKeyChar, OnKeyCharHandler) SLATE_EVENT(FOnKeyDown, OnKeyDownHandler) SLATE_EVENT( FMenuExtensionDelegate, ContextMenuExtender ) SLATE_ATTRIBUTE( EKeyboardType, VirtualKeyboardType) SLATE_ARGUMENT( FVirtualKeyboardOptions, VirtualKeyboardOptions ) SLATE_ATTRIBUTE( EVirtualKeyboardTrigger, VirtualKeyboardTrigger ) SLATE_ATTRIBUTE( EVirtualKeyboardDismissAction, VirtualKeyboardDismissAction ) SLATE_ARGUMENT(TOptional<ETextShapingMethod>, TextShapingMethod) SLATE_ARGUMENT(TOptional<ETextFlowDirection>, TextFlowDirection) SLATE_ARGUMENT(TOptional<ETextOverflowPolicy>, OverflowPolicy) SLATE_END_ARGS() SLATE_API SEditableText()"
  },
  {
    "label": "SEditableText()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SEditableText()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const TAttribute< FText >& InNewText)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetText()"
  },
  {
    "label": "SetHintText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHintText(const TAttribute< FText >& InHintText)"
  },
  {
    "label": "GetHintText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetHintText()"
  },
  {
    "label": "SetSearchText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSearchText(const TAttribute<FText>& InSearchText)"
  },
  {
    "label": "GetSearchText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSearchText()"
  },
  {
    "label": "SetIsReadOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsReadOnly(TAttribute< bool > InIsReadOnly)"
  },
  {
    "label": "SetIsPassword()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsPassword(TAttribute< bool > InIsPassword)"
  },
  {
    "label": "SetColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColorAndOpacity(TAttribute<FSlateColor> Color)"
  },
  {
    "label": "SetAllowContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowContextMenu(const TAttribute< bool >& InAllowContextMenu)"
  },
  {
    "label": "SetVirtualKeyboardDismissAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVirtualKeyboardDismissAction(TAttribute< EVirtualKeyboardDismissAction > InVirtualKeyboardDismissAction)"
  },
  {
    "label": "SetFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFont(const TAttribute< FSlateFontInfo >& InNewFont)"
  },
  {
    "label": "GetFont()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "GetFont()"
  },
  {
    "label": "SetTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextStyle(const FEditableTextStyle& InNewTextStyle)"
  },
  {
    "label": "SetTextBlockStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextBlockStyle(const FTextBlockStyle* InTextStyle)"
  },
  {
    "label": "SetMinDesiredWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinDesiredWidth(const TAttribute<float>& InMinDesiredWidth)"
  },
  {
    "label": "SetIsCaretMovedWhenGainFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsCaretMovedWhenGainFocus(const TAttribute<bool>& InIsCaretMovedWhenGainFocus)"
  },
  {
    "label": "SetSelectAllTextWhenFocused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectAllTextWhenFocused(const TAttribute<bool>& InSelectAllTextWhenFocused)"
  },
  {
    "label": "SetRevertTextOnEscape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRevertTextOnEscape(const TAttribute<bool>& InRevertTextOnEscape)"
  },
  {
    "label": "SetClearKeyboardFocusOnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClearKeyboardFocusOnCommit(const TAttribute<bool>& InClearKeyboardFocusOnCommit)"
  },
  {
    "label": "SetSelectAllTextOnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectAllTextOnCommit(const TAttribute<bool>& InSelectAllTextOnCommit)"
  },
  {
    "label": "SetSelectWordOnMouseDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectWordOnMouseDoubleClick(const TAttribute<bool>& InSelectWordOnMouseDoubleClick)"
  },
  {
    "label": "SetJustification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJustification(const TAttribute<ETextJustify::Type>& InJustification)"
  },
  {
    "label": "SetOnKeyCharHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnKeyCharHandler(FOnKeyChar InOnKeyCharHandler)"
  },
  {
    "label": "SetOnKeyDownHandler()",
    "kind": "Method",
    "detail": "Function (OnKeyCharHandler = InOnKeyCharHandler ; } void)",
    "insertText": "SetOnKeyDownHandler(FOnKeyDown InOnKeyDownHandler)"
  },
  {
    "label": "SetTextShapingMethod()",
    "kind": "Method",
    "detail": "Function (OnKeyDownHandler = InOnKeyDownHandler ; } void)",
    "insertText": "SetTextShapingMethod(const TOptional<ETextShapingMethod>& InTextShapingMethod)"
  },
  {
    "label": "SetTextFlowDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextFlowDirection(const TOptional<ETextFlowDirection>& InTextFlowDirection)"
  },
  {
    "label": "SetOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverflowPolicy(TOptional<ETextOverflowPolicy> InOverflowPolicy)"
  },
  {
    "label": "AnyTextSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyTextSelected()"
  },
  {
    "label": "SelectAllText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllText()"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "GetSelectedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedText()"
  },
  {
    "label": "GoTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoTo(const FTextLocation& NewLocation)"
  },
  {
    "label": "GoTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoTo(const ETextLocation NewLocation)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollTo(const FTextLocation& NewLocation)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollTo(const ETextLocation NewLocation)"
  },
  {
    "label": "BeginSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSearch(const FText& InSearchText, const ESearchCase::Type InSearchCase = ESearchCase::IgnoreCase, const bool InReverse = false)"
  },
  {
    "label": "AdvanceSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceSearch(const bool InReverse = false)"
  },
  {
    "label": "EnableTextInputMethodContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableTextInputMethodContext()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "CacheDesiredSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheDesiredSize(float LayoutScaleMultiplier)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float LayoutScaleMultiplier)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnKeyChar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyChar(const FGeometry& MyGeometry, const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "GetFocusBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetFocusBrush()"
  },
  {
    "label": "IsInteractable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInteractable()"
  },
  {
    "label": "ComputeVolatility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeVolatility()"
  },
  {
    "label": "CreateAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY TSharedRef<FSlateAccessibleWidget>)",
    "insertText": "CreateAccessibleWidget()"
  },
  {
    "label": "GetDefaultAccessibleText()",
    "kind": "Method",
    "detail": "Function (TOptional<FText>)",
    "insertText": "GetDefaultAccessibleText(EAccessibleType AccessibleType = EAccessibleType::Main)"
  },
  {
    "label": "SynchronizeTextStyle()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "SynchronizeTextStyle()"
  },
  {
    "label": "IsTextReadOnly()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsTextReadOnly()"
  },
  {
    "label": "IsTextPassword()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTextPassword()"
  },
  {
    "label": "IsMultiLineTextEdit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMultiLineTextEdit()"
  },
  {
    "label": "ShouldJumpCursorToEndWhenFocused()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ShouldJumpCursorToEndWhenFocused()"
  },
  {
    "label": "ShouldSelectAllTextWhenFocused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSelectAllTextWhenFocused()"
  },
  {
    "label": "ShouldClearTextSelectionOnFocusLoss()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldClearTextSelectionOnFocusLoss()"
  },
  {
    "label": "ShouldRevertTextOnEscape()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRevertTextOnEscape()"
  },
  {
    "label": "ShouldClearKeyboardFocusOnCommit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldClearKeyboardFocusOnCommit()"
  },
  {
    "label": "ShouldSelectAllTextOnCommit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSelectAllTextOnCommit()"
  },
  {
    "label": "ShouldSelectWordOnMouseDoubleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSelectWordOnMouseDoubleClick()"
  },
  {
    "label": "CanInsertCarriageReturn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInsertCarriageReturn()"
  },
  {
    "label": "CanTypeCharacter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanTypeCharacter(const TCHAR InChar)"
  },
  {
    "label": "EnsureActiveTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureActiveTick()"
  },
  {
    "label": "GetVirtualKeyboardType()",
    "kind": "Method",
    "detail": "Function (EKeyboardType)",
    "insertText": "GetVirtualKeyboardType()"
  },
  {
    "label": "GetVirtualKeyboardOptions()",
    "kind": "Method",
    "detail": "Function (FVirtualKeyboardOptions)",
    "insertText": "GetVirtualKeyboardOptions()"
  },
  {
    "label": "GetVirtualKeyboardTrigger()",
    "kind": "Method",
    "detail": "Function (EVirtualKeyboardTrigger)",
    "insertText": "GetVirtualKeyboardTrigger()"
  },
  {
    "label": "GetVirtualKeyboardDismissAction()",
    "kind": "Method",
    "detail": "Function (EVirtualKeyboardDismissAction)",
    "insertText": "GetVirtualKeyboardDismissAction()"
  },
  {
    "label": "GetSlateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetSlateWidget()"
  },
  {
    "label": "GetSlateWidgetPtr()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetSlateWidgetPtr()"
  },
  {
    "label": "BuildContextMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "BuildContextMenuContent()"
  },
  {
    "label": "OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTextChanged(const FText& InText)"
  },
  {
    "label": "OnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTextCommitted(const FText& InText, const ETextCommit::Type InTextAction)"
  },
  {
    "label": "OnCursorMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCursorMoved(const FTextLocation& InLocation)"
  },
  {
    "label": "UpdateAndClampHorizontalScrollBar()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UpdateAndClampHorizontalScrollBar(const float InViewOffset, const float InViewFraction, const EVisibility InVisiblityOverride)"
  },
  {
    "label": "UpdateAndClampVerticalScrollBar()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UpdateAndClampVerticalScrollBar(const float InViewOffset, const float InViewFraction, const EVisibility InVisiblityOverride)"
  }
]