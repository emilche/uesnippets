[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ObserverType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObserverType"
  },
  {
    "label": "ObserverStorageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObserverStorageType"
  },
  {
    "label": "ObserverList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObserverList"
  },
  {
    "label": "Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iter"
  },
  {
    "label": "ObserverListTestBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObserverListTestBase"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "Iter()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_OBSERVER_LIST_H_ # define BASE_OBSERVER_LIST_H_ # include<stddef . h> # include<algorithm> # include<iterator> # include<limits> # include<ostream> # include<string> # include<utility> # include<vector> # include \" base / check . h \" # include \" base / check_op . h \" # include \" base / dcheck_is_on . h \" # include \" base / notreached . h \" # include \" base / observer_list_internal . h \" # include \" base / ranges / algorithm . h \" # include \" base / sequence_checker . h \" namespace base { enum class ObserverListPolicy { ALL,EXISTING_ONLY,} ; template<class ObserverType,bool check_empty = false,bool allow_reentrancy = true,class ObserverStorageType = internal::CheckedObserverAdapter> class ObserverList { public : using Unchecked = ObserverList<ObserverType,check_empty,allow_reentrancy,internal::UncheckedObserverAdapter> ; class Iter { public : using iterator_category = std::forward_iterator_tag ; using value_type = ObserverType ; using difference_type = ptrdiff_t ; using pointer = ObserverType* ; using reference = ObserverType& ;)",
    "insertText": "Iter() : index_(0), max_index_(0)"
  },
  {
    "label": "Iter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Iter(const ObserverList* list) : list_(const_cast<ObserverList*>(list)), index_(0), max_index_(list->policy_ == ObserverListPolicy::ALL ? std::numeric_limits<size_t>::max() : list->observers_.size())"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(list)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(allow_reentrancy || list_.IsOnlyRemainingNode())"
  },
  {
    "label": "DCHECK_CALLED_ON_VALID_SEQUENCE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_CALLED_ON_VALID_SEQUENCE(list_->iteration_sequence_checker_)"
  },
  {
    "label": "Iter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Iter()"
  },
  {
    "label": "Iter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Iter(const Iter& other) : index_(other.index_), max_index_(other.max_index_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Iter&)",
    "insertText": "operator(const Iter& other)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (list_ .)",
    "insertText": "Invalidate()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Iter&)",
    "insertText": "operator()"
  },
  {
    "label": "EnsureValidIndex()",
    "kind": "Method",
    "detail": "Function (+ + index_ ;)",
    "insertText": "EnsureValidIndex()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } Iter)",
    "insertText": "operator(int)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (Iter)",
    "insertText": "it(*this)"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (ObserverType* const current =)",
    "insertText": "GetCurrent()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(current)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(list_)"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(index_, clamped_max_index())"
  },
  {
    "label": "clamped_max_index()",
    "kind": "Method",
    "detail": "Function (const size_t max_index =)",
    "insertText": "clamped_max_index()"
  },
  {
    "label": "is_end()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_end()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} internal::WeakLinkNode<ObserverList> list_ ; size_t index_ ; size_t max_index_ ; } ; using iterator = Iter ; using const_iterator = Iter ; using value_type = ObserverType ; const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "end()"
  },
  {
    "label": "ObserverList()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ObserverList(ObserverListPolicy policy = ObserverListPolicy::ALL) : policy_(policy)"
  },
  {
    "label": "DETACH_FROM_SEQUENCE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DETACH_FROM_SEQUENCE(iteration_sequence_checker_)"
  },
  {
    "label": "ObserverList()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ObserverList(const ObserverList&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ObserverList&)",
    "insertText": "operator(const ObserverList&)"
  },
  {
    "label": "ObserverList()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ObserverList()"
  },
  {
    "label": "Compact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compact()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(observers_.empty()) << \"\\n\" << GetObserversCreationStackString()"
  },
  {
    "label": "AddObserver()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddObserver(ObserverType* obs)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(obs)"
  },
  {
    "label": "NOTREACHED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NOTREACHED()"
  },
  {
    "label": "RemoveObserver()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveObserver(const ObserverType* obs)"
  },
  {
    "label": "find_if()",
    "kind": "Method",
    "detail": "Function (const auto it =)",
    "insertText": "find_if(observers_, [obs](const auto& o) { return o.IsEqual(obs); })"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (observers_ .)",
    "insertText": "erase(it)"
  },
  {
    "label": "DCHECK_CALLED_ON_VALID_SEQUENCE()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "DCHECK_CALLED_ON_VALID_SEQUENCE(iteration_sequence_checker_)"
  },
  {
    "label": "MarkForRemoval()",
    "kind": "Method",
    "detail": "Function (it ->)",
    "insertText": "MarkForRemoval()"
  },
  {
    "label": "HasObserver()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "HasObserver(const ObserverType* obs)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (observers_ .)",
    "insertText": "clear()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} observers_count_ = 0 ; } bool)",
    "insertText": "empty()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (observers_ .)",
    "insertText": "erase(std::remove_if(observers_.begin(), observers_.end(), [](const auto& o) { return o.IsMarkedForRemoval(); }), observers_.end())"
  },
  {
    "label": "GetObserversCreationStackString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "GetObserversCreationStackString()"
  },
  {
    "label": "EXPENSIVE_DCHECKS_ARE_ON()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "EXPENSIVE_DCHECKS_ARE_ON()"
  },
  {
    "label": "GetCreationStackString()",
    "kind": "Method",
    "detail": "Function (result + = observer .)",
    "insertText": "GetCreationStackString()"
  },
  {
    "label": "SEQUENCE_CHECKER()",
    "kind": "Method",
    "detail": "Function (result + = \" \\ n \" ; } return result ; # else return \" For observer stack traces,build with \" \" ` enable_expensive_dchecks = true ` . \" ; # endif } std::vector<ObserverStorageType> observers_ ; base::LinkedList<internal::WeakLinkNode<ObserverList>> live_iterators_ ; size_t observers_count_ { 0 } ; const ObserverListPolicy policy_ ;)",
    "insertText": "SEQUENCE_CHECKER(iteration_sequence_checker_)"
  }
]