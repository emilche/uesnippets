[
  {
    "label": "FCharacterGroundConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterGroundConstraint"
  },
  {
    "label": "FCharacterGroundConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterGroundConstraintHandle"
  },
  {
    "label": "FDirtyChaosProperties",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDirtyChaosProperties"
  },
  {
    "label": "FDirtyCharacterGroundConstraintData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirtyCharacterGroundConstraintData"
  },
  {
    "label": "FDirtyPropertiesManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDirtyPropertiesManager"
  },
  {
    "label": "FPBDRigidsSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsSolver"
  },
  {
    "label": "FCharacterGroundConstraintProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterGroundConstraintProxy"
  },
  {
    "label": "FCharacterGroundConstraintProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Framework / PhysicsProxyBase . h \" namespace Chaos { class FCharacterGroundConstraint ; class FCharacterGroundConstraintHandle ; class FDirtyChaosProperties ; struct FDirtyCharacterGroundConstraintData ; class FDirtyPropertiesManager ; class FPBDRigidsSolver ; class FCharacterGroundConstraintProxy : public IPhysicsProxyBase { public : using Base = IPhysicsProxyBase ;)",
    "insertText": "FCharacterGroundConstraintProxy(FCharacterGroundConstraint* InConstraintGT, FCharacterGroundConstraintHandle* InConstraintPT = nullptr, UObject* InOwner = nullptr)"
  },
  {
    "label": "GetGameThreadAPI()",
    "kind": "Method",
    "detail": "Function (FCharacterGroundConstraint*)",
    "insertText": "GetGameThreadAPI()"
  },
  {
    "label": "PushStateOnGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushStateOnGameThread(FDirtyPropertiesManager& Manager, int32 DataIdx, FDirtyChaosProperties& RemoteData)"
  },
  {
    "label": "PushStateOnPhysicsThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushStateOnPhysicsThread(FPBDRigidsSolver* InSolver, const FDirtyPropertiesManager& Manager, int32 DataIdx, const FDirtyChaosProperties& RemoteData)"
  },
  {
    "label": "DestroyOnGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyOnGameThread()"
  },
  {
    "label": "DestroyOnPhysicsThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyOnPhysicsThread(FPBDRigidsSolver* InSolver)"
  },
  {
    "label": "GetHandleUnsafe()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetHandleUnsafe()"
  },
  {
    "label": "PullFromPhysicsState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PullFromPhysicsState(const FDirtyCharacterGroundConstraintData& Buffer, const int32 SolverSyncTimestamp)"
  }
]