[
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "RecursiveCommandDataGetter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RecursiveCommandDataGetter"
  },
  {
    "label": "FUICommandList()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Layout / Visibility . h \" # include \" Framework / Commands / UIAction . h \" # include \" Framework / Commands / UICommandInfo . h \" struct FKeyEvent ; struct FPointerEvent ; class FUICommandList : public TSharedFromThis<FUICommandList> { public : ~)",
    "insertText": "FUICommandList()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FCanProduceActionForCommand, const TSharedRef<const FUICommandInfo>&)"
  },
  {
    "label": "MapAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapAction(const TSharedPtr< const FUICommandInfo > InUICommandInfo, FExecuteAction ExecuteAction, EUIActionRepeatMode RepeatMode = EUIActionRepeatMode::RepeatDisabled)"
  },
  {
    "label": "MapAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapAction(const TSharedPtr< const FUICommandInfo > InUICommandInfo, FExecuteAction ExecuteAction, FCanExecuteAction CanExecuteAction, EUIActionRepeatMode RepeatMode = EUIActionRepeatMode::RepeatDisabled)"
  },
  {
    "label": "MapAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapAction(const TSharedPtr< const FUICommandInfo > InUICommandInfo, FExecuteAction ExecuteAction, FCanExecuteAction CanExecuteAction, FIsActionChecked IsCheckedDelegate, EUIActionRepeatMode RepeatMode = EUIActionRepeatMode::RepeatDisabled)"
  },
  {
    "label": "MapAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapAction(const TSharedPtr< const FUICommandInfo > InUICommandInfo, FExecuteAction ExecuteAction, FCanExecuteAction CanExecuteAction, FGetActionCheckState GetActionCheckState, EUIActionRepeatMode RepeatMode = EUIActionRepeatMode::RepeatDisabled)"
  },
  {
    "label": "MapAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapAction(const TSharedPtr< const FUICommandInfo > InUICommandInfo, FExecuteAction ExecuteAction, FCanExecuteAction CanExecuteAction, FIsActionChecked IsCheckedDelegate, FIsActionButtonVisible IsVisibleDelegate, EUIActionRepeatMode RepeatMode = EUIActionRepeatMode::RepeatDisabled)"
  },
  {
    "label": "MapAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapAction(const TSharedPtr< const FUICommandInfo > InUICommandInfo, FExecuteAction ExecuteAction, FCanExecuteAction CanExecuteAction, FGetActionCheckState GetActionCheckState, FIsActionButtonVisible IsVisibleDelegate, EUIActionRepeatMode RepeatMode = EUIActionRepeatMode::RepeatDisabled)"
  },
  {
    "label": "MapAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapAction(const TSharedPtr< const FUICommandInfo > InUICommandInfo, const FUIAction& InUIAction)"
  },
  {
    "label": "MapAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapAction(const TSharedPtr< const FUICommandInfo > InUICommandInfo, const FUIAction& InUIAction, const FUIActionContext& InUIActionContext)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const TSharedRef<FUICommandList>& InCommandsToAppend)"
  },
  {
    "label": "UnmapAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnmapAction(const TSharedPtr< const FUICommandInfo > InUICommandInfo)"
  },
  {
    "label": "IsActionMapped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActionMapped(const TSharedPtr< const FUICommandInfo > InUICommandInfo)"
  },
  {
    "label": "ExecuteAction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecuteAction(const TSharedRef< const FUICommandInfo > InUICommandInfo)"
  },
  {
    "label": "CanExecuteAction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteAction(const TSharedRef< const FUICommandInfo > InUICommandInfo)"
  },
  {
    "label": "TryExecuteAction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryExecuteAction(const TSharedRef< const FUICommandInfo > InUICommandInfo)"
  },
  {
    "label": "GetVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetVisibility(const TSharedRef< const FUICommandInfo > InUICommandInfo)"
  },
  {
    "label": "GetCheckState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetCheckState(const TSharedRef< const FUICommandInfo > InUICommandInfo)"
  },
  {
    "label": "ProcessCommandBindings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessCommandBindings(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "ProcessCommandBindings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessCommandBindings(const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "ProcessCommandBindings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessCommandBindings(const FKey Key, const FModifierKeysState& ModifierKeysState, const bool bRepeat)"
  },
  {
    "label": "SetCanProduceActionForCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanProduceActionForCommand(const FCanProduceActionForCommand& NewCanProduceActionForCommand)"
  },
  {
    "label": "GetActionForCommand()",
    "kind": "Method",
    "detail": "Function (CanProduceActionForCommand = NewCanProduceActionForCommand ; } const FUIAction*)",
    "insertText": "GetActionForCommand(TSharedPtr<const FUICommandInfo> Command)"
  },
  {
    "label": "GetContextForCommand()",
    "kind": "Method",
    "detail": "Function (const FUIActionContext*)",
    "insertText": "GetContextForCommand(TSharedPtr<const FUICommandInfo> Command)"
  },
  {
    "label": "ConditionalProcessCommandBindings()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ConditionalProcessCommandBindings(const FKey Key, bool bCtrl, bool bAlt, bool bShift, bool bCmd, bool bRepeat)"
  },
  {
    "label": "GetActionForCommandRecursively()",
    "kind": "Method",
    "detail": "Function (const FUIAction*)",
    "insertText": "GetActionForCommandRecursively(const TSharedRef<const FUICommandInfo>& Command, bool bIncludeChildren, bool bIncludeParents, TSet<TSharedRef<const FUICommandList>>& InOutVisitedLists)"
  },
  {
    "label": "GetContextForCommandRecursively()",
    "kind": "Method",
    "detail": "Function (const FUIActionContext*)",
    "insertText": "GetContextForCommandRecursively(const TSharedRef<const FUICommandInfo>& Command, bool bIncludeChildren, bool bIncludeParents, TSet<TSharedRef<const FUICommandList>>& InOutVisitedLists)"
  },
  {
    "label": "GatherContextsForList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherContextsForList(TSet<FName>& OutAllContexts)"
  },
  {
    "label": "GatherContextsForListRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherContextsForListRecursively(TSet<FName>& OutAllContexts, TSet<TSharedRef<const FUICommandList>>& InOutVisitedLists)"
  }
]