[
  {
    "label": "CFileSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CFileSystem"
  },
  {
    "label": "EGfxResourceType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGfxResourceType"
  },
  {
    "label": "ERenderPass",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERenderPass"
  },
  {
    "label": "EVertexPropertyUntyped",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVertexPropertyUntyped"
  },
  {
    "label": "SVertexPropertyDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SVertexPropertyDesc"
  },
  {
    "label": "EPixelProperty",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPixelProperty"
  },
  {
    "label": "SPixelPropertyDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SPixelPropertyDesc"
  },
  {
    "label": "EVertexAttributeUntyped",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVertexAttributeUntyped"
  },
  {
    "label": "EVertexComponentUntyped",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVertexComponentUntyped"
  },
  {
    "label": "EVertexFormatUntyped",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVertexFormatUntyped"
  },
  {
    "label": "ST_DLL_LINK",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ST_DLL_LINK"
  },
  {
    "label": "EInstanceType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInstanceType"
  },
  {
    "label": "ELightingModel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELightingModel"
  },
  {
    "label": "ELightingEffect",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELightingEffect"
  },
  {
    "label": "ELodMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELodMethod"
  },
  {
    "label": "ECullType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECullType"
  },
  {
    "label": "EFogCurve",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFogCurve"
  },
  {
    "label": "EFogColorType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFogColorType"
  },
  {
    "label": "EWindLod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWindLod"
  },
  {
    "label": "EWindEffect",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWindEffect"
  },
  {
    "label": "EShaderGenerationMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderGenerationMode"
  },
  {
    "label": "ETextureLayer",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETextureLayer"
  },
  {
    "label": "EShadowConfig",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShadowConfig"
  },
  {
    "label": "CParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CParser"
  },
  {
    "label": "EUserStringOrdinal",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EUserStringOrdinal"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifdef _WIN32 # pragma)",
    "insertText": "warning(push) #pragma warning (disable : 4121 4315) #endif #define USE_SDK_TMP_HEAP_RING_BUFFER #include \"Core/ExportBegin.h\" #include \"Core/Extents.h\" #include \"Core/String.h\" #include \"Core/Wind.h\" #ifdef ST_SETS_PACKING_INTERNALLY #pragma pack(push, 4) #endif #define SPEEDTREE_VERSION_MAJOR 7 #define SPEEDTREE_VERSION_MINOR 0 #define SPEEDTREE_SUBMINOR_VERSION 0 #define SPEEDTREE_VERSION_STRING \"7.0.0\" #if defined(_XBOX) || defined(__CELLOS_LV2__) || defined(NDEV)"
  },
  {
    "label": "SAttribute()",
    "kind": "Method",
    "detail": "Function (class CFileSystem ; enum EGfxResourceType { GFX_RESOURCE_VERTEX_BUFFER,GFX_RESOURCE_INDEX_BUFFER,GFX_RESOURCE_VERTEX_SHADER,GFX_RESOURCE_PIXEL_SHADER,GFX_RESOURCE_TEXTURE,GFX_RESOURCE_OTHER,GFX_RESOURCE_COUNT } ; enum ERenderPass { RENDER_PASS_MAIN,RENDER_PASS_DEPTH_PREPASS,RENDER_PASS_SHADOW_CAST,RENDER_PASS_COUNT } ; enum EVertexPropertyUntyped { VERTEX_PROPERTY_UNASSIGNED = - 1,VERTEX_PROPERTY_POSITION,VERTEX_PROPERTY_DIFFUSE_TEXCOORDS,VERTEX_PROPERTY_NORMAL,VERTEX_PROPERTY_LOD_POSITION,VERTEX_PROPERTY_GEOMETRY_TYPE_HINT,VERTEX_PROPERTY_LEAF_CARD_CORNER,VERTEX_PROPERTY_LEAF_CARD_LOD_SCALAR,VERTEX_PROPERTY_LEAF_CARD_SELF_SHADOW_OFFSET,VERTEX_PROPERTY_WIND_BRANCH_DATA,VERTEX_PROPERTY_WIND_EXTRA_DATA,VERTEX_PROPERTY_WIND_FLAGS,VERTEX_PROPERTY_LEAF_ANCHOR_POINT,VERTEX_PROPERTY_BONE_ID,VERTEX_PROPERTY_BRANCH_SEAM_DIFFUSE,VERTEX_PROPERTY_BRANCH_SEAM_DETAIL,VERTEX_PROPERTY_DETAIL_TEXCOORDS,VERTEX_PROPERTY_TANGENT,VERTEX_PROPERTY_LIGHTMAP_TEXCOORDS,VERTEX_PROPERTY_AMBIENT_OCCLUSION,VERTEX_PROPERTY_MISC_SEMANTIC = VERTEX_PROPERTY_AMBIENT_OCCLUSION,VERTEX_PROPERTY_COUNT,VERTEX_PROPERTY_PAD = VERTEX_PROPERTY_COUNT } ; typedef Enumeration<EVertexPropertyUntyped,st_int8> EVertexProperty ; struct SVertexPropertyDesc { st_int32 m_nNumComponents ; const st_char* m_pFullName ; const st_char* m_pShortName ; } ; enum EPixelProperty { PIXEL_PROPERTY_POSITION,PIXEL_PROPERTY_FOG_SCALAR,PIXEL_PROPERTY_FOG_COLOR,PIXEL_PROPERTY_DIFFUSE_TEXCOORDS,PIXEL_PROPERTY_DETAIL_TEXCOORDS,PIXEL_PROPERTY_PER_VERTEX_LIGHTING_COLOR,PIXEL_PROPERTY_NORMAL_MAP_VECTOR,PIXEL_PROPERTY_NORMAL,PIXEL_PROPERTY_BINORMAL,PIXEL_PROPERTY_TANGENT,PIXEL_PROPERTY_SPECULAR_HALF_VECTOR,PIXEL_PROPERTY_PER_VERTEX_SPECULAR_DOT,PIXEL_PROPERTY_PER_VERTEX_AMBIENT_CONTRAST,PIXEL_PROPERTY_FADE_TO_BILLBOARD,PIXEL_PROPERTY_TRANSMISSION_FACTOR,PIXEL_PROPERTY_RENDER_EFFECT_FADE,PIXEL_PROPERTY_AMBIENT_OCCLUSION,PIXEL_PROPERTY_BRANCH_SEAM_DIFFUSE,PIXEL_PROPERTY_BRANCH_SEAM_DETAIL,PIXEL_PROPERTY_SHADOW_DEPTH,PIXEL_PROPERTY_SHADOW_MAP_0_PROJECTION,PIXEL_PROPERTY_SHADOW_MAP_1_PROJECTION,PIXEL_PROPERTY_SHADOW_MAP_2_PROJECTION,PIXEL_PROPERTY_SHADOW_MAP_3_PROJECTION,PIXEL_PROPERTY_HUE_VARIATION,PIXEL_PROPERTY_COUNT } ; struct SPixelPropertyDesc { st_int32 m_nNumComponents ; const st_char* m_pFullName ; const st_char* m_pShortName ; } ; enum EVertexAttributeUntyped { VERTEX_ATTRIB_UNASSIGNED = - 1,VERTEX_ATTRIB_0,VERTEX_ATTRIB_1,VERTEX_ATTRIB_2,VERTEX_ATTRIB_3,VERTEX_ATTRIB_4,VERTEX_ATTRIB_5,VERTEX_ATTRIB_6,VERTEX_ATTRIB_7,VERTEX_ATTRIB_8,VERTEX_ATTRIB_9,VERTEX_ATTRIB_10,VERTEX_ATTRIB_11,VERTEX_ATTRIB_12,VERTEX_ATTRIB_13,VERTEX_ATTRIB_14,VERTEX_ATTRIB_15,VERTEX_ATTRIB_COUNT,VERTEX_DECL_END = VERTEX_ATTRIB_COUNT } ; typedef Enumeration<EVertexAttributeUntyped,st_int8> EVertexAttribute ; enum EVertexComponentUntyped { VERTEX_COMPONENT_UNASSIGNED = - 1,VERTEX_COMPONENT_X,VERTEX_COMPONENT_Y,VERTEX_COMPONENT_Z,VERTEX_COMPONENT_W,VERTEX_COMPONENT_COUNT } ; typedef Enumeration<EVertexComponentUntyped,st_int8> EVertexComponent ; enum EVertexFormatUntyped { VERTEX_FORMAT_UNASSIGNED = - 1,VERTEX_FORMAT_FULL_FLOAT,VERTEX_FORMAT_HALF_FLOAT,VERTEX_FORMAT_BYTE,VERTEX_FORMAT_COUNT } ; typedef Enumeration<EVertexFormatUntyped,st_int8> EVertexFormat ; struct ST_DLL_LINK SVertexDecl { struct ST_DLL_LINK SAttribute {)",
    "insertText": "SAttribute()"
  },
  {
    "label": "IsUsed()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "IsUsed(void)"
  },
  {
    "label": "NumEmptyComponents()",
    "kind": "Method",
    "detail": "Function (st_int32)",
    "insertText": "NumEmptyComponents(void)"
  },
  {
    "label": "NumUsedComponents()",
    "kind": "Method",
    "detail": "Function (st_int32)",
    "insertText": "NumUsedComponents(void)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (st_int32)",
    "insertText": "Size(void)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear(void)"
  },
  {
    "label": "FirstFreeComponent()",
    "kind": "Method",
    "detail": "Function (EVertexComponent)",
    "insertText": "FirstFreeComponent(void)"
  },
  {
    "label": "SProperty()",
    "kind": "Method",
    "detail": "Function (st_uint8 m_uiStream ; EVertexFormat m_eFormat ; EVertexProperty m_aeProperties [ VERTEX_COMPONENT_COUNT ] ; EVertexComponent m_aePropertyComponents [ VERTEX_COMPONENT_COUNT ] ; st_uint8 m_auiVertexOffsets [ VERTEX_COMPONENT_COUNT ] ; } ; struct ST_DLL_LINK SProperty {)",
    "insertText": "SProperty()"
  },
  {
    "label": "IsPresent()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "IsPresent(void)"
  },
  {
    "label": "IsContiguous()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "IsContiguous(void)"
  },
  {
    "label": "NumComponents()",
    "kind": "Method",
    "detail": "Function (st_int32)",
    "insertText": "NumComponents(void)"
  },
  {
    "label": "SVertexDecl()",
    "kind": "Method",
    "detail": "Function (EVertexFormat m_eFormat ; EVertexAttribute m_aeAttribs [ VERTEX_COMPONENT_COUNT ] ; EVertexComponent m_aeAttribComponents [ VERTEX_COMPONENT_COUNT ] ; st_uint8 m_auiOffsets [ VERTEX_COMPONENT_COUNT ] ; } ;)",
    "insertText": "SVertexDecl()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "operator(const SVertexDecl& sRight)"
  },
  {
    "label": "FormatName()",
    "kind": "Method",
    "detail": "Function (const char* ST_CALL_CONV)",
    "insertText": "FormatName(EVertexFormat eFormat)"
  },
  {
    "label": "FormatSize()",
    "kind": "Method",
    "detail": "Function (st_int32 ST_CALL_CONV)",
    "insertText": "FormatSize(EVertexFormat eFormat)"
  },
  {
    "label": "AttributeName()",
    "kind": "Method",
    "detail": "Function (const char* ST_CALL_CONV)",
    "insertText": "AttributeName(EVertexAttribute eAttrib)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDescription(CString& strDesc)"
  },
  {
    "label": "GetInstanceVertexDecl()",
    "kind": "Method",
    "detail": "Function (enum EInstanceType { INSTANCES_3D_TREES,INSTANCES_GRASS,INSTANCES_BILLBOARDS,INSTANCES_NONE } ; void)",
    "insertText": "GetInstanceVertexDecl(SVertexDecl& sInstanceDecl, EInstanceType eInstanceType)"
  },
  {
    "label": "MergeObjectAndInstanceVertexDecls()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "MergeObjectAndInstanceVertexDecls(SVertexDecl& sMergedDecl, const SVertexDecl& sObjectDecl, EInstanceType eInstanceType)"
  },
  {
    "label": "VERTEX_DECL_END()",
    "kind": "Method",
    "detail": "Function (struct ST_DLL_LINK SAttribDesc { st_uint8 m_uiStream ; EVertexAttribute m_eAttrib ; EVertexFormat m_eFormat ; st_uint8 m_uiNumComponents ; struct ST_DLL_LINK SPropertyComponent { EVertexProperty m_eProperty ; EVertexComponent m_eComponent ; } ; SPropertyComponent m_asProperties [ VERTEX_COMPONENT_COUNT ] ; } ; # define)",
    "insertText": "VERTEX_DECL_END()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (0,VERTEX_ATTRIB_COUNT,VERTEX_FORMAT_FULL_FLOAT,0,\\ { { VERTEX_PROPERTY_UNASSIGNED,VERTEX_COMPONENT_X },\\ { VERTEX_PROPERTY_UNASSIGNED,VERTEX_COMPONENT_X },\\ { VERTEX_PROPERTY_UNASSIGNED,VERTEX_COMPONENT_X },\\ { VERTEX_PROPERTY_UNASSIGNED,VERTEX_COMPONENT_X } } } st_bool)",
    "insertText": "Set(const SAttribDesc* pAttribDesc)"
  },
  {
    "label": "SRenderState()",
    "kind": "Method",
    "detail": "Function (SAttribute m_asAttributes [ VERTEX_ATTRIB_COUNT ] ; SProperty m_asProperties [ VERTEX_PROPERTY_COUNT ] ; st_uint8 m_uiVertexSize ; } ; enum ELightingModel { LIGHTING_MODEL_PER_VERTEX,LIGHTING_MODEL_PER_PIXEL,LIGHTING_MODEL_PER_VERTEX_X_PER_PIXEL,LIGHTING_MODEL_DEFERRED } ; enum ELightingEffect { EFFECT_OFF,EFFECT_ON,EFFECT_OFF_X_ON } ; enum ELodMethod { LOD_METHOD_POP,LOD_METHOD_SMOOTH } ; enum ECullType { CULLTYPE_NONE,CULLTYPE_BACK,CULLTYPE_FRONT } ; enum EFogCurve { FOG_CURVE_NONE,FOG_CURVE_LINEAR,FOG_CURVE_EXP,FOG_CURVE_EXP2,FOG_CURVE_USER } ; enum EFogColorType { FOG_COLOR_TYPE_CONSTANT,FOG_COLOR_TYPE_DYNAMIC } ; enum EWindLod { WIND_LOD_NONE,WIND_LOD_GLOBAL,WIND_LOD_BRANCH,WIND_LOD_FULL,WIND_LOD_NONE_X_GLOBAL,WIND_LOD_NONE_X_BRANCH,WIND_LOD_NONE_X_FULL,WIND_LOD_GLOBAL_X_BRANCH,WIND_LOD_GLOBAL_X_FULL,WIND_LOD_BRANCH_X_FULL } ; enum EWindEffect { WIND_EFFECT_LEAF_WIND_1,WIND_EFFECT_LEAF_WIND_2 } ; enum EShaderGenerationMode { SHADER_GEN_MODE_STANDARD,SHADER_GEN_MODE_ACROSS_GEOMETRIES,SHADER_GEN_MODE_AGGRESSIVE_ROUND_UP,SHADER_GEN_MODE_AGGRESSIVE_ROUND_DOWN,SHADER_GEN_MODE_SPEEDTREE_5X_STYLE,SHADER_GEN_MODE_UNIFIED_SHADERS,SHADER_GEN_MODE_UNREAL_ENGINE_4,SHADER_GEN_MODE_COUNT } ; enum ETextureLayer { TL_DIFFUSE,TL_NORMAL,TL_DETAIL_DIFFUSE,TL_DETAIL_NORMAL,TL_SPECULAR_MASK,TL_TRANSMISSION_MASK,TL_AUX_ATLAS1,TL_AUX_ATLAS2,TL_NUM_TEX_LAYERS } ; typedef CPaddedPtr<const char> CStringPtr ; struct ST_DLL_LINK SRenderState { enum EShadowConfig { SHADOW_CONFIG_OFF,SHADOW_CONFIG_1_MAP,SHADOW_CONFIG_2_MAPS,SHADOW_CONFIG_3_MAPS,SHADOW_CONFIG_4_MAPS } ;)",
    "insertText": "SRenderState()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "operator(const SRenderState& sRight)"
  },
  {
    "label": "IsPerPixelModelActive()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "IsPerPixelModelActive(void)"
  },
  {
    "label": "IsLightingModelInTransition()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "IsLightingModelInTransition(void)"
  },
  {
    "label": "VertexShaderHashName()",
    "kind": "Method",
    "detail": "Function (CFixedString)",
    "insertText": "VertexShaderHashName(const CWind& cWind, EShadowConfig eShadowConfig)"
  },
  {
    "label": "PixelShaderHashName()",
    "kind": "Method",
    "detail": "Function (CFixedString)",
    "insertText": "PixelShaderHashName(EShadowConfig eShadowConfig)"
  },
  {
    "label": "GetPixelProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPixelProperties(st_bool abPixelProperties[PIXEL_PROPERTY_COUNT])"
  },
  {
    "label": "GetInstanceType()",
    "kind": "Method",
    "detail": "Function (SVertexDecl::EInstanceType)",
    "insertText": "GetInstanceType(void)"
  },
  {
    "label": "ShaderGenHasFixedDecls()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "ShaderGenHasFixedDecls(void)"
  },
  {
    "label": "ShaderGenerationMode()",
    "kind": "Method",
    "detail": "Function (EShaderGenerationMode)",
    "insertText": "ShaderGenerationMode(void)"
  },
  {
    "label": "IsTextureLayerPresent()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "IsTextureLayerPresent(ETextureLayer eLayer)"
  },
  {
    "label": "IsBranchWindEnabled()",
    "kind": "Method",
    "detail": "Function (CStringPtr m_apTextures [ TL_NUM_TEX_LAYERS ] ; ELightingModel m_eLightingModel ; Vec3 m_vAmbientColor ; ELightingEffect m_eAmbientContrast ; st_float32 m_fAmbientContrastFactor ; st_bool m_bAmbientOcclusion ; Vec3 m_vDiffuseColor ; st_float32 m_fDiffuseScalar ; st_bool m_bDiffuseAlphaMaskIsOpaque ; ELightingEffect m_eDetailLayer ; ELightingEffect m_eSpecular ; st_float32 m_fShininess ; Vec3 m_vSpecularColor ; ELightingEffect m_eTransmission ; Vec3 m_vTransmissionColor ; st_float32 m_fTransmissionShadowBrightness ; st_float32 m_fTransmissionViewDependency ; ELightingEffect m_eBranchSeamSmoothing ; st_float32 m_fBranchSeamWeight ; ELodMethod m_eLodMethod ; st_bool m_bFadeToBillboard ; st_bool m_bVertBillboard ; st_bool m_bHorzBillboard ; EShaderGenerationMode m_eShaderGenerationMode ; st_bool m_bUsedAsGrass ; ECullType m_eFaceCulling ; st_bool m_bBlending ; ELightingEffect m_eAmbientImageLighting ; ELightingEffect m_eHueVariation ; EFogCurve m_eFogCurve ; EFogColorType m_eFogColorStyle ; st_bool m_bCastsShadows ; st_bool m_bReceivesShadows ; st_bool m_bShadowSmoothing ; st_float32 m_fAlphaScalar ; st_bool)",
    "insertText": "IsBranchWindEnabled(void)"
  },
  {
    "label": "IsGlobalWindEnabled()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "IsGlobalWindEnabled(void)"
  },
  {
    "label": "IsFullWindEnabled()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "IsFullWindEnabled(void)"
  },
  {
    "label": "MakeDepthOnly()",
    "kind": "Method",
    "detail": "Function (EWindLod m_eWindLod ; void)",
    "insertText": "MakeDepthOnly(void)"
  },
  {
    "label": "MakeShadowCast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeShadowCast(void)"
  },
  {
    "label": "HasOnlyBranches()",
    "kind": "Method",
    "detail": "Function (ERenderPass m_eRenderPass ; st_bool)",
    "insertText": "HasOnlyBranches(void)"
  },
  {
    "label": "HasOnlyFronds()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "HasOnlyFronds(void)"
  },
  {
    "label": "HasOnlyLeaves()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "HasOnlyLeaves(st_bool bFacing = true, st_bool bNonFacing = true)"
  },
  {
    "label": "HasOnlyRigidMeshes()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "HasOnlyRigidMeshes(void)"
  },
  {
    "label": "VertexDeclHash()",
    "kind": "Method",
    "detail": "Function (st_bool m_bBranchesPresent ; st_bool m_bFrondsPresent ; st_bool m_bLeavesPresent ; st_bool m_bFacingLeavesPresent ; st_bool m_bRigidMeshesPresent ; SVertexDecl m_sVertexDecl ; CStringPtr m_pDescription ; CStringPtr m_pUserData ; private : CFixedString)",
    "insertText": "VertexDeclHash(void)"
  },
  {
    "label": "PixelDeclHash()",
    "kind": "Method",
    "detail": "Function (CFixedString)",
    "insertText": "PixelDeclHash(void)"
  },
  {
    "label": "SVerticalBillboards()",
    "kind": "Method",
    "detail": "Function (} ; struct ST_DLL_LINK SVerticalBillboards {)",
    "insertText": "SVerticalBillboards()"
  },
  {
    "label": "SHorizontalBillboard()",
    "kind": "Method",
    "detail": "Function (st_float32 m_fWidth ; st_float32 m_fTopPos ; st_float32 m_fBottomPos ; st_int32 m_nNumBillboards ; const st_float32* m_pTexCoords ; const st_byte* m_pRotated ; st_int32 m_nNumCutoutVertices ; const st_float32* m_pCutoutVertices ; st_int32 m_nNumCutoutIndices ; const st_uint16* m_pCutoutIndices ; } ; struct ST_DLL_LINK SHorizontalBillboard {)",
    "insertText": "SHorizontalBillboard()"
  },
  {
    "label": "SCollisionObject()",
    "kind": "Method",
    "detail": "Function (st_bool m_bPresent ; Vec3 m_avPositions [ 4 ] ; st_float32 m_afTexCoords [ 8 ] ; } ; struct ST_DLL_LINK SCollisionObject {)",
    "insertText": "SCollisionObject()"
  },
  {
    "label": "SDrawCall()",
    "kind": "Method",
    "detail": "Function (CStringPtr m_pUserString ; Vec3 m_vCenter1 ; Vec3 m_vCenter2 ; st_float32 m_fRadius ; } ; typedef CPaddedPtr<st_byte> CBytePointer ; typedef CPaddedPtr<SRenderState> CRenderStatePointer ; struct ST_DLL_LINK SDrawCall {)",
    "insertText": "SDrawCall()"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (CRenderStatePointer m_pRenderState ; st_int32 m_nRenderStateIndex ; st_int32 m_nNumVertices ; CBytePointer m_pVertexData ; st_bool)",
    "insertText": "GetProperty(EVertexProperty eProperty, st_int32 nVertex, st_float32 afValues[4])"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "GetProperty(EVertexProperty eProperty, st_int32 nVertex, st_float16 ahfValues[4])"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "GetProperty(EVertexProperty eProperty, st_int32 nVertex, st_byte abValues[4])"
  },
  {
    "label": "SetProperty()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "SetProperty(EVertexProperty eProperty, st_int32 nVertex, const st_float32 afValues[4])"
  },
  {
    "label": "SetProperty()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "SetProperty(EVertexProperty eProperty, st_int32 nVertex, const st_float16 ahfValues[4])"
  },
  {
    "label": "SetProperty()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "SetProperty(EVertexProperty eProperty, st_int32 nVertex, const st_byte abValues[4])"
  },
  {
    "label": "SBone()",
    "kind": "Method",
    "detail": "Function (st_int32 m_nNumIndices ; st_bool m_b32BitIndices ; CBytePointer m_pIndexData ; } ; struct ST_DLL_LINK SBone {)",
    "insertText": "SBone()"
  },
  {
    "label": "SLod()",
    "kind": "Method",
    "detail": "Function (st_int32 m_nID ; st_int32 m_nParentID ; Vec3 m_vStart ; Vec3 m_vEnd ; st_float32 m_fRadius ; st_float32 m_fMass ; st_float32 m_fMassWithChildren ; st_bool m_bBreakable ; } ; typedef CPaddedPtr<SDrawCall> CDrawCallPointer ; typedef CPaddedPtr<SBone> CBonePointer ; struct ST_DLL_LINK SLod {)",
    "insertText": "SLod()"
  },
  {
    "label": "SGeometry()",
    "kind": "Method",
    "detail": "Function (st_int32 m_nNumDrawCalls ; CDrawCallPointer m_pDrawCalls ; st_int32 m_nNumBones ; CBonePointer m_pBones ; } ; typedef CPaddedPtr<SLod> CLodPointer ; struct ST_DLL_LINK SGeometry {)",
    "insertText": "SGeometry()"
  },
  {
    "label": "SLodProfile()",
    "kind": "Method",
    "detail": "Function (st_int32 m_nNum3dRenderStates ; st_bool m_bDepthOnlyIncluded ; st_bool m_bShadowCastIncluded ; CStringPtr m_strShaderPath ; SRenderState* m_p3dRenderStates [ RENDER_PASS_COUNT ] ; SRenderState m_aBillboardRenderStates [ RENDER_PASS_COUNT ] ; st_int32 m_nNumLods ; CLodPointer m_pLods ; SVerticalBillboards m_sVertBBs ; SHorizontalBillboard m_sHorzBB ; } ; struct ST_DLL_LINK SLodProfile {)",
    "insertText": "SLodProfile()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "IsValid(void)"
  },
  {
    "label": "ComputeDerived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeDerived(void)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(st_float32 fScale)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Square(SLodProfile& sSquaredProfile)"
  },
  {
    "label": "st_float32()",
    "kind": "Method",
    "detail": "Function (operator const)",
    "insertText": "st_float32(void)"
  },
  {
    "label": "CAllocatorInterface()",
    "kind": "Method",
    "detail": "Function (st_float32 m_fHighDetail3dDistance ; st_float32 m_f3dRange ; st_float32 m_fBillboardStartDistance ; st_float32 m_fBillboardRange ; st_float32 m_fLowDetail3dDistance ; st_float32 m_fBillboardFinalDistance ; st_bool m_bLodIsPresent ; } ; class ST_DLL_LINK CAllocatorInterface { public :)",
    "insertText": "CAllocatorInterface(CAllocator* pAllocator)"
  },
  {
    "label": "CFileSystemInterface()",
    "kind": "Method",
    "detail": "Function (} ; class ST_DLL_LINK CFileSystemInterface { public :)",
    "insertText": "CFileSystemInterface(CFileSystem* pFileSystem)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (SpeedTree::CFileSystem* ST_CALL_CONV)",
    "insertText": "Get(void)"
  },
  {
    "label": "CCore()",
    "kind": "Method",
    "detail": "Function (} ; class ST_DLL_LINK CCore { public : class CParser ;)",
    "insertText": "CCore()"
  },
  {
    "label": "LoadTree()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "LoadTree(const st_char* pFilename, st_bool bGrassModel = false, st_float32 fScalar = 1.0f)"
  },
  {
    "label": "LoadTree()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "LoadTree(const st_byte* pMemBlock, st_uint32 uiNumBytes, st_bool bCopyBuffer, st_bool bGrassModel = false, st_float32 fScalar = 1.0f)"
  },
  {
    "label": "GetFilename()",
    "kind": "Method",
    "detail": "Function (const st_char*)",
    "insertText": "GetFilename(void)"
  },
  {
    "label": "FileSizeInBytes()",
    "kind": "Method",
    "detail": "Function (size_t ST_CALL_CONV)",
    "insertText": "FileSizeInBytes(const st_char* pFilename)"
  },
  {
    "label": "LoadFileIntoBuffer()",
    "kind": "Method",
    "detail": "Function (st_byte* ST_CALL_CONV)",
    "insertText": "LoadFileIntoBuffer(const st_char* pFilename, size_t& siBufferSize, st_byte* pClientSideBuffer = NULL)"
  },
  {
    "label": "IsCompiledForDeferred()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "IsCompiledForDeferred(void)"
  },
  {
    "label": "IsCompiledAsGrass()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "IsCompiledAsGrass(void)"
  },
  {
    "label": "GetGeometry()",
    "kind": "Method",
    "detail": "Function (const SGeometry*)",
    "insertText": "GetGeometry(void)"
  },
  {
    "label": "GetExtents()",
    "kind": "Method",
    "detail": "Function (const CExtents&)",
    "insertText": "GetExtents(void)"
  },
  {
    "label": "IsGrassModel()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "IsGrassModel(void)"
  },
  {
    "label": "AreTexCoordsFlipped()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "AreTexCoordsFlipped(void)"
  },
  {
    "label": "GetLodProfile()",
    "kind": "Method",
    "detail": "Function (const SLodProfile&)",
    "insertText": "GetLodProfile(void)"
  },
  {
    "label": "GetLodProfileSquared()",
    "kind": "Method",
    "detail": "Function (const SLodProfile&)",
    "insertText": "GetLodProfileSquared(void)"
  },
  {
    "label": "SetLodProfile()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "SetLodProfile(const SLodProfile& sLodProfile)"
  },
  {
    "label": "ComputeLodSnapshot()",
    "kind": "Method",
    "detail": "Function (st_int32)",
    "insertText": "ComputeLodSnapshot(st_float32 fLod)"
  },
  {
    "label": "ComputeLodByDistance()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "ComputeLodByDistance(st_float32 fDistance)"
  },
  {
    "label": "ComputeLodByDistanceSquared()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "ComputeLodByDistanceSquared(st_float32 fDistanceSquared)"
  },
  {
    "label": "ComputeLodTransition()",
    "kind": "Method",
    "detail": "Function (st_float32 ST_CALL_CONV)",
    "insertText": "ComputeLodTransition(st_float32 fLod, st_int32 nNumDiscreteLevels)"
  },
  {
    "label": "SetClipSpaceDepthRange()",
    "kind": "Method",
    "detail": "Function (void ST_CALL_CONV)",
    "insertText": "SetClipSpaceDepthRange(st_float32 fNear, st_float32 fFar)"
  },
  {
    "label": "GetClipSpaceDepthRange()",
    "kind": "Method",
    "detail": "Function (void ST_CALL_CONV)",
    "insertText": "GetClipSpaceDepthRange(st_float32& fNear, st_float32& fFar)"
  },
  {
    "label": "GetWind()",
    "kind": "Method",
    "detail": "Function (CWind&)",
    "insertText": "GetWind(void)"
  },
  {
    "label": "GetWindShaderTable()",
    "kind": "Method",
    "detail": "Function (const st_float32*)",
    "insertText": "GetWindShaderTable(void)"
  },
  {
    "label": "GetCollisionObjects()",
    "kind": "Method",
    "detail": "Function (const SCollisionObject*)",
    "insertText": "GetCollisionObjects(st_int32& nNumObjects)"
  },
  {
    "label": "SHueVariationParams()",
    "kind": "Method",
    "detail": "Function (struct ST_DLL_LINK SHueVariationParams {)",
    "insertText": "SHueVariationParams() : m_fByPos(0.0f), m_fByVertex(0.0f)"
  },
  {
    "label": "SetHueVariationParams()",
    "kind": "Method",
    "detail": "Function (} ; st_float32 m_fByPos ; st_float32 m_fByVertex ; Vec3 m_vColor ; } ; void)",
    "insertText": "SetHueVariationParams(const SHueVariationParams& sParams)"
  },
  {
    "label": "GetHueVariationParams()",
    "kind": "Method",
    "detail": "Function (const SHueVariationParams&)",
    "insertText": "GetHueVariationParams(void)"
  },
  {
    "label": "SetAmbientImageScalar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAmbientImageScalar(st_float32 fScalar)"
  },
  {
    "label": "GetAmbientImageScalar()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "GetAmbientImageScalar(void)"
  },
  {
    "label": "GetUserString()",
    "kind": "Method",
    "detail": "Function (enum EUserStringOrdinal { USER_STRING_0,USER_STRING_1,USER_STRING_2,USER_STRING_3,USER_STRING_4,USER_STRING_COUNT } ; const char*)",
    "insertText": "GetUserString(EUserStringOrdinal eOrdinal)"
  },
  {
    "label": "GetUserData()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetUserData(void)"
  },
  {
    "label": "SetUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserData(void* pData)"
  },
  {
    "label": "SResourceStats()",
    "kind": "Method",
    "detail": "Function (struct ST_DLL_LINK SResourceStats {)",
    "insertText": "SResourceStats()"
  },
  {
    "label": "GetSdkResourceUsage()",
    "kind": "Method",
    "detail": "Function (size_t m_siCurrentUsage ; size_t m_siPeakUsage ; size_t m_siCurrentQuantity ; size_t m_siPeakQuantity ; } ; struct ST_DLL_LINK SResourceSummary { SResourceStats m_sHeap ; SResourceStats m_asGfxResources [ GFX_RESOURCE_COUNT ] ; } ; const SResourceSummary& ST_CALL_CONV)",
    "insertText": "GetSdkResourceUsage(void)"
  },
  {
    "label": "ShutDown()",
    "kind": "Method",
    "detail": "Function (void ST_CALL_CONV)",
    "insertText": "ShutDown(void)"
  },
  {
    "label": "DeleteGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteGeometry(void)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void ST_CALL_CONV)",
    "insertText": "SetError(const st_char* pError, ...)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (const st_char* ST_CALL_CONV)",
    "insertText": "GetError(void)"
  },
  {
    "label": "IsRunTimeBigEndian()",
    "kind": "Method",
    "detail": "Function (st_bool ST_CALL_CONV)",
    "insertText": "IsRunTimeBigEndian(void)"
  },
  {
    "label": "Authorize()",
    "kind": "Method",
    "detail": "Function (st_bool ST_CALL_CONV)",
    "insertText": "Authorize(const st_char* pKey)"
  },
  {
    "label": "IsAuthorized()",
    "kind": "Method",
    "detail": "Function (st_bool ST_CALL_CONV)",
    "insertText": "IsAuthorized(void)"
  },
  {
    "label": "Version()",
    "kind": "Method",
    "detail": "Function (const st_char* ST_CALL_CONV)",
    "insertText": "Version(st_bool bShort = false)"
  },
  {
    "label": "UncompressVec3()",
    "kind": "Method",
    "detail": "Function (Vec3 ST_CALL_CONV)",
    "insertText": "UncompressVec3(const st_uint8* pCompressedVector)"
  },
  {
    "label": "UncompressScalar()",
    "kind": "Method",
    "detail": "Function (st_float32 ST_CALL_CONV)",
    "insertText": "UncompressScalar(st_uint8 uiCompressedScalar)"
  },
  {
    "label": "CompressVec3()",
    "kind": "Method",
    "detail": "Function (void ST_CALL_CONV)",
    "insertText": "CompressVec3(st_uint8 auiCompressedValue[3], const Vec3& vVector)"
  },
  {
    "label": "CompressScalar()",
    "kind": "Method",
    "detail": "Function (st_uint8 ST_CALL_CONV)",
    "insertText": "CompressScalar(st_float32 fUncompressedScalar)"
  },
  {
    "label": "ComponentName()",
    "kind": "Method",
    "detail": "Function (const st_char* ST_CALL_CONV)",
    "insertText": "ComponentName(st_int32 nComponent)"
  },
  {
    "label": "GetVertexPropertyDesc()",
    "kind": "Method",
    "detail": "Function (const SVertexPropertyDesc& ST_CALL_CONV)",
    "insertText": "GetVertexPropertyDesc(EVertexProperty eProperty)"
  },
  {
    "label": "GetPixelPropertyDesc()",
    "kind": "Method",
    "detail": "Function (const SPixelPropertyDesc& ST_CALL_CONV)",
    "insertText": "GetPixelPropertyDesc(EPixelProperty eProperty)"
  },
  {
    "label": "TmpHeapBlockLock()",
    "kind": "Method",
    "detail": "Function (st_byte* ST_CALL_CONV)",
    "insertText": "TmpHeapBlockLock(size_t siSizeInBytes, const char* pOwner, st_int32& nHandle)"
  },
  {
    "label": "TmpHeapBlockUnlock()",
    "kind": "Method",
    "detail": "Function (st_bool ST_CALL_CONV)",
    "insertText": "TmpHeapBlockUnlock(st_int32 nHandle)"
  },
  {
    "label": "TmpHeapBlockFindHandle()",
    "kind": "Method",
    "detail": "Function (st_int32 ST_CALL_CONV)",
    "insertText": "TmpHeapBlockFindHandle(const st_byte* pBlock)"
  },
  {
    "label": "TmpHeapBlockDelete()",
    "kind": "Method",
    "detail": "Function (st_bool ST_CALL_CONV)",
    "insertText": "TmpHeapBlockDelete(st_int32 nHandle, size_t siSizeThreshold = 0)"
  },
  {
    "label": "TmpHeapBlockDeleteAll()",
    "kind": "Method",
    "detail": "Function (st_bool ST_CALL_CONV)",
    "insertText": "TmpHeapBlockDeleteAll(size_t siSizeThreshold = 0)"
  },
  {
    "label": "ResourceAllocated()",
    "kind": "Method",
    "detail": "Function (void ST_CALL_CONV)",
    "insertText": "ResourceAllocated(EGfxResourceType eType, const CFixedString& strResourceKey, size_t siSize)"
  },
  {
    "label": "ResourceReleased()",
    "kind": "Method",
    "detail": "Function (void ST_CALL_CONV)",
    "insertText": "ResourceReleased(const CFixedString& strResourceKey)"
  },
  {
    "label": "CCore()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "CCore(const CCore& cRight)"
  },
  {
    "label": "SrtBuffer()",
    "kind": "Method",
    "detail": "Function (const st_byte*)",
    "insertText": "SrtBuffer(void)"
  },
  {
    "label": "ReassignPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReassignPointer(st_byte*& pPointer, const st_byte* pRefBlock)"
  },
  {
    "label": "ReassignRenderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReassignRenderState(SRenderState& sRenderState, const st_byte* pOriginalSrtBuffer)"
  },
  {
    "label": "ApplyScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyScale(st_float32 fScalar)"
  }
]