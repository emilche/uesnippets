[
  {
    "label": "BasePointScatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasePointScatter"
  },
  {
    "label": "UniformPointScatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UniformPointScatter"
  },
  {
    "label": "DenseUniformPointScatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseUniformPointScatter"
  },
  {
    "label": "NonUniformPointScatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NonUniformPointScatter"
  },
  {
    "label": "UniformPointScatter()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_POINT_SCATTER_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_POINT_SCATTER_HAS_BEEN_INCLUDED # include<openvdb / Types . h> # include<openvdb / Grid . h> # include<openvdb / math / Math . h> # include<openvdb / util / NullInterrupter . h> # include<tbb / parallel_sort . h> # include<tbb / parallel_for . h> # include<iostream> # include<memory> # include<string> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<PointAccessorType,RandomGenerator,InterruptType = util::NullInterrupter> class BasePointScatter ; template<PointAccessorType,RandomGenerator,InterruptType = util::NullInterrupter> class UniformPointScatter : public BasePointScatter<PointAccessorType,RandomGenerator,InterruptType> { public : using BaseT = BasePointScatter<PointAccessorType,RandomGenerator,InterruptType> ;)",
    "insertText": "UniformPointScatter(PointAccessorType& points, Index64 pointCount, RandomGenerator& randGen, double spread = 1.0, InterruptType* interrupt = nullptr) : BaseT(points, randGen, spread, interrupt) , mTargetPointCount(pointCount) , mPointsPerVolume(0.0f)"
  },
  {
    "label": "UniformPointScatter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UniformPointScatter(PointAccessorType& points, float pointsPerVolume, RandomGenerator& randGen, double spread = 1.0, InterruptType* interrupt = nullptr) : BaseT(points, randGen, spread, interrupt) , mTargetPointCount(0) , mPointsPerVolume(pointsPerVolume)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<GridT> bool)",
    "insertText": "operator()(const GridT& grid)"
  },
  {
    "label": "activeVoxelCount()",
    "kind": "Method",
    "detail": "Function (mVoxelCount = grid .)",
    "insertText": "activeVoxelCount()"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (const auto voxelVolume = grid .)",
    "insertText": "transform().voxelVolume()"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "start(\"Uniform scattering with fixed point density\")"
  },
  {
    "label": "Index64()",
    "kind": "Method",
    "detail": "Function (mTargetPointCount =)",
    "insertText": "Index64(mPointsPerVolume * voxelVolume * double(mVoxelCount))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mTargetPointCount > 0)"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "start(\"Uniform scattering with fixed point count\")"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (mPointsPerVolume =)",
    "insertText": "float(mTargetPointCount) / float(voxelVolume * double(mVoxelCount))"
  },
  {
    "label": "rand()",
    "kind": "Method",
    "detail": "Function (} else { return false ; } std::unique_ptr<Index64 [ ]> idList { new Index64 [ mTargetPointCount ] } ; math::RandInt<Index64,RandomGenerator>)",
    "insertText": "rand(BaseT::mRand01.engine(), 0, mVoxelCount-1)"
  },
  {
    "label": "parallel_sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_sort(idList.get(), idList.get() + mTargetPointCount)"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (CoordBBox bbox ; const Vec3R)",
    "insertText": "offset(0.5, 0.5, 0.5)"
  },
  {
    "label": "cbeginValueOn()",
    "kind": "Method",
    "detail": "Function (GridT::ValueOnCIter valueIter = grid .)",
    "insertText": "cbeginValueOn()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const Index64 voxelId = idList [ i ] ;)",
    "insertText": "while(n <= voxelId)"
  },
  {
    "label": "getVoxelCount()",
    "kind": "Method",
    "detail": "Function (+ + valueIter ; n + = valueIter .)",
    "insertText": "getVoxelCount()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(valueIter.isVoxelValue())"
  },
  {
    "label": "addPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPoint(grid, valueIter.getCoord() - offset)"
  },
  {
    "label": "getBoundingBox()",
    "kind": "Method",
    "detail": "Function (} else { valueIter .)",
    "insertText": "getBoundingBox(bbox)"
  },
  {
    "label": "addPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPoint(grid, bbox.min() - offset, bbox.extents())"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "end()"
  },
  {
    "label": "getPointsPerVolume()",
    "kind": "Method",
    "detail": "Function (os<<\" Uniformly scattered \"<<mPointCount<<\" points into \"<<mVoxelCount<<\" active voxels in \\ \" \"<<name<<\" \\ \" corresponding to \"<<mPointsPerVolume<<\" points per volume . \"<<std::endl ; } float)",
    "insertText": "getPointsPerVolume()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using ValueIter = GridT::ValueOnCIter ;)",
    "insertText": "if(mPointsPerVoxel < 1.0e-6)"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "start(\"Dense uniform scattering with fixed point count\")"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (const int ppv =)",
    "insertText": "Floor(mPointsPerVoxel)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const double delta = mPointsPerVoxel -)",
    "insertText": "float(ppv)"
  },
  {
    "label": "isApproxZero()",
    "kind": "Method",
    "detail": "Function (const bool fractional = !)",
    "insertText": "isApproxZero(delta, 1.0e-6)"
  },
  {
    "label": "getCoord()",
    "kind": "Method",
    "detail": "Function (const Vec3R dmin = iter .)",
    "insertText": "getCoord()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const Coord)",
    "insertText": "size(bbox.extents())"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (const Vec3R dmin = bbox .)",
    "insertText": "min()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const double d = mPointsPerVoxel*)",
    "insertText": "float(iter.getVoxelCount())"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (const int m =)",
    "insertText": "Floor(d)"
  },
  {
    "label": "getPointsPerVoxel()",
    "kind": "Method",
    "detail": "Function (os<<\" Dense uniformly scattered \"<<mPointCount<<\" points into \"<<mVoxelCount<<\" active voxels in \\ \" \"<<name<<\" \\ \" corresponding to \"<<mPointsPerVoxel<<\" points per voxel . \"<<std::endl ; } float)",
    "insertText": "getPointsPerVoxel()"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "start(\"Non-uniform scattering with local point density\")"
  },
  {
    "label": "voxelSize()",
    "kind": "Method",
    "detail": "Function (const Vec3d dim = grid .)",
    "insertText": "voxelSize()"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double d =)",
    "insertText": "double(*iter) * pointsPerVoxel * double(iter.getVoxelCount())"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int n =)",
    "insertText": "int(d)"
  },
  {
    "label": "getPointPerVolume()",
    "kind": "Method",
    "detail": "Function (os<<\" Non - uniformly scattered \"<<mPointCount<<\" points into \"<<mVoxelCount<<\" active voxels in \\ \" \"<<name<<\" \\ \" . \"<<std::endl ; } float)",
    "insertText": "getPointPerVolume()"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "start(const char* name)"
  },
  {
    "label": "interrupt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "interrupt()"
  },
  {
    "label": "getRand01()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "getRand01()"
  },
  {
    "label": "getRand()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "getRand()"
  },
  {
    "label": "addPoint()",
    "kind": "Method",
    "detail": "Function (} template<GridT> void)",
    "insertText": "addPoint(const GridT &grid, const Vec3R &dmin)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (const Vec3R)",
    "insertText": "pos(dmin[0] + this->getRand(), dmin[1] + this->getRand(), dmin[2] + this->getRand())"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (mPoints .)",
    "insertText": "add(grid.indexToWorld(pos))"
  },
  {
    "label": "addPoint()",
    "kind": "Method",
    "detail": "Function (+ + mPointCount ; } template<GridT> void)",
    "insertText": "addPoint(const GridT &grid, const Vec3R &dmin, const Coord &size)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (const Vec3R)",
    "insertText": "pos(dmin[0] + size[0]*this->getRand(), dmin[1] + size[1]*this->getRand(), dmin[2] + size[2]*this->getRand())"
  }
]