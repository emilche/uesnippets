[
  {
    "label": "FMovieSceneChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannel"
  },
  {
    "label": "FMovieSceneChannelMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelMetaData"
  },
  {
    "label": "FMovieSceneChannelProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelProxy"
  },
  {
    "label": "FMovieSceneChannelProxyData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelProxyData"
  },
  {
    "label": "FMovieSceneChannelEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelEntry"
  },
  {
    "label": "GetChannelTypeName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / BinarySearch . h \" # include \" Channels / MovieSceneChannelEditorDataEntry . h \" # include \" Channels / MovieSceneChannelHandle . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / InlineValue . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" UObject / NameTypes . h \" struct FMovieSceneChannel ; struct FMovieSceneChannelMetaData ; struct FMovieSceneChannelProxy ; struct FMovieSceneChannelProxyData ; struct FMovieSceneChannelEntry : FMovieSceneChannelEditorDataEntry { FName)",
    "insertText": "GetChannelTypeName()"
  },
  {
    "label": "FMovieSceneChannelEntry()",
    "kind": "Method",
    "detail": "Function (} # endif private : FMovieSceneChannelProxyData ; FMovieSceneChannelProxy ; template<ChannelType>)",
    "insertText": "FMovieSceneChannelEntry(FName InChannelTypeName, const ChannelType& Channel) : FMovieSceneChannelEditorDataEntry(Channel) , ChannelTypeName(InChannelTypeName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} FName ChannelTypeName ; TArray<FMovieSceneChannel*> Channels ; } ; struct FMovieSceneChannelProxyData { # if WITH_EDITOR template<ChannelType> void)",
    "insertText": "Add(ChannelType& InChannel, const FMovieSceneChannelMetaData& InMetaData)"
  },
  {
    "label": "AddInternal()",
    "kind": "Method",
    "detail": "Function (const int32 ChannelTypeIndex =)",
    "insertText": "AddInternal(InChannel)"
  },
  {
    "label": "ChannelType()",
    "kind": "Method",
    "detail": "Function (Entries [ ChannelTypeIndex ] . AddMetaData<)",
    "insertText": "ChannelType(InMetaData)"
  },
  {
    "label": "AddWithDefaultEditorData()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType> FMovieSceneChannelHandle)",
    "insertText": "AddWithDefaultEditorData(ChannelType& InChannel, const FMovieSceneChannelMetaData& InMetaData)"
  },
  {
    "label": "ChannelType()",
    "kind": "Method",
    "detail": "Function (Entries [ ChannelTypeIndex ] . AddMetaData<)",
    "insertText": "ChannelType(InMetaData, typename TMovieSceneChannelTraits<ChannelType>::ExtendedEditorDataType())"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (const FName ChannelTypeName =)",
    "insertText": "StaticStruct()->GetFName()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType,ExtendedEditorDataType> void)",
    "insertText": "Add(ChannelType& InChannel, const FMovieSceneChannelMetaData& InMetaData, ExtendedEditorDataType&& InExtendedEditorData)"
  },
  {
    "label": "ChannelType()",
    "kind": "Method",
    "detail": "Function (Entries [ ChannelTypeIndex ] . AddMetaData<)",
    "insertText": "ChannelType(InMetaData, Forward<ExtendedEditorDataType>(InExtendedEditorData))"
  },
  {
    "label": "SetExtendedEditorData()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType,ExtendedEditorDataType> void)",
    "insertText": "SetExtendedEditorData(FMovieSceneChannelHandle ChannelHandle, ExtendedEditorDataType&& InExtendedEditorData)"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (FMovieSceneChannelEntry* Entry = Entries .)",
    "insertText": "FindByPredicate([=](const FMovieSceneChannelEntry& CurEntry) { return CurEntry.ChannelTypeName == ChannelTypeName; })"
  },
  {
    "label": "ChannelType()",
    "kind": "Method",
    "detail": "Function (Entry -> SetExtendedEditorData<)",
    "insertText": "ChannelType(ChannelHandle.GetChannelIndex(), InExtendedEditorData)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } # else template<ChannelType> void)",
    "insertText": "Add(ChannelType& InChannel)"
  },
  {
    "label": "AddInternal()",
    "kind": "Method",
    "detail": "Function (} # endif private : template<ChannelType> int32)",
    "insertText": "AddInternal(ChannelType& InChannel)"
  },
  {
    "label": "FMovieSceneChannelProxy()",
    "kind": "Method",
    "detail": "Function (struct FMovieSceneChannelProxy ; TArray<FMovieSceneChannelEntry,TInlineAllocator<1>> Entries ; } ; struct FMovieSceneChannelProxy : TSharedFromThis<FMovieSceneChannelProxy> { public : FSimpleMulticastDelegate OnDestroy ;)",
    "insertText": "FMovieSceneChannelProxy()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnDestroy .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "FMovieSceneChannelProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneChannelProxy(FMovieSceneChannelProxyData&& InChannels) : Entries(MoveTemp(InChannels.Entries))"
  },
  {
    "label": "FMovieSceneChannelProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneChannelProxy(const FMovieSceneChannelProxy&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneChannelProxy&)",
    "insertText": "operator(const FMovieSceneChannelProxy&)"
  },
  {
    "label": "FMovieSceneChannelProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneChannelProxy(FMovieSceneChannelProxy&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneChannelProxy&)",
    "insertText": "operator(FMovieSceneChannelProxy&&)"
  },
  {
    "label": "GetAllEntries()",
    "kind": "Method",
    "detail": "Function (public : TArrayView<const FMovieSceneChannelEntry>)",
    "insertText": "GetAllEntries()"
  },
  {
    "label": "FindIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindIndex(FName ChannelTypeName, const FMovieSceneChannel* ChannelPtr)"
  },
  {
    "label": "GetChannels()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> TArrayView<ChannelType*>)",
    "insertText": "GetChannels()"
  },
  {
    "label": "GetChannel()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> ChannelType*)",
    "insertText": "GetChannel(int32 ChannelIndex)"
  },
  {
    "label": "GetChannel()",
    "kind": "Method",
    "detail": "Function (FMovieSceneChannel*)",
    "insertText": "GetChannel(FName ChannelTypeName, int32 ChannelIndex)"
  },
  {
    "label": "NumChannels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumChannels()"
  },
  {
    "label": "MakeHandle()",
    "kind": "Method",
    "detail": "Function (FMovieSceneChannelHandle)",
    "insertText": "MakeHandle(FName ChannelTypeName, int32 Index)"
  },
  {
    "label": "MakeHandle()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> TMovieSceneChannelHandle<ChannelType>)",
    "insertText": "MakeHandle(int32 Index)"
  },
  {
    "label": "CopyHandle()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType> TMovieSceneChannelHandle<ChannelType>)",
    "insertText": "CopyHandle(TMovieSceneChannelHandle<ChannelType> InOtherHandle)"
  },
  {
    "label": "FMovieSceneChannelProxy()",
    "kind": "Method",
    "detail": "Function (} # if ! WITH_EDITOR template<ChannelType>)",
    "insertText": "FMovieSceneChannelProxy(ChannelType& InChannel)"
  },
  {
    "label": "FMovieSceneChannelProxy()",
    "kind": "Method",
    "detail": "Function (# else template<ChannelType>)",
    "insertText": "FMovieSceneChannelProxy(ChannelType& InChannel, const FMovieSceneChannelMetaData& InMetaData)"
  },
  {
    "label": "FMovieSceneChannelProxy()",
    "kind": "Method",
    "detail": "Function (template<ChannelType,ExtendedEditorDataType>)",
    "insertText": "FMovieSceneChannelProxy(ChannelType& InChannel, const FMovieSceneChannelMetaData& InMetaData, ExtendedEditorDataType&& InExtendedEditorData)"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> TArrayView<const FMovieSceneChannelMetaData>)",
    "insertText": "GetMetaData()"
  },
  {
    "label": "GetChannelByName()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> TMovieSceneChannelHandle<ChannelType>)",
    "insertText": "GetChannelByName(FName ChannelName)"
  },
  {
    "label": "GetAllExtendedEditorData()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> TArrayView<const TMovieSceneChannelTraits<ChannelType>::ExtendedEditorDataType>)",
    "insertText": "GetAllExtendedEditorData()"
  },
  {
    "label": "EnsureHandlesByNamePopulated()",
    "kind": "Method",
    "detail": "Function (# endif private : using TSharedFromThis::AsShared ; TArray<FMovieSceneChannelEntry,TInlineAllocator<1>> Entries ; # if WITH_EDITOR void)",
    "insertText": "EnsureHandlesByNamePopulated()"
  },
  {
    "label": "ChannelType()",
    "kind": "Method",
    "detail": "Function (FMovieSceneChannelHandle::TrackChannelTypeName<)",
    "insertText": "ChannelType()"
  },
  {
    "label": "LowerBoundBy()",
    "kind": "Method",
    "detail": "Function (int32 ChannelTypeIndex =)",
    "insertText": "LowerBoundBy(Entries, ChannelTypeName, &FMovieSceneChannelEntry::GetChannelTypeName, FNameLexicalLess())"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Entries .)",
    "insertText": "Insert(FMovieSceneChannelEntry(ChannelTypeName, InChannel), ChannelTypeIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(Entries.IsValidIndex(ChannelTypeIndex))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Entries [ ChannelTypeIndex ] . Channels .)",
    "insertText": "Add(&InChannel)"
  },
  {
    "label": "FindEntry()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneChannelEntry* FoundEntry =)",
    "insertText": "FindEntry(ChannelTypeName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Entries .)",
    "insertText": "Add(FMovieSceneChannelEntry(ChannelTypeName, InChannel))"
  },
  {
    "label": "FMovieSceneChannelProxy()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType,ExtendedEditorDataType>)",
    "insertText": "FMovieSceneChannelProxy(ChannelType& InChannel, const FMovieSceneChannelMetaData& InMetaData, ExtendedEditorDataType&& InExtendedEditorDataType)"
  },
  {
    "label": "ChannelType()",
    "kind": "Method",
    "detail": "Function (Entries [ 0 ] . AddMetaData<)",
    "insertText": "ChannelType(InMetaData, Forward<ExtendedEditorDataType>(InExtendedEditorDataType))"
  },
  {
    "label": "ExtendedEditorDataType()",
    "kind": "Method",
    "detail": "Function (} return TArrayView<const TMovieSceneChannelTraits<ChannelType)",
    "insertText": "ExtendedEditorDataType()"
  },
  {
    "label": "FMovieSceneChannelMetaData()",
    "kind": "Method",
    "detail": "Function (} return TArrayView<const)",
    "insertText": "FMovieSceneChannelMetaData()"
  },
  {
    "label": "GetChannelByName()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneChannelHandle UntypedHandle =)",
    "insertText": "GetChannelByName(ChannelName)"
  }
]