[
  {
    "label": "ReceiverFrameStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReceiverFrameStats"
  },
  {
    "label": "FrameInFlight",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameInFlight"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_FRAME_IN_FLIGHT_H_ # define TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_FRAME_IN_FLIGHT_H_ # include<map> # include<set> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / units / data_size . h \" # include \" api / units / timestamp . h \" # include \" api / video / video_frame . h \" # include \" api / video / video_frame_type . h \" # include \" test / pc / e2e / analyzer / video / default_video_quality_analyzer_internal_shared_objects . h \" namespace webrtc { struct ReceiverFrameStats { Timestamp received_time =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "Bytes()",
    "kind": "Method",
    "detail": "Function (VideoFrameType frame_type = VideoFrameType::kEmptyFrame ; DataSize encoded_image_size =)",
    "insertText": "Bytes(0)"
  },
  {
    "label": "FrameInFlight()",
    "kind": "Method",
    "detail": "Function (absl::optional<int> decoded_frame_width = absl::nullopt ; absl::optional<int> decoded_frame_height = absl::nullopt ; absl::optional<StreamCodecInfo> used_decoder = absl::nullopt ; bool dropped = false ; bool decoder_failed = false ; } ; class FrameInFlight { public :)",
    "insertText": "FrameInFlight(size_t stream, VideoFrame frame, Timestamp captured_time, std::set<size_t> expected_receivers)"
  },
  {
    "label": "stream()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "stream()"
  },
  {
    "label": "SetFrameId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameId(uint16_t id)"
  },
  {
    "label": "AddExpectedReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedReceiver(size_t peer)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (expected_receivers_ .)",
    "insertText": "insert(peer)"
  },
  {
    "label": "RemoveExpectedReceiver()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveExpectedReceiver(size_t peer)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (expected_receivers_ .)",
    "insertText": "erase(peer)"
  },
  {
    "label": "GetPeersWhichDidntReceive()",
    "kind": "Method",
    "detail": "Function (} std::vector<size_t>)",
    "insertText": "GetPeersWhichDidntReceive()"
  },
  {
    "label": "HaveAllPeersReceived()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HaveAllPeersReceived()"
  },
  {
    "label": "SetPreEncodeTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreEncodeTime(webrtc::Timestamp time)"
  },
  {
    "label": "OnFrameEncoded()",
    "kind": "Method",
    "detail": "Function (pre_encode_time_ = time ; } void)",
    "insertText": "OnFrameEncoded(webrtc::Timestamp time, VideoFrameType frame_type, DataSize encoded_image_size, uint32_t target_encode_bitrate, StreamCodecInfo used_encoder)"
  },
  {
    "label": "HasEncodedTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEncodedTime()"
  },
  {
    "label": "OnFramePreDecode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFramePreDecode(size_t peer, webrtc::Timestamp received_time, webrtc::Timestamp decode_start_time, VideoFrameType frame_type, DataSize encoded_image_size)"
  },
  {
    "label": "HasReceivedTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReceivedTime(size_t peer)"
  },
  {
    "label": "OnFrameDecoded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameDecoded(size_t peer, webrtc::Timestamp time, int width, int height, const StreamCodecInfo& used_decoder)"
  },
  {
    "label": "OnDecoderError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDecoderError(size_t peer, const StreamCodecInfo& used_decoder)"
  },
  {
    "label": "HasDecodeEndTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDecodeEndTime(size_t peer)"
  },
  {
    "label": "OnFrameRendered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameRendered(size_t peer, webrtc::Timestamp time)"
  },
  {
    "label": "HasRenderedTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRenderedTime(size_t peer)"
  },
  {
    "label": "rendered_time()",
    "kind": "Method",
    "detail": "Function (webrtc::Timestamp)",
    "insertText": "rendered_time(size_t peer)"
  },
  {
    "label": "MarkDropped()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkDropped(size_t peer)"
  },
  {
    "label": "IsDropped()",
    "kind": "Method",
    "detail": "Function (receiver_stats_ [ peer ] . dropped = true ; } bool)",
    "insertText": "IsDropped(size_t peer)"
  },
  {
    "label": "SetPrevFrameRenderedTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrevFrameRenderedTime(size_t peer, webrtc::Timestamp time)"
  },
  {
    "label": "GetStatsForPeer()",
    "kind": "Method",
    "detail": "Function (receiver_stats_ [ peer ] . prev_frame_rendered_time = time ; } FrameStats)",
    "insertText": "GetStatsForPeer(size_t peer)"
  }
]