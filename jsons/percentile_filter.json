[
  {
    "label": "PercentileFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PercentileFilter"
  },
  {
    "label": "PercentileFilter()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_NUMERICS_PERCENTILE_FILTER_H_ # define RTC_BASE_NUMERICS_PERCENTILE_FILTER_H_ # include<stdint . h> # include<iterator> # include<set> # include \" rtc_base / checks . h \" namespace webrtc { template<T> class PercentileFilter { public :)",
    "insertText": "PercentileFilter(float percentile)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert(const T& value)"
  },
  {
    "label": "Erase()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Erase(const T& value)"
  },
  {
    "label": "GetPercentileValue()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "GetPercentileValue()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "UpdatePercentileIterator()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdatePercentileIterator()"
  },
  {
    "label": "PercentileFilter()",
    "kind": "Method",
    "detail": "Function (const float percentile_ ; std::multiset<T> set_ ; std::multiset<T>::iterator percentile_it_ ; int64_t percentile_index_ ; } ; template<T> PercentileFilter<T)",
    "insertText": "PercentileFilter(float percentile) : percentile_(percentile), percentile_it_(set_.begin()), percentile_index_(0)"
  },
  {
    "label": "RTC_CHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_GE(percentile, 0.0f)"
  },
  {
    "label": "RTC_CHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_LE(percentile, 1.0f)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (set_ .)",
    "insertText": "insert(value)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (percentile_it_ = set_ .)",
    "insertText": "begin()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (percentile_index_ = 0 ; } else)",
    "insertText": "if(value < *percentile_it_)"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (std::multiset<T>::const_iterator it = set_ .)",
    "insertText": "lower_bound(value)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (percentile_it_ = set_ .)",
    "insertText": "erase(it)"
  },
  {
    "label": "int64_t()",
    "kind": "Method",
    "detail": "Function (const int64_t index = static_cast<)",
    "insertText": "int64_t(percentile_ * (set_.size() - 1))"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "advance(percentile_it_, index - percentile_index_)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (set_ .)",
    "insertText": "clear()"
  }
]