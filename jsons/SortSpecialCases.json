[
  {
    "label": "MergeUniqueSortedRanges()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / BinarySearch . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / Less . h \" # include \" Templates / UnrealTemplate . h \" # include \" Traits / ElementType . h \" namespace Algo { template<RangeTypeA,RangeTypeB,RangeTypeMerged,PredicateType> void)",
    "insertText": "MergeUniqueSortedRanges(RangeTypeA&& A, RangeTypeB&& B, RangeTypeMerged& OutMerged, PredicateType Pred)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (typedef TElementType_T<RangeTypeA> ElementType ; typedef)",
    "insertText": "decltype(GetNum(A))"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (IndexType ANum =)",
    "insertText": "GetNum(A)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (IndexType BNum =)",
    "insertText": "GetNum(B)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutMerged .)",
    "insertText": "Reset(ANum >= BNum ? BNum : ANum)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const ElementType* AData =)",
    "insertText": "GetData(A)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const ElementType* BData =)",
    "insertText": "GetData(B)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const ElementType* AEnd = AData + ANum ; const ElementType* BEnd = BData + BNum ;)",
    "insertText": "while(AData < AEnd && BData < BEnd)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutMerged .)",
    "insertText": "Add(*(AData++))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Pred(*BData, *AData))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutMerged .)",
    "insertText": "Add(*(BData++))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + BData ; } })",
    "insertText": "while(AData < AEnd)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(BData < BEnd)"
  },
  {
    "label": "MergeUniqueSortedRanges()",
    "kind": "Method",
    "detail": "Function (} } ; template<RangeTypeA,RangeTypeB,RangeTypeMerged> void)",
    "insertText": "MergeUniqueSortedRanges(RangeTypeA&& A, RangeTypeB&& B, RangeTypeMerged& OutMerged)"
  },
  {
    "label": "MergeUniqueSortedRanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeUniqueSortedRanges(Forward<RangeTypeA>(A), Forward<RangeTypeB>(B), OutMerged, TLess<TElementType_T<RangeTypeA>>())"
  },
  {
    "label": "MergeUniqueSortedRanges()",
    "kind": "Method",
    "detail": "Function (} template<RangeTypeMerged,RangeTypeA,RangeTypeB,PredicateType> RangeTypeMerged)",
    "insertText": "MergeUniqueSortedRanges(RangeTypeA&& A, RangeTypeB&& B, PredicateType Pred)"
  },
  {
    "label": "MergeUniqueSortedRanges()",
    "kind": "Method",
    "detail": "Function (RangeTypeMerged OutMerged ;)",
    "insertText": "MergeUniqueSortedRanges(Forward<RangeTypeA>(A), Forward<RangeTypeB>(B), OutMerged, MoveTemp(Pred))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (typedef TElementType_T<RangeType> ElementType ; typedef)",
    "insertText": "decltype(GetNum(Range))"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (typedef TArrayView<ElementType,IndexType> ArrayViewType ; ElementType* RangeData =)",
    "insertText": "GetData(Range)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (IndexType RangeNum =)",
    "insertText": "GetNum(Range)"
  },
  {
    "label": "RangeArray()",
    "kind": "Method",
    "detail": "Function (ArrayViewType)",
    "insertText": "RangeArray(RangeData, RangeNum)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ElementType& Modified = RangeData [ ModifiedIndex ] ;)",
    "insertText": "if(ModifiedIndex > 0 && Pred(Modified, RangeData[ModifiedIndex - 1]))"
  },
  {
    "label": "Left()",
    "kind": "Method",
    "detail": "Function (ArrayViewType LowerRange = RangeArray .)",
    "insertText": "Left(ModifiedIndex - 1)"
  },
  {
    "label": "UpperBound()",
    "kind": "Method",
    "detail": "Function (IndexType DesiredIndex =)",
    "insertText": "UpperBound(LowerRange, Modified, Pred)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ElementType Swap =)",
    "insertText": "MoveTemp(Modified)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (RangeData [ SwapFromIndex + 1 ] =)",
    "insertText": "MoveTemp(RangeData[SwapFromIndex])"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} RangeData [ DesiredIndex ] =)",
    "insertText": "MoveTemp(Swap)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ModifiedIndex < RangeNum - 1 && Pred(RangeData[ModifiedIndex + 1], Modified))"
  },
  {
    "label": "RightChop()",
    "kind": "Method",
    "detail": "Function (ArrayViewType UpperRange = RangeArray .)",
    "insertText": "RightChop(ModifiedIndex + 1)"
  },
  {
    "label": "LowerBound()",
    "kind": "Method",
    "detail": "Function (IndexType DesiredIndex = ModifiedIndex + 1 +)",
    "insertText": "LowerBound(UpperRange, Modified, Pred)"
  },
  {
    "label": "RangeArray()",
    "kind": "Method",
    "detail": "Function (} } template<RangeType,IntType> RangeType)",
    "insertText": "RangeArray(IntType Min, IntType MaxPlusOne)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (RangeType Result ; Result .)",
    "insertText": "Reserve(MaxPlusOne - Min)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(Value)"
  }
]