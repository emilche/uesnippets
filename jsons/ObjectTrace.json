[
  {
    "label": "UObjectTraceWorldSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObjectTraceWorldSubsystem"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FObjectTrace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectTrace"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Trace / Config . h \" # include \" Subsystems / WorldSubsystem . h \" # include \" TraceFilter . h \" # include \" ObjectTrace . generated . h \" # if UE_TRACE_ENABLED&& ! IS_PROGRAM&& ! UE_BUILD_SHIPPING # define OBJECT_TRACE_ENABLED 1 # else # define OBJECT_TRACE_ENABLED 0 # endif)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UObjectTraceWorldSubsystem() : FrameIndex(0), RecordingIndex(0), ElapsedTime(0.0)"
  },
  {
    "label": "ShouldCreateSubsystem()",
    "kind": "Method",
    "detail": "Function (} # if ! OBJECT_TRACE_ENABLED bool)",
    "insertText": "ShouldCreateSubsystem(UObject* Outer)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "OutputClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputClass(const UClass* InClass)"
  },
  {
    "label": "OutputObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputObject(const UObject* InObject)"
  },
  {
    "label": "OutputObjectLifetimeBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputObjectLifetimeBegin(const UObject* InObject)"
  },
  {
    "label": "OutputObjectLifetimeEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputObjectLifetimeEnd(const UObject* InObject)"
  },
  {
    "label": "OutputView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputView(const UObject* LocalPlayer, const FSceneView* View)"
  },
  {
    "label": "OutputObjectEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputObjectEvent(const UObject* InObject, const TCHAR* InEvent)"
  },
  {
    "label": "OutputPawnPossess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputPawnPossess(const UObject* InController, const UObject* InPawn)"
  },
  {
    "label": "GetObjectId()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetObjectId(const UObject* InObject)"
  },
  {
    "label": "GetObjectFromId()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetObjectFromId(uint64 id)"
  },
  {
    "label": "GetObjectWorldTickCounter()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetObjectWorldTickCounter(const UObject* InObject)"
  },
  {
    "label": "ResetWorldElapsedTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetWorldElapsedTime(const UWorld* InWorld)"
  },
  {
    "label": "GetWorldElapsedTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetWorldElapsedTime(const UWorld* InWorld)"
  },
  {
    "label": "GetObjectWorldElapsedTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetObjectWorldElapsedTime(const UObject* InObject)"
  },
  {
    "label": "SetWorldRecordingIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldRecordingIndex(const UWorld *World, uint16 Index)"
  },
  {
    "label": "GetWorldRecordingIndex()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetWorldRecordingIndex(const UWorld *InWorld)"
  },
  {
    "label": "GetObjectWorldRecordingIndex()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetObjectWorldRecordingIndex(const UObject* InObject)"
  },
  {
    "label": "OutputWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputWorld(const UWorld* InWorld)"
  },
  {
    "label": "TRACE_CLASS()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "TRACE_CLASS(Class) \\ FObjectTrace::OutputClass(Class)"
  },
  {
    "label": "TRACE_OBJECT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_OBJECT(Object) \\ FObjectTrace::OutputObject(Object)"
  },
  {
    "label": "TRACE_VIEW()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_VIEW(Player, View) \\ FObjectTrace::OutputView(Player, View)"
  },
  {
    "label": "TRACE_OBJECT_EVENT()",
    "kind": "Method",
    "detail": "Function (# if TRACE_FILTERING_ENABLED # define)",
    "insertText": "TRACE_OBJECT_EVENT(Object, Event) \\ if(CAN_TRACE_OBJECT(Object))"
  },
  {
    "label": "UNCONDITIONAL_TRACE_OBJECT_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UNCONDITIONAL_TRACE_OBJECT_EVENT(Object, Event)"
  },
  {
    "label": "TRACE_OBJECT_LIFETIME_BEGIN()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "TRACE_OBJECT_LIFETIME_BEGIN(Object) \\ if(CAN_TRACE_OBJECT(Object))"
  },
  {
    "label": "OutputObjectLifetimeBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputObjectLifetimeBegin(Object)"
  },
  {
    "label": "TRACE_OBJECT_LIFETIME_END()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "TRACE_OBJECT_LIFETIME_END(Object) \\ if(CAN_TRACE_OBJECT(Object))"
  },
  {
    "label": "OutputObjectLifetimeEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputObjectLifetimeEnd(Object)"
  },
  {
    "label": "TRACE_PAWN_POSSESS()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "TRACE_PAWN_POSSESS(Controller, Pawn)\\ if(CAN_TRACE_OBJECT(Controller) && (Pawn==nullptr || (CAN_TRACE_OBJECT(Pawn)))) FObjectTrace::OutputPawnPossess(Controller, Pawn)"
  },
  {
    "label": "TRACE_OBJECT_EVENT()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "TRACE_OBJECT_EVENT(Object, Event) \\ UNCONDITIONAL_TRACE_OBJECT_EVENT(Object, Event)"
  },
  {
    "label": "TRACE_OBJECT_LIFETIME_BEGIN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_OBJECT_LIFETIME_BEGIN(Object) \\ FObjectTrace::OutputObjectLifetimeBegin(Object)"
  },
  {
    "label": "TRACE_OBJECT_LIFETIME_END()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_OBJECT_LIFETIME_END(Object) \\ FObjectTrace::OutputObjectLifetimeEnd(Object)"
  },
  {
    "label": "TRACE_PAWN_POSSESS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_PAWN_POSSESS(Controller, Pawn)\\ FObjectTrace::OutputPawnPossess(Controller, Pawn)"
  },
  {
    "label": "UNCONDITIONAL_TRACE_OBJECT_EVENT()",
    "kind": "Method",
    "detail": "Function (# endif # define)",
    "insertText": "UNCONDITIONAL_TRACE_OBJECT_EVENT(Object, Event) \\ FObjectTrace::OutputObjectEvent(Object, TEXT(#Event))"
  },
  {
    "label": "TRACE_WORLD()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_WORLD(World) \\ FObjectTrace::OutputWorld(World)"
  }
]