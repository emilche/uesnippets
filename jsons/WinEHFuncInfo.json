[
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "GlobalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalVariable"
  },
  {
    "label": "InvokeInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InvokeInst"
  },
  {
    "label": "IntrinsicInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntrinsicInst"
  },
  {
    "label": "LandingPadInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LandingPadInst"
  },
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "ActionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ActionType"
  },
  {
    "label": "ActionHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ActionHandler"
  },
  {
    "label": "CatchHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CatchHandler"
  },
  {
    "label": "CleanupHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CleanupHandler"
  },
  {
    "label": "WinEHUnwindMapEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WinEHUnwindMapEntry"
  },
  {
    "label": "WinEHHandlerType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WinEHHandlerType"
  },
  {
    "label": "WinEHTryBlockMapEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WinEHTryBlockMapEntry"
  },
  {
    "label": "WinEHFuncInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WinEHFuncInfo"
  },
  {
    "label": "ActionHandler()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_WINEHFUNCINFO_H # define LLVM_CODEGEN_WINEHFUNCINFO_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / TinyPtrVector . h \" # include \" llvm / ADT / DenseMap . h \" namespace llvm { class BasicBlock ; class Constant ; class Function ; class GlobalVariable ; class InvokeInst ; class IntrinsicInst ; class LandingPadInst ; class MCSymbol ; class Value ; enum ActionType { Catch,Cleanup } ; class ActionHandler { public :)",
    "insertText": "ActionHandler(BasicBlock *BB, ActionType Type) : StartBB(BB), Type(Type), EHState(-1), HandlerBlockOrFunc(nullptr)"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (} ActionType)",
    "insertText": "getType()"
  },
  {
    "label": "getHandlerBlockOrFunc()",
    "kind": "Method",
    "detail": "Function (HandlerBlockOrFunc = F ; } Constant*)",
    "insertText": "getHandlerBlockOrFunc()"
  },
  {
    "label": "getEHState()",
    "kind": "Method",
    "detail": "Function (EHState = State ; } int)",
    "insertText": "getEHState()"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "classof(const ActionHandler *H)"
  },
  {
    "label": "getSelector()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getSelector()"
  },
  {
    "label": "setExceptionVarIndex()",
    "kind": "Method",
    "detail": "Function (ExceptionObjectVar = Val ; } void)",
    "insertText": "setExceptionVarIndex(int Index)"
  },
  {
    "label": "getExceptionVarIndex()",
    "kind": "Method",
    "detail": "Function (ExceptionObjectIndex = Index ; } int)",
    "insertText": "getExceptionVarIndex()"
  },
  {
    "label": "parseEHActions()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "parseEHActions(const IntrinsicInst *II, SmallVectorImpl<std::unique_ptr<ActionHandler>> &Actions)"
  },
  {
    "label": "WinEHFuncInfo()",
    "kind": "Method",
    "detail": "Function (struct WinEHUnwindMapEntry { int ToState ; Function* Cleanup ; } ; struct WinEHHandlerType { int Adjectives ; GlobalVariable* TypeDescriptor ; int CatchObjRecoverIdx ; Function* Handler ; } ; struct WinEHTryBlockMapEntry { int TryLow ; int TryHigh ; SmallVector<WinEHHandlerType,1> HandlerArray ; } ; struct WinEHFuncInfo { DenseMap<const Function*,const LandingPadInst*> RootLPad ; DenseMap<const Function*,const InvokeInst*> LastInvoke ; DenseMap<const Function*,int> HandlerEnclosedState ; DenseMap<const Function*,bool> LastInvokeVisited ; DenseMap<const LandingPadInst*,int> LandingPadStateMap ; DenseMap<const Function*,int> CatchHandlerParentFrameObjIdx ; DenseMap<const Function*,int> CatchHandlerParentFrameObjOffset ; DenseMap<const Function*,int> CatchHandlerMaxState ; DenseMap<const Function*,int> HandlerBaseState ; SmallVector<WinEHUnwindMapEntry,4> UnwindMap ; SmallVector<WinEHTryBlockMapEntry,4> TryBlockMap ; SmallVector<std::pair<MCSymbol*,int>,4> IPToStateList ; int UnwindHelpFrameIdx = INT_MAX ; int UnwindHelpFrameOffset = - 1 ; unsigned NumIPToStateFuncsVisited = 0 ; int EHRegNodeEscapeIndex = INT_MAX ;)",
    "insertText": "WinEHFuncInfo()"
  },
  {
    "label": "calculateWinCXXEHStateNumbers()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "calculateWinCXXEHStateNumbers(const Function *ParentFn, WinEHFuncInfo &FuncInfo)"
  }
]