[
  {
    "label": "PeerConnectionDelegateAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerConnectionDelegateAdapter"
  },
  {
    "label": "PeerConnectionDelegateAdapter()",
    "kind": "Method",
    "detail": "Function (# import \" RTCPeerConnection . h \" # include \" api / peer_connection_interface . h \" NS_ASSUME_NONNULL_BEGIN namespace webrtc { class PeerConnectionDelegateAdapter : public PeerConnectionObserver { public :)",
    "insertText": "PeerConnectionDelegateAdapter(RTC_OBJC_TYPE(RTCPeerConnection) * peerConnection)"
  },
  {
    "label": "PeerConnectionDelegateAdapter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PeerConnectionDelegateAdapter()"
  },
  {
    "label": "OnSignalingChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSignalingChange(PeerConnectionInterface::SignalingState new_state)"
  },
  {
    "label": "OnAddStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddStream(rtc::scoped_refptr<MediaStreamInterface> stream)"
  },
  {
    "label": "OnRemoveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveStream(rtc::scoped_refptr<MediaStreamInterface> stream)"
  },
  {
    "label": "OnTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTrack(rtc::scoped_refptr<RtpTransceiverInterface> transceiver)"
  },
  {
    "label": "OnDataChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataChannel(rtc::scoped_refptr<DataChannelInterface> data_channel)"
  },
  {
    "label": "OnRenegotiationNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenegotiationNeeded()"
  },
  {
    "label": "OnIceConnectionChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIceConnectionChange(PeerConnectionInterface::IceConnectionState new_state)"
  },
  {
    "label": "OnStandardizedIceConnectionChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStandardizedIceConnectionChange(PeerConnectionInterface::IceConnectionState new_state)"
  },
  {
    "label": "OnConnectionChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionChange(PeerConnectionInterface::PeerConnectionState new_state)"
  },
  {
    "label": "OnIceGatheringChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIceGatheringChange(PeerConnectionInterface::IceGatheringState new_state)"
  },
  {
    "label": "OnIceCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIceCandidate(const IceCandidateInterface *candidate)"
  },
  {
    "label": "OnIceCandidateError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIceCandidateError(const std::string &address, int port, const std::string &url, int error_code, const std::string &error_text)"
  },
  {
    "label": "OnIceCandidatesRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIceCandidatesRemoved(const std::vector<cricket::Candidate> &candidates)"
  },
  {
    "label": "OnIceSelectedCandidatePairChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIceSelectedCandidatePairChanged(const cricket::CandidatePairChangeEvent &event)"
  },
  {
    "label": "OnAddTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddTrack(rtc::scoped_refptr<RtpReceiverInterface> receiver, const std::vector<rtc::scoped_refptr<MediaStreamInterface>> &streams)"
  },
  {
    "label": "OnRemoveTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveTrack(rtc::scoped_refptr<RtpReceiverInterface> receiver)"
  },
  {
    "label": "RTC_OBJC_TYPE()",
    "kind": "Method",
    "detail": "Function (private : __weak)",
    "insertText": "RTC_OBJC_TYPE(RTCPeerConnection)"
  },
  {
    "label": "RTC_OBJC_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; } @ protocol)",
    "insertText": "RTC_OBJC_TYPE(RTCSSLCertificateVerifier)"
  },
  {
    "label": "RTC_OBJC_TYPE()",
    "kind": "Method",
    "detail": "Function (@ interface)",
    "insertText": "RTC_OBJC_TYPE(RTCPeerConnection) () @property(nonatomic, readonly) RTC_OBJC_TYPE(RTCPeerConnectionFactory)"
  },
  {
    "label": "property()",
    "kind": "Method",
    "detail": "Function (@)",
    "insertText": "property(nonatomic, readonly)"
  }
]