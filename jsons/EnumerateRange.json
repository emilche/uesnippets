[
  {
    "label": "TEnumerateRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEnumerateRef"
  },
  {
    "label": "TEnumerateIter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEnumerateIter"
  },
  {
    "label": "TEnumerateRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEnumerateRange"
  },
  {
    "label": "TEnumerateRef()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / UnrealTemplate . h \" # include<iterator> # include<type_traits> template<ElementType,SizeType = int32> struct TEnumerateRef {)",
    "insertText": "TEnumerateRef(ElementType& InRef, SizeType InIndex) : Ref (InRef) , Index(InIndex)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "GetIndex()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (+ + this -> Iterator ; + + this -> Index ; } } ; } template<RangeType,SizeType> struct TEnumerateRange { RangeType Range ; auto)",
    "insertText": "begin() const -> UE::Core::Private::TEnumerateIter<decltype(std::begin(Range))"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "end()"
  },
  {
    "label": "EnumerateRange()",
    "kind": "Method",
    "detail": "Function (} } ; template<RangeType> auto)",
    "insertText": "EnumerateRange(RangeType&& Range) -> TEnumerateRange<RangeType, decltype(GetNum(Range))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} template<T,SIZE_T N> TEnumerateRange<)",
    "insertText": "T(&)[N], int32> EnumerateRange(T(&Range)[N])"
  }
]