[
  {
    "label": "PoolAllocatorSingleThreadPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PoolAllocatorSingleThreadPolicy"
  },
  {
    "label": "PoolAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PoolAllocator"
  },
  {
    "label": "ObjFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ObjFile"
  },
  {
    "label": "SymbolType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SymbolType"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "Relocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Relocation"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Type"
  },
  {
    "label": "Symbol",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Symbol"
  },
  {
    "label": "Section",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Section"
  },
  {
    "label": "CrtSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CrtSection"
  },
  {
    "label": "CoffDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CoffDB"
  },
  {
    "label": "LibEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LibEntry"
  },
  {
    "label": "UnresolvedSymbolDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnresolvedSymbolDB"
  },
  {
    "label": "ExternalSymbolDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExternalSymbolDB"
  },
  {
    "label": "RawSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RawSection"
  },
  {
    "label": "RawStringTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RawStringTable"
  },
  {
    "label": "RawCoff",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RawCoff"
  },
  {
    "label": "RawCoffRegular",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RawCoffRegular"
  },
  {
    "label": "RawCoffBigObj",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RawCoffBigObj"
  },
  {
    "label": "SymbolRemovalStrategy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SymbolRemovalStrategy"
  },
  {
    "label": "LC_DISABLE_ASSIGNMENT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_ImmutableString . h \" # include \" LC_MemoryMappedFile . h \" # include \" LC_Types . h \" # include \" LC_Logging . h \" # include \" Windows / WindowsHWrapper . h \" # undef RELATIVE # undef OPTIONAL struct PoolAllocatorSingleThreadPolicy ; template<T> class PoolAllocator ; namespace coff { struct ObjFile { ImmutableString filename ; Filesystem::MemoryMappedFile* memoryFile ;)",
    "insertText": "LC_DISABLE_ASSIGNMENT(ObjFile)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} ; struct SymbolType { enum Enum : uint8_t { EXTERNAL_DATA,EXTERNAL_FUNCTION,STATIC_DATA,STATIC_FUNCTION,UNKNOWN_DATA,UNKNOWN_FUNCTION } ; } ; struct Relocation { struct Type { enum Enum : uint8_t { # if LC_64_BIT RELATIVE = IMAGE_REL_AMD64_REL32,SECTION_RELATIVE = IMAGE_REL_AMD64_SECREL,VA_32 = IMAGE_REL_AMD64_ADDR32,RVA_32 = IMAGE_REL_AMD64_ADDR32NB,RELATIVE_OFFSET_1 = IMAGE_REL_AMD64_REL32_1,RELATIVE_OFFSET_2 = IMAGE_REL_AMD64_REL32_2,RELATIVE_OFFSET_3 = IMAGE_REL_AMD64_REL32_3,RELATIVE_OFFSET_4 = IMAGE_REL_AMD64_REL32_4,RELATIVE_OFFSET_5 = IMAGE_REL_AMD64_REL32_5,VA_64 = IMAGE_REL_AMD64_ADDR64,# else RELATIVE = IMAGE_REL_I386_REL32,SECTION_RELATIVE = IMAGE_REL_I386_SECREL,VA_32 = IMAGE_REL_I386_DIR32,RVA_32 = IMAGE_REL_I386_DIR32NB,# endif UNKNOWN = 0 xFFu } ; const char*)",
    "insertText": "ToString(Enum value)"
  },
  {
    "label": "LC_DISABLE_ASSIGNMENT()",
    "kind": "Method",
    "detail": "Function (} ; struct CrtSection { ImmutableString name ; uint32_t rawDataSize ; uint32_t rawDataRva ; types::vector<Symbol*> symbols ;)",
    "insertText": "LC_DISABLE_ASSIGNMENT(CrtSection)"
  },
  {
    "label": "LC_DISABLE_ASSIGNMENT()",
    "kind": "Method",
    "detail": "Function (} ; struct CoffDB { types::vector<ImmutableString> stringTable ; types::vector<Section> sections ; types::vector<Symbol*> symbols ; types::vector<Symbol*> indexToSymbol ; types::vector<CrtSection> crtSections ; PoolAllocator<PoolAllocatorSingleThreadPolicy>* symbolAllocator ; PoolAllocator<PoolAllocatorSingleThreadPolicy>* relocationAllocator ; } ; struct LibEntry { ImmutableString objPath ; uint64_t offset ;)",
    "insertText": "LC_DISABLE_ASSIGNMENT(LibEntry)"
  },
  {
    "label": "RawSection()",
    "kind": "Method",
    "detail": "Function (} ; struct UnresolvedSymbolDB { types::vector<ImmutableString> symbols ; types::vector<uint32_t> symbolIndex ; } ; struct ExternalSymbolDB { types::vector<ImmutableString> symbols ; types::vector<SymbolType::Enum> types ; } ; struct RawSection { IMAGE_SECTION_HEADER header ; void* data ; types::vector<IMAGE_RELOCATION> relocations ; types::vector<IMAGE_LINENUMBER> lineNumbers ; bool wasRemoved ; bool isSelectAnyComdat ;)",
    "insertText": "RawSection(void) : header() , data(nullptr) , relocations() , lineNumbers() , wasRemoved(false) , isSelectAnyComdat(false)"
  },
  {
    "label": "RawSection()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RawSection(RawSection&& other) : header(std::move(other.header)) , data(std::move(other.data)) , relocations(std::move(other.relocations)) , lineNumbers(std::move(other.lineNumbers)) , wasRemoved(std::move(other.wasRemoved)) , isSelectAnyComdat(std::move(other.isSelectAnyComdat))"
  },
  {
    "label": "LC_DISABLE_COPY()",
    "kind": "Method",
    "detail": "Function (other . data = nullptr ; })",
    "insertText": "LC_DISABLE_COPY(RawSection)"
  },
  {
    "label": "LC_DISABLE_ASSIGNMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LC_DISABLE_ASSIGNMENT(RawSection)"
  },
  {
    "label": "LC_DISABLE_MOVE_ASSIGNMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LC_DISABLE_MOVE_ASSIGNMENT(RawSection)"
  },
  {
    "label": "OpenObj()",
    "kind": "Method",
    "detail": "Function (} ; struct RawStringTable { char* data ; uint32_t size ; } ; struct RawCoff { types::vector<RawSection> sections ; types::vector<ImmutableString> stringTable ; types::unordered_map<uint32_t,types::vector<uint32_t>> associatedComdatSections ; RawStringTable rawStringTable ; uint64_t size ; uint32_t type ; } ; struct RawCoffRegular : public RawCoff { const uint32_t TYPE = 0 u ; IMAGE_FILE_HEADER header ; types::vector<IMAGE_SYMBOL> symbols ; } ; struct RawCoffBigObj : public RawCoff { const uint32_t TYPE = 1 u ; ANON_OBJECT_HEADER_BIGOBJ header ; types::vector<IMAGE_SYMBOL_EX> symbols ; } ; struct SymbolRemovalStrategy { enum Enum : SHORT { MSVC_COMPATIBLE = IMAGE_SYM_DEBUG,LLD_COMPATIBLE = IMAGE_SYM_ABSOLUTE } ; } ; ObjFile*)",
    "insertText": "OpenObj(const wchar_t* filename)"
  },
  {
    "label": "CloseObj()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseObj(ObjFile*& file)"
  },
  {
    "label": "ReadRaw()",
    "kind": "Method",
    "detail": "Function (RawCoff*)",
    "insertText": "ReadRaw(ObjFile* file, uint32_t uniqueId)"
  },
  {
    "label": "WriteRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteRaw(const wchar_t* filename, const RawCoff* rawCoff, SymbolRemovalStrategy::Enum removalStrategy)"
  },
  {
    "label": "DestroyRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRaw(RawCoff* rawCoff)"
  },
  {
    "label": "GetSymbolCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetSymbolCount(const RawCoff* rawCoff)"
  },
  {
    "label": "GetSectionCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetSectionCount(const RawCoff* rawCoff)"
  },
  {
    "label": "GetAuxSymbolCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetAuxSymbolCount(const RawCoff* rawCoff, size_t symbolIndex)"
  },
  {
    "label": "GetSymbolType()",
    "kind": "Method",
    "detail": "Function (SymbolType::Enum)",
    "insertText": "GetSymbolType(const RawCoff* rawCoff, size_t index)"
  },
  {
    "label": "GetSymbolName()",
    "kind": "Method",
    "detail": "Function (const ImmutableString&)",
    "insertText": "GetSymbolName(const RawCoff* rawCoff, size_t index)"
  },
  {
    "label": "GetSectionName()",
    "kind": "Method",
    "detail": "Function (ImmutableString)",
    "insertText": "GetSectionName(const RawCoff* rawCoff, size_t index)"
  },
  {
    "label": "GetSymbolSectionIndex()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetSymbolSectionIndex(const RawCoff* rawCoff, size_t index)"
  },
  {
    "label": "IsAbsoluteSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAbsoluteSymbol(const RawCoff* rawCoff, size_t index)"
  },
  {
    "label": "IsDebugSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebugSymbol(const RawCoff* rawCoff, size_t index)"
  },
  {
    "label": "IsSectionSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSectionSymbol(const RawCoff* rawCoff, size_t index)"
  },
  {
    "label": "IsUndefinedSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUndefinedSymbol(const RawCoff* rawCoff, size_t index)"
  },
  {
    "label": "IsRemovedSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRemovedSymbol(const RawCoff* rawCoff, size_t index, SymbolRemovalStrategy::Enum removalStrategy)"
  },
  {
    "label": "IsSelectAnyComdatSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectAnyComdatSection(const RawCoff* rawCoff, size_t sectionIndex)"
  },
  {
    "label": "ExtractLinkerDirectives()",
    "kind": "Method",
    "detail": "Function (types::vector<std::string>)",
    "insertText": "ExtractLinkerDirectives(const ObjFile* file)"
  },
  {
    "label": "ExtractLinkerDirectives()",
    "kind": "Method",
    "detail": "Function (types::vector<std::string>)",
    "insertText": "ExtractLinkerDirectives(const RawCoff* rawCoff)"
  },
  {
    "label": "ReplaceLinkerDirectives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceLinkerDirectives(RawCoff* rawCoff, const types::vector<std::string>& directives)"
  },
  {
    "label": "PatchFunctionSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PatchFunctionSymbol(RawCoff* rawCoff, size_t symbolIndex, uint32_t sectionIndex)"
  },
  {
    "label": "RemoveSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSymbol(RawCoff* rawCoff, size_t symbolIndex, SymbolRemovalStrategy::Enum removalStrategy)"
  },
  {
    "label": "RemoveRelocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRelocations(RawCoff* rawCoff, size_t symbolIndex)"
  },
  {
    "label": "RemoveSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSection(RawCoff* rawCoff, size_t sectionIndex)"
  },
  {
    "label": "RemoveAssociatedComdatSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAssociatedComdatSections(RawCoff* rawCoff, size_t sectionIndex)"
  },
  {
    "label": "GatherUnresolvedSymbolDatabase()",
    "kind": "Method",
    "detail": "Function (UnresolvedSymbolDB*)",
    "insertText": "GatherUnresolvedSymbolDatabase(ObjFile* file, uint32_t uniqueId)"
  },
  {
    "label": "DestroyDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyDatabase(UnresolvedSymbolDB* db)"
  },
  {
    "label": "GatherExternalSymbolDatabase()",
    "kind": "Method",
    "detail": "Function (ExternalSymbolDB*)",
    "insertText": "GatherExternalSymbolDatabase(ObjFile* file, uint32_t uniqueId)"
  },
  {
    "label": "DestroyDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyDatabase(ExternalSymbolDB* db)"
  },
  {
    "label": "GatherDatabase()",
    "kind": "Method",
    "detail": "Function (CoffDB*)",
    "insertText": "GatherDatabase(ObjFile* file, uint32_t uniqueId)"
  },
  {
    "label": "DestroyDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyDatabase(CoffDB* db)"
  },
  {
    "label": "GetIndexCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetIndexCount(const CoffDB* coffDb)"
  },
  {
    "label": "GetSymbolByIndex()",
    "kind": "Method",
    "detail": "Function (const Symbol*)",
    "insertText": "GetSymbolByIndex(const CoffDB* coffDb, size_t index)"
  },
  {
    "label": "GetSymbolName()",
    "kind": "Method",
    "detail": "Function (const ImmutableString&)",
    "insertText": "GetSymbolName(const CoffDB* coffDb, const Symbol* symbol)"
  },
  {
    "label": "GetRelocationDstSymbolName()",
    "kind": "Method",
    "detail": "Function (const ImmutableString&)",
    "insertText": "GetRelocationDstSymbolName(const CoffDB* coffDb, const Relocation* relocation)"
  },
  {
    "label": "GetUnresolvedSymbolName()",
    "kind": "Method",
    "detail": "Function (const ImmutableString&)",
    "insertText": "GetUnresolvedSymbolName(const CoffDB* coffDb, size_t unresolvedSymbolIndex)"
  },
  {
    "label": "GetRelocationSrcSymbolType()",
    "kind": "Method",
    "detail": "Function (SymbolType::Enum)",
    "insertText": "GetRelocationSrcSymbolType(const Relocation* relocation)"
  },
  {
    "label": "GetRelocationDstSymbolType()",
    "kind": "Method",
    "detail": "Function (SymbolType::Enum)",
    "insertText": "GetRelocationDstSymbolType(const Relocation* relocation)"
  },
  {
    "label": "FindCrtSection()",
    "kind": "Method",
    "detail": "Function (const CrtSection*)",
    "insertText": "FindCrtSection(const CoffDB* coffDb, const ImmutableString& sectionName, uint32_t sectionSize)"
  },
  {
    "label": "FindMatchingCrtSections()",
    "kind": "Method",
    "detail": "Function (std::vector<const CrtSection*>)",
    "insertText": "FindMatchingCrtSections(const CoffDB* coffDb, const ImmutableString& sectionName, uint32_t sectionSize)"
  },
  {
    "label": "FindCoffSuffix()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FindCoffSuffix(const ImmutableString& symbolName)"
  },
  {
    "label": "GetRelocationDestinationSectionCharacteristics()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetRelocationDestinationSectionCharacteristics(const coff::CoffDB* coffDb, const coff::Relocation* relocation)"
  },
  {
    "label": "GetBaseAddress()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetBaseAddress(const ObjFile* file)"
  },
  {
    "label": "IsFunctionSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFunctionSymbol(SymbolType::Enum type)"
  },
  {
    "label": "GetCoffSuffix()",
    "kind": "Method",
    "detail": "Function (char)",
    "insertText": "GetCoffSuffix(void)"
  },
  {
    "label": "GetWideCoffSuffix()",
    "kind": "Method",
    "detail": "Function (wchar_t)",
    "insertText": "GetWideCoffSuffix(void)"
  },
  {
    "label": "GetTlsSectionName()",
    "kind": "Method",
    "detail": "Function (const ImmutableString&)",
    "insertText": "GetTlsSectionName(void)"
  },
  {
    "label": "IsInterestingSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInterestingSymbol(const ImmutableString& name)"
  },
  {
    "label": "IsMSVCJustMyCodeSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMSVCJustMyCodeSection(const char* sectionName)"
  }
]