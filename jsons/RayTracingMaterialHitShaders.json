[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRayTracingMeshProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingMeshProcessor"
  },
  {
    "label": "FHiddenMaterialHitGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHiddenMaterialHitGroup"
  },
  {
    "label": "FOpaqueShadowHitGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpaqueShadowHitGroup"
  },
  {
    "label": "FDefaultCallableShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultCallableShader"
  },
  {
    "label": "FRayTracingLocalShaderBindingWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingLocalShaderBindingWriter"
  },
  {
    "label": "FChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunk"
  },
  {
    "label": "FRHICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList"
  },
  {
    "label": "GetRayTracingDefaultMissShader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIDefinitions . h \" # if RHI_RAYTRACING # include \" DataDrivenShaderPlatformInfo . h \" # include \" LightMapRendering . h \" # include \" MaterialDomain . h \" # include \" MeshMaterialShader . h \" # include \" MeshPassProcessor . inl \" # include \" RayTracingMeshDrawCommands . h \" # include \" RayTracingInstanceMask . h \" # include \" RayTracingPayloadType . h \" # include \" RayTracing / RayTracing . h \" # include \" ShaderParameterStruct . h \" # include<type_traits> enum class ERayTracingMeshCommandsMode : uint8 ; FRHIRayTracingShader*)",
    "insertText": "GetRayTracingDefaultMissShader(const FGlobalShaderMap* ShaderMap)"
  },
  {
    "label": "GetRayTracingDefaultOpaqueShader()",
    "kind": "Method",
    "detail": "Function (FRHIRayTracingShader*)",
    "insertText": "GetRayTracingDefaultOpaqueShader(const FGlobalShaderMap* ShaderMap)"
  },
  {
    "label": "GetRayTracingDefaultHiddenShader()",
    "kind": "Method",
    "detail": "Function (FRHIRayTracingShader*)",
    "insertText": "GetRayTracingDefaultHiddenShader(const FGlobalShaderMap* ShaderMap)"
  },
  {
    "label": "FRayTracingMeshProcessor()",
    "kind": "Method",
    "detail": "Function (class FRayTracingMeshProcessor { public :)",
    "insertText": "FRayTracingMeshProcessor(FRayTracingMeshCommandContext* InCommandContext, const FScene* InScene, const FSceneView* InViewIfDynamicMeshCommand, ERayTracingMeshCommandsMode InRayTracingMeshCommandsMode)"
  },
  {
    "label": "FRayTracingMeshProcessor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRayTracingMeshProcessor()"
  },
  {
    "label": "AddMeshBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeshBatch(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (protected : FRayTracingMeshCommandContext* CommandContext ; const FScene* Scene ; const FSceneView* ViewIfDynamicMeshCommand ; ERHIFeatureLevel::Type FeatureLevel ; ERayTracingMeshCommandsMode RayTracingMeshCommandsMode ; bool)",
    "insertText": "Process(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, const FMaterialRenderProxy& RESTRICT MaterialRenderProxy, const FMaterial& RESTRICT MaterialResource, const FUniformLightMapPolicy& RESTRICT LightMapPolicy)"
  },
  {
    "label": "BuildRayTracingMeshCommands()",
    "kind": "Method",
    "detail": "Function (template<RayTracingShaderType,ShaderElementDataType> void)",
    "insertText": "BuildRayTracingMeshCommands(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, const FMaterialRenderProxy& RESTRICT MaterialRenderProxy, const FMaterial& RESTRICT MaterialResource, const TShaderRef<RayTracingShaderType>& RayTracingShader, const ShaderElementDataType& ShaderElementData, ERayTracingViewMaskMode MaskMode)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (const FVertexFactory* RESTRICT VertexFactory = MeshBatch . VertexFactory ;)",
    "insertText": "checkf(MaterialRenderProxy.ImmutableSamplerState.ImmutableSamplers[0] == nullptr, TEXT(\"Immutable samplers not yet supported in Mesh Draw Command pipeline\"))"
  },
  {
    "label": "SetupRayTracingMeshCommandMaskAndStatus()",
    "kind": "Method",
    "detail": "Function (FRayTracingMeshCommand SharedCommand ;)",
    "insertText": "SetupRayTracingMeshCommandMaskAndStatus(SharedCommand, MeshBatch, PrimitiveSceneProxy, MaterialResource, MaskMode)"
  },
  {
    "label": "SetShader()",
    "kind": "Method",
    "detail": "Function (SharedCommand .)",
    "insertText": "SetShader(RayTracingShader)"
  },
  {
    "label": "GetStreams()",
    "kind": "Method",
    "detail": "Function (} FVertexInputStreamArray VertexStreams ; VertexFactory ->)",
    "insertText": "GetStreams(FeatureLevel, EVertexInputStreamType::Default, VertexStreams)"
  },
  {
    "label": "GetSingleShaderBindings()",
    "kind": "Method",
    "detail": "Function (FMeshDrawSingleShaderBindings ShaderBindings = SharedCommand . ShaderBindings .)",
    "insertText": "GetSingleShaderBindings(SF_RayHitGroup)"
  },
  {
    "label": "GetShaderBindings()",
    "kind": "Method",
    "detail": "Function (RayTracingShader ->)",
    "insertText": "GetShaderBindings(Scene, FeatureLevel, PrimitiveSceneProxy, MaterialRenderProxy, MaterialResource, ShaderElementData, ShaderBindings)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} const int32 NumElements = MeshBatch . Elements .)",
    "insertText": "Num()"
  },
  {
    "label": "AddCommand()",
    "kind": "Method",
    "detail": "Function (const FMeshBatchElement& BatchElement = MeshBatch . Elements [ BatchElementIndex ] ; FRayTracingMeshCommand& RayTracingMeshCommand = CommandContext ->)",
    "insertText": "AddCommand(SharedCommand)"
  },
  {
    "label": "GetElementShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementShaderBindings(RayTracingShader, Scene, ViewIfDynamicMeshCommand, VertexFactory, EVertexInputStreamType::Default, FeatureLevel, PrimitiveSceneProxy, MeshBatch, BatchElement, ShaderElementData, RayHitGroupShaderBindings, VertexStreams)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} RayTracingMeshCommand . GeometrySegmentIndex =)",
    "insertText": "uint32(MeshBatch.SegmentIndex)"
  },
  {
    "label": "IsTranslucent()",
    "kind": "Method",
    "detail": "Function (RayTracingMeshCommand . bIsTranslucent = MeshBatch .)",
    "insertText": "IsTranslucent(MaterialResource.GetFeatureLevel())"
  },
  {
    "label": "FinalizeCommand()",
    "kind": "Method",
    "detail": "Function (CommandContext ->)",
    "insertText": "FinalizeCommand(RayTracingMeshCommand)"
  },
  {
    "label": "ProcessPathTracing()",
    "kind": "Method",
    "detail": "Function (} } } private : bool)",
    "insertText": "ProcessPathTracing(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, const FMaterialRenderProxy& RESTRICT MaterialRenderProxy, const FMaterial& RESTRICT MaterialResource)"
  },
  {
    "label": "TryAddMeshBatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryAddMeshBatch(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, int32 StaticMeshId, const FMaterialRenderProxy& MaterialRenderProxy, const FMaterial& Material)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} ; class FHiddenMaterialHitGroup : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FHiddenMaterialHitGroup, RENDERER_API) SHADER_USE_ROOT_PARAMETER_STRUCT(FHiddenMaterialHitGroup, FGlobalShader) static bool ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "GetRayTracingPayloadType()",
    "kind": "Method",
    "detail": "Function (} ERayTracingPayloadType)",
    "insertText": "GetRayTracingPayloadType(const int32 PermutationId)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} using FParameters = FEmptyShaderParameters ; } ; class FOpaqueShadowHitGroup : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FOpaqueShadowHitGroup, RENDERER_API) SHADER_USE_ROOT_PARAMETER_STRUCT(FOpaqueShadowHitGroup, FGlobalShader) static bool ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} using FParameters = FEmptyShaderParameters ; } ; class FDefaultCallableShader : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FDefaultCallableShader, RENDERER_API) SHADER_USE_ROOT_PARAMETER_STRUCT(FDefaultCallableShader, FGlobalShader) static bool ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "FRayTracingLocalShaderBindingWriter()",
    "kind": "Method",
    "detail": "Function (} using FParameters = FEmptyShaderParameters ; } ; class FRayTracingLocalShaderBindingWriter { public :)",
    "insertText": "FRayTracingLocalShaderBindingWriter()"
  },
  {
    "label": "FRayTracingLocalShaderBindingWriter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRayTracingLocalShaderBindingWriter(const FRayTracingLocalShaderBindingWriter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRayTracingLocalShaderBindingWriter&)",
    "insertText": "operator(const FRayTracingLocalShaderBindingWriter&)"
  },
  {
    "label": "FRayTracingLocalShaderBindingWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRayTracingLocalShaderBindingWriter(FRayTracingLocalShaderBindingWriter&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRayTracingLocalShaderBindingWriter&)",
    "insertText": "operator(FRayTracingLocalShaderBindingWriter&&)"
  },
  {
    "label": "AddWithInlineParameters()",
    "kind": "Method",
    "detail": "Function (FRayTracingLocalShaderBindings&)",
    "insertText": "AddWithInlineParameters(uint32 NumUniformBuffers, uint32 LooseDataSize = 0)"
  },
  {
    "label": "AllocateInternal()",
    "kind": "Method",
    "detail": "Function (FRayTracingLocalShaderBindings* Result =)",
    "insertText": "AllocateInternal()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (uint32 AllocSize =)",
    "insertText": "sizeof(FRHIUniformBuffer*)"
  },
  {
    "label": "UniformBuffers()",
    "kind": "Method",
    "detail": "Function (Result ->)",
    "insertText": "UniformBuffers(FRHIUniformBuffer**)ParameterMemory.Alloc(AllocSize, alignof(FRHIUniformBuffer*))"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(Result->UniformBuffers, 0, AllocSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} Result -> NumUniformBuffers = NumUniformBuffers ;)",
    "insertText": "if(LooseDataSize)"
  },
  {
    "label": "LooseParameterData()",
    "kind": "Method",
    "detail": "Function (Result ->)",
    "insertText": "LooseParameterData(uint8*)ParameterMemory.Alloc(LooseDataSize, alignof(void*))"
  },
  {
    "label": "AddWithExternalParameters()",
    "kind": "Method",
    "detail": "Function (} Result -> LooseParameterDataSize = LooseDataSize ; return* Result ; } FRayTracingLocalShaderBindings&)",
    "insertText": "AddWithExternalParameters()"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Commit(FRHICommandList& RHICmdList, FRHIShaderBindingTable* SBT, FRayTracingPipelineState* Pipeline, bool bCopyDataToInlineStorage)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const FChunk* Chunk = FirstChunk ;)",
    "insertText": "while(Chunk)"
  },
  {
    "label": "SetRayTracingHitGroups()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SetRayTracingHitGroups(SBT, Pipeline, Chunk->Num, Chunk->Bindings, bCopyDataToInlineStorage)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (Chunk = Chunk -> Next ; } } struct FChunk { uint32 MaxNum = 1 0 2 4 ;)",
    "insertText": "static_assert(std::is_trivially_destructible_v<FRayTracingLocalShaderBindings>, \"FRayTracingLocalShaderBindings must be trivially destructible, as no destructor will be called.\")"
  },
  {
    "label": "GetFirstChunk()",
    "kind": "Method",
    "detail": "Function (FRayTracingLocalShaderBindings Bindings [ MaxNum ] ; FChunk* Next ; uint32 Num ; } ; const FChunk*)",
    "insertText": "GetFirstChunk()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (FChunk* OldChunk = CurrentChunk ;)",
    "insertText": "static_assert(std::is_trivially_destructible_v<FChunk>, \"Chunk must be trivially destructible, as no destructor will be called.\")"
  },
  {
    "label": "CurrentChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurrentChunk(FChunk*)ParameterMemory.Alloc(sizeof(FChunk), alignof(FChunk))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrentChunk -> Next = nullptr ; CurrentChunk -> Num = 0 ;)",
    "insertText": "if(FirstChunk == nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FirstChunk = CurrentChunk ; })",
    "insertText": "if(OldChunk)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (OldChunk -> Next = CurrentChunk ; } } FRayTracingLocalShaderBindings* ResultMemory =& CurrentChunk -> Bindings [ CurrentChunk -> Num + + ] ; return)",
    "insertText": "new(ResultMemory)"
  },
  {
    "label": "MergeAndSetRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "MergeAndSetRayTracingBindings(FRHICommandList& RHICmdList, FSceneRenderingBulkObjectAllocator& Allocator, FRHIShaderBindingTable* SBT, FRayTracingPipelineState* Pipeline, TConstArrayView<FRayTracingLocalShaderBindingWriter*> Bindings, ERayTracingBindingType BindingType)"
  }
]