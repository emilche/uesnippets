[
  {
    "label": "NSFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NSFont"
  },
  {
    "label": "UIFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UIFont"
  },
  {
    "label": "NSBundle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NSBundle"
  },
  {
    "label": "NSString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NSString"
  },
  {
    "label": "NSSearchPathDirectory",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSSearchPathDirectory"
  },
  {
    "label": "CF_BRIDGED_TYPE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CF_BRIDGED_TYPE"
  },
  {
    "label": "FilePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePath"
  },
  {
    "label": "x",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "x"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MAC_FOUNDATION_UTIL_H_ # define BASE_MAC_FOUNDATION_UTIL_H_ # include<AvailabilityMacros . h> # include<CoreFoundation / CoreFoundation . h> # include<string> # include \" base / base_export . h \" # include \" base / logging . h \" # include \" base / mac / scoped_cftyperef . h \" # include \" build / build_config . h \" # if)",
    "insertText": "defined(__OBJC__)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (@ class UIFont ; # else class NSBundle ; class NSFont ; class NSString ; class UIFont ; # endif # if)",
    "insertText": "BUILDFLAG(IS_IOS)"
  },
  {
    "label": "CF_BRIDGED_TYPE()",
    "kind": "Method",
    "detail": "Function (typedef unsigned long NSSearchPathDomainMask ; # else enum NSSearchPathDirectory : unsigned int ; typedef unsigned int NSSearchPathDomainMask ; # endif typedef struct)",
    "insertText": "CF_BRIDGED_TYPE(id)"
  },
  {
    "label": "AmIBundled()",
    "kind": "Method",
    "detail": "Function (namespace base { class FilePath ; } namespace base::mac { BASE_EXPORT bool)",
    "insertText": "AmIBundled()"
  },
  {
    "label": "SetOverrideAmIBundled()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "SetOverrideAmIBundled(bool value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(UNIT_TEST) BASE_EXPORT void ClearAmIBundledCache()"
  },
  {
    "label": "IsBackgroundOnlyProcess()",
    "kind": "Method",
    "detail": "Function (# endif BASE_EXPORT bool)",
    "insertText": "IsBackgroundOnlyProcess()"
  },
  {
    "label": "PathForFrameworkBundleResource()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT FilePath)",
    "insertText": "PathForFrameworkBundleResource(CFStringRef resourceName)"
  },
  {
    "label": "CreatorCodeForCFBundleRef()",
    "kind": "Method",
    "detail": "Function (OSType)",
    "insertText": "CreatorCodeForCFBundleRef(CFBundleRef bundle)"
  },
  {
    "label": "CreatorCodeForApplication()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT OSType)",
    "insertText": "CreatorCodeForApplication()"
  },
  {
    "label": "GetSearchPathDirectory()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "GetSearchPathDirectory(NSSearchPathDirectory directory, NSSearchPathDomainMask domain_mask, FilePath* result)"
  },
  {
    "label": "GetLocalDirectory()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "GetLocalDirectory(NSSearchPathDirectory directory, FilePath* result)"
  },
  {
    "label": "GetUserDirectory()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "GetUserDirectory(NSSearchPathDirectory directory, FilePath* result)"
  },
  {
    "label": "GetUserLibraryPath()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT FilePath)",
    "insertText": "GetUserLibraryPath()"
  },
  {
    "label": "GetAppBundlePath()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT FilePath)",
    "insertText": "GetAppBundlePath(const FilePath& exec_name)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(TypeCF) \\ BASE_EXPORT std::string TypeNameForCFType(TypeCF##Ref) TYPE_NAME_FOR_CF_TYPE_DECL(CFArray)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(CFBag)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(CFBoolean)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(CFData)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(CFDate)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(CFDictionary)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(CFNull)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(CFNumber)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(CFSet)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(CFString)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(CFURL)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(CFUUID)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(CGColor)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(CTFont)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(CTRun)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(SecAccessControl)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(SecCertificate)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(SecKey)"
  },
  {
    "label": "TYPE_NAME_FOR_CF_TYPE_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPE_NAME_FOR_CF_TYPE_DECL(SecPolicy)"
  },
  {
    "label": "BaseBundleID()",
    "kind": "Method",
    "detail": "Function (# undef TYPE_NAME_FOR_CF_TYPE_DECL BASE_EXPORT const char*)",
    "insertText": "BaseBundleID()"
  },
  {
    "label": "SetBaseBundleID()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "SetBaseBundleID(const char* new_base_bundle_id)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(__has_feature) || !__has_feature(objc_arc) #if !defined(__OBJC__) #define OBJC_CPP_CLASS_DECL(x)"
  },
  {
    "label": "OBJC_CPP_CLASS_DECL()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "OBJC_CPP_CLASS_DECL(x) #endif #define CF_TO_NS_CAST_DECL(TypeCF, TypeNS) \\ OBJC_CPP_CLASS_DECL(TypeNS)"
  },
  {
    "label": "CFToNSCast()",
    "kind": "Method",
    "detail": "Function (\\ namespace mac { \\ BASE_EXPORT TypeNS*)",
    "insertText": "CFToNSCast(TypeCF##Ref cf_val)"
  },
  {
    "label": "NSToCFCast()",
    "kind": "Method",
    "detail": "Function (\\ BASE_EXPORT TypeCF # # Ref)",
    "insertText": "NSToCFCast(TypeNS* ns_val)"
  },
  {
    "label": "CF_TO_NS_MUTABLE_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "CF_TO_NS_MUTABLE_CAST_DECL(name) \\ CF_TO_NS_CAST_DECL(CF##name, NS##name) \\ OBJC_CPP_CLASS_DECL(NSMutable##name)"
  },
  {
    "label": "CFToNSCast()",
    "kind": "Method",
    "detail": "Function (\\ namespace mac { \\ BASE_EXPORT NSMutable # # name*)",
    "insertText": "CFToNSCast(CFMutable##name##Ref cf_val)"
  },
  {
    "label": "NSToCFCast()",
    "kind": "Method",
    "detail": "Function (\\ BASE_EXPORT CFMutable # # name # # Ref)",
    "insertText": "NSToCFCast(NSMutable##name* ns_val)"
  },
  {
    "label": "CF_TO_NS_MUTABLE_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "CF_TO_NS_MUTABLE_CAST_DECL(Array) CF_TO_NS_MUTABLE_CAST_DECL(AttributedString) CF_TO_NS_CAST_DECL(CFCalendar, NSCalendar) CF_TO_NS_MUTABLE_CAST_DECL(CharacterSet) CF_TO_NS_MUTABLE_CAST_DECL(Data) CF_TO_NS_CAST_DECL(CFDate, NSDate) CF_TO_NS_MUTABLE_CAST_DECL(Dictionary) CF_TO_NS_CAST_DECL(CFError, NSError) CF_TO_NS_CAST_DECL(CFLocale, NSLocale) CF_TO_NS_CAST_DECL(CFNumber, NSNumber) CF_TO_NS_CAST_DECL(CFRunLoopTimer, NSTimer) CF_TO_NS_CAST_DECL(CFTimeZone, NSTimeZone) CF_TO_NS_MUTABLE_CAST_DECL(Set) CF_TO_NS_CAST_DECL(CFReadStream, NSInputStream) CF_TO_NS_CAST_DECL(CFWriteStream, NSOutputStream) CF_TO_NS_MUTABLE_CAST_DECL(String) CF_TO_NS_CAST_DECL(CFURL, NSURL) #if BUILDFLAG(IS_IOS) CF_TO_NS_CAST_DECL(CTFont, UIFont) #else CF_TO_NS_CAST_DECL(CTFont, NSFont)"
  },
  {
    "label": "CFCast()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "CFCast(const CFTypeRef& cf_val)"
  },
  {
    "label": "CFCastStrict()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "CFCastStrict(const CFTypeRef& cf_val)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CF_CAST_DECL(TypeCF) \\ template <> \\ BASE_EXPORT TypeCF##Ref CFCast<TypeCF##Ref>(const CFTypeRef& cf_val)"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (\\ \\ template<> \\ BASE_EXPORT TypeCF # # Ref CFCastStrict<TypeCF # #)",
    "insertText": "Ref(const CFTypeRef& cf_val) CF_CAST_DECL(CFArray)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(CFBag)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(CFBoolean)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(CFData)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(CFDate)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(CFDictionary)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(CFNull)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(CFNumber)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(CFSet)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(CFString)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(CFURL)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(CFUUID)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(CGColor)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(CTFont)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(CTFontDescriptor)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(CTRun)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(SecAccessControl)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(SecCertificate)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(SecKey)"
  },
  {
    "label": "CF_CAST_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CF_CAST_DECL(SecPolicy)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# undef CF_CAST_DECL # if)",
    "insertText": "defined(__OBJC__) template<typename T> T* ObjCCast(id objc_val)"
  },
  {
    "label": "ObjCCastStrict()",
    "kind": "Method",
    "detail": "Function (} return nil ; } template<T> T*)",
    "insertText": "ObjCCastStrict(id objc_val)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* rv = ObjCCast<)",
    "insertText": "T(objc_val)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(objc_val == nil || rv)"
  },
  {
    "label": "GetValueFromDictionary()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "GetValueFromDictionary(CFDictionaryRef dict, CFStringRef key)"
  },
  {
    "label": "CFDictionaryGetValue()",
    "kind": "Method",
    "detail": "Function (CFTypeRef value =)",
    "insertText": "CFDictionaryGetValue(dict, key)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T value_specific = CFCast<)",
    "insertText": "T(value)"
  },
  {
    "label": "TypeNameForCFType()",
    "kind": "Method",
    "detail": "Function (std::string expected_type =)",
    "insertText": "TypeNameForCFType(value_specific)"
  },
  {
    "label": "DLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DLOG(WARNING) << GetValueFromDictionaryErrorMessage(key, expected_type, value)"
  },
  {
    "label": "FilePathToNSURL()",
    "kind": "Method",
    "detail": "Function (} return value_specific ; } BASE_EXPORT NSURL*)",
    "insertText": "FilePathToNSURL(const FilePath& path)"
  },
  {
    "label": "FilePathToNSString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT NSString*)",
    "insertText": "FilePathToNSString(const FilePath& path)"
  },
  {
    "label": "NSStringToFilePath()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT FilePath)",
    "insertText": "NSStringToFilePath(NSString* str)"
  },
  {
    "label": "NSURLToFilePath()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT FilePath)",
    "insertText": "NSURLToFilePath(NSURL* url)"
  },
  {
    "label": "FilePathToCFURL()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT base::ScopedCFTypeRef<CFURLRef>)",
    "insertText": "FilePathToCFURL(const FilePath& path)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__OBJC__) [[nodiscard]] BASE_EXPORT bool CFRangeToNSRange(CFRange range, NSRange* range_out)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif } BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& o, const CFErrorRef err)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& o, const CFStringRef str)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& o, CFRange)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__OBJC__) BASE_EXPORT extern std::ostream& operator<<(std::ostream& o, id)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& o, NSRange)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& o, SEL)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(IS_IOS) BASE_EXPORT extern std::ostream& operator<<(std::ostream& o, NSPoint)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& o, NSRect)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& o, NSSize)"
  }
]