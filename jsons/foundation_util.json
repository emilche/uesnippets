[
  {
    "label": "NSFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NSFont"
  },
  {
    "label": "UIFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UIFont"
  },
  {
    "label": "NSBundle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NSBundle"
  },
  {
    "label": "NSFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NSFont"
  },
  {
    "label": "NSString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NSString"
  },
  {
    "label": "UIFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UIFont"
  },
  {
    "label": "NSSearchPathDirectory",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSSearchPathDirectory"
  },
  {
    "label": "NSSearchPathDirectory",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSSearchPathDirectory"
  },
  {
    "label": "CF_BRIDGED_TYPE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CF_BRIDGED_TYPE"
  },
  {
    "label": "CF_BRIDGED_TYPE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CF_BRIDGED_TYPE"
  },
  {
    "label": "CF_BRIDGED_TYPE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CF_BRIDGED_TYPE"
  },
  {
    "label": "CF_BRIDGED_TYPE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CF_BRIDGED_TYPE"
  },
  {
    "label": "FilePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePath"
  },
  {
    "label": "x",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "x"
  },
  {
    "label": "AmIBundled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AmIBundled()"
  },
  {
    "label": "SetOverrideAmIBundled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverrideAmIBundled(bool value)"
  },
  {
    "label": "ClearAmIBundledCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAmIBundledCache()"
  },
  {
    "label": "IsBackgroundOnlyProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBackgroundOnlyProcess()"
  },
  {
    "label": "PathForFrameworkBundleResource()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "PathForFrameworkBundleResource(CFStringRef resourceName)"
  },
  {
    "label": "CreatorCodeForCFBundleRef()",
    "kind": "Method",
    "detail": "Function (OSType)",
    "insertText": "CreatorCodeForCFBundleRef(CFBundleRef bundle)"
  },
  {
    "label": "CreatorCodeForApplication()",
    "kind": "Method",
    "detail": "Function (OSType)",
    "insertText": "CreatorCodeForApplication()"
  },
  {
    "label": "GetSearchPathDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSearchPathDirectory(NSSearchPathDirectory directory,\n                                        NSSearchPathDomainMask domain_mask,\n                                        FilePath* result)"
  },
  {
    "label": "GetLocalDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLocalDirectory(NSSearchPathDirectory directory,\n                                   FilePath* result)"
  },
  {
    "label": "GetUserDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUserDirectory(NSSearchPathDirectory directory,\n                                  FilePath* result)"
  },
  {
    "label": "GetUserLibraryPath()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "GetUserLibraryPath()"
  },
  {
    "label": "GetAppBundlePath()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "GetAppBundlePath(const FilePath& exec_name)"
  },
  {
    "label": "SetBaseBundleID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBaseBundleID(const char* new_base_bundle_id)"
  },
  {
    "label": "NSToCFCast()",
    "kind": "Method",
    "detail": "Function (Ref)",
    "insertText": "NSToCFCast(TypeNS* ns_val)"
  },
  {
    "label": "NSToCFCast()",
    "kind": "Method",
    "detail": "Function (Ref)",
    "insertText": "NSToCFCast(NSMutable##name* ns_val)"
  },
  {
    "label": "CFCast()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "CFCast(const CFTypeRef& cf_val)"
  },
  {
    "label": "CFCastStrict()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "CFCastStrict(const CFTypeRef& cf_val)"
  },
  {
    "label": "GetValueFromDictionaryErrorMessage()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetValueFromDictionaryErrorMessage(\n    CFStringRef key, const std::string& expected_type, CFTypeRef value)"
  },
  {
    "label": "NSStringToFilePath()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "NSStringToFilePath(NSString* str)"
  },
  {
    "label": "NSURLToFilePath()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "NSURLToFilePath(NSURL* url)"
  },
  {
    "label": "FilePathToCFURL()",
    "kind": "Method",
    "detail": "Function (base::ScopedCFTypeRef<CFURLRef>)",
    "insertText": "FilePathToCFURL(\n    const FilePath& path)"
  },
  {
    "label": "CFRangeToNSRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CFRangeToNSRange(CFRange range,\n                                                NSRange* range_out)"
  }
]