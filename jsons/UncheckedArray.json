[
  {
    "label": "TCArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCArray"
  },
  {
    "label": "TUncheckedFixedAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUncheckedFixedAllocator"
  },
  {
    "label": "FUncheckedHeapAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUncheckedHeapAllocator"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "IF_CHAOS_CARRAY_SENTINEL()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # ifndef CHAOS_CHECK_UNCHECKED_ARRAY # if UE_BUILD_DEBUG # define CHAOS_CHECK_UNCHECKED_ARRAY 1 # else # define CHAOS_CHECK_UNCHECKED_ARRAY 0 # endif # endif # ifndef CHAOS_CARRAY_SENTINEL # define CHAOS_CARRAY_SENTINEL 0 # endif # if CHAOS_CARRAY_SENTINEL # define)",
    "insertText": "IF_CHAOS_CARRAY_SENTINEL(X) X #else #define IF_CHAOS_CARRAY_SENTINEL(X)"
  },
  {
    "label": "MakeFull()",
    "kind": "Method",
    "detail": "Function (template<T,int32 N> class TCArray { public : const int32 MaxElements = N ; using ElementType = T ; TCArray<T,N>)",
    "insertText": "MakeFull()"
  },
  {
    "label": "MakeEmpty()",
    "kind": "Method",
    "detail": "Function (} TCArray<T,N>)",
    "insertText": "MakeEmpty()"
  },
  {
    "label": "TCArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TCArray() : NumElements(0)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (NumElements = InNum ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (NumElements = 0 ; } void)",
    "insertText": "Empty()"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddUninitialized()"
  },
  {
    "label": "CheckSentinels()",
    "kind": "Method",
    "detail": "Function (Elements [ NumElements ] = V ;)",
    "insertText": "CheckSentinels()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Elements [ NumElements ] =)",
    "insertText": "MoveTemp(V)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const int32 Index =)",
    "insertText": "Add(MoveTemp(V))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Elements [ MoveIndex ] =)",
    "insertText": "MoveTemp(Elements[MoveIndex + 1])"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAtSwap(const int32 Index)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Elements [ Index ] =)",
    "insertText": "MoveTemp(Elements[NumElements - 1])"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} ElementType*)",
    "insertText": "GetData()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_CARRAY_SENTINEL)",
    "insertText": "if(!ensureAlways(Sentinel0 == SentinelValue) || !ensureAlways(Sentinel1 == SentinelValue) || !ensureAlways(Sentinel2 == SentinelValue))"
  },
  {
    "label": "IF_CHAOS_CARRAY_SENTINEL()",
    "kind": "Method",
    "detail": "Function (} # endif })",
    "insertText": "IF_CHAOS_CARRAY_SENTINEL(int32 Sentinel0 = SentinelValue)"
  },
  {
    "label": "IF_CHAOS_CARRAY_SENTINEL()",
    "kind": "Method",
    "detail": "Function (int32 NumElements ;)",
    "insertText": "IF_CHAOS_CARRAY_SENTINEL(int32 Sentinel1 = SentinelValue)"
  },
  {
    "label": "IF_CHAOS_CARRAY_SENTINEL()",
    "kind": "Method",
    "detail": "Function (ElementType Elements [ MaxElements ] ;)",
    "insertText": "IF_CHAOS_CARRAY_SENTINEL(int32 Sentinel2 = SentinelValue)"
  }
]