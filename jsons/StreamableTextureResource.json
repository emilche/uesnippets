[
  {
    "label": "FStreamableTextureResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamableTextureResource"
  },
  {
    "label": "CanCreateWithPartiallyResidentMips()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" TextureResource . h \" # include \" Streaming / StreamableRenderResourceState . h \" # include \" Engine / Texture . h \" bool)",
    "insertText": "CanCreateWithPartiallyResidentMips(ETextureCreateFlags TexCreateFlags)"
  },
  {
    "label": "FStreamableTextureResource()",
    "kind": "Method",
    "detail": "Function (class FStreamableTextureResource : public FTextureResource { public :)",
    "insertText": "FStreamableTextureResource(UTexture* InOwner, const FTexturePlatformData* InPlatformData, const FStreamableRenderResourceState& InPostInitState, bool bAllowPartiallyResidentMips)"
  },
  {
    "label": "GetStreamableTextureResource()",
    "kind": "Method",
    "detail": "Function (FStreamableTextureResource*)",
    "insertText": "GetStreamableTextureResource()"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "GetPostInitState()",
    "kind": "Method",
    "detail": "Function (} FStreamableRenderResourceState)",
    "insertText": "GetPostInitState()"
  },
  {
    "label": "GetPlatformMipsView()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FTexture2DMipMap*>)",
    "insertText": "GetPlatformMipsView()"
  },
  {
    "label": "GetPlatformMip()",
    "kind": "Method",
    "detail": "Function (const FTexture2DMipMap*)",
    "insertText": "GetPlatformMip(int32 MipIdx)"
  },
  {
    "label": "GetExtData()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetExtData()"
  },
  {
    "label": "GetPlatformMipsSize()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetPlatformMipsSize(uint32 NumMips)"
  },
  {
    "label": "CreateTexture()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "CreateTexture()"
  },
  {
    "label": "CreatePartiallyResidentTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePartiallyResidentTexture()"
  },
  {
    "label": "CalcRequestedMipsSize()",
    "kind": "Method",
    "detail": "Function (const FTexturePlatformData* PlatformData ; FStreamableRenderResourceState State ; TEnumAsByte<ESamplerFilter> Filter = SF_Point ; TEnumAsByte<ESamplerAddressMode> AddressU = AM_Wrap ; TEnumAsByte<ESamplerAddressMode> AddressV = AM_Wrap ; TEnumAsByte<ESamplerAddressMode> AddressW = AM_Wrap ; float MipBias = 0 ; uint32 SizeX = 0 ; uint32 SizeY = 0 ; uint32 SizeZ = 0 ; FName TextureName ; EMipFadeSettings MipFadeSetting = MipFade_Normal ; TextureGroup LODGroup = TEXTUREGROUP_World ; EPixelFormat PixelFormat = PF_Unknown ; ETextureCreateFlags CreationFlags = TexCreate_None ; bool bUsePartiallyResidentMips = false ; int8 MaxAniso = 0 ; # if STATS private : void)",
    "insertText": "CalcRequestedMipsSize()"
  },
  {
    "label": "IncrementTextureStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementTextureStats()"
  },
  {
    "label": "DecrementTextureStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementTextureStats()"
  }
]