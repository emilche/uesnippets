[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRequest"
  },
  {
    "label": "FRequestBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestBase"
  },
  {
    "label": "IRequest()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include<atomic> namespace UE::DerivedData { enum class EPriority : uint8 ; } namespace UE::DerivedData { class IRequest { public : ~)",
    "insertText": "IRequest()"
  },
  {
    "label": "SetPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPriority(EPriority Priority)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "FRequestBase()",
    "kind": "Method",
    "detail": "Function (} ; class FRequestBase : public IRequest { public :)",
    "insertText": "FRequestBase()"
  },
  {
    "label": "FRequestBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRequestBase(const FRequestBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRequestBase&)",
    "insertText": "operator(const FRequestBase&)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (ReferenceCount .)",
    "insertText": "fetch_add(1, std::memory_order_relaxed)"
  }
]