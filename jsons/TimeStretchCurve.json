[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTimeStretchCurveMarker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeStretchCurveMarker"
  },
  {
    "label": "FTimeStretchCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeStretchCurve"
  },
  {
    "label": "FTimeStretchCurveInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeStretchCurveInstance"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Class . h \" # include \" Animation / AnimCurveTypes . h \" # include \" TimeStretchCurve . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (T_Original = 0,T_TargetMin = 1,T_TargetMax = 2,MAX = 3 } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(VisibleAnywhere, Category = Animation) float Time[(uint8)"
  },
  {
    "label": "FTimeStretchCurveMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTimeStretchCurveMarker() : Alpha(0.f)"
  },
  {
    "label": "Time()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Time(uint8)"
  },
  {
    "label": "FTimeStretchCurveMarker()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimeStretchCurveMarker(float InT_Original, float InAlpha) : Alpha(InAlpha)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FTimeStretchCurve()",
    "kind": "Method",
    "detail": "Function (struct FTimeStretchCurveInstance ; public :)",
    "insertText": "FTimeStretchCurve() : SamplingRate(60.f) , CurveValueMinPrecision(0.01f)"
  },
  {
    "label": "Sum_dT_i_by_C_i()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sum_dT_i_by_C_i(uint8)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "BakeFromFloatCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeFromFloatCurve(const FFloatCurve& TimeStretchCurve, float InSequenceLength)"
  },
  {
    "label": "FTimeStretchCurveInstance()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FTimeStretchCurveInstance() : bHasValidData(false)"
  },
  {
    "label": "InitializeFromPlayRate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeFromPlayRate(float InPlayRate, const FTimeStretchCurve& TimeStretchCurve)"
  },
  {
    "label": "HasValidData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidData()"
  },
  {
    "label": "IsValidMarkerForPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidMarkerForPosition(int32 InMarkerIndex, float InPosition, const TArray<float>& InMarkerPositions)"
  },
  {
    "label": "AreValidMarkerBookendsForPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreValidMarkerBookendsForPosition(float InPosition, float InP_CurrMarker, float InP_NextMarker)"
  },
  {
    "label": "BinarySearchMarkerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BinarySearchMarkerIndex(float InPosition, const TArray<float>& InMarkerPositions)"
  },
  {
    "label": "Convert_P_Original_To_Target()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Convert_P_Original_To_Target(int32 InMarkerIndex, float In_P_Original)"
  },
  {
    "label": "Convert_P_Target_To_Original()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Convert_P_Target_To_Original(int32 InMarkerIndex, float In_P_Target)"
  },
  {
    "label": "Clamp_P_Target()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Clamp_P_Target(float In_P_Target)"
  },
  {
    "label": "GetMarkers_Original()",
    "kind": "Method",
    "detail": "Function (const TArray<float>&)",
    "insertText": "GetMarkers_Original()"
  }
]