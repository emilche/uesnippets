[
  {
    "label": "SrtpTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SrtpTransport"
  },
  {
    "label": "SrtpTransport()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_SRTP_TRANSPORT_H_ # define PC_SRTP_TRANSPORT_H_ # include<stddef . h> # include<cstdint> # include<memory> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / crypto_params . h \" # include \" api / field_trials_view . h \" # include \" api / rtc_error . h \" # include \" p2p / base / packet_transport_internal . h \" # include \" pc / rtp_transport . h \" # include \" pc / srtp_session . h \" # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / buffer . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / network_route . h \" namespace webrtc { class SrtpTransport : public RtpTransport { public :)",
    "insertText": "SrtpTransport(bool rtcp_mux_enabled, const FieldTrialsView& field_trials)"
  },
  {
    "label": "SrtpTransport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SrtpTransport()"
  },
  {
    "label": "SetSrtpSendKey()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "SetSrtpSendKey(const cricket::CryptoParams& params)"
  },
  {
    "label": "SetSrtpReceiveKey()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "SetSrtpReceiveKey(const cricket::CryptoParams& params)"
  },
  {
    "label": "SendRtpPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtpPacket(rtc::CopyOnWriteBuffer* packet, const rtc::PacketOptions& options, int flags)"
  },
  {
    "label": "SendRtcpPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtcpPacket(rtc::CopyOnWriteBuffer* packet, const rtc::PacketOptions& options, int flags)"
  },
  {
    "label": "IsSrtpActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSrtpActive()"
  },
  {
    "label": "IsWritable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWritable(bool rtcp)"
  },
  {
    "label": "SetRtpParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRtpParams(int send_cs, const uint8_t* send_key, int send_key_len, const std::vector<int>& send_extension_ids, int recv_cs, const uint8_t* recv_key, int recv_key_len, const std::vector<int>& recv_extension_ids)"
  },
  {
    "label": "SetRtcpParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRtcpParams(int send_cs, const uint8_t* send_key, int send_key_len, const std::vector<int>& send_extension_ids, int recv_cs, const uint8_t* recv_key, int recv_key_len, const std::vector<int>& recv_extension_ids)"
  },
  {
    "label": "ResetParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetParams()"
  },
  {
    "label": "EnableExternalAuth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableExternalAuth()"
  },
  {
    "label": "IsExternalAuthEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalAuthEnabled()"
  },
  {
    "label": "IsExternalAuthActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalAuthActive()"
  },
  {
    "label": "GetSrtpOverhead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSrtpOverhead(int* srtp_overhead)"
  },
  {
    "label": "GetRtpAuthParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRtpAuthParams(uint8_t** key, int* key_len, int* tag_len)"
  },
  {
    "label": "CacheRtpAbsSendTimeHeaderExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheRtpAbsSendTimeHeaderExtension(int rtp_abs_sendtime_extn_id)"
  },
  {
    "label": "MaybeUpdateWritableState()",
    "kind": "Method",
    "detail": "Function (rtp_abs_sendtime_extn_id_ = rtp_abs_sendtime_extn_id ; } protected : void)",
    "insertText": "MaybeUpdateWritableState()"
  },
  {
    "label": "ConnectToRtpTransport()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ConnectToRtpTransport()"
  },
  {
    "label": "CreateSrtpSessions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSrtpSessions()"
  },
  {
    "label": "OnRtpPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRtpPacketReceived(rtc::CopyOnWriteBuffer packet, int64_t packet_time_us)"
  },
  {
    "label": "OnRtcpPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRtcpPacketReceived(rtc::CopyOnWriteBuffer packet, int64_t packet_time_us)"
  },
  {
    "label": "OnNetworkRouteChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworkRouteChanged(absl::optional<rtc::NetworkRoute> network_route)"
  },
  {
    "label": "OnWritableState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWritableState(rtc::PacketTransportInternal* packet_transport)"
  },
  {
    "label": "ProtectRtp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProtectRtp(void* data, int in_len, int max_len, int* out_len)"
  },
  {
    "label": "ProtectRtp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProtectRtp(void* data, int in_len, int max_len, int* out_len, int64_t* index)"
  },
  {
    "label": "ProtectRtcp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProtectRtcp(void* data, int in_len, int max_len, int* out_len)"
  },
  {
    "label": "UnprotectRtp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnprotectRtp(void* data, int in_len, int* out_len)"
  },
  {
    "label": "UnprotectRtcp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnprotectRtcp(void* data, int in_len, int* out_len)"
  },
  {
    "label": "MaybeSetKeyParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaybeSetKeyParams()"
  },
  {
    "label": "ParseKeyParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseKeyParams(const std::string& key_params, uint8_t* key, size_t len)"
  }
]