[
  {
    "label": "MODE_INFO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MODE_INFO"
  },
  {
    "label": "mv_precision",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "mv_precision"
  },
  {
    "label": "buf_2d",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "buf_2d"
  },
  {
    "label": "macroblockd_plane",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "macroblockd_plane"
  },
  {
    "label": "RefBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RefBuffer"
  },
  {
    "label": "scale_factors",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scale_factors"
  },
  {
    "label": "macroblockd",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "macroblockd"
  },
  {
    "label": "vpx_internal_error_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_internal_error_info"
  },
  {
    "label": "is_inter_mode()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_COMMON_VP9_BLOCKD_H_ # define VPX_VP9_COMMON_VP9_BLOCKD_H_ # include \" . / vpx_config . h \" # include \" vpx_dsp / vpx_dsp_common . h \" # include \" vpx_ports / mem . h \" # include \" vpx_scale / yv12config . h \" # include \" vp9 / common / vp9_common_data . h \" # include \" vp9 / common / vp9_entropy . h \" # include \" vp9 / common / vp9_entropymode . h \" # include \" vp9 / common / vp9_mv . h \" # include \" vp9 / common / vp9_scale . h \" # include \" vp9 / common / vp9_seg_common . h \" # include \" vp9 / common / vp9_tile_common . h \" # ifdef __cplusplus \" C \" { # endif # define MAX_MB_PLANE 3 typedef enum { KEY_FRAME = 0,INTER_FRAME = 1,FRAME_TYPES,} FRAME_TYPE ; int)",
    "insertText": "is_inter_mode(PREDICTION_MODE mode)"
  },
  {
    "label": "mv_ref_frame_to_inter_ref_idx()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mv_ref_frame_to_inter_ref_idx(MV_REFERENCE_FRAME mv_ref_frame)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mv_ref_frame >= LAST_FRAME && mv_ref_frame < MAX_REF_FRAMES)"
  },
  {
    "label": "vp9_above_block_mode()",
    "kind": "Method",
    "detail": "Function (PREDICTION_MODE)",
    "insertText": "vp9_above_block_mode(const MODE_INFO *cur_mi, const MODE_INFO *above_mi, int b)"
  },
  {
    "label": "BLOCK_OFFSET()",
    "kind": "Method",
    "detail": "Function (enum mv_precision { MV_PRECISION_Q3,MV_PRECISION_Q4 } ; struct buf_2d { uint8_t* buf ; int stride ; } ; struct macroblockd_plane { tran_low_t* dqcoeff ; int subsampling_x ; int subsampling_y ; struct buf_2d dst ; struct buf_2d pre [ 2 ] ; ENTROPY_CONTEXT* above_context ; ENTROPY_CONTEXT* left_context ; int16_t seg_dequant [ MAX_SEGMENTS ] [ 2 ] ; uint16_t n4_w,n4_h ; uint8_t n4_wl,n4_hl ; const int16_t* dequant ; int* eob ; } ; # define)",
    "insertText": "BLOCK_OFFSET(x, i) ((x) + (i)*16)"
  },
  {
    "label": "vpx_prob()",
    "kind": "Method",
    "detail": "Function (int idx ; YV12_BUFFER_CONFIG* buf ; struct scale_factors sf ; } RefBuffer ; typedef struct macroblockd { struct macroblockd_plane plane [ MAX_MB_PLANE ] ; uint8_t bmode_blocks_wl ; uint8_t bmode_blocks_hl ; FRAME_COUNTS* counts ; TileInfo tile ; int mi_stride ; MODE_INFO** mi ; MODE_INFO* left_mi ; MODE_INFO* above_mi ; unsigned int max_blocks_wide ; unsigned int max_blocks_high ; const)",
    "insertText": "vpx_prob(*partition_probs)"
  },
  {
    "label": "get_plane_type()",
    "kind": "Method",
    "detail": "Function (int mb_to_left_edge ; int mb_to_right_edge ; int mb_to_top_edge ; int mb_to_bottom_edge ; FRAME_CONTEXT* fc ; const RefBuffer* block_refs [ 2 ] ; const YV12_BUFFER_CONFIG* cur_buf ; ENTROPY_CONTEXT* above_context [ MAX_MB_PLANE ] ; ENTROPY_CONTEXT left_context [ MAX_MB_PLANE ] [ 1 6 ] ; PARTITION_CONTEXT* above_seg_context ; PARTITION_CONTEXT left_seg_context [ 8 ] ; # if CONFIG_VP9_HIGHBITDEPTH int bd ; # endif int lossless ; int corrupted ; struct vpx_internal_error_info* error_info ; PARTITION_TYPE* partition ; } MACROBLOCKD ; PLANE_TYPE)",
    "insertText": "get_plane_type(int plane)"
  },
  {
    "label": "get_subsize()",
    "kind": "Method",
    "detail": "Function (} BLOCK_SIZE)",
    "insertText": "get_subsize(BLOCK_SIZE bsize, PARTITION_TYPE partition)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const MODE_INFO* const mi = xd -> mi [ 0 ] ;)",
    "insertText": "if(plane_type != PLANE_TYPE_Y || xd->lossless || is_inter_block(mi))"
  },
  {
    "label": "vp9_setup_block_planes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "vp9_setup_block_planes(MACROBLOCKD *xd, int ss_x, int ss_y)"
  },
  {
    "label": "get_uv_tx_size()",
    "kind": "Method",
    "detail": "Function (TX_SIZE)",
    "insertText": "get_uv_tx_size(const MODE_INFO *mi, const struct macroblockd_plane *pd)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mi->sb_type < BLOCK_8X8 || ss_size_lookup[mi->sb_type][pd->subsampling_x][pd->subsampling_y] != BLOCK_INVALID)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i = 0; i < MAX_MB_PLANE; i++)"
  },
  {
    "label": "get_plane_block_size()",
    "kind": "Method",
    "detail": "Function (struct macroblockd_plane* const pd =& xd -> plane [ i ] ; const BLOCK_SIZE plane_bsize =)",
    "insertText": "get_plane_block_size(bsize, pd)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(pd->above_context, 0, sizeof(ENTROPY_CONTEXT) * num_4x4_blocks_wide_lookup[plane_bsize])"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(pd->left_context, 0, sizeof(ENTROPY_CONTEXT) * num_4x4_blocks_high_lookup[plane_bsize])"
  },
  {
    "label": "get_y_mode_probs()",
    "kind": "Method",
    "detail": "Function (} } const vpx_prob*)",
    "insertText": "get_y_mode_probs(const MODE_INFO *mi, const MODE_INFO *above_mi, const MODE_INFO *left_mi, int block)"
  },
  {
    "label": "vp9_above_block_mode()",
    "kind": "Method",
    "detail": "Function (const PREDICTION_MODE above =)",
    "insertText": "vp9_above_block_mode(mi, above_mi, block)"
  },
  {
    "label": "vp9_left_block_mode()",
    "kind": "Method",
    "detail": "Function (const PREDICTION_MODE left =)",
    "insertText": "vp9_left_block_mode(mi, left_mi, block)"
  },
  {
    "label": "vp9_foreach_transformed_block_in_plane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_foreach_transformed_block_in_plane(const MACROBLOCKD *const xd, BLOCK_SIZE bsize, int plane, foreach_transformed_block_visitor visit, void *arg)"
  },
  {
    "label": "vp9_foreach_transformed_block()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_foreach_transformed_block(const MACROBLOCKD *const xd, BLOCK_SIZE bsize, foreach_transformed_block_visitor visit, void *arg)"
  },
  {
    "label": "vp9_set_contexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_set_contexts(const MACROBLOCKD *xd, struct macroblockd_plane *pd, BLOCK_SIZE plane_bsize, TX_SIZE tx_size, int has_eob, int aoff, int loff)"
  },
  {
    "label": "mi_to_pixel_loc()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_MISMATCH_DEBUG # define TX_UNIT_SIZE_LOG2 2 void)",
    "insertText": "mi_to_pixel_loc(int *pixel_c, int *pixel_r, int mi_col, int mi_row, int tx_blk_col, int tx_blk_row, int subsampling_x, int subsampling_y)"
  },
  {
    "label": "pixel_c()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "pixel_c((mi_col << MI_SIZE_LOG2) >> subsampling_x) + (tx_blk_col << TX_UNIT_SIZE_LOG2)"
  },
  {
    "label": "pixel_r()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "pixel_r((mi_row << MI_SIZE_LOG2) >> subsampling_y) + (tx_blk_row << TX_UNIT_SIZE_LOG2)"
  },
  {
    "label": "get_block_width()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "get_block_width(BLOCK_SIZE bsize)"
  },
  {
    "label": "get_block_height()",
    "kind": "Method",
    "detail": "Function (const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; return 4* num_4x4_w ; } int)",
    "insertText": "get_block_height(BLOCK_SIZE bsize)"
  }
]