[
  {
    "label": "SEditableComboBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableComboBox"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / Events . h \" # include \" Input / Reply . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Layout / Margin . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Framework / SlateDelegates . h \" # include \" Widgets / Images / SImage . h \" # include \" Widgets / SOverlay . h \" # include \" Widgets / Input / SEditableTextBox . h \" # include \" Widgets / Input / SButton . h \" # include \" Widgets / Input / SComboBox . h \" # define LOCTEXT_NAMESPACE \" SEditableComboBox \")",
    "insertText": "DECLARE_DELEGATE_RetVal(FString, FOnGetEditableComboBoxText)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public : typedef TSlateDelegates<OptionType>::FOnGenerateWidget FOnGenerateWidget ; typedef TSlateDelegates<OptionType>::FOnSelectionChanged FOnSelectionChanged ;)",
    "insertText": "SLATE_BEGIN_ARGS(SEditableComboBox) : _ButtonStyle( &FCoreStyle::Get().GetWidgetStyle< FButtonStyle >( \"Button\" ) ) , _Content() , _ContentPadding(FMargin(4.0, 2.0)) , _InitiallySelectedItem(nullptr) , _MaxListHeight(450.0f) , _IsRenameVisible(EVisibility::Visible) , _OnGetEditableText() , _OnRemoveClicked() , _OnSelectionChanged() , _OnSelectionRenamed() , _OptionsSource()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FText, AddButtonToolTip) SLATE_STYLE_ARGUMENT(FButtonStyle, ButtonStyle) SLATE_NAMED_SLOT(FArguments, Content) SLATE_ATTRIBUTE(FMargin, ContentPadding) SLATE_ARGUMENT(OptionType, InitiallySelectedItem) SLATE_ARGUMENT(float, MaxListHeight) SLATE_ARGUMENT(EVisibility, IsRenameVisible) SLATE_EVENT(FOnClicked, OnAddClicked) SLATE_EVENT(FOnGenerateWidget, OnGenerateWidget) SLATE_EVENT(FOnGetEditableComboBoxText, OnGetEditableText) SLATE_EVENT(FOnClicked, OnRemoveClicked) SLATE_EVENT(FOnSelectionChanged, OnSelectionChanged) SLATE_EVENT(FOnTextCommitted, OnSelectionRenamed) SLATE_ARGUMENT(const TArray<OptionType>*, OptionsSource) SLATE_ATTRIBUTE(FText, RemoveButtonToolTip) SLATE_ATTRIBUTE(FText, RenameButtonToolTip) SLATE_END_ARGS() public: void ClearSelection()"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (ComboBox ->)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (OnSelectionRenamed = InArgs . _OnSelectionRenamed ; OnGetEditableText = InArgs . _OnGetEditableText ; ChildSlot [)",
    "insertText": "SNew(SHorizontalBox) + SHorizontalBox::Slot() .FillWidth(1.0) [ SNew(SOverlay) + SOverlay::Slot() [ SNew(SHorizontalBox) .Visibility(this, &SEditableComboBox::HandleNormalModeBoxVisibility) + SHorizontalBox::Slot() .FillWidth(1.0) [ SAssignNew(ComboBox, SComboBox<OptionType>) .ButtonStyle(InArgs._ButtonStyle) .ContentPadding(InArgs._ContentPadding) .InitiallySelectedItem(InArgs._InitiallySelectedItem) .MaxListHeight(InArgs._MaxListHeight) .OptionsSource(InArgs._OptionsSource) .OnGenerateWidget(InArgs._OnGenerateWidget) .OnSelectionChanged(InArgs._OnSelectionChanged) .Content() [ InArgs._Content.Widget ] ] + SHorizontalBox::Slot() .AutoWidth() .Padding(1.0) [ SNew(SButton) .ContentPadding(2.f) .ForegroundColor(FSlateColor::UseForeground()) .IsEnabled(this, &SEditableComboBox::HandleRemoveRenameButtonIsEnabled) .ButtonStyle( FCoreStyle::Get(), \"NoBorder\" ) .OnClicked(this, &SEditableComboBox::HandleRenameButtonClicked) .ToolTipText(InArgs._RenameButtonToolTip) .VAlign(VAlign_Center) .Visibility(InArgs._IsRenameVisible) .Content() [ SNew(SImage) .Image(FCoreStyle::Get().GetBrush(\"EditableComboBox.Rename\")) .ColorAndOpacity(FSlateColor::UseForeground()) ] ] ] + SOverlay::Slot() [ SNew(SHorizontalBox) .Visibility(this, &SEditableComboBox::HandleEditModeBoxVisibility) + SHorizontalBox::Slot() .FillWidth(1.0) .Padding(0.0, 0.0, 0.0, 3.0) [ SAssignNew(TextBox, SEditableTextBox) .OnTextCommitted(this, &SEditableComboBox::HandleTextBoxTextCommitted) ] + SHorizontalBox::Slot() .AutoWidth() .Padding(1.0) [ SNew(SButton) .ContentPadding(2.f) .ForegroundColor(FSlateColor::UseForeground()) .ButtonStyle( FCoreStyle::Get(), \"NoBorder\" ) .OnClicked(this, &SEditableComboBox::HandleAcceptButtonClicked) .ToolTipText(LOCTEXT(\"AcceptButtonTooltip\", \"Accept\")) .VAlign(VAlign_Center) .Content() [ SNew(SImage) .Image(FCoreStyle::Get().GetBrush(\"EditableComboBox.Accept\")) .ColorAndOpacity(FSlateColor::UseForeground()) ] ] ] ] + SHorizontalBox::Slot() .AutoWidth() .Padding(1.0) [ SNew(SButton) .ContentPadding(2.f) .ForegroundColor(FSlateColor::UseForeground()) .IsEnabled(this, &SEditableComboBox::HandleAddButtonIsEnabled) .ButtonStyle( FCoreStyle::Get(), \"NoBorder\" ) .OnClicked(InArgs._OnAddClicked) .ToolTipText(InArgs._AddButtonToolTip) .VAlign(VAlign_Center) .Content() [ SNew(SImage) .Image(FCoreStyle::Get().GetBrush(\"EditableComboBox.Add\")) .ColorAndOpacity(FSlateColor::UseForeground()) ] ] + SHorizontalBox::Slot() .AutoWidth() .Padding(1.0) [ SNew(SButton) .ContentPadding(2.f) .ForegroundColor(FSlateColor::UseForeground()) .IsEnabled(this, &SEditableComboBox::HandleRemoveRenameButtonIsEnabled) .ButtonStyle( FCoreStyle::Get(), \"NoBorder\" ) .OnClicked(InArgs._OnRemoveClicked) .ToolTipText(InArgs._RemoveButtonToolTip) .VAlign(VAlign_Center) .Content() [ SNew(SImage) .Image(FCoreStyle::Get().GetBrush(\"EditableComboBox.Delete\")) .ColorAndOpacity(FSlateColor::UseForeground())"
  },
  {
    "label": "GetSelectedItem()",
    "kind": "Method",
    "detail": "Function (} OptionType)",
    "insertText": "GetSelectedItem()"
  },
  {
    "label": "RefreshOptions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RefreshOptions()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (EditedItem .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetSelectedItem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSelectedItem(OptionType InSelectedItem)"
  },
  {
    "label": "SetSelectedItem()",
    "kind": "Method",
    "detail": "Function (ComboBox ->)",
    "insertText": "SetSelectedItem(InSelectedItem)"
  },
  {
    "label": "HandleAddButtonIsEnabled()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "HandleAddButtonIsEnabled()"
  },
  {
    "label": "HandleAcceptButtonClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "HandleAcceptButtonClicked()"
  },
  {
    "label": "HandleEditModeBoxVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "HandleEditModeBoxVisibility()"
  },
  {
    "label": "HandleNormalModeBoxVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "HandleNormalModeBoxVisibility()"
  },
  {
    "label": "HandleRemoveRenameButtonIsEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HandleRemoveRenameButtonIsEnabled()"
  },
  {
    "label": "HandleRenameButtonClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "HandleRenameButtonClicked()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (TextBox ->)",
    "insertText": "SetText(FText::FromString( OnGetEditableText.Execute() ))"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Handled().SetUserFocus(TextBox->AsShared(), EFocusCause::Mouse)"
  },
  {
    "label": "HandleTextBoxTextCommitted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleTextBoxTextCommitted(const FText& CommittedText, ETextCommit::Type CommitType)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnSelectionRenamed .)",
    "insertText": "ExecuteIfBound(TextBox->GetText(), CommitType)"
  }
]