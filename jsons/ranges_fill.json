[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Type"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_FILL_H # define _LIBCPP___ALGORITHM_RANGES_FILL_H # include<__algorithm / ranges_fill_n . h> # include<__config> # include<__iterator / concepts . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace __fill { struct __fn { template<class _Type,output_iterator<const _Type&> _Iter,sentinel_for<_Iter> _Sent> _LIBCPP_HIDE_FROM_ABI _Iter)",
    "insertText": "operator()(_Iter __first, _Sent __last, const _Type& __value)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(; __first != __last; ++__first)"
  }
]