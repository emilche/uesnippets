[
  {
    "label": "SDL_version",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_version"
  },
  {
    "label": "SDL_VERSION()",
    "kind": "Method",
    "detail": "Function (# ifndef SDL_version_h_ # define SDL_version_h_ # include \" SDL_stdinc . h \" # include \" begin_code . h \" # ifdef __cplusplus \" C \" { # endif typedef struct SDL_version { Uint8 major ; Uint8 minor ; Uint8 patch ; } SDL_version ; # define SDL_MAJOR_VERSION 2 # define SDL_MINOR_VERSION 3 0 # define SDL_PATCHLEVEL 6 # define)",
    "insertText": "SDL_VERSION(x)"
  },
  {
    "label": "SDL_VERSIONNUM()",
    "kind": "Method",
    "detail": "Function (\\ } # if SDL_MAJOR_VERSION<3 # define)",
    "insertText": "SDL_VERSIONNUM(X, Y, Z) \\ ((X)*1000 + (Y)*100 + (Z)) #define SDL_COMPILEDVERSION \\ SDL_VERSIONNUM(SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_PATCHLEVEL) #endif #define SDL_VERSION_ATLEAST(X, Y, Z) \\ ((SDL_MAJOR_VERSION >= X) && \\ (SDL_MAJOR_VERSION > X || SDL_MINOR_VERSION >= Y) && \\ (SDL_MAJOR_VERSION > X || SDL_MINOR_VERSION > Y || SDL_PATCHLEVEL >= Z)) extern DECLSPEC void SDLCALL SDL_GetVersion(SDL_version * ver)"
  },
  {
    "label": "SDL_GetRevision()",
    "kind": "Method",
    "detail": "Function (DECLSPEC const char* SDLCALL)",
    "insertText": "SDL_GetRevision(void)"
  },
  {
    "label": "SDL_GetRevisionNumber()",
    "kind": "Method",
    "detail": "Function (SDL_DEPRECATED DECLSPEC int SDLCALL)",
    "insertText": "SDL_GetRevisionNumber(void)"
  }
]