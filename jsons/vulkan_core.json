[
  {
    "label": "object",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "object"
  },
  {
    "label": "VkResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkResult"
  },
  {
    "label": "VkStructureType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkStructureType"
  },
  {
    "label": "VkPipelineCacheHeaderVersion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPipelineCacheHeaderVersion"
  },
  {
    "label": "VkImageLayout",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkImageLayout"
  },
  {
    "label": "VkObjectType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkObjectType"
  },
  {
    "label": "VkVendorId",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVendorId"
  },
  {
    "label": "VkSystemAllocationScope",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSystemAllocationScope"
  },
  {
    "label": "VkInternalAllocationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkInternalAllocationType"
  },
  {
    "label": "VkFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkFormat"
  },
  {
    "label": "VkImageTiling",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkImageTiling"
  },
  {
    "label": "VkImageType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkImageType"
  },
  {
    "label": "VkPhysicalDeviceType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPhysicalDeviceType"
  },
  {
    "label": "VkQueryType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkQueryType"
  },
  {
    "label": "VkSharingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSharingMode"
  },
  {
    "label": "VkComponentSwizzle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkComponentSwizzle"
  },
  {
    "label": "VkImageViewType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkImageViewType"
  },
  {
    "label": "VkBlendFactor",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkBlendFactor"
  },
  {
    "label": "VkBlendOp",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkBlendOp"
  },
  {
    "label": "VkCompareOp",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkCompareOp"
  },
  {
    "label": "VkDynamicState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDynamicState"
  },
  {
    "label": "VkFrontFace",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkFrontFace"
  },
  {
    "label": "VkVertexInputRate",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVertexInputRate"
  },
  {
    "label": "VkPrimitiveTopology",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPrimitiveTopology"
  },
  {
    "label": "VkPolygonMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPolygonMode"
  },
  {
    "label": "VkStencilOp",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkStencilOp"
  },
  {
    "label": "VkLogicOp",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkLogicOp"
  },
  {
    "label": "VkBorderColor",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkBorderColor"
  },
  {
    "label": "VkFilter",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkFilter"
  },
  {
    "label": "VkSamplerAddressMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSamplerAddressMode"
  },
  {
    "label": "VkSamplerMipmapMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSamplerMipmapMode"
  },
  {
    "label": "VkDescriptorType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDescriptorType"
  },
  {
    "label": "VkAttachmentLoadOp",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkAttachmentLoadOp"
  },
  {
    "label": "VkAttachmentStoreOp",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkAttachmentStoreOp"
  },
  {
    "label": "VkPipelineBindPoint",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPipelineBindPoint"
  },
  {
    "label": "VkCommandBufferLevel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkCommandBufferLevel"
  },
  {
    "label": "VkIndexType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkIndexType"
  },
  {
    "label": "VkSubpassContents",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSubpassContents"
  },
  {
    "label": "VkAccessFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkAccessFlagBits"
  },
  {
    "label": "VkImageAspectFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkImageAspectFlagBits"
  },
  {
    "label": "VkFormatFeatureFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkFormatFeatureFlagBits"
  },
  {
    "label": "VkImageCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkImageCreateFlagBits"
  },
  {
    "label": "VkSampleCountFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSampleCountFlagBits"
  },
  {
    "label": "VkImageUsageFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkImageUsageFlagBits"
  },
  {
    "label": "VkInstanceCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkInstanceCreateFlagBits"
  },
  {
    "label": "VkMemoryHeapFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkMemoryHeapFlagBits"
  },
  {
    "label": "VkMemoryPropertyFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkMemoryPropertyFlagBits"
  },
  {
    "label": "VkQueueFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkQueueFlagBits"
  },
  {
    "label": "VkDeviceQueueCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDeviceQueueCreateFlagBits"
  },
  {
    "label": "VkPipelineStageFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPipelineStageFlagBits"
  },
  {
    "label": "VkMemoryMapFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkMemoryMapFlagBits"
  },
  {
    "label": "VkSparseMemoryBindFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSparseMemoryBindFlagBits"
  },
  {
    "label": "VkSparseImageFormatFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSparseImageFormatFlagBits"
  },
  {
    "label": "VkFenceCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkFenceCreateFlagBits"
  },
  {
    "label": "VkEventCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkEventCreateFlagBits"
  },
  {
    "label": "VkQueryPipelineStatisticFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkQueryPipelineStatisticFlagBits"
  },
  {
    "label": "VkQueryResultFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkQueryResultFlagBits"
  },
  {
    "label": "VkBufferCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkBufferCreateFlagBits"
  },
  {
    "label": "VkBufferUsageFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkBufferUsageFlagBits"
  },
  {
    "label": "VkImageViewCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkImageViewCreateFlagBits"
  },
  {
    "label": "VkPipelineCacheCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPipelineCacheCreateFlagBits"
  },
  {
    "label": "VkColorComponentFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkColorComponentFlagBits"
  },
  {
    "label": "VkPipelineCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPipelineCreateFlagBits"
  },
  {
    "label": "VkPipelineShaderStageCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPipelineShaderStageCreateFlagBits"
  },
  {
    "label": "VkShaderStageFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkShaderStageFlagBits"
  },
  {
    "label": "VkCullModeFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkCullModeFlagBits"
  },
  {
    "label": "VkPipelineDepthStencilStateCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPipelineDepthStencilStateCreateFlagBits"
  },
  {
    "label": "VkPipelineColorBlendStateCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPipelineColorBlendStateCreateFlagBits"
  },
  {
    "label": "VkPipelineLayoutCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPipelineLayoutCreateFlagBits"
  },
  {
    "label": "VkSamplerCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSamplerCreateFlagBits"
  },
  {
    "label": "VkDescriptorPoolCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDescriptorPoolCreateFlagBits"
  },
  {
    "label": "VkDescriptorSetLayoutCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDescriptorSetLayoutCreateFlagBits"
  },
  {
    "label": "VkAttachmentDescriptionFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkAttachmentDescriptionFlagBits"
  },
  {
    "label": "VkDependencyFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDependencyFlagBits"
  },
  {
    "label": "VkFramebufferCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkFramebufferCreateFlagBits"
  },
  {
    "label": "VkRenderPassCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkRenderPassCreateFlagBits"
  },
  {
    "label": "VkSubpassDescriptionFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSubpassDescriptionFlagBits"
  },
  {
    "label": "VkCommandPoolCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkCommandPoolCreateFlagBits"
  },
  {
    "label": "VkCommandPoolResetFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkCommandPoolResetFlagBits"
  },
  {
    "label": "VkCommandBufferUsageFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkCommandBufferUsageFlagBits"
  },
  {
    "label": "VkQueryControlFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkQueryControlFlagBits"
  },
  {
    "label": "VkCommandBufferResetFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkCommandBufferResetFlagBits"
  },
  {
    "label": "VkStencilFaceFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkStencilFaceFlagBits"
  },
  {
    "label": "VkExtent2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExtent2D"
  },
  {
    "label": "VkExtent3D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExtent3D"
  },
  {
    "label": "VkOffset2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkOffset2D"
  },
  {
    "label": "VkOffset3D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkOffset3D"
  },
  {
    "label": "VkRect2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRect2D"
  },
  {
    "label": "VkBaseInStructure",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBaseInStructure"
  },
  {
    "label": "VkBaseOutStructure",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBaseOutStructure"
  },
  {
    "label": "VkBufferMemoryBarrier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferMemoryBarrier"
  },
  {
    "label": "VkDispatchIndirectCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDispatchIndirectCommand"
  },
  {
    "label": "VkDrawIndexedIndirectCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDrawIndexedIndirectCommand"
  },
  {
    "label": "VkDrawIndirectCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDrawIndirectCommand"
  },
  {
    "label": "VkImageSubresourceRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageSubresourceRange"
  },
  {
    "label": "VkImageMemoryBarrier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageMemoryBarrier"
  },
  {
    "label": "VkMemoryBarrier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryBarrier"
  },
  {
    "label": "VkPipelineCacheHeaderVersionOne",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineCacheHeaderVersionOne"
  },
  {
    "label": "VkAllocationCallbacks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAllocationCallbacks"
  },
  {
    "label": "VkApplicationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkApplicationInfo"
  },
  {
    "label": "VkFormatProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkFormatProperties"
  },
  {
    "label": "VkImageFormatProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageFormatProperties"
  },
  {
    "label": "VkInstanceCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkInstanceCreateInfo"
  },
  {
    "label": "VkMemoryHeap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryHeap"
  },
  {
    "label": "VkMemoryType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryType"
  },
  {
    "label": "VkPhysicalDeviceFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFeatures"
  },
  {
    "label": "VkPhysicalDeviceLimits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceLimits"
  },
  {
    "label": "VkPhysicalDeviceMemoryProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMemoryProperties"
  },
  {
    "label": "VkPhysicalDeviceSparseProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSparseProperties"
  },
  {
    "label": "VkPhysicalDeviceProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceProperties"
  },
  {
    "label": "VkQueueFamilyProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkQueueFamilyProperties"
  },
  {
    "label": "VkDeviceQueueCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceQueueCreateInfo"
  },
  {
    "label": "VkDeviceCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceCreateInfo"
  },
  {
    "label": "VkExtensionProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExtensionProperties"
  },
  {
    "label": "VkLayerProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkLayerProperties"
  },
  {
    "label": "VkSubmitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSubmitInfo"
  },
  {
    "label": "VkMappedMemoryRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMappedMemoryRange"
  },
  {
    "label": "VkMemoryAllocateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryAllocateInfo"
  },
  {
    "label": "VkMemoryRequirements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryRequirements"
  },
  {
    "label": "VkSparseMemoryBind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSparseMemoryBind"
  },
  {
    "label": "VkSparseBufferMemoryBindInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSparseBufferMemoryBindInfo"
  },
  {
    "label": "VkSparseImageOpaqueMemoryBindInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSparseImageOpaqueMemoryBindInfo"
  },
  {
    "label": "VkImageSubresource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageSubresource"
  },
  {
    "label": "VkSparseImageMemoryBind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSparseImageMemoryBind"
  },
  {
    "label": "VkSparseImageMemoryBindInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSparseImageMemoryBindInfo"
  },
  {
    "label": "VkBindSparseInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBindSparseInfo"
  },
  {
    "label": "VkSparseImageFormatProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSparseImageFormatProperties"
  },
  {
    "label": "VkSparseImageMemoryRequirements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSparseImageMemoryRequirements"
  },
  {
    "label": "VkFenceCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkFenceCreateInfo"
  },
  {
    "label": "VkSemaphoreCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSemaphoreCreateInfo"
  },
  {
    "label": "VkEventCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkEventCreateInfo"
  },
  {
    "label": "VkQueryPoolCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkQueryPoolCreateInfo"
  },
  {
    "label": "VkBufferCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferCreateInfo"
  },
  {
    "label": "VkBufferViewCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferViewCreateInfo"
  },
  {
    "label": "VkImageCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageCreateInfo"
  },
  {
    "label": "VkSubresourceLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSubresourceLayout"
  },
  {
    "label": "VkComponentMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkComponentMapping"
  },
  {
    "label": "VkImageViewCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageViewCreateInfo"
  },
  {
    "label": "VkShaderModuleCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkShaderModuleCreateInfo"
  },
  {
    "label": "VkPipelineCacheCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineCacheCreateInfo"
  },
  {
    "label": "VkSpecializationMapEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSpecializationMapEntry"
  },
  {
    "label": "VkSpecializationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSpecializationInfo"
  },
  {
    "label": "VkPipelineShaderStageCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineShaderStageCreateInfo"
  },
  {
    "label": "VkComputePipelineCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkComputePipelineCreateInfo"
  },
  {
    "label": "VkVertexInputBindingDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVertexInputBindingDescription"
  },
  {
    "label": "VkVertexInputAttributeDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVertexInputAttributeDescription"
  },
  {
    "label": "VkPipelineVertexInputStateCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineVertexInputStateCreateInfo"
  },
  {
    "label": "VkPipelineInputAssemblyStateCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineInputAssemblyStateCreateInfo"
  },
  {
    "label": "VkPipelineTessellationStateCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineTessellationStateCreateInfo"
  },
  {
    "label": "VkViewport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkViewport"
  },
  {
    "label": "VkPipelineViewportStateCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineViewportStateCreateInfo"
  },
  {
    "label": "VkPipelineRasterizationStateCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineRasterizationStateCreateInfo"
  },
  {
    "label": "VkPipelineMultisampleStateCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineMultisampleStateCreateInfo"
  },
  {
    "label": "VkStencilOpState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkStencilOpState"
  },
  {
    "label": "VkPipelineDepthStencilStateCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineDepthStencilStateCreateInfo"
  },
  {
    "label": "VkPipelineColorBlendAttachmentState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineColorBlendAttachmentState"
  },
  {
    "label": "VkPipelineColorBlendStateCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineColorBlendStateCreateInfo"
  },
  {
    "label": "VkPipelineDynamicStateCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineDynamicStateCreateInfo"
  },
  {
    "label": "VkGraphicsPipelineCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkGraphicsPipelineCreateInfo"
  },
  {
    "label": "VkPushConstantRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPushConstantRange"
  },
  {
    "label": "VkPipelineLayoutCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineLayoutCreateInfo"
  },
  {
    "label": "VkSamplerCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSamplerCreateInfo"
  },
  {
    "label": "VkCopyDescriptorSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyDescriptorSet"
  },
  {
    "label": "VkDescriptorBufferInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorBufferInfo"
  },
  {
    "label": "VkDescriptorImageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorImageInfo"
  },
  {
    "label": "VkDescriptorPoolSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorPoolSize"
  },
  {
    "label": "VkDescriptorPoolCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorPoolCreateInfo"
  },
  {
    "label": "VkDescriptorSetAllocateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorSetAllocateInfo"
  },
  {
    "label": "VkDescriptorSetLayoutBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorSetLayoutBinding"
  },
  {
    "label": "VkDescriptorSetLayoutCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorSetLayoutCreateInfo"
  },
  {
    "label": "VkWriteDescriptorSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkWriteDescriptorSet"
  },
  {
    "label": "VkAttachmentDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAttachmentDescription"
  },
  {
    "label": "VkAttachmentReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAttachmentReference"
  },
  {
    "label": "VkFramebufferCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkFramebufferCreateInfo"
  },
  {
    "label": "VkSubpassDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSubpassDescription"
  },
  {
    "label": "VkSubpassDependency",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSubpassDependency"
  },
  {
    "label": "VkRenderPassCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassCreateInfo"
  },
  {
    "label": "VkCommandPoolCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCommandPoolCreateInfo"
  },
  {
    "label": "VkCommandBufferAllocateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCommandBufferAllocateInfo"
  },
  {
    "label": "VkCommandBufferInheritanceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCommandBufferInheritanceInfo"
  },
  {
    "label": "VkCommandBufferBeginInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCommandBufferBeginInfo"
  },
  {
    "label": "VkBufferCopy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferCopy"
  },
  {
    "label": "VkImageSubresourceLayers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageSubresourceLayers"
  },
  {
    "label": "VkBufferImageCopy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferImageCopy"
  },
  {
    "label": "VkClearDepthStencilValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkClearDepthStencilValue"
  },
  {
    "label": "VkClearAttachment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkClearAttachment"
  },
  {
    "label": "VkClearRect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkClearRect"
  },
  {
    "label": "VkImageBlit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageBlit"
  },
  {
    "label": "VkImageCopy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageCopy"
  },
  {
    "label": "VkImageResolve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageResolve"
  },
  {
    "label": "VkRenderPassBeginInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassBeginInfo"
  },
  {
    "label": "VkPointClippingBehavior",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPointClippingBehavior"
  },
  {
    "label": "VkTessellationDomainOrigin",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkTessellationDomainOrigin"
  },
  {
    "label": "VkSamplerYcbcrModelConversion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSamplerYcbcrModelConversion"
  },
  {
    "label": "VkSamplerYcbcrRange",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSamplerYcbcrRange"
  },
  {
    "label": "VkChromaLocation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkChromaLocation"
  },
  {
    "label": "VkDescriptorUpdateTemplateType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDescriptorUpdateTemplateType"
  },
  {
    "label": "VkSubgroupFeatureFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSubgroupFeatureFlagBits"
  },
  {
    "label": "VkPeerMemoryFeatureFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPeerMemoryFeatureFlagBits"
  },
  {
    "label": "VkMemoryAllocateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkMemoryAllocateFlagBits"
  },
  {
    "label": "VkExternalMemoryHandleTypeFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkExternalMemoryHandleTypeFlagBits"
  },
  {
    "label": "VkExternalMemoryFeatureFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkExternalMemoryFeatureFlagBits"
  },
  {
    "label": "VkExternalFenceHandleTypeFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkExternalFenceHandleTypeFlagBits"
  },
  {
    "label": "VkExternalFenceFeatureFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkExternalFenceFeatureFlagBits"
  },
  {
    "label": "VkFenceImportFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkFenceImportFlagBits"
  },
  {
    "label": "VkSemaphoreImportFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSemaphoreImportFlagBits"
  },
  {
    "label": "VkExternalSemaphoreHandleTypeFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkExternalSemaphoreHandleTypeFlagBits"
  },
  {
    "label": "VkExternalSemaphoreFeatureFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkExternalSemaphoreFeatureFlagBits"
  },
  {
    "label": "VkPhysicalDeviceSubgroupProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSubgroupProperties"
  },
  {
    "label": "VkBindBufferMemoryInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBindBufferMemoryInfo"
  },
  {
    "label": "VkBindImageMemoryInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBindImageMemoryInfo"
  },
  {
    "label": "VkPhysicalDevice16BitStorageFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevice16BitStorageFeatures"
  },
  {
    "label": "VkMemoryDedicatedRequirements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryDedicatedRequirements"
  },
  {
    "label": "VkMemoryDedicatedAllocateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryDedicatedAllocateInfo"
  },
  {
    "label": "VkMemoryAllocateFlagsInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryAllocateFlagsInfo"
  },
  {
    "label": "VkDeviceGroupRenderPassBeginInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceGroupRenderPassBeginInfo"
  },
  {
    "label": "VkDeviceGroupCommandBufferBeginInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceGroupCommandBufferBeginInfo"
  },
  {
    "label": "VkDeviceGroupSubmitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceGroupSubmitInfo"
  },
  {
    "label": "VkDeviceGroupBindSparseInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceGroupBindSparseInfo"
  },
  {
    "label": "VkBindBufferMemoryDeviceGroupInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBindBufferMemoryDeviceGroupInfo"
  },
  {
    "label": "VkBindImageMemoryDeviceGroupInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBindImageMemoryDeviceGroupInfo"
  },
  {
    "label": "VkPhysicalDeviceGroupProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceGroupProperties"
  },
  {
    "label": "VkDeviceGroupDeviceCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceGroupDeviceCreateInfo"
  },
  {
    "label": "VkBufferMemoryRequirementsInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferMemoryRequirementsInfo2"
  },
  {
    "label": "VkImageMemoryRequirementsInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageMemoryRequirementsInfo2"
  },
  {
    "label": "VkImageSparseMemoryRequirementsInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageSparseMemoryRequirementsInfo2"
  },
  {
    "label": "VkMemoryRequirements2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryRequirements2"
  },
  {
    "label": "VkSparseImageMemoryRequirements2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSparseImageMemoryRequirements2"
  },
  {
    "label": "VkPhysicalDeviceFeatures2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFeatures2"
  },
  {
    "label": "VkPhysicalDeviceProperties2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceProperties2"
  },
  {
    "label": "VkFormatProperties2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkFormatProperties2"
  },
  {
    "label": "VkImageFormatProperties2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageFormatProperties2"
  },
  {
    "label": "VkPhysicalDeviceImageFormatInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceImageFormatInfo2"
  },
  {
    "label": "VkQueueFamilyProperties2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkQueueFamilyProperties2"
  },
  {
    "label": "VkPhysicalDeviceMemoryProperties2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMemoryProperties2"
  },
  {
    "label": "VkSparseImageFormatProperties2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSparseImageFormatProperties2"
  },
  {
    "label": "VkPhysicalDeviceSparseImageFormatInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSparseImageFormatInfo2"
  },
  {
    "label": "VkPhysicalDevicePointClippingProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePointClippingProperties"
  },
  {
    "label": "VkInputAttachmentAspectReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkInputAttachmentAspectReference"
  },
  {
    "label": "VkRenderPassInputAttachmentAspectCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassInputAttachmentAspectCreateInfo"
  },
  {
    "label": "VkImageViewUsageCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageViewUsageCreateInfo"
  },
  {
    "label": "VkPipelineTessellationDomainOriginStateCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineTessellationDomainOriginStateCreateInfo"
  },
  {
    "label": "VkRenderPassMultiviewCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassMultiviewCreateInfo"
  },
  {
    "label": "VkPhysicalDeviceMultiviewFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMultiviewFeatures"
  },
  {
    "label": "VkPhysicalDeviceMultiviewProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMultiviewProperties"
  },
  {
    "label": "VkPhysicalDeviceVariablePointersFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceVariablePointersFeatures"
  },
  {
    "label": "VkPhysicalDeviceProtectedMemoryFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceProtectedMemoryFeatures"
  },
  {
    "label": "VkPhysicalDeviceProtectedMemoryProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceProtectedMemoryProperties"
  },
  {
    "label": "VkDeviceQueueInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceQueueInfo2"
  },
  {
    "label": "VkProtectedSubmitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkProtectedSubmitInfo"
  },
  {
    "label": "VkSamplerYcbcrConversionCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSamplerYcbcrConversionCreateInfo"
  },
  {
    "label": "VkSamplerYcbcrConversionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSamplerYcbcrConversionInfo"
  },
  {
    "label": "VkBindImagePlaneMemoryInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBindImagePlaneMemoryInfo"
  },
  {
    "label": "VkImagePlaneMemoryRequirementsInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImagePlaneMemoryRequirementsInfo"
  },
  {
    "label": "VkPhysicalDeviceSamplerYcbcrConversionFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSamplerYcbcrConversionFeatures"
  },
  {
    "label": "VkSamplerYcbcrConversionImageFormatProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSamplerYcbcrConversionImageFormatProperties"
  },
  {
    "label": "VkDescriptorUpdateTemplateEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorUpdateTemplateEntry"
  },
  {
    "label": "VkDescriptorUpdateTemplateCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorUpdateTemplateCreateInfo"
  },
  {
    "label": "VkExternalMemoryProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExternalMemoryProperties"
  },
  {
    "label": "VkPhysicalDeviceExternalImageFormatInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceExternalImageFormatInfo"
  },
  {
    "label": "VkExternalImageFormatProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExternalImageFormatProperties"
  },
  {
    "label": "VkPhysicalDeviceExternalBufferInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceExternalBufferInfo"
  },
  {
    "label": "VkExternalBufferProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExternalBufferProperties"
  },
  {
    "label": "VkPhysicalDeviceIDProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceIDProperties"
  },
  {
    "label": "VkExternalMemoryImageCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExternalMemoryImageCreateInfo"
  },
  {
    "label": "VkExternalMemoryBufferCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExternalMemoryBufferCreateInfo"
  },
  {
    "label": "VkExportMemoryAllocateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExportMemoryAllocateInfo"
  },
  {
    "label": "VkPhysicalDeviceExternalFenceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceExternalFenceInfo"
  },
  {
    "label": "VkExternalFenceProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExternalFenceProperties"
  },
  {
    "label": "VkExportFenceCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExportFenceCreateInfo"
  },
  {
    "label": "VkExportSemaphoreCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExportSemaphoreCreateInfo"
  },
  {
    "label": "VkPhysicalDeviceExternalSemaphoreInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceExternalSemaphoreInfo"
  },
  {
    "label": "VkExternalSemaphoreProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExternalSemaphoreProperties"
  },
  {
    "label": "VkPhysicalDeviceMaintenance3Properties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMaintenance3Properties"
  },
  {
    "label": "VkDescriptorSetLayoutSupport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorSetLayoutSupport"
  },
  {
    "label": "VkPhysicalDeviceShaderDrawParametersFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderDrawParametersFeatures"
  },
  {
    "label": "VkDriverId",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDriverId"
  },
  {
    "label": "VkShaderFloatControlsIndependence",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkShaderFloatControlsIndependence"
  },
  {
    "label": "VkSamplerReductionMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSamplerReductionMode"
  },
  {
    "label": "VkSemaphoreType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSemaphoreType"
  },
  {
    "label": "VkResolveModeFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkResolveModeFlagBits"
  },
  {
    "label": "VkDescriptorBindingFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDescriptorBindingFlagBits"
  },
  {
    "label": "VkSemaphoreWaitFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSemaphoreWaitFlagBits"
  },
  {
    "label": "VkPhysicalDeviceVulkan11Features",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceVulkan11Features"
  },
  {
    "label": "VkPhysicalDeviceVulkan11Properties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceVulkan11Properties"
  },
  {
    "label": "VkPhysicalDeviceVulkan12Features",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceVulkan12Features"
  },
  {
    "label": "VkConformanceVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkConformanceVersion"
  },
  {
    "label": "VkPhysicalDeviceVulkan12Properties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceVulkan12Properties"
  },
  {
    "label": "VkImageFormatListCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageFormatListCreateInfo"
  },
  {
    "label": "VkAttachmentDescription2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAttachmentDescription2"
  },
  {
    "label": "VkAttachmentReference2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAttachmentReference2"
  },
  {
    "label": "VkSubpassDescription2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSubpassDescription2"
  },
  {
    "label": "VkSubpassDependency2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSubpassDependency2"
  },
  {
    "label": "VkRenderPassCreateInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassCreateInfo2"
  },
  {
    "label": "VkSubpassBeginInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSubpassBeginInfo"
  },
  {
    "label": "VkSubpassEndInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSubpassEndInfo"
  },
  {
    "label": "VkPhysicalDevice8BitStorageFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevice8BitStorageFeatures"
  },
  {
    "label": "VkPhysicalDeviceDriverProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDriverProperties"
  },
  {
    "label": "VkPhysicalDeviceShaderAtomicInt64Features",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderAtomicInt64Features"
  },
  {
    "label": "VkPhysicalDeviceShaderFloat16Int8Features",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderFloat16Int8Features"
  },
  {
    "label": "VkPhysicalDeviceFloatControlsProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFloatControlsProperties"
  },
  {
    "label": "VkDescriptorSetLayoutBindingFlagsCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorSetLayoutBindingFlagsCreateInfo"
  },
  {
    "label": "VkPhysicalDeviceDescriptorIndexingFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDescriptorIndexingFeatures"
  },
  {
    "label": "VkPhysicalDeviceDescriptorIndexingProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDescriptorIndexingProperties"
  },
  {
    "label": "VkDescriptorSetVariableDescriptorCountAllocateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorSetVariableDescriptorCountAllocateInfo"
  },
  {
    "label": "VkDescriptorSetVariableDescriptorCountLayoutSupport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorSetVariableDescriptorCountLayoutSupport"
  },
  {
    "label": "VkSubpassDescriptionDepthStencilResolve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSubpassDescriptionDepthStencilResolve"
  },
  {
    "label": "VkPhysicalDeviceDepthStencilResolveProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDepthStencilResolveProperties"
  },
  {
    "label": "VkPhysicalDeviceScalarBlockLayoutFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceScalarBlockLayoutFeatures"
  },
  {
    "label": "VkImageStencilUsageCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageStencilUsageCreateInfo"
  },
  {
    "label": "VkSamplerReductionModeCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSamplerReductionModeCreateInfo"
  },
  {
    "label": "VkPhysicalDeviceSamplerFilterMinmaxProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSamplerFilterMinmaxProperties"
  },
  {
    "label": "VkPhysicalDeviceVulkanMemoryModelFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceVulkanMemoryModelFeatures"
  },
  {
    "label": "VkPhysicalDeviceImagelessFramebufferFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceImagelessFramebufferFeatures"
  },
  {
    "label": "VkFramebufferAttachmentImageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkFramebufferAttachmentImageInfo"
  },
  {
    "label": "VkFramebufferAttachmentsCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkFramebufferAttachmentsCreateInfo"
  },
  {
    "label": "VkRenderPassAttachmentBeginInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassAttachmentBeginInfo"
  },
  {
    "label": "VkPhysicalDeviceUniformBufferStandardLayoutFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceUniformBufferStandardLayoutFeatures"
  },
  {
    "label": "VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures"
  },
  {
    "label": "VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures"
  },
  {
    "label": "VkAttachmentReferenceStencilLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAttachmentReferenceStencilLayout"
  },
  {
    "label": "VkAttachmentDescriptionStencilLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAttachmentDescriptionStencilLayout"
  },
  {
    "label": "VkPhysicalDeviceHostQueryResetFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceHostQueryResetFeatures"
  },
  {
    "label": "VkPhysicalDeviceTimelineSemaphoreFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceTimelineSemaphoreFeatures"
  },
  {
    "label": "VkPhysicalDeviceTimelineSemaphoreProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceTimelineSemaphoreProperties"
  },
  {
    "label": "VkSemaphoreTypeCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSemaphoreTypeCreateInfo"
  },
  {
    "label": "VkTimelineSemaphoreSubmitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkTimelineSemaphoreSubmitInfo"
  },
  {
    "label": "VkSemaphoreWaitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSemaphoreWaitInfo"
  },
  {
    "label": "VkSemaphoreSignalInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSemaphoreSignalInfo"
  },
  {
    "label": "VkPhysicalDeviceBufferDeviceAddressFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceBufferDeviceAddressFeatures"
  },
  {
    "label": "VkBufferDeviceAddressInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferDeviceAddressInfo"
  },
  {
    "label": "VkBufferOpaqueCaptureAddressCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferOpaqueCaptureAddressCreateInfo"
  },
  {
    "label": "VkMemoryOpaqueCaptureAddressAllocateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryOpaqueCaptureAddressAllocateInfo"
  },
  {
    "label": "VkDeviceMemoryOpaqueCaptureAddressInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceMemoryOpaqueCaptureAddressInfo"
  },
  {
    "label": "VkPipelineCreationFeedbackFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPipelineCreationFeedbackFlagBits"
  },
  {
    "label": "VkToolPurposeFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkToolPurposeFlagBits"
  },
  {
    "label": "VkSubmitFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSubmitFlagBits"
  },
  {
    "label": "VkRenderingFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkRenderingFlagBits"
  },
  {
    "label": "VkPhysicalDeviceVulkan13Features",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceVulkan13Features"
  },
  {
    "label": "VkPhysicalDeviceVulkan13Properties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceVulkan13Properties"
  },
  {
    "label": "VkPipelineCreationFeedback",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineCreationFeedback"
  },
  {
    "label": "VkPipelineCreationFeedbackCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineCreationFeedbackCreateInfo"
  },
  {
    "label": "VkPhysicalDeviceShaderTerminateInvocationFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderTerminateInvocationFeatures"
  },
  {
    "label": "VkPhysicalDeviceToolProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceToolProperties"
  },
  {
    "label": "VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures"
  },
  {
    "label": "VkPhysicalDevicePrivateDataFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePrivateDataFeatures"
  },
  {
    "label": "VkDevicePrivateDataCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDevicePrivateDataCreateInfo"
  },
  {
    "label": "VkPrivateDataSlotCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPrivateDataSlotCreateInfo"
  },
  {
    "label": "VkPhysicalDevicePipelineCreationCacheControlFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePipelineCreationCacheControlFeatures"
  },
  {
    "label": "VkMemoryBarrier2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryBarrier2"
  },
  {
    "label": "VkBufferMemoryBarrier2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferMemoryBarrier2"
  },
  {
    "label": "VkImageMemoryBarrier2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageMemoryBarrier2"
  },
  {
    "label": "VkDependencyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDependencyInfo"
  },
  {
    "label": "VkSemaphoreSubmitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSemaphoreSubmitInfo"
  },
  {
    "label": "VkCommandBufferSubmitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCommandBufferSubmitInfo"
  },
  {
    "label": "VkSubmitInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSubmitInfo2"
  },
  {
    "label": "VkPhysicalDeviceSynchronization2Features",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSynchronization2Features"
  },
  {
    "label": "VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures"
  },
  {
    "label": "VkPhysicalDeviceImageRobustnessFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceImageRobustnessFeatures"
  },
  {
    "label": "VkBufferCopy2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferCopy2"
  },
  {
    "label": "VkCopyBufferInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyBufferInfo2"
  },
  {
    "label": "VkImageCopy2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageCopy2"
  },
  {
    "label": "VkCopyImageInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyImageInfo2"
  },
  {
    "label": "VkBufferImageCopy2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferImageCopy2"
  },
  {
    "label": "VkCopyBufferToImageInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyBufferToImageInfo2"
  },
  {
    "label": "VkCopyImageToBufferInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyImageToBufferInfo2"
  },
  {
    "label": "VkImageBlit2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageBlit2"
  },
  {
    "label": "VkBlitImageInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBlitImageInfo2"
  },
  {
    "label": "VkImageResolve2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageResolve2"
  },
  {
    "label": "VkResolveImageInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkResolveImageInfo2"
  },
  {
    "label": "VkPhysicalDeviceSubgroupSizeControlFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSubgroupSizeControlFeatures"
  },
  {
    "label": "VkPhysicalDeviceSubgroupSizeControlProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSubgroupSizeControlProperties"
  },
  {
    "label": "VkPipelineShaderStageRequiredSubgroupSizeCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineShaderStageRequiredSubgroupSizeCreateInfo"
  },
  {
    "label": "VkPhysicalDeviceInlineUniformBlockFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceInlineUniformBlockFeatures"
  },
  {
    "label": "VkPhysicalDeviceInlineUniformBlockProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceInlineUniformBlockProperties"
  },
  {
    "label": "VkWriteDescriptorSetInlineUniformBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkWriteDescriptorSetInlineUniformBlock"
  },
  {
    "label": "VkDescriptorPoolInlineUniformBlockCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorPoolInlineUniformBlockCreateInfo"
  },
  {
    "label": "VkPhysicalDeviceTextureCompressionASTCHDRFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceTextureCompressionASTCHDRFeatures"
  },
  {
    "label": "VkRenderingAttachmentInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderingAttachmentInfo"
  },
  {
    "label": "VkRenderingInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderingInfo"
  },
  {
    "label": "VkPipelineRenderingCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineRenderingCreateInfo"
  },
  {
    "label": "VkPhysicalDeviceDynamicRenderingFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDynamicRenderingFeatures"
  },
  {
    "label": "VkCommandBufferInheritanceRenderingInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCommandBufferInheritanceRenderingInfo"
  },
  {
    "label": "VkPhysicalDeviceShaderIntegerDotProductFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderIntegerDotProductFeatures"
  },
  {
    "label": "VkPhysicalDeviceShaderIntegerDotProductProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderIntegerDotProductProperties"
  },
  {
    "label": "VkPhysicalDeviceTexelBufferAlignmentProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceTexelBufferAlignmentProperties"
  },
  {
    "label": "VkFormatProperties3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkFormatProperties3"
  },
  {
    "label": "VkPhysicalDeviceMaintenance4Features",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMaintenance4Features"
  },
  {
    "label": "VkPhysicalDeviceMaintenance4Properties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMaintenance4Properties"
  },
  {
    "label": "VkDeviceBufferMemoryRequirements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceBufferMemoryRequirements"
  },
  {
    "label": "VkDeviceImageMemoryRequirements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceImageMemoryRequirements"
  },
  {
    "label": "VkPresentModeKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPresentModeKHR"
  },
  {
    "label": "VkColorSpaceKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkColorSpaceKHR"
  },
  {
    "label": "VkSurfaceTransformFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSurfaceTransformFlagBitsKHR"
  },
  {
    "label": "VkCompositeAlphaFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkCompositeAlphaFlagBitsKHR"
  },
  {
    "label": "VkSurfaceCapabilitiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSurfaceCapabilitiesKHR"
  },
  {
    "label": "VkSurfaceFormatKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSurfaceFormatKHR"
  },
  {
    "label": "VkSwapchainCreateFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSwapchainCreateFlagBitsKHR"
  },
  {
    "label": "VkDeviceGroupPresentModeFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDeviceGroupPresentModeFlagBitsKHR"
  },
  {
    "label": "VkSwapchainCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSwapchainCreateInfoKHR"
  },
  {
    "label": "VkPresentInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPresentInfoKHR"
  },
  {
    "label": "VkImageSwapchainCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageSwapchainCreateInfoKHR"
  },
  {
    "label": "VkBindImageMemorySwapchainInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBindImageMemorySwapchainInfoKHR"
  },
  {
    "label": "VkAcquireNextImageInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAcquireNextImageInfoKHR"
  },
  {
    "label": "VkDeviceGroupPresentCapabilitiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceGroupPresentCapabilitiesKHR"
  },
  {
    "label": "VkDeviceGroupPresentInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceGroupPresentInfoKHR"
  },
  {
    "label": "VkDeviceGroupSwapchainCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceGroupSwapchainCreateInfoKHR"
  },
  {
    "label": "VkDisplayPlaneAlphaFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDisplayPlaneAlphaFlagBitsKHR"
  },
  {
    "label": "VkDisplayModeParametersKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDisplayModeParametersKHR"
  },
  {
    "label": "VkDisplayModeCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDisplayModeCreateInfoKHR"
  },
  {
    "label": "VkDisplayModePropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDisplayModePropertiesKHR"
  },
  {
    "label": "VkDisplayPlaneCapabilitiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDisplayPlaneCapabilitiesKHR"
  },
  {
    "label": "VkDisplayPlanePropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDisplayPlanePropertiesKHR"
  },
  {
    "label": "VkDisplayPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDisplayPropertiesKHR"
  },
  {
    "label": "VkDisplaySurfaceCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDisplaySurfaceCreateInfoKHR"
  },
  {
    "label": "VkDisplayPresentInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDisplayPresentInfoKHR"
  },
  {
    "label": "VkQueryResultStatusKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkQueryResultStatusKHR"
  },
  {
    "label": "VkVideoCodecOperationFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoCodecOperationFlagBitsKHR"
  },
  {
    "label": "VkVideoChromaSubsamplingFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoChromaSubsamplingFlagBitsKHR"
  },
  {
    "label": "VkVideoComponentBitDepthFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoComponentBitDepthFlagBitsKHR"
  },
  {
    "label": "VkVideoCapabilityFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoCapabilityFlagBitsKHR"
  },
  {
    "label": "VkVideoSessionCreateFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoSessionCreateFlagBitsKHR"
  },
  {
    "label": "VkVideoCodingControlFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoCodingControlFlagBitsKHR"
  },
  {
    "label": "VkQueueFamilyQueryResultStatusPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkQueueFamilyQueryResultStatusPropertiesKHR"
  },
  {
    "label": "VkQueueFamilyVideoPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkQueueFamilyVideoPropertiesKHR"
  },
  {
    "label": "VkVideoProfileInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoProfileInfoKHR"
  },
  {
    "label": "VkVideoProfileListInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoProfileListInfoKHR"
  },
  {
    "label": "VkVideoCapabilitiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoCapabilitiesKHR"
  },
  {
    "label": "VkPhysicalDeviceVideoFormatInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceVideoFormatInfoKHR"
  },
  {
    "label": "VkVideoFormatPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoFormatPropertiesKHR"
  },
  {
    "label": "VkVideoPictureResourceInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoPictureResourceInfoKHR"
  },
  {
    "label": "VkVideoReferenceSlotInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoReferenceSlotInfoKHR"
  },
  {
    "label": "VkVideoSessionMemoryRequirementsKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoSessionMemoryRequirementsKHR"
  },
  {
    "label": "VkBindVideoSessionMemoryInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBindVideoSessionMemoryInfoKHR"
  },
  {
    "label": "VkVideoSessionCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoSessionCreateInfoKHR"
  },
  {
    "label": "VkVideoSessionParametersCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoSessionParametersCreateInfoKHR"
  },
  {
    "label": "VkVideoSessionParametersUpdateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoSessionParametersUpdateInfoKHR"
  },
  {
    "label": "VkVideoBeginCodingInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoBeginCodingInfoKHR"
  },
  {
    "label": "VkVideoEndCodingInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEndCodingInfoKHR"
  },
  {
    "label": "VkVideoCodingControlInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoCodingControlInfoKHR"
  },
  {
    "label": "VkVideoDecodeCapabilityFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoDecodeCapabilityFlagBitsKHR"
  },
  {
    "label": "VkVideoDecodeUsageFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoDecodeUsageFlagBitsKHR"
  },
  {
    "label": "VkVideoDecodeCapabilitiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeCapabilitiesKHR"
  },
  {
    "label": "VkVideoDecodeUsageInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeUsageInfoKHR"
  },
  {
    "label": "VkVideoDecodeInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeInfoKHR"
  },
  {
    "label": "VkVideoEncodeH264CapabilityFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoEncodeH264CapabilityFlagBitsKHR"
  },
  {
    "label": "VkVideoEncodeH264StdFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoEncodeH264StdFlagBitsKHR"
  },
  {
    "label": "VkVideoEncodeH264RateControlFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoEncodeH264RateControlFlagBitsKHR"
  },
  {
    "label": "VkVideoEncodeH264CapabilitiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH264CapabilitiesKHR"
  },
  {
    "label": "VkVideoEncodeH264QpKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH264QpKHR"
  },
  {
    "label": "VkVideoEncodeH264QualityLevelPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH264QualityLevelPropertiesKHR"
  },
  {
    "label": "VkVideoEncodeH264SessionCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH264SessionCreateInfoKHR"
  },
  {
    "label": "VkVideoEncodeH264SessionParametersAddInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH264SessionParametersAddInfoKHR"
  },
  {
    "label": "VkVideoEncodeH264SessionParametersCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH264SessionParametersCreateInfoKHR"
  },
  {
    "label": "VkVideoEncodeH264SessionParametersGetInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH264SessionParametersGetInfoKHR"
  },
  {
    "label": "VkVideoEncodeH264SessionParametersFeedbackInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH264SessionParametersFeedbackInfoKHR"
  },
  {
    "label": "VkVideoEncodeH264NaluSliceInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH264NaluSliceInfoKHR"
  },
  {
    "label": "VkVideoEncodeH264PictureInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH264PictureInfoKHR"
  },
  {
    "label": "VkVideoEncodeH264DpbSlotInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH264DpbSlotInfoKHR"
  },
  {
    "label": "VkVideoEncodeH264ProfileInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH264ProfileInfoKHR"
  },
  {
    "label": "VkVideoEncodeH264RateControlInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH264RateControlInfoKHR"
  },
  {
    "label": "VkVideoEncodeH264FrameSizeKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH264FrameSizeKHR"
  },
  {
    "label": "VkVideoEncodeH264RateControlLayerInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH264RateControlLayerInfoKHR"
  },
  {
    "label": "VkVideoEncodeH264GopRemainingFrameInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH264GopRemainingFrameInfoKHR"
  },
  {
    "label": "VkVideoEncodeH265CapabilityFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoEncodeH265CapabilityFlagBitsKHR"
  },
  {
    "label": "VkVideoEncodeH265StdFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoEncodeH265StdFlagBitsKHR"
  },
  {
    "label": "VkVideoEncodeH265CtbSizeFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoEncodeH265CtbSizeFlagBitsKHR"
  },
  {
    "label": "VkVideoEncodeH265TransformBlockSizeFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoEncodeH265TransformBlockSizeFlagBitsKHR"
  },
  {
    "label": "VkVideoEncodeH265RateControlFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoEncodeH265RateControlFlagBitsKHR"
  },
  {
    "label": "VkVideoEncodeH265CapabilitiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH265CapabilitiesKHR"
  },
  {
    "label": "VkVideoEncodeH265SessionCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH265SessionCreateInfoKHR"
  },
  {
    "label": "VkVideoEncodeH265QpKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH265QpKHR"
  },
  {
    "label": "VkVideoEncodeH265QualityLevelPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH265QualityLevelPropertiesKHR"
  },
  {
    "label": "VkVideoEncodeH265SessionParametersAddInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH265SessionParametersAddInfoKHR"
  },
  {
    "label": "VkVideoEncodeH265SessionParametersCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH265SessionParametersCreateInfoKHR"
  },
  {
    "label": "VkVideoEncodeH265SessionParametersGetInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH265SessionParametersGetInfoKHR"
  },
  {
    "label": "VkVideoEncodeH265SessionParametersFeedbackInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH265SessionParametersFeedbackInfoKHR"
  },
  {
    "label": "VkVideoEncodeH265NaluSliceSegmentInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH265NaluSliceSegmentInfoKHR"
  },
  {
    "label": "VkVideoEncodeH265PictureInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH265PictureInfoKHR"
  },
  {
    "label": "VkVideoEncodeH265DpbSlotInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH265DpbSlotInfoKHR"
  },
  {
    "label": "VkVideoEncodeH265ProfileInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH265ProfileInfoKHR"
  },
  {
    "label": "VkVideoEncodeH265RateControlInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH265RateControlInfoKHR"
  },
  {
    "label": "VkVideoEncodeH265FrameSizeKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH265FrameSizeKHR"
  },
  {
    "label": "VkVideoEncodeH265RateControlLayerInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH265RateControlLayerInfoKHR"
  },
  {
    "label": "VkVideoEncodeH265GopRemainingFrameInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeH265GopRemainingFrameInfoKHR"
  },
  {
    "label": "VkVideoDecodeH264PictureLayoutFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoDecodeH264PictureLayoutFlagBitsKHR"
  },
  {
    "label": "VkVideoDecodeH264ProfileInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeH264ProfileInfoKHR"
  },
  {
    "label": "VkVideoDecodeH264CapabilitiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeH264CapabilitiesKHR"
  },
  {
    "label": "VkVideoDecodeH264SessionParametersAddInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeH264SessionParametersAddInfoKHR"
  },
  {
    "label": "VkVideoDecodeH264SessionParametersCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeH264SessionParametersCreateInfoKHR"
  },
  {
    "label": "VkVideoDecodeH264PictureInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeH264PictureInfoKHR"
  },
  {
    "label": "VkVideoDecodeH264DpbSlotInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeH264DpbSlotInfoKHR"
  },
  {
    "label": "VkRenderingFragmentShadingRateAttachmentInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderingFragmentShadingRateAttachmentInfoKHR"
  },
  {
    "label": "VkRenderingFragmentDensityMapAttachmentInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderingFragmentDensityMapAttachmentInfoEXT"
  },
  {
    "label": "VkAttachmentSampleCountInfoAMD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAttachmentSampleCountInfoAMD"
  },
  {
    "label": "VkMultiviewPerViewAttributesInfoNVX",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMultiviewPerViewAttributesInfoNVX"
  },
  {
    "label": "VkImportMemoryFdInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImportMemoryFdInfoKHR"
  },
  {
    "label": "VkMemoryFdPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryFdPropertiesKHR"
  },
  {
    "label": "VkMemoryGetFdInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryGetFdInfoKHR"
  },
  {
    "label": "VkImportSemaphoreFdInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImportSemaphoreFdInfoKHR"
  },
  {
    "label": "VkSemaphoreGetFdInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSemaphoreGetFdInfoKHR"
  },
  {
    "label": "VkPhysicalDevicePushDescriptorPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePushDescriptorPropertiesKHR"
  },
  {
    "label": "VkRectLayerKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRectLayerKHR"
  },
  {
    "label": "VkPresentRegionKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPresentRegionKHR"
  },
  {
    "label": "VkPresentRegionsKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPresentRegionsKHR"
  },
  {
    "label": "VkSharedPresentSurfaceCapabilitiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSharedPresentSurfaceCapabilitiesKHR"
  },
  {
    "label": "VkImportFenceFdInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImportFenceFdInfoKHR"
  },
  {
    "label": "VkFenceGetFdInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkFenceGetFdInfoKHR"
  },
  {
    "label": "VkPerformanceCounterUnitKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPerformanceCounterUnitKHR"
  },
  {
    "label": "VkPerformanceCounterScopeKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPerformanceCounterScopeKHR"
  },
  {
    "label": "VkPerformanceCounterStorageKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPerformanceCounterStorageKHR"
  },
  {
    "label": "VkPerformanceCounterDescriptionFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPerformanceCounterDescriptionFlagBitsKHR"
  },
  {
    "label": "VkAcquireProfilingLockFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkAcquireProfilingLockFlagBitsKHR"
  },
  {
    "label": "VkPhysicalDevicePerformanceQueryFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePerformanceQueryFeaturesKHR"
  },
  {
    "label": "VkPhysicalDevicePerformanceQueryPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePerformanceQueryPropertiesKHR"
  },
  {
    "label": "VkPerformanceCounterKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPerformanceCounterKHR"
  },
  {
    "label": "VkPerformanceCounterDescriptionKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPerformanceCounterDescriptionKHR"
  },
  {
    "label": "VkQueryPoolPerformanceCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkQueryPoolPerformanceCreateInfoKHR"
  },
  {
    "label": "VkAcquireProfilingLockInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAcquireProfilingLockInfoKHR"
  },
  {
    "label": "VkPerformanceQuerySubmitInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPerformanceQuerySubmitInfoKHR"
  },
  {
    "label": "VkPhysicalDeviceSurfaceInfo2KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSurfaceInfo2KHR"
  },
  {
    "label": "VkSurfaceCapabilities2KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSurfaceCapabilities2KHR"
  },
  {
    "label": "VkSurfaceFormat2KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSurfaceFormat2KHR"
  },
  {
    "label": "VkDisplayProperties2KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDisplayProperties2KHR"
  },
  {
    "label": "VkDisplayPlaneProperties2KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDisplayPlaneProperties2KHR"
  },
  {
    "label": "VkDisplayModeProperties2KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDisplayModeProperties2KHR"
  },
  {
    "label": "VkDisplayPlaneInfo2KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDisplayPlaneInfo2KHR"
  },
  {
    "label": "VkDisplayPlaneCapabilities2KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDisplayPlaneCapabilities2KHR"
  },
  {
    "label": "VkPhysicalDeviceShaderClockFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderClockFeaturesKHR"
  },
  {
    "label": "VkVideoDecodeH265ProfileInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeH265ProfileInfoKHR"
  },
  {
    "label": "VkVideoDecodeH265CapabilitiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeH265CapabilitiesKHR"
  },
  {
    "label": "VkVideoDecodeH265SessionParametersAddInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeH265SessionParametersAddInfoKHR"
  },
  {
    "label": "VkVideoDecodeH265SessionParametersCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeH265SessionParametersCreateInfoKHR"
  },
  {
    "label": "VkVideoDecodeH265PictureInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeH265PictureInfoKHR"
  },
  {
    "label": "VkVideoDecodeH265DpbSlotInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeH265DpbSlotInfoKHR"
  },
  {
    "label": "VkQueueGlobalPriorityKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkQueueGlobalPriorityKHR"
  },
  {
    "label": "VkDeviceQueueGlobalPriorityCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceQueueGlobalPriorityCreateInfoKHR"
  },
  {
    "label": "VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR"
  },
  {
    "label": "VkQueueFamilyGlobalPriorityPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkQueueFamilyGlobalPriorityPropertiesKHR"
  },
  {
    "label": "VkFragmentShadingRateCombinerOpKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkFragmentShadingRateCombinerOpKHR"
  },
  {
    "label": "VkFragmentShadingRateAttachmentInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkFragmentShadingRateAttachmentInfoKHR"
  },
  {
    "label": "VkPipelineFragmentShadingRateStateCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineFragmentShadingRateStateCreateInfoKHR"
  },
  {
    "label": "VkPhysicalDeviceFragmentShadingRateFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFragmentShadingRateFeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceFragmentShadingRatePropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFragmentShadingRatePropertiesKHR"
  },
  {
    "label": "VkPhysicalDeviceFragmentShadingRateKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFragmentShadingRateKHR"
  },
  {
    "label": "VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR"
  },
  {
    "label": "VkRenderingAttachmentLocationInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderingAttachmentLocationInfoKHR"
  },
  {
    "label": "VkRenderingInputAttachmentIndexInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderingInputAttachmentIndexInfoKHR"
  },
  {
    "label": "VkPhysicalDeviceShaderQuadControlFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderQuadControlFeaturesKHR"
  },
  {
    "label": "VkSurfaceProtectedCapabilitiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSurfaceProtectedCapabilitiesKHR"
  },
  {
    "label": "VkPhysicalDevicePresentWaitFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePresentWaitFeaturesKHR"
  },
  {
    "label": "VkPipelineExecutableStatisticFormatKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPipelineExecutableStatisticFormatKHR"
  },
  {
    "label": "VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR"
  },
  {
    "label": "VkPipelineInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineInfoKHR"
  },
  {
    "label": "VkPipelineExecutablePropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineExecutablePropertiesKHR"
  },
  {
    "label": "VkPipelineExecutableInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineExecutableInfoKHR"
  },
  {
    "label": "VkPipelineExecutableStatisticKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineExecutableStatisticKHR"
  },
  {
    "label": "VkPipelineExecutableInternalRepresentationKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineExecutableInternalRepresentationKHR"
  },
  {
    "label": "VkMemoryUnmapFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkMemoryUnmapFlagBitsKHR"
  },
  {
    "label": "VkMemoryMapInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryMapInfoKHR"
  },
  {
    "label": "VkMemoryUnmapInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryUnmapInfoKHR"
  },
  {
    "label": "VkPipelineLibraryCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineLibraryCreateInfoKHR"
  },
  {
    "label": "VkPresentIdKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPresentIdKHR"
  },
  {
    "label": "VkPhysicalDevicePresentIdFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePresentIdFeaturesKHR"
  },
  {
    "label": "VkVideoEncodeTuningModeKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoEncodeTuningModeKHR"
  },
  {
    "label": "VkVideoEncodeFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoEncodeFlagBitsKHR"
  },
  {
    "label": "VkVideoEncodeCapabilityFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoEncodeCapabilityFlagBitsKHR"
  },
  {
    "label": "VkVideoEncodeRateControlModeFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoEncodeRateControlModeFlagBitsKHR"
  },
  {
    "label": "VkVideoEncodeFeedbackFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoEncodeFeedbackFlagBitsKHR"
  },
  {
    "label": "VkVideoEncodeUsageFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoEncodeUsageFlagBitsKHR"
  },
  {
    "label": "VkVideoEncodeContentFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkVideoEncodeContentFlagBitsKHR"
  },
  {
    "label": "VkVideoEncodeInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeInfoKHR"
  },
  {
    "label": "VkVideoEncodeCapabilitiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeCapabilitiesKHR"
  },
  {
    "label": "VkQueryPoolVideoEncodeFeedbackCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkQueryPoolVideoEncodeFeedbackCreateInfoKHR"
  },
  {
    "label": "VkVideoEncodeUsageInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeUsageInfoKHR"
  },
  {
    "label": "VkVideoEncodeRateControlLayerInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeRateControlLayerInfoKHR"
  },
  {
    "label": "VkVideoEncodeRateControlInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeRateControlInfoKHR"
  },
  {
    "label": "VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR"
  },
  {
    "label": "VkVideoEncodeQualityLevelPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeQualityLevelPropertiesKHR"
  },
  {
    "label": "VkVideoEncodeQualityLevelInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeQualityLevelInfoKHR"
  },
  {
    "label": "VkVideoEncodeSessionParametersGetInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeSessionParametersGetInfoKHR"
  },
  {
    "label": "VkVideoEncodeSessionParametersFeedbackInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoEncodeSessionParametersFeedbackInfoKHR"
  },
  {
    "label": "VkQueueFamilyCheckpointProperties2NV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkQueueFamilyCheckpointProperties2NV"
  },
  {
    "label": "VkCheckpointData2NV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCheckpointData2NV"
  },
  {
    "label": "VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR"
  },
  {
    "label": "VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR"
  },
  {
    "label": "VkTraceRaysIndirectCommand2KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkTraceRaysIndirectCommand2KHR"
  },
  {
    "label": "VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceMaintenance5FeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMaintenance5FeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceMaintenance5PropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMaintenance5PropertiesKHR"
  },
  {
    "label": "VkRenderingAreaInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderingAreaInfoKHR"
  },
  {
    "label": "VkImageSubresource2KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageSubresource2KHR"
  },
  {
    "label": "VkDeviceImageSubresourceInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceImageSubresourceInfoKHR"
  },
  {
    "label": "VkSubresourceLayout2KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSubresourceLayout2KHR"
  },
  {
    "label": "VkPipelineCreateFlags2CreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineCreateFlags2CreateInfoKHR"
  },
  {
    "label": "VkBufferUsageFlags2CreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferUsageFlags2CreateInfoKHR"
  },
  {
    "label": "VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR"
  },
  {
    "label": "VkComponentTypeKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkComponentTypeKHR"
  },
  {
    "label": "VkScopeKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkScopeKHR"
  },
  {
    "label": "VkCooperativeMatrixPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCooperativeMatrixPropertiesKHR"
  },
  {
    "label": "VkPhysicalDeviceCooperativeMatrixFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceCooperativeMatrixFeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceCooperativeMatrixPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceCooperativeMatrixPropertiesKHR"
  },
  {
    "label": "VkVideoDecodeAV1ProfileInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeAV1ProfileInfoKHR"
  },
  {
    "label": "VkVideoDecodeAV1CapabilitiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeAV1CapabilitiesKHR"
  },
  {
    "label": "VkVideoDecodeAV1SessionParametersCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeAV1SessionParametersCreateInfoKHR"
  },
  {
    "label": "VkVideoDecodeAV1PictureInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeAV1PictureInfoKHR"
  },
  {
    "label": "VkVideoDecodeAV1DpbSlotInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoDecodeAV1DpbSlotInfoKHR"
  },
  {
    "label": "VkPhysicalDeviceVideoMaintenance1FeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceVideoMaintenance1FeaturesKHR"
  },
  {
    "label": "VkVideoInlineQueryInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVideoInlineQueryInfoKHR"
  },
  {
    "label": "VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR"
  },
  {
    "label": "VkVertexInputBindingDivisorDescriptionKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVertexInputBindingDivisorDescriptionKHR"
  },
  {
    "label": "VkPipelineVertexInputDivisorStateCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineVertexInputDivisorStateCreateInfoKHR"
  },
  {
    "label": "VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceShaderFloatControls2FeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderFloatControls2FeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceIndexTypeUint8FeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceIndexTypeUint8FeaturesKHR"
  },
  {
    "label": "VkLineRasterizationModeKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkLineRasterizationModeKHR"
  },
  {
    "label": "VkPhysicalDeviceLineRasterizationFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceLineRasterizationFeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceLineRasterizationPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceLineRasterizationPropertiesKHR"
  },
  {
    "label": "VkPipelineRasterizationLineStateCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineRasterizationLineStateCreateInfoKHR"
  },
  {
    "label": "VkTimeDomainKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkTimeDomainKHR"
  },
  {
    "label": "VkCalibratedTimestampInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCalibratedTimestampInfoKHR"
  },
  {
    "label": "VkPhysicalDeviceShaderExpectAssumeFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderExpectAssumeFeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceMaintenance6FeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMaintenance6FeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceMaintenance6PropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMaintenance6PropertiesKHR"
  },
  {
    "label": "VkBindMemoryStatusKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBindMemoryStatusKHR"
  },
  {
    "label": "VkBindDescriptorSetsInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBindDescriptorSetsInfoKHR"
  },
  {
    "label": "VkPushConstantsInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPushConstantsInfoKHR"
  },
  {
    "label": "VkPushDescriptorSetInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPushDescriptorSetInfoKHR"
  },
  {
    "label": "VkPushDescriptorSetWithTemplateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPushDescriptorSetWithTemplateInfoKHR"
  },
  {
    "label": "VkSetDescriptorBufferOffsetsInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSetDescriptorBufferOffsetsInfoEXT"
  },
  {
    "label": "VkBindDescriptorBufferEmbeddedSamplersInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBindDescriptorBufferEmbeddedSamplersInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceLayeredApiKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPhysicalDeviceLayeredApiKHR"
  },
  {
    "label": "VkPhysicalDeviceMaintenance7FeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMaintenance7FeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceMaintenance7PropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMaintenance7PropertiesKHR"
  },
  {
    "label": "VkPhysicalDeviceLayeredApiPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceLayeredApiPropertiesKHR"
  },
  {
    "label": "VkPhysicalDeviceLayeredApiPropertiesListKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceLayeredApiPropertiesListKHR"
  },
  {
    "label": "VkPhysicalDeviceLayeredApiVulkanPropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceLayeredApiVulkanPropertiesKHR"
  },
  {
    "label": "VkDebugReportObjectTypeEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDebugReportObjectTypeEXT"
  },
  {
    "label": "VkDebugReportFlagBitsEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDebugReportFlagBitsEXT"
  },
  {
    "label": "VkDebugReportCallbackCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDebugReportCallbackCreateInfoEXT"
  },
  {
    "label": "VkRasterizationOrderAMD",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkRasterizationOrderAMD"
  },
  {
    "label": "VkPipelineRasterizationStateRasterizationOrderAMD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineRasterizationStateRasterizationOrderAMD"
  },
  {
    "label": "VkDebugMarkerObjectNameInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDebugMarkerObjectNameInfoEXT"
  },
  {
    "label": "VkDebugMarkerObjectTagInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDebugMarkerObjectTagInfoEXT"
  },
  {
    "label": "VkDebugMarkerMarkerInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDebugMarkerMarkerInfoEXT"
  },
  {
    "label": "VkDedicatedAllocationImageCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDedicatedAllocationImageCreateInfoNV"
  },
  {
    "label": "VkDedicatedAllocationBufferCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDedicatedAllocationBufferCreateInfoNV"
  },
  {
    "label": "VkDedicatedAllocationMemoryAllocateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDedicatedAllocationMemoryAllocateInfoNV"
  },
  {
    "label": "VkPhysicalDeviceTransformFeedbackFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceTransformFeedbackFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceTransformFeedbackPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceTransformFeedbackPropertiesEXT"
  },
  {
    "label": "VkPipelineRasterizationStateStreamCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineRasterizationStateStreamCreateInfoEXT"
  },
  {
    "label": "VkCuModuleCreateInfoNVX",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCuModuleCreateInfoNVX"
  },
  {
    "label": "VkCuFunctionCreateInfoNVX",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCuFunctionCreateInfoNVX"
  },
  {
    "label": "VkCuLaunchInfoNVX",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCuLaunchInfoNVX"
  },
  {
    "label": "VkImageViewHandleInfoNVX",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageViewHandleInfoNVX"
  },
  {
    "label": "VkImageViewAddressPropertiesNVX",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageViewAddressPropertiesNVX"
  },
  {
    "label": "VkTextureLODGatherFormatPropertiesAMD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkTextureLODGatherFormatPropertiesAMD"
  },
  {
    "label": "VkShaderInfoTypeAMD",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkShaderInfoTypeAMD"
  },
  {
    "label": "VkShaderResourceUsageAMD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkShaderResourceUsageAMD"
  },
  {
    "label": "VkShaderStatisticsInfoAMD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkShaderStatisticsInfoAMD"
  },
  {
    "label": "VkPhysicalDeviceCornerSampledImageFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceCornerSampledImageFeaturesNV"
  },
  {
    "label": "VkExternalMemoryHandleTypeFlagBitsNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkExternalMemoryHandleTypeFlagBitsNV"
  },
  {
    "label": "VkExternalMemoryFeatureFlagBitsNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkExternalMemoryFeatureFlagBitsNV"
  },
  {
    "label": "VkExternalImageFormatPropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExternalImageFormatPropertiesNV"
  },
  {
    "label": "VkExternalMemoryImageCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExternalMemoryImageCreateInfoNV"
  },
  {
    "label": "VkExportMemoryAllocateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExportMemoryAllocateInfoNV"
  },
  {
    "label": "VkValidationCheckEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkValidationCheckEXT"
  },
  {
    "label": "VkValidationFlagsEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkValidationFlagsEXT"
  },
  {
    "label": "VkImageViewASTCDecodeModeEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageViewASTCDecodeModeEXT"
  },
  {
    "label": "VkPhysicalDeviceASTCDecodeFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceASTCDecodeFeaturesEXT"
  },
  {
    "label": "VkPipelineRobustnessBufferBehaviorEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPipelineRobustnessBufferBehaviorEXT"
  },
  {
    "label": "VkPipelineRobustnessImageBehaviorEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPipelineRobustnessImageBehaviorEXT"
  },
  {
    "label": "VkPhysicalDevicePipelineRobustnessFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePipelineRobustnessFeaturesEXT"
  },
  {
    "label": "VkPhysicalDevicePipelineRobustnessPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePipelineRobustnessPropertiesEXT"
  },
  {
    "label": "VkPipelineRobustnessCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineRobustnessCreateInfoEXT"
  },
  {
    "label": "VkConditionalRenderingFlagBitsEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkConditionalRenderingFlagBitsEXT"
  },
  {
    "label": "VkConditionalRenderingBeginInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkConditionalRenderingBeginInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceConditionalRenderingFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceConditionalRenderingFeaturesEXT"
  },
  {
    "label": "VkCommandBufferInheritanceConditionalRenderingInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCommandBufferInheritanceConditionalRenderingInfoEXT"
  },
  {
    "label": "VkViewportWScalingNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkViewportWScalingNV"
  },
  {
    "label": "VkPipelineViewportWScalingStateCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineViewportWScalingStateCreateInfoNV"
  },
  {
    "label": "VkSurfaceCounterFlagBitsEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSurfaceCounterFlagBitsEXT"
  },
  {
    "label": "VkSurfaceCapabilities2EXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSurfaceCapabilities2EXT"
  },
  {
    "label": "VkDisplayPowerStateEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDisplayPowerStateEXT"
  },
  {
    "label": "VkDeviceEventTypeEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDeviceEventTypeEXT"
  },
  {
    "label": "VkDisplayEventTypeEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDisplayEventTypeEXT"
  },
  {
    "label": "VkDisplayPowerInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDisplayPowerInfoEXT"
  },
  {
    "label": "VkDeviceEventInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceEventInfoEXT"
  },
  {
    "label": "VkDisplayEventInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDisplayEventInfoEXT"
  },
  {
    "label": "VkSwapchainCounterCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSwapchainCounterCreateInfoEXT"
  },
  {
    "label": "VkRefreshCycleDurationGOOGLE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRefreshCycleDurationGOOGLE"
  },
  {
    "label": "VkPastPresentationTimingGOOGLE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPastPresentationTimingGOOGLE"
  },
  {
    "label": "VkPresentTimeGOOGLE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPresentTimeGOOGLE"
  },
  {
    "label": "VkPresentTimesInfoGOOGLE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPresentTimesInfoGOOGLE"
  },
  {
    "label": "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX"
  },
  {
    "label": "VkViewportCoordinateSwizzleNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkViewportCoordinateSwizzleNV"
  },
  {
    "label": "VkViewportSwizzleNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkViewportSwizzleNV"
  },
  {
    "label": "VkPipelineViewportSwizzleStateCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineViewportSwizzleStateCreateInfoNV"
  },
  {
    "label": "VkDiscardRectangleModeEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDiscardRectangleModeEXT"
  },
  {
    "label": "VkPhysicalDeviceDiscardRectanglePropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDiscardRectanglePropertiesEXT"
  },
  {
    "label": "VkPipelineDiscardRectangleStateCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineDiscardRectangleStateCreateInfoEXT"
  },
  {
    "label": "VkConservativeRasterizationModeEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkConservativeRasterizationModeEXT"
  },
  {
    "label": "VkPhysicalDeviceConservativeRasterizationPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceConservativeRasterizationPropertiesEXT"
  },
  {
    "label": "VkPipelineRasterizationConservativeStateCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineRasterizationConservativeStateCreateInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceDepthClipEnableFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDepthClipEnableFeaturesEXT"
  },
  {
    "label": "VkPipelineRasterizationDepthClipStateCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineRasterizationDepthClipStateCreateInfoEXT"
  },
  {
    "label": "VkXYColorEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkXYColorEXT"
  },
  {
    "label": "VkHdrMetadataEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkHdrMetadataEXT"
  },
  {
    "label": "VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG"
  },
  {
    "label": "VkDebugUtilsMessageSeverityFlagBitsEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDebugUtilsMessageSeverityFlagBitsEXT"
  },
  {
    "label": "VkDebugUtilsMessageTypeFlagBitsEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDebugUtilsMessageTypeFlagBitsEXT"
  },
  {
    "label": "VkDebugUtilsLabelEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDebugUtilsLabelEXT"
  },
  {
    "label": "VkDebugUtilsObjectNameInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDebugUtilsObjectNameInfoEXT"
  },
  {
    "label": "VkDebugUtilsMessengerCallbackDataEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDebugUtilsMessengerCallbackDataEXT"
  },
  {
    "label": "VkDebugUtilsMessengerCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDebugUtilsMessengerCreateInfoEXT"
  },
  {
    "label": "VkDebugUtilsObjectTagInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDebugUtilsObjectTagInfoEXT"
  },
  {
    "label": "VkSampleLocationEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSampleLocationEXT"
  },
  {
    "label": "VkSampleLocationsInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSampleLocationsInfoEXT"
  },
  {
    "label": "VkAttachmentSampleLocationsEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAttachmentSampleLocationsEXT"
  },
  {
    "label": "VkSubpassSampleLocationsEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSubpassSampleLocationsEXT"
  },
  {
    "label": "VkRenderPassSampleLocationsBeginInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassSampleLocationsBeginInfoEXT"
  },
  {
    "label": "VkPipelineSampleLocationsStateCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineSampleLocationsStateCreateInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceSampleLocationsPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSampleLocationsPropertiesEXT"
  },
  {
    "label": "VkMultisamplePropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMultisamplePropertiesEXT"
  },
  {
    "label": "VkBlendOverlapEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkBlendOverlapEXT"
  },
  {
    "label": "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT"
  },
  {
    "label": "VkPipelineColorBlendAdvancedStateCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineColorBlendAdvancedStateCreateInfoEXT"
  },
  {
    "label": "VkPipelineCoverageToColorStateCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineCoverageToColorStateCreateInfoNV"
  },
  {
    "label": "VkCoverageModulationModeNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkCoverageModulationModeNV"
  },
  {
    "label": "VkPipelineCoverageModulationStateCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineCoverageModulationStateCreateInfoNV"
  },
  {
    "label": "VkPhysicalDeviceShaderSMBuiltinsPropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderSMBuiltinsPropertiesNV"
  },
  {
    "label": "VkPhysicalDeviceShaderSMBuiltinsFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderSMBuiltinsFeaturesNV"
  },
  {
    "label": "VkDrmFormatModifierPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDrmFormatModifierPropertiesEXT"
  },
  {
    "label": "VkDrmFormatModifierPropertiesListEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDrmFormatModifierPropertiesListEXT"
  },
  {
    "label": "VkPhysicalDeviceImageDrmFormatModifierInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceImageDrmFormatModifierInfoEXT"
  },
  {
    "label": "VkImageDrmFormatModifierListCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageDrmFormatModifierListCreateInfoEXT"
  },
  {
    "label": "VkImageDrmFormatModifierExplicitCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageDrmFormatModifierExplicitCreateInfoEXT"
  },
  {
    "label": "VkImageDrmFormatModifierPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageDrmFormatModifierPropertiesEXT"
  },
  {
    "label": "VkDrmFormatModifierProperties2EXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDrmFormatModifierProperties2EXT"
  },
  {
    "label": "VkDrmFormatModifierPropertiesList2EXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDrmFormatModifierPropertiesList2EXT"
  },
  {
    "label": "VkValidationCacheHeaderVersionEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkValidationCacheHeaderVersionEXT"
  },
  {
    "label": "VkValidationCacheCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkValidationCacheCreateInfoEXT"
  },
  {
    "label": "VkShaderModuleValidationCacheCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkShaderModuleValidationCacheCreateInfoEXT"
  },
  {
    "label": "VkShadingRatePaletteEntryNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkShadingRatePaletteEntryNV"
  },
  {
    "label": "VkCoarseSampleOrderTypeNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkCoarseSampleOrderTypeNV"
  },
  {
    "label": "VkShadingRatePaletteNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkShadingRatePaletteNV"
  },
  {
    "label": "VkPipelineViewportShadingRateImageStateCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineViewportShadingRateImageStateCreateInfoNV"
  },
  {
    "label": "VkPhysicalDeviceShadingRateImageFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShadingRateImageFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceShadingRateImagePropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShadingRateImagePropertiesNV"
  },
  {
    "label": "VkCoarseSampleLocationNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCoarseSampleLocationNV"
  },
  {
    "label": "VkCoarseSampleOrderCustomNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCoarseSampleOrderCustomNV"
  },
  {
    "label": "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV"
  },
  {
    "label": "VkRayTracingShaderGroupTypeKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkRayTracingShaderGroupTypeKHR"
  },
  {
    "label": "VkGeometryTypeKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkGeometryTypeKHR"
  },
  {
    "label": "VkAccelerationStructureTypeKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkAccelerationStructureTypeKHR"
  },
  {
    "label": "VkCopyAccelerationStructureModeKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkCopyAccelerationStructureModeKHR"
  },
  {
    "label": "VkAccelerationStructureMemoryRequirementsTypeNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkAccelerationStructureMemoryRequirementsTypeNV"
  },
  {
    "label": "VkGeometryFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkGeometryFlagBitsKHR"
  },
  {
    "label": "VkGeometryInstanceFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkGeometryInstanceFlagBitsKHR"
  },
  {
    "label": "VkBuildAccelerationStructureFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkBuildAccelerationStructureFlagBitsKHR"
  },
  {
    "label": "VkRayTracingShaderGroupCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRayTracingShaderGroupCreateInfoNV"
  },
  {
    "label": "VkRayTracingPipelineCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRayTracingPipelineCreateInfoNV"
  },
  {
    "label": "VkGeometryTrianglesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkGeometryTrianglesNV"
  },
  {
    "label": "VkGeometryAABBNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkGeometryAABBNV"
  },
  {
    "label": "VkGeometryDataNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkGeometryDataNV"
  },
  {
    "label": "VkGeometryNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkGeometryNV"
  },
  {
    "label": "VkAccelerationStructureInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureInfoNV"
  },
  {
    "label": "VkAccelerationStructureCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureCreateInfoNV"
  },
  {
    "label": "VkBindAccelerationStructureMemoryInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBindAccelerationStructureMemoryInfoNV"
  },
  {
    "label": "VkWriteDescriptorSetAccelerationStructureNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkWriteDescriptorSetAccelerationStructureNV"
  },
  {
    "label": "VkAccelerationStructureMemoryRequirementsInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureMemoryRequirementsInfoNV"
  },
  {
    "label": "VkPhysicalDeviceRayTracingPropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRayTracingPropertiesNV"
  },
  {
    "label": "VkTransformMatrixKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkTransformMatrixKHR"
  },
  {
    "label": "VkAabbPositionsKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAabbPositionsKHR"
  },
  {
    "label": "VkAccelerationStructureInstanceKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureInstanceKHR"
  },
  {
    "label": "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV"
  },
  {
    "label": "VkPipelineRepresentativeFragmentTestStateCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineRepresentativeFragmentTestStateCreateInfoNV"
  },
  {
    "label": "VkPhysicalDeviceImageViewImageFormatInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceImageViewImageFormatInfoEXT"
  },
  {
    "label": "VkFilterCubicImageViewImageFormatPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkFilterCubicImageViewImageFormatPropertiesEXT"
  },
  {
    "label": "VkImportMemoryHostPointerInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImportMemoryHostPointerInfoEXT"
  },
  {
    "label": "VkMemoryHostPointerPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryHostPointerPropertiesEXT"
  },
  {
    "label": "VkPhysicalDeviceExternalMemoryHostPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceExternalMemoryHostPropertiesEXT"
  },
  {
    "label": "VkPipelineCompilerControlFlagBitsAMD",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPipelineCompilerControlFlagBitsAMD"
  },
  {
    "label": "VkPipelineCompilerControlCreateInfoAMD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineCompilerControlCreateInfoAMD"
  },
  {
    "label": "VkPhysicalDeviceShaderCorePropertiesAMD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderCorePropertiesAMD"
  },
  {
    "label": "VkMemoryOverallocationBehaviorAMD",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkMemoryOverallocationBehaviorAMD"
  },
  {
    "label": "VkDeviceMemoryOverallocationCreateInfoAMD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceMemoryOverallocationCreateInfoAMD"
  },
  {
    "label": "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT"
  },
  {
    "label": "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceMeshShaderFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMeshShaderFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceMeshShaderPropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMeshShaderPropertiesNV"
  },
  {
    "label": "VkDrawMeshTasksIndirectCommandNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDrawMeshTasksIndirectCommandNV"
  },
  {
    "label": "VkPhysicalDeviceShaderImageFootprintFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderImageFootprintFeaturesNV"
  },
  {
    "label": "VkPipelineViewportExclusiveScissorStateCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineViewportExclusiveScissorStateCreateInfoNV"
  },
  {
    "label": "VkPhysicalDeviceExclusiveScissorFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceExclusiveScissorFeaturesNV"
  },
  {
    "label": "VkQueueFamilyCheckpointPropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkQueueFamilyCheckpointPropertiesNV"
  },
  {
    "label": "VkCheckpointDataNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCheckpointDataNV"
  },
  {
    "label": "VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL"
  },
  {
    "label": "VkPerformanceConfigurationTypeINTEL",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPerformanceConfigurationTypeINTEL"
  },
  {
    "label": "VkQueryPoolSamplingModeINTEL",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkQueryPoolSamplingModeINTEL"
  },
  {
    "label": "VkPerformanceOverrideTypeINTEL",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPerformanceOverrideTypeINTEL"
  },
  {
    "label": "VkPerformanceParameterTypeINTEL",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPerformanceParameterTypeINTEL"
  },
  {
    "label": "VkPerformanceValueTypeINTEL",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPerformanceValueTypeINTEL"
  },
  {
    "label": "VkPerformanceValueINTEL",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPerformanceValueINTEL"
  },
  {
    "label": "VkInitializePerformanceApiInfoINTEL",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkInitializePerformanceApiInfoINTEL"
  },
  {
    "label": "VkQueryPoolPerformanceQueryCreateInfoINTEL",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkQueryPoolPerformanceQueryCreateInfoINTEL"
  },
  {
    "label": "VkPerformanceMarkerInfoINTEL",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPerformanceMarkerInfoINTEL"
  },
  {
    "label": "VkPerformanceStreamMarkerInfoINTEL",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPerformanceStreamMarkerInfoINTEL"
  },
  {
    "label": "VkPerformanceOverrideInfoINTEL",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPerformanceOverrideInfoINTEL"
  },
  {
    "label": "VkPerformanceConfigurationAcquireInfoINTEL",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPerformanceConfigurationAcquireInfoINTEL"
  },
  {
    "label": "VkPhysicalDevicePCIBusInfoPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePCIBusInfoPropertiesEXT"
  },
  {
    "label": "VkDisplayNativeHdrSurfaceCapabilitiesAMD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDisplayNativeHdrSurfaceCapabilitiesAMD"
  },
  {
    "label": "VkSwapchainDisplayNativeHdrCreateInfoAMD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSwapchainDisplayNativeHdrCreateInfoAMD"
  },
  {
    "label": "VkPhysicalDeviceFragmentDensityMapFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFragmentDensityMapFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceFragmentDensityMapPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFragmentDensityMapPropertiesEXT"
  },
  {
    "label": "VkRenderPassFragmentDensityMapCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassFragmentDensityMapCreateInfoEXT"
  },
  {
    "label": "VkShaderCorePropertiesFlagBitsAMD",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkShaderCorePropertiesFlagBitsAMD"
  },
  {
    "label": "VkPhysicalDeviceShaderCoreProperties2AMD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderCoreProperties2AMD"
  },
  {
    "label": "VkPhysicalDeviceCoherentMemoryFeaturesAMD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceCoherentMemoryFeaturesAMD"
  },
  {
    "label": "VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceMemoryBudgetPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMemoryBudgetPropertiesEXT"
  },
  {
    "label": "VkPhysicalDeviceMemoryPriorityFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMemoryPriorityFeaturesEXT"
  },
  {
    "label": "VkMemoryPriorityAllocateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryPriorityAllocateInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceBufferDeviceAddressFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceBufferDeviceAddressFeaturesEXT"
  },
  {
    "label": "VkBufferDeviceAddressCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferDeviceAddressCreateInfoEXT"
  },
  {
    "label": "VkValidationFeatureEnableEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkValidationFeatureEnableEXT"
  },
  {
    "label": "VkValidationFeatureDisableEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkValidationFeatureDisableEXT"
  },
  {
    "label": "VkValidationFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkValidationFeaturesEXT"
  },
  {
    "label": "VkCooperativeMatrixPropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCooperativeMatrixPropertiesNV"
  },
  {
    "label": "VkPhysicalDeviceCooperativeMatrixFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceCooperativeMatrixFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceCooperativeMatrixPropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceCooperativeMatrixPropertiesNV"
  },
  {
    "label": "VkCoverageReductionModeNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkCoverageReductionModeNV"
  },
  {
    "label": "VkPhysicalDeviceCoverageReductionModeFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceCoverageReductionModeFeaturesNV"
  },
  {
    "label": "VkPipelineCoverageReductionStateCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineCoverageReductionStateCreateInfoNV"
  },
  {
    "label": "VkFramebufferMixedSamplesCombinationNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkFramebufferMixedSamplesCombinationNV"
  },
  {
    "label": "VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceYcbcrImageArraysFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceYcbcrImageArraysFeaturesEXT"
  },
  {
    "label": "VkProvokingVertexModeEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkProvokingVertexModeEXT"
  },
  {
    "label": "VkPhysicalDeviceProvokingVertexFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceProvokingVertexFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceProvokingVertexPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceProvokingVertexPropertiesEXT"
  },
  {
    "label": "VkPipelineRasterizationProvokingVertexStateCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineRasterizationProvokingVertexStateCreateInfoEXT"
  },
  {
    "label": "VkHeadlessSurfaceCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkHeadlessSurfaceCreateInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceShaderAtomicFloatFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderAtomicFloatFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceExtendedDynamicStateFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceExtendedDynamicStateFeaturesEXT"
  },
  {
    "label": "VkHostImageCopyFlagBitsEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkHostImageCopyFlagBitsEXT"
  },
  {
    "label": "VkPhysicalDeviceHostImageCopyFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceHostImageCopyFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceHostImageCopyPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceHostImageCopyPropertiesEXT"
  },
  {
    "label": "VkMemoryToImageCopyEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryToImageCopyEXT"
  },
  {
    "label": "VkImageToMemoryCopyEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageToMemoryCopyEXT"
  },
  {
    "label": "VkCopyMemoryToImageInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyMemoryToImageInfoEXT"
  },
  {
    "label": "VkCopyImageToMemoryInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyImageToMemoryInfoEXT"
  },
  {
    "label": "VkCopyImageToImageInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyImageToImageInfoEXT"
  },
  {
    "label": "VkHostImageLayoutTransitionInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkHostImageLayoutTransitionInfoEXT"
  },
  {
    "label": "VkSubresourceHostMemcpySizeEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSubresourceHostMemcpySizeEXT"
  },
  {
    "label": "VkHostImageCopyDevicePerformanceQueryEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkHostImageCopyDevicePerformanceQueryEXT"
  },
  {
    "label": "VkPhysicalDeviceMapMemoryPlacedFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMapMemoryPlacedFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceMapMemoryPlacedPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMapMemoryPlacedPropertiesEXT"
  },
  {
    "label": "VkMemoryMapPlacedInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryMapPlacedInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT"
  },
  {
    "label": "VkPresentScalingFlagBitsEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPresentScalingFlagBitsEXT"
  },
  {
    "label": "VkPresentGravityFlagBitsEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkPresentGravityFlagBitsEXT"
  },
  {
    "label": "VkSurfacePresentModeEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSurfacePresentModeEXT"
  },
  {
    "label": "VkSurfacePresentScalingCapabilitiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSurfacePresentScalingCapabilitiesEXT"
  },
  {
    "label": "VkSurfacePresentModeCompatibilityEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSurfacePresentModeCompatibilityEXT"
  },
  {
    "label": "VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT"
  },
  {
    "label": "VkSwapchainPresentFenceInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSwapchainPresentFenceInfoEXT"
  },
  {
    "label": "VkSwapchainPresentModesCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSwapchainPresentModesCreateInfoEXT"
  },
  {
    "label": "VkSwapchainPresentModeInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSwapchainPresentModeInfoEXT"
  },
  {
    "label": "VkSwapchainPresentScalingCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSwapchainPresentScalingCreateInfoEXT"
  },
  {
    "label": "VkReleaseSwapchainImagesInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkReleaseSwapchainImagesInfoEXT"
  },
  {
    "label": "VkIndirectCommandsTokenTypeNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkIndirectCommandsTokenTypeNV"
  },
  {
    "label": "VkIndirectStateFlagBitsNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkIndirectStateFlagBitsNV"
  },
  {
    "label": "VkIndirectCommandsLayoutUsageFlagBitsNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkIndirectCommandsLayoutUsageFlagBitsNV"
  },
  {
    "label": "VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV"
  },
  {
    "label": "VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV"
  },
  {
    "label": "VkGraphicsShaderGroupCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkGraphicsShaderGroupCreateInfoNV"
  },
  {
    "label": "VkGraphicsPipelineShaderGroupsCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkGraphicsPipelineShaderGroupsCreateInfoNV"
  },
  {
    "label": "VkBindShaderGroupIndirectCommandNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBindShaderGroupIndirectCommandNV"
  },
  {
    "label": "VkBindIndexBufferIndirectCommandNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBindIndexBufferIndirectCommandNV"
  },
  {
    "label": "VkBindVertexBufferIndirectCommandNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBindVertexBufferIndirectCommandNV"
  },
  {
    "label": "VkSetStateFlagsIndirectCommandNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSetStateFlagsIndirectCommandNV"
  },
  {
    "label": "VkIndirectCommandsStreamNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkIndirectCommandsStreamNV"
  },
  {
    "label": "VkIndirectCommandsLayoutTokenNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkIndirectCommandsLayoutTokenNV"
  },
  {
    "label": "VkIndirectCommandsLayoutCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkIndirectCommandsLayoutCreateInfoNV"
  },
  {
    "label": "VkGeneratedCommandsInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkGeneratedCommandsInfoNV"
  },
  {
    "label": "VkGeneratedCommandsMemoryRequirementsInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkGeneratedCommandsMemoryRequirementsInfoNV"
  },
  {
    "label": "VkPhysicalDeviceInheritedViewportScissorFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceInheritedViewportScissorFeaturesNV"
  },
  {
    "label": "VkCommandBufferInheritanceViewportScissorInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCommandBufferInheritanceViewportScissorInfoNV"
  },
  {
    "label": "VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT"
  },
  {
    "label": "VkRenderPassTransformBeginInfoQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassTransformBeginInfoQCOM"
  },
  {
    "label": "VkCommandBufferInheritanceRenderPassTransformInfoQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCommandBufferInheritanceRenderPassTransformInfoQCOM"
  },
  {
    "label": "VkDepthBiasRepresentationEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDepthBiasRepresentationEXT"
  },
  {
    "label": "VkPhysicalDeviceDepthBiasControlFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDepthBiasControlFeaturesEXT"
  },
  {
    "label": "VkDepthBiasInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDepthBiasInfoEXT"
  },
  {
    "label": "VkDepthBiasRepresentationInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDepthBiasRepresentationInfoEXT"
  },
  {
    "label": "VkDeviceMemoryReportEventTypeEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDeviceMemoryReportEventTypeEXT"
  },
  {
    "label": "VkPhysicalDeviceDeviceMemoryReportFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDeviceMemoryReportFeaturesEXT"
  },
  {
    "label": "VkDeviceMemoryReportCallbackDataEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceMemoryReportCallbackDataEXT"
  },
  {
    "label": "VkDeviceDeviceMemoryReportCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceDeviceMemoryReportCreateInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceRobustness2FeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRobustness2FeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceRobustness2PropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRobustness2PropertiesEXT"
  },
  {
    "label": "VkSamplerCustomBorderColorCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSamplerCustomBorderColorCreateInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceCustomBorderColorPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceCustomBorderColorPropertiesEXT"
  },
  {
    "label": "VkPhysicalDeviceCustomBorderColorFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceCustomBorderColorFeaturesEXT"
  },
  {
    "label": "VkPhysicalDevicePresentBarrierFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePresentBarrierFeaturesNV"
  },
  {
    "label": "VkSurfaceCapabilitiesPresentBarrierNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSurfaceCapabilitiesPresentBarrierNV"
  },
  {
    "label": "VkSwapchainPresentBarrierCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSwapchainPresentBarrierCreateInfoNV"
  },
  {
    "label": "VkDeviceDiagnosticsConfigFlagBitsNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDeviceDiagnosticsConfigFlagBitsNV"
  },
  {
    "label": "VkPhysicalDeviceDiagnosticsConfigFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDiagnosticsConfigFeaturesNV"
  },
  {
    "label": "VkDeviceDiagnosticsConfigCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceDiagnosticsConfigCreateInfoNV"
  },
  {
    "label": "VkCudaModuleCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCudaModuleCreateInfoNV"
  },
  {
    "label": "VkCudaFunctionCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCudaFunctionCreateInfoNV"
  },
  {
    "label": "VkCudaLaunchInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCudaLaunchInfoNV"
  },
  {
    "label": "VkPhysicalDeviceCudaKernelLaunchFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceCudaKernelLaunchFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceCudaKernelLaunchPropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceCudaKernelLaunchPropertiesNV"
  },
  {
    "label": "VkQueryLowLatencySupportNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkQueryLowLatencySupportNV"
  },
  {
    "label": "VkPhysicalDeviceDescriptorBufferPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDescriptorBufferPropertiesEXT"
  },
  {
    "label": "VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT"
  },
  {
    "label": "VkPhysicalDeviceDescriptorBufferFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDescriptorBufferFeaturesEXT"
  },
  {
    "label": "VkDescriptorAddressInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorAddressInfoEXT"
  },
  {
    "label": "VkDescriptorBufferBindingInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorBufferBindingInfoEXT"
  },
  {
    "label": "VkDescriptorBufferBindingPushDescriptorBufferHandleEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorBufferBindingPushDescriptorBufferHandleEXT"
  },
  {
    "label": "VkDescriptorGetInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorGetInfoEXT"
  },
  {
    "label": "VkBufferCaptureDescriptorDataInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferCaptureDescriptorDataInfoEXT"
  },
  {
    "label": "VkImageCaptureDescriptorDataInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageCaptureDescriptorDataInfoEXT"
  },
  {
    "label": "VkImageViewCaptureDescriptorDataInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageViewCaptureDescriptorDataInfoEXT"
  },
  {
    "label": "VkSamplerCaptureDescriptorDataInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSamplerCaptureDescriptorDataInfoEXT"
  },
  {
    "label": "VkOpaqueCaptureDescriptorDataCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkOpaqueCaptureDescriptorDataCreateInfoEXT"
  },
  {
    "label": "VkAccelerationStructureCaptureDescriptorDataInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureCaptureDescriptorDataInfoEXT"
  },
  {
    "label": "VkGraphicsPipelineLibraryFlagBitsEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkGraphicsPipelineLibraryFlagBitsEXT"
  },
  {
    "label": "VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT"
  },
  {
    "label": "VkGraphicsPipelineLibraryCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkGraphicsPipelineLibraryCreateInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD"
  },
  {
    "label": "VkFragmentShadingRateTypeNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkFragmentShadingRateTypeNV"
  },
  {
    "label": "VkFragmentShadingRateNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkFragmentShadingRateNV"
  },
  {
    "label": "VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV"
  },
  {
    "label": "VkPipelineFragmentShadingRateEnumStateCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineFragmentShadingRateEnumStateCreateInfoNV"
  },
  {
    "label": "VkAccelerationStructureMotionInstanceTypeNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkAccelerationStructureMotionInstanceTypeNV"
  },
  {
    "label": "VkAccelerationStructureGeometryMotionTrianglesDataNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureGeometryMotionTrianglesDataNV"
  },
  {
    "label": "VkAccelerationStructureMotionInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureMotionInfoNV"
  },
  {
    "label": "VkAccelerationStructureMatrixMotionInstanceNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureMatrixMotionInstanceNV"
  },
  {
    "label": "VkSRTDataNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSRTDataNV"
  },
  {
    "label": "VkAccelerationStructureSRTMotionInstanceNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureSRTMotionInstanceNV"
  },
  {
    "label": "VkAccelerationStructureMotionInstanceNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureMotionInstanceNV"
  },
  {
    "label": "VkPhysicalDeviceRayTracingMotionBlurFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRayTracingMotionBlurFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceFragmentDensityMap2FeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFragmentDensityMap2FeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceFragmentDensityMap2PropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFragmentDensityMap2PropertiesEXT"
  },
  {
    "label": "VkCopyCommandTransformInfoQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyCommandTransformInfoQCOM"
  },
  {
    "label": "VkImageCompressionFlagBitsEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkImageCompressionFlagBitsEXT"
  },
  {
    "label": "VkImageCompressionFixedRateFlagBitsEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkImageCompressionFixedRateFlagBitsEXT"
  },
  {
    "label": "VkPhysicalDeviceImageCompressionControlFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceImageCompressionControlFeaturesEXT"
  },
  {
    "label": "VkImageCompressionControlEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageCompressionControlEXT"
  },
  {
    "label": "VkImageCompressionPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageCompressionPropertiesEXT"
  },
  {
    "label": "VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT"
  },
  {
    "label": "VkPhysicalDevice4444FormatsFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevice4444FormatsFeaturesEXT"
  },
  {
    "label": "VkDeviceFaultAddressTypeEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDeviceFaultAddressTypeEXT"
  },
  {
    "label": "VkDeviceFaultVendorBinaryHeaderVersionEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDeviceFaultVendorBinaryHeaderVersionEXT"
  },
  {
    "label": "VkPhysicalDeviceFaultFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFaultFeaturesEXT"
  },
  {
    "label": "VkDeviceFaultCountsEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceFaultCountsEXT"
  },
  {
    "label": "VkDeviceFaultAddressInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceFaultAddressInfoEXT"
  },
  {
    "label": "VkDeviceFaultVendorInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceFaultVendorInfoEXT"
  },
  {
    "label": "VkDeviceFaultInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceFaultInfoEXT"
  },
  {
    "label": "VkDeviceFaultVendorBinaryHeaderVersionOneEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceFaultVendorBinaryHeaderVersionOneEXT"
  },
  {
    "label": "VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT"
  },
  {
    "label": "VkMutableDescriptorTypeListEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMutableDescriptorTypeListEXT"
  },
  {
    "label": "VkMutableDescriptorTypeCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMutableDescriptorTypeCreateInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT"
  },
  {
    "label": "VkVertexInputBindingDescription2EXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVertexInputBindingDescription2EXT"
  },
  {
    "label": "VkVertexInputAttributeDescription2EXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkVertexInputAttributeDescription2EXT"
  },
  {
    "label": "VkPhysicalDeviceDrmPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDrmPropertiesEXT"
  },
  {
    "label": "VkDeviceAddressBindingTypeEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDeviceAddressBindingTypeEXT"
  },
  {
    "label": "VkDeviceAddressBindingFlagBitsEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDeviceAddressBindingFlagBitsEXT"
  },
  {
    "label": "VkPhysicalDeviceAddressBindingReportFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceAddressBindingReportFeaturesEXT"
  },
  {
    "label": "VkDeviceAddressBindingCallbackDataEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceAddressBindingCallbackDataEXT"
  },
  {
    "label": "VkPhysicalDeviceDepthClipControlFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDepthClipControlFeaturesEXT"
  },
  {
    "label": "VkPipelineViewportDepthClipControlCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineViewportDepthClipControlCreateInfoEXT"
  },
  {
    "label": "VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT"
  },
  {
    "label": "VkSubpassShadingPipelineCreateInfoHUAWEI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSubpassShadingPipelineCreateInfoHUAWEI"
  },
  {
    "label": "VkPhysicalDeviceSubpassShadingFeaturesHUAWEI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSubpassShadingFeaturesHUAWEI"
  },
  {
    "label": "VkPhysicalDeviceSubpassShadingPropertiesHUAWEI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSubpassShadingPropertiesHUAWEI"
  },
  {
    "label": "VkPhysicalDeviceInvocationMaskFeaturesHUAWEI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceInvocationMaskFeaturesHUAWEI"
  },
  {
    "label": "VkMemoryGetRemoteAddressInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryGetRemoteAddressInfoNV"
  },
  {
    "label": "VkPhysicalDeviceExternalMemoryRDMAFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceExternalMemoryRDMAFeaturesNV"
  },
  {
    "label": "VkPipelinePropertiesIdentifierEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelinePropertiesIdentifierEXT"
  },
  {
    "label": "VkPhysicalDevicePipelinePropertiesFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePipelinePropertiesFeaturesEXT"
  },
  {
    "label": "VkFrameBoundaryFlagBitsEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkFrameBoundaryFlagBitsEXT"
  },
  {
    "label": "VkPhysicalDeviceFrameBoundaryFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFrameBoundaryFeaturesEXT"
  },
  {
    "label": "VkFrameBoundaryEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkFrameBoundaryEXT"
  },
  {
    "label": "VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT"
  },
  {
    "label": "VkSubpassResolvePerformanceQueryEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSubpassResolvePerformanceQueryEXT"
  },
  {
    "label": "VkMultisampledRenderToSingleSampledInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMultisampledRenderToSingleSampledInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceExtendedDynamicState2FeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceExtendedDynamicState2FeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceColorWriteEnableFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceColorWriteEnableFeaturesEXT"
  },
  {
    "label": "VkPipelineColorWriteCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineColorWriteCreateInfoEXT"
  },
  {
    "label": "VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceImageViewMinLodFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceImageViewMinLodFeaturesEXT"
  },
  {
    "label": "VkImageViewMinLodCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageViewMinLodCreateInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceMultiDrawFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMultiDrawFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceMultiDrawPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMultiDrawPropertiesEXT"
  },
  {
    "label": "VkMultiDrawInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMultiDrawInfoEXT"
  },
  {
    "label": "VkMultiDrawIndexedInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMultiDrawIndexedInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceImage2DViewOf3DFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceImage2DViewOf3DFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceShaderTileImageFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderTileImageFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceShaderTileImagePropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderTileImagePropertiesEXT"
  },
  {
    "label": "VkMicromapTypeEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkMicromapTypeEXT"
  },
  {
    "label": "VkBuildMicromapModeEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkBuildMicromapModeEXT"
  },
  {
    "label": "VkCopyMicromapModeEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkCopyMicromapModeEXT"
  },
  {
    "label": "VkOpacityMicromapFormatEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkOpacityMicromapFormatEXT"
  },
  {
    "label": "VkOpacityMicromapSpecialIndexEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkOpacityMicromapSpecialIndexEXT"
  },
  {
    "label": "VkAccelerationStructureCompatibilityKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkAccelerationStructureCompatibilityKHR"
  },
  {
    "label": "VkAccelerationStructureBuildTypeKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkAccelerationStructureBuildTypeKHR"
  },
  {
    "label": "VkBuildMicromapFlagBitsEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkBuildMicromapFlagBitsEXT"
  },
  {
    "label": "VkMicromapCreateFlagBitsEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkMicromapCreateFlagBitsEXT"
  },
  {
    "label": "VkMicromapUsageEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMicromapUsageEXT"
  },
  {
    "label": "VkMicromapBuildInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMicromapBuildInfoEXT"
  },
  {
    "label": "VkMicromapCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMicromapCreateInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceOpacityMicromapFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceOpacityMicromapFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceOpacityMicromapPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceOpacityMicromapPropertiesEXT"
  },
  {
    "label": "VkMicromapVersionInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMicromapVersionInfoEXT"
  },
  {
    "label": "VkCopyMicromapToMemoryInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyMicromapToMemoryInfoEXT"
  },
  {
    "label": "VkCopyMemoryToMicromapInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyMemoryToMicromapInfoEXT"
  },
  {
    "label": "VkCopyMicromapInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyMicromapInfoEXT"
  },
  {
    "label": "VkMicromapBuildSizesInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMicromapBuildSizesInfoEXT"
  },
  {
    "label": "VkAccelerationStructureTrianglesOpacityMicromapEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureTrianglesOpacityMicromapEXT"
  },
  {
    "label": "VkMicromapTriangleEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMicromapTriangleEXT"
  },
  {
    "label": "VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI"
  },
  {
    "label": "VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI"
  },
  {
    "label": "VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI"
  },
  {
    "label": "VkPhysicalDeviceBorderColorSwizzleFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceBorderColorSwizzleFeaturesEXT"
  },
  {
    "label": "VkSamplerBorderColorComponentMappingCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSamplerBorderColorComponentMappingCreateInfoEXT"
  },
  {
    "label": "VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceShaderCorePropertiesARM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderCorePropertiesARM"
  },
  {
    "label": "VkDeviceQueueShaderCoreControlCreateInfoARM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDeviceQueueShaderCoreControlCreateInfoARM"
  },
  {
    "label": "VkPhysicalDeviceSchedulingControlsFeaturesARM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSchedulingControlsFeaturesARM"
  },
  {
    "label": "VkPhysicalDeviceSchedulingControlsPropertiesARM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSchedulingControlsPropertiesARM"
  },
  {
    "label": "VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT"
  },
  {
    "label": "VkImageViewSlicedCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageViewSlicedCreateInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE"
  },
  {
    "label": "VkDescriptorSetBindingReferenceVALVE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorSetBindingReferenceVALVE"
  },
  {
    "label": "VkDescriptorSetLayoutHostMappingInfoVALVE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDescriptorSetLayoutHostMappingInfoVALVE"
  },
  {
    "label": "VkPhysicalDeviceDepthClampZeroOneFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDepthClampZeroOneFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceRenderPassStripedFeaturesARM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRenderPassStripedFeaturesARM"
  },
  {
    "label": "VkPhysicalDeviceRenderPassStripedPropertiesARM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRenderPassStripedPropertiesARM"
  },
  {
    "label": "VkRenderPassStripeInfoARM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassStripeInfoARM"
  },
  {
    "label": "VkRenderPassStripeBeginInfoARM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassStripeBeginInfoARM"
  },
  {
    "label": "VkRenderPassStripeSubmitInfoARM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassStripeSubmitInfoARM"
  },
  {
    "label": "VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM"
  },
  {
    "label": "VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM"
  },
  {
    "label": "VkSubpassFragmentDensityMapOffsetEndInfoQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSubpassFragmentDensityMapOffsetEndInfoQCOM"
  },
  {
    "label": "VkCopyMemoryIndirectCommandNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyMemoryIndirectCommandNV"
  },
  {
    "label": "VkCopyMemoryToImageIndirectCommandNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyMemoryToImageIndirectCommandNV"
  },
  {
    "label": "VkPhysicalDeviceCopyMemoryIndirectFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceCopyMemoryIndirectFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceCopyMemoryIndirectPropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceCopyMemoryIndirectPropertiesNV"
  },
  {
    "label": "VkDecompressMemoryRegionNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDecompressMemoryRegionNV"
  },
  {
    "label": "VkPhysicalDeviceMemoryDecompressionFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMemoryDecompressionFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceMemoryDecompressionPropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMemoryDecompressionPropertiesNV"
  },
  {
    "label": "VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV"
  },
  {
    "label": "VkComputePipelineIndirectBufferInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkComputePipelineIndirectBufferInfoNV"
  },
  {
    "label": "VkPipelineIndirectDeviceAddressInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineIndirectDeviceAddressInfoNV"
  },
  {
    "label": "VkBindPipelineIndirectCommandNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBindPipelineIndirectCommandNV"
  },
  {
    "label": "VkPhysicalDeviceLinearColorAttachmentFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceLinearColorAttachmentFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT"
  },
  {
    "label": "VkImageViewSampleWeightCreateInfoQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageViewSampleWeightCreateInfoQCOM"
  },
  {
    "label": "VkPhysicalDeviceImageProcessingFeaturesQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceImageProcessingFeaturesQCOM"
  },
  {
    "label": "VkPhysicalDeviceImageProcessingPropertiesQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceImageProcessingPropertiesQCOM"
  },
  {
    "label": "VkPhysicalDeviceNestedCommandBufferFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceNestedCommandBufferFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceNestedCommandBufferPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceNestedCommandBufferPropertiesEXT"
  },
  {
    "label": "VkExternalMemoryAcquireUnmodifiedEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkExternalMemoryAcquireUnmodifiedEXT"
  },
  {
    "label": "VkPhysicalDeviceExtendedDynamicState3FeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceExtendedDynamicState3FeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceExtendedDynamicState3PropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceExtendedDynamicState3PropertiesEXT"
  },
  {
    "label": "VkColorBlendEquationEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkColorBlendEquationEXT"
  },
  {
    "label": "VkColorBlendAdvancedEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkColorBlendAdvancedEXT"
  },
  {
    "label": "VkSubpassMergeStatusEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkSubpassMergeStatusEXT"
  },
  {
    "label": "VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT"
  },
  {
    "label": "VkRenderPassCreationControlEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassCreationControlEXT"
  },
  {
    "label": "VkRenderPassCreationFeedbackInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassCreationFeedbackInfoEXT"
  },
  {
    "label": "VkRenderPassCreationFeedbackCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassCreationFeedbackCreateInfoEXT"
  },
  {
    "label": "VkRenderPassSubpassFeedbackInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassSubpassFeedbackInfoEXT"
  },
  {
    "label": "VkRenderPassSubpassFeedbackCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRenderPassSubpassFeedbackCreateInfoEXT"
  },
  {
    "label": "VkDirectDriverLoadingModeLUNARG",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkDirectDriverLoadingModeLUNARG"
  },
  {
    "label": "VkDirectDriverLoadingInfoLUNARG",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDirectDriverLoadingInfoLUNARG"
  },
  {
    "label": "VkDirectDriverLoadingListLUNARG",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDirectDriverLoadingListLUNARG"
  },
  {
    "label": "VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT"
  },
  {
    "label": "VkPipelineShaderStageModuleIdentifierCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPipelineShaderStageModuleIdentifierCreateInfoEXT"
  },
  {
    "label": "VkShaderModuleIdentifierEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkShaderModuleIdentifierEXT"
  },
  {
    "label": "VkOpticalFlowPerformanceLevelNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkOpticalFlowPerformanceLevelNV"
  },
  {
    "label": "VkOpticalFlowSessionBindingPointNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkOpticalFlowSessionBindingPointNV"
  },
  {
    "label": "VkOpticalFlowGridSizeFlagBitsNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkOpticalFlowGridSizeFlagBitsNV"
  },
  {
    "label": "VkOpticalFlowUsageFlagBitsNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkOpticalFlowUsageFlagBitsNV"
  },
  {
    "label": "VkOpticalFlowSessionCreateFlagBitsNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkOpticalFlowSessionCreateFlagBitsNV"
  },
  {
    "label": "VkOpticalFlowExecuteFlagBitsNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkOpticalFlowExecuteFlagBitsNV"
  },
  {
    "label": "VkPhysicalDeviceOpticalFlowFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceOpticalFlowFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceOpticalFlowPropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceOpticalFlowPropertiesNV"
  },
  {
    "label": "VkOpticalFlowImageFormatInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkOpticalFlowImageFormatInfoNV"
  },
  {
    "label": "VkOpticalFlowImageFormatPropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkOpticalFlowImageFormatPropertiesNV"
  },
  {
    "label": "VkOpticalFlowSessionCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkOpticalFlowSessionCreateInfoNV"
  },
  {
    "label": "VkOpticalFlowSessionCreatePrivateDataInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkOpticalFlowSessionCreatePrivateDataInfoNV"
  },
  {
    "label": "VkOpticalFlowExecuteInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkOpticalFlowExecuteInfoNV"
  },
  {
    "label": "VkPhysicalDeviceLegacyDitheringFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceLegacyDitheringFeaturesEXT"
  },
  {
    "label": "VkPhysicalDevicePipelineProtectedAccessFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePipelineProtectedAccessFeaturesEXT"
  },
  {
    "label": "VkShaderCodeTypeEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkShaderCodeTypeEXT"
  },
  {
    "label": "VkShaderCreateFlagBitsEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkShaderCreateFlagBitsEXT"
  },
  {
    "label": "VkPhysicalDeviceShaderObjectFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderObjectFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceShaderObjectPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderObjectPropertiesEXT"
  },
  {
    "label": "VkShaderCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkShaderCreateInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceTilePropertiesFeaturesQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceTilePropertiesFeaturesQCOM"
  },
  {
    "label": "VkTilePropertiesQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkTilePropertiesQCOM"
  },
  {
    "label": "VkPhysicalDeviceAmigoProfilingFeaturesSEC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceAmigoProfilingFeaturesSEC"
  },
  {
    "label": "VkAmigoProfilingSubmitInfoSEC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAmigoProfilingSubmitInfoSEC"
  },
  {
    "label": "VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM"
  },
  {
    "label": "VkRayTracingInvocationReorderModeNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkRayTracingInvocationReorderModeNV"
  },
  {
    "label": "VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV"
  },
  {
    "label": "VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV"
  },
  {
    "label": "VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT"
  },
  {
    "label": "VkLayerSettingTypeEXT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkLayerSettingTypeEXT"
  },
  {
    "label": "VkLayerSettingEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkLayerSettingEXT"
  },
  {
    "label": "VkLayerSettingsCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkLayerSettingsCreateInfoEXT"
  },
  {
    "label": "VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM"
  },
  {
    "label": "VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM"
  },
  {
    "label": "VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT"
  },
  {
    "label": "VkLatencyMarkerNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkLatencyMarkerNV"
  },
  {
    "label": "VkOutOfBandQueueTypeNV",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkOutOfBandQueueTypeNV"
  },
  {
    "label": "VkLatencySleepModeInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkLatencySleepModeInfoNV"
  },
  {
    "label": "VkLatencySleepInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkLatencySleepInfoNV"
  },
  {
    "label": "VkSetLatencyMarkerInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSetLatencyMarkerInfoNV"
  },
  {
    "label": "VkLatencyTimingsFrameReportNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkLatencyTimingsFrameReportNV"
  },
  {
    "label": "VkGetLatencyMarkerInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkGetLatencyMarkerInfoNV"
  },
  {
    "label": "VkLatencySubmissionPresentIdNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkLatencySubmissionPresentIdNV"
  },
  {
    "label": "VkSwapchainLatencyCreateInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSwapchainLatencyCreateInfoNV"
  },
  {
    "label": "VkOutOfBandQueueTypeInfoNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkOutOfBandQueueTypeInfoNV"
  },
  {
    "label": "VkLatencySurfaceCapabilitiesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkLatencySurfaceCapabilitiesNV"
  },
  {
    "label": "VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM"
  },
  {
    "label": "VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM"
  },
  {
    "label": "VkPhysicalDevicePerStageDescriptorSetFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDevicePerStageDescriptorSetFeaturesNV"
  },
  {
    "label": "VkBlockMatchWindowCompareModeQCOM",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkBlockMatchWindowCompareModeQCOM"
  },
  {
    "label": "VkPhysicalDeviceImageProcessing2FeaturesQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceImageProcessing2FeaturesQCOM"
  },
  {
    "label": "VkPhysicalDeviceImageProcessing2PropertiesQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceImageProcessing2PropertiesQCOM"
  },
  {
    "label": "VkSamplerBlockMatchWindowCreateInfoQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSamplerBlockMatchWindowCreateInfoQCOM"
  },
  {
    "label": "VkCubicFilterWeightsQCOM",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkCubicFilterWeightsQCOM"
  },
  {
    "label": "VkPhysicalDeviceCubicWeightsFeaturesQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceCubicWeightsFeaturesQCOM"
  },
  {
    "label": "VkSamplerCubicWeightsCreateInfoQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSamplerCubicWeightsCreateInfoQCOM"
  },
  {
    "label": "VkBlitImageCubicWeightsInfoQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBlitImageCubicWeightsInfoQCOM"
  },
  {
    "label": "VkPhysicalDeviceYcbcrDegammaFeaturesQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceYcbcrDegammaFeaturesQCOM"
  },
  {
    "label": "VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM"
  },
  {
    "label": "VkPhysicalDeviceCubicClampFeaturesQCOM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceCubicClampFeaturesQCOM"
  },
  {
    "label": "VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT"
  },
  {
    "label": "VkLayeredDriverUnderlyingApiMSFT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkLayeredDriverUnderlyingApiMSFT"
  },
  {
    "label": "VkPhysicalDeviceLayeredDriverPropertiesMSFT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceLayeredDriverPropertiesMSFT"
  },
  {
    "label": "VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceRawAccessChainsFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRawAccessChainsFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceRayTracingValidationFeaturesNV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRayTracingValidationFeaturesNV"
  },
  {
    "label": "VkPhysicalDeviceImageAlignmentControlFeaturesMESA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceImageAlignmentControlFeaturesMESA"
  },
  {
    "label": "VkPhysicalDeviceImageAlignmentControlPropertiesMESA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceImageAlignmentControlPropertiesMESA"
  },
  {
    "label": "VkImageAlignmentControlCreateInfoMESA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageAlignmentControlCreateInfoMESA"
  },
  {
    "label": "VkBuildAccelerationStructureModeKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkBuildAccelerationStructureModeKHR"
  },
  {
    "label": "VkAccelerationStructureCreateFlagBitsKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkAccelerationStructureCreateFlagBitsKHR"
  },
  {
    "label": "VkAccelerationStructureBuildRangeInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureBuildRangeInfoKHR"
  },
  {
    "label": "VkAccelerationStructureGeometryTrianglesDataKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureGeometryTrianglesDataKHR"
  },
  {
    "label": "VkAccelerationStructureGeometryAabbsDataKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureGeometryAabbsDataKHR"
  },
  {
    "label": "VkAccelerationStructureGeometryInstancesDataKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureGeometryInstancesDataKHR"
  },
  {
    "label": "VkAccelerationStructureGeometryKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureGeometryKHR"
  },
  {
    "label": "VkAccelerationStructureBuildGeometryInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureBuildGeometryInfoKHR"
  },
  {
    "label": "VkAccelerationStructureCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureCreateInfoKHR"
  },
  {
    "label": "VkWriteDescriptorSetAccelerationStructureKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkWriteDescriptorSetAccelerationStructureKHR"
  },
  {
    "label": "VkPhysicalDeviceAccelerationStructureFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceAccelerationStructureFeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceAccelerationStructurePropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceAccelerationStructurePropertiesKHR"
  },
  {
    "label": "VkAccelerationStructureDeviceAddressInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureDeviceAddressInfoKHR"
  },
  {
    "label": "VkAccelerationStructureVersionInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureVersionInfoKHR"
  },
  {
    "label": "VkCopyAccelerationStructureToMemoryInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyAccelerationStructureToMemoryInfoKHR"
  },
  {
    "label": "VkCopyMemoryToAccelerationStructureInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyMemoryToAccelerationStructureInfoKHR"
  },
  {
    "label": "VkCopyAccelerationStructureInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkCopyAccelerationStructureInfoKHR"
  },
  {
    "label": "VkAccelerationStructureBuildSizesInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkAccelerationStructureBuildSizesInfoKHR"
  },
  {
    "label": "VkShaderGroupShaderKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkShaderGroupShaderKHR"
  },
  {
    "label": "VkRayTracingShaderGroupCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRayTracingShaderGroupCreateInfoKHR"
  },
  {
    "label": "VkRayTracingPipelineInterfaceCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRayTracingPipelineInterfaceCreateInfoKHR"
  },
  {
    "label": "VkRayTracingPipelineCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkRayTracingPipelineCreateInfoKHR"
  },
  {
    "label": "VkPhysicalDeviceRayTracingPipelineFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRayTracingPipelineFeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceRayTracingPipelinePropertiesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRayTracingPipelinePropertiesKHR"
  },
  {
    "label": "VkStridedDeviceAddressRegionKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkStridedDeviceAddressRegionKHR"
  },
  {
    "label": "VkTraceRaysIndirectCommandKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkTraceRaysIndirectCommandKHR"
  },
  {
    "label": "VkPhysicalDeviceRayQueryFeaturesKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceRayQueryFeaturesKHR"
  },
  {
    "label": "VkPhysicalDeviceMeshShaderFeaturesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMeshShaderFeaturesEXT"
  },
  {
    "label": "VkPhysicalDeviceMeshShaderPropertiesEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkPhysicalDeviceMeshShaderPropertiesEXT"
  },
  {
    "label": "VkDrawMeshTasksIndirectCommandEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkDrawMeshTasksIndirectCommandEXT"
  },
  {
    "label": "VK_DEFINE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# ifndef VULKAN_CORE_H_ # define VULKAN_CORE_H_ 1 # ifdef __cplusplus \" C \" { # endif # define VK_VERSION_1_0 1 # include \" vk_platform . h \" # define)",
    "insertText": "VK_DEFINE_HANDLE(object)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_USE_64_BIT_PTR_DEFINES # if)",
    "insertText": "defined(__LP64__) || defined(_WIN64) || (defined(__x86_64__) && !defined(__ILP32__) ) || defined(_M_X64) || defined(__ia64) || defined (_M_IA64) || defined(__aarch64__) || defined(__powerpc64__) || (defined(__riscv) && __riscv_xlen == 64) #define VK_USE_64_BIT_PTR_DEFINES 1 #else #define VK_USE_64_BIT_PTR_DEFINES 0 #endif #endif #ifndef VK_DEFINE_NON_DISPATCHABLE_HANDLE #if (VK_USE_64_BIT_PTR_DEFINES==1) #if (defined(__cplusplus) && (__cplusplus >= 201103L)) || (defined(_MSVC_LANG) && (_MSVC_LANG >= 201103L)) #define VK_NULL_HANDLE nullptr #else #define VK_NULL_HANDLE ((void*)0) #endif #else #define VK_NULL_HANDLE 0ULL #endif #endif #ifndef VK_NULL_HANDLE #define VK_NULL_HANDLE 0 #endif #ifndef VK_DEFINE_NON_DISPATCHABLE_HANDLE #if (VK_USE_64_BIT_PTR_DEFINES==1) #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(object)"
  },
  {
    "label": "VK_MAKE_API_VERSION()",
    "kind": "Method",
    "detail": "Function (# endif # endif # define)",
    "insertText": "VK_MAKE_API_VERSION(variant, major, minor, patch) \\ ((((uint32_t)(variant)) << 29U) | (((uint32_t)(major)) << 22U) | (((uint32_t)(minor)) << 12U) | ((uint32_t)(patch))) #define VK_API_VERSION_1_0 VK_MAKE_API_VERSION(0, 1, 0, 0) #define VK_HEADER_VERSION 290 #define VK_HEADER_VERSION_COMPLETE VK_MAKE_API_VERSION(0, 1, 3, VK_HEADER_VERSION) #define VK_MAKE_VERSION(major, minor, patch) \\ ((((uint32_t)(major)) << 22U) | (((uint32_t)(minor)) << 12U) | ((uint32_t)(patch))) #define VK_VERSION_MAJOR(version) ((uint32_t)(version) >> 22U) #define VK_VERSION_MINOR(version) (((uint32_t)(version) >> 12U) & 0x3FFU) #define VK_VERSION_PATCH(version) ((uint32_t)(version) & 0xFFFU) #define VK_API_VERSION_VARIANT(version) ((uint32_t)(version) >> 29U) #define VK_API_VERSION_MAJOR(version) (((uint32_t)(version) >> 22U) & 0x7FU) #define VK_API_VERSION_MINOR(version) (((uint32_t)(version) >> 12U) & 0x3FFU) #define VK_API_VERSION_PATCH(version) ((uint32_t)(version) & 0xFFFU)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (typedef uint64_t VkDeviceAddress ; typedef uint64_t VkDeviceSize ; typedef uint32_t VkFlags ; typedef uint32_t VkSampleMask ;)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBuffer) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkImage) VK_DEFINE_HANDLE(VkInstance) VK_DEFINE_HANDLE(VkPhysicalDevice) VK_DEFINE_HANDLE(VkDevice) VK_DEFINE_HANDLE(VkQueue) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSemaphore) VK_DEFINE_HANDLE(VkCommandBuffer) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkFence) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDeviceMemory) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkEvent) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkQueryPool) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBufferView) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkImageView) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkShaderModule) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineCache) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineLayout) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipeline) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkRenderPass) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorSetLayout) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSampler) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorSet) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorPool) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkFramebuffer) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCommandPool) #define VK_ATTACHMENT_UNUSED (~0U) #define VK_FALSE 0U #define VK_LOD_CLAMP_NONE 1000.0F #define VK_QUEUE_FAMILY_IGNORED (~0U) #define VK_REMAINING_ARRAY_LAYERS (~0U) #define VK_REMAINING_MIP_LEVELS (~0U) #define VK_SUBPASS_EXTERNAL (~0U) #define VK_TRUE 1U #define VK_WHOLE_SIZE (~0ULL)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (VK_SUCCESS = 0,VK_NOT_READY = 1,VK_TIMEOUT = 2,VK_EVENT_SET = 3,VK_EVENT_RESET = 4,VK_INCOMPLETE = 5,VK_ERROR_OUT_OF_HOST_MEMORY = - 1,VK_ERROR_OUT_OF_DEVICE_MEMORY = - 2,VK_ERROR_INITIALIZATION_FAILED = - 3,VK_ERROR_DEVICE_LOST = - 4,VK_ERROR_MEMORY_MAP_FAILED = - 5,VK_ERROR_LAYER_NOT_PRESENT = - 6,VK_ERROR_EXTENSION_NOT_PRESENT = - 7,VK_ERROR_FEATURE_NOT_PRESENT = - 8,VK_ERROR_INCOMPATIBLE_DRIVER = - 9,VK_ERROR_TOO_MANY_OBJECTS = - 1 0,VK_ERROR_FORMAT_NOT_SUPPORTED = - 1 1,VK_ERROR_FRAGMENTED_POOL = - 1 2,VK_ERROR_UNKNOWN = - 1 3,VK_ERROR_OUT_OF_POOL_MEMORY = - 1 0 0 0 0 6 9 0 0 0,VK_ERROR_INVALID_EXTERNAL_HANDLE = - 1 0 0 0 0 7 2 0 0 3,VK_ERROR_FRAGMENTATION = - 1 0 0 0 1 6 1 0 0 0,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = - 1 0 0 0 2 5 7 0 0 0,VK_PIPELINE_COMPILE_REQUIRED = 1 0 0 0 2 9 7 0 0 0,VK_ERROR_SURFACE_LOST_KHR = - 1 0 0 0 0 0 0 0 0 0,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = - 1 0 0 0 0 0 0 0 0 1,VK_SUBOPTIMAL_KHR = 1 0 0 0 0 0 1 0 0 3,VK_ERROR_OUT_OF_DATE_KHR = - 1 0 0 0 0 0 1 0 0 4,VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = - 1 0 0 0 0 0 3 0 0 1,VK_ERROR_VALIDATION_FAILED_EXT = - 1 0 0 0 0 1 1 0 0 1,VK_ERROR_INVALID_SHADER_NV = - 1 0 0 0 0 1 2 0 0 0,VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR = - 1 0 0 0 0 2 3 0 0 0,VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR = - 1 0 0 0 0 2 3 0 0 1,VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR = - 1 0 0 0 0 2 3 0 0 2,VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR = - 1 0 0 0 0 2 3 0 0 3,VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR = - 1 0 0 0 0 2 3 0 0 4,VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR = - 1 0 0 0 0 2 3 0 0 5,VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = - 1 0 0 0 1 5 8 0 0 0,VK_ERROR_NOT_PERMITTED_KHR = - 1 0 0 0 1 7 4 0 0 1,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = - 1 0 0 0 2 5 5 0 0 0,VK_THREAD_IDLE_KHR = 1 0 0 0 2 6 8 0 0 0,VK_THREAD_DONE_KHR = 1 0 0 0 2 6 8 0 0 1,VK_OPERATION_DEFERRED_KHR = 1 0 0 0 2 6 8 0 0 2,VK_OPERATION_NOT_DEFERRED_KHR = 1 0 0 0 2 6 8 0 0 3,VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR = - 1 0 0 0 2 9 9 0 0 0,VK_ERROR_COMPRESSION_EXHAUSTED_EXT = - 1 0 0 0 3 3 8 0 0 0,VK_INCOMPATIBLE_SHADER_BINARY_EXT = 1 0 0 0 4 8 2 0 0 0,VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VK_ERROR_OUT_OF_POOL_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_FRAGMENTATION_EXT = VK_ERROR_FRAGMENTATION,VK_ERROR_NOT_PERMITTED_EXT = VK_ERROR_NOT_PERMITTED_KHR,VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,VK_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED,VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED,VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT = VK_INCOMPATIBLE_SHADER_BINARY_EXT,VK_RESULT_MAX_ENUM = 0 x7FFFFFFF } VkResult ; typedef enum VkStructureType { VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 1 0,VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 1 1,VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 1 2,VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 1 3,VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 1 4,VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 1 5,VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 1 6,VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 1 7,VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 1 8,VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 1 9,VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 2 0,VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 2 1,VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 2 2,VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 2 3,VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 2 4,VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 2 5,VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 2 6,VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 2 7,VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 2 8,VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 2 9,VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 3 0,VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 3 1,VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 3 2,VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 3 3,VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 3 4,VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 3 5,VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 3 6,VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 3 7,VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 3 8,VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 3 9,VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 4 0,VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 4 1,VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 4 2,VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 4 3,VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 4 4,VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 4 5,VK_STRUCTURE_TYPE_MEMORY_BARRIER = 4 6,VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 4 7,VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 4 8,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1 0 0 0 0 9 4 0 0 0,VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1 0 0 0 1 5 7 0 0 0,VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1 0 0 0 1 5 7 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1 0 0 0 0 8 3 0 0 0,VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1 0 0 0 1 2 7 0 0 0,VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1 0 0 0 1 2 7 0 0 1,VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1 0 0 0 0 6 0 0 0 0,VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1 0 0 0 0 6 0 0 0 3,VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1 0 0 0 0 6 0 0 0 4,VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1 0 0 0 0 6 0 0 0 5,VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1 0 0 0 0 6 0 0 0 6,VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1 0 0 0 0 6 0 0 1 3,VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1 0 0 0 0 6 0 0 1 4,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1 0 0 0 0 7 0 0 0 0,VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1 0 0 0 0 7 0 0 0 1,VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1 0 0 0 1 4 6 0 0 0,VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1 0 0 0 1 4 6 0 0 1,VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1 0 0 0 1 4 6 0 0 2,VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1 0 0 0 1 4 6 0 0 3,VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1 0 0 0 1 4 6 0 0 4,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1 0 0 0 0 5 9 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1 0 0 0 0 5 9 0 0 1,VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1 0 0 0 0 5 9 0 0 2,VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1 0 0 0 0 5 9 0 0 3,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1 0 0 0 0 5 9 0 0 4,VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1 0 0 0 0 5 9 0 0 5,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1 0 0 0 0 5 9 0 0 6,VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1 0 0 0 0 5 9 0 0 7,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1 0 0 0 0 5 9 0 0 8,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1 0 0 0 1 1 7 0 0 0,VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1 0 0 0 1 1 7 0 0 1,VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1 0 0 0 1 1 7 0 0 2,VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1 0 0 0 1 1 7 0 0 3,VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1 0 0 0 0 5 3 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1 0 0 0 0 5 3 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1 0 0 0 0 5 3 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1 0 0 0 1 2 0 0 0 0,VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1 0 0 0 1 4 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1 0 0 0 1 4 5 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1 0 0 0 1 4 5 0 0 2,VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1 0 0 0 1 4 5 0 0 3,VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1 0 0 0 1 5 6 0 0 0,VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1 0 0 0 1 5 6 0 0 1,VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1 0 0 0 1 5 6 0 0 2,VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1 0 0 0 1 5 6 0 0 3,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1 0 0 0 1 5 6 0 0 4,VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1 0 0 0 1 5 6 0 0 5,VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1 0 0 0 0 8 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1 0 0 0 0 7 1 0 0 0,VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1 0 0 0 0 7 1 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1 0 0 0 0 7 1 0 0 2,VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1 0 0 0 0 7 1 0 0 3,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1 0 0 0 0 7 1 0 0 4,VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1 0 0 0 0 7 2 0 0 0,VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1 0 0 0 0 7 2 0 0 1,VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1 0 0 0 0 7 2 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1 0 0 0 1 1 2 0 0 0,VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1 0 0 0 1 1 2 0 0 1,VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1 0 0 0 1 1 3 0 0 0,VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1 0 0 0 0 7 7 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1 0 0 0 0 7 6 0 0 0,VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1 0 0 0 0 7 6 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1 0 0 0 1 6 8 0 0 0,VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1 0 0 0 1 6 8 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1 0 0 0 0 6 3 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 4 9,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 5 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 5 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 5 2,VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1 0 0 0 1 4 7 0 0 0,VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1 0 0 0 1 0 9 0 0 0,VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1 0 0 0 1 0 9 0 0 1,VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1 0 0 0 1 0 9 0 0 2,VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1 0 0 0 1 0 9 0 0 3,VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1 0 0 0 1 0 9 0 0 4,VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1 0 0 0 1 0 9 0 0 5,VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1 0 0 0 1 0 9 0 0 6,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1 0 0 0 1 7 7 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1 0 0 0 1 9 6 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1 0 0 0 1 8 0 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1 0 0 0 0 8 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1 0 0 0 1 9 7 0 0 0,VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1 0 0 0 1 6 1 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1 0 0 0 1 6 1 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1 0 0 0 1 6 1 0 0 2,VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1 0 0 0 1 6 1 0 0 3,VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1 0 0 0 1 6 1 0 0 4,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1 0 0 0 1 9 9 0 0 0,VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1 0 0 0 1 9 9 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1 0 0 0 2 2 1 0 0 0,VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1 0 0 0 2 4 6 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1 0 0 0 1 3 0 0 0 0,VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1 0 0 0 1 3 0 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1 0 0 0 2 1 1 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1 0 0 0 1 0 8 0 0 0,VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1 0 0 0 1 0 8 0 0 1,VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1 0 0 0 1 0 8 0 0 2,VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1 0 0 0 1 0 8 0 0 3,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1 0 0 0 2 5 3 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1 0 0 0 1 7 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1 0 0 0 2 4 1 0 0 0,VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1 0 0 0 2 4 1 0 0 1,VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1 0 0 0 2 4 1 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1 0 0 0 2 6 1 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1 0 0 0 2 0 7 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1 0 0 0 2 0 7 0 0 1,VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1 0 0 0 2 0 7 0 0 2,VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1 0 0 0 2 0 7 0 0 3,VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1 0 0 0 2 0 7 0 0 4,VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1 0 0 0 2 0 7 0 0 5,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1 0 0 0 2 5 7 0 0 0,VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1 0 0 0 2 4 4 0 0 1,VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1 0 0 0 2 5 7 0 0 2,VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1 0 0 0 2 5 7 0 0 3,VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1 0 0 0 2 5 7 0 0 4,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 5 3,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 5 4,VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1 0 0 0 1 9 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 1 0 0 0 2 1 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 1 0 0 0 2 4 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1 0 0 0 2 7 6 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1 0 0 0 2 9 5 0 0 0,VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1 0 0 0 2 9 5 0 0 1,VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 1 0 0 0 2 9 5 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1 0 0 0 2 9 7 0 0 0,VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = 1 0 0 0 3 1 4 0 0 0,VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = 1 0 0 0 3 1 4 0 0 1,VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = 1 0 0 0 3 1 4 0 0 2,VK_STRUCTURE_TYPE_DEPENDENCY_INFO = 1 0 0 0 3 1 4 0 0 3,VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = 1 0 0 0 3 1 4 0 0 4,VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = 1 0 0 0 3 1 4 0 0 5,VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = 1 0 0 0 3 1 4 0 0 6,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 1 0 0 0 3 1 4 0 0 7,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 1 0 0 0 3 2 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1 0 0 0 3 3 5 0 0 0,VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = 1 0 0 0 3 3 7 0 0 0,VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = 1 0 0 0 3 3 7 0 0 1,VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = 1 0 0 0 3 3 7 0 0 2,VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = 1 0 0 0 3 3 7 0 0 3,VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = 1 0 0 0 3 3 7 0 0 4,VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = 1 0 0 0 3 3 7 0 0 5,VK_STRUCTURE_TYPE_BUFFER_COPY_2 = 1 0 0 0 3 3 7 0 0 6,VK_STRUCTURE_TYPE_IMAGE_COPY_2 = 1 0 0 0 3 3 7 0 0 7,VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = 1 0 0 0 3 3 7 0 0 8,VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = 1 0 0 0 3 3 7 0 0 9,VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = 1 0 0 0 3 3 7 0 1 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1 0 0 0 2 2 5 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1 0 0 0 2 2 5 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1 0 0 0 2 2 5 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1 0 0 0 1 3 8 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1 0 0 0 1 3 8 0 0 1,VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1 0 0 0 1 3 8 0 0 2,VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1 0 0 0 1 3 8 0 0 3,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1 0 0 0 0 6 6 0 0 0,VK_STRUCTURE_TYPE_RENDERING_INFO = 1 0 0 0 0 4 4 0 0 0,VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = 1 0 0 0 0 4 4 0 0 1,VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = 1 0 0 0 0 4 4 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 1 0 0 0 0 4 4 0 0 3,VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 1 0 0 0 0 4 4 0 0 4,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 1 0 0 0 2 8 0 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1 0 0 0 2 8 0 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1 0 0 0 2 8 1 0 0 1,VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = 1 0 0 0 3 6 0 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1 0 0 0 4 1 3 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1 0 0 0 4 1 3 0 0 1,VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1 0 0 0 4 1 3 0 0 2,VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1 0 0 0 4 1 3 0 0 3,VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1 0 0 0 0 0 1 0 0 0,VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1 0 0 0 0 0 1 0 0 1,VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1 0 0 0 0 6 0 0 0 7,VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1 0 0 0 0 6 0 0 0 8,VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1 0 0 0 0 6 0 0 0 9,VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1 0 0 0 0 6 0 0 1 0,VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1 0 0 0 0 6 0 0 1 1,VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1 0 0 0 0 6 0 0 1 2,VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1 0 0 0 0 0 2 0 0 0,VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1 0 0 0 0 0 2 0 0 1,VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1 0 0 0 0 0 3 0 0 0,VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1 0 0 0 0 0 4 0 0 0,VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1 0 0 0 0 0 5 0 0 0,VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1 0 0 0 0 0 6 0 0 0,VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1 0 0 0 0 0 8 0 0 0,VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1 0 0 0 0 0 9 0 0 0,VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1 0 0 0 0 1 1 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1 0 0 0 0 1 8 0 0 0,VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1 0 0 0 0 2 2 0 0 0,VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1 0 0 0 0 2 2 0 0 1,VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1 0 0 0 0 2 2 0 0 2,VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR = 1 0 0 0 0 2 3 0 0 0,VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = 1 0 0 0 0 2 3 0 0 1,VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR = 1 0 0 0 0 2 3 0 0 2,VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR = 1 0 0 0 0 2 3 0 0 3,VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR = 1 0 0 0 0 2 3 0 0 4,VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = 1 0 0 0 0 2 3 0 0 5,VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 1 0 0 0 0 2 3 0 0 6,VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 1 0 0 0 0 2 3 0 0 7,VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = 1 0 0 0 0 2 3 0 0 8,VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = 1 0 0 0 0 2 3 0 0 9,VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = 1 0 0 0 0 2 3 0 1 0,VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR = 1 0 0 0 0 2 3 0 1 1,VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR = 1 0 0 0 0 2 3 0 1 2,VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR = 1 0 0 0 0 2 3 0 1 3,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 1 0 0 0 0 2 3 0 1 4,VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = 1 0 0 0 0 2 3 0 1 5,VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR = 1 0 0 0 0 2 3 0 1 6,VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = 1 0 0 0 0 2 4 0 0 0,VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR = 1 0 0 0 0 2 4 0 0 1,VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR = 1 0 0 0 0 2 4 0 0 2,VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1 0 0 0 0 2 6 0 0 0,VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1 0 0 0 0 2 6 0 0 1,VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1 0 0 0 0 2 6 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1 0 0 0 0 2 8 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1 0 0 0 0 2 8 0 0 1,VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1 0 0 0 0 2 8 0 0 2,VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = 1 0 0 0 0 2 9 0 0 0,VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = 1 0 0 0 0 2 9 0 0 1,VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = 1 0 0 0 0 2 9 0 0 2,VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1 0 0 0 0 3 0 0 0 0,VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1 0 0 0 0 3 0 0 0 1,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR = 1 0 0 0 0 3 8 0 0 0,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = 1 0 0 0 0 3 8 0 0 1,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = 1 0 0 0 0 3 8 0 0 2,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR = 1 0 0 0 0 3 8 0 0 3,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR = 1 0 0 0 0 3 8 0 0 4,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR = 1 0 0 0 0 3 8 0 0 5,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR = 1 0 0 0 0 3 8 0 0 6,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR = 1 0 0 0 0 3 8 0 0 7,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR = 1 0 0 0 0 3 8 0 0 8,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR = 1 0 0 0 0 3 8 0 0 9,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR = 1 0 0 0 0 3 8 0 1 0,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR = 1 0 0 0 0 3 8 0 1 1,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR = 1 0 0 0 0 3 8 0 1 2,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1 0 0 0 0 3 8 0 1 3,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR = 1 0 0 0 0 3 9 0 0 0,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = 1 0 0 0 0 3 9 0 0 1,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = 1 0 0 0 0 3 9 0 0 2,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR = 1 0 0 0 0 3 9 0 0 3,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR = 1 0 0 0 0 3 9 0 0 4,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR = 1 0 0 0 0 3 9 0 0 5,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR = 1 0 0 0 0 3 9 0 0 6,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR = 1 0 0 0 0 3 9 0 0 7,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR = 1 0 0 0 0 3 9 0 0 9,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR = 1 0 0 0 0 3 9 0 1 0,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR = 1 0 0 0 0 3 9 0 1 1,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR = 1 0 0 0 0 3 9 0 1 2,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR = 1 0 0 0 0 3 9 0 1 3,VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1 0 0 0 0 3 9 0 1 4,VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR = 1 0 0 0 0 4 0 0 0 0,VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR = 1 0 0 0 0 4 0 0 0 1,VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR = 1 0 0 0 0 4 0 0 0 3,VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = 1 0 0 0 0 4 0 0 0 4,VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = 1 0 0 0 0 4 0 0 0 5,VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR = 1 0 0 0 0 4 0 0 0 6,VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1 0 0 0 0 4 1 0 0 0,VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1 0 0 0 0 4 4 0 0 6,VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = 1 0 0 0 0 4 4 0 0 7,VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = 1 0 0 0 0 4 4 0 0 8,VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = 1 0 0 0 0 4 4 0 0 9,VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1 0 0 0 0 4 9 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1 0 0 0 0 5 0 0 0 0,VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1 0 0 0 0 5 6 0 0 0,VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1 0 0 0 0 5 6 0 0 1,VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1 0 0 0 0 5 7 0 0 0,VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1 0 0 0 0 5 7 0 0 1,VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1 0 0 0 0 5 8 0 0 0,VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1 0 0 0 0 6 1 0 0 0,VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1 0 0 0 0 6 2 0 0 0,VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1 0 0 0 0 6 7 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1 0 0 0 0 6 7 0 0 1,VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT = 1 0 0 0 0 6 8 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT = 1 0 0 0 0 6 8 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT = 1 0 0 0 0 6 8 0 0 2,VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1 0 0 0 0 7 3 0 0 0,VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1 0 0 0 0 7 3 0 0 1,VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1 0 0 0 0 7 3 0 0 2,VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1 0 0 0 0 7 3 0 0 3,VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1 0 0 0 0 7 4 0 0 0,VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1 0 0 0 0 7 4 0 0 1,VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1 0 0 0 0 7 4 0 0 2,VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1 0 0 0 0 7 5 0 0 0,VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1 0 0 0 0 7 8 0 0 0,VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1 0 0 0 0 7 8 0 0 1,VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1 0 0 0 0 7 8 0 0 2,VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1 0 0 0 0 7 8 0 0 3,VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1 0 0 0 0 7 9 0 0 0,VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1 0 0 0 0 7 9 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1 0 0 0 0 8 0 0 0 0,VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1 0 0 0 0 8 1 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1 0 0 0 0 8 1 0 0 1,VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1 0 0 0 0 8 1 0 0 2,VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1 0 0 0 0 8 4 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1 0 0 0 0 8 7 0 0 0,VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1 0 0 0 0 9 0 0 0 0,VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1 0 0 0 0 9 1 0 0 0,VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1 0 0 0 0 9 1 0 0 1,VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1 0 0 0 0 9 1 0 0 2,VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1 0 0 0 0 9 1 0 0 3,VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1 0 0 0 0 9 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1 0 0 0 0 9 7 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1 0 0 0 0 9 8 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1 0 0 0 0 9 9 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1 0 0 0 0 9 9 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1 0 0 0 1 0 1 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1 0 0 0 1 0 1 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1 0 0 0 1 0 2 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1 0 0 0 1 0 2 0 0 1,VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1 0 0 0 1 0 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG = 1 0 0 0 1 1 0 0 0 0,VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1 0 0 0 1 1 1 0 0 0,VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1 0 0 0 1 1 4 0 0 0,VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1 0 0 0 1 1 4 0 0 1,VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1 0 0 0 1 1 4 0 0 2,VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1 0 0 0 1 1 5 0 0 0,VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1 0 0 0 1 1 5 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1 0 0 0 1 1 6 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1 0 0 0 1 1 6 0 0 1,VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1 0 0 0 1 1 6 0 0 2,VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1 0 0 0 1 1 6 0 0 3,VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1 0 0 0 1 1 6 0 0 4,VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1 0 0 0 1 1 6 0 0 5,VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1 0 0 0 1 1 6 0 0 6,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1 0 0 0 1 1 9 0 0 0,VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1 0 0 0 1 1 9 0 0 1,VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1 0 0 0 1 1 9 0 0 2,VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1 0 0 0 1 2 1 0 0 0,VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1 0 0 0 1 2 1 0 0 1,VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1 0 0 0 1 2 1 0 0 2,VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1 0 0 0 1 2 1 0 0 3,VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1 0 0 0 1 2 1 0 0 4,VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1 0 0 0 1 2 2 0 0 0,VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1 0 0 0 1 2 3 0 0 0,VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1 0 0 0 1 2 8 0 0 0,VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1 0 0 0 1 2 8 0 0 1,VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1 0 0 0 1 2 8 0 0 2,VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1 0 0 0 1 2 8 0 0 3,VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1 0 0 0 1 2 8 0 0 4,VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1 0 0 0 1 2 9 0 0 0,VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1 0 0 0 1 2 9 0 0 1,VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1 0 0 0 1 2 9 0 0 2,VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1 0 0 0 1 2 9 0 0 3,VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1 0 0 0 1 2 9 0 0 4,VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1 0 0 0 1 2 9 0 0 5,VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = 1 0 0 0 1 2 9 0 0 6,# ifdef VK_ENABLE_BETA_EXTENSIONS VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX = 1 0 0 0 1 3 4 0 0 0,# endif # ifdef VK_ENABLE_BETA_EXTENSIONS VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_PROPERTIES_AMDX = 1 0 0 0 1 3 4 0 0 1,# endif # ifdef VK_ENABLE_BETA_EXTENSIONS VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_SCRATCH_SIZE_AMDX = 1 0 0 0 1 3 4 0 0 2,# endif # ifdef VK_ENABLE_BETA_EXTENSIONS VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_CREATE_INFO_AMDX = 1 0 0 0 1 3 4 0 0 3,# endif # ifdef VK_ENABLE_BETA_EXTENSIONS VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_NODE_CREATE_INFO_AMDX = 1 0 0 0 1 3 4 0 0 4,# endif VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1 0 0 0 1 4 3 0 0 0,VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1 0 0 0 1 4 3 0 0 1,VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1 0 0 0 1 4 3 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1 0 0 0 1 4 3 0 0 3,VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1 0 0 0 1 4 3 0 0 4,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1 0 0 0 1 4 8 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1 0 0 0 1 4 8 0 0 1,VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1 0 0 0 1 4 8 0 0 2,VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1 0 0 0 1 4 9 0 0 0,VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1 0 0 0 1 5 0 0 0 7,VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1 0 0 0 1 5 0 0 0 0,VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1 0 0 0 1 5 0 0 0 2,VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1 0 0 0 1 5 0 0 0 3,VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1 0 0 0 1 5 0 0 0 4,VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1 0 0 0 1 5 0 0 0 5,VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1 0 0 0 1 5 0 0 0 6,VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1 0 0 0 1 5 0 0 0 9,VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1 0 0 0 1 5 0 0 1 0,VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1 0 0 0 1 5 0 0 1 1,VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1 0 0 0 1 5 0 0 1 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1 0 0 0 1 5 0 0 1 3,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1 0 0 0 1 5 0 0 1 4,VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1 0 0 0 1 5 0 0 1 7,VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1 0 0 0 1 5 0 0 2 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1 0 0 0 3 4 7 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1 0 0 0 3 4 7 0 0 1,VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1 0 0 0 1 5 0 0 1 5,VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1 0 0 0 1 5 0 0 1 6,VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1 0 0 0 1 5 0 0 1 8,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1 0 0 0 3 4 8 0 1 3,VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1 0 0 0 1 5 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1 0 0 0 1 5 4 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1 0 0 0 1 5 4 0 0 1,VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1 0 0 0 1 5 8 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1 0 0 0 1 5 8 0 0 2,VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1 0 0 0 1 5 8 0 0 3,VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1 0 0 0 1 5 8 0 0 4,VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1 0 0 0 1 5 8 0 0 5,VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = 1 0 0 0 1 5 8 0 0 6,VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1 0 0 0 1 6 0 0 0 0,VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1 0 0 0 1 6 0 0 0 1,# ifdef VK_ENABLE_BETA_EXTENSIONS VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR = 1 0 0 0 1 6 3 0 0 0,# endif # ifdef VK_ENABLE_BETA_EXTENSIONS VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR = 1 0 0 0 1 6 3 0 0 1,# endif VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1 0 0 0 1 6 4 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1 0 0 0 1 6 4 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1 0 0 0 1 6 4 0 0 2,VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1 0 0 0 1 6 4 0 0 5,VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1 0 0 0 1 6 5 0 0 0,VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1 0 0 0 1 6 5 0 0 1,VK_STRUCTURE_TYPE_GEOMETRY_NV = 1 0 0 0 1 6 5 0 0 3,VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1 0 0 0 1 6 5 0 0 4,VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1 0 0 0 1 6 5 0 0 5,VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1 0 0 0 1 6 5 0 0 6,VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1 0 0 0 1 6 5 0 0 7,VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1 0 0 0 1 6 5 0 0 8,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1 0 0 0 1 6 5 0 0 9,VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1 0 0 0 1 6 5 0 1 1,VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1 0 0 0 1 6 5 0 1 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1 0 0 0 1 6 6 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1 0 0 0 1 6 6 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1 0 0 0 1 7 0 0 0 0,VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1 0 0 0 1 7 0 0 0 1,VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1 0 0 0 1 7 8 0 0 0,VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1 0 0 0 1 7 8 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1 0 0 0 1 7 8 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1 0 0 0 1 8 1 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1 0 0 0 1 8 3 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1 0 0 0 1 8 5 0 0 0,VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR = 1 0 0 0 1 8 7 0 0 0,VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = 1 0 0 0 1 8 7 0 0 1,VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = 1 0 0 0 1 8 7 0 0 2,VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR = 1 0 0 0 1 8 7 0 0 3,VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR = 1 0 0 0 1 8 7 0 0 4,VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR = 1 0 0 0 1 8 7 0 0 5,VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = 1 0 0 0 1 7 4 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = 1 0 0 0 3 8 8 0 0 0,VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = 1 0 0 0 3 8 8 0 0 1,VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1 0 0 0 1 8 9 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1 0 0 0 1 9 0 0 0 0,VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1 0 0 0 1 9 1 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1 0 0 0 2 0 1 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1 0 0 0 2 0 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1 0 0 0 2 0 2 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1 0 0 0 2 0 4 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1 0 0 0 2 0 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1 0 0 0 2 0 5 0 0 2,VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1 0 0 0 2 0 6 0 0 0,VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1 0 0 0 2 0 6 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1 0 0 0 2 0 9 0 0 0,VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1 0 0 0 2 1 0 0 0 0,VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1 0 0 0 2 1 0 0 0 1,VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1 0 0 0 2 1 0 0 0 2,VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1 0 0 0 2 1 0 0 0 3,VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1 0 0 0 2 1 0 0 0 4,VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1 0 0 0 2 1 0 0 0 5,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1 0 0 0 2 1 2 0 0 0,VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1 0 0 0 2 1 3 0 0 0,VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1 0 0 0 2 1 3 0 0 1,VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1 0 0 0 2 1 4 0 0 0,VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1 0 0 0 2 1 7 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1 0 0 0 2 1 8 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1 0 0 0 2 1 8 0 0 1,VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1 0 0 0 2 1 8 0 0 2,VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1 0 0 0 2 2 6 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1 0 0 0 2 2 6 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1 0 0 0 2 2 6 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1 0 0 0 2 2 6 0 0 3,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1 0 0 0 2 2 6 0 0 4,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1 0 0 0 2 2 7 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1 0 0 0 2 2 9 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR = 1 0 0 0 2 3 2 0 0 0,VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO_KHR = 1 0 0 0 2 3 2 0 0 1,VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR = 1 0 0 0 2 3 2 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1 0 0 0 2 3 4 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR = 1 0 0 0 2 3 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1 0 0 0 2 3 7 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1 0 0 0 2 3 8 0 0 0,VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1 0 0 0 2 3 8 0 0 1,VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1 0 0 0 2 3 9 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1 0 0 0 2 4 0 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1 0 0 0 2 4 4 0 0 0,VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1 0 0 0 2 4 4 0 0 2,VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1 0 0 0 2 4 7 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1 0 0 0 2 4 8 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1 0 0 0 2 4 9 0 0 0,VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1 0 0 0 2 4 9 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1 0 0 0 2 4 9 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1 0 0 0 2 5 0 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1 0 0 0 2 5 0 0 0 1,VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1 0 0 0 2 5 0 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1 0 0 0 2 5 1 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1 0 0 0 2 5 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1 0 0 0 2 5 4 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1 0 0 0 2 5 4 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1 0 0 0 2 5 4 0 0 2,VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1 0 0 0 2 5 5 0 0 0,VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1 0 0 0 2 5 5 0 0 2,VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1 0 0 0 2 5 5 0 0 1,VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1 0 0 0 2 5 6 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1 0 0 0 2 6 0 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1 0 0 0 2 6 7 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1 0 0 0 2 6 9 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1 0 0 0 2 6 9 0 0 1,VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1 0 0 0 2 6 9 0 0 2,VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1 0 0 0 2 6 9 0 0 3,VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1 0 0 0 2 6 9 0 0 4,VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1 0 0 0 2 6 9 0 0 5,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT = 1 0 0 0 2 7 0 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT = 1 0 0 0 2 7 0 0 0 1,VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT = 1 0 0 0 2 7 0 0 0 2,VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT = 1 0 0 0 2 7 0 0 0 3,VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT = 1 0 0 0 2 7 0 0 0 4,VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT = 1 0 0 0 2 7 0 0 0 5,VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT = 1 0 0 0 2 7 0 0 0 6,VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT = 1 0 0 0 2 7 0 0 0 7,VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT = 1 0 0 0 2 7 0 0 0 8,VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT = 1 0 0 0 2 7 0 0 0 9,VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR = 1 0 0 0 2 7 1 0 0 0,VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR = 1 0 0 0 2 7 1 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT = 1 0 0 0 2 7 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT = 1 0 0 0 2 7 2 0 0 1,VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT = 1 0 0 0 2 7 2 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = 1 0 0 0 2 7 3 0 0 0,VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT = 1 0 0 0 2 7 4 0 0 0,VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT = 1 0 0 0 2 7 4 0 0 1,VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT = 1 0 0 0 2 7 4 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT = 1 0 0 0 2 7 5 0 0 0,VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT = 1 0 0 0 2 7 5 0 0 1,VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT = 1 0 0 0 2 7 5 0 0 2,VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT = 1 0 0 0 2 7 5 0 0 3,VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT = 1 0 0 0 2 7 5 0 0 4,VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT = 1 0 0 0 2 7 5 0 0 5,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1 0 0 0 2 7 7 0 0 0,VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1 0 0 0 2 7 7 0 0 1,VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1 0 0 0 2 7 7 0 0 2,VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1 0 0 0 2 7 7 0 0 3,VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1 0 0 0 2 7 7 0 0 4,VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1 0 0 0 2 7 7 0 0 5,VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1 0 0 0 2 7 7 0 0 6,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1 0 0 0 2 7 7 0 0 7,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1 0 0 0 2 7 8 0 0 0,VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1 0 0 0 2 7 8 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1 0 0 0 2 8 1 0 0 0,VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1 0 0 0 2 8 2 0 0 0,VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1 0 0 0 2 8 2 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT = 1 0 0 0 2 8 3 0 0 0,VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT = 1 0 0 0 2 8 3 0 0 1,VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT = 1 0 0 0 2 8 3 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1 0 0 0 2 8 4 0 0 0,VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1 0 0 0 2 8 4 0 0 1,VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1 0 0 0 2 8 4 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1 0 0 0 2 8 6 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1 0 0 0 2 8 6 0 0 1,VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1 0 0 0 2 8 7 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1 0 0 0 2 8 7 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1 0 0 0 2 8 7 0 0 2,VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1 0 0 0 2 9 0 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV = 1 0 0 0 2 9 2 0 0 0,VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV = 1 0 0 0 2 9 2 0 0 1,VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV = 1 0 0 0 2 9 2 0 0 2,VK_STRUCTURE_TYPE_PRESENT_ID_KHR = 1 0 0 0 2 9 4 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1 0 0 0 2 9 4 0 0 1,VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR = 1 0 0 0 2 9 9 0 0 0,VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = 1 0 0 0 2 9 9 0 0 1,VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR = 1 0 0 0 2 9 9 0 0 2,VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR = 1 0 0 0 2 9 9 0 0 3,VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR = 1 0 0 0 2 9 9 0 0 4,VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR = 1 0 0 0 2 9 9 0 0 5,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = 1 0 0 0 2 9 9 0 0 6,VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR = 1 0 0 0 2 9 9 0 0 7,VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = 1 0 0 0 2 9 9 0 0 8,VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR = 1 0 0 0 2 9 9 0 0 9,VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1 0 0 0 2 9 9 0 1 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1 0 0 0 3 0 0 0 0 0,VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1 0 0 0 3 0 0 0 0 1,VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV = 1 0 0 0 3 0 7 0 0 0,VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV = 1 0 0 0 3 0 7 0 0 1,VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV = 1 0 0 0 3 0 7 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV = 1 0 0 0 3 0 7 0 0 3,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV = 1 0 0 0 3 0 7 0 0 4,VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV = 1 0 0 0 3 1 0 0 0 0,VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT = 1 0 0 0 3 1 1 0 0 0,VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT = 1 0 0 0 3 1 1 0 0 1,VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT = 1 0 0 0 3 1 1 0 0 2,VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT = 1 0 0 0 3 1 1 0 0 3,VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT = 1 0 0 0 3 1 1 0 0 4,VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT = 1 0 0 0 3 1 1 0 0 5,VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT = 1 0 0 0 3 1 1 0 0 6,VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT = 1 0 0 0 3 1 1 0 0 7,VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT = 1 0 0 0 3 1 1 0 0 8,VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT = 1 0 0 0 3 1 1 0 0 9,VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT = 1 0 0 0 3 1 1 0 1 0,VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT = 1 0 0 0 3 1 1 0 1 1,VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1 0 0 0 3 1 4 0 0 8,VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1 0 0 0 3 1 4 0 0 9,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT = 1 0 0 0 3 1 6 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT = 1 0 0 0 3 1 6 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT = 1 0 0 0 3 1 6 0 0 2,VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT = 1 0 0 0 3 1 6 0 0 3,VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT = 1 0 0 0 3 1 6 0 0 4,VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1 0 0 0 3 1 6 0 0 5,VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1 0 0 0 3 1 6 0 0 6,VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1 0 0 0 3 1 6 0 0 7,VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1 0 0 0 3 1 6 0 0 8,VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT = 1 0 0 0 3 1 6 0 1 0,VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT = 1 0 0 0 3 1 6 0 1 1,VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT = 1 0 0 0 3 1 6 0 1 2,VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1 0 0 0 3 1 6 0 0 9,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT = 1 0 0 0 3 2 0 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT = 1 0 0 0 3 2 0 0 0 1,VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT = 1 0 0 0 3 2 0 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD = 1 0 0 0 3 2 1 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR = 1 0 0 0 2 0 3 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR = 1 0 0 0 3 2 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR = 1 0 0 0 3 2 3 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1 0 0 0 3 2 6 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1 0 0 0 3 2 6 0 0 1,VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1 0 0 0 3 2 6 0 0 2,VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = 1 0 0 0 3 2 7 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = 1 0 0 0 3 2 7 0 0 1,VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = 1 0 0 0 3 2 7 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT = 1 0 0 0 3 2 8 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT = 1 0 0 0 3 2 8 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1 0 0 0 3 3 0 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1 0 0 0 3 3 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1 0 0 0 3 3 2 0 0 1,VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1 0 0 0 3 3 3 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1 0 0 0 3 3 6 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT = 1 0 0 0 3 3 8 0 0 0,VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT = 1 0 0 0 3 3 8 0 0 1,VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT = 1 0 0 0 3 3 8 0 0 4,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT = 1 0 0 0 3 3 9 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1 0 0 0 3 4 0 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT = 1 0 0 0 3 4 1 0 0 0,VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT = 1 0 0 0 3 4 1 0 0 1,VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT = 1 0 0 0 3 4 1 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = 1 0 0 0 3 4 4 0 0 0,VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1 0 0 0 3 4 6 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1 0 0 0 3 5 2 0 0 0,VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1 0 0 0 3 5 2 0 0 1,VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1 0 0 0 3 5 2 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = 1 0 0 0 3 5 3 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT = 1 0 0 0 3 5 4 0 0 0,VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT = 1 0 0 0 3 5 4 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = 1 0 0 0 3 5 5 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = 1 0 0 0 3 5 5 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = 1 0 0 0 3 5 6 0 0 0,VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1 0 0 0 3 6 4 0 0 0,VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1 0 0 0 3 6 4 0 0 1,VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1 0 0 0 3 6 4 0 0 2,VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1 0 0 0 3 6 5 0 0 0,VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1 0 0 0 3 6 5 0 0 1,VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1 0 0 0 3 6 6 0 0 0,VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1 0 0 0 3 6 6 0 0 1,VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1 0 0 0 3 6 6 0 0 2,VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1 0 0 0 3 6 6 0 0 3,VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1 0 0 0 3 6 6 0 0 4,VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1 0 0 0 3 6 6 0 0 5,VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1 0 0 0 3 6 6 0 0 6,VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1 0 0 0 3 6 6 0 0 7,VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 1 0 0 0 3 6 6 0 0 8,VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1 0 0 0 3 6 6 0 0 9,VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 1 0 0 0 3 6 9 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1 0 0 0 3 6 9 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 1 0 0 0 3 6 9 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = 1 0 0 0 3 7 0 0 0 0,VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 1 0 0 0 3 7 1 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1 0 0 0 3 7 1 0 0 1,VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT = 1 0 0 0 3 7 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT = 1 0 0 0 3 7 2 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT = 1 0 0 0 3 7 5 0 0 0,VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT = 1 0 0 0 3 7 5 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT = 1 0 0 0 3 7 6 0 0 0,VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT = 1 0 0 0 3 7 6 0 0 1,VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT = 1 0 0 0 3 7 6 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1 0 0 0 3 7 7 0 0 0,VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1 0 0 0 3 7 8 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1 0 0 0 3 8 1 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1 0 0 0 3 8 1 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT = 1 0 0 0 3 8 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR = 1 0 0 0 3 8 6 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = 1 0 0 0 3 9 1 0 0 0,VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = 1 0 0 0 3 9 1 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = 1 0 0 0 3 9 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = 1 0 0 0 3 9 2 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT = 1 0 0 0 3 9 3 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT = 1 0 0 0 3 9 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT = 1 0 0 0 3 9 5 0 0 1,VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT = 1 0 0 0 3 9 6 0 0 0,VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT = 1 0 0 0 3 9 6 0 0 1,VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT = 1 0 0 0 3 9 6 0 0 2,VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT = 1 0 0 0 3 9 6 0 0 3,VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT = 1 0 0 0 3 9 6 0 0 4,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT = 1 0 0 0 3 9 6 0 0 5,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT = 1 0 0 0 3 9 6 0 0 6,VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT = 1 0 0 0 3 9 6 0 0 7,VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT = 1 0 0 0 3 9 6 0 0 8,VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT = 1 0 0 0 3 9 6 0 0 9,# ifdef VK_ENABLE_BETA_EXTENSIONS VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV = 1 0 0 0 3 9 7 0 0 0,# endif # ifdef VK_ENABLE_BETA_EXTENSIONS VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV = 1 0 0 0 3 9 7 0 0 1,# endif # ifdef VK_ENABLE_BETA_EXTENSIONS VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_DISPLACEMENT_MICROMAP_NV = 1 0 0 0 3 9 7 0 0 2,# endif VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI = 1 0 0 0 4 0 4 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI = 1 0 0 0 4 0 4 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI = 1 0 0 0 4 0 4 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = 1 0 0 0 4 1 1 0 0 0,VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = 1 0 0 0 4 1 1 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = 1 0 0 0 4 1 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM = 1 0 0 0 4 1 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR = 1 0 0 0 4 1 6 0 0 0,VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM = 1 0 0 0 4 1 7 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM = 1 0 0 0 4 1 7 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM = 1 0 0 0 4 1 7 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT = 1 0 0 0 4 1 8 0 0 0,VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT = 1 0 0 0 4 1 8 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = 1 0 0 0 4 2 0 0 0 0,VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = 1 0 0 0 4 2 0 0 0 1,VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = 1 0 0 0 4 2 0 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT = 1 0 0 0 4 2 1 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT = 1 0 0 0 4 2 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM = 1 0 0 0 4 2 4 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM = 1 0 0 0 4 2 4 0 0 1,VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM = 1 0 0 0 4 2 4 0 0 2,VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM = 1 0 0 0 4 2 4 0 0 3,VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM = 1 0 0 0 4 2 4 0 0 4,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = 1 0 0 0 4 2 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = 1 0 0 0 4 2 5 0 0 1,VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = 1 0 0 0 4 2 5 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV = 1 0 0 0 4 2 6 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV = 1 0 0 0 4 2 6 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV = 1 0 0 0 4 2 7 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV = 1 0 0 0 4 2 7 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV = 1 0 0 0 4 2 8 0 0 0,VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV = 1 0 0 0 4 2 8 0 0 1,VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV = 1 0 0 0 4 2 8 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = 1 0 0 0 4 3 0 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR = 1 0 0 0 4 3 4 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT = 1 0 0 0 4 3 7 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM = 1 0 0 0 4 4 0 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM = 1 0 0 0 4 4 0 0 0 1,VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM = 1 0 0 0 4 4 0 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT = 1 0 0 0 4 5 1 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT = 1 0 0 0 4 5 1 0 0 1,VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT = 1 0 0 0 4 5 3 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT = 1 0 0 0 4 5 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT = 1 0 0 0 4 5 5 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT = 1 0 0 0 4 5 8 0 0 0,VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT = 1 0 0 0 4 5 8 0 0 1,VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT = 1 0 0 0 4 5 8 0 0 2,VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT = 1 0 0 0 4 5 8 0 0 3,VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG = 1 0 0 0 4 5 9 0 0 0,VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG = 1 0 0 0 4 5 9 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT = 1 0 0 0 4 6 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT = 1 0 0 0 4 6 2 0 0 1,VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT = 1 0 0 0 4 6 2 0 0 2,VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT = 1 0 0 0 4 6 2 0 0 3,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT = 1 0 0 0 3 4 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV = 1 0 0 0 4 6 4 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV = 1 0 0 0 4 6 4 0 0 1,VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV = 1 0 0 0 4 6 4 0 0 2,VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV = 1 0 0 0 4 6 4 0 0 3,VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV = 1 0 0 0 4 6 4 0 0 4,VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV = 1 0 0 0 4 6 4 0 0 5,VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV = 1 0 0 0 4 6 4 0 1 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT = 1 0 0 0 4 6 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT = 1 0 0 0 4 6 6 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID = 1 0 0 0 4 6 8 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID = 1 0 0 0 4 6 8 0 0 1,VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID = 1 0 0 0 4 6 8 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR = 1 0 0 0 4 7 0 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR = 1 0 0 0 4 7 0 0 0 1,VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR = 1 0 0 0 4 7 0 0 0 3,VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR = 1 0 0 0 4 7 0 0 0 4,VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR = 1 0 0 0 3 3 8 0 0 2,VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR = 1 0 0 0 3 3 8 0 0 3,VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR = 1 0 0 0 4 7 0 0 0 5,VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR = 1 0 0 0 4 7 0 0 0 6,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR = 1 0 0 0 4 8 1 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT = 1 0 0 0 4 8 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT = 1 0 0 0 4 8 2 0 0 1,VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT = 1 0 0 0 4 8 2 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM = 1 0 0 0 4 8 4 0 0 0,VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM = 1 0 0 0 4 8 4 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC = 1 0 0 0 4 8 5 0 0 0,VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC = 1 0 0 0 4 8 5 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM = 1 0 0 0 4 8 8 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV = 1 0 0 0 4 9 0 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV = 1 0 0 0 4 9 0 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV = 1 0 0 0 4 9 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV = 1 0 0 0 4 9 2 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT = 1 0 0 0 3 5 1 0 0 0,VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT = 1 0 0 0 3 5 1 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT = 1 0 0 0 4 9 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT = 1 0 0 0 4 9 5 0 0 1,VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT = 1 0 0 0 4 9 6 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM = 1 0 0 0 4 9 7 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM = 1 0 0 0 4 9 7 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT = 1 0 0 0 4 9 8 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT = 1 0 0 0 4 9 9 0 0 0,VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV = 1 0 0 0 5 0 5 0 0 0,VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV = 1 0 0 0 5 0 5 0 0 1,VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV = 1 0 0 0 5 0 5 0 0 2,VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV = 1 0 0 0 5 0 5 0 0 3,VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV = 1 0 0 0 5 0 5 0 0 4,VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV = 1 0 0 0 5 0 5 0 0 5,VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV = 1 0 0 0 5 0 5 0 0 6,VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV = 1 0 0 0 5 0 5 0 0 7,VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV = 1 0 0 0 5 0 5 0 0 8,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR = 1 0 0 0 5 0 6 0 0 0,VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR = 1 0 0 0 5 0 6 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR = 1 0 0 0 5 0 6 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM = 1 0 0 0 5 1 0 0 0 0,VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM = 1 0 0 0 5 1 0 0 0 1,VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR = 1 0 0 0 5 1 2 0 0 0,VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR = 1 0 0 0 5 1 2 0 0 1,VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR = 1 0 0 0 5 1 2 0 0 3,VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR = 1 0 0 0 5 1 2 0 0 4,VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR = 1 0 0 0 5 1 2 0 0 5,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR = 1 0 0 0 5 1 5 0 0 0,VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR = 1 0 0 0 5 1 5 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV = 1 0 0 0 5 1 6 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM = 1 0 0 0 5 1 8 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM = 1 0 0 0 5 1 8 0 0 1,VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM = 1 0 0 0 5 1 8 0 0 2,VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM = 1 0 0 0 5 1 9 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM = 1 0 0 0 5 1 9 0 0 1,VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM = 1 0 0 0 5 1 9 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM = 1 0 0 0 5 2 0 0 0 0,VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM = 1 0 0 0 5 2 0 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM = 1 0 0 0 5 2 1 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT = 1 0 0 0 5 2 4 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR = 1 0 0 0 5 2 5 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR = 1 0 0 0 1 9 0 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR = 1 0 0 0 1 9 0 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR = 1 0 0 0 5 2 8 0 0 0,VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX = 1 0 0 0 5 2 9 0 0 0,VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX = 1 0 0 0 5 2 9 0 0 1,VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX = 1 0 0 0 5 2 9 0 0 2,VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX = 1 0 0 0 5 2 9 0 0 3,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX = 1 0 0 0 5 2 9 0 0 4,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT = 1 0 0 0 5 3 0 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR = 1 0 0 0 2 6 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR = 1 0 0 0 2 5 9 0 0 0,VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR = 1 0 0 0 2 5 9 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR = 1 0 0 0 2 5 9 0 0 2,VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR = 1 0 0 0 1 8 4 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR = 1 0 0 0 5 4 4 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR = 1 0 0 0 5 4 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR = 1 0 0 0 5 4 5 0 0 1,VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR = 1 0 0 0 5 4 5 0 0 2,VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR = 1 0 0 0 5 4 5 0 0 3,VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR = 1 0 0 0 5 4 5 0 0 4,VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR = 1 0 0 0 5 4 5 0 0 5,VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR = 1 0 0 0 5 4 5 0 0 6,VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT = 1 0 0 0 5 4 5 0 0 7,VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT = 1 0 0 0 5 4 5 0 0 8,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV = 1 0 0 0 5 4 6 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV = 1 0 0 0 5 5 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR = 1 0 0 0 5 5 8 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR = 1 0 0 0 5 6 2 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR = 1 0 0 0 5 6 2 0 0 1,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR = 1 0 0 0 5 6 2 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR = 1 0 0 0 5 6 2 0 0 3,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR = 1 0 0 0 5 6 2 0 0 4,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV = 1 0 0 0 5 6 3 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT = 1 0 0 0 5 6 4 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV = 1 0 0 0 5 6 8 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA = 1 0 0 0 5 7 5 0 0 0,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA = 1 0 0 0 5 7 5 0 0 1,VK_STRUCTURE_TYPE_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA = 1 0 0 0 5 7 5 0 0 2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,VK_STRUCTURE_TYPE_RENDERING_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_INFO,VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO,VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES,VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO,VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV = VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD,VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_END_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES,VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK,VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO,VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR,VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR,VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES,VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES,VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR,VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES,VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO,VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES,VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_MEMORY_BARRIER_2,VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2,VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2,VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = VK_STRUCTURE_TYPE_DEPENDENCY_INFO,VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = VK_STRUCTURE_TYPE_SUBMIT_INFO_2,VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO,VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES,VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2,VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2,VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2,VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2,VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2,VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2,VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = VK_STRUCTURE_TYPE_BUFFER_COPY_2,VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = VK_STRUCTURE_TYPE_IMAGE_COPY_2,VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = VK_STRUCTURE_TYPE_IMAGE_BLIT_2,VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2,VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2,VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT = VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR,VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT = VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT,VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT,VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3,VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR,VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT = VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES,VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES,VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS,VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS,VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO,VK_STRUCTURE_TYPE_MAX_ENUM = 0 x7FFFFFFF } VkStructureType ; typedef enum VkPipelineCacheHeaderVersion { VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 0 x7FFFFFFF } VkPipelineCacheHeaderVersion ; typedef enum VkImageLayout { VK_IMAGE_LAYOUT_UNDEFINED = 0,VK_IMAGE_LAYOUT_GENERAL = 1,VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,VK_IMAGE_LAYOUT_PREINITIALIZED = 8,VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1 0 0 0 1 1 7 0 0 0,VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1 0 0 0 1 1 7 0 0 1,VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1 0 0 0 2 4 1 0 0 0,VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1 0 0 0 2 4 1 0 0 1,VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1 0 0 0 2 4 1 0 0 2,VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1 0 0 0 2 4 1 0 0 3,VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1 0 0 0 3 1 4 0 0 0,VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1 0 0 0 3 1 4 0 0 1,VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1 0 0 0 0 0 1 0 0 2,VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = 1 0 0 0 0 2 4 0 0 0,VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = 1 0 0 0 0 2 4 0 0 1,VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = 1 0 0 0 0 2 4 0 0 2,VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1 0 0 0 1 1 1 0 0 0,VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1 0 0 0 2 1 8 0 0 0,VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1 0 0 0 1 6 4 0 0 3,VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR = 1 0 0 0 2 3 2 0 0 0,VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR = 1 0 0 0 2 9 9 0 0 0,VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR = 1 0 0 0 2 9 9 0 0 1,VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR = 1 0 0 0 2 9 9 0 0 2,VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT = 1 0 0 0 3 3 9 0 0 0,VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR,VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL,VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL,VK_IMAGE_LAYOUT_MAX_ENUM = 0 x7FFFFFFF } VkImageLayout ; typedef enum VkObjectType { VK_OBJECT_TYPE_UNKNOWN = 0,VK_OBJECT_TYPE_INSTANCE = 1,VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,VK_OBJECT_TYPE_DEVICE = 3,VK_OBJECT_TYPE_QUEUE = 4,VK_OBJECT_TYPE_SEMAPHORE = 5,VK_OBJECT_TYPE_COMMAND_BUFFER = 6,VK_OBJECT_TYPE_FENCE = 7,VK_OBJECT_TYPE_DEVICE_MEMORY = 8,VK_OBJECT_TYPE_BUFFER = 9,VK_OBJECT_TYPE_IMAGE = 1 0,VK_OBJECT_TYPE_EVENT = 1 1,VK_OBJECT_TYPE_QUERY_POOL = 1 2,VK_OBJECT_TYPE_BUFFER_VIEW = 1 3,VK_OBJECT_TYPE_IMAGE_VIEW = 1 4,VK_OBJECT_TYPE_SHADER_MODULE = 1 5,VK_OBJECT_TYPE_PIPELINE_CACHE = 1 6,VK_OBJECT_TYPE_PIPELINE_LAYOUT = 1 7,VK_OBJECT_TYPE_RENDER_PASS = 1 8,VK_OBJECT_TYPE_PIPELINE = 1 9,VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 2 0,VK_OBJECT_TYPE_SAMPLER = 2 1,VK_OBJECT_TYPE_DESCRIPTOR_POOL = 2 2,VK_OBJECT_TYPE_DESCRIPTOR_SET = 2 3,VK_OBJECT_TYPE_FRAMEBUFFER = 2 4,VK_OBJECT_TYPE_COMMAND_POOL = 2 5,VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1 0 0 0 1 5 6 0 0 0,VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1 0 0 0 0 8 5 0 0 0,VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = 1 0 0 0 2 9 5 0 0 0,VK_OBJECT_TYPE_SURFACE_KHR = 1 0 0 0 0 0 0 0 0 0,VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1 0 0 0 0 0 1 0 0 0,VK_OBJECT_TYPE_DISPLAY_KHR = 1 0 0 0 0 0 2 0 0 0,VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1 0 0 0 0 0 2 0 0 1,VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1 0 0 0 0 1 1 0 0 0,VK_OBJECT_TYPE_VIDEO_SESSION_KHR = 1 0 0 0 0 2 3 0 0 0,VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = 1 0 0 0 0 2 3 0 0 1,VK_OBJECT_TYPE_CU_MODULE_NVX = 1 0 0 0 0 2 9 0 0 0,VK_OBJECT_TYPE_CU_FUNCTION_NVX = 1 0 0 0 0 2 9 0 0 1,VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1 0 0 0 1 2 8 0 0 0,VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1 0 0 0 1 5 0 0 0 0,VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1 0 0 0 1 6 0 0 0 0,VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1 0 0 0 1 6 5 0 0 0,VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1 0 0 0 2 1 0 0 0 0,VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1 0 0 0 2 6 8 0 0 0,VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1 0 0 0 2 7 7 0 0 0,VK_OBJECT_TYPE_CUDA_MODULE_NV = 1 0 0 0 3 0 7 0 0 0,VK_OBJECT_TYPE_CUDA_FUNCTION_NV = 1 0 0 0 3 0 7 0 0 1,VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 1 0 0 0 3 6 6 0 0 0,VK_OBJECT_TYPE_MICROMAP_EXT = 1 0 0 0 3 9 6 0 0 0,VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV = 1 0 0 0 4 6 4 0 0 0,VK_OBJECT_TYPE_SHADER_EXT = 1 0 0 0 4 8 2 0 0 0,VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = VK_OBJECT_TYPE_PRIVATE_DATA_SLOT,VK_OBJECT_TYPE_MAX_ENUM = 0 x7FFFFFFF } VkObjectType ; typedef enum VkVendorId { VK_VENDOR_ID_KHRONOS = 0 x10000,VK_VENDOR_ID_VIV = 0 x10001,VK_VENDOR_ID_VSI = 0 x10002,VK_VENDOR_ID_KAZAN = 0 x10003,VK_VENDOR_ID_CODEPLAY = 0 x10004,VK_VENDOR_ID_MESA = 0 x10005,VK_VENDOR_ID_POCL = 0 x10006,VK_VENDOR_ID_MOBILEYE = 0 x10007,VK_VENDOR_ID_MAX_ENUM = 0 x7FFFFFFF } VkVendorId ; typedef enum VkSystemAllocationScope { VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 0 x7FFFFFFF } VkSystemAllocationScope ; typedef enum VkInternalAllocationType { VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 0 x7FFFFFFF } VkInternalAllocationType ; typedef enum VkFormat { VK_FORMAT_UNDEFINED = 0,VK_FORMAT_R4G4_UNORM_PACK8 = 1,VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,VK_FORMAT_R8_UNORM = 9,VK_FORMAT_R8_SNORM = 1 0,VK_FORMAT_R8_USCALED = 1 1,VK_FORMAT_R8_SSCALED = 1 2,VK_FORMAT_R8_UINT = 1 3,VK_FORMAT_R8_SINT = 1 4,VK_FORMAT_R8_SRGB = 1 5,VK_FORMAT_R8G8_UNORM = 1 6,VK_FORMAT_R8G8_SNORM = 1 7,VK_FORMAT_R8G8_USCALED = 1 8,VK_FORMAT_R8G8_SSCALED = 1 9,VK_FORMAT_R8G8_UINT = 2 0,VK_FORMAT_R8G8_SINT = 2 1,VK_FORMAT_R8G8_SRGB = 2 2,VK_FORMAT_R8G8B8_UNORM = 2 3,VK_FORMAT_R8G8B8_SNORM = 2 4,VK_FORMAT_R8G8B8_USCALED = 2 5,VK_FORMAT_R8G8B8_SSCALED = 2 6,VK_FORMAT_R8G8B8_UINT = 2 7,VK_FORMAT_R8G8B8_SINT = 2 8,VK_FORMAT_R8G8B8_SRGB = 2 9,VK_FORMAT_B8G8R8_UNORM = 3 0,VK_FORMAT_B8G8R8_SNORM = 3 1,VK_FORMAT_B8G8R8_USCALED = 3 2,VK_FORMAT_B8G8R8_SSCALED = 3 3,VK_FORMAT_B8G8R8_UINT = 3 4,VK_FORMAT_B8G8R8_SINT = 3 5,VK_FORMAT_B8G8R8_SRGB = 3 6,VK_FORMAT_R8G8B8A8_UNORM = 3 7,VK_FORMAT_R8G8B8A8_SNORM = 3 8,VK_FORMAT_R8G8B8A8_USCALED = 3 9,VK_FORMAT_R8G8B8A8_SSCALED = 4 0,VK_FORMAT_R8G8B8A8_UINT = 4 1,VK_FORMAT_R8G8B8A8_SINT = 4 2,VK_FORMAT_R8G8B8A8_SRGB = 4 3,VK_FORMAT_B8G8R8A8_UNORM = 4 4,VK_FORMAT_B8G8R8A8_SNORM = 4 5,VK_FORMAT_B8G8R8A8_USCALED = 4 6,VK_FORMAT_B8G8R8A8_SSCALED = 4 7,VK_FORMAT_B8G8R8A8_UINT = 4 8,VK_FORMAT_B8G8R8A8_SINT = 4 9,VK_FORMAT_B8G8R8A8_SRGB = 5 0,VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 5 1,VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 5 2,VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 5 3,VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 5 4,VK_FORMAT_A8B8G8R8_UINT_PACK32 = 5 5,VK_FORMAT_A8B8G8R8_SINT_PACK32 = 5 6,VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 5 7,VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 5 8,VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 5 9,VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 6 0,VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 6 1,VK_FORMAT_A2R10G10B10_UINT_PACK32 = 6 2,VK_FORMAT_A2R10G10B10_SINT_PACK32 = 6 3,VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 6 4,VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 6 5,VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 6 6,VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 6 7,VK_FORMAT_A2B10G10R10_UINT_PACK32 = 6 8,VK_FORMAT_A2B10G10R10_SINT_PACK32 = 6 9,VK_FORMAT_R16_UNORM = 7 0,VK_FORMAT_R16_SNORM = 7 1,VK_FORMAT_R16_USCALED = 7 2,VK_FORMAT_R16_SSCALED = 7 3,VK_FORMAT_R16_UINT = 7 4,VK_FORMAT_R16_SINT = 7 5,VK_FORMAT_R16_SFLOAT = 7 6,VK_FORMAT_R16G16_UNORM = 7 7,VK_FORMAT_R16G16_SNORM = 7 8,VK_FORMAT_R16G16_USCALED = 7 9,VK_FORMAT_R16G16_SSCALED = 8 0,VK_FORMAT_R16G16_UINT = 8 1,VK_FORMAT_R16G16_SINT = 8 2,VK_FORMAT_R16G16_SFLOAT = 8 3,VK_FORMAT_R16G16B16_UNORM = 8 4,VK_FORMAT_R16G16B16_SNORM = 8 5,VK_FORMAT_R16G16B16_USCALED = 8 6,VK_FORMAT_R16G16B16_SSCALED = 8 7,VK_FORMAT_R16G16B16_UINT = 8 8,VK_FORMAT_R16G16B16_SINT = 8 9,VK_FORMAT_R16G16B16_SFLOAT = 9 0,VK_FORMAT_R16G16B16A16_UNORM = 9 1,VK_FORMAT_R16G16B16A16_SNORM = 9 2,VK_FORMAT_R16G16B16A16_USCALED = 9 3,VK_FORMAT_R16G16B16A16_SSCALED = 9 4,VK_FORMAT_R16G16B16A16_UINT = 9 5,VK_FORMAT_R16G16B16A16_SINT = 9 6,VK_FORMAT_R16G16B16A16_SFLOAT = 9 7,VK_FORMAT_R32_UINT = 9 8,VK_FORMAT_R32_SINT = 9 9,VK_FORMAT_R32_SFLOAT = 1 0 0,VK_FORMAT_R32G32_UINT = 1 0 1,VK_FORMAT_R32G32_SINT = 1 0 2,VK_FORMAT_R32G32_SFLOAT = 1 0 3,VK_FORMAT_R32G32B32_UINT = 1 0 4,VK_FORMAT_R32G32B32_SINT = 1 0 5,VK_FORMAT_R32G32B32_SFLOAT = 1 0 6,VK_FORMAT_R32G32B32A32_UINT = 1 0 7,VK_FORMAT_R32G32B32A32_SINT = 1 0 8,VK_FORMAT_R32G32B32A32_SFLOAT = 1 0 9,VK_FORMAT_R64_UINT = 1 1 0,VK_FORMAT_R64_SINT = 1 1 1,VK_FORMAT_R64_SFLOAT = 1 1 2,VK_FORMAT_R64G64_UINT = 1 1 3,VK_FORMAT_R64G64_SINT = 1 1 4,VK_FORMAT_R64G64_SFLOAT = 1 1 5,VK_FORMAT_R64G64B64_UINT = 1 1 6,VK_FORMAT_R64G64B64_SINT = 1 1 7,VK_FORMAT_R64G64B64_SFLOAT = 1 1 8,VK_FORMAT_R64G64B64A64_UINT = 1 1 9,VK_FORMAT_R64G64B64A64_SINT = 1 2 0,VK_FORMAT_R64G64B64A64_SFLOAT = 1 2 1,VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 1 2 2,VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 1 2 3,VK_FORMAT_D16_UNORM = 1 2 4,VK_FORMAT_X8_D24_UNORM_PACK32 = 1 2 5,VK_FORMAT_D32_SFLOAT = 1 2 6,VK_FORMAT_S8_UINT = 1 2 7,VK_FORMAT_D16_UNORM_S8_UINT = 1 2 8,VK_FORMAT_D24_UNORM_S8_UINT = 1 2 9,VK_FORMAT_D32_SFLOAT_S8_UINT = 1 3 0,VK_FORMAT_BC1_RGB_UNORM_BLOCK = 1 3 1,VK_FORMAT_BC1_RGB_SRGB_BLOCK = 1 3 2,VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 1 3 3,VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 1 3 4,VK_FORMAT_BC2_UNORM_BLOCK = 1 3 5,VK_FORMAT_BC2_SRGB_BLOCK = 1 3 6,VK_FORMAT_BC3_UNORM_BLOCK = 1 3 7,VK_FORMAT_BC3_SRGB_BLOCK = 1 3 8,VK_FORMAT_BC4_UNORM_BLOCK = 1 3 9,VK_FORMAT_BC4_SNORM_BLOCK = 1 4 0,VK_FORMAT_BC5_UNORM_BLOCK = 1 4 1,VK_FORMAT_BC5_SNORM_BLOCK = 1 4 2,VK_FORMAT_BC6H_UFLOAT_BLOCK = 1 4 3,VK_FORMAT_BC6H_SFLOAT_BLOCK = 1 4 4,VK_FORMAT_BC7_UNORM_BLOCK = 1 4 5,VK_FORMAT_BC7_SRGB_BLOCK = 1 4 6,VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 1 4 7,VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 1 4 8,VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 1 4 9,VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 1 5 0,VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 1 5 1,VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 1 5 2,VK_FORMAT_EAC_R11_UNORM_BLOCK = 1 5 3,VK_FORMAT_EAC_R11_SNORM_BLOCK = 1 5 4,VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 1 5 5,VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 1 5 6,VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 1 5 7,VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 1 5 8,VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 1 5 9,VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 1 6 0,VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 1 6 1,VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 1 6 2,VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 1 6 3,VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 1 6 4,VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 1 6 5,VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 1 6 6,VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 1 6 7,VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 1 6 8,VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 1 6 9,VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 1 7 0,VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 1 7 1,VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 1 7 2,VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 1 7 3,VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 1 7 4,VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 1 7 5,VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 1 7 6,VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 1 7 7,VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 1 7 8,VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 1 7 9,VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 1 8 0,VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 1 8 1,VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 1 8 2,VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 1 8 3,VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 1 8 4,VK_FORMAT_G8B8G8R8_422_UNORM = 1 0 0 0 1 5 6 0 0 0,VK_FORMAT_B8G8R8G8_422_UNORM = 1 0 0 0 1 5 6 0 0 1,VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1 0 0 0 1 5 6 0 0 2,VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1 0 0 0 1 5 6 0 0 3,VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1 0 0 0 1 5 6 0 0 4,VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1 0 0 0 1 5 6 0 0 5,VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1 0 0 0 1 5 6 0 0 6,VK_FORMAT_R10X6_UNORM_PACK16 = 1 0 0 0 1 5 6 0 0 7,VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1 0 0 0 1 5 6 0 0 8,VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1 0 0 0 1 5 6 0 0 9,VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1 0 0 0 1 5 6 0 1 0,VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1 0 0 0 1 5 6 0 1 1,VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1 0 0 0 1 5 6 0 1 2,VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1 0 0 0 1 5 6 0 1 3,VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1 0 0 0 1 5 6 0 1 4,VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1 0 0 0 1 5 6 0 1 5,VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1 0 0 0 1 5 6 0 1 6,VK_FORMAT_R12X4_UNORM_PACK16 = 1 0 0 0 1 5 6 0 1 7,VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1 0 0 0 1 5 6 0 1 8,VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1 0 0 0 1 5 6 0 1 9,VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1 0 0 0 1 5 6 0 2 0,VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1 0 0 0 1 5 6 0 2 1,VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1 0 0 0 1 5 6 0 2 2,VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1 0 0 0 1 5 6 0 2 3,VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1 0 0 0 1 5 6 0 2 4,VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1 0 0 0 1 5 6 0 2 5,VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1 0 0 0 1 5 6 0 2 6,VK_FORMAT_G16B16G16R16_422_UNORM = 1 0 0 0 1 5 6 0 2 7,VK_FORMAT_B16G16R16G16_422_UNORM = 1 0 0 0 1 5 6 0 2 8,VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1 0 0 0 1 5 6 0 2 9,VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1 0 0 0 1 5 6 0 3 0,VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1 0 0 0 1 5 6 0 3 1,VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1 0 0 0 1 5 6 0 3 2,VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1 0 0 0 1 5 6 0 3 3,VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = 1 0 0 0 3 3 0 0 0 0,VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1 0 0 0 3 3 0 0 0 1,VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1 0 0 0 3 3 0 0 0 2,VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = 1 0 0 0 3 3 0 0 0 3,VK_FORMAT_A4R4G4B4_UNORM_PACK16 = 1 0 0 0 3 4 0 0 0 0,VK_FORMAT_A4B4G4R4_UNORM_PACK16 = 1 0 0 0 3 4 0 0 0 1,VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = 1 0 0 0 0 6 6 0 0 0,VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1 0 0 0 0 6 6 0 0 1,VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = 1 0 0 0 0 6 6 0 0 2,VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = 1 0 0 0 0 6 6 0 0 3,VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = 1 0 0 0 0 6 6 0 0 4,VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = 1 0 0 0 0 6 6 0 0 5,VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = 1 0 0 0 0 6 6 0 0 6,VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = 1 0 0 0 0 6 6 0 0 7,VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = 1 0 0 0 0 6 6 0 0 8,VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = 1 0 0 0 0 6 6 0 0 9,VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = 1 0 0 0 0 6 6 0 1 0,VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = 1 0 0 0 0 6 6 0 1 1,VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = 1 0 0 0 0 6 6 0 1 2,VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = 1 0 0 0 0 6 6 0 1 3,VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1 0 0 0 0 5 4 0 0 0,VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1 0 0 0 0 5 4 0 0 1,VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1 0 0 0 0 5 4 0 0 2,VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1 0 0 0 0 5 4 0 0 3,VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1 0 0 0 0 5 4 0 0 4,VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1 0 0 0 0 5 4 0 0 5,VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1 0 0 0 0 5 4 0 0 6,VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1 0 0 0 0 5 4 0 0 7,VK_FORMAT_R16G16_SFIXED5_NV = 1 0 0 0 4 6 4 0 0 0,VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR = 1 0 0 0 4 7 0 0 0 0,VK_FORMAT_A8_UNORM_KHR = 1 0 0 0 4 7 0 0 0 1,VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK,VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK,VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK,VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK,VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK,VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK,VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK,VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK,VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK,VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK,VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK,VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK,VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK,VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK,VK_FORMAT_G8B8G8R8_422_UNORM_KHR = VK_FORMAT_G8B8G8R8_422_UNORM,VK_FORMAT_B8G8R8G8_422_UNORM_KHR = VK_FORMAT_B8G8R8G8_422_UNORM,VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,VK_FORMAT_R10X6_UNORM_PACK16_KHR = VK_FORMAT_R10X6_UNORM_PACK16,VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = VK_FORMAT_R10X6G10X6_UNORM_2PACK16,VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,VK_FORMAT_R12X4_UNORM_PACK16_KHR = VK_FORMAT_R12X4_UNORM_PACK16,VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = VK_FORMAT_R12X4G12X4_UNORM_2PACK16,VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,VK_FORMAT_G16B16G16R16_422_UNORM_KHR = VK_FORMAT_G16B16G16R16_422_UNORM,VK_FORMAT_B16G16R16G16_422_UNORM_KHR = VK_FORMAT_B16G16R16G16_422_UNORM,VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = VK_FORMAT_G8_B8R8_2PLANE_444_UNORM,VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16,VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16,VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = VK_FORMAT_G16_B16R16_2PLANE_444_UNORM,VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = VK_FORMAT_A4R4G4B4_UNORM_PACK16,VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = VK_FORMAT_A4B4G4R4_UNORM_PACK16,VK_FORMAT_R16G16_S10_5_NV = VK_FORMAT_R16G16_SFIXED5_NV,VK_FORMAT_MAX_ENUM = 0 x7FFFFFFF } VkFormat ; typedef enum VkImageTiling { VK_IMAGE_TILING_OPTIMAL = 0,VK_IMAGE_TILING_LINEAR = 1,VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1 0 0 0 1 5 8 0 0 0,VK_IMAGE_TILING_MAX_ENUM = 0 x7FFFFFFF } VkImageTiling ; typedef enum VkImageType { VK_IMAGE_TYPE_1D = 0,VK_IMAGE_TYPE_2D = 1,VK_IMAGE_TYPE_3D = 2,VK_IMAGE_TYPE_MAX_ENUM = 0 x7FFFFFFF } VkImageType ; typedef enum VkPhysicalDeviceType { VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,VK_PHYSICAL_DEVICE_TYPE_CPU = 4,VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 0 x7FFFFFFF } VkPhysicalDeviceType ; typedef enum VkQueryType { VK_QUERY_TYPE_OCCLUSION = 0,VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,VK_QUERY_TYPE_TIMESTAMP = 2,VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 1 0 0 0 0 2 3 0 0 0,VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1 0 0 0 0 2 8 0 0 4,VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1 0 0 0 1 1 6 0 0 0,VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1 0 0 0 1 5 0 0 0 0,VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1 0 0 0 1 5 0 0 0 1,VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1 0 0 0 1 6 5 0 0 0,VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1 0 0 0 2 1 0 0 0 0,VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR = 1 0 0 0 2 9 9 0 0 0,VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT = 1 0 0 0 3 2 8 0 0 0,VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT = 1 0 0 0 3 8 2 0 0 0,VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR = 1 0 0 0 3 8 6 0 0 0,VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR = 1 0 0 0 3 8 6 0 0 1,VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT = 1 0 0 0 3 9 6 0 0 0,VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT = 1 0 0 0 3 9 6 0 0 1,VK_QUERY_TYPE_MAX_ENUM = 0 x7FFFFFFF } VkQueryType ; typedef enum VkSharingMode { VK_SHARING_MODE_EXCLUSIVE = 0,VK_SHARING_MODE_CONCURRENT = 1,VK_SHARING_MODE_MAX_ENUM = 0 x7FFFFFFF } VkSharingMode ; typedef enum VkComponentSwizzle { VK_COMPONENT_SWIZZLE_IDENTITY = 0,VK_COMPONENT_SWIZZLE_ZERO = 1,VK_COMPONENT_SWIZZLE_ONE = 2,VK_COMPONENT_SWIZZLE_R = 3,VK_COMPONENT_SWIZZLE_G = 4,VK_COMPONENT_SWIZZLE_B = 5,VK_COMPONENT_SWIZZLE_A = 6,VK_COMPONENT_SWIZZLE_MAX_ENUM = 0 x7FFFFFFF } VkComponentSwizzle ; typedef enum VkImageViewType { VK_IMAGE_VIEW_TYPE_1D = 0,VK_IMAGE_VIEW_TYPE_2D = 1,VK_IMAGE_VIEW_TYPE_3D = 2,VK_IMAGE_VIEW_TYPE_CUBE = 3,VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,VK_IMAGE_VIEW_TYPE_MAX_ENUM = 0 x7FFFFFFF } VkImageViewType ; typedef enum VkBlendFactor { VK_BLEND_FACTOR_ZERO = 0,VK_BLEND_FACTOR_ONE = 1,VK_BLEND_FACTOR_SRC_COLOR = 2,VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,VK_BLEND_FACTOR_DST_COLOR = 4,VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,VK_BLEND_FACTOR_SRC_ALPHA = 6,VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,VK_BLEND_FACTOR_DST_ALPHA = 8,VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,VK_BLEND_FACTOR_CONSTANT_COLOR = 1 0,VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 1 1,VK_BLEND_FACTOR_CONSTANT_ALPHA = 1 2,VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 1 3,VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 1 4,VK_BLEND_FACTOR_SRC1_COLOR = 1 5,VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 1 6,VK_BLEND_FACTOR_SRC1_ALPHA = 1 7,VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 1 8,VK_BLEND_FACTOR_MAX_ENUM = 0 x7FFFFFFF } VkBlendFactor ; typedef enum VkBlendOp { VK_BLEND_OP_ADD = 0,VK_BLEND_OP_SUBTRACT = 1,VK_BLEND_OP_REVERSE_SUBTRACT = 2,VK_BLEND_OP_MIN = 3,VK_BLEND_OP_MAX = 4,VK_BLEND_OP_ZERO_EXT = 1 0 0 0 1 4 8 0 0 0,VK_BLEND_OP_SRC_EXT = 1 0 0 0 1 4 8 0 0 1,VK_BLEND_OP_DST_EXT = 1 0 0 0 1 4 8 0 0 2,VK_BLEND_OP_SRC_OVER_EXT = 1 0 0 0 1 4 8 0 0 3,VK_BLEND_OP_DST_OVER_EXT = 1 0 0 0 1 4 8 0 0 4,VK_BLEND_OP_SRC_IN_EXT = 1 0 0 0 1 4 8 0 0 5,VK_BLEND_OP_DST_IN_EXT = 1 0 0 0 1 4 8 0 0 6,VK_BLEND_OP_SRC_OUT_EXT = 1 0 0 0 1 4 8 0 0 7,VK_BLEND_OP_DST_OUT_EXT = 1 0 0 0 1 4 8 0 0 8,VK_BLEND_OP_SRC_ATOP_EXT = 1 0 0 0 1 4 8 0 0 9,VK_BLEND_OP_DST_ATOP_EXT = 1 0 0 0 1 4 8 0 1 0,VK_BLEND_OP_XOR_EXT = 1 0 0 0 1 4 8 0 1 1,VK_BLEND_OP_MULTIPLY_EXT = 1 0 0 0 1 4 8 0 1 2,VK_BLEND_OP_SCREEN_EXT = 1 0 0 0 1 4 8 0 1 3,VK_BLEND_OP_OVERLAY_EXT = 1 0 0 0 1 4 8 0 1 4,VK_BLEND_OP_DARKEN_EXT = 1 0 0 0 1 4 8 0 1 5,VK_BLEND_OP_LIGHTEN_EXT = 1 0 0 0 1 4 8 0 1 6,VK_BLEND_OP_COLORDODGE_EXT = 1 0 0 0 1 4 8 0 1 7,VK_BLEND_OP_COLORBURN_EXT = 1 0 0 0 1 4 8 0 1 8,VK_BLEND_OP_HARDLIGHT_EXT = 1 0 0 0 1 4 8 0 1 9,VK_BLEND_OP_SOFTLIGHT_EXT = 1 0 0 0 1 4 8 0 2 0,VK_BLEND_OP_DIFFERENCE_EXT = 1 0 0 0 1 4 8 0 2 1,VK_BLEND_OP_EXCLUSION_EXT = 1 0 0 0 1 4 8 0 2 2,VK_BLEND_OP_INVERT_EXT = 1 0 0 0 1 4 8 0 2 3,VK_BLEND_OP_INVERT_RGB_EXT = 1 0 0 0 1 4 8 0 2 4,VK_BLEND_OP_LINEARDODGE_EXT = 1 0 0 0 1 4 8 0 2 5,VK_BLEND_OP_LINEARBURN_EXT = 1 0 0 0 1 4 8 0 2 6,VK_BLEND_OP_VIVIDLIGHT_EXT = 1 0 0 0 1 4 8 0 2 7,VK_BLEND_OP_LINEARLIGHT_EXT = 1 0 0 0 1 4 8 0 2 8,VK_BLEND_OP_PINLIGHT_EXT = 1 0 0 0 1 4 8 0 2 9,VK_BLEND_OP_HARDMIX_EXT = 1 0 0 0 1 4 8 0 3 0,VK_BLEND_OP_HSL_HUE_EXT = 1 0 0 0 1 4 8 0 3 1,VK_BLEND_OP_HSL_SATURATION_EXT = 1 0 0 0 1 4 8 0 3 2,VK_BLEND_OP_HSL_COLOR_EXT = 1 0 0 0 1 4 8 0 3 3,VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1 0 0 0 1 4 8 0 3 4,VK_BLEND_OP_PLUS_EXT = 1 0 0 0 1 4 8 0 3 5,VK_BLEND_OP_PLUS_CLAMPED_EXT = 1 0 0 0 1 4 8 0 3 6,VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1 0 0 0 1 4 8 0 3 7,VK_BLEND_OP_PLUS_DARKER_EXT = 1 0 0 0 1 4 8 0 3 8,VK_BLEND_OP_MINUS_EXT = 1 0 0 0 1 4 8 0 3 9,VK_BLEND_OP_MINUS_CLAMPED_EXT = 1 0 0 0 1 4 8 0 4 0,VK_BLEND_OP_CONTRAST_EXT = 1 0 0 0 1 4 8 0 4 1,VK_BLEND_OP_INVERT_OVG_EXT = 1 0 0 0 1 4 8 0 4 2,VK_BLEND_OP_RED_EXT = 1 0 0 0 1 4 8 0 4 3,VK_BLEND_OP_GREEN_EXT = 1 0 0 0 1 4 8 0 4 4,VK_BLEND_OP_BLUE_EXT = 1 0 0 0 1 4 8 0 4 5,VK_BLEND_OP_MAX_ENUM = 0 x7FFFFFFF } VkBlendOp ; typedef enum VkCompareOp { VK_COMPARE_OP_NEVER = 0,VK_COMPARE_OP_LESS = 1,VK_COMPARE_OP_EQUAL = 2,VK_COMPARE_OP_LESS_OR_EQUAL = 3,VK_COMPARE_OP_GREATER = 4,VK_COMPARE_OP_NOT_EQUAL = 5,VK_COMPARE_OP_GREATER_OR_EQUAL = 6,VK_COMPARE_OP_ALWAYS = 7,VK_COMPARE_OP_MAX_ENUM = 0 x7FFFFFFF } VkCompareOp ; typedef enum VkDynamicState { VK_DYNAMIC_STATE_VIEWPORT = 0,VK_DYNAMIC_STATE_SCISSOR = 1,VK_DYNAMIC_STATE_LINE_WIDTH = 2,VK_DYNAMIC_STATE_DEPTH_BIAS = 3,VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,VK_DYNAMIC_STATE_CULL_MODE = 1 0 0 0 2 6 7 0 0 0,VK_DYNAMIC_STATE_FRONT_FACE = 1 0 0 0 2 6 7 0 0 1,VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1 0 0 0 2 6 7 0 0 2,VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1 0 0 0 2 6 7 0 0 3,VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1 0 0 0 2 6 7 0 0 4,VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1 0 0 0 2 6 7 0 0 5,VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1 0 0 0 2 6 7 0 0 6,VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1 0 0 0 2 6 7 0 0 7,VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 1 0 0 0 2 6 7 0 0 8,VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1 0 0 0 2 6 7 0 0 9,VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1 0 0 0 2 6 7 0 1 0,VK_DYNAMIC_STATE_STENCIL_OP = 1 0 0 0 2 6 7 0 1 1,VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1 0 0 0 3 7 7 0 0 1,VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 1 0 0 0 3 7 7 0 0 2,VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 1 0 0 0 3 7 7 0 0 4,VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1 0 0 0 0 8 7 0 0 0,VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1 0 0 0 0 9 9 0 0 0,VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT = 1 0 0 0 0 9 9 0 0 1,VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT = 1 0 0 0 0 9 9 0 0 2,VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1 0 0 0 1 4 3 0 0 0,VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1 0 0 0 3 4 7 0 0 0,VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1 0 0 0 1 6 4 0 0 4,VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1 0 0 0 1 6 4 0 0 6,VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV = 1 0 0 0 2 0 5 0 0 0,VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1 0 0 0 2 0 5 0 0 1,VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1 0 0 0 2 2 6 0 0 0,VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = 1 0 0 0 3 5 2 0 0 0,VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1 0 0 0 3 7 7 0 0 0,VK_DYNAMIC_STATE_LOGIC_OP_EXT = 1 0 0 0 3 7 7 0 0 3,VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1 0 0 0 3 8 1 0 0 0,VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT = 1 0 0 0 4 5 5 0 0 3,VK_DYNAMIC_STATE_POLYGON_MODE_EXT = 1 0 0 0 4 5 5 0 0 4,VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT = 1 0 0 0 4 5 5 0 0 5,VK_DYNAMIC_STATE_SAMPLE_MASK_EXT = 1 0 0 0 4 5 5 0 0 6,VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT = 1 0 0 0 4 5 5 0 0 7,VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT = 1 0 0 0 4 5 5 0 0 8,VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT = 1 0 0 0 4 5 5 0 0 9,VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT = 1 0 0 0 4 5 5 0 1 0,VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT = 1 0 0 0 4 5 5 0 1 1,VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT = 1 0 0 0 4 5 5 0 1 2,VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT = 1 0 0 0 4 5 5 0 0 2,VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT = 1 0 0 0 4 5 5 0 1 3,VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT = 1 0 0 0 4 5 5 0 1 4,VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = 1 0 0 0 4 5 5 0 1 5,VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT = 1 0 0 0 4 5 5 0 1 6,VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT = 1 0 0 0 4 5 5 0 1 7,VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT = 1 0 0 0 4 5 5 0 1 8,VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT = 1 0 0 0 4 5 5 0 1 9,VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT = 1 0 0 0 4 5 5 0 2 0,VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT = 1 0 0 0 4 5 5 0 2 1,VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = 1 0 0 0 4 5 5 0 2 2,VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV = 1 0 0 0 4 5 5 0 2 3,VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV = 1 0 0 0 4 5 5 0 2 4,VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV = 1 0 0 0 4 5 5 0 2 5,VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV = 1 0 0 0 4 5 5 0 2 6,VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV = 1 0 0 0 4 5 5 0 2 7,VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV = 1 0 0 0 4 5 5 0 2 8,VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV = 1 0 0 0 4 5 5 0 2 9,VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV = 1 0 0 0 4 5 5 0 3 0,VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = 1 0 0 0 4 5 5 0 3 1,VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV = 1 0 0 0 4 5 5 0 3 2,VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT = 1 0 0 0 5 2 4 0 0 0,VK_DYNAMIC_STATE_LINE_STIPPLE_KHR = 1 0 0 0 2 5 9 0 0 0,VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = VK_DYNAMIC_STATE_LINE_STIPPLE_KHR,VK_DYNAMIC_STATE_CULL_MODE_EXT = VK_DYNAMIC_STATE_CULL_MODE,VK_DYNAMIC_STATE_FRONT_FACE_EXT = VK_DYNAMIC_STATE_FRONT_FACE,VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY,VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT,VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT,VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE,VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE,VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE,VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = VK_DYNAMIC_STATE_DEPTH_COMPARE_OP,VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE,VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE,VK_DYNAMIC_STATE_STENCIL_OP_EXT = VK_DYNAMIC_STATE_STENCIL_OP,VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE,VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE,VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE,VK_DYNAMIC_STATE_MAX_ENUM = 0 x7FFFFFFF } VkDynamicState ; typedef enum VkFrontFace { VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,VK_FRONT_FACE_CLOCKWISE = 1,VK_FRONT_FACE_MAX_ENUM = 0 x7FFFFFFF } VkFrontFace ; typedef enum VkVertexInputRate { VK_VERTEX_INPUT_RATE_VERTEX = 0,VK_VERTEX_INPUT_RATE_INSTANCE = 1,VK_VERTEX_INPUT_RATE_MAX_ENUM = 0 x7FFFFFFF } VkVertexInputRate ; typedef enum VkPrimitiveTopology { VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 1 0,VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 0 x7FFFFFFF } VkPrimitiveTopology ; typedef enum VkPolygonMode { VK_POLYGON_MODE_FILL = 0,VK_POLYGON_MODE_LINE = 1,VK_POLYGON_MODE_POINT = 2,VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1 0 0 0 1 5 3 0 0 0,VK_POLYGON_MODE_MAX_ENUM = 0 x7FFFFFFF } VkPolygonMode ; typedef enum VkStencilOp { VK_STENCIL_OP_KEEP = 0,VK_STENCIL_OP_ZERO = 1,VK_STENCIL_OP_REPLACE = 2,VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,VK_STENCIL_OP_INVERT = 5,VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,VK_STENCIL_OP_MAX_ENUM = 0 x7FFFFFFF } VkStencilOp ; typedef enum VkLogicOp { VK_LOGIC_OP_CLEAR = 0,VK_LOGIC_OP_AND = 1,VK_LOGIC_OP_AND_REVERSE = 2,VK_LOGIC_OP_COPY = 3,VK_LOGIC_OP_AND_INVERTED = 4,VK_LOGIC_OP_NO_OP = 5,VK_LOGIC_OP_XOR = 6,VK_LOGIC_OP_OR = 7,VK_LOGIC_OP_NOR = 8,VK_LOGIC_OP_EQUIVALENT = 9,VK_LOGIC_OP_INVERT = 1 0,VK_LOGIC_OP_OR_REVERSE = 1 1,VK_LOGIC_OP_COPY_INVERTED = 1 2,VK_LOGIC_OP_OR_INVERTED = 1 3,VK_LOGIC_OP_NAND = 1 4,VK_LOGIC_OP_SET = 1 5,VK_LOGIC_OP_MAX_ENUM = 0 x7FFFFFFF } VkLogicOp ; typedef enum VkBorderColor { VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1 0 0 0 2 8 7 0 0 3,VK_BORDER_COLOR_INT_CUSTOM_EXT = 1 0 0 0 2 8 7 0 0 4,VK_BORDER_COLOR_MAX_ENUM = 0 x7FFFFFFF } VkBorderColor ; typedef enum VkFilter { VK_FILTER_NEAREST = 0,VK_FILTER_LINEAR = 1,VK_FILTER_CUBIC_EXT = 1 0 0 0 0 1 5 0 0 0,VK_FILTER_CUBIC_IMG = VK_FILTER_CUBIC_EXT,VK_FILTER_MAX_ENUM = 0 x7FFFFFFF } VkFilter ; typedef enum VkSamplerAddressMode { VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 0 x7FFFFFFF } VkSamplerAddressMode ; typedef enum VkSamplerMipmapMode { VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 0 x7FFFFFFF } VkSamplerMipmapMode ; typedef enum VkDescriptorType { VK_DESCRIPTOR_TYPE_SAMPLER = 0,VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 1 0,VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1 0 0 0 1 3 8 0 0 0,VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1 0 0 0 1 5 0 0 0 0,VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1 0 0 0 1 6 5 0 0 0,VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM = 1 0 0 0 4 4 0 0 0 0,VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM = 1 0 0 0 4 4 0 0 0 1,VK_DESCRIPTOR_TYPE_MUTABLE_EXT = 1 0 0 0 3 5 1 0 0 0,VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK,VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = VK_DESCRIPTOR_TYPE_MUTABLE_EXT,VK_DESCRIPTOR_TYPE_MAX_ENUM = 0 x7FFFFFFF } VkDescriptorType ; typedef enum VkAttachmentLoadOp { VK_ATTACHMENT_LOAD_OP_LOAD = 0,VK_ATTACHMENT_LOAD_OP_CLEAR = 1,VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,VK_ATTACHMENT_LOAD_OP_NONE_KHR = 1 0 0 0 4 0 0 0 0 0,VK_ATTACHMENT_LOAD_OP_NONE_EXT = VK_ATTACHMENT_LOAD_OP_NONE_KHR,VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 0 x7FFFFFFF } VkAttachmentLoadOp ; typedef enum VkAttachmentStoreOp { VK_ATTACHMENT_STORE_OP_STORE = 0,VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,VK_ATTACHMENT_STORE_OP_NONE = 1 0 0 0 3 0 1 0 0 0,VK_ATTACHMENT_STORE_OP_NONE_KHR = VK_ATTACHMENT_STORE_OP_NONE,VK_ATTACHMENT_STORE_OP_NONE_QCOM = VK_ATTACHMENT_STORE_OP_NONE,VK_ATTACHMENT_STORE_OP_NONE_EXT = VK_ATTACHMENT_STORE_OP_NONE,VK_ATTACHMENT_STORE_OP_MAX_ENUM = 0 x7FFFFFFF } VkAttachmentStoreOp ; typedef enum VkPipelineBindPoint { VK_PIPELINE_BIND_POINT_GRAPHICS = 0,VK_PIPELINE_BIND_POINT_COMPUTE = 1,# ifdef VK_ENABLE_BETA_EXTENSIONS VK_PIPELINE_BIND_POINT_EXECUTION_GRAPH_AMDX = 1 0 0 0 1 3 4 0 0 0,# endif VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1 0 0 0 1 6 5 0 0 0,VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 1 0 0 0 3 6 9 0 0 3,VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR,VK_PIPELINE_BIND_POINT_MAX_ENUM = 0 x7FFFFFFF } VkPipelineBindPoint ; typedef enum VkCommandBufferLevel { VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 0 x7FFFFFFF } VkCommandBufferLevel ; typedef enum VkIndexType { VK_INDEX_TYPE_UINT16 = 0,VK_INDEX_TYPE_UINT32 = 1,VK_INDEX_TYPE_NONE_KHR = 1 0 0 0 1 6 5 0 0 0,VK_INDEX_TYPE_UINT8_KHR = 1 0 0 0 2 6 5 0 0 0,VK_INDEX_TYPE_NONE_NV = VK_INDEX_TYPE_NONE_KHR,VK_INDEX_TYPE_UINT8_EXT = VK_INDEX_TYPE_UINT8_KHR,VK_INDEX_TYPE_MAX_ENUM = 0 x7FFFFFFF } VkIndexType ; typedef enum VkSubpassContents { VK_SUBPASS_CONTENTS_INLINE = 0,VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR = 1 0 0 0 4 5 1 0 0 0,VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT = VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR,VK_SUBPASS_CONTENTS_MAX_ENUM = 0 x7FFFFFFF } VkSubpassContents ; typedef enum VkAccessFlagBits { VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 0 x00000001,VK_ACCESS_INDEX_READ_BIT = 0 x00000002,VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0 x00000004,VK_ACCESS_UNIFORM_READ_BIT = 0 x00000008,VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 0 x00000010,VK_ACCESS_SHADER_READ_BIT = 0 x00000020,VK_ACCESS_SHADER_WRITE_BIT = 0 x00000040,VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 0 x00000080,VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0 x00000100,VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0 x00000200,VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0 x00000400,VK_ACCESS_TRANSFER_READ_BIT = 0 x00000800,VK_ACCESS_TRANSFER_WRITE_BIT = 0 x00001000,VK_ACCESS_HOST_READ_BIT = 0 x00002000,VK_ACCESS_HOST_WRITE_BIT = 0 x00004000,VK_ACCESS_MEMORY_READ_BIT = 0 x00008000,VK_ACCESS_MEMORY_WRITE_BIT = 0 x00010000,VK_ACCESS_NONE = 0,VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 0 x02000000,VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 0 x04000000,VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 0 x08000000,VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 0 x00100000,VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0 x00080000,VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 0 x00200000,VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 0 x00400000,VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0 x01000000,VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 0 x00800000,VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 0 x00020000,VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 0 x00040000,VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR,VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,VK_ACCESS_NONE_KHR = VK_ACCESS_NONE,VK_ACCESS_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkAccessFlagBits ; typedef VkFlags VkAccessFlags ; typedef enum VkImageAspectFlagBits { VK_IMAGE_ASPECT_COLOR_BIT = 0 x00000001,VK_IMAGE_ASPECT_DEPTH_BIT = 0 x00000002,VK_IMAGE_ASPECT_STENCIL_BIT = 0 x00000004,VK_IMAGE_ASPECT_METADATA_BIT = 0 x00000008,VK_IMAGE_ASPECT_PLANE_0_BIT = 0 x00000010,VK_IMAGE_ASPECT_PLANE_1_BIT = 0 x00000020,VK_IMAGE_ASPECT_PLANE_2_BIT = 0 x00000040,VK_IMAGE_ASPECT_NONE = 0,VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 0 x00000080,VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 0 x00000100,VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 0 x00000200,VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 0 x00000400,VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = VK_IMAGE_ASPECT_PLANE_0_BIT,VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = VK_IMAGE_ASPECT_PLANE_1_BIT,VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = VK_IMAGE_ASPECT_PLANE_2_BIT,VK_IMAGE_ASPECT_NONE_KHR = VK_IMAGE_ASPECT_NONE,VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkImageAspectFlagBits ; typedef VkFlags VkImageAspectFlags ; typedef enum VkFormatFeatureFlagBits { VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 0 x00000001,VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 0 x00000002,VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 0 x00000004,VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 0 x00000008,VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 0 x00000010,VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0 x00000020,VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 0 x00000040,VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 0 x00000080,VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 0 x00000100,VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 0 x00000200,VK_FORMAT_FEATURE_BLIT_SRC_BIT = 0 x00000400,VK_FORMAT_FEATURE_BLIT_DST_BIT = 0 x00000800,VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0 x00001000,VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 0 x00004000,VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 0 x00008000,VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 0 x00020000,VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 0 x00040000,VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 0 x00080000,VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 0 x00100000,VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0 x00200000,VK_FORMAT_FEATURE_DISJOINT_BIT = 0 x00400000,VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 0 x00800000,VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 0 x00010000,VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR = 0 x02000000,VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR = 0 x04000000,VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 0 x20000000,VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 0 x00002000,VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0 x01000000,VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0 x40000000,VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR = 0 x08000000,VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR = 0 x10000000,VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT,VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_SRC_BIT,VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_DST_BIT,VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT,VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT,VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = VK_FORMAT_FEATURE_DISJOINT_BIT,VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT,VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkFormatFeatureFlagBits ; typedef VkFlags VkFormatFeatureFlags ; typedef enum VkImageCreateFlagBits { VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 0 x00000001,VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 0 x00000002,VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 0 x00000004,VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 0 x00000008,VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 0 x00000010,VK_IMAGE_CREATE_ALIAS_BIT = 0 x00000400,VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 0 x00000040,VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 0 x00000020,VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 0 x00000080,VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 0 x00000100,VK_IMAGE_CREATE_PROTECTED_BIT = 0 x00000800,VK_IMAGE_CREATE_DISJOINT_BIT = 0 x00000200,VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 0 x00002000,VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 0 x00001000,VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 0 x00004000,VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 0 x00010000,VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT = 0 x00040000,VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT = 0 x00020000,VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = 0 x00008000,VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR = 0 x00100000,VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,VK_IMAGE_CREATE_DISJOINT_BIT_KHR = VK_IMAGE_CREATE_DISJOINT_BIT,VK_IMAGE_CREATE_ALIAS_BIT_KHR = VK_IMAGE_CREATE_ALIAS_BIT,VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkImageCreateFlagBits ; typedef VkFlags VkImageCreateFlags ; typedef enum VkSampleCountFlagBits { VK_SAMPLE_COUNT_1_BIT = 0 x00000001,VK_SAMPLE_COUNT_2_BIT = 0 x00000002,VK_SAMPLE_COUNT_4_BIT = 0 x00000004,VK_SAMPLE_COUNT_8_BIT = 0 x00000008,VK_SAMPLE_COUNT_16_BIT = 0 x00000010,VK_SAMPLE_COUNT_32_BIT = 0 x00000020,VK_SAMPLE_COUNT_64_BIT = 0 x00000040,VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkSampleCountFlagBits ; typedef VkFlags VkSampleCountFlags ; typedef enum VkImageUsageFlagBits { VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 0 x00000001,VK_IMAGE_USAGE_TRANSFER_DST_BIT = 0 x00000002,VK_IMAGE_USAGE_SAMPLED_BIT = 0 x00000004,VK_IMAGE_USAGE_STORAGE_BIT = 0 x00000008,VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0 x00000010,VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0 x00000020,VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 0 x00000040,VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 0 x00000080,VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR = 0 x00000400,VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 0 x00000800,VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = 0 x00001000,VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0 x00000200,VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0 x00000100,VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT = 0 x00400000,VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 0 x00002000,VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 0 x00004000,VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR = 0 x00008000,VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 0 x00080000,VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = 0 x00040000,VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM = 0 x00100000,VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM = 0 x00200000,VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkImageUsageFlagBits ; typedef VkFlags VkImageUsageFlags ; typedef enum VkInstanceCreateFlagBits { VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR = 0 x00000001,VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkInstanceCreateFlagBits ; typedef VkFlags VkInstanceCreateFlags ; typedef enum VkMemoryHeapFlagBits { VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 0 x00000001,VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 0 x00000002,VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VK_MEMORY_HEAP_MULTI_INSTANCE_BIT,VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkMemoryHeapFlagBits ; typedef VkFlags VkMemoryHeapFlags ; typedef enum VkMemoryPropertyFlagBits { VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 0 x00000001,VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 0 x00000002,VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 0 x00000004,VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 0 x00000008,VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0 x00000010,VK_MEMORY_PROPERTY_PROTECTED_BIT = 0 x00000020,VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 0 x00000040,VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 0 x00000080,VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 0 x00000100,VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkMemoryPropertyFlagBits ; typedef VkFlags VkMemoryPropertyFlags ; typedef enum VkQueueFlagBits { VK_QUEUE_GRAPHICS_BIT = 0 x00000001,VK_QUEUE_COMPUTE_BIT = 0 x00000002,VK_QUEUE_TRANSFER_BIT = 0 x00000004,VK_QUEUE_SPARSE_BINDING_BIT = 0 x00000008,VK_QUEUE_PROTECTED_BIT = 0 x00000010,VK_QUEUE_VIDEO_DECODE_BIT_KHR = 0 x00000020,VK_QUEUE_VIDEO_ENCODE_BIT_KHR = 0 x00000040,VK_QUEUE_OPTICAL_FLOW_BIT_NV = 0 x00000100,VK_QUEUE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkQueueFlagBits ; typedef VkFlags VkQueueFlags ; typedef VkFlags VkDeviceCreateFlags ; typedef enum VkDeviceQueueCreateFlagBits { VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 0 x00000001,VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkDeviceQueueCreateFlagBits ; typedef VkFlags VkDeviceQueueCreateFlags ; typedef enum VkPipelineStageFlagBits { VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0 x00000001,VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0 x00000002,VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 0 x00000004,VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 0 x00000008,VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0 x00000010,VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0 x00000020,VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0 x00000040,VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0 x00000080,VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0 x00000100,VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0 x00000200,VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0 x00000400,VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0 x00000800,VK_PIPELINE_STAGE_TRANSFER_BIT = 0 x00001000,VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0 x00002000,VK_PIPELINE_STAGE_HOST_BIT = 0 x00004000,VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0 x00008000,VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 0 x00010000,VK_PIPELINE_STAGE_NONE = 0,VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 0 x01000000,VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 0 x00040000,VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 0 x02000000,VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 0 x00200000,VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0 x00800000,VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0 x00400000,VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 0 x00020000,VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT = 0 x00080000,VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT = 0 x00100000,VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR,VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT,VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT,VK_PIPELINE_STAGE_NONE_KHR = VK_PIPELINE_STAGE_NONE,VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkPipelineStageFlagBits ; typedef VkFlags VkPipelineStageFlags ; typedef enum VkMemoryMapFlagBits { VK_MEMORY_MAP_PLACED_BIT_EXT = 0 x00000001,VK_MEMORY_MAP_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkMemoryMapFlagBits ; typedef VkFlags VkMemoryMapFlags ; typedef enum VkSparseMemoryBindFlagBits { VK_SPARSE_MEMORY_BIND_METADATA_BIT = 0 x00000001,VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkSparseMemoryBindFlagBits ; typedef VkFlags VkSparseMemoryBindFlags ; typedef enum VkSparseImageFormatFlagBits { VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 0 x00000001,VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 0 x00000002,VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0 x00000004,VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkSparseImageFormatFlagBits ; typedef VkFlags VkSparseImageFormatFlags ; typedef enum VkFenceCreateFlagBits { VK_FENCE_CREATE_SIGNALED_BIT = 0 x00000001,VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkFenceCreateFlagBits ; typedef VkFlags VkFenceCreateFlags ; typedef VkFlags VkSemaphoreCreateFlags ; typedef enum VkEventCreateFlagBits { VK_EVENT_CREATE_DEVICE_ONLY_BIT = 0 x00000001,VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = VK_EVENT_CREATE_DEVICE_ONLY_BIT,VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkEventCreateFlagBits ; typedef VkFlags VkEventCreateFlags ; typedef enum VkQueryPipelineStatisticFlagBits { VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 0 x00000001,VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0 x00000002,VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 0 x00000004,VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 0 x00000008,VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 0 x00000010,VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 0 x00000020,VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 0 x00000040,VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 0 x00000080,VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0 x00000100,VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0 x00000200,VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 0 x00000400,VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT = 0 x00000800,VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT = 0 x00001000,VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI = 0 x00002000,VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkQueryPipelineStatisticFlagBits ; typedef VkFlags VkQueryPipelineStatisticFlags ; typedef VkFlags VkQueryPoolCreateFlags ; typedef enum VkQueryResultFlagBits { VK_QUERY_RESULT_64_BIT = 0 x00000001,VK_QUERY_RESULT_WAIT_BIT = 0 x00000002,VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 0 x00000004,VK_QUERY_RESULT_PARTIAL_BIT = 0 x00000008,VK_QUERY_RESULT_WITH_STATUS_BIT_KHR = 0 x00000010,VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkQueryResultFlagBits ; typedef VkFlags VkQueryResultFlags ; typedef enum VkBufferCreateFlagBits { VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 0 x00000001,VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0 x00000002,VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 0 x00000004,VK_BUFFER_CREATE_PROTECTED_BIT = 0 x00000008,VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 0 x00000010,VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 0 x00000020,VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR = 0 x00000040,VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkBufferCreateFlagBits ; typedef VkFlags VkBufferCreateFlags ; typedef enum VkBufferUsageFlagBits { VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 0 x00000001,VK_BUFFER_USAGE_TRANSFER_DST_BIT = 0 x00000002,VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0 x00000004,VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0 x00000008,VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0 x00000010,VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 0 x00000020,VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 0 x00000040,VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 0 x00000080,VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0 x00000100,VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 0 x00020000,VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 0 x00002000,VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = 0 x00004000,VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 0 x00000800,VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 0 x00001000,VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 0 x00000200,# ifdef VK_ENABLE_BETA_EXTENSIONS VK_BUFFER_USAGE_EXECUTION_GRAPH_SCRATCH_BIT_AMDX = 0 x02000000,# endif VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 0 x00080000,VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 0 x00100000,VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 0 x00000400,VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 0 x00008000,VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 0 x00010000,VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 0 x00200000,VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 0 x00400000,VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 0 x04000000,VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 0 x00800000,VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = 0 x01000000,VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR,VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkBufferUsageFlagBits ; typedef VkFlags VkBufferUsageFlags ; typedef VkFlags VkBufferViewCreateFlags ; typedef enum VkImageViewCreateFlagBits { VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 0 x00000001,VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 0 x00000004,VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 0 x00000002,VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkImageViewCreateFlagBits ; typedef VkFlags VkImageViewCreateFlags ; typedef VkFlags VkShaderModuleCreateFlags ; typedef enum VkPipelineCacheCreateFlagBits { VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 0 x00000001,VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT,VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkPipelineCacheCreateFlagBits ; typedef VkFlags VkPipelineCacheCreateFlags ; typedef enum VkColorComponentFlagBits { VK_COLOR_COMPONENT_R_BIT = 0 x00000001,VK_COLOR_COMPONENT_G_BIT = 0 x00000002,VK_COLOR_COMPONENT_B_BIT = 0 x00000004,VK_COLOR_COMPONENT_A_BIT = 0 x00000008,VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkColorComponentFlagBits ; typedef VkFlags VkColorComponentFlags ; typedef enum VkPipelineCreateFlagBits { VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 0 x00000001,VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 0 x00000002,VK_PIPELINE_CREATE_DERIVATIVE_BIT = 0 x00000004,VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 0 x00000008,VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 0 x00000010,VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 0 x00000100,VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 0 x00000200,VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0 x00200000,VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 0 x00400000,VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 0 x00004000,VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 0 x00008000,VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 0 x00010000,VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 0 x00020000,VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 0 x00001000,VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 0 x00002000,VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 0 x00080000,VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 0 x00000020,VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 0 x00000040,VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 0 x00000080,VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 0 x00040000,VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 0 x00000800,VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 0 x20000000,VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 0 x00800000,VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = 0 x00000400,VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = 0 x00100000,VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 0 x02000000,VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 0 x04000000,VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 0 x01000000,# ifdef VK_ENABLE_BETA_EXTENSIONS VK_PIPELINE_CREATE_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV = 0 x10000000,# endif VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT = 0 x08000000,VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT = 0 x40000000,VK_PIPELINE_CREATE_DISPATCH_BASE = VK_PIPELINE_CREATE_DISPATCH_BASE_BIT,VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT,VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = VK_PIPELINE_CREATE_DISPATCH_BASE,VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT,VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT,VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkPipelineCreateFlagBits ; typedef VkFlags VkPipelineCreateFlags ; typedef enum VkPipelineShaderStageCreateFlagBits { VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = 0 x00000001,VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = 0 x00000002,VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT,VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT,VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkPipelineShaderStageCreateFlagBits ; typedef VkFlags VkPipelineShaderStageCreateFlags ; typedef enum VkShaderStageFlagBits { VK_SHADER_STAGE_VERTEX_BIT = 0 x00000001,VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0 x00000002,VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0 x00000004,VK_SHADER_STAGE_GEOMETRY_BIT = 0 x00000008,VK_SHADER_STAGE_FRAGMENT_BIT = 0 x00000010,VK_SHADER_STAGE_COMPUTE_BIT = 0 x00000020,VK_SHADER_STAGE_ALL_GRAPHICS = 0 x0000001F,VK_SHADER_STAGE_ALL = 0 x7FFFFFFF,VK_SHADER_STAGE_RAYGEN_BIT_KHR = 0 x00000100,VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 0 x00000200,VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 0 x00000400,VK_SHADER_STAGE_MISS_BIT_KHR = 0 x00000800,VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 0 x00001000,VK_SHADER_STAGE_CALLABLE_BIT_KHR = 0 x00002000,VK_SHADER_STAGE_TASK_BIT_EXT = 0 x00000040,VK_SHADER_STAGE_MESH_BIT_EXT = 0 x00000080,VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 0 x00004000,VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI = 0 x00080000,VK_SHADER_STAGE_RAYGEN_BIT_NV = VK_SHADER_STAGE_RAYGEN_BIT_KHR,VK_SHADER_STAGE_ANY_HIT_BIT_NV = VK_SHADER_STAGE_ANY_HIT_BIT_KHR,VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR,VK_SHADER_STAGE_MISS_BIT_NV = VK_SHADER_STAGE_MISS_BIT_KHR,VK_SHADER_STAGE_INTERSECTION_BIT_NV = VK_SHADER_STAGE_INTERSECTION_BIT_KHR,VK_SHADER_STAGE_CALLABLE_BIT_NV = VK_SHADER_STAGE_CALLABLE_BIT_KHR,VK_SHADER_STAGE_TASK_BIT_NV = VK_SHADER_STAGE_TASK_BIT_EXT,VK_SHADER_STAGE_MESH_BIT_NV = VK_SHADER_STAGE_MESH_BIT_EXT,VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkShaderStageFlagBits ; typedef enum VkCullModeFlagBits { VK_CULL_MODE_NONE = 0,VK_CULL_MODE_FRONT_BIT = 0 x00000001,VK_CULL_MODE_BACK_BIT = 0 x00000002,VK_CULL_MODE_FRONT_AND_BACK = 0 x00000003,VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkCullModeFlagBits ; typedef VkFlags VkCullModeFlags ; typedef VkFlags VkPipelineVertexInputStateCreateFlags ; typedef VkFlags VkPipelineInputAssemblyStateCreateFlags ; typedef VkFlags VkPipelineTessellationStateCreateFlags ; typedef VkFlags VkPipelineViewportStateCreateFlags ; typedef VkFlags VkPipelineRasterizationStateCreateFlags ; typedef VkFlags VkPipelineMultisampleStateCreateFlags ; typedef enum VkPipelineDepthStencilStateCreateFlagBits { VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 0 x00000001,VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 0 x00000002,VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT,VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT,VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkPipelineDepthStencilStateCreateFlagBits ; typedef VkFlags VkPipelineDepthStencilStateCreateFlags ; typedef enum VkPipelineColorBlendStateCreateFlagBits { VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = 0 x00000001,VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT,VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkPipelineColorBlendStateCreateFlagBits ; typedef VkFlags VkPipelineColorBlendStateCreateFlags ; typedef VkFlags VkPipelineDynamicStateCreateFlags ; typedef enum VkPipelineLayoutCreateFlagBits { VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = 0 x00000002,VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkPipelineLayoutCreateFlagBits ; typedef VkFlags VkPipelineLayoutCreateFlags ; typedef VkFlags VkShaderStageFlags ; typedef enum VkSamplerCreateFlagBits { VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 0 x00000001,VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 0 x00000002,VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 0 x00000008,VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT = 0 x00000004,VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM = 0 x00000010,VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkSamplerCreateFlagBits ; typedef VkFlags VkSamplerCreateFlags ; typedef enum VkDescriptorPoolCreateFlagBits { VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 0 x00000001,VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 0 x00000002,VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT = 0 x00000004,VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV = 0 x00000008,VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV = 0 x00000010,VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT,VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT,VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkDescriptorPoolCreateFlagBits ; typedef VkFlags VkDescriptorPoolCreateFlags ; typedef VkFlags VkDescriptorPoolResetFlags ; typedef enum VkDescriptorSetLayoutCreateFlagBits { VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 0 x00000002,VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 0 x00000001,VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 0 x00000010,VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = 0 x00000020,VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV = 0 x00000080,VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT = 0 x00000004,VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV = 0 x00000040,VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT,VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT,VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkDescriptorSetLayoutCreateFlagBits ; typedef VkFlags VkDescriptorSetLayoutCreateFlags ; typedef enum VkAttachmentDescriptionFlagBits { VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0 x00000001,VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkAttachmentDescriptionFlagBits ; typedef VkFlags VkAttachmentDescriptionFlags ; typedef enum VkDependencyFlagBits { VK_DEPENDENCY_BY_REGION_BIT = 0 x00000001,VK_DEPENDENCY_DEVICE_GROUP_BIT = 0 x00000004,VK_DEPENDENCY_VIEW_LOCAL_BIT = 0 x00000002,VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT = 0 x00000008,VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = VK_DEPENDENCY_VIEW_LOCAL_BIT,VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = VK_DEPENDENCY_DEVICE_GROUP_BIT,VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkDependencyFlagBits ; typedef VkFlags VkDependencyFlags ; typedef enum VkFramebufferCreateFlagBits { VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 0 x00000001,VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT,VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkFramebufferCreateFlagBits ; typedef VkFlags VkFramebufferCreateFlags ; typedef enum VkRenderPassCreateFlagBits { VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 0 x00000002,VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkRenderPassCreateFlagBits ; typedef VkFlags VkRenderPassCreateFlags ; typedef enum VkSubpassDescriptionFlagBits { VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 0 x00000001,VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 0 x00000002,VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 0 x00000004,VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 0 x00000008,VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = 0 x00000010,VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 0 x00000020,VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 0 x00000040,VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT = 0 x00000080,VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT,VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT,VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT,VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkSubpassDescriptionFlagBits ; typedef VkFlags VkSubpassDescriptionFlags ; typedef enum VkCommandPoolCreateFlagBits { VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 0 x00000001,VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0 x00000002,VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 0 x00000004,VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkCommandPoolCreateFlagBits ; typedef VkFlags VkCommandPoolCreateFlags ; typedef enum VkCommandPoolResetFlagBits { VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0 x00000001,VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkCommandPoolResetFlagBits ; typedef VkFlags VkCommandPoolResetFlags ; typedef enum VkCommandBufferUsageFlagBits { VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 0 x00000001,VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0 x00000002,VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 0 x00000004,VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkCommandBufferUsageFlagBits ; typedef VkFlags VkCommandBufferUsageFlags ; typedef enum VkQueryControlFlagBits { VK_QUERY_CONTROL_PRECISE_BIT = 0 x00000001,VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkQueryControlFlagBits ; typedef VkFlags VkQueryControlFlags ; typedef enum VkCommandBufferResetFlagBits { VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0 x00000001,VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkCommandBufferResetFlagBits ; typedef VkFlags VkCommandBufferResetFlags ; typedef enum VkStencilFaceFlagBits { VK_STENCIL_FACE_FRONT_BIT = 0 x00000001,VK_STENCIL_FACE_BACK_BIT = 0 x00000002,VK_STENCIL_FACE_FRONT_AND_BACK = 0 x00000003,VK_STENCIL_FRONT_AND_BACK = VK_STENCIL_FACE_FRONT_AND_BACK,VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkStencilFaceFlagBits ; typedef VkFlags VkStencilFaceFlags ; typedef struct VkExtent2D { uint32_t width ; uint32_t height ; } VkExtent2D ; typedef struct VkExtent3D { uint32_t width ; uint32_t height ; uint32_t depth ; } VkExtent3D ; typedef struct VkOffset2D { int32_t x ; int32_t y ; } VkOffset2D ; typedef struct VkOffset3D { int32_t x ; int32_t y ; int32_t z ; } VkOffset3D ; typedef struct VkRect2D { VkOffset2D offset ; VkExtent2D extent ; } VkRect2D ; typedef struct VkBaseInStructure { VkStructureType sType ; const struct VkBaseInStructure* pNext ; } VkBaseInStructure ; typedef struct VkBaseOutStructure { VkStructureType sType ; struct VkBaseOutStructure* pNext ; } VkBaseOutStructure ; typedef struct VkBufferMemoryBarrier { VkStructureType sType ; const void* pNext ; VkAccessFlags srcAccessMask ; VkAccessFlags dstAccessMask ; uint32_t srcQueueFamilyIndex ; uint32_t dstQueueFamilyIndex ; VkBuffer buffer ; VkDeviceSize offset ; VkDeviceSize size ; } VkBufferMemoryBarrier ; typedef struct VkDispatchIndirectCommand { uint32_t x ; uint32_t y ; uint32_t z ; } VkDispatchIndirectCommand ; typedef struct VkDrawIndexedIndirectCommand { uint32_t indexCount ; uint32_t instanceCount ; uint32_t firstIndex ; int32_t vertexOffset ; uint32_t firstInstance ; } VkDrawIndexedIndirectCommand ; typedef struct VkDrawIndirectCommand { uint32_t vertexCount ; uint32_t instanceCount ; uint32_t firstVertex ; uint32_t firstInstance ; } VkDrawIndirectCommand ; typedef struct VkImageSubresourceRange { VkImageAspectFlags aspectMask ; uint32_t baseMipLevel ; uint32_t levelCount ; uint32_t baseArrayLayer ; uint32_t layerCount ; } VkImageSubresourceRange ; typedef struct VkImageMemoryBarrier { VkStructureType sType ; const void* pNext ; VkAccessFlags srcAccessMask ; VkAccessFlags dstAccessMask ; VkImageLayout oldLayout ; VkImageLayout newLayout ; uint32_t srcQueueFamilyIndex ; uint32_t dstQueueFamilyIndex ; VkImage image ; VkImageSubresourceRange subresourceRange ; } VkImageMemoryBarrier ; typedef struct VkMemoryBarrier { VkStructureType sType ; const void* pNext ; VkAccessFlags srcAccessMask ; VkAccessFlags dstAccessMask ; } VkMemoryBarrier ; typedef struct VkPipelineCacheHeaderVersionOne { uint32_t headerSize ; VkPipelineCacheHeaderVersion headerVersion ; uint32_t vendorID ; uint32_t deviceID ; uint8_t pipelineCacheUUID [ VK_UUID_SIZE ] ; } VkPipelineCacheHeaderVersionOne ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkAllocationFunction)( void* pUserData, size_t size, size_t alignment, VkSystemAllocationScope allocationScope)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkFreeFunction)( void* pUserData, void* pMemory)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkInternalAllocationNotification)( void* pUserData, size_t size, VkInternalAllocationType allocationType, VkSystemAllocationScope allocationScope)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkInternalFreeNotification)( void* pUserData, size_t size, VkInternalAllocationType allocationType, VkSystemAllocationScope allocationScope)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkReallocationFunction)( void* pUserData, void* pOriginal, size_t size, size_t alignment, VkSystemAllocationScope allocationScope)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkVoidFunction)(void)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef struct VkAllocationCallbacks { void* pUserData ; PFN_vkAllocationFunction pfnAllocation ; PFN_vkReallocationFunction pfnReallocation ; PFN_vkFreeFunction pfnFree ; PFN_vkInternalAllocationNotification pfnInternalAllocation ; PFN_vkInternalFreeNotification pfnInternalFree ; } VkAllocationCallbacks ; typedef struct VkApplicationInfo { VkStructureType sType ; const void* pNext ; const char* pApplicationName ; uint32_t applicationVersion ; const char* pEngineName ; uint32_t engineVersion ; uint32_t apiVersion ; } VkApplicationInfo ; typedef struct VkFormatProperties { VkFormatFeatureFlags linearTilingFeatures ; VkFormatFeatureFlags optimalTilingFeatures ; VkFormatFeatureFlags bufferFeatures ; } VkFormatProperties ; typedef struct VkImageFormatProperties { VkExtent3D maxExtent ; uint32_t maxMipLevels ; uint32_t maxArrayLayers ; VkSampleCountFlags sampleCounts ; VkDeviceSize maxResourceSize ; } VkImageFormatProperties ; typedef struct VkInstanceCreateInfo { VkStructureType sType ; const void* pNext ; VkInstanceCreateFlags flags ; const VkApplicationInfo* pApplicationInfo ; uint32_t enabledLayerCount ; const char* const* ppEnabledLayerNames ; uint32_t enabledExtensionCount ; const char* const* ppEnabledExtensionNames ; } VkInstanceCreateInfo ; typedef struct VkMemoryHeap { VkDeviceSize size ; VkMemoryHeapFlags flags ; } VkMemoryHeap ; typedef struct VkMemoryType { VkMemoryPropertyFlags propertyFlags ; uint32_t heapIndex ; } VkMemoryType ; typedef struct VkPhysicalDeviceFeatures { VkBool32 robustBufferAccess ; VkBool32 fullDrawIndexUint32 ; VkBool32 imageCubeArray ; VkBool32 independentBlend ; VkBool32 geometryShader ; VkBool32 tessellationShader ; VkBool32 sampleRateShading ; VkBool32 dualSrcBlend ; VkBool32 logicOp ; VkBool32 multiDrawIndirect ; VkBool32 drawIndirectFirstInstance ; VkBool32 depthClamp ; VkBool32 depthBiasClamp ; VkBool32 fillModeNonSolid ; VkBool32 depthBounds ; VkBool32 wideLines ; VkBool32 largePoints ; VkBool32 alphaToOne ; VkBool32 multiViewport ; VkBool32 samplerAnisotropy ; VkBool32 textureCompressionETC2 ; VkBool32 textureCompressionASTC_LDR ; VkBool32 textureCompressionBC ; VkBool32 occlusionQueryPrecise ; VkBool32 pipelineStatisticsQuery ; VkBool32 vertexPipelineStoresAndAtomics ; VkBool32 fragmentStoresAndAtomics ; VkBool32 shaderTessellationAndGeometryPointSize ; VkBool32 shaderImageGatherExtended ; VkBool32 shaderStorageImageExtendedFormats ; VkBool32 shaderStorageImageMultisample ; VkBool32 shaderStorageImageReadWithoutFormat ; VkBool32 shaderStorageImageWriteWithoutFormat ; VkBool32 shaderUniformBufferArrayDynamicIndexing ; VkBool32 shaderSampledImageArrayDynamicIndexing ; VkBool32 shaderStorageBufferArrayDynamicIndexing ; VkBool32 shaderStorageImageArrayDynamicIndexing ; VkBool32 shaderClipDistance ; VkBool32 shaderCullDistance ; VkBool32 shaderFloat64 ; VkBool32 shaderInt64 ; VkBool32 shaderInt16 ; VkBool32 shaderResourceResidency ; VkBool32 shaderResourceMinLod ; VkBool32 sparseBinding ; VkBool32 sparseResidencyBuffer ; VkBool32 sparseResidencyImage2D ; VkBool32 sparseResidencyImage3D ; VkBool32 sparseResidency2Samples ; VkBool32 sparseResidency4Samples ; VkBool32 sparseResidency8Samples ; VkBool32 sparseResidency16Samples ; VkBool32 sparseResidencyAliased ; VkBool32 variableMultisampleRate ; VkBool32 inheritedQueries ; } VkPhysicalDeviceFeatures ; typedef struct VkPhysicalDeviceLimits { uint32_t maxImageDimension1D ; uint32_t maxImageDimension2D ; uint32_t maxImageDimension3D ; uint32_t maxImageDimensionCube ; uint32_t maxImageArrayLayers ; uint32_t maxTexelBufferElements ; uint32_t maxUniformBufferRange ; uint32_t maxStorageBufferRange ; uint32_t maxPushConstantsSize ; uint32_t maxMemoryAllocationCount ; uint32_t maxSamplerAllocationCount ; VkDeviceSize bufferImageGranularity ; VkDeviceSize sparseAddressSpaceSize ; uint32_t maxBoundDescriptorSets ; uint32_t maxPerStageDescriptorSamplers ; uint32_t maxPerStageDescriptorUniformBuffers ; uint32_t maxPerStageDescriptorStorageBuffers ; uint32_t maxPerStageDescriptorSampledImages ; uint32_t maxPerStageDescriptorStorageImages ; uint32_t maxPerStageDescriptorInputAttachments ; uint32_t maxPerStageResources ; uint32_t maxDescriptorSetSamplers ; uint32_t maxDescriptorSetUniformBuffers ; uint32_t maxDescriptorSetUniformBuffersDynamic ; uint32_t maxDescriptorSetStorageBuffers ; uint32_t maxDescriptorSetStorageBuffersDynamic ; uint32_t maxDescriptorSetSampledImages ; uint32_t maxDescriptorSetStorageImages ; uint32_t maxDescriptorSetInputAttachments ; uint32_t maxVertexInputAttributes ; uint32_t maxVertexInputBindings ; uint32_t maxVertexInputAttributeOffset ; uint32_t maxVertexInputBindingStride ; uint32_t maxVertexOutputComponents ; uint32_t maxTessellationGenerationLevel ; uint32_t maxTessellationPatchSize ; uint32_t maxTessellationControlPerVertexInputComponents ; uint32_t maxTessellationControlPerVertexOutputComponents ; uint32_t maxTessellationControlPerPatchOutputComponents ; uint32_t maxTessellationControlTotalOutputComponents ; uint32_t maxTessellationEvaluationInputComponents ; uint32_t maxTessellationEvaluationOutputComponents ; uint32_t maxGeometryShaderInvocations ; uint32_t maxGeometryInputComponents ; uint32_t maxGeometryOutputComponents ; uint32_t maxGeometryOutputVertices ; uint32_t maxGeometryTotalOutputComponents ; uint32_t maxFragmentInputComponents ; uint32_t maxFragmentOutputAttachments ; uint32_t maxFragmentDualSrcAttachments ; uint32_t maxFragmentCombinedOutputResources ; uint32_t maxComputeSharedMemorySize ; uint32_t maxComputeWorkGroupCount [ 3 ] ; uint32_t maxComputeWorkGroupInvocations ; uint32_t maxComputeWorkGroupSize [ 3 ] ; uint32_t subPixelPrecisionBits ; uint32_t subTexelPrecisionBits ; uint32_t mipmapPrecisionBits ; uint32_t maxDrawIndexedIndexValue ; uint32_t maxDrawIndirectCount ; float maxSamplerLodBias ; float maxSamplerAnisotropy ; uint32_t maxViewports ; uint32_t maxViewportDimensions [ 2 ] ; float viewportBoundsRange [ 2 ] ; uint32_t viewportSubPixelBits ; size_t minMemoryMapAlignment ; VkDeviceSize minTexelBufferOffsetAlignment ; VkDeviceSize minUniformBufferOffsetAlignment ; VkDeviceSize minStorageBufferOffsetAlignment ; int32_t minTexelOffset ; uint32_t maxTexelOffset ; int32_t minTexelGatherOffset ; uint32_t maxTexelGatherOffset ; float minInterpolationOffset ; float maxInterpolationOffset ; uint32_t subPixelInterpolationOffsetBits ; uint32_t maxFramebufferWidth ; uint32_t maxFramebufferHeight ; uint32_t maxFramebufferLayers ; VkSampleCountFlags framebufferColorSampleCounts ; VkSampleCountFlags framebufferDepthSampleCounts ; VkSampleCountFlags framebufferStencilSampleCounts ; VkSampleCountFlags framebufferNoAttachmentsSampleCounts ; uint32_t maxColorAttachments ; VkSampleCountFlags sampledImageColorSampleCounts ; VkSampleCountFlags sampledImageIntegerSampleCounts ; VkSampleCountFlags sampledImageDepthSampleCounts ; VkSampleCountFlags sampledImageStencilSampleCounts ; VkSampleCountFlags storageImageSampleCounts ; uint32_t maxSampleMaskWords ; VkBool32 timestampComputeAndGraphics ; float timestampPeriod ; uint32_t maxClipDistances ; uint32_t maxCullDistances ; uint32_t maxCombinedClipAndCullDistances ; uint32_t discreteQueuePriorities ; float pointSizeRange [ 2 ] ; float lineWidthRange [ 2 ] ; float pointSizeGranularity ; float lineWidthGranularity ; VkBool32 strictLines ; VkBool32 standardSampleLocations ; VkDeviceSize optimalBufferCopyOffsetAlignment ; VkDeviceSize optimalBufferCopyRowPitchAlignment ; VkDeviceSize nonCoherentAtomSize ; } VkPhysicalDeviceLimits ; typedef struct VkPhysicalDeviceMemoryProperties { uint32_t memoryTypeCount ; VkMemoryType memoryTypes [ VK_MAX_MEMORY_TYPES ] ; uint32_t memoryHeapCount ; VkMemoryHeap memoryHeaps [ VK_MAX_MEMORY_HEAPS ] ; } VkPhysicalDeviceMemoryProperties ; typedef struct VkPhysicalDeviceSparseProperties { VkBool32 residencyStandard2DBlockShape ; VkBool32 residencyStandard2DMultisampleBlockShape ; VkBool32 residencyStandard3DBlockShape ; VkBool32 residencyAlignedMipSize ; VkBool32 residencyNonResidentStrict ; } VkPhysicalDeviceSparseProperties ; typedef struct VkPhysicalDeviceProperties { uint32_t apiVersion ; uint32_t driverVersion ; uint32_t vendorID ; uint32_t deviceID ; VkPhysicalDeviceType deviceType ; char deviceName [ VK_MAX_PHYSICAL_DEVICE_NAME_SIZE ] ; uint8_t pipelineCacheUUID [ VK_UUID_SIZE ] ; VkPhysicalDeviceLimits limits ; VkPhysicalDeviceSparseProperties sparseProperties ; } VkPhysicalDeviceProperties ; typedef struct VkQueueFamilyProperties { VkQueueFlags queueFlags ; uint32_t queueCount ; uint32_t timestampValidBits ; VkExtent3D minImageTransferGranularity ; } VkQueueFamilyProperties ; typedef struct VkDeviceQueueCreateInfo { VkStructureType sType ; const void* pNext ; VkDeviceQueueCreateFlags flags ; uint32_t queueFamilyIndex ; uint32_t queueCount ; const float* pQueuePriorities ; } VkDeviceQueueCreateInfo ; typedef struct VkDeviceCreateInfo { VkStructureType sType ; const void* pNext ; VkDeviceCreateFlags flags ; uint32_t queueCreateInfoCount ; const VkDeviceQueueCreateInfo* pQueueCreateInfos ; uint32_t enabledLayerCount ; const char* const* ppEnabledLayerNames ; uint32_t enabledExtensionCount ; const char* const* ppEnabledExtensionNames ; const VkPhysicalDeviceFeatures* pEnabledFeatures ; } VkDeviceCreateInfo ; typedef struct VkExtensionProperties { char extensionName [ VK_MAX_EXTENSION_NAME_SIZE ] ; uint32_t specVersion ; } VkExtensionProperties ; typedef struct VkLayerProperties { char layerName [ VK_MAX_EXTENSION_NAME_SIZE ] ; uint32_t specVersion ; uint32_t implementationVersion ; char description [ VK_MAX_DESCRIPTION_SIZE ] ; } VkLayerProperties ; typedef struct VkSubmitInfo { VkStructureType sType ; const void* pNext ; uint32_t waitSemaphoreCount ; const VkSemaphore* pWaitSemaphores ; const VkPipelineStageFlags* pWaitDstStageMask ; uint32_t commandBufferCount ; const VkCommandBuffer* pCommandBuffers ; uint32_t signalSemaphoreCount ; const VkSemaphore* pSignalSemaphores ; } VkSubmitInfo ; typedef struct VkMappedMemoryRange { VkStructureType sType ; const void* pNext ; VkDeviceMemory memory ; VkDeviceSize offset ; VkDeviceSize size ; } VkMappedMemoryRange ; typedef struct VkMemoryAllocateInfo { VkStructureType sType ; const void* pNext ; VkDeviceSize allocationSize ; uint32_t memoryTypeIndex ; } VkMemoryAllocateInfo ; typedef struct VkMemoryRequirements { VkDeviceSize size ; VkDeviceSize alignment ; uint32_t memoryTypeBits ; } VkMemoryRequirements ; typedef struct VkSparseMemoryBind { VkDeviceSize resourceOffset ; VkDeviceSize size ; VkDeviceMemory memory ; VkDeviceSize memoryOffset ; VkSparseMemoryBindFlags flags ; } VkSparseMemoryBind ; typedef struct VkSparseBufferMemoryBindInfo { VkBuffer buffer ; uint32_t bindCount ; const VkSparseMemoryBind* pBinds ; } VkSparseBufferMemoryBindInfo ; typedef struct VkSparseImageOpaqueMemoryBindInfo { VkImage image ; uint32_t bindCount ; const VkSparseMemoryBind* pBinds ; } VkSparseImageOpaqueMemoryBindInfo ; typedef struct VkImageSubresource { VkImageAspectFlags aspectMask ; uint32_t mipLevel ; uint32_t arrayLayer ; } VkImageSubresource ; typedef struct VkSparseImageMemoryBind { VkImageSubresource subresource ; VkOffset3D offset ; VkExtent3D extent ; VkDeviceMemory memory ; VkDeviceSize memoryOffset ; VkSparseMemoryBindFlags flags ; } VkSparseImageMemoryBind ; typedef struct VkSparseImageMemoryBindInfo { VkImage image ; uint32_t bindCount ; const VkSparseImageMemoryBind* pBinds ; } VkSparseImageMemoryBindInfo ; typedef struct VkBindSparseInfo { VkStructureType sType ; const void* pNext ; uint32_t waitSemaphoreCount ; const VkSemaphore* pWaitSemaphores ; uint32_t bufferBindCount ; const VkSparseBufferMemoryBindInfo* pBufferBinds ; uint32_t imageOpaqueBindCount ; const VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds ; uint32_t imageBindCount ; const VkSparseImageMemoryBindInfo* pImageBinds ; uint32_t signalSemaphoreCount ; const VkSemaphore* pSignalSemaphores ; } VkBindSparseInfo ; typedef struct VkSparseImageFormatProperties { VkImageAspectFlags aspectMask ; VkExtent3D imageGranularity ; VkSparseImageFormatFlags flags ; } VkSparseImageFormatProperties ; typedef struct VkSparseImageMemoryRequirements { VkSparseImageFormatProperties formatProperties ; uint32_t imageMipTailFirstLod ; VkDeviceSize imageMipTailSize ; VkDeviceSize imageMipTailOffset ; VkDeviceSize imageMipTailStride ; } VkSparseImageMemoryRequirements ; typedef struct VkFenceCreateInfo { VkStructureType sType ; const void* pNext ; VkFenceCreateFlags flags ; } VkFenceCreateInfo ; typedef struct VkSemaphoreCreateInfo { VkStructureType sType ; const void* pNext ; VkSemaphoreCreateFlags flags ; } VkSemaphoreCreateInfo ; typedef struct VkEventCreateInfo { VkStructureType sType ; const void* pNext ; VkEventCreateFlags flags ; } VkEventCreateInfo ; typedef struct VkQueryPoolCreateInfo { VkStructureType sType ; const void* pNext ; VkQueryPoolCreateFlags flags ; VkQueryType queryType ; uint32_t queryCount ; VkQueryPipelineStatisticFlags pipelineStatistics ; } VkQueryPoolCreateInfo ; typedef struct VkBufferCreateInfo { VkStructureType sType ; const void* pNext ; VkBufferCreateFlags flags ; VkDeviceSize size ; VkBufferUsageFlags usage ; VkSharingMode sharingMode ; uint32_t queueFamilyIndexCount ; const uint32_t* pQueueFamilyIndices ; } VkBufferCreateInfo ; typedef struct VkBufferViewCreateInfo { VkStructureType sType ; const void* pNext ; VkBufferViewCreateFlags flags ; VkBuffer buffer ; VkFormat format ; VkDeviceSize offset ; VkDeviceSize range ; } VkBufferViewCreateInfo ; typedef struct VkImageCreateInfo { VkStructureType sType ; const void* pNext ; VkImageCreateFlags flags ; VkImageType imageType ; VkFormat format ; VkExtent3D extent ; uint32_t mipLevels ; uint32_t arrayLayers ; VkSampleCountFlagBits samples ; VkImageTiling tiling ; VkImageUsageFlags usage ; VkSharingMode sharingMode ; uint32_t queueFamilyIndexCount ; const uint32_t* pQueueFamilyIndices ; VkImageLayout initialLayout ; } VkImageCreateInfo ; typedef struct VkSubresourceLayout { VkDeviceSize offset ; VkDeviceSize size ; VkDeviceSize rowPitch ; VkDeviceSize arrayPitch ; VkDeviceSize depthPitch ; } VkSubresourceLayout ; typedef struct VkComponentMapping { VkComponentSwizzle r ; VkComponentSwizzle g ; VkComponentSwizzle b ; VkComponentSwizzle a ; } VkComponentMapping ; typedef struct VkImageViewCreateInfo { VkStructureType sType ; const void* pNext ; VkImageViewCreateFlags flags ; VkImage image ; VkImageViewType viewType ; VkFormat format ; VkComponentMapping components ; VkImageSubresourceRange subresourceRange ; } VkImageViewCreateInfo ; typedef struct VkShaderModuleCreateInfo { VkStructureType sType ; const void* pNext ; VkShaderModuleCreateFlags flags ; size_t codeSize ; const uint32_t* pCode ; } VkShaderModuleCreateInfo ; typedef struct VkPipelineCacheCreateInfo { VkStructureType sType ; const void* pNext ; VkPipelineCacheCreateFlags flags ; size_t initialDataSize ; const void* pInitialData ; } VkPipelineCacheCreateInfo ; typedef struct VkSpecializationMapEntry { uint32_t constantID ; uint32_t offset ; size_t size ; } VkSpecializationMapEntry ; typedef struct VkSpecializationInfo { uint32_t mapEntryCount ; const VkSpecializationMapEntry* pMapEntries ; size_t dataSize ; const void* pData ; } VkSpecializationInfo ; typedef struct VkPipelineShaderStageCreateInfo { VkStructureType sType ; const void* pNext ; VkPipelineShaderStageCreateFlags flags ; VkShaderStageFlagBits stage ; VkShaderModule module ; const char* pName ; const VkSpecializationInfo* pSpecializationInfo ; } VkPipelineShaderStageCreateInfo ; typedef struct VkComputePipelineCreateInfo { VkStructureType sType ; const void* pNext ; VkPipelineCreateFlags flags ; VkPipelineShaderStageCreateInfo stage ; VkPipelineLayout layout ; VkPipeline basePipelineHandle ; int32_t basePipelineIndex ; } VkComputePipelineCreateInfo ; typedef struct VkVertexInputBindingDescription { uint32_t binding ; uint32_t stride ; VkVertexInputRate inputRate ; } VkVertexInputBindingDescription ; typedef struct VkVertexInputAttributeDescription { uint32_t location ; uint32_t binding ; VkFormat format ; uint32_t offset ; } VkVertexInputAttributeDescription ; typedef struct VkPipelineVertexInputStateCreateInfo { VkStructureType sType ; const void* pNext ; VkPipelineVertexInputStateCreateFlags flags ; uint32_t vertexBindingDescriptionCount ; const VkVertexInputBindingDescription* pVertexBindingDescriptions ; uint32_t vertexAttributeDescriptionCount ; const VkVertexInputAttributeDescription* pVertexAttributeDescriptions ; } VkPipelineVertexInputStateCreateInfo ; typedef struct VkPipelineInputAssemblyStateCreateInfo { VkStructureType sType ; const void* pNext ; VkPipelineInputAssemblyStateCreateFlags flags ; VkPrimitiveTopology topology ; VkBool32 primitiveRestartEnable ; } VkPipelineInputAssemblyStateCreateInfo ; typedef struct VkPipelineTessellationStateCreateInfo { VkStructureType sType ; const void* pNext ; VkPipelineTessellationStateCreateFlags flags ; uint32_t patchControlPoints ; } VkPipelineTessellationStateCreateInfo ; typedef struct VkViewport { float x ; float y ; float width ; float height ; float minDepth ; float maxDepth ; } VkViewport ; typedef struct VkPipelineViewportStateCreateInfo { VkStructureType sType ; const void* pNext ; VkPipelineViewportStateCreateFlags flags ; uint32_t viewportCount ; const VkViewport* pViewports ; uint32_t scissorCount ; const VkRect2D* pScissors ; } VkPipelineViewportStateCreateInfo ; typedef struct VkPipelineRasterizationStateCreateInfo { VkStructureType sType ; const void* pNext ; VkPipelineRasterizationStateCreateFlags flags ; VkBool32 depthClampEnable ; VkBool32 rasterizerDiscardEnable ; VkPolygonMode polygonMode ; VkCullModeFlags cullMode ; VkFrontFace frontFace ; VkBool32 depthBiasEnable ; float depthBiasConstantFactor ; float depthBiasClamp ; float depthBiasSlopeFactor ; float lineWidth ; } VkPipelineRasterizationStateCreateInfo ; typedef struct VkPipelineMultisampleStateCreateInfo { VkStructureType sType ; const void* pNext ; VkPipelineMultisampleStateCreateFlags flags ; VkSampleCountFlagBits rasterizationSamples ; VkBool32 sampleShadingEnable ; float minSampleShading ; const VkSampleMask* pSampleMask ; VkBool32 alphaToCoverageEnable ; VkBool32 alphaToOneEnable ; } VkPipelineMultisampleStateCreateInfo ; typedef struct VkStencilOpState { VkStencilOp failOp ; VkStencilOp passOp ; VkStencilOp depthFailOp ; VkCompareOp compareOp ; uint32_t compareMask ; uint32_t writeMask ; uint32_t reference ; } VkStencilOpState ; typedef struct VkPipelineDepthStencilStateCreateInfo { VkStructureType sType ; const void* pNext ; VkPipelineDepthStencilStateCreateFlags flags ; VkBool32 depthTestEnable ; VkBool32 depthWriteEnable ; VkCompareOp depthCompareOp ; VkBool32 depthBoundsTestEnable ; VkBool32 stencilTestEnable ; VkStencilOpState front ; VkStencilOpState back ; float minDepthBounds ; float maxDepthBounds ; } VkPipelineDepthStencilStateCreateInfo ; typedef struct VkPipelineColorBlendAttachmentState { VkBool32 blendEnable ; VkBlendFactor srcColorBlendFactor ; VkBlendFactor dstColorBlendFactor ; VkBlendOp colorBlendOp ; VkBlendFactor srcAlphaBlendFactor ; VkBlendFactor dstAlphaBlendFactor ; VkBlendOp alphaBlendOp ; VkColorComponentFlags colorWriteMask ; } VkPipelineColorBlendAttachmentState ; typedef struct VkPipelineColorBlendStateCreateInfo { VkStructureType sType ; const void* pNext ; VkPipelineColorBlendStateCreateFlags flags ; VkBool32 logicOpEnable ; VkLogicOp logicOp ; uint32_t attachmentCount ; const VkPipelineColorBlendAttachmentState* pAttachments ; float blendConstants [ 4 ] ; } VkPipelineColorBlendStateCreateInfo ; typedef struct VkPipelineDynamicStateCreateInfo { VkStructureType sType ; const void* pNext ; VkPipelineDynamicStateCreateFlags flags ; uint32_t dynamicStateCount ; const VkDynamicState* pDynamicStates ; } VkPipelineDynamicStateCreateInfo ; typedef struct VkGraphicsPipelineCreateInfo { VkStructureType sType ; const void* pNext ; VkPipelineCreateFlags flags ; uint32_t stageCount ; const VkPipelineShaderStageCreateInfo* pStages ; const VkPipelineVertexInputStateCreateInfo* pVertexInputState ; const VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState ; const VkPipelineTessellationStateCreateInfo* pTessellationState ; const VkPipelineViewportStateCreateInfo* pViewportState ; const VkPipelineRasterizationStateCreateInfo* pRasterizationState ; const VkPipelineMultisampleStateCreateInfo* pMultisampleState ; const VkPipelineDepthStencilStateCreateInfo* pDepthStencilState ; const VkPipelineColorBlendStateCreateInfo* pColorBlendState ; const VkPipelineDynamicStateCreateInfo* pDynamicState ; VkPipelineLayout layout ; VkRenderPass renderPass ; uint32_t subpass ; VkPipeline basePipelineHandle ; int32_t basePipelineIndex ; } VkGraphicsPipelineCreateInfo ; typedef struct VkPushConstantRange { VkShaderStageFlags stageFlags ; uint32_t offset ; uint32_t size ; } VkPushConstantRange ; typedef struct VkPipelineLayoutCreateInfo { VkStructureType sType ; const void* pNext ; VkPipelineLayoutCreateFlags flags ; uint32_t setLayoutCount ; const VkDescriptorSetLayout* pSetLayouts ; uint32_t pushConstantRangeCount ; const VkPushConstantRange* pPushConstantRanges ; } VkPipelineLayoutCreateInfo ; typedef struct VkSamplerCreateInfo { VkStructureType sType ; const void* pNext ; VkSamplerCreateFlags flags ; VkFilter magFilter ; VkFilter minFilter ; VkSamplerMipmapMode mipmapMode ; VkSamplerAddressMode addressModeU ; VkSamplerAddressMode addressModeV ; VkSamplerAddressMode addressModeW ; float mipLodBias ; VkBool32 anisotropyEnable ; float maxAnisotropy ; VkBool32 compareEnable ; VkCompareOp compareOp ; float minLod ; float maxLod ; VkBorderColor borderColor ; VkBool32 unnormalizedCoordinates ; } VkSamplerCreateInfo ; typedef struct VkCopyDescriptorSet { VkStructureType sType ; const void* pNext ; VkDescriptorSet srcSet ; uint32_t srcBinding ; uint32_t srcArrayElement ; VkDescriptorSet dstSet ; uint32_t dstBinding ; uint32_t dstArrayElement ; uint32_t descriptorCount ; } VkCopyDescriptorSet ; typedef struct VkDescriptorBufferInfo { VkBuffer buffer ; VkDeviceSize offset ; VkDeviceSize range ; } VkDescriptorBufferInfo ; typedef struct VkDescriptorImageInfo { VkSampler sampler ; VkImageView imageView ; VkImageLayout imageLayout ; } VkDescriptorImageInfo ; typedef struct VkDescriptorPoolSize { VkDescriptorType type ; uint32_t descriptorCount ; } VkDescriptorPoolSize ; typedef struct VkDescriptorPoolCreateInfo { VkStructureType sType ; const void* pNext ; VkDescriptorPoolCreateFlags flags ; uint32_t maxSets ; uint32_t poolSizeCount ; const VkDescriptorPoolSize* pPoolSizes ; } VkDescriptorPoolCreateInfo ; typedef struct VkDescriptorSetAllocateInfo { VkStructureType sType ; const void* pNext ; VkDescriptorPool descriptorPool ; uint32_t descriptorSetCount ; const VkDescriptorSetLayout* pSetLayouts ; } VkDescriptorSetAllocateInfo ; typedef struct VkDescriptorSetLayoutBinding { uint32_t binding ; VkDescriptorType descriptorType ; uint32_t descriptorCount ; VkShaderStageFlags stageFlags ; const VkSampler* pImmutableSamplers ; } VkDescriptorSetLayoutBinding ; typedef struct VkDescriptorSetLayoutCreateInfo { VkStructureType sType ; const void* pNext ; VkDescriptorSetLayoutCreateFlags flags ; uint32_t bindingCount ; const VkDescriptorSetLayoutBinding* pBindings ; } VkDescriptorSetLayoutCreateInfo ; typedef struct VkWriteDescriptorSet { VkStructureType sType ; const void* pNext ; VkDescriptorSet dstSet ; uint32_t dstBinding ; uint32_t dstArrayElement ; uint32_t descriptorCount ; VkDescriptorType descriptorType ; const VkDescriptorImageInfo* pImageInfo ; const VkDescriptorBufferInfo* pBufferInfo ; const VkBufferView* pTexelBufferView ; } VkWriteDescriptorSet ; typedef struct VkAttachmentDescription { VkAttachmentDescriptionFlags flags ; VkFormat format ; VkSampleCountFlagBits samples ; VkAttachmentLoadOp loadOp ; VkAttachmentStoreOp storeOp ; VkAttachmentLoadOp stencilLoadOp ; VkAttachmentStoreOp stencilStoreOp ; VkImageLayout initialLayout ; VkImageLayout finalLayout ; } VkAttachmentDescription ; typedef struct VkAttachmentReference { uint32_t attachment ; VkImageLayout layout ; } VkAttachmentReference ; typedef struct VkFramebufferCreateInfo { VkStructureType sType ; const void* pNext ; VkFramebufferCreateFlags flags ; VkRenderPass renderPass ; uint32_t attachmentCount ; const VkImageView* pAttachments ; uint32_t width ; uint32_t height ; uint32_t layers ; } VkFramebufferCreateInfo ; typedef struct VkSubpassDescription { VkSubpassDescriptionFlags flags ; VkPipelineBindPoint pipelineBindPoint ; uint32_t inputAttachmentCount ; const VkAttachmentReference* pInputAttachments ; uint32_t colorAttachmentCount ; const VkAttachmentReference* pColorAttachments ; const VkAttachmentReference* pResolveAttachments ; const VkAttachmentReference* pDepthStencilAttachment ; uint32_t preserveAttachmentCount ; const uint32_t* pPreserveAttachments ; } VkSubpassDescription ; typedef struct VkSubpassDependency { uint32_t srcSubpass ; uint32_t dstSubpass ; VkPipelineStageFlags srcStageMask ; VkPipelineStageFlags dstStageMask ; VkAccessFlags srcAccessMask ; VkAccessFlags dstAccessMask ; VkDependencyFlags dependencyFlags ; } VkSubpassDependency ; typedef struct VkRenderPassCreateInfo { VkStructureType sType ; const void* pNext ; VkRenderPassCreateFlags flags ; uint32_t attachmentCount ; const VkAttachmentDescription* pAttachments ; uint32_t subpassCount ; const VkSubpassDescription* pSubpasses ; uint32_t dependencyCount ; const VkSubpassDependency* pDependencies ; } VkRenderPassCreateInfo ; typedef struct VkCommandPoolCreateInfo { VkStructureType sType ; const void* pNext ; VkCommandPoolCreateFlags flags ; uint32_t queueFamilyIndex ; } VkCommandPoolCreateInfo ; typedef struct VkCommandBufferAllocateInfo { VkStructureType sType ; const void* pNext ; VkCommandPool commandPool ; VkCommandBufferLevel level ; uint32_t commandBufferCount ; } VkCommandBufferAllocateInfo ; typedef struct VkCommandBufferInheritanceInfo { VkStructureType sType ; const void* pNext ; VkRenderPass renderPass ; uint32_t subpass ; VkFramebuffer framebuffer ; VkBool32 occlusionQueryEnable ; VkQueryControlFlags queryFlags ; VkQueryPipelineStatisticFlags pipelineStatistics ; } VkCommandBufferInheritanceInfo ; typedef struct VkCommandBufferBeginInfo { VkStructureType sType ; const void* pNext ; VkCommandBufferUsageFlags flags ; const VkCommandBufferInheritanceInfo* pInheritanceInfo ; } VkCommandBufferBeginInfo ; typedef struct VkBufferCopy { VkDeviceSize srcOffset ; VkDeviceSize dstOffset ; VkDeviceSize size ; } VkBufferCopy ; typedef struct VkImageSubresourceLayers { VkImageAspectFlags aspectMask ; uint32_t mipLevel ; uint32_t baseArrayLayer ; uint32_t layerCount ; } VkImageSubresourceLayers ; typedef struct VkBufferImageCopy { VkDeviceSize bufferOffset ; uint32_t bufferRowLength ; uint32_t bufferImageHeight ; VkImageSubresourceLayers imageSubresource ; VkOffset3D imageOffset ; VkExtent3D imageExtent ; } VkBufferImageCopy ; typedef union VkClearColorValue { float float32 [ 4 ] ; int32_t int32 [ 4 ] ; uint32_t uint32 [ 4 ] ; } VkClearColorValue ; typedef struct VkClearDepthStencilValue { float depth ; uint32_t stencil ; } VkClearDepthStencilValue ; typedef union VkClearValue { VkClearColorValue color ; VkClearDepthStencilValue depthStencil ; } VkClearValue ; typedef struct VkClearAttachment { VkImageAspectFlags aspectMask ; uint32_t colorAttachment ; VkClearValue clearValue ; } VkClearAttachment ; typedef struct VkClearRect { VkRect2D rect ; uint32_t baseArrayLayer ; uint32_t layerCount ; } VkClearRect ; typedef struct VkImageBlit { VkImageSubresourceLayers srcSubresource ; VkOffset3D srcOffsets [ 2 ] ; VkImageSubresourceLayers dstSubresource ; VkOffset3D dstOffsets [ 2 ] ; } VkImageBlit ; typedef struct VkImageCopy { VkImageSubresourceLayers srcSubresource ; VkOffset3D srcOffset ; VkImageSubresourceLayers dstSubresource ; VkOffset3D dstOffset ; VkExtent3D extent ; } VkImageCopy ; typedef struct VkImageResolve { VkImageSubresourceLayers srcSubresource ; VkOffset3D srcOffset ; VkImageSubresourceLayers dstSubresource ; VkOffset3D dstOffset ; VkExtent3D extent ; } VkImageResolve ; typedef struct VkRenderPassBeginInfo { VkStructureType sType ; const void* pNext ; VkRenderPass renderPass ; VkFramebuffer framebuffer ; VkRect2D renderArea ; uint32_t clearValueCount ; const VkClearValue* pClearValues ; } VkRenderPassBeginInfo ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateInstance)(const VkInstanceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkInstance* pInstance)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyInstance)(VkInstance instance, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkEnumeratePhysicalDevices)(VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceFeatures)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceImageFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceProperties)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceQueueFamilyProperties)(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceMemoryProperties)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties)"
  },
  {
    "label": "PFN_vkVoidFunction()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "PFN_vkVoidFunction(VKAPI_PTR *PFN_vkGetInstanceProcAddr)(VkInstance instance, const char* pName)"
  },
  {
    "label": "PFN_vkVoidFunction()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "PFN_vkVoidFunction(VKAPI_PTR *PFN_vkGetDeviceProcAddr)(VkDevice device, const char* pName)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateDevice)(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyDevice)(VkDevice device, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkEnumerateInstanceExtensionProperties)(const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkEnumerateDeviceExtensionProperties)(VkPhysicalDevice physicalDevice, const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkEnumerateInstanceLayerProperties)(uint32_t* pPropertyCount, VkLayerProperties* pProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkEnumerateDeviceLayerProperties)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDeviceQueue)(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkQueueSubmit)(VkQueue queue, uint32_t submitCount, const VkSubmitInfo* pSubmits, VkFence fence)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkQueueWaitIdle)(VkQueue queue)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkDeviceWaitIdle)(VkDevice device)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkAllocateMemory)(VkDevice device, const VkMemoryAllocateInfo* pAllocateInfo, const VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkFreeMemory)(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkMapMemory)(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkUnmapMemory)(VkDevice device, VkDeviceMemory memory)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkFlushMappedMemoryRanges)(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkInvalidateMappedMemoryRanges)(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDeviceMemoryCommitment)(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkBindBufferMemory)(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkBindImageMemory)(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetBufferMemoryRequirements)(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetImageMemoryRequirements)(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetImageSparseMemoryRequirements)(VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceSparseImageFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkQueueBindSparse)(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo* pBindInfo, VkFence fence)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateFence)(VkDevice device, const VkFenceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyFence)(VkDevice device, VkFence fence, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkResetFences)(VkDevice device, uint32_t fenceCount, const VkFence* pFences)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetFenceStatus)(VkDevice device, VkFence fence)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkWaitForFences)(VkDevice device, uint32_t fenceCount, const VkFence* pFences, VkBool32 waitAll, uint64_t timeout)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateSemaphore)(VkDevice device, const VkSemaphoreCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroySemaphore)(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateEvent)(VkDevice device, const VkEventCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkEvent* pEvent)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyEvent)(VkDevice device, VkEvent event, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetEventStatus)(VkDevice device, VkEvent event)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkSetEvent)(VkDevice device, VkEvent event)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkResetEvent)(VkDevice device, VkEvent event)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateQueryPool)(VkDevice device, const VkQueryPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyQueryPool)(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetQueryPoolResults)(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateBuffer)(VkDevice device, const VkBufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyBuffer)(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateBufferView)(VkDevice device, const VkBufferViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferView* pView)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyBufferView)(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateImage)(VkDevice device, const VkImageCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImage* pImage)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyImage)(VkDevice device, VkImage image, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetImageSubresourceLayout)(VkDevice device, VkImage image, const VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateImageView)(VkDevice device, const VkImageViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImageView* pView)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyImageView)(VkDevice device, VkImageView imageView, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateShaderModule)(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyShaderModule)(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreatePipelineCache)(VkDevice device, const VkPipelineCacheCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyPipelineCache)(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPipelineCacheData)(VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkMergePipelineCaches)(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache* pSrcCaches)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateGraphicsPipelines)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateComputePipelines)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyPipeline)(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreatePipelineLayout)(VkDevice device, const VkPipelineLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyPipelineLayout)(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateSampler)(VkDevice device, const VkSamplerCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSampler* pSampler)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroySampler)(VkDevice device, VkSampler sampler, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateDescriptorSetLayout)(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyDescriptorSetLayout)(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateDescriptorPool)(VkDevice device, const VkDescriptorPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkResetDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkAllocateDescriptorSets)(VkDevice device, const VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkFreeDescriptorSets)(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkUpdateDescriptorSets)(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet* pDescriptorCopies)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateFramebuffer)(VkDevice device, const VkFramebufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyFramebuffer)(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateRenderPass)(VkDevice device, const VkRenderPassCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyRenderPass)(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetRenderAreaGranularity)(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateCommandPool)(VkDevice device, const VkCommandPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyCommandPool)(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkResetCommandPool)(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkAllocateCommandBuffers)(VkDevice device, const VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkFreeCommandBuffers)(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkBeginCommandBuffer)(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkEndCommandBuffer)(VkCommandBuffer commandBuffer)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkResetCommandBuffer)(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBindPipeline)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetViewport)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetScissor)(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetLineWidth)(VkCommandBuffer commandBuffer, float lineWidth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDepthBias)(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetBlendConstants)(VkCommandBuffer commandBuffer, const float blendConstants[4])"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDepthBounds)(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetStencilCompareMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetStencilWriteMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetStencilReference)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBindDescriptorSets)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBindIndexBuffer)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBindVertexBuffers)(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDraw)(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawIndexed)(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawIndexedIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDispatch)(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDispatchIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyBuffer)(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBlitImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyBufferToImage)(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyImageToBuffer)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdUpdateBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdFillBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdClearColorImage)(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdClearDepthStencilImage)(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdClearAttachments)(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdResolveImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdResetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdWaitEvents)(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdPipelineBarrier)(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBeginQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdEndQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdResetQueryPool)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdWriteTimestamp)(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyQueryPoolResults)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdPushConstants)(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBeginRenderPass)(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdNextSubpass)(VkCommandBuffer commandBuffer, VkSubpassContents contents)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdEndRenderPass)(VkCommandBuffer commandBuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdExecuteCommands)(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers)"
  },
  {
    "label": "vkCreateInstance()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateInstance(const VkInstanceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkInstance* pInstance)"
  },
  {
    "label": "vkDestroyInstance()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyInstance(VkInstance instance, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkEnumeratePhysicalDevices()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkEnumeratePhysicalDevices(VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices)"
  },
  {
    "label": "vkGetPhysicalDeviceFeatures()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures)"
  },
  {
    "label": "vkGetPhysicalDeviceFormatProperties()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceImageFormatProperties()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceProperties()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceQueueFamilyProperties()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceMemoryProperties()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties)"
  },
  {
    "label": "vkGetInstanceProcAddr()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL)",
    "insertText": "vkGetInstanceProcAddr(VkInstance instance, const char* pName)"
  },
  {
    "label": "vkGetDeviceProcAddr()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL)",
    "insertText": "vkGetDeviceProcAddr(VkDevice device, const char* pName)"
  },
  {
    "label": "vkCreateDevice()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice)"
  },
  {
    "label": "vkDestroyDevice()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyDevice(VkDevice device, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkEnumerateInstanceExtensionProperties()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkEnumerateInstanceExtensionProperties(const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties)"
  },
  {
    "label": "vkEnumerateDeviceExtensionProperties()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties)"
  },
  {
    "label": "vkEnumerateInstanceLayerProperties()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkEnumerateInstanceLayerProperties(uint32_t* pPropertyCount, VkLayerProperties* pProperties)"
  },
  {
    "label": "vkEnumerateDeviceLayerProperties()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties)"
  },
  {
    "label": "vkGetDeviceQueue()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue)"
  },
  {
    "label": "vkQueueSubmit()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo* pSubmits, VkFence fence)"
  },
  {
    "label": "vkQueueWaitIdle()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkQueueWaitIdle(VkQueue queue)"
  },
  {
    "label": "vkDeviceWaitIdle()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkDeviceWaitIdle(VkDevice device)"
  },
  {
    "label": "vkAllocateMemory()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkAllocateMemory(VkDevice device, const VkMemoryAllocateInfo* pAllocateInfo, const VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory)"
  },
  {
    "label": "vkFreeMemory()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkFreeMemory(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkMapMemory()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData)"
  },
  {
    "label": "vkUnmapMemory()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkUnmapMemory(VkDevice device, VkDeviceMemory memory)"
  },
  {
    "label": "vkFlushMappedMemoryRanges()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkFlushMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges)"
  },
  {
    "label": "vkInvalidateMappedMemoryRanges()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkInvalidateMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges)"
  },
  {
    "label": "vkGetDeviceMemoryCommitment()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes)"
  },
  {
    "label": "vkBindBufferMemory()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset)"
  },
  {
    "label": "vkBindImageMemory()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset)"
  },
  {
    "label": "vkGetBufferMemoryRequirements()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements)"
  },
  {
    "label": "vkGetImageMemoryRequirements()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements)"
  },
  {
    "label": "vkGetImageSparseMemoryRequirements()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements)"
  },
  {
    "label": "vkGetPhysicalDeviceSparseImageFormatProperties()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties)"
  },
  {
    "label": "vkQueueBindSparse()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkQueueBindSparse(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo* pBindInfo, VkFence fence)"
  },
  {
    "label": "vkCreateFence()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateFence(VkDevice device, const VkFenceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence)"
  },
  {
    "label": "vkDestroyFence()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyFence(VkDevice device, VkFence fence, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkResetFences()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkResetFences(VkDevice device, uint32_t fenceCount, const VkFence* pFences)"
  },
  {
    "label": "vkGetFenceStatus()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetFenceStatus(VkDevice device, VkFence fence)"
  },
  {
    "label": "vkWaitForFences()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkWaitForFences(VkDevice device, uint32_t fenceCount, const VkFence* pFences, VkBool32 waitAll, uint64_t timeout)"
  },
  {
    "label": "vkCreateSemaphore()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateSemaphore(VkDevice device, const VkSemaphoreCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore)"
  },
  {
    "label": "vkDestroySemaphore()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCreateEvent()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateEvent(VkDevice device, const VkEventCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkEvent* pEvent)"
  },
  {
    "label": "vkDestroyEvent()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyEvent(VkDevice device, VkEvent event, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkGetEventStatus()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetEventStatus(VkDevice device, VkEvent event)"
  },
  {
    "label": "vkSetEvent()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkSetEvent(VkDevice device, VkEvent event)"
  },
  {
    "label": "vkResetEvent()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkResetEvent(VkDevice device, VkEvent event)"
  },
  {
    "label": "vkCreateQueryPool()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateQueryPool(VkDevice device, const VkQueryPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool)"
  },
  {
    "label": "vkDestroyQueryPool()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkGetQueryPoolResults()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags)"
  },
  {
    "label": "vkCreateBuffer()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateBuffer(VkDevice device, const VkBufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer)"
  },
  {
    "label": "vkDestroyBuffer()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyBuffer(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCreateBufferView()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateBufferView(VkDevice device, const VkBufferViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferView* pView)"
  },
  {
    "label": "vkDestroyBufferView()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyBufferView(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCreateImage()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateImage(VkDevice device, const VkImageCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImage* pImage)"
  },
  {
    "label": "vkDestroyImage()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyImage(VkDevice device, VkImage image, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkGetImageSubresourceLayout()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetImageSubresourceLayout(VkDevice device, VkImage image, const VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout)"
  },
  {
    "label": "vkCreateImageView()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateImageView(VkDevice device, const VkImageViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImageView* pView)"
  },
  {
    "label": "vkDestroyImageView()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyImageView(VkDevice device, VkImageView imageView, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCreateShaderModule()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateShaderModule(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule)"
  },
  {
    "label": "vkDestroyShaderModule()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCreatePipelineCache()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreatePipelineCache(VkDevice device, const VkPipelineCacheCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache)"
  },
  {
    "label": "vkDestroyPipelineCache()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkGetPipelineCacheData()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData)"
  },
  {
    "label": "vkMergePipelineCaches()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache* pSrcCaches)"
  },
  {
    "label": "vkCreateGraphicsPipelines()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)"
  },
  {
    "label": "vkCreateComputePipelines()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)"
  },
  {
    "label": "vkDestroyPipeline()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyPipeline(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCreatePipelineLayout()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreatePipelineLayout(VkDevice device, const VkPipelineLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout)"
  },
  {
    "label": "vkDestroyPipelineLayout()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCreateSampler()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateSampler(VkDevice device, const VkSamplerCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSampler* pSampler)"
  },
  {
    "label": "vkDestroySampler()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroySampler(VkDevice device, VkSampler sampler, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCreateDescriptorSetLayout()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateDescriptorSetLayout(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout)"
  },
  {
    "label": "vkDestroyDescriptorSetLayout()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCreateDescriptorPool()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateDescriptorPool(VkDevice device, const VkDescriptorPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool)"
  },
  {
    "label": "vkDestroyDescriptorPool()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkResetDescriptorPool()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags)"
  },
  {
    "label": "vkAllocateDescriptorSets()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkAllocateDescriptorSets(VkDevice device, const VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets)"
  },
  {
    "label": "vkFreeDescriptorSets()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets)"
  },
  {
    "label": "vkUpdateDescriptorSets()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet* pDescriptorCopies)"
  },
  {
    "label": "vkCreateFramebuffer()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateFramebuffer(VkDevice device, const VkFramebufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer)"
  },
  {
    "label": "vkDestroyFramebuffer()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCreateRenderPass()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateRenderPass(VkDevice device, const VkRenderPassCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)"
  },
  {
    "label": "vkDestroyRenderPass()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkGetRenderAreaGranularity()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity)"
  },
  {
    "label": "vkCreateCommandPool()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateCommandPool(VkDevice device, const VkCommandPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool)"
  },
  {
    "label": "vkDestroyCommandPool()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkResetCommandPool()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)"
  },
  {
    "label": "vkAllocateCommandBuffers()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkAllocateCommandBuffers(VkDevice device, const VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers)"
  },
  {
    "label": "vkFreeCommandBuffers()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers)"
  },
  {
    "label": "vkBeginCommandBuffer()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo)"
  },
  {
    "label": "vkEndCommandBuffer()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkEndCommandBuffer(VkCommandBuffer commandBuffer)"
  },
  {
    "label": "vkResetCommandBuffer()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)"
  },
  {
    "label": "vkCmdBindPipeline()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)"
  },
  {
    "label": "vkCmdSetViewport()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports)"
  },
  {
    "label": "vkCmdSetScissor()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors)"
  },
  {
    "label": "vkCmdSetLineWidth()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)"
  },
  {
    "label": "vkCmdSetDepthBias()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)"
  },
  {
    "label": "vkCmdSetBlendConstants()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4])"
  },
  {
    "label": "vkCmdSetDepthBounds()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)"
  },
  {
    "label": "vkCmdSetStencilCompareMask()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)"
  },
  {
    "label": "vkCmdSetStencilWriteMask()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)"
  },
  {
    "label": "vkCmdSetStencilReference()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)"
  },
  {
    "label": "vkCmdBindDescriptorSets()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets)"
  },
  {
    "label": "vkCmdBindIndexBuffer()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)"
  },
  {
    "label": "vkCmdBindVertexBuffers()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets)"
  },
  {
    "label": "vkCmdDraw()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)"
  },
  {
    "label": "vkCmdDrawIndexed()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)"
  },
  {
    "label": "vkCmdDrawIndirect()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)"
  },
  {
    "label": "vkCmdDrawIndexedIndirect()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)"
  },
  {
    "label": "vkCmdDispatch()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)"
  },
  {
    "label": "vkCmdDispatchIndirect()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)"
  },
  {
    "label": "vkCmdCopyBuffer()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions)"
  },
  {
    "label": "vkCmdCopyImage()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions)"
  },
  {
    "label": "vkCmdBlitImage()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter)"
  },
  {
    "label": "vkCmdCopyBufferToImage()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions)"
  },
  {
    "label": "vkCmdCopyImageToBuffer()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions)"
  },
  {
    "label": "vkCmdUpdateBuffer()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData)"
  },
  {
    "label": "vkCmdFillBuffer()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)"
  },
  {
    "label": "vkCmdClearColorImage()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges)"
  },
  {
    "label": "vkCmdClearDepthStencilImage()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges)"
  },
  {
    "label": "vkCmdClearAttachments()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects)"
  },
  {
    "label": "vkCmdResolveImage()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions)"
  },
  {
    "label": "vkCmdSetEvent()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)"
  },
  {
    "label": "vkCmdResetEvent()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)"
  },
  {
    "label": "vkCmdWaitEvents()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers)"
  },
  {
    "label": "vkCmdPipelineBarrier()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers)"
  },
  {
    "label": "vkCmdBeginQuery()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)"
  },
  {
    "label": "vkCmdEndQuery()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)"
  },
  {
    "label": "vkCmdResetQueryPool()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)"
  },
  {
    "label": "vkCmdWriteTimestamp()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)"
  },
  {
    "label": "vkCmdCopyQueryPoolResults()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)"
  },
  {
    "label": "vkCmdPushConstants()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues)"
  },
  {
    "label": "vkCmdBeginRenderPass()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents)"
  },
  {
    "label": "vkCmdNextSubpass()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)"
  },
  {
    "label": "vkCmdEndRenderPass()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdEndRenderPass(VkCommandBuffer commandBuffer)"
  },
  {
    "label": "vkCmdExecuteCommands()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers)"
  },
  {
    "label": "VK_MAKE_API_VERSION()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_VERSION_1_1 1 # define VK_API_VERSION_1_1)",
    "insertText": "VK_MAKE_API_VERSION(0, 1, 1, 0) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSamplerYcbcrConversion) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorUpdateTemplate) #define VK_MAX_DEVICE_GROUP_SIZE 32U #define VK_LUID_SIZE 8U #define VK_QUEUE_FAMILY_EXTERNAL (~1U)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 0 x7FFFFFFF } VkPointClippingBehavior ; typedef enum VkTessellationDomainOrigin { VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 0 x7FFFFFFF } VkTessellationDomainOrigin ; typedef enum VkSamplerYcbcrModelConversion { VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 0 x7FFFFFFF } VkSamplerYcbcrModelConversion ; typedef enum VkSamplerYcbcrRange { VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_FULL,VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 0 x7FFFFFFF } VkSamplerYcbcrRange ; typedef enum VkChromaLocation { VK_CHROMA_LOCATION_COSITED_EVEN = 0,VK_CHROMA_LOCATION_MIDPOINT = 1,VK_CHROMA_LOCATION_COSITED_EVEN_KHR = VK_CHROMA_LOCATION_COSITED_EVEN,VK_CHROMA_LOCATION_MIDPOINT_KHR = VK_CHROMA_LOCATION_MIDPOINT,VK_CHROMA_LOCATION_MAX_ENUM = 0 x7FFFFFFF } VkChromaLocation ; typedef enum VkDescriptorUpdateTemplateType { VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 0 x7FFFFFFF } VkDescriptorUpdateTemplateType ; typedef enum VkSubgroupFeatureFlagBits { VK_SUBGROUP_FEATURE_BASIC_BIT = 0 x00000001,VK_SUBGROUP_FEATURE_VOTE_BIT = 0 x00000002,VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 0 x00000004,VK_SUBGROUP_FEATURE_BALLOT_BIT = 0 x00000008,VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 0 x00000010,VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 0 x00000020,VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 0 x00000040,VK_SUBGROUP_FEATURE_QUAD_BIT = 0 x00000080,VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0 x00000100,VK_SUBGROUP_FEATURE_ROTATE_BIT_KHR = 0 x00000200,VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR = 0 x00000400,VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkSubgroupFeatureFlagBits ; typedef VkFlags VkSubgroupFeatureFlags ; typedef enum VkPeerMemoryFeatureFlagBits { VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 0 x00000001,VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 0 x00000002,VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 0 x00000004,VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 0 x00000008,VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkPeerMemoryFeatureFlagBits ; typedef VkFlags VkPeerMemoryFeatureFlags ; typedef enum VkMemoryAllocateFlagBits { VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 0 x00000001,VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 0 x00000002,VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 0 x00000004,VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT,VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkMemoryAllocateFlagBits ; typedef VkFlags VkMemoryAllocateFlags ; typedef VkFlags VkCommandPoolTrimFlags ; typedef VkFlags VkDescriptorUpdateTemplateCreateFlags ; typedef enum VkExternalMemoryHandleTypeFlagBits { VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 0 x00000001,VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0 x00000002,VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0 x00000004,VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 0 x00000008,VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 0 x00000010,VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 0 x00000020,VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 0 x00000040,VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 0 x00000200,VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 0 x00000400,VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 0 x00000080,VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 0 x00000100,VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 0 x00000800,VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = 0 x00001000,VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX = 0 x00004000,VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkExternalMemoryHandleTypeFlagBits ; typedef VkFlags VkExternalMemoryHandleTypeFlags ; typedef enum VkExternalMemoryFeatureFlagBits { VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 0 x00000001,VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 0 x00000002,VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 0 x00000004,VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkExternalMemoryFeatureFlagBits ; typedef VkFlags VkExternalMemoryFeatureFlags ; typedef enum VkExternalFenceHandleTypeFlagBits { VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 0 x00000001,VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0 x00000002,VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0 x00000004,VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 0 x00000008,VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkExternalFenceHandleTypeFlagBits ; typedef VkFlags VkExternalFenceHandleTypeFlags ; typedef enum VkExternalFenceFeatureFlagBits { VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 0 x00000001,VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 0 x00000002,VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkExternalFenceFeatureFlagBits ; typedef VkFlags VkExternalFenceFeatureFlags ; typedef enum VkFenceImportFlagBits { VK_FENCE_IMPORT_TEMPORARY_BIT = 0 x00000001,VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = VK_FENCE_IMPORT_TEMPORARY_BIT,VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkFenceImportFlagBits ; typedef VkFlags VkFenceImportFlags ; typedef enum VkSemaphoreImportFlagBits { VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 0 x00000001,VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkSemaphoreImportFlagBits ; typedef VkFlags VkSemaphoreImportFlags ; typedef enum VkExternalSemaphoreHandleTypeFlagBits { VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 0 x00000001,VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0 x00000002,VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0 x00000004,VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 0 x00000008,VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 0 x00000010,VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 0 x00000080,VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkExternalSemaphoreHandleTypeFlagBits ; typedef VkFlags VkExternalSemaphoreHandleTypeFlags ; typedef enum VkExternalSemaphoreFeatureFlagBits { VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 0 x00000001,VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 0 x00000002,VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkExternalSemaphoreFeatureFlagBits ; typedef VkFlags VkExternalSemaphoreFeatureFlags ; typedef struct VkPhysicalDeviceSubgroupProperties { VkStructureType sType ; void* pNext ; uint32_t subgroupSize ; VkShaderStageFlags supportedStages ; VkSubgroupFeatureFlags supportedOperations ; VkBool32 quadOperationsInAllStages ; } VkPhysicalDeviceSubgroupProperties ; typedef struct VkBindBufferMemoryInfo { VkStructureType sType ; const void* pNext ; VkBuffer buffer ; VkDeviceMemory memory ; VkDeviceSize memoryOffset ; } VkBindBufferMemoryInfo ; typedef struct VkBindImageMemoryInfo { VkStructureType sType ; const void* pNext ; VkImage image ; VkDeviceMemory memory ; VkDeviceSize memoryOffset ; } VkBindImageMemoryInfo ; typedef struct VkPhysicalDevice16BitStorageFeatures { VkStructureType sType ; void* pNext ; VkBool32 storageBuffer16BitAccess ; VkBool32 uniformAndStorageBuffer16BitAccess ; VkBool32 storagePushConstant16 ; VkBool32 storageInputOutput16 ; } VkPhysicalDevice16BitStorageFeatures ; typedef struct VkMemoryDedicatedRequirements { VkStructureType sType ; void* pNext ; VkBool32 prefersDedicatedAllocation ; VkBool32 requiresDedicatedAllocation ; } VkMemoryDedicatedRequirements ; typedef struct VkMemoryDedicatedAllocateInfo { VkStructureType sType ; const void* pNext ; VkImage image ; VkBuffer buffer ; } VkMemoryDedicatedAllocateInfo ; typedef struct VkMemoryAllocateFlagsInfo { VkStructureType sType ; const void* pNext ; VkMemoryAllocateFlags flags ; uint32_t deviceMask ; } VkMemoryAllocateFlagsInfo ; typedef struct VkDeviceGroupRenderPassBeginInfo { VkStructureType sType ; const void* pNext ; uint32_t deviceMask ; uint32_t deviceRenderAreaCount ; const VkRect2D* pDeviceRenderAreas ; } VkDeviceGroupRenderPassBeginInfo ; typedef struct VkDeviceGroupCommandBufferBeginInfo { VkStructureType sType ; const void* pNext ; uint32_t deviceMask ; } VkDeviceGroupCommandBufferBeginInfo ; typedef struct VkDeviceGroupSubmitInfo { VkStructureType sType ; const void* pNext ; uint32_t waitSemaphoreCount ; const uint32_t* pWaitSemaphoreDeviceIndices ; uint32_t commandBufferCount ; const uint32_t* pCommandBufferDeviceMasks ; uint32_t signalSemaphoreCount ; const uint32_t* pSignalSemaphoreDeviceIndices ; } VkDeviceGroupSubmitInfo ; typedef struct VkDeviceGroupBindSparseInfo { VkStructureType sType ; const void* pNext ; uint32_t resourceDeviceIndex ; uint32_t memoryDeviceIndex ; } VkDeviceGroupBindSparseInfo ; typedef struct VkBindBufferMemoryDeviceGroupInfo { VkStructureType sType ; const void* pNext ; uint32_t deviceIndexCount ; const uint32_t* pDeviceIndices ; } VkBindBufferMemoryDeviceGroupInfo ; typedef struct VkBindImageMemoryDeviceGroupInfo { VkStructureType sType ; const void* pNext ; uint32_t deviceIndexCount ; const uint32_t* pDeviceIndices ; uint32_t splitInstanceBindRegionCount ; const VkRect2D* pSplitInstanceBindRegions ; } VkBindImageMemoryDeviceGroupInfo ; typedef struct VkPhysicalDeviceGroupProperties { VkStructureType sType ; void* pNext ; uint32_t physicalDeviceCount ; VkPhysicalDevice physicalDevices [ VK_MAX_DEVICE_GROUP_SIZE ] ; VkBool32 subsetAllocation ; } VkPhysicalDeviceGroupProperties ; typedef struct VkDeviceGroupDeviceCreateInfo { VkStructureType sType ; const void* pNext ; uint32_t physicalDeviceCount ; const VkPhysicalDevice* pPhysicalDevices ; } VkDeviceGroupDeviceCreateInfo ; typedef struct VkBufferMemoryRequirementsInfo2 { VkStructureType sType ; const void* pNext ; VkBuffer buffer ; } VkBufferMemoryRequirementsInfo2 ; typedef struct VkImageMemoryRequirementsInfo2 { VkStructureType sType ; const void* pNext ; VkImage image ; } VkImageMemoryRequirementsInfo2 ; typedef struct VkImageSparseMemoryRequirementsInfo2 { VkStructureType sType ; const void* pNext ; VkImage image ; } VkImageSparseMemoryRequirementsInfo2 ; typedef struct VkMemoryRequirements2 { VkStructureType sType ; void* pNext ; VkMemoryRequirements memoryRequirements ; } VkMemoryRequirements2 ; typedef struct VkSparseImageMemoryRequirements2 { VkStructureType sType ; void* pNext ; VkSparseImageMemoryRequirements memoryRequirements ; } VkSparseImageMemoryRequirements2 ; typedef struct VkPhysicalDeviceFeatures2 { VkStructureType sType ; void* pNext ; VkPhysicalDeviceFeatures features ; } VkPhysicalDeviceFeatures2 ; typedef struct VkPhysicalDeviceProperties2 { VkStructureType sType ; void* pNext ; VkPhysicalDeviceProperties properties ; } VkPhysicalDeviceProperties2 ; typedef struct VkFormatProperties2 { VkStructureType sType ; void* pNext ; VkFormatProperties formatProperties ; } VkFormatProperties2 ; typedef struct VkImageFormatProperties2 { VkStructureType sType ; void* pNext ; VkImageFormatProperties imageFormatProperties ; } VkImageFormatProperties2 ; typedef struct VkPhysicalDeviceImageFormatInfo2 { VkStructureType sType ; const void* pNext ; VkFormat format ; VkImageType type ; VkImageTiling tiling ; VkImageUsageFlags usage ; VkImageCreateFlags flags ; } VkPhysicalDeviceImageFormatInfo2 ; typedef struct VkQueueFamilyProperties2 { VkStructureType sType ; void* pNext ; VkQueueFamilyProperties queueFamilyProperties ; } VkQueueFamilyProperties2 ; typedef struct VkPhysicalDeviceMemoryProperties2 { VkStructureType sType ; void* pNext ; VkPhysicalDeviceMemoryProperties memoryProperties ; } VkPhysicalDeviceMemoryProperties2 ; typedef struct VkSparseImageFormatProperties2 { VkStructureType sType ; void* pNext ; VkSparseImageFormatProperties properties ; } VkSparseImageFormatProperties2 ; typedef struct VkPhysicalDeviceSparseImageFormatInfo2 { VkStructureType sType ; const void* pNext ; VkFormat format ; VkImageType type ; VkSampleCountFlagBits samples ; VkImageUsageFlags usage ; VkImageTiling tiling ; } VkPhysicalDeviceSparseImageFormatInfo2 ; typedef struct VkPhysicalDevicePointClippingProperties { VkStructureType sType ; void* pNext ; VkPointClippingBehavior pointClippingBehavior ; } VkPhysicalDevicePointClippingProperties ; typedef struct VkInputAttachmentAspectReference { uint32_t subpass ; uint32_t inputAttachmentIndex ; VkImageAspectFlags aspectMask ; } VkInputAttachmentAspectReference ; typedef struct VkRenderPassInputAttachmentAspectCreateInfo { VkStructureType sType ; const void* pNext ; uint32_t aspectReferenceCount ; const VkInputAttachmentAspectReference* pAspectReferences ; } VkRenderPassInputAttachmentAspectCreateInfo ; typedef struct VkImageViewUsageCreateInfo { VkStructureType sType ; const void* pNext ; VkImageUsageFlags usage ; } VkImageViewUsageCreateInfo ; typedef struct VkPipelineTessellationDomainOriginStateCreateInfo { VkStructureType sType ; const void* pNext ; VkTessellationDomainOrigin domainOrigin ; } VkPipelineTessellationDomainOriginStateCreateInfo ; typedef struct VkRenderPassMultiviewCreateInfo { VkStructureType sType ; const void* pNext ; uint32_t subpassCount ; const uint32_t* pViewMasks ; uint32_t dependencyCount ; const int32_t* pViewOffsets ; uint32_t correlationMaskCount ; const uint32_t* pCorrelationMasks ; } VkRenderPassMultiviewCreateInfo ; typedef struct VkPhysicalDeviceMultiviewFeatures { VkStructureType sType ; void* pNext ; VkBool32 multiview ; VkBool32 multiviewGeometryShader ; VkBool32 multiviewTessellationShader ; } VkPhysicalDeviceMultiviewFeatures ; typedef struct VkPhysicalDeviceMultiviewProperties { VkStructureType sType ; void* pNext ; uint32_t maxMultiviewViewCount ; uint32_t maxMultiviewInstanceIndex ; } VkPhysicalDeviceMultiviewProperties ; typedef struct VkPhysicalDeviceVariablePointersFeatures { VkStructureType sType ; void* pNext ; VkBool32 variablePointersStorageBuffer ; VkBool32 variablePointers ; } VkPhysicalDeviceVariablePointersFeatures ; typedef VkPhysicalDeviceVariablePointersFeatures VkPhysicalDeviceVariablePointerFeatures ; typedef struct VkPhysicalDeviceProtectedMemoryFeatures { VkStructureType sType ; void* pNext ; VkBool32 protectedMemory ; } VkPhysicalDeviceProtectedMemoryFeatures ; typedef struct VkPhysicalDeviceProtectedMemoryProperties { VkStructureType sType ; void* pNext ; VkBool32 protectedNoFault ; } VkPhysicalDeviceProtectedMemoryProperties ; typedef struct VkDeviceQueueInfo2 { VkStructureType sType ; const void* pNext ; VkDeviceQueueCreateFlags flags ; uint32_t queueFamilyIndex ; uint32_t queueIndex ; } VkDeviceQueueInfo2 ; typedef struct VkProtectedSubmitInfo { VkStructureType sType ; const void* pNext ; VkBool32 protectedSubmit ; } VkProtectedSubmitInfo ; typedef struct VkSamplerYcbcrConversionCreateInfo { VkStructureType sType ; const void* pNext ; VkFormat format ; VkSamplerYcbcrModelConversion ycbcrModel ; VkSamplerYcbcrRange ycbcrRange ; VkComponentMapping components ; VkChromaLocation xChromaOffset ; VkChromaLocation yChromaOffset ; VkFilter chromaFilter ; VkBool32 forceExplicitReconstruction ; } VkSamplerYcbcrConversionCreateInfo ; typedef struct VkSamplerYcbcrConversionInfo { VkStructureType sType ; const void* pNext ; VkSamplerYcbcrConversion conversion ; } VkSamplerYcbcrConversionInfo ; typedef struct VkBindImagePlaneMemoryInfo { VkStructureType sType ; const void* pNext ; VkImageAspectFlagBits planeAspect ; } VkBindImagePlaneMemoryInfo ; typedef struct VkImagePlaneMemoryRequirementsInfo { VkStructureType sType ; const void* pNext ; VkImageAspectFlagBits planeAspect ; } VkImagePlaneMemoryRequirementsInfo ; typedef struct VkPhysicalDeviceSamplerYcbcrConversionFeatures { VkStructureType sType ; void* pNext ; VkBool32 samplerYcbcrConversion ; } VkPhysicalDeviceSamplerYcbcrConversionFeatures ; typedef struct VkSamplerYcbcrConversionImageFormatProperties { VkStructureType sType ; void* pNext ; uint32_t combinedImageSamplerDescriptorCount ; } VkSamplerYcbcrConversionImageFormatProperties ; typedef struct VkDescriptorUpdateTemplateEntry { uint32_t dstBinding ; uint32_t dstArrayElement ; uint32_t descriptorCount ; VkDescriptorType descriptorType ; size_t offset ; size_t stride ; } VkDescriptorUpdateTemplateEntry ; typedef struct VkDescriptorUpdateTemplateCreateInfo { VkStructureType sType ; const void* pNext ; VkDescriptorUpdateTemplateCreateFlags flags ; uint32_t descriptorUpdateEntryCount ; const VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries ; VkDescriptorUpdateTemplateType templateType ; VkDescriptorSetLayout descriptorSetLayout ; VkPipelineBindPoint pipelineBindPoint ; VkPipelineLayout pipelineLayout ; uint32_t set ; } VkDescriptorUpdateTemplateCreateInfo ; typedef struct VkExternalMemoryProperties { VkExternalMemoryFeatureFlags externalMemoryFeatures ; VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes ; VkExternalMemoryHandleTypeFlags compatibleHandleTypes ; } VkExternalMemoryProperties ; typedef struct VkPhysicalDeviceExternalImageFormatInfo { VkStructureType sType ; const void* pNext ; VkExternalMemoryHandleTypeFlagBits handleType ; } VkPhysicalDeviceExternalImageFormatInfo ; typedef struct VkExternalImageFormatProperties { VkStructureType sType ; void* pNext ; VkExternalMemoryProperties externalMemoryProperties ; } VkExternalImageFormatProperties ; typedef struct VkPhysicalDeviceExternalBufferInfo { VkStructureType sType ; const void* pNext ; VkBufferCreateFlags flags ; VkBufferUsageFlags usage ; VkExternalMemoryHandleTypeFlagBits handleType ; } VkPhysicalDeviceExternalBufferInfo ; typedef struct VkExternalBufferProperties { VkStructureType sType ; void* pNext ; VkExternalMemoryProperties externalMemoryProperties ; } VkExternalBufferProperties ; typedef struct VkPhysicalDeviceIDProperties { VkStructureType sType ; void* pNext ; uint8_t deviceUUID [ VK_UUID_SIZE ] ; uint8_t driverUUID [ VK_UUID_SIZE ] ; uint8_t deviceLUID [ VK_LUID_SIZE ] ; uint32_t deviceNodeMask ; VkBool32 deviceLUIDValid ; } VkPhysicalDeviceIDProperties ; typedef struct VkExternalMemoryImageCreateInfo { VkStructureType sType ; const void* pNext ; VkExternalMemoryHandleTypeFlags handleTypes ; } VkExternalMemoryImageCreateInfo ; typedef struct VkExternalMemoryBufferCreateInfo { VkStructureType sType ; const void* pNext ; VkExternalMemoryHandleTypeFlags handleTypes ; } VkExternalMemoryBufferCreateInfo ; typedef struct VkExportMemoryAllocateInfo { VkStructureType sType ; const void* pNext ; VkExternalMemoryHandleTypeFlags handleTypes ; } VkExportMemoryAllocateInfo ; typedef struct VkPhysicalDeviceExternalFenceInfo { VkStructureType sType ; const void* pNext ; VkExternalFenceHandleTypeFlagBits handleType ; } VkPhysicalDeviceExternalFenceInfo ; typedef struct VkExternalFenceProperties { VkStructureType sType ; void* pNext ; VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes ; VkExternalFenceHandleTypeFlags compatibleHandleTypes ; VkExternalFenceFeatureFlags externalFenceFeatures ; } VkExternalFenceProperties ; typedef struct VkExportFenceCreateInfo { VkStructureType sType ; const void* pNext ; VkExternalFenceHandleTypeFlags handleTypes ; } VkExportFenceCreateInfo ; typedef struct VkExportSemaphoreCreateInfo { VkStructureType sType ; const void* pNext ; VkExternalSemaphoreHandleTypeFlags handleTypes ; } VkExportSemaphoreCreateInfo ; typedef struct VkPhysicalDeviceExternalSemaphoreInfo { VkStructureType sType ; const void* pNext ; VkExternalSemaphoreHandleTypeFlagBits handleType ; } VkPhysicalDeviceExternalSemaphoreInfo ; typedef struct VkExternalSemaphoreProperties { VkStructureType sType ; void* pNext ; VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes ; VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes ; VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures ; } VkExternalSemaphoreProperties ; typedef struct VkPhysicalDeviceMaintenance3Properties { VkStructureType sType ; void* pNext ; uint32_t maxPerSetDescriptors ; VkDeviceSize maxMemoryAllocationSize ; } VkPhysicalDeviceMaintenance3Properties ; typedef struct VkDescriptorSetLayoutSupport { VkStructureType sType ; void* pNext ; VkBool32 supported ; } VkDescriptorSetLayoutSupport ; typedef struct VkPhysicalDeviceShaderDrawParametersFeatures { VkStructureType sType ; void* pNext ; VkBool32 shaderDrawParameters ; } VkPhysicalDeviceShaderDrawParametersFeatures ; typedef VkPhysicalDeviceShaderDrawParametersFeatures VkPhysicalDeviceShaderDrawParameterFeatures ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkEnumerateInstanceVersion)(uint32_t* pApiVersion)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkBindBufferMemory2)(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo* pBindInfos)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkBindImageMemory2)(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo* pBindInfos)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDeviceGroupPeerMemoryFeatures)(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDeviceMask)(VkCommandBuffer commandBuffer, uint32_t deviceMask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDispatchBase)(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkEnumeratePhysicalDeviceGroups)(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetImageMemoryRequirements2)(VkDevice device, const VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetBufferMemoryRequirements2)(VkDevice device, const VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetImageSparseMemoryRequirements2)(VkDevice device, const VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceFeatures2)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceProperties2)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceFormatProperties2)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceImageFormatProperties2)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceQueueFamilyProperties2)(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceMemoryProperties2)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceSparseImageFormatProperties2)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkTrimCommandPool)(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDeviceQueue2)(VkDevice device, const VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateSamplerYcbcrConversion)(VkDevice device, const VkSamplerYcbcrConversionCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroySamplerYcbcrConversion)(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateDescriptorUpdateTemplate)(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyDescriptorUpdateTemplate)(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkUpdateDescriptorSetWithTemplate)(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void* pData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalBufferProperties)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalFenceProperties)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalSemaphoreProperties)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDescriptorSetLayoutSupport)(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)"
  },
  {
    "label": "vkEnumerateInstanceVersion()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkEnumerateInstanceVersion(uint32_t* pApiVersion)"
  },
  {
    "label": "vkBindBufferMemory2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkBindBufferMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo* pBindInfos)"
  },
  {
    "label": "vkBindImageMemory2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkBindImageMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo* pBindInfos)"
  },
  {
    "label": "vkGetDeviceGroupPeerMemoryFeatures()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)"
  },
  {
    "label": "vkCmdSetDeviceMask()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask)"
  },
  {
    "label": "vkCmdDispatchBase()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)"
  },
  {
    "label": "vkEnumeratePhysicalDeviceGroups()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)"
  },
  {
    "label": "vkGetImageMemoryRequirements2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetImageMemoryRequirements2(VkDevice device, const VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "vkGetBufferMemoryRequirements2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetBufferMemoryRequirements2(VkDevice device, const VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "vkGetImageSparseMemoryRequirements2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetImageSparseMemoryRequirements2(VkDevice device, const VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)"
  },
  {
    "label": "vkGetPhysicalDeviceFeatures2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)"
  },
  {
    "label": "vkGetPhysicalDeviceProperties2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceFormatProperties2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceImageFormatProperties2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceQueueFamilyProperties2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceMemoryProperties2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceSparseImageFormatProperties2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties)"
  },
  {
    "label": "vkTrimCommandPool()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)"
  },
  {
    "label": "vkGetDeviceQueue2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDeviceQueue2(VkDevice device, const VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue)"
  },
  {
    "label": "vkCreateSamplerYcbcrConversion()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateSamplerYcbcrConversion(VkDevice device, const VkSamplerYcbcrConversionCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)"
  },
  {
    "label": "vkDestroySamplerYcbcrConversion()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCreateDescriptorUpdateTemplate()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateDescriptorUpdateTemplate(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)"
  },
  {
    "label": "vkDestroyDescriptorUpdateTemplate()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkUpdateDescriptorSetWithTemplate()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void* pData)"
  },
  {
    "label": "vkGetPhysicalDeviceExternalBufferProperties()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceExternalFenceProperties()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceExternalSemaphoreProperties()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)"
  },
  {
    "label": "vkGetDescriptorSetLayoutSupport()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDescriptorSetLayoutSupport(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)"
  },
  {
    "label": "VK_MAKE_API_VERSION()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_VERSION_1_2 1 # define VK_API_VERSION_1_2)",
    "insertText": "VK_MAKE_API_VERSION(0, 1, 2, 0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (VK_DRIVER_ID_AMD_PROPRIETARY = 1,VK_DRIVER_ID_AMD_OPEN_SOURCE = 2,VK_DRIVER_ID_MESA_RADV = 3,VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4,VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5,VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6,VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7,VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8,VK_DRIVER_ID_ARM_PROPRIETARY = 9,VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 1 0,VK_DRIVER_ID_GGP_PROPRIETARY = 1 1,VK_DRIVER_ID_BROADCOM_PROPRIETARY = 1 2,VK_DRIVER_ID_MESA_LLVMPIPE = 1 3,VK_DRIVER_ID_MOLTENVK = 1 4,VK_DRIVER_ID_COREAVI_PROPRIETARY = 1 5,VK_DRIVER_ID_JUICE_PROPRIETARY = 1 6,VK_DRIVER_ID_VERISILICON_PROPRIETARY = 1 7,VK_DRIVER_ID_MESA_TURNIP = 1 8,VK_DRIVER_ID_MESA_V3DV = 1 9,VK_DRIVER_ID_MESA_PANVK = 2 0,VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 2 1,VK_DRIVER_ID_MESA_VENUS = 2 2,VK_DRIVER_ID_MESA_DOZEN = 2 3,VK_DRIVER_ID_MESA_NVK = 2 4,VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = 2 5,VK_DRIVER_ID_MESA_HONEYKRISP = 2 6,VK_DRIVER_ID_RESERVED_27 = 2 7,VK_DRIVER_ID_AMD_PROPRIETARY_KHR = VK_DRIVER_ID_AMD_PROPRIETARY,VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = VK_DRIVER_ID_AMD_OPEN_SOURCE,VK_DRIVER_ID_MESA_RADV_KHR = VK_DRIVER_ID_MESA_RADV,VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = VK_DRIVER_ID_NVIDIA_PROPRIETARY,VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS,VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA,VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = VK_DRIVER_ID_IMAGINATION_PROPRIETARY,VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = VK_DRIVER_ID_QUALCOMM_PROPRIETARY,VK_DRIVER_ID_ARM_PROPRIETARY_KHR = VK_DRIVER_ID_ARM_PROPRIETARY,VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = VK_DRIVER_ID_GOOGLE_SWIFTSHADER,VK_DRIVER_ID_GGP_PROPRIETARY_KHR = VK_DRIVER_ID_GGP_PROPRIETARY,VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = VK_DRIVER_ID_BROADCOM_PROPRIETARY,VK_DRIVER_ID_MAX_ENUM = 0 x7FFFFFFF } VkDriverId ; typedef enum VkShaderFloatControlsIndependence { VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0,VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1,VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2,VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY,VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL,VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE,VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 0 x7FFFFFFF } VkShaderFloatControlsIndependence ; typedef enum VkSamplerReductionMode { VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0,VK_SAMPLER_REDUCTION_MODE_MIN = 1,VK_SAMPLER_REDUCTION_MODE_MAX = 2,VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM = 1 0 0 0 5 2 1 0 0 0,VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE,VK_SAMPLER_REDUCTION_MODE_MIN_EXT = VK_SAMPLER_REDUCTION_MODE_MIN,VK_SAMPLER_REDUCTION_MODE_MAX_EXT = VK_SAMPLER_REDUCTION_MODE_MAX,VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = 0 x7FFFFFFF } VkSamplerReductionMode ; typedef enum VkSemaphoreType { VK_SEMAPHORE_TYPE_BINARY = 0,VK_SEMAPHORE_TYPE_TIMELINE = 1,VK_SEMAPHORE_TYPE_BINARY_KHR = VK_SEMAPHORE_TYPE_BINARY,VK_SEMAPHORE_TYPE_TIMELINE_KHR = VK_SEMAPHORE_TYPE_TIMELINE,VK_SEMAPHORE_TYPE_MAX_ENUM = 0 x7FFFFFFF } VkSemaphoreType ; typedef enum VkResolveModeFlagBits { VK_RESOLVE_MODE_NONE = 0,VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 0 x00000001,VK_RESOLVE_MODE_AVERAGE_BIT = 0 x00000002,VK_RESOLVE_MODE_MIN_BIT = 0 x00000004,VK_RESOLVE_MODE_MAX_BIT = 0 x00000008,VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID = 0 x00000010,VK_RESOLVE_MODE_NONE_KHR = VK_RESOLVE_MODE_NONE,VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = VK_RESOLVE_MODE_SAMPLE_ZERO_BIT,VK_RESOLVE_MODE_AVERAGE_BIT_KHR = VK_RESOLVE_MODE_AVERAGE_BIT,VK_RESOLVE_MODE_MIN_BIT_KHR = VK_RESOLVE_MODE_MIN_BIT,VK_RESOLVE_MODE_MAX_BIT_KHR = VK_RESOLVE_MODE_MAX_BIT,VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkResolveModeFlagBits ; typedef VkFlags VkResolveModeFlags ; typedef enum VkDescriptorBindingFlagBits { VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 0 x00000001,VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 0 x00000002,VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 0 x00000004,VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 0 x00000008,VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT,VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT,VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT,VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT,VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkDescriptorBindingFlagBits ; typedef VkFlags VkDescriptorBindingFlags ; typedef enum VkSemaphoreWaitFlagBits { VK_SEMAPHORE_WAIT_ANY_BIT = 0 x00000001,VK_SEMAPHORE_WAIT_ANY_BIT_KHR = VK_SEMAPHORE_WAIT_ANY_BIT,VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkSemaphoreWaitFlagBits ; typedef VkFlags VkSemaphoreWaitFlags ; typedef struct VkPhysicalDeviceVulkan11Features { VkStructureType sType ; void* pNext ; VkBool32 storageBuffer16BitAccess ; VkBool32 uniformAndStorageBuffer16BitAccess ; VkBool32 storagePushConstant16 ; VkBool32 storageInputOutput16 ; VkBool32 multiview ; VkBool32 multiviewGeometryShader ; VkBool32 multiviewTessellationShader ; VkBool32 variablePointersStorageBuffer ; VkBool32 variablePointers ; VkBool32 protectedMemory ; VkBool32 samplerYcbcrConversion ; VkBool32 shaderDrawParameters ; } VkPhysicalDeviceVulkan11Features ; typedef struct VkPhysicalDeviceVulkan11Properties { VkStructureType sType ; void* pNext ; uint8_t deviceUUID [ VK_UUID_SIZE ] ; uint8_t driverUUID [ VK_UUID_SIZE ] ; uint8_t deviceLUID [ VK_LUID_SIZE ] ; uint32_t deviceNodeMask ; VkBool32 deviceLUIDValid ; uint32_t subgroupSize ; VkShaderStageFlags subgroupSupportedStages ; VkSubgroupFeatureFlags subgroupSupportedOperations ; VkBool32 subgroupQuadOperationsInAllStages ; VkPointClippingBehavior pointClippingBehavior ; uint32_t maxMultiviewViewCount ; uint32_t maxMultiviewInstanceIndex ; VkBool32 protectedNoFault ; uint32_t maxPerSetDescriptors ; VkDeviceSize maxMemoryAllocationSize ; } VkPhysicalDeviceVulkan11Properties ; typedef struct VkPhysicalDeviceVulkan12Features { VkStructureType sType ; void* pNext ; VkBool32 samplerMirrorClampToEdge ; VkBool32 drawIndirectCount ; VkBool32 storageBuffer8BitAccess ; VkBool32 uniformAndStorageBuffer8BitAccess ; VkBool32 storagePushConstant8 ; VkBool32 shaderBufferInt64Atomics ; VkBool32 shaderSharedInt64Atomics ; VkBool32 shaderFloat16 ; VkBool32 shaderInt8 ; VkBool32 descriptorIndexing ; VkBool32 shaderInputAttachmentArrayDynamicIndexing ; VkBool32 shaderUniformTexelBufferArrayDynamicIndexing ; VkBool32 shaderStorageTexelBufferArrayDynamicIndexing ; VkBool32 shaderUniformBufferArrayNonUniformIndexing ; VkBool32 shaderSampledImageArrayNonUniformIndexing ; VkBool32 shaderStorageBufferArrayNonUniformIndexing ; VkBool32 shaderStorageImageArrayNonUniformIndexing ; VkBool32 shaderInputAttachmentArrayNonUniformIndexing ; VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing ; VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing ; VkBool32 descriptorBindingUniformBufferUpdateAfterBind ; VkBool32 descriptorBindingSampledImageUpdateAfterBind ; VkBool32 descriptorBindingStorageImageUpdateAfterBind ; VkBool32 descriptorBindingStorageBufferUpdateAfterBind ; VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind ; VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind ; VkBool32 descriptorBindingUpdateUnusedWhilePending ; VkBool32 descriptorBindingPartiallyBound ; VkBool32 descriptorBindingVariableDescriptorCount ; VkBool32 runtimeDescriptorArray ; VkBool32 samplerFilterMinmax ; VkBool32 scalarBlockLayout ; VkBool32 imagelessFramebuffer ; VkBool32 uniformBufferStandardLayout ; VkBool32 shaderSubgroupExtendedTypes ; VkBool32 separateDepthStencilLayouts ; VkBool32 hostQueryReset ; VkBool32 timelineSemaphore ; VkBool32 bufferDeviceAddress ; VkBool32 bufferDeviceAddressCaptureReplay ; VkBool32 bufferDeviceAddressMultiDevice ; VkBool32 vulkanMemoryModel ; VkBool32 vulkanMemoryModelDeviceScope ; VkBool32 vulkanMemoryModelAvailabilityVisibilityChains ; VkBool32 shaderOutputViewportIndex ; VkBool32 shaderOutputLayer ; VkBool32 subgroupBroadcastDynamicId ; } VkPhysicalDeviceVulkan12Features ; typedef struct VkConformanceVersion { uint8_t major ; uint8_t minor ; uint8_t subminor ; uint8_t patch ; } VkConformanceVersion ; typedef struct VkPhysicalDeviceVulkan12Properties { VkStructureType sType ; void* pNext ; VkDriverId driverID ; char driverName [ VK_MAX_DRIVER_NAME_SIZE ] ; char driverInfo [ VK_MAX_DRIVER_INFO_SIZE ] ; VkConformanceVersion conformanceVersion ; VkShaderFloatControlsIndependence denormBehaviorIndependence ; VkShaderFloatControlsIndependence roundingModeIndependence ; VkBool32 shaderSignedZeroInfNanPreserveFloat16 ; VkBool32 shaderSignedZeroInfNanPreserveFloat32 ; VkBool32 shaderSignedZeroInfNanPreserveFloat64 ; VkBool32 shaderDenormPreserveFloat16 ; VkBool32 shaderDenormPreserveFloat32 ; VkBool32 shaderDenormPreserveFloat64 ; VkBool32 shaderDenormFlushToZeroFloat16 ; VkBool32 shaderDenormFlushToZeroFloat32 ; VkBool32 shaderDenormFlushToZeroFloat64 ; VkBool32 shaderRoundingModeRTEFloat16 ; VkBool32 shaderRoundingModeRTEFloat32 ; VkBool32 shaderRoundingModeRTEFloat64 ; VkBool32 shaderRoundingModeRTZFloat16 ; VkBool32 shaderRoundingModeRTZFloat32 ; VkBool32 shaderRoundingModeRTZFloat64 ; uint32_t maxUpdateAfterBindDescriptorsInAllPools ; VkBool32 shaderUniformBufferArrayNonUniformIndexingNative ; VkBool32 shaderSampledImageArrayNonUniformIndexingNative ; VkBool32 shaderStorageBufferArrayNonUniformIndexingNative ; VkBool32 shaderStorageImageArrayNonUniformIndexingNative ; VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative ; VkBool32 robustBufferAccessUpdateAfterBind ; VkBool32 quadDivergentImplicitLod ; uint32_t maxPerStageDescriptorUpdateAfterBindSamplers ; uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers ; uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers ; uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages ; uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages ; uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments ; uint32_t maxPerStageUpdateAfterBindResources ; uint32_t maxDescriptorSetUpdateAfterBindSamplers ; uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers ; uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic ; uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers ; uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic ; uint32_t maxDescriptorSetUpdateAfterBindSampledImages ; uint32_t maxDescriptorSetUpdateAfterBindStorageImages ; uint32_t maxDescriptorSetUpdateAfterBindInputAttachments ; VkResolveModeFlags supportedDepthResolveModes ; VkResolveModeFlags supportedStencilResolveModes ; VkBool32 independentResolveNone ; VkBool32 independentResolve ; VkBool32 filterMinmaxSingleComponentFormats ; VkBool32 filterMinmaxImageComponentMapping ; uint64_t maxTimelineSemaphoreValueDifference ; VkSampleCountFlags framebufferIntegerColorSampleCounts ; } VkPhysicalDeviceVulkan12Properties ; typedef struct VkImageFormatListCreateInfo { VkStructureType sType ; const void* pNext ; uint32_t viewFormatCount ; const VkFormat* pViewFormats ; } VkImageFormatListCreateInfo ; typedef struct VkAttachmentDescription2 { VkStructureType sType ; const void* pNext ; VkAttachmentDescriptionFlags flags ; VkFormat format ; VkSampleCountFlagBits samples ; VkAttachmentLoadOp loadOp ; VkAttachmentStoreOp storeOp ; VkAttachmentLoadOp stencilLoadOp ; VkAttachmentStoreOp stencilStoreOp ; VkImageLayout initialLayout ; VkImageLayout finalLayout ; } VkAttachmentDescription2 ; typedef struct VkAttachmentReference2 { VkStructureType sType ; const void* pNext ; uint32_t attachment ; VkImageLayout layout ; VkImageAspectFlags aspectMask ; } VkAttachmentReference2 ; typedef struct VkSubpassDescription2 { VkStructureType sType ; const void* pNext ; VkSubpassDescriptionFlags flags ; VkPipelineBindPoint pipelineBindPoint ; uint32_t viewMask ; uint32_t inputAttachmentCount ; const VkAttachmentReference2* pInputAttachments ; uint32_t colorAttachmentCount ; const VkAttachmentReference2* pColorAttachments ; const VkAttachmentReference2* pResolveAttachments ; const VkAttachmentReference2* pDepthStencilAttachment ; uint32_t preserveAttachmentCount ; const uint32_t* pPreserveAttachments ; } VkSubpassDescription2 ; typedef struct VkSubpassDependency2 { VkStructureType sType ; const void* pNext ; uint32_t srcSubpass ; uint32_t dstSubpass ; VkPipelineStageFlags srcStageMask ; VkPipelineStageFlags dstStageMask ; VkAccessFlags srcAccessMask ; VkAccessFlags dstAccessMask ; VkDependencyFlags dependencyFlags ; int32_t viewOffset ; } VkSubpassDependency2 ; typedef struct VkRenderPassCreateInfo2 { VkStructureType sType ; const void* pNext ; VkRenderPassCreateFlags flags ; uint32_t attachmentCount ; const VkAttachmentDescription2* pAttachments ; uint32_t subpassCount ; const VkSubpassDescription2* pSubpasses ; uint32_t dependencyCount ; const VkSubpassDependency2* pDependencies ; uint32_t correlatedViewMaskCount ; const uint32_t* pCorrelatedViewMasks ; } VkRenderPassCreateInfo2 ; typedef struct VkSubpassBeginInfo { VkStructureType sType ; const void* pNext ; VkSubpassContents contents ; } VkSubpassBeginInfo ; typedef struct VkSubpassEndInfo { VkStructureType sType ; const void* pNext ; } VkSubpassEndInfo ; typedef struct VkPhysicalDevice8BitStorageFeatures { VkStructureType sType ; void* pNext ; VkBool32 storageBuffer8BitAccess ; VkBool32 uniformAndStorageBuffer8BitAccess ; VkBool32 storagePushConstant8 ; } VkPhysicalDevice8BitStorageFeatures ; typedef struct VkPhysicalDeviceDriverProperties { VkStructureType sType ; void* pNext ; VkDriverId driverID ; char driverName [ VK_MAX_DRIVER_NAME_SIZE ] ; char driverInfo [ VK_MAX_DRIVER_INFO_SIZE ] ; VkConformanceVersion conformanceVersion ; } VkPhysicalDeviceDriverProperties ; typedef struct VkPhysicalDeviceShaderAtomicInt64Features { VkStructureType sType ; void* pNext ; VkBool32 shaderBufferInt64Atomics ; VkBool32 shaderSharedInt64Atomics ; } VkPhysicalDeviceShaderAtomicInt64Features ; typedef struct VkPhysicalDeviceShaderFloat16Int8Features { VkStructureType sType ; void* pNext ; VkBool32 shaderFloat16 ; VkBool32 shaderInt8 ; } VkPhysicalDeviceShaderFloat16Int8Features ; typedef struct VkPhysicalDeviceFloatControlsProperties { VkStructureType sType ; void* pNext ; VkShaderFloatControlsIndependence denormBehaviorIndependence ; VkShaderFloatControlsIndependence roundingModeIndependence ; VkBool32 shaderSignedZeroInfNanPreserveFloat16 ; VkBool32 shaderSignedZeroInfNanPreserveFloat32 ; VkBool32 shaderSignedZeroInfNanPreserveFloat64 ; VkBool32 shaderDenormPreserveFloat16 ; VkBool32 shaderDenormPreserveFloat32 ; VkBool32 shaderDenormPreserveFloat64 ; VkBool32 shaderDenormFlushToZeroFloat16 ; VkBool32 shaderDenormFlushToZeroFloat32 ; VkBool32 shaderDenormFlushToZeroFloat64 ; VkBool32 shaderRoundingModeRTEFloat16 ; VkBool32 shaderRoundingModeRTEFloat32 ; VkBool32 shaderRoundingModeRTEFloat64 ; VkBool32 shaderRoundingModeRTZFloat16 ; VkBool32 shaderRoundingModeRTZFloat32 ; VkBool32 shaderRoundingModeRTZFloat64 ; } VkPhysicalDeviceFloatControlsProperties ; typedef struct VkDescriptorSetLayoutBindingFlagsCreateInfo { VkStructureType sType ; const void* pNext ; uint32_t bindingCount ; const VkDescriptorBindingFlags* pBindingFlags ; } VkDescriptorSetLayoutBindingFlagsCreateInfo ; typedef struct VkPhysicalDeviceDescriptorIndexingFeatures { VkStructureType sType ; void* pNext ; VkBool32 shaderInputAttachmentArrayDynamicIndexing ; VkBool32 shaderUniformTexelBufferArrayDynamicIndexing ; VkBool32 shaderStorageTexelBufferArrayDynamicIndexing ; VkBool32 shaderUniformBufferArrayNonUniformIndexing ; VkBool32 shaderSampledImageArrayNonUniformIndexing ; VkBool32 shaderStorageBufferArrayNonUniformIndexing ; VkBool32 shaderStorageImageArrayNonUniformIndexing ; VkBool32 shaderInputAttachmentArrayNonUniformIndexing ; VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing ; VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing ; VkBool32 descriptorBindingUniformBufferUpdateAfterBind ; VkBool32 descriptorBindingSampledImageUpdateAfterBind ; VkBool32 descriptorBindingStorageImageUpdateAfterBind ; VkBool32 descriptorBindingStorageBufferUpdateAfterBind ; VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind ; VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind ; VkBool32 descriptorBindingUpdateUnusedWhilePending ; VkBool32 descriptorBindingPartiallyBound ; VkBool32 descriptorBindingVariableDescriptorCount ; VkBool32 runtimeDescriptorArray ; } VkPhysicalDeviceDescriptorIndexingFeatures ; typedef struct VkPhysicalDeviceDescriptorIndexingProperties { VkStructureType sType ; void* pNext ; uint32_t maxUpdateAfterBindDescriptorsInAllPools ; VkBool32 shaderUniformBufferArrayNonUniformIndexingNative ; VkBool32 shaderSampledImageArrayNonUniformIndexingNative ; VkBool32 shaderStorageBufferArrayNonUniformIndexingNative ; VkBool32 shaderStorageImageArrayNonUniformIndexingNative ; VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative ; VkBool32 robustBufferAccessUpdateAfterBind ; VkBool32 quadDivergentImplicitLod ; uint32_t maxPerStageDescriptorUpdateAfterBindSamplers ; uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers ; uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers ; uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages ; uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages ; uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments ; uint32_t maxPerStageUpdateAfterBindResources ; uint32_t maxDescriptorSetUpdateAfterBindSamplers ; uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers ; uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic ; uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers ; uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic ; uint32_t maxDescriptorSetUpdateAfterBindSampledImages ; uint32_t maxDescriptorSetUpdateAfterBindStorageImages ; uint32_t maxDescriptorSetUpdateAfterBindInputAttachments ; } VkPhysicalDeviceDescriptorIndexingProperties ; typedef struct VkDescriptorSetVariableDescriptorCountAllocateInfo { VkStructureType sType ; const void* pNext ; uint32_t descriptorSetCount ; const uint32_t* pDescriptorCounts ; } VkDescriptorSetVariableDescriptorCountAllocateInfo ; typedef struct VkDescriptorSetVariableDescriptorCountLayoutSupport { VkStructureType sType ; void* pNext ; uint32_t maxVariableDescriptorCount ; } VkDescriptorSetVariableDescriptorCountLayoutSupport ; typedef struct VkSubpassDescriptionDepthStencilResolve { VkStructureType sType ; const void* pNext ; VkResolveModeFlagBits depthResolveMode ; VkResolveModeFlagBits stencilResolveMode ; const VkAttachmentReference2* pDepthStencilResolveAttachment ; } VkSubpassDescriptionDepthStencilResolve ; typedef struct VkPhysicalDeviceDepthStencilResolveProperties { VkStructureType sType ; void* pNext ; VkResolveModeFlags supportedDepthResolveModes ; VkResolveModeFlags supportedStencilResolveModes ; VkBool32 independentResolveNone ; VkBool32 independentResolve ; } VkPhysicalDeviceDepthStencilResolveProperties ; typedef struct VkPhysicalDeviceScalarBlockLayoutFeatures { VkStructureType sType ; void* pNext ; VkBool32 scalarBlockLayout ; } VkPhysicalDeviceScalarBlockLayoutFeatures ; typedef struct VkImageStencilUsageCreateInfo { VkStructureType sType ; const void* pNext ; VkImageUsageFlags stencilUsage ; } VkImageStencilUsageCreateInfo ; typedef struct VkSamplerReductionModeCreateInfo { VkStructureType sType ; const void* pNext ; VkSamplerReductionMode reductionMode ; } VkSamplerReductionModeCreateInfo ; typedef struct VkPhysicalDeviceSamplerFilterMinmaxProperties { VkStructureType sType ; void* pNext ; VkBool32 filterMinmaxSingleComponentFormats ; VkBool32 filterMinmaxImageComponentMapping ; } VkPhysicalDeviceSamplerFilterMinmaxProperties ; typedef struct VkPhysicalDeviceVulkanMemoryModelFeatures { VkStructureType sType ; void* pNext ; VkBool32 vulkanMemoryModel ; VkBool32 vulkanMemoryModelDeviceScope ; VkBool32 vulkanMemoryModelAvailabilityVisibilityChains ; } VkPhysicalDeviceVulkanMemoryModelFeatures ; typedef struct VkPhysicalDeviceImagelessFramebufferFeatures { VkStructureType sType ; void* pNext ; VkBool32 imagelessFramebuffer ; } VkPhysicalDeviceImagelessFramebufferFeatures ; typedef struct VkFramebufferAttachmentImageInfo { VkStructureType sType ; const void* pNext ; VkImageCreateFlags flags ; VkImageUsageFlags usage ; uint32_t width ; uint32_t height ; uint32_t layerCount ; uint32_t viewFormatCount ; const VkFormat* pViewFormats ; } VkFramebufferAttachmentImageInfo ; typedef struct VkFramebufferAttachmentsCreateInfo { VkStructureType sType ; const void* pNext ; uint32_t attachmentImageInfoCount ; const VkFramebufferAttachmentImageInfo* pAttachmentImageInfos ; } VkFramebufferAttachmentsCreateInfo ; typedef struct VkRenderPassAttachmentBeginInfo { VkStructureType sType ; const void* pNext ; uint32_t attachmentCount ; const VkImageView* pAttachments ; } VkRenderPassAttachmentBeginInfo ; typedef struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures { VkStructureType sType ; void* pNext ; VkBool32 uniformBufferStandardLayout ; } VkPhysicalDeviceUniformBufferStandardLayoutFeatures ; typedef struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures { VkStructureType sType ; void* pNext ; VkBool32 shaderSubgroupExtendedTypes ; } VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures ; typedef struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures { VkStructureType sType ; void* pNext ; VkBool32 separateDepthStencilLayouts ; } VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures ; typedef struct VkAttachmentReferenceStencilLayout { VkStructureType sType ; void* pNext ; VkImageLayout stencilLayout ; } VkAttachmentReferenceStencilLayout ; typedef struct VkAttachmentDescriptionStencilLayout { VkStructureType sType ; void* pNext ; VkImageLayout stencilInitialLayout ; VkImageLayout stencilFinalLayout ; } VkAttachmentDescriptionStencilLayout ; typedef struct VkPhysicalDeviceHostQueryResetFeatures { VkStructureType sType ; void* pNext ; VkBool32 hostQueryReset ; } VkPhysicalDeviceHostQueryResetFeatures ; typedef struct VkPhysicalDeviceTimelineSemaphoreFeatures { VkStructureType sType ; void* pNext ; VkBool32 timelineSemaphore ; } VkPhysicalDeviceTimelineSemaphoreFeatures ; typedef struct VkPhysicalDeviceTimelineSemaphoreProperties { VkStructureType sType ; void* pNext ; uint64_t maxTimelineSemaphoreValueDifference ; } VkPhysicalDeviceTimelineSemaphoreProperties ; typedef struct VkSemaphoreTypeCreateInfo { VkStructureType sType ; const void* pNext ; VkSemaphoreType semaphoreType ; uint64_t initialValue ; } VkSemaphoreTypeCreateInfo ; typedef struct VkTimelineSemaphoreSubmitInfo { VkStructureType sType ; const void* pNext ; uint32_t waitSemaphoreValueCount ; const uint64_t* pWaitSemaphoreValues ; uint32_t signalSemaphoreValueCount ; const uint64_t* pSignalSemaphoreValues ; } VkTimelineSemaphoreSubmitInfo ; typedef struct VkSemaphoreWaitInfo { VkStructureType sType ; const void* pNext ; VkSemaphoreWaitFlags flags ; uint32_t semaphoreCount ; const VkSemaphore* pSemaphores ; const uint64_t* pValues ; } VkSemaphoreWaitInfo ; typedef struct VkSemaphoreSignalInfo { VkStructureType sType ; const void* pNext ; VkSemaphore semaphore ; uint64_t value ; } VkSemaphoreSignalInfo ; typedef struct VkPhysicalDeviceBufferDeviceAddressFeatures { VkStructureType sType ; void* pNext ; VkBool32 bufferDeviceAddress ; VkBool32 bufferDeviceAddressCaptureReplay ; VkBool32 bufferDeviceAddressMultiDevice ; } VkPhysicalDeviceBufferDeviceAddressFeatures ; typedef struct VkBufferDeviceAddressInfo { VkStructureType sType ; const void* pNext ; VkBuffer buffer ; } VkBufferDeviceAddressInfo ; typedef struct VkBufferOpaqueCaptureAddressCreateInfo { VkStructureType sType ; const void* pNext ; uint64_t opaqueCaptureAddress ; } VkBufferOpaqueCaptureAddressCreateInfo ; typedef struct VkMemoryOpaqueCaptureAddressAllocateInfo { VkStructureType sType ; const void* pNext ; uint64_t opaqueCaptureAddress ; } VkMemoryOpaqueCaptureAddressAllocateInfo ; typedef struct VkDeviceMemoryOpaqueCaptureAddressInfo { VkStructureType sType ; const void* pNext ; VkDeviceMemory memory ; } VkDeviceMemoryOpaqueCaptureAddressInfo ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawIndirectCount)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawIndexedIndirectCount)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateRenderPass2)(VkDevice device, const VkRenderPassCreateInfo2* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBeginRenderPass2)(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdNextSubpass2)(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdEndRenderPass2)(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkResetQueryPool)(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetSemaphoreCounterValue)(VkDevice device, VkSemaphore semaphore, uint64_t* pValue)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkWaitSemaphores)(VkDevice device, const VkSemaphoreWaitInfo* pWaitInfo, uint64_t timeout)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkSignalSemaphore)(VkDevice device, const VkSemaphoreSignalInfo* pSignalInfo)"
  },
  {
    "label": "VkDeviceAddress()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkDeviceAddress(VKAPI_PTR *PFN_vkGetBufferDeviceAddress)(VkDevice device, const VkBufferDeviceAddressInfo* pInfo)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "uint64_t(VKAPI_PTR *PFN_vkGetBufferOpaqueCaptureAddress)(VkDevice device, const VkBufferDeviceAddressInfo* pInfo)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "uint64_t(VKAPI_PTR *PFN_vkGetDeviceMemoryOpaqueCaptureAddress)(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)"
  },
  {
    "label": "vkCmdDrawIndirectCount()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)"
  },
  {
    "label": "vkCmdDrawIndexedIndirectCount()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)"
  },
  {
    "label": "vkCreateRenderPass2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateRenderPass2(VkDevice device, const VkRenderPassCreateInfo2* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)"
  },
  {
    "label": "vkCmdBeginRenderPass2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo)"
  },
  {
    "label": "vkCmdNextSubpass2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo)"
  },
  {
    "label": "vkCmdEndRenderPass2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo)"
  },
  {
    "label": "vkResetQueryPool()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)"
  },
  {
    "label": "vkGetSemaphoreCounterValue()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, uint64_t* pValue)"
  },
  {
    "label": "vkWaitSemaphores()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkWaitSemaphores(VkDevice device, const VkSemaphoreWaitInfo* pWaitInfo, uint64_t timeout)"
  },
  {
    "label": "vkSignalSemaphore()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkSignalSemaphore(VkDevice device, const VkSemaphoreSignalInfo* pSignalInfo)"
  },
  {
    "label": "vkGetBufferDeviceAddress()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkDeviceAddress VKAPI_CALL)",
    "insertText": "vkGetBufferDeviceAddress(VkDevice device, const VkBufferDeviceAddressInfo* pInfo)"
  },
  {
    "label": "vkGetBufferOpaqueCaptureAddress()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR uint64_t VKAPI_CALL)",
    "insertText": "vkGetBufferOpaqueCaptureAddress(VkDevice device, const VkBufferDeviceAddressInfo* pInfo)"
  },
  {
    "label": "vkGetDeviceMemoryOpaqueCaptureAddress()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR uint64_t VKAPI_CALL)",
    "insertText": "vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)"
  },
  {
    "label": "VK_MAKE_API_VERSION()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_VERSION_1_3 1 # define VK_API_VERSION_1_3)",
    "insertText": "VK_MAKE_API_VERSION(0, 1, 3, 0)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPrivateDataSlot)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = 0 x00000001,VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = 0 x00000002,VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = 0 x00000004,VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT,VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT,VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT,VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkPipelineCreationFeedbackFlagBits ; typedef VkFlags VkPipelineCreationFeedbackFlags ; typedef enum VkToolPurposeFlagBits { VK_TOOL_PURPOSE_VALIDATION_BIT = 0 x00000001,VK_TOOL_PURPOSE_PROFILING_BIT = 0 x00000002,VK_TOOL_PURPOSE_TRACING_BIT = 0 x00000004,VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = 0 x00000008,VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = 0 x00000010,VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 0 x00000020,VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 0 x00000040,VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = VK_TOOL_PURPOSE_VALIDATION_BIT,VK_TOOL_PURPOSE_PROFILING_BIT_EXT = VK_TOOL_PURPOSE_PROFILING_BIT,VK_TOOL_PURPOSE_TRACING_BIT_EXT = VK_TOOL_PURPOSE_TRACING_BIT,VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT,VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT,VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkToolPurposeFlagBits ; typedef VkFlags VkToolPurposeFlags ; typedef VkFlags VkPrivateDataSlotCreateFlags ; typedef VkFlags64 VkPipelineStageFlags2 ; typedef VkFlags64 VkPipelineStageFlagBits2 ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_NONE = 0 ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_NONE_KHR = 0 ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT = 0 x00000001ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR = 0 x00000001ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT = 0 x00000002ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR = 0 x00000002ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT = 0 x00000004ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR = 0 x00000004ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT = 0 x00000008ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR = 0 x00000008ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT = 0 x00000010ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR = 0 x00000010ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT = 0 x00000020ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR = 0 x00000020ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT = 0 x00000040ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR = 0 x00000040ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT = 0 x00000080ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR = 0 x00000080ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT = 0 x00000100ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR = 0 x00000100ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT = 0 x00000200ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR = 0 x00000200ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT = 0 x00000400ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR = 0 x00000400ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT = 0 x00000800ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR = 0 x00000800ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT = 0 x00001000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR = 0 x00001000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TRANSFER_BIT = 0 x00001000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR = 0 x00001000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT = 0 x00002000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR = 0 x00002000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_HOST_BIT = 0 x00004000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_HOST_BIT_KHR = 0 x00004000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT = 0 x00008000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR = 0 x00008000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT = 0 x00010000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR = 0 x00010000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COPY_BIT = 0 x100000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COPY_BIT_KHR = 0 x100000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_RESOLVE_BIT = 0 x200000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR = 0 x200000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_BLIT_BIT = 0 x400000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_BLIT_BIT_KHR = 0 x400000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_CLEAR_BIT = 0 x800000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR = 0 x800000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT = 0 x1000000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR = 0 x1000000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT = 0 x2000000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR = 0 x2000000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT = 0 x4000000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR = 0 x4000000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR = 0 x04000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR = 0 x08000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT = 0 x01000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 0 x00040000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV = 0 x00020000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0 x00400000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV = 0 x00400000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 0 x02000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR = 0 x00200000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV = 0 x00200000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 0 x02000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0 x00800000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV = 0 x00080000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV = 0 x00100000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT = 0 x00080000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT = 0 x00100000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI = 0 x8000000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI = 0 x8000000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI = 0 x10000000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR = 0 x10000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT = 0 x40000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI = 0 x20000000000ULL ; const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV = 0 x20000000ULL ; typedef VkFlags64 VkAccessFlags2 ; typedef VkFlags64 VkAccessFlagBits2 ; const VkAccessFlagBits2 VK_ACCESS_2_NONE = 0 ULL ; const VkAccessFlagBits2 VK_ACCESS_2_NONE_KHR = 0 ULL ; const VkAccessFlagBits2 VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT = 0 x00000001ULL ; const VkAccessFlagBits2 VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR = 0 x00000001ULL ; const VkAccessFlagBits2 VK_ACCESS_2_INDEX_READ_BIT = 0 x00000002ULL ; const VkAccessFlagBits2 VK_ACCESS_2_INDEX_READ_BIT_KHR = 0 x00000002ULL ; const VkAccessFlagBits2 VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT = 0 x00000004ULL ; const VkAccessFlagBits2 VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR = 0 x00000004ULL ; const VkAccessFlagBits2 VK_ACCESS_2_UNIFORM_READ_BIT = 0 x00000008ULL ; const VkAccessFlagBits2 VK_ACCESS_2_UNIFORM_READ_BIT_KHR = 0 x00000008ULL ; const VkAccessFlagBits2 VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT = 0 x00000010ULL ; const VkAccessFlagBits2 VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR = 0 x00000010ULL ; const VkAccessFlagBits2 VK_ACCESS_2_SHADER_READ_BIT = 0 x00000020ULL ; const VkAccessFlagBits2 VK_ACCESS_2_SHADER_READ_BIT_KHR = 0 x00000020ULL ; const VkAccessFlagBits2 VK_ACCESS_2_SHADER_WRITE_BIT = 0 x00000040ULL ; const VkAccessFlagBits2 VK_ACCESS_2_SHADER_WRITE_BIT_KHR = 0 x00000040ULL ; const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT = 0 x00000080ULL ; const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR = 0 x00000080ULL ; const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT = 0 x00000100ULL ; const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR = 0 x00000100ULL ; const VkAccessFlagBits2 VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0 x00000200ULL ; const VkAccessFlagBits2 VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR = 0 x00000200ULL ; const VkAccessFlagBits2 VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0 x00000400ULL ; const VkAccessFlagBits2 VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR = 0 x00000400ULL ; const VkAccessFlagBits2 VK_ACCESS_2_TRANSFER_READ_BIT = 0 x00000800ULL ; const VkAccessFlagBits2 VK_ACCESS_2_TRANSFER_READ_BIT_KHR = 0 x00000800ULL ; const VkAccessFlagBits2 VK_ACCESS_2_TRANSFER_WRITE_BIT = 0 x00001000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR = 0 x00001000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_HOST_READ_BIT = 0 x00002000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_HOST_READ_BIT_KHR = 0 x00002000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_HOST_WRITE_BIT = 0 x00004000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_HOST_WRITE_BIT_KHR = 0 x00004000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_MEMORY_READ_BIT = 0 x00008000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_MEMORY_READ_BIT_KHR = 0 x00008000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_MEMORY_WRITE_BIT = 0 x00010000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_MEMORY_WRITE_BIT_KHR = 0 x00010000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_SHADER_SAMPLED_READ_BIT = 0 x100000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR = 0 x100000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_SHADER_STORAGE_READ_BIT = 0 x200000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR = 0 x200000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT = 0 x400000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR = 0 x400000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR = 0 x800000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR = 0 x1000000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR = 0 x2000000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR = 0 x4000000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 0 x02000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 0 x04000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 0 x08000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT = 0 x00100000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV = 0 x00020000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV = 0 x00040000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 0 x00800000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV = 0 x00800000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR = 0 x00200000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 0 x00400000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV = 0 x00200000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 0 x00400000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0 x01000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0 x00080000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT = 0 x20000000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI = 0 x8000000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR = 0 x10000000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_MICROMAP_READ_BIT_EXT = 0 x100000000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT = 0 x200000000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV = 0 x40000000000ULL ; const VkAccessFlagBits2 VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV = 0 x80000000000ULL ; typedef enum VkSubmitFlagBits { VK_SUBMIT_PROTECTED_BIT = 0 x00000001,VK_SUBMIT_PROTECTED_BIT_KHR = VK_SUBMIT_PROTECTED_BIT,VK_SUBMIT_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkSubmitFlagBits ; typedef VkFlags VkSubmitFlags ; typedef enum VkRenderingFlagBits { VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = 0 x00000001,VK_RENDERING_SUSPENDING_BIT = 0 x00000002,VK_RENDERING_RESUMING_BIT = 0 x00000004,VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT = 0 x00000008,VK_RENDERING_CONTENTS_INLINE_BIT_KHR = 0 x00000010,VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT,VK_RENDERING_SUSPENDING_BIT_KHR = VK_RENDERING_SUSPENDING_BIT,VK_RENDERING_RESUMING_BIT_KHR = VK_RENDERING_RESUMING_BIT,VK_RENDERING_CONTENTS_INLINE_BIT_EXT = VK_RENDERING_CONTENTS_INLINE_BIT_KHR,VK_RENDERING_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VkRenderingFlagBits ; typedef VkFlags VkRenderingFlags ; typedef VkFlags64 VkFormatFeatureFlags2 ; typedef VkFlags64 VkFormatFeatureFlagBits2 ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT = 0 x00000001ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR = 0 x00000001ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT = 0 x00000002ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR = 0 x00000002ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT = 0 x00000004ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR = 0 x00000004ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT = 0 x00000008ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR = 0 x00000008ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT = 0 x00000010ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR = 0 x00000010ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0 x00000020ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR = 0 x00000020ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT = 0 x00000040ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR = 0 x00000040ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT = 0 x00000080ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR = 0 x00000080ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT = 0 x00000100ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR = 0 x00000100ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT = 0 x00000200ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR = 0 x00000200ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLIT_SRC_BIT = 0 x00000400ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR = 0 x00000400ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLIT_DST_BIT = 0 x00000800ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR = 0 x00000800ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0 x00001000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR = 0 x00001000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT = 0 x00002000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 0 x00002000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT = 0 x00004000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR = 0 x00004000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT = 0 x00008000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR = 0 x00008000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 0 x00010000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR = 0 x00010000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT = 0 x00020000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 0 x00020000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 0 x00040000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 0 x00040000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 0 x00080000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 0 x00080000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 0 x00100000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 0 x00100000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0 x00200000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 0 x00200000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_DISJOINT_BIT = 0 x00400000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR = 0 x00400000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT = 0 x00800000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR = 0 x00800000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT = 0 x80000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR = 0 x80000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT = 0 x100000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR = 0 x100000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT = 0 x200000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR = 0 x200000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR = 0 x02000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR = 0 x04000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 0 x20000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT = 0 x01000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0 x40000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT = 0 x400000000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR = 0 x08000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR = 0 x10000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV = 0 x4000000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM = 0 x400000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM = 0 x800000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM = 0 x1000000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM = 0 x2000000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV = 0 x10000000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV = 0 x20000000000ULL ; const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV = 0 x40000000000ULL ; typedef struct VkPhysicalDeviceVulkan13Features { VkStructureType sType ; void* pNext ; VkBool32 robustImageAccess ; VkBool32 inlineUniformBlock ; VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind ; VkBool32 pipelineCreationCacheControl ; VkBool32 privateData ; VkBool32 shaderDemoteToHelperInvocation ; VkBool32 shaderTerminateInvocation ; VkBool32 subgroupSizeControl ; VkBool32 computeFullSubgroups ; VkBool32 synchronization2 ; VkBool32 textureCompressionASTC_HDR ; VkBool32 shaderZeroInitializeWorkgroupMemory ; VkBool32 dynamicRendering ; VkBool32 shaderIntegerDotProduct ; VkBool32 maintenance4 ; } VkPhysicalDeviceVulkan13Features ; typedef struct VkPhysicalDeviceVulkan13Properties { VkStructureType sType ; void* pNext ; uint32_t minSubgroupSize ; uint32_t maxSubgroupSize ; uint32_t maxComputeWorkgroupSubgroups ; VkShaderStageFlags requiredSubgroupSizeStages ; uint32_t maxInlineUniformBlockSize ; uint32_t maxPerStageDescriptorInlineUniformBlocks ; uint32_t maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks ; uint32_t maxDescriptorSetInlineUniformBlocks ; uint32_t maxDescriptorSetUpdateAfterBindInlineUniformBlocks ; uint32_t maxInlineUniformTotalSize ; VkBool32 integerDotProduct8BitUnsignedAccelerated ; VkBool32 integerDotProduct8BitSignedAccelerated ; VkBool32 integerDotProduct8BitMixedSignednessAccelerated ; VkBool32 integerDotProduct4x8BitPackedUnsignedAccelerated ; VkBool32 integerDotProduct4x8BitPackedSignedAccelerated ; VkBool32 integerDotProduct4x8BitPackedMixedSignednessAccelerated ; VkBool32 integerDotProduct16BitUnsignedAccelerated ; VkBool32 integerDotProduct16BitSignedAccelerated ; VkBool32 integerDotProduct16BitMixedSignednessAccelerated ; VkBool32 integerDotProduct32BitUnsignedAccelerated ; VkBool32 integerDotProduct32BitSignedAccelerated ; VkBool32 integerDotProduct32BitMixedSignednessAccelerated ; VkBool32 integerDotProduct64BitUnsignedAccelerated ; VkBool32 integerDotProduct64BitSignedAccelerated ; VkBool32 integerDotProduct64BitMixedSignednessAccelerated ; VkBool32 integerDotProductAccumulatingSaturating8BitUnsignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating8BitSignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated ; VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated ; VkBool32 integerDotProductAccumulatingSaturating16BitUnsignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating16BitSignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated ; VkBool32 integerDotProductAccumulatingSaturating32BitUnsignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating32BitSignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated ; VkBool32 integerDotProductAccumulatingSaturating64BitUnsignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating64BitSignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated ; VkDeviceSize storageTexelBufferOffsetAlignmentBytes ; VkBool32 storageTexelBufferOffsetSingleTexelAlignment ; VkDeviceSize uniformTexelBufferOffsetAlignmentBytes ; VkBool32 uniformTexelBufferOffsetSingleTexelAlignment ; VkDeviceSize maxBufferSize ; } VkPhysicalDeviceVulkan13Properties ; typedef struct VkPipelineCreationFeedback { VkPipelineCreationFeedbackFlags flags ; uint64_t duration ; } VkPipelineCreationFeedback ; typedef struct VkPipelineCreationFeedbackCreateInfo { VkStructureType sType ; const void* pNext ; VkPipelineCreationFeedback* pPipelineCreationFeedback ; uint32_t pipelineStageCreationFeedbackCount ; VkPipelineCreationFeedback* pPipelineStageCreationFeedbacks ; } VkPipelineCreationFeedbackCreateInfo ; typedef struct VkPhysicalDeviceShaderTerminateInvocationFeatures { VkStructureType sType ; void* pNext ; VkBool32 shaderTerminateInvocation ; } VkPhysicalDeviceShaderTerminateInvocationFeatures ; typedef struct VkPhysicalDeviceToolProperties { VkStructureType sType ; void* pNext ; char name [ VK_MAX_EXTENSION_NAME_SIZE ] ; char version [ VK_MAX_EXTENSION_NAME_SIZE ] ; VkToolPurposeFlags purposes ; char description [ VK_MAX_DESCRIPTION_SIZE ] ; char layer [ VK_MAX_EXTENSION_NAME_SIZE ] ; } VkPhysicalDeviceToolProperties ; typedef struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures { VkStructureType sType ; void* pNext ; VkBool32 shaderDemoteToHelperInvocation ; } VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures ; typedef struct VkPhysicalDevicePrivateDataFeatures { VkStructureType sType ; void* pNext ; VkBool32 privateData ; } VkPhysicalDevicePrivateDataFeatures ; typedef struct VkDevicePrivateDataCreateInfo { VkStructureType sType ; const void* pNext ; uint32_t privateDataSlotRequestCount ; } VkDevicePrivateDataCreateInfo ; typedef struct VkPrivateDataSlotCreateInfo { VkStructureType sType ; const void* pNext ; VkPrivateDataSlotCreateFlags flags ; } VkPrivateDataSlotCreateInfo ; typedef struct VkPhysicalDevicePipelineCreationCacheControlFeatures { VkStructureType sType ; void* pNext ; VkBool32 pipelineCreationCacheControl ; } VkPhysicalDevicePipelineCreationCacheControlFeatures ; typedef struct VkMemoryBarrier2 { VkStructureType sType ; const void* pNext ; VkPipelineStageFlags2 srcStageMask ; VkAccessFlags2 srcAccessMask ; VkPipelineStageFlags2 dstStageMask ; VkAccessFlags2 dstAccessMask ; } VkMemoryBarrier2 ; typedef struct VkBufferMemoryBarrier2 { VkStructureType sType ; const void* pNext ; VkPipelineStageFlags2 srcStageMask ; VkAccessFlags2 srcAccessMask ; VkPipelineStageFlags2 dstStageMask ; VkAccessFlags2 dstAccessMask ; uint32_t srcQueueFamilyIndex ; uint32_t dstQueueFamilyIndex ; VkBuffer buffer ; VkDeviceSize offset ; VkDeviceSize size ; } VkBufferMemoryBarrier2 ; typedef struct VkImageMemoryBarrier2 { VkStructureType sType ; const void* pNext ; VkPipelineStageFlags2 srcStageMask ; VkAccessFlags2 srcAccessMask ; VkPipelineStageFlags2 dstStageMask ; VkAccessFlags2 dstAccessMask ; VkImageLayout oldLayout ; VkImageLayout newLayout ; uint32_t srcQueueFamilyIndex ; uint32_t dstQueueFamilyIndex ; VkImage image ; VkImageSubresourceRange subresourceRange ; } VkImageMemoryBarrier2 ; typedef struct VkDependencyInfo { VkStructureType sType ; const void* pNext ; VkDependencyFlags dependencyFlags ; uint32_t memoryBarrierCount ; const VkMemoryBarrier2* pMemoryBarriers ; uint32_t bufferMemoryBarrierCount ; const VkBufferMemoryBarrier2* pBufferMemoryBarriers ; uint32_t imageMemoryBarrierCount ; const VkImageMemoryBarrier2* pImageMemoryBarriers ; } VkDependencyInfo ; typedef struct VkSemaphoreSubmitInfo { VkStructureType sType ; const void* pNext ; VkSemaphore semaphore ; uint64_t value ; VkPipelineStageFlags2 stageMask ; uint32_t deviceIndex ; } VkSemaphoreSubmitInfo ; typedef struct VkCommandBufferSubmitInfo { VkStructureType sType ; const void* pNext ; VkCommandBuffer commandBuffer ; uint32_t deviceMask ; } VkCommandBufferSubmitInfo ; typedef struct VkSubmitInfo2 { VkStructureType sType ; const void* pNext ; VkSubmitFlags flags ; uint32_t waitSemaphoreInfoCount ; const VkSemaphoreSubmitInfo* pWaitSemaphoreInfos ; uint32_t commandBufferInfoCount ; const VkCommandBufferSubmitInfo* pCommandBufferInfos ; uint32_t signalSemaphoreInfoCount ; const VkSemaphoreSubmitInfo* pSignalSemaphoreInfos ; } VkSubmitInfo2 ; typedef struct VkPhysicalDeviceSynchronization2Features { VkStructureType sType ; void* pNext ; VkBool32 synchronization2 ; } VkPhysicalDeviceSynchronization2Features ; typedef struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures { VkStructureType sType ; void* pNext ; VkBool32 shaderZeroInitializeWorkgroupMemory ; } VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures ; typedef struct VkPhysicalDeviceImageRobustnessFeatures { VkStructureType sType ; void* pNext ; VkBool32 robustImageAccess ; } VkPhysicalDeviceImageRobustnessFeatures ; typedef struct VkBufferCopy2 { VkStructureType sType ; const void* pNext ; VkDeviceSize srcOffset ; VkDeviceSize dstOffset ; VkDeviceSize size ; } VkBufferCopy2 ; typedef struct VkCopyBufferInfo2 { VkStructureType sType ; const void* pNext ; VkBuffer srcBuffer ; VkBuffer dstBuffer ; uint32_t regionCount ; const VkBufferCopy2* pRegions ; } VkCopyBufferInfo2 ; typedef struct VkImageCopy2 { VkStructureType sType ; const void* pNext ; VkImageSubresourceLayers srcSubresource ; VkOffset3D srcOffset ; VkImageSubresourceLayers dstSubresource ; VkOffset3D dstOffset ; VkExtent3D extent ; } VkImageCopy2 ; typedef struct VkCopyImageInfo2 { VkStructureType sType ; const void* pNext ; VkImage srcImage ; VkImageLayout srcImageLayout ; VkImage dstImage ; VkImageLayout dstImageLayout ; uint32_t regionCount ; const VkImageCopy2* pRegions ; } VkCopyImageInfo2 ; typedef struct VkBufferImageCopy2 { VkStructureType sType ; const void* pNext ; VkDeviceSize bufferOffset ; uint32_t bufferRowLength ; uint32_t bufferImageHeight ; VkImageSubresourceLayers imageSubresource ; VkOffset3D imageOffset ; VkExtent3D imageExtent ; } VkBufferImageCopy2 ; typedef struct VkCopyBufferToImageInfo2 { VkStructureType sType ; const void* pNext ; VkBuffer srcBuffer ; VkImage dstImage ; VkImageLayout dstImageLayout ; uint32_t regionCount ; const VkBufferImageCopy2* pRegions ; } VkCopyBufferToImageInfo2 ; typedef struct VkCopyImageToBufferInfo2 { VkStructureType sType ; const void* pNext ; VkImage srcImage ; VkImageLayout srcImageLayout ; VkBuffer dstBuffer ; uint32_t regionCount ; const VkBufferImageCopy2* pRegions ; } VkCopyImageToBufferInfo2 ; typedef struct VkImageBlit2 { VkStructureType sType ; const void* pNext ; VkImageSubresourceLayers srcSubresource ; VkOffset3D srcOffsets [ 2 ] ; VkImageSubresourceLayers dstSubresource ; VkOffset3D dstOffsets [ 2 ] ; } VkImageBlit2 ; typedef struct VkBlitImageInfo2 { VkStructureType sType ; const void* pNext ; VkImage srcImage ; VkImageLayout srcImageLayout ; VkImage dstImage ; VkImageLayout dstImageLayout ; uint32_t regionCount ; const VkImageBlit2* pRegions ; VkFilter filter ; } VkBlitImageInfo2 ; typedef struct VkImageResolve2 { VkStructureType sType ; const void* pNext ; VkImageSubresourceLayers srcSubresource ; VkOffset3D srcOffset ; VkImageSubresourceLayers dstSubresource ; VkOffset3D dstOffset ; VkExtent3D extent ; } VkImageResolve2 ; typedef struct VkResolveImageInfo2 { VkStructureType sType ; const void* pNext ; VkImage srcImage ; VkImageLayout srcImageLayout ; VkImage dstImage ; VkImageLayout dstImageLayout ; uint32_t regionCount ; const VkImageResolve2* pRegions ; } VkResolveImageInfo2 ; typedef struct VkPhysicalDeviceSubgroupSizeControlFeatures { VkStructureType sType ; void* pNext ; VkBool32 subgroupSizeControl ; VkBool32 computeFullSubgroups ; } VkPhysicalDeviceSubgroupSizeControlFeatures ; typedef struct VkPhysicalDeviceSubgroupSizeControlProperties { VkStructureType sType ; void* pNext ; uint32_t minSubgroupSize ; uint32_t maxSubgroupSize ; uint32_t maxComputeWorkgroupSubgroups ; VkShaderStageFlags requiredSubgroupSizeStages ; } VkPhysicalDeviceSubgroupSizeControlProperties ; typedef struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo { VkStructureType sType ; void* pNext ; uint32_t requiredSubgroupSize ; } VkPipelineShaderStageRequiredSubgroupSizeCreateInfo ; typedef struct VkPhysicalDeviceInlineUniformBlockFeatures { VkStructureType sType ; void* pNext ; VkBool32 inlineUniformBlock ; VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind ; } VkPhysicalDeviceInlineUniformBlockFeatures ; typedef struct VkPhysicalDeviceInlineUniformBlockProperties { VkStructureType sType ; void* pNext ; uint32_t maxInlineUniformBlockSize ; uint32_t maxPerStageDescriptorInlineUniformBlocks ; uint32_t maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks ; uint32_t maxDescriptorSetInlineUniformBlocks ; uint32_t maxDescriptorSetUpdateAfterBindInlineUniformBlocks ; } VkPhysicalDeviceInlineUniformBlockProperties ; typedef struct VkWriteDescriptorSetInlineUniformBlock { VkStructureType sType ; const void* pNext ; uint32_t dataSize ; const void* pData ; } VkWriteDescriptorSetInlineUniformBlock ; typedef struct VkDescriptorPoolInlineUniformBlockCreateInfo { VkStructureType sType ; const void* pNext ; uint32_t maxInlineUniformBlockBindings ; } VkDescriptorPoolInlineUniformBlockCreateInfo ; typedef struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures { VkStructureType sType ; void* pNext ; VkBool32 textureCompressionASTC_HDR ; } VkPhysicalDeviceTextureCompressionASTCHDRFeatures ; typedef struct VkRenderingAttachmentInfo { VkStructureType sType ; const void* pNext ; VkImageView imageView ; VkImageLayout imageLayout ; VkResolveModeFlagBits resolveMode ; VkImageView resolveImageView ; VkImageLayout resolveImageLayout ; VkAttachmentLoadOp loadOp ; VkAttachmentStoreOp storeOp ; VkClearValue clearValue ; } VkRenderingAttachmentInfo ; typedef struct VkRenderingInfo { VkStructureType sType ; const void* pNext ; VkRenderingFlags flags ; VkRect2D renderArea ; uint32_t layerCount ; uint32_t viewMask ; uint32_t colorAttachmentCount ; const VkRenderingAttachmentInfo* pColorAttachments ; const VkRenderingAttachmentInfo* pDepthAttachment ; const VkRenderingAttachmentInfo* pStencilAttachment ; } VkRenderingInfo ; typedef struct VkPipelineRenderingCreateInfo { VkStructureType sType ; const void* pNext ; uint32_t viewMask ; uint32_t colorAttachmentCount ; const VkFormat* pColorAttachmentFormats ; VkFormat depthAttachmentFormat ; VkFormat stencilAttachmentFormat ; } VkPipelineRenderingCreateInfo ; typedef struct VkPhysicalDeviceDynamicRenderingFeatures { VkStructureType sType ; void* pNext ; VkBool32 dynamicRendering ; } VkPhysicalDeviceDynamicRenderingFeatures ; typedef struct VkCommandBufferInheritanceRenderingInfo { VkStructureType sType ; const void* pNext ; VkRenderingFlags flags ; uint32_t viewMask ; uint32_t colorAttachmentCount ; const VkFormat* pColorAttachmentFormats ; VkFormat depthAttachmentFormat ; VkFormat stencilAttachmentFormat ; VkSampleCountFlagBits rasterizationSamples ; } VkCommandBufferInheritanceRenderingInfo ; typedef struct VkPhysicalDeviceShaderIntegerDotProductFeatures { VkStructureType sType ; void* pNext ; VkBool32 shaderIntegerDotProduct ; } VkPhysicalDeviceShaderIntegerDotProductFeatures ; typedef struct VkPhysicalDeviceShaderIntegerDotProductProperties { VkStructureType sType ; void* pNext ; VkBool32 integerDotProduct8BitUnsignedAccelerated ; VkBool32 integerDotProduct8BitSignedAccelerated ; VkBool32 integerDotProduct8BitMixedSignednessAccelerated ; VkBool32 integerDotProduct4x8BitPackedUnsignedAccelerated ; VkBool32 integerDotProduct4x8BitPackedSignedAccelerated ; VkBool32 integerDotProduct4x8BitPackedMixedSignednessAccelerated ; VkBool32 integerDotProduct16BitUnsignedAccelerated ; VkBool32 integerDotProduct16BitSignedAccelerated ; VkBool32 integerDotProduct16BitMixedSignednessAccelerated ; VkBool32 integerDotProduct32BitUnsignedAccelerated ; VkBool32 integerDotProduct32BitSignedAccelerated ; VkBool32 integerDotProduct32BitMixedSignednessAccelerated ; VkBool32 integerDotProduct64BitUnsignedAccelerated ; VkBool32 integerDotProduct64BitSignedAccelerated ; VkBool32 integerDotProduct64BitMixedSignednessAccelerated ; VkBool32 integerDotProductAccumulatingSaturating8BitUnsignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating8BitSignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated ; VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated ; VkBool32 integerDotProductAccumulatingSaturating16BitUnsignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating16BitSignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated ; VkBool32 integerDotProductAccumulatingSaturating32BitUnsignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating32BitSignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated ; VkBool32 integerDotProductAccumulatingSaturating64BitUnsignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating64BitSignedAccelerated ; VkBool32 integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated ; } VkPhysicalDeviceShaderIntegerDotProductProperties ; typedef struct VkPhysicalDeviceTexelBufferAlignmentProperties { VkStructureType sType ; void* pNext ; VkDeviceSize storageTexelBufferOffsetAlignmentBytes ; VkBool32 storageTexelBufferOffsetSingleTexelAlignment ; VkDeviceSize uniformTexelBufferOffsetAlignmentBytes ; VkBool32 uniformTexelBufferOffsetSingleTexelAlignment ; } VkPhysicalDeviceTexelBufferAlignmentProperties ; typedef struct VkFormatProperties3 { VkStructureType sType ; void* pNext ; VkFormatFeatureFlags2 linearTilingFeatures ; VkFormatFeatureFlags2 optimalTilingFeatures ; VkFormatFeatureFlags2 bufferFeatures ; } VkFormatProperties3 ; typedef struct VkPhysicalDeviceMaintenance4Features { VkStructureType sType ; void* pNext ; VkBool32 maintenance4 ; } VkPhysicalDeviceMaintenance4Features ; typedef struct VkPhysicalDeviceMaintenance4Properties { VkStructureType sType ; void* pNext ; VkDeviceSize maxBufferSize ; } VkPhysicalDeviceMaintenance4Properties ; typedef struct VkDeviceBufferMemoryRequirements { VkStructureType sType ; const void* pNext ; const VkBufferCreateInfo* pCreateInfo ; } VkDeviceBufferMemoryRequirements ; typedef struct VkDeviceImageMemoryRequirements { VkStructureType sType ; const void* pNext ; const VkImageCreateInfo* pCreateInfo ; VkImageAspectFlagBits planeAspect ; } VkDeviceImageMemoryRequirements ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceToolProperties)(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreatePrivateDataSlot)(VkDevice device, const VkPrivateDataSlotCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyPrivateDataSlot)(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkSetPrivateData)(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPrivateData)(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t* pData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetEvent2)(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo* pDependencyInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdResetEvent2)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdWaitEvents2)(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfo* pDependencyInfos)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdPipelineBarrier2)(VkCommandBuffer commandBuffer, const VkDependencyInfo* pDependencyInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdWriteTimestamp2)(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkQueueSubmit2)(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2* pSubmits, VkFence fence)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyBuffer2)(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2* pCopyBufferInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyImage2)(VkCommandBuffer commandBuffer, const VkCopyImageInfo2* pCopyImageInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyBufferToImage2)(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyImageToBuffer2)(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBlitImage2)(VkCommandBuffer commandBuffer, const VkBlitImageInfo2* pBlitImageInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdResolveImage2)(VkCommandBuffer commandBuffer, const VkResolveImageInfo2* pResolveImageInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBeginRendering)(VkCommandBuffer commandBuffer, const VkRenderingInfo* pRenderingInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdEndRendering)(VkCommandBuffer commandBuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetCullMode)(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetFrontFace)(VkCommandBuffer commandBuffer, VkFrontFace frontFace)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetPrimitiveTopology)(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetViewportWithCount)(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetScissorWithCount)(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBindVertexBuffers2)(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDepthTestEnable)(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDepthWriteEnable)(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDepthCompareOp)(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDepthBoundsTestEnable)(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetStencilTestEnable)(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetStencilOp)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetRasterizerDiscardEnable)(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDepthBiasEnable)(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetPrimitiveRestartEnable)(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDeviceBufferMemoryRequirements)(VkDevice device, const VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDeviceImageMemoryRequirements)(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDeviceImageSparseMemoryRequirements)(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)"
  },
  {
    "label": "vkGetPhysicalDeviceToolProperties()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties)"
  },
  {
    "label": "vkCreatePrivateDataSlot()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreatePrivateDataSlot(VkDevice device, const VkPrivateDataSlotCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot)"
  },
  {
    "label": "vkDestroyPrivateDataSlot()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkSetPrivateData()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data)"
  },
  {
    "label": "vkGetPrivateData()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t* pData)"
  },
  {
    "label": "vkCmdSetEvent2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo* pDependencyInfo)"
  },
  {
    "label": "vkCmdResetEvent2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)"
  },
  {
    "label": "vkCmdWaitEvents2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfo* pDependencyInfos)"
  },
  {
    "label": "vkCmdPipelineBarrier2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfo* pDependencyInfo)"
  },
  {
    "label": "vkCmdWriteTimestamp2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)"
  },
  {
    "label": "vkQueueSubmit2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkQueueSubmit2(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2* pSubmits, VkFence fence)"
  },
  {
    "label": "vkCmdCopyBuffer2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2* pCopyBufferInfo)"
  },
  {
    "label": "vkCmdCopyImage2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo2* pCopyImageInfo)"
  },
  {
    "label": "vkCmdCopyBufferToImage2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo)"
  },
  {
    "label": "vkCmdCopyImageToBuffer2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo)"
  },
  {
    "label": "vkCmdBlitImage2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo2* pBlitImageInfo)"
  },
  {
    "label": "vkCmdResolveImage2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveImageInfo2* pResolveImageInfo)"
  },
  {
    "label": "vkCmdBeginRendering()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfo* pRenderingInfo)"
  },
  {
    "label": "vkCmdEndRendering()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdEndRendering(VkCommandBuffer commandBuffer)"
  },
  {
    "label": "vkCmdSetCullMode()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)"
  },
  {
    "label": "vkCmdSetFrontFace()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace)"
  },
  {
    "label": "vkCmdSetPrimitiveTopology()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)"
  },
  {
    "label": "vkCmdSetViewportWithCount()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports)"
  },
  {
    "label": "vkCmdSetScissorWithCount()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors)"
  },
  {
    "label": "vkCmdBindVertexBuffers2()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides)"
  },
  {
    "label": "vkCmdSetDepthTestEnable()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)"
  },
  {
    "label": "vkCmdSetDepthWriteEnable()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)"
  },
  {
    "label": "vkCmdSetDepthCompareOp()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)"
  },
  {
    "label": "vkCmdSetDepthBoundsTestEnable()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)"
  },
  {
    "label": "vkCmdSetStencilTestEnable()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)"
  },
  {
    "label": "vkCmdSetStencilOp()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)"
  },
  {
    "label": "vkCmdSetRasterizerDiscardEnable()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)"
  },
  {
    "label": "vkCmdSetDepthBiasEnable()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)"
  },
  {
    "label": "vkCmdSetPrimitiveRestartEnable()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)"
  },
  {
    "label": "vkGetDeviceBufferMemoryRequirements()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDeviceBufferMemoryRequirements(VkDevice device, const VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "vkGetDeviceImageMemoryRequirements()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDeviceImageMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "vkGetDeviceImageSparseMemoryRequirements()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDeviceImageSparseMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_surface 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSurfaceKHR)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (VK_PRESENT_MODE_IMMEDIATE_KHR = 0,VK_PRESENT_MODE_MAILBOX_KHR = 1,VK_PRESENT_MODE_FIFO_KHR = 2,VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1 0 0 0 1 1 1 0 0 0,VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1 0 0 0 1 1 1 0 0 1,VK_PRESENT_MODE_MAX_ENUM_KHR = 0 x7FFFFFFF } VkPresentModeKHR ; typedef enum VkColorSpaceKHR { VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1 0 0 0 1 0 4 0 0 1,VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1 0 0 0 1 0 4 0 0 2,VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1 0 0 0 1 0 4 0 0 3,VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1 0 0 0 1 0 4 0 0 4,VK_COLOR_SPACE_BT709_LINEAR_EXT = 1 0 0 0 1 0 4 0 0 5,VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1 0 0 0 1 0 4 0 0 6,VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1 0 0 0 1 0 4 0 0 7,VK_COLOR_SPACE_HDR10_ST2084_EXT = 1 0 0 0 1 0 4 0 0 8,VK_COLOR_SPACE_DOLBYVISION_EXT = 1 0 0 0 1 0 4 0 0 9,VK_COLOR_SPACE_HDR10_HLG_EXT = 1 0 0 0 1 0 4 0 1 0,VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1 0 0 0 1 0 4 0 1 1,VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1 0 0 0 1 0 4 0 1 2,VK_COLOR_SPACE_PASS_THROUGH_EXT = 1 0 0 0 1 0 4 0 1 3,VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1 0 0 0 1 0 4 0 1 4,VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1 0 0 0 2 1 3 0 0 0,VK_COLORSPACE_SRGB_NONLINEAR_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,VK_COLOR_SPACE_MAX_ENUM_KHR = 0 x7FFFFFFF } VkColorSpaceKHR ; typedef enum VkSurfaceTransformFlagBitsKHR { VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 0 x00000001,VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 0 x00000002,VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 0 x00000004,VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 0 x00000008,VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 0 x00000010,VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0 x00000020,VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0 x00000040,VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0 x00000080,VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 0 x00000100,VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkSurfaceTransformFlagBitsKHR ; typedef enum VkCompositeAlphaFlagBitsKHR { VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 0 x00000001,VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 0 x00000002,VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0 x00000004,VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 0 x00000008,VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkCompositeAlphaFlagBitsKHR ; typedef VkFlags VkCompositeAlphaFlagsKHR ; typedef VkFlags VkSurfaceTransformFlagsKHR ; typedef struct VkSurfaceCapabilitiesKHR { uint32_t minImageCount ; uint32_t maxImageCount ; VkExtent2D currentExtent ; VkExtent2D minImageExtent ; VkExtent2D maxImageExtent ; uint32_t maxImageArrayLayers ; VkSurfaceTransformFlagsKHR supportedTransforms ; VkSurfaceTransformFlagBitsKHR currentTransform ; VkCompositeAlphaFlagsKHR supportedCompositeAlpha ; VkImageUsageFlags supportedUsageFlags ; } VkSurfaceCapabilitiesKHR ; typedef struct VkSurfaceFormatKHR { VkFormat format ; VkColorSpaceKHR colorSpace ; } VkSurfaceFormatKHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroySurfaceKHR)(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes)"
  },
  {
    "label": "vkDestroySurfaceKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkGetPhysicalDeviceSurfaceSupportKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported)"
  },
  {
    "label": "vkGetPhysicalDeviceSurfaceCapabilitiesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities)"
  },
  {
    "label": "vkGetPhysicalDeviceSurfaceFormatsKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats)"
  },
  {
    "label": "vkGetPhysicalDeviceSurfacePresentModesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_swapchain 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSwapchainKHR)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 0 x00000001,VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 0 x00000002,VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 0 x00000004,VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT = 0 x00000008,VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkSwapchainCreateFlagBitsKHR ; typedef VkFlags VkSwapchainCreateFlagsKHR ; typedef enum VkDeviceGroupPresentModeFlagBitsKHR { VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 0 x00000001,VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 0 x00000002,VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 0 x00000004,VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 0 x00000008,VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkDeviceGroupPresentModeFlagBitsKHR ; typedef VkFlags VkDeviceGroupPresentModeFlagsKHR ; typedef struct VkSwapchainCreateInfoKHR { VkStructureType sType ; const void* pNext ; VkSwapchainCreateFlagsKHR flags ; VkSurfaceKHR surface ; uint32_t minImageCount ; VkFormat imageFormat ; VkColorSpaceKHR imageColorSpace ; VkExtent2D imageExtent ; uint32_t imageArrayLayers ; VkImageUsageFlags imageUsage ; VkSharingMode imageSharingMode ; uint32_t queueFamilyIndexCount ; const uint32_t* pQueueFamilyIndices ; VkSurfaceTransformFlagBitsKHR preTransform ; VkCompositeAlphaFlagBitsKHR compositeAlpha ; VkPresentModeKHR presentMode ; VkBool32 clipped ; VkSwapchainKHR oldSwapchain ; } VkSwapchainCreateInfoKHR ; typedef struct VkPresentInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t waitSemaphoreCount ; const VkSemaphore* pWaitSemaphores ; uint32_t swapchainCount ; const VkSwapchainKHR* pSwapchains ; const uint32_t* pImageIndices ; VkResult* pResults ; } VkPresentInfoKHR ; typedef struct VkImageSwapchainCreateInfoKHR { VkStructureType sType ; const void* pNext ; VkSwapchainKHR swapchain ; } VkImageSwapchainCreateInfoKHR ; typedef struct VkBindImageMemorySwapchainInfoKHR { VkStructureType sType ; const void* pNext ; VkSwapchainKHR swapchain ; uint32_t imageIndex ; } VkBindImageMemorySwapchainInfoKHR ; typedef struct VkAcquireNextImageInfoKHR { VkStructureType sType ; const void* pNext ; VkSwapchainKHR swapchain ; uint64_t timeout ; VkSemaphore semaphore ; VkFence fence ; uint32_t deviceMask ; } VkAcquireNextImageInfoKHR ; typedef struct VkDeviceGroupPresentCapabilitiesKHR { VkStructureType sType ; void* pNext ; uint32_t presentMask [ VK_MAX_DEVICE_GROUP_SIZE ] ; VkDeviceGroupPresentModeFlagsKHR modes ; } VkDeviceGroupPresentCapabilitiesKHR ; typedef struct VkDeviceGroupPresentInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t swapchainCount ; const uint32_t* pDeviceMasks ; VkDeviceGroupPresentModeFlagBitsKHR mode ; } VkDeviceGroupPresentInfoKHR ; typedef struct VkDeviceGroupSwapchainCreateInfoKHR { VkStructureType sType ; const void* pNext ; VkDeviceGroupPresentModeFlagsKHR modes ; } VkDeviceGroupSwapchainCreateInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateSwapchainKHR)(VkDevice device, const VkSwapchainCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroySwapchainKHR)(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetSwapchainImagesKHR)(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkAcquireNextImageKHR)(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkQueuePresentKHR)(VkQueue queue, const VkPresentInfoKHR* pPresentInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetDeviceGroupPresentCapabilitiesKHR)(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetDeviceGroupSurfacePresentModesKHR)(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDevicePresentRectanglesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pRectCount, VkRect2D* pRects)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkAcquireNextImage2KHR)(VkDevice device, const VkAcquireNextImageInfoKHR* pAcquireInfo, uint32_t* pImageIndex)"
  },
  {
    "label": "vkCreateSwapchainKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateSwapchainKHR(VkDevice device, const VkSwapchainCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain)"
  },
  {
    "label": "vkDestroySwapchainKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkGetSwapchainImagesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages)"
  },
  {
    "label": "vkAcquireNextImageKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex)"
  },
  {
    "label": "vkQueuePresentKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkQueuePresentKHR(VkQueue queue, const VkPresentInfoKHR* pPresentInfo)"
  },
  {
    "label": "vkGetDeviceGroupPresentCapabilitiesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities)"
  },
  {
    "label": "vkGetDeviceGroupSurfacePresentModesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes)"
  },
  {
    "label": "vkGetPhysicalDevicePresentRectanglesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pRectCount, VkRect2D* pRects)"
  },
  {
    "label": "vkAcquireNextImage2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkAcquireNextImage2KHR(VkDevice device, const VkAcquireNextImageInfoKHR* pAcquireInfo, uint32_t* pImageIndex)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_display 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDisplayKHR) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDisplayModeKHR)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef enum VkDisplayPlaneAlphaFlagBitsKHR { VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 0 x00000001,VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 0 x00000002,VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 0 x00000004,VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0 x00000008,VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkDisplayPlaneAlphaFlagBitsKHR ; typedef VkFlags VkDisplayPlaneAlphaFlagsKHR ; typedef VkFlags VkDisplaySurfaceCreateFlagsKHR ; typedef struct VkDisplayModeParametersKHR { VkExtent2D visibleRegion ; uint32_t refreshRate ; } VkDisplayModeParametersKHR ; typedef struct VkDisplayModeCreateInfoKHR { VkStructureType sType ; const void* pNext ; VkDisplayModeCreateFlagsKHR flags ; VkDisplayModeParametersKHR parameters ; } VkDisplayModeCreateInfoKHR ; typedef struct VkDisplayModePropertiesKHR { VkDisplayModeKHR displayMode ; VkDisplayModeParametersKHR parameters ; } VkDisplayModePropertiesKHR ; typedef struct VkDisplayPlaneCapabilitiesKHR { VkDisplayPlaneAlphaFlagsKHR supportedAlpha ; VkOffset2D minSrcPosition ; VkOffset2D maxSrcPosition ; VkExtent2D minSrcExtent ; VkExtent2D maxSrcExtent ; VkOffset2D minDstPosition ; VkOffset2D maxDstPosition ; VkExtent2D minDstExtent ; VkExtent2D maxDstExtent ; } VkDisplayPlaneCapabilitiesKHR ; typedef struct VkDisplayPlanePropertiesKHR { VkDisplayKHR currentDisplay ; uint32_t currentStackIndex ; } VkDisplayPlanePropertiesKHR ; typedef struct VkDisplayPropertiesKHR { VkDisplayKHR display ; const char* displayName ; VkExtent2D physicalDimensions ; VkExtent2D physicalResolution ; VkSurfaceTransformFlagsKHR supportedTransforms ; VkBool32 planeReorderPossible ; VkBool32 persistentContent ; } VkDisplayPropertiesKHR ; typedef struct VkDisplaySurfaceCreateInfoKHR { VkStructureType sType ; const void* pNext ; VkDisplaySurfaceCreateFlagsKHR flags ; VkDisplayModeKHR displayMode ; uint32_t planeIndex ; uint32_t planeStackIndex ; VkSurfaceTransformFlagBitsKHR transform ; float globalAlpha ; VkDisplayPlaneAlphaFlagBitsKHR alphaMode ; VkExtent2D imageExtent ; } VkDisplaySurfaceCreateInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceDisplayPropertiesKHR)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetDisplayPlaneSupportedDisplaysKHR)(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetDisplayModePropertiesKHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateDisplayModeKHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetDisplayPlaneCapabilitiesKHR)(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateDisplayPlaneSurfaceKHR)(VkInstance instance, const VkDisplaySurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)"
  },
  {
    "label": "vkGetPhysicalDeviceDisplayPropertiesKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceDisplayPlanePropertiesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties)"
  },
  {
    "label": "vkGetDisplayPlaneSupportedDisplaysKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays)"
  },
  {
    "label": "vkGetDisplayModePropertiesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties)"
  },
  {
    "label": "vkCreateDisplayModeKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode)"
  },
  {
    "label": "vkGetDisplayPlaneCapabilitiesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities)"
  },
  {
    "label": "vkCreateDisplayPlaneSurfaceKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, const VkDisplaySurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_display_swapchain 1 # define VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION 1 0 # define VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME \" VK_KHR_display_swapchain \" typedef struct VkDisplayPresentInfoKHR { VkStructureType sType ; const void* pNext ; VkRect2D srcRect ; VkRect2D dstRect ; VkBool32 persistent ; } VkDisplayPresentInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateSharedSwapchainsKHR)(VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains)"
  },
  {
    "label": "vkCreateSharedSwapchainsKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateSharedSwapchainsKHR(VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_sampler_mirror_clamp_to_edge 1 # define VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION 3 # define VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME \" VK_KHR_sampler_mirror_clamp_to_edge \" # define VK_KHR_video_queue 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkVideoSessionKHR) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkVideoSessionParametersKHR)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (VK_QUERY_RESULT_STATUS_ERROR_KHR = - 1,VK_QUERY_RESULT_STATUS_NOT_READY_KHR = 0,VK_QUERY_RESULT_STATUS_COMPLETE_KHR = 1,VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR = - 1 0 0 0 2 9 9 0 0 0,VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkQueryResultStatusKHR ; typedef enum VkVideoCodecOperationFlagBitsKHR { VK_VIDEO_CODEC_OPERATION_NONE_KHR = 0,VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR = 0 x00010000,VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR = 0 x00020000,VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR = 0 x00000001,VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR = 0 x00000002,VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR = 0 x00000004,VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoCodecOperationFlagBitsKHR ; typedef VkFlags VkVideoCodecOperationFlagsKHR ; typedef enum VkVideoChromaSubsamplingFlagBitsKHR { VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = 0,VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = 0 x00000001,VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = 0 x00000002,VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = 0 x00000004,VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = 0 x00000008,VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoChromaSubsamplingFlagBitsKHR ; typedef VkFlags VkVideoChromaSubsamplingFlagsKHR ; typedef enum VkVideoComponentBitDepthFlagBitsKHR { VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = 0,VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = 0 x00000001,VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = 0 x00000004,VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = 0 x00000010,VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoComponentBitDepthFlagBitsKHR ; typedef VkFlags VkVideoComponentBitDepthFlagsKHR ; typedef enum VkVideoCapabilityFlagBitsKHR { VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = 0 x00000001,VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = 0 x00000002,VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoCapabilityFlagBitsKHR ; typedef VkFlags VkVideoCapabilityFlagsKHR ; typedef enum VkVideoSessionCreateFlagBitsKHR { VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = 0 x00000001,VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR = 0 x00000002,VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR = 0 x00000004,VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoSessionCreateFlagBitsKHR ; typedef VkFlags VkVideoSessionCreateFlagsKHR ; typedef VkFlags VkVideoSessionParametersCreateFlagsKHR ; typedef VkFlags VkVideoBeginCodingFlagsKHR ; typedef VkFlags VkVideoEndCodingFlagsKHR ; typedef enum VkVideoCodingControlFlagBitsKHR { VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR = 0 x00000001,VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR = 0 x00000002,VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR = 0 x00000004,VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoCodingControlFlagBitsKHR ; typedef VkFlags VkVideoCodingControlFlagsKHR ; typedef struct VkQueueFamilyQueryResultStatusPropertiesKHR { VkStructureType sType ; void* pNext ; VkBool32 queryResultStatusSupport ; } VkQueueFamilyQueryResultStatusPropertiesKHR ; typedef struct VkQueueFamilyVideoPropertiesKHR { VkStructureType sType ; void* pNext ; VkVideoCodecOperationFlagsKHR videoCodecOperations ; } VkQueueFamilyVideoPropertiesKHR ; typedef struct VkVideoProfileInfoKHR { VkStructureType sType ; const void* pNext ; VkVideoCodecOperationFlagBitsKHR videoCodecOperation ; VkVideoChromaSubsamplingFlagsKHR chromaSubsampling ; VkVideoComponentBitDepthFlagsKHR lumaBitDepth ; VkVideoComponentBitDepthFlagsKHR chromaBitDepth ; } VkVideoProfileInfoKHR ; typedef struct VkVideoProfileListInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t profileCount ; const VkVideoProfileInfoKHR* pProfiles ; } VkVideoProfileListInfoKHR ; typedef struct VkVideoCapabilitiesKHR { VkStructureType sType ; void* pNext ; VkVideoCapabilityFlagsKHR flags ; VkDeviceSize minBitstreamBufferOffsetAlignment ; VkDeviceSize minBitstreamBufferSizeAlignment ; VkExtent2D pictureAccessGranularity ; VkExtent2D minCodedExtent ; VkExtent2D maxCodedExtent ; uint32_t maxDpbSlots ; uint32_t maxActiveReferencePictures ; VkExtensionProperties stdHeaderVersion ; } VkVideoCapabilitiesKHR ; typedef struct VkPhysicalDeviceVideoFormatInfoKHR { VkStructureType sType ; const void* pNext ; VkImageUsageFlags imageUsage ; } VkPhysicalDeviceVideoFormatInfoKHR ; typedef struct VkVideoFormatPropertiesKHR { VkStructureType sType ; void* pNext ; VkFormat format ; VkComponentMapping componentMapping ; VkImageCreateFlags imageCreateFlags ; VkImageType imageType ; VkImageTiling imageTiling ; VkImageUsageFlags imageUsageFlags ; } VkVideoFormatPropertiesKHR ; typedef struct VkVideoPictureResourceInfoKHR { VkStructureType sType ; const void* pNext ; VkOffset2D codedOffset ; VkExtent2D codedExtent ; uint32_t baseArrayLayer ; VkImageView imageViewBinding ; } VkVideoPictureResourceInfoKHR ; typedef struct VkVideoReferenceSlotInfoKHR { VkStructureType sType ; const void* pNext ; int32_t slotIndex ; const VkVideoPictureResourceInfoKHR* pPictureResource ; } VkVideoReferenceSlotInfoKHR ; typedef struct VkVideoSessionMemoryRequirementsKHR { VkStructureType sType ; void* pNext ; uint32_t memoryBindIndex ; VkMemoryRequirements memoryRequirements ; } VkVideoSessionMemoryRequirementsKHR ; typedef struct VkBindVideoSessionMemoryInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t memoryBindIndex ; VkDeviceMemory memory ; VkDeviceSize memoryOffset ; VkDeviceSize memorySize ; } VkBindVideoSessionMemoryInfoKHR ; typedef struct VkVideoSessionCreateInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t queueFamilyIndex ; VkVideoSessionCreateFlagsKHR flags ; const VkVideoProfileInfoKHR* pVideoProfile ; VkFormat pictureFormat ; VkExtent2D maxCodedExtent ; VkFormat referencePictureFormat ; uint32_t maxDpbSlots ; uint32_t maxActiveReferencePictures ; const VkExtensionProperties* pStdHeaderVersion ; } VkVideoSessionCreateInfoKHR ; typedef struct VkVideoSessionParametersCreateInfoKHR { VkStructureType sType ; const void* pNext ; VkVideoSessionParametersCreateFlagsKHR flags ; VkVideoSessionParametersKHR videoSessionParametersTemplate ; VkVideoSessionKHR videoSession ; } VkVideoSessionParametersCreateInfoKHR ; typedef struct VkVideoSessionParametersUpdateInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t updateSequenceCount ; } VkVideoSessionParametersUpdateInfoKHR ; typedef struct VkVideoBeginCodingInfoKHR { VkStructureType sType ; const void* pNext ; VkVideoBeginCodingFlagsKHR flags ; VkVideoSessionKHR videoSession ; VkVideoSessionParametersKHR videoSessionParameters ; uint32_t referenceSlotCount ; const VkVideoReferenceSlotInfoKHR* pReferenceSlots ; } VkVideoBeginCodingInfoKHR ; typedef struct VkVideoEndCodingInfoKHR { VkStructureType sType ; const void* pNext ; VkVideoEndCodingFlagsKHR flags ; } VkVideoEndCodingInfoKHR ; typedef struct VkVideoCodingControlInfoKHR { VkStructureType sType ; const void* pNext ; VkVideoCodingControlFlagsKHR flags ; } VkVideoCodingControlInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR)(VkPhysicalDevice physicalDevice, const VkVideoProfileInfoKHR* pVideoProfile, VkVideoCapabilitiesKHR* pCapabilities)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo, uint32_t* pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR* pVideoFormatProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateVideoSessionKHR)(VkDevice device, const VkVideoSessionCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkVideoSessionKHR* pVideoSession)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyVideoSessionKHR)(VkDevice device, VkVideoSessionKHR videoSession, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetVideoSessionMemoryRequirementsKHR)(VkDevice device, VkVideoSessionKHR videoSession, uint32_t* pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkBindVideoSessionMemoryKHR)(VkDevice device, VkVideoSessionKHR videoSession, uint32_t bindSessionMemoryInfoCount, const VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateVideoSessionParametersKHR)(VkDevice device, const VkVideoSessionParametersCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkVideoSessionParametersKHR* pVideoSessionParameters)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkUpdateVideoSessionParametersKHR)(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyVideoSessionParametersKHR)(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBeginVideoCodingKHR)(VkCommandBuffer commandBuffer, const VkVideoBeginCodingInfoKHR* pBeginInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdEndVideoCodingKHR)(VkCommandBuffer commandBuffer, const VkVideoEndCodingInfoKHR* pEndCodingInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdControlVideoCodingKHR)(VkCommandBuffer commandBuffer, const VkVideoCodingControlInfoKHR* pCodingControlInfo)"
  },
  {
    "label": "vkGetPhysicalDeviceVideoCapabilitiesKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, const VkVideoProfileInfoKHR* pVideoProfile, VkVideoCapabilitiesKHR* pCapabilities)"
  },
  {
    "label": "vkGetPhysicalDeviceVideoFormatPropertiesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo, uint32_t* pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR* pVideoFormatProperties)"
  },
  {
    "label": "vkCreateVideoSessionKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateVideoSessionKHR(VkDevice device, const VkVideoSessionCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkVideoSessionKHR* pVideoSession)"
  },
  {
    "label": "vkDestroyVideoSessionKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkGetVideoSessionMemoryRequirementsKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetVideoSessionMemoryRequirementsKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t* pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements)"
  },
  {
    "label": "vkBindVideoSessionMemoryKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkBindVideoSessionMemoryKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t bindSessionMemoryInfoCount, const VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos)"
  },
  {
    "label": "vkCreateVideoSessionParametersKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateVideoSessionParametersKHR(VkDevice device, const VkVideoSessionParametersCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkVideoSessionParametersKHR* pVideoSessionParameters)"
  },
  {
    "label": "vkUpdateVideoSessionParametersKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkUpdateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo)"
  },
  {
    "label": "vkDestroyVideoSessionParametersKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCmdBeginVideoCodingKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBeginVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoBeginCodingInfoKHR* pBeginInfo)"
  },
  {
    "label": "vkCmdEndVideoCodingKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdEndVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoEndCodingInfoKHR* pEndCodingInfo)"
  },
  {
    "label": "vkCmdControlVideoCodingKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdControlVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoCodingControlInfoKHR* pCodingControlInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_video_decode_queue 1 # define VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION 8 # define VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME \" VK_KHR_video_decode_queue \" typedef enum VkVideoDecodeCapabilityFlagBitsKHR { VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = 0 x00000001,VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = 0 x00000002,VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoDecodeCapabilityFlagBitsKHR ; typedef VkFlags VkVideoDecodeCapabilityFlagsKHR ; typedef enum VkVideoDecodeUsageFlagBitsKHR { VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = 0,VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = 0 x00000001,VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = 0 x00000002,VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = 0 x00000004,VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoDecodeUsageFlagBitsKHR ; typedef VkFlags VkVideoDecodeUsageFlagsKHR ; typedef VkFlags VkVideoDecodeFlagsKHR ; typedef struct VkVideoDecodeCapabilitiesKHR { VkStructureType sType ; void* pNext ; VkVideoDecodeCapabilityFlagsKHR flags ; } VkVideoDecodeCapabilitiesKHR ; typedef struct VkVideoDecodeUsageInfoKHR { VkStructureType sType ; const void* pNext ; VkVideoDecodeUsageFlagsKHR videoUsageHints ; } VkVideoDecodeUsageInfoKHR ; typedef struct VkVideoDecodeInfoKHR { VkStructureType sType ; const void* pNext ; VkVideoDecodeFlagsKHR flags ; VkBuffer srcBuffer ; VkDeviceSize srcBufferOffset ; VkDeviceSize srcBufferRange ; VkVideoPictureResourceInfoKHR dstPictureResource ; const VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot ; uint32_t referenceSlotCount ; const VkVideoReferenceSlotInfoKHR* pReferenceSlots ; } VkVideoDecodeInfoKHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDecodeVideoKHR)(VkCommandBuffer commandBuffer, const VkVideoDecodeInfoKHR* pDecodeInfo)"
  },
  {
    "label": "vkCmdDecodeVideoKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDecodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoDecodeInfoKHR* pDecodeInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_video_encode_h264 1 # include \" vk_video / vulkan_video_codec_h264std . h \" # include \" vk_video / vulkan_video_codec_h264std_encode . h \" # define VK_KHR_VIDEO_ENCODE_H264_SPEC_VERSION 1 4 # define VK_KHR_VIDEO_ENCODE_H264_EXTENSION_NAME \" VK_KHR_video_encode_h264 \" typedef enum VkVideoEncodeH264CapabilityFlagBitsKHR { VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 0 x00000001,VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 0 x00000002,VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR = 0 x00000004,VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR = 0 x00000008,VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 0 x00000010,VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 0 x00000020,VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 0 x00000040,VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR = 0 x00000080,VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR = 0 x00000100,VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoEncodeH264CapabilityFlagBitsKHR ; typedef VkFlags VkVideoEncodeH264CapabilityFlagsKHR ; typedef enum VkVideoEncodeH264StdFlagBitsKHR { VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 0 x00000001,VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR = 0 x00000002,VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR = 0 x00000004,VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 0 x00000008,VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 0 x00000010,VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR = 0 x00000020,VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 0 x00000040,VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR = 0 x00000080,VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR = 0 x00000100,VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR = 0 x00000200,VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR = 0 x00000400,VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR = 0 x00000800,VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR = 0 x00001000,VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR = 0 x00002000,VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 0 x00004000,VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR = 0 x00008000,VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR = 0 x00010000,VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR = 0 x00020000,VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR = 0 x00080000,VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 0 x00100000,VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoEncodeH264StdFlagBitsKHR ; typedef VkFlags VkVideoEncodeH264StdFlagsKHR ; typedef enum VkVideoEncodeH264RateControlFlagBitsKHR { VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 0 x00000001,VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 0 x00000002,VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 0 x00000004,VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 0 x00000008,VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR = 0 x00000010,VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoEncodeH264RateControlFlagBitsKHR ; typedef VkFlags VkVideoEncodeH264RateControlFlagsKHR ; typedef struct VkVideoEncodeH264CapabilitiesKHR { VkStructureType sType ; void* pNext ; VkVideoEncodeH264CapabilityFlagsKHR flags ; StdVideoH264LevelIdc maxLevelIdc ; uint32_t maxSliceCount ; uint32_t maxPPictureL0ReferenceCount ; uint32_t maxBPictureL0ReferenceCount ; uint32_t maxL1ReferenceCount ; uint32_t maxTemporalLayerCount ; VkBool32 expectDyadicTemporalLayerPattern ; int32_t minQp ; int32_t maxQp ; VkBool32 prefersGopRemainingFrames ; VkBool32 requiresGopRemainingFrames ; VkVideoEncodeH264StdFlagsKHR stdSyntaxFlags ; } VkVideoEncodeH264CapabilitiesKHR ; typedef struct VkVideoEncodeH264QpKHR { int32_t qpI ; int32_t qpP ; int32_t qpB ; } VkVideoEncodeH264QpKHR ; typedef struct VkVideoEncodeH264QualityLevelPropertiesKHR { VkStructureType sType ; void* pNext ; VkVideoEncodeH264RateControlFlagsKHR preferredRateControlFlags ; uint32_t preferredGopFrameCount ; uint32_t preferredIdrPeriod ; uint32_t preferredConsecutiveBFrameCount ; uint32_t preferredTemporalLayerCount ; VkVideoEncodeH264QpKHR preferredConstantQp ; uint32_t preferredMaxL0ReferenceCount ; uint32_t preferredMaxL1ReferenceCount ; VkBool32 preferredStdEntropyCodingModeFlag ; } VkVideoEncodeH264QualityLevelPropertiesKHR ; typedef struct VkVideoEncodeH264SessionCreateInfoKHR { VkStructureType sType ; const void* pNext ; VkBool32 useMaxLevelIdc ; StdVideoH264LevelIdc maxLevelIdc ; } VkVideoEncodeH264SessionCreateInfoKHR ; typedef struct VkVideoEncodeH264SessionParametersAddInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t stdSPSCount ; const StdVideoH264SequenceParameterSet* pStdSPSs ; uint32_t stdPPSCount ; const StdVideoH264PictureParameterSet* pStdPPSs ; } VkVideoEncodeH264SessionParametersAddInfoKHR ; typedef struct VkVideoEncodeH264SessionParametersCreateInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t maxStdSPSCount ; uint32_t maxStdPPSCount ; const VkVideoEncodeH264SessionParametersAddInfoKHR* pParametersAddInfo ; } VkVideoEncodeH264SessionParametersCreateInfoKHR ; typedef struct VkVideoEncodeH264SessionParametersGetInfoKHR { VkStructureType sType ; const void* pNext ; VkBool32 writeStdSPS ; VkBool32 writeStdPPS ; uint32_t stdSPSId ; uint32_t stdPPSId ; } VkVideoEncodeH264SessionParametersGetInfoKHR ; typedef struct VkVideoEncodeH264SessionParametersFeedbackInfoKHR { VkStructureType sType ; void* pNext ; VkBool32 hasStdSPSOverrides ; VkBool32 hasStdPPSOverrides ; } VkVideoEncodeH264SessionParametersFeedbackInfoKHR ; typedef struct VkVideoEncodeH264NaluSliceInfoKHR { VkStructureType sType ; const void* pNext ; int32_t constantQp ; const StdVideoEncodeH264SliceHeader* pStdSliceHeader ; } VkVideoEncodeH264NaluSliceInfoKHR ; typedef struct VkVideoEncodeH264PictureInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t naluSliceEntryCount ; const VkVideoEncodeH264NaluSliceInfoKHR* pNaluSliceEntries ; const StdVideoEncodeH264PictureInfo* pStdPictureInfo ; VkBool32 generatePrefixNalu ; } VkVideoEncodeH264PictureInfoKHR ; typedef struct VkVideoEncodeH264DpbSlotInfoKHR { VkStructureType sType ; const void* pNext ; const StdVideoEncodeH264ReferenceInfo* pStdReferenceInfo ; } VkVideoEncodeH264DpbSlotInfoKHR ; typedef struct VkVideoEncodeH264ProfileInfoKHR { VkStructureType sType ; const void* pNext ; StdVideoH264ProfileIdc stdProfileIdc ; } VkVideoEncodeH264ProfileInfoKHR ; typedef struct VkVideoEncodeH264RateControlInfoKHR { VkStructureType sType ; const void* pNext ; VkVideoEncodeH264RateControlFlagsKHR flags ; uint32_t gopFrameCount ; uint32_t idrPeriod ; uint32_t consecutiveBFrameCount ; uint32_t temporalLayerCount ; } VkVideoEncodeH264RateControlInfoKHR ; typedef struct VkVideoEncodeH264FrameSizeKHR { uint32_t frameISize ; uint32_t framePSize ; uint32_t frameBSize ; } VkVideoEncodeH264FrameSizeKHR ; typedef struct VkVideoEncodeH264RateControlLayerInfoKHR { VkStructureType sType ; const void* pNext ; VkBool32 useMinQp ; VkVideoEncodeH264QpKHR minQp ; VkBool32 useMaxQp ; VkVideoEncodeH264QpKHR maxQp ; VkBool32 useMaxFrameSize ; VkVideoEncodeH264FrameSizeKHR maxFrameSize ; } VkVideoEncodeH264RateControlLayerInfoKHR ; typedef struct VkVideoEncodeH264GopRemainingFrameInfoKHR { VkStructureType sType ; const void* pNext ; VkBool32 useGopRemainingFrames ; uint32_t gopRemainingI ; uint32_t gopRemainingP ; uint32_t gopRemainingB ; } VkVideoEncodeH264GopRemainingFrameInfoKHR ; # define VK_KHR_video_encode_h265 1 # include \" vk_video / vulkan_video_codec_h265std . h \" # include \" vk_video / vulkan_video_codec_h265std_encode . h \" # define VK_KHR_VIDEO_ENCODE_H265_SPEC_VERSION 1 4 # define VK_KHR_VIDEO_ENCODE_H265_EXTENSION_NAME \" VK_KHR_video_encode_h265 \" typedef enum VkVideoEncodeH265CapabilityFlagBitsKHR { VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 0 x00000001,VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 0 x00000002,VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR = 0 x00000004,VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR = 0 x00000008,VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 0 x00000010,VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 0 x00000020,VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 0 x00000040,VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR = 0 x00000080,VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR = 0 x00000100,VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR = 0 x00000200,VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoEncodeH265CapabilityFlagBitsKHR ; typedef VkFlags VkVideoEncodeH265CapabilityFlagsKHR ; typedef enum VkVideoEncodeH265StdFlagBitsKHR { VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 0 x00000001,VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR = 0 x00000002,VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR = 0 x00000004,VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR = 0 x00000008,VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR = 0 x00000010,VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR = 0 x00000020,VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 0 x00000040,VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR = 0 x00000080,VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR = 0 x00000100,VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR = 0 x00000200,VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR = 0 x00000400,VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR = 0 x00000800,VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR = 0 x00001000,VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR = 0 x00002000,VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 0 x00004000,VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR = 0 x00008000,VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR = 0 x00010000,VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR = 0 x00020000,VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR = 0 x00040000,VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR = 0 x00080000,VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 0 x00100000,VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoEncodeH265StdFlagBitsKHR ; typedef VkFlags VkVideoEncodeH265StdFlagsKHR ; typedef enum VkVideoEncodeH265CtbSizeFlagBitsKHR { VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR = 0 x00000001,VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR = 0 x00000002,VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR = 0 x00000004,VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoEncodeH265CtbSizeFlagBitsKHR ; typedef VkFlags VkVideoEncodeH265CtbSizeFlagsKHR ; typedef enum VkVideoEncodeH265TransformBlockSizeFlagBitsKHR { VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR = 0 x00000001,VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR = 0 x00000002,VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR = 0 x00000004,VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR = 0 x00000008,VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoEncodeH265TransformBlockSizeFlagBitsKHR ; typedef VkFlags VkVideoEncodeH265TransformBlockSizeFlagsKHR ; typedef enum VkVideoEncodeH265RateControlFlagBitsKHR { VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 0 x00000001,VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 0 x00000002,VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 0 x00000004,VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 0 x00000008,VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR = 0 x00000010,VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoEncodeH265RateControlFlagBitsKHR ; typedef VkFlags VkVideoEncodeH265RateControlFlagsKHR ; typedef struct VkVideoEncodeH265CapabilitiesKHR { VkStructureType sType ; void* pNext ; VkVideoEncodeH265CapabilityFlagsKHR flags ; StdVideoH265LevelIdc maxLevelIdc ; uint32_t maxSliceSegmentCount ; VkExtent2D maxTiles ; VkVideoEncodeH265CtbSizeFlagsKHR ctbSizes ; VkVideoEncodeH265TransformBlockSizeFlagsKHR transformBlockSizes ; uint32_t maxPPictureL0ReferenceCount ; uint32_t maxBPictureL0ReferenceCount ; uint32_t maxL1ReferenceCount ; uint32_t maxSubLayerCount ; VkBool32 expectDyadicTemporalSubLayerPattern ; int32_t minQp ; int32_t maxQp ; VkBool32 prefersGopRemainingFrames ; VkBool32 requiresGopRemainingFrames ; VkVideoEncodeH265StdFlagsKHR stdSyntaxFlags ; } VkVideoEncodeH265CapabilitiesKHR ; typedef struct VkVideoEncodeH265SessionCreateInfoKHR { VkStructureType sType ; const void* pNext ; VkBool32 useMaxLevelIdc ; StdVideoH265LevelIdc maxLevelIdc ; } VkVideoEncodeH265SessionCreateInfoKHR ; typedef struct VkVideoEncodeH265QpKHR { int32_t qpI ; int32_t qpP ; int32_t qpB ; } VkVideoEncodeH265QpKHR ; typedef struct VkVideoEncodeH265QualityLevelPropertiesKHR { VkStructureType sType ; void* pNext ; VkVideoEncodeH265RateControlFlagsKHR preferredRateControlFlags ; uint32_t preferredGopFrameCount ; uint32_t preferredIdrPeriod ; uint32_t preferredConsecutiveBFrameCount ; uint32_t preferredSubLayerCount ; VkVideoEncodeH265QpKHR preferredConstantQp ; uint32_t preferredMaxL0ReferenceCount ; uint32_t preferredMaxL1ReferenceCount ; } VkVideoEncodeH265QualityLevelPropertiesKHR ; typedef struct VkVideoEncodeH265SessionParametersAddInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t stdVPSCount ; const StdVideoH265VideoParameterSet* pStdVPSs ; uint32_t stdSPSCount ; const StdVideoH265SequenceParameterSet* pStdSPSs ; uint32_t stdPPSCount ; const StdVideoH265PictureParameterSet* pStdPPSs ; } VkVideoEncodeH265SessionParametersAddInfoKHR ; typedef struct VkVideoEncodeH265SessionParametersCreateInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t maxStdVPSCount ; uint32_t maxStdSPSCount ; uint32_t maxStdPPSCount ; const VkVideoEncodeH265SessionParametersAddInfoKHR* pParametersAddInfo ; } VkVideoEncodeH265SessionParametersCreateInfoKHR ; typedef struct VkVideoEncodeH265SessionParametersGetInfoKHR { VkStructureType sType ; const void* pNext ; VkBool32 writeStdVPS ; VkBool32 writeStdSPS ; VkBool32 writeStdPPS ; uint32_t stdVPSId ; uint32_t stdSPSId ; uint32_t stdPPSId ; } VkVideoEncodeH265SessionParametersGetInfoKHR ; typedef struct VkVideoEncodeH265SessionParametersFeedbackInfoKHR { VkStructureType sType ; void* pNext ; VkBool32 hasStdVPSOverrides ; VkBool32 hasStdSPSOverrides ; VkBool32 hasStdPPSOverrides ; } VkVideoEncodeH265SessionParametersFeedbackInfoKHR ; typedef struct VkVideoEncodeH265NaluSliceSegmentInfoKHR { VkStructureType sType ; const void* pNext ; int32_t constantQp ; const StdVideoEncodeH265SliceSegmentHeader* pStdSliceSegmentHeader ; } VkVideoEncodeH265NaluSliceSegmentInfoKHR ; typedef struct VkVideoEncodeH265PictureInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t naluSliceSegmentEntryCount ; const VkVideoEncodeH265NaluSliceSegmentInfoKHR* pNaluSliceSegmentEntries ; const StdVideoEncodeH265PictureInfo* pStdPictureInfo ; } VkVideoEncodeH265PictureInfoKHR ; typedef struct VkVideoEncodeH265DpbSlotInfoKHR { VkStructureType sType ; const void* pNext ; const StdVideoEncodeH265ReferenceInfo* pStdReferenceInfo ; } VkVideoEncodeH265DpbSlotInfoKHR ; typedef struct VkVideoEncodeH265ProfileInfoKHR { VkStructureType sType ; const void* pNext ; StdVideoH265ProfileIdc stdProfileIdc ; } VkVideoEncodeH265ProfileInfoKHR ; typedef struct VkVideoEncodeH265RateControlInfoKHR { VkStructureType sType ; const void* pNext ; VkVideoEncodeH265RateControlFlagsKHR flags ; uint32_t gopFrameCount ; uint32_t idrPeriod ; uint32_t consecutiveBFrameCount ; uint32_t subLayerCount ; } VkVideoEncodeH265RateControlInfoKHR ; typedef struct VkVideoEncodeH265FrameSizeKHR { uint32_t frameISize ; uint32_t framePSize ; uint32_t frameBSize ; } VkVideoEncodeH265FrameSizeKHR ; typedef struct VkVideoEncodeH265RateControlLayerInfoKHR { VkStructureType sType ; const void* pNext ; VkBool32 useMinQp ; VkVideoEncodeH265QpKHR minQp ; VkBool32 useMaxQp ; VkVideoEncodeH265QpKHR maxQp ; VkBool32 useMaxFrameSize ; VkVideoEncodeH265FrameSizeKHR maxFrameSize ; } VkVideoEncodeH265RateControlLayerInfoKHR ; typedef struct VkVideoEncodeH265GopRemainingFrameInfoKHR { VkStructureType sType ; const void* pNext ; VkBool32 useGopRemainingFrames ; uint32_t gopRemainingI ; uint32_t gopRemainingP ; uint32_t gopRemainingB ; } VkVideoEncodeH265GopRemainingFrameInfoKHR ; # define VK_KHR_video_decode_h264 1 # include \" vk_video / vulkan_video_codec_h264std_decode . h \" # define VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION 9 # define VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME \" VK_KHR_video_decode_h264 \" typedef enum VkVideoDecodeH264PictureLayoutFlagBitsKHR { VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = 0,VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR = 0 x00000001,VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR = 0 x00000002,VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoDecodeH264PictureLayoutFlagBitsKHR ; typedef VkFlags VkVideoDecodeH264PictureLayoutFlagsKHR ; typedef struct VkVideoDecodeH264ProfileInfoKHR { VkStructureType sType ; const void* pNext ; StdVideoH264ProfileIdc stdProfileIdc ; VkVideoDecodeH264PictureLayoutFlagBitsKHR pictureLayout ; } VkVideoDecodeH264ProfileInfoKHR ; typedef struct VkVideoDecodeH264CapabilitiesKHR { VkStructureType sType ; void* pNext ; StdVideoH264LevelIdc maxLevelIdc ; VkOffset2D fieldOffsetGranularity ; } VkVideoDecodeH264CapabilitiesKHR ; typedef struct VkVideoDecodeH264SessionParametersAddInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t stdSPSCount ; const StdVideoH264SequenceParameterSet* pStdSPSs ; uint32_t stdPPSCount ; const StdVideoH264PictureParameterSet* pStdPPSs ; } VkVideoDecodeH264SessionParametersAddInfoKHR ; typedef struct VkVideoDecodeH264SessionParametersCreateInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t maxStdSPSCount ; uint32_t maxStdPPSCount ; const VkVideoDecodeH264SessionParametersAddInfoKHR* pParametersAddInfo ; } VkVideoDecodeH264SessionParametersCreateInfoKHR ; typedef struct VkVideoDecodeH264PictureInfoKHR { VkStructureType sType ; const void* pNext ; const StdVideoDecodeH264PictureInfo* pStdPictureInfo ; uint32_t sliceCount ; const uint32_t* pSliceOffsets ; } VkVideoDecodeH264PictureInfoKHR ; typedef struct VkVideoDecodeH264DpbSlotInfoKHR { VkStructureType sType ; const void* pNext ; const StdVideoDecodeH264ReferenceInfo* pStdReferenceInfo ; } VkVideoDecodeH264DpbSlotInfoKHR ; # define VK_KHR_dynamic_rendering 1 # define VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION 1 # define VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME \" VK_KHR_dynamic_rendering \" typedef VkRenderingFlags VkRenderingFlagsKHR ; typedef VkRenderingFlagBits VkRenderingFlagBitsKHR ; typedef VkRenderingInfo VkRenderingInfoKHR ; typedef VkRenderingAttachmentInfo VkRenderingAttachmentInfoKHR ; typedef VkPipelineRenderingCreateInfo VkPipelineRenderingCreateInfoKHR ; typedef VkPhysicalDeviceDynamicRenderingFeatures VkPhysicalDeviceDynamicRenderingFeaturesKHR ; typedef VkCommandBufferInheritanceRenderingInfo VkCommandBufferInheritanceRenderingInfoKHR ; typedef struct VkRenderingFragmentShadingRateAttachmentInfoKHR { VkStructureType sType ; const void* pNext ; VkImageView imageView ; VkImageLayout imageLayout ; VkExtent2D shadingRateAttachmentTexelSize ; } VkRenderingFragmentShadingRateAttachmentInfoKHR ; typedef struct VkRenderingFragmentDensityMapAttachmentInfoEXT { VkStructureType sType ; const void* pNext ; VkImageView imageView ; VkImageLayout imageLayout ; } VkRenderingFragmentDensityMapAttachmentInfoEXT ; typedef struct VkAttachmentSampleCountInfoAMD { VkStructureType sType ; const void* pNext ; uint32_t colorAttachmentCount ; const VkSampleCountFlagBits* pColorAttachmentSamples ; VkSampleCountFlagBits depthStencilAttachmentSamples ; } VkAttachmentSampleCountInfoAMD ; typedef VkAttachmentSampleCountInfoAMD VkAttachmentSampleCountInfoNV ; typedef struct VkMultiviewPerViewAttributesInfoNVX { VkStructureType sType ; const void* pNext ; VkBool32 perViewAttributes ; VkBool32 perViewAttributesPositionXOnly ; } VkMultiviewPerViewAttributesInfoNVX ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBeginRenderingKHR)(VkCommandBuffer commandBuffer, const VkRenderingInfo* pRenderingInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdEndRenderingKHR)(VkCommandBuffer commandBuffer)"
  },
  {
    "label": "vkCmdBeginRenderingKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfo* pRenderingInfo)"
  },
  {
    "label": "vkCmdEndRenderingKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_multiview 1 # define VK_KHR_MULTIVIEW_SPEC_VERSION 1 # define VK_KHR_MULTIVIEW_EXTENSION_NAME \" VK_KHR_multiview \" typedef VkRenderPassMultiviewCreateInfo VkRenderPassMultiviewCreateInfoKHR ; typedef VkPhysicalDeviceMultiviewFeatures VkPhysicalDeviceMultiviewFeaturesKHR ; typedef VkPhysicalDeviceMultiviewProperties VkPhysicalDeviceMultiviewPropertiesKHR ; # define VK_KHR_get_physical_device_properties2 1 # define VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION 2 # define VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME \" VK_KHR_get_physical_device_properties2 \" typedef VkPhysicalDeviceFeatures2 VkPhysicalDeviceFeatures2KHR ; typedef VkPhysicalDeviceProperties2 VkPhysicalDeviceProperties2KHR ; typedef VkFormatProperties2 VkFormatProperties2KHR ; typedef VkImageFormatProperties2 VkImageFormatProperties2KHR ; typedef VkPhysicalDeviceImageFormatInfo2 VkPhysicalDeviceImageFormatInfo2KHR ; typedef VkQueueFamilyProperties2 VkQueueFamilyProperties2KHR ; typedef VkPhysicalDeviceMemoryProperties2 VkPhysicalDeviceMemoryProperties2KHR ; typedef VkSparseImageFormatProperties2 VkSparseImageFormatProperties2KHR ; typedef VkPhysicalDeviceSparseImageFormatInfo2 VkPhysicalDeviceSparseImageFormatInfo2KHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceFeatures2KHR)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceProperties2KHR)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceFormatProperties2KHR)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceImageFormatProperties2KHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR)(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceMemoryProperties2KHR)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceFeatures2KHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)"
  },
  {
    "label": "vkGetPhysicalDeviceProperties2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceFormatProperties2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceImageFormatProperties2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceQueueFamilyProperties2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceMemoryProperties2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceSparseImageFormatProperties2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_device_group 1 # define VK_KHR_DEVICE_GROUP_SPEC_VERSION 4 # define VK_KHR_DEVICE_GROUP_EXTENSION_NAME \" VK_KHR_device_group \" typedef VkPeerMemoryFeatureFlags VkPeerMemoryFeatureFlagsKHR ; typedef VkPeerMemoryFeatureFlagBits VkPeerMemoryFeatureFlagBitsKHR ; typedef VkMemoryAllocateFlags VkMemoryAllocateFlagsKHR ; typedef VkMemoryAllocateFlagBits VkMemoryAllocateFlagBitsKHR ; typedef VkMemoryAllocateFlagsInfo VkMemoryAllocateFlagsInfoKHR ; typedef VkDeviceGroupRenderPassBeginInfo VkDeviceGroupRenderPassBeginInfoKHR ; typedef VkDeviceGroupCommandBufferBeginInfo VkDeviceGroupCommandBufferBeginInfoKHR ; typedef VkDeviceGroupSubmitInfo VkDeviceGroupSubmitInfoKHR ; typedef VkDeviceGroupBindSparseInfo VkDeviceGroupBindSparseInfoKHR ; typedef VkBindBufferMemoryDeviceGroupInfo VkBindBufferMemoryDeviceGroupInfoKHR ; typedef VkBindImageMemoryDeviceGroupInfo VkBindImageMemoryDeviceGroupInfoKHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR)(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDeviceMaskKHR)(VkCommandBuffer commandBuffer, uint32_t deviceMask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDispatchBaseKHR)(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)"
  },
  {
    "label": "vkGetDeviceGroupPeerMemoryFeaturesKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)"
  },
  {
    "label": "vkCmdSetDeviceMaskKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask)"
  },
  {
    "label": "vkCmdDispatchBaseKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_shader_draw_parameters 1 # define VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION 1 # define VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME \" VK_KHR_shader_draw_parameters \" # define VK_KHR_maintenance1 1 # define VK_KHR_MAINTENANCE_1_SPEC_VERSION 2 # define VK_KHR_MAINTENANCE_1_EXTENSION_NAME \" VK_KHR_maintenance1 \" # define VK_KHR_MAINTENANCE1_SPEC_VERSION VK_KHR_MAINTENANCE_1_SPEC_VERSION # define VK_KHR_MAINTENANCE1_EXTENSION_NAME VK_KHR_MAINTENANCE_1_EXTENSION_NAME typedef VkCommandPoolTrimFlags VkCommandPoolTrimFlagsKHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkTrimCommandPoolKHR)(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)"
  },
  {
    "label": "vkTrimCommandPoolKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_device_group_creation 1 # define VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION 1 # define VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME \" VK_KHR_device_group_creation \" # define VK_MAX_DEVICE_GROUP_SIZE_KHR VK_MAX_DEVICE_GROUP_SIZE typedef VkPhysicalDeviceGroupProperties VkPhysicalDeviceGroupPropertiesKHR ; typedef VkDeviceGroupDeviceCreateInfo VkDeviceGroupDeviceCreateInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkEnumeratePhysicalDeviceGroupsKHR)(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)"
  },
  {
    "label": "vkEnumeratePhysicalDeviceGroupsKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkEnumeratePhysicalDeviceGroupsKHR(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_external_memory_capabilities 1 # define VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION 1 # define VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME \" VK_KHR_external_memory_capabilities \" # define VK_LUID_SIZE_KHR VK_LUID_SIZE typedef VkExternalMemoryHandleTypeFlags VkExternalMemoryHandleTypeFlagsKHR ; typedef VkExternalMemoryHandleTypeFlagBits VkExternalMemoryHandleTypeFlagBitsKHR ; typedef VkExternalMemoryFeatureFlags VkExternalMemoryFeatureFlagsKHR ; typedef VkExternalMemoryFeatureFlagBits VkExternalMemoryFeatureFlagBitsKHR ; typedef VkExternalMemoryProperties VkExternalMemoryPropertiesKHR ; typedef VkPhysicalDeviceExternalImageFormatInfo VkPhysicalDeviceExternalImageFormatInfoKHR ; typedef VkExternalImageFormatProperties VkExternalImageFormatPropertiesKHR ; typedef VkPhysicalDeviceExternalBufferInfo VkPhysicalDeviceExternalBufferInfoKHR ; typedef VkExternalBufferProperties VkExternalBufferPropertiesKHR ; typedef VkPhysicalDeviceIDProperties VkPhysicalDeviceIDPropertiesKHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceExternalBufferPropertiesKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_external_memory 1 # define VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION 1 # define VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME \" VK_KHR_external_memory \" # define VK_QUEUE_FAMILY_EXTERNAL_KHR VK_QUEUE_FAMILY_EXTERNAL typedef VkExternalMemoryImageCreateInfo VkExternalMemoryImageCreateInfoKHR ; typedef VkExternalMemoryBufferCreateInfo VkExternalMemoryBufferCreateInfoKHR ; typedef VkExportMemoryAllocateInfo VkExportMemoryAllocateInfoKHR ; # define VK_KHR_external_memory_fd 1 # define VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION 1 # define VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME \" VK_KHR_external_memory_fd \" typedef struct VkImportMemoryFdInfoKHR { VkStructureType sType ; const void* pNext ; VkExternalMemoryHandleTypeFlagBits handleType ; int fd ; } VkImportMemoryFdInfoKHR ; typedef struct VkMemoryFdPropertiesKHR { VkStructureType sType ; void* pNext ; uint32_t memoryTypeBits ; } VkMemoryFdPropertiesKHR ; typedef struct VkMemoryGetFdInfoKHR { VkStructureType sType ; const void* pNext ; VkDeviceMemory memory ; VkExternalMemoryHandleTypeFlagBits handleType ; } VkMemoryGetFdInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetMemoryFdKHR)(VkDevice device, const VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetMemoryFdPropertiesKHR)(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties)"
  },
  {
    "label": "vkGetMemoryFdKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetMemoryFdKHR(VkDevice device, const VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd)"
  },
  {
    "label": "vkGetMemoryFdPropertiesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_external_semaphore_capabilities 1 # define VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION 1 # define VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME \" VK_KHR_external_semaphore_capabilities \" typedef VkExternalSemaphoreHandleTypeFlags VkExternalSemaphoreHandleTypeFlagsKHR ; typedef VkExternalSemaphoreHandleTypeFlagBits VkExternalSemaphoreHandleTypeFlagBitsKHR ; typedef VkExternalSemaphoreFeatureFlags VkExternalSemaphoreFeatureFlagsKHR ; typedef VkExternalSemaphoreFeatureFlagBits VkExternalSemaphoreFeatureFlagBitsKHR ; typedef VkPhysicalDeviceExternalSemaphoreInfo VkPhysicalDeviceExternalSemaphoreInfoKHR ; typedef VkExternalSemaphoreProperties VkExternalSemaphorePropertiesKHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_external_semaphore 1 # define VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION 1 # define VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME \" VK_KHR_external_semaphore \" typedef VkSemaphoreImportFlags VkSemaphoreImportFlagsKHR ; typedef VkSemaphoreImportFlagBits VkSemaphoreImportFlagBitsKHR ; typedef VkExportSemaphoreCreateInfo VkExportSemaphoreCreateInfoKHR ; # define VK_KHR_external_semaphore_fd 1 # define VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION 1 # define VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME \" VK_KHR_external_semaphore_fd \" typedef struct VkImportSemaphoreFdInfoKHR { VkStructureType sType ; const void* pNext ; VkSemaphore semaphore ; VkSemaphoreImportFlags flags ; VkExternalSemaphoreHandleTypeFlagBits handleType ; int fd ; } VkImportSemaphoreFdInfoKHR ; typedef struct VkSemaphoreGetFdInfoKHR { VkStructureType sType ; const void* pNext ; VkSemaphore semaphore ; VkExternalSemaphoreHandleTypeFlagBits handleType ; } VkSemaphoreGetFdInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkImportSemaphoreFdKHR)(VkDevice device, const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetSemaphoreFdKHR)(VkDevice device, const VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd)"
  },
  {
    "label": "vkImportSemaphoreFdKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkImportSemaphoreFdKHR(VkDevice device, const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo)"
  },
  {
    "label": "vkGetSemaphoreFdKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetSemaphoreFdKHR(VkDevice device, const VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_push_descriptor 1 # define VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION 2 # define VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME \" VK_KHR_push_descriptor \" typedef struct VkPhysicalDevicePushDescriptorPropertiesKHR { VkStructureType sType ; void* pNext ; uint32_t maxPushDescriptors ; } VkPhysicalDevicePushDescriptorPropertiesKHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdPushDescriptorSetKHR)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdPushDescriptorSetWithTemplateKHR)(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void* pData)"
  },
  {
    "label": "vkCmdPushDescriptorSetKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites)"
  },
  {
    "label": "vkCmdPushDescriptorSetWithTemplateKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void* pData)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_shader_float16_int8 1 # define VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION 1 # define VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME \" VK_KHR_shader_float16_int8 \" typedef VkPhysicalDeviceShaderFloat16Int8Features VkPhysicalDeviceShaderFloat16Int8FeaturesKHR ; typedef VkPhysicalDeviceShaderFloat16Int8Features VkPhysicalDeviceFloat16Int8FeaturesKHR ; # define VK_KHR_16bit_storage 1 # define VK_KHR_16BIT_STORAGE_SPEC_VERSION 1 # define VK_KHR_16BIT_STORAGE_EXTENSION_NAME \" VK_KHR_16bit_storage \" typedef VkPhysicalDevice16BitStorageFeatures VkPhysicalDevice16BitStorageFeaturesKHR ; # define VK_KHR_incremental_present 1 # define VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION 2 # define VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME \" VK_KHR_incremental_present \" typedef struct VkRectLayerKHR { VkOffset2D offset ; VkExtent2D extent ; uint32_t layer ; } VkRectLayerKHR ; typedef struct VkPresentRegionKHR { uint32_t rectangleCount ; const VkRectLayerKHR* pRectangles ; } VkPresentRegionKHR ; typedef struct VkPresentRegionsKHR { VkStructureType sType ; const void* pNext ; uint32_t swapchainCount ; const VkPresentRegionKHR* pRegions ; } VkPresentRegionsKHR ; # define VK_KHR_descriptor_update_template 1 typedef VkDescriptorUpdateTemplate VkDescriptorUpdateTemplateKHR ; # define VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION 1 # define VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME \" VK_KHR_descriptor_update_template \" typedef VkDescriptorUpdateTemplateType VkDescriptorUpdateTemplateTypeKHR ; typedef VkDescriptorUpdateTemplateCreateFlags VkDescriptorUpdateTemplateCreateFlagsKHR ; typedef VkDescriptorUpdateTemplateEntry VkDescriptorUpdateTemplateEntryKHR ; typedef VkDescriptorUpdateTemplateCreateInfo VkDescriptorUpdateTemplateCreateInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateDescriptorUpdateTemplateKHR)(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyDescriptorUpdateTemplateKHR)(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkUpdateDescriptorSetWithTemplateKHR)(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void* pData)"
  },
  {
    "label": "vkCreateDescriptorUpdateTemplateKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateDescriptorUpdateTemplateKHR(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)"
  },
  {
    "label": "vkDestroyDescriptorUpdateTemplateKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkUpdateDescriptorSetWithTemplateKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void* pData)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_imageless_framebuffer 1 # define VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION 1 # define VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME \" VK_KHR_imageless_framebuffer \" typedef VkPhysicalDeviceImagelessFramebufferFeatures VkPhysicalDeviceImagelessFramebufferFeaturesKHR ; typedef VkFramebufferAttachmentsCreateInfo VkFramebufferAttachmentsCreateInfoKHR ; typedef VkFramebufferAttachmentImageInfo VkFramebufferAttachmentImageInfoKHR ; typedef VkRenderPassAttachmentBeginInfo VkRenderPassAttachmentBeginInfoKHR ; # define VK_KHR_create_renderpass2 1 # define VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION 1 # define VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME \" VK_KHR_create_renderpass2 \" typedef VkRenderPassCreateInfo2 VkRenderPassCreateInfo2KHR ; typedef VkAttachmentDescription2 VkAttachmentDescription2KHR ; typedef VkAttachmentReference2 VkAttachmentReference2KHR ; typedef VkSubpassDescription2 VkSubpassDescription2KHR ; typedef VkSubpassDependency2 VkSubpassDependency2KHR ; typedef VkSubpassBeginInfo VkSubpassBeginInfoKHR ; typedef VkSubpassEndInfo VkSubpassEndInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateRenderPass2KHR)(VkDevice device, const VkRenderPassCreateInfo2* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBeginRenderPass2KHR)(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdNextSubpass2KHR)(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdEndRenderPass2KHR)(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo)"
  },
  {
    "label": "vkCreateRenderPass2KHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateRenderPass2KHR(VkDevice device, const VkRenderPassCreateInfo2* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)"
  },
  {
    "label": "vkCmdBeginRenderPass2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo)"
  },
  {
    "label": "vkCmdNextSubpass2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo)"
  },
  {
    "label": "vkCmdEndRenderPass2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_shared_presentable_image 1 # define VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION 1 # define VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME \" VK_KHR_shared_presentable_image \" typedef struct VkSharedPresentSurfaceCapabilitiesKHR { VkStructureType sType ; void* pNext ; VkImageUsageFlags sharedPresentSupportedUsageFlags ; } VkSharedPresentSurfaceCapabilitiesKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetSwapchainStatusKHR)(VkDevice device, VkSwapchainKHR swapchain)"
  },
  {
    "label": "vkGetSwapchainStatusKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_external_fence_capabilities 1 # define VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION 1 # define VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME \" VK_KHR_external_fence_capabilities \" typedef VkExternalFenceHandleTypeFlags VkExternalFenceHandleTypeFlagsKHR ; typedef VkExternalFenceHandleTypeFlagBits VkExternalFenceHandleTypeFlagBitsKHR ; typedef VkExternalFenceFeatureFlags VkExternalFenceFeatureFlagsKHR ; typedef VkExternalFenceFeatureFlagBits VkExternalFenceFeatureFlagBitsKHR ; typedef VkPhysicalDeviceExternalFenceInfo VkPhysicalDeviceExternalFenceInfoKHR ; typedef VkExternalFenceProperties VkExternalFencePropertiesKHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceExternalFencePropertiesKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_external_fence 1 # define VK_KHR_EXTERNAL_FENCE_SPEC_VERSION 1 # define VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME \" VK_KHR_external_fence \" typedef VkFenceImportFlags VkFenceImportFlagsKHR ; typedef VkFenceImportFlagBits VkFenceImportFlagBitsKHR ; typedef VkExportFenceCreateInfo VkExportFenceCreateInfoKHR ; # define VK_KHR_external_fence_fd 1 # define VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION 1 # define VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME \" VK_KHR_external_fence_fd \" typedef struct VkImportFenceFdInfoKHR { VkStructureType sType ; const void* pNext ; VkFence fence ; VkFenceImportFlags flags ; VkExternalFenceHandleTypeFlagBits handleType ; int fd ; } VkImportFenceFdInfoKHR ; typedef struct VkFenceGetFdInfoKHR { VkStructureType sType ; const void* pNext ; VkFence fence ; VkExternalFenceHandleTypeFlagBits handleType ; } VkFenceGetFdInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkImportFenceFdKHR)(VkDevice device, const VkImportFenceFdInfoKHR* pImportFenceFdInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetFenceFdKHR)(VkDevice device, const VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd)"
  },
  {
    "label": "vkImportFenceFdKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkImportFenceFdKHR(VkDevice device, const VkImportFenceFdInfoKHR* pImportFenceFdInfo)"
  },
  {
    "label": "vkGetFenceFdKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetFenceFdKHR(VkDevice device, const VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_performance_query 1 # define VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION 1 # define VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME \" VK_KHR_performance_query \" typedef enum VkPerformanceCounterUnitKHR { VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0,VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1,VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2,VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3,VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4,VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5,VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6,VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7,VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8,VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9,VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 1 0,VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 0 x7FFFFFFF } VkPerformanceCounterUnitKHR ; typedef enum VkPerformanceCounterScopeKHR { VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0,VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1,VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2,VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR,VK_QUERY_SCOPE_RENDER_PASS_KHR = VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR,VK_QUERY_SCOPE_COMMAND_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR,VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 0 x7FFFFFFF } VkPerformanceCounterScopeKHR ; typedef enum VkPerformanceCounterStorageKHR { VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0,VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1,VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2,VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3,VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4,VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5,VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 0 x7FFFFFFF } VkPerformanceCounterStorageKHR ; typedef enum VkPerformanceCounterDescriptionFlagBitsKHR { VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 0 x00000001,VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 0 x00000002,VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR,VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR,VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkPerformanceCounterDescriptionFlagBitsKHR ; typedef VkFlags VkPerformanceCounterDescriptionFlagsKHR ; typedef enum VkAcquireProfilingLockFlagBitsKHR { VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkAcquireProfilingLockFlagBitsKHR ; typedef VkFlags VkAcquireProfilingLockFlagsKHR ; typedef struct VkPhysicalDevicePerformanceQueryFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 performanceCounterQueryPools ; VkBool32 performanceCounterMultipleQueryPools ; } VkPhysicalDevicePerformanceQueryFeaturesKHR ; typedef struct VkPhysicalDevicePerformanceQueryPropertiesKHR { VkStructureType sType ; void* pNext ; VkBool32 allowCommandBufferQueryCopies ; } VkPhysicalDevicePerformanceQueryPropertiesKHR ; typedef struct VkPerformanceCounterKHR { VkStructureType sType ; void* pNext ; VkPerformanceCounterUnitKHR unit ; VkPerformanceCounterScopeKHR scope ; VkPerformanceCounterStorageKHR storage ; uint8_t uuid [ VK_UUID_SIZE ] ; } VkPerformanceCounterKHR ; typedef struct VkPerformanceCounterDescriptionKHR { VkStructureType sType ; void* pNext ; VkPerformanceCounterDescriptionFlagsKHR flags ; char name [ VK_MAX_DESCRIPTION_SIZE ] ; char category [ VK_MAX_DESCRIPTION_SIZE ] ; char description [ VK_MAX_DESCRIPTION_SIZE ] ; } VkPerformanceCounterDescriptionKHR ; typedef struct VkQueryPoolPerformanceCreateInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t queueFamilyIndex ; uint32_t counterIndexCount ; const uint32_t* pCounterIndices ; } VkQueryPoolPerformanceCreateInfoKHR ; typedef union VkPerformanceCounterResultKHR { int32_t int32 ; int64_t int64 ; uint32_t uint32 ; uint64_t uint64 ; float float32 ; double float64 ; } VkPerformanceCounterResultKHR ; typedef struct VkAcquireProfilingLockInfoKHR { VkStructureType sType ; const void* pNext ; VkAcquireProfilingLockFlagsKHR flags ; uint64_t timeout ; } VkAcquireProfilingLockInfoKHR ; typedef struct VkPerformanceQuerySubmitInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t counterPassIndex ; } VkPerformanceQuerySubmitInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t* pCounterCount, VkPerformanceCounterKHR* pCounters, VkPerformanceCounterDescriptionKHR* pCounterDescriptions)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR)(VkPhysicalDevice physicalDevice, const VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, uint32_t* pNumPasses)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkAcquireProfilingLockKHR)(VkDevice device, const VkAcquireProfilingLockInfoKHR* pInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkReleaseProfilingLockKHR)(VkDevice device)"
  },
  {
    "label": "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t* pCounterCount, VkPerformanceCounterKHR* pCounters, VkPerformanceCounterDescriptionKHR* pCounterDescriptions)"
  },
  {
    "label": "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, const VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, uint32_t* pNumPasses)"
  },
  {
    "label": "vkAcquireProfilingLockKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkAcquireProfilingLockKHR(VkDevice device, const VkAcquireProfilingLockInfoKHR* pInfo)"
  },
  {
    "label": "vkReleaseProfilingLockKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkReleaseProfilingLockKHR(VkDevice device)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_maintenance2 1 # define VK_KHR_MAINTENANCE_2_SPEC_VERSION 1 # define VK_KHR_MAINTENANCE_2_EXTENSION_NAME \" VK_KHR_maintenance2 \" # define VK_KHR_MAINTENANCE2_SPEC_VERSION VK_KHR_MAINTENANCE_2_SPEC_VERSION # define VK_KHR_MAINTENANCE2_EXTENSION_NAME VK_KHR_MAINTENANCE_2_EXTENSION_NAME typedef VkPointClippingBehavior VkPointClippingBehaviorKHR ; typedef VkTessellationDomainOrigin VkTessellationDomainOriginKHR ; typedef VkPhysicalDevicePointClippingProperties VkPhysicalDevicePointClippingPropertiesKHR ; typedef VkRenderPassInputAttachmentAspectCreateInfo VkRenderPassInputAttachmentAspectCreateInfoKHR ; typedef VkInputAttachmentAspectReference VkInputAttachmentAspectReferenceKHR ; typedef VkImageViewUsageCreateInfo VkImageViewUsageCreateInfoKHR ; typedef VkPipelineTessellationDomainOriginStateCreateInfo VkPipelineTessellationDomainOriginStateCreateInfoKHR ; # define VK_KHR_get_surface_capabilities2 1 # define VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION 1 # define VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME \" VK_KHR_get_surface_capabilities2 \" typedef struct VkPhysicalDeviceSurfaceInfo2KHR { VkStructureType sType ; const void* pNext ; VkSurfaceKHR surface ; } VkPhysicalDeviceSurfaceInfo2KHR ; typedef struct VkSurfaceCapabilities2KHR { VkStructureType sType ; void* pNext ; VkSurfaceCapabilitiesKHR surfaceCapabilities ; } VkSurfaceCapabilities2KHR ; typedef struct VkSurfaceFormat2KHR { VkStructureType sType ; void* pNext ; VkSurfaceFormatKHR surfaceFormat ; } VkSurfaceFormat2KHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceFormats2KHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats)"
  },
  {
    "label": "vkGetPhysicalDeviceSurfaceCapabilities2KHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities)"
  },
  {
    "label": "vkGetPhysicalDeviceSurfaceFormats2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_variable_pointers 1 # define VK_KHR_VARIABLE_POINTERS_SPEC_VERSION 1 # define VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME \" VK_KHR_variable_pointers \" typedef VkPhysicalDeviceVariablePointersFeatures VkPhysicalDeviceVariablePointerFeaturesKHR ; typedef VkPhysicalDeviceVariablePointersFeatures VkPhysicalDeviceVariablePointersFeaturesKHR ; # define VK_KHR_get_display_properties2 1 # define VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION 1 # define VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME \" VK_KHR_get_display_properties2 \" typedef struct VkDisplayProperties2KHR { VkStructureType sType ; void* pNext ; VkDisplayPropertiesKHR displayProperties ; } VkDisplayProperties2KHR ; typedef struct VkDisplayPlaneProperties2KHR { VkStructureType sType ; void* pNext ; VkDisplayPlanePropertiesKHR displayPlaneProperties ; } VkDisplayPlaneProperties2KHR ; typedef struct VkDisplayModeProperties2KHR { VkStructureType sType ; void* pNext ; VkDisplayModePropertiesKHR displayModeProperties ; } VkDisplayModeProperties2KHR ; typedef struct VkDisplayPlaneInfo2KHR { VkStructureType sType ; const void* pNext ; VkDisplayModeKHR mode ; uint32_t planeIndex ; } VkDisplayPlaneInfo2KHR ; typedef struct VkDisplayPlaneCapabilities2KHR { VkStructureType sType ; void* pNext ; VkDisplayPlaneCapabilitiesKHR capabilities ; } VkDisplayPlaneCapabilities2KHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceDisplayProperties2KHR)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayProperties2KHR* pProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetDisplayModeProperties2KHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModeProperties2KHR* pProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetDisplayPlaneCapabilities2KHR)(VkPhysicalDevice physicalDevice, const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities)"
  },
  {
    "label": "vkGetPhysicalDeviceDisplayProperties2KHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayProperties2KHR* pProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceDisplayPlaneProperties2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties)"
  },
  {
    "label": "vkGetDisplayModeProperties2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModeProperties2KHR* pProperties)"
  },
  {
    "label": "vkGetDisplayPlaneCapabilities2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_dedicated_allocation 1 # define VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION 3 # define VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME \" VK_KHR_dedicated_allocation \" typedef VkMemoryDedicatedRequirements VkMemoryDedicatedRequirementsKHR ; typedef VkMemoryDedicatedAllocateInfo VkMemoryDedicatedAllocateInfoKHR ; # define VK_KHR_storage_buffer_storage_class 1 # define VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION 1 # define VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME \" VK_KHR_storage_buffer_storage_class \" # define VK_KHR_relaxed_block_layout 1 # define VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION 1 # define VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME \" VK_KHR_relaxed_block_layout \" # define VK_KHR_get_memory_requirements2 1 # define VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION 1 # define VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME \" VK_KHR_get_memory_requirements2 \" typedef VkBufferMemoryRequirementsInfo2 VkBufferMemoryRequirementsInfo2KHR ; typedef VkImageMemoryRequirementsInfo2 VkImageMemoryRequirementsInfo2KHR ; typedef VkImageSparseMemoryRequirementsInfo2 VkImageSparseMemoryRequirementsInfo2KHR ; typedef VkMemoryRequirements2 VkMemoryRequirements2KHR ; typedef VkSparseImageMemoryRequirements2 VkSparseImageMemoryRequirements2KHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetImageMemoryRequirements2KHR)(VkDevice device, const VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetBufferMemoryRequirements2KHR)(VkDevice device, const VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetImageSparseMemoryRequirements2KHR)(VkDevice device, const VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)"
  },
  {
    "label": "vkGetImageMemoryRequirements2KHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetImageMemoryRequirements2KHR(VkDevice device, const VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "vkGetBufferMemoryRequirements2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetBufferMemoryRequirements2KHR(VkDevice device, const VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "vkGetImageSparseMemoryRequirements2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetImageSparseMemoryRequirements2KHR(VkDevice device, const VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_image_format_list 1 # define VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION 1 # define VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME \" VK_KHR_image_format_list \" typedef VkImageFormatListCreateInfo VkImageFormatListCreateInfoKHR ; # define VK_KHR_sampler_ycbcr_conversion 1 typedef VkSamplerYcbcrConversion VkSamplerYcbcrConversionKHR ; # define VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION 1 4 # define VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME \" VK_KHR_sampler_ycbcr_conversion \" typedef VkSamplerYcbcrModelConversion VkSamplerYcbcrModelConversionKHR ; typedef VkSamplerYcbcrRange VkSamplerYcbcrRangeKHR ; typedef VkChromaLocation VkChromaLocationKHR ; typedef VkSamplerYcbcrConversionCreateInfo VkSamplerYcbcrConversionCreateInfoKHR ; typedef VkSamplerYcbcrConversionInfo VkSamplerYcbcrConversionInfoKHR ; typedef VkBindImagePlaneMemoryInfo VkBindImagePlaneMemoryInfoKHR ; typedef VkImagePlaneMemoryRequirementsInfo VkImagePlaneMemoryRequirementsInfoKHR ; typedef VkPhysicalDeviceSamplerYcbcrConversionFeatures VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR ; typedef VkSamplerYcbcrConversionImageFormatProperties VkSamplerYcbcrConversionImageFormatPropertiesKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateSamplerYcbcrConversionKHR)(VkDevice device, const VkSamplerYcbcrConversionCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroySamplerYcbcrConversionKHR)(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCreateSamplerYcbcrConversionKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateSamplerYcbcrConversionKHR(VkDevice device, const VkSamplerYcbcrConversionCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)"
  },
  {
    "label": "vkDestroySamplerYcbcrConversionKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_bind_memory2 1 # define VK_KHR_BIND_MEMORY_2_SPEC_VERSION 1 # define VK_KHR_BIND_MEMORY_2_EXTENSION_NAME \" VK_KHR_bind_memory2 \" typedef VkBindBufferMemoryInfo VkBindBufferMemoryInfoKHR ; typedef VkBindImageMemoryInfo VkBindImageMemoryInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkBindBufferMemory2KHR)(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo* pBindInfos)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkBindImageMemory2KHR)(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo* pBindInfos)"
  },
  {
    "label": "vkBindBufferMemory2KHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkBindBufferMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo* pBindInfos)"
  },
  {
    "label": "vkBindImageMemory2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkBindImageMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo* pBindInfos)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_maintenance3 1 # define VK_KHR_MAINTENANCE_3_SPEC_VERSION 1 # define VK_KHR_MAINTENANCE_3_EXTENSION_NAME \" VK_KHR_maintenance3 \" # define VK_KHR_MAINTENANCE3_SPEC_VERSION VK_KHR_MAINTENANCE_3_SPEC_VERSION # define VK_KHR_MAINTENANCE3_EXTENSION_NAME VK_KHR_MAINTENANCE_3_EXTENSION_NAME typedef VkPhysicalDeviceMaintenance3Properties VkPhysicalDeviceMaintenance3PropertiesKHR ; typedef VkDescriptorSetLayoutSupport VkDescriptorSetLayoutSupportKHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDescriptorSetLayoutSupportKHR)(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)"
  },
  {
    "label": "vkGetDescriptorSetLayoutSupportKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDescriptorSetLayoutSupportKHR(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_draw_indirect_count 1 # define VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION 1 # define VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME \" VK_KHR_draw_indirect_count \" typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawIndirectCountKHR)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawIndexedIndirectCountKHR)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)"
  },
  {
    "label": "vkCmdDrawIndirectCountKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)"
  },
  {
    "label": "vkCmdDrawIndexedIndirectCountKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_shader_subgroup_extended_types 1 # define VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION 1 # define VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME \" VK_KHR_shader_subgroup_extended_types \" typedef VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR ; # define VK_KHR_8bit_storage 1 # define VK_KHR_8BIT_STORAGE_SPEC_VERSION 1 # define VK_KHR_8BIT_STORAGE_EXTENSION_NAME \" VK_KHR_8bit_storage \" typedef VkPhysicalDevice8BitStorageFeatures VkPhysicalDevice8BitStorageFeaturesKHR ; # define VK_KHR_shader_atomic_int64 1 # define VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION 1 # define VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME \" VK_KHR_shader_atomic_int64 \" typedef VkPhysicalDeviceShaderAtomicInt64Features VkPhysicalDeviceShaderAtomicInt64FeaturesKHR ; # define VK_KHR_shader_clock 1 # define VK_KHR_SHADER_CLOCK_SPEC_VERSION 1 # define VK_KHR_SHADER_CLOCK_EXTENSION_NAME \" VK_KHR_shader_clock \" typedef struct VkPhysicalDeviceShaderClockFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 shaderSubgroupClock ; VkBool32 shaderDeviceClock ; } VkPhysicalDeviceShaderClockFeaturesKHR ; # define VK_KHR_video_decode_h265 1 # include \" vk_video / vulkan_video_codec_h265std_decode . h \" # define VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION 8 # define VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME \" VK_KHR_video_decode_h265 \" typedef struct VkVideoDecodeH265ProfileInfoKHR { VkStructureType sType ; const void* pNext ; StdVideoH265ProfileIdc stdProfileIdc ; } VkVideoDecodeH265ProfileInfoKHR ; typedef struct VkVideoDecodeH265CapabilitiesKHR { VkStructureType sType ; void* pNext ; StdVideoH265LevelIdc maxLevelIdc ; } VkVideoDecodeH265CapabilitiesKHR ; typedef struct VkVideoDecodeH265SessionParametersAddInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t stdVPSCount ; const StdVideoH265VideoParameterSet* pStdVPSs ; uint32_t stdSPSCount ; const StdVideoH265SequenceParameterSet* pStdSPSs ; uint32_t stdPPSCount ; const StdVideoH265PictureParameterSet* pStdPPSs ; } VkVideoDecodeH265SessionParametersAddInfoKHR ; typedef struct VkVideoDecodeH265SessionParametersCreateInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t maxStdVPSCount ; uint32_t maxStdSPSCount ; uint32_t maxStdPPSCount ; const VkVideoDecodeH265SessionParametersAddInfoKHR* pParametersAddInfo ; } VkVideoDecodeH265SessionParametersCreateInfoKHR ; typedef struct VkVideoDecodeH265PictureInfoKHR { VkStructureType sType ; const void* pNext ; const StdVideoDecodeH265PictureInfo* pStdPictureInfo ; uint32_t sliceSegmentCount ; const uint32_t* pSliceSegmentOffsets ; } VkVideoDecodeH265PictureInfoKHR ; typedef struct VkVideoDecodeH265DpbSlotInfoKHR { VkStructureType sType ; const void* pNext ; const StdVideoDecodeH265ReferenceInfo* pStdReferenceInfo ; } VkVideoDecodeH265DpbSlotInfoKHR ; # define VK_KHR_global_priority 1 # define VK_MAX_GLOBAL_PRIORITY_SIZE_KHR 1 6 U # define VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION 1 # define VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME \" VK_KHR_global_priority \" typedef enum VkQueueGlobalPriorityKHR { VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = 1 2 8,VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 2 5 6,VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 5 1 2,VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1 0 2 4,VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR,VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR,VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR,VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR,VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR = 0 x7FFFFFFF } VkQueueGlobalPriorityKHR ; typedef struct VkDeviceQueueGlobalPriorityCreateInfoKHR { VkStructureType sType ; const void* pNext ; VkQueueGlobalPriorityKHR globalPriority ; } VkDeviceQueueGlobalPriorityCreateInfoKHR ; typedef struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 globalPriorityQuery ; } VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR ; typedef struct VkQueueFamilyGlobalPriorityPropertiesKHR { VkStructureType sType ; void* pNext ; uint32_t priorityCount ; VkQueueGlobalPriorityKHR priorities [ VK_MAX_GLOBAL_PRIORITY_SIZE_KHR ] ; } VkQueueFamilyGlobalPriorityPropertiesKHR ; # define VK_KHR_driver_properties 1 # define VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION 1 # define VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME \" VK_KHR_driver_properties \" # define VK_MAX_DRIVER_NAME_SIZE_KHR VK_MAX_DRIVER_NAME_SIZE # define VK_MAX_DRIVER_INFO_SIZE_KHR VK_MAX_DRIVER_INFO_SIZE typedef VkDriverId VkDriverIdKHR ; typedef VkConformanceVersion VkConformanceVersionKHR ; typedef VkPhysicalDeviceDriverProperties VkPhysicalDeviceDriverPropertiesKHR ; # define VK_KHR_shader_float_controls 1 # define VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION 4 # define VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME \" VK_KHR_shader_float_controls \" typedef VkShaderFloatControlsIndependence VkShaderFloatControlsIndependenceKHR ; typedef VkPhysicalDeviceFloatControlsProperties VkPhysicalDeviceFloatControlsPropertiesKHR ; # define VK_KHR_depth_stencil_resolve 1 # define VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION 1 # define VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME \" VK_KHR_depth_stencil_resolve \" typedef VkResolveModeFlagBits VkResolveModeFlagBitsKHR ; typedef VkResolveModeFlags VkResolveModeFlagsKHR ; typedef VkSubpassDescriptionDepthStencilResolve VkSubpassDescriptionDepthStencilResolveKHR ; typedef VkPhysicalDeviceDepthStencilResolveProperties VkPhysicalDeviceDepthStencilResolvePropertiesKHR ; # define VK_KHR_swapchain_mutable_format 1 # define VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION 1 # define VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME \" VK_KHR_swapchain_mutable_format \" # define VK_KHR_timeline_semaphore 1 # define VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION 2 # define VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME \" VK_KHR_timeline_semaphore \" typedef VkSemaphoreType VkSemaphoreTypeKHR ; typedef VkSemaphoreWaitFlagBits VkSemaphoreWaitFlagBitsKHR ; typedef VkSemaphoreWaitFlags VkSemaphoreWaitFlagsKHR ; typedef VkPhysicalDeviceTimelineSemaphoreFeatures VkPhysicalDeviceTimelineSemaphoreFeaturesKHR ; typedef VkPhysicalDeviceTimelineSemaphoreProperties VkPhysicalDeviceTimelineSemaphorePropertiesKHR ; typedef VkSemaphoreTypeCreateInfo VkSemaphoreTypeCreateInfoKHR ; typedef VkTimelineSemaphoreSubmitInfo VkTimelineSemaphoreSubmitInfoKHR ; typedef VkSemaphoreWaitInfo VkSemaphoreWaitInfoKHR ; typedef VkSemaphoreSignalInfo VkSemaphoreSignalInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetSemaphoreCounterValueKHR)(VkDevice device, VkSemaphore semaphore, uint64_t* pValue)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkWaitSemaphoresKHR)(VkDevice device, const VkSemaphoreWaitInfo* pWaitInfo, uint64_t timeout)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkSignalSemaphoreKHR)(VkDevice device, const VkSemaphoreSignalInfo* pSignalInfo)"
  },
  {
    "label": "vkGetSemaphoreCounterValueKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, uint64_t* pValue)"
  },
  {
    "label": "vkWaitSemaphoresKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkWaitSemaphoresKHR(VkDevice device, const VkSemaphoreWaitInfo* pWaitInfo, uint64_t timeout)"
  },
  {
    "label": "vkSignalSemaphoreKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkSignalSemaphoreKHR(VkDevice device, const VkSemaphoreSignalInfo* pSignalInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_vulkan_memory_model 1 # define VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION 3 # define VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME \" VK_KHR_vulkan_memory_model \" typedef VkPhysicalDeviceVulkanMemoryModelFeatures VkPhysicalDeviceVulkanMemoryModelFeaturesKHR ; # define VK_KHR_shader_terminate_invocation 1 # define VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION 1 # define VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME \" VK_KHR_shader_terminate_invocation \" typedef VkPhysicalDeviceShaderTerminateInvocationFeatures VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR ; # define VK_KHR_fragment_shading_rate 1 # define VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION 2 # define VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME \" VK_KHR_fragment_shading_rate \" typedef enum VkFragmentShadingRateCombinerOpKHR { VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0,VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1,VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2,VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3,VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4,VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = 0 x7FFFFFFF } VkFragmentShadingRateCombinerOpKHR ; typedef struct VkFragmentShadingRateAttachmentInfoKHR { VkStructureType sType ; const void* pNext ; const VkAttachmentReference2* pFragmentShadingRateAttachment ; VkExtent2D shadingRateAttachmentTexelSize ; } VkFragmentShadingRateAttachmentInfoKHR ; typedef struct VkPipelineFragmentShadingRateStateCreateInfoKHR { VkStructureType sType ; const void* pNext ; VkExtent2D fragmentSize ; VkFragmentShadingRateCombinerOpKHR combinerOps [ 2 ] ; } VkPipelineFragmentShadingRateStateCreateInfoKHR ; typedef struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 pipelineFragmentShadingRate ; VkBool32 primitiveFragmentShadingRate ; VkBool32 attachmentFragmentShadingRate ; } VkPhysicalDeviceFragmentShadingRateFeaturesKHR ; typedef struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR { VkStructureType sType ; void* pNext ; VkExtent2D minFragmentShadingRateAttachmentTexelSize ; VkExtent2D maxFragmentShadingRateAttachmentTexelSize ; uint32_t maxFragmentShadingRateAttachmentTexelSizeAspectRatio ; VkBool32 primitiveFragmentShadingRateWithMultipleViewports ; VkBool32 layeredShadingRateAttachments ; VkBool32 fragmentShadingRateNonTrivialCombinerOps ; VkExtent2D maxFragmentSize ; uint32_t maxFragmentSizeAspectRatio ; uint32_t maxFragmentShadingRateCoverageSamples ; VkSampleCountFlagBits maxFragmentShadingRateRasterizationSamples ; VkBool32 fragmentShadingRateWithShaderDepthStencilWrites ; VkBool32 fragmentShadingRateWithSampleMask ; VkBool32 fragmentShadingRateWithShaderSampleMask ; VkBool32 fragmentShadingRateWithConservativeRasterization ; VkBool32 fragmentShadingRateWithFragmentShaderInterlock ; VkBool32 fragmentShadingRateWithCustomSampleLocations ; VkBool32 fragmentShadingRateStrictMultiplyCombiner ; } VkPhysicalDeviceFragmentShadingRatePropertiesKHR ; typedef struct VkPhysicalDeviceFragmentShadingRateKHR { VkStructureType sType ; void* pNext ; VkSampleCountFlags sampleCounts ; VkExtent2D fragmentSize ; } VkPhysicalDeviceFragmentShadingRateKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR)(VkPhysicalDevice physicalDevice, uint32_t* pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetFragmentShadingRateKHR)(VkCommandBuffer commandBuffer, const VkExtent2D* pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps[2])"
  },
  {
    "label": "vkGetPhysicalDeviceFragmentShadingRatesKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice, uint32_t* pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates)"
  },
  {
    "label": "vkCmdSetFragmentShadingRateKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D* pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps[2])"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_dynamic_rendering_local_read 1 # define VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_SPEC_VERSION 1 # define VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_EXTENSION_NAME \" VK_KHR_dynamic_rendering_local_read \" typedef struct VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 dynamicRenderingLocalRead ; } VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR ; typedef struct VkRenderingAttachmentLocationInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t colorAttachmentCount ; const uint32_t* pColorAttachmentLocations ; } VkRenderingAttachmentLocationInfoKHR ; typedef struct VkRenderingInputAttachmentIndexInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t colorAttachmentCount ; const uint32_t* pColorAttachmentInputIndices ; const uint32_t* pDepthInputAttachmentIndex ; const uint32_t* pStencilInputAttachmentIndex ; } VkRenderingInputAttachmentIndexInfoKHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetRenderingAttachmentLocationsKHR)(VkCommandBuffer commandBuffer, const VkRenderingAttachmentLocationInfoKHR* pLocationInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetRenderingInputAttachmentIndicesKHR)(VkCommandBuffer commandBuffer, const VkRenderingInputAttachmentIndexInfoKHR* pInputAttachmentIndexInfo)"
  },
  {
    "label": "vkCmdSetRenderingAttachmentLocationsKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetRenderingAttachmentLocationsKHR(VkCommandBuffer commandBuffer, const VkRenderingAttachmentLocationInfoKHR* pLocationInfo)"
  },
  {
    "label": "vkCmdSetRenderingInputAttachmentIndicesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetRenderingInputAttachmentIndicesKHR(VkCommandBuffer commandBuffer, const VkRenderingInputAttachmentIndexInfoKHR* pInputAttachmentIndexInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_shader_quad_control 1 # define VK_KHR_SHADER_QUAD_CONTROL_SPEC_VERSION 1 # define VK_KHR_SHADER_QUAD_CONTROL_EXTENSION_NAME \" VK_KHR_shader_quad_control \" typedef struct VkPhysicalDeviceShaderQuadControlFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 shaderQuadControl ; } VkPhysicalDeviceShaderQuadControlFeaturesKHR ; # define VK_KHR_spirv_1_4 1 # define VK_KHR_SPIRV_1_4_SPEC_VERSION 1 # define VK_KHR_SPIRV_1_4_EXTENSION_NAME \" VK_KHR_spirv_1_4 \" # define VK_KHR_surface_protected_capabilities 1 # define VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION 1 # define VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME \" VK_KHR_surface_protected_capabilities \" typedef struct VkSurfaceProtectedCapabilitiesKHR { VkStructureType sType ; const void* pNext ; VkBool32 supportsProtected ; } VkSurfaceProtectedCapabilitiesKHR ; # define VK_KHR_separate_depth_stencil_layouts 1 # define VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION 1 # define VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME \" VK_KHR_separate_depth_stencil_layouts \" typedef VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR ; typedef VkAttachmentReferenceStencilLayout VkAttachmentReferenceStencilLayoutKHR ; typedef VkAttachmentDescriptionStencilLayout VkAttachmentDescriptionStencilLayoutKHR ; # define VK_KHR_present_wait 1 # define VK_KHR_PRESENT_WAIT_SPEC_VERSION 1 # define VK_KHR_PRESENT_WAIT_EXTENSION_NAME \" VK_KHR_present_wait \" typedef struct VkPhysicalDevicePresentWaitFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 presentWait ; } VkPhysicalDevicePresentWaitFeaturesKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkWaitForPresentKHR)(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout)"
  },
  {
    "label": "vkWaitForPresentKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkWaitForPresentKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout)"
  },
  {
    "label": "VkDeviceAddress()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_uniform_buffer_standard_layout 1 # define VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION 1 # define VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME \" VK_KHR_uniform_buffer_standard_layout \" typedef VkPhysicalDeviceUniformBufferStandardLayoutFeatures VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR ; # define VK_KHR_buffer_device_address 1 # define VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION 1 # define VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME \" VK_KHR_buffer_device_address \" typedef VkPhysicalDeviceBufferDeviceAddressFeatures VkPhysicalDeviceBufferDeviceAddressFeaturesKHR ; typedef VkBufferDeviceAddressInfo VkBufferDeviceAddressInfoKHR ; typedef VkBufferOpaqueCaptureAddressCreateInfo VkBufferOpaqueCaptureAddressCreateInfoKHR ; typedef VkMemoryOpaqueCaptureAddressAllocateInfo VkMemoryOpaqueCaptureAddressAllocateInfoKHR ; typedef VkDeviceMemoryOpaqueCaptureAddressInfo VkDeviceMemoryOpaqueCaptureAddressInfoKHR ; typedef)",
    "insertText": "VkDeviceAddress(VKAPI_PTR *PFN_vkGetBufferDeviceAddressKHR)(VkDevice device, const VkBufferDeviceAddressInfo* pInfo)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "uint64_t(VKAPI_PTR *PFN_vkGetBufferOpaqueCaptureAddressKHR)(VkDevice device, const VkBufferDeviceAddressInfo* pInfo)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "uint64_t(VKAPI_PTR *PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR)(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)"
  },
  {
    "label": "vkGetBufferDeviceAddressKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkDeviceAddress VKAPI_CALL)",
    "insertText": "vkGetBufferDeviceAddressKHR(VkDevice device, const VkBufferDeviceAddressInfo* pInfo)"
  },
  {
    "label": "vkGetBufferOpaqueCaptureAddressKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR uint64_t VKAPI_CALL)",
    "insertText": "vkGetBufferOpaqueCaptureAddressKHR(VkDevice device, const VkBufferDeviceAddressInfo* pInfo)"
  },
  {
    "label": "vkGetDeviceMemoryOpaqueCaptureAddressKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR uint64_t VKAPI_CALL)",
    "insertText": "vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_deferred_host_operations 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDeferredOperationKHR) #define VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION 4 #define VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME \"VK_KHR_deferred_host_operations\" typedef VkResult (VKAPI_PTR *PFN_vkCreateDeferredOperationKHR)(VkDevice device, const VkAllocationCallbacks* pAllocator, VkDeferredOperationKHR* pDeferredOperation)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyDeferredOperationKHR)(VkDevice device, VkDeferredOperationKHR operation, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "uint32_t(VKAPI_PTR *PFN_vkGetDeferredOperationMaxConcurrencyKHR)(VkDevice device, VkDeferredOperationKHR operation)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetDeferredOperationResultKHR)(VkDevice device, VkDeferredOperationKHR operation)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkDeferredOperationJoinKHR)(VkDevice device, VkDeferredOperationKHR operation)"
  },
  {
    "label": "vkCreateDeferredOperationKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateDeferredOperationKHR(VkDevice device, const VkAllocationCallbacks* pAllocator, VkDeferredOperationKHR* pDeferredOperation)"
  },
  {
    "label": "vkDestroyDeferredOperationKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkGetDeferredOperationMaxConcurrencyKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR uint32_t VKAPI_CALL)",
    "insertText": "vkGetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation)"
  },
  {
    "label": "vkGetDeferredOperationResultKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation)"
  },
  {
    "label": "vkDeferredOperationJoinKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkDeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_pipeline_executable_properties 1 # define VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION 1 # define VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME \" VK_KHR_pipeline_executable_properties \" typedef enum VkPipelineExecutableStatisticFormatKHR { VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0,VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1,VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2,VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3,VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 0 x7FFFFFFF } VkPipelineExecutableStatisticFormatKHR ; typedef struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 pipelineExecutableInfo ; } VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR ; typedef struct VkPipelineInfoKHR { VkStructureType sType ; const void* pNext ; VkPipeline pipeline ; } VkPipelineInfoKHR ; typedef struct VkPipelineExecutablePropertiesKHR { VkStructureType sType ; void* pNext ; VkShaderStageFlags stages ; char name [ VK_MAX_DESCRIPTION_SIZE ] ; char description [ VK_MAX_DESCRIPTION_SIZE ] ; uint32_t subgroupSize ; } VkPipelineExecutablePropertiesKHR ; typedef struct VkPipelineExecutableInfoKHR { VkStructureType sType ; const void* pNext ; VkPipeline pipeline ; uint32_t executableIndex ; } VkPipelineExecutableInfoKHR ; typedef union VkPipelineExecutableStatisticValueKHR { VkBool32 b32 ; int64_t i64 ; uint64_t u64 ; double f64 ; } VkPipelineExecutableStatisticValueKHR ; typedef struct VkPipelineExecutableStatisticKHR { VkStructureType sType ; void* pNext ; char name [ VK_MAX_DESCRIPTION_SIZE ] ; char description [ VK_MAX_DESCRIPTION_SIZE ] ; VkPipelineExecutableStatisticFormatKHR format ; VkPipelineExecutableStatisticValueKHR value ; } VkPipelineExecutableStatisticKHR ; typedef struct VkPipelineExecutableInternalRepresentationKHR { VkStructureType sType ; void* pNext ; char name [ VK_MAX_DESCRIPTION_SIZE ] ; char description [ VK_MAX_DESCRIPTION_SIZE ] ; VkBool32 isText ; size_t dataSize ; void* pData ; } VkPipelineExecutableInternalRepresentationKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPipelineExecutablePropertiesKHR)(VkDevice device, const VkPipelineInfoKHR* pPipelineInfo, uint32_t* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPipelineExecutableStatisticsKHR)(VkDevice device, const VkPipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPipelineExecutableInternalRepresentationsKHR)(VkDevice device, const VkPipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations)"
  },
  {
    "label": "vkGetPipelineExecutablePropertiesKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPipelineExecutablePropertiesKHR(VkDevice device, const VkPipelineInfoKHR* pPipelineInfo, uint32_t* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties)"
  },
  {
    "label": "vkGetPipelineExecutableStatisticsKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPipelineExecutableStatisticsKHR(VkDevice device, const VkPipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics)"
  },
  {
    "label": "vkGetPipelineExecutableInternalRepresentationsKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, const VkPipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_map_memory2 1 # define VK_KHR_MAP_MEMORY_2_SPEC_VERSION 1 # define VK_KHR_MAP_MEMORY_2_EXTENSION_NAME \" VK_KHR_map_memory2 \" typedef enum VkMemoryUnmapFlagBitsKHR { VK_MEMORY_UNMAP_RESERVE_BIT_EXT = 0 x00000001,VK_MEMORY_UNMAP_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkMemoryUnmapFlagBitsKHR ; typedef VkFlags VkMemoryUnmapFlagsKHR ; typedef struct VkMemoryMapInfoKHR { VkStructureType sType ; const void* pNext ; VkMemoryMapFlags flags ; VkDeviceMemory memory ; VkDeviceSize offset ; VkDeviceSize size ; } VkMemoryMapInfoKHR ; typedef struct VkMemoryUnmapInfoKHR { VkStructureType sType ; const void* pNext ; VkMemoryUnmapFlagsKHR flags ; VkDeviceMemory memory ; } VkMemoryUnmapInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkMapMemory2KHR)(VkDevice device, const VkMemoryMapInfoKHR* pMemoryMapInfo, void** ppData)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkUnmapMemory2KHR)(VkDevice device, const VkMemoryUnmapInfoKHR* pMemoryUnmapInfo)"
  },
  {
    "label": "vkMapMemory2KHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkMapMemory2KHR(VkDevice device, const VkMemoryMapInfoKHR* pMemoryMapInfo, void** ppData)"
  },
  {
    "label": "vkUnmapMemory2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkUnmapMemory2KHR(VkDevice device, const VkMemoryUnmapInfoKHR* pMemoryUnmapInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_shader_integer_dot_product 1 # define VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION 1 # define VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME \" VK_KHR_shader_integer_dot_product \" typedef VkPhysicalDeviceShaderIntegerDotProductFeatures VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR ; typedef VkPhysicalDeviceShaderIntegerDotProductProperties VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR ; # define VK_KHR_pipeline_library 1 # define VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION 1 # define VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME \" VK_KHR_pipeline_library \" typedef struct VkPipelineLibraryCreateInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t libraryCount ; const VkPipeline* pLibraries ; } VkPipelineLibraryCreateInfoKHR ; # define VK_KHR_shader_non_semantic_info 1 # define VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION 1 # define VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME \" VK_KHR_shader_non_semantic_info \" # define VK_KHR_present_id 1 # define VK_KHR_PRESENT_ID_SPEC_VERSION 1 # define VK_KHR_PRESENT_ID_EXTENSION_NAME \" VK_KHR_present_id \" typedef struct VkPresentIdKHR { VkStructureType sType ; const void* pNext ; uint32_t swapchainCount ; const uint64_t* pPresentIds ; } VkPresentIdKHR ; typedef struct VkPhysicalDevicePresentIdFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 presentId ; } VkPhysicalDevicePresentIdFeaturesKHR ; # define VK_KHR_video_encode_queue 1 # define VK_KHR_VIDEO_ENCODE_QUEUE_SPEC_VERSION 1 2 # define VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME \" VK_KHR_video_encode_queue \" typedef enum VkVideoEncodeTuningModeKHR { VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR = 0,VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR = 1,VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR = 2,VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR = 3,VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR = 4,VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoEncodeTuningModeKHR ; typedef enum VkVideoEncodeFlagBitsKHR { VK_VIDEO_ENCODE_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoEncodeFlagBitsKHR ; typedef VkFlags VkVideoEncodeFlagsKHR ; typedef enum VkVideoEncodeCapabilityFlagBitsKHR { VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR = 0 x00000001,VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR = 0 x00000002,VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoEncodeCapabilityFlagBitsKHR ; typedef VkFlags VkVideoEncodeCapabilityFlagsKHR ; typedef enum VkVideoEncodeRateControlModeFlagBitsKHR { VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR = 0,VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR = 0 x00000001,VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR = 0 x00000002,VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR = 0 x00000004,VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoEncodeRateControlModeFlagBitsKHR ; typedef VkFlags VkVideoEncodeRateControlModeFlagsKHR ; typedef enum VkVideoEncodeFeedbackFlagBitsKHR { VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR = 0 x00000001,VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR = 0 x00000002,VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR = 0 x00000004,VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoEncodeFeedbackFlagBitsKHR ; typedef VkFlags VkVideoEncodeFeedbackFlagsKHR ; typedef enum VkVideoEncodeUsageFlagBitsKHR { VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR = 0,VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR = 0 x00000001,VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR = 0 x00000002,VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR = 0 x00000004,VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR = 0 x00000008,VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoEncodeUsageFlagBitsKHR ; typedef VkFlags VkVideoEncodeUsageFlagsKHR ; typedef enum VkVideoEncodeContentFlagBitsKHR { VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR = 0,VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR = 0 x00000001,VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR = 0 x00000002,VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR = 0 x00000004,VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkVideoEncodeContentFlagBitsKHR ; typedef VkFlags VkVideoEncodeContentFlagsKHR ; typedef VkFlags VkVideoEncodeRateControlFlagsKHR ; typedef struct VkVideoEncodeInfoKHR { VkStructureType sType ; const void* pNext ; VkVideoEncodeFlagsKHR flags ; VkBuffer dstBuffer ; VkDeviceSize dstBufferOffset ; VkDeviceSize dstBufferRange ; VkVideoPictureResourceInfoKHR srcPictureResource ; const VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot ; uint32_t referenceSlotCount ; const VkVideoReferenceSlotInfoKHR* pReferenceSlots ; uint32_t precedingExternallyEncodedBytes ; } VkVideoEncodeInfoKHR ; typedef struct VkVideoEncodeCapabilitiesKHR { VkStructureType sType ; void* pNext ; VkVideoEncodeCapabilityFlagsKHR flags ; VkVideoEncodeRateControlModeFlagsKHR rateControlModes ; uint32_t maxRateControlLayers ; uint64_t maxBitrate ; uint32_t maxQualityLevels ; VkExtent2D encodeInputPictureGranularity ; VkVideoEncodeFeedbackFlagsKHR supportedEncodeFeedbackFlags ; } VkVideoEncodeCapabilitiesKHR ; typedef struct VkQueryPoolVideoEncodeFeedbackCreateInfoKHR { VkStructureType sType ; const void* pNext ; VkVideoEncodeFeedbackFlagsKHR encodeFeedbackFlags ; } VkQueryPoolVideoEncodeFeedbackCreateInfoKHR ; typedef struct VkVideoEncodeUsageInfoKHR { VkStructureType sType ; const void* pNext ; VkVideoEncodeUsageFlagsKHR videoUsageHints ; VkVideoEncodeContentFlagsKHR videoContentHints ; VkVideoEncodeTuningModeKHR tuningMode ; } VkVideoEncodeUsageInfoKHR ; typedef struct VkVideoEncodeRateControlLayerInfoKHR { VkStructureType sType ; const void* pNext ; uint64_t averageBitrate ; uint64_t maxBitrate ; uint32_t frameRateNumerator ; uint32_t frameRateDenominator ; } VkVideoEncodeRateControlLayerInfoKHR ; typedef struct VkVideoEncodeRateControlInfoKHR { VkStructureType sType ; const void* pNext ; VkVideoEncodeRateControlFlagsKHR flags ; VkVideoEncodeRateControlModeFlagBitsKHR rateControlMode ; uint32_t layerCount ; const VkVideoEncodeRateControlLayerInfoKHR* pLayers ; uint32_t virtualBufferSizeInMs ; uint32_t initialVirtualBufferSizeInMs ; } VkVideoEncodeRateControlInfoKHR ; typedef struct VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR { VkStructureType sType ; const void* pNext ; const VkVideoProfileInfoKHR* pVideoProfile ; uint32_t qualityLevel ; } VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR ; typedef struct VkVideoEncodeQualityLevelPropertiesKHR { VkStructureType sType ; void* pNext ; VkVideoEncodeRateControlModeFlagBitsKHR preferredRateControlMode ; uint32_t preferredRateControlLayerCount ; } VkVideoEncodeQualityLevelPropertiesKHR ; typedef struct VkVideoEncodeQualityLevelInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t qualityLevel ; } VkVideoEncodeQualityLevelInfoKHR ; typedef struct VkVideoEncodeSessionParametersGetInfoKHR { VkStructureType sType ; const void* pNext ; VkVideoSessionParametersKHR videoSessionParameters ; } VkVideoEncodeSessionParametersGetInfoKHR ; typedef struct VkVideoEncodeSessionParametersFeedbackInfoKHR { VkStructureType sType ; void* pNext ; VkBool32 hasOverrides ; } VkVideoEncodeSessionParametersFeedbackInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo, VkVideoEncodeQualityLevelPropertiesKHR* pQualityLevelProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetEncodedVideoSessionParametersKHR)(VkDevice device, const VkVideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo, VkVideoEncodeSessionParametersFeedbackInfoKHR* pFeedbackInfo, size_t* pDataSize, void* pData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdEncodeVideoKHR)(VkCommandBuffer commandBuffer, const VkVideoEncodeInfoKHR* pEncodeInfo)"
  },
  {
    "label": "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo, VkVideoEncodeQualityLevelPropertiesKHR* pQualityLevelProperties)"
  },
  {
    "label": "vkGetEncodedVideoSessionParametersKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetEncodedVideoSessionParametersKHR(VkDevice device, const VkVideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo, VkVideoEncodeSessionParametersFeedbackInfoKHR* pFeedbackInfo, size_t* pDataSize, void* pData)"
  },
  {
    "label": "vkCmdEncodeVideoKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdEncodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoEncodeInfoKHR* pEncodeInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_synchronization2 1 # define VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION 1 # define VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME \" VK_KHR_synchronization2 \" typedef VkPipelineStageFlags2 VkPipelineStageFlags2KHR ; typedef VkPipelineStageFlagBits2 VkPipelineStageFlagBits2KHR ; typedef VkAccessFlags2 VkAccessFlags2KHR ; typedef VkAccessFlagBits2 VkAccessFlagBits2KHR ; typedef VkSubmitFlagBits VkSubmitFlagBitsKHR ; typedef VkSubmitFlags VkSubmitFlagsKHR ; typedef VkMemoryBarrier2 VkMemoryBarrier2KHR ; typedef VkBufferMemoryBarrier2 VkBufferMemoryBarrier2KHR ; typedef VkImageMemoryBarrier2 VkImageMemoryBarrier2KHR ; typedef VkDependencyInfo VkDependencyInfoKHR ; typedef VkSubmitInfo2 VkSubmitInfo2KHR ; typedef VkSemaphoreSubmitInfo VkSemaphoreSubmitInfoKHR ; typedef VkCommandBufferSubmitInfo VkCommandBufferSubmitInfoKHR ; typedef VkPhysicalDeviceSynchronization2Features VkPhysicalDeviceSynchronization2FeaturesKHR ; typedef struct VkQueueFamilyCheckpointProperties2NV { VkStructureType sType ; void* pNext ; VkPipelineStageFlags2 checkpointExecutionStageMask ; } VkQueueFamilyCheckpointProperties2NV ; typedef struct VkCheckpointData2NV { VkStructureType sType ; void* pNext ; VkPipelineStageFlags2 stage ; void* pCheckpointMarker ; } VkCheckpointData2NV ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetEvent2KHR)(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo* pDependencyInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdResetEvent2KHR)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdWaitEvents2KHR)(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfo* pDependencyInfos)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdPipelineBarrier2KHR)(VkCommandBuffer commandBuffer, const VkDependencyInfo* pDependencyInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdWriteTimestamp2KHR)(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkQueueSubmit2KHR)(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2* pSubmits, VkFence fence)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdWriteBufferMarker2AMD)(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetQueueCheckpointData2NV)(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointData2NV* pCheckpointData)"
  },
  {
    "label": "vkCmdSetEvent2KHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo* pDependencyInfo)"
  },
  {
    "label": "vkCmdResetEvent2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)"
  },
  {
    "label": "vkCmdWaitEvents2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfo* pDependencyInfos)"
  },
  {
    "label": "vkCmdPipelineBarrier2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfo* pDependencyInfo)"
  },
  {
    "label": "vkCmdWriteTimestamp2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)"
  },
  {
    "label": "vkQueueSubmit2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkQueueSubmit2KHR(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2* pSubmits, VkFence fence)"
  },
  {
    "label": "vkCmdWriteBufferMarker2AMD()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)"
  },
  {
    "label": "vkGetQueueCheckpointData2NV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetQueueCheckpointData2NV(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointData2NV* pCheckpointData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_fragment_shader_barycentric 1 # define VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION 1 # define VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME \" VK_KHR_fragment_shader_barycentric \" typedef struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 fragmentShaderBarycentric ; } VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR ; typedef struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR { VkStructureType sType ; void* pNext ; VkBool32 triStripVertexOrderIndependentOfProvokingVertex ; } VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR ; # define VK_KHR_shader_subgroup_uniform_control_flow 1 # define VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION 1 # define VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME \" VK_KHR_shader_subgroup_uniform_control_flow \" typedef struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 shaderSubgroupUniformControlFlow ; } VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR ; # define VK_KHR_zero_initialize_workgroup_memory 1 # define VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION 1 # define VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME \" VK_KHR_zero_initialize_workgroup_memory \" typedef VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR ; # define VK_KHR_workgroup_memory_explicit_layout 1 # define VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION 1 # define VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME \" VK_KHR_workgroup_memory_explicit_layout \" typedef struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 workgroupMemoryExplicitLayout ; VkBool32 workgroupMemoryExplicitLayoutScalarBlockLayout ; VkBool32 workgroupMemoryExplicitLayout8BitAccess ; VkBool32 workgroupMemoryExplicitLayout16BitAccess ; } VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR ; # define VK_KHR_copy_commands2 1 # define VK_KHR_COPY_COMMANDS_2_SPEC_VERSION 1 # define VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME \" VK_KHR_copy_commands2 \" typedef VkCopyBufferInfo2 VkCopyBufferInfo2KHR ; typedef VkCopyImageInfo2 VkCopyImageInfo2KHR ; typedef VkCopyBufferToImageInfo2 VkCopyBufferToImageInfo2KHR ; typedef VkCopyImageToBufferInfo2 VkCopyImageToBufferInfo2KHR ; typedef VkBlitImageInfo2 VkBlitImageInfo2KHR ; typedef VkResolveImageInfo2 VkResolveImageInfo2KHR ; typedef VkBufferCopy2 VkBufferCopy2KHR ; typedef VkImageCopy2 VkImageCopy2KHR ; typedef VkImageBlit2 VkImageBlit2KHR ; typedef VkBufferImageCopy2 VkBufferImageCopy2KHR ; typedef VkImageResolve2 VkImageResolve2KHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyBuffer2KHR)(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2* pCopyBufferInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyImage2KHR)(VkCommandBuffer commandBuffer, const VkCopyImageInfo2* pCopyImageInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyBufferToImage2KHR)(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyImageToBuffer2KHR)(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBlitImage2KHR)(VkCommandBuffer commandBuffer, const VkBlitImageInfo2* pBlitImageInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdResolveImage2KHR)(VkCommandBuffer commandBuffer, const VkResolveImageInfo2* pResolveImageInfo)"
  },
  {
    "label": "vkCmdCopyBuffer2KHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2* pCopyBufferInfo)"
  },
  {
    "label": "vkCmdCopyImage2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2* pCopyImageInfo)"
  },
  {
    "label": "vkCmdCopyBufferToImage2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo)"
  },
  {
    "label": "vkCmdCopyImageToBuffer2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo)"
  },
  {
    "label": "vkCmdBlitImage2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2* pBlitImageInfo)"
  },
  {
    "label": "vkCmdResolveImage2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2* pResolveImageInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_format_feature_flags2 1 # define VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION 2 # define VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME \" VK_KHR_format_feature_flags2 \" typedef VkFormatFeatureFlags2 VkFormatFeatureFlags2KHR ; typedef VkFormatFeatureFlagBits2 VkFormatFeatureFlagBits2KHR ; typedef VkFormatProperties3 VkFormatProperties3KHR ; # define VK_KHR_ray_tracing_maintenance1 1 # define VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION 1 # define VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME \" VK_KHR_ray_tracing_maintenance1 \" typedef struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 rayTracingMaintenance1 ; VkBool32 rayTracingPipelineTraceRaysIndirect2 ; } VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR ; typedef struct VkTraceRaysIndirectCommand2KHR { VkDeviceAddress raygenShaderRecordAddress ; VkDeviceSize raygenShaderRecordSize ; VkDeviceAddress missShaderBindingTableAddress ; VkDeviceSize missShaderBindingTableSize ; VkDeviceSize missShaderBindingTableStride ; VkDeviceAddress hitShaderBindingTableAddress ; VkDeviceSize hitShaderBindingTableSize ; VkDeviceSize hitShaderBindingTableStride ; VkDeviceAddress callableShaderBindingTableAddress ; VkDeviceSize callableShaderBindingTableSize ; VkDeviceSize callableShaderBindingTableStride ; uint32_t width ; uint32_t height ; uint32_t depth ; } VkTraceRaysIndirectCommand2KHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdTraceRaysIndirect2KHR)(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress)"
  },
  {
    "label": "vkCmdTraceRaysIndirect2KHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_portability_enumeration 1 # define VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION 1 # define VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME \" VK_KHR_portability_enumeration \" # define VK_KHR_maintenance4 1 # define VK_KHR_MAINTENANCE_4_SPEC_VERSION 2 # define VK_KHR_MAINTENANCE_4_EXTENSION_NAME \" VK_KHR_maintenance4 \" typedef VkPhysicalDeviceMaintenance4Features VkPhysicalDeviceMaintenance4FeaturesKHR ; typedef VkPhysicalDeviceMaintenance4Properties VkPhysicalDeviceMaintenance4PropertiesKHR ; typedef VkDeviceBufferMemoryRequirements VkDeviceBufferMemoryRequirementsKHR ; typedef VkDeviceImageMemoryRequirements VkDeviceImageMemoryRequirementsKHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDeviceBufferMemoryRequirementsKHR)(VkDevice device, const VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDeviceImageMemoryRequirementsKHR)(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDeviceImageSparseMemoryRequirementsKHR)(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)"
  },
  {
    "label": "vkGetDeviceBufferMemoryRequirementsKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDeviceBufferMemoryRequirementsKHR(VkDevice device, const VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "vkGetDeviceImageMemoryRequirementsKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDeviceImageMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "vkGetDeviceImageSparseMemoryRequirementsKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_shader_subgroup_rotate 1 # define VK_KHR_SHADER_SUBGROUP_ROTATE_SPEC_VERSION 2 # define VK_KHR_SHADER_SUBGROUP_ROTATE_EXTENSION_NAME \" VK_KHR_shader_subgroup_rotate \" typedef struct VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 shaderSubgroupRotate ; VkBool32 shaderSubgroupRotateClustered ; } VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR ; # define VK_KHR_shader_maximal_reconvergence 1 # define VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_SPEC_VERSION 1 # define VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_EXTENSION_NAME \" VK_KHR_shader_maximal_reconvergence \" typedef struct VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 shaderMaximalReconvergence ; } VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR ; # define VK_KHR_maintenance5 1 # define VK_KHR_MAINTENANCE_5_SPEC_VERSION 1 # define VK_KHR_MAINTENANCE_5_EXTENSION_NAME \" VK_KHR_maintenance5 \" typedef VkFlags64 VkPipelineCreateFlags2KHR ; typedef VkFlags64 VkPipelineCreateFlagBits2KHR ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR = 0 x00000001ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR = 0 x00000002ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR = 0 x00000004ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_ENABLE_LEGACY_DITHERING_BIT_EXT = 0 x400000000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 0 x00000008ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR = 0 x00000010ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV = 0 x00000020ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR = 0 x00000040ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 0 x00000080ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR = 0 x00000100ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR = 0 x00000200ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT = 0 x00000400ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 0 x00800000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR = 0 x00000800ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 0 x00001000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR = 0 x00002000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 0 x00004000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 0 x00008000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 0 x00010000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 0 x00020000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 0 x00080000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV = 0 x00040000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV = 0 x00100000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0 x00200000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 0 x00400000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 0 x01000000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 0 x02000000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 0 x04000000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT = 0 x08000000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT = 0 x40000000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV = 0 x10000000ULL ; const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT = 0 x20000000ULL ; typedef VkFlags64 VkBufferUsageFlags2KHR ; typedef VkFlags64 VkBufferUsageFlagBits2KHR ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR = 0 x00000001ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR = 0 x00000002ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR = 0 x00000004ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR = 0 x00000008ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR = 0 x00000010ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR = 0 x00000020ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR = 0 x00000040ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR = 0 x00000080ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR = 0 x00000100ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_EXECUTION_GRAPH_SCRATCH_BIT_AMDX = 0 x02000000ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 0 x00000200ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR = 0 x00000400ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_RAY_TRACING_BIT_NV = 0 x00000400ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 0 x00000800ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 0 x00001000ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR = 0 x00002000ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR = 0 x00004000ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_VIDEO_ENCODE_DST_BIT_KHR = 0 x00008000ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_VIDEO_ENCODE_SRC_BIT_KHR = 0 x00010000ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR = 0 x00020000ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 0 x00080000ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 0 x00100000ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 0 x00200000ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 0 x00400000ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 0 x04000000ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 0 x00800000ULL ; const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT = 0 x01000000ULL ; typedef struct VkPhysicalDeviceMaintenance5FeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 maintenance5 ; } VkPhysicalDeviceMaintenance5FeaturesKHR ; typedef struct VkPhysicalDeviceMaintenance5PropertiesKHR { VkStructureType sType ; void* pNext ; VkBool32 earlyFragmentMultisampleCoverageAfterSampleCounting ; VkBool32 earlyFragmentSampleMaskTestBeforeSampleCounting ; VkBool32 depthStencilSwizzleOneSupport ; VkBool32 polygonModePointSize ; VkBool32 nonStrictSinglePixelWideLinesUseParallelogram ; VkBool32 nonStrictWideLinesUseParallelogram ; } VkPhysicalDeviceMaintenance5PropertiesKHR ; typedef struct VkRenderingAreaInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t viewMask ; uint32_t colorAttachmentCount ; const VkFormat* pColorAttachmentFormats ; VkFormat depthAttachmentFormat ; VkFormat stencilAttachmentFormat ; } VkRenderingAreaInfoKHR ; typedef struct VkImageSubresource2KHR { VkStructureType sType ; void* pNext ; VkImageSubresource imageSubresource ; } VkImageSubresource2KHR ; typedef struct VkDeviceImageSubresourceInfoKHR { VkStructureType sType ; const void* pNext ; const VkImageCreateInfo* pCreateInfo ; const VkImageSubresource2KHR* pSubresource ; } VkDeviceImageSubresourceInfoKHR ; typedef struct VkSubresourceLayout2KHR { VkStructureType sType ; void* pNext ; VkSubresourceLayout subresourceLayout ; } VkSubresourceLayout2KHR ; typedef struct VkPipelineCreateFlags2CreateInfoKHR { VkStructureType sType ; const void* pNext ; VkPipelineCreateFlags2KHR flags ; } VkPipelineCreateFlags2CreateInfoKHR ; typedef struct VkBufferUsageFlags2CreateInfoKHR { VkStructureType sType ; const void* pNext ; VkBufferUsageFlags2KHR usage ; } VkBufferUsageFlags2CreateInfoKHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBindIndexBuffer2KHR)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetRenderingAreaGranularityKHR)(VkDevice device, const VkRenderingAreaInfoKHR* pRenderingAreaInfo, VkExtent2D* pGranularity)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDeviceImageSubresourceLayoutKHR)(VkDevice device, const VkDeviceImageSubresourceInfoKHR* pInfo, VkSubresourceLayout2KHR* pLayout)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetImageSubresourceLayout2KHR)(VkDevice device, VkImage image, const VkImageSubresource2KHR* pSubresource, VkSubresourceLayout2KHR* pLayout)"
  },
  {
    "label": "vkCmdBindIndexBuffer2KHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBindIndexBuffer2KHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType)"
  },
  {
    "label": "vkGetRenderingAreaGranularityKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetRenderingAreaGranularityKHR(VkDevice device, const VkRenderingAreaInfoKHR* pRenderingAreaInfo, VkExtent2D* pGranularity)"
  },
  {
    "label": "vkGetDeviceImageSubresourceLayoutKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDeviceImageSubresourceLayoutKHR(VkDevice device, const VkDeviceImageSubresourceInfoKHR* pInfo, VkSubresourceLayout2KHR* pLayout)"
  },
  {
    "label": "vkGetImageSubresourceLayout2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetImageSubresourceLayout2KHR(VkDevice device, VkImage image, const VkImageSubresource2KHR* pSubresource, VkSubresourceLayout2KHR* pLayout)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_ray_tracing_position_fetch 1 # define VK_KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION 1 # define VK_KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME \" VK_KHR_ray_tracing_position_fetch \" typedef struct VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 rayTracingPositionFetch ; } VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR ; # define VK_KHR_cooperative_matrix 1 # define VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION 2 # define VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME \" VK_KHR_cooperative_matrix \" typedef enum VkComponentTypeKHR { VK_COMPONENT_TYPE_FLOAT16_KHR = 0,VK_COMPONENT_TYPE_FLOAT32_KHR = 1,VK_COMPONENT_TYPE_FLOAT64_KHR = 2,VK_COMPONENT_TYPE_SINT8_KHR = 3,VK_COMPONENT_TYPE_SINT16_KHR = 4,VK_COMPONENT_TYPE_SINT32_KHR = 5,VK_COMPONENT_TYPE_SINT64_KHR = 6,VK_COMPONENT_TYPE_UINT8_KHR = 7,VK_COMPONENT_TYPE_UINT16_KHR = 8,VK_COMPONENT_TYPE_UINT32_KHR = 9,VK_COMPONENT_TYPE_UINT64_KHR = 1 0,VK_COMPONENT_TYPE_FLOAT16_NV = VK_COMPONENT_TYPE_FLOAT16_KHR,VK_COMPONENT_TYPE_FLOAT32_NV = VK_COMPONENT_TYPE_FLOAT32_KHR,VK_COMPONENT_TYPE_FLOAT64_NV = VK_COMPONENT_TYPE_FLOAT64_KHR,VK_COMPONENT_TYPE_SINT8_NV = VK_COMPONENT_TYPE_SINT8_KHR,VK_COMPONENT_TYPE_SINT16_NV = VK_COMPONENT_TYPE_SINT16_KHR,VK_COMPONENT_TYPE_SINT32_NV = VK_COMPONENT_TYPE_SINT32_KHR,VK_COMPONENT_TYPE_SINT64_NV = VK_COMPONENT_TYPE_SINT64_KHR,VK_COMPONENT_TYPE_UINT8_NV = VK_COMPONENT_TYPE_UINT8_KHR,VK_COMPONENT_TYPE_UINT16_NV = VK_COMPONENT_TYPE_UINT16_KHR,VK_COMPONENT_TYPE_UINT32_NV = VK_COMPONENT_TYPE_UINT32_KHR,VK_COMPONENT_TYPE_UINT64_NV = VK_COMPONENT_TYPE_UINT64_KHR,VK_COMPONENT_TYPE_MAX_ENUM_KHR = 0 x7FFFFFFF } VkComponentTypeKHR ; typedef enum VkScopeKHR { VK_SCOPE_DEVICE_KHR = 1,VK_SCOPE_WORKGROUP_KHR = 2,VK_SCOPE_SUBGROUP_KHR = 3,VK_SCOPE_QUEUE_FAMILY_KHR = 5,VK_SCOPE_DEVICE_NV = VK_SCOPE_DEVICE_KHR,VK_SCOPE_WORKGROUP_NV = VK_SCOPE_WORKGROUP_KHR,VK_SCOPE_SUBGROUP_NV = VK_SCOPE_SUBGROUP_KHR,VK_SCOPE_QUEUE_FAMILY_NV = VK_SCOPE_QUEUE_FAMILY_KHR,VK_SCOPE_MAX_ENUM_KHR = 0 x7FFFFFFF } VkScopeKHR ; typedef struct VkCooperativeMatrixPropertiesKHR { VkStructureType sType ; void* pNext ; uint32_t MSize ; uint32_t NSize ; uint32_t KSize ; VkComponentTypeKHR AType ; VkComponentTypeKHR BType ; VkComponentTypeKHR CType ; VkComponentTypeKHR ResultType ; VkBool32 saturatingAccumulation ; VkScopeKHR scope ; } VkCooperativeMatrixPropertiesKHR ; typedef struct VkPhysicalDeviceCooperativeMatrixFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 cooperativeMatrix ; VkBool32 cooperativeMatrixRobustBufferAccess ; } VkPhysicalDeviceCooperativeMatrixFeaturesKHR ; typedef struct VkPhysicalDeviceCooperativeMatrixPropertiesKHR { VkStructureType sType ; void* pNext ; VkShaderStageFlags cooperativeMatrixSupportedStages ; } VkPhysicalDeviceCooperativeMatrixPropertiesKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesKHR* pProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesKHR* pProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_video_decode_av1 1 # include \" vk_video / vulkan_video_codec_av1std . h \" # include \" vk_video / vulkan_video_codec_av1std_decode . h \" # define VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR 7 U # define VK_KHR_VIDEO_DECODE_AV1_SPEC_VERSION 1 # define VK_KHR_VIDEO_DECODE_AV1_EXTENSION_NAME \" VK_KHR_video_decode_av1 \" typedef struct VkVideoDecodeAV1ProfileInfoKHR { VkStructureType sType ; const void* pNext ; StdVideoAV1Profile stdProfile ; VkBool32 filmGrainSupport ; } VkVideoDecodeAV1ProfileInfoKHR ; typedef struct VkVideoDecodeAV1CapabilitiesKHR { VkStructureType sType ; void* pNext ; StdVideoAV1Level maxLevel ; } VkVideoDecodeAV1CapabilitiesKHR ; typedef struct VkVideoDecodeAV1SessionParametersCreateInfoKHR { VkStructureType sType ; const void* pNext ; const StdVideoAV1SequenceHeader* pStdSequenceHeader ; } VkVideoDecodeAV1SessionParametersCreateInfoKHR ; typedef struct VkVideoDecodeAV1PictureInfoKHR { VkStructureType sType ; const void* pNext ; const StdVideoDecodeAV1PictureInfo* pStdPictureInfo ; int32_t referenceNameSlotIndices [ VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR ] ; uint32_t frameHeaderOffset ; uint32_t tileCount ; const uint32_t* pTileOffsets ; const uint32_t* pTileSizes ; } VkVideoDecodeAV1PictureInfoKHR ; typedef struct VkVideoDecodeAV1DpbSlotInfoKHR { VkStructureType sType ; const void* pNext ; const StdVideoDecodeAV1ReferenceInfo* pStdReferenceInfo ; } VkVideoDecodeAV1DpbSlotInfoKHR ; # define VK_KHR_video_maintenance1 1 # define VK_KHR_VIDEO_MAINTENANCE_1_SPEC_VERSION 1 # define VK_KHR_VIDEO_MAINTENANCE_1_EXTENSION_NAME \" VK_KHR_video_maintenance1 \" typedef struct VkPhysicalDeviceVideoMaintenance1FeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 videoMaintenance1 ; } VkPhysicalDeviceVideoMaintenance1FeaturesKHR ; typedef struct VkVideoInlineQueryInfoKHR { VkStructureType sType ; const void* pNext ; VkQueryPool queryPool ; uint32_t firstQuery ; uint32_t queryCount ; } VkVideoInlineQueryInfoKHR ; # define VK_KHR_vertex_attribute_divisor 1 # define VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION 1 # define VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME \" VK_KHR_vertex_attribute_divisor \" typedef struct VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR { VkStructureType sType ; void* pNext ; uint32_t maxVertexAttribDivisor ; VkBool32 supportsNonZeroFirstInstance ; } VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR ; typedef struct VkVertexInputBindingDivisorDescriptionKHR { uint32_t binding ; uint32_t divisor ; } VkVertexInputBindingDivisorDescriptionKHR ; typedef struct VkPipelineVertexInputDivisorStateCreateInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t vertexBindingDivisorCount ; const VkVertexInputBindingDivisorDescriptionKHR* pVertexBindingDivisors ; } VkPipelineVertexInputDivisorStateCreateInfoKHR ; typedef struct VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 vertexAttributeInstanceRateDivisor ; VkBool32 vertexAttributeInstanceRateZeroDivisor ; } VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR ; # define VK_KHR_load_store_op_none 1 # define VK_KHR_LOAD_STORE_OP_NONE_SPEC_VERSION 1 # define VK_KHR_LOAD_STORE_OP_NONE_EXTENSION_NAME \" VK_KHR_load_store_op_none \" # define VK_KHR_shader_float_controls2 1 # define VK_KHR_SHADER_FLOAT_CONTROLS_2_SPEC_VERSION 1 # define VK_KHR_SHADER_FLOAT_CONTROLS_2_EXTENSION_NAME \" VK_KHR_shader_float_controls2 \" typedef struct VkPhysicalDeviceShaderFloatControls2FeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 shaderFloatControls2 ; } VkPhysicalDeviceShaderFloatControls2FeaturesKHR ; # define VK_KHR_index_type_uint8 1 # define VK_KHR_INDEX_TYPE_UINT8_SPEC_VERSION 1 # define VK_KHR_INDEX_TYPE_UINT8_EXTENSION_NAME \" VK_KHR_index_type_uint8 \" typedef struct VkPhysicalDeviceIndexTypeUint8FeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 indexTypeUint8 ; } VkPhysicalDeviceIndexTypeUint8FeaturesKHR ; # define VK_KHR_line_rasterization 1 # define VK_KHR_LINE_RASTERIZATION_SPEC_VERSION 1 # define VK_KHR_LINE_RASTERIZATION_EXTENSION_NAME \" VK_KHR_line_rasterization \" typedef enum VkLineRasterizationModeKHR { VK_LINE_RASTERIZATION_MODE_DEFAULT_KHR = 0,VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR = 1,VK_LINE_RASTERIZATION_MODE_BRESENHAM_KHR = 2,VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR = 3,VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = VK_LINE_RASTERIZATION_MODE_DEFAULT_KHR,VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR,VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = VK_LINE_RASTERIZATION_MODE_BRESENHAM_KHR,VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR,VK_LINE_RASTERIZATION_MODE_MAX_ENUM_KHR = 0 x7FFFFFFF } VkLineRasterizationModeKHR ; typedef struct VkPhysicalDeviceLineRasterizationFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 rectangularLines ; VkBool32 bresenhamLines ; VkBool32 smoothLines ; VkBool32 stippledRectangularLines ; VkBool32 stippledBresenhamLines ; VkBool32 stippledSmoothLines ; } VkPhysicalDeviceLineRasterizationFeaturesKHR ; typedef struct VkPhysicalDeviceLineRasterizationPropertiesKHR { VkStructureType sType ; void* pNext ; uint32_t lineSubPixelPrecisionBits ; } VkPhysicalDeviceLineRasterizationPropertiesKHR ; typedef struct VkPipelineRasterizationLineStateCreateInfoKHR { VkStructureType sType ; const void* pNext ; VkLineRasterizationModeKHR lineRasterizationMode ; VkBool32 stippledLineEnable ; uint32_t lineStippleFactor ; uint16_t lineStipplePattern ; } VkPipelineRasterizationLineStateCreateInfoKHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetLineStippleKHR)(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)"
  },
  {
    "label": "vkCmdSetLineStippleKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetLineStippleKHR(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_calibrated_timestamps 1 # define VK_KHR_CALIBRATED_TIMESTAMPS_SPEC_VERSION 1 # define VK_KHR_CALIBRATED_TIMESTAMPS_EXTENSION_NAME \" VK_KHR_calibrated_timestamps \" typedef enum VkTimeDomainKHR { VK_TIME_DOMAIN_DEVICE_KHR = 0,VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR = 1,VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR = 2,VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR = 3,VK_TIME_DOMAIN_DEVICE_EXT = VK_TIME_DOMAIN_DEVICE_KHR,VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR,VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR,VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR,VK_TIME_DOMAIN_MAX_ENUM_KHR = 0 x7FFFFFFF } VkTimeDomainKHR ; typedef struct VkCalibratedTimestampInfoKHR { VkStructureType sType ; const void* pNext ; VkTimeDomainKHR timeDomain ; } VkCalibratedTimestampInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR)(VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainKHR* pTimeDomains)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetCalibratedTimestampsKHR)(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoKHR* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation)"
  },
  {
    "label": "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainKHR* pTimeDomains)"
  },
  {
    "label": "vkGetCalibratedTimestampsKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetCalibratedTimestampsKHR(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoKHR* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_shader_expect_assume 1 # define VK_KHR_SHADER_EXPECT_ASSUME_SPEC_VERSION 1 # define VK_KHR_SHADER_EXPECT_ASSUME_EXTENSION_NAME \" VK_KHR_shader_expect_assume \" typedef struct VkPhysicalDeviceShaderExpectAssumeFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 shaderExpectAssume ; } VkPhysicalDeviceShaderExpectAssumeFeaturesKHR ; # define VK_KHR_maintenance6 1 # define VK_KHR_MAINTENANCE_6_SPEC_VERSION 1 # define VK_KHR_MAINTENANCE_6_EXTENSION_NAME \" VK_KHR_maintenance6 \" typedef struct VkPhysicalDeviceMaintenance6FeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 maintenance6 ; } VkPhysicalDeviceMaintenance6FeaturesKHR ; typedef struct VkPhysicalDeviceMaintenance6PropertiesKHR { VkStructureType sType ; void* pNext ; VkBool32 blockTexelViewCompatibleMultipleLayers ; uint32_t maxCombinedImageSamplerDescriptorCount ; VkBool32 fragmentShadingRateClampCombinerInputs ; } VkPhysicalDeviceMaintenance6PropertiesKHR ; typedef struct VkBindMemoryStatusKHR { VkStructureType sType ; const void* pNext ; VkResult* pResult ; } VkBindMemoryStatusKHR ; typedef struct VkBindDescriptorSetsInfoKHR { VkStructureType sType ; const void* pNext ; VkShaderStageFlags stageFlags ; VkPipelineLayout layout ; uint32_t firstSet ; uint32_t descriptorSetCount ; const VkDescriptorSet* pDescriptorSets ; uint32_t dynamicOffsetCount ; const uint32_t* pDynamicOffsets ; } VkBindDescriptorSetsInfoKHR ; typedef struct VkPushConstantsInfoKHR { VkStructureType sType ; const void* pNext ; VkPipelineLayout layout ; VkShaderStageFlags stageFlags ; uint32_t offset ; uint32_t size ; const void* pValues ; } VkPushConstantsInfoKHR ; typedef struct VkPushDescriptorSetInfoKHR { VkStructureType sType ; const void* pNext ; VkShaderStageFlags stageFlags ; VkPipelineLayout layout ; uint32_t set ; uint32_t descriptorWriteCount ; const VkWriteDescriptorSet* pDescriptorWrites ; } VkPushDescriptorSetInfoKHR ; typedef struct VkPushDescriptorSetWithTemplateInfoKHR { VkStructureType sType ; const void* pNext ; VkDescriptorUpdateTemplate descriptorUpdateTemplate ; VkPipelineLayout layout ; uint32_t set ; const void* pData ; } VkPushDescriptorSetWithTemplateInfoKHR ; typedef struct VkSetDescriptorBufferOffsetsInfoEXT { VkStructureType sType ; const void* pNext ; VkShaderStageFlags stageFlags ; VkPipelineLayout layout ; uint32_t firstSet ; uint32_t setCount ; const uint32_t* pBufferIndices ; const VkDeviceSize* pOffsets ; } VkSetDescriptorBufferOffsetsInfoEXT ; typedef struct VkBindDescriptorBufferEmbeddedSamplersInfoEXT { VkStructureType sType ; const void* pNext ; VkShaderStageFlags stageFlags ; VkPipelineLayout layout ; uint32_t set ; } VkBindDescriptorBufferEmbeddedSamplersInfoEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBindDescriptorSets2KHR)(VkCommandBuffer commandBuffer, const VkBindDescriptorSetsInfoKHR* pBindDescriptorSetsInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdPushConstants2KHR)(VkCommandBuffer commandBuffer, const VkPushConstantsInfoKHR* pPushConstantsInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdPushDescriptorSet2KHR)(VkCommandBuffer commandBuffer, const VkPushDescriptorSetInfoKHR* pPushDescriptorSetInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdPushDescriptorSetWithTemplate2KHR)(VkCommandBuffer commandBuffer, const VkPushDescriptorSetWithTemplateInfoKHR* pPushDescriptorSetWithTemplateInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDescriptorBufferOffsets2EXT)(VkCommandBuffer commandBuffer, const VkSetDescriptorBufferOffsetsInfoEXT* pSetDescriptorBufferOffsetsInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT)(VkCommandBuffer commandBuffer, const VkBindDescriptorBufferEmbeddedSamplersInfoEXT* pBindDescriptorBufferEmbeddedSamplersInfo)"
  },
  {
    "label": "vkCmdBindDescriptorSets2KHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBindDescriptorSets2KHR(VkCommandBuffer commandBuffer, const VkBindDescriptorSetsInfoKHR* pBindDescriptorSetsInfo)"
  },
  {
    "label": "vkCmdPushConstants2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdPushConstants2KHR(VkCommandBuffer commandBuffer, const VkPushConstantsInfoKHR* pPushConstantsInfo)"
  },
  {
    "label": "vkCmdPushDescriptorSet2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdPushDescriptorSet2KHR(VkCommandBuffer commandBuffer, const VkPushDescriptorSetInfoKHR* pPushDescriptorSetInfo)"
  },
  {
    "label": "vkCmdPushDescriptorSetWithTemplate2KHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdPushDescriptorSetWithTemplate2KHR(VkCommandBuffer commandBuffer, const VkPushDescriptorSetWithTemplateInfoKHR* pPushDescriptorSetWithTemplateInfo)"
  },
  {
    "label": "vkCmdSetDescriptorBufferOffsets2EXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDescriptorBufferOffsets2EXT(VkCommandBuffer commandBuffer, const VkSetDescriptorBufferOffsetsInfoEXT* pSetDescriptorBufferOffsetsInfo)"
  },
  {
    "label": "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(VkCommandBuffer commandBuffer, const VkBindDescriptorBufferEmbeddedSamplersInfoEXT* pBindDescriptorBufferEmbeddedSamplersInfo)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_shader_relaxed_extended_instruction 1 # define VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_SPEC_VERSION 1 # define VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_EXTENSION_NAME \" VK_KHR_shader_relaxed_extended_instruction \" typedef struct VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 shaderRelaxedExtendedInstruction ; } VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR ; # define VK_KHR_maintenance7 1 # define VK_KHR_MAINTENANCE_7_SPEC_VERSION 1 # define VK_KHR_MAINTENANCE_7_EXTENSION_NAME \" VK_KHR_maintenance7 \" typedef enum VkPhysicalDeviceLayeredApiKHR { VK_PHYSICAL_DEVICE_LAYERED_API_VULKAN_KHR = 0,VK_PHYSICAL_DEVICE_LAYERED_API_D3D12_KHR = 1,VK_PHYSICAL_DEVICE_LAYERED_API_METAL_KHR = 2,VK_PHYSICAL_DEVICE_LAYERED_API_OPENGL_KHR = 3,VK_PHYSICAL_DEVICE_LAYERED_API_OPENGLES_KHR = 4,VK_PHYSICAL_DEVICE_LAYERED_API_MAX_ENUM_KHR = 0 x7FFFFFFF } VkPhysicalDeviceLayeredApiKHR ; typedef struct VkPhysicalDeviceMaintenance7FeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 maintenance7 ; } VkPhysicalDeviceMaintenance7FeaturesKHR ; typedef struct VkPhysicalDeviceMaintenance7PropertiesKHR { VkStructureType sType ; void* pNext ; VkBool32 robustFragmentShadingRateAttachmentAccess ; VkBool32 separateDepthStencilAttachmentAccess ; uint32_t maxDescriptorSetTotalUniformBuffersDynamic ; uint32_t maxDescriptorSetTotalStorageBuffersDynamic ; uint32_t maxDescriptorSetTotalBuffersDynamic ; uint32_t maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic ; uint32_t maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic ; uint32_t maxDescriptorSetUpdateAfterBindTotalBuffersDynamic ; } VkPhysicalDeviceMaintenance7PropertiesKHR ; typedef struct VkPhysicalDeviceLayeredApiPropertiesKHR { VkStructureType sType ; void* pNext ; uint32_t vendorID ; uint32_t deviceID ; VkPhysicalDeviceLayeredApiKHR layeredAPI ; char deviceName [ VK_MAX_PHYSICAL_DEVICE_NAME_SIZE ] ; } VkPhysicalDeviceLayeredApiPropertiesKHR ; typedef struct VkPhysicalDeviceLayeredApiPropertiesListKHR { VkStructureType sType ; void* pNext ; uint32_t layeredApiCount ; VkPhysicalDeviceLayeredApiPropertiesKHR* pLayeredApis ; } VkPhysicalDeviceLayeredApiPropertiesListKHR ; typedef struct VkPhysicalDeviceLayeredApiVulkanPropertiesKHR { VkStructureType sType ; void* pNext ; VkPhysicalDeviceProperties2 properties ; } VkPhysicalDeviceLayeredApiVulkanPropertiesKHR ; # define VK_EXT_debug_report 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDebugReportCallbackEXT)"
  },
  {
    "label": "VkBool32()",
    "kind": "Method",
    "detail": "Function (VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 1 0,VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 1 1,VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 1 2,VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 1 3,VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 1 4,VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 1 5,VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 1 6,VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 1 7,VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 1 8,VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 1 9,VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 2 0,VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 2 1,VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 2 2,VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 2 3,VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 2 4,VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 2 5,VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 2 6,VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 2 7,VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 2 8,VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 2 9,VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 3 0,VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 3 3,VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1 0 0 0 1 5 6 0 0 0,VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1 0 0 0 0 8 5 0 0 0,VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 1 0 0 0 0 2 9 0 0 0,VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1 0 0 0 0 2 9 0 0 1,VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1 0 0 0 1 5 0 0 0 0,VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1 0 0 0 1 6 5 0 0 0,VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT = 1 0 0 0 3 0 7 0 0 0,VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT = 1 0 0 0 3 0 7 0 0 1,VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1 0 0 0 3 6 6 0 0 0,VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkDebugReportObjectTypeEXT ; typedef enum VkDebugReportFlagBitsEXT { VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 0 x00000001,VK_DEBUG_REPORT_WARNING_BIT_EXT = 0 x00000002,VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0 x00000004,VK_DEBUG_REPORT_ERROR_BIT_EXT = 0 x00000008,VK_DEBUG_REPORT_DEBUG_BIT_EXT = 0 x00000010,VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkDebugReportFlagBitsEXT ; typedef VkFlags VkDebugReportFlagsEXT ; typedef)",
    "insertText": "VkBool32(VKAPI_PTR *PFN_vkDebugReportCallbackEXT)( VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage, void* pUserData)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef struct VkDebugReportCallbackCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkDebugReportFlagsEXT flags ; PFN_vkDebugReportCallbackEXT pfnCallback ; void* pUserData ; } VkDebugReportCallbackCreateInfoEXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateDebugReportCallbackEXT)(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyDebugReportCallbackEXT)(VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDebugReportMessageEXT)(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage)"
  },
  {
    "label": "vkCreateDebugReportCallbackEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateDebugReportCallbackEXT(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback)"
  },
  {
    "label": "vkDestroyDebugReportCallbackEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkDebugReportMessageEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NV_glsl_shader 1 # define VK_NV_GLSL_SHADER_SPEC_VERSION 1 # define VK_NV_GLSL_SHADER_EXTENSION_NAME \" VK_NV_glsl_shader \" # define VK_EXT_depth_range_unrestricted 1 # define VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION 1 # define VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME \" VK_EXT_depth_range_unrestricted \" # define VK_IMG_filter_cubic 1 # define VK_IMG_FILTER_CUBIC_SPEC_VERSION 1 # define VK_IMG_FILTER_CUBIC_EXTENSION_NAME \" VK_IMG_filter_cubic \" # define VK_AMD_rasterization_order 1 # define VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION 1 # define VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME \" VK_AMD_rasterization_order \" typedef enum VkRasterizationOrderAMD { VK_RASTERIZATION_ORDER_STRICT_AMD = 0,VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 0 x7FFFFFFF } VkRasterizationOrderAMD ; typedef struct VkPipelineRasterizationStateRasterizationOrderAMD { VkStructureType sType ; const void* pNext ; VkRasterizationOrderAMD rasterizationOrder ; } VkPipelineRasterizationStateRasterizationOrderAMD ; # define VK_AMD_shader_trinary_minmax 1 # define VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION 1 # define VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME \" VK_AMD_shader_trinary_minmax \" # define VK_AMD_shader_explicit_vertex_parameter 1 # define VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION 1 # define VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME \" VK_AMD_shader_explicit_vertex_parameter \" # define VK_EXT_debug_marker 1 # define VK_EXT_DEBUG_MARKER_SPEC_VERSION 4 # define VK_EXT_DEBUG_MARKER_EXTENSION_NAME \" VK_EXT_debug_marker \" typedef struct VkDebugMarkerObjectNameInfoEXT { VkStructureType sType ; const void* pNext ; VkDebugReportObjectTypeEXT objectType ; uint64_t object ; const char* pObjectName ; } VkDebugMarkerObjectNameInfoEXT ; typedef struct VkDebugMarkerObjectTagInfoEXT { VkStructureType sType ; const void* pNext ; VkDebugReportObjectTypeEXT objectType ; uint64_t object ; uint64_t tagName ; size_t tagSize ; const void* pTag ; } VkDebugMarkerObjectTagInfoEXT ; typedef struct VkDebugMarkerMarkerInfoEXT { VkStructureType sType ; const void* pNext ; const char* pMarkerName ; float color [ 4 ] ; } VkDebugMarkerMarkerInfoEXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkDebugMarkerSetObjectTagEXT)(VkDevice device, const VkDebugMarkerObjectTagInfoEXT* pTagInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkDebugMarkerSetObjectNameEXT)(VkDevice device, const VkDebugMarkerObjectNameInfoEXT* pNameInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDebugMarkerBeginEXT)(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDebugMarkerEndEXT)(VkCommandBuffer commandBuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDebugMarkerInsertEXT)(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)"
  },
  {
    "label": "vkDebugMarkerSetObjectTagEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkDebugMarkerSetObjectTagEXT(VkDevice device, const VkDebugMarkerObjectTagInfoEXT* pTagInfo)"
  },
  {
    "label": "vkDebugMarkerSetObjectNameEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkDebugMarkerSetObjectNameEXT(VkDevice device, const VkDebugMarkerObjectNameInfoEXT* pNameInfo)"
  },
  {
    "label": "vkCmdDebugMarkerBeginEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)"
  },
  {
    "label": "vkCmdDebugMarkerEndEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)"
  },
  {
    "label": "vkCmdDebugMarkerInsertEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_AMD_gcn_shader 1 # define VK_AMD_GCN_SHADER_SPEC_VERSION 1 # define VK_AMD_GCN_SHADER_EXTENSION_NAME \" VK_AMD_gcn_shader \" # define VK_NV_dedicated_allocation 1 # define VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION 1 # define VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME \" VK_NV_dedicated_allocation \" typedef struct VkDedicatedAllocationImageCreateInfoNV { VkStructureType sType ; const void* pNext ; VkBool32 dedicatedAllocation ; } VkDedicatedAllocationImageCreateInfoNV ; typedef struct VkDedicatedAllocationBufferCreateInfoNV { VkStructureType sType ; const void* pNext ; VkBool32 dedicatedAllocation ; } VkDedicatedAllocationBufferCreateInfoNV ; typedef struct VkDedicatedAllocationMemoryAllocateInfoNV { VkStructureType sType ; const void* pNext ; VkImage image ; VkBuffer buffer ; } VkDedicatedAllocationMemoryAllocateInfoNV ; # define VK_EXT_transform_feedback 1 # define VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION 1 # define VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME \" VK_EXT_transform_feedback \" typedef VkFlags VkPipelineRasterizationStateStreamCreateFlagsEXT ; typedef struct VkPhysicalDeviceTransformFeedbackFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 transformFeedback ; VkBool32 geometryStreams ; } VkPhysicalDeviceTransformFeedbackFeaturesEXT ; typedef struct VkPhysicalDeviceTransformFeedbackPropertiesEXT { VkStructureType sType ; void* pNext ; uint32_t maxTransformFeedbackStreams ; uint32_t maxTransformFeedbackBuffers ; VkDeviceSize maxTransformFeedbackBufferSize ; uint32_t maxTransformFeedbackStreamDataSize ; uint32_t maxTransformFeedbackBufferDataSize ; uint32_t maxTransformFeedbackBufferDataStride ; VkBool32 transformFeedbackQueries ; VkBool32 transformFeedbackStreamsLinesTriangles ; VkBool32 transformFeedbackRasterizationStreamSelect ; VkBool32 transformFeedbackDraw ; } VkPhysicalDeviceTransformFeedbackPropertiesEXT ; typedef struct VkPipelineRasterizationStateStreamCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkPipelineRasterizationStateStreamCreateFlagsEXT flags ; uint32_t rasterizationStream ; } VkPipelineRasterizationStateStreamCreateInfoEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBindTransformFeedbackBuffersEXT)(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBeginTransformFeedbackEXT)(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdEndTransformFeedbackEXT)(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBeginQueryIndexedEXT)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdEndQueryIndexedEXT)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawIndirectByteCountEXT)(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride)"
  },
  {
    "label": "vkCmdBindTransformFeedbackBuffersEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes)"
  },
  {
    "label": "vkCmdBeginTransformFeedbackEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets)"
  },
  {
    "label": "vkCmdEndTransformFeedbackEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets)"
  },
  {
    "label": "vkCmdBeginQueryIndexedEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index)"
  },
  {
    "label": "vkCmdEndQueryIndexedEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index)"
  },
  {
    "label": "vkCmdDrawIndirectByteCountEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NVX_binary_import 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCuModuleNVX) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCuFunctionNVX)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (VkStructureType sType ; const void* pNext ; size_t dataSize ; const void* pData ; } VkCuModuleCreateInfoNVX ; typedef struct VkCuFunctionCreateInfoNVX { VkStructureType sType ; const void* pNext ; VkCuModuleNVX module ; const char* pName ; } VkCuFunctionCreateInfoNVX ; typedef struct VkCuLaunchInfoNVX { VkStructureType sType ; const void* pNext ; VkCuFunctionNVX function ; uint32_t gridDimX ; uint32_t gridDimY ; uint32_t gridDimZ ; uint32_t blockDimX ; uint32_t blockDimY ; uint32_t blockDimZ ; uint32_t sharedMemBytes ; size_t paramCount ; const void* const* pParams ; size_t extraCount ; const void* const* pExtras ; } VkCuLaunchInfoNVX ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateCuModuleNVX)(VkDevice device, const VkCuModuleCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCuModuleNVX* pModule)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateCuFunctionNVX)(VkDevice device, const VkCuFunctionCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCuFunctionNVX* pFunction)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyCuModuleNVX)(VkDevice device, VkCuModuleNVX module, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyCuFunctionNVX)(VkDevice device, VkCuFunctionNVX function, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCuLaunchKernelNVX)(VkCommandBuffer commandBuffer, const VkCuLaunchInfoNVX* pLaunchInfo)"
  },
  {
    "label": "vkCreateCuModuleNVX()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateCuModuleNVX(VkDevice device, const VkCuModuleCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCuModuleNVX* pModule)"
  },
  {
    "label": "vkCreateCuFunctionNVX()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateCuFunctionNVX(VkDevice device, const VkCuFunctionCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCuFunctionNVX* pFunction)"
  },
  {
    "label": "vkDestroyCuModuleNVX()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkDestroyCuFunctionNVX()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCmdCuLaunchKernelNVX()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, const VkCuLaunchInfoNVX* pLaunchInfo)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NVX_image_view_handle 1 # define VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION 2 # define VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME \" VK_NVX_image_view_handle \" typedef struct VkImageViewHandleInfoNVX { VkStructureType sType ; const void* pNext ; VkImageView imageView ; VkDescriptorType descriptorType ; VkSampler sampler ; } VkImageViewHandleInfoNVX ; typedef struct VkImageViewAddressPropertiesNVX { VkStructureType sType ; void* pNext ; VkDeviceAddress deviceAddress ; VkDeviceSize size ; } VkImageViewAddressPropertiesNVX ; typedef)",
    "insertText": "uint32_t(VKAPI_PTR *PFN_vkGetImageViewHandleNVX)(VkDevice device, const VkImageViewHandleInfoNVX* pInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetImageViewAddressNVX)(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX* pProperties)"
  },
  {
    "label": "vkGetImageViewHandleNVX()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR uint32_t VKAPI_CALL)",
    "insertText": "vkGetImageViewHandleNVX(VkDevice device, const VkImageViewHandleInfoNVX* pInfo)"
  },
  {
    "label": "vkGetImageViewAddressNVX()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetImageViewAddressNVX(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX* pProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_AMD_draw_indirect_count 1 # define VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION 2 # define VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME \" VK_AMD_draw_indirect_count \" typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawIndirectCountAMD)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawIndexedIndirectCountAMD)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)"
  },
  {
    "label": "vkCmdDrawIndirectCountAMD()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)"
  },
  {
    "label": "vkCmdDrawIndexedIndirectCountAMD()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_AMD_negative_viewport_height 1 # define VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION 1 # define VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME \" VK_AMD_negative_viewport_height \" # define VK_AMD_gpu_shader_half_float 1 # define VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION 2 # define VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME \" VK_AMD_gpu_shader_half_float \" # define VK_AMD_shader_ballot 1 # define VK_AMD_SHADER_BALLOT_SPEC_VERSION 1 # define VK_AMD_SHADER_BALLOT_EXTENSION_NAME \" VK_AMD_shader_ballot \" # define VK_AMD_texture_gather_bias_lod 1 # define VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION 1 # define VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME \" VK_AMD_texture_gather_bias_lod \" typedef struct VkTextureLODGatherFormatPropertiesAMD { VkStructureType sType ; void* pNext ; VkBool32 supportsTextureGatherLODBiasAMD ; } VkTextureLODGatherFormatPropertiesAMD ; # define VK_AMD_shader_info 1 # define VK_AMD_SHADER_INFO_SPEC_VERSION 1 # define VK_AMD_SHADER_INFO_EXTENSION_NAME \" VK_AMD_shader_info \" typedef enum VkShaderInfoTypeAMD { VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0,VK_SHADER_INFO_TYPE_BINARY_AMD = 1,VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 0 x7FFFFFFF } VkShaderInfoTypeAMD ; typedef struct VkShaderResourceUsageAMD { uint32_t numUsedVgprs ; uint32_t numUsedSgprs ; uint32_t ldsSizePerLocalWorkGroup ; size_t ldsUsageSizeInBytes ; size_t scratchMemUsageInBytes ; } VkShaderResourceUsageAMD ; typedef struct VkShaderStatisticsInfoAMD { VkShaderStageFlags shaderStageMask ; VkShaderResourceUsageAMD resourceUsage ; uint32_t numPhysicalVgprs ; uint32_t numPhysicalSgprs ; uint32_t numAvailableVgprs ; uint32_t numAvailableSgprs ; uint32_t computeWorkGroupSize [ 3 ] ; } VkShaderStatisticsInfoAMD ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetShaderInfoAMD)(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t* pInfoSize, void* pInfo)"
  },
  {
    "label": "vkGetShaderInfoAMD()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t* pInfoSize, void* pInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_AMD_shader_image_load_store_lod 1 # define VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION 1 # define VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME \" VK_AMD_shader_image_load_store_lod \" # define VK_NV_corner_sampled_image 1 # define VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION 2 # define VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME \" VK_NV_corner_sampled_image \" typedef struct VkPhysicalDeviceCornerSampledImageFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 cornerSampledImage ; } VkPhysicalDeviceCornerSampledImageFeaturesNV ; # define VK_IMG_format_pvrtc 1 # define VK_IMG_FORMAT_PVRTC_SPEC_VERSION 1 # define VK_IMG_FORMAT_PVRTC_EXTENSION_NAME \" VK_IMG_format_pvrtc \" # define VK_NV_external_memory_capabilities 1 # define VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION 1 # define VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME \" VK_NV_external_memory_capabilities \" typedef enum VkExternalMemoryHandleTypeFlagBitsNV { VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 0 x00000001,VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 0 x00000002,VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 0 x00000004,VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 0 x00000008,VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 0 x7FFFFFFF } VkExternalMemoryHandleTypeFlagBitsNV ; typedef VkFlags VkExternalMemoryHandleTypeFlagsNV ; typedef enum VkExternalMemoryFeatureFlagBitsNV { VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 0 x00000001,VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 0 x00000002,VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 0 x00000004,VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 0 x7FFFFFFF } VkExternalMemoryFeatureFlagBitsNV ; typedef VkFlags VkExternalMemoryFeatureFlagsNV ; typedef struct VkExternalImageFormatPropertiesNV { VkImageFormatProperties imageFormatProperties ; VkExternalMemoryFeatureFlagsNV externalMemoryFeatures ; VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes ; VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes ; } VkExternalImageFormatPropertiesNV ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceExternalImageFormatPropertiesNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NV_external_memory 1 # define VK_NV_EXTERNAL_MEMORY_SPEC_VERSION 1 # define VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME \" VK_NV_external_memory \" typedef struct VkExternalMemoryImageCreateInfoNV { VkStructureType sType ; const void* pNext ; VkExternalMemoryHandleTypeFlagsNV handleTypes ; } VkExternalMemoryImageCreateInfoNV ; typedef struct VkExportMemoryAllocateInfoNV { VkStructureType sType ; const void* pNext ; VkExternalMemoryHandleTypeFlagsNV handleTypes ; } VkExportMemoryAllocateInfoNV ; # define VK_EXT_validation_flags 1 # define VK_EXT_VALIDATION_FLAGS_SPEC_VERSION 3 # define VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME \" VK_EXT_validation_flags \" typedef enum VkValidationCheckEXT { VK_VALIDATION_CHECK_ALL_EXT = 0,VK_VALIDATION_CHECK_SHADERS_EXT = 1,VK_VALIDATION_CHECK_MAX_ENUM_EXT = 0 x7FFFFFFF } VkValidationCheckEXT ; typedef struct VkValidationFlagsEXT { VkStructureType sType ; const void* pNext ; uint32_t disabledValidationCheckCount ; const VkValidationCheckEXT* pDisabledValidationChecks ; } VkValidationFlagsEXT ; # define VK_EXT_shader_subgroup_ballot 1 # define VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION 1 # define VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME \" VK_EXT_shader_subgroup_ballot \" # define VK_EXT_shader_subgroup_vote 1 # define VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION 1 # define VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME \" VK_EXT_shader_subgroup_vote \" # define VK_EXT_texture_compression_astc_hdr 1 # define VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION 1 # define VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME \" VK_EXT_texture_compression_astc_hdr \" typedef VkPhysicalDeviceTextureCompressionASTCHDRFeatures VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT ; # define VK_EXT_astc_decode_mode 1 # define VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION 1 # define VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME \" VK_EXT_astc_decode_mode \" typedef struct VkImageViewASTCDecodeModeEXT { VkStructureType sType ; const void* pNext ; VkFormat decodeMode ; } VkImageViewASTCDecodeModeEXT ; typedef struct VkPhysicalDeviceASTCDecodeFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 decodeModeSharedExponent ; } VkPhysicalDeviceASTCDecodeFeaturesEXT ; # define VK_EXT_pipeline_robustness 1 # define VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION 1 # define VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME \" VK_EXT_pipeline_robustness \" typedef enum VkPipelineRobustnessBufferBehaviorEXT { VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = 0,VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = 1,VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = 2,VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = 3,VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT = 0 x7FFFFFFF } VkPipelineRobustnessBufferBehaviorEXT ; typedef enum VkPipelineRobustnessImageBehaviorEXT { VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = 0,VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = 1,VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = 2,VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = 3,VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT = 0 x7FFFFFFF } VkPipelineRobustnessImageBehaviorEXT ; typedef struct VkPhysicalDevicePipelineRobustnessFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 pipelineRobustness ; } VkPhysicalDevicePipelineRobustnessFeaturesEXT ; typedef struct VkPhysicalDevicePipelineRobustnessPropertiesEXT { VkStructureType sType ; void* pNext ; VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessStorageBuffers ; VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessUniformBuffers ; VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessVertexInputs ; VkPipelineRobustnessImageBehaviorEXT defaultRobustnessImages ; } VkPhysicalDevicePipelineRobustnessPropertiesEXT ; typedef struct VkPipelineRobustnessCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkPipelineRobustnessBufferBehaviorEXT storageBuffers ; VkPipelineRobustnessBufferBehaviorEXT uniformBuffers ; VkPipelineRobustnessBufferBehaviorEXT vertexInputs ; VkPipelineRobustnessImageBehaviorEXT images ; } VkPipelineRobustnessCreateInfoEXT ; # define VK_EXT_conditional_rendering 1 # define VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION 2 # define VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME \" VK_EXT_conditional_rendering \" typedef enum VkConditionalRenderingFlagBitsEXT { VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 0 x00000001,VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkConditionalRenderingFlagBitsEXT ; typedef VkFlags VkConditionalRenderingFlagsEXT ; typedef struct VkConditionalRenderingBeginInfoEXT { VkStructureType sType ; const void* pNext ; VkBuffer buffer ; VkDeviceSize offset ; VkConditionalRenderingFlagsEXT flags ; } VkConditionalRenderingBeginInfoEXT ; typedef struct VkPhysicalDeviceConditionalRenderingFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 conditionalRendering ; VkBool32 inheritedConditionalRendering ; } VkPhysicalDeviceConditionalRenderingFeaturesEXT ; typedef struct VkCommandBufferInheritanceConditionalRenderingInfoEXT { VkStructureType sType ; const void* pNext ; VkBool32 conditionalRenderingEnable ; } VkCommandBufferInheritanceConditionalRenderingInfoEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBeginConditionalRenderingEXT)(VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdEndConditionalRenderingEXT)(VkCommandBuffer commandBuffer)"
  },
  {
    "label": "vkCmdBeginConditionalRenderingEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin)"
  },
  {
    "label": "vkCmdEndConditionalRenderingEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NV_clip_space_w_scaling 1 # define VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION 1 # define VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME \" VK_NV_clip_space_w_scaling \" typedef struct VkViewportWScalingNV { float xcoeff ; float ycoeff ; } VkViewportWScalingNV ; typedef struct VkPipelineViewportWScalingStateCreateInfoNV { VkStructureType sType ; const void* pNext ; VkBool32 viewportWScalingEnable ; uint32_t viewportCount ; const VkViewportWScalingNV* pViewportWScalings ; } VkPipelineViewportWScalingStateCreateInfoNV ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetViewportWScalingNV)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV* pViewportWScalings)"
  },
  {
    "label": "vkCmdSetViewportWScalingNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV* pViewportWScalings)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_direct_mode_display 1 # define VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION 1 # define VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME \" VK_EXT_direct_mode_display \" typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkReleaseDisplayEXT)(VkPhysicalDevice physicalDevice, VkDisplayKHR display)"
  },
  {
    "label": "vkReleaseDisplayEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_display_surface_counter 1 # define VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION 1 # define VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME \" VK_EXT_display_surface_counter \" typedef enum VkSurfaceCounterFlagBitsEXT { VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 0 x00000001,VK_SURFACE_COUNTER_VBLANK_EXT = VK_SURFACE_COUNTER_VBLANK_BIT_EXT,VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkSurfaceCounterFlagBitsEXT ; typedef VkFlags VkSurfaceCounterFlagsEXT ; typedef struct VkSurfaceCapabilities2EXT { VkStructureType sType ; void* pNext ; uint32_t minImageCount ; uint32_t maxImageCount ; VkExtent2D currentExtent ; VkExtent2D minImageExtent ; VkExtent2D maxImageExtent ; uint32_t maxImageArrayLayers ; VkSurfaceTransformFlagsKHR supportedTransforms ; VkSurfaceTransformFlagBitsKHR currentTransform ; VkCompositeAlphaFlagsKHR supportedCompositeAlpha ; VkImageUsageFlags supportedUsageFlags ; VkSurfaceCounterFlagsEXT supportedSurfaceCounters ; } VkSurfaceCapabilities2EXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities)"
  },
  {
    "label": "vkGetPhysicalDeviceSurfaceCapabilities2EXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_display_control 1 # define VK_EXT_DISPLAY_CONTROL_SPEC_VERSION 1 # define VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME \" VK_EXT_display_control \" typedef enum VkDisplayPowerStateEXT { VK_DISPLAY_POWER_STATE_OFF_EXT = 0,VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,VK_DISPLAY_POWER_STATE_ON_EXT = 2,VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkDisplayPowerStateEXT ; typedef enum VkDeviceEventTypeEXT { VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkDeviceEventTypeEXT ; typedef enum VkDisplayEventTypeEXT { VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkDisplayEventTypeEXT ; typedef struct VkDisplayPowerInfoEXT { VkStructureType sType ; const void* pNext ; VkDisplayPowerStateEXT powerState ; } VkDisplayPowerInfoEXT ; typedef struct VkDeviceEventInfoEXT { VkStructureType sType ; const void* pNext ; VkDeviceEventTypeEXT deviceEvent ; } VkDeviceEventInfoEXT ; typedef struct VkDisplayEventInfoEXT { VkStructureType sType ; const void* pNext ; VkDisplayEventTypeEXT displayEvent ; } VkDisplayEventInfoEXT ; typedef struct VkSwapchainCounterCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkSurfaceCounterFlagsEXT surfaceCounters ; } VkSwapchainCounterCreateInfoEXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkDisplayPowerControlEXT)(VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT* pDisplayPowerInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkRegisterDeviceEventEXT)(VkDevice device, const VkDeviceEventInfoEXT* pDeviceEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkRegisterDisplayEventEXT)(VkDevice device, VkDisplayKHR display, const VkDisplayEventInfoEXT* pDisplayEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetSwapchainCounterEXT)(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t* pCounterValue)"
  },
  {
    "label": "vkDisplayPowerControlEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT* pDisplayPowerInfo)"
  },
  {
    "label": "vkRegisterDeviceEventEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkRegisterDeviceEventEXT(VkDevice device, const VkDeviceEventInfoEXT* pDeviceEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence)"
  },
  {
    "label": "vkRegisterDisplayEventEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, const VkDisplayEventInfoEXT* pDisplayEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence)"
  },
  {
    "label": "vkGetSwapchainCounterEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t* pCounterValue)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_GOOGLE_display_timing 1 # define VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION 1 # define VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME \" VK_GOOGLE_display_timing \" typedef struct VkRefreshCycleDurationGOOGLE { uint64_t refreshDuration ; } VkRefreshCycleDurationGOOGLE ; typedef struct VkPastPresentationTimingGOOGLE { uint32_t presentID ; uint64_t desiredPresentTime ; uint64_t actualPresentTime ; uint64_t earliestPresentTime ; uint64_t presentMargin ; } VkPastPresentationTimingGOOGLE ; typedef struct VkPresentTimeGOOGLE { uint32_t presentID ; uint64_t desiredPresentTime ; } VkPresentTimeGOOGLE ; typedef struct VkPresentTimesInfoGOOGLE { VkStructureType sType ; const void* pNext ; uint32_t swapchainCount ; const VkPresentTimeGOOGLE* pTimes ; } VkPresentTimesInfoGOOGLE ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetRefreshCycleDurationGOOGLE)(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPastPresentationTimingGOOGLE)(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings)"
  },
  {
    "label": "vkGetRefreshCycleDurationGOOGLE()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties)"
  },
  {
    "label": "vkGetPastPresentationTimingGOOGLE()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NV_sample_mask_override_coverage 1 # define VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION 1 # define VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME \" VK_NV_sample_mask_override_coverage \" # define VK_NV_geometry_shader_passthrough 1 # define VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION 1 # define VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME \" VK_NV_geometry_shader_passthrough \" # define VK_NV_viewport_array2 1 # define VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION 1 # define VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME \" VK_NV_viewport_array2 \" # define VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION # define VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME # define VK_NVX_multiview_per_view_attributes 1 # define VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION 1 # define VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME \" VK_NVX_multiview_per_view_attributes \" typedef struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX { VkStructureType sType ; void* pNext ; VkBool32 perViewPositionAllComponents ; } VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX ; # define VK_NV_viewport_swizzle 1 # define VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION 1 # define VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME \" VK_NV_viewport_swizzle \" typedef enum VkViewportCoordinateSwizzleNV { VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 0 x7FFFFFFF } VkViewportCoordinateSwizzleNV ; typedef VkFlags VkPipelineViewportSwizzleStateCreateFlagsNV ; typedef struct VkViewportSwizzleNV { VkViewportCoordinateSwizzleNV x ; VkViewportCoordinateSwizzleNV y ; VkViewportCoordinateSwizzleNV z ; VkViewportCoordinateSwizzleNV w ; } VkViewportSwizzleNV ; typedef struct VkPipelineViewportSwizzleStateCreateInfoNV { VkStructureType sType ; const void* pNext ; VkPipelineViewportSwizzleStateCreateFlagsNV flags ; uint32_t viewportCount ; const VkViewportSwizzleNV* pViewportSwizzles ; } VkPipelineViewportSwizzleStateCreateInfoNV ; # define VK_EXT_discard_rectangles 1 # define VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION 2 # define VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME \" VK_EXT_discard_rectangles \" typedef enum VkDiscardRectangleModeEXT { VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkDiscardRectangleModeEXT ; typedef VkFlags VkPipelineDiscardRectangleStateCreateFlagsEXT ; typedef struct VkPhysicalDeviceDiscardRectanglePropertiesEXT { VkStructureType sType ; void* pNext ; uint32_t maxDiscardRectangles ; } VkPhysicalDeviceDiscardRectanglePropertiesEXT ; typedef struct VkPipelineDiscardRectangleStateCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkPipelineDiscardRectangleStateCreateFlagsEXT flags ; VkDiscardRectangleModeEXT discardRectangleMode ; uint32_t discardRectangleCount ; const VkRect2D* pDiscardRectangles ; } VkPipelineDiscardRectangleStateCreateInfoEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDiscardRectangleEXT)(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D* pDiscardRectangles)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDiscardRectangleEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDiscardRectangleModeEXT)(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode)"
  },
  {
    "label": "vkCmdSetDiscardRectangleEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D* pDiscardRectangles)"
  },
  {
    "label": "vkCmdSetDiscardRectangleEnableEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDiscardRectangleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable)"
  },
  {
    "label": "vkCmdSetDiscardRectangleModeEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDiscardRectangleModeEXT(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_conservative_rasterization 1 # define VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION 1 # define VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME \" VK_EXT_conservative_rasterization \" typedef enum VkConservativeRasterizationModeEXT { VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkConservativeRasterizationModeEXT ; typedef VkFlags VkPipelineRasterizationConservativeStateCreateFlagsEXT ; typedef struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT { VkStructureType sType ; void* pNext ; float primitiveOverestimationSize ; float maxExtraPrimitiveOverestimationSize ; float extraPrimitiveOverestimationSizeGranularity ; VkBool32 primitiveUnderestimation ; VkBool32 conservativePointAndLineRasterization ; VkBool32 degenerateTrianglesRasterized ; VkBool32 degenerateLinesRasterized ; VkBool32 fullyCoveredFragmentShaderInputVariable ; VkBool32 conservativeRasterizationPostDepthCoverage ; } VkPhysicalDeviceConservativeRasterizationPropertiesEXT ; typedef struct VkPipelineRasterizationConservativeStateCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkPipelineRasterizationConservativeStateCreateFlagsEXT flags ; VkConservativeRasterizationModeEXT conservativeRasterizationMode ; float extraPrimitiveOverestimationSize ; } VkPipelineRasterizationConservativeStateCreateInfoEXT ; # define VK_EXT_depth_clip_enable 1 # define VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION 1 # define VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME \" VK_EXT_depth_clip_enable \" typedef VkFlags VkPipelineRasterizationDepthClipStateCreateFlagsEXT ; typedef struct VkPhysicalDeviceDepthClipEnableFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 depthClipEnable ; } VkPhysicalDeviceDepthClipEnableFeaturesEXT ; typedef struct VkPipelineRasterizationDepthClipStateCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags ; VkBool32 depthClipEnable ; } VkPipelineRasterizationDepthClipStateCreateInfoEXT ; # define VK_EXT_swapchain_colorspace 1 # define VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION 5 # define VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME \" VK_EXT_swapchain_colorspace \" # define VK_EXT_hdr_metadata 1 # define VK_EXT_HDR_METADATA_SPEC_VERSION 3 # define VK_EXT_HDR_METADATA_EXTENSION_NAME \" VK_EXT_hdr_metadata \" typedef struct VkXYColorEXT { float x ; float y ; } VkXYColorEXT ; typedef struct VkHdrMetadataEXT { VkStructureType sType ; const void* pNext ; VkXYColorEXT displayPrimaryRed ; VkXYColorEXT displayPrimaryGreen ; VkXYColorEXT displayPrimaryBlue ; VkXYColorEXT whitePoint ; float maxLuminance ; float minLuminance ; float maxContentLightLevel ; float maxFrameAverageLightLevel ; } VkHdrMetadataEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkSetHdrMetadataEXT)(VkDevice device, uint32_t swapchainCount, const VkSwapchainKHR* pSwapchains, const VkHdrMetadataEXT* pMetadata)"
  },
  {
    "label": "vkSetHdrMetadataEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkSetHdrMetadataEXT(VkDevice device, uint32_t swapchainCount, const VkSwapchainKHR* pSwapchains, const VkHdrMetadataEXT* pMetadata)"
  },
  {
    "label": "VK_QUEUE_FAMILY_FOREIGN_EXT()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_IMG_relaxed_line_rasterization 1 # define VK_IMG_RELAXED_LINE_RASTERIZATION_SPEC_VERSION 1 # define VK_IMG_RELAXED_LINE_RASTERIZATION_EXTENSION_NAME \" VK_IMG_relaxed_line_rasterization \" typedef struct VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG { VkStructureType sType ; void* pNext ; VkBool32 relaxedLineRasterization ; } VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG ; # define VK_EXT_external_memory_dma_buf 1 # define VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION 1 # define VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME \" VK_EXT_external_memory_dma_buf \" # define VK_EXT_queue_family_foreign 1 # define VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION 1 # define VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME \" VK_EXT_queue_family_foreign \" # define)",
    "insertText": "VK_QUEUE_FAMILY_FOREIGN_EXT(~2U) #define VK_EXT_debug_utils 1 VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDebugUtilsMessengerEXT)"
  },
  {
    "label": "VkBool32()",
    "kind": "Method",
    "detail": "Function (typedef enum VkDebugUtilsMessageSeverityFlagBitsEXT { VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 0 x00000001,VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 0 x00000010,VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 0 x00000100,VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 0 x00001000,VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkDebugUtilsMessageSeverityFlagBitsEXT ; typedef enum VkDebugUtilsMessageTypeFlagBitsEXT { VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 0 x00000001,VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 0 x00000002,VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 0 x00000004,VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = 0 x00000008,VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkDebugUtilsMessageTypeFlagBitsEXT ; typedef VkFlags VkDebugUtilsMessageTypeFlagsEXT ; typedef VkFlags VkDebugUtilsMessageSeverityFlagsEXT ; typedef VkFlags VkDebugUtilsMessengerCreateFlagsEXT ; typedef struct VkDebugUtilsLabelEXT { VkStructureType sType ; const void* pNext ; const char* pLabelName ; float color [ 4 ] ; } VkDebugUtilsLabelEXT ; typedef struct VkDebugUtilsObjectNameInfoEXT { VkStructureType sType ; const void* pNext ; VkObjectType objectType ; uint64_t objectHandle ; const char* pObjectName ; } VkDebugUtilsObjectNameInfoEXT ; typedef struct VkDebugUtilsMessengerCallbackDataEXT { VkStructureType sType ; const void* pNext ; VkDebugUtilsMessengerCallbackDataFlagsEXT flags ; const char* pMessageIdName ; int32_t messageIdNumber ; const char* pMessage ; uint32_t queueLabelCount ; const VkDebugUtilsLabelEXT* pQueueLabels ; uint32_t cmdBufLabelCount ; const VkDebugUtilsLabelEXT* pCmdBufLabels ; uint32_t objectCount ; const VkDebugUtilsObjectNameInfoEXT* pObjects ; } VkDebugUtilsMessengerCallbackDataEXT ; typedef)",
    "insertText": "VkBool32(VKAPI_PTR *PFN_vkDebugUtilsMessengerCallbackEXT)( VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData, void* pUserData)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef struct VkDebugUtilsMessengerCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkDebugUtilsMessengerCreateFlagsEXT flags ; VkDebugUtilsMessageSeverityFlagsEXT messageSeverity ; VkDebugUtilsMessageTypeFlagsEXT messageType ; PFN_vkDebugUtilsMessengerCallbackEXT pfnUserCallback ; void* pUserData ; } VkDebugUtilsMessengerCreateInfoEXT ; typedef struct VkDebugUtilsObjectTagInfoEXT { VkStructureType sType ; const void* pNext ; VkObjectType objectType ; uint64_t objectHandle ; uint64_t tagName ; size_t tagSize ; const void* pTag ; } VkDebugUtilsObjectTagInfoEXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkSetDebugUtilsObjectNameEXT)(VkDevice device, const VkDebugUtilsObjectNameInfoEXT* pNameInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkSetDebugUtilsObjectTagEXT)(VkDevice device, const VkDebugUtilsObjectTagInfoEXT* pTagInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkQueueBeginDebugUtilsLabelEXT)(VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkQueueEndDebugUtilsLabelEXT)(VkQueue queue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkQueueInsertDebugUtilsLabelEXT)(VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBeginDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdEndDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdInsertDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateDebugUtilsMessengerEXT)(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pMessenger)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyDebugUtilsMessengerEXT)(VkInstance instance, VkDebugUtilsMessengerEXT messenger, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkSubmitDebugUtilsMessageEXT)(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData)"
  },
  {
    "label": "vkSetDebugUtilsObjectNameEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkSetDebugUtilsObjectNameEXT(VkDevice device, const VkDebugUtilsObjectNameInfoEXT* pNameInfo)"
  },
  {
    "label": "vkSetDebugUtilsObjectTagEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkSetDebugUtilsObjectTagEXT(VkDevice device, const VkDebugUtilsObjectTagInfoEXT* pTagInfo)"
  },
  {
    "label": "vkQueueBeginDebugUtilsLabelEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo)"
  },
  {
    "label": "vkQueueEndDebugUtilsLabelEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkQueueEndDebugUtilsLabelEXT(VkQueue queue)"
  },
  {
    "label": "vkQueueInsertDebugUtilsLabelEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo)"
  },
  {
    "label": "vkCmdBeginDebugUtilsLabelEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo)"
  },
  {
    "label": "vkCmdEndDebugUtilsLabelEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)"
  },
  {
    "label": "vkCmdInsertDebugUtilsLabelEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo)"
  },
  {
    "label": "vkCreateDebugUtilsMessengerEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateDebugUtilsMessengerEXT(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pMessenger)"
  },
  {
    "label": "vkDestroyDebugUtilsMessengerEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkSubmitDebugUtilsMessageEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_sampler_filter_minmax 1 # define VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION 2 # define VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME \" VK_EXT_sampler_filter_minmax \" typedef VkSamplerReductionMode VkSamplerReductionModeEXT ; typedef VkSamplerReductionModeCreateInfo VkSamplerReductionModeCreateInfoEXT ; typedef VkPhysicalDeviceSamplerFilterMinmaxProperties VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT ; # define VK_AMD_gpu_shader_int16 1 # define VK_AMD_GPU_SHADER_INT16_SPEC_VERSION 2 # define VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME \" VK_AMD_gpu_shader_int16 \" # define VK_AMD_mixed_attachment_samples 1 # define VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION 1 # define VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME \" VK_AMD_mixed_attachment_samples \" # define VK_AMD_shader_fragment_mask 1 # define VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION 1 # define VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME \" VK_AMD_shader_fragment_mask \" # define VK_EXT_inline_uniform_block 1 # define VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION 1 # define VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME \" VK_EXT_inline_uniform_block \" typedef VkPhysicalDeviceInlineUniformBlockFeatures VkPhysicalDeviceInlineUniformBlockFeaturesEXT ; typedef VkPhysicalDeviceInlineUniformBlockProperties VkPhysicalDeviceInlineUniformBlockPropertiesEXT ; typedef VkWriteDescriptorSetInlineUniformBlock VkWriteDescriptorSetInlineUniformBlockEXT ; typedef VkDescriptorPoolInlineUniformBlockCreateInfo VkDescriptorPoolInlineUniformBlockCreateInfoEXT ; # define VK_EXT_shader_stencil_export 1 # define VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION 1 # define VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME \" VK_EXT_shader_stencil_export \" # define VK_EXT_sample_locations 1 # define VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION 1 # define VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME \" VK_EXT_sample_locations \" typedef struct VkSampleLocationEXT { float x ; float y ; } VkSampleLocationEXT ; typedef struct VkSampleLocationsInfoEXT { VkStructureType sType ; const void* pNext ; VkSampleCountFlagBits sampleLocationsPerPixel ; VkExtent2D sampleLocationGridSize ; uint32_t sampleLocationsCount ; const VkSampleLocationEXT* pSampleLocations ; } VkSampleLocationsInfoEXT ; typedef struct VkAttachmentSampleLocationsEXT { uint32_t attachmentIndex ; VkSampleLocationsInfoEXT sampleLocationsInfo ; } VkAttachmentSampleLocationsEXT ; typedef struct VkSubpassSampleLocationsEXT { uint32_t subpassIndex ; VkSampleLocationsInfoEXT sampleLocationsInfo ; } VkSubpassSampleLocationsEXT ; typedef struct VkRenderPassSampleLocationsBeginInfoEXT { VkStructureType sType ; const void* pNext ; uint32_t attachmentInitialSampleLocationsCount ; const VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations ; uint32_t postSubpassSampleLocationsCount ; const VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations ; } VkRenderPassSampleLocationsBeginInfoEXT ; typedef struct VkPipelineSampleLocationsStateCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkBool32 sampleLocationsEnable ; VkSampleLocationsInfoEXT sampleLocationsInfo ; } VkPipelineSampleLocationsStateCreateInfoEXT ; typedef struct VkPhysicalDeviceSampleLocationsPropertiesEXT { VkStructureType sType ; void* pNext ; VkSampleCountFlags sampleLocationSampleCounts ; VkExtent2D maxSampleLocationGridSize ; float sampleLocationCoordinateRange [ 2 ] ; uint32_t sampleLocationSubPixelBits ; VkBool32 variableSampleLocations ; } VkPhysicalDeviceSampleLocationsPropertiesEXT ; typedef struct VkMultisamplePropertiesEXT { VkStructureType sType ; void* pNext ; VkExtent2D maxSampleLocationGridSize ; } VkMultisamplePropertiesEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetSampleLocationsEXT)(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT* pSampleLocationsInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT)(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties)"
  },
  {
    "label": "vkCmdSetSampleLocationsEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT* pSampleLocationsInfo)"
  },
  {
    "label": "vkGetPhysicalDeviceMultisamplePropertiesEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_blend_operation_advanced 1 # define VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION 2 # define VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME \" VK_EXT_blend_operation_advanced \" typedef enum VkBlendOverlapEXT { VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,VK_BLEND_OVERLAP_DISJOINT_EXT = 1,VK_BLEND_OVERLAP_CONJOINT_EXT = 2,VK_BLEND_OVERLAP_MAX_ENUM_EXT = 0 x7FFFFFFF } VkBlendOverlapEXT ; typedef struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 advancedBlendCoherentOperations ; } VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT ; typedef struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT { VkStructureType sType ; void* pNext ; uint32_t advancedBlendMaxColorAttachments ; VkBool32 advancedBlendIndependentBlend ; VkBool32 advancedBlendNonPremultipliedSrcColor ; VkBool32 advancedBlendNonPremultipliedDstColor ; VkBool32 advancedBlendCorrelatedOverlap ; VkBool32 advancedBlendAllOperations ; } VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT ; typedef struct VkPipelineColorBlendAdvancedStateCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkBool32 srcPremultiplied ; VkBool32 dstPremultiplied ; VkBlendOverlapEXT blendOverlap ; } VkPipelineColorBlendAdvancedStateCreateInfoEXT ; # define VK_NV_fragment_coverage_to_color 1 # define VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION 1 # define VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME \" VK_NV_fragment_coverage_to_color \" typedef VkFlags VkPipelineCoverageToColorStateCreateFlagsNV ; typedef struct VkPipelineCoverageToColorStateCreateInfoNV { VkStructureType sType ; const void* pNext ; VkPipelineCoverageToColorStateCreateFlagsNV flags ; VkBool32 coverageToColorEnable ; uint32_t coverageToColorLocation ; } VkPipelineCoverageToColorStateCreateInfoNV ; # define VK_NV_framebuffer_mixed_samples 1 # define VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION 1 # define VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME \" VK_NV_framebuffer_mixed_samples \" typedef enum VkCoverageModulationModeNV { VK_COVERAGE_MODULATION_MODE_NONE_NV = 0,VK_COVERAGE_MODULATION_MODE_RGB_NV = 1,VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2,VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3,VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 0 x7FFFFFFF } VkCoverageModulationModeNV ; typedef VkFlags VkPipelineCoverageModulationStateCreateFlagsNV ; typedef struct VkPipelineCoverageModulationStateCreateInfoNV { VkStructureType sType ; const void* pNext ; VkPipelineCoverageModulationStateCreateFlagsNV flags ; VkCoverageModulationModeNV coverageModulationMode ; VkBool32 coverageModulationTableEnable ; uint32_t coverageModulationTableCount ; const float* pCoverageModulationTable ; } VkPipelineCoverageModulationStateCreateInfoNV ; # define VK_NV_fill_rectangle 1 # define VK_NV_FILL_RECTANGLE_SPEC_VERSION 1 # define VK_NV_FILL_RECTANGLE_EXTENSION_NAME \" VK_NV_fill_rectangle \" # define VK_NV_shader_sm_builtins 1 # define VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION 1 # define VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME \" VK_NV_shader_sm_builtins \" typedef struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV { VkStructureType sType ; void* pNext ; uint32_t shaderSMCount ; uint32_t shaderWarpsPerSM ; } VkPhysicalDeviceShaderSMBuiltinsPropertiesNV ; typedef struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 shaderSMBuiltins ; } VkPhysicalDeviceShaderSMBuiltinsFeaturesNV ; # define VK_EXT_post_depth_coverage 1 # define VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION 1 # define VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME \" VK_EXT_post_depth_coverage \" # define VK_EXT_image_drm_format_modifier 1 # define VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION 2 # define VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME \" VK_EXT_image_drm_format_modifier \" typedef struct VkDrmFormatModifierPropertiesEXT { uint64_t drmFormatModifier ; uint32_t drmFormatModifierPlaneCount ; VkFormatFeatureFlags drmFormatModifierTilingFeatures ; } VkDrmFormatModifierPropertiesEXT ; typedef struct VkDrmFormatModifierPropertiesListEXT { VkStructureType sType ; void* pNext ; uint32_t drmFormatModifierCount ; VkDrmFormatModifierPropertiesEXT* pDrmFormatModifierProperties ; } VkDrmFormatModifierPropertiesListEXT ; typedef struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT { VkStructureType sType ; const void* pNext ; uint64_t drmFormatModifier ; VkSharingMode sharingMode ; uint32_t queueFamilyIndexCount ; const uint32_t* pQueueFamilyIndices ; } VkPhysicalDeviceImageDrmFormatModifierInfoEXT ; typedef struct VkImageDrmFormatModifierListCreateInfoEXT { VkStructureType sType ; const void* pNext ; uint32_t drmFormatModifierCount ; const uint64_t* pDrmFormatModifiers ; } VkImageDrmFormatModifierListCreateInfoEXT ; typedef struct VkImageDrmFormatModifierExplicitCreateInfoEXT { VkStructureType sType ; const void* pNext ; uint64_t drmFormatModifier ; uint32_t drmFormatModifierPlaneCount ; const VkSubresourceLayout* pPlaneLayouts ; } VkImageDrmFormatModifierExplicitCreateInfoEXT ; typedef struct VkImageDrmFormatModifierPropertiesEXT { VkStructureType sType ; void* pNext ; uint64_t drmFormatModifier ; } VkImageDrmFormatModifierPropertiesEXT ; typedef struct VkDrmFormatModifierProperties2EXT { uint64_t drmFormatModifier ; uint32_t drmFormatModifierPlaneCount ; VkFormatFeatureFlags2 drmFormatModifierTilingFeatures ; } VkDrmFormatModifierProperties2EXT ; typedef struct VkDrmFormatModifierPropertiesList2EXT { VkStructureType sType ; void* pNext ; uint32_t drmFormatModifierCount ; VkDrmFormatModifierProperties2EXT* pDrmFormatModifierProperties ; } VkDrmFormatModifierPropertiesList2EXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetImageDrmFormatModifierPropertiesEXT)(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* pProperties)"
  },
  {
    "label": "vkGetImageDrmFormatModifierPropertiesEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* pProperties)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_validation_cache 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkValidationCacheEXT)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 0 x7FFFFFFF } VkValidationCacheHeaderVersionEXT ; typedef VkFlags VkValidationCacheCreateFlagsEXT ; typedef struct VkValidationCacheCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkValidationCacheCreateFlagsEXT flags ; size_t initialDataSize ; const void* pInitialData ; } VkValidationCacheCreateInfoEXT ; typedef struct VkShaderModuleValidationCacheCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkValidationCacheEXT validationCache ; } VkShaderModuleValidationCacheCreateInfoEXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateValidationCacheEXT)(VkDevice device, const VkValidationCacheCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkValidationCacheEXT* pValidationCache)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyValidationCacheEXT)(VkDevice device, VkValidationCacheEXT validationCache, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkMergeValidationCachesEXT)(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, const VkValidationCacheEXT* pSrcCaches)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetValidationCacheDataEXT)(VkDevice device, VkValidationCacheEXT validationCache, size_t* pDataSize, void* pData)"
  },
  {
    "label": "vkCreateValidationCacheEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateValidationCacheEXT(VkDevice device, const VkValidationCacheCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkValidationCacheEXT* pValidationCache)"
  },
  {
    "label": "vkDestroyValidationCacheEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkMergeValidationCachesEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkMergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, const VkValidationCacheEXT* pSrcCaches)"
  },
  {
    "label": "vkGetValidationCacheDataEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, size_t* pDataSize, void* pData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_descriptor_indexing 1 # define VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION 2 # define VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME \" VK_EXT_descriptor_indexing \" typedef VkDescriptorBindingFlagBits VkDescriptorBindingFlagBitsEXT ; typedef VkDescriptorBindingFlags VkDescriptorBindingFlagsEXT ; typedef VkDescriptorSetLayoutBindingFlagsCreateInfo VkDescriptorSetLayoutBindingFlagsCreateInfoEXT ; typedef VkPhysicalDeviceDescriptorIndexingFeatures VkPhysicalDeviceDescriptorIndexingFeaturesEXT ; typedef VkPhysicalDeviceDescriptorIndexingProperties VkPhysicalDeviceDescriptorIndexingPropertiesEXT ; typedef VkDescriptorSetVariableDescriptorCountAllocateInfo VkDescriptorSetVariableDescriptorCountAllocateInfoEXT ; typedef VkDescriptorSetVariableDescriptorCountLayoutSupport VkDescriptorSetVariableDescriptorCountLayoutSupportEXT ; # define VK_EXT_shader_viewport_index_layer 1 # define VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION 1 # define VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME \" VK_EXT_shader_viewport_index_layer \" # define VK_NV_shading_rate_image 1 # define VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION 3 # define VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME \" VK_NV_shading_rate_image \" typedef enum VkShadingRatePaletteEntryNV { VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 1 0,VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 1 1,VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 0 x7FFFFFFF } VkShadingRatePaletteEntryNV ; typedef enum VkCoarseSampleOrderTypeNV { VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 0 x7FFFFFFF } VkCoarseSampleOrderTypeNV ; typedef struct VkShadingRatePaletteNV { uint32_t shadingRatePaletteEntryCount ; const VkShadingRatePaletteEntryNV* pShadingRatePaletteEntries ; } VkShadingRatePaletteNV ; typedef struct VkPipelineViewportShadingRateImageStateCreateInfoNV { VkStructureType sType ; const void* pNext ; VkBool32 shadingRateImageEnable ; uint32_t viewportCount ; const VkShadingRatePaletteNV* pShadingRatePalettes ; } VkPipelineViewportShadingRateImageStateCreateInfoNV ; typedef struct VkPhysicalDeviceShadingRateImageFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 shadingRateImage ; VkBool32 shadingRateCoarseSampleOrder ; } VkPhysicalDeviceShadingRateImageFeaturesNV ; typedef struct VkPhysicalDeviceShadingRateImagePropertiesNV { VkStructureType sType ; void* pNext ; VkExtent2D shadingRateTexelSize ; uint32_t shadingRatePaletteSize ; uint32_t shadingRateMaxCoarseSamples ; } VkPhysicalDeviceShadingRateImagePropertiesNV ; typedef struct VkCoarseSampleLocationNV { uint32_t pixelX ; uint32_t pixelY ; uint32_t sample ; } VkCoarseSampleLocationNV ; typedef struct VkCoarseSampleOrderCustomNV { VkShadingRatePaletteEntryNV shadingRate ; uint32_t sampleCount ; uint32_t sampleLocationCount ; const VkCoarseSampleLocationNV* pSampleLocations ; } VkCoarseSampleOrderCustomNV ; typedef struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV { VkStructureType sType ; const void* pNext ; VkCoarseSampleOrderTypeNV sampleOrderType ; uint32_t customSampleOrderCount ; const VkCoarseSampleOrderCustomNV* pCustomSampleOrders ; } VkPipelineViewportCoarseSampleOrderStateCreateInfoNV ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBindShadingRateImageNV)(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetViewportShadingRatePaletteNV)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV* pShadingRatePalettes)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetCoarseSampleOrderNV)(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV* pCustomSampleOrders)"
  },
  {
    "label": "vkCmdBindShadingRateImageNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)"
  },
  {
    "label": "vkCmdSetViewportShadingRatePaletteNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV* pShadingRatePalettes)"
  },
  {
    "label": "vkCmdSetCoarseSampleOrderNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV* pCustomSampleOrders)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NV_ray_tracing 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkAccelerationStructureNV) #define VK_NV_RAY_TRACING_SPEC_VERSION 3 #define VK_NV_RAY_TRACING_EXTENSION_NAME \"VK_NV_ray_tracing\" #define VK_SHADER_UNUSED_KHR (~0U)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0,VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1,VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2,VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR,VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR,VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR,VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 0 x7FFFFFFF } VkRayTracingShaderGroupTypeKHR ; typedef VkRayTracingShaderGroupTypeKHR VkRayTracingShaderGroupTypeNV ; typedef enum VkGeometryTypeKHR { VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0,VK_GEOMETRY_TYPE_AABBS_KHR = 1,VK_GEOMETRY_TYPE_INSTANCES_KHR = 2,VK_GEOMETRY_TYPE_TRIANGLES_NV = VK_GEOMETRY_TYPE_TRIANGLES_KHR,VK_GEOMETRY_TYPE_AABBS_NV = VK_GEOMETRY_TYPE_AABBS_KHR,VK_GEOMETRY_TYPE_MAX_ENUM_KHR = 0 x7FFFFFFF } VkGeometryTypeKHR ; typedef VkGeometryTypeKHR VkGeometryTypeNV ; typedef enum VkAccelerationStructureTypeKHR { VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0,VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1,VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2,VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR,VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR,VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 0 x7FFFFFFF } VkAccelerationStructureTypeKHR ; typedef VkAccelerationStructureTypeKHR VkAccelerationStructureTypeNV ; typedef enum VkCopyAccelerationStructureModeKHR { VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0,VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1,VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2,VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3,VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR,VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR,VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 0 x7FFFFFFF } VkCopyAccelerationStructureModeKHR ; typedef VkCopyAccelerationStructureModeKHR VkCopyAccelerationStructureModeNV ; typedef enum VkAccelerationStructureMemoryRequirementsTypeNV { VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0,VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1,VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2,VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 0 x7FFFFFFF } VkAccelerationStructureMemoryRequirementsTypeNV ; typedef enum VkGeometryFlagBitsKHR { VK_GEOMETRY_OPAQUE_BIT_KHR = 0 x00000001,VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 0 x00000002,VK_GEOMETRY_OPAQUE_BIT_NV = VK_GEOMETRY_OPAQUE_BIT_KHR,VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR,VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkGeometryFlagBitsKHR ; typedef VkFlags VkGeometryFlagsKHR ; typedef VkGeometryFlagsKHR VkGeometryFlagsNV ; typedef VkGeometryFlagBitsKHR VkGeometryFlagBitsNV ; typedef enum VkGeometryInstanceFlagBitsKHR { VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 0 x00000001,VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 0 x00000002,VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 0 x00000004,VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 0 x00000008,VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = 0 x00000010,VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = 0 x00000020,VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR,VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR,VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR,VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR,VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR,VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkGeometryInstanceFlagBitsKHR ; typedef VkFlags VkGeometryInstanceFlagsKHR ; typedef VkGeometryInstanceFlagsKHR VkGeometryInstanceFlagsNV ; typedef VkGeometryInstanceFlagBitsKHR VkGeometryInstanceFlagBitsNV ; typedef enum VkBuildAccelerationStructureFlagBitsKHR { VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 0 x00000001,VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 0 x00000002,VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 0 x00000004,VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 0 x00000008,VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 0 x00000010,VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = 0 x00000020,VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = 0 x00000040,VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = 0 x00000080,VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = 0 x00000100,# ifdef VK_ENABLE_BETA_EXTENSIONS VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISPLACEMENT_MICROMAP_UPDATE_NV = 0 x00000200,# endif VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR = 0 x00000800,VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR,VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR,VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR,VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR,VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR,VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkBuildAccelerationStructureFlagBitsKHR ; typedef VkFlags VkBuildAccelerationStructureFlagsKHR ; typedef VkBuildAccelerationStructureFlagsKHR VkBuildAccelerationStructureFlagsNV ; typedef VkBuildAccelerationStructureFlagBitsKHR VkBuildAccelerationStructureFlagBitsNV ; typedef struct VkRayTracingShaderGroupCreateInfoNV { VkStructureType sType ; const void* pNext ; VkRayTracingShaderGroupTypeKHR type ; uint32_t generalShader ; uint32_t closestHitShader ; uint32_t anyHitShader ; uint32_t intersectionShader ; } VkRayTracingShaderGroupCreateInfoNV ; typedef struct VkRayTracingPipelineCreateInfoNV { VkStructureType sType ; const void* pNext ; VkPipelineCreateFlags flags ; uint32_t stageCount ; const VkPipelineShaderStageCreateInfo* pStages ; uint32_t groupCount ; const VkRayTracingShaderGroupCreateInfoNV* pGroups ; uint32_t maxRecursionDepth ; VkPipelineLayout layout ; VkPipeline basePipelineHandle ; int32_t basePipelineIndex ; } VkRayTracingPipelineCreateInfoNV ; typedef struct VkGeometryTrianglesNV { VkStructureType sType ; const void* pNext ; VkBuffer vertexData ; VkDeviceSize vertexOffset ; uint32_t vertexCount ; VkDeviceSize vertexStride ; VkFormat vertexFormat ; VkBuffer indexData ; VkDeviceSize indexOffset ; uint32_t indexCount ; VkIndexType indexType ; VkBuffer transformData ; VkDeviceSize transformOffset ; } VkGeometryTrianglesNV ; typedef struct VkGeometryAABBNV { VkStructureType sType ; const void* pNext ; VkBuffer aabbData ; uint32_t numAABBs ; uint32_t stride ; VkDeviceSize offset ; } VkGeometryAABBNV ; typedef struct VkGeometryDataNV { VkGeometryTrianglesNV triangles ; VkGeometryAABBNV aabbs ; } VkGeometryDataNV ; typedef struct VkGeometryNV { VkStructureType sType ; const void* pNext ; VkGeometryTypeKHR geometryType ; VkGeometryDataNV geometry ; VkGeometryFlagsKHR flags ; } VkGeometryNV ; typedef struct VkAccelerationStructureInfoNV { VkStructureType sType ; const void* pNext ; VkAccelerationStructureTypeNV type ; VkBuildAccelerationStructureFlagsNV flags ; uint32_t instanceCount ; uint32_t geometryCount ; const VkGeometryNV* pGeometries ; } VkAccelerationStructureInfoNV ; typedef struct VkAccelerationStructureCreateInfoNV { VkStructureType sType ; const void* pNext ; VkDeviceSize compactedSize ; VkAccelerationStructureInfoNV info ; } VkAccelerationStructureCreateInfoNV ; typedef struct VkBindAccelerationStructureMemoryInfoNV { VkStructureType sType ; const void* pNext ; VkAccelerationStructureNV accelerationStructure ; VkDeviceMemory memory ; VkDeviceSize memoryOffset ; uint32_t deviceIndexCount ; const uint32_t* pDeviceIndices ; } VkBindAccelerationStructureMemoryInfoNV ; typedef struct VkWriteDescriptorSetAccelerationStructureNV { VkStructureType sType ; const void* pNext ; uint32_t accelerationStructureCount ; const VkAccelerationStructureNV* pAccelerationStructures ; } VkWriteDescriptorSetAccelerationStructureNV ; typedef struct VkAccelerationStructureMemoryRequirementsInfoNV { VkStructureType sType ; const void* pNext ; VkAccelerationStructureMemoryRequirementsTypeNV type ; VkAccelerationStructureNV accelerationStructure ; } VkAccelerationStructureMemoryRequirementsInfoNV ; typedef struct VkPhysicalDeviceRayTracingPropertiesNV { VkStructureType sType ; void* pNext ; uint32_t shaderGroupHandleSize ; uint32_t maxRecursionDepth ; uint32_t maxShaderGroupStride ; uint32_t shaderGroupBaseAlignment ; uint64_t maxGeometryCount ; uint64_t maxInstanceCount ; uint64_t maxTriangleCount ; uint32_t maxDescriptorSetAccelerationStructures ; } VkPhysicalDeviceRayTracingPropertiesNV ; typedef struct VkTransformMatrixKHR { float matrix [ 3 ] [ 4 ] ; } VkTransformMatrixKHR ; typedef VkTransformMatrixKHR VkTransformMatrixNV ; typedef struct VkAabbPositionsKHR { float minX ; float minY ; float minZ ; float maxX ; float maxY ; float maxZ ; } VkAabbPositionsKHR ; typedef VkAabbPositionsKHR VkAabbPositionsNV ; typedef struct VkAccelerationStructureInstanceKHR { VkTransformMatrixKHR transform ; uint32_t instanceCustomIndex : 2 4 ; uint32_t mask : 8 ; uint32_t instanceShaderBindingTableRecordOffset : 2 4 ; VkGeometryInstanceFlagsKHR flags : 8 ; uint64_t accelerationStructureReference ; } VkAccelerationStructureInstanceKHR ; typedef VkAccelerationStructureInstanceKHR VkAccelerationStructureInstanceNV ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateAccelerationStructureNV)(VkDevice device, const VkAccelerationStructureCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkAccelerationStructureNV* pAccelerationStructure)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyAccelerationStructureNV)(VkDevice device, VkAccelerationStructureNV accelerationStructure, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetAccelerationStructureMemoryRequirementsNV)(VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkBindAccelerationStructureMemoryNV)(VkDevice device, uint32_t bindInfoCount, const VkBindAccelerationStructureMemoryInfoNV* pBindInfos)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBuildAccelerationStructureNV)(VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyAccelerationStructureNV)(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdTraceRaysNV)(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateRayTracingPipelinesNV)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoNV* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetRayTracingShaderGroupHandlesKHR)(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetRayTracingShaderGroupHandlesNV)(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetAccelerationStructureHandleNV)(VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void* pData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdWriteAccelerationStructuresPropertiesNV)(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureNV* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCompileDeferredNV)(VkDevice device, VkPipeline pipeline, uint32_t shader)"
  },
  {
    "label": "vkCreateAccelerationStructureNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateAccelerationStructureNV(VkDevice device, const VkAccelerationStructureCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkAccelerationStructureNV* pAccelerationStructure)"
  },
  {
    "label": "vkDestroyAccelerationStructureNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkGetAccelerationStructureMemoryRequirementsNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements)"
  },
  {
    "label": "vkBindAccelerationStructureMemoryNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkBindAccelerationStructureMemoryNV(VkDevice device, uint32_t bindInfoCount, const VkBindAccelerationStructureMemoryInfoNV* pBindInfos)"
  },
  {
    "label": "vkCmdBuildAccelerationStructureNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset)"
  },
  {
    "label": "vkCmdCopyAccelerationStructureNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode)"
  },
  {
    "label": "vkCmdTraceRaysNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth)"
  },
  {
    "label": "vkCreateRayTracingPipelinesNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoNV* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)"
  },
  {
    "label": "vkGetRayTracingShaderGroupHandlesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetRayTracingShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData)"
  },
  {
    "label": "vkGetRayTracingShaderGroupHandlesNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData)"
  },
  {
    "label": "vkGetAccelerationStructureHandleNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void* pData)"
  },
  {
    "label": "vkCmdWriteAccelerationStructuresPropertiesNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureNV* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)"
  },
  {
    "label": "vkCompileDeferredNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32_t shader)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NV_representative_fragment_test 1 # define VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION 2 # define VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME \" VK_NV_representative_fragment_test \" typedef struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 representativeFragmentTest ; } VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV ; typedef struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV { VkStructureType sType ; const void* pNext ; VkBool32 representativeFragmentTestEnable ; } VkPipelineRepresentativeFragmentTestStateCreateInfoNV ; # define VK_EXT_filter_cubic 1 # define VK_EXT_FILTER_CUBIC_SPEC_VERSION 3 # define VK_EXT_FILTER_CUBIC_EXTENSION_NAME \" VK_EXT_filter_cubic \" typedef struct VkPhysicalDeviceImageViewImageFormatInfoEXT { VkStructureType sType ; void* pNext ; VkImageViewType imageViewType ; } VkPhysicalDeviceImageViewImageFormatInfoEXT ; typedef struct VkFilterCubicImageViewImageFormatPropertiesEXT { VkStructureType sType ; void* pNext ; VkBool32 filterCubic ; VkBool32 filterCubicMinmax ; } VkFilterCubicImageViewImageFormatPropertiesEXT ; # define VK_QCOM_render_pass_shader_resolve 1 # define VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION 4 # define VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME \" VK_QCOM_render_pass_shader_resolve \" # define VK_EXT_global_priority 1 # define VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION 2 # define VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME \" VK_EXT_global_priority \" typedef VkQueueGlobalPriorityKHR VkQueueGlobalPriorityEXT ; typedef VkDeviceQueueGlobalPriorityCreateInfoKHR VkDeviceQueueGlobalPriorityCreateInfoEXT ; # define VK_EXT_external_memory_host 1 # define VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION 1 # define VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME \" VK_EXT_external_memory_host \" typedef struct VkImportMemoryHostPointerInfoEXT { VkStructureType sType ; const void* pNext ; VkExternalMemoryHandleTypeFlagBits handleType ; void* pHostPointer ; } VkImportMemoryHostPointerInfoEXT ; typedef struct VkMemoryHostPointerPropertiesEXT { VkStructureType sType ; void* pNext ; uint32_t memoryTypeBits ; } VkMemoryHostPointerPropertiesEXT ; typedef struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT { VkStructureType sType ; void* pNext ; VkDeviceSize minImportedHostPointerAlignment ; } VkPhysicalDeviceExternalMemoryHostPropertiesEXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetMemoryHostPointerPropertiesEXT)(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties)"
  },
  {
    "label": "vkGetMemoryHostPointerPropertiesEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_AMD_buffer_marker 1 # define VK_AMD_BUFFER_MARKER_SPEC_VERSION 1 # define VK_AMD_BUFFER_MARKER_EXTENSION_NAME \" VK_AMD_buffer_marker \" typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdWriteBufferMarkerAMD)(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)"
  },
  {
    "label": "vkCmdWriteBufferMarkerAMD()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_AMD_pipeline_compiler_control 1 # define VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION 1 # define VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME \" VK_AMD_pipeline_compiler_control \" typedef enum VkPipelineCompilerControlFlagBitsAMD { VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 0 x7FFFFFFF } VkPipelineCompilerControlFlagBitsAMD ; typedef VkFlags VkPipelineCompilerControlFlagsAMD ; typedef struct VkPipelineCompilerControlCreateInfoAMD { VkStructureType sType ; const void* pNext ; VkPipelineCompilerControlFlagsAMD compilerControlFlags ; } VkPipelineCompilerControlCreateInfoAMD ; # define VK_EXT_calibrated_timestamps 1 # define VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION 2 # define VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME \" VK_EXT_calibrated_timestamps \" typedef VkTimeDomainKHR VkTimeDomainEXT ; typedef VkCalibratedTimestampInfoKHR VkCalibratedTimestampInfoEXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT)(VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainKHR* pTimeDomains)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetCalibratedTimestampsEXT)(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoKHR* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation)"
  },
  {
    "label": "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainKHR* pTimeDomains)"
  },
  {
    "label": "vkGetCalibratedTimestampsEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetCalibratedTimestampsEXT(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoKHR* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_AMD_shader_core_properties 1 # define VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION 2 # define VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME \" VK_AMD_shader_core_properties \" typedef struct VkPhysicalDeviceShaderCorePropertiesAMD { VkStructureType sType ; void* pNext ; uint32_t shaderEngineCount ; uint32_t shaderArraysPerEngineCount ; uint32_t computeUnitsPerShaderArray ; uint32_t simdPerComputeUnit ; uint32_t wavefrontsPerSimd ; uint32_t wavefrontSize ; uint32_t sgprsPerSimd ; uint32_t minSgprAllocation ; uint32_t maxSgprAllocation ; uint32_t sgprAllocationGranularity ; uint32_t vgprsPerSimd ; uint32_t minVgprAllocation ; uint32_t maxVgprAllocation ; uint32_t vgprAllocationGranularity ; } VkPhysicalDeviceShaderCorePropertiesAMD ; # define VK_AMD_memory_overallocation_behavior 1 # define VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION 1 # define VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME \" VK_AMD_memory_overallocation_behavior \" typedef enum VkMemoryOverallocationBehaviorAMD { VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 0 x7FFFFFFF } VkMemoryOverallocationBehaviorAMD ; typedef struct VkDeviceMemoryOverallocationCreateInfoAMD { VkStructureType sType ; const void* pNext ; VkMemoryOverallocationBehaviorAMD overallocationBehavior ; } VkDeviceMemoryOverallocationCreateInfoAMD ; # define VK_EXT_vertex_attribute_divisor 1 # define VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION 3 # define VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME \" VK_EXT_vertex_attribute_divisor \" typedef struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT { VkStructureType sType ; void* pNext ; uint32_t maxVertexAttribDivisor ; } VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT ; typedef VkVertexInputBindingDivisorDescriptionKHR VkVertexInputBindingDivisorDescriptionEXT ; typedef VkPipelineVertexInputDivisorStateCreateInfoKHR VkPipelineVertexInputDivisorStateCreateInfoEXT ; typedef VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT ; # define VK_EXT_pipeline_creation_feedback 1 # define VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION 1 # define VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME \" VK_EXT_pipeline_creation_feedback \" typedef VkPipelineCreationFeedbackFlagBits VkPipelineCreationFeedbackFlagBitsEXT ; typedef VkPipelineCreationFeedbackFlags VkPipelineCreationFeedbackFlagsEXT ; typedef VkPipelineCreationFeedbackCreateInfo VkPipelineCreationFeedbackCreateInfoEXT ; typedef VkPipelineCreationFeedback VkPipelineCreationFeedbackEXT ; # define VK_NV_shader_subgroup_partitioned 1 # define VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION 1 # define VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME \" VK_NV_shader_subgroup_partitioned \" # define VK_NV_compute_shader_derivatives 1 # define VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION 1 # define VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME \" VK_NV_compute_shader_derivatives \" typedef struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 computeDerivativeGroupQuads ; VkBool32 computeDerivativeGroupLinear ; } VkPhysicalDeviceComputeShaderDerivativesFeaturesNV ; # define VK_NV_mesh_shader 1 # define VK_NV_MESH_SHADER_SPEC_VERSION 1 # define VK_NV_MESH_SHADER_EXTENSION_NAME \" VK_NV_mesh_shader \" typedef struct VkPhysicalDeviceMeshShaderFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 taskShader ; VkBool32 meshShader ; } VkPhysicalDeviceMeshShaderFeaturesNV ; typedef struct VkPhysicalDeviceMeshShaderPropertiesNV { VkStructureType sType ; void* pNext ; uint32_t maxDrawMeshTasksCount ; uint32_t maxTaskWorkGroupInvocations ; uint32_t maxTaskWorkGroupSize [ 3 ] ; uint32_t maxTaskTotalMemorySize ; uint32_t maxTaskOutputCount ; uint32_t maxMeshWorkGroupInvocations ; uint32_t maxMeshWorkGroupSize [ 3 ] ; uint32_t maxMeshTotalMemorySize ; uint32_t maxMeshOutputVertices ; uint32_t maxMeshOutputPrimitives ; uint32_t maxMeshMultiviewViewCount ; uint32_t meshOutputPerVertexGranularity ; uint32_t meshOutputPerPrimitiveGranularity ; } VkPhysicalDeviceMeshShaderPropertiesNV ; typedef struct VkDrawMeshTasksIndirectCommandNV { uint32_t taskCount ; uint32_t firstTask ; } VkDrawMeshTasksIndirectCommandNV ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawMeshTasksNV)(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawMeshTasksIndirectNV)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawMeshTasksIndirectCountNV)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)"
  },
  {
    "label": "vkCmdDrawMeshTasksNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask)"
  },
  {
    "label": "vkCmdDrawMeshTasksIndirectNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)"
  },
  {
    "label": "vkCmdDrawMeshTasksIndirectCountNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NV_fragment_shader_barycentric 1 # define VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION 1 # define VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME \" VK_NV_fragment_shader_barycentric \" typedef VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV ; # define VK_NV_shader_image_footprint 1 # define VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION 2 # define VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME \" VK_NV_shader_image_footprint \" typedef struct VkPhysicalDeviceShaderImageFootprintFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 imageFootprint ; } VkPhysicalDeviceShaderImageFootprintFeaturesNV ; # define VK_NV_scissor_exclusive 1 # define VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION 2 # define VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME \" VK_NV_scissor_exclusive \" typedef struct VkPipelineViewportExclusiveScissorStateCreateInfoNV { VkStructureType sType ; const void* pNext ; uint32_t exclusiveScissorCount ; const VkRect2D* pExclusiveScissors ; } VkPipelineViewportExclusiveScissorStateCreateInfoNV ; typedef struct VkPhysicalDeviceExclusiveScissorFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 exclusiveScissor ; } VkPhysicalDeviceExclusiveScissorFeaturesNV ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetExclusiveScissorEnableNV)(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkBool32* pExclusiveScissorEnables)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetExclusiveScissorNV)(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D* pExclusiveScissors)"
  },
  {
    "label": "vkCmdSetExclusiveScissorEnableNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetExclusiveScissorEnableNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkBool32* pExclusiveScissorEnables)"
  },
  {
    "label": "vkCmdSetExclusiveScissorNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D* pExclusiveScissors)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NV_device_diagnostic_checkpoints 1 # define VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION 2 # define VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME \" VK_NV_device_diagnostic_checkpoints \" typedef struct VkQueueFamilyCheckpointPropertiesNV { VkStructureType sType ; void* pNext ; VkPipelineStageFlags checkpointExecutionStageMask ; } VkQueueFamilyCheckpointPropertiesNV ; typedef struct VkCheckpointDataNV { VkStructureType sType ; void* pNext ; VkPipelineStageFlagBits stage ; void* pCheckpointMarker ; } VkCheckpointDataNV ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetCheckpointNV)(VkCommandBuffer commandBuffer, const void* pCheckpointMarker)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetQueueCheckpointDataNV)(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData)"
  },
  {
    "label": "vkCmdSetCheckpointNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, const void* pCheckpointMarker)"
  },
  {
    "label": "vkGetQueueCheckpointDataNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetQueueCheckpointDataNV(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_INTEL_shader_integer_functions2 1 # define VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION 1 # define VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME \" VK_INTEL_shader_integer_functions2 \" typedef struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL { VkStructureType sType ; void* pNext ; VkBool32 shaderIntegerFunctions2 ; } VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL ; # define VK_INTEL_performance_query 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPerformanceConfigurationINTEL)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 0 x7FFFFFFF } VkPerformanceConfigurationTypeINTEL ; typedef enum VkQueryPoolSamplingModeINTEL { VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0,VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 0 x7FFFFFFF } VkQueryPoolSamplingModeINTEL ; typedef enum VkPerformanceOverrideTypeINTEL { VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0,VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 0 x7FFFFFFF } VkPerformanceOverrideTypeINTEL ; typedef enum VkPerformanceParameterTypeINTEL { VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0,VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 0 x7FFFFFFF } VkPerformanceParameterTypeINTEL ; typedef enum VkPerformanceValueTypeINTEL { VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0,VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1,VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2,VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3,VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4,VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 0 x7FFFFFFF } VkPerformanceValueTypeINTEL ; typedef union VkPerformanceValueDataINTEL { uint32_t value32 ; uint64_t value64 ; float valueFloat ; VkBool32 valueBool ; const char* valueString ; } VkPerformanceValueDataINTEL ; typedef struct VkPerformanceValueINTEL { VkPerformanceValueTypeINTEL type ; VkPerformanceValueDataINTEL data ; } VkPerformanceValueINTEL ; typedef struct VkInitializePerformanceApiInfoINTEL { VkStructureType sType ; const void* pNext ; void* pUserData ; } VkInitializePerformanceApiInfoINTEL ; typedef struct VkQueryPoolPerformanceQueryCreateInfoINTEL { VkStructureType sType ; const void* pNext ; VkQueryPoolSamplingModeINTEL performanceCountersSampling ; } VkQueryPoolPerformanceQueryCreateInfoINTEL ; typedef VkQueryPoolPerformanceQueryCreateInfoINTEL VkQueryPoolCreateInfoINTEL ; typedef struct VkPerformanceMarkerInfoINTEL { VkStructureType sType ; const void* pNext ; uint64_t marker ; } VkPerformanceMarkerInfoINTEL ; typedef struct VkPerformanceStreamMarkerInfoINTEL { VkStructureType sType ; const void* pNext ; uint32_t marker ; } VkPerformanceStreamMarkerInfoINTEL ; typedef struct VkPerformanceOverrideInfoINTEL { VkStructureType sType ; const void* pNext ; VkPerformanceOverrideTypeINTEL type ; VkBool32 enable ; uint64_t parameter ; } VkPerformanceOverrideInfoINTEL ; typedef struct VkPerformanceConfigurationAcquireInfoINTEL { VkStructureType sType ; const void* pNext ; VkPerformanceConfigurationTypeINTEL type ; } VkPerformanceConfigurationAcquireInfoINTEL ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkInitializePerformanceApiINTEL)(VkDevice device, const VkInitializePerformanceApiInfoINTEL* pInitializeInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkUninitializePerformanceApiINTEL)(VkDevice device)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCmdSetPerformanceMarkerINTEL)(VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL* pMarkerInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCmdSetPerformanceStreamMarkerINTEL)(VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCmdSetPerformanceOverrideINTEL)(VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL* pOverrideInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkAcquirePerformanceConfigurationINTEL)(VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VkPerformanceConfigurationINTEL* pConfiguration)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkReleasePerformanceConfigurationINTEL)(VkDevice device, VkPerformanceConfigurationINTEL configuration)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkQueueSetPerformanceConfigurationINTEL)(VkQueue queue, VkPerformanceConfigurationINTEL configuration)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPerformanceParameterINTEL)(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue)"
  },
  {
    "label": "vkInitializePerformanceApiINTEL()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkInitializePerformanceApiINTEL(VkDevice device, const VkInitializePerformanceApiInfoINTEL* pInitializeInfo)"
  },
  {
    "label": "vkUninitializePerformanceApiINTEL()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkUninitializePerformanceApiINTEL(VkDevice device)"
  },
  {
    "label": "vkCmdSetPerformanceMarkerINTEL()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL* pMarkerInfo)"
  },
  {
    "label": "vkCmdSetPerformanceStreamMarkerINTEL()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo)"
  },
  {
    "label": "vkCmdSetPerformanceOverrideINTEL()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL* pOverrideInfo)"
  },
  {
    "label": "vkAcquirePerformanceConfigurationINTEL()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkAcquirePerformanceConfigurationINTEL(VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VkPerformanceConfigurationINTEL* pConfiguration)"
  },
  {
    "label": "vkReleasePerformanceConfigurationINTEL()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration)"
  },
  {
    "label": "vkQueueSetPerformanceConfigurationINTEL()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration)"
  },
  {
    "label": "vkGetPerformanceParameterINTEL()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_pci_bus_info 1 # define VK_EXT_PCI_BUS_INFO_SPEC_VERSION 2 # define VK_EXT_PCI_BUS_INFO_EXTENSION_NAME \" VK_EXT_pci_bus_info \" typedef struct VkPhysicalDevicePCIBusInfoPropertiesEXT { VkStructureType sType ; void* pNext ; uint32_t pciDomain ; uint32_t pciBus ; uint32_t pciDevice ; uint32_t pciFunction ; } VkPhysicalDevicePCIBusInfoPropertiesEXT ; # define VK_AMD_display_native_hdr 1 # define VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION 1 # define VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME \" VK_AMD_display_native_hdr \" typedef struct VkDisplayNativeHdrSurfaceCapabilitiesAMD { VkStructureType sType ; void* pNext ; VkBool32 localDimmingSupport ; } VkDisplayNativeHdrSurfaceCapabilitiesAMD ; typedef struct VkSwapchainDisplayNativeHdrCreateInfoAMD { VkStructureType sType ; const void* pNext ; VkBool32 localDimmingEnable ; } VkSwapchainDisplayNativeHdrCreateInfoAMD ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkSetLocalDimmingAMD)(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable)"
  },
  {
    "label": "vkSetLocalDimmingAMD()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable)"
  },
  {
    "label": "VkDeviceAddress()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_fragment_density_map 1 # define VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION 2 # define VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME \" VK_EXT_fragment_density_map \" typedef struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 fragmentDensityMap ; VkBool32 fragmentDensityMapDynamic ; VkBool32 fragmentDensityMapNonSubsampledImages ; } VkPhysicalDeviceFragmentDensityMapFeaturesEXT ; typedef struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT { VkStructureType sType ; void* pNext ; VkExtent2D minFragmentDensityTexelSize ; VkExtent2D maxFragmentDensityTexelSize ; VkBool32 fragmentDensityInvocations ; } VkPhysicalDeviceFragmentDensityMapPropertiesEXT ; typedef struct VkRenderPassFragmentDensityMapCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkAttachmentReference fragmentDensityMapAttachment ; } VkRenderPassFragmentDensityMapCreateInfoEXT ; # define VK_EXT_scalar_block_layout 1 # define VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION 1 # define VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME \" VK_EXT_scalar_block_layout \" typedef VkPhysicalDeviceScalarBlockLayoutFeatures VkPhysicalDeviceScalarBlockLayoutFeaturesEXT ; # define VK_GOOGLE_hlsl_functionality1 1 # define VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION 1 # define VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME \" VK_GOOGLE_hlsl_functionality1 \" # define VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION # define VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME # define VK_GOOGLE_decorate_string 1 # define VK_GOOGLE_DECORATE_STRING_SPEC_VERSION 1 # define VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME \" VK_GOOGLE_decorate_string \" # define VK_EXT_subgroup_size_control 1 # define VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION 2 # define VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME \" VK_EXT_subgroup_size_control \" typedef VkPhysicalDeviceSubgroupSizeControlFeatures VkPhysicalDeviceSubgroupSizeControlFeaturesEXT ; typedef VkPhysicalDeviceSubgroupSizeControlProperties VkPhysicalDeviceSubgroupSizeControlPropertiesEXT ; typedef VkPipelineShaderStageRequiredSubgroupSizeCreateInfo VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT ; # define VK_AMD_shader_core_properties2 1 # define VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION 1 # define VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME \" VK_AMD_shader_core_properties2 \" typedef enum VkShaderCorePropertiesFlagBitsAMD { VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 0 x7FFFFFFF } VkShaderCorePropertiesFlagBitsAMD ; typedef VkFlags VkShaderCorePropertiesFlagsAMD ; typedef struct VkPhysicalDeviceShaderCoreProperties2AMD { VkStructureType sType ; void* pNext ; VkShaderCorePropertiesFlagsAMD shaderCoreFeatures ; uint32_t activeComputeUnitCount ; } VkPhysicalDeviceShaderCoreProperties2AMD ; # define VK_AMD_device_coherent_memory 1 # define VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION 1 # define VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME \" VK_AMD_device_coherent_memory \" typedef struct VkPhysicalDeviceCoherentMemoryFeaturesAMD { VkStructureType sType ; void* pNext ; VkBool32 deviceCoherentMemory ; } VkPhysicalDeviceCoherentMemoryFeaturesAMD ; # define VK_EXT_shader_image_atomic_int64 1 # define VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION 1 # define VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME \" VK_EXT_shader_image_atomic_int64 \" typedef struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 shaderImageInt64Atomics ; VkBool32 sparseImageInt64Atomics ; } VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT ; # define VK_EXT_memory_budget 1 # define VK_EXT_MEMORY_BUDGET_SPEC_VERSION 1 # define VK_EXT_MEMORY_BUDGET_EXTENSION_NAME \" VK_EXT_memory_budget \" typedef struct VkPhysicalDeviceMemoryBudgetPropertiesEXT { VkStructureType sType ; void* pNext ; VkDeviceSize heapBudget [ VK_MAX_MEMORY_HEAPS ] ; VkDeviceSize heapUsage [ VK_MAX_MEMORY_HEAPS ] ; } VkPhysicalDeviceMemoryBudgetPropertiesEXT ; # define VK_EXT_memory_priority 1 # define VK_EXT_MEMORY_PRIORITY_SPEC_VERSION 1 # define VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME \" VK_EXT_memory_priority \" typedef struct VkPhysicalDeviceMemoryPriorityFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 memoryPriority ; } VkPhysicalDeviceMemoryPriorityFeaturesEXT ; typedef struct VkMemoryPriorityAllocateInfoEXT { VkStructureType sType ; const void* pNext ; float priority ; } VkMemoryPriorityAllocateInfoEXT ; # define VK_NV_dedicated_allocation_image_aliasing 1 # define VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION 1 # define VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME \" VK_NV_dedicated_allocation_image_aliasing \" typedef struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 dedicatedAllocationImageAliasing ; } VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV ; # define VK_EXT_buffer_device_address 1 # define VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION 2 # define VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME \" VK_EXT_buffer_device_address \" typedef struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 bufferDeviceAddress ; VkBool32 bufferDeviceAddressCaptureReplay ; VkBool32 bufferDeviceAddressMultiDevice ; } VkPhysicalDeviceBufferDeviceAddressFeaturesEXT ; typedef VkPhysicalDeviceBufferDeviceAddressFeaturesEXT VkPhysicalDeviceBufferAddressFeaturesEXT ; typedef VkBufferDeviceAddressInfo VkBufferDeviceAddressInfoEXT ; typedef struct VkBufferDeviceAddressCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkDeviceAddress deviceAddress ; } VkBufferDeviceAddressCreateInfoEXT ; typedef)",
    "insertText": "VkDeviceAddress(VKAPI_PTR *PFN_vkGetBufferDeviceAddressEXT)(VkDevice device, const VkBufferDeviceAddressInfo* pInfo)"
  },
  {
    "label": "vkGetBufferDeviceAddressEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkDeviceAddress VKAPI_CALL)",
    "insertText": "vkGetBufferDeviceAddressEXT(VkDevice device, const VkBufferDeviceAddressInfo* pInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_tooling_info 1 # define VK_EXT_TOOLING_INFO_SPEC_VERSION 1 # define VK_EXT_TOOLING_INFO_EXTENSION_NAME \" VK_EXT_tooling_info \" typedef VkToolPurposeFlagBits VkToolPurposeFlagBitsEXT ; typedef VkToolPurposeFlags VkToolPurposeFlagsEXT ; typedef VkPhysicalDeviceToolProperties VkPhysicalDeviceToolPropertiesEXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceToolPropertiesEXT)(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceToolPropertiesEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_separate_stencil_usage 1 # define VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION 1 # define VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME \" VK_EXT_separate_stencil_usage \" typedef VkImageStencilUsageCreateInfo VkImageStencilUsageCreateInfoEXT ; # define VK_EXT_validation_features 1 # define VK_EXT_VALIDATION_FEATURES_SPEC_VERSION 6 # define VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME \" VK_EXT_validation_features \" typedef enum VkValidationFeatureEnableEXT { VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3,VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4,VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkValidationFeatureEnableEXT ; typedef enum VkValidationFeatureDisableEXT { VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7,VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkValidationFeatureDisableEXT ; typedef struct VkValidationFeaturesEXT { VkStructureType sType ; const void* pNext ; uint32_t enabledValidationFeatureCount ; const VkValidationFeatureEnableEXT* pEnabledValidationFeatures ; uint32_t disabledValidationFeatureCount ; const VkValidationFeatureDisableEXT* pDisabledValidationFeatures ; } VkValidationFeaturesEXT ; # define VK_NV_cooperative_matrix 1 # define VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION 1 # define VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME \" VK_NV_cooperative_matrix \" typedef VkComponentTypeKHR VkComponentTypeNV ; typedef VkScopeKHR VkScopeNV ; typedef struct VkCooperativeMatrixPropertiesNV { VkStructureType sType ; void* pNext ; uint32_t MSize ; uint32_t NSize ; uint32_t KSize ; VkComponentTypeNV AType ; VkComponentTypeNV BType ; VkComponentTypeNV CType ; VkComponentTypeNV DType ; VkScopeNV scope ; } VkCooperativeMatrixPropertiesNV ; typedef struct VkPhysicalDeviceCooperativeMatrixFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 cooperativeMatrix ; VkBool32 cooperativeMatrixRobustBufferAccess ; } VkPhysicalDeviceCooperativeMatrixFeaturesNV ; typedef struct VkPhysicalDeviceCooperativeMatrixPropertiesNV { VkStructureType sType ; void* pNext ; VkShaderStageFlags cooperativeMatrixSupportedStages ; } VkPhysicalDeviceCooperativeMatrixPropertiesNV ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties)"
  },
  {
    "label": "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NV_coverage_reduction_mode 1 # define VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION 1 # define VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME \" VK_NV_coverage_reduction_mode \" typedef enum VkCoverageReductionModeNV { VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0,VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 0 x7FFFFFFF } VkCoverageReductionModeNV ; typedef VkFlags VkPipelineCoverageReductionStateCreateFlagsNV ; typedef struct VkPhysicalDeviceCoverageReductionModeFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 coverageReductionMode ; } VkPhysicalDeviceCoverageReductionModeFeaturesNV ; typedef struct VkPipelineCoverageReductionStateCreateInfoNV { VkStructureType sType ; const void* pNext ; VkPipelineCoverageReductionStateCreateFlagsNV flags ; VkCoverageReductionModeNV coverageReductionMode ; } VkPipelineCoverageReductionStateCreateInfoNV ; typedef struct VkFramebufferMixedSamplesCombinationNV { VkStructureType sType ; void* pNext ; VkCoverageReductionModeNV coverageReductionMode ; VkSampleCountFlagBits rasterizationSamples ; VkSampleCountFlags depthStencilSamples ; VkSampleCountFlags colorSamples ; } VkFramebufferMixedSamplesCombinationNV ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV)(VkPhysicalDevice physicalDevice, uint32_t* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations)"
  },
  {
    "label": "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint32_t* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_fragment_shader_interlock 1 # define VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION 1 # define VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME \" VK_EXT_fragment_shader_interlock \" typedef struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 fragmentShaderSampleInterlock ; VkBool32 fragmentShaderPixelInterlock ; VkBool32 fragmentShaderShadingRateInterlock ; } VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT ; # define VK_EXT_ycbcr_image_arrays 1 # define VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION 1 # define VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME \" VK_EXT_ycbcr_image_arrays \" typedef struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 ycbcrImageArrays ; } VkPhysicalDeviceYcbcrImageArraysFeaturesEXT ; # define VK_EXT_provoking_vertex 1 # define VK_EXT_PROVOKING_VERTEX_SPEC_VERSION 1 # define VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME \" VK_EXT_provoking_vertex \" typedef enum VkProvokingVertexModeEXT { VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0,VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1,VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkProvokingVertexModeEXT ; typedef struct VkPhysicalDeviceProvokingVertexFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 provokingVertexLast ; VkBool32 transformFeedbackPreservesProvokingVertex ; } VkPhysicalDeviceProvokingVertexFeaturesEXT ; typedef struct VkPhysicalDeviceProvokingVertexPropertiesEXT { VkStructureType sType ; void* pNext ; VkBool32 provokingVertexModePerPipeline ; VkBool32 transformFeedbackPreservesTriangleFanProvokingVertex ; } VkPhysicalDeviceProvokingVertexPropertiesEXT ; typedef struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkProvokingVertexModeEXT provokingVertexMode ; } VkPipelineRasterizationProvokingVertexStateCreateInfoEXT ; # define VK_EXT_headless_surface 1 # define VK_EXT_HEADLESS_SURFACE_SPEC_VERSION 1 # define VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME \" VK_EXT_headless_surface \" typedef VkFlags VkHeadlessSurfaceCreateFlagsEXT ; typedef struct VkHeadlessSurfaceCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkHeadlessSurfaceCreateFlagsEXT flags ; } VkHeadlessSurfaceCreateInfoEXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateHeadlessSurfaceEXT)(VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)"
  },
  {
    "label": "vkCreateHeadlessSurfaceEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateHeadlessSurfaceEXT(VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_line_rasterization 1 # define VK_EXT_LINE_RASTERIZATION_SPEC_VERSION 1 # define VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME \" VK_EXT_line_rasterization \" typedef VkLineRasterizationModeKHR VkLineRasterizationModeEXT ; typedef VkPhysicalDeviceLineRasterizationFeaturesKHR VkPhysicalDeviceLineRasterizationFeaturesEXT ; typedef VkPhysicalDeviceLineRasterizationPropertiesKHR VkPhysicalDeviceLineRasterizationPropertiesEXT ; typedef VkPipelineRasterizationLineStateCreateInfoKHR VkPipelineRasterizationLineStateCreateInfoEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetLineStippleEXT)(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)"
  },
  {
    "label": "vkCmdSetLineStippleEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_shader_atomic_float 1 # define VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION 1 # define VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME \" VK_EXT_shader_atomic_float \" typedef struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 shaderBufferFloat32Atomics ; VkBool32 shaderBufferFloat32AtomicAdd ; VkBool32 shaderBufferFloat64Atomics ; VkBool32 shaderBufferFloat64AtomicAdd ; VkBool32 shaderSharedFloat32Atomics ; VkBool32 shaderSharedFloat32AtomicAdd ; VkBool32 shaderSharedFloat64Atomics ; VkBool32 shaderSharedFloat64AtomicAdd ; VkBool32 shaderImageFloat32Atomics ; VkBool32 shaderImageFloat32AtomicAdd ; VkBool32 sparseImageFloat32Atomics ; VkBool32 sparseImageFloat32AtomicAdd ; } VkPhysicalDeviceShaderAtomicFloatFeaturesEXT ; # define VK_EXT_host_query_reset 1 # define VK_EXT_HOST_QUERY_RESET_SPEC_VERSION 1 # define VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME \" VK_EXT_host_query_reset \" typedef VkPhysicalDeviceHostQueryResetFeatures VkPhysicalDeviceHostQueryResetFeaturesEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkResetQueryPoolEXT)(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)"
  },
  {
    "label": "vkResetQueryPoolEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_index_type_uint8 1 # define VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION 1 # define VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME \" VK_EXT_index_type_uint8 \" typedef VkPhysicalDeviceIndexTypeUint8FeaturesKHR VkPhysicalDeviceIndexTypeUint8FeaturesEXT ; # define VK_EXT_extended_dynamic_state 1 # define VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION 1 # define VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME \" VK_EXT_extended_dynamic_state \" typedef struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 extendedDynamicState ; } VkPhysicalDeviceExtendedDynamicStateFeaturesEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetCullModeEXT)(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetFrontFaceEXT)(VkCommandBuffer commandBuffer, VkFrontFace frontFace)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetPrimitiveTopologyEXT)(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetViewportWithCountEXT)(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetScissorWithCountEXT)(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBindVertexBuffers2EXT)(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDepthTestEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDepthWriteEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDepthCompareOpEXT)(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDepthBoundsTestEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetStencilTestEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetStencilOpEXT)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)"
  },
  {
    "label": "vkCmdSetCullModeEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)"
  },
  {
    "label": "vkCmdSetFrontFaceEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace)"
  },
  {
    "label": "vkCmdSetPrimitiveTopologyEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)"
  },
  {
    "label": "vkCmdSetViewportWithCountEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports)"
  },
  {
    "label": "vkCmdSetScissorWithCountEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors)"
  },
  {
    "label": "vkCmdBindVertexBuffers2EXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides)"
  },
  {
    "label": "vkCmdSetDepthTestEnableEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)"
  },
  {
    "label": "vkCmdSetDepthWriteEnableEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)"
  },
  {
    "label": "vkCmdSetDepthCompareOpEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)"
  },
  {
    "label": "vkCmdSetDepthBoundsTestEnableEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)"
  },
  {
    "label": "vkCmdSetStencilTestEnableEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)"
  },
  {
    "label": "vkCmdSetStencilOpEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_host_image_copy 1 # define VK_EXT_HOST_IMAGE_COPY_SPEC_VERSION 1 # define VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME \" VK_EXT_host_image_copy \" typedef enum VkHostImageCopyFlagBitsEXT { VK_HOST_IMAGE_COPY_MEMCPY_EXT = 0 x00000001,VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkHostImageCopyFlagBitsEXT ; typedef VkFlags VkHostImageCopyFlagsEXT ; typedef struct VkPhysicalDeviceHostImageCopyFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 hostImageCopy ; } VkPhysicalDeviceHostImageCopyFeaturesEXT ; typedef struct VkPhysicalDeviceHostImageCopyPropertiesEXT { VkStructureType sType ; void* pNext ; uint32_t copySrcLayoutCount ; VkImageLayout* pCopySrcLayouts ; uint32_t copyDstLayoutCount ; VkImageLayout* pCopyDstLayouts ; uint8_t optimalTilingLayoutUUID [ VK_UUID_SIZE ] ; VkBool32 identicalMemoryTypeRequirements ; } VkPhysicalDeviceHostImageCopyPropertiesEXT ; typedef struct VkMemoryToImageCopyEXT { VkStructureType sType ; const void* pNext ; const void* pHostPointer ; uint32_t memoryRowLength ; uint32_t memoryImageHeight ; VkImageSubresourceLayers imageSubresource ; VkOffset3D imageOffset ; VkExtent3D imageExtent ; } VkMemoryToImageCopyEXT ; typedef struct VkImageToMemoryCopyEXT { VkStructureType sType ; const void* pNext ; void* pHostPointer ; uint32_t memoryRowLength ; uint32_t memoryImageHeight ; VkImageSubresourceLayers imageSubresource ; VkOffset3D imageOffset ; VkExtent3D imageExtent ; } VkImageToMemoryCopyEXT ; typedef struct VkCopyMemoryToImageInfoEXT { VkStructureType sType ; const void* pNext ; VkHostImageCopyFlagsEXT flags ; VkImage dstImage ; VkImageLayout dstImageLayout ; uint32_t regionCount ; const VkMemoryToImageCopyEXT* pRegions ; } VkCopyMemoryToImageInfoEXT ; typedef struct VkCopyImageToMemoryInfoEXT { VkStructureType sType ; const void* pNext ; VkHostImageCopyFlagsEXT flags ; VkImage srcImage ; VkImageLayout srcImageLayout ; uint32_t regionCount ; const VkImageToMemoryCopyEXT* pRegions ; } VkCopyImageToMemoryInfoEXT ; typedef struct VkCopyImageToImageInfoEXT { VkStructureType sType ; const void* pNext ; VkHostImageCopyFlagsEXT flags ; VkImage srcImage ; VkImageLayout srcImageLayout ; VkImage dstImage ; VkImageLayout dstImageLayout ; uint32_t regionCount ; const VkImageCopy2* pRegions ; } VkCopyImageToImageInfoEXT ; typedef struct VkHostImageLayoutTransitionInfoEXT { VkStructureType sType ; const void* pNext ; VkImage image ; VkImageLayout oldLayout ; VkImageLayout newLayout ; VkImageSubresourceRange subresourceRange ; } VkHostImageLayoutTransitionInfoEXT ; typedef struct VkSubresourceHostMemcpySizeEXT { VkStructureType sType ; void* pNext ; VkDeviceSize size ; } VkSubresourceHostMemcpySizeEXT ; typedef struct VkHostImageCopyDevicePerformanceQueryEXT { VkStructureType sType ; void* pNext ; VkBool32 optimalDeviceAccess ; VkBool32 identicalMemoryLayout ; } VkHostImageCopyDevicePerformanceQueryEXT ; typedef VkSubresourceLayout2KHR VkSubresourceLayout2EXT ; typedef VkImageSubresource2KHR VkImageSubresource2EXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCopyMemoryToImageEXT)(VkDevice device, const VkCopyMemoryToImageInfoEXT* pCopyMemoryToImageInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCopyImageToMemoryEXT)(VkDevice device, const VkCopyImageToMemoryInfoEXT* pCopyImageToMemoryInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCopyImageToImageEXT)(VkDevice device, const VkCopyImageToImageInfoEXT* pCopyImageToImageInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkTransitionImageLayoutEXT)(VkDevice device, uint32_t transitionCount, const VkHostImageLayoutTransitionInfoEXT* pTransitions)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetImageSubresourceLayout2EXT)(VkDevice device, VkImage image, const VkImageSubresource2KHR* pSubresource, VkSubresourceLayout2KHR* pLayout)"
  },
  {
    "label": "vkCopyMemoryToImageEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCopyMemoryToImageEXT(VkDevice device, const VkCopyMemoryToImageInfoEXT* pCopyMemoryToImageInfo)"
  },
  {
    "label": "vkCopyImageToMemoryEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCopyImageToMemoryEXT(VkDevice device, const VkCopyImageToMemoryInfoEXT* pCopyImageToMemoryInfo)"
  },
  {
    "label": "vkCopyImageToImageEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCopyImageToImageEXT(VkDevice device, const VkCopyImageToImageInfoEXT* pCopyImageToImageInfo)"
  },
  {
    "label": "vkTransitionImageLayoutEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkTransitionImageLayoutEXT(VkDevice device, uint32_t transitionCount, const VkHostImageLayoutTransitionInfoEXT* pTransitions)"
  },
  {
    "label": "vkGetImageSubresourceLayout2EXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetImageSubresourceLayout2EXT(VkDevice device, VkImage image, const VkImageSubresource2KHR* pSubresource, VkSubresourceLayout2KHR* pLayout)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_map_memory_placed 1 # define VK_EXT_MAP_MEMORY_PLACED_SPEC_VERSION 1 # define VK_EXT_MAP_MEMORY_PLACED_EXTENSION_NAME \" VK_EXT_map_memory_placed \" typedef struct VkPhysicalDeviceMapMemoryPlacedFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 memoryMapPlaced ; VkBool32 memoryMapRangePlaced ; VkBool32 memoryUnmapReserve ; } VkPhysicalDeviceMapMemoryPlacedFeaturesEXT ; typedef struct VkPhysicalDeviceMapMemoryPlacedPropertiesEXT { VkStructureType sType ; void* pNext ; VkDeviceSize minPlacedMemoryMapAlignment ; } VkPhysicalDeviceMapMemoryPlacedPropertiesEXT ; typedef struct VkMemoryMapPlacedInfoEXT { VkStructureType sType ; const void* pNext ; void* pPlacedAddress ; } VkMemoryMapPlacedInfoEXT ; # define VK_EXT_shader_atomic_float2 1 # define VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION 1 # define VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME \" VK_EXT_shader_atomic_float2 \" typedef struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 shaderBufferFloat16Atomics ; VkBool32 shaderBufferFloat16AtomicAdd ; VkBool32 shaderBufferFloat16AtomicMinMax ; VkBool32 shaderBufferFloat32AtomicMinMax ; VkBool32 shaderBufferFloat64AtomicMinMax ; VkBool32 shaderSharedFloat16Atomics ; VkBool32 shaderSharedFloat16AtomicAdd ; VkBool32 shaderSharedFloat16AtomicMinMax ; VkBool32 shaderSharedFloat32AtomicMinMax ; VkBool32 shaderSharedFloat64AtomicMinMax ; VkBool32 shaderImageFloat32AtomicMinMax ; VkBool32 sparseImageFloat32AtomicMinMax ; } VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT ; # define VK_EXT_surface_maintenance1 1 # define VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION 1 # define VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME \" VK_EXT_surface_maintenance1 \" typedef enum VkPresentScalingFlagBitsEXT { VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT = 0 x00000001,VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT = 0 x00000002,VK_PRESENT_SCALING_STRETCH_BIT_EXT = 0 x00000004,VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkPresentScalingFlagBitsEXT ; typedef VkFlags VkPresentScalingFlagsEXT ; typedef enum VkPresentGravityFlagBitsEXT { VK_PRESENT_GRAVITY_MIN_BIT_EXT = 0 x00000001,VK_PRESENT_GRAVITY_MAX_BIT_EXT = 0 x00000002,VK_PRESENT_GRAVITY_CENTERED_BIT_EXT = 0 x00000004,VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkPresentGravityFlagBitsEXT ; typedef VkFlags VkPresentGravityFlagsEXT ; typedef struct VkSurfacePresentModeEXT { VkStructureType sType ; void* pNext ; VkPresentModeKHR presentMode ; } VkSurfacePresentModeEXT ; typedef struct VkSurfacePresentScalingCapabilitiesEXT { VkStructureType sType ; void* pNext ; VkPresentScalingFlagsEXT supportedPresentScaling ; VkPresentGravityFlagsEXT supportedPresentGravityX ; VkPresentGravityFlagsEXT supportedPresentGravityY ; VkExtent2D minScaledImageExtent ; VkExtent2D maxScaledImageExtent ; } VkSurfacePresentScalingCapabilitiesEXT ; typedef struct VkSurfacePresentModeCompatibilityEXT { VkStructureType sType ; void* pNext ; uint32_t presentModeCount ; VkPresentModeKHR* pPresentModes ; } VkSurfacePresentModeCompatibilityEXT ; # define VK_EXT_swapchain_maintenance1 1 # define VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION 1 # define VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME \" VK_EXT_swapchain_maintenance1 \" typedef struct VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 swapchainMaintenance1 ; } VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT ; typedef struct VkSwapchainPresentFenceInfoEXT { VkStructureType sType ; const void* pNext ; uint32_t swapchainCount ; const VkFence* pFences ; } VkSwapchainPresentFenceInfoEXT ; typedef struct VkSwapchainPresentModesCreateInfoEXT { VkStructureType sType ; const void* pNext ; uint32_t presentModeCount ; const VkPresentModeKHR* pPresentModes ; } VkSwapchainPresentModesCreateInfoEXT ; typedef struct VkSwapchainPresentModeInfoEXT { VkStructureType sType ; const void* pNext ; uint32_t swapchainCount ; const VkPresentModeKHR* pPresentModes ; } VkSwapchainPresentModeInfoEXT ; typedef struct VkSwapchainPresentScalingCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkPresentScalingFlagsEXT scalingBehavior ; VkPresentGravityFlagsEXT presentGravityX ; VkPresentGravityFlagsEXT presentGravityY ; } VkSwapchainPresentScalingCreateInfoEXT ; typedef struct VkReleaseSwapchainImagesInfoEXT { VkStructureType sType ; const void* pNext ; VkSwapchainKHR swapchain ; uint32_t imageIndexCount ; const uint32_t* pImageIndices ; } VkReleaseSwapchainImagesInfoEXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkReleaseSwapchainImagesEXT)(VkDevice device, const VkReleaseSwapchainImagesInfoEXT* pReleaseInfo)"
  },
  {
    "label": "vkReleaseSwapchainImagesEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkReleaseSwapchainImagesEXT(VkDevice device, const VkReleaseSwapchainImagesInfoEXT* pReleaseInfo)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_shader_demote_to_helper_invocation 1 # define VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION 1 # define VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME \" VK_EXT_shader_demote_to_helper_invocation \" typedef VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT ; # define VK_NV_device_generated_commands 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkIndirectCommandsLayoutNV)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0,VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1,VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2,VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3,VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4,VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5,VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6,VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7,VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = 1 0 0 0 3 2 8 0 0 0,VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV = 1 0 0 0 4 2 8 0 0 3,VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV = 1 0 0 0 4 2 8 0 0 4,VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 0 x7FFFFFFF } VkIndirectCommandsTokenTypeNV ; typedef enum VkIndirectStateFlagBitsNV { VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 0 x00000001,VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 0 x7FFFFFFF } VkIndirectStateFlagBitsNV ; typedef VkFlags VkIndirectStateFlagsNV ; typedef enum VkIndirectCommandsLayoutUsageFlagBitsNV { VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 0 x00000001,VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 0 x00000002,VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 0 x00000004,VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 0 x7FFFFFFF } VkIndirectCommandsLayoutUsageFlagBitsNV ; typedef VkFlags VkIndirectCommandsLayoutUsageFlagsNV ; typedef struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV { VkStructureType sType ; void* pNext ; uint32_t maxGraphicsShaderGroupCount ; uint32_t maxIndirectSequenceCount ; uint32_t maxIndirectCommandsTokenCount ; uint32_t maxIndirectCommandsStreamCount ; uint32_t maxIndirectCommandsTokenOffset ; uint32_t maxIndirectCommandsStreamStride ; uint32_t minSequencesCountBufferOffsetAlignment ; uint32_t minSequencesIndexBufferOffsetAlignment ; uint32_t minIndirectCommandsBufferOffsetAlignment ; } VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV ; typedef struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 deviceGeneratedCommands ; } VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV ; typedef struct VkGraphicsShaderGroupCreateInfoNV { VkStructureType sType ; const void* pNext ; uint32_t stageCount ; const VkPipelineShaderStageCreateInfo* pStages ; const VkPipelineVertexInputStateCreateInfo* pVertexInputState ; const VkPipelineTessellationStateCreateInfo* pTessellationState ; } VkGraphicsShaderGroupCreateInfoNV ; typedef struct VkGraphicsPipelineShaderGroupsCreateInfoNV { VkStructureType sType ; const void* pNext ; uint32_t groupCount ; const VkGraphicsShaderGroupCreateInfoNV* pGroups ; uint32_t pipelineCount ; const VkPipeline* pPipelines ; } VkGraphicsPipelineShaderGroupsCreateInfoNV ; typedef struct VkBindShaderGroupIndirectCommandNV { uint32_t groupIndex ; } VkBindShaderGroupIndirectCommandNV ; typedef struct VkBindIndexBufferIndirectCommandNV { VkDeviceAddress bufferAddress ; uint32_t size ; VkIndexType indexType ; } VkBindIndexBufferIndirectCommandNV ; typedef struct VkBindVertexBufferIndirectCommandNV { VkDeviceAddress bufferAddress ; uint32_t size ; uint32_t stride ; } VkBindVertexBufferIndirectCommandNV ; typedef struct VkSetStateFlagsIndirectCommandNV { uint32_t data ; } VkSetStateFlagsIndirectCommandNV ; typedef struct VkIndirectCommandsStreamNV { VkBuffer buffer ; VkDeviceSize offset ; } VkIndirectCommandsStreamNV ; typedef struct VkIndirectCommandsLayoutTokenNV { VkStructureType sType ; const void* pNext ; VkIndirectCommandsTokenTypeNV tokenType ; uint32_t stream ; uint32_t offset ; uint32_t vertexBindingUnit ; VkBool32 vertexDynamicStride ; VkPipelineLayout pushconstantPipelineLayout ; VkShaderStageFlags pushconstantShaderStageFlags ; uint32_t pushconstantOffset ; uint32_t pushconstantSize ; VkIndirectStateFlagsNV indirectStateFlags ; uint32_t indexTypeCount ; const VkIndexType* pIndexTypes ; const uint32_t* pIndexTypeValues ; } VkIndirectCommandsLayoutTokenNV ; typedef struct VkIndirectCommandsLayoutCreateInfoNV { VkStructureType sType ; const void* pNext ; VkIndirectCommandsLayoutUsageFlagsNV flags ; VkPipelineBindPoint pipelineBindPoint ; uint32_t tokenCount ; const VkIndirectCommandsLayoutTokenNV* pTokens ; uint32_t streamCount ; const uint32_t* pStreamStrides ; } VkIndirectCommandsLayoutCreateInfoNV ; typedef struct VkGeneratedCommandsInfoNV { VkStructureType sType ; const void* pNext ; VkPipelineBindPoint pipelineBindPoint ; VkPipeline pipeline ; VkIndirectCommandsLayoutNV indirectCommandsLayout ; uint32_t streamCount ; const VkIndirectCommandsStreamNV* pStreams ; uint32_t sequencesCount ; VkBuffer preprocessBuffer ; VkDeviceSize preprocessOffset ; VkDeviceSize preprocessSize ; VkBuffer sequencesCountBuffer ; VkDeviceSize sequencesCountOffset ; VkBuffer sequencesIndexBuffer ; VkDeviceSize sequencesIndexOffset ; } VkGeneratedCommandsInfoNV ; typedef struct VkGeneratedCommandsMemoryRequirementsInfoNV { VkStructureType sType ; const void* pNext ; VkPipelineBindPoint pipelineBindPoint ; VkPipeline pipeline ; VkIndirectCommandsLayoutNV indirectCommandsLayout ; uint32_t maxSequencesCount ; } VkGeneratedCommandsMemoryRequirementsInfoNV ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetGeneratedCommandsMemoryRequirementsNV)(VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdPreprocessGeneratedCommandsNV)(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdExecuteGeneratedCommandsNV)(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBindPipelineShaderGroupNV)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateIndirectCommandsLayoutNV)(VkDevice device, const VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNV* pIndirectCommandsLayout)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyIndirectCommandsLayoutNV)(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkGetGeneratedCommandsMemoryRequirementsNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "vkCmdPreprocessGeneratedCommandsNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)"
  },
  {
    "label": "vkCmdExecuteGeneratedCommandsNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)"
  },
  {
    "label": "vkCmdBindPipelineShaderGroupNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex)"
  },
  {
    "label": "vkCreateIndirectCommandsLayoutNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateIndirectCommandsLayoutNV(VkDevice device, const VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNV* pIndirectCommandsLayout)"
  },
  {
    "label": "vkDestroyIndirectCommandsLayoutNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NV_inherited_viewport_scissor 1 # define VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION 1 # define VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME \" VK_NV_inherited_viewport_scissor \" typedef struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 inheritedViewportScissor2D ; } VkPhysicalDeviceInheritedViewportScissorFeaturesNV ; typedef struct VkCommandBufferInheritanceViewportScissorInfoNV { VkStructureType sType ; const void* pNext ; VkBool32 viewportScissor2D ; uint32_t viewportDepthCount ; const VkViewport* pViewportDepths ; } VkCommandBufferInheritanceViewportScissorInfoNV ; # define VK_EXT_texel_buffer_alignment 1 # define VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION 1 # define VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME \" VK_EXT_texel_buffer_alignment \" typedef struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 texelBufferAlignment ; } VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT ; typedef VkPhysicalDeviceTexelBufferAlignmentProperties VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT ; # define VK_QCOM_render_pass_transform 1 # define VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION 4 # define VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME \" VK_QCOM_render_pass_transform \" typedef struct VkRenderPassTransformBeginInfoQCOM { VkStructureType sType ; void* pNext ; VkSurfaceTransformFlagBitsKHR transform ; } VkRenderPassTransformBeginInfoQCOM ; typedef struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM { VkStructureType sType ; void* pNext ; VkSurfaceTransformFlagBitsKHR transform ; VkRect2D renderArea ; } VkCommandBufferInheritanceRenderPassTransformInfoQCOM ; # define VK_EXT_depth_bias_control 1 # define VK_EXT_DEPTH_BIAS_CONTROL_SPEC_VERSION 1 # define VK_EXT_DEPTH_BIAS_CONTROL_EXTENSION_NAME \" VK_EXT_depth_bias_control \" typedef enum VkDepthBiasRepresentationEXT { VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT = 0,VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT = 1,VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT = 2,VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT = 0 x7FFFFFFF } VkDepthBiasRepresentationEXT ; typedef struct VkPhysicalDeviceDepthBiasControlFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 depthBiasControl ; VkBool32 leastRepresentableValueForceUnormRepresentation ; VkBool32 floatRepresentation ; VkBool32 depthBiasExact ; } VkPhysicalDeviceDepthBiasControlFeaturesEXT ; typedef struct VkDepthBiasInfoEXT { VkStructureType sType ; const void* pNext ; float depthBiasConstantFactor ; float depthBiasClamp ; float depthBiasSlopeFactor ; } VkDepthBiasInfoEXT ; typedef struct VkDepthBiasRepresentationInfoEXT { VkStructureType sType ; const void* pNext ; VkDepthBiasRepresentationEXT depthBiasRepresentation ; VkBool32 depthBiasExact ; } VkDepthBiasRepresentationInfoEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDepthBias2EXT)(VkCommandBuffer commandBuffer, const VkDepthBiasInfoEXT* pDepthBiasInfo)"
  },
  {
    "label": "vkCmdSetDepthBias2EXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDepthBias2EXT(VkCommandBuffer commandBuffer, const VkDepthBiasInfoEXT* pDepthBiasInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_device_memory_report 1 # define VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION 2 # define VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME \" VK_EXT_device_memory_report \" typedef enum VkDeviceMemoryReportEventTypeEXT { VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0,VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1,VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2,VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3,VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4,VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkDeviceMemoryReportEventTypeEXT ; typedef VkFlags VkDeviceMemoryReportFlagsEXT ; typedef struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 deviceMemoryReport ; } VkPhysicalDeviceDeviceMemoryReportFeaturesEXT ; typedef struct VkDeviceMemoryReportCallbackDataEXT { VkStructureType sType ; void* pNext ; VkDeviceMemoryReportFlagsEXT flags ; VkDeviceMemoryReportEventTypeEXT type ; uint64_t memoryObjectId ; VkDeviceSize size ; VkObjectType objectType ; uint64_t objectHandle ; uint32_t heapIndex ; } VkDeviceMemoryReportCallbackDataEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDeviceMemoryReportCallbackEXT)( const VkDeviceMemoryReportCallbackDataEXT* pCallbackData, void* pUserData)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef struct VkDeviceDeviceMemoryReportCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkDeviceMemoryReportFlagsEXT flags ; PFN_vkDeviceMemoryReportCallbackEXT pfnUserCallback ; void* pUserData ; } VkDeviceDeviceMemoryReportCreateInfoEXT ; # define VK_EXT_acquire_drm_display 1 # define VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION 1 # define VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME \" VK_EXT_acquire_drm_display \" typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkAcquireDrmDisplayEXT)(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetDrmDisplayEXT)(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR* display)"
  },
  {
    "label": "vkAcquireDrmDisplayEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkAcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display)"
  },
  {
    "label": "vkGetDrmDisplayEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR* display)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_robustness2 1 # define VK_EXT_ROBUSTNESS_2_SPEC_VERSION 1 # define VK_EXT_ROBUSTNESS_2_EXTENSION_NAME \" VK_EXT_robustness2 \" typedef struct VkPhysicalDeviceRobustness2FeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 robustBufferAccess2 ; VkBool32 robustImageAccess2 ; VkBool32 nullDescriptor ; } VkPhysicalDeviceRobustness2FeaturesEXT ; typedef struct VkPhysicalDeviceRobustness2PropertiesEXT { VkStructureType sType ; void* pNext ; VkDeviceSize robustStorageBufferAccessSizeAlignment ; VkDeviceSize robustUniformBufferAccessSizeAlignment ; } VkPhysicalDeviceRobustness2PropertiesEXT ; # define VK_EXT_custom_border_color 1 # define VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION 1 2 # define VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME \" VK_EXT_custom_border_color \" typedef struct VkSamplerCustomBorderColorCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkClearColorValue customBorderColor ; VkFormat format ; } VkSamplerCustomBorderColorCreateInfoEXT ; typedef struct VkPhysicalDeviceCustomBorderColorPropertiesEXT { VkStructureType sType ; void* pNext ; uint32_t maxCustomBorderColorSamplers ; } VkPhysicalDeviceCustomBorderColorPropertiesEXT ; typedef struct VkPhysicalDeviceCustomBorderColorFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 customBorderColors ; VkBool32 customBorderColorWithoutFormat ; } VkPhysicalDeviceCustomBorderColorFeaturesEXT ; # define VK_GOOGLE_user_type 1 # define VK_GOOGLE_USER_TYPE_SPEC_VERSION 1 # define VK_GOOGLE_USER_TYPE_EXTENSION_NAME \" VK_GOOGLE_user_type \" # define VK_NV_present_barrier 1 # define VK_NV_PRESENT_BARRIER_SPEC_VERSION 1 # define VK_NV_PRESENT_BARRIER_EXTENSION_NAME \" VK_NV_present_barrier \" typedef struct VkPhysicalDevicePresentBarrierFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 presentBarrier ; } VkPhysicalDevicePresentBarrierFeaturesNV ; typedef struct VkSurfaceCapabilitiesPresentBarrierNV { VkStructureType sType ; void* pNext ; VkBool32 presentBarrierSupported ; } VkSurfaceCapabilitiesPresentBarrierNV ; typedef struct VkSwapchainPresentBarrierCreateInfoNV { VkStructureType sType ; void* pNext ; VkBool32 presentBarrierEnable ; } VkSwapchainPresentBarrierCreateInfoNV ; # define VK_EXT_private_data 1 typedef VkPrivateDataSlot VkPrivateDataSlotEXT ; # define VK_EXT_PRIVATE_DATA_SPEC_VERSION 1 # define VK_EXT_PRIVATE_DATA_EXTENSION_NAME \" VK_EXT_private_data \" typedef VkPrivateDataSlotCreateFlags VkPrivateDataSlotCreateFlagsEXT ; typedef VkPhysicalDevicePrivateDataFeatures VkPhysicalDevicePrivateDataFeaturesEXT ; typedef VkDevicePrivateDataCreateInfo VkDevicePrivateDataCreateInfoEXT ; typedef VkPrivateDataSlotCreateInfo VkPrivateDataSlotCreateInfoEXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreatePrivateDataSlotEXT)(VkDevice device, const VkPrivateDataSlotCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyPrivateDataSlotEXT)(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkSetPrivateDataEXT)(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPrivateDataEXT)(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t* pData)"
  },
  {
    "label": "vkCreatePrivateDataSlotEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreatePrivateDataSlotEXT(VkDevice device, const VkPrivateDataSlotCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot)"
  },
  {
    "label": "vkDestroyPrivateDataSlotEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkSetPrivateDataEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data)"
  },
  {
    "label": "vkGetPrivateDataEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t* pData)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_pipeline_creation_cache_control 1 # define VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION 3 # define VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME \" VK_EXT_pipeline_creation_cache_control \" typedef VkPhysicalDevicePipelineCreationCacheControlFeatures VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT ; # define VK_NV_device_diagnostics_config 1 # define VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION 2 # define VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME \" VK_NV_device_diagnostics_config \" typedef enum VkDeviceDiagnosticsConfigFlagBitsNV { VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 0 x00000001,VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 0 x00000002,VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 0 x00000004,VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = 0 x00000008,VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 0 x7FFFFFFF } VkDeviceDiagnosticsConfigFlagBitsNV ; typedef VkFlags VkDeviceDiagnosticsConfigFlagsNV ; typedef struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 diagnosticsConfig ; } VkPhysicalDeviceDiagnosticsConfigFeaturesNV ; typedef struct VkDeviceDiagnosticsConfigCreateInfoNV { VkStructureType sType ; const void* pNext ; VkDeviceDiagnosticsConfigFlagsNV flags ; } VkDeviceDiagnosticsConfigCreateInfoNV ; # define VK_QCOM_render_pass_store_ops 1 # define VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION 2 # define VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME \" VK_QCOM_render_pass_store_ops \" # define VK_NV_cuda_kernel_launch 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCudaModuleNV) VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCudaFunctionNV)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (VkStructureType sType ; const void* pNext ; size_t dataSize ; const void* pData ; } VkCudaModuleCreateInfoNV ; typedef struct VkCudaFunctionCreateInfoNV { VkStructureType sType ; const void* pNext ; VkCudaModuleNV module ; const char* pName ; } VkCudaFunctionCreateInfoNV ; typedef struct VkCudaLaunchInfoNV { VkStructureType sType ; const void* pNext ; VkCudaFunctionNV function ; uint32_t gridDimX ; uint32_t gridDimY ; uint32_t gridDimZ ; uint32_t blockDimX ; uint32_t blockDimY ; uint32_t blockDimZ ; uint32_t sharedMemBytes ; size_t paramCount ; const void* const* pParams ; size_t extraCount ; const void* const* pExtras ; } VkCudaLaunchInfoNV ; typedef struct VkPhysicalDeviceCudaKernelLaunchFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 cudaKernelLaunchFeatures ; } VkPhysicalDeviceCudaKernelLaunchFeaturesNV ; typedef struct VkPhysicalDeviceCudaKernelLaunchPropertiesNV { VkStructureType sType ; void* pNext ; uint32_t computeCapabilityMinor ; uint32_t computeCapabilityMajor ; } VkPhysicalDeviceCudaKernelLaunchPropertiesNV ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateCudaModuleNV)(VkDevice device, const VkCudaModuleCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCudaModuleNV* pModule)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetCudaModuleCacheNV)(VkDevice device, VkCudaModuleNV module, size_t* pCacheSize, void* pCacheData)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateCudaFunctionNV)(VkDevice device, const VkCudaFunctionCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCudaFunctionNV* pFunction)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyCudaModuleNV)(VkDevice device, VkCudaModuleNV module, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyCudaFunctionNV)(VkDevice device, VkCudaFunctionNV function, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCudaLaunchKernelNV)(VkCommandBuffer commandBuffer, const VkCudaLaunchInfoNV* pLaunchInfo)"
  },
  {
    "label": "vkCreateCudaModuleNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateCudaModuleNV(VkDevice device, const VkCudaModuleCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCudaModuleNV* pModule)"
  },
  {
    "label": "vkGetCudaModuleCacheNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetCudaModuleCacheNV(VkDevice device, VkCudaModuleNV module, size_t* pCacheSize, void* pCacheData)"
  },
  {
    "label": "vkCreateCudaFunctionNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateCudaFunctionNV(VkDevice device, const VkCudaFunctionCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCudaFunctionNV* pFunction)"
  },
  {
    "label": "vkDestroyCudaModuleNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyCudaModuleNV(VkDevice device, VkCudaModuleNV module, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkDestroyCudaFunctionNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyCudaFunctionNV(VkDevice device, VkCudaFunctionNV function, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCmdCudaLaunchKernelNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCudaLaunchKernelNV(VkCommandBuffer commandBuffer, const VkCudaLaunchInfoNV* pLaunchInfo)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NV_low_latency 1 # define VK_NV_LOW_LATENCY_SPEC_VERSION 1 # define VK_NV_LOW_LATENCY_EXTENSION_NAME \" VK_NV_low_latency \" typedef struct VkQueryLowLatencySupportNV { VkStructureType sType ; const void* pNext ; void* pQueriedLowLatencyData ; } VkQueryLowLatencySupportNV ; # define VK_EXT_descriptor_buffer 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkAccelerationStructureKHR)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (VkStructureType sType ; void* pNext ; VkBool32 combinedImageSamplerDescriptorSingleArray ; VkBool32 bufferlessPushDescriptors ; VkBool32 allowSamplerImageViewPostSubmitCreation ; VkDeviceSize descriptorBufferOffsetAlignment ; uint32_t maxDescriptorBufferBindings ; uint32_t maxResourceDescriptorBufferBindings ; uint32_t maxSamplerDescriptorBufferBindings ; uint32_t maxEmbeddedImmutableSamplerBindings ; uint32_t maxEmbeddedImmutableSamplers ; size_t bufferCaptureReplayDescriptorDataSize ; size_t imageCaptureReplayDescriptorDataSize ; size_t imageViewCaptureReplayDescriptorDataSize ; size_t samplerCaptureReplayDescriptorDataSize ; size_t accelerationStructureCaptureReplayDescriptorDataSize ; size_t samplerDescriptorSize ; size_t combinedImageSamplerDescriptorSize ; size_t sampledImageDescriptorSize ; size_t storageImageDescriptorSize ; size_t uniformTexelBufferDescriptorSize ; size_t robustUniformTexelBufferDescriptorSize ; size_t storageTexelBufferDescriptorSize ; size_t robustStorageTexelBufferDescriptorSize ; size_t uniformBufferDescriptorSize ; size_t robustUniformBufferDescriptorSize ; size_t storageBufferDescriptorSize ; size_t robustStorageBufferDescriptorSize ; size_t inputAttachmentDescriptorSize ; size_t accelerationStructureDescriptorSize ; VkDeviceSize maxSamplerDescriptorBufferRange ; VkDeviceSize maxResourceDescriptorBufferRange ; VkDeviceSize samplerDescriptorBufferAddressSpaceSize ; VkDeviceSize resourceDescriptorBufferAddressSpaceSize ; VkDeviceSize descriptorBufferAddressSpaceSize ; } VkPhysicalDeviceDescriptorBufferPropertiesEXT ; typedef struct VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT { VkStructureType sType ; void* pNext ; size_t combinedImageSamplerDensityMapDescriptorSize ; } VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT ; typedef struct VkPhysicalDeviceDescriptorBufferFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 descriptorBuffer ; VkBool32 descriptorBufferCaptureReplay ; VkBool32 descriptorBufferImageLayoutIgnored ; VkBool32 descriptorBufferPushDescriptors ; } VkPhysicalDeviceDescriptorBufferFeaturesEXT ; typedef struct VkDescriptorAddressInfoEXT { VkStructureType sType ; void* pNext ; VkDeviceAddress address ; VkDeviceSize range ; VkFormat format ; } VkDescriptorAddressInfoEXT ; typedef struct VkDescriptorBufferBindingInfoEXT { VkStructureType sType ; void* pNext ; VkDeviceAddress address ; VkBufferUsageFlags usage ; } VkDescriptorBufferBindingInfoEXT ; typedef struct VkDescriptorBufferBindingPushDescriptorBufferHandleEXT { VkStructureType sType ; void* pNext ; VkBuffer buffer ; } VkDescriptorBufferBindingPushDescriptorBufferHandleEXT ; typedef union VkDescriptorDataEXT { const VkSampler* pSampler ; const VkDescriptorImageInfo* pCombinedImageSampler ; const VkDescriptorImageInfo* pInputAttachmentImage ; const VkDescriptorImageInfo* pSampledImage ; const VkDescriptorImageInfo* pStorageImage ; const VkDescriptorAddressInfoEXT* pUniformTexelBuffer ; const VkDescriptorAddressInfoEXT* pStorageTexelBuffer ; const VkDescriptorAddressInfoEXT* pUniformBuffer ; const VkDescriptorAddressInfoEXT* pStorageBuffer ; VkDeviceAddress accelerationStructure ; } VkDescriptorDataEXT ; typedef struct VkDescriptorGetInfoEXT { VkStructureType sType ; const void* pNext ; VkDescriptorType type ; VkDescriptorDataEXT data ; } VkDescriptorGetInfoEXT ; typedef struct VkBufferCaptureDescriptorDataInfoEXT { VkStructureType sType ; const void* pNext ; VkBuffer buffer ; } VkBufferCaptureDescriptorDataInfoEXT ; typedef struct VkImageCaptureDescriptorDataInfoEXT { VkStructureType sType ; const void* pNext ; VkImage image ; } VkImageCaptureDescriptorDataInfoEXT ; typedef struct VkImageViewCaptureDescriptorDataInfoEXT { VkStructureType sType ; const void* pNext ; VkImageView imageView ; } VkImageViewCaptureDescriptorDataInfoEXT ; typedef struct VkSamplerCaptureDescriptorDataInfoEXT { VkStructureType sType ; const void* pNext ; VkSampler sampler ; } VkSamplerCaptureDescriptorDataInfoEXT ; typedef struct VkOpaqueCaptureDescriptorDataCreateInfoEXT { VkStructureType sType ; const void* pNext ; const void* opaqueCaptureDescriptorData ; } VkOpaqueCaptureDescriptorDataCreateInfoEXT ; typedef struct VkAccelerationStructureCaptureDescriptorDataInfoEXT { VkStructureType sType ; const void* pNext ; VkAccelerationStructureKHR accelerationStructure ; VkAccelerationStructureNV accelerationStructureNV ; } VkAccelerationStructureCaptureDescriptorDataInfoEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDescriptorSetLayoutSizeEXT)(VkDevice device, VkDescriptorSetLayout layout, VkDeviceSize* pLayoutSizeInBytes)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDescriptorSetLayoutBindingOffsetEXT)(VkDevice device, VkDescriptorSetLayout layout, uint32_t binding, VkDeviceSize* pOffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDescriptorEXT)(VkDevice device, const VkDescriptorGetInfoEXT* pDescriptorInfo, size_t dataSize, void* pDescriptor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBindDescriptorBuffersEXT)(VkCommandBuffer commandBuffer, uint32_t bufferCount, const VkDescriptorBufferBindingInfoEXT* pBindingInfos)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDescriptorBufferOffsetsEXT)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount, const uint32_t* pBufferIndices, const VkDeviceSize* pOffsets)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT)(VkDevice device, const VkBufferCaptureDescriptorDataInfoEXT* pInfo, void* pData)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetImageOpaqueCaptureDescriptorDataEXT)(VkDevice device, const VkImageCaptureDescriptorDataInfoEXT* pInfo, void* pData)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT)(VkDevice device, const VkImageViewCaptureDescriptorDataInfoEXT* pInfo, void* pData)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT)(VkDevice device, const VkSamplerCaptureDescriptorDataInfoEXT* pInfo, void* pData)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT)(VkDevice device, const VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo, void* pData)"
  },
  {
    "label": "vkGetDescriptorSetLayoutSizeEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDescriptorSetLayoutSizeEXT(VkDevice device, VkDescriptorSetLayout layout, VkDeviceSize* pLayoutSizeInBytes)"
  },
  {
    "label": "vkGetDescriptorSetLayoutBindingOffsetEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDescriptorSetLayoutBindingOffsetEXT(VkDevice device, VkDescriptorSetLayout layout, uint32_t binding, VkDeviceSize* pOffset)"
  },
  {
    "label": "vkGetDescriptorEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDescriptorEXT(VkDevice device, const VkDescriptorGetInfoEXT* pDescriptorInfo, size_t dataSize, void* pDescriptor)"
  },
  {
    "label": "vkCmdBindDescriptorBuffersEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer, uint32_t bufferCount, const VkDescriptorBufferBindingInfoEXT* pBindingInfos)"
  },
  {
    "label": "vkCmdSetDescriptorBufferOffsetsEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount, const uint32_t* pBufferIndices, const VkDeviceSize* pOffsets)"
  },
  {
    "label": "vkCmdBindDescriptorBufferEmbeddedSamplersEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set)"
  },
  {
    "label": "vkGetBufferOpaqueCaptureDescriptorDataEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetBufferOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkBufferCaptureDescriptorDataInfoEXT* pInfo, void* pData)"
  },
  {
    "label": "vkGetImageOpaqueCaptureDescriptorDataEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetImageOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageCaptureDescriptorDataInfoEXT* pInfo, void* pData)"
  },
  {
    "label": "vkGetImageViewOpaqueCaptureDescriptorDataEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageViewCaptureDescriptorDataInfoEXT* pInfo, void* pData)"
  },
  {
    "label": "vkGetSamplerOpaqueCaptureDescriptorDataEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkSamplerCaptureDescriptorDataInfoEXT* pInfo, void* pData)"
  },
  {
    "label": "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo, void* pData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_graphics_pipeline_library 1 # define VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION 1 # define VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME \" VK_EXT_graphics_pipeline_library \" typedef enum VkGraphicsPipelineLibraryFlagBitsEXT { VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = 0 x00000001,VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = 0 x00000002,VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = 0 x00000004,VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = 0 x00000008,VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkGraphicsPipelineLibraryFlagBitsEXT ; typedef VkFlags VkGraphicsPipelineLibraryFlagsEXT ; typedef struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 graphicsPipelineLibrary ; } VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT ; typedef struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT { VkStructureType sType ; void* pNext ; VkBool32 graphicsPipelineLibraryFastLinking ; VkBool32 graphicsPipelineLibraryIndependentInterpolationDecoration ; } VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT ; typedef struct VkGraphicsPipelineLibraryCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkGraphicsPipelineLibraryFlagsEXT flags ; } VkGraphicsPipelineLibraryCreateInfoEXT ; # define VK_AMD_shader_early_and_late_fragment_tests 1 # define VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION 1 # define VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME \" VK_AMD_shader_early_and_late_fragment_tests \" typedef struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD { VkStructureType sType ; void* pNext ; VkBool32 shaderEarlyAndLateFragmentTests ; } VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD ; # define VK_NV_fragment_shading_rate_enums 1 # define VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION 1 # define VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME \" VK_NV_fragment_shading_rate_enums \" typedef enum VkFragmentShadingRateTypeNV { VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0,VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1,VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = 0 x7FFFFFFF } VkFragmentShadingRateTypeNV ; typedef enum VkFragmentShadingRateNV { VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0,VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1,VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4,VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5,VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6,VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9,VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 1 0,VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 1 1,VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 1 2,VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 1 3,VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 1 4,VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 1 5,VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = 0 x7FFFFFFF } VkFragmentShadingRateNV ; typedef struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 fragmentShadingRateEnums ; VkBool32 supersampleFragmentShadingRates ; VkBool32 noInvocationFragmentShadingRates ; } VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV ; typedef struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV { VkStructureType sType ; void* pNext ; VkSampleCountFlagBits maxFragmentShadingRateInvocationCount ; } VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV ; typedef struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV { VkStructureType sType ; const void* pNext ; VkFragmentShadingRateTypeNV shadingRateType ; VkFragmentShadingRateNV shadingRate ; VkFragmentShadingRateCombinerOpKHR combinerOps [ 2 ] ; } VkPipelineFragmentShadingRateEnumStateCreateInfoNV ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetFragmentShadingRateEnumNV)(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, const VkFragmentShadingRateCombinerOpKHR combinerOps[2])"
  },
  {
    "label": "vkCmdSetFragmentShadingRateEnumNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, const VkFragmentShadingRateCombinerOpKHR combinerOps[2])"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NV_ray_tracing_motion_blur 1 # define VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION 1 # define VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME \" VK_NV_ray_tracing_motion_blur \" typedef enum VkAccelerationStructureMotionInstanceTypeNV { VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0,VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1,VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2,VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = 0 x7FFFFFFF } VkAccelerationStructureMotionInstanceTypeNV ; typedef VkFlags VkAccelerationStructureMotionInfoFlagsNV ; typedef VkFlags VkAccelerationStructureMotionInstanceFlagsNV ; typedef union VkDeviceOrHostAddressConstKHR { VkDeviceAddress deviceAddress ; const void* hostAddress ; } VkDeviceOrHostAddressConstKHR ; typedef struct VkAccelerationStructureGeometryMotionTrianglesDataNV { VkStructureType sType ; const void* pNext ; VkDeviceOrHostAddressConstKHR vertexData ; } VkAccelerationStructureGeometryMotionTrianglesDataNV ; typedef struct VkAccelerationStructureMotionInfoNV { VkStructureType sType ; const void* pNext ; uint32_t maxInstances ; VkAccelerationStructureMotionInfoFlagsNV flags ; } VkAccelerationStructureMotionInfoNV ; typedef struct VkAccelerationStructureMatrixMotionInstanceNV { VkTransformMatrixKHR transformT0 ; VkTransformMatrixKHR transformT1 ; uint32_t instanceCustomIndex : 2 4 ; uint32_t mask : 8 ; uint32_t instanceShaderBindingTableRecordOffset : 2 4 ; VkGeometryInstanceFlagsKHR flags : 8 ; uint64_t accelerationStructureReference ; } VkAccelerationStructureMatrixMotionInstanceNV ; typedef struct VkSRTDataNV { float sx ; float a ; float b ; float pvx ; float sy ; float c ; float pvy ; float sz ; float pvz ; float qx ; float qy ; float qz ; float qw ; float tx ; float ty ; float tz ; } VkSRTDataNV ; typedef struct VkAccelerationStructureSRTMotionInstanceNV { VkSRTDataNV transformT0 ; VkSRTDataNV transformT1 ; uint32_t instanceCustomIndex : 2 4 ; uint32_t mask : 8 ; uint32_t instanceShaderBindingTableRecordOffset : 2 4 ; VkGeometryInstanceFlagsKHR flags : 8 ; uint64_t accelerationStructureReference ; } VkAccelerationStructureSRTMotionInstanceNV ; typedef union VkAccelerationStructureMotionInstanceDataNV { VkAccelerationStructureInstanceKHR staticInstance ; VkAccelerationStructureMatrixMotionInstanceNV matrixMotionInstance ; VkAccelerationStructureSRTMotionInstanceNV srtMotionInstance ; } VkAccelerationStructureMotionInstanceDataNV ; typedef struct VkAccelerationStructureMotionInstanceNV { VkAccelerationStructureMotionInstanceTypeNV type ; VkAccelerationStructureMotionInstanceFlagsNV flags ; VkAccelerationStructureMotionInstanceDataNV data ; } VkAccelerationStructureMotionInstanceNV ; typedef struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 rayTracingMotionBlur ; VkBool32 rayTracingMotionBlurPipelineTraceRaysIndirect ; } VkPhysicalDeviceRayTracingMotionBlurFeaturesNV ; # define VK_EXT_ycbcr_2plane_444_formats 1 # define VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION 1 # define VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME \" VK_EXT_ycbcr_2plane_444_formats \" typedef struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 ycbcr2plane444Formats ; } VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT ; # define VK_EXT_fragment_density_map2 1 # define VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION 1 # define VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME \" VK_EXT_fragment_density_map2 \" typedef struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 fragmentDensityMapDeferred ; } VkPhysicalDeviceFragmentDensityMap2FeaturesEXT ; typedef struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT { VkStructureType sType ; void* pNext ; VkBool32 subsampledLoads ; VkBool32 subsampledCoarseReconstructionEarlyAccess ; uint32_t maxSubsampledArrayLayers ; uint32_t maxDescriptorSetSubsampledSamplers ; } VkPhysicalDeviceFragmentDensityMap2PropertiesEXT ; # define VK_QCOM_rotated_copy_commands 1 # define VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION 2 # define VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME \" VK_QCOM_rotated_copy_commands \" typedef struct VkCopyCommandTransformInfoQCOM { VkStructureType sType ; const void* pNext ; VkSurfaceTransformFlagBitsKHR transform ; } VkCopyCommandTransformInfoQCOM ; # define VK_EXT_image_robustness 1 # define VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION 1 # define VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME \" VK_EXT_image_robustness \" typedef VkPhysicalDeviceImageRobustnessFeatures VkPhysicalDeviceImageRobustnessFeaturesEXT ; # define VK_EXT_image_compression_control 1 # define VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION 1 # define VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME \" VK_EXT_image_compression_control \" typedef enum VkImageCompressionFlagBitsEXT { VK_IMAGE_COMPRESSION_DEFAULT_EXT = 0,VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 0 x00000001,VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = 0 x00000002,VK_IMAGE_COMPRESSION_DISABLED_EXT = 0 x00000004,VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkImageCompressionFlagBitsEXT ; typedef VkFlags VkImageCompressionFlagsEXT ; typedef enum VkImageCompressionFixedRateFlagBitsEXT { VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = 0,VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = 0 x00000001,VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = 0 x00000002,VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = 0 x00000004,VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = 0 x00000008,VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = 0 x00000010,VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = 0 x00000020,VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = 0 x00000040,VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = 0 x00000080,VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = 0 x00000100,VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = 0 x00000200,VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = 0 x00000400,VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = 0 x00000800,VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = 0 x00001000,VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = 0 x00002000,VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = 0 x00004000,VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = 0 x00008000,VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = 0 x00010000,VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = 0 x00020000,VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = 0 x00040000,VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = 0 x00080000,VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = 0 x00100000,VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = 0 x00200000,VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = 0 x00400000,VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = 0 x00800000,VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkImageCompressionFixedRateFlagBitsEXT ; typedef VkFlags VkImageCompressionFixedRateFlagsEXT ; typedef struct VkPhysicalDeviceImageCompressionControlFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 imageCompressionControl ; } VkPhysicalDeviceImageCompressionControlFeaturesEXT ; typedef struct VkImageCompressionControlEXT { VkStructureType sType ; const void* pNext ; VkImageCompressionFlagsEXT flags ; uint32_t compressionControlPlaneCount ; VkImageCompressionFixedRateFlagsEXT* pFixedRateFlags ; } VkImageCompressionControlEXT ; typedef struct VkImageCompressionPropertiesEXT { VkStructureType sType ; void* pNext ; VkImageCompressionFlagsEXT imageCompressionFlags ; VkImageCompressionFixedRateFlagsEXT imageCompressionFixedRateFlags ; } VkImageCompressionPropertiesEXT ; # define VK_EXT_attachment_feedback_loop_layout 1 # define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION 2 # define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME \" VK_EXT_attachment_feedback_loop_layout \" typedef struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 attachmentFeedbackLoopLayout ; } VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT ; # define VK_EXT_4444_formats 1 # define VK_EXT_4444_FORMATS_SPEC_VERSION 1 # define VK_EXT_4444_FORMATS_EXTENSION_NAME \" VK_EXT_4444_formats \" typedef struct VkPhysicalDevice4444FormatsFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 formatA4R4G4B4 ; VkBool32 formatA4B4G4R4 ; } VkPhysicalDevice4444FormatsFeaturesEXT ; # define VK_EXT_device_fault 1 # define VK_EXT_DEVICE_FAULT_SPEC_VERSION 2 # define VK_EXT_DEVICE_FAULT_EXTENSION_NAME \" VK_EXT_device_fault \" typedef enum VkDeviceFaultAddressTypeEXT { VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = 0,VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = 1,VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = 2,VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = 3,VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = 4,VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = 5,VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = 6,VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkDeviceFaultAddressTypeEXT ; typedef enum VkDeviceFaultVendorBinaryHeaderVersionEXT { VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = 1,VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT = 0 x7FFFFFFF } VkDeviceFaultVendorBinaryHeaderVersionEXT ; typedef struct VkPhysicalDeviceFaultFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 deviceFault ; VkBool32 deviceFaultVendorBinary ; } VkPhysicalDeviceFaultFeaturesEXT ; typedef struct VkDeviceFaultCountsEXT { VkStructureType sType ; void* pNext ; uint32_t addressInfoCount ; uint32_t vendorInfoCount ; VkDeviceSize vendorBinarySize ; } VkDeviceFaultCountsEXT ; typedef struct VkDeviceFaultAddressInfoEXT { VkDeviceFaultAddressTypeEXT addressType ; VkDeviceAddress reportedAddress ; VkDeviceSize addressPrecision ; } VkDeviceFaultAddressInfoEXT ; typedef struct VkDeviceFaultVendorInfoEXT { char description [ VK_MAX_DESCRIPTION_SIZE ] ; uint64_t vendorFaultCode ; uint64_t vendorFaultData ; } VkDeviceFaultVendorInfoEXT ; typedef struct VkDeviceFaultInfoEXT { VkStructureType sType ; void* pNext ; char description [ VK_MAX_DESCRIPTION_SIZE ] ; VkDeviceFaultAddressInfoEXT* pAddressInfos ; VkDeviceFaultVendorInfoEXT* pVendorInfos ; void* pVendorBinaryData ; } VkDeviceFaultInfoEXT ; typedef struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT { uint32_t headerSize ; VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion ; uint32_t vendorID ; uint32_t deviceID ; uint32_t driverVersion ; uint8_t pipelineCacheUUID [ VK_UUID_SIZE ] ; uint32_t applicationNameOffset ; uint32_t applicationVersion ; uint32_t engineNameOffset ; uint32_t engineVersion ; uint32_t apiVersion ; } VkDeviceFaultVendorBinaryHeaderVersionOneEXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetDeviceFaultInfoEXT)(VkDevice device, VkDeviceFaultCountsEXT* pFaultCounts, VkDeviceFaultInfoEXT* pFaultInfo)"
  },
  {
    "label": "vkGetDeviceFaultInfoEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetDeviceFaultInfoEXT(VkDevice device, VkDeviceFaultCountsEXT* pFaultCounts, VkDeviceFaultInfoEXT* pFaultInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_ARM_rasterization_order_attachment_access 1 # define VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION 1 # define VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME \" VK_ARM_rasterization_order_attachment_access \" typedef struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 rasterizationOrderColorAttachmentAccess ; VkBool32 rasterizationOrderDepthAttachmentAccess ; VkBool32 rasterizationOrderStencilAttachmentAccess ; } VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT ; typedef VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM ; # define VK_EXT_rgba10x6_formats 1 # define VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION 1 # define VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME \" VK_EXT_rgba10x6_formats \" typedef struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 formatRgba10x6WithoutYCbCrSampler ; } VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT ; # define VK_VALVE_mutable_descriptor_type 1 # define VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION 1 # define VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME \" VK_VALVE_mutable_descriptor_type \" typedef struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 mutableDescriptorType ; } VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT ; typedef VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE ; typedef struct VkMutableDescriptorTypeListEXT { uint32_t descriptorTypeCount ; const VkDescriptorType* pDescriptorTypes ; } VkMutableDescriptorTypeListEXT ; typedef VkMutableDescriptorTypeListEXT VkMutableDescriptorTypeListVALVE ; typedef struct VkMutableDescriptorTypeCreateInfoEXT { VkStructureType sType ; const void* pNext ; uint32_t mutableDescriptorTypeListCount ; const VkMutableDescriptorTypeListEXT* pMutableDescriptorTypeLists ; } VkMutableDescriptorTypeCreateInfoEXT ; typedef VkMutableDescriptorTypeCreateInfoEXT VkMutableDescriptorTypeCreateInfoVALVE ; # define VK_EXT_vertex_input_dynamic_state 1 # define VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION 2 # define VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME \" VK_EXT_vertex_input_dynamic_state \" typedef struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 vertexInputDynamicState ; } VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT ; typedef struct VkVertexInputBindingDescription2EXT { VkStructureType sType ; void* pNext ; uint32_t binding ; uint32_t stride ; VkVertexInputRate inputRate ; uint32_t divisor ; } VkVertexInputBindingDescription2EXT ; typedef struct VkVertexInputAttributeDescription2EXT { VkStructureType sType ; void* pNext ; uint32_t location ; uint32_t binding ; VkFormat format ; uint32_t offset ; } VkVertexInputAttributeDescription2EXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetVertexInputEXT)(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions)"
  },
  {
    "label": "vkCmdSetVertexInputEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_physical_device_drm 1 # define VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION 1 # define VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME \" VK_EXT_physical_device_drm \" typedef struct VkPhysicalDeviceDrmPropertiesEXT { VkStructureType sType ; void* pNext ; VkBool32 hasPrimary ; VkBool32 hasRender ; int64_t primaryMajor ; int64_t primaryMinor ; int64_t renderMajor ; int64_t renderMinor ; } VkPhysicalDeviceDrmPropertiesEXT ; # define VK_EXT_device_address_binding_report 1 # define VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION 1 # define VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME \" VK_EXT_device_address_binding_report \" typedef enum VkDeviceAddressBindingTypeEXT { VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = 0,VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = 1,VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkDeviceAddressBindingTypeEXT ; typedef enum VkDeviceAddressBindingFlagBitsEXT { VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = 0 x00000001,VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkDeviceAddressBindingFlagBitsEXT ; typedef VkFlags VkDeviceAddressBindingFlagsEXT ; typedef struct VkPhysicalDeviceAddressBindingReportFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 reportAddressBinding ; } VkPhysicalDeviceAddressBindingReportFeaturesEXT ; typedef struct VkDeviceAddressBindingCallbackDataEXT { VkStructureType sType ; void* pNext ; VkDeviceAddressBindingFlagsEXT flags ; VkDeviceAddress baseAddress ; VkDeviceSize size ; VkDeviceAddressBindingTypeEXT bindingType ; } VkDeviceAddressBindingCallbackDataEXT ; # define VK_EXT_depth_clip_control 1 # define VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION 1 # define VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME \" VK_EXT_depth_clip_control \" typedef struct VkPhysicalDeviceDepthClipControlFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 depthClipControl ; } VkPhysicalDeviceDepthClipControlFeaturesEXT ; typedef struct VkPipelineViewportDepthClipControlCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkBool32 negativeOneToOne ; } VkPipelineViewportDepthClipControlCreateInfoEXT ; # define VK_EXT_primitive_topology_list_restart 1 # define VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION 1 # define VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME \" VK_EXT_primitive_topology_list_restart \" typedef struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 primitiveTopologyListRestart ; VkBool32 primitiveTopologyPatchListRestart ; } VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT ; # define VK_HUAWEI_subpass_shading 1 # define VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION 3 # define VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME \" VK_HUAWEI_subpass_shading \" typedef struct VkSubpassShadingPipelineCreateInfoHUAWEI { VkStructureType sType ; void* pNext ; VkRenderPass renderPass ; uint32_t subpass ; } VkSubpassShadingPipelineCreateInfoHUAWEI ; typedef struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI { VkStructureType sType ; void* pNext ; VkBool32 subpassShading ; } VkPhysicalDeviceSubpassShadingFeaturesHUAWEI ; typedef struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI { VkStructureType sType ; void* pNext ; uint32_t maxSubpassShadingWorkgroupSizeAspectRatio ; } VkPhysicalDeviceSubpassShadingPropertiesHUAWEI ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI)(VkDevice device, VkRenderPass renderpass, VkExtent2D* pMaxWorkgroupSize)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSubpassShadingHUAWEI)(VkCommandBuffer commandBuffer)"
  },
  {
    "label": "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice device, VkRenderPass renderpass, VkExtent2D* pMaxWorkgroupSize)"
  },
  {
    "label": "vkCmdSubpassShadingHUAWEI()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_HUAWEI_invocation_mask 1 # define VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION 1 # define VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME \" VK_HUAWEI_invocation_mask \" typedef struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI { VkStructureType sType ; void* pNext ; VkBool32 invocationMask ; } VkPhysicalDeviceInvocationMaskFeaturesHUAWEI ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBindInvocationMaskHUAWEI)(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)"
  },
  {
    "label": "vkCmdBindInvocationMaskHUAWEI()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NV_external_memory_rdma 1 typedef void* VkRemoteAddressNV ; # define VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION 1 # define VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME \" VK_NV_external_memory_rdma \" typedef struct VkMemoryGetRemoteAddressInfoNV { VkStructureType sType ; const void* pNext ; VkDeviceMemory memory ; VkExternalMemoryHandleTypeFlagBits handleType ; } VkMemoryGetRemoteAddressInfoNV ; typedef struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 externalMemoryRDMA ; } VkPhysicalDeviceExternalMemoryRDMAFeaturesNV ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetMemoryRemoteAddressNV)(VkDevice device, const VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo, VkRemoteAddressNV* pAddress)"
  },
  {
    "label": "vkGetMemoryRemoteAddressNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetMemoryRemoteAddressNV(VkDevice device, const VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo, VkRemoteAddressNV* pAddress)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_pipeline_properties 1 # define VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION 1 # define VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME \" VK_EXT_pipeline_properties \" typedef VkPipelineInfoKHR VkPipelineInfoEXT ; typedef struct VkPipelinePropertiesIdentifierEXT { VkStructureType sType ; void* pNext ; uint8_t pipelineIdentifier [ VK_UUID_SIZE ] ; } VkPipelinePropertiesIdentifierEXT ; typedef struct VkPhysicalDevicePipelinePropertiesFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 pipelinePropertiesIdentifier ; } VkPhysicalDevicePipelinePropertiesFeaturesEXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPipelinePropertiesEXT)(VkDevice device, const VkPipelineInfoEXT* pPipelineInfo, VkBaseOutStructure* pPipelineProperties)"
  },
  {
    "label": "vkGetPipelinePropertiesEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPipelinePropertiesEXT(VkDevice device, const VkPipelineInfoEXT* pPipelineInfo, VkBaseOutStructure* pPipelineProperties)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_frame_boundary 1 # define VK_EXT_FRAME_BOUNDARY_SPEC_VERSION 1 # define VK_EXT_FRAME_BOUNDARY_EXTENSION_NAME \" VK_EXT_frame_boundary \" typedef enum VkFrameBoundaryFlagBitsEXT { VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT = 0 x00000001,VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkFrameBoundaryFlagBitsEXT ; typedef VkFlags VkFrameBoundaryFlagsEXT ; typedef struct VkPhysicalDeviceFrameBoundaryFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 frameBoundary ; } VkPhysicalDeviceFrameBoundaryFeaturesEXT ; typedef struct VkFrameBoundaryEXT { VkStructureType sType ; const void* pNext ; VkFrameBoundaryFlagsEXT flags ; uint64_t frameID ; uint32_t imageCount ; const VkImage* pImages ; uint32_t bufferCount ; const VkBuffer* pBuffers ; uint64_t tagName ; size_t tagSize ; const void* pTag ; } VkFrameBoundaryEXT ; # define VK_EXT_multisampled_render_to_single_sampled 1 # define VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION 1 # define VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME \" VK_EXT_multisampled_render_to_single_sampled \" typedef struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 multisampledRenderToSingleSampled ; } VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT ; typedef struct VkSubpassResolvePerformanceQueryEXT { VkStructureType sType ; void* pNext ; VkBool32 optimal ; } VkSubpassResolvePerformanceQueryEXT ; typedef struct VkMultisampledRenderToSingleSampledInfoEXT { VkStructureType sType ; const void* pNext ; VkBool32 multisampledRenderToSingleSampledEnable ; VkSampleCountFlagBits rasterizationSamples ; } VkMultisampledRenderToSingleSampledInfoEXT ; # define VK_EXT_extended_dynamic_state2 1 # define VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION 1 # define VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME \" VK_EXT_extended_dynamic_state2 \" typedef struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 extendedDynamicState2 ; VkBool32 extendedDynamicState2LogicOp ; VkBool32 extendedDynamicState2PatchControlPoints ; } VkPhysicalDeviceExtendedDynamicState2FeaturesEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetPatchControlPointsEXT)(VkCommandBuffer commandBuffer, uint32_t patchControlPoints)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetRasterizerDiscardEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDepthBiasEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetLogicOpEXT)(VkCommandBuffer commandBuffer, VkLogicOp logicOp)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetPrimitiveRestartEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)"
  },
  {
    "label": "vkCmdSetPatchControlPointsEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints)"
  },
  {
    "label": "vkCmdSetRasterizerDiscardEnableEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)"
  },
  {
    "label": "vkCmdSetDepthBiasEnableEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)"
  },
  {
    "label": "vkCmdSetLogicOpEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp)"
  },
  {
    "label": "vkCmdSetPrimitiveRestartEnableEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_color_write_enable 1 # define VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION 1 # define VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME \" VK_EXT_color_write_enable \" typedef struct VkPhysicalDeviceColorWriteEnableFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 colorWriteEnable ; } VkPhysicalDeviceColorWriteEnableFeaturesEXT ; typedef struct VkPipelineColorWriteCreateInfoEXT { VkStructureType sType ; const void* pNext ; uint32_t attachmentCount ; const VkBool32* pColorWriteEnables ; } VkPipelineColorWriteCreateInfoEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetColorWriteEnableEXT)(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkBool32* pColorWriteEnables)"
  },
  {
    "label": "vkCmdSetColorWriteEnableEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkBool32* pColorWriteEnables)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_primitives_generated_query 1 # define VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION 1 # define VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME \" VK_EXT_primitives_generated_query \" typedef struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 primitivesGeneratedQuery ; VkBool32 primitivesGeneratedQueryWithRasterizerDiscard ; VkBool32 primitivesGeneratedQueryWithNonZeroStreams ; } VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT ; # define VK_EXT_global_priority_query 1 # define VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION 1 # define VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME \" VK_EXT_global_priority_query \" # define VK_MAX_GLOBAL_PRIORITY_SIZE_EXT VK_MAX_GLOBAL_PRIORITY_SIZE_KHR typedef VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT ; typedef VkQueueFamilyGlobalPriorityPropertiesKHR VkQueueFamilyGlobalPriorityPropertiesEXT ; # define VK_EXT_image_view_min_lod 1 # define VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION 1 # define VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME \" VK_EXT_image_view_min_lod \" typedef struct VkPhysicalDeviceImageViewMinLodFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 minLod ; } VkPhysicalDeviceImageViewMinLodFeaturesEXT ; typedef struct VkImageViewMinLodCreateInfoEXT { VkStructureType sType ; const void* pNext ; float minLod ; } VkImageViewMinLodCreateInfoEXT ; # define VK_EXT_multi_draw 1 # define VK_EXT_MULTI_DRAW_SPEC_VERSION 1 # define VK_EXT_MULTI_DRAW_EXTENSION_NAME \" VK_EXT_multi_draw \" typedef struct VkPhysicalDeviceMultiDrawFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 multiDraw ; } VkPhysicalDeviceMultiDrawFeaturesEXT ; typedef struct VkPhysicalDeviceMultiDrawPropertiesEXT { VkStructureType sType ; void* pNext ; uint32_t maxMultiDrawCount ; } VkPhysicalDeviceMultiDrawPropertiesEXT ; typedef struct VkMultiDrawInfoEXT { uint32_t firstVertex ; uint32_t vertexCount ; } VkMultiDrawInfoEXT ; typedef struct VkMultiDrawIndexedInfoEXT { uint32_t firstIndex ; uint32_t indexCount ; int32_t vertexOffset ; } VkMultiDrawIndexedInfoEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawMultiEXT)(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawInfoEXT* pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawMultiIndexedEXT)(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawIndexedInfoEXT* pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, const int32_t* pVertexOffset)"
  },
  {
    "label": "vkCmdDrawMultiEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawInfoEXT* pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride)"
  },
  {
    "label": "vkCmdDrawMultiIndexedEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawIndexedInfoEXT* pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, const int32_t* pVertexOffset)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_image_2d_view_of_3d 1 # define VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION 1 # define VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME \" VK_EXT_image_2d_view_of_3d \" typedef struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 image2DViewOf3D ; VkBool32 sampler2DViewOf3D ; } VkPhysicalDeviceImage2DViewOf3DFeaturesEXT ; # define VK_EXT_shader_tile_image 1 # define VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION 1 # define VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME \" VK_EXT_shader_tile_image \" typedef struct VkPhysicalDeviceShaderTileImageFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 shaderTileImageColorReadAccess ; VkBool32 shaderTileImageDepthReadAccess ; VkBool32 shaderTileImageStencilReadAccess ; } VkPhysicalDeviceShaderTileImageFeaturesEXT ; typedef struct VkPhysicalDeviceShaderTileImagePropertiesEXT { VkStructureType sType ; void* pNext ; VkBool32 shaderTileImageCoherentReadAccelerated ; VkBool32 shaderTileImageReadSampleFromPixelRateInvocation ; VkBool32 shaderTileImageReadFromHelperInvocation ; } VkPhysicalDeviceShaderTileImagePropertiesEXT ; # define VK_EXT_opacity_micromap 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkMicromapEXT)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT = 0,# ifdef VK_ENABLE_BETA_EXTENSIONS VK_MICROMAP_TYPE_DISPLACEMENT_MICROMAP_NV = 1 0 0 0 3 9 7 0 0 0,# endif VK_MICROMAP_TYPE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkMicromapTypeEXT ; typedef enum VkBuildMicromapModeEXT { VK_BUILD_MICROMAP_MODE_BUILD_EXT = 0,VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkBuildMicromapModeEXT ; typedef enum VkCopyMicromapModeEXT { VK_COPY_MICROMAP_MODE_CLONE_EXT = 0,VK_COPY_MICROMAP_MODE_SERIALIZE_EXT = 1,VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT = 2,VK_COPY_MICROMAP_MODE_COMPACT_EXT = 3,VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkCopyMicromapModeEXT ; typedef enum VkOpacityMicromapFormatEXT { VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT = 1,VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT = 2,VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT = 0 x7FFFFFFF } VkOpacityMicromapFormatEXT ; typedef enum VkOpacityMicromapSpecialIndexEXT { VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = - 1,VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = - 2,VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = - 3,VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = - 4,VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT = 0 x7FFFFFFF } VkOpacityMicromapSpecialIndexEXT ; typedef enum VkAccelerationStructureCompatibilityKHR { VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0,VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1,VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = 0 x7FFFFFFF } VkAccelerationStructureCompatibilityKHR ; typedef enum VkAccelerationStructureBuildTypeKHR { VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0,VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1,VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2,VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = 0 x7FFFFFFF } VkAccelerationStructureBuildTypeKHR ; typedef enum VkBuildMicromapFlagBitsEXT { VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT = 0 x00000001,VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT = 0 x00000002,VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT = 0 x00000004,VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkBuildMicromapFlagBitsEXT ; typedef VkFlags VkBuildMicromapFlagsEXT ; typedef enum VkMicromapCreateFlagBitsEXT { VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 0 x00000001,VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkMicromapCreateFlagBitsEXT ; typedef VkFlags VkMicromapCreateFlagsEXT ; typedef struct VkMicromapUsageEXT { uint32_t count ; uint32_t subdivisionLevel ; uint32_t format ; } VkMicromapUsageEXT ; typedef union VkDeviceOrHostAddressKHR { VkDeviceAddress deviceAddress ; void* hostAddress ; } VkDeviceOrHostAddressKHR ; typedef struct VkMicromapBuildInfoEXT { VkStructureType sType ; const void* pNext ; VkMicromapTypeEXT type ; VkBuildMicromapFlagsEXT flags ; VkBuildMicromapModeEXT mode ; VkMicromapEXT dstMicromap ; uint32_t usageCountsCount ; const VkMicromapUsageEXT* pUsageCounts ; const VkMicromapUsageEXT* const* ppUsageCounts ; VkDeviceOrHostAddressConstKHR data ; VkDeviceOrHostAddressKHR scratchData ; VkDeviceOrHostAddressConstKHR triangleArray ; VkDeviceSize triangleArrayStride ; } VkMicromapBuildInfoEXT ; typedef struct VkMicromapCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkMicromapCreateFlagsEXT createFlags ; VkBuffer buffer ; VkDeviceSize offset ; VkDeviceSize size ; VkMicromapTypeEXT type ; VkDeviceAddress deviceAddress ; } VkMicromapCreateInfoEXT ; typedef struct VkPhysicalDeviceOpacityMicromapFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 micromap ; VkBool32 micromapCaptureReplay ; VkBool32 micromapHostCommands ; } VkPhysicalDeviceOpacityMicromapFeaturesEXT ; typedef struct VkPhysicalDeviceOpacityMicromapPropertiesEXT { VkStructureType sType ; void* pNext ; uint32_t maxOpacity2StateSubdivisionLevel ; uint32_t maxOpacity4StateSubdivisionLevel ; } VkPhysicalDeviceOpacityMicromapPropertiesEXT ; typedef struct VkMicromapVersionInfoEXT { VkStructureType sType ; const void* pNext ; const uint8_t* pVersionData ; } VkMicromapVersionInfoEXT ; typedef struct VkCopyMicromapToMemoryInfoEXT { VkStructureType sType ; const void* pNext ; VkMicromapEXT src ; VkDeviceOrHostAddressKHR dst ; VkCopyMicromapModeEXT mode ; } VkCopyMicromapToMemoryInfoEXT ; typedef struct VkCopyMemoryToMicromapInfoEXT { VkStructureType sType ; const void* pNext ; VkDeviceOrHostAddressConstKHR src ; VkMicromapEXT dst ; VkCopyMicromapModeEXT mode ; } VkCopyMemoryToMicromapInfoEXT ; typedef struct VkCopyMicromapInfoEXT { VkStructureType sType ; const void* pNext ; VkMicromapEXT src ; VkMicromapEXT dst ; VkCopyMicromapModeEXT mode ; } VkCopyMicromapInfoEXT ; typedef struct VkMicromapBuildSizesInfoEXT { VkStructureType sType ; const void* pNext ; VkDeviceSize micromapSize ; VkDeviceSize buildScratchSize ; VkBool32 discardable ; } VkMicromapBuildSizesInfoEXT ; typedef struct VkAccelerationStructureTrianglesOpacityMicromapEXT { VkStructureType sType ; void* pNext ; VkIndexType indexType ; VkDeviceOrHostAddressConstKHR indexBuffer ; VkDeviceSize indexStride ; uint32_t baseTriangle ; uint32_t usageCountsCount ; const VkMicromapUsageEXT* pUsageCounts ; const VkMicromapUsageEXT* const* ppUsageCounts ; VkMicromapEXT micromap ; } VkAccelerationStructureTrianglesOpacityMicromapEXT ; typedef struct VkMicromapTriangleEXT { uint32_t dataOffset ; uint16_t subdivisionLevel ; uint16_t format ; } VkMicromapTriangleEXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateMicromapEXT)(VkDevice device, const VkMicromapCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkMicromapEXT* pMicromap)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyMicromapEXT)(VkDevice device, VkMicromapEXT micromap, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBuildMicromapsEXT)(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkMicromapBuildInfoEXT* pInfos)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkBuildMicromapsEXT)(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkMicromapBuildInfoEXT* pInfos)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCopyMicromapEXT)(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapInfoEXT* pInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCopyMicromapToMemoryEXT)(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapToMemoryInfoEXT* pInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCopyMemoryToMicromapEXT)(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToMicromapInfoEXT* pInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkWriteMicromapsPropertiesEXT)(VkDevice device, uint32_t micromapCount, const VkMicromapEXT* pMicromaps, VkQueryType queryType, size_t dataSize, void* pData, size_t stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyMicromapEXT)(VkCommandBuffer commandBuffer, const VkCopyMicromapInfoEXT* pInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyMicromapToMemoryEXT)(VkCommandBuffer commandBuffer, const VkCopyMicromapToMemoryInfoEXT* pInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyMemoryToMicromapEXT)(VkCommandBuffer commandBuffer, const VkCopyMemoryToMicromapInfoEXT* pInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdWriteMicromapsPropertiesEXT)(VkCommandBuffer commandBuffer, uint32_t micromapCount, const VkMicromapEXT* pMicromaps, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDeviceMicromapCompatibilityEXT)(VkDevice device, const VkMicromapVersionInfoEXT* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetMicromapBuildSizesEXT)(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkMicromapBuildInfoEXT* pBuildInfo, VkMicromapBuildSizesInfoEXT* pSizeInfo)"
  },
  {
    "label": "vkCreateMicromapEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateMicromapEXT(VkDevice device, const VkMicromapCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkMicromapEXT* pMicromap)"
  },
  {
    "label": "vkDestroyMicromapEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyMicromapEXT(VkDevice device, VkMicromapEXT micromap, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCmdBuildMicromapsEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBuildMicromapsEXT(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkMicromapBuildInfoEXT* pInfos)"
  },
  {
    "label": "vkBuildMicromapsEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkBuildMicromapsEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkMicromapBuildInfoEXT* pInfos)"
  },
  {
    "label": "vkCopyMicromapEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCopyMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapInfoEXT* pInfo)"
  },
  {
    "label": "vkCopyMicromapToMemoryEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCopyMicromapToMemoryEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapToMemoryInfoEXT* pInfo)"
  },
  {
    "label": "vkCopyMemoryToMicromapEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCopyMemoryToMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToMicromapInfoEXT* pInfo)"
  },
  {
    "label": "vkWriteMicromapsPropertiesEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkWriteMicromapsPropertiesEXT(VkDevice device, uint32_t micromapCount, const VkMicromapEXT* pMicromaps, VkQueryType queryType, size_t dataSize, void* pData, size_t stride)"
  },
  {
    "label": "vkCmdCopyMicromapEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapInfoEXT* pInfo)"
  },
  {
    "label": "vkCmdCopyMicromapToMemoryEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyMicromapToMemoryEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapToMemoryInfoEXT* pInfo)"
  },
  {
    "label": "vkCmdCopyMemoryToMicromapEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyMemoryToMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMemoryToMicromapInfoEXT* pInfo)"
  },
  {
    "label": "vkCmdWriteMicromapsPropertiesEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdWriteMicromapsPropertiesEXT(VkCommandBuffer commandBuffer, uint32_t micromapCount, const VkMicromapEXT* pMicromaps, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)"
  },
  {
    "label": "vkGetDeviceMicromapCompatibilityEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDeviceMicromapCompatibilityEXT(VkDevice device, const VkMicromapVersionInfoEXT* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility)"
  },
  {
    "label": "vkGetMicromapBuildSizesEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetMicromapBuildSizesEXT(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkMicromapBuildInfoEXT* pBuildInfo, VkMicromapBuildSizesInfoEXT* pSizeInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_load_store_op_none 1 # define VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION 1 # define VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME \" VK_EXT_load_store_op_none \" # define VK_HUAWEI_cluster_culling_shader 1 # define VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION 3 # define VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME \" VK_HUAWEI_cluster_culling_shader \" typedef struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI { VkStructureType sType ; void* pNext ; VkBool32 clustercullingShader ; VkBool32 multiviewClusterCullingShader ; } VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI ; typedef struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI { VkStructureType sType ; void* pNext ; uint32_t maxWorkGroupCount [ 3 ] ; uint32_t maxWorkGroupSize [ 3 ] ; uint32_t maxOutputClusterCount ; VkDeviceSize indirectBufferOffsetAlignment ; } VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI ; typedef struct VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI { VkStructureType sType ; void* pNext ; VkBool32 clusterShadingRate ; } VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawClusterHUAWEI)(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawClusterIndirectHUAWEI)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)"
  },
  {
    "label": "vkCmdDrawClusterHUAWEI()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawClusterHUAWEI(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)"
  },
  {
    "label": "vkCmdDrawClusterIndirectHUAWEI()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawClusterIndirectHUAWEI(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_border_color_swizzle 1 # define VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION 1 # define VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME \" VK_EXT_border_color_swizzle \" typedef struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 borderColorSwizzle ; VkBool32 borderColorSwizzleFromImage ; } VkPhysicalDeviceBorderColorSwizzleFeaturesEXT ; typedef struct VkSamplerBorderColorComponentMappingCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkComponentMapping components ; VkBool32 srgb ; } VkSamplerBorderColorComponentMappingCreateInfoEXT ; # define VK_EXT_pageable_device_local_memory 1 # define VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION 1 # define VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME \" VK_EXT_pageable_device_local_memory \" typedef struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 pageableDeviceLocalMemory ; } VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkSetDeviceMemoryPriorityEXT)(VkDevice device, VkDeviceMemory memory, float priority)"
  },
  {
    "label": "vkSetDeviceMemoryPriorityEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkSetDeviceMemoryPriorityEXT(VkDevice device, VkDeviceMemory memory, float priority)"
  },
  {
    "label": "VK_REMAINING_3D_SLICES_EXT()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_ARM_shader_core_properties 1 # define VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION 1 # define VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME \" VK_ARM_shader_core_properties \" typedef struct VkPhysicalDeviceShaderCorePropertiesARM { VkStructureType sType ; void* pNext ; uint32_t pixelRate ; uint32_t texelRate ; uint32_t fmaRate ; } VkPhysicalDeviceShaderCorePropertiesARM ; # define VK_ARM_scheduling_controls 1 # define VK_ARM_SCHEDULING_CONTROLS_SPEC_VERSION 1 # define VK_ARM_SCHEDULING_CONTROLS_EXTENSION_NAME \" VK_ARM_scheduling_controls \" typedef VkFlags64 VkPhysicalDeviceSchedulingControlsFlagsARM ; typedef VkFlags64 VkPhysicalDeviceSchedulingControlsFlagBitsARM ; const VkPhysicalDeviceSchedulingControlsFlagBitsARM VK_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM = 0 x00000001ULL ; typedef struct VkDeviceQueueShaderCoreControlCreateInfoARM { VkStructureType sType ; void* pNext ; uint32_t shaderCoreCount ; } VkDeviceQueueShaderCoreControlCreateInfoARM ; typedef struct VkPhysicalDeviceSchedulingControlsFeaturesARM { VkStructureType sType ; void* pNext ; VkBool32 schedulingControls ; } VkPhysicalDeviceSchedulingControlsFeaturesARM ; typedef struct VkPhysicalDeviceSchedulingControlsPropertiesARM { VkStructureType sType ; void* pNext ; VkPhysicalDeviceSchedulingControlsFlagsARM schedulingControlsFlags ; } VkPhysicalDeviceSchedulingControlsPropertiesARM ; # define VK_EXT_image_sliced_view_of_3d 1 # define VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION 1 # define VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME \" VK_EXT_image_sliced_view_of_3d \" # define)",
    "insertText": "VK_REMAINING_3D_SLICES_EXT(~0U)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (VkStructureType sType ; void* pNext ; VkBool32 imageSlicedViewOf3D ; } VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT ; typedef struct VkImageViewSlicedCreateInfoEXT { VkStructureType sType ; const void* pNext ; uint32_t sliceOffset ; uint32_t sliceCount ; } VkImageViewSlicedCreateInfoEXT ; # define VK_VALVE_descriptor_set_host_mapping 1 # define VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION 1 # define VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME \" VK_VALVE_descriptor_set_host_mapping \" typedef struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE { VkStructureType sType ; void* pNext ; VkBool32 descriptorSetHostMapping ; } VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE ; typedef struct VkDescriptorSetBindingReferenceVALVE { VkStructureType sType ; const void* pNext ; VkDescriptorSetLayout descriptorSetLayout ; uint32_t binding ; } VkDescriptorSetBindingReferenceVALVE ; typedef struct VkDescriptorSetLayoutHostMappingInfoVALVE { VkStructureType sType ; void* pNext ; size_t descriptorOffset ; uint32_t descriptorSize ; } VkDescriptorSetLayoutHostMappingInfoVALVE ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE)(VkDevice device, const VkDescriptorSetBindingReferenceVALVE* pBindingReference, VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDescriptorSetHostMappingVALVE)(VkDevice device, VkDescriptorSet descriptorSet, void** ppData)"
  },
  {
    "label": "vkGetDescriptorSetLayoutHostMappingInfoVALVE()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDescriptorSetLayoutHostMappingInfoVALVE(VkDevice device, const VkDescriptorSetBindingReferenceVALVE* pBindingReference, VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping)"
  },
  {
    "label": "vkGetDescriptorSetHostMappingVALVE()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDescriptorSetHostMappingVALVE(VkDevice device, VkDescriptorSet descriptorSet, void** ppData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_depth_clamp_zero_one 1 # define VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION 1 # define VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME \" VK_EXT_depth_clamp_zero_one \" typedef struct VkPhysicalDeviceDepthClampZeroOneFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 depthClampZeroOne ; } VkPhysicalDeviceDepthClampZeroOneFeaturesEXT ; # define VK_EXT_non_seamless_cube_map 1 # define VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION 1 # define VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME \" VK_EXT_non_seamless_cube_map \" typedef struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 nonSeamlessCubeMap ; } VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT ; # define VK_ARM_render_pass_striped 1 # define VK_ARM_RENDER_PASS_STRIPED_SPEC_VERSION 1 # define VK_ARM_RENDER_PASS_STRIPED_EXTENSION_NAME \" VK_ARM_render_pass_striped \" typedef struct VkPhysicalDeviceRenderPassStripedFeaturesARM { VkStructureType sType ; void* pNext ; VkBool32 renderPassStriped ; } VkPhysicalDeviceRenderPassStripedFeaturesARM ; typedef struct VkPhysicalDeviceRenderPassStripedPropertiesARM { VkStructureType sType ; void* pNext ; VkExtent2D renderPassStripeGranularity ; uint32_t maxRenderPassStripes ; } VkPhysicalDeviceRenderPassStripedPropertiesARM ; typedef struct VkRenderPassStripeInfoARM { VkStructureType sType ; const void* pNext ; VkRect2D stripeArea ; } VkRenderPassStripeInfoARM ; typedef struct VkRenderPassStripeBeginInfoARM { VkStructureType sType ; const void* pNext ; uint32_t stripeInfoCount ; const VkRenderPassStripeInfoARM* pStripeInfos ; } VkRenderPassStripeBeginInfoARM ; typedef struct VkRenderPassStripeSubmitInfoARM { VkStructureType sType ; const void* pNext ; uint32_t stripeSemaphoreInfoCount ; const VkSemaphoreSubmitInfo* pStripeSemaphoreInfos ; } VkRenderPassStripeSubmitInfoARM ; # define VK_QCOM_fragment_density_map_offset 1 # define VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION 2 # define VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME \" VK_QCOM_fragment_density_map_offset \" typedef struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM { VkStructureType sType ; void* pNext ; VkBool32 fragmentDensityMapOffset ; } VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM ; typedef struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM { VkStructureType sType ; void* pNext ; VkExtent2D fragmentDensityOffsetGranularity ; } VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM ; typedef struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM { VkStructureType sType ; const void* pNext ; uint32_t fragmentDensityOffsetCount ; const VkOffset2D* pFragmentDensityOffsets ; } VkSubpassFragmentDensityMapOffsetEndInfoQCOM ; # define VK_NV_copy_memory_indirect 1 # define VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION 1 # define VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME \" VK_NV_copy_memory_indirect \" typedef struct VkCopyMemoryIndirectCommandNV { VkDeviceAddress srcAddress ; VkDeviceAddress dstAddress ; VkDeviceSize size ; } VkCopyMemoryIndirectCommandNV ; typedef struct VkCopyMemoryToImageIndirectCommandNV { VkDeviceAddress srcAddress ; uint32_t bufferRowLength ; uint32_t bufferImageHeight ; VkImageSubresourceLayers imageSubresource ; VkOffset3D imageOffset ; VkExtent3D imageExtent ; } VkCopyMemoryToImageIndirectCommandNV ; typedef struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 indirectCopy ; } VkPhysicalDeviceCopyMemoryIndirectFeaturesNV ; typedef struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNV { VkStructureType sType ; void* pNext ; VkQueueFlags supportedQueues ; } VkPhysicalDeviceCopyMemoryIndirectPropertiesNV ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyMemoryIndirectNV)(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyMemoryToImageIndirectNV)(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride, VkImage dstImage, VkImageLayout dstImageLayout, const VkImageSubresourceLayers* pImageSubresources)"
  },
  {
    "label": "vkCmdCopyMemoryIndirectNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyMemoryIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride)"
  },
  {
    "label": "vkCmdCopyMemoryToImageIndirectNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyMemoryToImageIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride, VkImage dstImage, VkImageLayout dstImageLayout, const VkImageSubresourceLayers* pImageSubresources)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NV_memory_decompression 1 # define VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION 1 # define VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME \" VK_NV_memory_decompression \" typedef VkFlags64 VkMemoryDecompressionMethodFlagBitsNV ; const VkMemoryDecompressionMethodFlagBitsNV VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV = 0 x00000001ULL ; typedef VkFlags64 VkMemoryDecompressionMethodFlagsNV ; typedef struct VkDecompressMemoryRegionNV { VkDeviceAddress srcAddress ; VkDeviceAddress dstAddress ; VkDeviceSize compressedSize ; VkDeviceSize decompressedSize ; VkMemoryDecompressionMethodFlagsNV decompressionMethod ; } VkDecompressMemoryRegionNV ; typedef struct VkPhysicalDeviceMemoryDecompressionFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 memoryDecompression ; } VkPhysicalDeviceMemoryDecompressionFeaturesNV ; typedef struct VkPhysicalDeviceMemoryDecompressionPropertiesNV { VkStructureType sType ; void* pNext ; VkMemoryDecompressionMethodFlagsNV decompressionMethods ; uint64_t maxDecompressionIndirectCount ; } VkPhysicalDeviceMemoryDecompressionPropertiesNV ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDecompressMemoryNV)(VkCommandBuffer commandBuffer, uint32_t decompressRegionCount, const VkDecompressMemoryRegionNV* pDecompressMemoryRegions)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDecompressMemoryIndirectCountNV)(VkCommandBuffer commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint32_t stride)"
  },
  {
    "label": "vkCmdDecompressMemoryNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDecompressMemoryNV(VkCommandBuffer commandBuffer, uint32_t decompressRegionCount, const VkDecompressMemoryRegionNV* pDecompressMemoryRegions)"
  },
  {
    "label": "vkCmdDecompressMemoryIndirectCountNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDecompressMemoryIndirectCountNV(VkCommandBuffer commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint32_t stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NV_device_generated_commands_compute 1 # define VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_SPEC_VERSION 2 # define VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_EXTENSION_NAME \" VK_NV_device_generated_commands_compute \" typedef struct VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 deviceGeneratedCompute ; VkBool32 deviceGeneratedComputePipelines ; VkBool32 deviceGeneratedComputeCaptureReplay ; } VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV ; typedef struct VkComputePipelineIndirectBufferInfoNV { VkStructureType sType ; const void* pNext ; VkDeviceAddress deviceAddress ; VkDeviceSize size ; VkDeviceAddress pipelineDeviceAddressCaptureReplay ; } VkComputePipelineIndirectBufferInfoNV ; typedef struct VkPipelineIndirectDeviceAddressInfoNV { VkStructureType sType ; const void* pNext ; VkPipelineBindPoint pipelineBindPoint ; VkPipeline pipeline ; } VkPipelineIndirectDeviceAddressInfoNV ; typedef struct VkBindPipelineIndirectCommandNV { VkDeviceAddress pipelineAddress ; } VkBindPipelineIndirectCommandNV ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetPipelineIndirectMemoryRequirementsNV)(VkDevice device, const VkComputePipelineCreateInfo* pCreateInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdUpdatePipelineIndirectBufferNV)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)"
  },
  {
    "label": "VkDeviceAddress()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkDeviceAddress(VKAPI_PTR *PFN_vkGetPipelineIndirectDeviceAddressNV)(VkDevice device, const VkPipelineIndirectDeviceAddressInfoNV* pInfo)"
  },
  {
    "label": "vkGetPipelineIndirectMemoryRequirementsNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetPipelineIndirectMemoryRequirementsNV(VkDevice device, const VkComputePipelineCreateInfo* pCreateInfo, VkMemoryRequirements2* pMemoryRequirements)"
  },
  {
    "label": "vkCmdUpdatePipelineIndirectBufferNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdUpdatePipelineIndirectBufferNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)"
  },
  {
    "label": "vkGetPipelineIndirectDeviceAddressNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkDeviceAddress VKAPI_CALL)",
    "insertText": "vkGetPipelineIndirectDeviceAddressNV(VkDevice device, const VkPipelineIndirectDeviceAddressInfoNV* pInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_NV_linear_color_attachment 1 # define VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION 1 # define VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME \" VK_NV_linear_color_attachment \" typedef struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 linearColorAttachment ; } VkPhysicalDeviceLinearColorAttachmentFeaturesNV ; # define VK_GOOGLE_surfaceless_query 1 # define VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION 2 # define VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME \" VK_GOOGLE_surfaceless_query \" # define VK_EXT_image_compression_control_swapchain 1 # define VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION 1 # define VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME \" VK_EXT_image_compression_control_swapchain \" typedef struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 imageCompressionControlSwapchain ; } VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT ; # define VK_QCOM_image_processing 1 # define VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION 1 # define VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME \" VK_QCOM_image_processing \" typedef struct VkImageViewSampleWeightCreateInfoQCOM { VkStructureType sType ; const void* pNext ; VkOffset2D filterCenter ; VkExtent2D filterSize ; uint32_t numPhases ; } VkImageViewSampleWeightCreateInfoQCOM ; typedef struct VkPhysicalDeviceImageProcessingFeaturesQCOM { VkStructureType sType ; void* pNext ; VkBool32 textureSampleWeighted ; VkBool32 textureBoxFilter ; VkBool32 textureBlockMatch ; } VkPhysicalDeviceImageProcessingFeaturesQCOM ; typedef struct VkPhysicalDeviceImageProcessingPropertiesQCOM { VkStructureType sType ; void* pNext ; uint32_t maxWeightFilterPhases ; VkExtent2D maxWeightFilterDimension ; VkExtent2D maxBlockMatchRegion ; VkExtent2D maxBoxFilterBlockSize ; } VkPhysicalDeviceImageProcessingPropertiesQCOM ; # define VK_EXT_nested_command_buffer 1 # define VK_EXT_NESTED_COMMAND_BUFFER_SPEC_VERSION 1 # define VK_EXT_NESTED_COMMAND_BUFFER_EXTENSION_NAME \" VK_EXT_nested_command_buffer \" typedef struct VkPhysicalDeviceNestedCommandBufferFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 nestedCommandBuffer ; VkBool32 nestedCommandBufferRendering ; VkBool32 nestedCommandBufferSimultaneousUse ; } VkPhysicalDeviceNestedCommandBufferFeaturesEXT ; typedef struct VkPhysicalDeviceNestedCommandBufferPropertiesEXT { VkStructureType sType ; void* pNext ; uint32_t maxCommandBufferNestingLevel ; } VkPhysicalDeviceNestedCommandBufferPropertiesEXT ; # define VK_EXT_external_memory_acquire_unmodified 1 # define VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_SPEC_VERSION 1 # define VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXTENSION_NAME \" VK_EXT_external_memory_acquire_unmodified \" typedef struct VkExternalMemoryAcquireUnmodifiedEXT { VkStructureType sType ; const void* pNext ; VkBool32 acquireUnmodifiedMemory ; } VkExternalMemoryAcquireUnmodifiedEXT ; # define VK_EXT_extended_dynamic_state3 1 # define VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION 2 # define VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME \" VK_EXT_extended_dynamic_state3 \" typedef struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 extendedDynamicState3TessellationDomainOrigin ; VkBool32 extendedDynamicState3DepthClampEnable ; VkBool32 extendedDynamicState3PolygonMode ; VkBool32 extendedDynamicState3RasterizationSamples ; VkBool32 extendedDynamicState3SampleMask ; VkBool32 extendedDynamicState3AlphaToCoverageEnable ; VkBool32 extendedDynamicState3AlphaToOneEnable ; VkBool32 extendedDynamicState3LogicOpEnable ; VkBool32 extendedDynamicState3ColorBlendEnable ; VkBool32 extendedDynamicState3ColorBlendEquation ; VkBool32 extendedDynamicState3ColorWriteMask ; VkBool32 extendedDynamicState3RasterizationStream ; VkBool32 extendedDynamicState3ConservativeRasterizationMode ; VkBool32 extendedDynamicState3ExtraPrimitiveOverestimationSize ; VkBool32 extendedDynamicState3DepthClipEnable ; VkBool32 extendedDynamicState3SampleLocationsEnable ; VkBool32 extendedDynamicState3ColorBlendAdvanced ; VkBool32 extendedDynamicState3ProvokingVertexMode ; VkBool32 extendedDynamicState3LineRasterizationMode ; VkBool32 extendedDynamicState3LineStippleEnable ; VkBool32 extendedDynamicState3DepthClipNegativeOneToOne ; VkBool32 extendedDynamicState3ViewportWScalingEnable ; VkBool32 extendedDynamicState3ViewportSwizzle ; VkBool32 extendedDynamicState3CoverageToColorEnable ; VkBool32 extendedDynamicState3CoverageToColorLocation ; VkBool32 extendedDynamicState3CoverageModulationMode ; VkBool32 extendedDynamicState3CoverageModulationTableEnable ; VkBool32 extendedDynamicState3CoverageModulationTable ; VkBool32 extendedDynamicState3CoverageReductionMode ; VkBool32 extendedDynamicState3RepresentativeFragmentTestEnable ; VkBool32 extendedDynamicState3ShadingRateImageEnable ; } VkPhysicalDeviceExtendedDynamicState3FeaturesEXT ; typedef struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT { VkStructureType sType ; void* pNext ; VkBool32 dynamicPrimitiveTopologyUnrestricted ; } VkPhysicalDeviceExtendedDynamicState3PropertiesEXT ; typedef struct VkColorBlendEquationEXT { VkBlendFactor srcColorBlendFactor ; VkBlendFactor dstColorBlendFactor ; VkBlendOp colorBlendOp ; VkBlendFactor srcAlphaBlendFactor ; VkBlendFactor dstAlphaBlendFactor ; VkBlendOp alphaBlendOp ; } VkColorBlendEquationEXT ; typedef struct VkColorBlendAdvancedEXT { VkBlendOp advancedBlendOp ; VkBool32 srcPremultiplied ; VkBool32 dstPremultiplied ; VkBlendOverlapEXT blendOverlap ; VkBool32 clampResults ; } VkColorBlendAdvancedEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDepthClampEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetPolygonModeEXT)(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetRasterizationSamplesEXT)(VkCommandBuffer commandBuffer, VkSampleCountFlagBits rasterizationSamples)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetSampleMaskEXT)(VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples, const VkSampleMask* pSampleMask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetAlphaToCoverageEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetAlphaToOneEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetLogicOpEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetColorBlendEnableEXT)(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkBool32* pColorBlendEnables)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetColorBlendEquationEXT)(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendEquationEXT* pColorBlendEquations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetColorWriteMaskEXT)(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorComponentFlags* pColorWriteMasks)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetTessellationDomainOriginEXT)(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetRasterizationStreamEXT)(VkCommandBuffer commandBuffer, uint32_t rasterizationStream)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetConservativeRasterizationModeEXT)(VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT)(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDepthClipEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetSampleLocationsEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetColorBlendAdvancedEXT)(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendAdvancedEXT* pColorBlendAdvanced)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetProvokingVertexModeEXT)(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetLineRasterizationModeEXT)(VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetLineStippleEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetDepthClipNegativeOneToOneEXT)(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetViewportWScalingEnableNV)(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetViewportSwizzleNV)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportSwizzleNV* pViewportSwizzles)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetCoverageToColorEnableNV)(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetCoverageToColorLocationNV)(VkCommandBuffer commandBuffer, uint32_t coverageToColorLocation)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetCoverageModulationModeNV)(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetCoverageModulationTableEnableNV)(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetCoverageModulationTableNV)(VkCommandBuffer commandBuffer, uint32_t coverageModulationTableCount, const float* pCoverageModulationTable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetShadingRateImageEnableNV)(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetRepresentativeFragmentTestEnableNV)(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetCoverageReductionModeNV)(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode)"
  },
  {
    "label": "vkCmdSetDepthClampEnableEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDepthClampEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable)"
  },
  {
    "label": "vkCmdSetPolygonModeEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetPolygonModeEXT(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode)"
  },
  {
    "label": "vkCmdSetRasterizationSamplesEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetRasterizationSamplesEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits rasterizationSamples)"
  },
  {
    "label": "vkCmdSetSampleMaskEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetSampleMaskEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples, const VkSampleMask* pSampleMask)"
  },
  {
    "label": "vkCmdSetAlphaToCoverageEnableEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetAlphaToCoverageEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable)"
  },
  {
    "label": "vkCmdSetAlphaToOneEnableEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetAlphaToOneEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable)"
  },
  {
    "label": "vkCmdSetLogicOpEnableEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetLogicOpEnableEXT(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable)"
  },
  {
    "label": "vkCmdSetColorBlendEnableEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetColorBlendEnableEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkBool32* pColorBlendEnables)"
  },
  {
    "label": "vkCmdSetColorBlendEquationEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetColorBlendEquationEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendEquationEXT* pColorBlendEquations)"
  },
  {
    "label": "vkCmdSetColorWriteMaskEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetColorWriteMaskEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorComponentFlags* pColorWriteMasks)"
  },
  {
    "label": "vkCmdSetTessellationDomainOriginEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetTessellationDomainOriginEXT(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin)"
  },
  {
    "label": "vkCmdSetRasterizationStreamEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetRasterizationStreamEXT(VkCommandBuffer commandBuffer, uint32_t rasterizationStream)"
  },
  {
    "label": "vkCmdSetConservativeRasterizationModeEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetConservativeRasterizationModeEXT(VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode)"
  },
  {
    "label": "vkCmdSetExtraPrimitiveOverestimationSizeEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize)"
  },
  {
    "label": "vkCmdSetDepthClipEnableEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDepthClipEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable)"
  },
  {
    "label": "vkCmdSetSampleLocationsEnableEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetSampleLocationsEnableEXT(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable)"
  },
  {
    "label": "vkCmdSetColorBlendAdvancedEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetColorBlendAdvancedEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendAdvancedEXT* pColorBlendAdvanced)"
  },
  {
    "label": "vkCmdSetProvokingVertexModeEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetProvokingVertexModeEXT(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode)"
  },
  {
    "label": "vkCmdSetLineRasterizationModeEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetLineRasterizationModeEXT(VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode)"
  },
  {
    "label": "vkCmdSetLineStippleEnableEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetLineStippleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable)"
  },
  {
    "label": "vkCmdSetDepthClipNegativeOneToOneEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetDepthClipNegativeOneToOneEXT(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne)"
  },
  {
    "label": "vkCmdSetViewportWScalingEnableNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetViewportWScalingEnableNV(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable)"
  },
  {
    "label": "vkCmdSetViewportSwizzleNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetViewportSwizzleNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportSwizzleNV* pViewportSwizzles)"
  },
  {
    "label": "vkCmdSetCoverageToColorEnableNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetCoverageToColorEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable)"
  },
  {
    "label": "vkCmdSetCoverageToColorLocationNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetCoverageToColorLocationNV(VkCommandBuffer commandBuffer, uint32_t coverageToColorLocation)"
  },
  {
    "label": "vkCmdSetCoverageModulationModeNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetCoverageModulationModeNV(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode)"
  },
  {
    "label": "vkCmdSetCoverageModulationTableEnableNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetCoverageModulationTableEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable)"
  },
  {
    "label": "vkCmdSetCoverageModulationTableNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetCoverageModulationTableNV(VkCommandBuffer commandBuffer, uint32_t coverageModulationTableCount, const float* pCoverageModulationTable)"
  },
  {
    "label": "vkCmdSetShadingRateImageEnableNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetShadingRateImageEnableNV(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable)"
  },
  {
    "label": "vkCmdSetRepresentativeFragmentTestEnableNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetRepresentativeFragmentTestEnableNV(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable)"
  },
  {
    "label": "vkCmdSetCoverageReductionModeNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetCoverageReductionModeNV(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode)"
  },
  {
    "label": "PFN_vkVoidFunction()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_subpass_merge_feedback 1 # define VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION 2 # define VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME \" VK_EXT_subpass_merge_feedback \" typedef enum VkSubpassMergeStatusEXT { VK_SUBPASS_MERGE_STATUS_MERGED_EXT = 0,VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT = 1,VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = 2,VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = 3,VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = 4,VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = 5,VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = 6,VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = 7,VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = 8,VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = 9,VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = 1 0,VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = 1 1,VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = 1 2,VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = 1 3,VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkSubpassMergeStatusEXT ; typedef struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 subpassMergeFeedback ; } VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT ; typedef struct VkRenderPassCreationControlEXT { VkStructureType sType ; const void* pNext ; VkBool32 disallowMerging ; } VkRenderPassCreationControlEXT ; typedef struct VkRenderPassCreationFeedbackInfoEXT { uint32_t postMergeSubpassCount ; } VkRenderPassCreationFeedbackInfoEXT ; typedef struct VkRenderPassCreationFeedbackCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkRenderPassCreationFeedbackInfoEXT* pRenderPassFeedback ; } VkRenderPassCreationFeedbackCreateInfoEXT ; typedef struct VkRenderPassSubpassFeedbackInfoEXT { VkSubpassMergeStatusEXT subpassMergeStatus ; char description [ VK_MAX_DESCRIPTION_SIZE ] ; uint32_t postMergeIndex ; } VkRenderPassSubpassFeedbackInfoEXT ; typedef struct VkRenderPassSubpassFeedbackCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkRenderPassSubpassFeedbackInfoEXT* pSubpassFeedback ; } VkRenderPassSubpassFeedbackCreateInfoEXT ; # define VK_LUNARG_direct_driver_loading 1 # define VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION 1 # define VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME \" VK_LUNARG_direct_driver_loading \" typedef enum VkDirectDriverLoadingModeLUNARG { VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG = 0,VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG = 1,VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG = 0 x7FFFFFFF } VkDirectDriverLoadingModeLUNARG ; typedef VkFlags VkDirectDriverLoadingFlagsLUNARG ; typedef)",
    "insertText": "PFN_vkVoidFunction(VKAPI_PTR *PFN_vkGetInstanceProcAddrLUNARG)( VkInstance instance, const char* pName)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef struct VkDirectDriverLoadingInfoLUNARG { VkStructureType sType ; void* pNext ; VkDirectDriverLoadingFlagsLUNARG flags ; PFN_vkGetInstanceProcAddrLUNARG pfnGetInstanceProcAddr ; } VkDirectDriverLoadingInfoLUNARG ; typedef struct VkDirectDriverLoadingListLUNARG { VkStructureType sType ; const void* pNext ; VkDirectDriverLoadingModeLUNARG mode ; uint32_t driverCount ; const VkDirectDriverLoadingInfoLUNARG* pDrivers ; } VkDirectDriverLoadingListLUNARG ; # define VK_EXT_shader_module_identifier 1 # define VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT 3 2 U # define VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION 1 # define VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME \" VK_EXT_shader_module_identifier \" typedef struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 shaderModuleIdentifier ; } VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT ; typedef struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT { VkStructureType sType ; void* pNext ; uint8_t shaderModuleIdentifierAlgorithmUUID [ VK_UUID_SIZE ] ; } VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT ; typedef struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT { VkStructureType sType ; const void* pNext ; uint32_t identifierSize ; const uint8_t* pIdentifier ; } VkPipelineShaderStageModuleIdentifierCreateInfoEXT ; typedef struct VkShaderModuleIdentifierEXT { VkStructureType sType ; void* pNext ; uint32_t identifierSize ; uint8_t identifier [ VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT ] ; } VkShaderModuleIdentifierEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetShaderModuleIdentifierEXT)(VkDevice device, VkShaderModule shaderModule, VkShaderModuleIdentifierEXT* pIdentifier)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetShaderModuleCreateInfoIdentifierEXT)(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, VkShaderModuleIdentifierEXT* pIdentifier)"
  },
  {
    "label": "vkGetShaderModuleIdentifierEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetShaderModuleIdentifierEXT(VkDevice device, VkShaderModule shaderModule, VkShaderModuleIdentifierEXT* pIdentifier)"
  },
  {
    "label": "vkGetShaderModuleCreateInfoIdentifierEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetShaderModuleCreateInfoIdentifierEXT(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, VkShaderModuleIdentifierEXT* pIdentifier)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_rasterization_order_attachment_access 1 # define VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION 1 # define VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME \" VK_EXT_rasterization_order_attachment_access \" # define VK_NV_optical_flow 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkOpticalFlowSessionNV)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = 0,VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = 1,VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = 2,VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = 3,VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV = 0 x7FFFFFFF } VkOpticalFlowPerformanceLevelNV ; typedef enum VkOpticalFlowSessionBindingPointNV { VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = 0,VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = 1,VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = 2,VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = 3,VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = 4,VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = 5,VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = 6,VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = 7,VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = 8,VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV = 0 x7FFFFFFF } VkOpticalFlowSessionBindingPointNV ; typedef enum VkOpticalFlowGridSizeFlagBitsNV { VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = 0,VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV = 0 x00000001,VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV = 0 x00000002,VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV = 0 x00000004,VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV = 0 x00000008,VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV = 0 x7FFFFFFF } VkOpticalFlowGridSizeFlagBitsNV ; typedef VkFlags VkOpticalFlowGridSizeFlagsNV ; typedef enum VkOpticalFlowUsageFlagBitsNV { VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV = 0,VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV = 0 x00000001,VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV = 0 x00000002,VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV = 0 x00000004,VK_OPTICAL_FLOW_USAGE_COST_BIT_NV = 0 x00000008,VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV = 0 x00000010,VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV = 0 x7FFFFFFF } VkOpticalFlowUsageFlagBitsNV ; typedef VkFlags VkOpticalFlowUsageFlagsNV ; typedef enum VkOpticalFlowSessionCreateFlagBitsNV { VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV = 0 x00000001,VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV = 0 x00000002,VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV = 0 x00000004,VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV = 0 x00000008,VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV = 0 x00000010,VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV = 0 x7FFFFFFF } VkOpticalFlowSessionCreateFlagBitsNV ; typedef VkFlags VkOpticalFlowSessionCreateFlagsNV ; typedef enum VkOpticalFlowExecuteFlagBitsNV { VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV = 0 x00000001,VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV = 0 x7FFFFFFF } VkOpticalFlowExecuteFlagBitsNV ; typedef VkFlags VkOpticalFlowExecuteFlagsNV ; typedef struct VkPhysicalDeviceOpticalFlowFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 opticalFlow ; } VkPhysicalDeviceOpticalFlowFeaturesNV ; typedef struct VkPhysicalDeviceOpticalFlowPropertiesNV { VkStructureType sType ; void* pNext ; VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes ; VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes ; VkBool32 hintSupported ; VkBool32 costSupported ; VkBool32 bidirectionalFlowSupported ; VkBool32 globalFlowSupported ; uint32_t minWidth ; uint32_t minHeight ; uint32_t maxWidth ; uint32_t maxHeight ; uint32_t maxNumRegionsOfInterest ; } VkPhysicalDeviceOpticalFlowPropertiesNV ; typedef struct VkOpticalFlowImageFormatInfoNV { VkStructureType sType ; const void* pNext ; VkOpticalFlowUsageFlagsNV usage ; } VkOpticalFlowImageFormatInfoNV ; typedef struct VkOpticalFlowImageFormatPropertiesNV { VkStructureType sType ; const void* pNext ; VkFormat format ; } VkOpticalFlowImageFormatPropertiesNV ; typedef struct VkOpticalFlowSessionCreateInfoNV { VkStructureType sType ; void* pNext ; uint32_t width ; uint32_t height ; VkFormat imageFormat ; VkFormat flowVectorFormat ; VkFormat costFormat ; VkOpticalFlowGridSizeFlagsNV outputGridSize ; VkOpticalFlowGridSizeFlagsNV hintGridSize ; VkOpticalFlowPerformanceLevelNV performanceLevel ; VkOpticalFlowSessionCreateFlagsNV flags ; } VkOpticalFlowSessionCreateInfoNV ; typedef struct VkOpticalFlowSessionCreatePrivateDataInfoNV { VkStructureType sType ; void* pNext ; uint32_t id ; uint32_t size ; const void* pPrivateData ; } VkOpticalFlowSessionCreatePrivateDataInfoNV ; typedef struct VkOpticalFlowExecuteInfoNV { VkStructureType sType ; void* pNext ; VkOpticalFlowExecuteFlagsNV flags ; uint32_t regionCount ; const VkRect2D* pRegions ; } VkOpticalFlowExecuteInfoNV ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV)(VkPhysicalDevice physicalDevice, const VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo, uint32_t* pFormatCount, VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateOpticalFlowSessionNV)(VkDevice device, const VkOpticalFlowSessionCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkOpticalFlowSessionNV* pSession)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyOpticalFlowSessionNV)(VkDevice device, VkOpticalFlowSessionNV session, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkBindOpticalFlowSessionImageNV)(VkDevice device, VkOpticalFlowSessionNV session, VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view, VkImageLayout layout)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdOpticalFlowExecuteNV)(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, const VkOpticalFlowExecuteInfoNV* pExecuteInfo)"
  },
  {
    "label": "vkGetPhysicalDeviceOpticalFlowImageFormatsNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetPhysicalDeviceOpticalFlowImageFormatsNV(VkPhysicalDevice physicalDevice, const VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo, uint32_t* pFormatCount, VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties)"
  },
  {
    "label": "vkCreateOpticalFlowSessionNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateOpticalFlowSessionNV(VkDevice device, const VkOpticalFlowSessionCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkOpticalFlowSessionNV* pSession)"
  },
  {
    "label": "vkDestroyOpticalFlowSessionNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionNV session, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkBindOpticalFlowSessionImageNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkBindOpticalFlowSessionImageNV(VkDevice device, VkOpticalFlowSessionNV session, VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view, VkImageLayout layout)"
  },
  {
    "label": "vkCmdOpticalFlowExecuteNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdOpticalFlowExecuteNV(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, const VkOpticalFlowExecuteInfoNV* pExecuteInfo)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_EXT_legacy_dithering 1 # define VK_EXT_LEGACY_DITHERING_SPEC_VERSION 2 # define VK_EXT_LEGACY_DITHERING_EXTENSION_NAME \" VK_EXT_legacy_dithering \" typedef struct VkPhysicalDeviceLegacyDitheringFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 legacyDithering ; } VkPhysicalDeviceLegacyDitheringFeaturesEXT ; # define VK_EXT_pipeline_protected_access 1 # define VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION 1 # define VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME \" VK_EXT_pipeline_protected_access \" typedef struct VkPhysicalDevicePipelineProtectedAccessFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 pipelineProtectedAccess ; } VkPhysicalDevicePipelineProtectedAccessFeaturesEXT ; # define VK_EXT_shader_object 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkShaderEXT)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (VK_SHADER_CODE_TYPE_BINARY_EXT = 0,VK_SHADER_CODE_TYPE_SPIRV_EXT = 1,VK_SHADER_CODE_TYPE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkShaderCodeTypeEXT ; typedef enum VkShaderCreateFlagBitsEXT { VK_SHADER_CREATE_LINK_STAGE_BIT_EXT = 0 x00000001,VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 0 x00000002,VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 0 x00000004,VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT = 0 x00000008,VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT = 0 x00000010,VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT = 0 x00000020,VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 0 x00000040,VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT = 0 x7FFFFFFF } VkShaderCreateFlagBitsEXT ; typedef VkFlags VkShaderCreateFlagsEXT ; typedef struct VkPhysicalDeviceShaderObjectFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 shaderObject ; } VkPhysicalDeviceShaderObjectFeaturesEXT ; typedef struct VkPhysicalDeviceShaderObjectPropertiesEXT { VkStructureType sType ; void* pNext ; uint8_t shaderBinaryUUID [ VK_UUID_SIZE ] ; uint32_t shaderBinaryVersion ; } VkPhysicalDeviceShaderObjectPropertiesEXT ; typedef struct VkShaderCreateInfoEXT { VkStructureType sType ; const void* pNext ; VkShaderCreateFlagsEXT flags ; VkShaderStageFlagBits stage ; VkShaderStageFlags nextStage ; VkShaderCodeTypeEXT codeType ; size_t codeSize ; const void* pCode ; const char* pName ; uint32_t setLayoutCount ; const VkDescriptorSetLayout* pSetLayouts ; uint32_t pushConstantRangeCount ; const VkPushConstantRange* pPushConstantRanges ; const VkSpecializationInfo* pSpecializationInfo ; } VkShaderCreateInfoEXT ; typedef VkPipelineShaderStageRequiredSubgroupSizeCreateInfo VkShaderRequiredSubgroupSizeCreateInfoEXT ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateShadersEXT)(VkDevice device, uint32_t createInfoCount, const VkShaderCreateInfoEXT* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkShaderEXT* pShaders)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyShaderEXT)(VkDevice device, VkShaderEXT shader, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetShaderBinaryDataEXT)(VkDevice device, VkShaderEXT shader, size_t* pDataSize, void* pData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBindShadersEXT)(VkCommandBuffer commandBuffer, uint32_t stageCount, const VkShaderStageFlagBits* pStages, const VkShaderEXT* pShaders)"
  },
  {
    "label": "vkCreateShadersEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateShadersEXT(VkDevice device, uint32_t createInfoCount, const VkShaderCreateInfoEXT* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkShaderEXT* pShaders)"
  },
  {
    "label": "vkDestroyShaderEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyShaderEXT(VkDevice device, VkShaderEXT shader, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkGetShaderBinaryDataEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetShaderBinaryDataEXT(VkDevice device, VkShaderEXT shader, size_t* pDataSize, void* pData)"
  },
  {
    "label": "vkCmdBindShadersEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBindShadersEXT(VkCommandBuffer commandBuffer, uint32_t stageCount, const VkShaderStageFlagBits* pStages, const VkShaderEXT* pShaders)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_QCOM_tile_properties 1 # define VK_QCOM_TILE_PROPERTIES_SPEC_VERSION 1 # define VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME \" VK_QCOM_tile_properties \" typedef struct VkPhysicalDeviceTilePropertiesFeaturesQCOM { VkStructureType sType ; void* pNext ; VkBool32 tileProperties ; } VkPhysicalDeviceTilePropertiesFeaturesQCOM ; typedef struct VkTilePropertiesQCOM { VkStructureType sType ; void* pNext ; VkExtent3D tileSize ; VkExtent2D apronSize ; VkOffset2D origin ; } VkTilePropertiesQCOM ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetFramebufferTilePropertiesQCOM)(VkDevice device, VkFramebuffer framebuffer, uint32_t* pPropertiesCount, VkTilePropertiesQCOM* pProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetDynamicRenderingTilePropertiesQCOM)(VkDevice device, const VkRenderingInfo* pRenderingInfo, VkTilePropertiesQCOM* pProperties)"
  },
  {
    "label": "vkGetFramebufferTilePropertiesQCOM()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetFramebufferTilePropertiesQCOM(VkDevice device, VkFramebuffer framebuffer, uint32_t* pPropertiesCount, VkTilePropertiesQCOM* pProperties)"
  },
  {
    "label": "vkGetDynamicRenderingTilePropertiesQCOM()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetDynamicRenderingTilePropertiesQCOM(VkDevice device, const VkRenderingInfo* pRenderingInfo, VkTilePropertiesQCOM* pProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_SEC_amigo_profiling 1 # define VK_SEC_AMIGO_PROFILING_SPEC_VERSION 1 # define VK_SEC_AMIGO_PROFILING_EXTENSION_NAME \" VK_SEC_amigo_profiling \" typedef struct VkPhysicalDeviceAmigoProfilingFeaturesSEC { VkStructureType sType ; void* pNext ; VkBool32 amigoProfiling ; } VkPhysicalDeviceAmigoProfilingFeaturesSEC ; typedef struct VkAmigoProfilingSubmitInfoSEC { VkStructureType sType ; const void* pNext ; uint64_t firstDrawTimestamp ; uint64_t swapBufferTimestamp ; } VkAmigoProfilingSubmitInfoSEC ; # define VK_QCOM_multiview_per_view_viewports 1 # define VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION 1 # define VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME \" VK_QCOM_multiview_per_view_viewports \" typedef struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM { VkStructureType sType ; void* pNext ; VkBool32 multiviewPerViewViewports ; } VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM ; # define VK_NV_ray_tracing_invocation_reorder 1 # define VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION 1 # define VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME \" VK_NV_ray_tracing_invocation_reorder \" typedef enum VkRayTracingInvocationReorderModeNV { VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = 0,VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = 1,VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV = 0 x7FFFFFFF } VkRayTracingInvocationReorderModeNV ; typedef struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV { VkStructureType sType ; void* pNext ; VkRayTracingInvocationReorderModeNV rayTracingInvocationReorderReorderingHint ; } VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV ; typedef struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 rayTracingInvocationReorder ; } VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV ; # define VK_NV_extended_sparse_address_space 1 # define VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_SPEC_VERSION 1 # define VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_EXTENSION_NAME \" VK_NV_extended_sparse_address_space \" typedef struct VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 extendedSparseAddressSpace ; } VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV ; typedef struct VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV { VkStructureType sType ; void* pNext ; VkDeviceSize extendedSparseAddressSpaceSize ; VkImageUsageFlags extendedSparseImageUsageFlags ; VkBufferUsageFlags extendedSparseBufferUsageFlags ; } VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV ; # define VK_EXT_mutable_descriptor_type 1 # define VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION 1 # define VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME \" VK_EXT_mutable_descriptor_type \" # define VK_EXT_legacy_vertex_attributes 1 # define VK_EXT_LEGACY_VERTEX_ATTRIBUTES_SPEC_VERSION 1 # define VK_EXT_LEGACY_VERTEX_ATTRIBUTES_EXTENSION_NAME \" VK_EXT_legacy_vertex_attributes \" typedef struct VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 legacyVertexAttributes ; } VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT ; typedef struct VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT { VkStructureType sType ; void* pNext ; VkBool32 nativeUnalignedPerformance ; } VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT ; # define VK_EXT_layer_settings 1 # define VK_EXT_LAYER_SETTINGS_SPEC_VERSION 2 # define VK_EXT_LAYER_SETTINGS_EXTENSION_NAME \" VK_EXT_layer_settings \" typedef enum VkLayerSettingTypeEXT { VK_LAYER_SETTING_TYPE_BOOL32_EXT = 0,VK_LAYER_SETTING_TYPE_INT32_EXT = 1,VK_LAYER_SETTING_TYPE_INT64_EXT = 2,VK_LAYER_SETTING_TYPE_UINT32_EXT = 3,VK_LAYER_SETTING_TYPE_UINT64_EXT = 4,VK_LAYER_SETTING_TYPE_FLOAT32_EXT = 5,VK_LAYER_SETTING_TYPE_FLOAT64_EXT = 6,VK_LAYER_SETTING_TYPE_STRING_EXT = 7,VK_LAYER_SETTING_TYPE_MAX_ENUM_EXT = 0 x7FFFFFFF } VkLayerSettingTypeEXT ; typedef struct VkLayerSettingEXT { const char* pLayerName ; const char* pSettingName ; VkLayerSettingTypeEXT type ; uint32_t valueCount ; const void* pValues ; } VkLayerSettingEXT ; typedef struct VkLayerSettingsCreateInfoEXT { VkStructureType sType ; const void* pNext ; uint32_t settingCount ; const VkLayerSettingEXT* pSettings ; } VkLayerSettingsCreateInfoEXT ; # define VK_ARM_shader_core_builtins 1 # define VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION 2 # define VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME \" VK_ARM_shader_core_builtins \" typedef struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM { VkStructureType sType ; void* pNext ; VkBool32 shaderCoreBuiltins ; } VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM ; typedef struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM { VkStructureType sType ; void* pNext ; uint64_t shaderCoreMask ; uint32_t shaderCoreCount ; uint32_t shaderWarpsPerCore ; } VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM ; # define VK_EXT_pipeline_library_group_handles 1 # define VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION 1 # define VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME \" VK_EXT_pipeline_library_group_handles \" typedef struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 pipelineLibraryGroupHandles ; } VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT ; # define VK_EXT_dynamic_rendering_unused_attachments 1 # define VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_SPEC_VERSION 1 # define VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_EXTENSION_NAME \" VK_EXT_dynamic_rendering_unused_attachments \" typedef struct VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 dynamicRenderingUnusedAttachments ; } VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT ; # define VK_NV_low_latency2 1 # define VK_NV_LOW_LATENCY_2_SPEC_VERSION 2 # define VK_NV_LOW_LATENCY_2_EXTENSION_NAME \" VK_NV_low_latency2 \" typedef enum VkLatencyMarkerNV { VK_LATENCY_MARKER_SIMULATION_START_NV = 0,VK_LATENCY_MARKER_SIMULATION_END_NV = 1,VK_LATENCY_MARKER_RENDERSUBMIT_START_NV = 2,VK_LATENCY_MARKER_RENDERSUBMIT_END_NV = 3,VK_LATENCY_MARKER_PRESENT_START_NV = 4,VK_LATENCY_MARKER_PRESENT_END_NV = 5,VK_LATENCY_MARKER_INPUT_SAMPLE_NV = 6,VK_LATENCY_MARKER_TRIGGER_FLASH_NV = 7,VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV = 8,VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV = 9,VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV = 1 0,VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV = 1 1,VK_LATENCY_MARKER_MAX_ENUM_NV = 0 x7FFFFFFF } VkLatencyMarkerNV ; typedef enum VkOutOfBandQueueTypeNV { VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV = 0,VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV = 1,VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV = 0 x7FFFFFFF } VkOutOfBandQueueTypeNV ; typedef struct VkLatencySleepModeInfoNV { VkStructureType sType ; const void* pNext ; VkBool32 lowLatencyMode ; VkBool32 lowLatencyBoost ; uint32_t minimumIntervalUs ; } VkLatencySleepModeInfoNV ; typedef struct VkLatencySleepInfoNV { VkStructureType sType ; const void* pNext ; VkSemaphore signalSemaphore ; uint64_t value ; } VkLatencySleepInfoNV ; typedef struct VkSetLatencyMarkerInfoNV { VkStructureType sType ; const void* pNext ; uint64_t presentID ; VkLatencyMarkerNV marker ; } VkSetLatencyMarkerInfoNV ; typedef struct VkLatencyTimingsFrameReportNV { VkStructureType sType ; const void* pNext ; uint64_t presentID ; uint64_t inputSampleTimeUs ; uint64_t simStartTimeUs ; uint64_t simEndTimeUs ; uint64_t renderSubmitStartTimeUs ; uint64_t renderSubmitEndTimeUs ; uint64_t presentStartTimeUs ; uint64_t presentEndTimeUs ; uint64_t driverStartTimeUs ; uint64_t driverEndTimeUs ; uint64_t osRenderQueueStartTimeUs ; uint64_t osRenderQueueEndTimeUs ; uint64_t gpuRenderStartTimeUs ; uint64_t gpuRenderEndTimeUs ; } VkLatencyTimingsFrameReportNV ; typedef struct VkGetLatencyMarkerInfoNV { VkStructureType sType ; const void* pNext ; uint32_t timingCount ; VkLatencyTimingsFrameReportNV* pTimings ; } VkGetLatencyMarkerInfoNV ; typedef struct VkLatencySubmissionPresentIdNV { VkStructureType sType ; const void* pNext ; uint64_t presentID ; } VkLatencySubmissionPresentIdNV ; typedef struct VkSwapchainLatencyCreateInfoNV { VkStructureType sType ; const void* pNext ; VkBool32 latencyModeEnable ; } VkSwapchainLatencyCreateInfoNV ; typedef struct VkOutOfBandQueueTypeInfoNV { VkStructureType sType ; const void* pNext ; VkOutOfBandQueueTypeNV queueType ; } VkOutOfBandQueueTypeInfoNV ; typedef struct VkLatencySurfaceCapabilitiesNV { VkStructureType sType ; const void* pNext ; uint32_t presentModeCount ; VkPresentModeKHR* pPresentModes ; } VkLatencySurfaceCapabilitiesNV ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkSetLatencySleepModeNV)(VkDevice device, VkSwapchainKHR swapchain, const VkLatencySleepModeInfoNV* pSleepModeInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkLatencySleepNV)(VkDevice device, VkSwapchainKHR swapchain, const VkLatencySleepInfoNV* pSleepInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkSetLatencyMarkerNV)(VkDevice device, VkSwapchainKHR swapchain, const VkSetLatencyMarkerInfoNV* pLatencyMarkerInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetLatencyTimingsNV)(VkDevice device, VkSwapchainKHR swapchain, VkGetLatencyMarkerInfoNV* pLatencyMarkerInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkQueueNotifyOutOfBandNV)(VkQueue queue, const VkOutOfBandQueueTypeInfoNV* pQueueTypeInfo)"
  },
  {
    "label": "vkSetLatencySleepModeNV()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkSetLatencySleepModeNV(VkDevice device, VkSwapchainKHR swapchain, const VkLatencySleepModeInfoNV* pSleepModeInfo)"
  },
  {
    "label": "vkLatencySleepNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkLatencySleepNV(VkDevice device, VkSwapchainKHR swapchain, const VkLatencySleepInfoNV* pSleepInfo)"
  },
  {
    "label": "vkSetLatencyMarkerNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkSetLatencyMarkerNV(VkDevice device, VkSwapchainKHR swapchain, const VkSetLatencyMarkerInfoNV* pLatencyMarkerInfo)"
  },
  {
    "label": "vkGetLatencyTimingsNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetLatencyTimingsNV(VkDevice device, VkSwapchainKHR swapchain, VkGetLatencyMarkerInfoNV* pLatencyMarkerInfo)"
  },
  {
    "label": "vkQueueNotifyOutOfBandNV()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkQueueNotifyOutOfBandNV(VkQueue queue, const VkOutOfBandQueueTypeInfoNV* pQueueTypeInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_QCOM_multiview_per_view_render_areas 1 # define VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION 1 # define VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME \" VK_QCOM_multiview_per_view_render_areas \" typedef struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM { VkStructureType sType ; void* pNext ; VkBool32 multiviewPerViewRenderAreas ; } VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM ; typedef struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM { VkStructureType sType ; const void* pNext ; uint32_t perViewRenderAreaCount ; const VkRect2D* pPerViewRenderAreas ; } VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM ; # define VK_NV_per_stage_descriptor_set 1 # define VK_NV_PER_STAGE_DESCRIPTOR_SET_SPEC_VERSION 1 # define VK_NV_PER_STAGE_DESCRIPTOR_SET_EXTENSION_NAME \" VK_NV_per_stage_descriptor_set \" typedef struct VkPhysicalDevicePerStageDescriptorSetFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 perStageDescriptorSet ; VkBool32 dynamicPipelineLayout ; } VkPhysicalDevicePerStageDescriptorSetFeaturesNV ; # define VK_QCOM_image_processing2 1 # define VK_QCOM_IMAGE_PROCESSING_2_SPEC_VERSION 1 # define VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME \" VK_QCOM_image_processing2 \" typedef enum VkBlockMatchWindowCompareModeQCOM { VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM = 0,VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM = 1,VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM = 0 x7FFFFFFF } VkBlockMatchWindowCompareModeQCOM ; typedef struct VkPhysicalDeviceImageProcessing2FeaturesQCOM { VkStructureType sType ; void* pNext ; VkBool32 textureBlockMatch2 ; } VkPhysicalDeviceImageProcessing2FeaturesQCOM ; typedef struct VkPhysicalDeviceImageProcessing2PropertiesQCOM { VkStructureType sType ; void* pNext ; VkExtent2D maxBlockMatchWindow ; } VkPhysicalDeviceImageProcessing2PropertiesQCOM ; typedef struct VkSamplerBlockMatchWindowCreateInfoQCOM { VkStructureType sType ; const void* pNext ; VkExtent2D windowExtent ; VkBlockMatchWindowCompareModeQCOM windowCompareMode ; } VkSamplerBlockMatchWindowCreateInfoQCOM ; # define VK_QCOM_filter_cubic_weights 1 # define VK_QCOM_FILTER_CUBIC_WEIGHTS_SPEC_VERSION 1 # define VK_QCOM_FILTER_CUBIC_WEIGHTS_EXTENSION_NAME \" VK_QCOM_filter_cubic_weights \" typedef enum VkCubicFilterWeightsQCOM { VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM = 0,VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM = 1,VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM = 2,VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM = 3,VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM = 0 x7FFFFFFF } VkCubicFilterWeightsQCOM ; typedef struct VkPhysicalDeviceCubicWeightsFeaturesQCOM { VkStructureType sType ; void* pNext ; VkBool32 selectableCubicWeights ; } VkPhysicalDeviceCubicWeightsFeaturesQCOM ; typedef struct VkSamplerCubicWeightsCreateInfoQCOM { VkStructureType sType ; const void* pNext ; VkCubicFilterWeightsQCOM cubicWeights ; } VkSamplerCubicWeightsCreateInfoQCOM ; typedef struct VkBlitImageCubicWeightsInfoQCOM { VkStructureType sType ; const void* pNext ; VkCubicFilterWeightsQCOM cubicWeights ; } VkBlitImageCubicWeightsInfoQCOM ; # define VK_QCOM_ycbcr_degamma 1 # define VK_QCOM_YCBCR_DEGAMMA_SPEC_VERSION 1 # define VK_QCOM_YCBCR_DEGAMMA_EXTENSION_NAME \" VK_QCOM_ycbcr_degamma \" typedef struct VkPhysicalDeviceYcbcrDegammaFeaturesQCOM { VkStructureType sType ; void* pNext ; VkBool32 ycbcrDegamma ; } VkPhysicalDeviceYcbcrDegammaFeaturesQCOM ; typedef struct VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM { VkStructureType sType ; void* pNext ; VkBool32 enableYDegamma ; VkBool32 enableCbCrDegamma ; } VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM ; # define VK_QCOM_filter_cubic_clamp 1 # define VK_QCOM_FILTER_CUBIC_CLAMP_SPEC_VERSION 1 # define VK_QCOM_FILTER_CUBIC_CLAMP_EXTENSION_NAME \" VK_QCOM_filter_cubic_clamp \" typedef struct VkPhysicalDeviceCubicClampFeaturesQCOM { VkStructureType sType ; void* pNext ; VkBool32 cubicRangeClamp ; } VkPhysicalDeviceCubicClampFeaturesQCOM ; # define VK_EXT_attachment_feedback_loop_dynamic_state 1 # define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION 1 # define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME \" VK_EXT_attachment_feedback_loop_dynamic_state \" typedef struct VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 attachmentFeedbackLoopDynamicState ; } VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT)(VkCommandBuffer commandBuffer, VkImageAspectFlags aspectMask)"
  },
  {
    "label": "vkCmdSetAttachmentFeedbackLoopEnableEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetAttachmentFeedbackLoopEnableEXT(VkCommandBuffer commandBuffer, VkImageAspectFlags aspectMask)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_MSFT_layered_driver 1 # define VK_MSFT_LAYERED_DRIVER_SPEC_VERSION 1 # define VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME \" VK_MSFT_layered_driver \" typedef enum VkLayeredDriverUnderlyingApiMSFT { VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT = 0,VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT = 1,VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT = 0 x7FFFFFFF } VkLayeredDriverUnderlyingApiMSFT ; typedef struct VkPhysicalDeviceLayeredDriverPropertiesMSFT { VkStructureType sType ; void* pNext ; VkLayeredDriverUnderlyingApiMSFT underlyingAPI ; } VkPhysicalDeviceLayeredDriverPropertiesMSFT ; # define VK_NV_descriptor_pool_overallocation 1 # define VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_SPEC_VERSION 1 # define VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_EXTENSION_NAME \" VK_NV_descriptor_pool_overallocation \" typedef struct VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 descriptorPoolOverallocation ; } VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV ; # define VK_NV_raw_access_chains 1 # define VK_NV_RAW_ACCESS_CHAINS_SPEC_VERSION 1 # define VK_NV_RAW_ACCESS_CHAINS_EXTENSION_NAME \" VK_NV_raw_access_chains \" typedef struct VkPhysicalDeviceRawAccessChainsFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 shaderRawAccessChains ; } VkPhysicalDeviceRawAccessChainsFeaturesNV ; # define VK_NV_shader_atomic_float16_vector 1 # define VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_SPEC_VERSION 1 # define VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_EXTENSION_NAME \" VK_NV_shader_atomic_float16_vector \" typedef struct VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 shaderFloat16VectorAtomics ; } VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV ; # define VK_EXT_shader_replicated_composites 1 # define VK_EXT_SHADER_REPLICATED_COMPOSITES_SPEC_VERSION 1 # define VK_EXT_SHADER_REPLICATED_COMPOSITES_EXTENSION_NAME \" VK_EXT_shader_replicated_composites \" typedef struct VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 shaderReplicatedComposites ; } VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT ; # define VK_NV_ray_tracing_validation 1 # define VK_NV_RAY_TRACING_VALIDATION_SPEC_VERSION 1 # define VK_NV_RAY_TRACING_VALIDATION_EXTENSION_NAME \" VK_NV_ray_tracing_validation \" typedef struct VkPhysicalDeviceRayTracingValidationFeaturesNV { VkStructureType sType ; void* pNext ; VkBool32 rayTracingValidation ; } VkPhysicalDeviceRayTracingValidationFeaturesNV ; # define VK_MESA_image_alignment_control 1 # define VK_MESA_IMAGE_ALIGNMENT_CONTROL_SPEC_VERSION 1 # define VK_MESA_IMAGE_ALIGNMENT_CONTROL_EXTENSION_NAME \" VK_MESA_image_alignment_control \" typedef struct VkPhysicalDeviceImageAlignmentControlFeaturesMESA { VkStructureType sType ; void* pNext ; VkBool32 imageAlignmentControl ; } VkPhysicalDeviceImageAlignmentControlFeaturesMESA ; typedef struct VkPhysicalDeviceImageAlignmentControlPropertiesMESA { VkStructureType sType ; void* pNext ; uint32_t supportedImageAlignmentMask ; } VkPhysicalDeviceImageAlignmentControlPropertiesMESA ; typedef struct VkImageAlignmentControlCreateInfoMESA { VkStructureType sType ; const void* pNext ; uint32_t maximumRequestedAlignment ; } VkImageAlignmentControlCreateInfoMESA ; # define VK_KHR_acceleration_structure 1 # define VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION 1 3 # define VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME \" VK_KHR_acceleration_structure \" typedef enum VkBuildAccelerationStructureModeKHR { VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0,VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1,VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 0 x7FFFFFFF } VkBuildAccelerationStructureModeKHR ; typedef enum VkAccelerationStructureCreateFlagBitsKHR { VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 0 x00000001,VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 0 x00000008,VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = 0 x00000004,VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0 x7FFFFFFF } VkAccelerationStructureCreateFlagBitsKHR ; typedef VkFlags VkAccelerationStructureCreateFlagsKHR ; typedef struct VkAccelerationStructureBuildRangeInfoKHR { uint32_t primitiveCount ; uint32_t primitiveOffset ; uint32_t firstVertex ; uint32_t transformOffset ; } VkAccelerationStructureBuildRangeInfoKHR ; typedef struct VkAccelerationStructureGeometryTrianglesDataKHR { VkStructureType sType ; const void* pNext ; VkFormat vertexFormat ; VkDeviceOrHostAddressConstKHR vertexData ; VkDeviceSize vertexStride ; uint32_t maxVertex ; VkIndexType indexType ; VkDeviceOrHostAddressConstKHR indexData ; VkDeviceOrHostAddressConstKHR transformData ; } VkAccelerationStructureGeometryTrianglesDataKHR ; typedef struct VkAccelerationStructureGeometryAabbsDataKHR { VkStructureType sType ; const void* pNext ; VkDeviceOrHostAddressConstKHR data ; VkDeviceSize stride ; } VkAccelerationStructureGeometryAabbsDataKHR ; typedef struct VkAccelerationStructureGeometryInstancesDataKHR { VkStructureType sType ; const void* pNext ; VkBool32 arrayOfPointers ; VkDeviceOrHostAddressConstKHR data ; } VkAccelerationStructureGeometryInstancesDataKHR ; typedef union VkAccelerationStructureGeometryDataKHR { VkAccelerationStructureGeometryTrianglesDataKHR triangles ; VkAccelerationStructureGeometryAabbsDataKHR aabbs ; VkAccelerationStructureGeometryInstancesDataKHR instances ; } VkAccelerationStructureGeometryDataKHR ; typedef struct VkAccelerationStructureGeometryKHR { VkStructureType sType ; const void* pNext ; VkGeometryTypeKHR geometryType ; VkAccelerationStructureGeometryDataKHR geometry ; VkGeometryFlagsKHR flags ; } VkAccelerationStructureGeometryKHR ; typedef struct VkAccelerationStructureBuildGeometryInfoKHR { VkStructureType sType ; const void* pNext ; VkAccelerationStructureTypeKHR type ; VkBuildAccelerationStructureFlagsKHR flags ; VkBuildAccelerationStructureModeKHR mode ; VkAccelerationStructureKHR srcAccelerationStructure ; VkAccelerationStructureKHR dstAccelerationStructure ; uint32_t geometryCount ; const VkAccelerationStructureGeometryKHR* pGeometries ; const VkAccelerationStructureGeometryKHR* const* ppGeometries ; VkDeviceOrHostAddressKHR scratchData ; } VkAccelerationStructureBuildGeometryInfoKHR ; typedef struct VkAccelerationStructureCreateInfoKHR { VkStructureType sType ; const void* pNext ; VkAccelerationStructureCreateFlagsKHR createFlags ; VkBuffer buffer ; VkDeviceSize offset ; VkDeviceSize size ; VkAccelerationStructureTypeKHR type ; VkDeviceAddress deviceAddress ; } VkAccelerationStructureCreateInfoKHR ; typedef struct VkWriteDescriptorSetAccelerationStructureKHR { VkStructureType sType ; const void* pNext ; uint32_t accelerationStructureCount ; const VkAccelerationStructureKHR* pAccelerationStructures ; } VkWriteDescriptorSetAccelerationStructureKHR ; typedef struct VkPhysicalDeviceAccelerationStructureFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 accelerationStructure ; VkBool32 accelerationStructureCaptureReplay ; VkBool32 accelerationStructureIndirectBuild ; VkBool32 accelerationStructureHostCommands ; VkBool32 descriptorBindingAccelerationStructureUpdateAfterBind ; } VkPhysicalDeviceAccelerationStructureFeaturesKHR ; typedef struct VkPhysicalDeviceAccelerationStructurePropertiesKHR { VkStructureType sType ; void* pNext ; uint64_t maxGeometryCount ; uint64_t maxInstanceCount ; uint64_t maxPrimitiveCount ; uint32_t maxPerStageDescriptorAccelerationStructures ; uint32_t maxPerStageDescriptorUpdateAfterBindAccelerationStructures ; uint32_t maxDescriptorSetAccelerationStructures ; uint32_t maxDescriptorSetUpdateAfterBindAccelerationStructures ; uint32_t minAccelerationStructureScratchOffsetAlignment ; } VkPhysicalDeviceAccelerationStructurePropertiesKHR ; typedef struct VkAccelerationStructureDeviceAddressInfoKHR { VkStructureType sType ; const void* pNext ; VkAccelerationStructureKHR accelerationStructure ; } VkAccelerationStructureDeviceAddressInfoKHR ; typedef struct VkAccelerationStructureVersionInfoKHR { VkStructureType sType ; const void* pNext ; const uint8_t* pVersionData ; } VkAccelerationStructureVersionInfoKHR ; typedef struct VkCopyAccelerationStructureToMemoryInfoKHR { VkStructureType sType ; const void* pNext ; VkAccelerationStructureKHR src ; VkDeviceOrHostAddressKHR dst ; VkCopyAccelerationStructureModeKHR mode ; } VkCopyAccelerationStructureToMemoryInfoKHR ; typedef struct VkCopyMemoryToAccelerationStructureInfoKHR { VkStructureType sType ; const void* pNext ; VkDeviceOrHostAddressConstKHR src ; VkAccelerationStructureKHR dst ; VkCopyAccelerationStructureModeKHR mode ; } VkCopyMemoryToAccelerationStructureInfoKHR ; typedef struct VkCopyAccelerationStructureInfoKHR { VkStructureType sType ; const void* pNext ; VkAccelerationStructureKHR src ; VkAccelerationStructureKHR dst ; VkCopyAccelerationStructureModeKHR mode ; } VkCopyAccelerationStructureInfoKHR ; typedef struct VkAccelerationStructureBuildSizesInfoKHR { VkStructureType sType ; const void* pNext ; VkDeviceSize accelerationStructureSize ; VkDeviceSize updateScratchSize ; VkDeviceSize buildScratchSize ; } VkAccelerationStructureBuildSizesInfoKHR ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateAccelerationStructureKHR)(VkDevice device, const VkAccelerationStructureCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkAccelerationStructureKHR* pAccelerationStructure)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyAccelerationStructureKHR)(VkDevice device, VkAccelerationStructureKHR accelerationStructure, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBuildAccelerationStructuresKHR)(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdBuildAccelerationStructuresIndirectKHR)(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkDeviceAddress* pIndirectDeviceAddresses, const uint32_t* pIndirectStrides, const uint32_t* const* ppMaxPrimitiveCounts)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkBuildAccelerationStructuresKHR)(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCopyAccelerationStructureKHR)(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureInfoKHR* pInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCopyAccelerationStructureToMemoryKHR)(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCopyMemoryToAccelerationStructureKHR)(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkWriteAccelerationStructuresPropertiesKHR)(VkDevice device, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, size_t dataSize, void* pData, size_t stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyAccelerationStructureKHR)(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR* pInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyAccelerationStructureToMemoryKHR)(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdCopyMemoryToAccelerationStructureKHR)(VkCommandBuffer commandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)"
  },
  {
    "label": "VkDeviceAddress()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkDeviceAddress(VKAPI_PTR *PFN_vkGetAccelerationStructureDeviceAddressKHR)(VkDevice device, const VkAccelerationStructureDeviceAddressInfoKHR* pInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdWriteAccelerationStructuresPropertiesKHR)(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetDeviceAccelerationStructureCompatibilityKHR)(VkDevice device, const VkAccelerationStructureVersionInfoKHR* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkGetAccelerationStructureBuildSizesKHR)(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo, const uint32_t* pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo)"
  },
  {
    "label": "vkCreateAccelerationStructureKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateAccelerationStructureKHR(VkDevice device, const VkAccelerationStructureCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkAccelerationStructureKHR* pAccelerationStructure)"
  },
  {
    "label": "vkDestroyAccelerationStructureKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyAccelerationStructureKHR(VkDevice device, VkAccelerationStructureKHR accelerationStructure, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkCmdBuildAccelerationStructuresKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos)"
  },
  {
    "label": "vkCmdBuildAccelerationStructuresIndirectKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkDeviceAddress* pIndirectDeviceAddresses, const uint32_t* pIndirectStrides, const uint32_t* const* ppMaxPrimitiveCounts)"
  },
  {
    "label": "vkBuildAccelerationStructuresKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkBuildAccelerationStructuresKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos)"
  },
  {
    "label": "vkCopyAccelerationStructureKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCopyAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureInfoKHR* pInfo)"
  },
  {
    "label": "vkCopyAccelerationStructureToMemoryKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCopyAccelerationStructureToMemoryKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)"
  },
  {
    "label": "vkCopyMemoryToAccelerationStructureKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCopyMemoryToAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)"
  },
  {
    "label": "vkWriteAccelerationStructuresPropertiesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkWriteAccelerationStructuresPropertiesKHR(VkDevice device, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, size_t dataSize, void* pData, size_t stride)"
  },
  {
    "label": "vkCmdCopyAccelerationStructureKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR* pInfo)"
  },
  {
    "label": "vkCmdCopyAccelerationStructureToMemoryKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)"
  },
  {
    "label": "vkCmdCopyMemoryToAccelerationStructureKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)"
  },
  {
    "label": "vkGetAccelerationStructureDeviceAddressKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkDeviceAddress VKAPI_CALL)",
    "insertText": "vkGetAccelerationStructureDeviceAddressKHR(VkDevice device, const VkAccelerationStructureDeviceAddressInfoKHR* pInfo)"
  },
  {
    "label": "vkCmdWriteAccelerationStructuresPropertiesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)"
  },
  {
    "label": "vkGetDeviceAccelerationStructureCompatibilityKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice device, const VkAccelerationStructureVersionInfoKHR* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility)"
  },
  {
    "label": "vkGetAccelerationStructureBuildSizesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkGetAccelerationStructureBuildSizesKHR(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo, const uint32_t* pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_ray_tracing_pipeline 1 # define VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION 1 # define VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME \" VK_KHR_ray_tracing_pipeline \" typedef enum VkShaderGroupShaderKHR { VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0,VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1,VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2,VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3,VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = 0 x7FFFFFFF } VkShaderGroupShaderKHR ; typedef struct VkRayTracingShaderGroupCreateInfoKHR { VkStructureType sType ; const void* pNext ; VkRayTracingShaderGroupTypeKHR type ; uint32_t generalShader ; uint32_t closestHitShader ; uint32_t anyHitShader ; uint32_t intersectionShader ; const void* pShaderGroupCaptureReplayHandle ; } VkRayTracingShaderGroupCreateInfoKHR ; typedef struct VkRayTracingPipelineInterfaceCreateInfoKHR { VkStructureType sType ; const void* pNext ; uint32_t maxPipelineRayPayloadSize ; uint32_t maxPipelineRayHitAttributeSize ; } VkRayTracingPipelineInterfaceCreateInfoKHR ; typedef struct VkRayTracingPipelineCreateInfoKHR { VkStructureType sType ; const void* pNext ; VkPipelineCreateFlags flags ; uint32_t stageCount ; const VkPipelineShaderStageCreateInfo* pStages ; uint32_t groupCount ; const VkRayTracingShaderGroupCreateInfoKHR* pGroups ; uint32_t maxPipelineRayRecursionDepth ; const VkPipelineLibraryCreateInfoKHR* pLibraryInfo ; const VkRayTracingPipelineInterfaceCreateInfoKHR* pLibraryInterface ; const VkPipelineDynamicStateCreateInfo* pDynamicState ; VkPipelineLayout layout ; VkPipeline basePipelineHandle ; int32_t basePipelineIndex ; } VkRayTracingPipelineCreateInfoKHR ; typedef struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 rayTracingPipeline ; VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplay ; VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplayMixed ; VkBool32 rayTracingPipelineTraceRaysIndirect ; VkBool32 rayTraversalPrimitiveCulling ; } VkPhysicalDeviceRayTracingPipelineFeaturesKHR ; typedef struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR { VkStructureType sType ; void* pNext ; uint32_t shaderGroupHandleSize ; uint32_t maxRayRecursionDepth ; uint32_t maxShaderGroupStride ; uint32_t shaderGroupBaseAlignment ; uint32_t shaderGroupHandleCaptureReplaySize ; uint32_t maxRayDispatchInvocationCount ; uint32_t shaderGroupHandleAlignment ; uint32_t maxRayHitAttributeSize ; } VkPhysicalDeviceRayTracingPipelinePropertiesKHR ; typedef struct VkStridedDeviceAddressRegionKHR { VkDeviceAddress deviceAddress ; VkDeviceSize stride ; VkDeviceSize size ; } VkStridedDeviceAddressRegionKHR ; typedef struct VkTraceRaysIndirectCommandKHR { uint32_t width ; uint32_t height ; uint32_t depth ; } VkTraceRaysIndirectCommandKHR ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdTraceRaysKHR)(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateRayTracingPipelinesKHR)(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR)(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdTraceRaysIndirectKHR)(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress)"
  },
  {
    "label": "VkDeviceSize()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkDeviceSize(VKAPI_PTR *PFN_vkGetRayTracingShaderGroupStackSizeKHR)(VkDevice device, VkPipeline pipeline, uint32_t group, VkShaderGroupShaderKHR groupShader)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdSetRayTracingPipelineStackSizeKHR)(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize)"
  },
  {
    "label": "vkCmdTraceRaysKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdTraceRaysKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth)"
  },
  {
    "label": "vkCreateRayTracingPipelinesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)"
  },
  {
    "label": "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData)"
  },
  {
    "label": "vkCmdTraceRaysIndirectKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress)"
  },
  {
    "label": "vkGetRayTracingShaderGroupStackSizeKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkDeviceSize VKAPI_CALL)",
    "insertText": "vkGetRayTracingShaderGroupStackSizeKHR(VkDevice device, VkPipeline pipeline, uint32_t group, VkShaderGroupShaderKHR groupShader)"
  },
  {
    "label": "vkCmdSetRayTracingPipelineStackSizeKHR()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_KHR_ray_query 1 # define VK_KHR_RAY_QUERY_SPEC_VERSION 1 # define VK_KHR_RAY_QUERY_EXTENSION_NAME \" VK_KHR_ray_query \" typedef struct VkPhysicalDeviceRayQueryFeaturesKHR { VkStructureType sType ; void* pNext ; VkBool32 rayQuery ; } VkPhysicalDeviceRayQueryFeaturesKHR ; # define VK_EXT_mesh_shader 1 # define VK_EXT_MESH_SHADER_SPEC_VERSION 1 # define VK_EXT_MESH_SHADER_EXTENSION_NAME \" VK_EXT_mesh_shader \" typedef struct VkPhysicalDeviceMeshShaderFeaturesEXT { VkStructureType sType ; void* pNext ; VkBool32 taskShader ; VkBool32 meshShader ; VkBool32 multiviewMeshShader ; VkBool32 primitiveFragmentShadingRateMeshShader ; VkBool32 meshShaderQueries ; } VkPhysicalDeviceMeshShaderFeaturesEXT ; typedef struct VkPhysicalDeviceMeshShaderPropertiesEXT { VkStructureType sType ; void* pNext ; uint32_t maxTaskWorkGroupTotalCount ; uint32_t maxTaskWorkGroupCount [ 3 ] ; uint32_t maxTaskWorkGroupInvocations ; uint32_t maxTaskWorkGroupSize [ 3 ] ; uint32_t maxTaskPayloadSize ; uint32_t maxTaskSharedMemorySize ; uint32_t maxTaskPayloadAndSharedMemorySize ; uint32_t maxMeshWorkGroupTotalCount ; uint32_t maxMeshWorkGroupCount [ 3 ] ; uint32_t maxMeshWorkGroupInvocations ; uint32_t maxMeshWorkGroupSize [ 3 ] ; uint32_t maxMeshSharedMemorySize ; uint32_t maxMeshPayloadAndSharedMemorySize ; uint32_t maxMeshOutputMemorySize ; uint32_t maxMeshPayloadAndOutputMemorySize ; uint32_t maxMeshOutputComponents ; uint32_t maxMeshOutputVertices ; uint32_t maxMeshOutputPrimitives ; uint32_t maxMeshOutputLayers ; uint32_t maxMeshMultiviewViewCount ; uint32_t meshOutputPerVertexGranularity ; uint32_t meshOutputPerPrimitiveGranularity ; uint32_t maxPreferredTaskWorkGroupInvocations ; uint32_t maxPreferredMeshWorkGroupInvocations ; VkBool32 prefersLocalInvocationVertexOutput ; VkBool32 prefersLocalInvocationPrimitiveOutput ; VkBool32 prefersCompactVertexOutput ; VkBool32 prefersCompactPrimitiveOutput ; } VkPhysicalDeviceMeshShaderPropertiesEXT ; typedef struct VkDrawMeshTasksIndirectCommandEXT { uint32_t groupCountX ; uint32_t groupCountY ; uint32_t groupCountZ ; } VkDrawMeshTasksIndirectCommandEXT ; typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawMeshTasksEXT)(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawMeshTasksIndirectEXT)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkCmdDrawMeshTasksIndirectCountEXT)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)"
  },
  {
    "label": "vkCmdDrawMeshTasksEXT()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawMeshTasksEXT(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)"
  },
  {
    "label": "vkCmdDrawMeshTasksIndirectEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawMeshTasksIndirectEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)"
  },
  {
    "label": "vkCmdDrawMeshTasksIndirectCountEXT()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkCmdDrawMeshTasksIndirectCountEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)"
  }
]