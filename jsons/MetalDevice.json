[
  {
    "label": "EMetalDebugLevel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMetalDebugLevel"
  },
  {
    "label": "FMetalBindlessDescriptorManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalBindlessDescriptorManager"
  },
  {
    "label": "FMetalDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalDevice"
  },
  {
    "label": "NS_OPTIONS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MetalViewport . h \" # include \" MetalCommandQueue . h \" # include \" MetalBuffer . h \" # include \" MetalCaptureManager . h \" # include \" MetalTempAllocator . h \" # include \" MetalStateCache . h \" # if PLATFORM_IOS # include \" IOS / IOSView . h \" # endif # include \" Containers / LockFreeList . h \" typedef)",
    "insertText": "NS_OPTIONS(uint64, EMetalFeatures)"
  },
  {
    "label": "CreateDevice()",
    "kind": "Method",
    "detail": "Function (EMetalFeaturesSetBufferOffset = 1<<0,EMetalFeaturesCountingQueries = 1<<1,EMetalFeaturesBaseVertexInstance = 1<<2,EMetalFeaturesIndirectBuffer = 1<<3,EMetalFeaturesLayeredRendering = 1<<4,EMetalFeaturesSetBytes = 1<<5,EMetalFeaturesUnusedReservedBit6 = 1<<6,EMetalFeaturesValidation = 1<<7,EMetalFeaturesStatistics = 1<<8,EMetalFeaturesHeaps = 1<<9,EMetalFeaturesFences = 1<<1 0,EMetalFeaturesMSAADepthResolve = 1<<1 1,EMetalFeaturesMSAAStoreAndResolve = 1<<1 2,EMetalFeaturesGPUTrace = 1<<1 3,EMetalFeaturesCubemapArrays = 1<<1 4,EMetalFeaturesMultipleViewports = 1<<1 5,EMetalFeaturesPresentMinDuration = 1 llu<<1 6 llu,EMetalFeaturesGPUCaptureManager = 1 llu<<1 7 llu,EMetalFeaturesEfficientBufferBlits = 1 llu<<1 8 llu,EMetalFeaturesBufferSubAllocation = 1 llu<<1 9 llu,EMetalFeaturesPrivateBufferSubAllocation = 1 llu<<2 0 llu,EMetalFeaturesTextureBuffers = 1 llu<<2 1 llu,EMetalFeaturesMaxThreadsPerThreadgroup = 1 llu<<2 2 llu,EMetalFeaturesParallelRenderEncoders = 1 llu<<2 3 llu,EMetalFeaturesIABs = 1 llu<<2 4 llu,EMetalFeaturesPipelineBufferMutability = 1 llu<<2 5 llu,EMetalFeaturesTileShaders = 1 llu<<2 6 llu,EMetalFeaturesUnusedReservedBit27 = 1 llu<<2 7 llu,EMetalFeaturesTier2IABs = 1 llu<<2 8 llu,} ; enum EMetalDebugLevel { EMetalDebugLevelOff,EMetalDebugLevelFastValidation,EMetalDebugLevelResetOnBind,EMetalDebugLevelConditionalSubmit,EMetalDebugLevelValidation,EMetalDebugLevelWaitForComplete,} ; class FMetalBindlessDescriptorManager ; class FMetalDevice { public : FMetalDevice*)",
    "insertText": "CreateDevice()"
  },
  {
    "label": "FMetalDevice()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalDevice()"
  },
  {
    "label": "EnumerateFeatureSupport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateFeatureSupport()"
  },
  {
    "label": "SupportsFeature()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsFeature(EMetalFeatures InFeature)"
  },
  {
    "label": "GetResourceHeap()",
    "kind": "Method",
    "detail": "Function (} FMetalResourceHeap&)",
    "insertText": "GetResourceHeap(void)"
  },
  {
    "label": "CreateTexture()",
    "kind": "Method",
    "detail": "Function (MTLTexturePtr)",
    "insertText": "CreateTexture(FMetalSurface* Surface, MTL::TextureDescriptor* Descriptor)"
  },
  {
    "label": "CreatePooledBuffer()",
    "kind": "Method",
    "detail": "Function (FMetalBufferPtr)",
    "insertText": "CreatePooledBuffer(FMetalPooledBufferArgs const& Args)"
  },
  {
    "label": "CreateEvent()",
    "kind": "Method",
    "detail": "Function (MTLEventPtr)",
    "insertText": "CreateEvent()"
  },
  {
    "label": "DrainHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrainHeap()"
  },
  {
    "label": "GarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GarbageCollect()"
  },
  {
    "label": "GetDeviceIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetDeviceIndex(void)"
  },
  {
    "label": "GetTransferAllocator()",
    "kind": "Method",
    "detail": "Function (FMetalTempAllocator*)",
    "insertText": "GetTransferAllocator()"
  },
  {
    "label": "RemoveActiveBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActiveBuffer(MTL::Buffer* Buffer, const NS::Range& Range)"
  },
  {
    "label": "ValidateIsInactiveBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateIsInactiveBuffer(MTL::Buffer* Buffer, const NS::Range& Range)"
  },
  {
    "label": "GetDevice()",
    "kind": "Method",
    "detail": "Function (# endif MTL::Device*)",
    "insertText": "GetDevice()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&InflightCommandBufferCriticalSection)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InflightCommandBuffers .)",
    "insertText": "Add(CmdBuffer)"
  },
  {
    "label": "RemoveInflightCommandBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveInflightCommandBuffer(MTL::CommandBuffer* CmdBuffer)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (InflightCommandBuffers .)",
    "insertText": "Remove(CmdBuffer)"
  },
  {
    "label": "WaitForGPUIdle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WaitForGPUIdle()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TempInflightCommandBuffers = InflightCommandBuffers ; })",
    "insertText": "for(MTL::CommandBuffer* CmdBuffer : TempInflightCommandBuffers)"
  },
  {
    "label": "Yield()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Yield()"
  },
  {
    "label": "waitUntilCompleted()",
    "kind": "Method",
    "detail": "Function (} CmdBuffer ->)",
    "insertText": "waitUntilCompleted()"
  },
  {
    "label": "IncrementFrameRHIThread()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "IncrementFrameRHIThread()"
  },
  {
    "label": "GetFrameSemaphore()",
    "kind": "Method",
    "detail": "Function (FrameNumberRHIThread + + ; } dispatch_semaphore_t&)",
    "insertText": "GetFrameSemaphore()"
  },
  {
    "label": "FlushFreeList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushFreeList(bool const bFlushFences = true)"
  },
  {
    "label": "InitializeRayTracing()",
    "kind": "Method",
    "detail": "Function (private : MTL::Device* Device ; FMetalCommandQueue* CommandQueue ; dispatch_semaphore_t FrameSemaphore ; uint32 DeviceIndex ; FMetalResourceHeap Heap ; FMetalCaptureManager* CaptureManager ; FMetalTempAllocator* UniformBufferAllocator ; FMetalTempAllocator* TransferBufferAllocator ; # if METAL_DEBUG_OPTIONS TArray<FMetalFence*> FrameFences ; FCriticalSection ActiveBuffersMutex ; TMap<MTL::Buffer*,TArray<NS::Range>> ActiveBuffers ; # endif FCriticalSection FreeListMutex ; FEvent* FrameReadyEvent ; uint32 FrameCounter = 0 ; uint64 Features = 0 ; FMetalPipelineStateCacheManager* PSOManager ; uint32 FrameNumberRHIThread = 0 ; int32 RuntimeDebuggingLevel = 0 ; FCriticalSection InflightCommandBufferCriticalSection ; TArray<MTL::CommandBuffer*> InflightCommandBuffers ; # if PLATFORM_SUPPORTS_BINDLESS_RENDERING FMetalBindlessDescriptorManager* BindlessDescriptorManager ; # endif # if METAL_RHI_RAYTRACING FMetalRayTracingCompactionRequestHandler* RayTracingCompactionRequestHandler ; void)",
    "insertText": "InitializeRayTracing()"
  },
  {
    "label": "CleanUpRayTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpRayTracing()"
  },
  {
    "label": "UpdateRayTracing()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "UpdateRayTracing()"
  },
  {
    "label": "GetRayTracingCompactionRequestHandler()",
    "kind": "Method",
    "detail": "Function (FMetalRayTracingCompactionRequestHandler*)",
    "insertText": "GetRayTracingCompactionRequestHandler()"
  }
]