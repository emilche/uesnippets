[
  {
    "label": "DepthFirstNodeVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DepthFirstNodeVisitor"
  },
  {
    "label": "visitNodesDepthFirst()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_NODE_VISITOR_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_NODE_VISITOR_HAS_BEEN_INCLUDED # include<openvdb / version . h> # include<openvdb / Types . h> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<TreeT,OpT> size_t)",
    "insertText": "visitNodesDepthFirst(TreeT& tree, OpT& op, size_t idx = 0)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (template<NodeT,Index LEVEL = NodeT::LEVEL> struct DepthFirstNodeVisitor ; template<NodeT,Index LEVEL> struct DepthFirstNodeVisitor { using NonConstChildType = NodeT::ChildNodeType ; using ChildNodeType = CopyConstness<NodeT,NonConstChildType>::Type ; template<OpT> size_t)",
    "insertText": "visit(NodeT& node, OpT& op, size_t idx = 0)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (size_t offset = 0 ;)",
    "insertText": "op(node, idx + offset++)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (offset + = DepthFirstNodeVisitor<ChildNodeType)",
    "insertText": "visit(*iter, op, idx + offset)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "op(node, idx)"
  },
  {
    "label": "visitNodesDepthFirst()",
    "kind": "Method",
    "detail": "Function (} } ; template<TreeT,OpT> size_t)",
    "insertText": "visitNodesDepthFirst(TreeT& tree, OpT& op, size_t idx)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (using NonConstRootNodeType = TreeT::RootNodeType ; using RootNodeType = CopyConstness<TreeT,NonConstRootNodeType>::Type ; return DepthFirstNodeVisitor<RootNodeType)",
    "insertText": "visit(tree.root(), op, idx)"
  }
]