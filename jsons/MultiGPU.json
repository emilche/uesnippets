[
  {
    "label": "FRHIGPUMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIGPUMask"
  },
  {
    "label": "FIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIterator"
  },
  {
    "label": "GetMask()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Math / UnrealMathUtility . h \" # include \" Misc / AssertionMacros . h \" # if DO_GUARD_SLOW # define GPUMASK_CONSTEXPR # else # define GPUMASK_CONSTEXPR # endif # if WITH_MGPU # define MAX_NUM_GPUS 8 uint32 GNumExplicitGPUsForRendering ; uint32 GVirtualMGPU ; # define SGPU_CONSTEXPR # else # define MAX_NUM_GPUS 1 # define GNumExplicitGPUsForRendering 1 # define GVirtualMGPU 0 # define SGPU_CONSTEXPR GPUMASK_CONSTEXPR # endif struct FRHIGPUMask { private : # if WITH_MGPU uint32 GPUMask ; GPUMASK_CONSTEXPR uint32)",
    "insertText": "GetMask()"
  },
  {
    "label": "FRHIGPUMask()",
    "kind": "Method",
    "detail": "Function (} # else GPUMASK_CONSTEXPR)",
    "insertText": "FRHIGPUMask(uint32 InGPUMask)"
  },
  {
    "label": "FRHIGPUMask()",
    "kind": "Method",
    "detail": "Function (} # endif public : GPUMASK_CONSTEXPR)",
    "insertText": "FRHIGPUMask() : FRHIGPUMask(FRHIGPUMask::GPU0())"
  },
  {
    "label": "ToIndex()",
    "kind": "Method",
    "detail": "Function (} # if WITH_MGPU uint32)",
    "insertText": "ToIndex()"
  },
  {
    "label": "HasSingleIndex()",
    "kind": "Method",
    "detail": "Function (} SGPU_CONSTEXPR bool)",
    "insertText": "HasSingleIndex()"
  },
  {
    "label": "GetNumActive()",
    "kind": "Method",
    "detail": "Function (} SGPU_CONSTEXPR uint32)",
    "insertText": "GetNumActive()"
  },
  {
    "label": "GetLastIndex()",
    "kind": "Method",
    "detail": "Function (} SGPU_CONSTEXPR uint32)",
    "insertText": "GetLastIndex()"
  },
  {
    "label": "GetFirstIndex()",
    "kind": "Method",
    "detail": "Function (} SGPU_CONSTEXPR uint32)",
    "insertText": "GetFirstIndex()"
  },
  {
    "label": "ContainsAll()",
    "kind": "Method",
    "detail": "Function (} SGPU_CONSTEXPR bool)",
    "insertText": "ContainsAll(FRHIGPUMask Rhs)"
  },
  {
    "label": "Intersects()",
    "kind": "Method",
    "detail": "Function (} SGPU_CONSTEXPR bool)",
    "insertText": "Intersects(FRHIGPUMask Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SGPU_CONSTEXPR bool)",
    "insertText": "operator(FRHIGPUMask Rhs)"
  },
  {
    "label": "GetNative()",
    "kind": "Method",
    "detail": "Function (# endif } SGPU_CONSTEXPR uint32)",
    "insertText": "GetNative()"
  },
  {
    "label": "FromIndex()",
    "kind": "Method",
    "detail": "Function (} GPUMASK_CONSTEXPR FRHIGPUMask)",
    "insertText": "FromIndex(uint32 GPUIndex)"
  },
  {
    "label": "GPU0()",
    "kind": "Method",
    "detail": "Function (} GPUMASK_CONSTEXPR FRHIGPUMask)",
    "insertText": "GPU0()"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (} SGPU_CONSTEXPR FRHIGPUMask)",
    "insertText": "All()"
  },
  {
    "label": "FilterGPUsBefore()",
    "kind": "Method",
    "detail": "Function (} SGPU_CONSTEXPR FRHIGPUMask)",
    "insertText": "FilterGPUsBefore(uint32 GPUIndex)"
  },
  {
    "label": "Invert()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Invert(FRHIGPUMask& OutInverse)"
  },
  {
    "label": "FIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIterator(FRHIGPUMask InGPUMask) : FIterator(InGPUMask.GetMask())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "GPUMask()",
    "kind": "Method",
    "detail": "Function (# if WITH_MGPU)",
    "insertText": "GPUMask(1 << FirstGPUIndexInMask)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (FirstGPUIndexInMask =)",
    "insertText": "CountTrailingZeros(GPUMask)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# else GPUMask = 0 ; # endif return* this ; } FIterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (FIterator)",
    "insertText": "Copy(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FIterator& Rhs)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} FRHIGPUMask::FIterator)",
    "insertText": "end(FRHIGPUMask NodeMask)"
  }
]