[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FWidgetBlueprintEditorToolbar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetBlueprintEditorToolbar"
  },
  {
    "label": "IMessageLogListing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageLogListing"
  },
  {
    "label": "STextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STextBlock"
  },
  {
    "label": "UPanelSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPanelSlot"
  },
  {
    "label": "UWidgetAnimation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetAnimation"
  },
  {
    "label": "UWidgetBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetBlueprint"
  },
  {
    "label": "FPaletteViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaletteViewModel"
  },
  {
    "label": "FLibraryViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLibraryViewModel"
  },
  {
    "label": "FPreviewMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreviewMode"
  },
  {
    "label": "FNamedSlotSelection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNamedSlotSelection"
  },
  {
    "label": "UMGEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMGEDITOR_API"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "FWidgetEditorModeUILayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetEditorModeUILayer"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Widgets / SWidget . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Framework / MultiBox / MultiBoxExtender . h \" # include \" Settings / WidgetDesignerSettings . h \" # include \" AssetRegistry / AssetData . h \" # include \" PreviewScene . h \" # include \" GraphEditor . h \" # include \" BlueprintEditor . h \" # include \" ISequencer . h \" # include \" WidgetReference . h \" # include \" Blueprint / UserWidget . h \" class FMenuBuilder ; class FWidgetBlueprintEditorToolbar ; class IMessageLogListing ; class STextBlock ; class UPanelSlot ; class UWidgetAnimation ; class UWidgetBlueprint ; class FPaletteViewModel ; class FLibraryViewModel ; namespace UE::UMG::Editor { class FPreviewMode ; } struct FNamedSlotSelection { FWidgetReference NamedSlotHostWidget ; FName SlotName ; } ; class FWidgetBlueprintEditor : public FBlueprintEditor { private : using Super = FBlueprintEditor ; public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnHoveredWidgetSet, const FWidgetReference&) DECLARE_MULTICAST_DELEGATE(FOnHoveredWidgetCleared)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnSelectedWidgetsChanging) DECLARE_MULTICAST_DELEGATE(FOnSelectedWidgetsChanged) DECLARE_MULTICAST_DELEGATE(FOnWidgetPreviewUpdated) DECLARE_MULTICAST_DELEGATE(FOnWidgetAnimationsUpdated) DECLARE_MULTICAST_DELEGATE(FOnSelectedAnimationChanged) DECLARE_EVENT(FWidgetBlueprintEditor, FOnEnterWidgetDesigner) public: FWidgetBlueprintEditor()"
  },
  {
    "label": "FWidgetBlueprintEditor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FWidgetBlueprintEditor()"
  },
  {
    "label": "InitWidgetBlueprintEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWidgetBlueprintEditor(const EToolkitMode::Type Mode, const TSharedPtr< IToolkitHost >& InitToolkitHost, const TArray<UBlueprint*>& InBlueprints, bool bShouldOpenInDefaultsMode)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccessful)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccessful)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compile()"
  },
  {
    "label": "OnRequestClose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnRequestClose(EAssetEditorCloseReason InCloseReason)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetToolkitContextFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetToolkitContextFName()"
  },
  {
    "label": "GetToolkitFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetToolkitFName()"
  },
  {
    "label": "GetBaseToolkitName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBaseToolkitName()"
  },
  {
    "label": "GetWorldCentricTabPrefix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorldCentricTabPrefix()"
  },
  {
    "label": "GetWorldCentricTabColorScale()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetWorldCentricTabColorScale()"
  },
  {
    "label": "InitToolMenuContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitToolMenuContext(FToolMenuContext& MenuContext)"
  },
  {
    "label": "OnToolkitHostingStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToolkitHostingStarted(const TSharedRef<IToolkit>& Toolkit)"
  },
  {
    "label": "OnToolkitHostingFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToolkitHostingFinished(const TSharedRef<IToolkit>& Toolkit)"
  },
  {
    "label": "GetWidgetBlueprintObj()",
    "kind": "Method",
    "detail": "Function (class UWidgetBlueprint*)",
    "insertText": "GetWidgetBlueprintObj()"
  },
  {
    "label": "GetPreview()",
    "kind": "Method",
    "detail": "Function (UUserWidget*)",
    "insertText": "GetPreview()"
  },
  {
    "label": "GetPreviewScene()",
    "kind": "Method",
    "detail": "Function (FPreviewScene*)",
    "insertText": "GetPreviewScene()"
  },
  {
    "label": "IsSimulating()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimulating()"
  },
  {
    "label": "SetIsSimulating()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsSimulating(bool bSimulating)"
  },
  {
    "label": "InvalidatePreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidatePreview(bool bViewOnly = false)"
  },
  {
    "label": "RefreshPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshPreview()"
  },
  {
    "label": "GetReferenceFromTemplate()",
    "kind": "Method",
    "detail": "Function (FWidgetReference)",
    "insertText": "GetReferenceFromTemplate(UWidget* TemplateWidget)"
  },
  {
    "label": "GetReferenceFromPreview()",
    "kind": "Method",
    "detail": "Function (FWidgetReference)",
    "insertText": "GetReferenceFromPreview(UWidget* PreviewWidget)"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISequencer>&)",
    "insertText": "GetSequencer()"
  },
  {
    "label": "GetTabSequencer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISequencer>&)",
    "insertText": "GetTabSequencer()"
  },
  {
    "label": "GetDrawerSequencer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISequencer>&)",
    "insertText": "GetDrawerSequencer()"
  },
  {
    "label": "DockInLayoutClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DockInLayoutClicked()"
  },
  {
    "label": "ChangeViewedAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeViewedAnimation(UWidgetAnimation& InAnimationToView)"
  },
  {
    "label": "GetCurrentAnimation()",
    "kind": "Method",
    "detail": "Function (UWidgetAnimation*)",
    "insertText": "GetCurrentAnimation()"
  },
  {
    "label": "RefreshCurrentAnimation()",
    "kind": "Method",
    "detail": "Function (} const UWidgetAnimation*)",
    "insertText": "RefreshCurrentAnimation()"
  },
  {
    "label": "SelectWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectWidgets(const TSet<FWidgetReference>& Widgets, bool bAppendOrToggle)"
  },
  {
    "label": "SelectObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectObjects(const TSet<UObject*>& Objects)"
  },
  {
    "label": "IsBindingSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBindingSelected(const FMovieSceneBinding& InBinding)"
  },
  {
    "label": "SetSelectedNamedSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedNamedSlot(TOptional<FNamedSlotSelection> SelectedNamedSlot)"
  },
  {
    "label": "CleanSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanSelection()"
  },
  {
    "label": "GetSelectedWidgets()",
    "kind": "Method",
    "detail": "Function (const TSet<FWidgetReference>&)",
    "insertText": "GetSelectedWidgets()"
  },
  {
    "label": "GetSelectedNamedSlot()",
    "kind": "Method",
    "detail": "Function (TOptional<FNamedSlotSelection>)",
    "insertText": "GetSelectedNamedSlot()"
  },
  {
    "label": "GetSelectedObjects()",
    "kind": "Method",
    "detail": "Function (const TSet<TWeakObjectPtr<UObject>>&)",
    "insertText": "GetSelectedObjects()"
  },
  {
    "label": "GetSelectedTemplate()",
    "kind": "Method",
    "detail": "Function (const TWeakObjectPtr<UClass>)",
    "insertText": "GetSelectedTemplate()"
  },
  {
    "label": "SetSelectedUserWidget()",
    "kind": "Method",
    "detail": "Function (SelectedTemplate = TemplateClass ; } void)",
    "insertText": "SetSelectedUserWidget(FAssetData InSelectedUserWidget)"
  },
  {
    "label": "GetWidgetToolbarBuilder()",
    "kind": "Method",
    "detail": "Function (SelectedUserWidget = InSelectedUserWidget ; } TSharedPtr<class FWidgetBlueprintEditorToolbar>)",
    "insertText": "GetWidgetToolbarBuilder()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(FWidgetBlueprintEditor, FOnWidgetBlueprintTransaction) FOnWidgetBlueprintTransaction& GetOnWidgetBlueprintTransaction()"
  },
  {
    "label": "CreateSequencerDrawerWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateSequencerDrawerWidget()"
  },
  {
    "label": "OnGetWidgetAnimSequencer()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnGetWidgetAnimSequencer()"
  },
  {
    "label": "AddExternalEditorWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExternalEditorWidget(FName ID, TSharedRef<SWidget> InExternalWidget)"
  },
  {
    "label": "RemoveExternalEditorWidget()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveExternalEditorWidget(FName ID)"
  },
  {
    "label": "GetExternalEditorWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetExternalEditorWidget(FName ID)"
  },
  {
    "label": "ToggleAnimDrawer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleAnimDrawer()"
  },
  {
    "label": "NotifyWidgetAnimListChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyWidgetAnimListChanged()"
  },
  {
    "label": "OnWidgetAnimDrawerSequencerOpened()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWidgetAnimDrawerSequencerOpened(FName StatusBarWithDrawerName)"
  },
  {
    "label": "OnWidgetAnimDrawerSequencerDismissed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWidgetAnimDrawerSequencerDismissed(const TSharedPtr<SWidget>& NewlyFocusedWidget)"
  },
  {
    "label": "OnWidgetAnimTabSequencerClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWidgetAnimTabSequencerClosed(TSharedRef<SDockTab> ClosedTab)"
  },
  {
    "label": "OnWidgetAnimTabSequencerOpened()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWidgetAnimTabSequencerOpened()"
  },
  {
    "label": "SetHoveredWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHoveredWidget(FWidgetReference& InHoveredWidget)"
  },
  {
    "label": "ClearHoveredWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearHoveredWidget()"
  },
  {
    "label": "GetHoveredWidget()",
    "kind": "Method",
    "detail": "Function (const FWidgetReference&)",
    "insertText": "GetHoveredWidget()"
  },
  {
    "label": "AddPostDesignerLayoutAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPostDesignerLayoutAction(TFunction<void()> Action)"
  },
  {
    "label": "OnEnteringDesigner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnteringDesigner()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TArray<TFunction<)",
    "insertText": "void()> >& GetQueuedDesignerActions()"
  },
  {
    "label": "GetCurrentDesignerFlags()",
    "kind": "Method",
    "detail": "Function (EWidgetDesignFlags)",
    "insertText": "GetCurrentDesignerFlags()"
  },
  {
    "label": "GetShowDashedOutlines()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShowDashedOutlines()"
  },
  {
    "label": "SetShowDashedOutlines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowDashedOutlines(bool Value)"
  },
  {
    "label": "GetIsRespectingLocks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsRespectingLocks()"
  },
  {
    "label": "SetIsRespectingLocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsRespectingLocks(bool Value)"
  },
  {
    "label": "GetPaletteViewModel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPaletteViewModel>)",
    "insertText": "GetPaletteViewModel()"
  },
  {
    "label": "GetPreviewMode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<UE::UMG::Editor::FPreviewMode>)",
    "insertText": "GetPreviewMode()"
  },
  {
    "label": "CreateMenuExtender()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FExtender>)",
    "insertText": "CreateMenuExtender()"
  },
  {
    "label": "FillFileMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillFileMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "FillAssetMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillAssetMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BindToolkitCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindToolkitCommands()"
  },
  {
    "label": "TakeSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeSnapshot()"
  },
  {
    "label": "CaptureThumbnail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureThumbnail()"
  },
  {
    "label": "ClearThumbnail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearThumbnail()"
  },
  {
    "label": "IsImageUsedAsThumbnail()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImageUsedAsThumbnail()"
  },
  {
    "label": "IsPreviewWidgetInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreviewWidgetInitialized()"
  },
  {
    "label": "CustomizeWidgetCompileOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeWidgetCompileOptions(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "AddCreateCompileTabSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCreateCompileTabSubMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "AddDismissCompileTabSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDismissCompileTabSubMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "SetDismissOnCompileSetting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDismissOnCompileSetting(EDisplayOnCompile InDismissOnCompile)"
  },
  {
    "label": "SetCreateOnCompileSetting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCreateOnCompileSetting(EDisplayOnCompile InCreateOnCompile)"
  },
  {
    "label": "IsDismissOnCompileSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDismissOnCompileSet(EDisplayOnCompile InDismissOnCompile)"
  },
  {
    "label": "IsCreateOnCompileSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCreateOnCompileSet(EDisplayOnCompile InCreateOnCompile)"
  },
  {
    "label": "OpenCreateNativeBaseClassDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenCreateNativeBaseClassDialog()"
  },
  {
    "label": "OnCreateNativeBaseClassSuccessfully()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateNativeBaseClassSuccessfully(const FString& InClassName, const FString& InClassPath, const FString& InModuleName)"
  },
  {
    "label": "CreateSequencerWidgetInternal()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISequencer>)",
    "insertText": "CreateSequencerWidgetInternal()"
  },
  {
    "label": "RegisterApplicationModes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterApplicationModes(const TArray<UBlueprint*>& InBlueprints, bool bShouldOpenInDefaultsMode, bool bNewlyCreated = false)"
  },
  {
    "label": "GetGraphAppearance()",
    "kind": "Method",
    "detail": "Function (FGraphAppearanceInfo)",
    "insertText": "GetGraphAppearance(class UEdGraph* InGraph)"
  },
  {
    "label": "GetDefaultSchemaClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UEdGraphSchema>)",
    "insertText": "GetDefaultSchemaClass()"
  },
  {
    "label": "CanDeleteSelectedWidgets()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CanDeleteSelectedWidgets()"
  },
  {
    "label": "DeleteSelectedWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedWidgets()"
  },
  {
    "label": "CanCopySelectedWidgets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopySelectedWidgets()"
  },
  {
    "label": "CopySelectedWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedWidgets()"
  },
  {
    "label": "CanPasteWidgets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteWidgets()"
  },
  {
    "label": "PasteWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteWidgets()"
  },
  {
    "label": "CanCutSelectedWidgets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCutSelectedWidgets()"
  },
  {
    "label": "CutSelectedWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CutSelectedWidgets()"
  },
  {
    "label": "CanDuplicateSelectedWidgets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDuplicateSelectedWidgets()"
  },
  {
    "label": "DuplicateSelectedWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateSelectedWidgets()"
  },
  {
    "label": "OnFindWidgetReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFindWidgetReferences(bool bSearchAllBlueprints, const EGetFindReferenceSearchStringFlags Flags)"
  },
  {
    "label": "CanFindWidgetReferences()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFindWidgetReferences()"
  },
  {
    "label": "CanCreateNativeBaseClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCreateNativeBaseClass()"
  },
  {
    "label": "IsCreateNativeBaseClassVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCreateNativeBaseClassVisible()"
  },
  {
    "label": "OnBlueprintChangedImpl()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnBlueprintChangedImpl(UBlueprint* InBlueprint, bool bIsJustBeingCompiled = false)"
  },
  {
    "label": "OnObjectsReplaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectsReplaced(const TMap<UObject*, UObject*>& ReplacementMap)"
  },
  {
    "label": "DestroyPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPreview()"
  },
  {
    "label": "UpdatePreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePreview(UBlueprint* InBlueprint, bool bInForceFullUpdate)"
  },
  {
    "label": "OnGetAnimationAddMenuContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetAnimationAddMenuContent(FMenuBuilder& MenuBuilder, TSharedRef<ISequencer> Sequencer)"
  },
  {
    "label": "OnBuildCustomContextMenuForGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBuildCustomContextMenuForGuid(FMenuBuilder& MenuBuilder,FGuid ObjectBinding)"
  },
  {
    "label": "OnGetAnimationAddMenuContentAllWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetAnimationAddMenuContentAllWidgets(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "AddObjectToAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObjectToAnimation(UObject* ObjectToAnimate)"
  },
  {
    "label": "GetAddTrackSequencerExtender()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FExtender>)",
    "insertText": "GetAddTrackSequencerExtender(const TSharedRef<FUICommandList> CommandList, const TArray<UObject*> ContextSensitiveObjects)"
  },
  {
    "label": "ExtendSequencerAddTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendSequencerAddTrackMenu(FMenuBuilder& AddTrackMenuBuilder, const TArray<UObject*> ContextObjects)"
  },
  {
    "label": "AddWidgetsToTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWidgetsToTrack(const TArray<FWidgetReference> Widgets, FGuid ObjectId)"
  },
  {
    "label": "RemoveWidgetsFromTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWidgetsFromTrack(const TArray<FWidgetReference> Widgets, FGuid ObjectId)"
  },
  {
    "label": "RemoveAllWidgetsFromTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllWidgetsFromTrack(FGuid ObjectId)"
  },
  {
    "label": "RemoveMissingWidgetsFromTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMissingWidgetsFromTrack(FGuid ObjectId)"
  },
  {
    "label": "ReplaceTrackWithWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceTrackWithWidgets(const TArray<FWidgetReference> Widgets, FGuid ObjectId)"
  },
  {
    "label": "AddDynamicPossessionMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDynamicPossessionMenu(FMenuBuilder& MenuBuilder, FGuid ObjectId)"
  },
  {
    "label": "AddSlotTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSlotTrack(UPanelSlot* Slot)"
  },
  {
    "label": "AddSlotTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSlotTrack(TObjectPtr<UPanelSlot> Slot)"
  },
  {
    "label": "AddMaterialTrack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMaterialTrack(UWidget* Widget, TArray<FProperty*> MaterialPropertyPath, FText MaterialPropertyDisplayName)"
  },
  {
    "label": "OnMovieSceneDataChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMovieSceneDataChanged(EMovieSceneDataChangeType DataChangeType)"
  },
  {
    "label": "OnMovieSceneBindingsPasted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMovieSceneBindingsPasted(const TArray<FMovieSceneBinding>& BindingsPasted)"
  },
  {
    "label": "SyncSelectedWidgetsWithSequencerSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncSelectedWidgetsWithSequencerSelection(TArray<FGuid> ObjectGuids)"
  },
  {
    "label": "SyncSequencerSelectionToSelectedWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncSequencerSelectionToSelectedWidgets()"
  },
  {
    "label": "SyncSequencersMovieSceneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncSequencersMovieSceneData()"
  },
  {
    "label": "GetAnimationPlaybackContext()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetAnimationPlaybackContext()"
  },
  {
    "label": "GetAnimationEventContexts()",
    "kind": "Method",
    "detail": "Function (} TArray<UObject*>)",
    "insertText": "GetAnimationEventContexts()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*> EventContexts ; EventContexts .)",
    "insertText": "Add(GetPreview())"
  },
  {
    "label": "OnFinishedChangingDynamicBindingProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishedChangingDynamicBindingProperties(const FPropertyChangedEvent& ChangeEvent, TSharedPtr<FStructOnScope> ValueStruct, FGuid ObjectId)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : FPreviewScene PreviewScene ; TMap<FName,TSharedPtr<SWidget>> ExternalEditorWidgets ; TArray<TWeakPtr<ISequencer>> Sequencers ; TSharedPtr<ISequencer> TabSequencer ; TWeakPtr<SOverlay> TabSequencerOverlay ; TSharedPtr<ISequencer> DrawerSequencer ; TWeakPtr<SOverlay> DrawerSequencerOverlay ; TSharedPtr<SWidget> AnimDrawerWidget ; TWeakPtr<STextBlock> NoAnimationTextBlockTab ; TWeakPtr<STextBlock> NoAnimationTextBlockDrawer ; UWidgetBlueprint* PreviewBlueprint ; TSet<FWidgetReference> SelectedWidgets ; TSet<TWeakObjectPtr<UObject>> SelectedObjects ; TWeakObjectPtr<UClass> SelectedTemplate ; FAssetData SelectedUserWidget ; TOptional<FNamedSlotSelection> SelectedNamedSlot ; TWeakObjectPtr<UUserWidget> PreviewWidgetPtr ; FOnWidgetBlueprintTransaction OnWidgetBlueprintTransaction ; TSharedPtr<class FWidgetBlueprintEditorToolbar> WidgetToolbar ; TSharedPtr<class FWidgetEditorModeUILayer> ModeUILayer ; TArray<TWeakPtr<FWidgetHandle>> WidgetHandlePool ; FWidgetReference HoveredWidget ; bool bPreviewInvalidated ; bool bIsSimulateEnabled ; bool bIsRealTime ; bool bShowDashedOutlines ; bool bRespectLocks ; TArray<TFunction<)",
    "insertText": "void()"
  }
]