[
  {
    "label": "DtmfProviderInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DtmfProviderInterface"
  },
  {
    "label": "DtmfSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DtmfSender"
  },
  {
    "label": "CanInsertDtmf()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_DTMF_SENDER_H_ # define PC_DTMF_SENDER_H_ # include<stdint . h> # include<string> # include \" api / dtmf_sender_interface . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_base . h \" # include \" pc / proxy . h \" # include \" rtc_base / ref_count . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class DtmfProviderInterface { public : bool)",
    "insertText": "CanInsertDtmf()"
  },
  {
    "label": "InsertDtmf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertDtmf(int code, int duration)"
  },
  {
    "label": "DtmfProviderInterface()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "DtmfProviderInterface()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} } ; class DtmfSender : public DtmfSenderInterface { public : rtc::scoped_refptr<DtmfSender>)",
    "insertText": "Create(TaskQueueBase* signaling_thread, DtmfProviderInterface* provider)"
  },
  {
    "label": "OnDtmfProviderDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDtmfProviderDestroyed()"
  },
  {
    "label": "RegisterObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterObserver(DtmfSenderObserverInterface* observer)"
  },
  {
    "label": "UnregisterObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterObserver()"
  },
  {
    "label": "InsertDtmf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertDtmf(const std::string& tones, int duration, int inter_tone_gap, int comma_delay = kDtmfDefaultCommaDelayMs)"
  },
  {
    "label": "tones()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "tones()"
  },
  {
    "label": "duration()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "duration()"
  },
  {
    "label": "inter_tone_gap()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "inter_tone_gap()"
  },
  {
    "label": "comma_delay()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "comma_delay()"
  },
  {
    "label": "DtmfSender()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "DtmfSender(TaskQueueBase* signaling_thread, DtmfProviderInterface* provider)"
  },
  {
    "label": "DtmfSender()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DtmfSender()"
  },
  {
    "label": "DtmfSender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DtmfSender(const DtmfSender&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DtmfSender&)",
    "insertText": "operator(const DtmfSender&)"
  },
  {
    "label": "QueueInsertDtmf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueInsertDtmf(uint32_t delay_ms) RTC_RUN_ON(signaling_thread_)"
  },
  {
    "label": "DoInsertDtmf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoInsertDtmf() RTC_RUN_ON(signaling_thread_)"
  },
  {
    "label": "StopSending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSending() RTC_RUN_ON(signaling_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (DtmfSenderObserverInterface* observer_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<PendingTaskSafetyFlag> safety_flag_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread_) RTC_PT_GUARDED_BY(signaling_thread_)"
  },
  {
    "label": "BEGIN_PRIMARY_PROXY_MAP()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "BEGIN_PRIMARY_PROXY_MAP(DtmfSender) PROXY_PRIMARY_THREAD_DESTRUCTOR() PROXY_METHOD1(void, RegisterObserver, DtmfSenderObserverInterface*) PROXY_METHOD0(void, UnregisterObserver) PROXY_METHOD0(bool, CanInsertDtmf) PROXY_METHOD4(bool, InsertDtmf, const std::string&, int, int, int) PROXY_CONSTMETHOD0(std::string, tones) PROXY_CONSTMETHOD0(int, duration) PROXY_CONSTMETHOD0(int, inter_tone_gap) PROXY_CONSTMETHOD0(int, comma_delay) END_PROXY_MAP(DtmfSender) bool GetDtmfCode(char tone, int* code)"
  }
]