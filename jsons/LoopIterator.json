[
  {
    "label": "LoopBlocksTraversal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopBlocksTraversal"
  },
  {
    "label": "LoopBlocksDFS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopBlocksDFS"
  },
  {
    "label": "po_iterator_storage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "po_iterator_storage"
  },
  {
    "label": "LoopBlocksDFS()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_LOOPITERATOR_H # define LLVM_ANALYSIS_LOOPITERATOR_H # include \" llvm / ADT / PostOrderIterator . h \" # include \" llvm / Analysis / LoopInfo . h \" namespace llvm { class LoopBlocksTraversal ; class LoopBlocksDFS { public : typedef std::vector<BasicBlock*>::const_iterator POIterator ; typedef std::vector<BasicBlock*>::const_reverse_iterator RPOIterator ; class LoopBlocksTraversal ; private : Loop* L ; DenseMap<BasicBlock*,unsigned> PostNumbers ; std::vector<BasicBlock*> PostBlocks ; public :)",
    "insertText": "LoopBlocksDFS(Loop *Container) : L(Container), PostNumbers(NextPowerOf2(Container->getNumBlocks()))"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (PostBlocks .)",
    "insertText": "reserve(Container->getNumBlocks())"
  },
  {
    "label": "getLoop()",
    "kind": "Method",
    "detail": "Function (} Loop*)",
    "insertText": "getLoop()"
  },
  {
    "label": "isComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isComplete()"
  },
  {
    "label": "beginPostorder()",
    "kind": "Method",
    "detail": "Function (} POIterator)",
    "insertText": "beginPostorder()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isComplete() && \"bad loop DFS\")"
  },
  {
    "label": "endPostorder()",
    "kind": "Method",
    "detail": "Function (} POIterator)",
    "insertText": "endPostorder()"
  },
  {
    "label": "beginRPO()",
    "kind": "Method",
    "detail": "Function (} RPOIterator)",
    "insertText": "beginRPO()"
  },
  {
    "label": "endRPO()",
    "kind": "Method",
    "detail": "Function (} RPOIterator)",
    "insertText": "endRPO()"
  },
  {
    "label": "hasPreorder()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasPreorder(BasicBlock *BB)"
  },
  {
    "label": "hasPostorder()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasPostorder(BasicBlock *BB)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (DenseMap<BasicBlock*,unsigned>::const_iterator I = PostNumbers .)",
    "insertText": "find(BB)"
  },
  {
    "label": "getPostorder()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getPostorder(BasicBlock *BB)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I != PostNumbers.end() && \"block not visited by DFS\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I->second && \"block not finished by DFS\")"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "po_iterator_storage()",
    "kind": "Method",
    "detail": "Function (} } ; template<> class po_iterator_storage<LoopBlocksTraversal,true> { LoopBlocksTraversal& LBT ; public :)",
    "insertText": "po_iterator_storage(LoopBlocksTraversal &lbs) : LBT(lbs)"
  },
  {
    "label": "insertEdge()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "insertEdge(BasicBlock *From, BasicBlock *To)"
  },
  {
    "label": "finishPostorder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "finishPostorder(BasicBlock *BB)"
  },
  {
    "label": "LoopBlocksTraversal()",
    "kind": "Method",
    "detail": "Function (} ; class LoopBlocksTraversal { public : typedef po_iterator<BasicBlock*,LoopBlocksTraversal,true> POTIterator ; private : LoopBlocksDFS& DFS ; LoopInfo* LI ; public :)",
    "insertText": "LoopBlocksTraversal(LoopBlocksDFS &Storage, LoopInfo *LInfo) : DFS(Storage), LI(LInfo)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} POTIterator)",
    "insertText": "begin()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(DFS.PostBlocks.empty() && \"Need clear DFS result before traversing\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(DFS.L->getNumBlocks() && \"po_iterator cannot handle an empty graph\")"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} POTIterator)",
    "insertText": "end()"
  },
  {
    "label": "visitPreorder()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "visitPreorder(BasicBlock *BB)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(DFS.PostNumbers.count(BB) && \"Loop DFS skipped preorder\")"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (DFS . PostBlocks .)",
    "insertText": "push_back(BB)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (DFS . PostNumbers [ BB ] = DFS . PostBlocks .)",
    "insertText": "size()"
  },
  {
    "label": "finishPostorder()",
    "kind": "Method",
    "detail": "Function (LBT .)",
    "insertText": "finishPostorder(BB)"
  }
]