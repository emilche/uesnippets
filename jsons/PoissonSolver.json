[
  {
    "label": "DirichletBoundaryOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DirichletBoundaryOp"
  },
  {
    "label": "LeafCountOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeafCountOp"
  },
  {
    "label": "LeafIndexOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeafIndexOp"
  },
  {
    "label": "CopyToVecOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyToVecOp"
  },
  {
    "label": "CopyFromVecOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyFromVecOp"
  },
  {
    "label": "ISStaggeredLaplacianOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISStaggeredLaplacianOp"
  },
  {
    "label": "ISLaplacianOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISLaplacianOp"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_POISSONSOLVER_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_POISSONSOLVER_HAS_BEEN_INCLUDED # include<openvdb / Types . h> # include<openvdb / math / ConjGradient . h> # include<openvdb / tree / LeafManager . h> # include<openvdb / tree / Tree . h> # include<openvdb / util / NullInterrupter . h> # include \" Morphology . h \" namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { namespace poisson { using VIndex = Int32 ; using LaplacianMatrix = math::pcg::SparseStencilMatrix<double,7> ; template<TreeType> TreeType::Ptr)",
    "insertText": "solve(const TreeType&, math::pcg::State&, bool staggered = false)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (template<TreeType,Interrupter> TreeType::Ptr)",
    "insertText": "solve(const TreeType&, math::pcg::State&, Interrupter&, bool staggered = false)"
  },
  {
    "label": "solveWithBoundaryConditions()",
    "kind": "Method",
    "detail": "Function (template<TreeType,BoundaryOp,Interrupter> TreeType::Ptr)",
    "insertText": "solveWithBoundaryConditions(const TreeType&, const BoundaryOp&, math::pcg::State&, Interrupter&, bool staggered = false)"
  },
  {
    "label": "solveWithBoundaryConditionsAndPreconditioner()",
    "kind": "Method",
    "detail": "Function (template<PreconditionerType,TreeType,BoundaryOp,Interrupter> TreeType::Ptr)",
    "insertText": "solveWithBoundaryConditionsAndPreconditioner(const TreeType&, const BoundaryOp&, math::pcg::State&, Interrupter&, bool staggered = false)"
  },
  {
    "label": "solveWithBoundaryConditionsAndPreconditioner()",
    "kind": "Method",
    "detail": "Function (template<PreconditionerType,TreeType,DomainTreeType,BoundaryOp,Interrupter> TreeType::Ptr)",
    "insertText": "solveWithBoundaryConditionsAndPreconditioner(const TreeType&, const DomainTreeType&, const BoundaryOp&, math::pcg::State&, Interrupter&, bool staggered = false)"
  },
  {
    "label": "populateIndexTree()",
    "kind": "Method",
    "detail": "Function (template<VIndexTreeType> void)",
    "insertText": "populateIndexTree(VIndexTreeType&)"
  },
  {
    "label": "createIndexTree()",
    "kind": "Method",
    "detail": "Function (template<TreeType> TreeType::template ValueConverter<VIndex>::Type::Ptr)",
    "insertText": "createIndexTree(const TreeType&)"
  },
  {
    "label": "createVectorFromTree()",
    "kind": "Method",
    "detail": "Function (template<VectorValueType,SourceTreeType> math::pcg::Vector<VectorValueType>::Ptr)",
    "insertText": "createVectorFromTree(const SourceTreeType& source, const typename SourceTreeType::template ValueConverter<VIndex>::Type& index)"
  },
  {
    "label": "createTreeFromVector()",
    "kind": "Method",
    "detail": "Function (template<TreeValueType,VIndexTreeType,VectorValueType> VIndexTreeType::template ValueConverter<TreeValueType>::Type::Ptr)",
    "insertText": "createTreeFromVector(const math::pcg::Vector<VectorValueType>& values, const VIndexTreeType& index, const TreeValueType& background)"
  },
  {
    "label": "createISLaplacian()",
    "kind": "Method",
    "detail": "Function (template<BoolTreeType> LaplacianMatrix::Ptr)",
    "insertText": "createISLaplacian(const typename BoolTreeType::template ValueConverter<VIndex>::Type& vectorIndexTree, const BoolTreeType& interiorMask, bool staggered = false)"
  },
  {
    "label": "createISLaplacianWithBoundaryConditions()",
    "kind": "Method",
    "detail": "Function (template<BoolTreeType,BoundaryOp> LaplacianMatrix::Ptr)",
    "insertText": "createISLaplacianWithBoundaryConditions(const typename BoolTreeType::template ValueConverter<VIndex>::Type& vectorIndexTree, const BoolTreeType& interiorMask, const BoundaryOp& boundaryOp, typename math::pcg::Vector<LaplacianMatrix::ValueType>& source, bool staggered = false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<ValueType> struct DirichletBoundaryOp { void)",
    "insertText": "operator()(const Coord&, const Coord&, ValueType&, ValueType& diag)"
  },
  {
    "label": "LeafCountOp()",
    "kind": "Method",
    "detail": "Function (diag - = 1 ; } } ; namespace internal { template<LeafType> struct LeafCountOp { VIndex* count ;)",
    "insertText": "LeafCountOp(VIndex* count_): count(count_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const LeafType& leaf, size_t leafIdx)"
  },
  {
    "label": "VIndex()",
    "kind": "Method",
    "detail": "Function (count [ leafIdx ] = static_cast<)",
    "insertText": "VIndex(leaf.onVoxelCount())"
  },
  {
    "label": "LeafIndexOp()",
    "kind": "Method",
    "detail": "Function (} } ; template<LeafType> struct LeafIndexOp { const VIndex* count ;)",
    "insertText": "LeafIndexOp(const VIndex* count_): count(count_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(LeafType& leaf, size_t leafIdx)"
  },
  {
    "label": "idx()",
    "kind": "Method",
    "detail": "Function (VIndex)",
    "insertText": "idx(leafIdx == 0)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (it .)",
    "insertText": "setValue(idx++)"
  },
  {
    "label": "populateIndexTree()",
    "kind": "Method",
    "detail": "Function (} } } ; } template<VIndexTreeType> void)",
    "insertText": "populateIndexTree(VIndexTreeType& result)"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (using LeafT = VIndexTreeType::LeafNodeType ; using LeafMgrT = tree::LeafManager<VIndexTreeType> ; LeafMgrT)",
    "insertText": "leafManager(result)"
  },
  {
    "label": "leafCount()",
    "kind": "Method",
    "detail": "Function (const size_t leafCount = leafManager .)",
    "insertText": "leafCount()"
  },
  {
    "label": "perLeafCount()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<VIndex [ ]>)",
    "insertText": "perLeafCount(new VIndex[leafCount])"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (VIndex* perLeafCountPtr = perLeafCount .)",
    "insertText": "get()"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (leafManager .)",
    "insertText": "foreach(internal::LeafCountOp<LeafT>(perLeafCountPtr))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (perLeafCount [ i ] + = perLeafCount [ i - 1 ] ; })",
    "insertText": "assert(Index64(perLeafCount[leafCount-1]) == result.activeVoxelCount())"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (leafManager .)",
    "insertText": "foreach(internal::LeafIndexOp<LeafT>(perLeafCountPtr))"
  },
  {
    "label": "createIndexTree()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> TreeType::template ValueConverter<VIndex>::Type::Ptr)",
    "insertText": "createIndexTree(const TreeType& tree)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (using VIdxTreeT = TreeType::template ValueConverter<VIndex>::Type ; const VIndex invalidIdx = - 1 ; VIdxTreeT::Ptr)",
    "insertText": "result(new VIdxTreeT(tree, invalidIdx, TopologyCopy()))"
  },
  {
    "label": "voxelizeActiveTiles()",
    "kind": "Method",
    "detail": "Function (result ->)",
    "insertText": "voxelizeActiveTiles()"
  },
  {
    "label": "populateIndexTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateIndexTree(*result)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const VIdxLeafT& idxLeaf, size_t)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (VectorT& vec =* vector ;)",
    "insertText": "if(const LeafT* leaf = tree->probeLeaf(idxLeaf.origin()))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (vec [* it ] = leaf ->)",
    "insertText": "getValue(it.pos())"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} } else { const TreeValueT& value = tree ->)",
    "insertText": "getValue(idxLeaf.origin())"
  },
  {
    "label": "createVectorFromTree()",
    "kind": "Method",
    "detail": "Function (vec [* it ] = value ; } } } } ; } template<VectorValueType,SourceTreeType> math::pcg::Vector<VectorValueType>::Ptr)",
    "insertText": "createVectorFromTree(const SourceTreeType& tree, const typename SourceTreeType::template ValueConverter<VIndex>::Type& idxTree)"
  },
  {
    "label": "activeVoxelCount()",
    "kind": "Method",
    "detail": "Function (using VIdxTreeT = SourceTreeType::template ValueConverter<VIndex>::Type ; using VIdxLeafMgrT = tree::LeafManager<const VIdxTreeT> ; using VectorT = math::pcg::Vector<VectorValueType> ; const size_t numVoxels = idxTree .)",
    "insertText": "activeVoxelCount()"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (VectorT::Ptr)",
    "insertText": "result(new VectorT(static_cast<math::pcg::SizeType>(numVoxels)))"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (VIdxLeafMgrT)",
    "insertText": "leafManager(idxTree)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (leafManager .)",
    "insertText": "foreach(internal::CopyToVecOp<VectorValueType, SourceTreeType>(tree, *result))"
  },
  {
    "label": "probeLeaf()",
    "kind": "Method",
    "detail": "Function (const VectorT& vec =* vector ; OutLeafT* leaf = tree ->)",
    "insertText": "probeLeaf(idxLeaf.origin())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(leaf != nullptr)"
  },
  {
    "label": "setValueOnly()",
    "kind": "Method",
    "detail": "Function (leaf ->)",
    "insertText": "setValueOnly(it.pos(), static_cast<TreeValueType>(vec[*it]))"
  },
  {
    "label": "createTreeFromVector()",
    "kind": "Method",
    "detail": "Function (} } } ; } template<TreeValueType,VIndexTreeType,VectorValueType> VIndexTreeType::template ValueConverter<TreeValueType>::Type::Ptr)",
    "insertText": "createTreeFromVector(const math::pcg::Vector<VectorValueType>& vector, const VIndexTreeType& idxTree, const TreeValueType& background)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (using OutTreeT = VIndexTreeType::template ValueConverter<TreeValueType>::Type ; using VIdxLeafMgrT = tree::LeafManager<const VIndexTreeType> ; OutTreeT::Ptr)",
    "insertText": "result(new OutTreeT(idxTree, background, TopologyCopy()))"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (leafManager .)",
    "insertText": "foreach(internal::CopyFromVecOp<TreeValueType, VIndexTreeType, VectorValueType>(vector, tree))"
  },
  {
    "label": "interior()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<const BoolTreeType>)",
    "insertText": "interior(*interiorMask)"
  },
  {
    "label": "vectorIdx()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<const VIdxTreeT>)",
    "insertText": "vectorIdx(*idxTree)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Coord ijk ; VIndex column ; const ValueT diagonal = - 6 . f,offDiagonal = 1 . f ;)",
    "insertText": "for(typename VIdxLeafT::ValueOnCIter it = idxLeaf.cbeginValueOn(); it; ++it)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(it.getValue() > -1)"
  },
  {
    "label": "SizeType()",
    "kind": "Method",
    "detail": "Function (const math::pcg::SizeType rowNum = static_cast<math::)",
    "insertText": "SizeType(it.getValue())"
  },
  {
    "label": "getRowEditor()",
    "kind": "Method",
    "detail": "Function (LaplacianMatrix::RowEditor row = laplacian ->)",
    "insertText": "getRowEditor(rowNum)"
  },
  {
    "label": "getCoord()",
    "kind": "Method",
    "detail": "Function (ijk = it .)",
    "insertText": "getCoord()"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (row .)",
    "insertText": "setValue(vectorIdx.getValue(ijk.offsetBy(-1, 0, 0)), offDiagonal)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (row .)",
    "insertText": "setValue(vectorIdx.getValue(ijk.offsetBy(0, -1, 0)), offDiagonal)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (row .)",
    "insertText": "setValue(vectorIdx.getValue(ijk.offsetBy(0, 0, -1)), offDiagonal)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (row .)",
    "insertText": "setValue(rowNum, diagonal)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (row .)",
    "insertText": "setValue(vectorIdx.getValue(ijk.offsetBy(0, 0, 1)), offDiagonal)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (row .)",
    "insertText": "setValue(vectorIdx.getValue(ijk.offsetBy(0, 1, 0)), offDiagonal)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (row .)",
    "insertText": "setValue(vectorIdx.getValue(ijk.offsetBy(1, 0, 0)), offDiagonal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { ValueT modifiedDiagonal = 0 . f ;)",
    "insertText": "if(vectorIdx.probeValue(ijk.offsetBy(-1, 0, 0), column))"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (row .)",
    "insertText": "setValue(column, offDiagonal)"
  },
  {
    "label": "boundaryOp()",
    "kind": "Method",
    "detail": "Function (modifiedDiagonal - = 1 ; } else {)",
    "insertText": "boundaryOp(ijk, ijk.offsetBy(-1, 0, 0), source->at(rowNum), modifiedDiagonal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(vectorIdx.probeValue(ijk.offsetBy(0, -1, 0), column))"
  },
  {
    "label": "boundaryOp()",
    "kind": "Method",
    "detail": "Function (modifiedDiagonal - = 1 ; } else {)",
    "insertText": "boundaryOp(ijk, ijk.offsetBy(0, -1, 0), source->at(rowNum), modifiedDiagonal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(vectorIdx.probeValue(ijk.offsetBy(0, 0, -1), column))"
  },
  {
    "label": "boundaryOp()",
    "kind": "Method",
    "detail": "Function (modifiedDiagonal - = 1 ; } else {)",
    "insertText": "boundaryOp(ijk, ijk.offsetBy(0, 0, -1), source->at(rowNum), modifiedDiagonal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(vectorIdx.probeValue(ijk.offsetBy(0, 0, 1), column))"
  },
  {
    "label": "boundaryOp()",
    "kind": "Method",
    "detail": "Function (modifiedDiagonal - = 1 ; } else {)",
    "insertText": "boundaryOp(ijk, ijk.offsetBy(0, 0, 1), source->at(rowNum), modifiedDiagonal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(vectorIdx.probeValue(ijk.offsetBy(0, 1, 0), column))"
  },
  {
    "label": "boundaryOp()",
    "kind": "Method",
    "detail": "Function (modifiedDiagonal - = 1 ; } else {)",
    "insertText": "boundaryOp(ijk, ijk.offsetBy(0, 1, 0), source->at(rowNum), modifiedDiagonal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(vectorIdx.probeValue(ijk.offsetBy(1, 0, 0), column))"
  },
  {
    "label": "boundaryOp()",
    "kind": "Method",
    "detail": "Function (modifiedDiagonal - = 1 ; } else {)",
    "insertText": "boundaryOp(ijk, ijk.offsetBy(1, 0, 0), source->at(rowNum), modifiedDiagonal)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (} row .)",
    "insertText": "setValue(rowNum, modifiedDiagonal)"
  },
  {
    "label": "ISLaplacianOp()",
    "kind": "Method",
    "detail": "Function (} } } } ; # define OPENVDB_TOOLS_POISSON_LAPLACIAN_STENCIL 2 template<VIdxTreeT,BoundaryOp> struct ISLaplacianOp { using VIdxLeafT = VIdxTreeT::LeafNodeType ; using ValueT = LaplacianMatrix::ValueType ; using VectorT = math::pcg::Vector<ValueT> ; LaplacianMatrix* laplacian ; const VIdxTreeT* idxTree ; const BoundaryOp boundaryOp ; VectorT* source ;)",
    "insertText": "ISLaplacianOp(LaplacianMatrix& m, const VIdxTreeT& idx, const BoundaryOp& op, VectorT& src): laplacian(&m), idxTree(&idx), boundaryOp(op), source(&src)"
  },
  {
    "label": "Coord()",
    "kind": "Method",
    "detail": "Function (const int kNumOffsets = 6 ; const Coord ijkOffset [ kNumOffsets ] = { # if OPENVDB_TOOLS_POISSON_LAPLACIAN_STENCIL = = 1)",
    "insertText": "Coord(-1,0,0), Coord(1,0,0), Coord(0,-1,0), Coord(0,1,0), Coord(0,0,-1), Coord(0,0,1) #else Coord(-2,0,0), Coord(2,0,0), Coord(0,-2,0), Coord(0,2,0), Coord(0,0,-2), Coord(0,0,2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ValueT modifiedDiagonal = 0 . f ;)",
    "insertText": "for(int dir = 0; dir < kNumOffsets; ++dir)"
  },
  {
    "label": "ijkIsInterior()",
    "kind": "Method",
    "detail": "Function (const Coord neighbor = ijk + ijkOffset [ dir ] ; VIndex column ; # if OPENVDB_TOOLS_POISSON_LAPLACIAN_STENCIL = = 1 const bool)",
    "insertText": "ijkIsInterior(vectorIdx.probeValue(neighbor + ijkOffset[dir], column) && vectorIdx.isValueOn(neighbor))"
  },
  {
    "label": "probeValue()",
    "kind": "Method",
    "detail": "Function (# else const bool ijkIsInterior = vectorIdx .)",
    "insertText": "probeValue(neighbor, column)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(ijkIsInterior)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (row .)",
    "insertText": "setValue(column, 1.f)"
  },
  {
    "label": "boundaryOp()",
    "kind": "Method",
    "detail": "Function (modifiedDiagonal - = 1 . f ; } else {)",
    "insertText": "boundaryOp(ijk, neighbor, source->at(rowNum), modifiedDiagonal)"
  },
  {
    "label": "createISLaplacian()",
    "kind": "Method",
    "detail": "Function (} } } ; } template<BoolTreeType> LaplacianMatrix::Ptr)",
    "insertText": "createISLaplacian(const typename BoolTreeType::template ValueConverter<VIndex>::Type& idxTree, const BoolTreeType& interiorMask, bool staggered)"
  },
  {
    "label": "unused()",
    "kind": "Method",
    "detail": "Function (using ValueT = LaplacianMatrix::ValueType ; math::pcg::Vector<ValueT>)",
    "insertText": "unused(static_cast<math::pcg::SizeType>(idxTree.activeVoxelCount()))"
  },
  {
    "label": "createISLaplacianWithBoundaryConditions()",
    "kind": "Method",
    "detail": "Function (DirichletBoundaryOp<ValueT> op ; return)",
    "insertText": "createISLaplacianWithBoundaryConditions(idxTree, interiorMask, op, unused, staggered)"
  },
  {
    "label": "createISLaplacianWithBoundaryConditions()",
    "kind": "Method",
    "detail": "Function (} template<BoolTreeType,BoundaryOp> LaplacianMatrix::Ptr)",
    "insertText": "createISLaplacianWithBoundaryConditions(const typename BoolTreeType::template ValueConverter<VIndex>::Type& idxTree, const BoolTreeType& interiorMask, const BoundaryOp& boundaryOp, typename math::pcg::Vector<LaplacianMatrix::ValueType>& source, bool staggered)"
  },
  {
    "label": "laplacianPtr()",
    "kind": "Method",
    "detail": "Function (LaplacianMatrix::Ptr)",
    "insertText": "laplacianPtr(new LaplacianMatrix(static_cast<math::pcg::SizeType>(numDoF)))"
  },
  {
    "label": "idxLeafManager()",
    "kind": "Method",
    "detail": "Function (LaplacianMatrix& laplacian =* laplacianPtr ; VIdxLeafMgrT)",
    "insertText": "idxLeafManager(idxTree)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (idxLeafManager .)",
    "insertText": "foreach(internal::ISStaggeredLaplacianOp<BoolTreeType, BoundaryOp>( laplacian, idxTree, interiorMask, boundaryOp, source))"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (} else { idxLeafManager .)",
    "insertText": "foreach(internal::ISLaplacianOp<VIdxTreeT, BoundaryOp>( laplacian, idxTree, boundaryOp, source))"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} return laplacianPtr ; } template<TreeType> TreeType::Ptr)",
    "insertText": "solve(const TreeType& inTree, math::pcg::State& state, bool staggered)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (util::NullInterrupter interrupter ; return)",
    "insertText": "solve(inTree, state, interrupter, staggered)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} template<TreeType,Interrupter> TreeType::Ptr)",
    "insertText": "solve(const TreeType& inTree, math::pcg::State& state, Interrupter& interrupter, bool staggered)"
  },
  {
    "label": "solveWithBoundaryConditions()",
    "kind": "Method",
    "detail": "Function (DirichletBoundaryOp<LaplacianMatrix::ValueType> boundaryOp ; return)",
    "insertText": "solveWithBoundaryConditions(inTree, boundaryOp, state, interrupter, staggered)"
  },
  {
    "label": "solveWithBoundaryConditions()",
    "kind": "Method",
    "detail": "Function (} template<TreeType,BoundaryOp,Interrupter> TreeType::Ptr)",
    "insertText": "solveWithBoundaryConditions(const TreeType& inTree, const BoundaryOp& boundaryOp, math::pcg::State& state, Interrupter& interrupter, bool staggered)"
  },
  {
    "label": "DefaultPrecondT()",
    "kind": "Method",
    "detail": "Function (using DefaultPrecondT = math::pcg::IncompleteCholeskyPreconditioner<LaplacianMatrix> ; return solveWithBoundaryConditionsAndPreconditioner<)",
    "insertText": "DefaultPrecondT(inTree, boundaryOp, state, interrupter, staggered)"
  },
  {
    "label": "solveWithBoundaryConditionsAndPreconditioner()",
    "kind": "Method",
    "detail": "Function (} template<PreconditionerType,TreeType,BoundaryOp,Interrupter> TreeType::Ptr)",
    "insertText": "solveWithBoundaryConditionsAndPreconditioner(const TreeType& inTree, const BoundaryOp& boundaryOp, math::pcg::State& state, Interrupter& interrupter, bool staggered)"
  },
  {
    "label": "solveWithBoundaryConditionsAndPreconditioner()",
    "kind": "Method",
    "detail": "Function (} template<PreconditionerType,TreeType,DomainTreeType,BoundaryOp,Interrupter> TreeType::Ptr)",
    "insertText": "solveWithBoundaryConditionsAndPreconditioner(const TreeType& inTree, const DomainTreeType& domainMask, const BoundaryOp& boundaryOp, math::pcg::State& state, Interrupter& interrupter, bool staggered)"
  },
  {
    "label": "createIndexTree()",
    "kind": "Method",
    "detail": "Function (using TreeValueT = TreeType::ValueType ; using VecValueT = LaplacianMatrix::ValueType ; using VectorT = math::pcg::Vector<VecValueT> ; using VIdxTreeT = TreeType::template ValueConverter<VIndex>::Type ; using MaskTreeT = TreeType::template ValueConverter<bool>::Type ; VIdxTreeT::ConstPtr idxTree =)",
    "insertText": "createIndexTree(domainMask)"
  },
  {
    "label": "VecValueT()",
    "kind": "Method",
    "detail": "Function (VectorT::Ptr b = createVectorFromTree<)",
    "insertText": "VecValueT(inTree, *idxTree)"
  },
  {
    "label": "interiorMask()",
    "kind": "Method",
    "detail": "Function (MaskTreeT::Ptr)",
    "insertText": "interiorMask(new MaskTreeT(*idxTree, false, TopologyCopy()))"
  },
  {
    "label": "erodeActiveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erodeActiveValues(*interiorMask, 1, tools::NN_FACE, tools::IGNORE_TILES)"
  },
  {
    "label": "createISLaplacianWithBoundaryConditions()",
    "kind": "Method",
    "detail": "Function (LaplacianMatrix::Ptr laplacian =)",
    "insertText": "createISLaplacianWithBoundaryConditions(*idxTree, *interiorMask, boundaryOp, *b, staggered)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (laplacian ->)",
    "insertText": "scale(-1.0)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (VectorT::Ptr)",
    "insertText": "x(new VectorT(b->size(), zeroVal<VecValueT>()))"
  },
  {
    "label": "precond()",
    "kind": "Method",
    "detail": "Function (math::pcg::Preconditioner<VecValueT>::Ptr)",
    "insertText": "precond(new PreconditionerType(*laplacian))"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (precond .)",
    "insertText": "reset(new math::pcg::JacobiPreconditioner<LaplacianMatrix>(*laplacian))"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} state = math::)",
    "insertText": "solve(*laplacian, *b, *x, *precond, interrupter, state)"
  }
]