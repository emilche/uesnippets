[
  {
    "label": "FPhaser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhaser"
  },
  {
    "label": "FPhaser()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Delay . h \" # include \" DSP / LFO . h \" # include \" DSP / Filter . h \" namespace Audio { class FPhaser { public :)",
    "insertText": "FPhaser()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const float SampleRate, const int32 InNumChannels)"
  },
  {
    "label": "SetFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrequency(const float InFreqHz)"
  },
  {
    "label": "SetWetLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWetLevel(const float InWetLevel)"
  },
  {
    "label": "SetFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFeedback(const float InFeedback)"
  },
  {
    "label": "SetLFOType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLFOType(const ELFO::Type LFOType)"
  },
  {
    "label": "SetQuadPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQuadPhase(const bool bQuadPhase)"
  },
  {
    "label": "ProcessAudioFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioFrame(const float* InFrame, float* OutFrame)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(const float* InBuffer, const int32 InNumSamples, float* OutBuffer)"
  },
  {
    "label": "ComputeNewCoefficients()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ComputeNewCoefficients(const int32 ChannelIndex, const float LFOValue)"
  }
]