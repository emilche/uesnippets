[
  {
    "label": "FSkinningTransformProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkinningTransformProvider"
  },
  {
    "label": "FProviderRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProviderRange"
  },
  {
    "label": "FProviderContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProviderContext"
  },
  {
    "label": "FTransformProvider",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformProvider"
  },
  {
    "label": "DECLARE_SCENE_EXTENSION()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SpanAllocator . h \" # include \" Containers / Map . h \" # include \" SceneExtensions . h \" # include \" RendererPrivateUtils . h \" # include \" Matrix3x4 . h \" # include \" Delegates / DelegateCombinations . h \" # include \" Delegates / Delegate . h \" # include \" GameTime . h \" class FSkinningTransformProvider : public ISceneExtension {)",
    "insertText": "DECLARE_SCENE_EXTENSION(RENDERER_API, FSkinningTransformProvider)"
  },
  {
    "label": "FProviderContext()",
    "kind": "Method",
    "detail": "Function (public : typedef FGuid FProviderId ; struct FProviderRange { FProviderId Id ; uint32 Count ; uint32 Offset ; } ; struct FProviderContext {)",
    "insertText": "FProviderContext(const TConstArrayView<FPrimitiveSceneInfo*> InPrimitives, const TConstArrayView<FUintVector2> InIndirections, float InDeltaTime, FRDGBuilder& InGraphBuilder, FRDGBufferRef InTransformBuffer ) : Primitives(InPrimitives) , Indirections(InIndirections) , GraphBuilder(InGraphBuilder) , TransformBuffer(InTransformBuffer) , DeltaTime(InDeltaTime)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FPrimitiveSceneInfo*> Primitives ; TConstArrayView<FUintVector2> Indirections ; FRDGBuilder& GraphBuilder ; FRDGBufferRef TransformBuffer ; float DeltaTime = 0 . 0 f ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnProvideTransforms, FProviderContext&)"
  },
  {
    "label": "ShouldCreateExtension()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShouldCreateExtension(FScene& InScene)"
  },
  {
    "label": "InitExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitExtension(FScene& InScene)"
  },
  {
    "label": "RegisterProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterProvider(const FProviderId& Id, const FOnProvideTransforms& Delegate)"
  },
  {
    "label": "UnregisterProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterProvider(const FProviderId& Id)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Broadcast(const TConstArrayView<FProviderRange> Ranges, FProviderContext& Context)"
  },
  {
    "label": "HasProviders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasProviders()"
  },
  {
    "label": "GetProviderIds()",
    "kind": "Method",
    "detail": "Function (} TArray<FProviderId>)",
    "insertText": "GetProviderIds()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<FProviderId> Ids ; Ids .)",
    "insertText": "Reserve(Providers.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Ids .)",
    "insertText": "Add(Provider.Id)"
  },
  {
    "label": "GetRefPoseProviderId()",
    "kind": "Method",
    "detail": "Function (} return Ids ; } private : struct FTransformProvider { FProviderId Id ; FOnProvideTransforms Delegate ; } ; TArray<FTransformProvider> Providers ; const FScene* Scene = nullptr ; } ; const FSkinningTransformProvider::FProviderId&)",
    "insertText": "GetRefPoseProviderId()"
  },
  {
    "label": "GetAnimRuntimeProviderId()",
    "kind": "Method",
    "detail": "Function (const FSkinningTransformProvider::FProviderId&)",
    "insertText": "GetAnimRuntimeProviderId()"
  }
]