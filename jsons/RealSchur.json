[
  {
    "label": "RealSchur",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RealSchur"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "computes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "computes"
  },
  {
    "label": "ComplexSchur",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ComplexSchur"
  },
  {
    "label": "EigenSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EigenSolver"
  },
  {
    "label": "ComplexEigenSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ComplexEigenSolver"
  },
  {
    "label": "RealSchur",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RealSchur"
  },
  {
    "label": "HessenbergDecomposition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HessenbergDecomposition"
  },
  {
    "label": "HessenbergDecomposition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HessenbergDecomposition"
  },
  {
    "label": "computeNormOfT()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "computeNormOfT()"
  },
  {
    "label": "findSmallSubdiagEntry()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "findSmallSubdiagEntry(Index iu, const Scalar& considerAsZero)"
  },
  {
    "label": "splitOffTwoRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "splitOffTwoRows(Index iu, bool computeU, const Scalar& exshift)"
  },
  {
    "label": "computeShift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeShift(Index iu, Index iter, Scalar& exshift, Vector3s& shiftInfo)"
  },
  {
    "label": "initFrancisQRStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFrancisQRStep(Index il, Index iu, const Vector3s& shiftInfo, Index& im, Vector3s& firstHouseholderVector)"
  },
  {
    "label": "performFrancisQRStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "performFrancisQRStep(Index il, Index im, Index iu, bool computeU, const Vector3s& firstHouseholderVector, Scalar* workspace)"
  },
  {
    "label": "exshift()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "exshift(0)"
  },
  {
    "label": "norm()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "norm(0)"
  }
]