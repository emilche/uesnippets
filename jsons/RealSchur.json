[
  {
    "label": "RealSchur",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RealSchur"
  },
  {
    "label": "RealSchur()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_REAL_SCHUR_H # define EIGEN_REAL_SCHUR_H # include \" . / HessenbergDecomposition . h \" namespace Eigen { template<_MatrixType> class RealSchur { public : typedef _MatrixType MatrixType ; enum { RowsAtCompileTime = MatrixType::RowsAtCompileTime,ColsAtCompileTime = MatrixType::ColsAtCompileTime,Options = MatrixType::Options,MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ; typedef MatrixType::Scalar Scalar ; typedef std::complex<NumTraits<Scalar>::Real> ComplexScalar ; typedef Eigen::Index Index ; typedef Matrix<ComplexScalar,ColsAtCompileTime,1,Options& ~ RowMajor,MaxColsAtCompileTime,1> EigenvalueType ; typedef Matrix<Scalar,ColsAtCompileTime,1,Options& ~ RowMajor,MaxColsAtCompileTime,1> ColumnVectorType ;)",
    "insertText": "RealSchur(Index size = RowsAtCompileTime==Dynamic ? 1 : RowsAtCompileTime) : m_matT(size, size), m_matU(size, size), m_workspaceVector(size), m_hess(size), m_isInitialized(false), m_matUisUptodate(false), m_maxIters(-1)"
  },
  {
    "label": "RealSchur()",
    "kind": "Method",
    "detail": "Function (} template<InputType>)",
    "insertText": "RealSchur(const EigenBase<InputType>& matrix, bool computeU = true) : m_matT(matrix.rows(),matrix.cols()), m_matU(matrix.rows(),matrix.cols()), m_workspaceVector(matrix.rows()), m_hess(matrix.rows()), m_isInitialized(false), m_matUisUptodate(false), m_maxIters(-1)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix.derived(), computeU)"
  },
  {
    "label": "matrixU()",
    "kind": "Method",
    "detail": "Function (} const MatrixType&)",
    "insertText": "matrixU()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"RealSchur is not initialized.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_matUisUptodate && \"The matrix U has not been computed during the RealSchur decomposition.\")"
  },
  {
    "label": "computeFromHessenberg()",
    "kind": "Method",
    "detail": "Function (template<HessMatrixType,OrthMatrixType> RealSchur&)",
    "insertText": "computeFromHessenberg(const HessMatrixType& matrixH, const OrthMatrixType& matrixQ, bool computeU)"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (ComputationInfo)",
    "insertText": "info()"
  },
  {
    "label": "getMaxIterations()",
    "kind": "Method",
    "detail": "Function (m_maxIters = maxIters ; return* this ; } Index)",
    "insertText": "getMaxIterations()"
  },
  {
    "label": "findSmallSubdiagEntry()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "findSmallSubdiagEntry(Index iu, const Scalar& considerAsZero)"
  },
  {
    "label": "splitOffTwoRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "splitOffTwoRows(Index iu, bool computeU, const Scalar& exshift)"
  },
  {
    "label": "computeShift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeShift(Index iu, Index iter, Scalar& exshift, Vector3s& shiftInfo)"
  },
  {
    "label": "initFrancisQRStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFrancisQRStep(Index il, Index iu, const Vector3s& shiftInfo, Index& im, Vector3s& firstHouseholderVector)"
  },
  {
    "label": "performFrancisQRStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "performFrancisQRStep(Index il, Index im, Index iu, bool computeU, const Vector3s& firstHouseholderVector, Scalar* workspace)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} ; template<MatrixType> template<InputType> RealSchur<MatrixType>& RealSchur<MatrixType)",
    "insertText": "compute(const EigenBase<InputType>& matrix, bool computeU)"
  },
  {
    "label": "considerAsZero()",
    "kind": "Method",
    "detail": "Function (const Scalar)",
    "insertText": "considerAsZero(std::numeric_limits<Scalar>::min)()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(matrix.cols() == matrix.rows())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index maxIters = m_maxIters ;)",
    "insertText": "if(maxIters == -1) maxIters = m_maxIterationsPerRow * matrix.rows()"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (Scalar scale = matrix .)",
    "insertText": "derived().cwiseAbs().maxCoeff()"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "setZero(matrix.rows(),matrix.cols())"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (m_info = Success ; m_isInitialized = true ; m_matUisUptodate = computeU ; return* this ; } m_hess .)",
    "insertText": "compute(matrix.derived()/scale)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_workspaceVector .)",
    "insertText": "resize(matrix.cols())"
  },
  {
    "label": "computeFromHessenberg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeFromHessenberg(m_hess.matrixH(), m_matU, computeU)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (using std::abs ; m_matT = matrixH ; m_workspaceVector .)",
    "insertText": "resize(m_matT.cols())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index maxIters = m_maxIters ;)",
    "insertText": "if(maxIters == -1) maxIters = m_maxIterationsPerRow * matrixH.rows()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (Scalar* workspace =& m_workspaceVector .)",
    "insertText": "coeffRef(0)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (Index iu = m_matT .)",
    "insertText": "cols()"
  },
  {
    "label": "exshift()",
    "kind": "Method",
    "detail": "Function (Index iter = 0 ; Index totalIter = 0 ; Scalar)",
    "insertText": "exshift(0)"
  },
  {
    "label": "computeNormOfT()",
    "kind": "Method",
    "detail": "Function (Scalar norm =)",
    "insertText": "computeNormOfT()"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar considerAsZero = numext::maxi<)",
    "insertText": "Scalar(norm * numext::abs2(NumTraits<Scalar>::epsilon()), (std::numeric_limits<Scalar>::min)())"
  },
  {
    "label": "findSmallSubdiagEntry()",
    "kind": "Method",
    "detail": "Function (Index il =)",
    "insertText": "findSmallSubdiagEntry(iu,considerAsZero)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(iu,iu) = m_matT.coeff(iu,iu)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (iu - - ; iter = 0 ; } else)",
    "insertText": "if(il == iu-1)"
  },
  {
    "label": "splitOffTwoRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "splitOffTwoRows(iu, computeU, exshift)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (iu - = 2 ; iter = 0 ; } else { Vector3s firstHouseholderVector =)",
    "insertText": "Zero()"
  },
  {
    "label": "computeShift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeShift(iu, iter, exshift, shiftInfo)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (iter = iter + 1 ; totalIter = totalIter + 1 ;)",
    "insertText": "if(totalIter > maxIters)"
  },
  {
    "label": "initFrancisQRStep()",
    "kind": "Method",
    "detail": "Function (Index im ;)",
    "insertText": "initFrancisQRStep(il, iu, shiftInfo, im, firstHouseholderVector)"
  },
  {
    "label": "performFrancisQRStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "performFrancisQRStep(il, im, iu, computeU, firstHouseholderVector, workspace)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(totalIter <= maxIters)"
  },
  {
    "label": "norm()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "norm(0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (using std::abs ; Index res = iu ;)",
    "insertText": "while(res > 0)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (Scalar s =)",
    "insertText": "abs(m_matT.coeff(res-1,res-1)) + abs(m_matT.coeff(res,res))"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (s = numext::maxi<)",
    "insertText": "Scalar(s * NumTraits<Scalar>::epsilon(), considerAsZero)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar p =)",
    "insertText": "Scalar(0.5) * (m_matT.coeff(iu-1,iu-1) - m_matT.coeff(iu,iu))"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Scalar q = p* p + m_matT .)",
    "insertText": "coeff(iu,iu-1) * m_matT.coeff(iu-1,iu)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(iu,iu)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(iu-1,iu-1)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (Scalar z =)",
    "insertText": "sqrt(abs(q))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (JacobiRotation<Scalar> rot ;)",
    "insertText": "if(p >= Scalar(0)) rot.makeGivens(p + z, m_matT.coeff(iu, iu-1))"
  },
  {
    "label": "rightCols()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "rightCols(size-iu+1).applyOnTheLeft(iu-1, iu, rot.adjoint())"
  },
  {
    "label": "topRows()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "topRows(iu+1).applyOnTheRight(iu-1, iu, rot)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(iu, iu-1) = Scalar(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(iu > 1) m_matT.coeffRef(iu-1, iu-2) = Scalar(0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ; using std::abs ; shiftInfo .)",
    "insertText": "coeffRef(0) = m_matT.coeff(iu,iu)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (shiftInfo .)",
    "insertText": "coeffRef(1) = m_matT.coeff(iu-1,iu-1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (shiftInfo .)",
    "insertText": "coeffRef(2) = m_matT.coeff(iu,iu-1) * m_matT.coeff(iu-1,iu)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (exshift + = shiftInfo .)",
    "insertText": "coeff(0)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (Scalar s =)",
    "insertText": "abs(m_matT.coeff(iu,iu-1)) + abs(m_matT.coeff(iu-1,iu-2))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (shiftInfo .)",
    "insertText": "coeffRef(0) = Scalar(0.75)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (shiftInfo .)",
    "insertText": "coeffRef(1) = Scalar(0.75)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (shiftInfo .)",
    "insertText": "coeffRef(2) = Scalar(-0.4375)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(iter == 30)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "s(shiftInfo.coeff(1) - shiftInfo.coeff(0)) / Scalar(2.0)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (s = s* s + shiftInfo .)",
    "insertText": "coeff(2)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (s =)",
    "insertText": "sqrt(s)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (s = shiftInfo .)",
    "insertText": "coeff(0) - shiftInfo.coeff(2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (exshift + = s ;)",
    "insertText": "for(Index i = 0; i <= iu; ++i) m_matT.coeffRef(i,i)"
  },
  {
    "label": "setConstant()",
    "kind": "Method",
    "detail": "Function (shiftInfo .)",
    "insertText": "setConstant(Scalar(0.964))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (using std::abs ; Vector3s& v = firstHouseholderVector ;)",
    "insertText": "for(im = iu-2; im >= il; --im)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (const Scalar Tmm = m_matT .)",
    "insertText": "coeff(im,im)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (const Scalar s = shiftInfo .)",
    "insertText": "coeff(1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (v .)",
    "insertText": "coeffRef(0) = (r * s - shiftInfo.coeff(2)) / m_matT.coeff(im+1,im) + m_matT.coeff(im,im+1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (v .)",
    "insertText": "coeffRef(1) = m_matT.coeff(im+1,im+1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (v .)",
    "insertText": "coeffRef(2) = m_matT.coeff(im+2,im+1)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (break ; } const Scalar lhs = m_matT .)",
    "insertText": "coeff(im,im-1) * (abs(v.coeff(1)) + abs(v.coeff(2)))"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (const Scalar rhs = v .)",
    "insertText": "coeff(0) * (abs(m_matT.coeff(im-1,im-1)) + abs(Tmm) + abs(m_matT.coeff(im+1,im+1)))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(im >= il)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(im <= iu-2)"
  },
  {
    "label": "firstIteration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "firstIteration(k == im)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Vector3s v ;)",
    "insertText": "if(firstIteration)"
  },
  {
    "label": "makeHouseholder()",
    "kind": "Method",
    "detail": "Function (Scalar tau,beta ; Matrix<Scalar,2,1> ess ; v .)",
    "insertText": "makeHouseholder(ess, tau, beta)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "block(k, k, 3, size-k).applyHouseholderOnTheLeft(ess, tau, workspace)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "block(0, k, (std::min)(iu,k+3) + 1, 3).applyHouseholderOnTheRight(ess, tau, workspace)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} } Matrix<Scalar,2,1> v = m_matT . template)",
    "insertText": "block(iu-1, iu-2)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(iu-1, iu-2)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "block(iu-1, iu-1, 2, size-iu+1).applyHouseholderOnTheLeft(ess, tau, workspace)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "block(0, iu-1, iu+1, 2).applyHouseholderOnTheRight(ess, tau, workspace)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index i = im+2; i <= iu; ++i)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(i,i-2) = Scalar(0)"
  }
]