[
  {
    "label": "FNetBlob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBlob"
  },
  {
    "label": "FNetSerializationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetSerializationContext"
  },
  {
    "label": "FReplicationStateDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicationStateDescriptor"
  },
  {
    "label": "FNetReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetReferenceCollector"
  },
  {
    "label": "FNetBlobManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBlobManager"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetBlobCreationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetBlobCreationInfo"
  },
  {
    "label": "FQuantizedBlobState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedBlobState"
  },
  {
    "label": "FNetObjectAttachment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetObjectAttachment"
  },
  {
    "label": "Private",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Private"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Iris / Core / NetObjectReference . h \" # include \" Iris / ReplicationState / ReplicationStateDescriptor . h \" # include \" Containers / ArrayView . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UniquePtr . h \" # include<atomic> namespace UE::Net { class FNetBlob ; class FNetSerializationContext ; struct FReplicationStateDescriptor ; class FNetReferenceCollector ; namespace Private { class FNetBlobManager ; } } namespace UE::Net { enum class ENetBlobFlags : uint32 { None = 0,Reliable = 1 U<<0 U,RawDataNetBlob = Reliable<<1 U,HasExports = RawDataNetBlob<<1 U,Ordered = HasExports<<1 U,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ENetBlobFlags)"
  },
  {
    "label": "FNetBlobType()",
    "kind": "Method",
    "detail": "Function (typedef uint32 FNetBlobType ; FNetBlobType InvalidNetBlobType = ~)",
    "insertText": "FNetBlobType(0)"
  },
  {
    "label": "FQuantizedBlobState()",
    "kind": "Method",
    "detail": "Function (struct FNetBlobCreationInfo { FNetBlobType Type = InvalidNetBlobType ; ENetBlobFlags Flags = ENetBlobFlags::None ; } ; class FNetBlob { public : struct FQuantizedBlobState {)",
    "insertText": "FQuantizedBlobState()"
  },
  {
    "label": "FQuantizedBlobState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FQuantizedBlobState(const FQuantizedBlobState&)"
  },
  {
    "label": "FQuantizedBlobState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FQuantizedBlobState(FQuantizedBlobState&&)"
  },
  {
    "label": "FQuantizedBlobState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FQuantizedBlobState(uint32 Size, uint32 Alignment)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FQuantizedBlobState&)",
    "insertText": "operator(const FQuantizedBlobState&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FQuantizedBlobState&)",
    "insertText": "operator(FQuantizedBlobState&&)"
  },
  {
    "label": "GetStateBuffer()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetStateBuffer()"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(const TRefCountPtr<const FReplicationStateDescriptor>& BlobDescriptor, FQuantizedBlobState&& QuantizedBlobState)"
  },
  {
    "label": "GetCreationInfo()",
    "kind": "Method",
    "detail": "Function (const FNetBlobCreationInfo&)",
    "insertText": "GetCreationInfo()"
  },
  {
    "label": "GetReplicationStateDescriptor()",
    "kind": "Method",
    "detail": "Function (} const FReplicationStateDescriptor*)",
    "insertText": "GetReplicationStateDescriptor()"
  },
  {
    "label": "SerializeCreationInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeCreationInfo(FNetSerializationContext& Context, const FNetBlobCreationInfo& CreationInfo)"
  },
  {
    "label": "DeserializeCreationInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeCreationInfo(FNetSerializationContext& Context, FNetBlobCreationInfo& OutCreationInfo)"
  },
  {
    "label": "SerializeWithObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeWithObject(FNetSerializationContext& Context, FNetRefHandle RefHandle)"
  },
  {
    "label": "DeserializeWithObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeWithObject(FNetSerializationContext& Context, FNetRefHandle RefHandle)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FNetSerializationContext& Context)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deserialize(FNetSerializationContext& Context)"
  },
  {
    "label": "CollectObjectReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectObjectReferences(FNetSerializationContext& Context, FNetReferenceCollector& Collector)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (+ + RefCount ; } void)",
    "insertText": "Release()"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "CallGetNetObjectReferenceExports()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FNetObjectReference>)",
    "insertText": "CallGetNetObjectReferenceExports()"
  },
  {
    "label": "CallGetNetTokenExports()",
    "kind": "Method",
    "detail": "Function (} ; TArrayView<const FNetToken>)",
    "insertText": "CallGetNetTokenExports()"
  },
  {
    "label": "FNetBlob()",
    "kind": "Method",
    "detail": "Function (} ; protected :)",
    "insertText": "FNetBlob(const FNetBlob&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetBlob&)",
    "insertText": "operator(const FNetBlob&)"
  },
  {
    "label": "FNetBlob()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNetBlob()"
  },
  {
    "label": "GetNetObjectReferenceExports()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FNetObjectReference>)",
    "insertText": "GetNetObjectReferenceExports()"
  },
  {
    "label": "GetNetTokenExports()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FNetToken>)",
    "insertText": "GetNetTokenExports()"
  },
  {
    "label": "SerializeBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeBlob(FNetSerializationContext& Context)"
  },
  {
    "label": "DeserializeBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeBlob(FNetSerializationContext& Context)"
  },
  {
    "label": "FNetObjectAttachment()",
    "kind": "Method",
    "detail": "Function (protected : FNetBlobCreationInfo CreationInfo ; TRefCountPtr<const FReplicationStateDescriptor> BlobDescriptor ; FQuantizedBlobState QuantizedBlobState ; private : std::atomic<int32> RefCount ; } ; class FNetObjectAttachment : public FNetBlob { public :)",
    "insertText": "FNetObjectAttachment(const FNetBlobCreationInfo&)"
  },
  {
    "label": "GetNetObjectReference()",
    "kind": "Method",
    "detail": "Function (const FNetObjectReference&)",
    "insertText": "GetNetObjectReference()"
  },
  {
    "label": "SerializeObjectReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeObjectReference(FNetSerializationContext& Context)"
  },
  {
    "label": "DeserializeObjectReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeObjectReference(FNetSerializationContext& Context)"
  },
  {
    "label": "SerializeSubObjectReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeSubObjectReference(FNetSerializationContext& Context, FNetRefHandle RefHandle)"
  },
  {
    "label": "DeserializeSubObjectReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeSubObjectReference(FNetSerializationContext& Context, FNetRefHandle RefHandle)"
  },
  {
    "label": "SetNetObjectReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetObjectReference(const FNetObjectReference& InQueueOwnerReference, const FNetObjectReference& InTargetObjectReference)"
  },
  {
    "label": "FQuantizedBlobState()",
    "kind": "Method",
    "detail": "Function (protected : class Private::FNetBlobManager ; FNetObjectReference NetObjectReference ; FNetObjectReference TargetObjectReference ; } ; FNetBlob::)",
    "insertText": "FQuantizedBlobState(FNetBlob::FQuantizedBlobState&& Other)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (GMalloc ->)",
    "insertText": "Free(StateBuffer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FNetBlob::FQuantizedBlobState& FNetBlob::)",
    "insertText": "operator(FNetBlob::FQuantizedBlobState&& Other)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NetObjectReference = InQueueOwnerReference ;)",
    "insertText": "if(InQueueOwnerReference != InTargetObjectReference)"
  }
]