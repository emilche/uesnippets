[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FToBoolHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToBoolHelper"
  },
  {
    "label": "TCString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCString"
  },
  {
    "label": "TCStringSpcHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCStringSpcHelper"
  },
  {
    "label": "FromCStringAnsi()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PlatformString . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Char . h \" # include \" Misc / VarArgs . h \" # include \" Templates / IsArrayOrRefOfTypeByPredicate . h \" # include \" Templates / IsValidVariadicFunctionArg . h \" # include \" Traits / IsCharEncodingCompatibleWith . h \" # define MAX_SPRINTF 1 0 2 4 namespace ESearchCase { enum Type { CaseSensitive,IgnoreCase,} ; } ; namespace ESearchDir { enum Type { FromStart,FromEnd,} ; } struct FToBoolHelper { bool)",
    "insertText": "FromCStringAnsi(const ANSICHAR* String)"
  },
  {
    "label": "FromCStringWide()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FromCStringWide(const WIDECHAR* String)"
  },
  {
    "label": "FromCStringUtf8()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FromCStringUtf8(const UTF8CHAR* String)"
  },
  {
    "label": "IsPureAnsi()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct TCString { typedef T CharType ; bool)",
    "insertText": "IsPureAnsi(const CharType* Str)"
  },
  {
    "label": "IsPureAnsi()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsPureAnsi(const CharType* Str, const SIZE_T StrLen)"
  },
  {
    "label": "IsNumeric()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsNumeric(const CharType* Str)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Str + + ; } bool bHasDot = false ;)",
    "insertText": "while(*Str != '\\0')"
  },
  {
    "label": "Strncpy()",
    "kind": "Method",
    "detail": "Function (CharType*)",
    "insertText": "Strncpy(CharType* Dest, const CharType* Src, int32 MaxLen)"
  },
  {
    "label": "Strcpy()",
    "kind": "Method",
    "detail": "Function (template<SIZE_T DestCount> CharType*)",
    "insertText": "Strcpy(CharType (&Dest)[DestCount], const CharType* Src)"
  },
  {
    "label": "Strcat()",
    "kind": "Method",
    "detail": "Function (} CharType*)",
    "insertText": "Strcat(CharType* Dest, SIZE_T DestCount, const CharType* Src)"
  },
  {
    "label": "Strcat()",
    "kind": "Method",
    "detail": "Function (template<SIZE_T DestCount> CharType*)",
    "insertText": "Strcat(CharType (&Dest)[DestCount], const CharType* Src)"
  },
  {
    "label": "Strncat()",
    "kind": "Method",
    "detail": "Function (} CharType*)",
    "insertText": "Strncat(CharType* Dest, const CharType* Src, int32 MaxLen)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (int32 Len =)",
    "insertText": "Strlen(Dest)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CharType* NewDest = Dest + Len ;)",
    "insertText": "if((MaxLen-=Len) > 0)"
  },
  {
    "label": "Strncpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Strncpy(NewDest, Src, MaxLen)"
  },
  {
    "label": "Strupr()",
    "kind": "Method",
    "detail": "Function (} return Dest ; } CharType*)",
    "insertText": "Strupr(CharType* Dest, SIZE_T DestCount)"
  },
  {
    "label": "Strupr()",
    "kind": "Method",
    "detail": "Function (template<SIZE_T DestCount> CharType*)",
    "insertText": "Strupr(CharType (&Dest)[DestCount])"
  },
  {
    "label": "Strcmp()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strcmp(const CharType* String1, const CharType* String2)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Strncmp(const CharType* String1, const CharType* String2, SIZE_T Count)"
  },
  {
    "label": "Stricmp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Stricmp(const CharType* String1, const CharType* String2)"
  },
  {
    "label": "Strnicmp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Strnicmp(const CharType* String1, const CharType* String2, SIZE_T Count)"
  },
  {
    "label": "Spc()",
    "kind": "Method",
    "detail": "Function (const CharType*)",
    "insertText": "Spc(int32 NumSpaces)"
  },
  {
    "label": "Tab()",
    "kind": "Method",
    "detail": "Function (const CharType*)",
    "insertText": "Tab(int32 NumTabs)"
  },
  {
    "label": "Strfind()",
    "kind": "Method",
    "detail": "Function (const CharType*)",
    "insertText": "Strfind(const CharType* Str, const CharType* Find, bool bSkipQuotedChars = false)"
  },
  {
    "label": "Strifind()",
    "kind": "Method",
    "detail": "Function (const CharType*)",
    "insertText": "Strifind(const CharType* Str, const CharType* Find, bool bSkipQuotedChars = false)"
  },
  {
    "label": "StrfindDelim()",
    "kind": "Method",
    "detail": "Function (const CharType*)",
    "insertText": "StrfindDelim(const CharType* Str, const CharType* Find, const CharType* Delim=LITERAL(CharType, \" \\t,\"))"
  },
  {
    "label": "Stristr()",
    "kind": "Method",
    "detail": "Function (const CharType*)",
    "insertText": "Stristr(const CharType* Str, const CharType* Find)"
  },
  {
    "label": "Stristr()",
    "kind": "Method",
    "detail": "Function (CharType*)",
    "insertText": "Stristr(CharType* Str, const CharType* Find)"
  },
  {
    "label": "Strnistr()",
    "kind": "Method",
    "detail": "Function (} const CharType*)",
    "insertText": "Strnistr(const CharType* Str, int32 InStrLen, const CharType* Find, int32 FindLen)"
  },
  {
    "label": "Strnistr()",
    "kind": "Method",
    "detail": "Function (CharType*)",
    "insertText": "Strnistr(CharType* Str, int32 InStrLen, const CharType* Find, int32 FindLen)"
  },
  {
    "label": "Strnstr()",
    "kind": "Method",
    "detail": "Function (} const CharType*)",
    "insertText": "Strnstr(const CharType* Str, int32 InStrLen, const CharType* Find, int32 FindLen)"
  },
  {
    "label": "Strnstr()",
    "kind": "Method",
    "detail": "Function (CharType*)",
    "insertText": "Strnstr(CharType* Str, int32 InStrLen, const CharType* Find, int32 FindLen)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strlen(const CharType* String)"
  },
  {
    "label": "Strnlen()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Strnlen(const CharType* String, SIZE_T StringSize)"
  },
  {
    "label": "Strstr()",
    "kind": "Method",
    "detail": "Function (const CharType*)",
    "insertText": "Strstr(const CharType* String, const CharType* Find)"
  },
  {
    "label": "Strstr()",
    "kind": "Method",
    "detail": "Function (CharType*)",
    "insertText": "Strstr(CharType* String, const CharType* Find)"
  },
  {
    "label": "Strchr()",
    "kind": "Method",
    "detail": "Function (const CharType*)",
    "insertText": "Strchr(const CharType* String, CharType c)"
  },
  {
    "label": "Strchr()",
    "kind": "Method",
    "detail": "Function (CharType*)",
    "insertText": "Strchr(CharType* String, CharType c)"
  },
  {
    "label": "Strrchr()",
    "kind": "Method",
    "detail": "Function (const CharType*)",
    "insertText": "Strrchr(const CharType* String, CharType c)"
  },
  {
    "label": "Strrchr()",
    "kind": "Method",
    "detail": "Function (CharType*)",
    "insertText": "Strrchr(CharType* String, CharType c)"
  },
  {
    "label": "Strrstr()",
    "kind": "Method",
    "detail": "Function (const CharType*)",
    "insertText": "Strrstr(const CharType* String, const CharType* Find)"
  },
  {
    "label": "Strrstr()",
    "kind": "Method",
    "detail": "Function (CharType*)",
    "insertText": "Strrstr(CharType* String, const CharType* Find)"
  },
  {
    "label": "Strspn()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Strspn(const CharType* String, const CharType* Mask)"
  },
  {
    "label": "Strcspn()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Strcspn(const CharType* String, const CharType* Mask)"
  },
  {
    "label": "Atoi()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Atoi(const CharType* String)"
  },
  {
    "label": "Atoi64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Atoi64(const CharType* String)"
  },
  {
    "label": "Atof()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Atof(const CharType* String)"
  },
  {
    "label": "Atod()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Atod(const CharType* String)"
  },
  {
    "label": "ToBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToBool(const CharType* String)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<CharType, WIDECHAR>)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<CharType, UTF8CHAR>)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "static_assert(sizeof(CharType) == 0, \"Not supported\")"
  },
  {
    "label": "Strtoi64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Strtoi64(const CharType* Start, CharType** End, int32 Base)"
  },
  {
    "label": "Strtoui64()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "Strtoui64(const CharType* Start, CharType** End, int32 Base)"
  },
  {
    "label": "Strtok()",
    "kind": "Method",
    "detail": "Function (CharType*)",
    "insertText": "Strtok(CharType* TokenString, const CharType* Delim, CharType** Context)"
  },
  {
    "label": "SprintfImpl()",
    "kind": "Method",
    "detail": "Function (private : int32 VARARGS)",
    "insertText": "SprintfImpl(CharType* Dest, const CharType* Fmt, ...)"
  },
  {
    "label": "SnprintfImpl()",
    "kind": "Method",
    "detail": "Function (int32 VARARGS)",
    "insertText": "SnprintfImpl(CharType* Dest, int32 DestSize, const CharType* Fmt, ...)"
  },
  {
    "label": "Sprintf()",
    "kind": "Method",
    "detail": "Function (template<SrcEncoding> using TIsCharEncodingCompatibleWithCharType = TIsCharEncodingCompatibleWith<SrcEncoding,CharType> ; public : template<FmtType,. . . Types> int32)",
    "insertText": "Sprintf(CharType* Dest, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "Snprintf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> int32)",
    "insertText": "Snprintf(CharType* Dest, int32 DestSize, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "GetVarArgs()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetVarArgs(CharType* Dest, SIZE_T DestSize, const CharType*& Fmt, va_list ArgPtr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CharType c =* Str + + ;)",
    "insertText": "if(bSkipQuotedChars)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (bool bInQuotedStr = false ;)",
    "insertText": "while(c)"
  },
  {
    "label": "Strifind()",
    "kind": "Method",
    "detail": "Function (c =* Str + + ; } } return NULL ; } template<T> const TCString<T>::CharType* TCString<T)",
    "insertText": "Strifind(const CharType* Str, const CharType* Find, bool bSkipQuotedChars)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (int32 Length =)",
    "insertText": "Strlen(Find++)"
  },
  {
    "label": "LITERAL()",
    "kind": "Method",
    "detail": "Function (c + =)",
    "insertText": "LITERAL(CharType, 'A') - LITERAL(CharType, 'a')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bInQuotedStr && !Alnum && c==f && !Strnicmp(Str,Find,Length))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Alnum && c==f && !Strnicmp(Str,Find,Length))"
  },
  {
    "label": "StrfindDelim()",
    "kind": "Method",
    "detail": "Function (c =* Str + + ; } } return NULL ; } template<T> const TCString<T>::CharType* TCString<T)",
    "insertText": "StrfindDelim(const CharType* Str, const CharType* Find, const CharType* Delim)"
  },
  {
    "label": "Stristr()",
    "kind": "Method",
    "detail": "Function (const T* Found =)",
    "insertText": "Stristr(Str, Find)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (CharType StrChar =* Str + + ;)",
    "insertText": "while(StrChar)"
  },
  {
    "label": "ToUpper()",
    "kind": "Method",
    "detail": "Function (StrChar = TChar<CharType)",
    "insertText": "ToUpper(StrChar)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 FindSuffixLength = FindLen - 1 ; const CharType* FindSuffix = Find + 1 ; const CharType* StrLastChance = Str + InStrLen - FindLen ;)",
    "insertText": "while(Str <= StrLastChance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CharType StrChar =* Str + + ;)",
    "insertText": "if(StrChar == FindInitial && !Strncmp(Str, FindSuffix, FindSuffixLength))"
  },
  {
    "label": "Strncpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Strncpy(Dest, Src, MaxLen)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} CharType* Result = nullptr ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "Strstr()",
    "kind": "Method",
    "detail": "Function (CharType* Found =)",
    "insertText": "Strstr(String, Find)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const CharType* StringIt = String ;)",
    "insertText": "while(*StringIt)"
  },
  {
    "label": "UE_PTRDIFF_TO_INT32()",
    "kind": "Method",
    "detail": "Function (NextChar : + + StringIt ; } return)",
    "insertText": "UE_PTRDIFF_TO_INT32(StringIt - String)"
  },
  {
    "label": "Strtoi()",
    "kind": "Method",
    "detail": "Function (} template<T> int32 TCString<T)",
    "insertText": "Strtoi(const CharType* Start, CharType** End, int32 Base)"
  },
  {
    "label": "GET_TYPED_VARARGS_RESULT()",
    "kind": "Method",
    "detail": "Function (int32 Result = - 1 ;)",
    "insertText": "GET_TYPED_VARARGS_RESULT(CharType, Dest, MAX_SPRINTF, MAX_SPRINTF - 1, Fmt, Fmt, Result)"
  },
  {
    "label": "GET_TYPED_VARARGS_RESULT()",
    "kind": "Method",
    "detail": "Function (int32 Result = - 1 ;)",
    "insertText": "GET_TYPED_VARARGS_RESULT(CharType, Dest, DestSize, DestSize - 1, Fmt, Fmt, Result)"
  }
]