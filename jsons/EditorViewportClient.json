[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FCachedJoystickState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCachedJoystickState"
  },
  {
    "label": "FCameraControllerConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCameraControllerConfig"
  },
  {
    "label": "FCameraControllerUserImpulseData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCameraControllerUserImpulseData"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FDragTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragTool"
  },
  {
    "label": "FEditorCameraController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorCameraController"
  },
  {
    "label": "FEditorModeTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeTools"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdMode"
  },
  {
    "label": "FMouseDeltaTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMouseDeltaTracker"
  },
  {
    "label": "FPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreviewScene"
  },
  {
    "label": "FTypedElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementHandle"
  },
  {
    "label": "IAssetFactoryInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetFactoryInterface"
  },
  {
    "label": "SEditorViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditorViewport"
  },
  {
    "label": "UActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorFactory"
  },
  {
    "label": "UTypedElementViewportInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementViewportInteraction"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGizmoState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGizmoState"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "UNREALED_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNREALED_API"
  },
  {
    "label": "FPrioritizedInputChord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrioritizedInputChord"
  },
  {
    "label": "FInputEventState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEventState"
  },
  {
    "label": "FViewportCursorLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportCursorLocation"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "FDropQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDropQuery"
  },
  {
    "label": "FViewportCameraTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportCameraTransform"
  },
  {
    "label": "FCurveSequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveSequence"
  },
  {
    "label": "FEditorViewportViewModifierParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorViewportViewModifierParams"
  },
  {
    "label": "FDropObjectOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDropObjectOptions"
  },
  {
    "label": "FRequiredCursorState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRequiredCursorState"
  },
  {
    "label": "FRealtimeOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRealtimeOverride"
  },
  {
    "label": "ICustomTemporalUpscalerData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICustomTemporalUpscalerData"
  },
  {
    "label": "FEditorViewportStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportStats"
  },
  {
    "label": "Category",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Category"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Engine / EngineBaseTypes . h \" # include \" Animation / CurveSequence . h \" # include \" UObject / GCObject . h \" # include \" Editor / UnrealEdTypes . h \" # include \" SceneTypes . h \" # include \" Engine / Scene . h \" # include \" Camera / CameraTypes . h \" # include \" UnrealWidgetFwd . h \" # include \" ShowFlags . h \" # include \" UnrealClient . h \" # include \" SceneManagement . h \" # include \" EditorComponents . h \" # include \" Framework / Commands / Commands . h \" # include \" Editor . h \" # include \" ViewportClient . h \" struct FAssetData ; class FCachedJoystickState ; class FCameraControllerConfig ; class FCameraControllerUserImpulseData ; class FCanvas ; class FDragTool ; class FEditorCameraController ; class FEditorModeTools ; class FEditorViewportClient ; class FEdMode ; class FMouseDeltaTracker ; class FPreviewScene ; struct FTypedElementHandle ; class IAssetFactoryInterface ; class SEditorViewport ; class UActorFactory ; class UTypedElementViewportInteraction ; enum class EViewStatusForScreenPercentage ; struct FGizmoState ;)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FViewportStateGetter)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogEditorViewport, Log, All)"
  },
  {
    "label": "FViewportNavigationCommands()",
    "kind": "Method",
    "detail": "Function (namespace EDragTool { enum Type { BoxSelect,FrustumSelect,Measure,ViewportChange } ; } class FViewportNavigationCommands : public TCommands<FViewportNavigationCommands> { public :)",
    "insertText": "FViewportNavigationCommands()"
  },
  {
    "label": "RegisterCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCommands()"
  },
  {
    "label": "FPrioritizedInputChord()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FUICommandInfo> Forward ; TSharedPtr<FUICommandInfo> Backward ; TSharedPtr<FUICommandInfo> Left ; TSharedPtr<FUICommandInfo> Right ; TSharedPtr<FUICommandInfo> Up ; TSharedPtr<FUICommandInfo> Down ; TSharedPtr<FUICommandInfo> FovZoomIn ; TSharedPtr<FUICommandInfo> FovZoomOut ; TSharedPtr<FUICommandInfo> RotateUp ; TSharedPtr<FUICommandInfo> RotateDown ; TSharedPtr<FUICommandInfo> RotateLeft ; TSharedPtr<FUICommandInfo> RotateRight ; } ; struct FPrioritizedInputChord {)",
    "insertText": "FPrioritizedInputChord(const int32 InPriority, const FName InName, const EModifierKey::Type InModifierKeyFlags, const FKey InKey = EKeys::Invalid) : InputChord(InModifierKeyFlags, InKey) , Name(InName) , Priority(InPriority)"
  },
  {
    "label": "FInputEventState()",
    "kind": "Method",
    "detail": "Function (} FInputChord InputChord ; FName Name ; int32 Priority ; } ; struct FInputEventState { public :)",
    "insertText": "FInputEventState(FViewport* InViewport, FKey InKey, EInputEvent InInputEvent ) : Viewport( InViewport ) , Key( InKey ) , InputEvent( InInputEvent)"
  },
  {
    "label": "GetViewport()",
    "kind": "Method",
    "detail": "Function (} FViewport*)",
    "insertText": "GetViewport()"
  },
  {
    "label": "IsShiftButtonEvent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsShiftButtonEvent()"
  },
  {
    "label": "IsAltButtonEvent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAltButtonEvent()"
  },
  {
    "label": "IsCommandButtonEvent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCommandButtonEvent()"
  },
  {
    "label": "IsLeftMouseButtonPressed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLeftMouseButtonPressed()"
  },
  {
    "label": "IsMiddleMouseButtonPressed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMiddleMouseButtonPressed()"
  },
  {
    "label": "IsRightMouseButtonPressed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRightMouseButtonPressed()"
  },
  {
    "label": "IsMouseButtonEvent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMouseButtonEvent()"
  },
  {
    "label": "IsButtonPressed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsButtonPressed(FKey InKey)"
  },
  {
    "label": "IsAnyMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAnyMouseButtonDown()"
  },
  {
    "label": "IsAltButtonPressed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAltButtonPressed()"
  },
  {
    "label": "IsShiftButtonPressed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsShiftButtonPressed()"
  },
  {
    "label": "IsCtrlButtonPressed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCtrlButtonPressed()"
  },
  {
    "label": "IsCommandButtonPressed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCommandButtonPressed()"
  },
  {
    "label": "IsSpaceBarPressed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSpaceBarPressed()"
  },
  {
    "label": "FViewportCursorLocation()",
    "kind": "Method",
    "detail": "Function (} private : FViewport* Viewport ; FKey Key ; EInputEvent InputEvent ; } ; struct FViewportCursorLocation { public :)",
    "insertText": "FViewportCursorLocation(const FSceneView* View, FEditorViewportClient* InViewportClient, int32 X, int32 Y)"
  },
  {
    "label": "FViewportCursorLocation()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FViewportCursorLocation()"
  },
  {
    "label": "GetOrigin()",
    "kind": "Method",
    "detail": "Function (const FVector&)",
    "insertText": "GetOrigin()"
  },
  {
    "label": "GetViewportClient()",
    "kind": "Method",
    "detail": "Function (FEditorViewportClient*)",
    "insertText": "GetViewportClient()"
  },
  {
    "label": "FViewportClick()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FViewportClick()"
  },
  {
    "label": "GetClickPos()",
    "kind": "Method",
    "detail": "Function (const FIntPoint&)",
    "insertText": "GetClickPos()"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (} const FKey&)",
    "insertText": "GetKey()"
  },
  {
    "label": "FViewportCameraTransform()",
    "kind": "Method",
    "detail": "Function (} bool bCanDrop ; FText HintText ; } ; struct FViewportCameraTransform { public :)",
    "insertText": "FViewportCameraTransform()"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocation(const FVector& Position)"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotation(const FRotator& Rotation)"
  },
  {
    "label": "SetLookAt()",
    "kind": "Method",
    "detail": "Function (ViewRotation = Rotation ; } void)",
    "insertText": "SetLookAt(const FVector& InLookAt)"
  },
  {
    "label": "SetOrthoZoom()",
    "kind": "Method",
    "detail": "Function (LookAt = InLookAt ; } void)",
    "insertText": "SetOrthoZoom(float InOrthoZoom)"
  },
  {
    "label": "IsPlaying()",
    "kind": "Method",
    "detail": "Function (OrthoZoom = InOrthoZoom ; } bool)",
    "insertText": "IsPlaying()"
  },
  {
    "label": "UpdateTransition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateTransition()"
  },
  {
    "label": "ComputeOrbitMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "ComputeOrbitMatrix()"
  },
  {
    "label": "AddPostProcessBlend()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<struct FCurveSequence> TransitionCurve ; FVector ViewLocation ; FRotator ViewRotation ; FVector DesiredLocation ; FVector LookAt ; FVector StartLocation ; float OrthoZoom ; } ; struct FEditorViewportViewModifierParams { FEditorViewportClient* ViewportClient = nullptr ; FMinimalViewInfo ViewInfo ; void)",
    "insertText": "AddPostProcessBlend(const FPostProcessSettings& Settings, float Weight)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PostProcessSettings .)",
    "insertText": "Add(Settings)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PostProcessBlendWeights .)",
    "insertText": "Add(Weight)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} private : TArray<FPostProcessSettings> PostProcessSettings ; TArray<float> PostProcessBlendWeights ; class FEditorViewportClient ; } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FEditorViewportViewModifierDelegate, FEditorViewportViewModifierParams&)"
  },
  {
    "label": "FEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (class FEditorViewportClient : public FCommonViewportClient,public FViewElementDrawer,public FGCObject { public : class FMouseDeltaTracker ;)",
    "insertText": "FEditorViewportClient(FEditorModeTools* InModeTools, FPreviewScene* InPreviewScene = nullptr, const TWeakPtr<SEditorViewport>& InEditorViewportWidget = nullptr)"
  },
  {
    "label": "FEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FEditorViewportClient()"
  },
  {
    "label": "FEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEditorViewportClient(const FEditorViewportClient&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FEditorViewportClient&)",
    "insertText": "operator(const FEditorViewportClient&)"
  },
  {
    "label": "GetPreviewScene()",
    "kind": "Method",
    "detail": "Function (FPreviewScene*)",
    "insertText": "GetPreviewScene()"
  },
  {
    "label": "HasRealtimeOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRealtimeOverride(FText SystemDisplayName)"
  },
  {
    "label": "RemoveRealtimeOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveRealtimeOverride(FText SystemDisplayName, bool bCheckMissingOverride = true)"
  },
  {
    "label": "PopRealtimeOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopRealtimeOverride()"
  },
  {
    "label": "ToggleRealtime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToggleRealtime()"
  },
  {
    "label": "SetRealtime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRealtime(bool bInRealtime)"
  },
  {
    "label": "IsRealtime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRealtime()"
  },
  {
    "label": "RequestRealTimeFrames()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestRealTimeFrames(uint64 NumRealTimeFrames = 1)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (RealTimeUntilFrameNumber =)",
    "insertText": "Max(GFrameCounter + NumRealTimeFrames, RealTimeUntilFrameNumber)"
  },
  {
    "label": "SaveRealtimeStateToConfig()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SaveRealtimeStateToConfig(bool& ConfigVar)"
  },
  {
    "label": "IsRealtimeOverrideSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRealtimeOverrideSet()"
  },
  {
    "label": "GetRealtimeOverrideMessage()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetRealtimeOverrideMessage()"
  },
  {
    "label": "SetCameraSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraSetup(const FVector& LocationForOrbiting, const FRotator& InOrbitRotation, const FVector& InOrbitZoom, const FVector& InOrbitLookAt, const FVector& InViewLocation, const FRotator &InViewRotation)"
  },
  {
    "label": "SetCameraLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraLock()"
  },
  {
    "label": "IsCameraLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCameraLocked()"
  },
  {
    "label": "SetShowGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowGrid()"
  },
  {
    "label": "IsSetShowGridChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSetShowGridChecked()"
  },
  {
    "label": "SetShowBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowBounds(bool bShow)"
  },
  {
    "label": "ToggleShowBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowBounds()"
  },
  {
    "label": "IsSetShowBoundsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSetShowBoundsChecked()"
  },
  {
    "label": "SetShowCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowCollision()"
  },
  {
    "label": "IsSetShowCollisionChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSetShowCollisionChecked()"
  },
  {
    "label": "GetViewTransform()",
    "kind": "Method",
    "detail": "Function (FViewportCameraTransform&)",
    "insertText": "GetViewTransform()"
  },
  {
    "label": "SetViewLocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetViewLocation(const FVector& NewLocation)"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (ViewTransform .)",
    "insertText": "SetLocation(NewLocation)"
  },
  {
    "label": "SetViewRotation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetViewRotation(const FRotator& NewRotation)"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (ViewTransform .)",
    "insertText": "SetRotation(NewRotation)"
  },
  {
    "label": "SetLookAtLocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLookAtLocation(const FVector& LookAt, bool bRecalculateView = false)"
  },
  {
    "label": "SetLookAt()",
    "kind": "Method",
    "detail": "Function (ViewTransform .)",
    "insertText": "SetLookAt(LookAt)"
  },
  {
    "label": "InverseFast()",
    "kind": "Method",
    "detail": "Function (OrbitMatrix = OrbitMatrix .)",
    "insertText": "InverseFast()"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (ViewTransform .)",
    "insertText": "SetRotation(OrbitMatrix.Rotator())"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (ViewTransform .)",
    "insertText": "SetLocation(OrbitMatrix.GetOrigin())"
  },
  {
    "label": "PeformDefaultCameraMovement()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PeformDefaultCameraMovement(FVector& Drag, FRotator& Rot, FVector& Scale)"
  },
  {
    "label": "SetOrthoZoom()",
    "kind": "Method",
    "detail": "Function (ViewTransform .)",
    "insertText": "SetOrthoZoom(InOrthoZoom)"
  },
  {
    "label": "GetViewLocation()",
    "kind": "Method",
    "detail": "Function (} const FVector&)",
    "insertText": "GetViewLocation()"
  },
  {
    "label": "GetViewRotation()",
    "kind": "Method",
    "detail": "Function (} const FRotator&)",
    "insertText": "GetViewRotation()"
  },
  {
    "label": "GetLookAtLocation()",
    "kind": "Method",
    "detail": "Function (} const FVector&)",
    "insertText": "GetLookAtLocation()"
  },
  {
    "label": "GetOrthoZoom()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetOrthoZoom()"
  },
  {
    "label": "GetOrthoUnitsPerPixel()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetOrthoUnitsPerPixel(const FViewport* Viewport)"
  },
  {
    "label": "UnrealUnitsToSiUnits()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "UnrealUnitsToSiUnits(float UnrealUnits)"
  },
  {
    "label": "RemoveCameraRoll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCameraRoll()"
  },
  {
    "label": "SetViewRotation()",
    "kind": "Method",
    "detail": "Function (Rotation . Roll = 0 ;)",
    "insertText": "SetViewRotation(Rotation)"
  },
  {
    "label": "SetInitialViewTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInitialViewTransform(ELevelViewportType ViewportType, const FVector& ViewLocation, const FRotator& ViewRotation, float InOrthoZoom)"
  },
  {
    "label": "TakeHighResScreenShot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeHighResScreenShot()"
  },
  {
    "label": "OnEditorModeIDChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorModeIDChanged(const FEditorModeID& EditorModeID, bool bIsEntering)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const FSceneView* View,FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(FViewport* Viewport,FCanvas* Canvas)"
  },
  {
    "label": "GetCursorWorldLocationFromMousePos()",
    "kind": "Method",
    "detail": "Function (FViewportCursorLocation)",
    "insertText": "GetCursorWorldLocationFromMousePos()"
  },
  {
    "label": "ProcessScreenShots()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessScreenShots(FViewport* Viewport)"
  },
  {
    "label": "RedrawRequested()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedrawRequested(FViewport* Viewport)"
  },
  {
    "label": "RequestInvalidateHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestInvalidateHitProxy(FViewport* Viewport)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(const FInputKeyEventArgs& EventArgs)"
  },
  {
    "label": "InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputAxis(FViewport* Viewport, FInputDeviceId DeviceID, FKey Key, float Delta, float DeltaTime, int32 NumSamples=1, bool bGamepad=false)"
  },
  {
    "label": "InputGesture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputGesture(FViewport* Viewport, EGestureEvent GestureType, const FVector2D& GestureDelta, bool bIsDirectionInvertedFromDevice)"
  },
  {
    "label": "ReceivedFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedFocus(FViewport* Viewport)"
  },
  {
    "label": "MouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MouseEnter(FViewport* Viewport,int32 x, int32 y)"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MouseMove(FViewport* Viewport,int32 x, int32 y)"
  },
  {
    "label": "MouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MouseLeave(FViewport* Viewport)"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (EMouseCursor::Type)",
    "insertText": "GetCursor(FViewport* Viewport,int32 X,int32 Y)"
  },
  {
    "label": "CapturedMouseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CapturedMouseMove(FViewport* InViewport, int32 InMouseX, int32 InMouseY)"
  },
  {
    "label": "ProcessAccumulatedPointerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAccumulatedPointerInput(FViewport* InViewport)"
  },
  {
    "label": "IsOrtho()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOrtho()"
  },
  {
    "label": "LostFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LostFocus(FViewport* Viewport)"
  },
  {
    "label": "GetStatUnitData()",
    "kind": "Method",
    "detail": "Function (FStatUnitData*)",
    "insertText": "GetStatUnitData()"
  },
  {
    "label": "GetStatHitchesData()",
    "kind": "Method",
    "detail": "Function (FStatHitchesData*)",
    "insertText": "GetStatHitchesData()"
  },
  {
    "label": "GetEnabledStats()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>*)",
    "insertText": "GetEnabledStats()"
  },
  {
    "label": "SetEnabledStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabledStats(const TArray<FString>& InEnabledStats)"
  },
  {
    "label": "IsStatEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStatEnabled(const FString& InName)"
  },
  {
    "label": "BeginTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginTransform(const FGizmoState& InState)"
  },
  {
    "label": "Internal_InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Internal_InputAxis(FViewport* Viewport, FInputDeviceId DeviceID, FKey Key, float Delta, float DeltaTime, int32 NumSamples=1, bool bGamepad=false)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "ProcessClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessClick(FSceneView& View, HHitProxy* HitProxy, FKey Key, EInputEvent Event, uint32 HitX, uint32 HitY)"
  },
  {
    "label": "TrackingStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackingStarted(const struct FInputEventState& InInputState, bool bIsDraggingWidget, bool bNudge)"
  },
  {
    "label": "TrackingStopped()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TrackingStopped()"
  },
  {
    "label": "InputWidgetDelta()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InputWidgetDelta(FViewport* InViewport, EAxisList::Type CurrentAxis, FVector& Drag, FRotator& Rot, FVector& Scale)"
  },
  {
    "label": "SetWidgetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetMode(UE::Widget::EWidgetMode NewMode)"
  },
  {
    "label": "CanSetWidgetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetWidgetMode(UE::Widget::EWidgetMode NewMode)"
  },
  {
    "label": "CanCycleWidgetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCycleWidgetMode()"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "GetWidgetCoordSystem()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetWidgetCoordSystem()"
  },
  {
    "label": "GetLocalCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetLocalCoordinateSystem()"
  },
  {
    "label": "SetWidgetCoordSystemSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetCoordSystemSpace(ECoordSystem NewCoordSystem)"
  },
  {
    "label": "GetWidgetCoordSystemSpace()",
    "kind": "Method",
    "detail": "Function (ECoordSystem)",
    "insertText": "GetWidgetCoordSystemSpace()"
  },
  {
    "label": "SetCurrentWidgetAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentWidgetAxis(EAxisList::Type InAxis)"
  },
  {
    "label": "AdjustTransformWidgetSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustTransformWidgetSize(const int32 SizeDelta)"
  },
  {
    "label": "SetupViewForRendering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupViewForRendering(FSceneViewFamily& ViewFamily, FSceneView& View)"
  },
  {
    "label": "DrawCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCanvas(FViewport& InViewport, FSceneView& View, FCanvas& Canvas)"
  },
  {
    "label": "DrawPreviewLightVisualization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawPreviewLightVisualization(const FSceneView* View, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "RenderDragTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDragTool(const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "CalcSceneView()",
    "kind": "Method",
    "detail": "Function (FSceneView*)",
    "insertText": "CalcSceneView(FSceneViewFamily* ViewFamily, const int32 StereoViewIndex = INDEX_NONE)"
  },
  {
    "label": "GetScene()",
    "kind": "Method",
    "detail": "Function (FSceneInterface*)",
    "insertText": "GetScene()"
  },
  {
    "label": "GetBackgroundColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetBackgroundColor()"
  },
  {
    "label": "OverridePostProcessSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverridePostProcessSettings(FSceneView& View)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "UpdateMouseDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMouseDelta()"
  },
  {
    "label": "UpdateGestureDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGestureDelta()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "IsLevelEditorClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLevelEditorClient()"
  },
  {
    "label": "CanUseDragTool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUseDragTool()"
  },
  {
    "label": "ShouldOrbitCamera()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldOrbitCamera()"
  },
  {
    "label": "IsMovingCamera()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMovingCamera()"
  },
  {
    "label": "UpdateLinkedOrthoViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLinkedOrthoViewports(bool bInvalidate = false)"
  },
  {
    "label": "ShouldLockPitch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldLockPitch()"
  },
  {
    "label": "CheckHoveredHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckHoveredHitProxy(HHitProxy* HoveredHitProxy)"
  },
  {
    "label": "HasDropPreviewActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDropPreviewActors()"
  },
  {
    "label": "HasDropPreviewElements()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasDropPreviewElements()"
  },
  {
    "label": "CanDropObjectsAtCoordinates()",
    "kind": "Method",
    "detail": "Function (} FDropQuery)",
    "insertText": "CanDropObjectsAtCoordinates(int32 MouseX, int32 MouseY, const FAssetData& AssetInfo)"
  },
  {
    "label": "FDropObjectOptions()",
    "kind": "Method",
    "detail": "Function (} struct FDropObjectOptions {)",
    "insertText": "FDropObjectOptions()"
  },
  {
    "label": "DropObjectsAtCoordinates()",
    "kind": "Method",
    "detail": "Function (} bool bOnlyDropOnTarget = false ; bool bCreateDropPreview = false ; bool bSelectOutput = true ; TScriptInterface<IAssetFactoryInterface> FactoryToUse = nullptr ; } ; bool)",
    "insertText": "DropObjectsAtCoordinates(int32 MouseX, int32 MouseY, const TArray<UObject*>& DroppedObjects, TArray<FTypedElementHandle>& OutNewObjects, const FDropObjectOptions& Options = FDropObjectOptions())"
  },
  {
    "label": "WantsDrawWhenAppIsHidden()",
    "kind": "Method",
    "detail": "Function (bAllowCinematicControl = bInAllowCinematicControl ; } bool)",
    "insertText": "WantsDrawWhenAppIsHidden()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "IsSimulateInEditorViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimulateInEditorViewport()"
  },
  {
    "label": "SetViewMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewMode(EViewModeIndex InViewModeIndex)"
  },
  {
    "label": "SetViewModes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewModes(const EViewModeIndex InPerspViewModeIndex, const EViewModeIndex InOrthoViewModeIndex)"
  },
  {
    "label": "SetViewModeParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewModeParam(int32 InViewModeParam)"
  },
  {
    "label": "GetViewMode()",
    "kind": "Method",
    "detail": "Function (EViewModeIndex)",
    "insertText": "GetViewMode()"
  },
  {
    "label": "GetPerspViewMode()",
    "kind": "Method",
    "detail": "Function (EViewModeIndex)",
    "insertText": "GetPerspViewMode()"
  },
  {
    "label": "IsViewModeParam()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsViewModeParam(int32 InViewModeParam)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate(bool bInvalidateChildViews=true, bool bInvalidateHitProxies=true)"
  },
  {
    "label": "GetViewportDimensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetViewportDimensions(FIntPoint& OutOrigin, FIntPoint& OutSize)"
  },
  {
    "label": "TranslateDelta()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "TranslateDelta(FKey InKey, float InDelta, bool InNudge)"
  },
  {
    "label": "GetViewportType()",
    "kind": "Method",
    "detail": "Function (ELevelViewportType)",
    "insertText": "GetViewportType()"
  },
  {
    "label": "SetViewportType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportType(ELevelViewportType InViewportType)"
  },
  {
    "label": "RotateViewportType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateViewportType()"
  },
  {
    "label": "IsActiveViewportTypeInRotation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActiveViewportTypeInRotation()"
  },
  {
    "label": "IsActiveViewportType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActiveViewportType(ELevelViewportType InViewportType)"
  },
  {
    "label": "IsPerspective()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPerspective()"
  },
  {
    "label": "IsAspectRatioConstrained()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAspectRatioConstrained()"
  },
  {
    "label": "FocusViewportOnBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusViewportOnBox(const FBox& BoundingBox, bool bInstant = false)"
  },
  {
    "label": "CenterViewportAtPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CenterViewportAtPoint(const FVector& NewLookAt, bool bInstant = false)"
  },
  {
    "label": "GetCameraController()",
    "kind": "Method",
    "detail": "Function (FEditorCameraController*)",
    "insertText": "GetCameraController(void)"
  },
  {
    "label": "InputTakeScreenshot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputTakeScreenshot(FViewport* Viewport, FKey Key, EInputEvent Event)"
  },
  {
    "label": "OpenScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenScreenshot(FString SourceFilePath)"
  },
  {
    "label": "TakeScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeScreenshot(FViewport* Viewport, bool bInvalidateViewport)"
  },
  {
    "label": "ConvertMovementToDragRot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertMovementToDragRot(const FVector& InDelta, FVector& InDragDelta, FRotator& InRotDelta)"
  },
  {
    "label": "ConvertMovementToOrbitDragRot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertMovementToOrbitDragRot(const FVector& InDelta, FVector& InDragDelta, FRotator& InRotDelta)"
  },
  {
    "label": "ToggleOrbitCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleOrbitCamera(bool bEnableOrbitCamera)"
  },
  {
    "label": "SetViewLocationForOrbiting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewLocationForOrbiting(const FVector& LookAtPoint, float DistanceToCamera = 256.f)"
  },
  {
    "label": "MoveViewportCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveViewportCamera(const FVector& InDrag, const FRotator& InRot, bool bDollyCamera = false)"
  },
  {
    "label": "GetPivotForOrbit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPivotForOrbit(FVector& OutPivot)"
  },
  {
    "label": "IsAltPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAltPressed()"
  },
  {
    "label": "IsCtrlPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCtrlPressed()"
  },
  {
    "label": "IsShiftPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShiftPressed()"
  },
  {
    "label": "IsCmdPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCmdPressed()"
  },
  {
    "label": "RegisterPrioritizedInputChord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPrioritizedInputChord(const FPrioritizedInputChord& InInputCord)"
  },
  {
    "label": "UnregisterPrioritizedInputChord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPrioritizedInputChord(const FName InInputCordName)"
  },
  {
    "label": "IsPrioritizedInputChordPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrioritizedInputChordPressed(const FName InInputCordName)"
  },
  {
    "label": "IsCommandChordPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCommandChordPressed(const TSharedPtr<FUICommandInfo> InCommand, FKey InOptionalKey = FKey())"
  },
  {
    "label": "IsInImmersiveViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInImmersiveViewport()"
  },
  {
    "label": "ClearAudioFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAudioFocus()"
  },
  {
    "label": "SetAudioFocus()",
    "kind": "Method",
    "detail": "Function (bHasAudioFocus = false ; } void)",
    "insertText": "SetAudioFocus()"
  },
  {
    "label": "MarkMouseMovedSinceClick()",
    "kind": "Method",
    "detail": "Function (bHasAudioFocus = true ; } void)",
    "insertText": "MarkMouseMovedSinceClick()"
  },
  {
    "label": "IsUsingAbsoluteTranslation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingAbsoluteTranslation(bool bAlsoCheckAbsoluteRotation = false)"
  },
  {
    "label": "IsForcedRealtimeAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsForcedRealtimeAudio()"
  },
  {
    "label": "IsTracking()",
    "kind": "Method",
    "detail": "Function (bForceAudioRealtime = bShouldForceAudioRealtime ; } bool)",
    "insertText": "IsTracking()"
  },
  {
    "label": "SetRequiredCursorOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequiredCursorOverride(bool WantOverride, EMouseCursor::Type RequiredCursor = EMouseCursor::Default)"
  },
  {
    "label": "SetWidgetModeOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetModeOverride(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GetCameraSpeed()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCameraSpeed()"
  },
  {
    "label": "GetCameraSpeed()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCameraSpeed(int32 SpeedSetting)"
  },
  {
    "label": "SetCameraSpeedSetting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraSpeedSetting(int32 SpeedSetting)"
  },
  {
    "label": "GetCameraSpeedSetting()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCameraSpeedSetting()"
  },
  {
    "label": "GetCameraSpeedScalar()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCameraSpeedScalar()"
  },
  {
    "label": "SetCameraSpeedScalar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraSpeedScalar(float SpeedScalar)"
  },
  {
    "label": "GetModeTools()",
    "kind": "Method",
    "detail": "Function (FEditorModeTools*)",
    "insertText": "GetModeTools()"
  },
  {
    "label": "GetEditorViewportWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SEditorViewport>)",
    "insertText": "GetEditorViewportWidget()"
  },
  {
    "label": "CalcViewRotationMatrix()",
    "kind": "Method",
    "detail": "Function (} FMatrix)",
    "insertText": "CalcViewRotationMatrix(const FRotator& InViewRotation)"
  },
  {
    "label": "DrawBoundingBox()",
    "kind": "Method",
    "detail": "Function (protected : bool bAllowCinematicControl ; int32 CameraSpeedSetting ; float CameraSpeedScalar ; public : void)",
    "insertText": "DrawBoundingBox(FBox &Box, FCanvas* InCanvas, const FSceneView* InView, const FViewport* InViewport, const FLinearColor& InColor, const bool bInDrawBracket, const FString &InLabelText)"
  },
  {
    "label": "DrawActorScreenSpaceBoundingBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawActorScreenSpaceBoundingBox(FCanvas* InCanvas, const FSceneView* InView, FViewport* InViewport, AActor* InActor, const FLinearColor& InColor, const bool bInDrawBracket, const FString& InLabelText = TEXT( \"\" ))"
  },
  {
    "label": "SetGameView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGameView(bool bGameViewEnable)"
  },
  {
    "label": "SetVREditView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVREditView(bool bGameViewEnable)"
  },
  {
    "label": "IsInGameView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInGameView()"
  },
  {
    "label": "SetCameraAspectRatioBars()",
    "kind": "Method",
    "detail": "Function (EngineShowFlags .)",
    "insertText": "SetCameraAspectRatioBars(bEnable)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate(false,false)"
  },
  {
    "label": "SetShowSafeFrameBoxDisplay()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetShowSafeFrameBoxDisplay(bool bEnable)"
  },
  {
    "label": "SetCameraSafeFrames()",
    "kind": "Method",
    "detail": "Function (EngineShowFlags .)",
    "insertText": "SetCameraSafeFrames(bEnable)"
  },
  {
    "label": "IsShowingAspectRatioBarDisplay()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsShowingAspectRatioBarDisplay()"
  },
  {
    "label": "OverrideNearClipPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideNearClipPlane(float InNearPlane)"
  },
  {
    "label": "GetFarClipPlaneOverride()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFarClipPlaneOverride()"
  },
  {
    "label": "OverrideFarClipPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideFarClipPlane(const float InFarPlane)"
  },
  {
    "label": "UpdateHiddenCollisionDrawing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHiddenCollisionDrawing()"
  },
  {
    "label": "GetSceneDepthAtLocation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSceneDepthAtLocation(int32 X, int32 Y)"
  },
  {
    "label": "GetHitProxyObjectLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetHitProxyObjectLocation(int32 X, int32 Y)"
  },
  {
    "label": "GetViewModeParamNameMap()",
    "kind": "Method",
    "detail": "Function (TMap<int32,FName>&)",
    "insertText": "GetViewModeParamNameMap()"
  },
  {
    "label": "GetShowWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShowWidget()"
  },
  {
    "label": "HandleToggleShowFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleToggleShowFlag(FEngineShowFlags::EShowFlag EngineShowFlagIndex)"
  },
  {
    "label": "HandleIsShowFlagEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleIsShowFlagEnabled(FEngineShowFlags::EShowFlag EngineShowFlagIndex)"
  },
  {
    "label": "ChangeBufferVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeBufferVisualizationMode(FName InName)"
  },
  {
    "label": "IsBufferVisualizationModeSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBufferVisualizationModeSelected(FName InName)"
  },
  {
    "label": "GetCurrentBufferVisualizationModeDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentBufferVisualizationModeDisplayName()"
  },
  {
    "label": "ChangeNaniteVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeNaniteVisualizationMode(FName InName)"
  },
  {
    "label": "IsNaniteVisualizationModeSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNaniteVisualizationModeSelected(FName InName)"
  },
  {
    "label": "GetCurrentNaniteVisualizationModeDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentNaniteVisualizationModeDisplayName()"
  },
  {
    "label": "ChangeLumenVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeLumenVisualizationMode(FName InName)"
  },
  {
    "label": "IsLumenVisualizationModeSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLumenVisualizationModeSelected(FName InName)"
  },
  {
    "label": "GetCurrentLumenVisualizationModeDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentLumenVisualizationModeDisplayName()"
  },
  {
    "label": "ChangeSubstrateVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeSubstrateVisualizationMode(FName InName)"
  },
  {
    "label": "IsSubstrateVisualizationModeSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubstrateVisualizationModeSelected(FName InName)"
  },
  {
    "label": "GetCurrentSubstrateVisualizationModeDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentSubstrateVisualizationModeDisplayName()"
  },
  {
    "label": "ChangeGroomVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeGroomVisualizationMode(FName InName)"
  },
  {
    "label": "IsGroomVisualizationModeSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGroomVisualizationModeSelected(FName InName)"
  },
  {
    "label": "GetCurrentGroomVisualizationModeDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentGroomVisualizationModeDisplayName()"
  },
  {
    "label": "ChangeVirtualShadowMapVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeVirtualShadowMapVisualizationMode(FName InName)"
  },
  {
    "label": "IsVirtualShadowMapVisualizationModeSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVirtualShadowMapVisualizationModeSelected(FName InName)"
  },
  {
    "label": "GetCurrentVirtualShadowMapVisualizationModeDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentVirtualShadowMapVisualizationModeDisplayName()"
  },
  {
    "label": "ChangeActorColorationVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeActorColorationVisualizationMode(FName InName)"
  },
  {
    "label": "IsActorColorationVisualizationModeSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorColorationVisualizationModeSelected(FName InName)"
  },
  {
    "label": "GetCurrentActorColorationVisualizationModeDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentActorColorationVisualizationModeDisplayName()"
  },
  {
    "label": "IsVisualizeCalibrationMaterialEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisualizeCalibrationMaterialEnabled()"
  },
  {
    "label": "ChangeRayTracingDebugVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeRayTracingDebugVisualizationMode(FName InName)"
  },
  {
    "label": "IsRayTracingDebugVisualizationModeSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRayTracingDebugVisualizationModeSelected(FName InName)"
  },
  {
    "label": "ChangeGPUSkinCacheVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeGPUSkinCacheVisualizationMode(FName InName)"
  },
  {
    "label": "IsGPUSkinCacheVisualizationModeSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGPUSkinCacheVisualizationModeSelected(FName InName)"
  },
  {
    "label": "GetCurrentGPUSkinCacheVisualizationModeDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentGPUSkinCacheVisualizationModeDisplayName()"
  },
  {
    "label": "SupportsPreviewResolutionFraction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsPreviewResolutionFraction()"
  },
  {
    "label": "GetViewStatusForScreenPercentage()",
    "kind": "Method",
    "detail": "Function (EViewStatusForScreenPercentage)",
    "insertText": "GetViewStatusForScreenPercentage()"
  },
  {
    "label": "GetDefaultPrimaryResolutionFractionTarget()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDefaultPrimaryResolutionFractionTarget()"
  },
  {
    "label": "IsPreviewingScreenPercentage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreviewingScreenPercentage()"
  },
  {
    "label": "SetPreviewingScreenPercentage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewingScreenPercentage(bool bIsPreviewing)"
  },
  {
    "label": "GetPreviewScreenPercentage()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPreviewScreenPercentage()"
  },
  {
    "label": "SetPreviewScreenPercentage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewScreenPercentage(int32 PreviewScreenPercentage)"
  },
  {
    "label": "SupportsLowDPIPreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsLowDPIPreview()"
  },
  {
    "label": "IsLowDPIPreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLowDPIPreview()"
  },
  {
    "label": "SetLowDPIPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLowDPIPreview(bool LowDPIPreview)"
  },
  {
    "label": "GetMouseDeltaTracker()",
    "kind": "Method",
    "detail": "Function (FMouseDeltaTracker*)",
    "insertText": "GetMouseDeltaTracker()"
  },
  {
    "label": "EnableOverrideEngineShowFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableOverrideEngineShowFlags(TUniqueFunction<void(FEngineShowFlags&)> OverrideFunc)"
  },
  {
    "label": "DisableOverrideEngineShowFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableOverrideEngineShowFlags()"
  },
  {
    "label": "IsEngineShowFlagsOverrideEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEngineShowFlagsOverrideEnabled()"
  },
  {
    "label": "InvalidateViewportWidget()",
    "kind": "Method",
    "detail": "Function (bIsCurrentLevelEditingFocus = bInIsCurrentLevelEditingFocus ; } protected : void)",
    "insertText": "InvalidateViewportWidget()"
  },
  {
    "label": "PerspectiveCameraMoved()",
    "kind": "Method",
    "detail": "Function (float const SafePadding ; void)",
    "insertText": "PerspectiveCameraMoved()"
  },
  {
    "label": "ApplyDeltaToRotateWidget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyDeltaToRotateWidget(const FRotator& InRot)"
  },
  {
    "label": "RedrawAllViewportsIntoThisScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedrawAllViewportsIntoThisScene()"
  },
  {
    "label": "UpdateViewportClientWindowDPIScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UpdateViewportClientWindowDPIScale()"
  },
  {
    "label": "UpdateAndApplyCursorVisibility()",
    "kind": "Method",
    "detail": "Function (struct FRequiredCursorState { bool bSoftwareCursorVisible ; bool bHardwareCursorVisible ; bool bDontResetCursor ; bool bOverrideAppearance ; EMouseCursor::Type RequiredCursor ; } ; void)",
    "insertText": "UpdateAndApplyCursorVisibility()"
  },
  {
    "label": "UpdateRequiredCursorVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRequiredCursorVisibility()"
  },
  {
    "label": "SetRequiredCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequiredCursor(const bool bHardwareCursorVisible, const bool bSoftwareCursorVisible)"
  },
  {
    "label": "ApplyRequiredCursorVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRequiredCursorVisibility(bool bUpdateSoftwareCursorPostion = false)"
  },
  {
    "label": "ShouldUseMoveCanvasMovement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseMoveCanvasMovement()"
  },
  {
    "label": "DrawAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAxes(FViewport* Viewport,FCanvas* Canvas, const FRotator* InRotation = NULL, EAxisList::Type InAxis = EAxisList::XYZ)"
  },
  {
    "label": "DrawScaleUnits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawScaleUnits(FViewport* Viewport, FCanvas* Canvas, const FSceneView& InView)"
  },
  {
    "label": "StartTrackingDueToInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTrackingDueToInput(const struct FInputEventState& InputState, FSceneView& View)"
  },
  {
    "label": "ProcessClickInViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessClickInViewport(const FInputEventState& InputState, FSceneView& View)"
  },
  {
    "label": "ProcessDoubleClickInViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDoubleClickInViewport(const struct FInputEventState& InputState, FSceneView& View)"
  },
  {
    "label": "OnOrthoZoom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOrthoZoom(const struct FInputEventState& InputState, float Scale = 1.0f)"
  },
  {
    "label": "OnDollyPerspectiveCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDollyPerspectiveCamera(const struct FInputEventState& InputState)"
  },
  {
    "label": "OnChangeCameraSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChangeCameraSpeed(const struct FInputEventState& InputState)"
  },
  {
    "label": "StopTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTracking()"
  },
  {
    "label": "AbortTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortTracking()"
  },
  {
    "label": "EnableCameraLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableCameraLock(bool bEnable)"
  },
  {
    "label": "GetJoystickState()",
    "kind": "Method",
    "detail": "Function (FCachedJoystickState*)",
    "insertText": "GetJoystickState(const uint32 InControllerID)"
  },
  {
    "label": "GetActiveSafeFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetActiveSafeFrame(float& OutAspectRatio)"
  },
  {
    "label": "NudgeSelectedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NudgeSelectedObjects(const struct FInputEventState& InputState)"
  },
  {
    "label": "ShouldPanOrDollyCamera()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "ShouldPanOrDollyCamera()"
  },
  {
    "label": "ConditionalCheckHoveredHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalCheckHoveredHitProxy()"
  },
  {
    "label": "IsFlightCameraInputModeActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFlightCameraInputModeActive()"
  },
  {
    "label": "MoveViewportPerspectiveCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveViewportPerspectiveCamera(const FVector& InDrag, const FRotator& InRot, bool bDollyCamera = false)"
  },
  {
    "label": "UpdateCameraMovementFromJoystick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCameraMovementFromJoystick(const bool bRelativeMovement, FCameraControllerConfig& InConfig)"
  },
  {
    "label": "UpdateCameraMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCameraMovement(float DeltaTime)"
  },
  {
    "label": "UpdateLightingShowFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLightingShowFlags(FEngineShowFlags& InOutShowFlags)"
  },
  {
    "label": "ApplyEditorViewModeAdjustments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyEditorViewModeAdjustments(FEngineShowFlags& InOut)"
  },
  {
    "label": "DrawSafeFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSafeFrames(FViewport& Viewport, FSceneView& View, FCanvas& Canvas)"
  },
  {
    "label": "DrawSafeFrameQuad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSafeFrameQuad(FCanvas &Canvas, FVector2D V1, FVector2D V2)"
  },
  {
    "label": "GetEngineShowFlags()",
    "kind": "Method",
    "detail": "Function (FEngineShowFlags*)",
    "insertText": "GetEngineShowFlags()"
  },
  {
    "label": "HandleViewportStatCheckEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportStatCheckEnabled(const TCHAR* InName, bool& bOutCurrentEnabled, bool& bOutOthersEnabled)"
  },
  {
    "label": "HandleViewportStatEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportStatEnabled(const TCHAR* InName)"
  },
  {
    "label": "HandleViewportStatDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportStatDisabled(const TCHAR* InName)"
  },
  {
    "label": "HandleViewportStatDisableAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportStatDisableAll(const bool bInAnyViewport)"
  },
  {
    "label": "HandleWindowDPIScaleChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWindowDPIScaleChanged(TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "BeginCameraMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCameraMovement(bool bHasMovement)"
  },
  {
    "label": "EndCameraMovement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndCameraMovement()"
  },
  {
    "label": "GetMinimumOrthoZoom()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetMinimumOrthoZoom()"
  },
  {
    "label": "FRealtimeOverride()",
    "kind": "Method",
    "detail": "Function (public : const uint32 MaxCameraSpeeds ; FViewportStateGetter ImmersiveDelegate ; FViewportStateGetter VisibilityDelegate ; FViewport* Viewport ; FViewportCameraTransform ViewTransformPerspective ; FViewportCameraTransform ViewTransformOrthographic ; ELevelViewportType ViewportType ; FSceneViewStateReference ViewState ; TArray<FSceneViewStateReference> StereoViewStates ; FEngineShowFlags EngineShowFlags ; FEngineShowFlags LastEngineShowFlags ; FExposureSettings ExposureSettings ; float WireframeOpacity = 0 . 2 f ; FName CurrentBufferVisualizationMode ; FName CurrentNaniteVisualizationMode ; FName CurrentLumenVisualizationMode ; FName CurrentSubstrateVisualizationMode ; FName CurrentGroomVisualizationMode ; FName CurrentVirtualShadowMapVisualizationMode ; FName CurrentRayTracingDebugVisualizationMode ; FName CurrentGPUSkinCacheVisualizationMode ; int32 FramesSinceLastDraw ; int32 ViewIndex ; float ViewFOV ; float FOVAngle ; float AspectRatio ; bool bForcingUnlitForNewMap ; bool bWidgetAxisControlledByDrag ; bool bNeedsRedraw ; bool bNeedsLinkedRedraw ; bool bNeedsInvalidateHitProxy ; bool bUsingOrbitCamera ; bool bUseNumpadCameraControl ; bool bDisableInput ; bool bDrawAxes ; bool bDrawAxesGame ; bool bSetListenerPosition ; int8 LandscapeLODOverride ; bool bDrawVertices ; FEditorViewportViewModifierDelegate ViewModifiers ; bool bShouldApplyViewModifiers ; protected : TSharedPtr<FEditorModeTools> ModeTools ; FWidget* Widget ; bool bShowWidget ; FMouseDeltaTracker* MouseDeltaTracker ; bool bHasMouseMovedSinceClick ; FRequiredCursorState RequiredCursorVisibiltyAndAppearance ; TMap<int32,FCachedJoystickState*> JoystickStateMap ; FEditorCameraController* CameraController ; FCameraControllerUserImpulseData* CameraUserImpulseData ; double TimeForForceRedraw ; float FlightCameraSpeedScale ; bool bUseControllingActorViewInfo ; FMinimalViewInfo ControllingActorViewInfo ; TOptional<EAspectRatioAxisConstraint> ControllingActorAspectRatioAxisConstraint ; TArray<FPostProcessSettings> ControllingActorExtraPostProcessBlends ; TArray<float> ControllingActorExtraPostProcessBlendWeights ; uint32 LastMouseX ; uint32 LastMouseY ; uint32 CachedMouseX ; uint32 CachedMouseY ; int32 CachedLastMouseX = 0 ; int32 CachedLastMouseY = 0 ; bool bUserIsControllingAtmosphericLight0 = false ; bool bUserIsControllingAtmosphericLight1 = false ; float UserIsControllingAtmosphericLightTimer = 0 . 0 f ; FTransform UserControlledAtmosphericLightMatrix ; FIntPoint CurrentMousePos ; bool bIsTracking ; bool bDraggingByHandle ; FVector CurrentGestureDragDelta ; FRotator CurrentGestureRotDelta ; float GestureMoveForwardBackwardImpulse ; bool bForceAudioRealtime ; uint64 RealTimeUntilFrameNumber ; bool bIsRealtime ; bool bShowStats ; bool bHasAudioFocus ; bool bShouldCheckHitProxy ; bool bUsesDrawHelper ; bool bIsSimulateInEditorViewport ; bool bCameraLock ; bool bIsCameraMoving ; bool bIsCameraMovingOnTick ; FEditorCommonDrawHelper DrawHelper ; TWeakPtr<SEditorViewport> EditorViewportWidget ; TObjectPtr<UTypedElementViewportInteraction> ViewportInteraction ; FPreviewScene* PreviewScene ; FRotator DefaultOrbitRotation ; FVector DefaultOrbitLocation ; FVector DefaultOrbitZoom ; FVector DefaultOrbitLookAt ; struct FRealtimeOverride { FText SystemDisplayName ; bool bIsRealtime = false ;)",
    "insertText": "FRealtimeOverride(bool bInIsRealtime, FText InSystemDisplayName)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; TArray<FRealtimeOverride> RealtimeOverrides ; TUniqueFunction<)",
    "insertText": "void(FEngineShowFlags&)"
  },
  {
    "label": "ICustomTemporalUpscalerData()",
    "kind": "Method",
    "detail": "Function (protected : FVector2D MovingPreviewLightSavedScreenPos ; float MovingPreviewLightTimer ; public : const EViewModeIndex DefaultPerspectiveViewMode ; const EViewModeIndex DefaultOrthoViewMode ; bool bLockFlightCamera ; protected : FStatUnitData StatUnitData ; FStatHitchesData StatHitchesData ; TArray<FString> EnabledStats ; public : class ICustomTemporalUpscalerData { public : ~)",
    "insertText": "ICustomTemporalUpscalerData()"
  },
  {
    "label": "GetCustomTemporalUpscalerData()",
    "kind": "Method",
    "detail": "Function (} } ; TSharedPtr<ICustomTemporalUpscalerData>)",
    "insertText": "GetCustomTemporalUpscalerData()"
  },
  {
    "label": "Used()",
    "kind": "Method",
    "detail": "Function (CustomTemporalUpscalerData = InCustomTemporalUpscalerData ; } private : TSharedPtr<ICustomTemporalUpscalerData> CustomTemporalUpscalerData ; private : bool bIsPreviewingResolutionFraction = false ; TOptional<float> PreviewResolutionFraction ; enum class ESceneDPIMode { EditorDefault,EmulateLowDPI,HighDPI } ; ESceneDPIMode SceneDPIMode ; EViewModeIndex PerspViewModeIndex ; EViewModeIndex OrthoViewModeIndex ; int32 ViewModeParam ; FName ViewModeParamName ; TMap<int32,FName> ViewModeParamNameMap ; float NearPlane ; float FarPlane ; bool bInGameViewMode ; bool bInVREditViewMode ; bool bShouldInvalidateViewportWidget ; FSceneView* DragStartView ; FSceneViewFamily* DragStartViewFamily ; TArray<FIntPoint> CapturedMouseMoves ; TArray<FPrioritizedInputChord> PrioritizedInputChords ; bool bIsCurrentLevelEditingFocus = false ; bool bIsTrackingBeingStopped ; } ; class FEditorViewportStats { public : enum Category { CAT_PERSPECTIVE_KEYBOARD_WASD,CAT_PERSPECTIVE_KEYBOARD_UP_DOWN,CAT_PERSPECTIVE_KEYBOARD_FOV_ZOOM,CAT_PERSPECTIVE_MOUSE_PAN,CAT_PERSPECTIVE_MOUSE_DOLLY,CAT_PERSPECTIVE_MOUSE_SCROLL,CAT_PERSPECTIVE_MOUSE_ORBIT_ROTATION,CAT_PERSPECTIVE_MOUSE_ORBIT_PAN,CAT_PERSPECTIVE_MOUSE_ORBIT_ZOOM,CAT_PERSPECTIVE_GESTURE_SCROLL,CAT_PERSPECTIVE_GESTURE_MAGNIFY,CAT_ORTHOGRAPHIC_KEYBOARD_WASD,CAT_ORTHOGRAPHIC_KEYBOARD_UP_DOWN,CAT_ORTHOGRAPHIC_KEYBOARD_FOV_ZOOM,CAT_ORTHOGRAPHIC_MOUSE_PAN,CAT_ORTHOGRAPHIC_MOUSE_ZOOM,CAT_ORTHOGRAPHIC_MOUSE_SCROLL,CAT_ORTHOGRAPHIC_MOUSE_ORBIT_ROTATION,CAT_ORTHOGRAPHIC_MOUSE_ORBIT_PAN,CAT_ORTHOGRAPHIC_MOUSE_ORBIT_ZOOM,CAT_ORTHOGRAPHIC_GESTURE_SCROLL,CAT_ORTHOGRAPHIC_GESTURE_MAGNIFY,CAT_MAX } ; void)",
    "insertText": "Used(Category InCategory)"
  },
  {
    "label": "BeginFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFrame()"
  },
  {
    "label": "Using()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Using(Category InCategory)"
  },
  {
    "label": "NoOpUsing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoOpUsing()"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrame()"
  },
  {
    "label": "SendUsageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendUsageData()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Initialize()"
  }
]