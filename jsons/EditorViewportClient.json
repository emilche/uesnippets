[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FCachedJoystickState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCachedJoystickState"
  },
  {
    "label": "FCameraControllerConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCameraControllerConfig"
  },
  {
    "label": "FCameraControllerUserImpulseData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCameraControllerUserImpulseData"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FDragTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragTool"
  },
  {
    "label": "FEditorCameraController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorCameraController"
  },
  {
    "label": "FEditorModeTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeTools"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdMode"
  },
  {
    "label": "FMouseDeltaTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMouseDeltaTracker"
  },
  {
    "label": "FPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreviewScene"
  },
  {
    "label": "FTypedElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementHandle"
  },
  {
    "label": "IAssetFactoryInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetFactoryInterface"
  },
  {
    "label": "SEditorViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditorViewport"
  },
  {
    "label": "UActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorFactory"
  },
  {
    "label": "UTypedElementViewportInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementViewportInteraction"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGizmoState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGizmoState"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "UNREALED_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNREALED_API"
  },
  {
    "label": "FPrioritizedInputChord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrioritizedInputChord"
  },
  {
    "label": "FInputEventState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEventState"
  },
  {
    "label": "FViewportCursorLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportCursorLocation"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "FDropQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDropQuery"
  },
  {
    "label": "FViewportCameraTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportCameraTransform"
  },
  {
    "label": "FCurveSequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveSequence"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "FEditorViewportViewModifierParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorViewportViewModifierParams"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FMouseDeltaTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMouseDeltaTracker"
  },
  {
    "label": "FInputEventState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEventState"
  },
  {
    "label": "FDropObjectOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDropObjectOptions"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "as"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has"
  },
  {
    "label": "FRequiredCursorState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRequiredCursorState"
  },
  {
    "label": "FInputEventState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEventState"
  },
  {
    "label": "FInputEventState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEventState"
  },
  {
    "label": "FInputEventState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEventState"
  },
  {
    "label": "FInputEventState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEventState"
  },
  {
    "label": "FInputEventState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEventState"
  },
  {
    "label": "FInputEventState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEventState"
  },
  {
    "label": "FRealtimeOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRealtimeOverride"
  },
  {
    "label": "ICustomTemporalUpscalerData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICustomTemporalUpscalerData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEditorViewportStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportStats"
  },
  {
    "label": "Category",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Category"
  },
  {
    "label": "FViewportNavigationCommands()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FViewportNavigationCommands()"
  },
  {
    "label": "IsButtonPressed()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsButtonPressed( EKeys::LeftMouseButton )"
  },
  {
    "label": "IsButtonPressed()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsButtonPressed( EKeys::MiddleMouseButton )"
  },
  {
    "label": "IsButtonPressed()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsButtonPressed( EKeys::RightMouseButton )"
  },
  {
    "label": "IsButtonPressed()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsButtonPressed( EKeys::SpaceBar )"
  },
  {
    "label": "FViewportCursorLocation()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FViewportCursorLocation( const FSceneView* View, FEditorViewportClient* InViewportClient, int32 X, int32 Y )"
  },
  {
    "label": "FViewportClick()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FViewportClick( const FSceneView* View, FEditorViewportClient* ViewportClient, FKey InKey, EInputEvent InEvent, int32 X, int32 Y )"
  },
  {
    "label": "GetCursorPos()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetCursorPos()"
  },
  {
    "label": "FViewportCameraTransform()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FViewportCameraTransform()"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocation( const FVector& Position )"
  },
  {
    "label": "IsPlaying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlaying()"
  },
  {
    "label": "TransitionToLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransitionToLocation( const FVector& InDesiredLocation, TWeakPtr<SWidget> EditorViewportWidget, bool bInstant )"
  },
  {
    "label": "UpdateTransition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateTransition()"
  },
  {
    "label": "FEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FEditorViewportClient(FEditorModeTools* InModeTools, FPreviewScene* InPreviewScene = nullptr, const TWeakPtr<SEditorViewport>& InEditorViewportWidget = nullptr)"
  },
  {
    "label": "AddRealtimeOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRealtimeOverride(bool bShouldBeRealtime, FText SystemDisplayName)"
  },
  {
    "label": "RemoveRealtimeOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveRealtimeOverride(FText SystemDisplayName, bool bCheckMissingOverride = true)"
  },
  {
    "label": "PopRealtimeOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopRealtimeOverride()"
  },
  {
    "label": "ToggleRealtime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToggleRealtime()"
  },
  {
    "label": "SetRealtime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRealtime(bool bInRealtime)"
  },
  {
    "label": "SetRealtime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRealtime(bool bInRealtime, bool bStoreCurrentValue)"
  },
  {
    "label": "RestoreRealtime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreRealtime(const bool bAllowDisable = false)"
  },
  {
    "label": "SetCameraSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraSetup(const FVector& LocationForOrbiting, const FRotator& InOrbitRotation, const FVector& InOrbitZoom, const FVector& InOrbitLookAt, const FVector& InViewLocation, const FRotator &InViewRotation )"
  },
  {
    "label": "SetCameraLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraLock()"
  },
  {
    "label": "SetShowGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowGrid()"
  },
  {
    "label": "SetShowBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowBounds(bool bShow)"
  },
  {
    "label": "ToggleShowBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowBounds()"
  },
  {
    "label": "SetShowCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowCollision()"
  },
  {
    "label": "PeformDefaultCameraMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeformDefaultCameraMovement(FVector& Drag, FRotator& Rot, FVector& Scale)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (errors)",
    "insertText": "check(InOrthoZoom != 0)"
  },
  {
    "label": "UnrealUnitsToSiUnits()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "UnrealUnitsToSiUnits(float UnrealUnits)"
  },
  {
    "label": "SetInitialViewTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitialViewTransform(ELevelViewportType ViewportType, const FVector& ViewLocation, const FRotator& ViewRotation, float InOrthoZoom )"
  },
  {
    "label": "TakeHighResScreenShot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeHighResScreenShot()"
  },
  {
    "label": "OnEditorModeIDChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorModeIDChanged(const FEditorModeID& EditorModeID, bool bIsEntering)"
  },
  {
    "label": "GetCursorWorldLocationFromMousePos()",
    "kind": "Method",
    "detail": "Function (FViewportCursorLocation)",
    "insertText": "GetCursorWorldLocationFromMousePos()"
  },
  {
    "label": "Internal_InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Internal_InputKey(const FInputKeyEventArgs& EventArgs)"
  },
  {
    "label": "Internal_InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Internal_InputAxis(FViewport* Viewport, FInputDeviceId DeviceID, FKey Key, float Delta, float DeltaTime, int32 NumSamples=1, bool bGamepad=false)"
  },
  {
    "label": "ProcessClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessClick(FSceneView& View, HHitProxy* HitProxy, FKey Key, EInputEvent Event, uint32 HitX, uint32 HitY)"
  },
  {
    "label": "InputWidgetDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputWidgetDelta(FViewport* InViewport, EAxisList::Type CurrentAxis, FVector& Drag, FRotator& Rot, FVector& Scale)"
  },
  {
    "label": "SetWidgetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetMode(UE::Widget::EWidgetMode NewMode)"
  },
  {
    "label": "SetWidgetCoordSystemSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetCoordSystemSpace( ECoordSystem NewCoordSystem )"
  },
  {
    "label": "SetCurrentWidgetAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentWidgetAxis( EAxisList::Type InAxis )"
  },
  {
    "label": "AdjustTransformWidgetSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustTransformWidgetSize(const int32 SizeDelta)"
  },
  {
    "label": "SetupViewForRendering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupViewForRendering( FSceneViewFamily& ViewFamily, FSceneView& View )"
  },
  {
    "label": "DrawCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCanvas(FViewport& InViewport, FSceneView& View, FCanvas& Canvas)"
  },
  {
    "label": "DrawPreviewLightVisualization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawPreviewLightVisualization(const FSceneView* View, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "RenderDragTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDragTool(const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "UpdateMouseDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMouseDelta()"
  },
  {
    "label": "UpdateGestureDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGestureDelta()"
  },
  {
    "label": "MakeDragTool()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FDragTool>)",
    "insertText": "MakeDragTool( EDragTool::Type DragToolType )"
  },
  {
    "label": "CheckHoveredHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckHoveredHitProxy( HHitProxy* HoveredHitProxy )"
  },
  {
    "label": "FDropQuery()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FDropQuery()"
  },
  {
    "label": "SetViewMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewMode(EViewModeIndex InViewModeIndex)"
  },
  {
    "label": "SetViewModes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewModes(const EViewModeIndex InPerspViewModeIndex, const EViewModeIndex InOrthoViewModeIndex)"
  },
  {
    "label": "SetViewModeParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewModeParam(int32 InViewModeParam)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate(bool bInvalidateChildViews=true, bool bInvalidateHitProxies=true)"
  },
  {
    "label": "GetViewportDimensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetViewportDimensions( FIntPoint& OutOrigin, FIntPoint& OutSize )"
  },
  {
    "label": "TranslateDelta()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "TranslateDelta( FKey InKey, float InDelta, bool InNudge )"
  },
  {
    "label": "SetViewportType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportType( ELevelViewportType InViewportType )"
  },
  {
    "label": "RotateViewportType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateViewportType()"
  },
  {
    "label": "FocusViewportOnBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusViewportOnBox( const FBox& BoundingBox, bool bInstant = false )"
  },
  {
    "label": "CenterViewportAtPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CenterViewportAtPoint(const FVector& NewLookAt, bool bInstant = false)"
  },
  {
    "label": "InputAxisForOrbit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InputAxisForOrbit(FViewport* Viewport, const FVector& DragDelta, FVector& Drag, FRotator& Rot)"
  },
  {
    "label": "InputTakeScreenshot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputTakeScreenshot(FViewport* Viewport, FKey Key, EInputEvent Event)"
  },
  {
    "label": "OpenScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenScreenshot( FString SourceFilePath )"
  },
  {
    "label": "TakeScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeScreenshot(FViewport* Viewport, bool bInvalidateViewport)"
  },
  {
    "label": "ToggleOrbitCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleOrbitCamera( bool bEnableOrbitCamera )"
  },
  {
    "label": "SetViewLocationForOrbiting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewLocationForOrbiting(const FVector& LookAtPoint, float DistanceToCamera = 256.f )"
  },
  {
    "label": "MoveViewportCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveViewportCamera( const FVector& InDrag, const FRotator& InRot, bool bDollyCamera = false )"
  },
  {
    "label": "RegisterPrioritizedInputChord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPrioritizedInputChord(const FPrioritizedInputChord& InInputCord)"
  },
  {
    "label": "UnregisterPrioritizedInputChord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPrioritizedInputChord(const FName InInputCordName)"
  },
  {
    "label": "MarkMouseMovedSinceClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkMouseMovedSinceClick()"
  },
  {
    "label": "SetRequiredCursorOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequiredCursorOverride( bool WantOverride, EMouseCursor::Type RequiredCursor = EMouseCursor::Default )"
  },
  {
    "label": "SetWidgetModeOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetModeOverride(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "SetCameraSpeedSetting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraSpeedSetting(int32 SpeedSetting)"
  },
  {
    "label": "SetCameraSpeedScalar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraSpeedScalar(float SpeedScalar)"
  },
  {
    "label": "TakeOwnershipOfModeManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeOwnershipOfModeManager(TSharedPtr<FEditorModeTools>& ModeManagerPtr)"
  },
  {
    "label": "DrawBoundingBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBoundingBox(FBox &Box, FCanvas* InCanvas, const FSceneView* InView, const FViewport* InViewport, const FLinearColor& InColor, const bool bInDrawBracket, const FString &InLabelText)"
  },
  {
    "label": "SetGameView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGameView(bool bGameViewEnable)"
  },
  {
    "label": "SetVREditView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVREditView(bool bGameViewEnable)"
  },
  {
    "label": "OverrideNearClipPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideNearClipPlane(float InNearPlane)"
  },
  {
    "label": "OverrideFarClipPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideFarClipPlane(const float InFarPlane)"
  },
  {
    "label": "UpdateHiddenCollisionDrawing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHiddenCollisionDrawing()"
  },
  {
    "label": "GetSceneDepthAtLocation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSceneDepthAtLocation(int32 X, int32 Y)"
  },
  {
    "label": "GetHitProxyObjectLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetHitProxyObjectLocation(int32 X, int32 Y)"
  },
  {
    "label": "ShowWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowWidget(const bool bShow)"
  },
  {
    "label": "HandleToggleShowFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleToggleShowFlag(FEngineShowFlags::EShowFlag EngineShowFlagIndex)"
  },
  {
    "label": "ChangeBufferVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeBufferVisualizationMode( FName InName )"
  },
  {
    "label": "ChangeNaniteVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeNaniteVisualizationMode(FName InName)"
  },
  {
    "label": "ChangeLumenVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeLumenVisualizationMode(FName InName)"
  },
  {
    "label": "ChangeSubstrateVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeSubstrateVisualizationMode(FName InName)"
  },
  {
    "label": "ChangeGroomVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeGroomVisualizationMode(FName InName)"
  },
  {
    "label": "ChangeVirtualShadowMapVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeVirtualShadowMapVisualizationMode(FName InName)"
  },
  {
    "label": "ChangeActorColorationVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeActorColorationVisualizationMode(FName InName)"
  },
  {
    "label": "ChangeRayTracingDebugVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeRayTracingDebugVisualizationMode(FName InName)"
  },
  {
    "label": "ChangeGPUSkinCacheVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeGPUSkinCacheVisualizationMode(FName InName)"
  },
  {
    "label": "SetPreviewingScreenPercentage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewingScreenPercentage(bool bIsPreviewing)"
  },
  {
    "label": "SetPreviewScreenPercentage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewScreenPercentage(int32 PreviewScreenPercentage)"
  },
  {
    "label": "SetLowDPIPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLowDPIPreview(bool LowDPIPreview)"
  },
  {
    "label": "DisableOverrideEngineShowFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableOverrideEngineShowFlags()"
  },
  {
    "label": "InvalidateViewportWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateViewportWidget()"
  },
  {
    "label": "ApplyDeltaToRotateWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeltaToRotateWidget(const FRotator& InRot)"
  },
  {
    "label": "RedrawAllViewportsIntoThisScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedrawAllViewportsIntoThisScene()"
  },
  {
    "label": "UpdateAndApplyCursorVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAndApplyCursorVisibility()"
  },
  {
    "label": "UpdateRequiredCursorVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRequiredCursorVisibility()"
  },
  {
    "label": "SetRequiredCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequiredCursor(const bool bHardwareCursorVisible, const bool bSoftwareCursorVisible)"
  },
  {
    "label": "ApplyRequiredCursorVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRequiredCursorVisibility(  bool bUpdateSoftwareCursorPostion = false )"
  },
  {
    "label": "DrawAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAxes(FViewport* Viewport,FCanvas* Canvas, const FRotator* InRotation = NULL, EAxisList::Type InAxis = EAxisList::XYZ)"
  },
  {
    "label": "DrawScaleUnits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawScaleUnits(FViewport* Viewport, FCanvas* Canvas, const FSceneView& InView)"
  },
  {
    "label": "StartTrackingDueToInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTrackingDueToInput( const struct FInputEventState& InputState, FSceneView& View )"
  },
  {
    "label": "ProcessClickInViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessClickInViewport( const FInputEventState& InputState, FSceneView& View )"
  },
  {
    "label": "ProcessDoubleClickInViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDoubleClickInViewport( const struct FInputEventState& InputState, FSceneView& View )"
  },
  {
    "label": "OnOrthoZoom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOrthoZoom( const struct FInputEventState& InputState, float Scale = 1.0f )"
  },
  {
    "label": "OnDollyPerspectiveCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDollyPerspectiveCamera( const struct FInputEventState& InputState )"
  },
  {
    "label": "OnChangeCameraSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChangeCameraSpeed( const struct FInputEventState& InputState )"
  },
  {
    "label": "StopTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTracking()"
  },
  {
    "label": "AbortTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortTracking()"
  },
  {
    "label": "EnableCameraLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableCameraLock(bool bEnable)"
  },
  {
    "label": "CalculateEditorConstrainedViewRect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CalculateEditorConstrainedViewRect(FSlateRect& OutSafeFrameRect, FViewport* InViewport, const float DPIScale)"
  },
  {
    "label": "ConditionalCheckHoveredHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalCheckHoveredHitProxy()"
  },
  {
    "label": "MoveViewportPerspectiveCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveViewportPerspectiveCamera( const FVector& InDrag, const FRotator& InRot, bool bDollyCamera = false )"
  },
  {
    "label": "UpdateCameraMovementFromJoystick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCameraMovementFromJoystick(const bool bRelativeMovement, FCameraControllerConfig& InConfig)"
  },
  {
    "label": "UpdateCameraMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCameraMovement( float DeltaTime )"
  },
  {
    "label": "UpdateLightingShowFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLightingShowFlags( FEngineShowFlags& InOutShowFlags )"
  },
  {
    "label": "DrawSafeFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSafeFrames(FViewport& Viewport, FSceneView& View, FCanvas& Canvas)"
  },
  {
    "label": "DrawSafeFrameQuad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSafeFrameQuad( FCanvas &Canvas, FVector2D V1, FVector2D V2 )"
  },
  {
    "label": "SetStatEnabled()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SetStatEnabled(const TCHAR* InName, const bool bEnable, const bool bAll = false)"
  },
  {
    "label": "HandleViewportStatCheckEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportStatCheckEnabled(const TCHAR* InName, bool& bOutCurrentEnabled, bool& bOutOthersEnabled)"
  },
  {
    "label": "HandleViewportStatEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportStatEnabled(const TCHAR* InName)"
  },
  {
    "label": "HandleViewportStatDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportStatDisabled(const TCHAR* InName)"
  },
  {
    "label": "HandleViewportStatDisableAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportStatDisableAll(const bool bInAnyViewport)"
  },
  {
    "label": "HandleWindowDPIScaleChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWindowDPIScaleChanged(TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "Used()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Used(Category InCategory)"
  },
  {
    "label": "BeginFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFrame()"
  },
  {
    "label": "Using()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Using(Category InCategory)"
  },
  {
    "label": "NoOpUsing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoOpUsing()"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrame()"
  },
  {
    "label": "SendUsageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendUsageData()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  }
]