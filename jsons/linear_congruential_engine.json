[
  {
    "label": "__lce_alg_picker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__lce_alg_picker"
  },
  {
    "label": "__lce_ta",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__lce_ta"
  },
  {
    "label": "_UIntType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_UIntType"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "_Sseq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sseq"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANDOM_LINEAR_CONGRUENTIAL_ENGINE_H # define _LIBCPP___RANDOM_LINEAR_CONGRUENTIAL_ENGINE_H # include<__config> # include<__random / is_seed_sequence . h> # include<cstdint> # include<iosfwd> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_PUSH_MACROS #include <__undef_macros> _LIBCPP_BEGIN_NAMESPACE_STD template <unsigned long long __a, unsigned long long __c, unsigned long long __m, unsigned long long _Mp, bool _MightOverflow = (__a != 0 && __m != 0 && __m-1 > (_Mp-__c)/__a), bool _OverflowOK = ((__m | (__m-1)) > __m), bool _SchrageOK = (__a != 0 && __m != 0 && __m % __a <= __m / __a)"
  },
  {
    "label": "__m()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_CONSTEXPR const bool __use_schrage = _MightOverflow&& ! _OverflowOK&& _SchrageOK ; } ; template<unsigned long long __a,unsigned long long __c,unsigned long long __m,unsigned long long _Mp,bool _UseSchrage = __lce_alg_picker<__a,__c,__m,_Mp>::__use_schrage> struct __lce_ta ; template<unsigned long long __a,unsigned long long __c,unsigned long long __m> struct __lce_ta<__a,__c,)",
    "insertText": "__m(unsigned long long)(~0)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (typedef unsigned long long result_type ; _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "next(result_type __x)"
  },
  {
    "label": "__a()",
    "kind": "Method",
    "detail": "Function (const result_type __q = __m / __a ; const result_type __r = __m % __a ; const result_type __t0 =)",
    "insertText": "__a(__x % __q)"
  },
  {
    "label": "__r()",
    "kind": "Method",
    "detail": "Function (const result_type __t1 =)",
    "insertText": "__r(__x / __q)"
  },
  {
    "label": "__t0()",
    "kind": "Method",
    "detail": "Function (__x =)",
    "insertText": "__t0(__t0 < __t1)"
  },
  {
    "label": "__c()",
    "kind": "Method",
    "detail": "Function (__x + =)",
    "insertText": "__c(__x >= __m - __c)"
  },
  {
    "label": "__c()",
    "kind": "Method",
    "detail": "Function (} } ; template<unsigned long long __a,unsigned long long __c> struct __lce_ta<__a,)",
    "insertText": "__c(unsigned long long)(~0)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (const result_type __a = static_cast<)",
    "insertText": "result_type(_Ap)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (const result_type __c = static_cast<)",
    "insertText": "result_type(_Cp)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (const result_type __m = static_cast<)",
    "insertText": "result_type(_Mp)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (} } ; template<unsigned long long _Ap,unsigned long long _Cp> struct __lce_ta<_Ap,_Cp,0,)",
    "insertText": "unsigned(~0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _UIntType,_UIntType __a,_UIntType __c,_UIntType __m> class _LIBCPP_TEMPLATE_VIS linear_congruential_engine ; template<class _CharT,class _Traits,class _Up,_Up _Ap,_Up _Cp,_Up _Np> _LIBCPP_INLINE_VISIBILITY basic_ostream<_CharT,_Traits>&)",
    "insertText": "operator(basic_ostream<_CharT, _Traits>& __os, const linear_congruential_engine<_Up, _Ap, _Cp, _Np>&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _CharT,class _Traits,class _Up,_Up _Ap,_Up _Cp,_Up _Np> basic_istream<_CharT,_Traits>&)",
    "insertText": "operator(basic_istream<_CharT, _Traits>& __is, linear_congruential_engine<_Up, _Ap, _Cp, _Np>& __x)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (template<class _UIntType,_UIntType __a,_UIntType __c,_UIntType __m> class _LIBCPP_TEMPLATE_VIS linear_congruential_engine { public : typedef _UIntType result_type ; private : result_type __x_ ; _LIBCPP_CONSTEXPR const result_type _Mp =)",
    "insertText": "result_type(~0)"
  },
  {
    "label": "_UIntType()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_CONSTEXPR const result_type _Min = __c = = 0 u ? 1 u : 0 u ; _LIBCPP_CONSTEXPR const result_type _Max = __m -)",
    "insertText": "_UIntType(1u)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_CONSTEXPR const result_type multiplier = __a ; _LIBCPP_CONSTEXPR const result_type increment = __c ; _LIBCPP_CONSTEXPR const result_type modulus = __m ; _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR result_type)",
    "insertText": "min()"
  },
  {
    "label": "linear_congruential_engine()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "linear_congruential_engine(result_type __s)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "seed(__s)"
  },
  {
    "label": "linear_congruential_engine()",
    "kind": "Method",
    "detail": "Function (} # else _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "linear_congruential_engine(result_type __s = default_seed)"
  },
  {
    "label": "linear_congruential_engine()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _Sseq> _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "linear_congruential_engine(_Sseq& __q, typename enable_if<__is_seed_sequence<_Sseq, linear_congruential_engine>::value>::type* = 0)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "seed(__q)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "seed(result_type __s = default_seed)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "seed(integral_constant<bool, __m == 0>(), integral_constant<bool, __c == 0>(), __s)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (} template<class _Sseq> _LIBCPP_INLINE_VISIBILITY enable_if<__is_seed_sequence<_Sseq,linear_congruential_engine>::value,void>::type)",
    "insertText": "seed(_Sseq& __q)"
  },
  {
    "label": "__seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__seed(__q, integral_constant<unsigned, 1 + (__m == 0 ? (sizeof(result_type) * __CHAR_BIT__ - 1)/32 : (__m > 0x100000000ull))>())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "operator()()"
  },
  {
    "label": "discard()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "discard(unsigned long long __z)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(const linear_congruential_engine& __x, const linear_congruential_engine& __y)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (} private : _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "seed(true_type, true_type, result_type __s)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (__x_ = __s = = 0 ? 1 : __s ; } _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "seed(true_type, false_type, result_type __s)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (__x_ = __s ; } _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "seed(false_type, true_type, result_type __s)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (__x_ = __s % __m = = 0 ? 1 : __s % __m ; } _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "seed(false_type, false_type, result_type __s)"
  },
  {
    "label": "__seed()",
    "kind": "Method",
    "detail": "Function (__x_ = __s % __m ; } template<class _Sseq> void)",
    "insertText": "__seed(_Sseq& __q, integral_constant<unsigned, 1>)"
  },
  {
    "label": "__seed()",
    "kind": "Method",
    "detail": "Function (template<class _Sseq> void)",
    "insertText": "__seed(_Sseq& __q, integral_constant<unsigned, 2>)"
  },
  {
    "label": "generate()",
    "kind": "Method",
    "detail": "Function (const unsigned __k = 1 ; uint32_t __ar [ __k + 3 ] ; __q .)",
    "insertText": "generate(__ar, __ar + __k + 3)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (result_type __s = static_cast<)",
    "insertText": "result_type(__ar[3] % __m)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (__x_ = __c = = 0&& __s = = 0 ?)",
    "insertText": "result_type(1)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (result_type __s = static_cast<)",
    "insertText": "result_type((__ar[3] + ((uint64_t)__ar[4] << 32)) % __m)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT,class _Traits,class _UIntType,_UIntType __a,_UIntType __c,_UIntType __m> _LIBCPP_INLINE_VISIBILITY basic_ostream<_CharT,_Traits>&)",
    "insertText": "operator(basic_ostream<_CharT, _Traits>& __os, const linear_congruential_engine<_UIntType, __a, __c, __m>& __x)"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (__save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__os)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_ostream<_CharT,_Traits> _Ostream ; __os .)",
    "insertText": "flags(_Ostream::dec | _Ostream::left)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (__os .)",
    "insertText": "fill(__os.widen(' '))"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (__save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__is)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_istream<_CharT,_Traits> _Istream ; __is .)",
    "insertText": "flags(_Istream::dec | _Istream::skipws)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_UIntType __t ; __is>> __t ;)",
    "insertText": "if(!__is.fail())"
  }
]