[
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "ICookOnTheFlyNetworkServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyNetworkServer"
  },
  {
    "label": "ICookOnTheFlyClientConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyClientConnection"
  },
  {
    "label": "FCookOnTheFlyRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookOnTheFlyRequest"
  },
  {
    "label": "FNetworkFileServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkFileServer"
  },
  {
    "label": "FCookOnTheFlyNetworkFileServerConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookOnTheFlyNetworkFileServerConnection"
  },
  {
    "label": "FNetworkFileServer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" HAL / Runnable . h \" # include \" INetworkFileServer . h \" # include \" INetworkFileSystemModule . h \" class FInternetAddr ; class FSocket ; class ITargetPlatform ; namespace UE::Cook { class ICookOnTheFlyNetworkServer ; class ICookOnTheFlyClientConnection ; class FCookOnTheFlyRequest ; } class FNetworkFileServer : public INetworkFileServer { public :)",
    "insertText": "FNetworkFileServer(FNetworkFileServerOptions InFileServerOptions, TSharedRef<UE::Cook::ICookOnTheFlyNetworkServer> InCookOnTheFlyNetworkServer)"
  },
  {
    "label": "FNetworkFileServer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNetworkFileServer()"
  },
  {
    "label": "IsItReadyToAcceptConnections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsItReadyToAcceptConnections(void)"
  },
  {
    "label": "GetAddressList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAddressList(TArray<TSharedPtr<FInternetAddr> >& OutAddresses)"
  },
  {
    "label": "GetSupportedProtocol()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSupportedProtocol()"
  },
  {
    "label": "NumConnections()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumConnections()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "OnClientConnected()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnClientConnected(UE::Cook::ICookOnTheFlyClientConnection& Connection)"
  },
  {
    "label": "OnClientDisconnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClientDisconnected(UE::Cook::ICookOnTheFlyClientConnection& Connection)"
  },
  {
    "label": "HandleRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRequest(UE::Cook::ICookOnTheFlyClientConnection& Connection, const UE::Cook::FCookOnTheFlyRequest& Request)"
  }
]