[
  {
    "label": "FDefaultBitArrayAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultBitArrayAllocator"
  },
  {
    "label": "FGestureDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGestureDetector"
  },
  {
    "label": "FLongPressData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLongPressData"
  },
  {
    "label": "IsGestureSupported()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / BitArray . h \" # include \" GenericPlatform / GenericApplicationMessageHandler . h \" # include \" HAL / Platform . h \" # include \" InputCoreTypes . h \" # include \" Math / Vector2D . h \" # include \" Misc / Optional . h \" class FDefaultBitArrayAllocator ; class FGestureDetector { public : double LongPressSeconds ; float LongPressAllowedMovement ; public : bool)",
    "insertText": "IsGestureSupported(EGestureEvent Gesture)"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTouchStarted(int32 TouchIndex, const FVector2D& Location)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTouchEnded(int32 TouchIndex, const FVector2D& Location)"
  },
  {
    "label": "OnTouchMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTouchMoved(int32 TouchIndex, const FVector2D& Location)"
  },
  {
    "label": "GenerateGestures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateGestures(FGenericApplicationMessageHandler& MessageHandler, const TBitArray<FDefaultBitArrayAllocator>& EnabledGestures)"
  },
  {
    "label": "FLongPressData()",
    "kind": "Method",
    "detail": "Function (private : struct FLongPressData { TOptional<double> Time ; FVector2D Location ;)",
    "insertText": "FLongPressData() : Time() , Location(0, 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (Location =)",
    "insertText": "FVector2D(0, 0)"
  }
]