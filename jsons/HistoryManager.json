[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FSelectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectionData"
  },
  {
    "label": "FHistoryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHistoryData"
  },
  {
    "label": "FHistoryManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHistoryManager"
  },
  {
    "label": "PREDICATE_CLASS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PREDICATE_CLASS"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Internationalization / Text . h \" # include \" Math / UnrealMathSSE . h \" # include \" SourcesData . h \" # include \" UObject / NameTypes . h \" class FMenuBuilder ; struct FSelectionData { TSet<FName> SelectedVirtualPaths ; int32)",
    "insertText": "Num()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "AddMissingVirtualPaths()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMissingVirtualPaths(const FSelectionData& SelectionData)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SelectedVirtualPaths .)",
    "insertText": "Add(SelectedVirtualPath)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } } ; struct FHistoryData { FText HistoryDesc ; FSourcesData SourcesData ; FSelectionData SelectionData ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnApplyHistoryData, const FHistoryData&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnUpdateHistoryData, FHistoryData&)"
  },
  {
    "label": "FHistoryManager()",
    "kind": "Method",
    "detail": "Function (class FHistoryManager { public :)",
    "insertText": "FHistoryManager()"
  },
  {
    "label": "SetOnApplyHistoryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnApplyHistoryData(const FOnApplyHistoryData& InOnApplyHistoryData)"
  },
  {
    "label": "SetOnUpdateHistoryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnUpdateHistoryData(const FOnUpdateHistoryData& InOnUpdateHistoryData)"
  },
  {
    "label": "GoBack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GoBack()"
  },
  {
    "label": "GoForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GoForward()"
  },
  {
    "label": "AddHistoryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHistoryData()"
  },
  {
    "label": "UpdateHistoryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHistoryData()"
  },
  {
    "label": "CanGoForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGoForward()"
  },
  {
    "label": "CanGoBack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGoBack()"
  },
  {
    "label": "GetBackDesc()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBackDesc()"
  },
  {
    "label": "GetForwardDesc()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetForwardDesc()"
  },
  {
    "label": "GetAvailableHistoryMenuItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAvailableHistoryMenuItems(bool bGetPrior, FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "RewriteHistoryData()",
    "kind": "Method",
    "detail": "Function (template<class PREDICATE_CLASS> void)",
    "insertText": "RewriteHistoryData(const PREDICATE_CLASS& Predicate)"
  },
  {
    "label": "Predicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Predicate(HistoryDataEntry)"
  },
  {
    "label": "RemoveHistoryData()",
    "kind": "Method",
    "detail": "Function (} } template<class PREDICATE_CLASS> void)",
    "insertText": "RemoveHistoryData(const PREDICATE_CLASS& Predicate)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (HistoryData .)",
    "insertText": "RemoveAt(HistoryIndex)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (CurrentHistoryIndex =)",
    "insertText": "Max(0, CurrentHistoryIndex - 1)"
  },
  {
    "label": "ApplyCurrentHistoryData()",
    "kind": "Method",
    "detail": "Function (} HistoryIndex - - ; } } } private : void)",
    "insertText": "ApplyCurrentHistoryData()"
  },
  {
    "label": "UpdateCurrentHistoryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurrentHistoryData()"
  },
  {
    "label": "ExecuteJumpToHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteJumpToHistory(int32 HistoryIndex)"
  }
]