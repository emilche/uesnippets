[
  {
    "label": "IsDataEdge()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_CORD_DATA_EDGE_H_ # define ABSL_STRINGS_INTERNAL_CORD_DATA_EDGE_H_ # include<cassert> # include<cstddef> # include \" absl / base / config . h \" # include \" absl / strings / internal / cord_internal . h \" # include \" absl / strings / internal / cord_rep_flat . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace cord_internal { bool)",
    "insertText": "IsDataEdge(const CordRep* edge)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(edge != nullptr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IsDataEdge(edge))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t offset = 0 ; const size_t length = edge -> length ;)",
    "insertText": "if(edge->IsSubstring())"
  },
  {
    "label": "substring()",
    "kind": "Method",
    "detail": "Function (start)",
    "insertText": "substring()"
  },
  {
    "label": "flat()",
    "kind": "Method",
    "detail": "Function (} return edge -> tag> = FLAT ? absl::string_view { edge ->)",
    "insertText": "flat()->Data()"
  },
  {
    "label": "external()",
    "kind": "Method",
    "detail": "Function (base + offset, length})",
    "insertText": "external()"
  }
]