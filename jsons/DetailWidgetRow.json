[
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "FResetToDefaultOverride",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResetToDefaultOverride"
  },
  {
    "label": "IDetailDragDropHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailDragDropHandler"
  },
  {
    "label": "FDetailWidgetDecl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetDecl"
  },
  {
    "label": "SInvalidDetailWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SInvalidDetailWidget"
  },
  {
    "label": "FCustomMenuData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomMenuData"
  },
  {
    "label": "FDetailWidgetDecl()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IDetailPropertyRow . h \" # include \" PropertyHandle . h \" # include \" Framework / Commands / UIAction . h \" # include \" Layout / Visibility . h \" # include \" Misc / Attribute . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Layout / SSpacer . h \" # include \" DetailCategoryBuilder . h \" # include \" PropertyEditorCopyPaste . h \" class FDetailWidgetRow ; class FResetToDefaultOverride ; class IDetailDragDropHandler ; class FDetailWidgetDecl { public :)",
    "insertText": "FDetailWidgetDecl(class FDetailWidgetRow& InParentDecl, float InMinWidth, float InMaxWidth, EHorizontalAlignment InHAlign, EVerticalAlignment InVAlign ) : Widget( SNew( SInvalidDetailWidget ) ) , HorizontalAlignment( InHAlign ) , VerticalAlignment( InVAlign ) , MinWidth( InMinWidth ) , MaxWidth( InMaxWidth ) , ParentDecl( &InParentDecl)"
  },
  {
    "label": "FDetailWidgetDecl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDetailWidgetDecl(class FDetailWidgetRow& InParentDecl, const FDetailWidgetDecl& Other ) : Widget( Other.Widget ) , HorizontalAlignment( Other.HorizontalAlignment ) , VerticalAlignment( Other.VerticalAlignment ) , MinWidth( Other.MinWidth ) , MaxWidth( Other.MaxWidth ) , ParentDecl( &InParentDecl)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FDetailWidgetRow&)",
    "insertText": "operator(TSharedRef<SWidget> InWidget)"
  },
  {
    "label": "VAlign()",
    "kind": "Method",
    "detail": "Function (Widget = InWidget ; return* ParentDecl ; } FDetailWidgetDecl&)",
    "insertText": "VAlign(EVerticalAlignment InAlignment)"
  },
  {
    "label": "HAlign()",
    "kind": "Method",
    "detail": "Function (VerticalAlignment = InAlignment ; return* this ; } FDetailWidgetDecl&)",
    "insertText": "HAlign(EHorizontalAlignment InAlignment)"
  },
  {
    "label": "MinDesiredWidth()",
    "kind": "Method",
    "detail": "Function (HorizontalAlignment = InAlignment ; return* this ; } FDetailWidgetDecl&)",
    "insertText": "MinDesiredWidth(TOptional<float> InMinWidth)"
  },
  {
    "label": "MaxDesiredWidth()",
    "kind": "Method",
    "detail": "Function (MinWidth = InMinWidth ; return* this ; } FDetailWidgetDecl&)",
    "insertText": "MaxDesiredWidth(TOptional<float> InMaxWidth)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (MaxWidth = InMaxWidth ; return* this ; } private : class SInvalidDetailWidget : public SSpacer {)",
    "insertText": "SLATE_BEGIN_ARGS(SInvalidDetailWidget)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibility(EVisibility::Collapsed)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} } ; public : TSharedRef<SWidget> Widget ; EHorizontalAlignment HorizontalAlignment ; EVerticalAlignment VerticalAlignment ; TOptional<float> MinWidth ; TOptional<float> MaxWidth ; private : class FDetailWidgetRow* ParentDecl ; } ; FName InvalidDetailWidgetName =)",
    "insertText": "TEXT(\"SInvalidDetailWidget\")"
  },
  {
    "label": "FDetailWidgetRow()",
    "kind": "Method",
    "detail": "Function (class FDetailWidgetRow : public IDetailLayoutRow { public : const float DefaultValueMinWidth ; const float DefaultValueMaxWidth ;)",
    "insertText": "FDetailWidgetRow() : NameWidget( *this, 0.0f, 0.0f, HAlign_Left, VAlign_Center ) , ValueWidget( *this, DefaultValueMinWidth, DefaultValueMaxWidth, HAlign_Left, VAlign_Center ) , ExtensionWidget( *this, 0.0f, 0.0f, HAlign_Right, VAlign_Center) , ResetToDefaultWidget( *this, 0.0f, 0.0f, HAlign_Center, VAlign_Center) , WholeRowWidget( *this, 0.0f, 0.0f, HAlign_Fill, VAlign_Fill ) , VisibilityAttr( EVisibility::Visible ) , FilterTextString() , CopyMenuAction() , PasteMenuAction() , RowTagName()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FDetailWidgetRow&)",
    "insertText": "operator(const FDetailWidgetRow& Other)"
  },
  {
    "label": "FDetailWidgetDecl()",
    "kind": "Method",
    "detail": "Function (NameWidget =)",
    "insertText": "FDetailWidgetDecl(*this, Other.NameWidget)"
  },
  {
    "label": "FDetailWidgetDecl()",
    "kind": "Method",
    "detail": "Function (ValueWidget =)",
    "insertText": "FDetailWidgetDecl(*this, Other.ValueWidget)"
  },
  {
    "label": "FDetailWidgetDecl()",
    "kind": "Method",
    "detail": "Function (ExtensionWidget =)",
    "insertText": "FDetailWidgetDecl(*this, Other.ExtensionWidget)"
  },
  {
    "label": "FDetailWidgetDecl()",
    "kind": "Method",
    "detail": "Function (ResetToDefaultWidget =)",
    "insertText": "FDetailWidgetDecl(*this, Other.ResetToDefaultWidget)"
  },
  {
    "label": "FDetailWidgetDecl()",
    "kind": "Method",
    "detail": "Function (WholeRowWidget =)",
    "insertText": "FDetailWidgetDecl(*this, Other.WholeRowWidget)"
  },
  {
    "label": "FDetailWidgetRow()",
    "kind": "Method",
    "detail": "Function (VisibilityAttr = Other . VisibilityAttr ; IsEnabledAttr = Other . IsEnabledAttr ; IsValueEnabledAttr = Other . IsValueEnabledAttr ; FilterTextString = Other . FilterTextString ; CopyMenuAction = Other . CopyMenuAction ; PasteMenuAction = Other . PasteMenuAction ; CustomMenuItems = Other . CustomMenuItems ; RowTagName = Other . RowTagName ; CustomResetToDefault = Other . CustomResetToDefault ; EditConditionValue = Other . EditConditionValue ; OnEditConditionValueChanged = Other . OnEditConditionValueChanged ; CustomDragDropHandler = Other . CustomDragDropHandler ; PropertyHandles = Other . PropertyHandles ; return* this ; } ~)",
    "insertText": "FDetailWidgetRow()"
  },
  {
    "label": "GetRowName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetRowName()"
  },
  {
    "label": "WholeRowContent()",
    "kind": "Method",
    "detail": "Function (WholeRowWidget . Widget = InWidget ; return* this ; } FDetailWidgetDecl&)",
    "insertText": "WholeRowContent()"
  },
  {
    "label": "Visibility()",
    "kind": "Method",
    "detail": "Function (FilterTextString = InFilterString ; return* this ; } FDetailWidgetRow&)",
    "insertText": "Visibility(const TAttribute<EVisibility>& InVisibility)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (VisibilityAttr = InVisibility ; return* this ; } FDetailWidgetRow&)",
    "insertText": "IsEnabled(const TAttribute<bool>& InIsEnabled)"
  },
  {
    "label": "IsValueEnabled()",
    "kind": "Method",
    "detail": "Function (IsEnabledAttr = InIsEnabled ; return* this ; } FDetailWidgetRow&)",
    "insertText": "IsValueEnabled(const TAttribute<bool>& InIsEnabled)"
  },
  {
    "label": "CopyAction()",
    "kind": "Method",
    "detail": "Function (IsValueEnabledAttr = InIsEnabled ; return* this ; } FDetailWidgetRow&)",
    "insertText": "CopyAction(const FUIAction& InCopyAction)"
  },
  {
    "label": "PasteAction()",
    "kind": "Method",
    "detail": "Function (CopyMenuAction = InCopyAction ; return* this ; } FDetailWidgetRow&)",
    "insertText": "PasteAction(const FUIAction& InPasteAction)"
  },
  {
    "label": "AddCustomContextMenuAction()",
    "kind": "Method",
    "detail": "Function (PasteMenuAction = InPasteAction ; return* this ; } FDetailWidgetRow&)",
    "insertText": "AddCustomContextMenuAction(const FUIAction& Action, const FText& Name, const FText& Tooltip = FText(), const FSlateIcon& SlateIcon = FSlateIcon())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CustomMenuItems .)",
    "insertText": "Add(FCustomMenuData(Action, Name, Tooltip, SlateIcon))"
  },
  {
    "label": "HasValueContent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasValueContent()"
  },
  {
    "label": "HasExtensionContent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasExtensionContent()"
  },
  {
    "label": "HasResetToDefaultContent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasResetToDefaultContent()"
  },
  {
    "label": "HasColumns()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasColumns()"
  },
  {
    "label": "HasAnyContent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAnyContent()"
  },
  {
    "label": "IsCopyPasteBound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCopyPasteBound()"
  },
  {
    "label": "IsPasteFromTextBound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPasteFromTextBound()"
  },
  {
    "label": "RowTag()",
    "kind": "Method",
    "detail": "Function (} FDetailWidgetRow&)",
    "insertText": "RowTag(const FName& InRowTagName)"
  },
  {
    "label": "OverrideResetToDefault()",
    "kind": "Method",
    "detail": "Function (RowTagName = InRowTagName ; return* this ; } FDetailWidgetRow&)",
    "insertText": "OverrideResetToDefault(const FResetToDefaultOverride& InResetToDefaultOverride)"
  },
  {
    "label": "EditCondition()",
    "kind": "Method",
    "detail": "Function (CustomResetToDefault = InResetToDefaultOverride ; return* this ; } FDetailWidgetRow&)",
    "insertText": "EditCondition(TAttribute<bool> InEditConditionValue, FOnBooleanValueChanged InOnEditConditionValueChanged)"
  },
  {
    "label": "DragDropHandler()",
    "kind": "Method",
    "detail": "Function (EditConditionValue = InEditConditionValue ; OnEditConditionValueChanged = InOnEditConditionValueChanged ; return* this ; } FDetailWidgetRow&)",
    "insertText": "DragDropHandler(TSharedPtr<IDetailDragDropHandler> InDragDropHandler)"
  },
  {
    "label": "PropertyHandleList()",
    "kind": "Method",
    "detail": "Function (CustomDragDropHandler = InDragDropHandler ; return* this ; } FDetailWidgetRow&)",
    "insertText": "PropertyHandleList(const TArray<TSharedPtr<IPropertyHandle>>& InPropertyHandles)"
  },
  {
    "label": "GetPropertyHandles()",
    "kind": "Method",
    "detail": "Function (PropertyHandles = InPropertyHandles ; return* this ; } const TArray<TSharedPtr<IPropertyHandle>>&)",
    "insertText": "GetPropertyHandles()"
  },
  {
    "label": "FCustomMenuData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCustomMenuData(const FName InEntryName, const FUIAction& InAction, const FText& InName, const FText& InTooltip, const FSlateIcon& InSlateIcon) : EntryName(InEntryName) , Action(InAction) , Name(InName) , Tooltip(InTooltip) , SlateIcon(InSlateIcon)"
  },
  {
    "label": "GetEntryName()",
    "kind": "Method",
    "detail": "Function (} const FName EntryName ; const FUIAction Action ; const FText Name ; const FText Tooltip ; const FSlateIcon SlateIcon ; const FName)",
    "insertText": "GetEntryName()"
  }
]