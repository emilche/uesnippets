[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOC_SUPPORT_H_ # define BASE_ALLOCATOR_PARTITION_ALLOC_SUPPORT_H_ # include<map> # include<string> # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / base_export . h \" # include \" base / memory / scoped_refptr . h \" # include \" base / task / sequenced_task_runner . h \" namespace base { namespace allocator { # if)",
    "insertText": "defined(PA_ALLOW_PCSCAN) BASE_EXPORT void RegisterPCScanStatsReporter()"
  },
  {
    "label": "StartThreadCachePeriodicPurge()",
    "kind": "Method",
    "detail": "Function (# endif BASE_EXPORT void)",
    "insertText": "StartThreadCachePeriodicPurge()"
  },
  {
    "label": "StartMemoryReclaimer()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "StartMemoryReclaimer(scoped_refptr<SequencedTaskRunner> task_runner)"
  },
  {
    "label": "ProposeSyntheticFinchTrials()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::map<std::string,std::string>)",
    "insertText": "ProposeSyntheticFinchTrials()"
  },
  {
    "label": "InstallDanglingRawPtrChecks()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "InstallDanglingRawPtrChecks()"
  },
  {
    "label": "InstallUnretainedDanglingRawPtrChecks()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "InstallUnretainedDanglingRawPtrChecks()"
  }
]