[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "SelfAdjointView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SelfAdjointView"
  },
  {
    "label": "evaluator_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator_traits"
  },
  {
    "label": "triangular_dense_assignment_kernel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "triangular_dense_assignment_kernel"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SELFADJOINTMATRIX_H # define EIGEN_SELFADJOINTMATRIX_H namespace Eigen { namespace internal { template<MatrixType,unsigned int UpLo> struct traits<SelfAdjointView<MatrixType,UpLo>> : traits<MatrixType> { typedef ref_selector<MatrixType>::non_const_type MatrixTypeNested ; typedef remove_all<MatrixTypeNested>::type MatrixTypeNestedCleaned ; typedef MatrixType ExpressionType ; typedef MatrixType::PlainObject FullMatrixType ; enum { Mode = UpLo | SelfAdjoint,FlagsLvalueBit = is_lvalue<MatrixType>::value ? LvalueBit : 0,Flags =)",
    "insertText": "Flags(HereditaryBits|FlagsLvalueBit) & (~(PacketAccessBit | DirectAccessBit | LinearAccessBit))"
  },
  {
    "label": "TransposeMode()",
    "kind": "Method",
    "detail": "Function (} ; } template<_MatrixType,unsigned int UpLo> class SelfAdjointView : public TriangularBase<SelfAdjointView<_MatrixType,UpLo>> { public : typedef _MatrixType MatrixType ; typedef TriangularBase<SelfAdjointView> Base ; typedef internal::traits<SelfAdjointView>::MatrixTypeNested MatrixTypeNested ; typedef internal::traits<SelfAdjointView>::MatrixTypeNestedCleaned MatrixTypeNestedCleaned ; typedef MatrixTypeNestedCleaned NestedExpression ; typedef internal::traits<SelfAdjointView>::Scalar Scalar ; typedef MatrixType::StorageIndex StorageIndex ; typedef internal::remove_all<MatrixType::ConjugateReturnType>::type MatrixConjugateReturnType ; typedef SelfAdjointView<internal::add_const<MatrixType>::type,UpLo> ConstSelfAdjointView ; enum { Mode = internal::traits<SelfAdjointView>::Mode,Flags = internal::traits<SelfAdjointView>::Flags,)",
    "insertText": "TransposeMode((int(Mode) & int(Upper)) ? Lower : 0) | ((int(Mode) & int(Lower)) ? Upper : 0)"
  },
  {
    "label": "SelfAdjointView()",
    "kind": "Method",
    "detail": "Function (typedef MatrixType::PlainObject PlainObject ; EIGEN_DEVICE_FUNC)",
    "insertText": "SelfAdjointView(MatrixType& matrix) : m_matrix(matrix)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(UpLo==Lower || UpLo==Upper,SELFADJOINTVIEW_ACCEPTS_UPPER_AND_LOWER_MODE_ONLY)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "outerStride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "outerStride()"
  },
  {
    "label": "innerStride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "innerStride()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "coeff(Index row, Index col)"
  },
  {
    "label": "check_coordinates_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "check_coordinates_internal(row, col)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar&)",
    "insertText": "coeffRef(Index row, Index col)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_LVALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_LVALUE(SelfAdjointView)"
  },
  {
    "label": "_expression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const MatrixTypeNestedCleaned&)",
    "insertText": "_expression()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC const Product<OtherDerived,SelfAdjointView>)",
    "insertText": "operator(const MatrixBase<OtherDerived>& lhs, const SelfAdjointView& rhs)"
  },
  {
    "label": "EIGEN_SCALAR_BINARYOP_EXPR_RETURN_TYPE()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const SelfAdjointView<const)",
    "insertText": "EIGEN_SCALAR_BINARYOP_EXPR_RETURN_TYPE(Scalar,MatrixType,product),UpLo> operator*(const Scalar& s, const SelfAdjointView& mat)"
  },
  {
    "label": "rankUpdate()",
    "kind": "Method",
    "detail": "Function (} template<DerivedU,DerivedV> EIGEN_DEVICE_FUNC SelfAdjointView&)",
    "insertText": "rankUpdate(const MatrixBase<DerivedU>& u, const MatrixBase<DerivedV>& v, const Scalar& alpha = Scalar(1))"
  },
  {
    "label": "rankUpdate()",
    "kind": "Method",
    "detail": "Function (template<DerivedU> EIGEN_DEVICE_FUNC SelfAdjointView&)",
    "insertText": "rankUpdate(const MatrixBase<DerivedU>& u, const Scalar& alpha = Scalar(1))"
  },
  {
    "label": "conditional()",
    "kind": "Method",
    "detail": "Function (template<unsigned int TriMode> EIGEN_DEVICE_FUNC)",
    "insertText": "conditional(TriMode&(Upper|Lower))==(UpLo&(Upper|Lower)), TriangularView<MatrixType,TriMode>, TriangularView<typename MatrixType::AdjointReturnType,TriMode> >::type triangularView()"
  },
  {
    "label": "conditional()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "conditional(TriMode&(Upper|Lower))==(UpLo&(Upper|Lower)), MatrixType&, typename MatrixType::ConstTransposeReturnType>::type tmp1(m_matrix)"
  },
  {
    "label": "conditional()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "conditional(TriMode&(Upper|Lower))==(UpLo&(Upper|Lower)), MatrixType&, typename MatrixType::AdjointReturnType>::type tmp2(tmp1)"
  },
  {
    "label": "conjugate()",
    "kind": "Method",
    "detail": "Function (} typedef SelfAdjointView<const MatrixConjugateReturnType,UpLo> ConjugateReturnType ; EIGEN_DEVICE_FUNC const ConjugateReturnType)",
    "insertText": "conjugate()"
  },
  {
    "label": "conjugateIf()",
    "kind": "Method",
    "detail": "Function (} template<bool Cond> EIGEN_DEVICE_FUNC internal::conditional<Cond,ConjugateReturnType,ConstSelfAdjointView>::type)",
    "insertText": "conjugateIf()"
  },
  {
    "label": "ReturnType()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<Cond,ConjugateReturnType,ConstSelfAdjointView>::type ReturnType ; return)",
    "insertText": "ReturnType(m_matrix.template conjugateIf<Cond>())"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (} typedef SelfAdjointView<const MatrixType::AdjointReturnType,TransposeMode> AdjointReturnType ; EIGEN_DEVICE_FUNC const AdjointReturnType)",
    "insertText": "adjoint()"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (} typedef SelfAdjointView<MatrixType::TransposeReturnType,TransposeMode> TransposeReturnType ; EIGEN_DEVICE_FUNC TransposeReturnType)",
    "insertText": "transpose()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_LVALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_LVALUE(MatrixType) typename MatrixType::TransposeReturnType tmp(m_matrix)"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC MatrixType::ConstDiagonalReturnType)",
    "insertText": "diagonal()"
  },
  {
    "label": "llt()",
    "kind": "Method",
    "detail": "Function (} const LLT<PlainObject,UpLo>)",
    "insertText": "llt()"
  },
  {
    "label": "ldlt()",
    "kind": "Method",
    "detail": "Function (const LDLT<PlainObject,UpLo>)",
    "insertText": "ldlt()"
  },
  {
    "label": "eigenvalues()",
    "kind": "Method",
    "detail": "Function (typedef NumTraits<Scalar>::Real RealScalar ; typedef Matrix<RealScalar,internal::traits<MatrixType>::ColsAtCompileTime,1> EigenvaluesReturnType ; EIGEN_DEVICE_FUNC EigenvaluesReturnType)",
    "insertText": "eigenvalues()"
  },
  {
    "label": "operatorNorm()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC RealScalar)",
    "insertText": "operatorNorm()"
  },
  {
    "label": "triangular_dense_assignment_kernel()",
    "kind": "Method",
    "detail": "Function (protected : MatrixTypeNested m_matrix ; } ; namespace internal { template<MatrixType,unsigned int Mode> struct evaluator_traits<SelfAdjointView<MatrixType,Mode>> { typedef storage_kind_to_evaluator_kind<MatrixType::StorageKind>::Kind Kind ; typedef SelfAdjointShape Shape ; } ; template<int UpLo,int SetOpposite,DstEvaluatorTypeT,SrcEvaluatorTypeT,Functor,int Version> class triangular_dense_assignment_kernel<UpLo,SelfAdjoint,SetOpposite,DstEvaluatorTypeT,SrcEvaluatorTypeT,Functor,Version> : public generic_dense_assignment_kernel<DstEvaluatorTypeT,SrcEvaluatorTypeT,Functor,Version> { protected : typedef generic_dense_assignment_kernel<DstEvaluatorTypeT,SrcEvaluatorTypeT,Functor,Version> Base ; typedef Base::DstXprType DstXprType ; typedef Base::SrcXprType SrcXprType ; using Base::m_dst ; using Base::m_src ; using Base::m_functor ; public : typedef Base::DstEvaluatorType DstEvaluatorType ; typedef Base::SrcEvaluatorType SrcEvaluatorType ; typedef Base::Scalar Scalar ; typedef Base::AssignmentTraits AssignmentTraits ; EIGEN_DEVICE_FUNC)",
    "insertText": "triangular_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr) : Base(dst, src, func, dstExpr)"
  },
  {
    "label": "assignCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "assignCoeff(Index row, Index col)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(row!=col)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Scalar tmp = m_src .)",
    "insertText": "coeff(row,col)"
  },
  {
    "label": "assignCoeff()",
    "kind": "Method",
    "detail": "Function (m_functor .)",
    "insertText": "assignCoeff(m_dst.coeffRef(row,col), tmp)"
  },
  {
    "label": "assignCoeff()",
    "kind": "Method",
    "detail": "Function (m_functor .)",
    "insertText": "assignCoeff(m_dst.coeffRef(col,row), numext::conj(tmp))"
  },
  {
    "label": "assignDiagonalCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "assignDiagonalCoeff(Index id)"
  },
  {
    "label": "assignCoeff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignCoeff(id,id)"
  },
  {
    "label": "assignOppositeCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "assignOppositeCoeff(Index, Index)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(false && \"should never be called\")"
  },
  {
    "label": "selfadjointView()",
    "kind": "Method",
    "detail": "Function (} } ; } template<Derived> template<unsigned int UpLo> EIGEN_DEVICE_FUNC MatrixBase<Derived>::template ConstSelfAdjointViewReturnType<UpLo>::Type MatrixBase<Derived)",
    "insertText": "selfadjointView()"
  }
]