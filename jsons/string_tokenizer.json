[
  {
    "label": "str",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "str"
  },
  {
    "label": "const_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_iterator"
  },
  {
    "label": "StringTokenizerT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringTokenizerT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "AdvanceState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AdvanceState"
  },
  {
    "label": "StringTokenizerT()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_STRING_TOKENIZER_H_ # define BASE_STRINGS_STRING_TOKENIZER_H_ # include<algorithm> # include<string> # include \" base / check . h \" # include \" base / strings / string_piece . h \" # include \" base / strings / string_util . h \" namespace base { template<class str,class const_iterator> class StringTokenizerT { public : typedef str::value_type char_type ; enum { RETURN_DELIMS = 1<<0,RETURN_EMPTY_TOKENS = 1<<1,} ; enum class WhitespacePolicy { kIncludeInTokens,kSkipOver,} ;)",
    "insertText": "StringTokenizerT(const str& string, const str& delims, WhitespacePolicy whitespace_policy = WhitespacePolicy::kIncludeInTokens)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(string.begin(), string.end(), delims, whitespace_policy)"
  },
  {
    "label": "StringTokenizerT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StringTokenizerT(str&&, const str& delims)"
  },
  {
    "label": "StringTokenizerT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StringTokenizerT(const_iterator string_begin, const_iterator string_end, const str& delims, WhitespacePolicy whitespace_policy = WhitespacePolicy::kIncludeInTokens)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(string_begin, string_end, delims, whitespace_policy)"
  },
  {
    "label": "set_options()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_options(int options)"
  },
  {
    "label": "set_quote_chars()",
    "kind": "Method",
    "detail": "Function (options_ = options ; } void)",
    "insertText": "set_quote_chars(const str& quotes)"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (quotes_ = quotes ; } bool)",
    "insertText": "GetNext()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "token_is_delim()",
    "kind": "Method",
    "detail": "Function (token_end_ = start_pos_ ; } bool)",
    "insertText": "token_is_delim()"
  },
  {
    "label": "token_piece()",
    "kind": "Method",
    "detail": "Function (} BasicStringPiece<char_type>)",
    "insertText": "token_piece()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Init(const_iterator string_begin, const_iterator string_end, const str& delims, WhitespacePolicy whitespace_policy)"
  },
  {
    "label": "ShouldSkip()",
    "kind": "Method",
    "detail": "Function (start_pos_ = string_begin ; token_begin_ = string_begin ; token_end_ = string_begin ; end_ = string_end ; delims_ = delims ; options_ = 0 ; token_is_delim_ = true ; whitespace_policy_ = whitespace_policy ; } bool)",
    "insertText": "ShouldSkip(char_type c)"
  },
  {
    "label": "SkipWhitespace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SkipWhitespace()"
  },
  {
    "label": "QuickGetNext()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "QuickGetNext()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (token_is_delim_ = false ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (token_begin_ = token_end_ ;)",
    "insertText": "if(token_end_ == end_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (token_is_delim_ = true ; return false ; } + + token_end_ ;)",
    "insertText": "if(delims_.find(*token_begin_) == str::npos && !ShouldSkip(*token_begin_))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "while(token_end_ != end_ && delims_.find(*token_end_) == str::npos && !ShouldSkip(*token_end_))"
  },
  {
    "label": "FullGetNext()",
    "kind": "Method",
    "detail": "Function (+ + token_end_ ; } return true ; } bool)",
    "insertText": "FullGetNext()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (token_is_delim_ = false ; token_begin_ = token_end_ ;)",
    "insertText": "while(token_end_ != end_ && AdvanceOne(&state, *token_end_))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + token_end_ ; })",
    "insertText": "if(token_begin_ != token_end_ || (options_ & RETURN_EMPTY_TOKENS))"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DCHECK(!token_is_delim_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + token_end_ ;)",
    "insertText": "if(options_ & RETURN_DELIMS)"
  },
  {
    "label": "IsDelim()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "IsDelim(char_type c)"
  },
  {
    "label": "IsQuote()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsQuote(char_type c)"
  },
  {
    "label": "AdvanceState()",
    "kind": "Method",
    "detail": "Function (} struct AdvanceState { bool in_quote ; bool in_escape ; char_type quote_char ;)",
    "insertText": "AdvanceState() : in_quote(false), in_escape(false), quote_char('\\0')"
  },
  {
    "label": "AdvanceOne()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "AdvanceOne(AdvanceState* state, char_type c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (state -> in_escape = false ; } else)",
    "insertText": "if(c == '\\\\')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (state -> in_escape = true ; } else)",
    "insertText": "if(c == state->quote_char)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (state -> in_quote = false ; } } else {)",
    "insertText": "if(IsDelim(c) || ShouldSkip(c))"
  },
  {
    "label": "IsQuote()",
    "kind": "Method",
    "detail": "Function (state -> in_quote =)",
    "insertText": "IsQuote(state->quote_char = c)"
  }
]