[
  {
    "label": "TRotationTranslationMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRotationTranslationMatrix"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "TRotationTranslationMatrix()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / VectorRegister . h \" # include \" Math / Matrix . h \" namespace UE { namespace Math { template<T> struct TRotationTranslationMatrix : public TMatrix<T> { public : using TMatrix<T>::M ;)",
    "insertText": "TRotationTranslationMatrix(const TRotator<T>& Rot, const TVector<T>& Origin)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg>)> explicit TRotationTranslationMatrix(const TRotationTranslationMatrix<FArg>& From) : TMatrix<T>(From)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} TMatrix<T>)",
    "insertText": "Make(const TRotator<T>& Rot, const TVector<T>& Origin)"
  },
  {
    "label": "PLATFORM_ENABLE_VECTORINTRINSICS()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "PLATFORM_ENABLE_VECTORINTRINSICS(!PLATFORM_HOLOLENS || !PLATFORM_CPU_ARM_FAMILY) const TVectorRegisterType<T> Angles = MakeVectorRegister(Rot.Pitch, Rot.Yaw, Rot.Roll, 0.0f)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const TVectorRegisterType<T> HalfAngles =)",
    "insertText": "VectorMultiply(Angles, GlobalVectorConstants::DEG_TO_RAD)"
  },
  {
    "label": "VectorSinCos()",
    "kind": "Method",
    "detail": "Function (union { TVectorRegisterType<T> v ; T f [ 4 ] ; } SinAngles,CosAngles ;)",
    "insertText": "VectorSinCos(&SinAngles.v, &CosAngles.v, &HalfAngles)"
  },
  {
    "label": "SinCos()",
    "kind": "Method",
    "detail": "Function (const T SP = SinAngles . f [ 0 ] ; const T SY = SinAngles . f [ 1 ] ; const T SR = SinAngles . f [ 2 ] ; const T CP = CosAngles . f [ 0 ] ; const T CY = CosAngles . f [ 1 ] ; const T CR = CosAngles . f [ 2 ] ; # else T SP,SY,SR ; T CP,CY,CR ;)",
    "insertText": "SinCos(&SP, &CP, (T)FMath::DegreesToRadians(Rot.Pitch))"
  },
  {
    "label": "SinCos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SinCos(&SY, &CY, (T)FMath::DegreesToRadians(Rot.Yaw))"
  },
  {
    "label": "SinCos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SinCos(&SR, &CR, (T)FMath::DegreesToRadians(Rot.Roll))"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (# endif M [ 0 ] [ 0 ] = CP* CY ; M [ 0 ] [ 1 ] = CP* SY ; M [ 0 ] [ 2 ] = SP ; M [ 0 ] [ 3 ] = 0 . f ; M [ 1 ] [ 0 ] = SR* SP* CY - CR* SY ; M [ 1 ] [ 1 ] = SR* SP* SY + CR* CY ; M [ 1 ] [ 2 ] = - SR* CP ; M [ 1 ] [ 3 ] = 0 . f ;)",
    "insertText": "M(CR * SP * CY + SR * SY)"
  },
  {
    "label": "UE_DECLARE_LWC_TYPE()",
    "kind": "Method",
    "detail": "Function (M [ 2 ] [ 1 ] = CY* SR - CR* SP* SY ; M [ 2 ] [ 2 ] = CR* CP ; M [ 2 ] [ 3 ] = 0 . f ; M [ 3 ] [ 0 ] = Origin . X ; M [ 3 ] [ 1 ] = Origin . Y ; M [ 3 ] [ 2 ] = Origin . Z ; M [ 3 ] [ 3 ] = 1 . f ; } } })",
    "insertText": "UE_DECLARE_LWC_TYPE(RotationTranslationMatrix, 44)"
  }
]