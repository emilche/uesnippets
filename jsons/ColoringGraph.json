[
  {
    "label": "FColoringGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColoringGraph"
  },
  {
    "label": "FVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertex"
  },
  {
    "label": "FEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdge"
  },
  {
    "label": "FIsland",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIsland"
  },
  {
    "label": "GetNumIslands()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" namespace Chaos { class FColoringGraph { public : int32)",
    "insertText": "GetNumIslands()"
  },
  {
    "label": "GetVertexIsland()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetVertexIsland(int32 VertexIndex)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 IslandIndex = Vertices [ VertexIndex ] . Island ; return Islands [ IslandIndex ] . VertexIndices .)",
    "insertText": "Num()"
  },
  {
    "label": "GetVertexLevel()",
    "kind": "Method",
    "detail": "Function (} return INDEX_NONE ; } int32)",
    "insertText": "GetVertexLevel(int32 VertexIndex)"
  },
  {
    "label": "GetVertexColor()",
    "kind": "Method",
    "detail": "Function (Vertices [ VertexIndex ] . Level = Level ; } } int32)",
    "insertText": "GetVertexColor(int32 VertexIndex)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Vertices .)",
    "insertText": "Reserve(InNumVertices)"
  },
  {
    "label": "ReserveEdges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReserveEdges(int32 InNumEdges)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Edges .)",
    "insertText": "Reserve(InNumEdges)"
  },
  {
    "label": "AddVertex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddVertex()"
  },
  {
    "label": "AddVertices()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddVertices(int32 InNumVertices)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Vertices .)",
    "insertText": "SetNum(Vertices.Num() + InNumVertices, EAllowShrinking::No)"
  },
  {
    "label": "AddEdge()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddEdge(int32 VertexIndex0, int32 VertexIndex1)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (int32 EdgeIndex = Edges .)",
    "insertText": "Emplace(FEdge(VertexIndex0, VertexIndex1))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Vertices [ VertexIndex0 ] . EdgeIndices .)",
    "insertText": "Add(EdgeIndex)"
  },
  {
    "label": "Levelize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Levelize()"
  },
  {
    "label": "Colorize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Colorize()"
  },
  {
    "label": "FVertex()",
    "kind": "Method",
    "detail": "Function (private : struct FVertex {)",
    "insertText": "FVertex() : Island(INDEX_NONE), Level(INDEX_NONE), Color(INDEX_NONE)"
  },
  {
    "label": "FEdge()",
    "kind": "Method",
    "detail": "Function (} TArray<int32> EdgeIndices ; int32 Island ; int32 Level ; int32 Color ; } ; struct FEdge {)",
    "insertText": "FEdge(int32 VertexIndex0, int32 VertexIndex1)"
  },
  {
    "label": "FIsland()",
    "kind": "Method",
    "detail": "Function (VertexIndices [ 0 ] = VertexIndex0 ; VertexIndices [ 1 ] = VertexIndex1 ; } int32 VertexIndices [ 2 ] ; } ; struct FIsland {)",
    "insertText": "FIsland() : NextColorIndex(0)"
  },
  {
    "label": "MergeIslands()",
    "kind": "Method",
    "detail": "Function (} TArray<int32> VertexIndices ; int32 NextColorIndex ; } ; void)",
    "insertText": "MergeIslands(int32 IslandIndex0, int32 IslandIndex1)"
  },
  {
    "label": "PackIslands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PackIslands()"
  },
  {
    "label": "AssignColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignColor(int32 VertexIndex)"
  }
]