[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "FWidgetReflectorNodeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetReflectorNodeBase"
  },
  {
    "label": "FJsonValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonValue"
  },
  {
    "label": "FNavigationSimulationWidgetInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationSimulationWidgetInfo"
  },
  {
    "label": "FNavigationSimulationWidgetNodeItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationSimulationWidgetNodeItem"
  },
  {
    "label": "FNavigationSimulationWidgetNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationSimulationWidgetNode"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNavigationSimulationNodeUtils",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationSimulationNodeUtils"
  },
  {
    "label": "FNavigationSimulationWidgetInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Geometry . h \" # include \" SlateNavigationEventSimulator . h \" class SWidget ; class FWidgetPath ; class FWidgetReflectorNodeBase ; class FJsonValue ; struct FNavigationSimulationWidgetInfo ; struct FNavigationSimulationWidgetNodeItem ; struct FNavigationSimulationWidgetNode ; using FNavigationSimulationWidgetNodePtr = TSharedPtr<FNavigationSimulationWidgetNode> ; enum class ENavigationSimulationNodeType : uint8 { Live,Snapshot,} ; struct FNavigationSimulationWidgetInfo { using TPointerAsInt = uint64 ;)",
    "insertText": "FNavigationSimulationWidgetInfo()"
  },
  {
    "label": "FNavigationSimulationWidgetInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationSimulationWidgetInfo(const TSharedPtr<const SWidget>& Widget)"
  },
  {
    "label": "FNavigationSimulationWidgetInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationSimulationWidgetInfo(const FWidgetPath& WidgetPath)"
  },
  {
    "label": "IsWidgetExplicitlyNull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWidgetExplicitlyNull()"
  },
  {
    "label": "FNavigationSimulationWidgetNodeItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationSimulationWidgetNodeItem(const FSlateNavigationEventSimulator::FSimulationResult& Result)"
  },
  {
    "label": "ResetLiveWidget()",
    "kind": "Method",
    "detail": "Function (EUINavigation NavigationType ; FNavigationSimulationWidgetInfo Destination ; FNavigationSimulationWidgetInfo ReplyEventHandler ; FNavigationSimulationWidgetInfo ReplyFocusRecipient ; EUINavigationRule ReplyBoundaryRule ; FSlateNavigationEventSimulator::ERoutedReason RoutedReason ; FNavigationSimulationWidgetInfo WidgetThatShouldReceivedFocus ; FNavigationSimulationWidgetInfo FocusedWidget ; uint8 bIsDynamic : 1 ; uint8 bAlwaysHandleNavigationAttempt : 1 ; uint8 bCanFindWidgetForSetFocus : 1 ; uint8 bRoutedHandlerHasNavigationMeta : 1 ; uint8 bHandledByViewport : 1 ; void)",
    "insertText": "ResetLiveWidget()"
  },
  {
    "label": "FNavigationSimulationWidgetNode()",
    "kind": "Method",
    "detail": "Function (} ; struct FNavigationSimulationWidgetNode {)",
    "insertText": "FNavigationSimulationWidgetNode()"
  },
  {
    "label": "FNavigationSimulationWidgetNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationSimulationWidgetNode(ENavigationSimulationNodeType NodeType, const FWidgetPath& InNavigationSource)"
  },
  {
    "label": "ToJson()",
    "kind": "Method",
    "detail": "Function (FNavigationSimulationWidgetInfo NavigationSource ; TArray<FNavigationSimulationWidgetNodeItem,TInlineAllocator<4>> Simulations ; ENavigationSimulationNodeType NodeType ; TSharedRef<FJsonValue>)",
    "insertText": "ToJson(const FNavigationSimulationWidgetNode& Node)"
  },
  {
    "label": "FromJson()",
    "kind": "Method",
    "detail": "Function (FNavigationSimulationWidgetNodePtr)",
    "insertText": "FromJson(const TSharedRef<FJsonValue>& RootJsonValue)"
  },
  {
    "label": "BuildNavigationSimulationNodeListForLive()",
    "kind": "Method",
    "detail": "Function (} ; struct FNavigationSimulationNodeUtils { TArray<FNavigationSimulationWidgetNodePtr>)",
    "insertText": "BuildNavigationSimulationNodeListForLive(const TArray<FSlateNavigationEventSimulator::FSimulationResult>& SimulationResult)"
  },
  {
    "label": "BuildNavigationSimulationNodeListForSnapshot()",
    "kind": "Method",
    "detail": "Function (TArray<FNavigationSimulationWidgetNodePtr>)",
    "insertText": "BuildNavigationSimulationNodeListForSnapshot(const TArray<FSlateNavigationEventSimulator::FSimulationResult>& SimulationResult)"
  },
  {
    "label": "FindReflectorNodes()",
    "kind": "Method",
    "detail": "Function (TArray<FNavigationSimulationWidgetNodePtr>)",
    "insertText": "FindReflectorNodes(const TArray<FNavigationSimulationWidgetNodePtr>& Nodes, const TArray<TSharedRef<FWidgetReflectorNodeBase>>& ToFind)"
  },
  {
    "label": "IndexOfLiveWidget()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "IndexOfLiveWidget(const TArray<FNavigationSimulationWidgetNodePtr>& Nodes, const TSharedPtr<const SWidget>& WidgetToFind)"
  },
  {
    "label": "IndexOfSnapshotWidget()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "IndexOfSnapshotWidget(const TArray<FNavigationSimulationWidgetNodePtr>& Nodes, FNavigationSimulationWidgetInfo::TPointerAsInt WidgetToFind)"
  }
]