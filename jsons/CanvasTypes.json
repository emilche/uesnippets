[
  {
    "label": "FBatchedElementParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBatchedElementParameters"
  },
  {
    "label": "FBatchedElements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBatchedElements"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FCanvasBatchedElementRenderItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasBatchedElementRenderItem"
  },
  {
    "label": "FCanvasRenderContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasRenderContext"
  },
  {
    "label": "FCanvasRenderThreadScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasRenderThreadScope"
  },
  {
    "label": "FCanvasItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasItem"
  },
  {
    "label": "FTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTexture"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FRenderTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderTarget"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "IBreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBreakIterator"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "FRDGTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTexture"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FMeshPassProcessorRenderState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshPassProcessorRenderState"
  },
  {
    "label": "EShaderPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderPlatform"
  },
  {
    "label": "FTextSizingParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextSizingParameters"
  },
  {
    "label": "FWrappedStringElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWrappedStringElement"
  },
  {
    "label": "FCanvasWordWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasWordWrapper"
  },
  {
    "label": "FWrappingState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWrappingState"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "EElementType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EElementType"
  },
  {
    "label": "ECanvasAllowModes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECanvasAllowModes"
  },
  {
    "label": "ECanvasDrawMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECanvasDrawMode"
  },
  {
    "label": "FTransformEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransformEntry"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FCanvasSortElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasSortElement"
  },
  {
    "label": "FCanvasBaseRenderItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasBaseRenderItem"
  },
  {
    "label": "FCanvasRenderContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasRenderContext"
  },
  {
    "label": "FCanvasRenderThreadScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasRenderThreadScope"
  },
  {
    "label": "FCanvasBaseRenderItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasBaseRenderItem"
  },
  {
    "label": "FCanvasBatchedElementRenderItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasBatchedElementRenderItem"
  },
  {
    "label": "FCanvasTileRendererItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasTileRendererItem"
  },
  {
    "label": "FCanvasTriangleRendererItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasTriangleRendererItem"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FScreenMessageWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenMessageWriter"
  },
  {
    "label": "FCanvasWordWrapper()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FCanvasWordWrapper()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Execute(FStringView InString, const FTextSizingParameters& InParameters, TArray<FWrappedStringElement>& OutStrings, FWrappedLineData* const OutWrappedLineData)"
  },
  {
    "label": "ProcessLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessLine(FWrappingState& WrappingState)"
  },
  {
    "label": "DoesSubstringFit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSubstringFit(FWrappingState& WrappingState, const int32 EndIndex)"
  },
  {
    "label": "FindIndexAtOrAfterWrapWidth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindIndexAtOrAfterWrapWidth(FWrappingState& WrappingState)"
  },
  {
    "label": "AddLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLine(FWrappingState& WrappingState, const int32 EndIndex)"
  },
  {
    "label": "FindFirstMandatoryBreakBetween()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindFirstMandatoryBreakBetween(FWrappingState& WrappingState, const int32 WrapIndex)"
  },
  {
    "label": "FindLastBreakCandidateBetween()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindLastBreakCandidateBetween(const int32 StartIndex, const int32 WrapIndex)"
  },
  {
    "label": "FindEndOfLastWholeGraphemeCluster()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindEndOfLastWholeGraphemeCluster(const int32 StartIndex, const int32 WrapIndex)"
  },
  {
    "label": "FCanvas()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FCanvas(FRenderTarget* InRenderTarget, FHitProxyConsumer* InHitProxyConsumer, UWorld* InWorld, ERHIFeatureLevel::Type InFeatureLevel, ECanvasDrawMode DrawMode = CDM_DeferDrawing, float InDPIScale = 1.0f)"
  },
  {
    "label": "FCanvas()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FCanvas(FRenderTarget* InRenderTarget, FHitProxyConsumer* InHitProxyConsumer, const FGameTime& Time, ERHIFeatureLevel::Type InFeatureLevel, float InDPIScale = 1.0f)"
  },
  {
    "label": "BlendToSimpleElementBlend()",
    "kind": "Method",
    "detail": "Function (ESimpleElementBlendMode)",
    "insertText": "BlendToSimpleElementBlend(EBlendMode BlendMode)"
  },
  {
    "label": "AddTileRenderItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTileRenderItem(float X, float Y, float SizeX, float SizeY, float U, float V, float SizeU, float SizeV, const FMaterialRenderProxy* MaterialRenderProxy, FHitProxyId HitProxyId, bool bFreezeTime, FColor InColor)"
  },
  {
    "label": "AddTriangleRenderItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangleRenderItem(const FCanvasUVTri& Tri, const FMaterialRenderProxy* MaterialRenderProxy, FHitProxyId HitProxyId, bool bFreezeTime)"
  },
  {
    "label": "Flush_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush_RenderThread(FRHICommandListImmediate& RHICmdList, bool bForce = false)"
  },
  {
    "label": "Flush_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush_RenderThread(FRDGBuilder& GraphBuilder, bool bForce = false)"
  },
  {
    "label": "Flush_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush_GameThread(bool bForce = false)"
  },
  {
    "label": "PushRelativeTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushRelativeTransform(const FMatrix& Transform)"
  },
  {
    "label": "PushAbsoluteTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushAbsoluteTransform(const FMatrix& Transform)"
  },
  {
    "label": "PopTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopTransform()"
  },
  {
    "label": "SetBaseTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBaseTransform(const FMatrix& Transform)"
  },
  {
    "label": "CalcBaseTransform2D()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "CalcBaseTransform2D(uint32 ViewSizeX, uint32 ViewSizeY)"
  },
  {
    "label": "CalcBaseTransform3D()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "CalcBaseTransform3D(uint32 ViewSizeX, uint32 ViewSizeY, float fFOV, float NearPlane)"
  },
  {
    "label": "CalcViewMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "CalcViewMatrix(uint32 ViewSizeX, uint32 ViewSizeY, float fFOV)"
  },
  {
    "label": "CalcProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "CalcProjectionMatrix(uint32 ViewSizeX, uint32 ViewSizeY, float fFOV, float NearPlane)"
  },
  {
    "label": "CopyTransformStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTransformStack(const FCanvas& Copy)"
  },
  {
    "label": "SetRenderTarget_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTarget_GameThread(FRenderTarget* NewRenderTarget)"
  },
  {
    "label": "SetRenderTargetRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargetRect(const FIntRect& ViewRect)"
  },
  {
    "label": "SetRenderTargetScissorRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargetScissorRect( const FIntRect& ScissorRect )"
  },
  {
    "label": "SetHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHitProxy(HHitProxy* HitProxy)"
  },
  {
    "label": "PushDepthSortKey()",
    "kind": "Method",
    "detail": "Function (entry)",
    "insertText": "PushDepthSortKey(0)"
  },
  {
    "label": "ClearBatchesToRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBatchesToRender()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct()"
  },
  {
    "label": "DrawItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawItem(FCanvasItem& Item)"
  },
  {
    "label": "DrawItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawItem(FCanvasItem& Item, const FVector2D& InPosition)"
  },
  {
    "label": "DrawItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawItem(FCanvasItem& Item, float X, float Y)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear(const FLinearColor& Color)"
  },
  {
    "label": "DrawTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTile(double X, double Y, double SizeX, double SizeY, float U, float V, float SizeU, float SizeV, const FLinearColor& Color, const FTexture* Texture = NULL, bool AlphaBlend = true)"
  },
  {
    "label": "DrawTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTile(double X, double Y, double SizeX, double SizeY, float U, float V, float SizeU, float SizeV, const FLinearColor& Color, const FTexture* Texture, ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "DrawShadowedString()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawShadowedString(double StartX, double StartY, FStringView Text, const UFont* Font, const FLinearColor& Color, const FLinearColor& ShadowColor = FLinearColor::Black )"
  },
  {
    "label": "DrawShadowedText()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawShadowedText(double StartX, double StartY, const FText& Text, const UFont* Font, const FLinearColor& Color, const FLinearColor& ShadowColor = FLinearColor::Black )"
  },
  {
    "label": "WrapString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WrapString( FTextSizingParameters& Parameters, const float InCurX, FStringView Text, TArray<FWrappedStringElement>& out_Lines, FCanvasWordWrapper::FWrappedLineData* const OutWrappedLineData = nullptr)"
  },
  {
    "label": "DrawNGon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawNGon(const FVector2D& Center, const FColor& Color, int32 NumSides, float Radius)"
  },
  {
    "label": "StringSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StringSize( const UFont* Font, int32& XL, int32& YL, FStringView Text)"
  }
]