[
  {
    "label": "FBatchedElementParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBatchedElementParameters"
  },
  {
    "label": "FBatchedElements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBatchedElements"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FCanvasBatchedElementRenderItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasBatchedElementRenderItem"
  },
  {
    "label": "FCanvasRenderContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasRenderContext"
  },
  {
    "label": "FCanvasRenderThreadScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasRenderThreadScope"
  },
  {
    "label": "FCanvasItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasItem"
  },
  {
    "label": "FTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTexture"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FRenderTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderTarget"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "IBreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBreakIterator"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "FRDGTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTexture"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FMeshPassProcessorRenderState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshPassProcessorRenderState"
  },
  {
    "label": "EShaderPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderPlatform"
  },
  {
    "label": "FTextSizingParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextSizingParameters"
  },
  {
    "label": "FWrappedStringElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWrappedStringElement"
  },
  {
    "label": "FCanvasWordWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasWordWrapper"
  },
  {
    "label": "FWrappingState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWrappingState"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "EElementType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EElementType"
  },
  {
    "label": "ECanvasAllowModes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECanvasAllowModes"
  },
  {
    "label": "ECanvasDrawMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECanvasDrawMode"
  },
  {
    "label": "FTransformEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransformEntry"
  },
  {
    "label": "FCanvasSortElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasSortElement"
  },
  {
    "label": "FCanvasBaseRenderItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasBaseRenderItem"
  },
  {
    "label": "FCanvasTileRendererItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasTileRendererItem"
  },
  {
    "label": "FCanvasTriangleRendererItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasTriangleRendererItem"
  },
  {
    "label": "FScreenMessageWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenMessageWriter"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GameTime . h \" # include \" SceneTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / EngineTypes . h \" # include \" HitProxies . h \" # include \" CanvasTypes . generated . h \" class FBatchedElementParameters ; class FBatchedElements ; class FRDGBuilder ; class FRHICommandListImmediate ; class FCanvasBatchedElementRenderItem ; class FCanvasRenderContext ; class FCanvasRenderThreadScope ; class FCanvasItem ; class FTexture ; class FMaterialRenderProxy ; class FRenderTarget ; class FSceneInterface ; class IBreakIterator ; class UFont ; class FRDGTexture ; namespace ERHIFeatureLevel { enum Type : int ; } struct FMeshPassProcessorRenderState ; using FRDGTextureRef = FRDGTexture* ; enum EShaderPlatform : uint16 ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FTextSizingParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextSizingParameters() : DrawX(0) , DrawY(0) , DrawXL(0) , DrawYL(0) , Scaling(ForceInit) , DrawFont(NULL) , SpacingAdjust(ForceInit)"
  },
  {
    "label": "FTextSizingParameters()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTextSizingParameters(float inDrawX, float inDrawY, float inDrawXL, float inDrawYL, const UFont* inFont=NULL ) : DrawX(inDrawX), DrawY(inDrawY), DrawXL(inDrawXL), DrawYL(inDrawYL) , Scaling(1.f,1.f), DrawFont(inFont) , SpacingAdjust( 0.0f, 0.0f)"
  },
  {
    "label": "FTextSizingParameters()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTextSizingParameters(const UFont* inFont, float ScaleX, float ScaleY) : DrawX(0.f), DrawY(0.f), DrawXL(0.f), DrawYL(0.f) , Scaling(ScaleX,ScaleY), DrawFont(inFont) , SpacingAdjust( 0.0f, 0.0f)"
  },
  {
    "label": "FWrappedStringElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWrappedStringElement() : LineExtent(ForceInit)"
  },
  {
    "label": "FWrappedStringElement()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWrappedStringElement(FString&& InValue, float Width, float Height ) : Value(MoveTemp(InValue)), LineExtent(Width,Height)"
  },
  {
    "label": "FWrappedStringElement()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWrappedStringElement(const FString& InValue, float Width, float Height) : Value(CopyTemp(InValue)), LineExtent(Width, Height)"
  },
  {
    "label": "FWrappingState()",
    "kind": "Method",
    "detail": "Function (} } ; class FCanvasWordWrapper { public : typedef TArray<TPair<int32,int32>> FWrappedLineData ; private : struct FWrappingState {)",
    "insertText": "FWrappingState(FStringView InString, const FTextSizingParameters& InParameters, TArray<FWrappedStringElement>& InResults, FWrappedLineData* const InWrappedLineData) : String(InString) , Parameters(InParameters) , StartIndex(0) , Results(InResults) , WrappedLineData(InWrappedLineData)"
  },
  {
    "label": "FCanvasWordWrapper()",
    "kind": "Method",
    "detail": "Function (} FStringView String ; const FTextSizingParameters& Parameters ; int32 StartIndex ; TArray<FWrappedStringElement>& Results ; FWrappedLineData* const WrappedLineData ; } ; public :)",
    "insertText": "FCanvasWordWrapper()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Execute(FStringView InString, const FTextSizingParameters& InParameters, TArray<FWrappedStringElement>& OutStrings, FWrappedLineData* const OutWrappedLineData)"
  },
  {
    "label": "ProcessLine()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ProcessLine(FWrappingState& WrappingState)"
  },
  {
    "label": "DoesSubstringFit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSubstringFit(FWrappingState& WrappingState, const int32 EndIndex)"
  },
  {
    "label": "FindIndexAtOrAfterWrapWidth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindIndexAtOrAfterWrapWidth(FWrappingState& WrappingState)"
  },
  {
    "label": "AddLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLine(FWrappingState& WrappingState, const int32 EndIndex)"
  },
  {
    "label": "FindFirstMandatoryBreakBetween()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindFirstMandatoryBreakBetween(FWrappingState& WrappingState, const int32 WrapIndex)"
  },
  {
    "label": "FindLastBreakCandidateBetween()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindLastBreakCandidateBetween(const int32 StartIndex, const int32 WrapIndex)"
  },
  {
    "label": "FindEndOfLastWholeGraphemeCluster()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindEndOfLastWholeGraphemeCluster(const int32 StartIndex, const int32 WrapIndex)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<IBreakIterator> GraphemeBreakIterator ; TSharedPtr<IBreakIterator> LineBreakIterator ; } ; class FCanvas { public : enum EElementType { ET_Line,ET_Triangle,ET_MAX } ; enum ECanvasAllowModes { Allow_Flush = 1<<0,Allow_DeleteOnRender = 1<<1 } ; enum ECanvasDrawMode { CDM_DeferDrawing,CDM_ImmediateDrawing } ; FCanvas*)",
    "insertText": "Create(FRDGBuilder& GraphBuilder, FRDGTextureRef InRenderTarget, FHitProxyConsumer* InHitProxyConsumer, const FGameTime& Time, ERHIFeatureLevel::Type InFeatureLevel, float InDPIScale = 1.0f)"
  },
  {
    "label": "FCanvas()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCanvas(FRenderTarget* InRenderTarget, FHitProxyConsumer* InHitProxyConsumer, UWorld* InWorld, ERHIFeatureLevel::Type InFeatureLevel, ECanvasDrawMode DrawMode = CDM_DeferDrawing, float InDPIScale = 1.0f)"
  },
  {
    "label": "FCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCanvas(FRenderTarget* InRenderTarget, FHitProxyConsumer* InHitProxyConsumer, const FGameTime& Time, ERHIFeatureLevel::Type InFeatureLevel, float InDPIScale = 1.0f)"
  },
  {
    "label": "FCanvas()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCanvas()"
  },
  {
    "label": "BlendToSimpleElementBlend()",
    "kind": "Method",
    "detail": "Function (ESimpleElementBlendMode)",
    "insertText": "BlendToSimpleElementBlend(EBlendMode BlendMode)"
  },
  {
    "label": "GetBatchedElements()",
    "kind": "Method",
    "detail": "Function (FBatchedElements*)",
    "insertText": "GetBatchedElements(EElementType InElementType, FBatchedElementParameters* InBatchedElementParameters = NULL, const FTexture* Texture = NULL, ESimpleElementBlendMode BlendMode = SE_BLEND_MAX, const FDepthFieldGlowInfo& GlowInfo = FDepthFieldGlowInfo(), bool bApplyDPIScale = true)"
  },
  {
    "label": "AddTileRenderItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTileRenderItem(float X, float Y, float SizeX, float SizeY, float U, float V, float SizeU, float SizeV, const FMaterialRenderProxy* MaterialRenderProxy, FHitProxyId HitProxyId, bool bFreezeTime, FColor InColor)"
  },
  {
    "label": "AddTriangleRenderItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangleRenderItem(const FCanvasUVTri& Tri, const FMaterialRenderProxy* MaterialRenderProxy, FHitProxyId HitProxyId, bool bFreezeTime)"
  },
  {
    "label": "Flush_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush_RenderThread(FRHICommandListImmediate& RHICmdList, bool bForce = false)"
  },
  {
    "label": "Flush_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush_RenderThread(FRDGBuilder& GraphBuilder, bool bForce = false)"
  },
  {
    "label": "Flush_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush_GameThread(bool bForce = false)"
  },
  {
    "label": "PushRelativeTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushRelativeTransform(const FMatrix& Transform)"
  },
  {
    "label": "PushAbsoluteTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushAbsoluteTransform(const FMatrix& Transform)"
  },
  {
    "label": "PopTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopTransform()"
  },
  {
    "label": "SetBaseTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBaseTransform(const FMatrix& Transform)"
  },
  {
    "label": "CalcBaseTransform2D()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "CalcBaseTransform2D(uint32 ViewSizeX, uint32 ViewSizeY)"
  },
  {
    "label": "CalcBaseTransform3D()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "CalcBaseTransform3D(uint32 ViewSizeX, uint32 ViewSizeY, float fFOV, float NearPlane)"
  },
  {
    "label": "CalcViewMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "CalcViewMatrix(uint32 ViewSizeX, uint32 ViewSizeY, float fFOV)"
  },
  {
    "label": "CalcProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "CalcProjectionMatrix(uint32 ViewSizeX, uint32 ViewSizeY, float fFOV, float NearPlane)"
  },
  {
    "label": "GetTransform()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetTransform()"
  },
  {
    "label": "GetBottomTransform()",
    "kind": "Method",
    "detail": "Function (} const FMatrix&)",
    "insertText": "GetBottomTransform()"
  },
  {
    "label": "GetFullTransform()",
    "kind": "Method",
    "detail": "Function (} const FMatrix&)",
    "insertText": "GetFullTransform()"
  },
  {
    "label": "CopyTransformStack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyTransformStack(const FCanvas& Copy)"
  },
  {
    "label": "SetRenderTarget_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTarget_GameThread(FRenderTarget* NewRenderTarget)"
  },
  {
    "label": "SetRenderTargetScissorRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargetScissorRect(const FIntRect& ScissorRect)"
  },
  {
    "label": "SetRenderTargetDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargetDirty(bool bDirty)"
  },
  {
    "label": "SetHitProxy()",
    "kind": "Method",
    "detail": "Function (bRenderTargetDirty = bDirty ; } void)",
    "insertText": "SetHitProxy(HHitProxy* HitProxy)"
  },
  {
    "label": "GetHitProxyId()",
    "kind": "Method",
    "detail": "Function (FHitProxyId)",
    "insertText": "GetHitProxyId()"
  },
  {
    "label": "GetHitProxyConsumer()",
    "kind": "Method",
    "detail": "Function (} FHitProxyConsumer*)",
    "insertText": "GetHitProxyConsumer()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (DepthSortKeyStack .)",
    "insertText": "Push(InSortKey)"
  },
  {
    "label": "PopDepthSortKey()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "PopDepthSortKey()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Result = 0 ;)",
    "insertText": "if(DepthSortKeyStack.Num() > 0)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Result = DepthSortKeyStack .)",
    "insertText": "Pop()"
  },
  {
    "label": "PushDepthSortKey()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "PushDepthSortKey(0)"
  },
  {
    "label": "TopDepthSortKey()",
    "kind": "Method",
    "detail": "Function (} return Result ; } ; int32)",
    "insertText": "TopDepthSortKey()"
  },
  {
    "label": "SetAllowedModes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAllowedModes(uint32 InAllowedModes)"
  },
  {
    "label": "GetAllowedModes()",
    "kind": "Method",
    "detail": "Function (AllowedModes = InAllowedModes ; } uint32)",
    "insertText": "GetAllowedModes()"
  },
  {
    "label": "ClearBatchesToRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBatchesToRender()"
  },
  {
    "label": "GetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (ERHIFeatureLevel::Type)",
    "insertText": "GetFeatureLevel()"
  },
  {
    "label": "FTransformEntry()",
    "kind": "Method",
    "detail": "Function (public : float AlphaModulate ; class FTransformEntry { public :)",
    "insertText": "FTransformEntry(const FMatrix& InMatrix) : Matrix(InMatrix)"
  },
  {
    "label": "MemCrc_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (MatrixCRC =)",
    "insertText": "MemCrc_DEPRECATED(&Matrix, sizeof(FMatrix))"
  },
  {
    "label": "SetMatrix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMatrix(const FMatrix& InMatrix)"
  },
  {
    "label": "GetMatrix()",
    "kind": "Method",
    "detail": "Function (} const FMatrix&)",
    "insertText": "GetMatrix()"
  },
  {
    "label": "IsScaledToRenderTarget()",
    "kind": "Method",
    "detail": "Function (bScaledToRenderTarget = bScale ; } bool)",
    "insertText": "IsScaledToRenderTarget()"
  },
  {
    "label": "IsStereoRendering()",
    "kind": "Method",
    "detail": "Function (bStereoRendering = bStereo ; } bool)",
    "insertText": "IsStereoRendering()"
  },
  {
    "label": "IsUsingInternalTexture()",
    "kind": "Method",
    "detail": "Function (bUseInternalTexture = bInUseInternalTexture ; } bool)",
    "insertText": "IsUsingInternalTexture()"
  },
  {
    "label": "GetParentCanvasSize()",
    "kind": "Method",
    "detail": "Function (ParentSize = InParentSize ; } FIntPoint)",
    "insertText": "GetParentCanvasSize()"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (public : const FGameTime&)",
    "insertText": "GetTime()"
  },
  {
    "label": "DrawItem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawItem(FCanvasItem& Item)"
  },
  {
    "label": "DrawItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawItem(FCanvasItem& Item, const FVector2D& InPosition)"
  },
  {
    "label": "DrawItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawItem(FCanvasItem& Item, float X, float Y)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear(const FLinearColor& Color)"
  },
  {
    "label": "DrawTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTile(double X, double Y, double SizeX, double SizeY, float U, float V, float SizeU, float SizeV, const FLinearColor& Color, const FTexture* Texture = NULL, bool AlphaBlend = true)"
  },
  {
    "label": "DrawTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTile(double X, double Y, double SizeX, double SizeY, float U, float V, float SizeU, float SizeV, const FLinearColor& Color, const FTexture* Texture, ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "DrawShadowedString()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawShadowedString(double StartX, double StartY, FStringView Text, const UFont* Font, const FLinearColor& Color, const FLinearColor& ShadowColor = FLinearColor::Black)"
  },
  {
    "label": "DrawShadowedText()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawShadowedText(double StartX, double StartY, const FText& Text, const UFont* Font, const FLinearColor& Color, const FLinearColor& ShadowColor = FLinearColor::Black)"
  },
  {
    "label": "WrapString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WrapString(FTextSizingParameters& Parameters, const float InCurX, FStringView Text, TArray<FWrappedStringElement>& out_Lines, FCanvasWordWrapper::FWrappedLineData* const OutWrappedLineData = nullptr)"
  },
  {
    "label": "DrawNGon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawNGon(const FVector2D& Center, const FColor& Color, int32 NumSides, float Radius)"
  },
  {
    "label": "FCanvasSortElement()",
    "kind": "Method",
    "detail": "Function (class FCanvasSortElement { public :)",
    "insertText": "FCanvasSortElement(int32 InDepthSortKey=0) : DepthSortKey(InDepthSortKey)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FCanvasSortElement& Other)"
  },
  {
    "label": "FCanvasBaseRenderItem()",
    "kind": "Method",
    "detail": "Function (class FCanvasRenderContext ; class FCanvasRenderThreadScope ; } ; class FCanvasBaseRenderItem { public : ~)",
    "insertText": "FCanvasBaseRenderItem()"
  },
  {
    "label": "Render_RenderThread()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Render_RenderThread(FCanvasRenderContext& RenderContext, FMeshPassProcessorRenderState& DrawRenderState, const FCanvas* Canvas)"
  },
  {
    "label": "Render_GameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Render_GameThread(const FCanvas* Canvas, FCanvasRenderThreadScope& RenderScope)"
  },
  {
    "label": "GetCanvasBatchedElementRenderItem()",
    "kind": "Method",
    "detail": "Function (class FCanvasBatchedElementRenderItem*)",
    "insertText": "GetCanvasBatchedElementRenderItem()"
  },
  {
    "label": "FScreenMessageWriter()",
    "kind": "Method",
    "detail": "Function (struct FScreenMessageWriter {)",
    "insertText": "FScreenMessageWriter(FCanvas& InCanvas, int32 InY) : Canvas(InCanvas) , Y(InY)"
  },
  {
    "label": "EmptyLine()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmptyLine()"
  },
  {
    "label": "DrawLine()",
    "kind": "Method",
    "detail": "Function (Y + = 1 4 ; } void)",
    "insertText": "DrawLine(const FText& Message, int32 X = 10, const FLinearColor& Color = FLinearColor(1.0f, 0.05f, 0.05f, 1.0f))"
  }
]