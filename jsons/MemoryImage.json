[
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "FMemoryImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryImage"
  },
  {
    "label": "FMemoryImageString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryImageString"
  },
  {
    "label": "FPointerTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointerTableBase"
  },
  {
    "label": "TMemoryImageObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMemoryImageObject"
  },
  {
    "label": "FMemoryImageVTablePointer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryImageVTablePointer"
  },
  {
    "label": "FMemoryImageNamePointer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryImageNamePointer"
  },
  {
    "label": "FMemoryImageResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryImageResult"
  },
  {
    "label": "FMemoryImageSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryImageSection"
  },
  {
    "label": "FSectionPointer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionPointer"
  },
  {
    "label": "FMemoryImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryImage"
  },
  {
    "label": "UStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStruct"
  },
  {
    "label": "should",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "should"
  },
  {
    "label": "FFrozenMemoryImagePtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrozenMemoryImagePtr"
  },
  {
    "label": "TMemoryImagePtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMemoryImagePtr"
  },
  {
    "label": "TUniqueMemoryImagePtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUniqueMemoryImagePtr"
  },
  {
    "label": "CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CORE_API"
  },
  {
    "label": "TMemoryImageAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMemoryImageAllocator"
  },
  {
    "label": "ForAnyElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForAnyElementType"
  },
  {
    "label": "ForElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForElementType"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "FMemoryImageString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryImageString"
  },
  {
    "label": "FHashedNameDebugString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHashedNameDebugString"
  },
  {
    "label": "FHashedName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHashedName"
  },
  {
    "label": "CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CORE_API"
  },
  {
    "label": "FPatchOffset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPatchOffset"
  },
  {
    "label": "FPatchOffsetList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPatchOffsetList"
  },
  {
    "label": "TPtrTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPtrTableBase"
  },
  {
    "label": "TPtrTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPtrTable"
  },
  {
    "label": "TRefCountPtrTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRefCountPtrTable"
  },
  {
    "label": "FVoidPtrTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVoidPtrTable"
  },
  {
    "label": "TIndexedPtrBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIndexedPtrBase"
  },
  {
    "label": "TPatchedPtrBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPatchedPtrBase"
  },
  {
    "label": "LoadFromArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromArchive(FArchive& Ar, const FPlatformTypeLayoutParameters& LayoutParams, void* FrozenObject)"
  },
  {
    "label": "AddTypeDependency()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddTypeDependency(const FTypeLayoutDesc& TypeDesc)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(const FPointerTableBase* PointerTable)"
  },
  {
    "label": "Freeze()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Freeze(FPointerTableBase* PointerTable)"
  },
  {
    "label": "Unfreeze()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Unfreeze(const FPointerTableBase* PointerTable)"
  },
  {
    "label": "FreezeMemoryImageObject()",
    "kind": "Method",
    "detail": "Function (FMemoryImageObject)",
    "insertText": "FreezeMemoryImageObject(const void* Object, const FTypeLayoutDesc& TypeDesc, FPointerTableBase* PointerTable)"
  },
  {
    "label": "LoadFromArchive()",
    "kind": "Method",
    "detail": "Function (FMemoryImageObject)",
    "insertText": "LoadFromArchive(FArchive& Ar, const FTypeLayoutDesc& TypeDesc, FPointerTableBase* PointerTable, FPlatformTypeLayoutParameters& OutLayoutParameters)"
  },
  {
    "label": "WriteRawPointerSizedBytes()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "WriteRawPointerSizedBytes(uint64 PointerValue)"
  },
  {
    "label": "WriteVTable()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "WriteVTable(const FTypeLayoutDesc& TypeDesc, const FTypeLayoutDesc& DerivedTypeDesc)"
  },
  {
    "label": "WriteFMemoryImageName()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "WriteFMemoryImageName(int32 NumBytes, const FName& Name)"
  },
  {
    "label": "WriteFScriptName()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "WriteFScriptName(const FScriptName& Name)"
  },
  {
    "label": "ComputeHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeHash()"
  },
  {
    "label": "FMemoryImageSection()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "FMemoryImageSection(this)"
  },
  {
    "label": "Flatten()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flatten(FMemoryImageResult& OutResult, bool bMergeDuplicateSections = false)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (Offset)",
    "insertText": "static_assert(OffsetShift + OffsetBits == 64)"
  },
  {
    "label": "GetChecked()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetChecked()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Get()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "new(DerivedTypeDesc->Size)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "sizeof(Object)"
  },
  {
    "label": "MoveToEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveToEmpty(FMemoryImageAllocatorBase& Other)"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeAllocation(int32 PreviousNumElements, int32 NumElements, SIZE_T NumBytesPerElement, uint32 Alignment)"
  },
  {
    "label": "DefaultCalculateSlackReserve()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DefaultCalculateSlackReserve(NewMax, NumBytesPerElement, true, Alignment)"
  },
  {
    "label": "DefaultCalculateSlackReserve()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DefaultCalculateSlackReserve(NewMax, NumBytesPerElement, true, AlignmentOfElement)"
  },
  {
    "label": "DefaultCalculateSlackShrink()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DefaultCalculateSlackShrink(NewMax, CurrentMax, NumBytesPerElement, true, Alignment)"
  },
  {
    "label": "DefaultCalculateSlackShrink()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DefaultCalculateSlackShrink(NewMax, CurrentMax, NumBytesPerElement, true, AlignmentOfElement)"
  },
  {
    "label": "DefaultCalculateSlackGrow()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DefaultCalculateSlackGrow(NewMax, CurrentMax, NumBytesPerElement, true, Alignment)"
  },
  {
    "label": "DefaultCalculateSlackGrow()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DefaultCalculateSlackGrow(NewMax, CurrentMax, NumBytesPerElement, true, AlignmentOfElement)"
  },
  {
    "label": "IntrinsicWriteMemoryImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicWriteMemoryImage(FMemoryImageWriter& Writer, const FHashedNameDebugString& Object, const FTypeLayoutDesc&)"
  },
  {
    "label": "IntrinsicUnfrozenCopy()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "IntrinsicUnfrozenCopy(const FMemoryUnfreezeContent& Context, const FHashedNameDebugString& Object, void* OutDst)"
  },
  {
    "label": "FHashedName()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FHashedName(uint64 InHash)"
  },
  {
    "label": "FHashedName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FHashedName(const FHashedName& InName)"
  },
  {
    "label": "FHashedName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FHashedName(const TCHAR* InString)"
  },
  {
    "label": "FHashedName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FHashedName(const FString& InString)"
  },
  {
    "label": "FHashedName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FHashedName(const FName& InName)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetTypeHash(Name.Hash)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "LAYOUT_FIELD(uint64, Hash)"
  },
  {
    "label": "TryLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLoad(FCbFieldView Field)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FHashedName& OutValue)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(const FHashedName& Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "AddPatchedPointerBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPatchedPointerBase(uint32 PtrIndex, uint64 Offset)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "sizeof(Object)"
  },
  {
    "label": "GetChecked()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetChecked()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Get()"
  }
]