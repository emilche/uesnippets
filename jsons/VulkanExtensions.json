[
  {
    "label": "FOptionalVulkanInstanceExtensions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptionalVulkanInstanceExtensions"
  },
  {
    "label": "FVulkanDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDevice"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVulkanExtensionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanExtensionBase"
  },
  {
    "label": "EExtensionActivation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EExtensionActivation"
  },
  {
    "label": "FVulkanDeviceExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDeviceExtension"
  },
  {
    "label": "FOptionalVulkanDeviceExtensionProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptionalVulkanDeviceExtensionProperties"
  },
  {
    "label": "FVulkanInstanceExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanInstanceExtension"
  },
  {
    "label": "FVulkanExtensionBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VulkanConfiguration . h \" struct FOptionalVulkanInstanceExtensions ; # define VULKAN_EXTENSION_NOT_PROMOTED UINT32_MAX # define VULKAN_EXTENSION_ENABLED 1 # define VULKAN_EXTENSION_DISABLED 0 class FVulkanDevice ; enum class EVulkanVariableRateShadingPreference : uint8 { PreferFSR = 0,UseFSROnlyIfAvailable,RequireFSR,PreferFDM,UseFDMOnlyIfAvailable,RequireFDM,} ; class FVulkanExtensionBase { public : enum EExtensionActivation : uint8 { AutoActivate,ManuallyActivate } ;)",
    "insertText": "FVulkanExtensionBase(const ANSICHAR* InExtensionName, int32 InEnabledInCode, uint32 InPromotedVersion, EExtensionActivation InActivation) : ExtensionName(InExtensionName) , PromotedVersion(InPromotedVersion) , bEnabledInCode(InEnabledInCode == VULKAN_EXTENSION_ENABLED) , bSupported(false) , bActivated(InActivation == EExtensionActivation::AutoActivate) , bCore(false)"
  },
  {
    "label": "FVulkanExtensionBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVulkanExtensionBase()"
  },
  {
    "label": "SetSupported()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSupported()"
  },
  {
    "label": "SetActivated()",
    "kind": "Method",
    "detail": "Function (bSupported = true ; } void)",
    "insertText": "SetActivated()"
  },
  {
    "label": "SetCore()",
    "kind": "Method",
    "detail": "Function (bActivated = true ; } bool)",
    "insertText": "SetCore(uint32 ApiVersion)"
  },
  {
    "label": "GetExtensionName()",
    "kind": "Method",
    "detail": "Function (} const ANSICHAR*)",
    "insertText": "GetExtensionName()"
  },
  {
    "label": "GetUESupportedDeviceExtensions()",
    "kind": "Method",
    "detail": "Function (} FVulkanDeviceExtensionArray)",
    "insertText": "GetUESupportedDeviceExtensions(FVulkanDevice* InDevice, uint32 ApiVersion)"
  },
  {
    "label": "GetDriverSupportedDeviceExtensions()",
    "kind": "Method",
    "detail": "Function (TArray<VkExtensionProperties>)",
    "insertText": "GetDriverSupportedDeviceExtensions(VkPhysicalDevice Gpu, const ANSICHAR* LayerName = nullptr)"
  },
  {
    "label": "PrePhysicalDeviceProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrePhysicalDeviceProperties(VkPhysicalDeviceProperties2KHR& PhysicalDeviceProperties2)"
  },
  {
    "label": "PostPhysicalDeviceProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostPhysicalDeviceProperties()"
  },
  {
    "label": "PrePhysicalDeviceFeatures()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrePhysicalDeviceFeatures(VkPhysicalDeviceFeatures2KHR& PhysicalDeviceFeatures2)"
  },
  {
    "label": "PostPhysicalDeviceFeatures()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostPhysicalDeviceFeatures(FOptionalVulkanDeviceExtensions& ExtensionFlags)"
  },
  {
    "label": "FlagSetter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlagSetter(ExtensionFlags)"
  },
  {
    "label": "PreCreateDevice()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PreCreateDevice(VkDeviceCreateInfo& DeviceInfo)"
  },
  {
    "label": "GetDeviceExtensionProperties()",
    "kind": "Method",
    "detail": "Function (} TArray<const ANSICHAR*> ExternalExtensions ; protected : struct FOptionalVulkanDeviceExtensionProperties&)",
    "insertText": "GetDeviceExtensionProperties()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (FVulkanDevice* Device ; TUniqueFunction<)",
    "insertText": "void(FOptionalVulkanDeviceExtensions& ExtensionFlags)"
  },
  {
    "label": "FVulkanInstanceExtension()",
    "kind": "Method",
    "detail": "Function (bool bRequirementsPassed ; } ; class FVulkanInstanceExtension : public FVulkanExtensionBase { public :)",
    "insertText": "FVulkanInstanceExtension(const ANSICHAR* InExtensionName, int32 InEnabledInCode, uint32 InPromotedVersion = VULKAN_EXTENSION_NOT_PROMOTED, TUniqueFunction<void(FOptionalVulkanInstanceExtensions& ExtensionFlags)>&& InFlagSetter = nullptr, EExtensionActivation InActivation = FVulkanExtensionBase::AutoActivate) : FVulkanExtensionBase(InExtensionName, InEnabledInCode, InPromotedVersion, InActivation) , FlagSetter(MoveTemp(InFlagSetter))"
  },
  {
    "label": "GetUESupportedInstanceExtensions()",
    "kind": "Method",
    "detail": "Function (} FVulkanInstanceExtensionArray)",
    "insertText": "GetUESupportedInstanceExtensions(uint32 ApiVersion)"
  },
  {
    "label": "GetDriverSupportedInstanceExtensions()",
    "kind": "Method",
    "detail": "Function (TArray<VkExtensionProperties>)",
    "insertText": "GetDriverSupportedInstanceExtensions(const ANSICHAR* LayerName = nullptr)"
  },
  {
    "label": "PreCreateInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreCreateInstance(VkInstanceCreateInfo& CreateInfo, FOptionalVulkanInstanceExtensions& ExtensionFlags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } TArray<const ANSICHAR*> ExternalExtensions ; protected : TUniqueFunction<)",
    "insertText": "void(FOptionalVulkanInstanceExtensions& ExtensionFlags)"
  },
  {
    "label": "DEVICE_EXT_FLAG_SETTER()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "DEVICE_EXT_FLAG_SETTER(FLAG_NAME) [](FOptionalVulkanDeviceExtensions& ExtensionFlags)"
  },
  {
    "label": "INSTANCE_EXT_FLAG_SETTER()",
    "kind": "Method",
    "detail": "Function (ExtensionFlags . FLAG_NAME = 1 ; } # define)",
    "insertText": "INSTANCE_EXT_FLAG_SETTER(FLAG_NAME) [](FOptionalVulkanInstanceExtensions& ExtensionFlags)"
  }
]