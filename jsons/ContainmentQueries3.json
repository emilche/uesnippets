[
  {
    "label": "TTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTransform"
  },
  {
    "label": "GridType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridType"
  },
  {
    "label": "TTriLinearGridInterpolant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTriLinearGridInterpolant"
  },
  {
    "label": "TCapsule3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCapsule3"
  },
  {
    "label": "THalfspace3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "THalfspace3"
  },
  {
    "label": "TSphere3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSphere3"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BoxTypes . h \" # include \" CapsuleTypes . h \" # include \" Containers / ArrayView . h \" # include \" CoreMinimal . h \" # include \" HalfspaceTypes . h \" # include \" Implicit / GridInterpolant . h \" # include \" IntVectorTypes . h \" # include \" Intersection / IntersectionQueries3 . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" OrientedBoxTypes . h \" # include \" SphereTypes . h \" # include \" Templates / UnrealTemplate . h \" # include \" VectorTypes . h \" namespace UE { namespace Math { template<T> struct TTransform ; } namespace Geometry { template<class GridType,RealType,bool bScalarCellSize> class TTriLinearGridInterpolant ; template<T> struct TCapsule3 ; template<T> struct THalfspace3 ; template<T> struct TSphere3 ; template<RealType> bool)",
    "insertText": "IsInside(const TSphere3<RealType>& OuterSphere, const TSphere3<RealType>& InnerSphere)"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (template<RealType> bool)",
    "insertText": "IsInside(const TSphere3<RealType>& OuterSphere, const TCapsule3<RealType>& InnerCapsule)"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (template<RealType> bool)",
    "insertText": "IsInside(const TSphere3<RealType>& OuterSphere, const TOrientedBox3<RealType>& InnerBox)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<RealType,EnumerablePointsType,E =)",
    "insertText": "decltype(DeclVal<EnumerablePointsType>().begin())> bool IsInside(const TSphere3<RealType>& OuterSphere, EnumerablePointsType EnumerablePts)"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (} template<RealType> bool)",
    "insertText": "IsInside(const TCapsule3<RealType>& OuterCapsule, const TCapsule3<RealType>& InnerCapsule)"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (template<RealType> bool)",
    "insertText": "IsInside(const TCapsule3<RealType>& OuterCapsule, const TSphere3<RealType>& InnerSphere)"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (template<RealType> bool)",
    "insertText": "IsInside(const TCapsule3<RealType>& OuterCapsule, const TOrientedBox3<RealType>& InnerBox)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<RealType,EnumerablePointsType,E =)",
    "insertText": "decltype(DeclVal<EnumerablePointsType>().begin())> bool IsInside(const TCapsule3<RealType>& OuterCapsule, EnumerablePointsType EnumerablePts)"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (} template<RealType> bool)",
    "insertText": "IsInside(const TOrientedBox3<RealType>& OuterBox, const TOrientedBox3<RealType>& InnerBox)"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (template<RealType> bool)",
    "insertText": "IsInside(const TOrientedBox3<RealType>& OuterBox, const TSphere3<RealType>& InnerSphere)"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (template<RealType> bool)",
    "insertText": "IsInside(const TOrientedBox3<RealType>& OuterBox, const TCapsule3<RealType>& InnerCapsule)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<RealType,EnumerablePointsType,E =)",
    "insertText": "decltype(DeclVal<EnumerablePointsType>().begin())> bool IsInside(const TOrientedBox3<RealType>& OuterBox, EnumerablePointsType EnumerablePts)"
  },
  {
    "label": "IsInsideHull()",
    "kind": "Method",
    "detail": "Function (} template<RealType> bool)",
    "insertText": "IsInsideHull(TArrayView<THalfspace3<RealType>> Halfspaces, const TSphere3<RealType>& InnerSphere)"
  },
  {
    "label": "IsInsideHull()",
    "kind": "Method",
    "detail": "Function (template<RealType> bool)",
    "insertText": "IsInsideHull(TArrayView<THalfspace3<RealType>> Halfspaces, const TCapsule3<RealType>& InnerCapsule)"
  },
  {
    "label": "IsInsideHull()",
    "kind": "Method",
    "detail": "Function (template<RealType> bool)",
    "insertText": "IsInsideHull(TArrayView<THalfspace3<RealType>> Halfspaces, const TOrientedBox3<RealType>& InnerBox)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<RealType,EnumerablePointsType,E =)",
    "insertText": "decltype(DeclVal<EnumerablePointsType>().begin())> bool IsInsideHull(TArrayView<THalfspace3<RealType>> Halfspaces, EnumerablePointsType EnumerablePts)"
  },
  {
    "label": "IsInsideHull()",
    "kind": "Method",
    "detail": "Function (template<RealType,GridType> bool)",
    "insertText": "IsInsideHull(TArrayView<THalfspace3<RealType>> Halfspaces, const TTriLinearGridInterpolant<GridType>& InnerGrid)"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (} template<RealType,GridType> bool)",
    "insertText": "IsInside(const TTriLinearGridInterpolant<GridType>& OuterGrid, const TTransform<RealType>& OuterGridTransform, const TSphere3<RealType>& InnerSphere)"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (template<RealType,GridType> bool)",
    "insertText": "IsInside(const TTriLinearGridInterpolant<GridType>& OuterGrid, const TTransform<RealType>& OuterGridTransform, const TCapsule3<RealType>& InnerCapsule)"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (template<RealType,GridType> bool)",
    "insertText": "IsInside(const TTriLinearGridInterpolant<GridType>& OuterGrid, const TTransform<RealType>& OuterGridTransform, const TOrientedBox3<RealType>& InnerBox)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<RealType,GridType,EnumerablePointsType,E =)",
    "insertText": "decltype(DeclVal<EnumerablePointsType>().begin())> bool IsInside(const TTriLinearGridInterpolant<GridType>& OuterGrid, const TTransform<RealType>& OuterGridTransform, EnumerablePointsType EnumerablePts)"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (template<RealType,GridType1,GridType2> bool)",
    "insertText": "IsInside(const TTriLinearGridInterpolant<GridType1>& OuterGrid, const TTransform<RealType>& OuterGridTransform, const TTriLinearGridInterpolant<GridType2>& InnerGrid, const TTransform<RealType>& InnerGridTransform)"
  },
  {
    "label": "Cell()",
    "kind": "Method",
    "detail": "Function (const FVector3i MinCell = OuterGrid .)",
    "insertText": "Cell(InnerAABB.Min)"
  },
  {
    "label": "Cell()",
    "kind": "Method",
    "detail": "Function (FVector3i MaxCell = OuterGrid .)",
    "insertText": "Cell(InnerAABB.Max)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (RealType GridCellValue = OuterGrid . Grid ->)",
    "insertText": "GetValue(I, J, K)"
  },
  {
    "label": "InnerAABB()",
    "kind": "Method",
    "detail": "Function (const TAxisAlignedBox3<RealType>)",
    "insertText": "InnerAABB(InnerSphere.Center - InnerSphere.Radius * TVector<RealType>::OneVector, InnerSphere.Center + InnerSphere.Radius * TVector<RealType>::OneVector)"
  },
  {
    "label": "GridSpaceInnerAABB()",
    "kind": "Method",
    "detail": "Function (const TAxisAlignedBox3<RealType>)",
    "insertText": "GridSpaceInnerAABB(InnerAABB, [&OuterGridTransform](const TVector<RealType>& Corner) { return OuterGridTransform.InverseTransformPosition(Corner); })"
  },
  {
    "label": "GridSpaceInnerAABB()",
    "kind": "Method",
    "detail": "Function (const TAxisAlignedBox3<RealType>)",
    "insertText": "GridSpaceInnerAABB(InnerCapsule.GetBounds(), [&OuterGridTransform](const TVector<RealType>& Corner) { return OuterGridTransform.InverseTransformPosition(Corner); })"
  },
  {
    "label": "EnumerateCorners()",
    "kind": "Method",
    "detail": "Function (TAxisAlignedBox3<RealType> GridSpaceInnerAABB ; InnerBox .)",
    "insertText": "EnumerateCorners([&OuterGridTransform, &GridSpaceInnerAABB](const FVector3d& CornerPt) { GridSpaceInnerAABB.Contain(OuterGridTransform.InverseTransformPosition(CornerPt)); })"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (} template<RealType,GridType,EnumerablePointsType,E> bool)",
    "insertText": "IsInside(const TTriLinearGridInterpolant<GridType>& OuterGrid, const TTransform<RealType>& OuterGridTransform, EnumerablePointsType EnumerablePts)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TAxisAlignedBox3<RealType> GridSpaceInnerAABB ;)",
    "insertText": "for(TVector<RealType> Point : EnumerablePts)"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (GridSpaceInnerAABB .)",
    "insertText": "Contain(OuterGridTransform.InverseTransformPosition(Point))"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "IsInside(OuterGrid, GridSpaceInnerAABB)"
  }
]