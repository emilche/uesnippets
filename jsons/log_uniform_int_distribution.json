[
  {
    "label": "log_uniform_int_distribution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "log_uniform_int_distribution"
  },
  {
    "label": "param_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "param_type"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_LOG_UNIFORM_INT_DISTRIBUTION_H_ # define ABSL_RANDOM_LOG_UNIFORM_INT_DISTRIBUTION_H_ # include<algorithm> # include<cassert> # include<cmath> # include<istream> # include<limits> # include<ostream> # include<type_traits> # include \" absl / numeric / bits . h \" # include \" absl / random / internal / fastmath . h \" # include \" absl / random / internal / generate_real . h \" # include \" absl / random / internal / iostream_state_saver . h \" # include \" absl / random / internal / traits . h \" # include \" absl / random / uniform_int_distribution . h \" namespace absl { ABSL_NAMESPACE_BEGIN template<IntType = int> class log_uniform_int_distribution { private : using unsigned_type = random_internal::make_unsigned_bits<IntType>::type ; public : using result_type = IntType ; class param_type { public : using distribution_type = log_uniform_int_distribution ;)",
    "insertText": "param_type(result_type min = 0, result_type max = (std::numeric_limits<result_type>::max)(), result_type base = 2) : min_(min), max_(max), base_(base), range_(static_cast<unsigned_type>(max_) - static_cast<unsigned_type>(min_)), log_range_(0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(max_ >= min_)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(base_ > 1)"
  },
  {
    "label": "log_range_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "log_range_(std::min)(random_internal::BitWidth(range()), std::numeric_limits<unsigned_type>::digits)"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (} else { const double inv_log_base = 1 . 0 /)",
    "insertText": "log(static_cast<double>(base_))"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (const double log_range =)",
    "insertText": "log(static_cast<double>(range()) + 0.5)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (log_range_ = static_cast<)",
    "insertText": "int(std::ceil(inv_log_base * log_range))"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "result_type(min)()"
  },
  {
    "label": "log_range()",
    "kind": "Method",
    "detail": "Function (} private : class log_uniform_int_distribution ; int)",
    "insertText": "log_range()"
  },
  {
    "label": "log_uniform_int_distribution()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "log_uniform_int_distribution() : log_uniform_int_distribution(0)"
  },
  {
    "label": "log_uniform_int_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "log_uniform_int_distribution(result_type min, result_type max = (std::numeric_limits<result_type>::max)(), result_type base = 2) : param_(min, max, base)"
  },
  {
    "label": "log_uniform_int_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "log_uniform_int_distribution(const param_type& p) : param_(p)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()(URBG& g)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()(URBG& g, const param_type& p)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "result_type(max)()"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (} result_type)",
    "insertText": "base()"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (} param_type)",
    "insertText": "param()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (param_ = p ; } bool)",
    "insertText": "operator(const log_uniform_int_distribution& a, const log_uniform_int_distribution& b)"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (param_type param_ ; } ; template<IntType> template<URBG> log_uniform_int_distribution<IntType>::unsigned_type log_uniform_int_distribution<IntType)",
    "insertText": "Generate(URBG& g, const param_type& p)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int e = absl::uniform_int_distribution<)",
    "insertText": "int(0, p.log_range())(g)"
  },
  {
    "label": "unsigned_type()",
    "kind": "Method",
    "detail": "Function (base_e = static_cast<)",
    "insertText": "unsigned_type(1)"
  },
  {
    "label": "top_e()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "top_e(e >= std::numeric_limits<unsigned_type>::digits) ? (std::numeric_limits<unsigned_type>::max)() : (static_cast<unsigned_type>(1) << e)"
  },
  {
    "label": "pow()",
    "kind": "Method",
    "detail": "Function (} else { const double r =)",
    "insertText": "pow(static_cast<double>(p.base()), d)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "s(r * static_cast<double>(p.base()))"
  },
  {
    "label": "base_e()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "base_e(r > static_cast<double>((std::numeric_limits<unsigned_type>::max)())) ? (std::numeric_limits<unsigned_type>::max)() : static_cast<unsigned_type>(r)"
  },
  {
    "label": "top_e()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "top_e(s > static_cast<double>((std::numeric_limits<unsigned_type>::max)())) ? (std::numeric_limits<unsigned_type>::max)() : static_cast<unsigned_type>(s)"
  },
  {
    "label": "lo()",
    "kind": "Method",
    "detail": "Function (} const unsigned_type)",
    "insertText": "lo(base_e >= p.range()) ? p.range()"
  },
  {
    "label": "hi()",
    "kind": "Method",
    "detail": "Function (const unsigned_type)",
    "insertText": "hi(top_e >= p.range()) ? p.range()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<CharT,Traits,IntType> std::basic_ostream<CharT,Traits>&)",
    "insertText": "operator(std::basic_ostream<CharT, Traits>& os, const log_uniform_int_distribution<IntType>& x)"
  },
  {
    "label": "make_ostream_state_saver()",
    "kind": "Method",
    "detail": "Function (using stream_type = random_internal::stream_format_type<IntType>::type ; auto saver =)",
    "insertText": "make_ostream_state_saver(os)"
  },
  {
    "label": "stream_type()",
    "kind": "Method",
    "detail": "Function (os<<static_cast<)",
    "insertText": "stream_type((x.min)()) << os.fill() << static_cast<stream_type>((x.max)()) << os.fill() << static_cast<stream_type>(x.base())"
  },
  {
    "label": "make_istream_state_saver()",
    "kind": "Method",
    "detail": "Function (using param_type = log_uniform_int_distribution<IntType>::param_type ; using result_type = log_uniform_int_distribution<IntType>::result_type ; using stream_type = random_internal::stream_format_type<IntType>::type ; stream_type min ; stream_type max ; stream_type base ; auto saver =)",
    "insertText": "make_istream_state_saver(is)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (is>> min>> max>> base ;)",
    "insertText": "if(!is.fail())"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "param(param_type(static_cast<result_type>(min), static_cast<result_type>(max), static_cast<result_type>(base)))"
  }
]