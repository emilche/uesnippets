[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FLinkerSave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerSave"
  },
  {
    "label": "FPackagePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePath"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLookupTableEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLookupTableEntry"
  },
  {
    "label": "FPackageTrailerBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageTrailerBuilder"
  },
  {
    "label": "FPackageTrailer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageTrailer"
  },
  {
    "label": "LocalEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LocalEntry"
  },
  {
    "label": "ReferencedEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReferencedEntry"
  },
  {
    "label": "VirtualizedEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VirtualizedEntry"
  },
  {
    "label": "FHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeader"
  },
  {
    "label": "FFooter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFooter"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Compression / CompressedBuffer . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" IO / IoHash . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / Function . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" # include \" Virtualization / VirtualizationTypes . h \" class FArchive ; class FLinkerSave ; class FPackagePath ; namespace UE { enum class EPayloadStorageType : uint8 { Any,Local,Referenced,Virtualized } ; enum class EPayloadFilter { CanVirtualize } ; enum class EPayloadStatus { NotFound = 0,StoredLocally,StoredAsReference,StoredVirtualized,} ; enum class EPayloadAccessMode : uint8 { Local = 0,Referenced,Virtualized } ; enum class EPayloadFlags : uint16 { None = 0,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EPayloadFlags)"
  },
  {
    "label": "FLookupTableEntry()",
    "kind": "Method",
    "detail": "Function (enum class EPackageTrailerVersion : uint32 ; namespace Private { struct FLookupTableEntry { uint32 SizeOnDisk = 4 9 ;)",
    "insertText": "FLookupTableEntry()"
  },
  {
    "label": "FLookupTableEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLookupTableEntry(const FIoHash& InIdentifier, uint64 InRawSize)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, EPackageTrailerVersion PackageTrailerVersion)"
  },
  {
    "label": "IsLocal()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "IsLocal()"
  },
  {
    "label": "CreateFromTrailer()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FPackageTrailerBuilder)",
    "insertText": "CreateFromTrailer(const class FPackageTrailer& Trailer, FArchive& Ar, FString DebugContext)"
  },
  {
    "label": "CreateReferenceToTrailer()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] TUniquePtr<UE::FPackageTrailerBuilder>)",
    "insertText": "CreateReferenceToTrailer(const class FPackageTrailer& Trailer, FString DebugContext)"
  },
  {
    "label": "FPackageTrailerBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPackageTrailerBuilder()"
  },
  {
    "label": "FPackageTrailerBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageTrailerBuilder(FString&& DebugContext)"
  },
  {
    "label": "AddPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPayload(const FIoHash& Identifier, FCompressedBuffer Payload, UE::Virtualization::EPayloadFilterReason Filter, AdditionalDataCallback&& Callback)"
  },
  {
    "label": "AddPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPayload(const FIoHash& Identifier, FCompressedBuffer Payload, UE::Virtualization::EPayloadFilterReason Filter)"
  },
  {
    "label": "AddVirtualizedPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVirtualizedPayload(const FIoHash& Identifier, int64 RawSize)"
  },
  {
    "label": "UpdatePayloadAsLocal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePayloadAsLocal(const FIoHash& Identifier, FCompressedBuffer Payload)"
  },
  {
    "label": "BuildAndAppendTrailer()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "BuildAndAppendTrailer(FLinkerSave* Linker, FArchive& DataArchive)"
  },
  {
    "label": "BuildAndAppendTrailer()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "BuildAndAppendTrailer(FLinkerSave* Linker, FArchive& DataArchive, int64& InOutPackageFileOffset)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "IsLocalPayloadEntry()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "IsLocalPayloadEntry(const FIoHash& Identifier)"
  },
  {
    "label": "IsReferencedPayloadEntry()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "IsReferencedPayloadEntry(const FIoHash& Identifier)"
  },
  {
    "label": "IsVirtualizedPayloadEntry()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "IsVirtualizedPayloadEntry(const FIoHash& Identifier)"
  },
  {
    "label": "CalculateTrailerLength()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] uint64)",
    "insertText": "CalculateTrailerLength()"
  },
  {
    "label": "GetNumPayloads()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] int32)",
    "insertText": "GetNumPayloads()"
  },
  {
    "label": "GetNumLocalPayloads()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] int32)",
    "insertText": "GetNumLocalPayloads()"
  },
  {
    "label": "GetNumReferencedPayloads()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] int32)",
    "insertText": "GetNumReferencedPayloads()"
  },
  {
    "label": "GetNumVirtualizedPayloads()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] int32)",
    "insertText": "GetNumVirtualizedPayloads()"
  },
  {
    "label": "GetDebugContext()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] const FString&)",
    "insertText": "GetDebugContext()"
  },
  {
    "label": "LocalEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalEntry(FCompressedBuffer&& InPayload, Virtualization::EPayloadFilterReason InFilterFlags) : Payload(InPayload) , FilterFlags(InFilterFlags)"
  },
  {
    "label": "LocalEntry()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "LocalEntry()"
  },
  {
    "label": "ReferencedEntry()",
    "kind": "Method",
    "detail": "Function (FCompressedBuffer Payload ; Virtualization::EPayloadFilterReason FilterFlags = Virtualization::EPayloadFilterReason::None ; } ; struct ReferencedEntry {)",
    "insertText": "ReferencedEntry()"
  },
  {
    "label": "ReferencedEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReferencedEntry(int64 InOffset, int64 InCompressedSize, int64 InRawSize) : Offset(InOffset) , CompressedSize(InCompressedSize) , RawSize(InRawSize)"
  },
  {
    "label": "VirtualizedEntry()",
    "kind": "Method",
    "detail": "Function (int64 Offset = INDEX_NONE ; int64 CompressedSize = INDEX_NONE ; int64 RawSize = INDEX_NONE ; } ; struct VirtualizedEntry {)",
    "insertText": "VirtualizedEntry()"
  },
  {
    "label": "VirtualizedEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VirtualizedEntry(int64 InRawSize) : RawSize(InRawSize)"
  },
  {
    "label": "CalculatePotentialHeaderSize()",
    "kind": "Method",
    "detail": "Function (int64 RawSize = INDEX_NONE ; } ; uint32)",
    "insertText": "CalculatePotentialHeaderSize()"
  },
  {
    "label": "CalculatePotentialPayloadSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "CalculatePotentialPayloadSize()"
  },
  {
    "label": "RemoveDuplicateEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDuplicateEntries()"
  },
  {
    "label": "TryLoadFromFile()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "TryLoadFromFile(const FString& Path, FPackageTrailer& OutTrailer)"
  },
  {
    "label": "TryLoadFromArchive()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "TryLoadFromArchive(FArchive& Ar, FPackageTrailer& OutTrailer)"
  },
  {
    "label": "FPackageTrailer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageTrailer()"
  },
  {
    "label": "FPackageTrailer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageTrailer(const FPackageTrailer& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPackageTrailer&)",
    "insertText": "operator(const FPackageTrailer & Other)"
  },
  {
    "label": "FPackageTrailer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageTrailer(FPackageTrailer&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPackageTrailer&)",
    "insertText": "operator(FPackageTrailer&& Other)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "TryLoadBackwards()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "TryLoadBackwards(FArchive& Ar)"
  },
  {
    "label": "LoadLocalPayload()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCompressedBuffer)",
    "insertText": "LoadLocalPayload(const FIoHash& Id, FArchive& Ar)"
  },
  {
    "label": "UpdatePayloadAsVirtualized()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "UpdatePayloadAsVirtualized(const FIoHash& Identifier)"
  },
  {
    "label": "ForEachPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachPayload(TFunctionRef<void(const FIoHash&, uint64, uint64, EPayloadAccessMode, UE::Virtualization::EPayloadFilterReason)> Callback)"
  },
  {
    "label": "FindPayloadStatus()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] EPayloadStatus)",
    "insertText": "FindPayloadStatus(const FIoHash& Id)"
  },
  {
    "label": "FindPayloadOffsetInFile()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] int64)",
    "insertText": "FindPayloadOffsetInFile(const FIoHash& Id)"
  },
  {
    "label": "FindPayloadSizeOnDisk()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] int64)",
    "insertText": "FindPayloadSizeOnDisk(const FIoHash& Id)"
  },
  {
    "label": "GetTrailerLength()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] int64)",
    "insertText": "GetTrailerLength()"
  },
  {
    "label": "GetPayloadInfo()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FPayloadInfo)",
    "insertText": "GetPayloadInfo(const FIoHash& Id)"
  },
  {
    "label": "GetPayloads()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] TArray<FIoHash>)",
    "insertText": "GetPayloads(EPayloadStorageType StorageType)"
  },
  {
    "label": "GetNumPayloads()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] int32)",
    "insertText": "GetNumPayloads(EPayloadStorageType Type)"
  },
  {
    "label": "GetPayloads()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] TArray<FIoHash>)",
    "insertText": "GetPayloads(EPayloadFilter Filter)"
  },
  {
    "label": "GetNumPayloads()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] int32)",
    "insertText": "GetNumPayloads(EPayloadFilter Filter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FHeader { uint64 HeaderTag = 0 xD1C43B2E80A5F697 ; uint32 StaticHeaderSizeOnDisk = 2 8 ; uint64 Tag = 0 ; int32 Version = INDEX_NONE ; uint32 HeaderLength = 0 ; uint64 PayloadsDataLength = 0 ; TArray<Private::FLookupTableEntry> PayloadLookupTable ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FHeader& Header)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FFooter { uint64 FooterTag = 0 x29BFCA045138DE76 ; uint32 SizeOnDisk = 2 0 ; uint64 Tag = 0 ; uint64 TrailerLength = 0 ; uint32 PackageTag = 0 ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FFooter& Footer)"
  },
  {
    "label": "CreateFooter()",
    "kind": "Method",
    "detail": "Function (} ; private : class FPackageTrailerBuilder ; FFooter)",
    "insertText": "CreateFooter()"
  },
  {
    "label": "FindPayloadsInPackageFile()",
    "kind": "Method",
    "detail": "Function (int64 TrailerPositionInFile = INDEX_NONE ; FHeader Header ; } ; [ [ nodiscard ] ] bool)",
    "insertText": "FindPayloadsInPackageFile(const FPackagePath& PackagePath, EPayloadStorageType Filter, TArray<FIoHash>& OutPayloadIds)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, EPayloadAccessMode Mode)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case UE::EPayloadAccessMode::Referenced : Builder<<)",
    "insertText": "TEXT(\"Referenced\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case UE::EPayloadAccessMode::Virtualized : Builder<<)",
    "insertText": "TEXT(\"Virtualized\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; default : Builder<<)",
    "insertText": "TEXT(\"Invalid\")"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (break ; } return Builder ; } } [ [ nodiscard ] ] FString)",
    "insertText": "LexToString(UE::Virtualization::EPayloadFilterReason FilterFlags)"
  }
]