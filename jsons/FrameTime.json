[
  {
    "label": "FFrameTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameTime"
  },
  {
    "label": "FFrameTime()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / FrameNumber . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / EnableIf . h \" # include \" Containers / UnrealString . h \" struct FFrameTime { const float MaxSubframe ;)",
    "insertText": "FFrameTime()"
  },
  {
    "label": "FFrameTime()",
    "kind": "Method",
    "detail": "Function (template<T,= TEnableIf<std::is_same_v<T,int32>>::Type>)",
    "insertText": "FFrameTime(T InFrameNumber)"
  },
  {
    "label": "FFrameTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFrameTime(FFrameNumber InFrameNumber)"
  },
  {
    "label": "FFrameTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFrameTime(FFrameNumber InFrameNumber, float InSubFrame)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFrameTime&)",
    "insertText": "operator(FFrameNumber InFrameNumber)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetFrame()",
    "kind": "Method",
    "detail": "Function (public : FFrameNumber)",
    "insertText": "GetFrame()"
  },
  {
    "label": "CeilToFrame()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "CeilToFrame()"
  },
  {
    "label": "RoundToFrame()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "RoundToFrame()"
  },
  {
    "label": "FromDecimal()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "FromDecimal(double InDecimalFrame)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFrameNumber FrameNumber ; private : float SubFrame ; public : FArchive&)",
    "insertText": "operator(FArchive& Ar, FFrameTime& FrameTime)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (FrameTime .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FFrameTime A, FFrameTime B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FFrameTime&)",
    "insertText": "operator(FFrameTime& LHS, FFrameTime RHS)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (float NewSubFrame = LHS . SubFrame + RHS . SubFrame ; const int64 NewFrameNumber =)",
    "insertText": "int64(LHS.FrameNumber.Value) + int64(RHS.FrameNumber.Value) + FMath::FloorToInt(NewSubFrame)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (LHS . FrameNumber = static_cast<)",
    "insertText": "int32(NewFrameNumber)"
  },
  {
    "label": "Frac()",
    "kind": "Method",
    "detail": "Function (LHS . SubFrame =)",
    "insertText": "Frac(NewSubFrame)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (const float NewSubFrame = A . SubFrame + B . SubFrame ; const int64 NewFrameNumber =)",
    "insertText": "int64(A.FrameNumber.Value) + int64(B.FrameNumber.Value) + FMath::FloorToInt(NewSubFrame)"
  },
  {
    "label": "FloorToFloat()",
    "kind": "Method",
    "detail": "Function (const float NewSubFrame = LHS . SubFrame - RHS . SubFrame ; const float FlooredSubFrame =)",
    "insertText": "FloorToFloat(NewSubFrame)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (const int64 NewFrameNumber =)",
    "insertText": "int64(LHS.FrameNumber.Value) - int64(RHS.FrameNumber.Value) + FMath::TruncToInt(FlooredSubFrame)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (const int64 NewFrameNumber =)",
    "insertText": "int64(A.FrameNumber.Value) - int64(B.FrameNumber.Value) + FMath::TruncToInt(FlooredSubFrame)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} else { FFrameTime Result = A ;)",
    "insertText": "while(Result >= B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Result = Result - B ; } return Result ; } } FFrameTime)",
    "insertText": "operator(FFrameTime A)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "operator(FFrameTime A, double Scalar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "operator(double Scalar, FFrameTime A)"
  },
  {
    "label": "FFrameTime()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FFrameTime() : FrameNumber(0), SubFrame(0.f)"
  },
  {
    "label": "FFrameTime()",
    "kind": "Method",
    "detail": "Function (} template<T,>)",
    "insertText": "FFrameTime(T InFrameNumber) : FrameNumber(InFrameNumber), SubFrame(0.f)"
  },
  {
    "label": "FFrameTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFrameTime(FFrameNumber InFrameNumber) : FrameNumber(InFrameNumber), SubFrame(0.f)"
  },
  {
    "label": "FFrameTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFrameTime(FFrameNumber InFrameNumber, float InSubFrame) : FrameNumber(InFrameNumber), SubFrame(InSubFrame)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (SubFrame =)",
    "insertText": "Clamp(SubFrame + 0.5f - 0.5f, 0.f, MaxSubframe)"
  },
  {
    "label": "FloorToFrame()",
    "kind": "Method",
    "detail": "Function (FrameNumber = InFrameNumber ; SubFrame = 0 . f ; return* this ; } FFrameNumber)",
    "insertText": "FloorToFrame()"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (int32 NewFrame = static_cast<)",
    "insertText": "int32(FMath::Clamp(FMath::FloorToDouble(InDecimalFrame), (double)TNumericLimits<int32>::Min(), (double)TNumericLimits<int32>::Max()))"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "LexToString(const FFrameTime InTime)"
  }
]