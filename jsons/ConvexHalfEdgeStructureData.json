[
  {
    "label": "TConvexStructureIndexTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TConvexStructureIndexTraits"
  },
  {
    "label": "TConvexHalfEdgeStructureData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConvexHalfEdgeStructureData"
  },
  {
    "label": "FVertexPlaneIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexPlaneIterator"
  },
  {
    "label": "FPlaneData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlaneData"
  },
  {
    "label": "FHalfEdgeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHalfEdgeData"
  },
  {
    "label": "FVertexData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexData"
  },
  {
    "label": "FVertexPlanes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexPlanes"
  },
  {
    "label": "FVertexHalfEdges",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexHalfEdges"
  },
  {
    "label": "FISPCDataVerifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FISPCDataVerifier"
  },
  {
    "label": "Lowest()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" ChaosArchive . h \" # include \" ChaosCheck . h \" # include \" ChaosLog . h \" # include \" Math / NumericLimits . h \" # include \" UObject / PhysicsObjectVersion . h \" namespace Chaos { template<T_INDEX> struct TConvexStructureIndexTraits { using FIndex = T_INDEX ; const FIndex InvalidIndex = TNumericLimits<FIndex)",
    "insertText": "Lowest()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const FIndex MaxIndex = TNumericLimits<FIndex)",
    "insertText": "Max()"
  },
  {
    "label": "MaxIndex()",
    "kind": "Method",
    "detail": "Function (} ; template<T_INDEX> class TConvexHalfEdgeStructureData { public : using FIndex = T_INDEX ; using FIndexTraits = TConvexStructureIndexTraits<T_INDEX> ; using FConvexHalfEdgeStructureData = TConvexHalfEdgeStructureData<T_INDEX> ; const FIndex InvalidIndex = FIndexTraits::InvalidIndex ; const int32)",
    "insertText": "MaxIndex(int32)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (class FVertexPlaneIterator ; struct FPlaneData { FIndex FirstHalfEdgeIndex ; FIndex NumHalfEdges ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FPlaneData& Value)"
  },
  {
    "label": "SetPlaneVertices()",
    "kind": "Method",
    "detail": "Function (FConvexHalfEdgeStructureData StructureData ; StructureData .)",
    "insertText": "SetPlaneVertices(InPlaneVertices, InNumVertices)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 HalfEdgeCount = 0 ;)",
    "insertText": "for(int32 PlaneIndex = 0; PlaneIndex < InPlaneVertices.Num(); ++PlaneIndex)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (HalfEdgeCount + = InPlaneVertices [ PlaneIndex ] .)",
    "insertText": "Num()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return((HalfEdgeCount <= MaxIndex) && (InPlaneVertices.Num() <= MaxIndex) && (InNumVertices <= MaxIndex))"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "NumPlanes()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumPlanes()"
  },
  {
    "label": "NumHalfEdges()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumHalfEdges()"
  },
  {
    "label": "NumVertices()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumVertices()"
  },
  {
    "label": "NumEdges()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumEdges()"
  },
  {
    "label": "GetPlane()",
    "kind": "Method",
    "detail": "Function (} FPlaneData&)",
    "insertText": "GetPlane(int32 PlaneIndex)"
  },
  {
    "label": "GetPlaneHalfEdge()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPlaneHalfEdge(int32 PlaneIndex, int32 PlaneEdgeIndex)"
  },
  {
    "label": "NumPlaneVertices()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumPlaneVertices(int32 PlaneIndex)"
  },
  {
    "label": "GetPlaneVertex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPlaneVertex(int32 PlaneIndex, int32 PlaneVertexIndex)"
  },
  {
    "label": "GetPlaneHalfEdge()",
    "kind": "Method",
    "detail": "Function (const int32 HalfEdgeIndex =)",
    "insertText": "GetPlaneHalfEdge(PlaneIndex, PlaneVertexIndex)"
  },
  {
    "label": "GetHalfEdgePlane()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetHalfEdgePlane(int32 HalfEdgeIndex)"
  },
  {
    "label": "GetHalfEdgeVertex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetHalfEdgeVertex(int32 HalfEdgeIndex)"
  },
  {
    "label": "GetTwinHalfEdge()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetTwinHalfEdge(int32 HalfEdgeIndex)"
  },
  {
    "label": "GetPrevHalfEdge()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPrevHalfEdge(int32 HalfEdgeIndex)"
  },
  {
    "label": "GetHalfEdge()",
    "kind": "Method",
    "detail": "Function (const int32 PlaneIndex =)",
    "insertText": "GetHalfEdge(HalfEdgeIndex)"
  },
  {
    "label": "GetPlane()",
    "kind": "Method",
    "detail": "Function (const int32 PlaneHalfEdgeIndex = HalfEdgeIndex -)",
    "insertText": "GetPlane(PlaneIndex)"
  },
  {
    "label": "GetNextHalfEdge()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNextHalfEdge(int32 HalfEdgeIndex)"
  },
  {
    "label": "GetEdgeVertex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetEdgeVertex(int32 EdgeIndex, int32 EdgeVertexIndex)"
  },
  {
    "label": "GetHalfEdgeVertex()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "GetHalfEdgeVertex(GetTwinHalfEdge(Edges[EdgeIndex]))"
  },
  {
    "label": "GetEdgePlane()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "GetEdgePlane(int32 EdgeIndex, int32 EdgePlaneIndex)"
  },
  {
    "label": "GetHalfEdgePlane()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "GetHalfEdgePlane(GetTwinHalfEdge(Edges[EdgeIndex]))"
  },
  {
    "label": "GetVertexFirstHalfEdge()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "GetVertexFirstHalfEdge(int32 VertexIndex)"
  },
  {
    "label": "VisitPlaneEdges()",
    "kind": "Method",
    "detail": "Function (} template<FVisitorType> void)",
    "insertText": "VisitPlaneEdges(int32 PlaneIndex, const FVisitorType& Visitor)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 HalfEdgeIndex0 = FirstHalfEdgeIndex ;)",
    "insertText": "if(HalfEdgeIndex0 != InvalidIndex)"
  },
  {
    "label": "GetNextHalfEdge()",
    "kind": "Method",
    "detail": "Function (bool bContinue = true ; do { const int32 HalfEdgeIndex1 =)",
    "insertText": "GetNextHalfEdge(HalfEdgeIndex0)"
  },
  {
    "label": "Visitor()",
    "kind": "Method",
    "detail": "Function (bContinue =)",
    "insertText": "Visitor(HalfEdgeIndex0, HalfEdgeIndex1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} HalfEdgeIndex0 = HalfEdgeIndex1 ; })",
    "insertText": "while(bContinue && (HalfEdgeIndex0 != FirstHalfEdgeIndex) && (HalfEdgeIndex0 != InvalidIndex))"
  },
  {
    "label": "VisitVertexHalfEdges()",
    "kind": "Method",
    "detail": "Function (} } template<FVisitorType> void)",
    "insertText": "VisitVertexHalfEdges(int32 VertexIndex, const FVisitorType& Visitor)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (const int32 FirstHalfEdgeIndex =)",
    "insertText": "GetVertex(VertexIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 HalfEdgeIndex = FirstHalfEdgeIndex ;)",
    "insertText": "if(HalfEdgeIndex != InvalidIndex)"
  },
  {
    "label": "Visitor()",
    "kind": "Method",
    "detail": "Function (bool bContinue = true ; do { bContinue =)",
    "insertText": "Visitor(HalfEdgeIndex)"
  },
  {
    "label": "GetTwinHalfEdge()",
    "kind": "Method",
    "detail": "Function (const int32 TwinHalfEdgeIndex =)",
    "insertText": "GetTwinHalfEdge(HalfEdgeIndex)"
  },
  {
    "label": "GetNextHalfEdge()",
    "kind": "Method",
    "detail": "Function (break ; } HalfEdgeIndex =)",
    "insertText": "GetNextHalfEdge(TwinHalfEdgeIndex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(bContinue && (HalfEdgeIndex != FirstHalfEdgeIndex) && (HalfEdgeIndex != InvalidIndex))"
  },
  {
    "label": "FindVertexPlanes()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "FindVertexPlanes(int32 VertexIndex, int32* PlaneIndices, int32 MaxVertexPlanes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 NumPlanesFound = 0 ;)",
    "insertText": "if(MaxVertexPlanes > 0)"
  },
  {
    "label": "VisitVertexHalfEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitVertexHalfEdges(VertexIndex, [this, PlaneIndices, MaxVertexPlanes, &NumPlanesFound](int32 HalfEdgeIndex) { PlaneIndices[NumPlanesFound++] = GetHalfEdgePlane(HalfEdgeIndex); return (NumPlanesFound < MaxVertexPlanes); })"
  },
  {
    "label": "GetVertexPlanes3()",
    "kind": "Method",
    "detail": "Function (} return NumPlanesFound ; } int32)",
    "insertText": "GetVertexPlanes3(int32 VertexIndex, int32& PlaneIndex0, int32& PlaneIndex1, int32& PlaneIndex2)"
  },
  {
    "label": "PlaneIndex0()",
    "kind": "Method",
    "detail": "Function (const FVertexPlanes& VertexPlane = VertexPlanes [ VertexIndex ] ;)",
    "insertText": "PlaneIndex0(int32)"
  },
  {
    "label": "PlaneIndex1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaneIndex1(int32)"
  },
  {
    "label": "PlaneIndex2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaneIndex2(int32)"
  },
  {
    "label": "BuildRegularDatas()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "BuildRegularDatas(const TArray<TArray<int32>>& InPlaneVertices, int32 InNumVertices)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((InPlaneVertices.Num() > MaxIndex) || (HalfEdgeCount > MaxIndex) || (InNumVertices > MaxIndex))"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (HalfEdges .)",
    "insertText": "SetNum(HalfEdgeCount)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Vertices .)",
    "insertText": "SetNum(InNumVertices)"
  },
  {
    "label": "PlaneVertices()",
    "kind": "Method",
    "detail": "Function (const int32 VertexIndex0 = PlaneVertices [ PlaneVertexIndex ] ; const int32 VertexIndex1 =)",
    "insertText": "PlaneVertices(PlaneVertexIndex + 1) % PlaneVertices.Num()"
  },
  {
    "label": "GetHalfEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHalfEdge(NextHalfEdgeIndex)"
  },
  {
    "label": "NextHalfEdgeIndex()",
    "kind": "Method",
    "detail": "Function (HalfEdgeVertices [)",
    "insertText": "NextHalfEdgeIndex(FIndex)"
  },
  {
    "label": "FirstHalfEdgeIndex()",
    "kind": "Method",
    "detail": "Function (Vertices [ VertexIndex0 ] .)",
    "insertText": "FirstHalfEdgeIndex(FIndex)"
  },
  {
    "label": "NumHalfEdgeIndices()",
    "kind": "Method",
    "detail": "Function (} VertexHalfEdges [ VertexIndex0 ] . HalfEdgeIndices [ VertexHalfEdges [ VertexIndex0 ] .)",
    "insertText": "NumHalfEdgeIndices(FIndex)"
  },
  {
    "label": "NumPlaneIndices()",
    "kind": "Method",
    "detail": "Function (VertexPlanes [ VertexIndex0 ] . PlaneIndices [ VertexPlanes [ VertexIndex0 ] .)",
    "insertText": "NumPlaneIndices(FIndex)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (+ + NextHalfEdgeIndex ; } } Edges .)",
    "insertText": "Empty()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Edges .)",
    "insertText": "Reserve(NumHalfEdges() / 2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 VertexIndex0 = HalfEdges [ HalfEdgeIndex ] . VertexIndex ; const int32 VertexIndex1 = HalfEdges [ HalfEdgeIndex ] . TwinHalfEdgeIndex ;)",
    "insertText": "for(int32 VertexHalfEdgeIndex = 0, NumHalfEdgeIndices = VertexHalfEdges[VertexIndex1].NumHalfEdgeIndices; VertexHalfEdgeIndex < NumHalfEdgeIndices; ++VertexHalfEdgeIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FIndex TwinHalfEdgeIndex = VertexHalfEdges [ VertexIndex1 ] . HalfEdgeIndices [ VertexHalfEdgeIndex ] ;)",
    "insertText": "if(HalfEdgeVertices[TwinHalfEdgeIndex] == VertexIndex0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (HalfEdges [ HalfEdgeIndex ] . TwinHalfEdgeIndex = TwinHalfEdgeIndex ; break ; } })",
    "insertText": "if(VertexIndex0 < HalfEdges[HalfEdges[HalfEdgeIndex].TwinHalfEdgeIndex].VertexIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Edges .)",
    "insertText": "Add((FIndex)HalfEdgeIndex)"
  },
  {
    "label": "SetPlaneVertices()",
    "kind": "Method",
    "detail": "Function (} } return true ; } bool)",
    "insertText": "SetPlaneVertices(const TArray<TArray<int32>>& InPlaneVertices, int32 InNumVertices)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} + + NextHalfEdgeIndex ; } } TArray<bool> HalfEdgeTwinned ; TArray<FIndex> TwinHalfEdgeIndices ; TwinHalfEdgeIndices .)",
    "insertText": "SetNum(HalfEdges.Num())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TwinHalfEdgeIndices [ HalfEdgeIndex ] = InvalidIndex ; HalfEdgeTwinned [ HalfEdgeIndex ] = false ; })",
    "insertText": "for(int32 HalfEdgeIndex0 = 0; HalfEdgeIndex0 < HalfEdges.Num(); ++HalfEdgeIndex0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 VertexIndex0 = HalfEdges [ HalfEdgeIndex0 ] . VertexIndex ; const int32 VertexIndex1 = HalfEdges [ HalfEdgeIndex0 ] . TwinHalfEdgeIndex ;)",
    "insertText": "for(int32 HalfEdgeIndex1 = 0; HalfEdgeIndex1 < HalfEdges.Num(); ++HalfEdgeIndex1)"
  },
  {
    "label": "HalfEdgeIndex0()",
    "kind": "Method",
    "detail": "Function (TwinHalfEdgeIndices [)",
    "insertText": "HalfEdgeIndex0(FIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (HalfEdgeTwinned [ HalfEdgeIndex1 ] = true ; } else { TwinHalfEdgeIndices [ HalfEdgeIndex0 ] = InvalidIndex ; } break ; } } })",
    "insertText": "for(int32 HalfEdgeIndex = 0; HalfEdgeIndex < HalfEdges.Num(); ++HalfEdgeIndex)"
  },
  {
    "label": "GetHalfEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHalfEdge(HalfEdgeIndex).TwinHalfEdgeIndex = (FIndex)"
  },
  {
    "label": "BuildVertexPlanes()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BuildVertexPlanes()"
  },
  {
    "label": "BuildUniqueEdgeList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildUniqueEdgeList()"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FPhysicsObjectVersion::GUID)"
  },
  {
    "label": "CustomVer()",
    "kind": "Method",
    "detail": "Function (Ar<<Planes ; Ar<<HalfEdges ; Ar<<Vertices ; const bool bHasUniqueEdgeList = Ar .)",
    "insertText": "CustomVer(FPhysicsObjectVersion::GUID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<Edges ; })",
    "insertText": "if(Ar.IsLoading() && (Edges.Num() == 0) && (HalfEdges.Num() > 0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FArchive&)",
    "insertText": "operator(FArchive& Ar, FConvexHalfEdgeStructureData& Value)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SizeOfPlanes()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfPlanes()"
  },
  {
    "label": "OffsetOfHalfEdges()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OffsetOfHalfEdges()"
  },
  {
    "label": "SizeOfHalfEdges()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfHalfEdges()"
  },
  {
    "label": "OffsetOfVertices()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OffsetOfVertices()"
  },
  {
    "label": "SizeOfVertices()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfVertices()"
  },
  {
    "label": "OffsetOfEdges()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OffsetOfEdges()"
  },
  {
    "label": "SizeOfEdges()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfEdges()"
  },
  {
    "label": "OffsetOfVertexPlanes()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OffsetOfVertexPlanes()"
  },
  {
    "label": "SizeOfVertexPlanes()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfVertexPlanes()"
  },
  {
    "label": "GetPrevPlaneHalfEdge()",
    "kind": "Method",
    "detail": "Function (} } ; FISPCDataVerifier ; # endif private : int32)",
    "insertText": "GetPrevPlaneHalfEdge(int32 PlaneIndex, int32 PlaneHalfEdgeIndex)"
  },
  {
    "label": "NumPlaneHalfEdges()",
    "kind": "Method",
    "detail": "Function (const int32 PlaneHalfEdgeCount =)",
    "insertText": "NumPlaneHalfEdges(PlaneIndex)"
  },
  {
    "label": "PrevPlaneHalfEdgeIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "PrevPlaneHalfEdgeIndex(PlaneHalfEdgeIndex + PlaneHalfEdgeCount - 1)"
  },
  {
    "label": "GetNextPlaneHalfEdge()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNextPlaneHalfEdge(int32 PlaneIndex, int32 PlaneHalfEdgeIndex)"
  },
  {
    "label": "NextPlaneHalfEdgeIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NextPlaneHalfEdgeIndex(PlaneHalfEdgeIndex + 1)"
  },
  {
    "label": "GetHalfEdge()",
    "kind": "Method",
    "detail": "Function (const FHalfEdgeData& TwinEdge =)",
    "insertText": "GetHalfEdge(Edge.TwinHalfEdgeIndex)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (VertexPlanes .)",
    "insertText": "SetNum(Vertices.Num())"
  },
  {
    "label": "NumPlaneIndices()",
    "kind": "Method",
    "detail": "Function (VertexPlane . PlaneIndices [ VertexPlane .)",
    "insertText": "NumPlaneIndices(FIndex)GetHalfEdgePlane(HalfEdgeIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + VertexPlane . NumPlaneIndices ;)",
    "insertText": "if(!ensure(VertexPlane.NumPlaneIndices <= Planes.Num()))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while((HalfEdgeIndex != FirstHalfEdgeIndex) && (HalfEdgeIndex != InvalidIndex))"
  }
]