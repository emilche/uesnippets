[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitObject"
  },
  {
    "label": "ICollisionQueryFilterCallbackBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICollisionQueryFilterCallbackBase"
  },
  {
    "label": "FBlockAllQueryCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlockAllQueryCallback"
  },
  {
    "label": "FOverlapAllQueryCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOverlapAllQueryCallback"
  },
  {
    "label": "ICollisionQueryFilterCallbackBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" PhysicsInterfaceTypesCore . h \" # include \" ChaosInterfaceWrapperCore . h \" enum class ECollisionQueryHitType : uint8 { None = 0,Touch = 1,Block = 2 } ; namespace Chaos { class FImplicitObject ; } class ICollisionQueryFilterCallbackBase { public : ~)",
    "insertText": "ICollisionQueryFilterCallbackBase()"
  },
  {
    "label": "PostFilter()",
    "kind": "Method",
    "detail": "Function (} ECollisionQueryHitType)",
    "insertText": "PostFilter(const FCollisionFilterData& FilterData, const ChaosInterface::FQueryHit& Hit)"
  },
  {
    "label": "PreFilter()",
    "kind": "Method",
    "detail": "Function (ECollisionQueryHitType)",
    "insertText": "PreFilter(const FCollisionFilterData& FilterData, const Chaos::FPerShapeData& Shape, const Chaos::FGeometryParticle& Actor)"
  },
  {
    "label": "PostFilter()",
    "kind": "Method",
    "detail": "Function (ECollisionQueryHitType)",
    "insertText": "PostFilter(const FCollisionFilterData& FilterData, const ChaosInterface::FPTQueryHit& Hit)"
  },
  {
    "label": "PreFilter()",
    "kind": "Method",
    "detail": "Function (ECollisionQueryHitType)",
    "insertText": "PreFilter(const FCollisionFilterData& FilterData, const Chaos::FPerShapeData& Shape, const Chaos::FGeometryParticleHandle& Actor)"
  },
  {
    "label": "FBlockAllQueryCallback()",
    "kind": "Method",
    "detail": "Function (} ; class FBlockAllQueryCallback : public ICollisionQueryFilterCallbackBase { public : ~)",
    "insertText": "FBlockAllQueryCallback()"
  }
]