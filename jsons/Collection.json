[
  {
    "label": "FTextFilterExpressionEvaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFilterExpressionEvaluator"
  },
  {
    "label": "ITextFilterExpressionContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextFilterExpressionContext"
  },
  {
    "label": "ECollectionVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ECollectionVersion"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollection"
  },
  {
    "label": "FCollectionSnapshot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollectionSnapshot"
  },
  {
    "label": "FCollection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" CollectionManagerTypes . h \" # include \" Templates / DontCopy . h \" class FTextFilterExpressionEvaluator ; class ITextFilterExpressionContext ; struct ECollectionVersion { enum Type { _ZeroVersion = 0,Initial,AddedCollectionGuid,_AutomaticVersionPlusOne,CurrentVersion = _AutomaticVersionPlusOne - 1 } ; } ; enum class ECollectionCloneMode : uint8 { Exact,Unique,} ; class FCollection { public :)",
    "insertText": "FCollection(const FString& InFilename, bool InUseSCC, ECollectionStorageMode::Type InStorageMode)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FCollection>)",
    "insertText": "Clone(const FString& InFilename, bool InUseSCC, ECollectionCloneMode InCloneMode)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(FText& OutError)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Save(const TArray<FText>& AdditionalChangelistText, FText& OutError, bool bForceCommitToRevisionControl)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Update(FText& OutError)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Merge(const FCollection& NewCollection)"
  },
  {
    "label": "DeleteSourceFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteSourceFile(FText& OutError)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "AddObjectToCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddObjectToCollection(const FSoftObjectPath& ObjectPath)"
  },
  {
    "label": "RemoveObjectFromCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveObjectFromCollection(const FSoftObjectPath& ObjectPath)"
  },
  {
    "label": "GetAssetsInCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetsInCollection(TArray<FSoftObjectPath>& Assets)"
  },
  {
    "label": "GetClassesInCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetClassesInCollection(TArray<FTopLevelAssetPath>& Classes)"
  },
  {
    "label": "GetObjectsInCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectsInCollection(TArray<FSoftObjectPath>& Objects)"
  },
  {
    "label": "IsObjectInCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectInCollection(const FSoftObjectPath& ObjectPath)"
  },
  {
    "label": "IsRedirectorInCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRedirectorInCollection(const FSoftObjectPath& ObjectPath)"
  },
  {
    "label": "SetDynamicQueryText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDynamicQueryText(const FString& InQueryText)"
  },
  {
    "label": "GetDynamicQueryText()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDynamicQueryText()"
  },
  {
    "label": "PrepareDynamicQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareDynamicQuery()"
  },
  {
    "label": "TestDynamicQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestDynamicQuery(const ITextFilterExpressionContext& InContext)"
  },
  {
    "label": "GetStatusInfo()",
    "kind": "Method",
    "detail": "Function (FCollectionStatusInfo)",
    "insertText": "GetStatusInfo()"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirty()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "IsUsingSourceControl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingSourceControl()"
  },
  {
    "label": "PrintCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintCollection()"
  },
  {
    "label": "GetCollectionColor()",
    "kind": "Method",
    "detail": "Function (ParentCollectionGuid = NewGuid ; } TOptional<FLinearColor>)",
    "insertText": "GetCollectionColor()"
  },
  {
    "label": "GetCollectionVersion()",
    "kind": "Method",
    "detail": "Function (CollectionColor = NewColor ; } ECollectionVersion::Type)",
    "insertText": "GetCollectionVersion()"
  },
  {
    "label": "LoadHeaderPairs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadHeaderPairs(const TMap<FString,FString>& InHeaderPairs)"
  },
  {
    "label": "MergeWithCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MergeWithCollection(const FCollection& Other)"
  },
  {
    "label": "GetObjectDifferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectDifferences(const TSet<FSoftObjectPath>& BaseSet, const TSet<FSoftObjectPath>& NewSet, TArray<FSoftObjectPath>& ObjectsAdded, TArray<FSoftObjectPath>& ObjectsRemoved)"
  },
  {
    "label": "GetObjectDifferencesFromDisk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectDifferencesFromDisk(TArray<FSoftObjectPath>& ObjectsAdded, TArray<FSoftObjectPath>& ObjectsRemoved)"
  },
  {
    "label": "CheckoutCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckoutCollection(FText& OutError)"
  },
  {
    "label": "CheckinCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckinCollection(const TArray<FText>& AdditionalChangelistText, FText& OutError)"
  },
  {
    "label": "RevertCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RevertCollection(FText& OutError)"
  },
  {
    "label": "DeleteFromSourceControl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteFromSourceControl(FText& OutError)"
  },
  {
    "label": "TakeSnapshot()",
    "kind": "Method",
    "detail": "Function (private : struct FCollectionSnapshot { void)",
    "insertText": "TakeSnapshot(const FCollection& InCollection)"
  }
]