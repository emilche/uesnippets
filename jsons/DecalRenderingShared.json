[
  {
    "label": "FDeferredDecalProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeferredDecalProxy"
  },
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShader"
  },
  {
    "label": "FShaderMapPointerTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderMapPointerTable"
  },
  {
    "label": "TShaderRefBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TShaderRefBase"
  },
  {
    "label": "FTransientDecalRenderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransientDecalRenderData"
  },
  {
    "label": "FTransientDecalRenderData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RendererInterface . h \" # include \" DecalRenderingCommon . h \" class FDeferredDecalProxy ; class FMaterial ; class FMaterialRenderProxy ; class FScene ; class FViewInfo ; class FShader ; class FShaderMapPointerTable ; template<ShaderType,PointerTableType> class TShaderRefBase ; template<ShaderType> using TShaderRef = TShaderRefBase<ShaderType,FShaderMapPointerTable> ; struct FTransientDecalRenderData { const FDeferredDecalProxy* Proxy ; const FMaterialRenderProxy* MaterialProxy ; FDecalBlendDesc BlendDesc ; float ConservativeRadius ; float FadeAlpha ; FLinearColor DecalColor ;)",
    "insertText": "FTransientDecalRenderData()"
  },
  {
    "label": "FTransientDecalRenderData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTransientDecalRenderData(const FDeferredDecalProxy& InDecalProxy, float InConservativeRadius, float InFadeAlpha, EShaderPlatform ShaderPlatform, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "GetDecalFadeScreenSizeMultiplier()",
    "kind": "Method",
    "detail": "Function (} ; typedef TArray<FTransientDecalRenderData,SceneRenderingAllocator> FTransientDecalRenderDataList ; namespace DecalRendering { float)",
    "insertText": "GetDecalFadeScreenSizeMultiplier()"
  },
  {
    "label": "CalculateDecalFadeAlpha()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateDecalFadeAlpha(float DecalFadeScreenSize, const FMatrix& ComponentToWorldMatrix, const FViewInfo& View, float FadeMultiplier)"
  },
  {
    "label": "ComputeComponentToClipMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "ComputeComponentToClipMatrix(const FViewInfo& View, const FMatrix& DecalComponentToWorld)"
  },
  {
    "label": "SetVertexShaderOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertexShaderOnly(FRHICommandList& RHICmdList, FGraphicsPipelineStateInitializer& GraphicsPSOInit, const FViewInfo& View, const FMatrix& FrustumComponentToClip)"
  },
  {
    "label": "SortDecalList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortDecalList(FTransientDecalRenderDataList& Decals)"
  },
  {
    "label": "BuildVisibleDecalList()",
    "kind": "Method",
    "detail": "Function (FTransientDecalRenderDataList)",
    "insertText": "BuildVisibleDecalList(TConstArrayView<FDeferredDecalProxy*> Decals, const FViewInfo& View)"
  },
  {
    "label": "BuildRelevantDecalList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildRelevantDecalList(TConstArrayView<FTransientDecalRenderData> Decals, EDecalRenderStage DecalRenderStage, FTransientDecalRenderDataList* OutVisibleDecals)"
  },
  {
    "label": "GetShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShaders(ERHIFeatureLevel::Type FeatureLevel, const FMaterial& Material, EDecalRenderStage DecalRenderStage, TShaderRef<FShader>& OutVertexShader, TShaderRef<FShader>& OutPixelShader)"
  },
  {
    "label": "SetupShaderState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetupShaderState(ERHIFeatureLevel::Type FeatureLevel, const FMaterial& Material, EDecalRenderStage DecalRenderStage, FBoundShaderStateInput& OutBoundShaderState)"
  },
  {
    "label": "SetShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShader(FRHICommandList& RHICmdList, FGraphicsPipelineStateInitializer& GraphicsPSOInit, uint32 StencilRef, const FViewInfo& View, const FTransientDecalRenderData& DecalData, EDecalRenderStage DecalRenderStage, const FMatrix& FrustumComponentToClip, const FScene* Scene = nullptr)"
  }
]