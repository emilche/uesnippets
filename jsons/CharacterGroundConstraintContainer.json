[
  {
    "label": "CharacterGroundConstraintContainerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharacterGroundConstraintContainerTest"
  },
  {
    "label": "FCharacterGroundConstraintContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterGroundConstraintContainer"
  },
  {
    "label": "FCharacterGroundConstraintContainerSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterGroundConstraintContainerSolver"
  },
  {
    "label": "FCharacterGroundConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterGroundConstraintHandle"
  },
  {
    "label": "FCharacterGroundConstraintProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterGroundConstraintProxy"
  },
  {
    "label": "Private",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Private"
  },
  {
    "label": "ChaosTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChaosTest"
  },
  {
    "label": "FCharacterGroundConstraintHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / Character / CharacterGroundConstraintSettings . h \" # include \" Chaos / ConstraintHandle . h \" # include \" Chaos / Evolution / IndexedConstraintContainer . h \" # include \" Chaos / GeometryParticles . h \" # include \" Chaos / PBDConstraintContainer . h \" namespace ChaosTest { class CharacterGroundConstraintContainerTest ; } namespace Chaos { namespace CVars { float Chaos_CharacterGroundConstraint_InputMovementThreshold ; float Chaos_CharacterGroundConstraint_ExternalMovementThreshold ; } class FCharacterGroundConstraintContainer ; namespace Private { class FCharacterGroundConstraintContainerSolver ; } class FCharacterGroundConstraintHandle final : public TIntrusiveConstraintHandle<FCharacterGroundConstraintHandle> { public : using Base = TIntrusiveConstraintHandle<FCharacterGroundConstraintHandle> ; using FConstraintContainer = FCharacterGroundConstraintContainer ;)",
    "insertText": "FCharacterGroundConstraintHandle() : TIntrusiveConstraintHandle<FCharacterGroundConstraintHandle>()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (} const FConstraintHandleTypeID&)",
    "insertText": "StaticType()"
  },
  {
    "label": "STypeID()",
    "kind": "Method",
    "detail": "Function (FConstraintHandleTypeID)",
    "insertText": "STypeID(TEXT(\"FCharacterGroundConstraintHandle\"), &FIndexedConstraintHandle::StaticType())"
  },
  {
    "label": "GetResimType()",
    "kind": "Method",
    "detail": "Function (SyncState = InSyncState ; } EResimType)",
    "insertText": "GetResimType()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (bEnabledDuringResim = bEnabled ; } void)",
    "insertText": "SetEnabled(bool InEnabled)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bDisabled = ! InEnabled ; } bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Data = InData ;)",
    "insertText": "if(!CharacterParticle || bDisabled)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const float InputMovementThresholdSq = CVars::Chaos_CharacterGroundConstraint_InputMovementThreshold* CVars::Chaos_CharacterGroundConstraint_InputMovementThreshold ; const float MovementThresholdSq = CVars::Chaos_CharacterGroundConstraint_ExternalMovementThreshold* CVars::Chaos_CharacterGroundConstraint_ExternalMovementThreshold ;)",
    "insertText": "if((InData.TargetDeltaPosition.SizeSquared() > InputMovementThresholdSq) || ((NewLocalCharacterPosition - LocalCharacterPosition).SizeSquared() > MovementThresholdSq))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LocalCharacterPosition = NewLocalCharacterPosition ; } else {)",
    "insertText": "if(GroundParticle)"
  },
  {
    "label": "GetR()",
    "kind": "Method",
    "detail": "Function (Data . TargetDeltaPosition = GroundParticle ->)",
    "insertText": "GetR() * LocalCharacterPosition + GroundParticle->GetX() - CharacterParticle->GetX()"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (} else { Data . TargetDeltaPosition = LocalCharacterPosition - CharacterParticle ->)",
    "insertText": "GetX()"
  },
  {
    "label": "GetConstrainedParticles()",
    "kind": "Method",
    "detail": "Function (} } } FParticlePair)",
    "insertText": "GetConstrainedParticles()"
  },
  {
    "label": "RemoveConstraintHandle()",
    "kind": "Method",
    "detail": "Function (GroundParticle ->)",
    "insertText": "RemoveConstraintHandle(this)"
  },
  {
    "label": "AddConstraintHandle()",
    "kind": "Method",
    "detail": "Function (GroundParticle ->)",
    "insertText": "AddConstraintHandle(this)"
  },
  {
    "label": "ComputeLocalCharacterPosition()",
    "kind": "Method",
    "detail": "Function (} LocalCharacterPosition =)",
    "insertText": "ComputeLocalCharacterPosition()"
  },
  {
    "label": "GetSolverAppliedForce()",
    "kind": "Method",
    "detail": "Function (bGroundParticleChanged = true ; } } FVec3)",
    "insertText": "GetSolverAppliedForce()"
  },
  {
    "label": "GetR()",
    "kind": "Method",
    "detail": "Function (LocalPos = GroundParticle ->)",
    "insertText": "GetR().Inverse() * (LocalPos - GroundParticle->GetX())"
  },
  {
    "label": "FCharacterGroundConstraintContainer()",
    "kind": "Method",
    "detail": "Function (} return LocalPos ; } FCharacterGroundConstraintSettings Settings ; FCharacterGroundConstraintDynamicData Data ; FVec3 SolverAppliedForce = FVec3::ZeroVector ; FVec3 SolverAppliedTorque = FVec3::ZeroVector ; FVec3 LocalCharacterPosition = FVec3::ZeroVector ; FGeometryParticleHandle* CharacterParticle ; FGeometryParticleHandle* GroundParticle ; bool bDisabled = false ; bool bEnabledDuringResim ; bool bGroundParticleChanged = false ; EResimType ResimType = EResimType::FullResim ; ESyncState SyncState = ESyncState::InSync ; } ; class FCharacterGroundConstraintContainer : public FPBDConstraintContainer { public : using Base = FPBDConstraintContainer ; using FConstraints = TArrayView<FCharacterGroundConstraintHandle* const> ; using FConstConstraints = TArrayView<const FCharacterGroundConstraintHandle* const> ;)",
    "insertText": "FCharacterGroundConstraintContainer()"
  },
  {
    "label": "NumConstraints()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumConstraints()"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (} FCharacterGroundConstraintHandle*)",
    "insertText": "AddConstraint(const FCharacterGroundConstraintSettings& InConstraintSettings, const FCharacterGroundConstraintDynamicData& InConstraintData, FGeometryParticleHandle* CharacterParticle, FGeometryParticleHandle* GroundParticle = nullptr)"
  },
  {
    "label": "RemoveConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConstraint(FCharacterGroundConstraintHandle* Constraint)"
  },
  {
    "label": "GetConstraints()",
    "kind": "Method",
    "detail": "Function (FConstraints)",
    "insertText": "GetConstraints()"
  },
  {
    "label": "GetConstConstraints()",
    "kind": "Method",
    "detail": "Function (} FConstConstraints)",
    "insertText": "GetConstConstraints()"
  },
  {
    "label": "GetConstraint()",
    "kind": "Method",
    "detail": "Function (} FCharacterGroundConstraintHandle*)",
    "insertText": "GetConstraint(int32 ConstraintIndex)"
  },
  {
    "label": "CreateGroupSolver()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FConstraintContainerSolver>)",
    "insertText": "CreateGroupSolver(const int32 Priority)"
  },
  {
    "label": "GetNumConstraints()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumConstraints()"
  },
  {
    "label": "ResetConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetConstraints()"
  },
  {
    "label": "AddConstraintsToGraph()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddConstraintsToGraph(Private::FPBDIslandManager& IslandManager)"
  },
  {
    "label": "PrepareTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareTick()"
  },
  {
    "label": "UnprepareTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnprepareTick()"
  },
  {
    "label": "DisconnectConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectConstraints(const TSet<TGeometryParticleHandle<FReal, 3>*>& RemovedParticles)"
  },
  {
    "label": "OnDisableParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDisableParticle(FGeometryParticleHandle* DisabledParticle)"
  },
  {
    "label": "OnEnableParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnableParticle(FGeometryParticleHandle* EnabledParticle)"
  },
  {
    "label": "SetConstraintEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintEnabled(int32 ConstraintIndex, bool bEnabled)"
  },
  {
    "label": "IsConstraintEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstraintEnabled(int32 ConstraintIndex)"
  },
  {
    "label": "CanEvaluate()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "CanEvaluate(const FCharacterGroundConstraintHandle* Constraint)"
  }
]