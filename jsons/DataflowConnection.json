[
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "FDataflowNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowNode"
  },
  {
    "label": "FDataflowInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowInput"
  },
  {
    "label": "FDataflowOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowOutput"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FPin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPin"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FConnectionParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConnectionParameters"
  },
  {
    "label": "FConnectionReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConnectionReference"
  },
  {
    "label": "TConnectionReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TConnectionReference"
  },
  {
    "label": "FConnectionKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConnectionKey"
  },
  {
    "label": "FGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraph"
  },
  {
    "label": "FDataflowConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowConnection"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE"
  },
  {
    "label": "GraphConnectionTypeName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Dataflow / DataflowNodeParameters . h \" # include \" Dataflow / DataflowTypePolicy . h \" # include \" HAL / PlatformMath . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Guid . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" DataflowConnection . generated . h \" class FProperty ; struct FDataflowNode ; struct FDataflowInput ; struct FDataflowOutput ; namespace UE::Dataflow { template<class T> FName)",
    "insertText": "GraphConnectionTypeName()"
  },
  {
    "label": "DeepCopy()",
    "kind": "Method",
    "detail": "Function (template<class T> T)",
    "insertText": "DeepCopy(const T&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FPin { enum class EDirection : uint8 { NONE = 0,INPUT,OUTPUT } ; EDirection Direction ; FName Type ; FName Name ; bool bHidden = false ; bool)",
    "insertText": "operator(const FPin& Other)"
  },
  {
    "label": "FConnectionReference()",
    "kind": "Method",
    "detail": "Function (} FName Type ; FName Name ; FDataflowNode* Owner = nullptr ; const FProperty* Property = nullptr ; uint32 Offset = INDEX_NONE ; FGuid Guid ; } ; struct FConnectionReference { const void* Reference ; int32 Index = INDEX_NONE ; const void* ContainerReference = nullptr ;)",
    "insertText": "FConnectionReference(const void* InReference, int32 InIndex = INDEX_NONE, const void* InContainerReference = nullptr) : Reference(InReference) , Index(InIndex) , ContainerReference(InContainerReference)"
  },
  {
    "label": "TConnectionReference()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TConnectionReference : public FConnectionReference {)",
    "insertText": "TConnectionReference(const T* InReference, int32 InIndex = INDEX_NONE, const void* InContainerReference = nullptr) : FConnectionReference(InReference, InIndex, InContainerReference)"
  },
  {
    "label": "FConnectionKey()",
    "kind": "Method",
    "detail": "Function (} } ; class FConnectionKey { public :)",
    "insertText": "FConnectionKey()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FConnectionKey& Other)"
  },
  {
    "label": "FConnectionKey()",
    "kind": "Method",
    "detail": "Function (} const FConnectionKey Invalid ; private : struct::FDataflowConnection ; struct::FDataflowInput ; struct::FDataflowOutput ; struct::FDataflowNode ;)",
    "insertText": "FConnectionKey(uint32 InOffset, int32 InContainerIndex, uint32 InContainerElementOffset) : Offset(InOffset) , ContainerIndex(InContainerIndex) , ContainerElementOffset(InContainerElementOffset)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} uint32 Offset = INDEX_NONE ; int32 ContainerIndex = INDEX_NONE ; uint32 ContainerElementOffset = INDEX_NONE ; } ; class FGraph ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "IsOwningNodeEnabled()",
    "kind": "Method",
    "detail": "Function (FName Name ; FDataflowNode* OwningNode = nullptr ; const FProperty* Property = nullptr ; FGuid Guid ; IDataflowTypePolicy* TypePolicy = nullptr ; uint32 Offset ; UE::Dataflow::FPin::EDirection Direction ; bool bIsAnyType : 1 = false ; bool bHasConcreteType : 1 = false ; bool bCanHidePin : 1 = false ; bool bPinIsHidden : 1 = false ; struct FDataflowNode ; class UE::Dataflow::FGraph ; protected : bool)",
    "insertText": "IsOwningNodeEnabled()"
  },
  {
    "label": "SetAsAnyType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsAnyType(bool bAnyType, const FName& ConcreteType)"
  },
  {
    "label": "ForceSimpleType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceSimpleType(FName InType)"
  },
  {
    "label": "FixAndPropagateType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixAndPropagateType()"
  },
  {
    "label": "FixAndPropagateType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixAndPropagateType(FName InType)"
  },
  {
    "label": "IsExtendedType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsExtendedType(FName InType)"
  },
  {
    "label": "SetConcreteType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetConcreteType(FName InType)"
  },
  {
    "label": "FDataflowConnection()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FDataflowConnection()"
  },
  {
    "label": "FDataflowConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDataflowConnection(UE::Dataflow::FPin::EDirection Direction, const UE::Dataflow::FConnectionParameters& Params)"
  },
  {
    "label": "GetOwningNode()",
    "kind": "Method",
    "detail": "Function (} ; FDataflowNode*)",
    "insertText": "GetOwningNode()"
  },
  {
    "label": "GetOwningNodeValueHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetOwningNodeValueHash()"
  },
  {
    "label": "GetOwningNodeTimestamp()",
    "kind": "Method",
    "detail": "Function (UE::Dataflow::FTimestamp)",
    "insertText": "GetOwningNodeTimestamp()"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (const FProperty*)",
    "insertText": "GetProperty()"
  },
  {
    "label": "GetPropertyTypeNameTooltip()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPropertyTypeNameTooltip()"
  },
  {
    "label": "GetDirection()",
    "kind": "Method",
    "detail": "Function (UE::Dataflow::FPin::EDirection)",
    "insertText": "GetDirection()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetType()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (Guid = InGuid ; } FName)",
    "insertText": "GetName()"
  },
  {
    "label": "RealAddress()",
    "kind": "Method",
    "detail": "Function (Name = InName ; } void*)",
    "insertText": "RealAddress()"
  },
  {
    "label": "CacheKey()",
    "kind": "Method",
    "detail": "Function (} ; UE::Dataflow::FContextCacheKey)",
    "insertText": "CacheKey()"
  },
  {
    "label": "AddConnection()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "AddConnection(FDataflowConnection* In)"
  },
  {
    "label": "HasConcreteType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasConcreteType()"
  },
  {
    "label": "SupportsType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsType(FName InType)"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (template<class T> bool)",
    "insertText": "IsA(const T* InVar)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Invalidate(const UE::Dataflow::FTimestamp& ModifiedTimestamp = UE::Dataflow::FTimestamp::Current())"
  },
  {
    "label": "GetCanHidePin()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "GetCanHidePin()"
  },
  {
    "label": "SetPinIsHidden()",
    "kind": "Method",
    "detail": "Function (bCanHidePin = bInCanHidePin ; return* this ; } FDataflowConnection&)",
    "insertText": "SetPinIsHidden(bool bInPinIsHidden)"
  },
  {
    "label": "InitFromType()",
    "kind": "Method",
    "detail": "Function (bPinIsHidden = bInPinIsHidden ; return* this ; } private : void)",
    "insertText": "InitFromType()"
  }
]