[
  {
    "label": "SWorldPartitionEditorGrid2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWorldPartitionEditorGrid2D"
  },
  {
    "label": "FEditorCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorCommands"
  },
  {
    "label": "SToolBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolBar"
  },
  {
    "label": "FKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyFuncs"
  },
  {
    "label": "FExternalDirtyActorTrackerGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExternalDirtyActorTrackerGuid"
  },
  {
    "label": "FEditorCommands()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / WeakInterfacePtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Framework / Commands / Commands . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Layout / ArrangedChildren . h \" # include \" SWorldPartitionEditorGrid . h \" # include \" SWorldPartitionViewportWidget . h \" # include \" Widgets / Text / STextBlock . h \" # include \" SViewportToolBar . h \" # include \" WorldPartition / WorldPartition . h \" # include \" WorldPartition / ActorDescContainerInstance . h \" # include \" WorldPartition / WorldPartitionActorLoaderInterface . h \" # include \" ExternalDirtyActorsTracker . h \" class SWorldPartitionEditorGrid2D : public SWorldPartitionEditorGrid { protected : class FEditorCommands : public TCommands<FEditorCommands> { public :)",
    "insertText": "FEditorCommands()"
  },
  {
    "label": "RegisterCommands()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FUICommandInfo> CreateRegionFromSelection ; TSharedPtr<FUICommandInfo> LoadSelectedRegions ; TSharedPtr<FUICommandInfo> UnloadSelectedRegions ; TSharedPtr<FUICommandInfo> UnloadHoveredRegion ; TSharedPtr<FUICommandInfo> ConvertSelectedRegionsToActors ; TSharedPtr<FUICommandInfo> MoveCameraHere ; TSharedPtr<FUICommandInfo> PlayFromHere ; TSharedPtr<FUICommandInfo> LoadFromHere ; TSharedPtr<FUICommandInfo> BugItHere ; TSharedPtr<FUICommandInfo> FollowPlayerInPIE ; TSharedPtr<FUICommandInfo> BugItGoLoadRegion ; TSharedPtr<FUICommandInfo> ShowActors ; TSharedPtr<FUICommandInfo> ShowHLODActors ; TSharedPtr<FUICommandInfo> ShowGrid ; TSharedPtr<FUICommandInfo> ShowMiniMap ; TSharedPtr<FUICommandInfo> ShowCoords ; TSharedPtr<FUICommandInfo> ShowMouseCoords ; TSharedPtr<FUICommandInfo> FocusSelection ; TSharedPtr<FUICommandInfo> FocusLoadedRegions ; TSharedPtr<FUICommandInfo> FocusWorld ; void)",
    "insertText": "RegisterCommands()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SToolBar : public SViewportToolBar { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SToolBar)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(SWorldPartitionEditorGrid2D*, WPEditorGrid2D) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "IsOptionsMenuVisible()",
    "kind": "Method",
    "detail": "Function (private : EVisibility)",
    "insertText": "IsOptionsMenuVisible()"
  },
  {
    "label": "GenerateUnloadedOpacitySlider()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateUnloadedOpacitySlider()"
  },
  {
    "label": "GenerateOptionsMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateOptionsMenu()"
  },
  {
    "label": "GenerateShowMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateShowMenu()"
  },
  {
    "label": "GenerateBuildMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateBuildMenu()"
  },
  {
    "label": "SWorldPartitionEditorGrid2D()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FUICommandList> CommandList ; SWorldPartitionEditorGrid2D* WPEditorGrid2D ; } ; public :)",
    "insertText": "SWorldPartitionEditorGrid2D()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "CreateRegionFromSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRegionFromSelection()"
  },
  {
    "label": "LoadSelectedRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSelectedRegions()"
  },
  {
    "label": "UnloadSelectedRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnloadSelectedRegions()"
  },
  {
    "label": "ConvertSelectedRegionsToActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertSelectedRegionsToActors()"
  },
  {
    "label": "MoveCameraHere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveCameraHere()"
  },
  {
    "label": "PlayFromHere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayFromHere()"
  },
  {
    "label": "LoadFromHere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadFromHere()"
  },
  {
    "label": "BugItHere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BugItHere()"
  },
  {
    "label": "IsFollowPlayerInPIE()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFollowPlayerInPIE()"
  },
  {
    "label": "IsInteractive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInteractive()"
  },
  {
    "label": "GetSelectionSnap()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetSelectionSnap()"
  },
  {
    "label": "GenerateContextualMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateContextualMenu()"
  },
  {
    "label": "OnActorAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorAdded(AActor* Actor)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "PaintGrid()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PaintGrid(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "PaintActors()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PaintActors(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, uint32 LayerId)"
  },
  {
    "label": "PaintTextInfo()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PaintTextInfo(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, uint32 LayerId)"
  },
  {
    "label": "PaintViewer()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PaintViewer(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, uint32 LayerId)"
  },
  {
    "label": "PaintSelection()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PaintSelection(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, uint32 LayerId)"
  },
  {
    "label": "PaintMinimap()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PaintMinimap(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "PaintMeasureTool()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PaintMeasureTool(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "DrawTextLabel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawTextLabel(FSlateWindowElementList& OutDrawElements, int32 LayerId, const FGeometry& AllottedGeometry, const FString& Label, const FVector2D& Pos, const FLinearColor& Color, const FSlateFontInfo& Font)"
  },
  {
    "label": "FocusSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusSelection()"
  },
  {
    "label": "FocusLoadedRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusLoadedRegions()"
  },
  {
    "label": "FocusWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusWorld()"
  },
  {
    "label": "UpdateTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTransform()"
  },
  {
    "label": "UpdateSelectionBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSelectionBox(bool bSnap)"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "ShouldShowActorBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowActorBounds(AActor* InActor)"
  },
  {
    "label": "ShouldShowActorBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowActorBounds(FWorldPartitionActorDescInstance* ActorDescInstance)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FUICommandList> CommandList ; FSingleWidgetChildrenWithBasicLayoutSlot ChildSlot ; FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "AddWidget()",
    "kind": "Method",
    "detail": "Function (ArrangedChildren .)",
    "insertText": "AddWidget(AllottedGeometry.MakeChild(ChildSlot.GetWidget(), FVector2D::ZeroVector, AllottedGeometry.GetLocalSize()))"
  },
  {
    "label": "FocusBox()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FocusBox(const FBox& Box)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (float Scale ; FVector2D Trans ; FBox2D ScreenRect ; FTransform2d WorldToScreen ; FTransform2d ScreenToWorld ; bool bIsDragSelecting ; bool bIsPanning ; bool bIsMeasuring ; bool bShowActors ; bool bShowHLODActors ; bool bShowGrid ; bool bShowMiniMap ; bool bShowMouseCoords ; bool bFollowPlayerInPIE ; FVector2D MouseCursorPos ; FVector2D MouseCursorPosWorld ; FVector2D LastMouseCursorPosWorldDrag ; FVector2D SelectionStart ; FVector2D SelectionEnd ; FVector2D MeasureStart ; FVector2D MeasureEnd ; FBox SelectBox ; FBox SelectBoxGridSnapped ; FSlateFontInfo SmallLayoutFont ; float TotalMouseDelta ; struct FKeyFuncs : public BaseKeyFuncs<TWeakInterfacePtr<IWorldPartitionActorLoaderInterface>,TWeakInterfacePtr<IWorldPartitionActorLoaderInterface>,false> { KeyInitType)",
    "insertText": "GetSetKey(ElementInitType Entry)"
  },
  {
    "label": "InvalidateShownActorsCache()",
    "kind": "Method",
    "detail": "Function (} } ; using FLoaderInterface = TWeakInterfacePtr<IWorldPartitionActorLoaderInterface> ; using FLoaderInterfaceSet = TSet<FLoaderInterface,FKeyFuncs> ; using FLoaderInterfaceStack = TArray<FLoaderInterface> ; FLoaderInterfaceSet SelectedLoaderInterfaces ; TSet<FGuid> ShownActorGuids ; TSet<FGuid> DirtyActorGuids ; TSet<FGuid> SelectedActorGuids ; FLoaderInterfaceSet ShownLoaderInterfaces ; FLoaderInterfaceSet HoveredLoaderInterfaces ; FLoaderInterfaceStack HoveredLoaderInterfacesStack ; FLoaderInterface HoveredLoaderInterface ; FBox ViewRectWorldCache ; TSet<FGuid> ShownActorGuidsCache ; FLoaderInterfaceSet ShownLoaderInterfacesCache ; void)",
    "insertText": "InvalidateShownActorsCache()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (ViewRectWorldCache .)",
    "insertText": "Init()"
  },
  {
    "label": "UpdateWorldMiniMapDetails()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateWorldMiniMapDetails()"
  },
  {
    "label": "SaveMiniMapUnloadedOpacityUserSetting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveMiniMapUnloadedOpacityUserSetting()"
  },
  {
    "label": "IsMiniMapUnloadedOpacityEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMiniMapUnloadedOpacityEnabled()"
  },
  {
    "label": "GetMiniMapUnloadedOpacity()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMiniMapUnloadedOpacity()"
  },
  {
    "label": "Store()",
    "kind": "Method",
    "detail": "Function (MiniMapUnloadedOpacity = InOpacity ; } ; float MiniMapUnloadedOpacity ; FBox2D WorldMiniMapBounds ; FSlateBrush WorldMiniMapBrush ; double TickTime ; double PaintTime ; TSharedPtr<SWorldPartitionViewportWidget> ViewportWidget ; TSharedPtr<STextBlock> TextWorldBoundsInKMWidget ; TSharedPtr<STextBlock> TextRulerWidget ; struct FExternalDirtyActorTrackerGuid { using Type = FGuid ; using OwnerType = SWorldPartitionEditorGrid2D ; FGuid)",
    "insertText": "Store(SWorldPartitionEditorGrid2D* InOwner, AActor* InActor)"
  }
]