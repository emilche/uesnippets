[
  {
    "label": "FMaterialHLSLGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialHLSLGenerator"
  },
  {
    "label": "FExpressionOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpressionOutput"
  },
  {
    "label": "FScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScope"
  },
  {
    "label": "FExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpression"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValue"
  },
  {
    "label": "FExpressionInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpressionInput"
  },
  {
    "label": "UMaterialExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpression"
  },
  {
    "label": "FMaterialCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompiler"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "InputType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputType"
  },
  {
    "label": "FMaterialInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialInput"
  },
  {
    "label": "FColorMaterialInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColorMaterialInput"
  },
  {
    "label": "FScalarMaterialInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScalarMaterialInput"
  },
  {
    "label": "FShadingModelMaterialInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShadingModelMaterialInput"
  },
  {
    "label": "FSubstrateMaterialInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubstrateMaterialInput"
  },
  {
    "label": "FVectorMaterialInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorMaterialInput"
  },
  {
    "label": "FVector2MaterialInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVector2MaterialInput"
  },
  {
    "label": "FMaterialAttributesInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialAttributesInput"
  },
  {
    "label": "FExpressionInput()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Class . h \" # include \" SceneTypes . h \" class FMaterialHLSLGenerator ; struct FExpressionOutput ; namespace UE::HLSLTree { class FScope ; class FExpression ; } namespace UE::HLSLTree::Material { enum class EExternalInput : uint8 ; } namespace UE::Shader { enum class EValueType : uint8 ; struct FValue ; } struct FExpressionInput { class UMaterialExpression* Expression ; int32 OutputIndex ; FName InputName ; int32 Mask,MaskR,MaskG,MaskB,MaskA ;)",
    "insertText": "FExpressionInput() : OutputIndex(0) , Mask(0) , MaskR(0) , MaskG(0) , MaskB(0) , MaskA(0)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Expression = nullptr ; } bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR int32)",
    "insertText": "Compile(class FMaterialCompiler* Compiler)"
  },
  {
    "label": "TryAcquireHLSLExpression()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "TryAcquireHLSLExpression(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, int32 InputIndex)"
  },
  {
    "label": "AcquireHLSLExpression()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "AcquireHLSLExpression(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, int32 InputIndex)"
  },
  {
    "label": "AcquireHLSLExpressionOrConstant()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "AcquireHLSLExpressionOrConstant(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, const UE::Shader::FValue& ConstantValue, int32 InputIndex)"
  },
  {
    "label": "AcquireHLSLExpressionOrExternalInput()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "AcquireHLSLExpressionOrExternalInput(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, UE::HLSLTree::Material::EExternalInput Input, int32 InputIndex)"
  },
  {
    "label": "AcquireHLSLExpressionOrDefaultExpression()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "AcquireHLSLExpressionOrDefaultExpression(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, const UE::HLSLTree::FExpression* DefaultExpression, int32 InputIndex)"
  },
  {
    "label": "TryAcquireHLSLExpression()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "TryAcquireHLSLExpression(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope)"
  },
  {
    "label": "AcquireHLSLExpression()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "AcquireHLSLExpression(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope)"
  },
  {
    "label": "AcquireHLSLExpressionOrConstant()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "AcquireHLSLExpressionOrConstant(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, const UE::Shader::FValue& ConstantValue)"
  },
  {
    "label": "AcquireHLSLExpressionOrExternalInput()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "AcquireHLSLExpressionOrExternalInput(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, UE::HLSLTree::Material::EExternalInput Input)"
  },
  {
    "label": "AcquireHLSLExpressionOrDefaultExpression()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "AcquireHLSLExpressionOrDefaultExpression(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, const UE::HLSLTree::FExpression* DefaultExpression)"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "IsConstant()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsConstant()"
  },
  {
    "label": "GetTracedInput()",
    "kind": "Method",
    "detail": "Function (FExpressionInput)",
    "insertText": "GetTracedInput()"
  },
  {
    "label": "SetMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMask(int32 UseMask, int32 R, int32 G, int32 B, int32 A)"
  },
  {
    "label": "GetConnectedOutput()",
    "kind": "Method",
    "detail": "Function (Mask = UseMask ; MaskR = R ; MaskG = G ; MaskB = B ; MaskA = A ; } FExpressionOutput*)",
    "insertText": "GetConnectedOutput()"
  },
  {
    "label": "FExpressionOutput()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<> struct TStructOpsTypeTraits<FExpressionInput> : public TStructOpsTypeTraitsBase2<FExpressionInput> { enum { WithSerializer = true,} ; EPropertyObjectReferenceType WithSerializerObjectReferences = EPropertyObjectReferenceType::None ; } ; struct FExpressionOutput { FName OutputName ; int32 Mask,MaskR,MaskG,MaskB,MaskA ;)",
    "insertText": "FExpressionOutput(int32 InMask = 0, int32 InMaskR = 0, int32 InMaskG = 0, int32 InMaskB = 0, int32 InMaskA = 0) : Mask(InMask) , MaskR(InMaskR) , MaskG(InMaskG) , MaskB(InMaskB) , MaskA(InMaskA)"
  },
  {
    "label": "FExpressionOutput()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FExpressionOutput(FName InOutputName, int32 InMask = 0, int32 InMaskR = 0, int32 InMaskG = 0, int32 InMaskB = 0, int32 InMaskA = 0) : OutputName(InOutputName) , Mask(InMask) , MaskR(InMaskR) , MaskG(InMaskG) , MaskB(InMaskB) , MaskA(InMaskA)"
  },
  {
    "label": "FMaterialInput()",
    "kind": "Method",
    "detail": "Function (Mask = UseMask ; MaskR = R ; MaskG = G ; MaskB = B ; MaskA = A ; } } ; template<class InputType> struct FMaterialInput : FExpressionInput {)",
    "insertText": "FMaterialInput()"
  },
  {
    "label": "InputType()",
    "kind": "Method",
    "detail": "Function (UseConstant = 0 ; Constant =)",
    "insertText": "InputType(0)"
  },
  {
    "label": "DefaultValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultValueChanged(const FString& DefaultValue)"
  },
  {
    "label": "GetDefaultValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultValue()"
  },
  {
    "label": "CompileWithDefault()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TStructOpsTypeTraits<FColorMaterialInput> : public TStructOpsTypeTraitsBase2<FColorMaterialInput> { enum { WithSerializer = true,} ; EPropertyObjectReferenceType WithSerializerObjectReferences = EPropertyObjectReferenceType::None ; } ; struct FScalarMaterialInput : FMaterialInput<float> { # if WITH_EDITOR int32)",
    "insertText": "CompileWithDefault(class FMaterialCompiler* Compiler, EMaterialProperty Property)"
  },
  {
    "label": "FMaterialAttributesInput()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TStructOpsTypeTraits<FVector2MaterialInput> : public TStructOpsTypeTraitsBase2<FVector2MaterialInput> { enum { WithSerializer = true,} ; EPropertyObjectReferenceType WithSerializerObjectReferences = EPropertyObjectReferenceType::None ; } ; struct FMaterialAttributesInput : FExpressionInput {)",
    "insertText": "FMaterialAttributesInput() : PropertyConnectedMask(0)"
  },
  {
    "label": "CompileWithDefault()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR int32)",
    "insertText": "CompileWithDefault(class FMaterialCompiler* Compiler, const FGuid& AttributeID)"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected(EMaterialProperty Property)"
  },
  {
    "label": "SetConnectedProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetConnectedProperty(EMaterialProperty Property, bool bIsConnected)"
  },
  {
    "label": "PropertyConnectedMask()",
    "kind": "Method",
    "detail": "Function (PropertyConnectedMask = bIsConnected ?)",
    "insertText": "PropertyConnectedMask(1ull << (uint64)Property) : PropertyConnectedMask & ~(1ull << (uint64)Property)"
  }
]