[
  {
    "label": "_InIter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter1"
  },
  {
    "label": "_InIter2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter2"
  },
  {
    "label": "_OutIter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutIter1"
  },
  {
    "label": "in_in_out_result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "in_in_out_result"
  },
  {
    "label": "_InIter3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter3"
  },
  {
    "label": "_InIter4",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter4"
  },
  {
    "label": "_OutIter2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutIter2"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_IN_IN_OUT_RESULT_H # define _LIBCPP___ALGORITHM_IN_IN_OUT_RESULT_H # include<__concepts / convertible_to . h> # include<__config> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "_OutIter2()",
    "kind": "Method",
    "detail": "Function (template<class _InIter1,class _InIter2,class _OutIter1> struct in_in_out_result { _LIBCPP_NO_UNIQUE_ADDRESS _InIter1 in1 ; _LIBCPP_NO_UNIQUE_ADDRESS _InIter2 in2 ; _LIBCPP_NO_UNIQUE_ADDRESS _OutIter1 out ; template<class _InIter3,class _InIter4,class _OutIter2> requires convertible_to<const _InIter1&,_InIter3>&& convertible_to<const _InIter2&,_InIter4>&& convertible_to<const _OutIter1&,_OutIter2> _LIBCPP_HIDE_FROM_ABI operator in_in_out_result<_InIter3,_InIter4,)",
    "insertText": "_OutIter2()"
  }
]