[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "UAnimGraphNode_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Base"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FAnimNode_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Base"
  },
  {
    "label": "FBoneSocketTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneSocketTarget"
  },
  {
    "label": "FCompactHeapPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactHeapPose"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "PoseType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PoseType"
  },
  {
    "label": "FCSPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCSPose"
  },
  {
    "label": "ANIMGRAPH_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANIMGRAPH_API"
  },
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "EditorRuntimeNodePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EditorRuntimeNodePair"
  },
  {
    "label": "FAnimNodeEditMode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / AnimTypes . h \" # include \" BonePose . h \" # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" Engine / EngineBaseTypes . h \" # include \" IAnimNodeEditMode . h \" # include \" IPersonaPreviewScene . h \" # include \" InputCoreTypes . h \" # include \" Math / Matrix . h \" # include \" Math / Quat . h \" # include \" Math / Rotator . h \" # include \" Math / Sphere . h \" # include \" Math / Transform . h \" # include \" Math / UnrealMathSSE . h \" # include \" UObject / NameTypes . h \" # include \" UnrealWidgetFwd . h \" class FCanvas ; class FEditorViewportClient ; class FPrimitiveDrawInterface ; class FSceneView ; class FText ; class FViewport ; class HHitProxy ; class UAnimGraphNode_Base ; class USkeletalMeshComponent ; struct FAnimNode_Base ; struct FBoneSocketTarget ; struct FCompactHeapPose ; struct FViewportClick ; template<class PoseType> struct FCSPose ; class FAnimNodeEditMode : public IAnimNodeEditMode { public :)",
    "insertText": "FAnimNodeEditMode()"
  },
  {
    "label": "GetWidgetCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (ECoordSystem)",
    "insertText": "GetWidgetCoordinateSystem()"
  },
  {
    "label": "GetWidgetMode()",
    "kind": "Method",
    "detail": "Function (UE::Widget::EWidgetMode)",
    "insertText": "GetWidgetMode()"
  },
  {
    "label": "ChangeToNextWidgetMode()",
    "kind": "Method",
    "detail": "Function (UE::Widget::EWidgetMode)",
    "insertText": "ChangeToNextWidgetMode(UE::Widget::EWidgetMode CurWidgetMode)"
  },
  {
    "label": "SetWidgetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetWidgetMode(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GetSelectedBone()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSelectedBone()"
  },
  {
    "label": "DoTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoTranslation(FVector& InTranslation)"
  },
  {
    "label": "DoRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoRotation(FRotator& InRotation)"
  },
  {
    "label": "DoScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoScale(FVector& InScale)"
  },
  {
    "label": "EnterMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterMode(class UAnimGraphNode_Base* InEditorNode, struct FAnimNode_Base* InRuntimeNode)"
  },
  {
    "label": "ExitMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitMode()"
  },
  {
    "label": "SupportsPoseWatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsPoseWatch()"
  },
  {
    "label": "GetAnimPreviewScene()",
    "kind": "Method",
    "detail": "Function (class IPersonaPreviewScene&)",
    "insertText": "GetAnimPreviewScene()"
  },
  {
    "label": "GetOnScreenDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOnScreenDebugInfo(TArray<FText>& OutDebugInfo)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD(FEditorViewportClient* ViewportClient, FViewport* Viewport, const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy* HitProxy, const FViewportClick& Click)"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(FEditorViewportClient* InViewportClient, FViewport* InViewport, FKey InKey, EInputEvent InEvent)"
  },
  {
    "label": "InputDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputDelta(FEditorViewportClient* InViewportClient, FViewport* InViewport, FVector& InDrag, FRotator& InRot, FVector& InScale)"
  },
  {
    "label": "GetCustomDrawingCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomDrawingCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "GetCustomInputCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomInputCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "ShouldDrawWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawWidget()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FEditorViewportClient* ViewportClient, float DeltaTime)"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "RegisterPoseWatchedNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPoseWatchedNode(UAnimGraphNode_Base* InEditorNode, FAnimNode_Base* InRuntimeNode)"
  },
  {
    "label": "EditorRuntimeNodePair()",
    "kind": "Method",
    "detail": "Function (struct EditorRuntimeNodePair {)",
    "insertText": "EditorRuntimeNodePair(UAnimGraphNode_Base* InEditorAnimNode, FAnimNode_Base* InRuntimeAnimNode) : EditorAnimNode(InEditorAnimNode) , RuntimeAnimNode(InRuntimeAnimNode)"
  },
  {
    "label": "BeginTransform()",
    "kind": "Method",
    "detail": "Function (} UAnimGraphNode_Base* EditorAnimNode ; FAnimNode_Base* RuntimeAnimNode ; } ; bool)",
    "insertText": "BeginTransform(const FGizmoState& InState)"
  },
  {
    "label": "EndTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTransform(const FGizmoState& InState)"
  },
  {
    "label": "ConvertToComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ConvertToComponentSpaceTransform(const USkeletalMeshComponent* SkelComp, const FTransform & InTransform, FTransform & OutCSTransform, int32 BoneIndex, EBoneControlSpace Space)"
  },
  {
    "label": "ConvertToBoneSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToBoneSpaceTransform(const USkeletalMeshComponent* SkelComp, const FTransform & InCSTransform, FTransform & OutBSTransform, int32 BoneIndex, EBoneControlSpace Space)"
  },
  {
    "label": "ConvertCSVectorToBoneSpace()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertCSVectorToBoneSpace(const USkeletalMeshComponent* SkelComp, FVector& InCSVector, FCSPose<FCompactHeapPose>& MeshBases, const FName& BoneName, const EBoneControlSpace Space)"
  },
  {
    "label": "ConvertCSVectorToBoneSpace()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertCSVectorToBoneSpace(const USkeletalMeshComponent* SkelComp, FVector& InCSVector, FCSPose<FCompactHeapPose>& MeshBases, const FBoneSocketTarget& InTarget, const EBoneControlSpace Space)"
  },
  {
    "label": "ConvertCSRotationToBoneSpace()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "ConvertCSRotationToBoneSpace(const USkeletalMeshComponent* SkelComp, FRotator& InCSRotator, FCSPose<FCompactHeapPose>& MeshBases, const FName& BoneName, const EBoneControlSpace Space)"
  },
  {
    "label": "ConvertWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertWidgetLocation(const USkeletalMeshComponent* InSkelComp, FCSPose<FCompactHeapPose>& InMeshBases, const FName& BoneName, const FVector& InLocation, const EBoneControlSpace Space)"
  },
  {
    "label": "ConvertWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertWidgetLocation(const USkeletalMeshComponent* InSkelComp, FCSPose<FCompactHeapPose>& InMeshBases, const FBoneSocketTarget& Target, const FVector& InLocation, const EBoneControlSpace Space)"
  },
  {
    "label": "GetActiveWidgetAnimNode()",
    "kind": "Method",
    "detail": "Function (UAnimGraphNode_Base*)",
    "insertText": "GetActiveWidgetAnimNode()"
  },
  {
    "label": "GetActiveWidgetRuntimeAnimNode()",
    "kind": "Method",
    "detail": "Function (FAnimNode_Base*)",
    "insertText": "GetActiveWidgetRuntimeAnimNode()"
  },
  {
    "label": "IsManipulatingWidget()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsManipulatingWidget()"
  },
  {
    "label": "HandleEndTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleEndTransform()"
  }
]