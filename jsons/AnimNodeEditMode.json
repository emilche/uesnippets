[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "UAnimGraphNode_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Base"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FAnimNode_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Base"
  },
  {
    "label": "FBoneSocketTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneSocketTarget"
  },
  {
    "label": "FCompactHeapPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactHeapPose"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "PoseType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PoseType"
  },
  {
    "label": "FCSPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCSPose"
  },
  {
    "label": "ANIMGRAPH_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANIMGRAPH_API"
  },
  {
    "label": "UAnimGraphNode_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Base"
  },
  {
    "label": "FAnimNode_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Base"
  },
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "EditorRuntimeNodePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EditorRuntimeNodePair"
  },
  {
    "label": "FAnimNodeEditMode()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FAnimNodeEditMode()"
  },
  {
    "label": "RegisterPoseWatchedNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPoseWatchedNode(UAnimGraphNode_Base* InEditorNode, FAnimNode_Base* InRuntimeNode)"
  },
  {
    "label": "ConvertToComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToComponentSpaceTransform(const USkeletalMeshComponent* SkelComp, const FTransform & InTransform, FTransform & OutCSTransform, int32 BoneIndex, EBoneControlSpace Space)"
  },
  {
    "label": "ConvertToBoneSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToBoneSpaceTransform(const USkeletalMeshComponent* SkelComp, const FTransform & InCSTransform, FTransform & OutBSTransform, int32 BoneIndex, EBoneControlSpace Space)"
  },
  {
    "label": "ConvertCSVectorToBoneSpace()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertCSVectorToBoneSpace(const USkeletalMeshComponent* SkelComp, FVector& InCSVector, FCSPose<FCompactHeapPose>& MeshBases, const FName& BoneName, const EBoneControlSpace Space)"
  },
  {
    "label": "ConvertCSVectorToBoneSpace()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertCSVectorToBoneSpace(const USkeletalMeshComponent* SkelComp, FVector& InCSVector, FCSPose<FCompactHeapPose>& MeshBases, const FBoneSocketTarget& InTarget, const EBoneControlSpace Space)"
  },
  {
    "label": "ConvertCSRotationToBoneSpace()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "ConvertCSRotationToBoneSpace(const USkeletalMeshComponent* SkelComp, FRotator& InCSRotator, FCSPose<FCompactHeapPose>& MeshBases, const FName& BoneName, const EBoneControlSpace Space)"
  },
  {
    "label": "ConvertWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertWidgetLocation(const USkeletalMeshComponent* InSkelComp, FCSPose<FCompactHeapPose>& InMeshBases, const FName& BoneName, const FVector& InLocation, const EBoneControlSpace Space)"
  },
  {
    "label": "ConvertWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertWidgetLocation(const USkeletalMeshComponent* InSkelComp, FCSPose<FCompactHeapPose>& InMeshBases, const FBoneSocketTarget& Target, const FVector& InLocation, const EBoneControlSpace Space)"
  },
  {
    "label": "HandleBeginTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBeginTransform()"
  },
  {
    "label": "HandleEndTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleEndTransform()"
  }
]