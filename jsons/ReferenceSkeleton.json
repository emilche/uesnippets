[
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FReferenceSkeleton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeleton"
  },
  {
    "label": "FMeshBoneInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBoneInfo"
  },
  {
    "label": "FVirtualBoneRefData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualBoneRefData"
  },
  {
    "label": "FReferenceSkeletonModifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeletonModifier"
  },
  {
    "label": "FMeshBoneInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BoneIndices . h \" class USkeleton ; struct FReferenceSkeleton ; struct FMeshBoneInfo { FName Name ; int32 ParentIndex ; # if WITH_EDITORONLY_DATA FString ExportName ; # endif)",
    "insertText": "FMeshBoneInfo() : Name(NAME_None), ParentIndex(INDEX_NONE)"
  },
  {
    "label": "FMeshBoneInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMeshBoneInfo(const FName& InName, const FString& InExportName, int32 InParentIndex) : Name(InName) , ParentIndex(InParentIndex) #if WITH_EDITORONLY_DATA , ExportName(InExportName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMeshBoneInfo& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FMeshBoneInfo& F)"
  },
  {
    "label": "FVirtualBoneRefData()",
    "kind": "Method",
    "detail": "Function (} ; struct FVirtualBoneRefData { int32 VBRefSkelIndex ; int32 SourceRefSkelIndex ; int32 TargetRefSkelIndex ;)",
    "insertText": "FVirtualBoneRefData(int32 InVBRefSkelIndex, int32 InSourceRefSkelIndex, int32 InTargetRefSkelIndex) : VBRefSkelIndex(InVBRefSkelIndex) , SourceRefSkelIndex(InSourceRefSkelIndex) , TargetRefSkelIndex(InTargetRefSkelIndex)"
  },
  {
    "label": "FReferenceSkeletonModifier()",
    "kind": "Method",
    "detail": "Function (} } ; class USkeleton ; struct FReferenceSkeleton ; struct FReferenceSkeletonModifier { private : FReferenceSkeleton& RefSkeleton ; const USkeleton* Skeleton ; public :)",
    "insertText": "FReferenceSkeletonModifier(FReferenceSkeleton& InRefSkel, const USkeleton* InSkeleton) : RefSkeleton(InRefSkel), Skeleton(InSkeleton)"
  },
  {
    "label": "FReferenceSkeletonModifier()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FReferenceSkeletonModifier(USkeleton* InSkeleton)"
  },
  {
    "label": "FReferenceSkeletonModifier()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FReferenceSkeletonModifier()"
  },
  {
    "label": "UpdateRefPoseTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRefPoseTransform(const int32 BoneIndex, const FTransform& BonePose)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const FMeshBoneInfo& BoneInfo, const FTransform& BonePose, const bool bAllowMultipleRoots = false)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const FName& BoneName, const bool bRemoveChildren)"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rename(const FName& InOldName, const FName& InNewName)"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SetParent(const FName& InBoneName, const FName& InParentName, const bool bAllowMultipleRoots = false)"
  },
  {
    "label": "FindBoneIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindBoneIndex(const FName& BoneName)"
  },
  {
    "label": "GetRefBoneInfo()",
    "kind": "Method",
    "detail": "Function (const TArray<FMeshBoneInfo>&)",
    "insertText": "GetRefBoneInfo()"
  },
  {
    "label": "GetReferenceSkeleton()",
    "kind": "Method",
    "detail": "Function (const FReferenceSkeleton&)",
    "insertText": "GetReferenceSkeleton()"
  },
  {
    "label": "InvalidateEndOfBranchCache()",
    "kind": "Method",
    "detail": "Function (} private : TArray<FMeshBoneInfo> RawRefBoneInfo ; TArray<FTransform> RawRefBonePose ; TArray<FMeshBoneInfo> FinalRefBoneInfo ; TArray<FTransform> FinalRefBonePose ; TMap<FName,int32> RawNameToIndexMap ; TMap<FName,int32> FinalNameToIndexMap ; TArray<FBoneIndexType> RequiredVirtualBones ; TArray<FVirtualBoneRefData> UsedVirtualBoneData ; bool bOnlyOneRootAllowed ; TArray<int32> CachedEndOfBranchIndicesRaw ; int32 BRANCH_CACHE_INVALID_INDEX = - 2 ; void)",
    "insertText": "InvalidateEndOfBranchCache()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (CachedEndOfBranchIndicesRaw .)",
    "insertText": "Init(BRANCH_CACHE_INVALID_INDEX, RawRefBonePose.Num())"
  },
  {
    "label": "RemoveIndividualBone()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveIndividualBone(int32 BoneIndex, TArray<int32>& OutBonesRemoved)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bRemoveThisBone = true ;)",
    "insertText": "for(int32 CurrBoneIndex=BoneIndex+1; CurrBoneIndex < GetRawBoneNum(); CurrBoneIndex++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bRemoveThisBone = false ; break ; } })",
    "insertText": "if(bRemoveThisBone)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FMeshBoneInfo& Bone = RawRefBoneInfo [ CurrBoneIndex ] ;)",
    "insertText": "if(Bone.ParentIndex > BoneIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Bone . ParentIndex - = 1 ; } } OutBonesRemoved .)",
    "insertText": "Add(BoneIndex)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (RawRefBonePose .)",
    "insertText": "RemoveAt(BoneIndex, 1)"
  },
  {
    "label": "GetParentIndexInternal()",
    "kind": "Method",
    "detail": "Function (} return bRemoveThisBone ; } int32)",
    "insertText": "GetParentIndexInternal(const int32 BoneIndex, const TArray<FMeshBoneInfo>& BoneInfo)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (const int32 ParentIndex = BoneInfo [ BoneIndex ] . ParentIndex ;)",
    "insertText": "checkSlow(!bOnlyOneRootAllowed || (((BoneIndex == 0) && (ParentIndex == INDEX_NONE)) || ((BoneIndex > 0) && BoneInfo.IsValidIndex(ParentIndex) && (ParentIndex < BoneIndex))))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RawRefBonePose [ BoneIndex ] = BonePose ; } void)",
    "insertText": "Add(const FMeshBoneInfo& BoneInfo, const FTransform& BonePose)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const int32 BoneIndex = RawRefBoneInfo .)",
    "insertText": "Add(BoneInfo)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RawRefBonePose .)",
    "insertText": "Add(BonePose)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RawNameToIndexMap .)",
    "insertText": "Add(BoneInfo.Name, BoneIndex)"
  },
  {
    "label": "NormalizeRotation()",
    "kind": "Method",
    "detail": "Function (RawRefBonePose [ BoneIndex ] .)",
    "insertText": "NormalizeRotation()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(const FName InBoneName, const bool bRemoveChildren)"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rename(const FName InBoneName, const FName InNewName)"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SetParent(const FName InBoneName, const FName InParentName)"
  },
  {
    "label": "GetRawSourceBoneIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRawSourceBoneIndex(const USkeleton* Skeleton, const FName& SourceBoneName)"
  },
  {
    "label": "GetChildrenInternal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChildrenInternal(int32 InParentBoneIndex, TArray<int32>& OutChildren, const bool bRaw)"
  },
  {
    "label": "GetCachedEndOfBranchIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCachedEndOfBranchIndex(const int32 InBoneIndex)"
  },
  {
    "label": "RebuildRefSkeleton()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "RebuildRefSkeleton(const USkeleton* Skeleton, bool bRebuildNameMap)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNum()"
  },
  {
    "label": "GetRawBoneNum()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetRawBoneNum()"
  },
  {
    "label": "GetRequiredVirtualBones()",
    "kind": "Method",
    "detail": "Function (} const TArray<FBoneIndexType>&)",
    "insertText": "GetRequiredVirtualBones()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<FName> BoneNames ; BoneNames .)",
    "insertText": "Reserve(RawRefBoneInfo.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BoneNames .)",
    "insertText": "Add(BoneInfo.Name)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} return BoneNames ; } void)",
    "insertText": "Empty(int32 Size=0)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (RawRefBoneInfo .)",
    "insertText": "Empty(Size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 BoneIndex = INDEX_NONE ;)",
    "insertText": "if(BoneName != NAME_None)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32* IndexPtr = FinalNameToIndexMap .)",
    "insertText": "Find(BoneName)"
  },
  {
    "label": "FindRawBoneIndex()",
    "kind": "Method",
    "detail": "Function (BoneIndex =* IndexPtr ; } } return BoneIndex ; } int32)",
    "insertText": "FindRawBoneIndex(const FName& BoneName)"
  },
  {
    "label": "GetBoneName()",
    "kind": "Method",
    "detail": "Function (BoneIndex =* IndexPtr ; } } return BoneIndex ; } FName)",
    "insertText": "GetBoneName(const int32 BoneIndex)"
  },
  {
    "label": "GetRawParentIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetRawParentIndex(const int32 BoneIndex)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(int32 Index)"
  },
  {
    "label": "IsValidRawIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidRawIndex(int32 Index)"
  },
  {
    "label": "GetDepthBetweenBones()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetDepthBetweenBones(const int32 BoneIndex, const int32 ParentBoneIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 CurBoneIndex = BoneIndex ; int32 Depth = 0 ; do {)",
    "insertText": "if(CurBoneIndex == ParentBoneIndex)"
  },
  {
    "label": "BoneIsChildOf()",
    "kind": "Method",
    "detail": "Function (} return INDEX_NONE ; } bool)",
    "insertText": "BoneIsChildOf(const int32 ChildBoneIndex, const int32 ParentBoneIndex)"
  },
  {
    "label": "GetParentIndex()",
    "kind": "Method",
    "detail": "Function (int32 BoneIndex =)",
    "insertText": "GetParentIndex(ChildBoneIndex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(BoneIndex != INDEX_NONE)"
  },
  {
    "label": "RemoveDuplicateBones()",
    "kind": "Method",
    "detail": "Function (} } return false ; } void)",
    "insertText": "RemoveDuplicateBones(const UObject* Requester, TArray<FBoneIndexType> & DuplicateBones)"
  },
  {
    "label": "RemoveBonesByName()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "RemoveBonesByName(USkeleton* Skeleton, const TArray<FName>& BonesToRemove)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FMeshBoneInfo& Bone = RawRefBoneInfo [ BoneIndex ] ;)",
    "insertText": "if(BonesToRemove.Contains(Bone.Name))"
  },
  {
    "label": "RemoveIndividualBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveIndividualBone(BoneIndex, BonesRemoved)"
  },
  {
    "label": "RebuildRefSkeleton()",
    "kind": "Method",
    "detail": "Function (} } const bool bRebuildNameMap = true ;)",
    "insertText": "RebuildRefSkeleton(Skeleton, bRebuildNameMap)"
  },
  {
    "label": "EnsureParentsExist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureParentsExist(TArray<FBoneIndexType>& InOutBoneSortedArray)"
  },
  {
    "label": "EnsureParentsExistAndSort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureParentsExistAndSort(TArray<FBoneIndexType>& InOutBoneUnsortedArray)"
  },
  {
    "label": "GetDataSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetDataSize()"
  },
  {
    "label": "GetRawChildrenIndicesCached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRawChildrenIndicesCached(const int32 BoneIndex, TArray<int32>& OutChildren)"
  },
  {
    "label": "GetRawChildrenIndicesRecursiveCached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRawChildrenIndicesRecursiveCached(const int32 BoneIndex, TArray<int32>& OutChildren)"
  },
  {
    "label": "GetDirectChildBones()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDirectChildBones(int32 ParentBoneIndex, TArray<int32> & Children)"
  },
  {
    "label": "GetRawDirectChildBones()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRawDirectChildBones(int32 ParentBoneIndex, TArray<int32> & Children)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive & Ar, FReferenceSkeleton & F)"
  }
]