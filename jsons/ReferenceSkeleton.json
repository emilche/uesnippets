[
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FReferenceSkeleton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeleton"
  },
  {
    "label": "FMeshBoneInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBoneInfo"
  },
  {
    "label": "FVirtualBoneRefData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualBoneRefData"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FReferenceSkeleton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeleton"
  },
  {
    "label": "FReferenceSkeletonModifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeletonModifier"
  },
  {
    "label": "FReferenceSkeleton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeleton"
  },
  {
    "label": "FReferenceSkeletonModifier()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FReferenceSkeletonModifier(USkeleton* InSkeleton)"
  },
  {
    "label": "UpdateRefPoseTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRefPoseTransform(const int32 BoneIndex, const FTransform& BonePose)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const FMeshBoneInfo& BoneInfo, const FTransform& BonePose, const bool bAllowMultipleRoots = false)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const FName& BoneName, const bool bRemoveChildren)"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rename(const FName& InOldName, const FName& InNewName)"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SetParent(const FName& InBoneName, const FName& InParentName, const bool bAllowMultipleRoots = false)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (children)",
    "insertText": "for(int32 CurrBoneIndex=BoneIndex+1; CurrBoneIndex < GetRawBoneNum()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (array)",
    "insertText": "for(int32 CurrBoneIndex=BoneIndex+1; CurrBoneIndex < GetRawBoneNum()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const FName InBoneName, const bool bRemoveChildren)"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rename(const FName InBoneName, const FName InNewName)"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SetParent(const FName InBoneName, const FName InParentName)"
  },
  {
    "label": "RebuildRefSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildRefSkeleton(const USkeleton* Skeleton, bool bRebuildNameMap)"
  },
  {
    "label": "GetParentIndexInternal()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetParentIndexInternal(BoneIndex, FinalRefBoneInfo)"
  },
  {
    "label": "GetParentIndexInternal()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetParentIndexInternal(BoneIndex, RawRefBoneInfo)"
  },
  {
    "label": "RemoveDuplicateBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDuplicateBones(const UObject* Requester, TArray<FBoneIndexType> & DuplicateBones)"
  },
  {
    "label": "RebuildNameToIndexMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildNameToIndexMap()"
  }
]