[
  {
    "label": "SourceTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SourceTracker"
  },
  {
    "label": "SourceKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SourceKey"
  },
  {
    "label": "SourceKeyComparator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SourceKeyComparator"
  },
  {
    "label": "SourceKeyHasher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SourceKeyHasher"
  },
  {
    "label": "SourceEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SourceEntry"
  },
  {
    "label": "SourceTracker()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_SOURCE_TRACKER_H_ # define MODULES_RTP_RTCP_SOURCE_SOURCE_TRACKER_H_ # include<cstdint> # include<list> # include<unordered_map> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / rtp_packet_infos . h \" # include \" api / transport / rtp / rtp_source . h \" # include \" api / units / time_delta . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / time_utils . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class SourceTracker { public : int64_t kTimeoutMs = 1 0 0 0 0 ;)",
    "insertText": "SourceTracker(Clock* clock)"
  },
  {
    "label": "SourceTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SourceTracker(const SourceTracker& other)"
  },
  {
    "label": "SourceTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SourceTracker(SourceTracker&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SourceTracker&)",
    "insertText": "operator(const SourceTracker& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SourceTracker&)",
    "insertText": "operator(SourceTracker&& other)"
  },
  {
    "label": "OnFrameDelivered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameDelivered(const RtpPacketInfos& packet_infos)"
  },
  {
    "label": "GetSources()",
    "kind": "Method",
    "detail": "Function (std::vector<RtpSource>)",
    "insertText": "GetSources()"
  },
  {
    "label": "SourceKey()",
    "kind": "Method",
    "detail": "Function (private : struct SourceKey {)",
    "insertText": "SourceKey(RtpSourceType source_type, uint32_t source) : source_type(source_type), source(source)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} RtpSourceType source_type ; uint32_t source ; } ; struct SourceKeyComparator { bool)",
    "insertText": "operator()(const SourceKey& lhs, const SourceKey& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct SourceKeyHasher { size_t)",
    "insertText": "operator()(const SourceKey& value)"
  },
  {
    "label": "UpdateEntry()",
    "kind": "Method",
    "detail": "Function (} } ; struct SourceEntry { int64_t timestamp_ms ; absl::optional<uint8_t> audio_level ; absl::optional<AbsoluteCaptureTime> absolute_capture_time ; absl::optional<TimeDelta> local_capture_clock_offset ; uint32_t rtp_timestamp ; } ; using SourceList = std::list<std::pair<const SourceKey,SourceEntry>> ; using SourceMap = std::unordered_map<SourceKey,SourceList::iterator,SourceKeyHasher,SourceKeyComparator> ; SourceEntry&)",
    "insertText": "UpdateEntry(const SourceKey& key) RTC_EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "PruneEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneEntries(int64_t now_ms) const RTC_EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; Mutex lock_ ; SourceList list_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  }
]