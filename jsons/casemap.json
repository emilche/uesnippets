[
  {
    "label": "BreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BreakIterator"
  },
  {
    "label": "ByteSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ByteSink"
  },
  {
    "label": "Edits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Edits"
  },
  {
    "label": "U_COMMON_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_COMMON_API"
  },
  {
    "label": "toLower()",
    "kind": "Method",
    "detail": "Function (# ifndef __CASEMAP_H__ # define __CASEMAP_H__ # include \" unicode / utypes . h \" # include \" unicode / stringpiece . h \" # include \" unicode / uobject . h \" U_NAMESPACE_BEGIN class BreakIterator ; class ByteSink ; class Edits ; class CaseMap U_FINAL : public UMemory { public : int32_t)",
    "insertText": "toLower(const char *locale, uint32_t options, const char16_t *src, int32_t srcLength, char16_t *dest, int32_t destCapacity, Edits *edits, UErrorCode &errorCode)"
  },
  {
    "label": "toUpper()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "toUpper(const char *locale, uint32_t options, const char16_t *src, int32_t srcLength, char16_t *dest, int32_t destCapacity, Edits *edits, UErrorCode &errorCode)"
  },
  {
    "label": "toTitle()",
    "kind": "Method",
    "detail": "Function (# if ! UCONFIG_NO_BREAK_ITERATION int32_t)",
    "insertText": "toTitle(const char *locale, uint32_t options, BreakIterator *iter, const char16_t *src, int32_t srcLength, char16_t *dest, int32_t destCapacity, Edits *edits, UErrorCode &errorCode)"
  },
  {
    "label": "fold()",
    "kind": "Method",
    "detail": "Function (# endif int32_t)",
    "insertText": "fold(uint32_t options, const char16_t *src, int32_t srcLength, char16_t *dest, int32_t destCapacity, Edits *edits, UErrorCode &errorCode)"
  },
  {
    "label": "utf8ToLower()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "utf8ToLower(const char *locale, uint32_t options, StringPiece src, ByteSink &sink, Edits *edits, UErrorCode &errorCode)"
  },
  {
    "label": "utf8ToUpper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "utf8ToUpper(const char *locale, uint32_t options, StringPiece src, ByteSink &sink, Edits *edits, UErrorCode &errorCode)"
  },
  {
    "label": "utf8ToTitle()",
    "kind": "Method",
    "detail": "Function (# if ! UCONFIG_NO_BREAK_ITERATION void)",
    "insertText": "utf8ToTitle(const char *locale, uint32_t options, BreakIterator *iter, StringPiece src, ByteSink &sink, Edits *edits, UErrorCode &errorCode)"
  },
  {
    "label": "utf8Fold()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "utf8Fold(uint32_t options, StringPiece src, ByteSink &sink, Edits *edits, UErrorCode &errorCode)"
  },
  {
    "label": "utf8ToLower()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "utf8ToLower(const char *locale, uint32_t options, const char *src, int32_t srcLength, char *dest, int32_t destCapacity, Edits *edits, UErrorCode &errorCode)"
  },
  {
    "label": "utf8ToUpper()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "utf8ToUpper(const char *locale, uint32_t options, const char *src, int32_t srcLength, char *dest, int32_t destCapacity, Edits *edits, UErrorCode &errorCode)"
  },
  {
    "label": "utf8ToTitle()",
    "kind": "Method",
    "detail": "Function (# if ! UCONFIG_NO_BREAK_ITERATION int32_t)",
    "insertText": "utf8ToTitle(const char *locale, uint32_t options, BreakIterator *iter, const char *src, int32_t srcLength, char *dest, int32_t destCapacity, Edits *edits, UErrorCode &errorCode)"
  },
  {
    "label": "utf8Fold()",
    "kind": "Method",
    "detail": "Function (# endif int32_t)",
    "insertText": "utf8Fold(uint32_t options, const char *src, int32_t srcLength, char *dest, int32_t destCapacity, Edits *edits, UErrorCode &errorCode)"
  },
  {
    "label": "CaseMap()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "CaseMap()"
  }
]