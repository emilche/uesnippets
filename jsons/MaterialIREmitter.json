[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSwizzleMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSwizzleMask"
  },
  {
    "label": "FEmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmitter"
  },
  {
    "label": "FPrivate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrivate"
  },
  {
    "label": "VectorComponentToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Materials / MaterialIRCommon . h \" # include \" Materials / MaterialIR . h \" # include \" Materials / MaterialIRTypes . h \" # if WITH_EDITOR namespace UE::MIR { enum class EVectorComponent : uint8_t { X,Y,Z,W,} ; const TCHAR*)",
    "insertText": "VectorComponentToString(EVectorComponent)"
  },
  {
    "label": "XYZ()",
    "kind": "Method",
    "detail": "Function (struct FSwizzleMask { EVectorComponent Components [ 4 ] ; int NumComponents { } ; FSwizzleMask)",
    "insertText": "XYZ()"
  },
  {
    "label": "FSwizzleMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSwizzleMask()"
  },
  {
    "label": "FSwizzleMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSwizzleMask(EVectorComponent X)"
  },
  {
    "label": "FSwizzleMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSwizzleMask(EVectorComponent X, EVectorComponent Y)"
  },
  {
    "label": "FSwizzleMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSwizzleMask(EVectorComponent X, EVectorComponent Y, EVectorComponent Z)"
  },
  {
    "label": "FSwizzleMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSwizzleMask(EVectorComponent X, EVectorComponent Y, EVectorComponent Z, EVectorComponent W)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(EVectorComponent Component)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (const EVectorComponent*)",
    "insertText": "begin()"
  },
  {
    "label": "TryGet()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "TryGet(const FExpressionInput* Input)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "Get(const FExpressionInput* Input)"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (FEmitter&)",
    "insertText": "Put(int OutputIndex, FValue* Value)"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (FEmitter&)",
    "insertText": "Put(const FExpressionOutput* Output, FValue* Value)"
  },
  {
    "label": "DefaultToFloatZero()",
    "kind": "Method",
    "detail": "Function (FEmitter&)",
    "insertText": "DefaultToFloatZero(const FExpressionInput* Input)"
  },
  {
    "label": "DefaultTo()",
    "kind": "Method",
    "detail": "Function (FEmitter&)",
    "insertText": "DefaultTo(const FExpressionInput* Input, TFloat Float)"
  },
  {
    "label": "GetFloat()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "GetFloat(const FExpressionInput* Input)"
  },
  {
    "label": "GetScalar()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "GetScalar(const FExpressionInput* Input)"
  },
  {
    "label": "GetPrimitive()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "GetPrimitive(const FExpressionInput* Input)"
  },
  {
    "label": "GetOfType()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "GetOfType(const FExpressionInput* Input, ETypeKind Kind)"
  },
  {
    "label": "CheckValueValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckValueValid(const FValue* Value)"
  },
  {
    "label": "CheckInputIsScalar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckInputIsScalar(const FExpressionInput* Input, FValue* InputValue)"
  },
  {
    "label": "CheckInputIsScalar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckInputIsScalar(const FExpressionInput* Input, FValue* InputValue, EScalarKind Kind)"
  },
  {
    "label": "CheckInputTypeIs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckInputTypeIs(const FExpressionInput* Input, FValue* InputValue, ETypeKind Kind)"
  },
  {
    "label": "EmitConstantFromShaderValue()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitConstantFromShaderValue(const UE::Shader::FValue& InValue)"
  },
  {
    "label": "EmitConstantScalarZero()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitConstantScalarZero(EScalarKind Kind)"
  },
  {
    "label": "EmitConstantTrue()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitConstantTrue()"
  },
  {
    "label": "EmitConstantFalse()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitConstantFalse()"
  },
  {
    "label": "EmitConstantBool1()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitConstantBool1(bool InX)"
  },
  {
    "label": "EmitConstantFloat1()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitConstantFloat1(TFloat InX)"
  },
  {
    "label": "EmitConstantFloat2()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitConstantFloat2(const FVector2f& InValue)"
  },
  {
    "label": "EmitConstantFloat3()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitConstantFloat3(const FVector3f& InValue)"
  },
  {
    "label": "EmitConstantFloat4()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitConstantFloat4(const FVector4f& InValue)"
  },
  {
    "label": "EmitConstantInt1()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitConstantInt1(TInteger InX)"
  },
  {
    "label": "EmitConstantInt2()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitConstantInt2(const FIntVector2& InValue)"
  },
  {
    "label": "EmitConstantInt3()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitConstantInt3(const FIntVector3& InValue)"
  },
  {
    "label": "EmitConstantInt4()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitConstantInt4(const FIntVector4& InValue)"
  },
  {
    "label": "EmitVector2()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitVector2(FValue* InX, FValue* InY)"
  },
  {
    "label": "EmitVector3()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitVector3(FValue* InX, FValue* InY, FValue* InZ)"
  },
  {
    "label": "EmitVector4()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitVector4(FValue* InX, FValue* InY, FValue* InZ, FValue* InW)"
  },
  {
    "label": "GetExternalInput()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "GetExternalInput(EExternalInput Id)"
  },
  {
    "label": "EmitSubscript()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitSubscript(FValue* Value, int ComponentIndex)"
  },
  {
    "label": "EmitSwizzle()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitSwizzle(FValue* Value, FSwizzleMask Mask)"
  },
  {
    "label": "GetParameter()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "GetParameter(FName Name, const FMaterialParameterMetadata& Metadata)"
  },
  {
    "label": "EmitSetMaterialOutput()",
    "kind": "Method",
    "detail": "Function (FSetMaterialOutput*)",
    "insertText": "EmitSetMaterialOutput(EMaterialProperty InProperty, FValue* InArgValue)"
  },
  {
    "label": "EmitBinaryOperator()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitBinaryOperator(EBinaryOperator Operator, FValue* Lhs, FValue* Rhs)"
  },
  {
    "label": "EmitBranch()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitBranch(FValue* Condition, FValue* True, FValue* False)"
  },
  {
    "label": "EmitConstruct()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitConstruct(FTypePtr Type, FValue* Initializer)"
  },
  {
    "label": "EmitTextureSample()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "EmitTextureSample(UTexture* Texture, FValue* TexCoord, ESamplerSourceMode SamplerSourceMode, ETextureMipValueMode MipValueMode, EMaterialSamplerType SamplerType)"
  },
  {
    "label": "GetCommonPrimitiveType()",
    "kind": "Method",
    "detail": "Function (FPrimitiveTypePtr)",
    "insertText": "GetCommonPrimitiveType(FPrimitiveTypePtr A, FPrimitiveTypePtr B)"
  },
  {
    "label": "IsInvalid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInvalid()"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Error(FString::Printf(Format, Forward<TArgs>(Args)...))"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Error(FString Message)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (struct FPrivate ; FMaterialIRModuleBuilderImpl ; private : void)",
    "insertText": "Initialize()"
  }
]