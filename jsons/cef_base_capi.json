[
  {
    "label": "_cef_base_ref_counted_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_base_ref_counted_t"
  },
  {
    "label": "_cef_base_scoped_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_base_scoped_t"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_CAPI_CEF_BASE_CAPI_H_ # define CEF_INCLUDE_CAPI_CEF_BASE_CAPI_H_ # include<stdint . h> # include \" include / internal / cef_export . h \" # include \" include / internal / cef_string . h \" # include \" include / internal / cef_string_list . h \" # include \" include / internal / cef_string_map . h \" # include \" include / internal / cef_string_multimap . h \" # include \" include / internal / cef_types . h \" # ifdef __cplusplus \" C \" { # endif typedef struct _cef_base_ref_counted_t { size_t size ;)",
    "insertText": "void(CEF_CALLBACK* add_ref)(struct _cef_base_ref_counted_t* self)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(CEF_CALLBACK* release)(struct _cef_base_ref_counted_t* self)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(CEF_CALLBACK* has_one_ref)(struct _cef_base_ref_counted_t* self)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(CEF_CALLBACK* has_at_least_one_ref)(struct _cef_base_ref_counted_t* self)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} cef_base_ref_counted_t ; typedef struct _cef_base_scoped_t { size_t size ;)",
    "insertText": "void(CEF_CALLBACK* del)(struct _cef_base_scoped_t* self)"
  }
]