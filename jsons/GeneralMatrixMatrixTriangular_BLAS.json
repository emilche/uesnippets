[
  {
    "label": "general_matrix_matrix_rankupdate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "general_matrix_matrix_rankupdate"
  },
  {
    "label": "general_matrix_matrix_triangular_product",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "general_matrix_matrix_triangular_product"
  },
  {
    "label": "EIGEN_BLAS_RANKUPDATE_SPECIALIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_GENERAL_MATRIX_MATRIX_TRIANGULAR_BLAS_H # define EIGEN_GENERAL_MATRIX_MATRIX_TRIANGULAR_BLAS_H namespace Eigen { namespace internal { template<Index,Scalar,int AStorageOrder,bool ConjugateA,int ResStorageOrder,int UpLo> struct general_matrix_matrix_rankupdate : general_matrix_matrix_triangular_product<Index,Scalar,AStorageOrder,ConjugateA,Scalar,AStorageOrder,ConjugateA,ResStorageOrder,1,UpLo,BuiltIn> { } ; # define)",
    "insertText": "EIGEN_BLAS_RANKUPDATE_SPECIALIZE(Scalar)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ EIGEN_STRONG_INLINE void)",
    "insertText": "run(Index size, Index depth,const Scalar* lhs, Index lhsStride, \\ const Scalar* rhs, Index rhsStride, Scalar* res, Index resIncr, Index resStride, Scalar alpha, level3_blocking<Scalar, Scalar>& blocking)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(lhs==rhs && ((UpLo&(Lower|Upper))==UpLo))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ general_matrix_matrix_rankupdate<Index,Scalar,LhsStorageOrder,ConjugateLhs,ColMajor,UpLo>)",
    "insertText": "run(size,depth,lhs,lhsStride,rhs,rhsStride,res,resStride,alpha,blocking)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\ general_matrix_matrix_triangular_product<Index,\\ Scalar,LhsStorageOrder,ConjugateLhs,\\ Scalar,RhsStorageOrder,ConjugateRhs,\\ ColMajor,1,UpLo,BuiltIn>)",
    "insertText": "run(size,depth,lhs,lhsStride,rhs,rhsStride,res,resIncr,resStride,alpha,blocking)"
  },
  {
    "label": "EIGEN_BLAS_RANKUPDATE_SPECIALIZE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } ;)",
    "insertText": "EIGEN_BLAS_RANKUPDATE_SPECIALIZE(double) EIGEN_BLAS_RANKUPDATE_SPECIALIZE(float) #define EIGEN_BLAS_RANKUPDATE_R(EIGTYPE, BLASTYPE, BLASFUNC)"
  },
  {
    "label": "IsLower()",
    "kind": "Method",
    "detail": "Function (\\ enum { \\)",
    "insertText": "IsLower(UpLo&Lower) == Lower, \\ LowUp = IsLower ? Lower : Upper, \\ conjA = ((AStorageOrder==ColMajor) && ConjugateA)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ EIGEN_STRONG_INLINE void)",
    "insertText": "run(Index size, Index depth,const EIGTYPE* lhs, Index lhsStride, \\ const EIGTYPE* , Index , EIGTYPE* res, Index resStride, EIGTYPE alpha, level3_blocking<EIGTYPE, EIGTYPE>&)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ BlasIndex lda = convert_index<)",
    "insertText": "BlasIndex(lhsStride), ldc=convert_index<BlasIndex>(resStride), n=convert_index<BlasIndex>(size), k=convert_index<BlasIndex>(depth)"
  },
  {
    "label": "uplo()",
    "kind": "Method",
    "detail": "Function (\\ char)",
    "insertText": "uplo((IsLower) ? 'L' : 'U'), trans=((AStorageOrder==RowMajor) ? 'T':'N')"
  },
  {
    "label": "beta()",
    "kind": "Method",
    "detail": "Function (\\ EIGTYPE)",
    "insertText": "beta(1)"
  },
  {
    "label": "BLASFUNC()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "BLASFUNC(&uplo, &trans, &n, &k, (const BLASTYPE*)&numext::real_ref(alpha), lhs, &lda, (const BLASTYPE*)&numext::real_ref(beta), res, &ldc)"
  },
  {
    "label": "EIGEN_BLAS_RANKUPDATE_C()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; # define)",
    "insertText": "EIGEN_BLAS_RANKUPDATE_C(EIGTYPE, BLASTYPE, RTYPE, BLASFUNC)"
  },
  {
    "label": "IsLower()",
    "kind": "Method",
    "detail": "Function (\\ enum { \\)",
    "insertText": "IsLower(UpLo&Lower) == Lower, \\ LowUp = IsLower ? Lower : Upper, \\ conjA = (((AStorageOrder==ColMajor) && ConjugateA) || ((AStorageOrder==RowMajor) && !ConjugateA))"
  },
  {
    "label": "uplo()",
    "kind": "Method",
    "detail": "Function (\\ char)",
    "insertText": "uplo((IsLower) ? 'L' : 'U'), trans=((AStorageOrder==RowMajor) ? 'C':'N')"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (\\ RTYPE alpha_,beta_ ; \\ const EIGTYPE* a_ptr ; \\ \\ alpha_ = alpha .)",
    "insertText": "real()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ beta_ = 1 . 0 ; \\ \\ MatrixType a ; \\)",
    "insertText": "if(conjA)"
  },
  {
    "label": "mapA()",
    "kind": "Method",
    "detail": "Function (\\ Map<const MatrixType,0,OuterStride<>>)",
    "insertText": "mapA(lhs,n,k,OuterStride<>(lhsStride))"
  },
  {
    "label": "conjugate()",
    "kind": "Method",
    "detail": "Function (\\ a = mapA .)",
    "insertText": "conjugate()"
  },
  {
    "label": "outerStride()",
    "kind": "Method",
    "detail": "Function (\\ lda = a .)",
    "insertText": "outerStride()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (\\ a_ptr = a .)",
    "insertText": "data()"
  },
  {
    "label": "BLASFUNC()",
    "kind": "Method",
    "detail": "Function (\\ } else a_ptr = lhs ; \\)",
    "insertText": "BLASFUNC(&uplo, &trans, &n, &k, &alpha_, (BLASTYPE*)a_ptr, &lda, &beta_, (BLASTYPE*)res, &ldc)"
  }
]