[
  {
    "label": "position",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "position"
  },
  {
    "label": "encoding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "encoding"
  },
  {
    "label": "XML_Convert_Result",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "XML_Convert_Result"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef XmlTok_INCLUDED # define XmlTok_INCLUDED 1 # ifdef __cplusplus \" C \" { # endif # define XML_TOK_TRAILING_RSQB \\ - 5 # define XML_TOK_NONE - 4 # define XML_TOK_TRAILING_CR \\ - 3 # define XML_TOK_PARTIAL_CHAR - 2 # define XML_TOK_PARTIAL - 1 # define XML_TOK_INVALID 0 # define XML_TOK_START_TAG_WITH_ATTS 1 # define XML_TOK_START_TAG_NO_ATTS 2 # define XML_TOK_EMPTY_ELEMENT_WITH_ATTS 3 # define XML_TOK_EMPTY_ELEMENT_NO_ATTS 4 # define XML_TOK_END_TAG 5 # define XML_TOK_DATA_CHARS 6 # define XML_TOK_DATA_NEWLINE 7 # define XML_TOK_CDATA_SECT_OPEN 8 # define XML_TOK_ENTITY_REF 9 # define XML_TOK_CHAR_REF 1 0 # define XML_TOK_PI 1 1 # define XML_TOK_XML_DECL 1 2 # define XML_TOK_COMMENT 1 3 # define XML_TOK_BOM 1 4 # define XML_TOK_PROLOG_S 1 5 # define XML_TOK_DECL_OPEN 1 6 # define XML_TOK_DECL_CLOSE 1 7 # define XML_TOK_NAME 1 8 # define XML_TOK_NMTOKEN 1 9 # define XML_TOK_POUND_NAME 2 0 # define XML_TOK_OR 2 1 # define XML_TOK_PERCENT 2 2 # define XML_TOK_OPEN_PAREN 2 3 # define XML_TOK_CLOSE_PAREN 2 4 # define XML_TOK_OPEN_BRACKET 2 5 # define XML_TOK_CLOSE_BRACKET 2 6 # define XML_TOK_LITERAL 2 7 # define XML_TOK_PARAM_ENTITY_REF 2 8 # define XML_TOK_INSTANCE_START 2 9 # define XML_TOK_NAME_QUESTION 3 0 # define XML_TOK_NAME_ASTERISK 3 1 # define XML_TOK_NAME_PLUS 3 2 # define XML_TOK_COND_SECT_OPEN 3 3 # define XML_TOK_COND_SECT_CLOSE 3 4 # define XML_TOK_CLOSE_PAREN_QUESTION 3 5 # define XML_TOK_CLOSE_PAREN_ASTERISK 3 6 # define XML_TOK_CLOSE_PAREN_PLUS 3 7 # define XML_TOK_COMMA 3 8 # define XML_TOK_ATTRIBUTE_VALUE_S 3 9 # define XML_TOK_CDATA_SECT_CLOSE 4 0 # define XML_TOK_PREFIXED_NAME 4 1 # ifdef XML_DTD # define XML_TOK_IGNORE_SECT 4 2 # endif # ifdef XML_DTD # define XML_N_STATES 4 # else # define XML_N_STATES 3 # endif # define XML_PROLOG_STATE 0 # define XML_CONTENT_STATE 1 # define XML_CDATA_SECTION_STATE 2 # ifdef XML_DTD # define XML_IGNORE_SECTION_STATE 3 # endif # define XML_N_LITERAL_TYPES 2 # define XML_ATTRIBUTE_VALUE_LITERAL 0 # define XML_ENTITY_VALUE_LITERAL 1 # define XML_UTF8_ENCODE_MAX 4 # define XML_UTF16_ENCODE_MAX 2 typedef struct position { XML_Size lineNumber ; XML_Size columnNumber ; } POSITION ; typedef struct { const char* name ; const char* valuePtr ; const char* valueEnd ; char normalized ; } ATTRIBUTE ; struct encoding ; typedef struct encoding ENCODING ; typedef)",
    "insertText": "int(PTRCALL *SCANNER)(const ENCODING *, const char *, const char *, const char **)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (enum XML_Convert_Result { XML_CONVERT_COMPLETED = 0,XML_CONVERT_INPUT_INCOMPLETE = 1,XML_CONVERT_OUTPUT_EXHAUSTED = 2 } ; struct encoding { SCANNER scanners [ XML_N_STATES ] ; SCANNER literalScanners [ XML_N_LITERAL_TYPES ] ;)",
    "insertText": "int(PTRCALL *nameMatchesAscii)(const ENCODING *, const char *, const char *, const char *)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(PTRFASTCALL *nameLength)(const ENCODING *, const char *)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "char(PTRFASTCALL *skipS)(const ENCODING *, const char *)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(PTRCALL *getAtts)(const ENCODING *enc, const char *ptr, int attsMax, ATTRIBUTE *atts)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(PTRFASTCALL *charRefNumber)(const ENCODING *enc, const char *ptr)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(PTRCALL *predefinedEntityName)(const ENCODING *, const char *, const char *)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(PTRCALL *updatePosition)(const ENCODING *, const char *ptr, const char *end, POSITION *)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(PTRCALL *isPublicId)(const ENCODING *enc, const char *ptr, const char *end, const char **badPtr)"
  },
  {
    "label": "XML_Convert_Result()",
    "kind": "Method",
    "detail": "Function (enum)",
    "insertText": "XML_Convert_Result(PTRCALL *utf8Convert)(const ENCODING *enc, const char **fromP, const char *fromLim, char **toP, const char *toLim)"
  },
  {
    "label": "XML_Convert_Result()",
    "kind": "Method",
    "detail": "Function (enum)",
    "insertText": "XML_Convert_Result(PTRCALL *utf16Convert)(const ENCODING *enc, const char **fromP, const char *fromLim, unsigned short **toP, const unsigned short *toLim)"
  },
  {
    "label": "XmlTok()",
    "kind": "Method",
    "detail": "Function (int minBytesPerChar ; char isUtf8 ; char isUtf16 ; } ; # define)",
    "insertText": "XmlTok(enc, state, ptr, end, nextTokPtr) \\ (((enc)->scanners[state])(enc, ptr, end, nextTokPtr)) #define XmlPrologTok(enc, ptr, end, nextTokPtr) \\ XmlTok(enc, XML_PROLOG_STATE, ptr, end, nextTokPtr) #define XmlContentTok(enc, ptr, end, nextTokPtr) \\ XmlTok(enc, XML_CONTENT_STATE, ptr, end, nextTokPtr) #define XmlCdataSectionTok(enc, ptr, end, nextTokPtr) \\ XmlTok(enc, XML_CDATA_SECTION_STATE, ptr, end, nextTokPtr) #ifdef XML_DTD # define XmlIgnoreSectionTok(enc, ptr, end, nextTokPtr) \\ XmlTok(enc, XML_IGNORE_SECTION_STATE, ptr, end, nextTokPtr) #endif #define XmlLiteralTok(enc, literalType, ptr, end, nextTokPtr) \\ (((enc)->literalScanners[literalType])(enc, ptr, end, nextTokPtr)) #define XmlAttributeValueTok(enc, ptr, end, nextTokPtr) \\ XmlLiteralTok(enc, XML_ATTRIBUTE_VALUE_LITERAL, ptr, end, nextTokPtr) #define XmlEntityValueTok(enc, ptr, end, nextTokPtr) \\ XmlLiteralTok(enc, XML_ENTITY_VALUE_LITERAL, ptr, end, nextTokPtr) #define XmlNameMatchesAscii(enc, ptr1, end1, ptr2) \\ (((enc)->nameMatchesAscii)(enc, ptr1, end1, ptr2)) #define XmlNameLength(enc, ptr) (((enc)->nameLength)(enc, ptr)) #define XmlSkipS(enc, ptr) (((enc)->skipS)(enc, ptr)) #define XmlGetAttributes(enc, ptr, attsMax, atts) \\ (((enc)->getAtts)(enc, ptr, attsMax, atts)) #define XmlCharRefNumber(enc, ptr) (((enc)->charRefNumber)(enc, ptr)) #define XmlPredefinedEntityName(enc, ptr, end) \\ (((enc)->predefinedEntityName)(enc, ptr, end)) #define XmlUpdatePosition(enc, ptr, end, pos) \\ (((enc)->updatePosition)(enc, ptr, end, pos)) #define XmlIsPublicId(enc, ptr, end, badPtr) \\ (((enc)->isPublicId)(enc, ptr, end, badPtr)) #define XmlUtf8Convert(enc, fromP, fromLim, toP, toLim) \\ (((enc)->utf8Convert)(enc, fromP, fromLim, toP, toLim)) #define XmlUtf16Convert(enc, fromP, fromLim, toP, toLim) \\ (((enc)->utf16Convert)(enc, fromP, fromLim, toP, toLim))"
  },
  {
    "label": "XmlParseXmlDecl()",
    "kind": "Method",
    "detail": "Function (ENCODING initEnc ; const ENCODING** encPtr ; } INIT_ENCODING ; int)",
    "insertText": "XmlParseXmlDecl(int isGeneralTextEntity, const ENCODING *enc, const char *ptr, const char *end, const char **badPtr, const char **versionPtr, const char **versionEndPtr, const char **encodingNamePtr, const ENCODING **namedEncodingPtr, int *standalonePtr)"
  },
  {
    "label": "XmlInitEncoding()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "XmlInitEncoding(INIT_ENCODING *, const ENCODING **, const char *name)"
  },
  {
    "label": "XmlGetUtf8InternalEncoding()",
    "kind": "Method",
    "detail": "Function (const ENCODING*)",
    "insertText": "XmlGetUtf8InternalEncoding(void)"
  },
  {
    "label": "XmlGetUtf16InternalEncoding()",
    "kind": "Method",
    "detail": "Function (const ENCODING*)",
    "insertText": "XmlGetUtf16InternalEncoding(void)"
  },
  {
    "label": "XmlUtf8Encode()",
    "kind": "Method",
    "detail": "Function (int FASTCALL)",
    "insertText": "XmlUtf8Encode(int charNumber, char *buf)"
  },
  {
    "label": "XmlUtf16Encode()",
    "kind": "Method",
    "detail": "Function (int FASTCALL)",
    "insertText": "XmlUtf16Encode(int charNumber, unsigned short *buf)"
  },
  {
    "label": "XmlSizeOfUnknownEncoding()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "XmlSizeOfUnknownEncoding(void)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(XMLCALL *CONVERTER)(void *userData, const char *p)"
  },
  {
    "label": "XmlInitUnknownEncoding()",
    "kind": "Method",
    "detail": "Function (ENCODING*)",
    "insertText": "XmlInitUnknownEncoding(void *mem, int *table, CONVERTER convert, void *userData)"
  },
  {
    "label": "XmlParseXmlDeclNS()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "XmlParseXmlDeclNS(int isGeneralTextEntity, const ENCODING *enc, const char *ptr, const char *end, const char **badPtr, const char **versionPtr, const char **versionEndPtr, const char **encodingNamePtr, const ENCODING **namedEncodingPtr, int *standalonePtr)"
  },
  {
    "label": "XmlInitEncodingNS()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "XmlInitEncodingNS(INIT_ENCODING *, const ENCODING **, const char *name)"
  },
  {
    "label": "XmlGetUtf8InternalEncodingNS()",
    "kind": "Method",
    "detail": "Function (const ENCODING*)",
    "insertText": "XmlGetUtf8InternalEncodingNS(void)"
  },
  {
    "label": "XmlGetUtf16InternalEncodingNS()",
    "kind": "Method",
    "detail": "Function (const ENCODING*)",
    "insertText": "XmlGetUtf16InternalEncodingNS(void)"
  },
  {
    "label": "XmlInitUnknownEncodingNS()",
    "kind": "Method",
    "detail": "Function (ENCODING*)",
    "insertText": "XmlInitUnknownEncodingNS(void *mem, int *table, CONVERTER convert, void *userData)"
  }
]