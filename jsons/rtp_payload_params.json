[
  {
    "label": "RtpPayloadParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPayloadParams"
  },
  {
    "label": "RtpPayloadParams()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_RTP_PAYLOAD_PARAMS_H_ # define CALL_RTP_PAYLOAD_PARAMS_H_ # include<array> # include<vector> # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / video_codecs / video_encoder . h \" # include \" call / rtp_config . h \" # include \" modules / rtp_rtcp / source / rtp_generic_frame_descriptor . h \" # include \" modules / rtp_rtcp / source / rtp_video_header . h \" # include \" modules / video_coding / chain_diff_calculator . h \" # include \" modules / video_coding / frame_dependencies_calculator . h \" # include \" modules / video_coding / include / video_codec_interface . h \" namespace webrtc { class RtpPayloadParams final { public :)",
    "insertText": "RtpPayloadParams(uint32_t ssrc, const RtpPayloadState* state, const FieldTrialsView& trials)"
  },
  {
    "label": "RtpPayloadParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPayloadParams(const RtpPayloadParams& other)"
  },
  {
    "label": "RtpPayloadParams()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtpPayloadParams()"
  },
  {
    "label": "GetRtpVideoHeader()",
    "kind": "Method",
    "detail": "Function (RTPVideoHeader)",
    "insertText": "GetRtpVideoHeader(const EncodedImage& image, const CodecSpecificInfo* codec_specific_info, int64_t shared_frame_id)"
  },
  {
    "label": "GenericStructure()",
    "kind": "Method",
    "detail": "Function (absl::optional<FrameDependencyStructure>)",
    "insertText": "GenericStructure(const CodecSpecificInfo* codec_specific_info)"
  },
  {
    "label": "ssrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "ssrc()"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (RtpPayloadState)",
    "insertText": "state()"
  },
  {
    "label": "SetCodecSpecific()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetCodecSpecific(RTPVideoHeader* rtp_video_header, bool first_frame_in_picture)"
  },
  {
    "label": "GenericDescriptorFromFrameInfo()",
    "kind": "Method",
    "detail": "Function (RTPVideoHeader::GenericDescriptorInfo)",
    "insertText": "GenericDescriptorFromFrameInfo(const GenericFrameInfo& frame_info, int64_t frame_id)"
  },
  {
    "label": "SetGeneric()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeneric(const CodecSpecificInfo* codec_specific_info, int64_t frame_id, bool is_keyframe, RTPVideoHeader* rtp_video_header)"
  },
  {
    "label": "Vp8ToGeneric()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Vp8ToGeneric(const CodecSpecificInfoVP8& vp8_info, int64_t shared_frame_id, bool is_keyframe, RTPVideoHeader* rtp_video_header)"
  },
  {
    "label": "Vp9ToGeneric()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Vp9ToGeneric(const CodecSpecificInfoVP9& vp9_info, int64_t shared_frame_id, RTPVideoHeader& rtp_video_header)"
  },
  {
    "label": "H264ToGeneric()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "H264ToGeneric(const CodecSpecificInfoH264& h264_info, int64_t shared_frame_id, bool is_keyframe, RTPVideoHeader* rtp_video_header)"
  },
  {
    "label": "GenericToGeneric()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericToGeneric(int64_t shared_frame_id, bool is_keyframe, RTPVideoHeader* rtp_video_header)"
  },
  {
    "label": "SetDependenciesVp8Deprecated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDependenciesVp8Deprecated(const CodecSpecificInfoVP8& vp8_info, int64_t shared_frame_id, bool is_keyframe, int spatial_index, int temporal_index, bool layer_sync, RTPVideoHeader::GenericDescriptorInfo* generic)"
  },
  {
    "label": "SetDependenciesVp8New()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDependenciesVp8New(const CodecSpecificInfoVP8& vp8_info, int64_t shared_frame_id, bool is_keyframe, bool layer_sync, RTPVideoHeader::GenericDescriptorInfo* generic)"
  }
]