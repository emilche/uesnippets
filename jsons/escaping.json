[
  {
    "label": "CalculateBase64EscapedLenInternal()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_ESCAPING_H_ # define ABSL_STRINGS_INTERNAL_ESCAPING_H_ # include<cassert> # include \" absl / strings / internal / resize_uninitialized . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace strings_internal { ABSL_CONST_INIT const char kBase64Chars [ ] ; size_t)",
    "insertText": "CalculateBase64EscapedLenInternal(size_t input_len, bool do_padding)"
  },
  {
    "label": "Base64EscapeInternal()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Base64EscapeInternal(const unsigned char* src, size_t szsrc, char* dest, size_t szdest, const char* base64, bool do_padding)"
  },
  {
    "label": "Base64EscapeInternal()",
    "kind": "Method",
    "detail": "Function (template<String> void)",
    "insertText": "Base64EscapeInternal(const unsigned char* src, size_t szsrc, String* dest, bool do_padding, const char* base64_chars)"
  },
  {
    "label": "CalculateBase64EscapedLenInternal()",
    "kind": "Method",
    "detail": "Function (const size_t calc_escaped_size =)",
    "insertText": "CalculateBase64EscapedLenInternal(szsrc, do_padding)"
  },
  {
    "label": "STLStringResizeUninitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STLStringResizeUninitialized(dest, calc_escaped_size)"
  },
  {
    "label": "Base64EscapeInternal()",
    "kind": "Method",
    "detail": "Function (const size_t escaped_len =)",
    "insertText": "Base64EscapeInternal(src, szsrc, &(*dest)[0], dest->size(), base64_chars, do_padding)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(calc_escaped_size == escaped_len)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (dest ->)",
    "insertText": "erase(escaped_len)"
  }
]