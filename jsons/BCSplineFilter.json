[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBCSplineFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBCSplineFilter"
  },
  {
    "label": "FBCSplineFilter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Vector2D . h \" # include \" MathUtil . h \" namespace UE { namespace Geometry { enum class EBCSplineType { BSpline,CatmullRom,MitchellNetravali } ; template<EBCSplineType SplineType,bool bIsRadial> class FBCSplineFilter { private : float InvRadius = 1 . 0 f ; float Coeff1 [ 3 ] = { 0 . 0 f,0 . 0 f,0 . 0 f } ; float Coeff2 [ 4 ] = { 0 . 0 f,0 . 0 f,0 . 0 f,0 . 0 f } ; public :)",
    "insertText": "FBCSplineFilter(const float RadiusIn)"
  },
  {
    "label": "GetWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetWeight(const FVector2d& Dist)"
  },
  {
    "label": "IsInFilterRegion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInFilterRegion(const FVector2d& Dist)"
  },
  {
    "label": "FBCSplineFilter()",
    "kind": "Method",
    "detail": "Function (} ; template<EBCSplineType SplineType,bool bIsRadial> FBCSplineFilter<SplineType,bIsRadial)",
    "insertText": "FBCSplineFilter(const float RadiusIn) : InvRadius(1.f/RadiusIn)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (auto ComputeCoeffs = [)",
    "insertText": "this(const float& B, const float& C)"
  },
  {
    "label": "Coeff1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Coeff1(12.0f - 9.0f * B - 6.0f * C)"
  },
  {
    "label": "Coeff1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Coeff1(-18.0f + 12.0f * B + 6.0f * C)"
  },
  {
    "label": "Coeff1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Coeff1(6.0f - 2.0f * B)"
  },
  {
    "label": "Coeff2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Coeff2(-B - 6.0f * C)"
  },
  {
    "label": "Coeff2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Coeff2(6.0f * B + 30.0f * C)"
  },
  {
    "label": "Coeff2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Coeff2(-12.0f * B - 48.0f * C)"
  },
  {
    "label": "Coeff2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Coeff2(8.0f * B + 24.0f * C)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} ; if)",
    "insertText": "constexpr(SplineType == EBCSplineType::BSpline)"
  },
  {
    "label": "ComputeCoeffs()",
    "kind": "Method",
    "detail": "Function (const float B = 1 . 0 f ; const float C = 0 . 0 f ;)",
    "insertText": "ComputeCoeffs(B, C)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(SplineType == EBCSplineType::CatmullRom)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(SplineType == EBCSplineType::MitchellNetravali)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "this(float X)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (const float AbsX =)",
    "insertText": "Abs(X * InvRadius)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const float AbsX2 = AbsX* AbsX ; const float AbsX3 = AbsX* AbsX2 ; float Weight = 0 . 0 f ;)",
    "insertText": "if(AbsX < 1.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Weight = Coeff1 [ 0 ]* AbsX3 + Coeff1 [ 1 ]* AbsX2 + Coeff1 [ 2 ] ; } else)",
    "insertText": "if(AbsX < 2.0f)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (Weight = Coeff2 [ 0 ]* AbsX3 + Coeff2 [ 1 ]* AbsX2 + Coeff2 [ 2 ]* AbsX + Coeff2 [ 3 ] ; } return Weight ; } ; if)",
    "insertText": "constexpr(bIsRadial)"
  },
  {
    "label": "ComputeWeight()",
    "kind": "Method",
    "detail": "Function (} else { const float WeightX =)",
    "insertText": "ComputeWeight((float)Dist.X)"
  },
  {
    "label": "ComputeWeight()",
    "kind": "Method",
    "detail": "Function (const float WeightY =)",
    "insertText": "ComputeWeight((float)Dist.Y)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(FMathf::Abs((float)Dist.X * InvRadius) < 2.0f) && (FMathf::Abs((float)Dist.Y * InvRadius) < 2.0f)"
  }
]