[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TPimplPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPimplPtr"
  },
  {
    "label": "TPimplHeapObjectImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPimplHeapObjectImpl"
  },
  {
    "label": "DeleterFunc()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / UnrealTemplate . h \" enum class EPimplPtrMode : uint8 { NoCopy,DeepCopy } ; template<T,EPimplPtrMode Mode = EPimplPtrMode::NoCopy> struct TPimplPtr ; namespace UE::Core::Private::PimplPtr { SIZE_T RequiredAlignment = 1 6 ; template<T> struct TPimplHeapObjectImpl ; template<T> void)",
    "insertText": "DeleterFunc(void* Ptr)"
  },
  {
    "label": "UE_ASSUME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_ASSUME(Ptr)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "delete(TPimplHeapObjectImpl<T>*)"
  },
  {
    "label": "CopyFunc()",
    "kind": "Method",
    "detail": "Function (} template<T> void*)",
    "insertText": "CopyFunc(void* A)"
  },
  {
    "label": "FHeapType()",
    "kind": "Method",
    "detail": "Function (using FHeapType = TPimplHeapObjectImpl<T> ; FHeapType* NewHeap = new)",
    "insertText": "FHeapType(A)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FCopyFunc =)",
    "insertText": "void(*)(void*)"
  },
  {
    "label": "TPimplHeapObjectImpl()",
    "kind": "Method",
    "detail": "Function (template<T> struct TPimplHeapObjectImpl { enum class ENoCopyType { ConstructType } ; enum class EDeepCopyType { ConstructType } ; template<. . . ArgTypes>)",
    "insertText": "TPimplHeapObjectImpl(ENoCopyType, ArgTypes&&... Args) : Val(Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "TPimplHeapObjectImpl()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgTypes>)",
    "insertText": "TPimplHeapObjectImpl(EDeepCopyType, ArgTypes&&... Args) : Copier(&CopyFunc<T>) , Val(Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "TPimplHeapObjectImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPimplHeapObjectImpl(void* InVal) : Copier(&CopyFunc<T>) , Val(*(T*)InVal)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} FDeleteFunc Deleter =& DeleterFunc<T> ; FCopyFunc Copier = nullptr ;)",
    "insertText": "alignas(RequiredAlignment)"
  },
  {
    "label": "CallDeleter()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "CallDeleter(void* Ptr)"
  },
  {
    "label": "ThunkedPtr()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "ThunkedPtr(char*)"
  },
  {
    "label": "CallCopier()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "CallCopier(void* Ptr)"
  },
  {
    "label": "BasePtr()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "BasePtr(char*)"
  },
  {
    "label": "ThunkedPtr()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "ThunkedPtr(char*)BasePtr + sizeof(FDeleteFunc)"
  },
  {
    "label": "MakePimpl()",
    "kind": "Method",
    "detail": "Function (} } template<T> struct TPimplPtr<T,EPimplPtrMode::NoCopy> { private : template<,EPimplPtrMode> struct TPimplPtr ; template<U,EPimplPtrMode M,. . . ArgTypes> TPimplPtr<U,M>)",
    "insertText": "MakePimpl(ArgTypes&&... Args)"
  },
  {
    "label": "TPimplPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TPimplPtr(UE::Core::Private::PimplPtr::TPimplHeapObjectImpl<T>* Impl) : Ptr(&Impl->Val)"
  },
  {
    "label": "TPimplPtr()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "TPimplPtr()"
  },
  {
    "label": "TPimplPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TPimplPtr(TYPE_OF_NULLPTR)"
  },
  {
    "label": "CallDeleter()",
    "kind": "Method",
    "detail": "Function (UE::Core::Private::)",
    "insertText": "CallDeleter(this->Ptr)"
  },
  {
    "label": "TPimplPtr()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TPimplPtr(const TPimplPtr&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TPimplPtr&)",
    "insertText": "operator(const TPimplPtr&)"
  },
  {
    "label": "TPimplPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TPimplPtr(TPimplPtr&& Other) : Ptr(Other.Ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Other . Ptr = nullptr ; } TPimplPtr&)",
    "insertText": "operator(TPimplPtr&& Other)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T* LocalPtr = this -> Ptr ; this -> Ptr = Other . Ptr ; Other . Ptr = nullptr ;)",
    "insertText": "if(LocalPtr)"
  },
  {
    "label": "CallDeleter()",
    "kind": "Method",
    "detail": "Function (UE::Core::Private::)",
    "insertText": "CallDeleter(LocalPtr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } return* this ; } TPimplPtr&)",
    "insertText": "operator(TYPE_OF_NULLPTR)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "TPimplPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TPimplPtr(const TPimplPtr& A)"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Ptr(T*)UE::Core::Private::PimplPtr::CallCopier(A.Ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } TPimplPtr&)",
    "insertText": "operator(const TPimplPtr& A)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(A.IsValid())"
  },
  {
    "label": "TPimplPtr()",
    "kind": "Method",
    "detail": "Function (} } return* this ; })",
    "insertText": "TPimplPtr(TPimplPtr&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TPimplPtr&)",
    "insertText": "operator(TPimplPtr&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TPimplPtr&)",
    "insertText": "operator(TYPE_OF_NULLPTR A)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(A)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,EPimplPtrMode Mode> bool)",
    "insertText": "operator(TYPE_OF_NULLPTR, const TPimplPtr<T, Mode>& Ptr)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using FHeapType = UE::Core::Private::PimplPtr::TPimplHeapObjectImpl<T> ; using FHeapConstructType = std::conditional<Mode = = EPimplPtrMode::NoCopy,FHeapType::ENoCopyType,FHeapType::EDeepCopyType>::type ;)",
    "insertText": "static_assert(Mode != EPimplPtrMode::DeepCopy || std::is_copy_constructible<T>::value, \"T must be a copyable type, to use with EPimplPtrMode::DeepCopy\")"
  }
]