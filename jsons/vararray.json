[
  {
    "label": "VarArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VarArray"
  },
  {
    "label": "VVarArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VVarArray"
  },
  {
    "label": "Op",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Op"
  },
  {
    "label": "VarArray()",
    "kind": "Method",
    "detail": "Function (class VarArray { public :)",
    "insertText": "VarArray()"
  },
  {
    "label": "VarArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VarArray(int max)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Reserve()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (numElems = 0 ; } int)",
    "insertText": "Count()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (elems [ j ] = elems [ i ] ; } void)",
    "insertText": "Remove(int i)"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Put(void *v)"
  },
  {
    "label": "SetCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCount(int i)"
  },
  {
    "label": "WillGrow()",
    "kind": "Method",
    "detail": "Function (numElems = i ; } int)",
    "insertText": "WillGrow(int interval)"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Replace(int i, void *newValue)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(int i, int j)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void* t = elems [ j ] ; elems [ j ] = elems [ i ] ; elems [ i ] = t ; } void)",
    "insertText": "Swap(int i, int j)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(i, j)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Swap(int i, int j, int count)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} private : class VVarArray ; void**)",
    "insertText": "New(const bool justAlloc = false)"
  },
  {
    "label": "VVarArray()",
    "kind": "Method",
    "detail": "Function (int maxElems ; int numElems ; void** elems ; } ; class VVarArray : public VarArray { public : enum Op { OpDiff,OpIntersect,OpMerge } ;)",
    "insertText": "VVarArray() : VarArray()"
  },
  {
    "label": "VVarArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VVarArray(int max ) : VarArray( max)"
  },
  {
    "label": "VVarArray()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "VVarArray()"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (} ; int)",
    "insertText": "Compare(const void *, const void *)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(void *)"
  },
  {
    "label": "Diff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Diff(Op op, VarArray &that)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort()"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(0, Count())"
  },
  {
    "label": "Uniq()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Uniq()"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Sort(int l, int u)"
  },
  {
    "label": "Med3()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Med3(int i, int j, int k)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Compare(int i, int j)"
  }
]