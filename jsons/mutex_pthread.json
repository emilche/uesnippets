[
  {
    "label": "RTC_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_LOCKABLE"
  },
  {
    "label": "OwnerRecord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OwnerRecord"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_SYNCHRONIZATION_MUTEX_PTHREAD_H_ # define RTC_BASE_SYNCHRONIZATION_MUTEX_PTHREAD_H_ # if)",
    "insertText": "defined(WEBRTC_POSIX) #include <pthread.h> #if defined(WEBRTC_MAC)"
  },
  {
    "label": "MutexImpl()",
    "kind": "Method",
    "detail": "Function (class RTC_LOCKABLE MutexImpl final { public :)",
    "insertText": "MutexImpl()"
  },
  {
    "label": "pthread_mutexattr_init()",
    "kind": "Method",
    "detail": "Function (pthread_mutexattr_t mutex_attribute ;)",
    "insertText": "pthread_mutexattr_init(&mutex_attribute)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_MAC) pthread_mutexattr_setpolicy_np(&mutex_attribute, _PTHREAD_MUTEX_POLICY_FIRSTFIT)"
  },
  {
    "label": "pthread_mutex_init()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "pthread_mutex_init(&mutex_, &mutex_attribute)"
  },
  {
    "label": "pthread_mutexattr_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_mutexattr_destroy(&mutex_attribute)"
  },
  {
    "label": "MutexImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MutexImpl(const MutexImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MutexImpl&)",
    "insertText": "operator(const MutexImpl&)"
  },
  {
    "label": "pthread_mutex_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_mutex_destroy(&mutex_)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Lock() RTC_EXCLUSIVE_LOCK_FUNCTION()"
  },
  {
    "label": "pthread_mutex_lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_mutex_lock(&mutex_)"
  },
  {
    "label": "SetOwner()",
    "kind": "Method",
    "detail": "Function (owner_ .)",
    "insertText": "SetOwner()"
  },
  {
    "label": "TryLock()",
    "kind": "Method",
    "detail": "Function (} ABSL_MUST_USE_RESULT bool)",
    "insertText": "TryLock() RTC_EXCLUSIVE_TRYLOCK_FUNCTION(true)"
  },
  {
    "label": "AssertOwned()",
    "kind": "Method",
    "detail": "Function (owner_ .)",
    "insertText": "AssertOwned()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Unlock() RTC_UNLOCK_FUNCTION()"
  },
  {
    "label": "ClearOwner()",
    "kind": "Method",
    "detail": "Function (owner_ .)",
    "insertText": "ClearOwner()"
  },
  {
    "label": "pthread_mutex_unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_mutex_unlock(&mutex_)"
  },
  {
    "label": "pthread_self()",
    "kind": "Method",
    "detail": "Function (latest_owner_ =)",
    "insertText": "pthread_self()"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(is_owned_)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(pthread_equal(latest_owner_, pthread_self()))"
  }
]