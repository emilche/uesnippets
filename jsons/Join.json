[
  {
    "label": "TJoinQuotedBy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TJoinQuotedBy"
  },
  {
    "label": "TJoinBy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TJoinBy"
  },
  {
    "label": "TJoinTupleQuotedBy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TJoinTupleQuotedBy"
  },
  {
    "label": "TJoinTupleBy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TJoinTupleBy"
  },
  {
    "label": "JoinQuotedBy()",
    "kind": "Method",
    "detail": "Function (Private::TJoinQuotedBy<RangeType, ProjectionType, DelimiterType, QuoteType>)",
    "insertText": "JoinQuotedBy(RangeType&& Range, ProjectionType Projection, DelimiterType&& Delimiter, QuoteType&& Quote)"
  },
  {
    "label": "JoinQuotedByTo()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ProjectionType,DelimiterType,QuoteType,CharType> TStringBuilderBase<CharType>&)",
    "insertText": "JoinQuotedByTo(RangeType&& Range, ProjectionType Projection, DelimiterType&& Delimiter, QuoteType&& Quote, TStringBuilderBase<CharType>& Builder)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bFirst = true ;)",
    "insertText": "for(auto&& Elem : Forward<RangeType>(Range))"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (bFirst = false ; } else { Builder<<Delimiter ; } Builder<<Quote<<)",
    "insertText": "Invoke(Projection, Elem)"
  },
  {
    "label": "JoinQuoted()",
    "kind": "Method",
    "detail": "Function (Private::TJoinQuotedBy<RangeType, FIdentityFunctor, DelimiterType, QuoteType>)",
    "insertText": "JoinQuoted(RangeType&& Range, DelimiterType&& Delimiter, QuoteType&& Quote)"
  },
  {
    "label": "JoinQuotedTo()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,DelimiterType,QuoteType,CharType> TStringBuilderBase<CharType>&)",
    "insertText": "JoinQuotedTo(RangeType&& Range, DelimiterType&& Delimiter, QuoteType&& Quote, TStringBuilderBase<CharType>& Builder)"
  },
  {
    "label": "JoinBy()",
    "kind": "Method",
    "detail": "Function (Private::TJoinBy<RangeType, ProjectionType, DelimiterType>)",
    "insertText": "JoinBy(RangeType&& Range, ProjectionType Projection, DelimiterType&& Delimiter)"
  },
  {
    "label": "JoinByTo()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ProjectionType,DelimiterType,CharType> TStringBuilderBase<CharType>&)",
    "insertText": "JoinByTo(RangeType&& Range, ProjectionType Projection, DelimiterType&& Delimiter, TStringBuilderBase<CharType>& Builder)"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (Private::TJoinBy<RangeType, FIdentityFunctor, DelimiterType>)",
    "insertText": "Join(RangeType&& Range, DelimiterType&& Delimiter)"
  },
  {
    "label": "JoinTo()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,DelimiterType,CharType> TStringBuilderBase<CharType>&)",
    "insertText": "JoinTo(RangeType&& Range, DelimiterType&& Delimiter, TStringBuilderBase<CharType>& Builder)"
  },
  {
    "label": "JoinTupleQuotedBy()",
    "kind": "Method",
    "detail": "Function (Private::TJoinTupleQuotedBy<TupleType, ProjectionType, DelimiterType, QuoteType>)",
    "insertText": "JoinTupleQuotedBy(TupleType&& Tuple, ProjectionType Projection, DelimiterType&& Delimiter, QuoteType&& Quote)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<TupleType,ProjectionType,DelimiterType,QuoteType,CharType)",
    "insertText": "UE_REQUIRES(TIsTuple_V<std::decay_t<TupleType>>)> inline TStringBuilderBase<CharType>& JoinTupleQuotedByTo( TupleType&& Tuple, ProjectionType Projection, DelimiterType&& Delimiter, QuoteType&& Quote, TStringBuilderBase<CharType>& Builder)"
  },
  {
    "label": "VisitTupleElements()",
    "kind": "Method",
    "detail": "Function (bool bFirst = true ;)",
    "insertText": "VisitTupleElements([&bFirst, &Projection, &Delimiter, &Quote, &Builder](auto&& Elem) { if (bFirst) { bFirst = false; } else { Builder << Delimiter; } Builder << Quote << Invoke(Projection, Elem) << Quote; }, Tuple)"
  },
  {
    "label": "JoinTupleQuotedTo()",
    "kind": "Method",
    "detail": "Function (} template<TupleType,DelimiterType,QuoteType,CharType> TStringBuilderBase<CharType>&)",
    "insertText": "JoinTupleQuotedTo(TupleType&& Tuple, DelimiterType&& Delimiter, QuoteType&& Quote, TStringBuilderBase<CharType>& Builder)"
  },
  {
    "label": "JoinTupleBy()",
    "kind": "Method",
    "detail": "Function (Private::TJoinTupleBy<TupleType, ProjectionType, DelimiterType>)",
    "insertText": "JoinTupleBy(TupleType&& Tuple, ProjectionType Projection, DelimiterType&& Delimiter)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<TupleType,ProjectionType,DelimiterType,CharType)",
    "insertText": "UE_REQUIRES(TIsTuple_V<std::decay_t<TupleType>>)> inline TStringBuilderBase<CharType>& JoinTupleByTo( TupleType&& Tuple, ProjectionType Projection, DelimiterType&& Delimiter, TStringBuilderBase<CharType>& Builder)"
  },
  {
    "label": "VisitTupleElements()",
    "kind": "Method",
    "detail": "Function (bool bFirst = true ;)",
    "insertText": "VisitTupleElements([&bFirst, &Projection, &Delimiter, &Builder](auto&& Elem) { if (bFirst) { bFirst = false; } else { Builder << Delimiter; } Builder << Invoke(Projection, Elem); }, Tuple)"
  },
  {
    "label": "JoinTupleTo()",
    "kind": "Method",
    "detail": "Function (} template<TupleType,DelimiterType,CharType> TStringBuilderBase<CharType>&)",
    "insertText": "JoinTupleTo(TupleType&& Tuple, DelimiterType&& Delimiter, TStringBuilderBase<CharType>& Builder)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } namespace UE::String::Private { template<RangeType,ProjectionType,DelimiterType,QuoteType,CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, Private::TJoinQuotedBy<RangeType, ProjectionType, DelimiterType, QuoteType>&& Adapter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ProjectionType,DelimiterType,CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, Private::TJoinBy<RangeType, ProjectionType, DelimiterType>&& Adapter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<TupleType,ProjectionType,DelimiterType,QuoteType,CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, Private::TJoinTupleQuotedBy<TupleType, ProjectionType, DelimiterType, QuoteType>&& Adapter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<TupleType,ProjectionType,DelimiterType,CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, Private::TJoinTupleBy<TupleType, ProjectionType, DelimiterType>&& Adapter)"
  }
]