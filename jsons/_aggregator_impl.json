[
  {
    "label": "aggregated_operation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "aggregated_operation"
  },
  {
    "label": "aggregator_generic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "aggregator_generic"
  },
  {
    "label": "aggregator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "aggregator"
  },
  {
    "label": "aggregating_functor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "aggregating_functor"
  },
  {
    "label": "aggregated_operation()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB__aggregator_impl_H # define __TBB__aggregator_impl_H # include \" . . / atomic . h \" # if ! __TBBMALLOC_BUILD # include \" . . / tbb_profiling . h \" # endif namespace tbb { namespace interface6 { namespace internal { using namespace tbb::internal ; template<Derived> class aggregated_operation { public : uintptr_t status ; Derived* next ;)",
    "insertText": "aggregated_operation() : status(0), next(NULL)"
  },
  {
    "label": "aggregator_generic()",
    "kind": "Method",
    "detail": "Function (} } ; template<operation_type> class aggregator_generic { public :)",
    "insertText": "aggregator_generic() : handler_busy(false)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (pending_operations = NULL ; } template<handler_type> void)",
    "insertText": "execute(operation_type *op, handler_type &handle_operations, bool long_life_time = true)"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (operation_type* res ; const uintptr_t status = op -> status ;)",
    "insertText": "call_itt_notify(releasing, &(op->status))"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_itt_notify(acquired, &pending_operations)"
  },
  {
    "label": "start_handle_operations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "start_handle_operations(handle_operations)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!status)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(long_life_time, \"Waiting for an operation object that might be destroyed during processing.\")"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_itt_notify(prepare, &(op->status))"
  },
  {
    "label": "spin_wait_while_eq()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spin_wait_while_eq(op->status, uintptr_t(0))"
  },
  {
    "label": "itt_load_word_with_acquire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_load_word_with_acquire(op->status)"
  },
  {
    "label": "start_handle_operations()",
    "kind": "Method",
    "detail": "Function (} } private : atomic<operation_type*> pending_operations ; uintptr_t handler_busy ; template<handler_type> void)",
    "insertText": "start_handle_operations(handler_type &handle_operations)"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (operation_type* op_list ;)",
    "insertText": "call_itt_notify(prepare, &handler_busy)"
  },
  {
    "label": "spin_wait_until_eq()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spin_wait_until_eq(handler_busy, uintptr_t(0))"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_itt_notify(acquired, &handler_busy)"
  },
  {
    "label": "__TBB_store_with_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_store_with_release(handler_busy, uintptr_t(1))"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_itt_notify(releasing, &pending_operations)"
  },
  {
    "label": "fetch_and_store()",
    "kind": "Method",
    "detail": "Function (op_list = pending_operations .)",
    "insertText": "fetch_and_store(NULL)"
  },
  {
    "label": "handle_operations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "handle_operations(op_list)"
  },
  {
    "label": "itt_store_word_with_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_store_word_with_release(handler_busy, uintptr_t(0))"
  },
  {
    "label": "aggregator()",
    "kind": "Method",
    "detail": "Function (} } ; template<handler_type,operation_type> class aggregator : public aggregator_generic<operation_type> { handler_type handle_operations ; public :)",
    "insertText": "aggregator()"
  },
  {
    "label": "aggregator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "aggregator(handler_type h) : handle_operations(h)"
  },
  {
    "label": "initialize_handler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "initialize_handler(handler_type h)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (handle_operations = h ; } void)",
    "insertText": "execute(operation_type *op)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (aggregator_generic<operation_type)",
    "insertText": "execute(op, handle_operations)"
  },
  {
    "label": "aggregating_functor()",
    "kind": "Method",
    "detail": "Function (} } ; template<aggregating_class,operation_list> class aggregating_functor { aggregating_class* fi ; public :)",
    "insertText": "aggregating_functor()"
  },
  {
    "label": "aggregating_functor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "aggregating_functor(aggregating_class *fi_) : fi(fi_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(operation_list* op_list)"
  }
]