[
  {
    "label": "line2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "line2"
  },
  {
    "label": "line3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "line3"
  },
  {
    "label": "line4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "line4"
  },
  {
    "label": "processed_line2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "processed_line2"
  },
  {
    "label": "processed_line3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "processed_line3"
  },
  {
    "label": "processed_line4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "processed_line4"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ASTC_MATHLIB_H_INCLUDED # define ASTC_MATHLIB_H_INCLUDED # include<cassert> # include<cstdint> # include<cmath> # ifndef ASTCENC_POPCNT # if)",
    "insertText": "defined(__POPCNT__) #define ASTCENC_POPCNT 1 #else #define ASTCENC_POPCNT 0 #endif #endif #ifndef ASTCENC_F16C #if defined(__F16C__) #define ASTCENC_F16C 1 #else #define ASTCENC_F16C 0 #endif #endif #ifndef ASTCENC_SSE #if defined(__SSE4_2__) #define ASTCENC_SSE 42 #elif defined(__SSE4_1__) #define ASTCENC_SSE 41 #elif defined(__SSE3__) #define ASTCENC_SSE 30 #elif defined(__SSE2__) #define ASTCENC_SSE 20 #else #define ASTCENC_SSE 0 #endif #endif #ifndef ASTCENC_AVX #if defined(__AVX2__) #define ASTCENC_AVX 2 #elif defined(__AVX__) #define ASTCENC_AVX 1 #else #define ASTCENC_AVX 0 #endif #endif #ifndef ASTCENC_NEON #if defined(__aarch64__)"
  },
  {
    "label": "fabs()",
    "kind": "Method",
    "detail": "Function (uint32_t u ; int32_t s ; float f ; } if32 ; namespace astc { const float PI = 3 . 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 f ; const float PI_OVER_TWO = 1 . 5 7 0 7 9 6 3 2 6 7 9 4 8 9 6 6 1 9 2 3 f ; float)",
    "insertText": "fabs(float v)"
  },
  {
    "label": "isnan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isnan(float v)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "min(T p, T q, T r, T s)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "max(T p, T q)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "max(T p, T q, T r, T s)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "clamp(T v, T mn, T mx)"
  },
  {
    "label": "clamp255f()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "clamp255f(float v)"
  },
  {
    "label": "flt_rd()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "flt_rd(float v)"
  },
  {
    "label": "flt2int_rtn()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "flt2int_rtn(float v)"
  },
  {
    "label": "flt2int_rd()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "flt2int_rd(float v)"
  },
  {
    "label": "float_as_int()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "float_as_int(float v)"
  },
  {
    "label": "int_as_float()",
    "kind": "Method",
    "detail": "Function (union { int a ; float b ; } u ; u . b = v ; return u . a ; } float)",
    "insertText": "int_as_float(int v)"
  },
  {
    "label": "rsqrt()",
    "kind": "Method",
    "detail": "Function (union { int a ; float b ; } u ; u . a = v ; return u . b ; } float)",
    "insertText": "rsqrt(float v)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "sqrt(float v)"
  },
  {
    "label": "frexp()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "frexp(float v, int* expo)"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (p .)",
    "insertText": "u(p.u & 0x807fffff)"
  },
  {
    "label": "rand()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "rand(uint64_t state[2])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "if(ASTCENC_F16C == 0) && (ASTCENC_NEON == 0) uint16_t float_to_sf16(float val)"
  },
  {
    "label": "sf16_to_float()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "sf16_to_float(uint16_t val)"
  }
]