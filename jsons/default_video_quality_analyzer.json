[
  {
    "label": "DefaultVideoQualityAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultVideoQualityAnalyzer"
  },
  {
    "label": "State",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "State"
  },
  {
    "label": "DefaultVideoQualityAnalyzer()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_H_ # define TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_H_ # include<atomic> # include<cstdint> # include<deque> # include<map> # include<memory> # include<set> # include<string> # include<vector> # include \" api / array_view . h \" # include \" api / test / metrics / metrics_logger . h \" # include \" api / test / video_quality_analyzer_interface . h \" # include \" api / units / data_size . h \" # include \" api / units / timestamp . h \" # include \" api / video / encoded_image . h \" # include \" api / video / video_frame . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" # include \" test / pc / e2e / analyzer / video / default_video_quality_analyzer_cpu_measurer . h \" # include \" test / pc / e2e / analyzer / video / default_video_quality_analyzer_frame_in_flight . h \" # include \" test / pc / e2e / analyzer / video / default_video_quality_analyzer_frames_comparator . h \" # include \" test / pc / e2e / analyzer / video / default_video_quality_analyzer_internal_shared_objects . h \" # include \" test / pc / e2e / analyzer / video / default_video_quality_analyzer_shared_objects . h \" # include \" test / pc / e2e / analyzer / video / default_video_quality_analyzer_stream_state . h \" # include \" test / pc / e2e / analyzer / video / names_collection . h \" namespace webrtc { class DefaultVideoQualityAnalyzer : public VideoQualityAnalyzerInterface { public :)",
    "insertText": "DefaultVideoQualityAnalyzer(webrtc::Clock* clock, test::MetricsLogger* metrics_logger, DefaultVideoQualityAnalyzerOptions options = {})"
  },
  {
    "label": "DefaultVideoQualityAnalyzer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DefaultVideoQualityAnalyzer()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(std::string test_case_name, rtc::ArrayView<const std::string> peer_names, int max_threads_count)"
  },
  {
    "label": "OnFrameCaptured()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "OnFrameCaptured(absl::string_view peer_name, const std::string& stream_label, const VideoFrame& frame)"
  },
  {
    "label": "OnFramePreEncode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFramePreEncode(absl::string_view peer_name, const VideoFrame& frame)"
  },
  {
    "label": "OnFrameEncoded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameEncoded(absl::string_view peer_name, uint16_t frame_id, const EncodedImage& encoded_image, const EncoderStats& stats, bool discarded)"
  },
  {
    "label": "OnFrameDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameDropped(absl::string_view peer_name, EncodedImageCallback::DropReason reason)"
  },
  {
    "label": "OnFramePreDecode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFramePreDecode(absl::string_view peer_name, uint16_t frame_id, const EncodedImage& input_image)"
  },
  {
    "label": "OnFrameDecoded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameDecoded(absl::string_view peer_name, const VideoFrame& frame, const DecoderStats& stats)"
  },
  {
    "label": "OnFrameRendered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameRendered(absl::string_view peer_name, const VideoFrame& frame)"
  },
  {
    "label": "OnEncoderError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncoderError(absl::string_view peer_name, const VideoFrame& frame, int32_t error_code)"
  },
  {
    "label": "OnDecoderError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDecoderError(absl::string_view peer_name, uint16_t frame_id, int32_t error_code, const DecoderStats& stats)"
  },
  {
    "label": "RegisterParticipantInCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterParticipantInCall(absl::string_view peer_name)"
  },
  {
    "label": "UnregisterParticipantInCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterParticipantInCall(absl::string_view peer_name)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "GetStreamLabel()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetStreamLabel(uint16_t frame_id)"
  },
  {
    "label": "OnStatsReports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStatsReports(absl::string_view pc_label, const rtc::scoped_refptr<const RTCStatsReport>& report)"
  },
  {
    "label": "GetKnownVideoStreams()",
    "kind": "Method",
    "detail": "Function (} std::set<StatsKey>)",
    "insertText": "GetKnownVideoStreams()"
  },
  {
    "label": "GetKnownStreams()",
    "kind": "Method",
    "detail": "Function (VideoStreamsInfo)",
    "insertText": "GetKnownStreams()"
  },
  {
    "label": "GetGlobalCounters()",
    "kind": "Method",
    "detail": "Function (FrameCounters)",
    "insertText": "GetGlobalCounters()"
  },
  {
    "label": "GetUnknownSenderFrameCounters()",
    "kind": "Method",
    "detail": "Function (std::map<std::string,FrameCounters>)",
    "insertText": "GetUnknownSenderFrameCounters()"
  },
  {
    "label": "GetPerStreamCounters()",
    "kind": "Method",
    "detail": "Function (std::map<StatsKey,FrameCounters>)",
    "insertText": "GetPerStreamCounters()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (std::map<StatsKey,StreamStats>)",
    "insertText": "GetStats()"
  },
  {
    "label": "GetAnalyzerStats()",
    "kind": "Method",
    "detail": "Function (AnalyzerStats)",
    "insertText": "GetAnalyzerStats()"
  },
  {
    "label": "GetStreamFrames()",
    "kind": "Method",
    "detail": "Function (std::map<std::string,std::vector<uint16_t>>)",
    "insertText": "GetStreamFrames()"
  },
  {
    "label": "GetNextFrameId()",
    "kind": "Method",
    "detail": "Function (private : enum State { kNew,kActive,kStopped } ; uint16_t)",
    "insertText": "GetNextFrameId() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "AddExistingFramesInFlightForStreamToComparator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExistingFramesInFlightForStreamToComparator(size_t stream_index, StreamState& stream_state, size_t peer_index) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "ReportResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportResults()"
  },
  {
    "label": "ReportResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportResults(const InternalStatsKey& key, const StreamStats& stats, const FrameCounters& frame_counters) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "GetTestCaseName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetTestCaseName(const std::string& stream_label)"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "Now()"
  },
  {
    "label": "ToStatsKey()",
    "kind": "Method",
    "detail": "Function (StatsKey)",
    "insertText": "ToStatsKey(const InternalStatsKey& key) const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "ToMetricName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToMetricName(const InternalStatsKey& key) const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const uint16_t kStartingFrameId = 1 ; const DefaultVideoQualityAnalyzerOptions options_ ; webrtc::Clock* const clock_ ; test::MetricsLogger* const metrics_logger_ ; std::string test_label_ ; Mutex mutex_ ; uint16_t next_frame_id_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Timestamp start_time_)",
    "insertText": "RTC_GUARDED_BY(mutex_) = Timestamp::MinusInfinity()"
  }
]