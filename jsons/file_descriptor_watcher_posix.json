[
  {
    "label": "SingleThreadTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SingleThreadTaskRunner"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Controller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Controller"
  },
  {
    "label": "FileDescriptorWatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileDescriptorWatcher"
  },
  {
    "label": "Watcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Watcher"
  },
  {
    "label": "Controller()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FILES_FILE_DESCRIPTOR_WATCHER_POSIX_H_ # define BASE_FILES_FILE_DESCRIPTOR_WATCHER_POSIX_H_ # include<memory> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / dcheck_is_on . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / weak_ptr . h \" # include \" base / message_loop / message_pump_for_io . h \" # include \" base / sequence_checker . h \" # include \" base / synchronization / waitable_event . h \" # include \" base / task / single_thread_task_runner . h \" namespace base { class SingleThreadTaskRunner ; class BASE_EXPORT FileDescriptorWatcher { public : class Controller { public :)",
    "insertText": "Controller(const Controller&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Controller&)",
    "insertText": "operator(const Controller&)"
  },
  {
    "label": "Controller()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Controller()"
  },
  {
    "label": "Controller()",
    "kind": "Method",
    "detail": "Function (private : class FileDescriptorWatcher ; class Watcher ;)",
    "insertText": "Controller(MessagePumpForIO::Mode mode, int fd, const RepeatingClosure& callback)"
  },
  {
    "label": "StartWatching()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartWatching()"
  },
  {
    "label": "RunCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunCallback()"
  },
  {
    "label": "SEQUENCE_CHECKER()",
    "kind": "Method",
    "detail": "Function (RepeatingClosure callback_ ; const scoped_refptr<SingleThreadTaskRunner> io_thread_task_runner_ ; raw_ptr<Watcher,DanglingUntriagedDegradeToNoOpWhenMTE> watcher_ ; base::WaitableEvent on_watcher_destroyed_ ;)",
    "insertText": "SEQUENCE_CHECKER(sequence_checker_)"
  },
  {
    "label": "FileDescriptorWatcher()",
    "kind": "Method",
    "detail": "Function (WeakPtrFactory<Controller> weak_factory_ { this } ; } ;)",
    "insertText": "FileDescriptorWatcher(scoped_refptr<SingleThreadTaskRunner> io_thread_task_runner)"
  },
  {
    "label": "FileDescriptorWatcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileDescriptorWatcher(const FileDescriptorWatcher&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FileDescriptorWatcher&)",
    "insertText": "operator(const FileDescriptorWatcher&)"
  },
  {
    "label": "FileDescriptorWatcher()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FileDescriptorWatcher()"
  },
  {
    "label": "WatchReadable()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Controller>)",
    "insertText": "WatchReadable(int fd, const RepeatingClosure& callback)"
  },
  {
    "label": "WatchWritable()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Controller>)",
    "insertText": "WatchWritable(int fd, const RepeatingClosure& callback)"
  },
  {
    "label": "AssertAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertAllowed() #if DCHECK_IS_ON()"
  },
  {
    "label": "io_thread_task_runner()",
    "kind": "Method",
    "detail": "Function (# else { } # endif private : scoped_refptr<SingleThreadTaskRunner>)",
    "insertText": "io_thread_task_runner()"
  }
]