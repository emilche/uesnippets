[
  {
    "label": "TempOutFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TempOutFile"
  },
  {
    "label": "VideoSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoSource"
  },
  {
    "label": "DummyVideoSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DummyVideoSource"
  },
  {
    "label": "RandomVideoSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RandomVideoSource"
  },
  {
    "label": "CompressedVideoSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompressedVideoSource"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_TEST_VIDEO_SOURCE_H_ # define VPX_TEST_VIDEO_SOURCE_H_ # if)",
    "insertText": "defined(_WIN32) #undef NOMINMAX #define NOMINMAX #ifndef WIN32_LEAN_AND_MEAN #define WIN32_LEAN_AND_MEAN #endif #include <windows.h> #endif #include <cstdio> #include <cstdlib> #include <cstring> #include <memory> #include <string> #include \"test/acm_random.h\" #if !defined(_WIN32)"
  },
  {
    "label": "TO_STRING()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TO_STRING(S) #S #define STRINGIFY(S) TO_STRING(S) static std::string GetDataPath()"
  },
  {
    "label": "getenv()",
    "kind": "Method",
    "detail": "Function (const char* const data_path =)",
    "insertText": "getenv(\"LIBVPX_TEST_DATA_PATH\")"
  },
  {
    "label": "STRINGIFY()",
    "kind": "Method",
    "detail": "Function (# ifdef LIBVPX_TEST_DATA_PATH return)",
    "insertText": "STRINGIFY(LIBVPX_TEST_DATA_PATH)"
  },
  {
    "label": "OpenTestDataFile()",
    "kind": "Method",
    "detail": "Function (# else return \" . \" ; # endif } return data_path ; } # undef TO_STRING # undef STRINGIFY FILE*)",
    "insertText": "OpenTestDataFile(const std::string &file_name)"
  },
  {
    "label": "GetDataPath()",
    "kind": "Method",
    "detail": "Function (const std::string path_to_source =)",
    "insertText": "GetDataPath()"
  },
  {
    "label": "GetTempOutFile()",
    "kind": "Method",
    "detail": "Function (} FILE*)",
    "insertText": "GetTempOutFile(std::string *file_name)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (file_name ->)",
    "insertText": "clear()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_WIN32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (char tmppath [ MAX_PATH ] ;)",
    "insertText": "if(GetTempPathA(MAX_PATH, tmppath))"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (file_name ->)",
    "insertText": "assign(fname)"
  },
  {
    "label": "TempDir()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; # else std::string temp_dir =)",
    "insertText": "TempDir()"
  },
  {
    "label": "temp_file_name()",
    "kind": "Method",
    "detail": "Function (const char name_template [ ] = \" libvpxtest . XXXXXX \" ; std::unique_ptr<char [ ]>)",
    "insertText": "temp_file_name(new char[temp_dir.size() + sizeof(name_template)])"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(temp_file_name.get(), temp_dir.data(), temp_dir.size())"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(temp_file_name.get() + temp_dir.size(), name_template, sizeof(name_template))"
  },
  {
    "label": "mkstemp()",
    "kind": "Method",
    "detail": "Function (const int fd =)",
    "insertText": "mkstemp(temp_file_name.get())"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (* file_name = temp_file_name .)",
    "insertText": "get()"
  },
  {
    "label": "TempOutFile()",
    "kind": "Method",
    "detail": "Function (# endif } class TempOutFile { public :)",
    "insertText": "TempOutFile()"
  },
  {
    "label": "GetTempOutFile()",
    "kind": "Method",
    "detail": "Function (file_ =)",
    "insertText": "GetTempOutFile(&file_name_)"
  },
  {
    "label": "CloseFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseFile()"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(0, remove(file_name_.c_str()))"
  },
  {
    "label": "file()",
    "kind": "Method",
    "detail": "Function (} } FILE*)",
    "insertText": "file()"
  },
  {
    "label": "fclose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fclose(file_)"
  },
  {
    "label": "VideoSource()",
    "kind": "Method",
    "detail": "Function (file_ = nullptr ; } } FILE* file_ ; std::string file_name_ ; } ; class VideoSource { public : ~)",
    "insertText": "VideoSource()"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Begin()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Next()"
  },
  {
    "label": "img()",
    "kind": "Method",
    "detail": "Function (vpx_image_t*)",
    "insertText": "img()"
  },
  {
    "label": "pts()",
    "kind": "Method",
    "detail": "Function (vpx_codec_pts_t)",
    "insertText": "pts()"
  },
  {
    "label": "duration()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "duration()"
  },
  {
    "label": "timebase()",
    "kind": "Method",
    "detail": "Function (vpx_rational_t)",
    "insertText": "timebase()"
  },
  {
    "label": "frame()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "frame()"
  },
  {
    "label": "limit()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "limit()"
  },
  {
    "label": "DummyVideoSource()",
    "kind": "Method",
    "detail": "Function (} ; class DummyVideoSource : public VideoSource { public :)",
    "insertText": "DummyVideoSource() : img_(nullptr), limit_(100), width_(80), height_(64), format_(VPX_IMG_FMT_I420)"
  },
  {
    "label": "ReallocImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReallocImage()"
  },
  {
    "label": "DummyVideoSource()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DummyVideoSource()"
  },
  {
    "label": "vpx_img_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_img_free(img_)"
  },
  {
    "label": "FillFrame()",
    "kind": "Method",
    "detail": "Function (frame_ = 0 ;)",
    "insertText": "FillFrame()"
  },
  {
    "label": "SetSize()",
    "kind": "Method",
    "detail": "Function (limit_ = limit ; } void)",
    "insertText": "SetSize(unsigned int width, unsigned int height)"
  },
  {
    "label": "SetImageFormat()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetImageFormat(vpx_img_fmt_t format)"
  },
  {
    "label": "vpx_img_alloc()",
    "kind": "Method",
    "detail": "Function (img_ =)",
    "insertText": "vpx_img_alloc(nullptr, format_, width_, height_, 32)"
  },
  {
    "label": "ASSERT_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_NE(img_, nullptr)"
  },
  {
    "label": "raw_sz_()",
    "kind": "Method",
    "detail": "Function (h * img_->bps / 8)",
    "insertText": "raw_sz_((img_->w + 31) & ~31u)"
  },
  {
    "label": "RandomVideoSource()",
    "kind": "Method",
    "detail": "Function (} vpx_image_t* img_ ; size_t raw_sz_ ; unsigned int limit_ ; unsigned int frame_ ; unsigned int width_ ; unsigned int height_ ; vpx_img_fmt_t format_ ; } ; class RandomVideoSource : public DummyVideoSource { public :)",
    "insertText": "RandomVideoSource(int seed = ACMRandom::DeterministicSeed()) : rnd_(seed), seed_(seed)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (frame_ = 0 ; rnd_ .)",
    "insertText": "Reset(seed_)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "memset(img_->img_data, 0, raw_sz_)"
  },
  {
    "label": "CompressedVideoSource()",
    "kind": "Method",
    "detail": "Function (} } } ACMRandom rnd_ ; int seed_ ; } ; class CompressedVideoSource { public : ~)",
    "insertText": "CompressedVideoSource()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init()"
  },
  {
    "label": "cxdata()",
    "kind": "Method",
    "detail": "Function (const uint8_t*)",
    "insertText": "cxdata()"
  },
  {
    "label": "frame_size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "frame_size()"
  },
  {
    "label": "frame_number()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "frame_number()"
  }
]