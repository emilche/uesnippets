[
  {
    "label": "FTapDelayPitchShifter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTapDelayPitchShifter"
  },
  {
    "label": "FTapDelayPitchShifter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Dsp . h \" # include \" DSP / Delay . h \" namespace Audio { class FTapDelayPitchShifter { public : float MinDelayLength = 1 0 . 0 f ; float MaxDelayLength = 1 0 0 . 0 f ; float MaxAbsPitchShiftInOctaves = 6 . 0 f ;)",
    "insertText": "FTapDelayPitchShifter()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const float InSampleRate, const float InPitchShift, const float InDelayLength)"
  },
  {
    "label": "SetDelayLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDelayLength(const float InDelayLength)"
  },
  {
    "label": "SetPitchShift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPitchShift(const float InPitchScaleSemitones)"
  },
  {
    "label": "SetPitchShiftRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPitchShiftRatio(const float InPitchShiftRatio)"
  },
  {
    "label": "ReadDopplerShiftedTapFromDelay()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ReadDopplerShiftedTapFromDelay(const Audio::FDelay& InDelayBuffer, const float ReadOffsetMilliseconds = 0.0f)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(Audio::FDelay& InDelayBuffer, const float* InAudioBuffer, const int32 InNumFrames, float* OutAudioBuffer)"
  },
  {
    "label": "UpdatePhasorPhaseIncrement()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdatePhasorPhaseIncrement()"
  }
]