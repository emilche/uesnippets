[
  {
    "label": "OpusFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OpusFrame"
  },
  {
    "label": "GetFormatParameter()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_CODECS_OPUS_AUDIO_CODER_OPUS_COMMON_H_ # define MODULES_AUDIO_CODING_CODECS_OPUS_AUDIO_CODER_OPUS_COMMON_H_ # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / audio_codecs / audio_decoder . h \" # include \" api / audio_codecs / audio_format . h \" # include \" rtc_base / string_to_number . h \" namespace webrtc { absl::optional<std::string>)",
    "insertText": "GetFormatParameter(const SdpAudioFormat& format, absl::string_view param)"
  },
  {
    "label": "OpusFrame()",
    "kind": "Method",
    "detail": "Function (class OpusFrame : public AudioDecoder::EncodedAudioFrame { public :)",
    "insertText": "OpusFrame(AudioDecoder* decoder, rtc::Buffer&& payload, bool is_primary_payload) : decoder_(decoder), payload_(std::move(payload)), is_primary_payload_(is_primary_payload)"
  },
  {
    "label": "Duration()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "Duration()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int ret ;)",
    "insertText": "if(is_primary_payload_)"
  },
  {
    "label": "PacketDuration()",
    "kind": "Method",
    "detail": "Function (ret = decoder_ ->)",
    "insertText": "PacketDuration(payload_.data(), payload_.size())"
  },
  {
    "label": "PacketDurationRedundant()",
    "kind": "Method",
    "detail": "Function (} else { ret = decoder_ ->)",
    "insertText": "PacketDurationRedundant(payload_.data(), payload_.size())"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(ret < 0) ? 0 : static_cast<size_t>(ret)"
  },
  {
    "label": "IsDtxPacket()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDtxPacket()"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (} absl::optional<DecodeResult>)",
    "insertText": "Decode(rtc::ArrayView<int16_t> decoded)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (ret = decoder_ ->)",
    "insertText": "Decode(payload_.data(), payload_.size(), decoder_->SampleRateHz(), decoded.size() * sizeof(int16_t), decoded.data(), &speech_type)"
  },
  {
    "label": "DecodeRedundant()",
    "kind": "Method",
    "detail": "Function (} else { ret = decoder_ ->)",
    "insertText": "DecodeRedundant(payload_.data(), payload_.size(), decoder_->SampleRateHz(), decoded.size() * sizeof(int16_t), decoded.data(), &speech_type)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ret < 0)"
  }
]