[
  {
    "label": "PacketTimeUpdateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketTimeUpdateParams"
  },
  {
    "label": "RtcpTypes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RtcpTypes"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GetRtcpType()",
    "kind": "Method",
    "detail": "Function (# ifndef MEDIA_BASE_RTP_UTILS_H_ # define MEDIA_BASE_RTP_UTILS_H_ # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" rtc_base / byte_order . h \" # include \" rtc_base / system / rtc_export . h \" namespace rtc { struct PacketTimeUpdateParams ; } namespace cricket { const size_t kMinRtpPacketLen = 1 2 ; const size_t kMaxRtpPacketLen = 2 0 4 8 ; const size_t kMinRtcpPacketLen = 4 ; enum RtcpTypes { kRtcpTypeSR = 2 0 0,kRtcpTypeRR = 2 0 1,kRtcpTypeSDES = 2 0 2,kRtcpTypeBye = 2 0 3,kRtcpTypeApp = 2 0 4,kRtcpTypeRTPFB = 2 0 5,kRtcpTypePSFB = 2 0 6,} ; enum class RtpPacketType { kRtp,kRtcp,kUnknown,} ; bool)",
    "insertText": "GetRtcpType(const void* data, size_t len, int* value)"
  },
  {
    "label": "GetRtcpSsrc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRtcpSsrc(const void* data, size_t len, uint32_t* value)"
  },
  {
    "label": "InferRtpPacketType()",
    "kind": "Method",
    "detail": "Function (RtpPacketType)",
    "insertText": "InferRtpPacketType(rtc::ArrayView<const char> packet)"
  },
  {
    "label": "IsValidRtpPayloadType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidRtpPayloadType(int payload_type)"
  },
  {
    "label": "IsValidRtpPacketSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidRtpPacketSize(RtpPacketType packet_type, size_t size)"
  },
  {
    "label": "RtpPacketTypeToString()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "RtpPacketTypeToString(RtpPacketType packet_type)"
  },
  {
    "label": "ValidateRtpHeader()",
    "kind": "Method",
    "detail": "Function (bool RTC_EXPORT)",
    "insertText": "ValidateRtpHeader(const uint8_t* rtp, size_t length, size_t* header_length)"
  },
  {
    "label": "UpdateRtpAbsSendTimeExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateRtpAbsSendTimeExtension(uint8_t* rtp, size_t length, int extension_id, uint64_t time_us)"
  },
  {
    "label": "ApplyPacketOptions()",
    "kind": "Method",
    "detail": "Function (bool RTC_EXPORT)",
    "insertText": "ApplyPacketOptions(uint8_t* data, size_t length, const rtc::PacketTimeUpdateParams& packet_time_params, uint64_t time_us)"
  }
]