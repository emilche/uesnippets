[
  {
    "label": "INavRelevantInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavRelevantInterface"
  },
  {
    "label": "FNavigationOctree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavigationOctree"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNavigationRelevantDataFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationRelevantDataFilter"
  },
  {
    "label": "FNavigationOctreeElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationOctreeElement"
  },
  {
    "label": "FNavigationOctreeSemantics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationOctreeSemantics"
  },
  {
    "label": "ENavGeometryStoringMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENavGeometryStoringMode"
  },
  {
    "label": "FNavigationOctreeController",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationOctreeController"
  },
  {
    "label": "LLM_DECLARE_TAG()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CoreMinimal . h \" # endif # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_5 # include \" Stats / Stats . h \" # include \" AI / Navigation / NavigationTypes . h \" # include \" AI / NavigationModifier . h \" # include \" AI / Navigation / NavRelevantInterface . h \" # endif # include \" Math / GenericOctreePublic . h \" # include \" NavigationSystemTypes . h \" # include \" EngineStats . h \" # include \" AI / Navigation / NavigationElement . h \" # include \" AI / Navigation / NavigationRelevantData . h \" # include \" Math / GenericOctree . h \" # include \" HAL / LowLevelMemTracker . h \" class INavRelevantInterface ; class FNavigationOctree ; class UActorComponent ; enum class ENavDataGatheringMode : uint8 ; struct FNavigationRelevantDataFilter ; typedef FNavigationRelevantDataFilter FNavigationOctreeFilter ;)",
    "insertText": "LLM_DECLARE_TAG(NavigationOctree)"
  },
  {
    "label": "FNavigationOctreeElement()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavigationOctreeElement(const TSharedRef<const FNavigationElement>& SourceObject) : Bounds(SourceObject.Get().GetBounds()) , Data(MakeShared<FNavigationRelevantData>(SourceObject))"
  },
  {
    "label": "FNavigationOctreeElement()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavigationOctreeElement(const FNavigationOctreeElement& Other) : Bounds(Other.Bounds) , Data(Other.Data)"
  },
  {
    "label": "FNavigationOctreeElement()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavigationOctreeElement(FNavigationOctreeElement&& Other) noexcept : Bounds(MoveTemp(Other.Bounds)) , Data(MoveTemp(Other.Data))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FNavigationOctreeElement&)",
    "insertText": "operator(FNavigationOctreeElement&& Other)"
  },
  {
    "label": "FNavigationOctreeElement()",
    "kind": "Method",
    "detail": "Function (this -> ~)",
    "insertText": "FNavigationOctreeElement()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) FNavigationOctreeElement(Forward<FNavigationOctreeElement>(Other))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FNavigationOctreeElement&)",
    "insertText": "operator(const FNavigationOctreeElement& Other)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) FNavigationOctreeElement(Other)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} return* this ; } bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetBox()",
    "kind": "Method",
    "detail": "Function (const FBox BBox = Bounds .)",
    "insertText": "GetBox()"
  },
  {
    "label": "IsMatchingFilter()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMatchingFilter(const FNavigationOctreeFilter& Filter)"
  },
  {
    "label": "GetModifierForAgent()",
    "kind": "Method",
    "detail": "Function (} FCompositeNavModifier)",
    "insertText": "GetModifierForAgent(const FNavAgentProperties* NavAgent = nullptr)"
  },
  {
    "label": "ShouldUseGeometry()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldUseGeometry(const FNavDataConfig& NavConfig)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Shrink()"
  },
  {
    "label": "ValidateAndShrink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateAndShrink()"
  },
  {
    "label": "GetSourceElement()",
    "kind": "Method",
    "detail": "Function (} const TSharedRef<const FNavigationElement>&)",
    "insertText": "GetSourceElement()"
  },
  {
    "label": "ApplyOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyOffset(FNavigationOctreeElement& Element, const FVector& InOffset)"
  },
  {
    "label": "SetElementId()",
    "kind": "Method",
    "detail": "Function (} # if NAVSYS_DEBUG FORCENOINLINE # endif void)",
    "insertText": "SetElementId(FOctree& OctreeOwner, const FNavigationOctreeElement& Element, FOctreeElementId2 Id)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS FNavRelevantGeometryExportDelegate NavRelevantGeometryExportDelegate ; PRAGMA_ENABLE_DEPRECATION_WARNINGS)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FGeometryExportDelegate, const FNavigationElement&, FNavigationRelevantData&)"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (FGeometryExportDelegate GeometryExportDelegate ; enum ENavGeometryStoringMode { SkipNavGeometry,StoreNavGeometry,} ; void)",
    "insertText": "AddElement(const FNavigationOctreeElement& Element)"
  },
  {
    "label": "LLM_SCOPE_BYTAG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYTAG(NavigationOctree)"
  },
  {
    "label": "DEC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_MEMORY_STAT_BY(STAT_NavigationMemory, OctreeSizeBytes)"
  },
  {
    "label": "DEC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_MEMORY_STAT_BY(STAT_Navigation_CollisionTreeMemory, OctreeSizeBytes)"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (TOctree2<FNavigationOctreeElement,FNavigationOctreeSemantics)",
    "insertText": "AddElement(Element)"
  },
  {
    "label": "GetSizeBytes()",
    "kind": "Method",
    "detail": "Function (OctreeSizeBytes =)",
    "insertText": "GetSizeBytes()"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_NavigationMemory, OctreeSizeBytes)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_Navigation_CollisionTreeMemory, OctreeSizeBytes)"
  },
  {
    "label": "RemoveElement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveElement(FOctreeElementId2 ElementId)"
  },
  {
    "label": "RemoveElement()",
    "kind": "Method",
    "detail": "Function (TOctree2<FNavigationOctreeElement,FNavigationOctreeSemantics)",
    "insertText": "RemoveElement(ElementId)"
  },
  {
    "label": "FNavigationOctree()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavigationOctree(const FVector& Origin, FVector::FReal Radius)"
  },
  {
    "label": "FNavigationOctree()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNavigationOctree()"
  },
  {
    "label": "AddNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNode(const FBox& Bounds, FNavigationOctreeElement& OctreeElement)"
  },
  {
    "label": "AppendToNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendToNode(const FOctreeElementId2& Id, const TSharedRef<const FNavigationElement>& ElementRef, const FBox& Bounds, FNavigationOctreeElement& Data)"
  },
  {
    "label": "UpdateNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNode(const FOctreeElementId2& Id, const FBox& NewBounds)"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNode(const FOctreeElementId2& Id)"
  },
  {
    "label": "SetNavigableGeometryStoringMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavigableGeometryStoringMode(ENavGeometryStoringMode NavGeometryMode)"
  },
  {
    "label": "GetDataForID()",
    "kind": "Method",
    "detail": "Function (const FNavigationRelevantData*)",
    "insertText": "GetDataForID(const FOctreeElementId2& Id)"
  },
  {
    "label": "GetMutableDataForID()",
    "kind": "Method",
    "detail": "Function (FNavigationRelevantData*)",
    "insertText": "GetMutableDataForID(const FOctreeElementId2& Id)"
  },
  {
    "label": "GetNavGeometryStoringMode()",
    "kind": "Method",
    "detail": "Function (ENavGeometryStoringMode)",
    "insertText": "GetNavGeometryStoringMode()"
  },
  {
    "label": "IsLazyGathering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLazyGathering(const FNavigationElement& NavigationElement)"
  },
  {
    "label": "DemandLazyDataGathering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DemandLazyDataGathering(FNavigationRelevantData& ElementData)"
  },
  {
    "label": "DemandChildLazyDataGathering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DemandChildLazyDataGathering(FNavigationRelevantData& ElementData, const FNavigationElement& ChildElement)"
  },
  {
    "label": "SetGatheringNavModifiersTimeLimitWarning()",
    "kind": "Method",
    "detail": "Function (} # if ! UE_BUILD_SHIPPING void)",
    "insertText": "SetGatheringNavModifiersTimeLimitWarning(const float Threshold)"
  },
  {
    "label": "SetElementIdImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetElementIdImpl(FNavigationElementHandle ElementHandle, FOctreeElementId2 Id)"
  }
]