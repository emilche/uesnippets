[
  {
    "label": "SYMS_ProfChain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SYMS_ProfChain"
  },
  {
    "label": "SYMS_ProfState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SYMS_ProfState"
  },
  {
    "label": "SYMS_ProfLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SYMS_ProfLock"
  },
  {
    "label": "SYMS_ProfTreeNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SYMS_ProfTreeNode"
  },
  {
    "label": "SYMS_ProfTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SYMS_ProfTree"
  },
  {
    "label": "SYMS_LogFeature_LineTable()",
    "kind": "Method",
    "detail": "Function (# ifndef SYMS_DEV_H # define SYMS_DEV_H # if SYMS_ENABLE_DEV_LOG # undef SYMS_ENABLE_DEV_STRING # define SYMS_ENABLE_DEV_STRING 1 # endif typedef SYMS_U32 SYMS_LogFeatures ; enum {)",
    "insertText": "SYMS_LogFeature_LineTable(1 << 0), SYMS_LogFeature_DwarfUnitRanges = (1 << 1), SYMS_LogFeature_DwarfTags = (1 << 2), SYMS_LogFeature_DwarfUnwind = (1 << 3), SYMS_LogFeature_DwarfCFILookup = (1 << 4), SYMS_LogFeature_DwarfCFIDecode = (1 << 5), SYMS_LogFeature_DwarfCFIApply = (1 << 6), SYMS_LogFeature_PEEpilog = (1 << 7), SYMS_LogFeature_PeResParser = (1 << 8), SYMS_LogFeature_Dummy = (1 << 31)"
  },
  {
    "label": "syms_push_stringfv__dev()",
    "kind": "Method",
    "detail": "Function (typedef struct SYMS_ProfChain { struct SYMS_ProfChain* next ; SYMS_U8* ptr ; } SYMS_ProfChain ; typedef struct SYMS_ProfState { SYMS_ProfChain* first ; SYMS_ProfChain* current ; SYMS_ProfChain* free ; } SYMS_ProfState ; typedef struct SYMS_ProfLock { SYMS_ProfState* state ; SYMS_String8 data ; } SYMS_ProfLock ; typedef struct SYMS_ProfTreeNode { struct SYMS_ProfTreeNode* next ; SYMS_U64 hash ; SYMS_String8 key ; SYMS_U64 count ; SYMS_U64 total_time ; struct SYMS_ProfTreeNode* tree_first ; struct SYMS_ProfTreeNode* tree_last ; struct SYMS_ProfTreeNode* tree_next ; struct SYMS_ProfTreeNode* tree_parent ; SYMS_U64 time_min ; } SYMS_ProfTreeNode ; typedef struct SYMS_ProfTree { SYMS_ProfTreeNode** buckets ; SYMS_U64 bucket_count ; SYMS_U64 count ; SYMS_U64 max_key_size ; SYMS_ProfTreeNode* root ; SYMS_U64 height ; } SYMS_ProfTree ; # if SYMS_ENABLE_DEV_STRING # include<stdio . h> # include<stdarg . h> SYMS_String8)",
    "insertText": "syms_push_stringfv__dev(SYMS_Arena *arena, char *fmt, va_list args)"
  },
  {
    "label": "syms_push_stringf__dev()",
    "kind": "Method",
    "detail": "Function (SYMS_String8)",
    "insertText": "syms_push_stringf__dev(SYMS_Arena *arena, char *fmt, ...)"
  },
  {
    "label": "syms_string_list_pushfv__dev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_string_list_pushfv__dev(SYMS_Arena *arena, SYMS_String8List *list, char *fmt, va_list args)"
  },
  {
    "label": "syms_string_list_pushf__dev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_string_list_pushf__dev(SYMS_Arena *arena, SYMS_String8List *list, char *fmt, ...)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if SYMS_ENABLE_DEV_LOG # if !)",
    "insertText": "defined(SYMS_LOG_RAW_APPEND) # include <stdio.h> # define SYMS_LOG_RAW_APPEND(s) fwrite((s).str, (s).size, 1, stderr) #endif #if !defined(SYMS_LOG_FILTER_FEATURES) # define SYMS_LOG_FILTER_FEATURES 0 #endif #if !defined(SYMS_LOG_FILTER_UID) # define SYMS_LOG_FILTER_UID 0 #endif SYMS_API void syms_log_set_filter__dev(SYMS_LogFeatures features, SYMS_U64 uid)"
  },
  {
    "label": "syms_log_open__dev()",
    "kind": "Method",
    "detail": "Function (SYMS_U32)",
    "insertText": "syms_log_open__dev(SYMS_B32 enabled)"
  },
  {
    "label": "syms_log_close__dev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_log_close__dev(SYMS_U32 prev_state)"
  },
  {
    "label": "syms_log_is_enabled__dev()",
    "kind": "Method",
    "detail": "Function (SYMS_B32)",
    "insertText": "syms_log_is_enabled__dev(void)"
  },
  {
    "label": "syms_log_open_annotated__dev()",
    "kind": "Method",
    "detail": "Function (SYMS_U32)",
    "insertText": "syms_log_open_annotated__dev(SYMS_LogFeatures features, SYMS_U64 uid)"
  },
  {
    "label": "syms_logfv__dev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_logfv__dev(char *fmt, va_list args)"
  },
  {
    "label": "syms_logf__dev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_logf__dev(char *fmt, ...)"
  },
  {
    "label": "SYMS_LogOpen()",
    "kind": "Method",
    "detail": "Function (# endif # if SYMS_ENABLE_DEV_LOG # define)",
    "insertText": "SYMS_LogOpen(ftr,uid,block) SYMS_U32 syms_log_state__##block = syms_log_open_annotated__dev((ftr),(uid)) # define SYMS_LogClose(block) syms_log_close__dev(syms_log_state__##block) # define SYMS_Log(...) syms_logf__dev(__VA_ARGS__) # define SYMS_LogIsEnabled() syms_log_is_enabled__dev() #else # define SYMS_LogOpen(ftr,uid,block) ((void)0) # define SYMS_LogClose(block) ((void)0) # define SYMS_Log(fmt,...) ((void)0) # define SYMS_LogIsEnabled() (0) #endif #if SYMS_ENABLE_DEV_PROFILE #if !defined(SYMS_PROF_TIME) # error \"SYMS_PROF_TIME not #define'd\" #endif #if !defined(SYMS_PROF_ALLOC) # error \"SYMS_PROF_ALLOC not #define'd\" #endif #if !defined(SYMS_PROF_BLOCK_SIZE) # define SYMS_PROF_BLOCK_SIZE (1 << 20) #endif SYMS_API void syms_prof_equip_thread__dev(SYMS_ProfState *prof_state)"
  },
  {
    "label": "syms_prof_equip_thread_auto__dev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_prof_equip_thread_auto__dev(void)"
  },
  {
    "label": "syms_prof_unequip_thread__dev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_prof_unequip_thread__dev(void)"
  },
  {
    "label": "syms_prof_push__dev()",
    "kind": "Method",
    "detail": "Function (SYMS_U64*)",
    "insertText": "syms_prof_push__dev(void)"
  },
  {
    "label": "syms_prof_paste__dev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_prof_paste__dev(SYMS_ProfState *sub_state)"
  },
  {
    "label": "syms_prof_lock__dev()",
    "kind": "Method",
    "detail": "Function (SYMS_ProfLock)",
    "insertText": "syms_prof_lock__dev(SYMS_Arena *arena)"
  },
  {
    "label": "syms_prof_clear__dev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_prof_clear__dev(SYMS_ProfLock lock)"
  },
  {
    "label": "syms_prof_unlock__dev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_prof_unlock__dev(SYMS_ProfLock lock)"
  },
  {
    "label": "syms_prof_tree__dev()",
    "kind": "Method",
    "detail": "Function (SYMS_ProfTree)",
    "insertText": "syms_prof_tree__dev(SYMS_Arena *arena, SYMS_String8 data)"
  },
  {
    "label": "syms_prof_tree_sort_in_place__dev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_prof_tree_sort_in_place__dev(SYMS_ProfTreeNode *root)"
  },
  {
    "label": "syms_prof_tree_sort_pointer_array__dev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_prof_tree_sort_pointer_array__dev(SYMS_ProfTreeNode **array, SYMS_U64 count)"
  },
  {
    "label": "syms_prof_stringize_tree__dev()",
    "kind": "Method",
    "detail": "Function (# if SYMS_ENABLE_DEV_STRING void)",
    "insertText": "syms_prof_stringize_tree__dev(SYMS_Arena *arena, SYMS_ProfTree *tree, SYMS_String8List *out)"
  },
  {
    "label": "syms_prof_stringize_tree__rec__dev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_prof_stringize_tree__rec__dev(SYMS_Arena *arena, SYMS_ProfTreeNode *node, SYMS_String8List *out, SYMS_U64 align, SYMS_U64 indent)"
  },
  {
    "label": "syms_prof_stringize_basic__dev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_prof_stringize_basic__dev(SYMS_Arena *arena, SYMS_ProfLock lock, SYMS_String8List *out)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # endif # if SYMS_ENABLE_DEV_PROFILE # if !)",
    "insertText": "defined(SYMS_ProfBegin) # define SYMS_ProfBegin(str)"
  },
  {
    "label": "SYMS_PROF_TIME()",
    "kind": "Method",
    "detail": "Function (SYMS_U64 t =)",
    "insertText": "SYMS_PROF_TIME()"
  },
  {
    "label": "syms_prof_push__dev()",
    "kind": "Method",
    "detail": "Function (SYMS_U64* v =)",
    "insertText": "syms_prof_push__dev()"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "v(SYMS_U64)(SYMS_THIS_SRCLOC \": \" str)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (v [ 1 ] = t ; })",
    "insertText": "while(0) # endif # if !defined(SYMS_ProfEnd) # define SYMS_ProfEnd()"
  }
]