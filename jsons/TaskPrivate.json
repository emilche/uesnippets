[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPipe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPipe"
  },
  {
    "label": "FTaskBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskBase"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FTaskBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskBase"
  },
  {
    "label": "FPrerequisites",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrerequisites"
  },
  {
    "label": "FSubsequents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubsequents"
  },
  {
    "label": "TTaskWithResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTaskWithResult"
  },
  {
    "label": "TExecutableTaskBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TExecutableTaskBase"
  },
  {
    "label": "TExecutableTaskBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TExecutableTaskBase"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "specializations",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "specializations"
  },
  {
    "label": "TExecutableTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TExecutableTask"
  },
  {
    "label": "FTaskEventBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskEventBase"
  },
  {
    "label": "ToExtendedTaskPriority()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToExtendedTaskPriority(const TCHAR* ExtendedPriorityStr, EExtendedTaskPriority& OutExtendedPriority)"
  },
  {
    "label": "TranslatePriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TranslatePriority(ENamedThreads::Type ThreadType, ETaskPriority& OutPriority, EExtendedTaskPriority& OutExtendedPriority)"
  },
  {
    "label": "TranslatePriority()",
    "kind": "Method",
    "detail": "Function (ENamedThreads::Type)",
    "insertText": "TranslatePriority(ETaskPriority Priority, EExtendedTaskPriority ExtendedPriority)"
  },
  {
    "label": "IsThreadRetractingTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThreadRetractingTask()"
  },
  {
    "label": "TryUnlock()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TryUnlock(bWakeUpWorker)"
  },
  {
    "label": "TryRetractAndExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRetractAndExecute(FTimeout Timeout, uint32 RecursionDepth = 0)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Wait(FTimeout Timeout)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait()"
  },
  {
    "label": "WaitWithNamedThreadsSupport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitWithNamedThreadsSupport()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Wait(Timeout)"
  },
  {
    "label": "IsCompleted()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsCompleted()"
  },
  {
    "label": "ExchangeCurrentTask()",
    "kind": "Method",
    "detail": "Function (thread)",
    "insertText": "ExchangeCurrentTask(PrevTask)"
  },
  {
    "label": "ReleasePrerequisites()",
    "kind": "Method",
    "detail": "Function (tasks)",
    "insertText": "ReleasePrerequisites()"
  },
  {
    "label": "ClearPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPipe()"
  },
  {
    "label": "TryExecuteTask()",
    "kind": "Method",
    "detail": "Function (away)",
    "insertText": "TryExecuteTask()"
  },
  {
    "label": "ReleaseInternalReference()",
    "kind": "Method",
    "detail": "Function (it)",
    "insertText": "ReleaseInternalReference()"
  },
  {
    "label": "ReleasePrerequisites()",
    "kind": "Method",
    "detail": "Function (subsequents)",
    "insertText": "ReleasePrerequisites()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (again)",
    "insertText": "Close()"
  },
  {
    "label": "Schedule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Schedule(bool& bWakeUpWorker)"
  },
  {
    "label": "StartPipeExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPipeExecution()"
  },
  {
    "label": "FinishPipeExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishPipeExecution()"
  },
  {
    "label": "WaitImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitImpl(FTimeout Timeout)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (UE::TUniqueLock)",
    "insertText": "Lock(Mutex)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (UE::TUniqueLock)",
    "insertText": "Lock(Mutex)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MoveTemp(Prerequisites)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (UE::TUniqueLock)",
    "insertText": "Lock(Mutex)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (UE::TUniqueLock)",
    "insertText": "Lock(Mutex)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MoveTemp(Subsequents)"
  },
  {
    "label": "TryWaitOnNamedThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryWaitOnNamedThread(FTaskBase& Task)"
  },
  {
    "label": "FTaskEventBase()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "FTaskEventBase(DebugName)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "new(size_t Size)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "delete(void* Ptr)"
  }
]