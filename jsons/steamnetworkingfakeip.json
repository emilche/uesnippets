[
  {
    "label": "ISteamNetworkingFakeUDPPort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamNetworkingFakeUDPPort"
  },
  {
    "label": "SteamNetworkingFakeIPResult_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetworkingFakeIPResult_t"
  },
  {
    "label": "DestroyFakeUDPPort()",
    "kind": "Method",
    "detail": "Function (# ifndef STEAMNETWORKINGFAKEIP_H # define STEAMNETWORKINGFAKEIP_H # pragma once # include \" steamnetworkingtypes . h \" # include \" steam_api_common . h \" int k_cbSteamNetworkingSocketsFakeUDPPortRecommendedMTU = 1 2 0 0 ; int k_cbSteamNetworkingSocketsFakeUDPPortMaxMessageSize = 4 0 9 6 ; class ISteamNetworkingFakeUDPPort { public : void)",
    "insertText": "DestroyFakeUDPPort()"
  },
  {
    "label": "SendMessageToFakeIP()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "SendMessageToFakeIP(const SteamNetworkingIPAddr &remoteAddress, const void *pData, uint32 cbData, int nSendFlags)"
  },
  {
    "label": "ReceiveMessages()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReceiveMessages(SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)"
  },
  {
    "label": "ScheduleCleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleCleanup(const SteamNetworkingIPAddr &remoteAddress)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; # if)",
    "insertText": "defined(VALVE_CALLBACK_PACK_SMALL ) #pragma pack( push, 4 ) #elif defined( VALVE_CALLBACK_PACK_LARGE ) #pragma pack( push, 8)"
  }
]