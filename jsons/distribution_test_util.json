[
  {
    "label": "DistributionMoments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DistributionMoments"
  },
  {
    "label": "ComputeDistributionMoments()",
    "kind": "Method",
    "detail": "Function (DistributionMoments)",
    "insertText": "ComputeDistributionMoments(\n    absl::Span<const double> data_points)"
  },
  {
    "label": "ZScore()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "ZScore(double expected_mean, const DistributionMoments& moments)"
  },
  {
    "label": "RequiredSuccessProbability()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "RequiredSuccessProbability(double p_fail, int num_trials)"
  },
  {
    "label": "MaxErrorTolerance()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "MaxErrorTolerance(double acceptance_probability)"
  },
  {
    "label": "erfinv()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "erfinv(double x)"
  },
  {
    "label": "beta()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "beta(double p, double q)"
  },
  {
    "label": "InverseNormalSurvival()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "InverseNormalSurvival(double x)"
  },
  {
    "label": "Near()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Near(absl::string_view msg, double actual, double expected, double bound)"
  },
  {
    "label": "BetaIncomplete()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "BetaIncomplete(double x, double p, double q)"
  },
  {
    "label": "BetaIncompleteInv()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "BetaIncompleteInv(double p, double q, double alpha)"
  }
]