[
  {
    "label": "FrameGeneratorCapturerVideoTrackSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameGeneratorCapturerVideoTrackSource"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "FrameGeneratorCapturerVideoTrackSource()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_TEST_FRAME_GENERATOR_CAPTURER_VIDEO_TRACK_SOURCE_H_ # define PC_TEST_FRAME_GENERATOR_CAPTURER_VIDEO_TRACK_SOURCE_H_ # include<memory> # include<utility> # include \" api / task_queue / default_task_queue_factory . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / test / create_frame_generator . h \" # include \" pc / video_track_source . h \" # include \" test / frame_generator_capturer . h \" namespace webrtc { class FrameGeneratorCapturerVideoTrackSource : public VideoTrackSource { public : const int kDefaultFramesPerSecond = 3 0 ; const int kDefaultWidth = 6 4 0 ; const int kDefaultHeight = 4 8 0 ; const int kNumSquaresGenerated = 5 0 ; struct Config { int frames_per_second = kDefaultFramesPerSecond ; int width = kDefaultWidth ; int height = kDefaultHeight ; int num_squares_generated = 5 0 ; } ;)",
    "insertText": "FrameGeneratorCapturerVideoTrackSource(Config config, Clock* clock, bool is_screencast) : VideoTrackSource(false ), task_queue_factory_(CreateDefaultTaskQueueFactory()), is_screencast_(is_screencast)"
  },
  {
    "label": "FrameGeneratorCapturer()",
    "kind": "Method",
    "detail": "Function (video_capturer_ = std::make_unique<)",
    "insertText": "FrameGeneratorCapturer(clock, test::CreateSquareFrameGenerator(config.width, config.height, absl::nullopt, config.num_squares_generated), config.frames_per_second, *task_queue_factory_)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (video_capturer_ ->)",
    "insertText": "Init()"
  },
  {
    "label": "FrameGeneratorCapturerVideoTrackSource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FrameGeneratorCapturerVideoTrackSource(std::unique_ptr<test::FrameGeneratorCapturer> video_capturer, bool is_screencast) : VideoTrackSource(false ), video_capturer_(std::move(video_capturer)), is_screencast_(is_screencast)"
  },
  {
    "label": "FrameGeneratorCapturerVideoTrackSource()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FrameGeneratorCapturerVideoTrackSource()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(kLive)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Stop()"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(kMuted)"
  },
  {
    "label": "is_screencast()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_screencast()"
  }
]