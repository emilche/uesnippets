[
  {
    "label": "CefStringTraitsWide",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefStringTraitsWide"
  },
  {
    "label": "CefStringTraitsUTF8",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefStringTraitsUTF8"
  },
  {
    "label": "CefStringTraitsUTF16",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefStringTraitsUTF16"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "traits"
  },
  {
    "label": "CefStringBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefStringBase"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_INTERNAL_CEF_STRING_WRAPPERS_H_ # define CEF_INCLUDE_INTERNAL_CEF_STRING_WRAPPERS_H_ # pragma once # include<memory . h> # include<string> # include \" include / internal / cef_string_types . h \" # if)",
    "insertText": "defined(USING_CHROMIUM_INCLUDES)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (typedef wchar_t char_type ; typedef cef_string_wide_t struct_type ; typedef cef_string_userfree_wide_t userfree_struct_type ; void)",
    "insertText": "clear(struct_type* s)"
  },
  {
    "label": "cef_string_wide_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_wide_clear(s)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "set(const char_type* src, size_t src_size, struct_type* output, int copy)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare(const struct_type* s1, const struct_type* s2)"
  },
  {
    "label": "userfree_alloc()",
    "kind": "Method",
    "detail": "Function (} userfree_struct_type)",
    "insertText": "userfree_alloc()"
  },
  {
    "label": "userfree_free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "userfree_free(userfree_struct_type ufs)"
  },
  {
    "label": "from_ascii()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "from_ascii(const char* str, size_t len, struct_type* s)"
  },
  {
    "label": "to_string()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "to_string(const struct_type* s)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (cef_string_utf8_t cstr ;)",
    "insertText": "memset(&cstr, 0, sizeof(cstr))"
  },
  {
    "label": "cef_string_wide_to_utf8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_wide_to_utf8(s->str, s->length, &cstr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::string str ;)",
    "insertText": "if(cstr.length > 0) str = std::string(cstr.str, cstr.length)"
  },
  {
    "label": "cef_string_utf8_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_utf8_clear(&cstr)"
  },
  {
    "label": "from_string()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "from_string(const std::string& str, struct_type* s)"
  },
  {
    "label": "to_wstring()",
    "kind": "Method",
    "detail": "Function (} std::wstring)",
    "insertText": "to_wstring(const struct_type* s)"
  },
  {
    "label": "from_wstring()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "from_wstring(const std::wstring::value_type* data, size_t length, struct_type* s)"
  },
  {
    "label": "from_wstring()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "from_wstring(const std::wstring& str, struct_type* s)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(WCHAR_T_IS_UTF32) static inline std::u16string to_string16(const struct_type* s)"
  },
  {
    "label": "cef_string_wide_to_utf16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_wide_to_utf16(s->str, s->length, &cstr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::u16string str ;)",
    "insertText": "if(cstr.length > 0)"
  },
  {
    "label": "u16string()",
    "kind": "Method",
    "detail": "Function (str =)",
    "insertText": "u16string(reinterpret_cast<std::u16string::value_type*>(cstr.str), cstr.length)"
  },
  {
    "label": "cef_string_utf16_clear()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "cef_string_utf16_clear(&cstr)"
  },
  {
    "label": "to_string16()",
    "kind": "Method",
    "detail": "Function (} # else std::u16string)",
    "insertText": "to_string16(const struct_type* s)"
  },
  {
    "label": "from_string16()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "from_string16(const std::u16string::value_type* data, size_t length, struct_type* s)"
  },
  {
    "label": "from_string16()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "from_string16(const std::u16string& str, struct_type* s)"
  },
  {
    "label": "cef_string_utf8_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_utf8_clear(s)"
  },
  {
    "label": "from_string()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "from_string(const std::string::value_type* data, size_t length, struct_type* s)"
  },
  {
    "label": "cef_string_utf8_to_wide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_utf8_to_wide(s->str, s->length, &cstr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::wstring str ;)",
    "insertText": "if(cstr.length > 0) str = std::wstring(cstr.str, cstr.length)"
  },
  {
    "label": "cef_string_wide_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_wide_clear(&cstr)"
  },
  {
    "label": "cef_string_utf8_to_utf16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_utf8_to_utf16(s->str, s->length, &cstr)"
  },
  {
    "label": "cef_string_utf16_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_utf16_clear(s)"
  },
  {
    "label": "cef_string_utf16_to_utf8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_utf16_to_utf8(s->str, s->length, &cstr)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(WCHAR_T_IS_UTF32) static inline std::wstring to_wstring(const struct_type* s)"
  },
  {
    "label": "cef_string_utf16_to_wide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_utf16_to_wide(s->str, s->length, &cstr)"
  },
  {
    "label": "CefStringBase()",
    "kind": "Method",
    "detail": "Function (} } ; template<class traits> class CefStringBase { public : typedef traits::char_type char_type ; typedef traits::struct_type struct_type ; typedef traits::userfree_struct_type userfree_struct_type ;)",
    "insertText": "CefStringBase() : string_(NULL), owner_(false)"
  },
  {
    "label": "CefStringBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefStringBase(const CefStringBase& str) : string_(NULL), owner_(false)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString(str.c_str(), str.length(), true)"
  },
  {
    "label": "CefStringBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefStringBase(const std::string& src) : string_(NULL), owner_(false)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString(src)"
  },
  {
    "label": "CefStringBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefStringBase(const char* src, size_t length = 0) : string_(NULL), owner_(false)"
  },
  {
    "label": "CefStringBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefStringBase(const std::wstring& src) : string_(NULL), owner_(false)"
  },
  {
    "label": "FromWString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromWString(src)"
  },
  {
    "label": "CefStringBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefStringBase(const wchar_t* src, size_t length = 0) : string_(NULL), owner_(false)"
  },
  {
    "label": "CefStringBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefStringBase(const std::u16string& src) : string_(NULL), owner_(false)"
  },
  {
    "label": "FromString16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString16(src)"
  },
  {
    "label": "CefStringBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefStringBase(const std::u16string::value_type* src, size_t length = 0) : string_(NULL), owner_(false)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(WCHAR_T_IS_UTF32) CefStringBase(const char16* src, size_t length = 0) : string_(NULL), owner_(false)"
  },
  {
    "label": "FromString16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString16(reinterpret_cast<const std::u16string::value_type*>(src), length)"
  },
  {
    "label": "CefStringBase()",
    "kind": "Method",
    "detail": "Function (} } # endif)",
    "insertText": "CefStringBase(const char_type* src, size_t src_len, bool copy) : string_(NULL), owner_(false)"
  },
  {
    "label": "CefStringBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefStringBase(const struct_type* src) : string_(NULL), owner_(false)"
  },
  {
    "label": "Attach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Attach(const_cast<struct_type*>(src), false)"
  },
  {
    "label": "CefStringBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CefStringBase()"
  },
  {
    "label": "ClearAndFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAndFree()"
  },
  {
    "label": "c_str()",
    "kind": "Method",
    "detail": "Function (} const char_type*)",
    "insertText": "c_str()"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "length()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare(const CefStringBase& str)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(CefStringBase& str)"
  },
  {
    "label": "IsOwner()",
    "kind": "Method",
    "detail": "Function (struct_type* tmp_string = string_ ; bool tmp_owner = owner_ ; string_ = str . string_ ; owner_ = str . owner_ ; str . string_ = tmp_string ; str . owner_ = tmp_owner ; } bool)",
    "insertText": "IsOwner()"
  },
  {
    "label": "AllocIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocIfNeeded()"
  },
  {
    "label": "Attach()",
    "kind": "Method",
    "detail": "Function (delete string_ ; } string_ = NULL ; owner_ = false ; } void)",
    "insertText": "Attach(struct_type* str, bool owner)"
  },
  {
    "label": "AttachToUserFree()",
    "kind": "Method",
    "detail": "Function (string_ = str ; owner_ = owner ; } void)",
    "insertText": "AttachToUserFree(userfree_struct_type str)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (owner_ = true ;)",
    "insertText": "memcpy(string_, str, sizeof(struct_type))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(str, 0, sizeof(struct_type))"
  },
  {
    "label": "userfree_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "userfree_free(str)"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Detach()"
  },
  {
    "label": "DetachToUserFree()",
    "kind": "Method",
    "detail": "Function (string_ = NULL ; owner_ = false ; } userfree_struct_type)",
    "insertText": "DetachToUserFree()"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(str, string_, sizeof(struct_type))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(string_, 0, sizeof(struct_type))"
  },
  {
    "label": "FromASCII()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FromASCII(const char* str)"
  },
  {
    "label": "strlen()",
    "kind": "Method",
    "detail": "Function (size_t len = str ?)",
    "insertText": "strlen(str)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FromString(const std::string& str)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FromString(const std::string::value_type* data, size_t length = 0)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (length = std::char_traits<std::string::value_type)",
    "insertText": "length(data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!data || length == 0)"
  },
  {
    "label": "ToWString()",
    "kind": "Method",
    "detail": "Function (} std::wstring)",
    "insertText": "ToWString()"
  },
  {
    "label": "FromWString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FromWString(const std::wstring& str)"
  },
  {
    "label": "FromWString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FromWString(const std::wstring::value_type* data, size_t length = 0)"
  },
  {
    "label": "ToString16()",
    "kind": "Method",
    "detail": "Function (} std::u16string)",
    "insertText": "ToString16()"
  },
  {
    "label": "FromString16()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FromString16(const std::u16string& str)"
  },
  {
    "label": "FromString16()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FromString16(const std::u16string::value_type* data, size_t length = 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const CefStringBase& str)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CefStringBase&)",
    "insertText": "operator(const std::string& str)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString(str)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CefStringBase&)",
    "insertText": "operator(const std::wstring& str)"
  },
  {
    "label": "FromWString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromWString(str)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CefStringBase&)",
    "insertText": "operator(const std::u16string& str)"
  },
  {
    "label": "FromString16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString16(str)"
  },
  {
    "label": "FromString16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString16(reinterpret_cast<const std::u16string::value_type*>(str))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(OS_WIN) return base::FilePath(ToWString())"
  },
  {
    "label": "FilePath()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "FilePath(ToString())"
  }
]