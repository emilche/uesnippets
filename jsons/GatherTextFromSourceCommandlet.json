[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EGatherSourcePasses",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGatherSourcePasses"
  },
  {
    "label": "UGatherTextFromSourceCommandlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGatherTextFromSourceCommandlet"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSourceLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceLocation"
  },
  {
    "label": "FParsedStringTableEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParsedStringTableEntry"
  },
  {
    "label": "FParsedStringTableEntryMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParsedStringTableEntryMetaData"
  },
  {
    "label": "FParsedStringTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParsedStringTable"
  },
  {
    "label": "FParsedNestedMacro",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParsedNestedMacro"
  },
  {
    "label": "FManifestEntryResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManifestEntryResult"
  },
  {
    "label": "FMacroArgumentGatherer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMacroArgumentGatherer"
  },
  {
    "label": "FSourceFileParseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceFileParseContext"
  },
  {
    "label": "FParsableDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParsableDescriptor"
  },
  {
    "label": "FPreProcessorDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreProcessorDescriptor"
  },
  {
    "label": "FDefineDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefineDescriptor"
  },
  {
    "label": "FUndefDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUndefDescriptor"
  },
  {
    "label": "FIfDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIfDescriptor"
  },
  {
    "label": "FIfDefDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIfDefDescriptor"
  },
  {
    "label": "FElIfDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FElIfDescriptor"
  },
  {
    "label": "FElseDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FElseDescriptor"
  },
  {
    "label": "FEndIfDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEndIfDescriptor"
  },
  {
    "label": "FMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMacroDescriptor"
  },
  {
    "label": "FUICommandMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandMacroDescriptor"
  },
  {
    "label": "FUICommandExtMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandExtMacroDescriptor"
  },
  {
    "label": "FNestedMacroPrepassDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNestedMacroPrepassDescriptor"
  },
  {
    "label": "FNestedMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNestedMacroDescriptor"
  },
  {
    "label": "FStringMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringMacroDescriptor"
  },
  {
    "label": "EMacroArgSemantic",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMacroArgSemantic"
  },
  {
    "label": "FMacroArg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMacroArg"
  },
  {
    "label": "FStringTableMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringTableMacroDescriptor"
  },
  {
    "label": "FStringTableFromFileMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringTableFromFileMacroDescriptor"
  },
  {
    "label": "FStringTableEntryMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringTableEntryMacroDescriptor"
  },
  {
    "label": "FStringTableEntryMetaDataMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringTableEntryMetaDataMacroDescriptor"
  },
  {
    "label": "FStructuredLogMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredLogMacroDescriptor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FIniNamespaceDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIniNamespaceDescriptor"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Size(const FParsedNestedMacro& Result)"
  },
  {
    "label": "Gather()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Gather(const TCHAR* Arg, int32 Count)"
  },
  {
    "label": "EndArgument()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndArgument()"
  },
  {
    "label": "ExtractArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractArguments(TArray<FString>& Arguments)"
  },
  {
    "label": "AddManifestText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddManifestText(const FString& Token, const FString& Namespace, const FString& SourceText, const FManifestContext& Context, bool IsNested)"
  },
  {
    "label": "PushMacroBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushMacroBlock( const FString& InBlockCtx )"
  },
  {
    "label": "PopMacroBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopMacroBlock()"
  },
  {
    "label": "FlushMacroStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushMacroStack()"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine( const FString& InDefineCtx )"
  },
  {
    "label": "RemoveDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDefine( const FString& InDefineCtx )"
  },
  {
    "label": "AddStringTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStringTable( const FName InTableId, const FString& InTableNamespace )"
  },
  {
    "label": "AddStringTableFromFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStringTableFromFile( const FName InTableId, const FString& InTableNamespace, const FString& InTableFilename, const FString& InRootPath )"
  },
  {
    "label": "AddStringTableEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStringTableEntry( const FName InTableId, const FString& InKey, const FString& InSourceString )"
  },
  {
    "label": "AddStringTableEntryMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStringTableEntryMetaData( const FName InTableId, const FString& InKey, const FName InMetaDataId, const FString& InMetaData )"
  },
  {
    "label": "AddStringTableImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddStringTableImpl( const FName InTableId, const FString& InTableNamespace )"
  },
  {
    "label": "AddStringTableEntryImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddStringTableEntryImpl( const FName InTableId, const FString& InKey, const FString& InSourceString, const FSourceLocation& InSourceLocation, const FName InPlatformName )"
  },
  {
    "label": "AddStringTableEntryMetaDataImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddStringTableEntryMetaDataImpl( const FName InTableId, const FString& InKey, const FName InMetaDataId, const FString& InMetaData, const FSourceLocation& InSourceLocation )"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "EnumHasAnyFlags(ApplicableFileTypes, InFileTypes)"
  },
  {
    "label": "PrepareArgument()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareArgument(FString& Argument, bool IsAutoText, const FString& IdentForLogging, bool& OutHasQuotes)"
  },
  {
    "label": "TestNestedMacroDescriptorParseArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestNestedMacroDescriptorParseArgs()"
  },
  {
    "label": "TryParseArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryParseArgs(const FString& MacroInnerParams, FString& ParamsNewAll)"
  },
  {
    "label": "GetParsables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetParsables(TArray<FParsableDescriptor*>& Parsables, EGatherSourcePasses Pass, TArray<FParsedNestedMacro>& PrepassResults)"
  },
  {
    "label": "RunPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPass(EGatherSourcePasses Pass, bool ShouldGatherFromEditorOnlyData, const TArray<FString>& FilesToProcess, const FString& GatheredSourceBasePath, TArray<FParsedNestedMacro>& PrepassResults)"
  },
  {
    "label": "UnescapeLiteralCharacterEscapeSequences()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "UnescapeLiteralCharacterEscapeSequences(const FString& InString)"
  },
  {
    "label": "RemoveStringFromTextMacro()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RemoveStringFromTextMacro(const FString& TextMacro, const FString& IdentForLogging, bool& Error)"
  },
  {
    "label": "StripCommentsFromToken()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "StripCommentsFromToken(const FString& InToken, FSourceFileParseContext& Context)"
  },
  {
    "label": "ParseSourceText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseSourceText(const FString& Text, const TArray<FParsableDescriptor*>& Parsables, FSourceFileParseContext& ParseCtxt, TArray<FParsedNestedMacro>& PrepassResults)"
  },
  {
    "label": "CountFileTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountFileTypes(const TArray<FString>& FilesToProcess, EGatherSourcePasses Pass)"
  },
  {
    "label": "PrunePrepassResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrunePrepassResults(TArray<FParsedNestedMacro>& Results)"
  },
  {
    "label": "HandledInPrepass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandledInPrepass(const TArray<FParsedNestedMacro>& Results, const FString& Filename, int32 LineNumber, int32& AdvanceByLines)"
  },
  {
    "label": "LogStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogStats()"
  }
]