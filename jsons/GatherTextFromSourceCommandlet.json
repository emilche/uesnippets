[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EGatherSourcePasses",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGatherSourcePasses"
  },
  {
    "label": "UGatherTextFromSourceCommandlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGatherTextFromSourceCommandlet"
  },
  {
    "label": "FSourceLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceLocation"
  },
  {
    "label": "FParsedStringTableEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParsedStringTableEntry"
  },
  {
    "label": "FParsedStringTableEntryMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParsedStringTableEntryMetaData"
  },
  {
    "label": "FParsedStringTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParsedStringTable"
  },
  {
    "label": "FParsedNestedMacro",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParsedNestedMacro"
  },
  {
    "label": "FManifestEntryResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManifestEntryResult"
  },
  {
    "label": "FMacroArgumentGatherer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMacroArgumentGatherer"
  },
  {
    "label": "FSourceFileParseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceFileParseContext"
  },
  {
    "label": "FParsableDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParsableDescriptor"
  },
  {
    "label": "FPreProcessorDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreProcessorDescriptor"
  },
  {
    "label": "FDefineDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefineDescriptor"
  },
  {
    "label": "FUndefDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUndefDescriptor"
  },
  {
    "label": "FIfDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIfDescriptor"
  },
  {
    "label": "FIfDefDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIfDefDescriptor"
  },
  {
    "label": "FElIfDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FElIfDescriptor"
  },
  {
    "label": "FElseDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FElseDescriptor"
  },
  {
    "label": "FEndIfDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEndIfDescriptor"
  },
  {
    "label": "FMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMacroDescriptor"
  },
  {
    "label": "FUICommandMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandMacroDescriptor"
  },
  {
    "label": "FUICommandExtMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandExtMacroDescriptor"
  },
  {
    "label": "FNestedMacroPrepassDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNestedMacroPrepassDescriptor"
  },
  {
    "label": "FNestedMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNestedMacroDescriptor"
  },
  {
    "label": "FStringMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringMacroDescriptor"
  },
  {
    "label": "EMacroArgSemantic",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMacroArgSemantic"
  },
  {
    "label": "FMacroArg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMacroArg"
  },
  {
    "label": "FStringTableMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringTableMacroDescriptor"
  },
  {
    "label": "FStringTableFromFileMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringTableFromFileMacroDescriptor"
  },
  {
    "label": "FStringTableEntryMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringTableEntryMacroDescriptor"
  },
  {
    "label": "FStringTableEntryMetaDataMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringTableEntryMetaDataMacroDescriptor"
  },
  {
    "label": "FStructuredLogMacroDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredLogMacroDescriptor"
  },
  {
    "label": "FIniNamespaceDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIniNamespaceDescriptor"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Framework / Commands / Commands . h \" # include \" Commandlets / GatherTextCommandletBase . h \" # include \" Internationalization / StringTableCore . h \" # include \" GatherTextFromSourceCommandlet . generated . h \" class Error ; enum class EGatherTextSourceFileTypes : uint8 { None = 0,Cpp = 1<<0,Ini = 1<<1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EGatherTextSourceFileTypes)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (enum EGatherSourcePasses : uint8 { Prepass = 0,Mainpass = 1,} ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "FSourceLocation()",
    "kind": "Method",
    "detail": "Function (Undefined,Defined,} ; struct FSourceLocation {)",
    "insertText": "FSourceLocation() : File() , Line(INDEX_NONE)"
  },
  {
    "label": "FSourceLocation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSourceLocation(FString InFile, const int32 InLine) : File(MoveTemp(InFile)) , Line(InLine)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "FParsedNestedMacro()",
    "kind": "Method",
    "detail": "Function (} FString File ; int32 Line ; } ; struct FParsedStringTableEntry { FString SourceString ; FSourceLocation SourceLocation ; FName PlatformName ; bool bIsEditorOnly ; } ; struct FParsedStringTableEntryMetaData { FString MetaData ; FSourceLocation SourceLocation ; bool bIsEditorOnly ; } ; typedef TMap<FName,FParsedStringTableEntryMetaData> FParsedStringTableEntryMetaDataMap ; struct FParsedStringTable { FString TableNamespace ; FSourceLocation SourceLocation ; TMap<FString,FParsedStringTableEntry,FDefaultSetAllocator,FLocKeyMapFuncs<FParsedStringTableEntry>> TableEntries ; TMap<FString,FParsedStringTableEntryMetaDataMap,FDefaultSetAllocator,FLocKeyMapFuncs<FParsedStringTableEntryMetaDataMap>> MetaDataEntries ; } ; struct FParsedNestedMacro { FString MacroName ; FString MacroNameNested ; FString Filename ; FString Content ; int32 LineStart ; int32 LineCount ; bool bExclude = false ;)",
    "insertText": "FParsedNestedMacro()"
  },
  {
    "label": "FParsedNestedMacro()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FParsedNestedMacro(const FString& InMacroName, const FString& InMacroNameNested, const FString& InFilename, const FString& InContent, int32 InLineStart, int32 InLineCount) : MacroName(InMacroName) , MacroNameNested(InMacroNameNested) , Filename(InFilename) , Content(InContent) , LineStart(InLineStart) , LineCount(InLineCount)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FParsedNestedMacro& Other)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Size(const FParsedNestedMacro& Result)"
  },
  {
    "label": "FManifestEntryResult()",
    "kind": "Method",
    "detail": "Function (} ; struct FManifestEntryResult { FLocKey Namespace ; FString Source ; FManifestContext Context ; FString Description ;)",
    "insertText": "FManifestEntryResult(const FLocKey& InNamespace, const FString& InSource, const FManifestContext& InContext, const FString& InDescription) : Namespace(InNamespace) , Source(InSource) , Context(InContext) , Description(InDescription)"
  },
  {
    "label": "FMacroArgumentGatherer()",
    "kind": "Method",
    "detail": "Function (} } ; class FMacroArgumentGatherer { public :)",
    "insertText": "FMacroArgumentGatherer()"
  },
  {
    "label": "Gather()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "Gather(const TCHAR* Arg, int32 Count)"
  },
  {
    "label": "EndArgument()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndArgument()"
  },
  {
    "label": "GetNumberOfArguments()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberOfArguments()"
  },
  {
    "label": "ExtractArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractArguments(TArray<FString>& Arguments)"
  },
  {
    "label": "OpenDoubleQuotes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenDoubleQuotes()"
  },
  {
    "label": "CloseDoubleQuotes()",
    "kind": "Method",
    "detail": "Function (bInDblQuotes = true ; } void)",
    "insertText": "CloseDoubleQuotes()"
  },
  {
    "label": "IsInDoubleQuotes()",
    "kind": "Method",
    "detail": "Function (bInDblQuotes = false ; } bool)",
    "insertText": "IsInDoubleQuotes()"
  },
  {
    "label": "CloseSingleQuotes()",
    "kind": "Method",
    "detail": "Function (bInSglQuotes = true ; } void)",
    "insertText": "CloseSingleQuotes()"
  },
  {
    "label": "IsInSingleQuotes()",
    "kind": "Method",
    "detail": "Function (bInSglQuotes = false ; } bool)",
    "insertText": "IsInSingleQuotes()"
  },
  {
    "label": "PushMacroBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushMacroBlock(const FString& InBlockCtx)"
  },
  {
    "label": "PopMacroBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopMacroBlock()"
  },
  {
    "label": "FlushMacroStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushMacroStack()"
  },
  {
    "label": "EvaluateEditorOnlyDefineState()",
    "kind": "Method",
    "detail": "Function (EEditorOnlyDefineState)",
    "insertText": "EvaluateEditorOnlyDefineState()"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(const FString& InDefineCtx)"
  },
  {
    "label": "RemoveDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDefine(const FString& InDefineCtx)"
  },
  {
    "label": "AddStringTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStringTable(const FName InTableId, const FString& InTableNamespace)"
  },
  {
    "label": "AddStringTableFromFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStringTableFromFile(const FName InTableId, const FString& InTableNamespace, const FString& InTableFilename, const FString& InRootPath)"
  },
  {
    "label": "AddStringTableEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStringTableEntry(const FName InTableId, const FString& InKey, const FString& InSourceString)"
  },
  {
    "label": "AddStringTableEntryMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStringTableEntryMetaData(const FName InTableId, const FString& InKey, const FName InMetaDataId, const FString& InMetaData)"
  },
  {
    "label": "FSourceFileParseContext()",
    "kind": "Method",
    "detail": "Function (EGatherTextSourceFileTypes FileTypes ; FString Filename ; int32 LineIdx ; int32 LineNumber ; FName FilePlatformName ; FString LineText ; FString Namespace ; FString RawStringLiteralClosingDelim ; bool ExcludedRegion ; bool EndParsingCurrentLine ; bool WithinBlockComment ; bool WithinLineComment ; bool WithinStringLiteral ; int32 WithinNamespaceDefineLineNumber ; const TCHAR* WithinStartingLine ; bool ShouldGatherFromEditorOnlyData ; TMap<FName,FParsedStringTable> ParsedStringTables ; TArray<FString> TextLines ; EGatherSourcePasses Pass ; TArray<FManifestEntryResult>& MainpassResults ; bool bIsNested = false ;)",
    "insertText": "FSourceFileParseContext(const TMap<FName, FString>& inSplitPlatforms, TArray<FManifestEntryResult>& IoMainpassResults) : FileTypes(EGatherTextSourceFileTypes::None) , Filename() , LineIdx(0) , LineNumber(0) , FilePlatformName() , LineText() , Namespace() , ExcludedRegion(false) , EndParsingCurrentLine(false) , WithinBlockComment(false) , WithinLineComment(false) , WithinStringLiteral(false) , WithinNamespaceDefineLineNumber(INDEX_NONE) , WithinStartingLine(nullptr) , ShouldGatherFromEditorOnlyData(false) , Pass(EGatherSourcePasses::Prepass) , MainpassResults(IoMainpassResults) , MacroBlockStack() , CachedEditorOnlyDefineState() , SplitPlatforms(inSplitPlatforms)"
  },
  {
    "label": "AddStringTableImpl()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "AddStringTableImpl(const FName InTableId, const FString& InTableNamespace)"
  },
  {
    "label": "AddStringTableEntryImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddStringTableEntryImpl(const FName InTableId, const FString& InKey, const FString& InSourceString, const FSourceLocation& InSourceLocation, const FName InPlatformName)"
  },
  {
    "label": "AddStringTableEntryMetaDataImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddStringTableEntryMetaDataImpl(const FName InTableId, const FString& InKey, const FName InMetaDataId, const FString& InMetaData, const FSourceLocation& InSourceLocation)"
  },
  {
    "label": "FParsableDescriptor()",
    "kind": "Method",
    "detail": "Function (TArray<FString> MacroBlockStack ; TOptional<EEditorOnlyDefineState> CachedEditorOnlyDefineState ; TMap<FName,FString> SplitPlatforms ; } ; class FParsableDescriptor { public : ~)",
    "insertText": "FParsableDescriptor()"
  },
  {
    "label": "GetToken()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetToken()"
  },
  {
    "label": "TryParse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryParse(const FString& Text, FSourceFileParseContext& Context)"
  },
  {
    "label": "IsApplicableFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsApplicableFile(const FString& InFilename)"
  },
  {
    "label": "OverridesLongerTokens()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OverridesLongerTokens()"
  },
  {
    "label": "FMacroDescriptor()",
    "kind": "Method",
    "detail": "Function (} ; class FMacroDescriptor : public FParsableDescriptor { public : const FString TextMacroString ;)",
    "insertText": "FMacroDescriptor(FString InName, int32 InMinArgumentNumber) : Name(MoveTemp(InName)) , MinArgumentNumber(InMinArgumentNumber)"
  },
  {
    "label": "ParseArgsFromNextLines()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseArgsFromNextLines(FMacroArgumentGatherer& ArgsGatherer, int32& BracketStack, FSourceFileParseContext& Context)"
  },
  {
    "label": "ParseArgumentString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseArgumentString(const FString& Text, const int32 OpenBracketIdx, int32& BracketStack, const FSourceFileParseContext& Context, FMacroArgumentGatherer& ArgsGatherer)"
  },
  {
    "label": "PrepareArgument()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareArgument(FString& Argument, bool IsAutoText, const FString& IdentForLogging, bool& OutHasQuotes)"
  },
  {
    "label": "FUICommandMacroDescriptor()",
    "kind": "Method",
    "detail": "Function (private : const FString Name ; const int32 MinArgumentNumber ; } ; class FUICommandMacroDescriptor : public FMacroDescriptor { public :)",
    "insertText": "FUICommandMacroDescriptor() : FMacroDescriptor(MacroString_UI_COMMAND, 5)"
  },
  {
    "label": "FUICommandMacroDescriptor()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FUICommandMacroDescriptor(FString InName, int32 InMinNumberOfArgument) : FMacroDescriptor(MoveTemp(InName), InMinNumberOfArgument)"
  },
  {
    "label": "TryParseArgs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TryParseArgs(const FString& Text, FSourceFileParseContext& Context, const TArray<FString>& Arguments, const int32 ArgIndexOffset)"
  },
  {
    "label": "FUICommandExtMacroDescriptor()",
    "kind": "Method",
    "detail": "Function (} ; class FUICommandExtMacroDescriptor : public FUICommandMacroDescriptor { public :)",
    "insertText": "FUICommandExtMacroDescriptor() : FUICommandMacroDescriptor(MacroString_UI_COMMAND_EXT, 5)"
  },
  {
    "label": "FNestedMacroPrepassDescriptor()",
    "kind": "Method",
    "detail": "Function (} ; class FNestedMacroPrepassDescriptor : public FMacroDescriptor { public :)",
    "insertText": "FNestedMacroPrepassDescriptor(TArray<FParsedNestedMacro>& InPrepassResults) : FMacroDescriptor(UGatherTextFromSourceCommandlet::DefineString, INT_MAX) , PrepassResults(InPrepassResults)"
  },
  {
    "label": "FNestedMacroDescriptor()",
    "kind": "Method",
    "detail": "Function (private : TArray<FParsedNestedMacro>& PrepassResults ; } ; class FNestedMacroDescriptor : public FMacroDescriptor { public :)",
    "insertText": "FNestedMacroDescriptor(FString InMacroName, FString InMacroNameNested, FString InFilename, FString InContent) : FMacroDescriptor(MoveTemp(InMacroName), 1) , MacroNameNested(MoveTemp(InMacroNameNested)) , Filename(MoveTemp(InFilename)) , Content(MoveTemp(InContent))"
  },
  {
    "label": "TestNestedMacroDescriptorParseArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestNestedMacroDescriptorParseArgs()"
  },
  {
    "label": "TryParseArgs()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "TryParseArgs(const FString& MacroInnerParams, FString& ParamsNewAll)"
  },
  {
    "label": "FMacroArg()",
    "kind": "Method",
    "detail": "Function (const FString MacroNameNested ; const FString Filename ; const FString Content ; } ; class FStringMacroDescriptor : public FMacroDescriptor { public : enum EMacroArgSemantic { MAS_Namespace,MAS_Identifier,MAS_SourceText,} ; struct FMacroArg { EMacroArgSemantic Semantic ; bool IsAutoText ;)",
    "insertText": "FMacroArg(EMacroArgSemantic InSema, bool InIsAutoText) : Semantic(InSema), IsAutoText(InIsAutoText)"
  },
  {
    "label": "FStringMacroDescriptor()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FStringMacroDescriptor(FString InName, FMacroArg Arg0, FMacroArg Arg1, FMacroArg Arg2) : FMacroDescriptor(InName, 3)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ApplicableFileTypes = EGatherTextSourceFileTypes::Cpp | EGatherTextSourceFileTypes::Ini ; Arguments .)",
    "insertText": "Add(Arg0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Arguments .)",
    "insertText": "Add(Arg1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Arguments .)",
    "insertText": "Add(Arg2)"
  },
  {
    "label": "FStringMacroDescriptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStringMacroDescriptor(FString InName, FMacroArg Arg0, FMacroArg Arg1) : FMacroDescriptor(InName, 2)"
  },
  {
    "label": "FStringMacroDescriptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStringMacroDescriptor(FString InName, FMacroArg Arg0) : FMacroDescriptor(InName, 1)"
  },
  {
    "label": "TryParse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TryParse(const FString& LineText, FSourceFileParseContext& Context)"
  },
  {
    "label": "FStringTableMacroDescriptor()",
    "kind": "Method",
    "detail": "Function (private : TArray<FMacroArg> Arguments ; } ; class FStringTableMacroDescriptor : public FMacroDescriptor { public :)",
    "insertText": "FStringTableMacroDescriptor() : FMacroDescriptor(TEXT(\"LOCTABLE_NEW\"), 2)"
  },
  {
    "label": "FStringTableFromFileMacroDescriptor()",
    "kind": "Method",
    "detail": "Function (} ; class FStringTableFromFileMacroDescriptor : public FMacroDescriptor { public :)",
    "insertText": "FStringTableFromFileMacroDescriptor(FString InName, FString InRootPath) : FMacroDescriptor(MoveTemp(InName), 3), RootPath(MoveTemp(InRootPath))"
  },
  {
    "label": "FStringTableEntryMacroDescriptor()",
    "kind": "Method",
    "detail": "Function (private : FString RootPath ; } ; class FStringTableEntryMacroDescriptor : public FMacroDescriptor { public :)",
    "insertText": "FStringTableEntryMacroDescriptor() : FMacroDescriptor(TEXT(\"LOCTABLE_SETSTRING\"), 3)"
  },
  {
    "label": "FStringTableEntryMetaDataMacroDescriptor()",
    "kind": "Method",
    "detail": "Function (} ; class FStringTableEntryMetaDataMacroDescriptor : public FMacroDescriptor { public :)",
    "insertText": "FStringTableEntryMetaDataMacroDescriptor() : FMacroDescriptor(TEXT(\"LOCTABLE_SETMETA\"), 4)"
  },
  {
    "label": "FStructuredLogMacroDescriptor()",
    "kind": "Method",
    "detail": "Function (} ; class FStructuredLogMacroDescriptor final : public FMacroDescriptor { public : enum class EFlags : int32 { None = 0,Namespace = 1,} ;)",
    "insertText": "FStructuredLogMacroDescriptor(const TCHAR* Name, EFlags Flags)"
  },
  {
    "label": "FIniNamespaceDescriptor()",
    "kind": "Method",
    "detail": "Function (private : EFlags Flags ; } ; class FIniNamespaceDescriptor : public FPreProcessorDescriptor { public :)",
    "insertText": "FIniNamespaceDescriptor()"
  },
  {
    "label": "GetFilesToProcess()",
    "kind": "Method",
    "detail": "Function (} ; const FString DefineString ; const FString MacroString_LOCTEXT ; const FString MacroString_NSLOCTEXT ; const FString MacroString_UI_COMMAND ; const FString MacroString_UI_COMMAND_EXT ; void)",
    "insertText": "GetFilesToProcess(const TArray<FString>& SearchDirectoryPaths, const TArray<FString>& FileNameFilters, TArray<FString>& IncludePathFilters, TArray<FString>& ExcludePathFilters, TArray<FString>& FilesToProcess, bool bAdditionalGatherPaths)"
  },
  {
    "label": "GetParsables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetParsables(TArray<FParsableDescriptor*>& Parsables, EGatherSourcePasses Pass, TArray<FParsedNestedMacro>& PrepassResults)"
  },
  {
    "label": "RunPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPass(EGatherSourcePasses Pass, bool ShouldGatherFromEditorOnlyData, const TArray<FString>& FilesToProcess, const FString& GatheredSourceBasePath, TArray<FParsedNestedMacro>& PrepassResults)"
  },
  {
    "label": "UnescapeLiteralCharacterEscapeSequences()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "UnescapeLiteralCharacterEscapeSequences(const FString& InString)"
  },
  {
    "label": "RemoveStringFromTextMacro()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RemoveStringFromTextMacro(const FString& TextMacro, const FString& IdentForLogging, bool& Error)"
  },
  {
    "label": "StripCommentsFromToken()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "StripCommentsFromToken(const FString& InToken, FSourceFileParseContext& Context)"
  },
  {
    "label": "ParseSourceText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseSourceText(const FString& Text, const TArray<FParsableDescriptor*>& Parsables, FSourceFileParseContext& ParseCtxt, TArray<FParsedNestedMacro>& PrepassResults)"
  },
  {
    "label": "CountFileTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountFileTypes(const TArray<FString>& FilesToProcess, EGatherSourcePasses Pass)"
  },
  {
    "label": "PrunePrepassResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrunePrepassResults(TArray<FParsedNestedMacro>& Results)"
  },
  {
    "label": "HandledInPrepass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandledInPrepass(const TArray<FParsedNestedMacro>& Results, const FString& Filename, int32 LineNumber, int32& AdvanceByLines)"
  },
  {
    "label": "Main()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "Main(const FString& Params)"
  },
  {
    "label": "ShouldRunInPreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRunInPreview(const TArray<FString>& Switches, const TMap<FString, FString>& ParamVals)"
  },
  {
    "label": "LogStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogStats()"
  }
]