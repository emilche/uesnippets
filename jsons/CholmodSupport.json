[
  {
    "label": "cholmod_configure_matrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "cholmod_configure_matrix"
  },
  {
    "label": "CholmodMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CholmodMode"
  },
  {
    "label": "CholmodBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CholmodBase"
  },
  {
    "label": "CholmodSimplicialLLT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CholmodSimplicialLLT"
  },
  {
    "label": "CholmodSimplicialLDLT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CholmodSimplicialLDLT"
  },
  {
    "label": "CholmodSupernodalLLT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CholmodSupernodalLLT"
  },
  {
    "label": "CholmodDecomposition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CholmodDecomposition"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CHOLMODSUPPORT_H # define EIGEN_CHOLMODSUPPORT_H namespace Eigen { namespace internal { template<Scalar> struct cholmod_configure_matrix ; template<> struct cholmod_configure_matrix<double> { template<CholmodType> void)",
    "insertText": "run(CholmodType& mat)"
  },
  {
    "label": "viewAsCholmod()",
    "kind": "Method",
    "detail": "Function (mat . xtype = CHOLMOD_COMPLEX ; mat . dtype = CHOLMOD_DOUBLE ; } } ; } template<_Scalar,int _Options,_StorageIndex> cholmod_sparse)",
    "insertText": "viewAsCholmod(Ref<SparseMatrix<_Scalar,_Options,_StorageIndex> > mat)"
  },
  {
    "label": "nonZeros()",
    "kind": "Method",
    "detail": "Function (cholmod_sparse res ; res . nzmax = mat .)",
    "insertText": "nonZeros()"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (res . nrow = mat .)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (res . ncol = mat .)",
    "insertText": "cols()"
  },
  {
    "label": "outerIndexPtr()",
    "kind": "Method",
    "detail": "Function (res . p = mat .)",
    "insertText": "outerIndexPtr()"
  },
  {
    "label": "innerIndexPtr()",
    "kind": "Method",
    "detail": "Function (res . i = mat .)",
    "insertText": "innerIndexPtr()"
  },
  {
    "label": "valuePtr()",
    "kind": "Method",
    "detail": "Function (res . x = mat .)",
    "insertText": "valuePtr()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (res . z = 0 ; res . sorted = 1 ;)",
    "insertText": "if(mat.isCompressed())"
  },
  {
    "label": "innerNonZeroPtr()",
    "kind": "Method",
    "detail": "Function (res . packed = 1 ; res . nz = 0 ; } else { res . packed = 0 ; res . nz = mat .)",
    "insertText": "innerNonZeroPtr()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} res . dtype = 0 ; res . stype = - 1 ;)",
    "insertText": "if(internal::is_same<_StorageIndex,int>::value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (res . itype = CHOLMOD_INT ; } else)",
    "insertText": "if(internal::is_same<_StorageIndex,SuiteSparse_long>::value)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (res . itype = CHOLMOD_LONG ; } else {)",
    "insertText": "eigen_assert(false && \"Index type not supported yet\")"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} internal::cholmod_configure_matrix<_Scalar)",
    "insertText": "run(res)"
  },
  {
    "label": "viewAsCholmod()",
    "kind": "Method",
    "detail": "Function (res . stype = 0 ; return res ; } template<_Scalar,int _Options,_Index> const cholmod_sparse)",
    "insertText": "viewAsCholmod(const SparseMatrix<_Scalar,_Options,_Index>& mat)"
  },
  {
    "label": "viewAsCholmod()",
    "kind": "Method",
    "detail": "Function (cholmod_sparse res =)",
    "insertText": "viewAsCholmod(Ref<SparseMatrix<_Scalar,_Options,_Index> >(mat.const_cast_derived()))"
  },
  {
    "label": "viewAsCholmod()",
    "kind": "Method",
    "detail": "Function (cholmod_sparse res =)",
    "insertText": "viewAsCholmod(Ref<SparseMatrix<_Scalar,_Options,_Index> >(mat.matrix().const_cast_derived()))"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((_Options & RowMajorBit) == 0 || NumTraits<_Scalar>::IsComplex == 0, THIS_METHOD_IS_ONLY_FOR_COLUMN_MAJOR_MATRICES)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((internal::traits<Derived>::Flags&RowMajorBit)==0,THIS_METHOD_IS_ONLY_FOR_COLUMN_MAJOR_MATRICES)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (res . nzmax = res . nrow* res . ncol ; res . d = Derived::IsVectorAtCompileTime ? mat .)",
    "insertText": "derived().size() : mat.derived().outerStride()"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "x(void*)(mat.derived().data())"
  },
  {
    "label": "EIGEN_CHOLMOD_SPECIALIZE0()",
    "kind": "Method",
    "detail": "Function (} namespace internal { # define)",
    "insertText": "EIGEN_CHOLMOD_SPECIALIZE0(ret, name) \\ template<typename _StorageIndex> inline ret cm_ ## name (cholmod_common &Common)"
  },
  {
    "label": "SuiteSparse_long()",
    "kind": "Method",
    "detail": "Function (} \\ template<> ret cm_ # # name<)",
    "insertText": "SuiteSparse_long(cholmod_common &Common)"
  },
  {
    "label": "EIGEN_CHOLMOD_SPECIALIZE1()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "EIGEN_CHOLMOD_SPECIALIZE1(ret, name, t1, a1) \\ template<typename _StorageIndex> inline ret cm_ ## name (t1& a1, cholmod_common &Common)"
  },
  {
    "label": "SuiteSparse_long()",
    "kind": "Method",
    "detail": "Function (} \\ template<> ret cm_ # # name<)",
    "insertText": "SuiteSparse_long(t1& a1, cholmod_common &Common)"
  },
  {
    "label": "EIGEN_CHOLMOD_SPECIALIZE0()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_CHOLMOD_SPECIALIZE0(int, start) EIGEN_CHOLMOD_SPECIALIZE0(int, finish) EIGEN_CHOLMOD_SPECIALIZE1(int, free_factor, cholmod_factor*, L) EIGEN_CHOLMOD_SPECIALIZE1(int, free_dense, cholmod_dense*, X) EIGEN_CHOLMOD_SPECIALIZE1(int, free_sparse, cholmod_sparse*, A) EIGEN_CHOLMOD_SPECIALIZE1(cholmod_factor*, analyze, cholmod_sparse, A) template<typename _StorageIndex> inline cholmod_dense* cm_solve (int sys, cholmod_factor& L, cholmod_dense& B, cholmod_common &Common)"
  },
  {
    "label": "SuiteSparse_long()",
    "kind": "Method",
    "detail": "Function (} template<> cholmod_dense* cm_solve<)",
    "insertText": "SuiteSparse_long(int sys, cholmod_factor& L, cholmod_dense& B, cholmod_common &Common)"
  },
  {
    "label": "cm_spsolve()",
    "kind": "Method",
    "detail": "Function (} template<_StorageIndex> cholmod_sparse*)",
    "insertText": "cm_spsolve(int sys, cholmod_factor& L, cholmod_sparse& B, cholmod_common &Common)"
  },
  {
    "label": "SuiteSparse_long()",
    "kind": "Method",
    "detail": "Function (} template<> cholmod_sparse* cm_spsolve<)",
    "insertText": "SuiteSparse_long(int sys, cholmod_factor& L, cholmod_sparse& B, cholmod_common &Common)"
  },
  {
    "label": "cm_factorize_p()",
    "kind": "Method",
    "detail": "Function (} template<_StorageIndex> int)",
    "insertText": "cm_factorize_p(cholmod_sparse* A, double beta[2], _StorageIndex* fset, std::size_t fsize, cholmod_factor* L, cholmod_common &Common)"
  },
  {
    "label": "SuiteSparse_long()",
    "kind": "Method",
    "detail": "Function (} template<> int cm_factorize_p<)",
    "insertText": "SuiteSparse_long(cholmod_sparse* A, double beta[2], SuiteSparse_long* fset, std::size_t fsize, cholmod_factor* L, cholmod_common &Common)"
  },
  {
    "label": "CholmodBase()",
    "kind": "Method",
    "detail": "Function (} # undef EIGEN_CHOLMOD_SPECIALIZE0 # undef EIGEN_CHOLMOD_SPECIALIZE1 } enum CholmodMode { CholmodAuto,CholmodSimplicialLLt,CholmodSupernodalLLt,CholmodLDLt } ; template<_MatrixType,int _UpLo,Derived> class CholmodBase : public SparseSolverBase<Derived> { protected : typedef SparseSolverBase<Derived> Base ; using Base::derived ; using Base::m_isInitialized ; public : typedef _MatrixType MatrixType ; enum { UpLo = _UpLo } ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef MatrixType CholMatrixType ; typedef MatrixType::StorageIndex StorageIndex ; enum { ColsAtCompileTime = MatrixType::ColsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ; public :)",
    "insertText": "CholmodBase() : m_cholmodFactor(0), m_info(Success), m_factorizationIsOk(false), m_analysisIsOk(false)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((internal::is_same<double,RealScalar>::value), CHOLMOD_SUPPORTS_DOUBLE_PRECISION_ONLY)"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (m_shiftOffset [ 0 ] = m_shiftOffset [ 1 ] = 0 . 0 ; internal::cm_start<)",
    "insertText": "StorageIndex(m_cholmod)"
  },
  {
    "label": "CholmodBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CholmodBase(const MatrixType& matrix) : m_cholmodFactor(0), m_info(Success), m_factorizationIsOk(false), m_analysisIsOk(false)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix)"
  },
  {
    "label": "CholmodBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CholmodBase()"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (} ComputationInfo)",
    "insertText": "info()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"Decomposition is not initialized.\")"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzePattern(matrix)"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "factorize(matrix)"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "analyzePattern(const MatrixType& matrix)"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (internal::cm_free_factor<)",
    "insertText": "StorageIndex(m_cholmodFactor, m_cholmod)"
  },
  {
    "label": "viewAsCholmod()",
    "kind": "Method",
    "detail": "Function (m_cholmodFactor = 0 ; } cholmod_sparse A =)",
    "insertText": "viewAsCholmod(matrix.template selfadjointView<UpLo>())"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (m_cholmodFactor = internal::cm_analyze<)",
    "insertText": "StorageIndex(A, m_cholmod)"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (this -> m_isInitialized = true ; this -> m_info = Success ; m_analysisIsOk = true ; m_factorizationIsOk = false ; } void)",
    "insertText": "factorize(const MatrixType& matrix)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_analysisIsOk && \"You must first call analyzePattern()\")"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (internal::cm_factorize_p<)",
    "insertText": "StorageIndex(&A, m_shiftOffset, 0, 0, m_cholmodFactor, m_cholmod)"
  },
  {
    "label": "m_info()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "m_info(m_cholmodFactor->minor == m_cholmodFactor->n ? Success : NumericalIssue)"
  },
  {
    "label": "cholmod()",
    "kind": "Method",
    "detail": "Function (m_factorizationIsOk = true ; } cholmod_common&)",
    "insertText": "cholmod()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_factorizationIsOk && \"The decomposition is not in a valid state for solving, you must first call either compute() or symbolic()/numeric()\")"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (const Index size = m_cholmodFactor -> n ;)",
    "insertText": "EIGEN_UNUSED_VARIABLE(size)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(size==b.rows())"
  },
  {
    "label": "b_ref()",
    "kind": "Method",
    "detail": "Function (Ref<const Matrix<Rhs::Scalar,Dynamic,Dynamic,ColMajor>>)",
    "insertText": "b_ref(b.derived())"
  },
  {
    "label": "viewAsCholmod()",
    "kind": "Method",
    "detail": "Function (cholmod_dense b_cd =)",
    "insertText": "viewAsCholmod(b_ref)"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (cholmod_dense* x_cd = internal::cm_solve<)",
    "insertText": "StorageIndex(CHOLMOD_A, *m_cholmodFactor, b_cd, m_cholmod)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (this -> m_info = NumericalIssue ; return ; } dest = Matrix<Scalar,Dest::RowsAtCompileTime,Dest::ColsAtCompileTime)",
    "insertText": "Map(reinterpret_cast<Scalar*>(x_cd->x),b.rows(),b.cols())"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (internal::cm_free_dense<)",
    "insertText": "StorageIndex(x_cd, m_cholmod)"
  },
  {
    "label": "_solve_impl()",
    "kind": "Method",
    "detail": "Function (} template<RhsDerived,DestDerived> void)",
    "insertText": "_solve_impl(const SparseMatrixBase<RhsDerived> &b, SparseMatrixBase<DestDerived> &dest)"
  },
  {
    "label": "b_ref()",
    "kind": "Method",
    "detail": "Function (Ref<SparseMatrix<RhsDerived::Scalar,ColMajor,RhsDerived::StorageIndex>>)",
    "insertText": "b_ref(b.const_cast_derived())"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (cholmod_sparse* x_cs = internal::cm_spsolve<)",
    "insertText": "StorageIndex(CHOLMOD_A, *m_cholmodFactor, b_cs, m_cholmod)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (this -> m_info = NumericalIssue ; return ; } dest .)",
    "insertText": "derived() = viewAsEigen<typename DestDerived::Scalar,ColMajor,typename DestDerived::StorageIndex>(*x_cs)"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (internal::cm_free_sparse<)",
    "insertText": "StorageIndex(x_cs, m_cholmod)"
  },
  {
    "label": "setShift()",
    "kind": "Method",
    "detail": "Function (} # endif Derived&)",
    "insertText": "setShift(const RealScalar& offset)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (m_shiftOffset [ 0 ] =)",
    "insertText": "double(offset)"
  },
  {
    "label": "determinant()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "determinant()"
  },
  {
    "label": "exp()",
    "kind": "Method",
    "detail": "Function (using std::exp ; return)",
    "insertText": "exp(logDeterminant())"
  },
  {
    "label": "logDeterminant()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "logDeterminant()"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (RealScalar logDet = 0 ; Scalar* x = static_cast<)",
    "insertText": "Scalar(m_cholmodFactor->x)"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (StorageIndex* super = static_cast<)",
    "insertText": "StorageIndex(m_cholmodFactor->super)"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (StorageIndex* pi = static_cast<)",
    "insertText": "StorageIndex(m_cholmodFactor->pi)"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (StorageIndex* px = static_cast<)",
    "insertText": "StorageIndex(m_cholmodFactor->px)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index nb_super_nodes = m_cholmodFactor -> nsuper ;)",
    "insertText": "for(Index k=0; k < nb_super_nodes; ++k)"
  },
  {
    "label": "sk()",
    "kind": "Method",
    "detail": "Function (StorageIndex ncols = super [ k + 1 ] - super [ k ] ; StorageIndex nrows = pi [ k + 1 ] - pi [ k ] ; Map<const Array<Scalar,1,Dynamic>,0,InnerStride<>>)",
    "insertText": "sk(x + px[k], ncols, InnerStride<>(nrows+1))"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (logDet + = sk .)",
    "insertText": "real().log().sum()"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (} } else { StorageIndex* p = static_cast<)",
    "insertText": "StorageIndex(m_cholmodFactor->p)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index size = m_cholmodFactor -> n ;)",
    "insertText": "for(Index k=0; k<size; ++k) logDet += log(real( x[p[k]] ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(m_cholmodFactor->is_ll)"
  },
  {
    "label": "CholmodSimplicialLLT()",
    "kind": "Method",
    "detail": "Function (} protected : cholmod_common m_cholmod ; cholmod_factor* m_cholmodFactor ; double m_shiftOffset [ 2 ] ; ComputationInfo m_info ; int m_factorizationIsOk ; int m_analysisIsOk ; } ; template<_MatrixType,int _UpLo = Lower> class CholmodSimplicialLLT : public CholmodBase<_MatrixType,_UpLo,CholmodSimplicialLLT<_MatrixType,_UpLo>> { typedef CholmodBase<_MatrixType,_UpLo,CholmodSimplicialLLT> Base ; using Base::m_cholmod ; public : typedef _MatrixType MatrixType ;)",
    "insertText": "CholmodSimplicialLLT() : Base()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init()"
  },
  {
    "label": "CholmodSimplicialLLT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CholmodSimplicialLLT(const MatrixType& matrix) : Base()"
  },
  {
    "label": "CholmodSimplicialLLT()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CholmodSimplicialLLT()"
  },
  {
    "label": "CholmodSimplicialLDLT()",
    "kind": "Method",
    "detail": "Function (m_cholmod . final_asis = 0 ; m_cholmod . supernodal = CHOLMOD_SIMPLICIAL ; m_cholmod . final_ll = 1 ; } } ; template<_MatrixType,int _UpLo = Lower> class CholmodSimplicialLDLT : public CholmodBase<_MatrixType,_UpLo,CholmodSimplicialLDLT<_MatrixType,_UpLo>> { typedef CholmodBase<_MatrixType,_UpLo,CholmodSimplicialLDLT> Base ; using Base::m_cholmod ; public : typedef _MatrixType MatrixType ;)",
    "insertText": "CholmodSimplicialLDLT() : Base()"
  },
  {
    "label": "CholmodSimplicialLDLT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CholmodSimplicialLDLT(const MatrixType& matrix) : Base()"
  },
  {
    "label": "CholmodSimplicialLDLT()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CholmodSimplicialLDLT()"
  },
  {
    "label": "CholmodSupernodalLLT()",
    "kind": "Method",
    "detail": "Function (m_cholmod . final_asis = 1 ; m_cholmod . supernodal = CHOLMOD_SIMPLICIAL ; } } ; template<_MatrixType,int _UpLo = Lower> class CholmodSupernodalLLT : public CholmodBase<_MatrixType,_UpLo,CholmodSupernodalLLT<_MatrixType,_UpLo>> { typedef CholmodBase<_MatrixType,_UpLo,CholmodSupernodalLLT> Base ; using Base::m_cholmod ; public : typedef _MatrixType MatrixType ;)",
    "insertText": "CholmodSupernodalLLT() : Base()"
  },
  {
    "label": "CholmodSupernodalLLT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CholmodSupernodalLLT(const MatrixType& matrix) : Base()"
  },
  {
    "label": "CholmodSupernodalLLT()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CholmodSupernodalLLT()"
  },
  {
    "label": "CholmodDecomposition()",
    "kind": "Method",
    "detail": "Function (m_cholmod . final_asis = 1 ; m_cholmod . supernodal = CHOLMOD_SUPERNODAL ; } } ; template<_MatrixType,int _UpLo = Lower> class CholmodDecomposition : public CholmodBase<_MatrixType,_UpLo,CholmodDecomposition<_MatrixType,_UpLo>> { typedef CholmodBase<_MatrixType,_UpLo,CholmodDecomposition> Base ; using Base::m_cholmod ; public : typedef _MatrixType MatrixType ;)",
    "insertText": "CholmodDecomposition() : Base()"
  },
  {
    "label": "CholmodDecomposition()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CholmodDecomposition(const MatrixType& matrix) : Base()"
  },
  {
    "label": "CholmodDecomposition()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CholmodDecomposition()"
  },
  {
    "label": "setMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setMode(CholmodMode mode)"
  }
]