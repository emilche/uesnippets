[
  {
    "label": "IFileManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFileManager"
  },
  {
    "label": "FProcHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcHandle"
  },
  {
    "label": "FLinuxTargetDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinuxTargetDevice"
  },
  {
    "label": "ITargetPlatformSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformSettings"
  },
  {
    "label": "ITargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformControls"
  },
  {
    "label": "stat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stat"
  },
  {
    "label": "FLinuxTargetDevice()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Paths . h \" # include \" HAL / FileManager . h \" # include \" HAL / PlatformProcess . h \" # include \" Interfaces / ITargetPlatform . h \" # include \" Interfaces / ITargetDevice . h \" # include \" Interfaces / TargetDeviceId . h \" # if PLATFORM_LINUX # include<signal . h> # include<pwd . h> # endif class IFileManager ; struct FProcHandle ; typedef TSharedPtr<class FLinuxTargetDevice,ESPMode::ThreadSafe> FLinuxTargetDevicePtr ; typedef TSharedRef<class FLinuxTargetDevice,ESPMode::ThreadSafe> FLinuxTargetDeviceRef ; class FLinuxTargetDevice : public ITargetDevice { public :)",
    "insertText": "FLinuxTargetDevice(const ITargetPlatformControls& InTargetPlatformControls, const FString& InDeviceName, TFunction<void()> InSavePlatformDevices) : TargetPlatformControls(InTargetPlatformControls) , DeviceName(InDeviceName) , SavePlatformDevices(InSavePlatformDevices)"
  },
  {
    "label": "FLinuxTargetDevice()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLinuxTargetDevice(const ITargetPlatformControls& InTargetPlatformControls) : FLinuxTargetDevice(InTargetPlatformControls, TEXT(\"UnknownName\"), nullptr)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "Connect()"
  },
  {
    "label": "GetDeviceType()",
    "kind": "Method",
    "detail": "Function (} ETargetDeviceTypes)",
    "insertText": "GetDeviceType()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetProcessSnapshot()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetProcessSnapshot(TArray<FTargetDeviceProcessInfo>& OutProcessInfos)"
  },
  {
    "label": "STUBBED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STUBBED(\"FLinuxTargetDevice::GetProcessSnapshot\")"
  },
  {
    "label": "GetPlatformControls()",
    "kind": "Method",
    "detail": "Function (} const class ITargetPlatformControls&)",
    "insertText": "GetPlatformControls()"
  },
  {
    "label": "STUBBED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STUBBED(\"FLinuxTargetDevice::Reboot\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UserName = InUserName ; UserPassword = InUserPassword ;)",
    "insertText": "if(SavePlatformDevices)"
  },
  {
    "label": "SavePlatformDevices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SavePlatformDevices()"
  },
  {
    "label": "GetUserCredentials()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "GetUserCredentials(FString& OutUserName, FString& OutUserPassword)"
  },
  {
    "label": "TerminateProcess()",
    "kind": "Method",
    "detail": "Function (OutUserName = UserName ; OutUserPassword = UserPassword ; return true ; } bool)",
    "insertText": "TerminateProcess(const int64 ProcessId)"
  },
  {
    "label": "Sprintf()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_LINUX const int32 ReadLinkSize = 1 0 2 4 ; char ReadLinkCmd [ ReadLinkSize ] = { 0 } ;)",
    "insertText": "Sprintf(ReadLinkCmd, \"/proc/%lld/exe\", ProcessId)"
  },
  {
    "label": "readlink()",
    "kind": "Method",
    "detail": "Function (char ProcessPath [ UNIX_MAX_PATH + 1 ] = { 0 } ; int32 Ret =)",
    "insertText": "readlink(ReadLinkCmd, ProcessPath, UE_ARRAY_COUNT(ProcessPath) - 1)"
  },
  {
    "label": "stat()",
    "kind": "Method",
    "detail": "Function (struct stat st ; uid_t euid ;)",
    "insertText": "stat(ProcessPath, &st)"
  },
  {
    "label": "geteuid()",
    "kind": "Method",
    "detail": "Function (euid =)",
    "insertText": "geteuid()"
  },
  {
    "label": "kill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "kill(ProcessId, SIGTERM)"
  },
  {
    "label": "sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sleep(2)"
  },
  {
    "label": "kill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "kill(ProcessId, SIGKILL)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif return false ; } protected : const ITargetPlatformControls& TargetPlatformControls ; FString DeviceName ; FString UserName ; FString UserPassword ; TFunction<)",
    "insertText": "void()"
  }
]