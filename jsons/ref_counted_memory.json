[
  {
    "label": "ReadOnlySharedMemoryRegion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReadOnlySharedMemoryRegion"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_REF_COUNTED_MEMORY_H_ # define BASE_MEMORY_REF_COUNTED_MEMORY_H_ # include<stddef . h> # include<memory> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / containers / span . h \" # include \" base / memory / ref_counted . h \" # include \" base / memory / shared_memory_mapping . h \" namespace base { class ReadOnlySharedMemoryRegion ; class BASE_EXPORT RefCountedMemory : public RefCountedThreadSafe<RefCountedMemory> { public : const unsigned char*)",
    "insertText": "front()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "size()"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const scoped_refptr<RefCountedMemory>& other)"
  },
  {
    "label": "front_as()",
    "kind": "Method",
    "detail": "Function (template<T> const T*)",
    "insertText": "front_as()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} const unsigned char*)",
    "insertText": "data()"
  },
  {
    "label": "RefCountedMemory()",
    "kind": "Method",
    "detail": "Function (} protected : class RefCountedThreadSafe<RefCountedMemory> ;)",
    "insertText": "RefCountedMemory()"
  },
  {
    "label": "RefCountedStaticMemory()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT RefCountedStaticMemory : public RefCountedMemory { public :)",
    "insertText": "RefCountedStaticMemory() : data_(nullptr), length_(0)"
  },
  {
    "label": "RefCountedStaticMemory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RefCountedStaticMemory(const void* data, size_t length) : data_(static_cast<const unsigned char*>(length ? data : nullptr)), length_(length)"
  },
  {
    "label": "RefCountedStaticMemory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RefCountedStaticMemory(const RefCountedStaticMemory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RefCountedStaticMemory&)",
    "insertText": "operator(const RefCountedStaticMemory&)"
  },
  {
    "label": "RefCountedStaticMemory()",
    "kind": "Method",
    "detail": "Function (private : ~)",
    "insertText": "RefCountedStaticMemory()"
  },
  {
    "label": "RefCountedBytes()",
    "kind": "Method",
    "detail": "Function (const unsigned char* data_ ; size_t length_ ; } ; class BASE_EXPORT RefCountedBytes : public RefCountedMemory { public :)",
    "insertText": "RefCountedBytes()"
  },
  {
    "label": "RefCountedBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefCountedBytes(const std::vector<unsigned char>& initializer)"
  },
  {
    "label": "RefCountedBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefCountedBytes(base::span<const unsigned char> initializer)"
  },
  {
    "label": "RefCountedBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefCountedBytes(const unsigned char* p, size_t size)"
  },
  {
    "label": "RefCountedBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefCountedBytes(size_t size)"
  },
  {
    "label": "RefCountedBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefCountedBytes(const RefCountedBytes&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RefCountedBytes&)",
    "insertText": "operator(const RefCountedBytes&)"
  },
  {
    "label": "TakeVector()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<RefCountedBytes>)",
    "insertText": "TakeVector(std::vector<unsigned char>* to_destroy)"
  },
  {
    "label": "RefCountedString()",
    "kind": "Method",
    "detail": "Function (std::vector<unsigned char> data_ ; } ; class BASE_EXPORT RefCountedString : public RefCountedMemory { public :)",
    "insertText": "RefCountedString()"
  },
  {
    "label": "RefCountedString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefCountedString(std::string value)"
  },
  {
    "label": "RefCountedString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefCountedString(const RefCountedString&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RefCountedString&)",
    "insertText": "operator(const RefCountedString&)"
  },
  {
    "label": "RefCountedString16()",
    "kind": "Method",
    "detail": "Function (std::string data_ ; } ; class BASE_EXPORT RefCountedString16 : public base::RefCountedMemory { public :)",
    "insertText": "RefCountedString16()"
  },
  {
    "label": "RefCountedString16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefCountedString16(std::u16string value)"
  },
  {
    "label": "RefCountedString16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefCountedString16(const RefCountedString16&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RefCountedString16&)",
    "insertText": "operator(const RefCountedString16&)"
  },
  {
    "label": "RefCountedSharedMemoryMapping()",
    "kind": "Method",
    "detail": "Function (private : std::u16string data_ ; } ; class BASE_EXPORT RefCountedSharedMemoryMapping : public RefCountedMemory { public :)",
    "insertText": "RefCountedSharedMemoryMapping(ReadOnlySharedMemoryMapping mapping)"
  },
  {
    "label": "RefCountedSharedMemoryMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefCountedSharedMemoryMapping(const RefCountedSharedMemoryMapping&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RefCountedSharedMemoryMapping&)",
    "insertText": "operator(const RefCountedSharedMemoryMapping&)"
  },
  {
    "label": "CreateFromWholeRegion()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<RefCountedSharedMemoryMapping>)",
    "insertText": "CreateFromWholeRegion(const ReadOnlySharedMemoryRegion& region)"
  },
  {
    "label": "RefCountedSharedMemoryMapping()",
    "kind": "Method",
    "detail": "Function (private : ~)",
    "insertText": "RefCountedSharedMemoryMapping()"
  }
]