[
  {
    "label": "ABSL_MUST_USE_RESULT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABSL_MUST_USE_RESULT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Payload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Payload"
  },
  {
    "label": "StatusRep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StatusRep"
  },
  {
    "label": "ABSL_HAVE_CPP_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STATUS_INTERNAL_STATUS_INTERNAL_H_ # define ABSL_STATUS_INTERNAL_STATUS_INTERNAL_H_ # include<memory> # include<string> # include<utility> # include \" absl / base / attributes . h \" # include \" absl / container / inlined_vector . h \" # include \" absl / strings / cord . h \" # ifndef SWIG namespace absl { ABSL_NAMESPACE_BEGIN # if)",
    "insertText": "ABSL_HAVE_CPP_ATTRIBUTE(nodiscard)"
  },
  {
    "label": "StatusRep()",
    "kind": "Method",
    "detail": "Function (# else class ABSL_MUST_USE_RESULT Status ; # endif ABSL_NAMESPACE_END } # endif namespace absl { ABSL_NAMESPACE_BEGIN enum class StatusCode : int ; namespace status_internal { struct Payload { std::string type_url ; absl::Cord payload ; } ; using Payloads = absl::InlinedVector<Payload,1> ; struct StatusRep {)",
    "insertText": "StatusRep(absl::StatusCode code_arg, absl::string_view message_arg, std::unique_ptr<status_internal::Payloads> payloads_arg) : ref(int32_t{1}), code(code_arg), message(message_arg), payloads(std::move(payloads_arg))"
  },
  {
    "label": "MapToLocalCode()",
    "kind": "Method",
    "detail": "Function (} std::atomic<int32_t> ref ; absl::StatusCode code ; std::string message ; std::unique_ptr<status_internal::Payloads> payloads ; } ; absl::StatusCode)",
    "insertText": "MapToLocalCode(int value)"
  },
  {
    "label": "MakeCheckFailString()",
    "kind": "Method",
    "detail": "Function (std::string*)",
    "insertText": "MakeCheckFailString(const absl::Status* status, const char* prefix)"
  }
]