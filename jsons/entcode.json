[
  {
    "label": "ec_ctx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ec_ctx"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# include \" opus_types . h \" # include \" opus_defines . h \" # if !)",
    "insertText": "defined(_entcode_H) # define _entcode_H (1)"
  },
  {
    "label": "EC_WINDOW_SIZE()",
    "kind": "Method",
    "detail": "Function (# ifdef OPUS_ARM_ASM # define USE_SMALL_DIV_TABLE # endif typedef opus_uint32 ec_window ; typedef struct ec_ctx ec_ctx ; typedef struct ec_ctx ec_enc ; typedef struct ec_ctx ec_dec ; # define)",
    "insertText": "EC_WINDOW_SIZE((int)sizeof(ec_window)*CHAR_BIT) # define EC_UINT_BITS (8)"
  },
  {
    "label": "ec_range_bytes()",
    "kind": "Method",
    "detail": "Function (unsigned char* buf ; opus_uint32 storage ; opus_uint32 end_offs ; ec_window end_window ; int nend_bits ; int nbits_total ; opus_uint32 offs ; opus_uint32 rng ; opus_uint32 val ; opus_uint32 ext ; int rem ; int error ; } ; OPUS_INLINE opus_uint32)",
    "insertText": "ec_range_bytes(ec_ctx *_this)"
  },
  {
    "label": "ec_tell_frac()",
    "kind": "Method",
    "detail": "Function (} opus_uint32)",
    "insertText": "ec_tell_frac(ec_ctx *_this)"
  },
  {
    "label": "celt_udiv()",
    "kind": "Method",
    "detail": "Function (OPUS_INLINE opus_uint32)",
    "insertText": "celt_udiv(opus_uint32 n, opus_uint32 d)"
  },
  {
    "label": "celt_sig_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "celt_sig_assert(d>0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef USE_SMALL_DIV_TABLE)",
    "insertText": "if(d>256)"
  },
  {
    "label": "q()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "q(opus_uint64)SMALL_DIV_TABLE[d>>t]*(n>>(t-1))"
  },
  {
    "label": "celt_sudiv()",
    "kind": "Method",
    "detail": "Function (} # else return n / d ; # endif } OPUS_INLINE opus_int32)",
    "insertText": "celt_sudiv(opus_int32 n, opus_int32 d)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef USE_SMALL_DIV_TABLE)",
    "insertText": "if(n<0) return -(opus_int32)celt_udiv(-n, d)"
  }
]