[
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FButtonArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FButtonArgs"
  },
  {
    "label": "FToolBarButtonBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FToolBarButtonBlock"
  },
  {
    "label": "IMultiBlockBaseWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMultiBlockBaseWidget"
  },
  {
    "label": "SToolBarButtonBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolBarButtonBlock"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Textures / SlateIcon . h \" # include \" Framework / Commands / UICommandInfo . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Framework / MultiBox / MultiBox . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" class SBorder ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FNewMenuDelegate, class FMenuBuilder&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(TSharedRef<SWidget>, FGetDecoratedButtonDelegate, TSharedRef<SWidget>)"
  },
  {
    "label": "FButtonArgs()",
    "kind": "Method",
    "detail": "Function (struct FButtonArgs : public TSharedFromThis<FButtonArgs> { TSharedPtr<const FUICommandInfo> Command ; TSharedPtr<const FUICommandList> CommandList ; FName ExtensionHook ; TAttribute<FText> LabelOverride ; TAttribute<FText> ToolbarLabelOverride ; TAttribute<FText> ToolTipOverride ; TAttribute<FSlateIcon> IconOverride ; FName TutorialHighlightName ; FName BorderBrushName ; EUserInterfaceActionType UserInterfaceActionType = EUserInterfaceActionType::None ; FUIAction Action ; FNewMenuDelegate CustomMenuDelegate ; FOnGetContent OnGetMenuContent ; FGetDecoratedButtonDelegate GetDecoratedButtonDelegate ;)",
    "insertText": "FButtonArgs()"
  },
  {
    "label": "FToolBarButtonBlock()",
    "kind": "Method",
    "detail": "Function (} } ; class FToolBarButtonBlock : public FMultiBlock { public :)",
    "insertText": "FToolBarButtonBlock(FButtonArgs ButtonArgs)"
  },
  {
    "label": "FToolBarButtonBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FToolBarButtonBlock(const TSharedPtr<const FUICommandInfo> InCommand, TSharedPtr<const FUICommandList> InCommandList, const TAttribute<FText>& InLabelOverride = TAttribute<FText>(), const TAttribute<FText>& InToolTipOverride = TAttribute<FText>(), const TAttribute<FSlateIcon>& InIconOverride = TAttribute<FSlateIcon>(), TAttribute<FText> InToolbarLabelOverride = TAttribute<FText>())"
  },
  {
    "label": "FToolBarButtonBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FToolBarButtonBlock(const TAttribute<FText>& InLabel, const TAttribute<FText>& InToolTip, const TAttribute<FSlateIcon>& InIcon, const FUIAction& InUIAction, const EUserInterfaceActionType InUserInterfaceActionType, TAttribute<FText> InToolbarLabelOverride = TAttribute<FText>())"
  },
  {
    "label": "SetLabelVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLabelVisibility(EVisibility InLabelVisibility)"
  },
  {
    "label": "SetIsFocusable()",
    "kind": "Method",
    "detail": "Function (LabelVisibility = InLabelVisibility ; } void)",
    "insertText": "SetIsFocusable(bool bInIsFocusable)"
  },
  {
    "label": "SetForceSmallIcons()",
    "kind": "Method",
    "detail": "Function (bIsFocusable = bInIsFocusable ; } void)",
    "insertText": "SetForceSmallIcons(const bool InForceSmallIcons)"
  },
  {
    "label": "SetBorderBrushName()",
    "kind": "Method",
    "detail": "Function (bForceSmallIcons = InForceSmallIcons ; } void)",
    "insertText": "SetBorderBrushName(const FName InBorderBrushName)"
  },
  {
    "label": "CreateMenuEntry()",
    "kind": "Method",
    "detail": "Function (BorderBrushName = InBorderBrushName ; } void)",
    "insertText": "CreateMenuEntry(class FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "HasIcon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasIcon()"
  },
  {
    "label": "SetCustomMenuDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomMenuDelegate(const FNewMenuDelegate& InOnFillMenuDelegate)"
  },
  {
    "label": "SetOnGetMenuContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnGetMenuContent(const FOnGetContent& OnGetMenuContent)"
  },
  {
    "label": "SetGetDecoratedButtonDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGetDecoratedButtonDelegate(const FGetDecoratedButtonDelegate& InGetDecoratedButtonDelegate)"
  },
  {
    "label": "GetIsFocusable()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "GetIsFocusable()"
  },
  {
    "label": "ConstructWidget()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<class IMultiBlockBaseWidget>)",
    "insertText": "ConstructWidget()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (private : class SToolBarButtonBlock ; TAttribute<FText> LabelOverride ; TAttribute<FText> ToolbarLabelOverride ; TAttribute<FText> ToolTipOverride ; TAttribute<FName> BorderBrushName ; TAttribute<FSlateIcon> IconOverride ; TOptional<EVisibility> LabelVisibility ; EUserInterfaceActionType UserInterfaceActionType ; bool bIsFocusable ; bool bForceSmallIcons ; FNewMenuDelegate CustomMenuDelegate ; FOnGetContent OnGetMenuContent ; FGetDecoratedButtonDelegate GetDecoratedButtonDelegate ; } ; class SToolBarButtonBlock : public SMultiBlockBaseWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SToolBarButtonBlock ) : _IsFocusable(false) , _ForceSmallIcons(false) , _TutorialHighlightName(NAME_None)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TOptional<EVisibility>, LabelVisibility ) SLATE_ARGUMENT( bool, IsFocusable ) SLATE_ARGUMENT( bool, ForceSmallIcons ) SLATE_ARGUMENT( FName, TutorialHighlightName ) SLATE_END_ARGS() SLATE_API virtual void BuildMultiBlockWidget(const ISlateStyle* StyleSet, const FName& StyleName)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnClicked()",
    "kind": "Method",
    "detail": "Function (protected : FReply)",
    "insertText": "OnClicked()"
  },
  {
    "label": "OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCheckStateChanged(const ECheckBoxState NewCheckedState)"
  },
  {
    "label": "GetCheckState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetCheckState()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "GetBlockVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetBlockVisibility()"
  },
  {
    "label": "GetIconVisibility()",
    "kind": "Method",
    "detail": "Function (private : EVisibility)",
    "insertText": "GetIconVisibility(bool bIsASmallIcon)"
  },
  {
    "label": "GetIconBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIconBrush()"
  },
  {
    "label": "GetOverlayIconBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetOverlayIconBrush()"
  },
  {
    "label": "GetNormalIconBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetNormalIconBrush()"
  },
  {
    "label": "GetSmallIconBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetSmallIconBrush()"
  },
  {
    "label": "GetIconForegroundColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetIconForegroundColor()"
  },
  {
    "label": "GetOptionsBlockLeftBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetOptionsBlockLeftBrush()"
  },
  {
    "label": "GetOptionsBlockRightBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetOptionsBlockRightBrush()"
  },
  {
    "label": "GetOptionsSeparatorVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetOptionsSeparatorVisibility()"
  }
]