[
  {
    "label": "FRHIShaderLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIShaderLibrary"
  },
  {
    "label": "FRHIPipelineBinaryLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIPipelineBinaryLibrary"
  },
  {
    "label": "FRHIShaderLibrary()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIResources . h \" # include \" Misc / CoreDelegates . h \" class FRHIShaderLibrary : public FRHIResource { public :)",
    "insertText": "FRHIShaderLibrary(EShaderPlatform InPlatform, FString const& InName) : FRHIResource(RRT_ShaderLibrary), Platform(InPlatform), LibraryName(InName), LibraryId(GetTypeHash(InName))"
  },
  {
    "label": "FRHIShaderLibrary()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRHIShaderLibrary()"
  },
  {
    "label": "GetPlatform()",
    "kind": "Method",
    "detail": "Function (} EShaderPlatform)",
    "insertText": "GetPlatform(void)"
  },
  {
    "label": "GetNumShaderMaps()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumShaderMaps()"
  },
  {
    "label": "GetNumShaders()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumShaders()"
  },
  {
    "label": "GetNumShadersForShaderMap()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumShadersForShaderMap(int32 ShaderMapIndex)"
  },
  {
    "label": "GetShaderIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetShaderIndex(int32 ShaderMapIndex, int32 i)"
  },
  {
    "label": "GetAllShaderIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllShaderIndices(int32 ShaderMapIndex, TArray<int32>& ShaderIndices)"
  },
  {
    "label": "GetSizeBytes()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSizeBytes()"
  },
  {
    "label": "GetShaderHash()",
    "kind": "Method",
    "detail": "Function (FSHAHash)",
    "insertText": "GetShaderHash(int32 ShaderMapIndex, int32 ShaderIndex)"
  },
  {
    "label": "FindShaderMapIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindShaderMapIndex(const FSHAHash& Hash)"
  },
  {
    "label": "FindShaderIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindShaderIndex(const FSHAHash& Hash)"
  },
  {
    "label": "IsPreloading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreloading(int32 ShaderIndex, FGraphEventArray& OutCompletionEvents)"
  },
  {
    "label": "AddRefPreloadedShaderGroup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRefPreloadedShaderGroup(int32 ShaderGroupIndex)"
  },
  {
    "label": "ReleasePreloadedShaderGroup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleasePreloadedShaderGroup(int32 ShaderGroupIndex)"
  },
  {
    "label": "GetGroupIndexForShader()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetGroupIndexForShader(int32 ShaderIndex)"
  },
  {
    "label": "FRHIPipelineBinaryLibrary()",
    "kind": "Method",
    "detail": "Function (} ; protected : EShaderPlatform Platform ; FString LibraryName ; uint32 LibraryId ; } ; class FRHIPipelineBinaryLibrary : public FRHIResource { public :)",
    "insertText": "FRHIPipelineBinaryLibrary(EShaderPlatform InPlatform, FString const& FilePath) : FRHIResource(RRT_PipelineBinaryLibrary), Platform(InPlatform)"
  },
  {
    "label": "FRHIPipelineBinaryLibrary()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRHIPipelineBinaryLibrary()"
  }
]