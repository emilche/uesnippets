[
  {
    "label": "UBlendSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendSpace"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "UMirrorDataTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMirrorDataTable"
  },
  {
    "label": "FA2CSPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FA2CSPose"
  },
  {
    "label": "FA2Pose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FA2Pose"
  },
  {
    "label": "FInputBlendPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputBlendPose"
  },
  {
    "label": "FAnimationPoseData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationPoseData"
  },
  {
    "label": "FStackAttributeContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStackAttributeContainer"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "IInterpolationIndexProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInterpolationIndexProvider"
  },
  {
    "label": "FPerBoneInterpolationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerBoneInterpolationData"
  },
  {
    "label": "FAnimationRuntime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationRuntime"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ECurveBlendOption",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECurveBlendOption"
  },
  {
    "label": "UBlendProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendProfile"
  },
  {
    "label": "EAdditiveAnimationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAdditiveAnimationType"
  },
  {
    "label": "BlendTransform()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / EnumClassFlags . h \" # include \" BoneIndices . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / AnimationAsset . h \" # include \" Animation / AnimCurveTypes . h \" # include \" Animation / AnimSequenceBase . h \" # include \" Animation / SkeletonRemapping . h \" # include \" Components / SkinnedMeshComponent . h \" # include \" BonePose . h \" # include \" Containers / ArrayView . h \" class UBlendSpace ; class USkeletalMeshComponent ; class UMirrorDataTable ; struct FA2CSPose ; struct FA2Pose ; struct FInputBlendPose ; struct FAnimationPoseData ; namespace UE { namespace Anim { struct FStackAttributeContainer ; } } typedef TArray<FTransform> FTransformArrayA2 ; namespace ETransformBlendMode { enum Type { Overwrite,Accumulate } ; } template<int32> void)",
    "insertText": "BlendTransform(const FTransform& Source, FTransform& Dest, const float BlendWeight)"
  },
  {
    "label": "Overwrite()",
    "kind": "Method",
    "detail": "Function (template<> void BlendTransform<)",
    "insertText": "Overwrite(const FTransform& Source, FTransform& Dest, const float BlendWeight)"
  },
  {
    "label": "VBlendWeight()",
    "kind": "Method",
    "detail": "Function (const ScalarRegister)",
    "insertText": "VBlendWeight(BlendWeight)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (Dest = Source* VBlendWeight ; } template<> void BlendTransform<)",
    "insertText": "Accumulate(const FTransform& Source, FTransform& Dest, const float BlendWeight)"
  },
  {
    "label": "AccumulateWithShortestRotation()",
    "kind": "Method",
    "detail": "Function (Dest .)",
    "insertText": "AccumulateWithShortestRotation(Source, VBlendWeight)"
  },
  {
    "label": "BlendCurves()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BlendCurves(const TArrayView<const FBlendedCurve> SourceCurves, const TArrayView<const float> SourceWeights, FBlendedCurve& OutCurve)"
  },
  {
    "label": "BlendCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendCurves(const TArrayView<const FBlendedCurve* const> SourceCurves, const TArrayView<const float> SourceWeights, FBlendedCurve& OutCurve)"
  },
  {
    "label": "BlendCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendCurves(const TArrayView<const FBlendedCurve* const> SourceCurves, const TArrayView<const float> SourceWeights, FBlendedCurve& OutCurve, ECurveBlendOption::Type BlendOption)"
  },
  {
    "label": "IInterpolationIndexProvider()",
    "kind": "Method",
    "detail": "Function (class IInterpolationIndexProvider { public : ~)",
    "insertText": "IInterpolationIndexProvider()"
  },
  {
    "label": "FPerBoneInterpolationData()",
    "kind": "Method",
    "detail": "Function (struct FPerBoneInterpolationData { ~)",
    "insertText": "FPerBoneInterpolationData()"
  },
  {
    "label": "GetPerBoneInterpolationData()",
    "kind": "Method",
    "detail": "Function (} } ; TSharedPtr<FPerBoneInterpolationData>)",
    "insertText": "GetPerBoneInterpolationData(const USkeleton* Skeleton)"
  },
  {
    "label": "GetPerBoneInterpolationIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPerBoneInterpolationIndex(const FCompactPoseBoneIndex& InCompactPoseBoneIndex, const FBoneContainer& RequiredBones, const FPerBoneInterpolationData* Data)"
  },
  {
    "label": "GetPerBoneInterpolationIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPerBoneInterpolationIndex(const FSkeletonPoseBoneIndex InSkeletonBoneIndex, const USkeleton* TargetSkeleton, const IInterpolationIndexProvider::FPerBoneInterpolationData* Data)"
  },
  {
    "label": "NormalizeRotations()",
    "kind": "Method",
    "detail": "Function (} ; class FAnimationRuntime { public : void)",
    "insertText": "NormalizeRotations(const FBoneContainer& RequiredBones, FTransformArrayA2& Atoms)"
  },
  {
    "label": "NormalizeRotations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeRotations(FTransformArrayA2& Atoms)"
  },
  {
    "label": "InitializeTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTransform(const FBoneContainer& RequiredBones, FTransformArrayA2& Atoms)"
  },
  {
    "label": "ContainsNaN()",
    "kind": "Method",
    "detail": "Function (# if DO_GUARD_SLOW bool)",
    "insertText": "ContainsNaN(TArray<FBoneIndexType>& RequiredBoneIndices, FA2Pose& Pose)"
  },
  {
    "label": "BlendPosesTogether()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogether(TArrayView<const FCompactPose> SourcePoses, TArrayView<const FBlendedCurve> SourceCurves, TArrayView<const UE::Anim::FStackAttributeContainer> SourceAttributes, TArrayView<const float> SourceWeights, FAnimationPoseData& OutAnimationPoseData)"
  },
  {
    "label": "BlendPosesTogether()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogether(TArrayView<const FCompactPose> SourcePoses, TArrayView<const FBlendedCurve> SourceCurves, TArrayView<const UE::Anim::FStackAttributeContainer> SourceAttributes, TArrayView<const float> SourceWeights, TArrayView<const int32> SourceWeightsIndices, FAnimationPoseData& OutPoseData)"
  },
  {
    "label": "BlendPosesTogetherIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogetherIndirect(TArrayView<const FCompactPose* const> SourcePoses, TArrayView<const FBlendedCurve* const> SourceCurves, TArrayView<const UE::Anim::FStackAttributeContainer* const> SourceAttributes, TArrayView<const float> SourceWeights, FAnimationPoseData& OutPoseData)"
  },
  {
    "label": "BlendTwoPosesTogether()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendTwoPosesTogether(const FAnimationPoseData& SourcePoseOneData, const FAnimationPoseData& SourcePoseTwoData, const float WeightOfPoseOne, FAnimationPoseData& OutAnimationPoseData)"
  },
  {
    "label": "BlendTwoPosesTogetherPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendTwoPosesTogetherPerBone(const FAnimationPoseData& SourcePoseOneData, const FAnimationPoseData& SourcePoseTwoData, const TArray<float>& WeightsOfSource2, FAnimationPoseData& OutAnimationPoseData)"
  },
  {
    "label": "BlendTwoPosesTogetherPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendTwoPosesTogetherPerBone(const FCompactPose& SourcePoseOneData, const FCompactPose& SourcePoseTwoData, const TArray<float>& WeightsOfSource2, FCompactPose& OutAnimationPoseData)"
  },
  {
    "label": "BlendPosesTogetherPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogetherPerBone(TArrayView<const FCompactPose> SourcePoses, TArrayView<const FBlendedCurve> SourceCurves, TArrayView<const UE::Anim::FStackAttributeContainer> SourceAttributes, const IInterpolationIndexProvider* InterpolationIndexProvider, TArrayView<const FBlendSampleData> BlendSampleDataCache, FAnimationPoseData& OutAnimationPoseData)"
  },
  {
    "label": "BlendPosesTogetherPerBoneRemapped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogetherPerBoneRemapped(TArrayView<const FCompactPose> SourcePoses, TArrayView<const FBlendedCurve> SourceCurves, TArrayView<const UE::Anim::FStackAttributeContainer> SourceAttributes, const IInterpolationIndexProvider* InterpolationIndexProvider, TArrayView<const FBlendSampleData> BlendSampleDataCache, TArrayView<const int32> BlendSampleDataCacheIndices, const FSkeletonRemapping& SkeletonRemapping, FAnimationPoseData& OutAnimationPoseData)"
  },
  {
    "label": "BlendPosesTogetherPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogetherPerBone(TArrayView<const FCompactPose> SourcePoses, TArrayView<const FBlendedCurve> SourceCurves, TArrayView<const UE::Anim::FStackAttributeContainer> SourceAttributes, const IInterpolationIndexProvider* InterpolationIndexProvider, TArrayView<const FBlendSampleData> BlendSampleDataCache, TArrayView<const int32> BlendSampleDataCacheIndices, FAnimationPoseData& OutAnimationPoseData)"
  },
  {
    "label": "BlendPosesTogetherPerBoneInMeshSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogetherPerBoneInMeshSpace(TArrayView<FCompactPose> SourcePoses, TArrayView<const FBlendedCurve> SourceCurves, TArrayView<const UE::Anim::FStackAttributeContainer> SourceAttributes, const UBlendSpace* BlendSpace, TArrayView<const FBlendSampleData> BlendSampleDataCache, FAnimationPoseData& OutAnimationPoseData)"
  },
  {
    "label": "MeshSpaceRotation()",
    "kind": "Method",
    "detail": "Function (enum class EBlendPosesPerBoneFilterFlags : uint32 { None = 0,)",
    "insertText": "MeshSpaceRotation(1 << 0), MeshSpaceScale = (1 << 1)"
  },
  {
    "label": "BlendPosesPerBoneFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesPerBoneFilter(FCompactPose& BasePose, const TArray<FCompactPose>& BlendPoses, FBlendedCurve& BaseCurve, const TArray<FBlendedCurve>& BlendCurves, UE::Anim::FStackAttributeContainer& CustomAttributes, const TArray<UE::Anim::FStackAttributeContainer>& BlendAttributes, FAnimationPoseData& OutAnimationPoseData, TArray<FPerBoneBlendWeight>& BoneBlendWeights, EBlendPosesPerBoneFilterFlags blendFlags, enum ECurveBlendOption::Type CurveBlendOption)"
  },
  {
    "label": "UpdateDesiredBoneWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDesiredBoneWeight(const TArray<FPerBoneBlendWeight>& SrcBoneBlendWeights, TArray<FPerBoneBlendWeight>& TargetBoneBlendWeights, const TArray<float>& BlendWeights)"
  },
  {
    "label": "CreateMaskWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMaskWeights(TArray<FPerBoneBlendWeight>& BoneBlendWeights, const TArray<FInputBlendPose>& BlendFilters, const USkeleton* Skeleton)"
  },
  {
    "label": "CreateMaskWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMaskWeights(TArray<FPerBoneBlendWeight>& BoneBlendWeights, const TArray<class UBlendProfile*>& BlendMasks, const USkeleton* Skeleton)"
  },
  {
    "label": "CombineWithAdditiveAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombineWithAdditiveAnimations(int32 NumAdditivePoses, const FTransformArrayA2** SourceAdditivePoses, const float* SourceAdditiveWeights, const FBoneContainer& RequiredBones, FTransformArrayA2& Atoms)"
  },
  {
    "label": "GetComponentSpaceRefPose()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetComponentSpaceRefPose(const FCompactPoseBoneIndex& CompactPoseBoneIndex, const FBoneContainer& BoneContainer)"
  },
  {
    "label": "FillWithRefPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillWithRefPose(TArray<FTransform>& OutAtoms, const FBoneContainer& RequiredBones)"
  },
  {
    "label": "ConvertPoseToMeshSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertPoseToMeshSpace(const TArray<FTransform>& LocalTransforms, TArray<FTransform>& MeshSpaceTransforms, const FBoneContainer& RequiredBones)"
  },
  {
    "label": "ConvertPoseToAdditive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertPoseToAdditive(FCompactPose& TargetPose, const FCompactPose& BasePose)"
  },
  {
    "label": "ConvertTransformToAdditive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertTransformToAdditive(FTransform& TargetTrasnform, const FTransform& BaseTransform)"
  },
  {
    "label": "ConvertPoseToMeshRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertPoseToMeshRotation(FCompactPose& LocalPose)"
  },
  {
    "label": "ConvertMeshRotationPoseToLocalSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertMeshRotationPoseToLocalSpace(FCompactPose& Pose)"
  },
  {
    "label": "AccumulateAdditivePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateAdditivePose(FAnimationPoseData& BaseAnimationPoseData, const FAnimationPoseData& AdditiveAnimationPoseData, float Weight, enum EAdditiveAnimationType AdditiveType)"
  },
  {
    "label": "AccumulateLocalSpaceAdditivePoseInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AccumulateLocalSpaceAdditivePoseInternal(FCompactPose& BasePose, const FCompactPose& AdditivePose, float Weight)"
  },
  {
    "label": "AccumulateMeshSpaceRotationAdditiveToLocalPoseInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateMeshSpaceRotationAdditiveToLocalPoseInternal(FCompactPose& BasePose, const FCompactPose& MeshSpaceRotationAdditive, float Weight)"
  },
  {
    "label": "AccumulateLocalSpaceAdditivePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateLocalSpaceAdditivePose(FAnimationPoseData& BaseAnimationPoseData, const FAnimationPoseData& AdditiveAnimationPoseData, float Weight)"
  },
  {
    "label": "AccumulateMeshSpaceRotationAdditiveToLocalPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateMeshSpaceRotationAdditiveToLocalPose(FAnimationPoseData& BaseAnimationPoseData, const FAnimationPoseData& MeshSpaceRotationAdditiveAnimationPoseData, float Weight)"
  },
  {
    "label": "LerpPoses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LerpPoses(FCompactPose& PoseA, const FCompactPose& PoseB, FBlendedCurve& CurveA, const FBlendedCurve& CurveB, float Alpha)"
  },
  {
    "label": "LerpPosesPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LerpPosesPerBone(FCompactPose& PoseA, const FCompactPose& PoseB, FBlendedCurve& CurveA, const FBlendedCurve& CurveB, float Alpha, const TArray<float>& PerBoneWeights)"
  },
  {
    "label": "LerpPosesWithBoneIndexList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LerpPosesWithBoneIndexList(FCompactPose& PoseA, const FCompactPose& PoseB, FBlendedCurve& CurveA, const FBlendedCurve& CurveB, float Alpha, const TArray<FCompactPoseBoneIndex>& BoneIndices)"
  },
  {
    "label": "LerpBoneTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LerpBoneTransforms(TArray<FTransform>& A, const TArray<FTransform>& B, float Alpha, const TArray<FBoneIndexType>& RequiredBonesArray)"
  },
  {
    "label": "MirrorCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MirrorCurves(FBlendedCurve& Curves, const UMirrorDataTable& MirrorDataTable)"
  },
  {
    "label": "MirrorVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "MirrorVector(const FVector& V, EAxis::Type MirrorAxis)"
  },
  {
    "label": "MirrorQuat()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "MirrorQuat(const FQuat& Q, EAxis::Type MirrorAxis)"
  },
  {
    "label": "MirrorPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MirrorPose(FCompactPose& Pose, const UMirrorDataTable& MirrorDataTable)"
  },
  {
    "label": "MirrorPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MirrorPose(FCompactPose& Pose, EAxis::Type MirrorAxis, const TArray<FCompactPoseBoneIndex>& CompactPoseMirrorBones, const TCustomBoneIndexArray<FQuat, FCompactPoseBoneIndex>& ComponentSpaceRefRotations)"
  },
  {
    "label": "AdvanceTime()",
    "kind": "Method",
    "detail": "Function (ETypeAdvanceAnim)",
    "insertText": "AdvanceTime(const bool bAllowLooping, const float MoveDelta, float& InOutTime, const float EndTime)"
  },
  {
    "label": "TickBlendWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickBlendWeight(float DeltaTime, float DesiredWeight, float& Weight, float& BlendTime)"
  },
  {
    "label": "ApplyWeightToTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWeightToTransform(const FBoneContainer& RequiredBones, FTransformArrayA2& Atoms, float Weight)"
  },
  {
    "label": "GetKeyIndicesFromTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyIndicesFromTime(int32& OutKeyIndex1, int32& OutKeyIndex2, float& OutAlpha, const double Time, const int32 NumKeys, const double SequenceLength, double FramesPerSecond=-1.0)"
  },
  {
    "label": "GetKeyIndicesFromTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyIndicesFromTime(int32& OutKeyIndex1, int32& OutKeyIndex2, float& OutAlpha, const double Time, const FFrameRate& FrameRate, const int32 NumberOfKeys)"
  },
  {
    "label": "EnsureParentsPresent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureParentsPresent(TArray<FBoneIndexType>& BoneIndices, const FReferenceSkeleton& RefSkeleton)"
  },
  {
    "label": "ExcludeBonesWithNoParents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExcludeBonesWithNoParents(const TArray<int32>& BoneIndices, const FReferenceSkeleton& RefSkeleton, TArray<int32>& FilteredRequiredBones)"
  },
  {
    "label": "ConvertCSTransformToBoneSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertCSTransformToBoneSpace(const FTransform& ComponentTransform, FCSPose<FCompactPose>& MeshBases, FTransform& InOutCSBoneTM, FCompactPoseBoneIndex BoneIndex, EBoneControlSpace Space)"
  },
  {
    "label": "ConvertBoneSpaceTransformToCS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertBoneSpaceTransformToCS(const FTransform& ComponentTransform, FCSPose<FCompactPose>& MeshBases, FTransform& InOutBoneSpaceTM, FCompactPoseBoneIndex BoneIndex, EBoneControlSpace Space)"
  },
  {
    "label": "GetSpaceTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetSpaceTransform(FA2Pose& Pose, int32 Index)"
  },
  {
    "label": "GetSpaceTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetSpaceTransform(FA2CSPose& Pose, int32 Index)"
  },
  {
    "label": "SetSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpaceTransform(FA2Pose& Pose, int32 Index, FTransform& NewTransform)"
  },
  {
    "label": "SetSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpaceTransform(FA2CSPose& Pose, int32 Index, FTransform& NewTransform)"
  },
  {
    "label": "GetComponentSpaceTransformRefPose()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetComponentSpaceTransformRefPose(const FReferenceSkeleton& RefSkeleton, int32 BoneIndex)"
  },
  {
    "label": "GetComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetComponentSpaceTransform(const FReferenceSkeleton& RefSkeleton, const TArrayView<const FTransform> &BoneSpaceTransforms, int32 BoneIndex)"
  },
  {
    "label": "FillUpComponentSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillUpComponentSpaceTransforms(const FReferenceSkeleton& RefSkeleton, const TArrayView<const FTransform> &BoneSpaceTransforms, TArray<FTransform> &ComponentSpaceTransforms)"
  },
  {
    "label": "MakeSkeletonRefPoseFromMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSkeletonRefPoseFromMesh(const USkeletalMesh* InMesh, const USkeleton* InSkeleton, TArray<FTransform>& OutBoneBuffer)"
  },
  {
    "label": "GetComponentSpaceTransformWithCache()",
    "kind": "Method",
    "detail": "Function (const FTransform&)",
    "insertText": "GetComponentSpaceTransformWithCache(const FReferenceSkeleton& InRefSkeleton, const TArray<FTransform> &InBoneSpaceTransforms, int32 BoneIndex, TArray<FTransform>& CachedTransforms, TArray<bool>& CachedTransformReady)"
  },
  {
    "label": "FillUpComponentSpaceTransformsRefPose()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "FillUpComponentSpaceTransformsRefPose(const USkeleton* Skeleton, TArray<FTransform> &ComponentSpaceTransforms)"
  },
  {
    "label": "IsFullWeight()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsFullWeight(float Weight)"
  },
  {
    "label": "HasWeight()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasWeight(float Weight)"
  },
  {
    "label": "AppendActiveMorphTargets()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendActiveMorphTargets(const USkeletalMesh* InSkeletalMesh, const TMap<FName, float>& InMorphCurveAnims, FMorphTargetWeightMap& InOutActiveMorphTargets, TArray<float>& InOutMorphTargetWeights)"
  },
  {
    "label": "RetargetBoneTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetargetBoneTransform(const USkeleton* SourceSkeleton, const FName& RetargetSource, FTransform& BoneTransform, const int32 SkeletonBoneIndex, const FCompactPoseBoneIndex& BoneIndex, const FBoneContainer& RequiredBones, const bool bIsBakedAdditive)"
  },
  {
    "label": "RetargetBoneTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetargetBoneTransform(const USkeleton* MySkeleton, const FName& SourceName, const TArray<FTransform>& RetargetTransforms, FTransform& BoneTransform, const int32 SkeletonBoneIndex, const FCompactPoseBoneIndex& BoneIndex, const FBoneContainer& RequiredBones, const bool bIsBakedAdditive)"
  },
  {
    "label": "GetStringDistance()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStringDistance(const FString& First, const FString& Second)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "ENUM_CLASS_FLAGS(FAnimationRuntime::EBlendPosesPerBoneFilterFlags)"
  }
]