[
  {
    "label": "UBlendSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendSpace"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "UMirrorDataTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMirrorDataTable"
  },
  {
    "label": "FA2CSPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FA2CSPose"
  },
  {
    "label": "FA2Pose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FA2Pose"
  },
  {
    "label": "FInputBlendPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputBlendPose"
  },
  {
    "label": "FAnimationPoseData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationPoseData"
  },
  {
    "label": "FStackAttributeContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStackAttributeContainer"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "IInterpolationIndexProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInterpolationIndexProvider"
  },
  {
    "label": "FPerBoneInterpolationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerBoneInterpolationData"
  },
  {
    "label": "FAnimationRuntime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationRuntime"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ECurveBlendOption",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECurveBlendOption"
  },
  {
    "label": "ECurveBlendOption",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECurveBlendOption"
  },
  {
    "label": "UBlendProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendProfile"
  },
  {
    "label": "EAdditiveAnimationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAdditiveAnimationType"
  },
  {
    "label": "EAdditiveAnimationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAdditiveAnimationType"
  },
  {
    "label": "BlendTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendTransform(const FTransform& Source, FTransform& Dest, const float BlendWeight)"
  },
  {
    "label": "VBlendWeight()",
    "kind": "Method",
    "detail": "Function (ScalarRegister)",
    "insertText": "VBlendWeight(BlendWeight)"
  },
  {
    "label": "VBlendWeight()",
    "kind": "Method",
    "detail": "Function (ScalarRegister)",
    "insertText": "VBlendWeight(BlendWeight)"
  },
  {
    "label": "BlendCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendCurves(const TArrayView<const FBlendedCurve> SourceCurves, const TArrayView<const float> SourceWeights, FBlendedCurve& OutCurve)"
  },
  {
    "label": "BlendCurves()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "BlendCurves(const TArrayView<const FBlendedCurve* const> SourceCurves, const TArrayView<const float> SourceWeights, FBlendedCurve& OutCurve)"
  },
  {
    "label": "BlendCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendCurves(const TArrayView<const FBlendedCurve* const> SourceCurves, const TArrayView<const float> SourceWeights, FBlendedCurve& OutCurve, ECurveBlendOption::Type BlendOption)"
  },
  {
    "label": "NormalizeRotations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeRotations(const FBoneContainer& RequiredBones, /*inout*/ FTransformArrayA2& Atoms)"
  },
  {
    "label": "NormalizeRotations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeRotations(FTransformArrayA2& Atoms)"
  },
  {
    "label": "InitializeTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTransform(const FBoneContainer& RequiredBones, /*inout*/ FTransformArrayA2& Atoms)"
  },
  {
    "label": "ContainsNaN()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsNaN(TArray<FBoneIndexType>& RequiredBoneIndices, FA2Pose& Pose)"
  },
  {
    "label": "BlendPosesTogether()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogether(\n\t\tTArrayView<const FCompactPose> SourcePoses,\n\t\tTArrayView<const FBlendedCurve> SourceCurves,\n\t\tTArrayView<const float> SourceWeights,\n\t\t/*out*/ FCompactPose& ResultPose, \n\t\t/*out*/ FBlendedCurve& ResultCurve)"
  },
  {
    "label": "BlendPosesTogether()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogether(\n\t\tTArrayView<const FCompactPose> SourcePoses,\n\t\tTArrayView<const FBlendedCurve> SourceCurves,\n\t\tTArrayView<const UE::Anim::FStackAttributeContainer> SourceAttributes,\n\t\tTArrayView<const float> SourceWeights,\n\t\tFAnimationPoseData& OutAnimationPoseData)"
  },
  {
    "label": "BlendPosesTogether()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogether(\n\t\tTArrayView<const FCompactPose> SourcePoses,\n\t\tTArrayView<const FBlendedCurve> SourceCurves,\n\t\tTArrayView<const float> SourceWeights,\n\t\tTArrayView<const int32> SourceWeightsIndices,\n\t\t/*out*/ FCompactPose& ResultPose,\n\t\t/*out*/ FBlendedCurve& ResultCurve)"
  },
  {
    "label": "BlendPosesTogether()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogether(\n\t\tTArrayView<const FCompactPose> SourcePoses,\n\t\tTArrayView<const FBlendedCurve> SourceCurves,\n\t\tTArrayView<const UE::Anim::FStackAttributeContainer> SourceAttributes,\n\t\tTArrayView<const float> SourceWeights,\n\t\tTArrayView<const int32> SourceWeightsIndices,\n\t\t/*out*/ FAnimationPoseData& OutPoseData\n\t\t)"
  },
  {
    "label": "BlendPosesTogetherIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogetherIndirect(\n\t\tTArrayView<const FCompactPose* const> SourcePoses,\n\t\tTArrayView<const FBlendedCurve* const> SourceCurves,\n\t\tTArrayView<const float> SourceWeights,\n\t\t/*out*/ FCompactPose& ResultPose,\n\t\t/*out*/ FBlendedCurve& ResultCurve)"
  },
  {
    "label": "BlendPosesTogetherIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogetherIndirect(\n\t\tTArrayView<const FCompactPose* const> SourcePoses,\n\t\tTArrayView<const FBlendedCurve* const> SourceCurves,\n\t\tTArrayView<const UE::Anim::FStackAttributeContainer* const> SourceAttributes,\n\t\tTArrayView<const float> SourceWeights,\n\t\tFAnimationPoseData& OutPoseData)"
  },
  {
    "label": "BlendTwoPosesTogether()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendTwoPosesTogether(\n\t\tconst FCompactPose& SourcePose1,\n\t\tconst FCompactPose& SourcePose2,\n\t\tconst FBlendedCurve& SourceCurve1,\n\t\tconst FBlendedCurve& SourceCurve2,\n\t\tconst float WeightOfPose1,\n\t\t/*out*/ FCompactPose& ResultPose,\n\t\t/*out*/ FBlendedCurve& ResultCurve)"
  },
  {
    "label": "BlendTwoPosesTogether()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendTwoPosesTogether(\n\t\tconst FAnimationPoseData& SourcePoseOneData,\n\t\tconst FAnimationPoseData& SourcePoseTwoData,\n\t\tconst float WeightOfPoseOne,\n\t\t/*out*/ FAnimationPoseData& OutAnimationPoseData)"
  },
  {
    "label": "BlendTwoPosesTogetherPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendTwoPosesTogetherPerBone(\n\t\tconst FCompactPose& SourcePose1,\n\t\tconst FCompactPose& SourcePose2,\n\t\tconst FBlendedCurve& SourceCurve1,\n\t\tconst FBlendedCurve& SourceCurve2,\n\t\tconst TArray<float>& WeightsOfSource2,\n\t\t/*out*/ FCompactPose& ResultPose,\n\t\t/*out*/ FBlendedCurve& ResultCurve)"
  },
  {
    "label": "BlendTwoPosesTogetherPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendTwoPosesTogetherPerBone(\n\t\tconst FAnimationPoseData& SourcePoseOneData,\n\t\tconst FAnimationPoseData& SourcePoseTwoData,\n\t\tconst TArray<float>& WeightsOfSource2,\n\t\t/*out*/ FAnimationPoseData& OutAnimationPoseData)"
  },
  {
    "label": "BlendTwoPosesTogetherPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendTwoPosesTogetherPerBone(\n\t\tconst FCompactPose& SourcePoseOneData,\n\t\tconst FCompactPose& SourcePoseTwoData,\n\t\tconst TArray<float>& WeightsOfSource2,\n\t\t/*out*/ FCompactPose& OutAnimationPoseData)"
  },
  {
    "label": "BlendPosesTogetherPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogetherPerBone(\n\t\tTArrayView<const FCompactPose> SourcePoses,\n\t\tTArrayView<const FBlendedCurve> SourceCurves,\n\t\tconst IInterpolationIndexProvider* InterpolationIndexProvider,\n\t\tTArrayView<const FBlendSampleData> BlendSampleDataCache,\n\t\t/*out*/ FCompactPose& ResultPose,\n\t\t/*out*/ FBlendedCurve& ResultCurve)"
  },
  {
    "label": "BlendPosesTogetherPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogetherPerBone(\n\t\tTArrayView<const FCompactPose> SourcePoses,\n\t\tTArrayView<const FBlendedCurve> SourceCurves,\n\t\tTArrayView<const UE::Anim::FStackAttributeContainer> SourceAttributes,\n\t\tconst IInterpolationIndexProvider* InterpolationIndexProvider,\n\t\tTArrayView<const FBlendSampleData> BlendSampleDataCache,\n\t\t/*out*/ FAnimationPoseData& OutAnimationPoseData)"
  },
  {
    "label": "BlendPosesTogetherPerBoneRemapped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogetherPerBoneRemapped(\n\t\tTArrayView<const FCompactPose> SourcePoses, \n\t\tTArrayView<const FBlendedCurve> SourceCurves, \n\t\tTArrayView<const UE::Anim::FStackAttributeContainer> SourceAttributes, \n\t\tconst IInterpolationIndexProvider* InterpolationIndexProvider,\n\t\tTArrayView<const FBlendSampleData> BlendSampleDataCache,\n\t\tTArrayView<const int32> BlendSampleDataCacheIndices, \n\t\tconst FSkeletonRemapping& SkeletonRemapping,\n\t\t/*out*/ FAnimationPoseData& OutAnimationPoseData)"
  },
  {
    "label": "BlendPosesTogetherPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogetherPerBone(\n\t\tTArrayView<const FCompactPose> SourcePoses,\n\t\tTArrayView<const FBlendedCurve> SourceCurves,\n\t\tconst IInterpolationIndexProvider* InterpolationIndexProvider,\n\t\tTArrayView<const FBlendSampleData> BlendSampleDataCache,\n\t\tTArrayView<const int32> BlendSampleDataCacheIndices,\n\t\t/*out*/ FCompactPose& ResultPose,\n\t\t/*out*/ FBlendedCurve& ResultCurve)"
  },
  {
    "label": "BlendPosesTogetherPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogetherPerBone(\n\t\tTArrayView<const FCompactPose> SourcePoses,\n\t\tTArrayView<const FBlendedCurve> SourceCurves,\n\t\tTArrayView<const UE::Anim::FStackAttributeContainer> SourceAttributes,\n\t\tconst IInterpolationIndexProvider* InterpolationIndexProvider,\n\t\tTArrayView<const FBlendSampleData> BlendSampleDataCache,\n\t\tTArrayView<const int32> BlendSampleDataCacheIndices,\n\t\t/*out*/ FAnimationPoseData& OutAnimationPoseData)"
  },
  {
    "label": "BlendPosesTogetherPerBoneInMeshSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogetherPerBoneInMeshSpace(\n\t\tTArrayView<FCompactPose>           SourcePoses,\n\t\tTArrayView<const FBlendedCurve>    SourceCurves,\n\t\tconst UBlendSpace*                 BlendSpace,\n\t\tTArrayView<const FBlendSampleData> BlendSampleDataCache,\n\t\tFCompactPose&                      OutResultPose,\n\t\tFBlendedCurve&                     OutResultCurve)"
  },
  {
    "label": "BlendPosesTogetherPerBoneInMeshSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesTogetherPerBoneInMeshSpace(\n\t\tTArrayView<FCompactPose>                             SourcePoses,\n\t\tTArrayView<const FBlendedCurve>                      SourceCurves,\n\t\tTArrayView<const UE::Anim::FStackAttributeContainer> SourceAttributes,\t\n\t\tconst UBlendSpace*                                   BlendSpace,\n\t\tTArrayView<const FBlendSampleData>                   BlendSampleDataCache,\n\t\tFAnimationPoseData&                                  OutAnimationPoseData)"
  },
  {
    "label": "BlendPosesPerBoneFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesPerBoneFilter(\n\t\tFCompactPose& BasePose,\n\t\tconst TArray<FCompactPose>& BlendPoses,\n\t\tFBlendedCurve& BaseCurve,\n\t\tconst TArray<FBlendedCurve>& BlendCurves,\n\t\tFCompactPose& OutPose,\n\t\tFBlendedCurve& OutCurve,\n\t\tTArray<FPerBoneBlendWeight>& BoneBlendWeights,\n\t\tEBlendPosesPerBoneFilterFlags blendFlags,\n\t\tenum ECurveBlendOption::Type CurveBlendOption)"
  },
  {
    "label": "BlendPosesPerBoneFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPosesPerBoneFilter(\n\t\tFCompactPose& BasePose,\n\t\tconst TArray<FCompactPose>& BlendPoses,\n\t\tFBlendedCurve& BaseCurve,\n\t\tconst TArray<FBlendedCurve>& BlendCurves,\n\t\tUE::Anim::FStackAttributeContainer& CustomAttributes,\n\t\tconst TArray<UE::Anim::FStackAttributeContainer>& BlendAttributes,\n\t\tFAnimationPoseData& OutAnimationPoseData,\n\t\tTArray<FPerBoneBlendWeight>& BoneBlendWeights,\n\t\tEBlendPosesPerBoneFilterFlags blendFlags,\n\t\tenum ECurveBlendOption::Type CurveBlendOption)"
  },
  {
    "label": "UpdateDesiredBoneWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDesiredBoneWeight(const TArray<FPerBoneBlendWeight>& SrcBoneBlendWeights, TArray<FPerBoneBlendWeight>& TargetBoneBlendWeights, const TArray<float>& BlendWeights)"
  },
  {
    "label": "CreateMaskWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMaskWeights(\n\t\t\tTArray<FPerBoneBlendWeight>& BoneBlendWeights,\n\t\t\tconst TArray<FInputBlendPose>& BlendFilters, \n\t\t\tconst USkeleton* Skeleton)"
  },
  {
    "label": "CreateMaskWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMaskWeights(\n\t\tTArray<FPerBoneBlendWeight>& BoneBlendWeights,\n\t\tconst TArray<class UBlendProfile*>& BlendMasks,\n\t\tconst USkeleton* Skeleton)"
  },
  {
    "label": "CombineWithAdditiveAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombineWithAdditiveAnimations(\n\t\tint32 NumAdditivePoses,\n\t\tconst FTransformArrayA2** SourceAdditivePoses,\n\t\tconst float* SourceAdditiveWeights,\n\t\tconst FBoneContainer& RequiredBones,\n\t\t/*inout*/ FTransformArrayA2& Atoms)"
  },
  {
    "label": "GetComponentSpaceRefPose()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetComponentSpaceRefPose(const FCompactPoseBoneIndex& CompactPoseBoneIndex, const FBoneContainer& BoneContainer)"
  },
  {
    "label": "FillWithRefPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillWithRefPose(TArray<FTransform>& OutAtoms, const FBoneContainer& RequiredBones)"
  },
  {
    "label": "ConvertPoseToMeshSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertPoseToMeshSpace(const TArray<FTransform>& LocalTransforms, TArray<FTransform>& MeshSpaceTransforms, const FBoneContainer& RequiredBones)"
  },
  {
    "label": "ConvertPoseToAdditive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertPoseToAdditive(FCompactPose& TargetPose, const FCompactPose& BasePose)"
  },
  {
    "label": "ConvertTransformToAdditive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertTransformToAdditive(FTransform& TargetTrasnform, const FTransform& BaseTransform)"
  },
  {
    "label": "ConvertPoseToMeshRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertPoseToMeshRotation(FCompactPose& LocalPose)"
  },
  {
    "label": "ConvertMeshRotationPoseToLocalSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertMeshRotationPoseToLocalSpace(FCompactPose& Pose)"
  },
  {
    "label": "AccumulateAdditivePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateAdditivePose(FCompactPose& BasePose, const FCompactPose& AdditivePose, FBlendedCurve& BaseCurve, const FBlendedCurve& AdditiveCurve, float Weight, enum EAdditiveAnimationType AdditiveType)"
  },
  {
    "label": "AccumulateAdditivePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateAdditivePose(FAnimationPoseData& BaseAnimationPoseData, const FAnimationPoseData& AdditiveAnimationPoseData, float Weight, enum EAdditiveAnimationType AdditiveType)"
  },
  {
    "label": "AccumulateLocalSpaceAdditivePoseInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateLocalSpaceAdditivePoseInternal(FCompactPose& BasePose, const FCompactPose& AdditivePose, float Weight)"
  },
  {
    "label": "AccumulateMeshSpaceRotationAdditiveToLocalPoseInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateMeshSpaceRotationAdditiveToLocalPoseInternal(FCompactPose& BasePose, const FCompactPose& MeshSpaceRotationAdditive, float Weight)"
  },
  {
    "label": "AccumulateLocalSpaceAdditivePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateLocalSpaceAdditivePose(FCompactPose& BasePose, const FCompactPose& AdditivePose, FBlendedCurve& BaseCurve, const FBlendedCurve& AdditiveCurve, float Weight)"
  },
  {
    "label": "AccumulateLocalSpaceAdditivePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateLocalSpaceAdditivePose(FAnimationPoseData& BaseAnimationPoseData, const FAnimationPoseData& AdditiveAnimationPoseData, float Weight)"
  },
  {
    "label": "AccumulateMeshSpaceRotationAdditiveToLocalPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateMeshSpaceRotationAdditiveToLocalPose(FCompactPose& BasePose, const FCompactPose& MeshSpaceRotationAdditive, FBlendedCurve& BaseCurve, const FBlendedCurve& AdditiveCurve, float Weight)"
  },
  {
    "label": "AccumulateMeshSpaceRotationAdditiveToLocalPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateMeshSpaceRotationAdditiveToLocalPose(FAnimationPoseData& BaseAnimationPoseData, const FAnimationPoseData& MeshSpaceRotationAdditiveAnimationPoseData, float Weight)"
  },
  {
    "label": "LerpPoses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LerpPoses(FCompactPose& PoseA, const FCompactPose& PoseB, FBlendedCurve& CurveA, const FBlendedCurve& CurveB, float Alpha)"
  },
  {
    "label": "LerpPosesPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LerpPosesPerBone(FCompactPose& PoseA, const FCompactPose& PoseB, FBlendedCurve& CurveA, const FBlendedCurve& CurveB, float Alpha, const TArray<float>& PerBoneWeights)"
  },
  {
    "label": "LerpPosesWithBoneIndexList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LerpPosesWithBoneIndexList(FCompactPose& PoseA, const FCompactPose& PoseB, FBlendedCurve& CurveA, const FBlendedCurve& CurveB, float Alpha, const TArray<FCompactPoseBoneIndex>& BoneIndices)"
  },
  {
    "label": "LerpBoneTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LerpBoneTransforms(TArray<FTransform>& A, const TArray<FTransform>& B, float Alpha, const TArray<FBoneIndexType>& RequiredBonesArray)"
  },
  {
    "label": "BlendTransformsByWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendTransformsByWeight(FTransform& OutTransform, const TArray<FTransform>& Transforms, const TArray<float>& Weights)"
  },
  {
    "label": "MirrorCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MirrorCurves(FBlendedCurve& Curves, const UMirrorDataTable& MirrorDataTable)"
  },
  {
    "label": "MirrorVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "MirrorVector(const FVector& V, EAxis::Type MirrorAxis)"
  },
  {
    "label": "MirrorQuat()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "MirrorQuat(const FQuat& Q, EAxis::Type MirrorAxis)"
  },
  {
    "label": "MirrorPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MirrorPose(FCompactPose& Pose, const UMirrorDataTable& MirrorDataTable)"
  },
  {
    "label": "MirrorPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MirrorPose(FCompactPose& Pose, EAxis::Type MirrorAxis, const TArray<FCompactPoseBoneIndex>& CompactPoseMirrorBones, const TCustomBoneIndexArray<FQuat, FCompactPoseBoneIndex>& ComponentSpaceRefRotations)"
  },
  {
    "label": "AdvanceTime()",
    "kind": "Method",
    "detail": "Function (ETypeAdvanceAnim)",
    "insertText": "AdvanceTime(const bool bAllowLooping, const float MoveDelta, float& InOutTime, const float EndTime)"
  },
  {
    "label": "TickBlendWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickBlendWeight(float DeltaTime, float DesiredWeight, float& Weight, float& BlendTime)"
  },
  {
    "label": "ApplyWeightToTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWeightToTransform(const FBoneContainer& RequiredBones, /*inout*/ FTransformArrayA2& Atoms, float Weight)"
  },
  {
    "label": "GetKeyIndicesFromTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyIndicesFromTime(int32& OutKeyIndex1, int32& OutKeyIndex2, float& OutAlpha, const double Time, const int32 NumKeys, const double SequenceLength, double FramesPerSecond=-1.0)"
  },
  {
    "label": "GetKeyIndicesFromTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyIndicesFromTime(int32& OutKeyIndex1, int32& OutKeyIndex2, float& OutAlpha, const double Time, const FFrameRate& FrameRate, const int32 NumberOfKeys)"
  },
  {
    "label": "EnsureParentsPresent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureParentsPresent(TArray<FBoneIndexType>& BoneIndices, const FReferenceSkeleton& RefSkeleton)"
  },
  {
    "label": "ExcludeBonesWithNoParents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExcludeBonesWithNoParents(const TArray<int32>& BoneIndices, const FReferenceSkeleton& RefSkeleton, TArray<int32>& FilteredRequiredBones)"
  },
  {
    "label": "ConvertCSTransformToBoneSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertCSTransformToBoneSpace(const FTransform& ComponentTransform, FCSPose<FCompactPose>& MeshBases, FTransform& InOutCSBoneTM, FCompactPoseBoneIndex BoneIndex, EBoneControlSpace Space)"
  },
  {
    "label": "ConvertBoneSpaceTransformToCS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertBoneSpaceTransformToCS(const FTransform& ComponentTransform, FCSPose<FCompactPose>& MeshBases, FTransform& InOutBoneSpaceTM, FCompactPoseBoneIndex BoneIndex, EBoneControlSpace Space)"
  },
  {
    "label": "GetSpaceTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetSpaceTransform(FA2Pose& Pose, int32 Index)"
  },
  {
    "label": "GetSpaceTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetSpaceTransform(FA2CSPose& Pose, int32 Index)"
  },
  {
    "label": "SetSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpaceTransform(FA2Pose& Pose, int32 Index, FTransform& NewTransform)"
  },
  {
    "label": "SetSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpaceTransform(FA2CSPose& Pose, int32 Index, FTransform& NewTransform)"
  },
  {
    "label": "GetComponentSpaceTransformRefPose()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetComponentSpaceTransformRefPose(const FReferenceSkeleton& RefSkeleton, int32 BoneIndex)"
  },
  {
    "label": "GetComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetComponentSpaceTransform(const FReferenceSkeleton& RefSkeleton, const TArrayView<const FTransform> &BoneSpaceTransforms, int32 BoneIndex)"
  },
  {
    "label": "FillUpComponentSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillUpComponentSpaceTransforms(const FReferenceSkeleton& RefSkeleton, const TArrayView<const FTransform> &BoneSpaceTransforms, TArray<FTransform> &ComponentSpaceTransforms)"
  },
  {
    "label": "MakeSkeletonRefPoseFromMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSkeletonRefPoseFromMesh(const USkeletalMesh* InMesh, const USkeleton* InSkeleton, TArray<FTransform>& OutBoneBuffer)"
  },
  {
    "label": "FillUpComponentSpaceTransformsRefPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillUpComponentSpaceTransformsRefPose(const USkeleton* Skeleton, TArray<FTransform> &ComponentSpaceTransforms)"
  },
  {
    "label": "AppendActiveMorphTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendActiveMorphTargets(const USkeletalMesh* InSkeletalMesh, const TMap<FName, float>& InMorphCurveAnims, FMorphTargetWeightMap& InOutActiveMorphTargets, TArray<float>& InOutMorphTargetWeights)"
  },
  {
    "label": "RetargetBoneTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetargetBoneTransform(const USkeleton* SourceSkeleton, const FName& RetargetSource, FTransform& BoneTransform, const int32 SkeletonBoneIndex, const FCompactPoseBoneIndex& BoneIndex, const FBoneContainer& RequiredBones, const bool bIsBakedAdditive)"
  },
  {
    "label": "RetargetBoneTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetargetBoneTransform(const USkeleton* MySkeleton, const FName& SourceName, const TArray<FTransform>& RetargetTransforms, FTransform& BoneTransform, const int32 SkeletonBoneIndex, const FCompactPoseBoneIndex& BoneIndex, const FBoneContainer& RequiredBones, const bool bIsBakedAdditive)"
  },
  {
    "label": "GetStringDistance()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStringDistance(const FString& First, const FString& Second)"
  }
]