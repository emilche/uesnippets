[
  {
    "label": "SymmetricMatrixBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SymmetricMatrixBuffer"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_SYMMETRIC_MATRIX_BUFFER_H_ # define MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_SYMMETRIC_MATRIX_BUFFER_H_ # include<algorithm> # include<array> # include<cstring> # include<utility> # include \" api / array_view . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / numerics / safe_compare . h \" namespace webrtc { namespace rnn_vad { template<T,int S> class SymmetricMatrixBuffer {)",
    "insertText": "static_assert(S > 2, \"\")"
  },
  {
    "label": "SymmetricMatrixBuffer()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SymmetricMatrixBuffer()"
  },
  {
    "label": "SymmetricMatrixBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SymmetricMatrixBuffer(const SymmetricMatrixBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SymmetricMatrixBuffer&)",
    "insertText": "operator(const SymmetricMatrixBuffer&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (buf_ .)",
    "insertText": "fill(0)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Push(rtc::ArrayView<T, S - 1> values)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(buf_.data(), buf_.data() + S, (buf_.size() - S) * sizeof(T))"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "index(S - 1 - i) * (S - 1)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GE(index, 0)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(index, buf_.size())"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (buf_ [ index ] = values [ i ] ; } } T)",
    "insertText": "GetValue(int delay1, int delay2)"
  },
  {
    "label": "RTC_DCHECK_NE()",
    "kind": "Method",
    "detail": "Function (int row = S - 1 - delay1 ; int col = S - 1 - delay2 ;)",
    "insertText": "RTC_DCHECK_NE(row, col)"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LE(0, row)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(row, S - 1)"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LE(1, col)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(col, S)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (const int index =)",
    "insertText": "row(S - 1) + (col - 1)"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LE(0, index)"
  }
]