[
  {
    "label": "AudioEncoderCngConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioEncoderCngConfig"
  },
  {
    "label": "AudioEncoderCngConfig()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_CODECS_CNG_AUDIO_ENCODER_CNG_H_ # define MODULES_AUDIO_CODING_CODECS_CNG_AUDIO_ENCODER_CNG_H_ # include<stddef . h> # include<memory> # include \" api / audio_codecs / audio_encoder . h \" # include \" common_audio / vad / include / vad . h \" namespace webrtc { struct AudioEncoderCngConfig {)",
    "insertText": "AudioEncoderCngConfig()"
  },
  {
    "label": "AudioEncoderCngConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioEncoderCngConfig(AudioEncoderCngConfig&&)"
  },
  {
    "label": "IsOk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOk()"
  },
  {
    "label": "CreateComfortNoiseEncoder()",
    "kind": "Method",
    "detail": "Function (size_t num_channels = 1 ; int payload_type = 1 3 ; std::unique_ptr<AudioEncoder> speech_encoder ; Vad::Aggressiveness vad_mode = Vad::kVadNormal ; int sid_frame_interval_ms = 1 0 0 ; int num_cng_coefficients = 8 ; Vad* vad = nullptr ; } ; std::unique_ptr<AudioEncoder>)",
    "insertText": "CreateComfortNoiseEncoder(AudioEncoderCngConfig&& config)"
  }
]