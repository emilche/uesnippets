[
  {
    "label": "FAutomationTestBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestBase"
  },
  {
    "label": "FAutomationTestTags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestTags"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "MatchType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MatchType"
  },
  {
    "label": "FAutomationTelemetryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationTelemetryData"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FAutomationTestExecutionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestExecutionInfo"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FAutomationTestInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestInfo"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "IAutomationLatentCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAutomationLatentCommand"
  },
  {
    "label": "FAutomationTestFramework",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestFramework"
  },
  {
    "label": "FThreadedAutomationLatentCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadedAutomationLatentCommand"
  },
  {
    "label": "FAutomationTestFramework",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestFramework"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "IAutomationNetworkCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAutomationNetworkCommand"
  },
  {
    "label": "FAutomationExpectedMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationExpectedMessage"
  },
  {
    "label": "FAutomationScreenshotData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationScreenshotData"
  },
  {
    "label": "FAutomationScreenshotCompareResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationScreenshotCompareResults"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAutomationComparisonToleranceAmount",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationComparisonToleranceAmount"
  },
  {
    "label": "FAutomationTestFramework",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestFramework"
  },
  {
    "label": "FAutomationTestOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestOutputDevice"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FAutomationTestMessageFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestMessageFilter"
  },
  {
    "label": "FAutomationTestOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestOutputDevice"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FAutomationTestTags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestTags"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FAutomationTestBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestBase"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FAutomationTestFramework",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestFramework"
  },
  {
    "label": "FBDDAutomationTestBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBDDAutomationTestBase"
  },
  {
    "label": "FAutomationSpecBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationSpecBase"
  },
  {
    "label": "FSingleExecuteLatentCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSingleExecuteLatentCommand"
  },
  {
    "label": "FUntilDoneLatentCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUntilDoneLatentCommand"
  },
  {
    "label": "FAsyncUntilDoneLatentCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncUntilDoneLatentCommand"
  },
  {
    "label": "FAsyncLatentCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncLatentCommand"
  },
  {
    "label": "FSpecIt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpecIt"
  },
  {
    "label": "FSpecDefinitionScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpecDefinitionScope"
  },
  {
    "label": "FSpec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpec"
  },
  {
    "label": "CommandName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommandName"
  },
  {
    "label": "CommandName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommandName"
  },
  {
    "label": "CommandName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommandName"
  },
  {
    "label": "CommandName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommandName"
  },
  {
    "label": "CommandName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommandName"
  },
  {
    "label": "CommandName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommandName"
  },
  {
    "label": "EXPORT_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EXPORT_API"
  },
  {
    "label": "EXPORT_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EXPORT_API"
  },
  {
    "label": "EXPORT_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EXPORT_API"
  },
  {
    "label": "EXPORT_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EXPORT_API"
  },
  {
    "label": "EXPORT_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EXPORT_API"
  },
  {
    "label": "EXPORT_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EXPORT_API"
  },
  {
    "label": "EXPORT_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EXPORT_API"
  },
  {
    "label": "EXPORT_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EXPORT_API"
  },
  {
    "label": "F",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "F"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "TClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TClass"
  },
  {
    "label": "TClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TClass"
  },
  {
    "label": "TClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TClass"
  },
  {
    "label": "TClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TClass"
  },
  {
    "label": "TClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TClass"
  },
  {
    "label": "TClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TClass"
  },
  {
    "label": "FFunctionLatentCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFunctionLatentCommand"
  },
  {
    "label": "FDelayedFunctionLatentCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDelayedFunctionLatentCommand"
  },
  {
    "label": "FUntilCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUntilCommand"
  },
  {
    "label": "IAutomationLatentCommandWithRetriesAndDelays",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAutomationLatentCommandWithRetriesAndDelays"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLatentCommands, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAutomationTestFramework, Log, All)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"Contains\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"Exact\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"Unknown\")"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "RemoveAllEvents()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveAllEvents(EAutomationEventType EventType)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(const FAutomationEvent& Event, int StackOffset = 0, bool bCaptureStack = true)"
  },
  {
    "label": "AddWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWarning(const FString& WarningMessage)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(const FString& ErrorMessage)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Update()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetTypeHash(Object.MessagePatternString)"
  },
  {
    "label": "FAutomationComparisonToleranceAmount()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FAutomationComparisonToleranceAmount(16, 16, 16, 16, 16, 240)"
  },
  {
    "label": "FAutomationComparisonToleranceAmount()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FAutomationComparisonToleranceAmount(24, 24, 24, 24, 24, 220)"
  },
  {
    "label": "FAutomationComparisonToleranceAmount()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FAutomationComparisonToleranceAmount(32, 32, 32, 32, 64, 96)"
  },
  {
    "label": "FAutomationComparisonToleranceAmount()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FAutomationComparisonToleranceAmount(0, 0, 0, 0, 0, 255)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Get()"
  },
  {
    "label": "RegisterAutomationTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterAutomationTest( const FString& InTestNameToRegister, FAutomationTestBase* InTestToRegister )"
  },
  {
    "label": "UnregisterAutomationTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterAutomationTest( const FString& InTestNameToUnregister )"
  },
  {
    "label": "RegisterAutomationTestTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterAutomationTestTags(const FString& InTestNameToRegister, const FString& InTestTagsToRegister)"
  },
  {
    "label": "UnregisterAutomationTestTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterAutomationTestTags(const FString& InTestNameToUnregister)"
  },
  {
    "label": "RegisterComplexAutomationTestTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterComplexAutomationTestTags(const FAutomationTestBase* InTest, const FString& InBeautifiedTestName, const FString& InTestTagsToRegister)"
  },
  {
    "label": "GetTagsForAutomationTest()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTagsForAutomationTest(const FString& InTestName)"
  },
  {
    "label": "EnqueueLatentCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueLatentCommand(TSharedPtr<IAutomationLatentCommand> NewCommand)"
  },
  {
    "label": "EnqueueNetworkCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueNetworkCommand(TSharedPtr<IAutomationNetworkCommand> NewCommand)"
  },
  {
    "label": "RunSmokeTests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunSmokeTests()"
  },
  {
    "label": "ResetTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTests()"
  },
  {
    "label": "StopTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopTest( FAutomationTestExecutionInfo& OutExecutionInfo )"
  },
  {
    "label": "ExecuteLatentCommands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecuteLatentCommands()"
  },
  {
    "label": "ExecuteNetworkCommands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecuteNetworkCommands()"
  },
  {
    "label": "DequeueAllCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DequeueAllCommands()"
  },
  {
    "label": "LoadTestModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadTestModules()"
  },
  {
    "label": "SetDeveloperDirectoryIncluded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeveloperDirectoryIncluded(const bool bInDeveloperDirectoryIncluded)"
  },
  {
    "label": "SetRequestedTestFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequestedTestFilter(const EAutomationTestFlags InRequestedTestFlags)"
  },
  {
    "label": "AddAnalyticsItemToCurrentTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAnalyticsItemToCurrentTest( const FString& AnalyticsItem )"
  },
  {
    "label": "NeedSkipStackWalk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedSkipStackWalk()"
  },
  {
    "label": "NeedLogBPTestMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedLogBPTestMetadata()"
  },
  {
    "label": "NeedPerformStereoTestVariants()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedPerformStereoTestVariants()"
  },
  {
    "label": "NeedUseLightweightStereoTestVariants()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedUseLightweightStereoTestVariants()"
  },
  {
    "label": "NotifyScreenshotComparisonComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyScreenshotComparisonComplete(const FAutomationScreenshotCompareResults& CompareResults)"
  },
  {
    "label": "NotifyScreenshotComparisonReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyScreenshotComparisonReport(const FAutomationScreenshotCompareResults& CompareResults)"
  },
  {
    "label": "NotifyTestDataRetrieved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyTestDataRetrieved(bool bWasNew, const FString& JsonData)"
  },
  {
    "label": "NotifyPerformanceDataRetrieved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPerformanceDataRetrieved(bool bSuccess, const FString& ErrorMessage)"
  },
  {
    "label": "NotifyScreenshotTakenAndCompared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyScreenshotTakenAndCompared()"
  },
  {
    "label": "PrepForAutomationTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepForAutomationTests()"
  },
  {
    "label": "ConcludeAutomationTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConcludeAutomationTests()"
  },
  {
    "label": "DumpAutomationTestExecutionInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpAutomationTestExecutionInfo( const TMap<FString, FAutomationTestExecutionInfo>& InInfoToDump )"
  },
  {
    "label": "InternalStartTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalStartTest( const FString& InTestToRun, const FString& InFullTestPath )"
  },
  {
    "label": "InternalStopTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InternalStopTest(FAutomationTestExecutionInfo& OutExecutionInfo)"
  },
  {
    "label": "FAutomationTestFramework()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FAutomationTestFramework()"
  },
  {
    "label": "FAutomationTestFramework()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FAutomationTestFramework( const FAutomationTestFramework& )"
  },
  {
    "label": "FAutomationTestBase()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FAutomationTestBase( const FString& InName, const bool bInComplexTask )"
  },
  {
    "label": "GetBeautifiedTestName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetBeautifiedTestName()"
  },
  {
    "label": "ClearExecutionInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearExecutionInfo()"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError( const FString& InError, int32 StackOffset = 0 )"
  },
  {
    "label": "AddErrorIfFalse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddErrorIfFalse( bool bCondition, const FString& InError, int32 StackOffset = 0 )"
  },
  {
    "label": "AddErrorS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddErrorS(const FString& InError, const FString& InFilename, int32 InLineNumber)"
  },
  {
    "label": "AddWarningS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWarningS(const FString& InWarning, const FString& InFilename, int32 InLineNumber)"
  },
  {
    "label": "AddWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWarning( const FString& InWarning, int32 StackOffset = 0)"
  },
  {
    "label": "AddInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInfo( const FString& InLogItem, int32 StackOffset = 0, bool bCaptureStack = false)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(const FAutomationEvent& InEvent, int32 StackOffset = 0, bool bCaptureStack = false)"
  },
  {
    "label": "AddAnalyticsItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAnalyticsItem(const FString& InAnalyticsItem)"
  },
  {
    "label": "SetTelemetryStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTelemetryStorage(const FString& StorageName)"
  },
  {
    "label": "HasMetExpectedMessages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMetExpectedMessages(ELogVerbosity::Type VerbosityType = ELogVerbosity::All)"
  },
  {
    "label": "HasMetExpectedErrors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMetExpectedErrors()"
  },
  {
    "label": "GetLastExecutionSuccessState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLastExecutionSuccessState()"
  },
  {
    "label": "LogCategoryMatchesSeverityInclusive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LogCategoryMatchesSeverityInclusive(ELogVerbosity::Type Actual, ELogVerbosity::Type MaximumVerbosity)"
  },
  {
    "label": "LoadDefaultLogSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDefaultLogSettings()"
  },
  {
    "label": "AddExpectedMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedMessage(FString ExpectedPatternString, ELogVerbosity::Type ExpectedVerbosity, EAutomationExpectedMessageFlags::MatchType CompareType = EAutomationExpectedMessageFlags::Contains, int32 Occurrences = 1, bool IsRegex = true)"
  },
  {
    "label": "AddExpectedMessagePlain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedMessagePlain(FString ExpectedString, ELogVerbosity::Type ExpectedVerbosity, EAutomationExpectedMessageFlags::MatchType CompareType = EAutomationExpectedMessageFlags::Contains, int32 Occurrences = 1)"
  },
  {
    "label": "AddExpectedMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedMessage(FString ExpectedPatternString, EAutomationExpectedMessageFlags::MatchType CompareType = EAutomationExpectedMessageFlags::Contains, int32 Occurrences = 1, bool IsRegex = true)"
  },
  {
    "label": "AddExpectedMessagePlain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedMessagePlain(FString ExpectedString, EAutomationExpectedMessageFlags::MatchType CompareType = EAutomationExpectedMessageFlags::Contains, int32 Occurrences = 1)"
  },
  {
    "label": "AddExpectedError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedError(FString ExpectedPatternString, EAutomationExpectedErrorFlags::MatchType CompareType = EAutomationExpectedErrorFlags::Contains, int32 Occurrences = 1, bool IsRegex = true)"
  },
  {
    "label": "AddExpectedErrorPlain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedErrorPlain(FString ExpectedString, EAutomationExpectedErrorFlags::MatchType CompareType = EAutomationExpectedErrorFlags::Contains, int32 Occurrences = 1)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "GetTestSourceFileName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetTestSourceFileName()"
  },
  {
    "label": "GetTestSourceFileLine()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetTestSourceFileLine()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const int32 Actual, const int32 Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const int64 Actual, const int64 Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const SIZE_T Actual, const SIZE_T Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const FVector Actual, const FVector Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const FTransform Actual, const FTransform Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const FRotator Actual, const FRotator Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const FColor Actual, const FColor Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const FLinearColor Actual, const FLinearColor Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const TCHAR* Actual, const TCHAR* Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, FUtf8StringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqual(const TCHAR* What, const TCHAR* Actual, const TCHAR* Expected)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqual(const TCHAR* What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqual(const TCHAR* What, FUtf8StringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestEqualInsensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqualInsensitive(const TCHAR* What, const TCHAR* Actual, const TCHAR* Expected)"
  },
  {
    "label": "TestEqualInsensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqualInsensitive(const TCHAR* What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestEqualInsensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqualInsensitive(const TCHAR* What, FUtf8StringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestNotEqualInsensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqualInsensitive(const TCHAR* What, const TCHAR* Actual, const TCHAR* Expected)"
  },
  {
    "label": "TestNotEqualInsensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqualInsensitive(const TCHAR* What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestNotEqualInsensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqualInsensitive(const TCHAR* What, FUtf8StringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqualSensitive(const TCHAR* What, const TCHAR* Actual, const TCHAR* Expected)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqualSensitive(const TCHAR* What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqualSensitive(const TCHAR* What, FUtf8StringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqualSensitive(const TCHAR* What, const TCHAR* Actual, const TCHAR* Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqualSensitive(const TCHAR* What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqualSensitive(const TCHAR* What, FUtf8StringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqual(*What, Actual, Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqual(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqual(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqual(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqual(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqual(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqual(*What, Actual, Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqual(*What, Actual, Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqual(*What, Actual, Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqual(*What, Actual, Expected)"
  },
  {
    "label": "Tmp()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Tmp(Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqual(*What, Actual, Tmp)"
  },
  {
    "label": "Tmp()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Tmp(Actual)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqual(*What, Tmp, Expected)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqualSensitive(*What, Actual, Expected)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqualSensitive(*What, Actual, Expected)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqualSensitive(*What, Actual, Expected)"
  },
  {
    "label": "Tmp()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Tmp(Expected)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqualSensitive(*What, Actual, Tmp)"
  },
  {
    "label": "Tmp()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Tmp(Actual)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqualSensitive(*What, Tmp, Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNotEqualSensitive(*What, Actual, Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNotEqualSensitive(*What, Actual, Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNotEqualSensitive(*What, Actual, Expected)"
  },
  {
    "label": "Tmp()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Tmp(Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNotEqualSensitive(*What, Actual, Tmp)"
  },
  {
    "label": "Tmp()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Tmp(Actual)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNotEqualSensitive(*What, Tmp, Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestEqual(*What, Actual, Expected)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNearlyEqual(const TCHAR* What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNearlyEqual(const TCHAR* What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNearlyEqual(const TCHAR* What, const FVector Actual, const FVector Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNearlyEqual(const TCHAR* What, const FTransform Actual, const FTransform Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNearlyEqual(const TCHAR* What, const FRotator Actual, const FRotator Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNearlyEqual(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNearlyEqual(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNearlyEqual(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNearlyEqual(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNearlyEqual(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessThan(const TCHAR* What, const int32 Actual, const int32 Expected)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessThan(const TCHAR* What, const int64 Actual, const int64 Expected)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterThan(const TCHAR* What, const int32 Actual, const int32 Expected)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterThan(const TCHAR* What, const int64 Actual, const int64 Expected)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessEqual(const TCHAR* What, const int32 Actual, const int32 Expected)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessEqual(const TCHAR* What, const int64 Actual, const int64 Expected)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterEqual(const TCHAR* What, const int32 Actual, const int32 Expected)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterEqual(const TCHAR* What, const int64 Actual, const int64 Expected)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessThan(const TCHAR* What, const SIZE_T Actual, const SIZE_T Expected)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterThan(const TCHAR* What, const SIZE_T Actual, const SIZE_T Expected)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessEqual(const TCHAR* What, const SIZE_T Actual, const SIZE_T Expected)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterEqual(const TCHAR* What, const SIZE_T Actual, const SIZE_T Expected)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessThan(const TCHAR* What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessThan(const TCHAR* What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterThan(const TCHAR* What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterThan(const TCHAR* What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessEqual(const TCHAR* What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessEqual(const TCHAR* What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterEqual(const TCHAR* What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterEqual(const TCHAR* What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestLessThan(*What, Actual, Expected)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestLessThan(*What, Actual, Expected)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestGreaterThan(*What, Actual, Expected)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestGreaterThan(*What, Actual, Expected)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestLessEqual(*What, Actual, Expected)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestLessEqual(*What, Actual, Expected)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestGreaterEqual(*What, Actual, Expected)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestGreaterEqual(*What, Actual, Expected)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestLessThan(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestLessThan(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestGreaterThan(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestGreaterThan(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestLessEqual(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestLessEqual(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestGreaterEqual(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestGreaterEqual(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestFalse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestFalse(const TCHAR* What, bool Value)"
  },
  {
    "label": "TestFalse()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestFalse(*What, Value)"
  },
  {
    "label": "TestInvalid()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestInvalid(*Description, Value)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNotEqual(*Description, Actual, Expected)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqual(const TCHAR* What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqual(const TCHAR* What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNotEqual(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNotEqual(*What, Actual, Expected, Tolerance)"
  },
  {
    "label": "TestNotNull()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNotNull(*What, Pointer)"
  },
  {
    "label": "TestNotSame()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNotSame(*Description, Actual, Expected)"
  },
  {
    "label": "TestNotSamePtr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNotSamePtr(*Description, Actual, Expected)"
  },
  {
    "label": "TestNull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNull(const TCHAR* What, const void* Pointer)"
  },
  {
    "label": "TestNull()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestNull(*What, Pointer)"
  },
  {
    "label": "TestSame()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestSame(*Description, Actual, Expected)"
  },
  {
    "label": "TestSamePtr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestSamePtr(*Description, Actual, Expected)"
  },
  {
    "label": "TestTrue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestTrue(const TCHAR* What, bool Value)"
  },
  {
    "label": "TestTrue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestTrue(*What, Value)"
  },
  {
    "label": "TestValid()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TestValid(*Description, Value)"
  },
  {
    "label": "ExtractAutomationTestFlags()",
    "kind": "Method",
    "detail": "Function (EAutomationTestFlags)",
    "insertText": "ExtractAutomationTestFlags(FString InTagNotation)"
  },
  {
    "label": "IsExpectedMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExpectedMessage(const FString& Message, const ELogVerbosity::Type& Verbosity = ELogVerbosity::All)"
  },
  {
    "label": "InternalSetSuccessState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetSuccessState(bool bSuccessful)"
  },
  {
    "label": "CriticalSection()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "CriticalSection(&ActionCS)"
  },
  {
    "label": "CriticalSection()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "CriticalSection(&ActionCS)"
  },
  {
    "label": "CriticalSection()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "CriticalSection(&ActionCS)"
  },
  {
    "label": "CriticalSection()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "CriticalSection(&ActionCS)"
  },
  {
    "label": "CriticalSection()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "CriticalSection(&ActionCS)"
  },
  {
    "label": "CriticalSection()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "CriticalSection(&ActionCS)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (reverse)",
    "insertText": "for(int32 ItIndex = 0; ItIndex < Scope->It.Num()"
  },
  {
    "label": "IgnoreCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "IgnoreCount(3)"
  },
  {
    "label": "MaxDepth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MaxDepth(1)"
  },
  {
    "label": "Define()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Define()"
  },
  {
    "label": "GetTestSourceFileName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetTestSourceFileName()"
  },
  {
    "label": "GetTestSourceFileLine()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetTestSourceFileLine()"
  },
  {
    "label": "LatentPredicate()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "LatentPredicate()"
  }
]