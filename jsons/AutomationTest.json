[
  {
    "label": "FAutomationTestBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestBase"
  },
  {
    "label": "FAutomationTestTags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestTags"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "MatchType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MatchType"
  },
  {
    "label": "FAutomationTelemetryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationTelemetryData"
  },
  {
    "label": "FAutomationTestExecutionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestExecutionInfo"
  },
  {
    "label": "FAutomationTestInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestInfo"
  },
  {
    "label": "IAutomationLatentCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAutomationLatentCommand"
  },
  {
    "label": "FAutomationTestFramework",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestFramework"
  },
  {
    "label": "FThreadedAutomationLatentCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadedAutomationLatentCommand"
  },
  {
    "label": "IAutomationNetworkCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAutomationNetworkCommand"
  },
  {
    "label": "FAutomationExpectedMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationExpectedMessage"
  },
  {
    "label": "FAutomationScreenshotData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationScreenshotData"
  },
  {
    "label": "FAutomationScreenshotCompareResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationScreenshotCompareResults"
  },
  {
    "label": "FAutomationComparisonToleranceAmount",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationComparisonToleranceAmount"
  },
  {
    "label": "FAutomationTestOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestOutputDevice"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FAutomationTestMessageFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestMessageFilter"
  },
  {
    "label": "FBDDAutomationTestBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBDDAutomationTestBase"
  },
  {
    "label": "FAutomationSpecBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationSpecBase"
  },
  {
    "label": "FSingleExecuteLatentCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSingleExecuteLatentCommand"
  },
  {
    "label": "FUntilDoneLatentCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUntilDoneLatentCommand"
  },
  {
    "label": "FAsyncUntilDoneLatentCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncUntilDoneLatentCommand"
  },
  {
    "label": "FAsyncLatentCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncLatentCommand"
  },
  {
    "label": "FSpecIt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpecIt"
  },
  {
    "label": "FSpecDefinitionScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpecDefinitionScope"
  },
  {
    "label": "FSpec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpec"
  },
  {
    "label": "CommandName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommandName"
  },
  {
    "label": "EXPORT_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EXPORT_API"
  },
  {
    "label": "F",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "F"
  },
  {
    "label": "TClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TClass"
  },
  {
    "label": "FFunctionLatentCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFunctionLatentCommand"
  },
  {
    "label": "FDelayedFunctionLatentCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDelayedFunctionLatentCommand"
  },
  {
    "label": "FUntilCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUntilCommand"
  },
  {
    "label": "IAutomationLatentCommandWithRetriesAndDelays",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAutomationLatentCommandWithRetriesAndDelays"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Async . h \" # include \" Async / Future . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Queue . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" Containers / StringView . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Delegates / DelegateBase . h \" # include \" Delegates / DelegateInstancesImpl . h \" # include \" Delegates / IDelegateInstance . h \" # include \" GenericPlatform / GenericPlatformStackWalk . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" HAL / PlatformProcess . h \" # include \" HAL / PlatformStackWalk . h \" # include \" HAL / PlatformTime . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" HAL / ThreadSafeBool . h \" # include \" Internationalization / Regex . h \" # include \" Logging / LogVerbosity . h \" # include \" Math / Color . h \" # include \" Math / MathFwd . h \" # include \" Math / Rotator . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / Vector . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / AutomationEvent . h \" # include \" Misc / Build . h \" # include \" Misc / Char . h \" # include \" Misc / CString . h \" # include \" Misc / DateTime . h \" # include \" Misc / FeedbackContext . h \" # include \" Misc / Guid . h \" # include \" Misc / Optional . h \" # include \" Misc / OutputDevice . h \" # include \" Misc / TextFilterExpressionEvaluator . h \" # include \" Misc / Timespan . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include<atomic>)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLatentCommands, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAutomationTestFramework, Log, All)"
  },
  {
    "label": "WITH_AUTOMATION_TESTS()",
    "kind": "Method",
    "detail": "Function (class FAutomationTestBase ; class FAutomationTestTags ; # ifndef WITH_AUTOMATION_TESTS # define)",
    "insertText": "WITH_AUTOMATION_TESTS(WITH_DEV_AUTOMATION_TESTS || WITH_PERF_AUTOMATION_TESTS) #endif #define SAFE_GETSTACK(VariableName, IgnoreCount, MaxDepth) \\ TArray<FProgramCounterSymbolInfo> VariableName = FPlatformStackWalk::GetStack(IgnoreCount, MaxDepth)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(VariableName.Num() == 0)"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (\\ \\ FProgramCounterSymbolInfo& Info = VariableName .)",
    "insertText": "Emplace_GetRef()"
  },
  {
    "label": "Strcpy()",
    "kind": "Method",
    "detail": "Function (\\ TCString<ANSICHAR)",
    "insertText": "Strcpy(Info.Filename, FProgramCounterSymbolInfo::MAX_NAME_LENGTH, \"Unknown\")"
  },
  {
    "label": "UE_RETURN_ON_ERROR()",
    "kind": "Method",
    "detail": "Function (\\ Info . LineNumber = 1 ; \\ } # ifndef UE_RETURN_ON_ERROR # define)",
    "insertText": "UE_RETURN_ON_ERROR(Condition, Message) const bool PREPROCESSOR_JOIN(UE____bCondition_Line_, __LINE__) = (Condition)"
  },
  {
    "label": "AddErrorIfFalse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddErrorIfFalse(PREPROCESSOR_JOIN(UE____bCondition_Line_, __LINE__), (Message))"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0 x00000000,EditorContext = 0 x00000001,ClientContext = 0 x00000002,ServerContext = 0 x00000004,CommandletContext = 0 x00000008,ProgramContext = 0 x00000010,NonNullRHI = 0 x00000100,RequiresUser = 0 x00000200,Disabled = 0 x00010000,CriticalPriority = 0 x00100000,HighPriority = 0 x00200000,MediumPriority = 0 x00400000,LowPriority = 0 x00800000,SmokeFilter = 0 x01000000,EngineFilter = 0 x02000000,ProductFilter = 0 x04000000,PerfFilter = 0 x08000000,StressFilter = 0 x10000000,NegativeFilter = 0 x20000000,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EAutomationTestFlags)"
  },
  {
    "label": "EAutomationTestFlags_GetTestFlagsMap()",
    "kind": "Method",
    "detail": "Function (EAutomationTestFlags EAutomationTestFlags_FeatureMask = EAutomationTestFlags::NonNullRHI | EAutomationTestFlags::RequiresUser ; EAutomationTestFlags EAutomationTestFlags_HighPriorityAndAbove = EAutomationTestFlags::CriticalPriority | EAutomationTestFlags::HighPriority ; EAutomationTestFlags EAutomationTestFlags_MediumPriorityAndAbove = EAutomationTestFlags::CriticalPriority | EAutomationTestFlags::HighPriority | EAutomationTestFlags::MediumPriority ; EAutomationTestFlags EAutomationTestFlags_PriorityMask = EAutomationTestFlags::CriticalPriority | EAutomationTestFlags::HighPriority | EAutomationTestFlags::MediumPriority | EAutomationTestFlags::LowPriority ; EAutomationTestFlags EAutomationTestFlags_FilterMask = EAutomationTestFlags::SmokeFilter | EAutomationTestFlags::EngineFilter | EAutomationTestFlags::ProductFilter | EAutomationTestFlags::PerfFilter | EAutomationTestFlags::StressFilter | EAutomationTestFlags::NegativeFilter ; const TMap<FString,EAutomationTestFlags>&)",
    "insertText": "EAutomationTestFlags_GetTestFlagsMap()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (namespace EAutomationExpectedMessageFlags { enum MatchType { Exact,Contains,} ; const TCHAR*)",
    "insertText": "ToString(EAutomationExpectedMessageFlags::MatchType ThisType)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TEXT(\"Unknown\")"
  },
  {
    "label": "FAutomationTelemetryData()",
    "kind": "Method",
    "detail": "Function (} } namespace EAutomationExpectedErrorFlags = EAutomationExpectedMessageFlags ; struct FAutomationTelemetryData { FString DataPoint ; double Measurement ; FString Context ;)",
    "insertText": "FAutomationTelemetryData(const FString& InDataPoint, double InMeasurement, const FString& InContext) :DataPoint(InDataPoint) , Measurement(InMeasurement) , Context(InContext)"
  },
  {
    "label": "FAutomationTestExecutionInfo()",
    "kind": "Method",
    "detail": "Function (} } ; class FAutomationTestExecutionInfo { public :)",
    "insertText": "FAutomationTestExecutionInfo() : bSuccessful( false ) , Duration(0.0) , Errors(0) , Warnings(0)"
  },
  {
    "label": "FAutomationTestExecutionInfo()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAutomationTestExecutionInfo()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "RemoveAllEvents()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveAllEvents(EAutomationEventType EventType)"
  },
  {
    "label": "RemoveAllEvents()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveAllEvents(TFunctionRef<bool(FAutomationEvent&)> FilterPredicate)"
  },
  {
    "label": "GetEntries()",
    "kind": "Method",
    "detail": "Function (const TArray<FAutomationExecutionEntry>&)",
    "insertText": "GetEntries()"
  },
  {
    "label": "AddWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWarning(const FString& WarningMessage)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(const FString& ErrorMessage)"
  },
  {
    "label": "GetWarningTotal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWarningTotal()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (FString EmptyContext ; return ContextStack .)",
    "insertText": "Num() ? ContextStack.Top()"
  },
  {
    "label": "PushContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PushContext(const FString& Context)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (ContextStack .)",
    "insertText": "Push(Context)"
  },
  {
    "label": "PopContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopContext()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (ContextStack .)",
    "insertText": "Pop()"
  },
  {
    "label": "FAutomationTestInfo()",
    "kind": "Method",
    "detail": "Function (} } public : bool bSuccessful ; TArray<FString> AnalyticsItems ; TArray<FAutomationTelemetryData> TelemetryItems ; FString TelemetryStorage ; double Duration ; private : TArray<FAutomationExecutionEntry> Entries ; int32 Errors ; int32 Warnings ; TArray<FString> ContextStack ; } ; class FAutomationTestInfo { public :)",
    "insertText": "FAutomationTestInfo()"
  },
  {
    "label": "FAutomationTestInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAutomationTestInfo(const FString& InDisplayName, const FString& InFullTestPath, const FString& InTestName, const EAutomationTestFlags InTestFlags, const int32 InNumParticipantsRequired, const FString& InParameterName = FString(), const FString& InSourceFile = FString(), int32 InSourceFileLine = 0, const FString& InAssetPath = FString(), const FString& InOpenCommand = FString(), const FString& InTestTags = FString()) : DisplayName( InDisplayName ) , FullTestPath( InFullTestPath ) , TestName( InTestName ) , TestTags( InTestTags ) , TestParameter( InParameterName ) , SourceFile( InSourceFile ) , SourceFileLine( InSourceFileLine ) , AssetPath( InAssetPath ) , OpenCommand( InOpenCommand ) , TestFlags( InTestFlags ) , NumParticipantsRequired( InNumParticipantsRequired ) , NumDevicesCurrentlyRunningTest( 0)"
  },
  {
    "label": "AddTestFlags()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "AddTestFlags(const EAutomationTestFlags InTestFlags)"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (TestFlags | = InTestFlags ; } const FString&)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "InformOfNewDeviceRunningTest()",
    "kind": "Method",
    "detail": "Function (NumDevicesCurrentlyRunningTest = 0 ; } void)",
    "insertText": "InformOfNewDeviceRunningTest()"
  },
  {
    "label": "GetNumDevicesRunningTest()",
    "kind": "Method",
    "detail": "Function (NumDevicesCurrentlyRunningTest + + ; } const int)",
    "insertText": "GetNumDevicesRunningTest()"
  },
  {
    "label": "SetNumParticipantsRequired()",
    "kind": "Method",
    "detail": "Function (DisplayName = InDisplayName ; } void)",
    "insertText": "SetNumParticipantsRequired(int32 NumRequired)"
  },
  {
    "label": "IAutomationLatentCommand()",
    "kind": "Method",
    "detail": "Function (NumParticipantsRequired = NumRequired ; } private : FString DisplayName ; FString FullTestPath ; FString TestName ; FString TestTags ; FString TestParameter ; FString SourceFile ; int32 SourceFileLine ; FString AssetPath ; FString OpenCommand ; EAutomationTestFlags TestFlags = EAutomationTestFlags::None ; uint32 NumParticipantsRequired = 0 ; uint32 NumDevicesCurrentlyRunningTest = 0 ; } ; class IAutomationLatentCommand : public TSharedFromThis<IAutomationLatentCommand> { public : ~)",
    "insertText": "IAutomationLatentCommand()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "Update()"
  },
  {
    "label": "InternalUpdate()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "InternalUpdate()"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (StartTime =)",
    "insertText": "Seconds()"
  },
  {
    "label": "IAutomationLatentCommand()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "IAutomationLatentCommand() : StartTime(0.0f)"
  },
  {
    "label": "GetCurrentRunTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetCurrentRunTime()"
  },
  {
    "label": "FThreadedAutomationLatentCommand()",
    "kind": "Method",
    "detail": "Function (} double StartTime ; class FAutomationTestFramework ; } ; class FThreadedAutomationLatentCommand : public IAutomationLatentCommand { public : ~)",
    "insertText": "FThreadedAutomationLatentCommand()"
  },
  {
    "label": "Async()",
    "kind": "Method",
    "detail": "Function (Future =)",
    "insertText": "Async(EAsyncExecution::Thread, MoveTemp(Function))"
  },
  {
    "label": "IsReady()",
    "kind": "Method",
    "detail": "Function (} return Future .)",
    "insertText": "IsReady()"
  },
  {
    "label": "FThreadedAutomationLatentCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FThreadedAutomationLatentCommand(TUniqueFunction<void()> InFunction) : Function(MoveTemp(InFunction))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} protected : TUniqueFunction<)",
    "insertText": "void()"
  },
  {
    "label": "IAutomationNetworkCommand()",
    "kind": "Method",
    "detail": "Function (TFuture<void> Future ; class FAutomationTestFramework ; } ; class IAutomationNetworkCommand : public TSharedFromThis<IAutomationNetworkCommand> { public : ~)",
    "insertText": "IAutomationNetworkCommand()"
  },
  {
    "label": "GetRoleIndex()",
    "kind": "Method",
    "detail": "Function (} ; uint32)",
    "insertText": "GetRoleIndex()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run()"
  },
  {
    "label": "FAutomationExpectedMessage()",
    "kind": "Method",
    "detail": "Function (} ; struct FAutomationExpectedMessage { FString MessagePatternString ; TOptional<FRegexPattern> MessagePatternRegex ; EAutomationExpectedMessageFlags::MatchType CompareType ; int32 ExpectedNumberOfOccurrences ; int32 ActualNumberOfOccurrences ; ELogVerbosity::Type Verbosity ;)",
    "insertText": "FAutomationExpectedMessage(FString& InMessagePattern, ELogVerbosity::Type InVerbosity, EAutomationExpectedMessageFlags::MatchType InCompareType, int32 InExpectedNumberOfOccurrences = 1, bool IsRegex = true) : MessagePatternString(InMessagePattern) , CompareType(InCompareType) , ExpectedNumberOfOccurrences(InExpectedNumberOfOccurrences) , ActualNumberOfOccurrences(0) , Verbosity(InVerbosity)"
  },
  {
    "label": "FRegexPattern()",
    "kind": "Method",
    "detail": "Function (MessagePatternRegex =)",
    "insertText": "FRegexPattern((InCompareType == EAutomationExpectedMessageFlags::Exact) ? FString::Printf(TEXT(\"^%s$\"), *InMessagePattern) : InMessagePattern, ERegexPatternFlags::CaseInsensitive)"
  },
  {
    "label": "FAutomationExpectedMessage()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FAutomationExpectedMessage(FString& InMessagePattern, ELogVerbosity::Type InVerbosity, int32 InExpectedNumberOfOccurrences) : MessagePatternString(InMessagePattern) , MessagePatternRegex(FRegexPattern(InMessagePattern, ERegexPatternFlags::CaseInsensitive)) , CompareType(EAutomationExpectedMessageFlags::Contains) , ExpectedNumberOfOccurrences(InExpectedNumberOfOccurrences) , ActualNumberOfOccurrences(0) , Verbosity(InVerbosity)"
  },
  {
    "label": "IsRegex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRegex()"
  },
  {
    "label": "IsExactCompareType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsExactCompareType()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool HasMatch = false ;)",
    "insertText": "if(IsRegex())"
  },
  {
    "label": "MessageMatcher()",
    "kind": "Method",
    "detail": "Function (FRegexMatcher)",
    "insertText": "MessageMatcher(MessagePatternRegex.GetValue(), Message)"
  },
  {
    "label": "FindNext()",
    "kind": "Method",
    "detail": "Function (HasMatch = MessageMatcher .)",
    "insertText": "FindNext()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} else { HasMatch = Message .)",
    "insertText": "Contains(MessagePatternString) && (!IsExactCompareType() || Message.Len() == MessagePatternString.Len())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ActualNumberOfOccurrences + = HasMatch ; return HasMatch ; } bool)",
    "insertText": "operator(const FAutomationExpectedMessage& Other)"
  },
  {
    "label": "FAutomationScreenshotData()",
    "kind": "Method",
    "detail": "Function (} struct FAutomationScreenshotData { FString ScreenShotName ; FString VariantName ; FString Context ; FString TestName ; FString Notes ; FGuid Id ; FString Commit ; int32 Width ; int32 Height ; FString Platform ; FString Rhi ; FString FeatureLevel ; bool bIsStereo ; FString Vendor ; FString AdapterName ; FString AdapterInternalDriverVersion ; FString AdapterUserDriverVersion ; FString UniqueDeviceId ; float ResolutionQuality ; int32 ViewDistanceQuality ; int32 AntiAliasingQuality ; int32 ShadowQuality ; int32 GlobalIlluminationQuality ; int32 ReflectionQuality ; int32 PostProcessQuality ; int32 TextureQuality ; int32 EffectsQuality ; int32 FoliageQuality ; int32 ShadingQuality ; bool bHasComparisonRules ; uint8 ToleranceRed ; uint8 ToleranceGreen ; uint8 ToleranceBlue ; uint8 ToleranceAlpha ; uint8 ToleranceMinBrightness ; uint8 ToleranceMaxBrightness ; float MaximumLocalError ; float MaximumGlobalError ; bool bIgnoreAntiAliasing ; bool bIgnoreColors ; FString ScreenshotPath ;)",
    "insertText": "FAutomationScreenshotData() : Id() , Commit() , Width(0) , Height(0) , bIsStereo(false) , ResolutionQuality(1.0f) , ViewDistanceQuality(0) , AntiAliasingQuality(0) , ShadowQuality(0) , GlobalIlluminationQuality(0) , ReflectionQuality(0) , PostProcessQuality(0) , TextureQuality(0) , EffectsQuality(0) , FoliageQuality(0) , ShadingQuality(0) , bHasComparisonRules(false) , ToleranceRed(0) , ToleranceGreen(0) , ToleranceBlue(0) , ToleranceAlpha(0) , ToleranceMinBrightness(0) , ToleranceMaxBrightness(255) , MaximumLocalError(0.0f) , MaximumGlobalError(0.0f) , bIgnoreAntiAliasing(false) , bIgnoreColors(false)"
  },
  {
    "label": "FAutomationScreenshotCompareResults()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAutomationScreenshotCompareResults { FGuid UniqueId ; FString ErrorMessage ; double MaxLocalDifference = 0 . 0 ; double GlobalDifference = 0 . 0 ; bool bWasNew = false ; bool bWasSimilar = false ; FString IncomingFilePath ; FString ReportComparisonFilePath ; FString ReportApprovedFilePath ; FString ReportIncomingFilePath ; FString ScreenshotPath ;)",
    "insertText": "FAutomationScreenshotCompareResults() : UniqueId() , MaxLocalDifference(0.0) , GlobalDifference(0.0) , bWasNew(false) , bWasSimilar(false)"
  },
  {
    "label": "FAutomationScreenshotCompareResults()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutomationScreenshotCompareResults(FGuid InUniqueId, FString InErrorMessage, double InMaxLocalDifference, double InGlobalDifference, bool InWasNew, bool InWasSimilar, FString InIncomingFilePath, FString InReportComparisonFilePath, FString InReportApprovedFilePath, FString InReportIncomingFilePath, FString InScreenshotPath ) : UniqueId(InUniqueId) , ErrorMessage(InErrorMessage) , MaxLocalDifference(InMaxLocalDifference) , GlobalDifference(InGlobalDifference) , bWasNew(InWasNew) , bWasSimilar(InWasSimilar) , IncomingFilePath(InIncomingFilePath) , ReportComparisonFilePath(InReportComparisonFilePath) , ReportApprovedFilePath(InReportApprovedFilePath) , ReportIncomingFilePath(InReportIncomingFilePath) , ScreenshotPath(InScreenshotPath)"
  },
  {
    "label": "ToAutomationEvent()",
    "kind": "Method",
    "detail": "Function (} FAutomationEvent)",
    "insertText": "ToAutomationEvent()"
  },
  {
    "label": "FAutomationComparisonToleranceAmount()",
    "kind": "Method",
    "detail": "Function (} ; enum class EAutomationComparisonToleranceLevel : uint8 { Zero,Low,Medium,High } ; struct FAutomationComparisonToleranceAmount { public :)",
    "insertText": "FAutomationComparisonToleranceAmount() : Red(0) , Green(0) , Blue(0) , Alpha(0) , MinBrightness(0) , MaxBrightness(255)"
  },
  {
    "label": "FAutomationComparisonToleranceAmount()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutomationComparisonToleranceAmount(uint8 R, uint8 G, uint8 B, uint8 A, uint8 InMinBrightness, uint8 InMaxBrightness) : Red(R) , Green(G) , Blue(B) , Alpha(A) , MinBrightness(InMinBrightness) , MaxBrightness(InMaxBrightness)"
  },
  {
    "label": "FromToleranceLevel()",
    "kind": "Method",
    "detail": "Function (} FAutomationComparisonToleranceAmount)",
    "insertText": "FromToleranceLevel(EAutomationComparisonToleranceLevel InTolerance)"
  },
  {
    "label": "FAutomationComparisonToleranceAmount()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FAutomationComparisonToleranceAmount(0, 0, 0, 0, 0, 255)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} uint8 Red ; uint8 Green ; uint8 Blue ; uint8 Alpha ; uint8 MinBrightness ; uint8 MaxBrightness ; } ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnTestScreenshotCaptured, const TArray<FColor>&, const FAutomationScreenshotData&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnTestScreenshotAndTraceCaptured, const TArray<FColor>&, const TArray<uint8>&, const FAutomationScreenshotData&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnTestScreenshotComparisonComplete, const FAutomationScreenshotCompareResults&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnTestScreenshotComparisonReport, const FAutomationScreenshotCompareResults&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnTestDataRetrieved, bool , const FString&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnPerformanceDataRetrieved, bool , const FString&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnTestEvent, FAutomationTestBase*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnTestSectionEvent, const FString&)"
  },
  {
    "label": "GetOnEnteringTestSection()",
    "kind": "Method",
    "detail": "Function (class FAutomationTestFramework { public : FSimpleMulticastDelegate PreTestingEvent ; FSimpleMulticastDelegate PostTestingEvent ; FOnTestEvent OnTestStartEvent ; FOnTestEvent OnTestEndEvent ; FOnTestScreenshotComparisonComplete OnScreenshotCompared ; FOnTestScreenshotComparisonReport OnScreenshotComparisonReport ; FOnTestDataRetrieved OnTestDataRetrieved ; FOnPerformanceDataRetrieved OnPerformanceDataRetrieved ; FSimpleMulticastDelegate OnScreenshotTakenAndCompared ; FSimpleMulticastDelegate OnBeforeAllTestsEvent ; FSimpleMulticastDelegate OnAfterAllTestsEvent ; FOnTestSectionEvent&)",
    "insertText": "GetOnEnteringTestSection(const FString& Section)"
  },
  {
    "label": "TriggerOnEnteringTestSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerOnEnteringTestSection(const FString& Section)"
  },
  {
    "label": "IsAnyOnEnteringTestSectionBound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyOnEnteringTestSectionBound()"
  },
  {
    "label": "GetOnLeavingTestSection()",
    "kind": "Method",
    "detail": "Function (FOnTestSectionEvent&)",
    "insertText": "GetOnLeavingTestSection(const FString& Section)"
  },
  {
    "label": "TriggerOnLeavingTestSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerOnLeavingTestSection(const FString& Section)"
  },
  {
    "label": "IsAnyOnLeavingTestSectionBound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyOnLeavingTestSectionBound()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FAutomationTestFramework&)",
    "insertText": "Get()"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (FAutomationTestFramework&)",
    "insertText": "GetInstance()"
  },
  {
    "label": "GetUserAutomationDirectory()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetUserAutomationDirectory()"
  },
  {
    "label": "RegisterAutomationTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterAutomationTest(const FString& InTestNameToRegister, FAutomationTestBase* InTestToRegister)"
  },
  {
    "label": "UnregisterAutomationTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterAutomationTest(const FString& InTestNameToUnregister)"
  },
  {
    "label": "RegisterAutomationTestTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterAutomationTestTags(const FString& InTestNameToRegister, const FString& InTestTagsToRegister)"
  },
  {
    "label": "UnregisterAutomationTestTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterAutomationTestTags(const FString& InTestNameToUnregister)"
  },
  {
    "label": "RegisterComplexAutomationTestTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterComplexAutomationTestTags(const FAutomationTestBase* InTest, const FString& InBeautifiedTestName, const FString& InTestTagsToRegister)"
  },
  {
    "label": "GetTagsForAutomationTest()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTagsForAutomationTest(const FString& InTestName)"
  },
  {
    "label": "EnqueueLatentCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueLatentCommand(TSharedPtr<IAutomationLatentCommand> NewCommand)"
  },
  {
    "label": "EnqueueNetworkCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueNetworkCommand(TSharedPtr<IAutomationNetworkCommand> NewCommand)"
  },
  {
    "label": "ContainsTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsTest(const FString& InTestName)"
  },
  {
    "label": "RunSmokeTests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunSmokeTests()"
  },
  {
    "label": "ResetTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTests()"
  },
  {
    "label": "StartTestByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTestByName(const FString& InTestToRun, const int32 InRoleIndex, const FString& InFullTestPath = FString())"
  },
  {
    "label": "StopTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopTest(FAutomationTestExecutionInfo& OutExecutionInfo)"
  },
  {
    "label": "ExecuteLatentCommands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecuteLatentCommands()"
  },
  {
    "label": "ExecuteNetworkCommands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecuteNetworkCommands()"
  },
  {
    "label": "DequeueAllCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DequeueAllCommands()"
  },
  {
    "label": "IsLatentCommandQueueEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLatentCommandQueueEmpty()"
  },
  {
    "label": "LoadTestModules()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LoadTestModules()"
  },
  {
    "label": "GetValidTestNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValidTestNames(TArray<FAutomationTestInfo>& TestInfo)"
  },
  {
    "label": "GetTestFullNamesMatchingTagPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTestFullNamesMatchingTagPattern(TArray<FString>& OutTestNames, const FString& TagPattern)"
  },
  {
    "label": "ShouldTestContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldTestContent(const FString& Path)"
  },
  {
    "label": "SetDeveloperDirectoryIncluded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeveloperDirectoryIncluded(const bool bInDeveloperDirectoryIncluded)"
  },
  {
    "label": "SetRequestedTestFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequestedTestFilter(const EAutomationTestFlags InRequestedTestFlags)"
  },
  {
    "label": "OnScreenshotCaptured()",
    "kind": "Method",
    "detail": "Function (FOnTestScreenshotCaptured&)",
    "insertText": "OnScreenshotCaptured()"
  },
  {
    "label": "OnScreenshotAndTraceCaptured()",
    "kind": "Method",
    "detail": "Function (FOnTestScreenshotAndTraceCaptured&)",
    "insertText": "OnScreenshotAndTraceCaptured()"
  },
  {
    "label": "SetForceSmokeTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceSmokeTests(const bool bInForceSmokeTests)"
  },
  {
    "label": "GetCaptureStack()",
    "kind": "Method",
    "detail": "Function (bForceSmokeTests = bInForceSmokeTests ; } bool)",
    "insertText": "GetCaptureStack()"
  },
  {
    "label": "SetCaptureStack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCaptureStack(bool bCapture)"
  },
  {
    "label": "AddAnalyticsItemToCurrentTest()",
    "kind": "Method",
    "detail": "Function (bCaptureStack = bCapture ; } void)",
    "insertText": "AddAnalyticsItemToCurrentTest(const FString& AnalyticsItem)"
  },
  {
    "label": "GetCurrentTest()",
    "kind": "Method",
    "detail": "Function (FAutomationTestBase*)",
    "insertText": "GetCurrentTest()"
  },
  {
    "label": "NeedLogBPTestMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedLogBPTestMetadata()"
  },
  {
    "label": "NeedPerformStereoTestVariants()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedPerformStereoTestVariants()"
  },
  {
    "label": "NeedUseLightweightStereoTestVariants()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedUseLightweightStereoTestVariants()"
  },
  {
    "label": "NotifyScreenshotComparisonComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyScreenshotComparisonComplete(const FAutomationScreenshotCompareResults& CompareResults)"
  },
  {
    "label": "NotifyScreenshotComparisonReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyScreenshotComparisonReport(const FAutomationScreenshotCompareResults& CompareResults)"
  },
  {
    "label": "NotifyTestDataRetrieved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyTestDataRetrieved(bool bWasNew, const FString& JsonData)"
  },
  {
    "label": "NotifyPerformanceDataRetrieved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPerformanceDataRetrieved(bool bSuccess, const FString& ErrorMessage)"
  },
  {
    "label": "NotifyScreenshotTakenAndCompared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyScreenshotTakenAndCompared()"
  },
  {
    "label": "CanRunTestInEnvironment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRunTestInEnvironment(const FString& InTestToRun, FString* OutReason, bool* OutWarn)"
  },
  {
    "label": "FAutomationTestOutputDevice()",
    "kind": "Method",
    "detail": "Function (private : class FAutomationTestOutputDevice : public FOutputDevice { public :)",
    "insertText": "FAutomationTestOutputDevice() : CurTest( nullptr)"
  },
  {
    "label": "FAutomationTestOutputDevice()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAutomationTestOutputDevice()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (CurTest = nullptr ; } void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const class FName& Category)"
  },
  {
    "label": "CanBeUsedOnMultipleThreads()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeUsedOnMultipleThreads()"
  },
  {
    "label": "FAutomationTestMessageFilter()",
    "kind": "Method",
    "detail": "Function (CurTest = InAutomationTest ; } private : std::atomic<FAutomationTestBase*> CurTest ; } ; class FAutomationTestMessageFilter : public FFeedbackContext { public :)",
    "insertText": "FAutomationTestMessageFilter() : CurTest(nullptr) , DestinationContext(nullptr)"
  },
  {
    "label": "FAutomationTestMessageFilter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAutomationTestMessageFilter()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (DestinationContext = nullptr ; CurTest = nullptr ; } void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category, double Time)"
  },
  {
    "label": "SerializeRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeRecord(const UE::FLogRecord& Record)"
  },
  {
    "label": "SetDestinationContext()",
    "kind": "Method",
    "detail": "Function (CurTest = InAutomationTest ; } void)",
    "insertText": "SetDestinationContext(FFeedbackContext* InDestinationContext)"
  },
  {
    "label": "PrepForAutomationTests()",
    "kind": "Method",
    "detail": "Function (DestinationContext = InDestinationContext ; } private : std::atomic<FAutomationTestBase*> CurTest ; std::atomic<FFeedbackContext*> DestinationContext ; FCriticalSection ActionCS ; } ; class FAutomationTestOutputDevice ; void)",
    "insertText": "PrepForAutomationTests()"
  },
  {
    "label": "ConcludeAutomationTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConcludeAutomationTests()"
  },
  {
    "label": "DumpAutomationTestExecutionInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpAutomationTestExecutionInfo(const TMap<FString, FAutomationTestExecutionInfo>& InInfoToDump)"
  },
  {
    "label": "InternalStartTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalStartTest(const FString& InTestToRun, const FString& InFullTestPath)"
  },
  {
    "label": "InternalStopTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InternalStopTest(FAutomationTestExecutionInfo& OutExecutionInfo)"
  },
  {
    "label": "FAutomationTestFramework()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAutomationTestFramework()"
  },
  {
    "label": "FAutomationTestFramework()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAutomationTestFramework(const FAutomationTestFramework&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAutomationTestFramework&)",
    "insertText": "operator(const FAutomationTestFramework&)"
  },
  {
    "label": "TagsMatchPattern()",
    "kind": "Method",
    "detail": "Function (FAutomationTestOutputDevice AutomationTestOutputDevice ; FAutomationTestMessageFilter AutomationTestMessageFilter ; FFeedbackContext* OriginalGWarn = nullptr ; TMap<FString,FAutomationTestBase*> AutomationTestClassNameToInstanceMap ; TMap<FString,FString> TestFullNameToTagDataMap ; TQueue<TSharedPtr<IAutomationLatentCommand>> LatentCommands ; TQueue<TSharedPtr<IAutomationNetworkCommand>> NetworkCommands ; EAutomationTestFlags RequestedTestFilter ; double StartTime ; bool bTestSuccessful ; FAutomationTestBase* CurrentTest ; FString Parameters ; FString CurrentTestFullPath ; bool bDeveloperDirectoryIncluded ; uint32 NetworkRoleIndex ; FOnTestScreenshotCaptured TestScreenshotCapturedDelegate ; FOnTestScreenshotAndTraceCaptured TestScreenshotAndTraceCapturedDelegate ; bool bForceSmokeTests ; bool bCaptureStack ; TMap<FString,FOnTestSectionEvent> OnEnteringTestSectionEvent ; TMap<FString,FOnTestSectionEvent> OnLeavingTestSectionEvent ; bool)",
    "insertText": "TagsMatchPattern(const FString& Tags, const FString& TagPattern)"
  },
  {
    "label": "FAutomationTestTags()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTextFilterExpressionEvaluator> TagFilter ; } ; class FAutomationTestTags { public :)",
    "insertText": "FAutomationTestTags(const FString& InTestFullName, const FString& InTags)"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"AutomationTest/Framework\"))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TestFullName = InTestFullName ; bool Registered =)",
    "insertText": "Get().RegisterAutomationTestTags( InTestFullName, InTags)"
  },
  {
    "label": "FAutomationTestTags()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FAutomationTestTags()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().UnregisterAutomationTestTags(TestFullName)"
  },
  {
    "label": "FAutomationTestBase()",
    "kind": "Method",
    "detail": "Function (} } private : FString TestFullName ; } ; class FAutomationTestBase { public :)",
    "insertText": "FAutomationTestBase(const FString& InName, const bool bInComplexTask)"
  },
  {
    "label": "FAutomationTestBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAutomationTestBase()"
  },
  {
    "label": "GetTestFlags()",
    "kind": "Method",
    "detail": "Function (bool bSuppressLogWarnings ; bool bSuppressLogErrors ; bool bElevateLogWarningsToErrors ; TArray<FString> SuppressedLogCategories ; EAutomationTestFlags)",
    "insertText": "GetTestFlags()"
  },
  {
    "label": "GetTestName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTestName()"
  },
  {
    "label": "GetTestFullName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTestFullName()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(GetTestContext().IsEmpty())"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Printf(TEXT(\"%s.%s\"), *GetBeautifiedTestName(), *GetTestContext())"
  },
  {
    "label": "GetRequiredDeviceNum()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetRequiredDeviceNum()"
  },
  {
    "label": "ClearExecutionInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearExecutionInfo()"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(const FString& InError, int32 StackOffset = 0)"
  },
  {
    "label": "AddErrorIfFalse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddErrorIfFalse(bool bCondition, const FString& InError, int32 StackOffset = 0)"
  },
  {
    "label": "AddWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWarning(const FString& InWarning, int32 StackOffset = 0)"
  },
  {
    "label": "AddInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInfo(const FString& InLogItem, int32 StackOffset = 0, bool bCaptureStack = false)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(const FAutomationEvent& InEvent, int32 StackOffset = 0, bool bCaptureStack = false)"
  },
  {
    "label": "AddAnalyticsItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAnalyticsItem(const FString& InAnalyticsItem)"
  },
  {
    "label": "AddTelemetryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTelemetryData(const FString& DataPoint, double Measurement, const FString& Context = TEXT(\"\"))"
  },
  {
    "label": "AddTelemetryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTelemetryData(const TMap<FString, double>& ValuePairs, const FString& Context = TEXT(\"\"))"
  },
  {
    "label": "SetTelemetryStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTelemetryStorage(const FString& StorageName)"
  },
  {
    "label": "HasAnyErrors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyErrors()"
  },
  {
    "label": "HasMetExpectedMessages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMetExpectedMessages(ELogVerbosity::Type VerbosityType = ELogVerbosity::All)"
  },
  {
    "label": "HasMetExpectedErrors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMetExpectedErrors()"
  },
  {
    "label": "GetLastExecutionSuccessState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLastExecutionSuccessState()"
  },
  {
    "label": "GetExecutionInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExecutionInfo(FAutomationTestExecutionInfo& OutInfo)"
  },
  {
    "label": "GenerateTestNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateTestNames(TArray<FAutomationTestInfo>& TestInfo)"
  },
  {
    "label": "LogCategoryMatchesSeverityInclusive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LogCategoryMatchesSeverityInclusive(ELogVerbosity::Type Actual, ELogVerbosity::Type MaximumVerbosity)"
  },
  {
    "label": "LoadDefaultLogSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDefaultLogSettings()"
  },
  {
    "label": "AddExpectedMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedMessage(FString ExpectedPatternString, ELogVerbosity::Type ExpectedVerbosity, EAutomationExpectedMessageFlags::MatchType CompareType = EAutomationExpectedMessageFlags::Contains, int32 Occurrences = 1, bool IsRegex = true)"
  },
  {
    "label": "AddExpectedMessagePlain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedMessagePlain(FString ExpectedString, ELogVerbosity::Type ExpectedVerbosity, EAutomationExpectedMessageFlags::MatchType CompareType = EAutomationExpectedMessageFlags::Contains, int32 Occurrences = 1)"
  },
  {
    "label": "AddExpectedMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedMessage(FString ExpectedPatternString, EAutomationExpectedMessageFlags::MatchType CompareType = EAutomationExpectedMessageFlags::Contains, int32 Occurrences = 1, bool IsRegex = true)"
  },
  {
    "label": "AddExpectedMessagePlain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedMessagePlain(FString ExpectedString, EAutomationExpectedMessageFlags::MatchType CompareType = EAutomationExpectedMessageFlags::Contains, int32 Occurrences = 1)"
  },
  {
    "label": "GetExpectedMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExpectedMessages(TArray<FAutomationExpectedMessage>& OutInfo, ELogVerbosity::Type Verbosity = ELogVerbosity::All)"
  },
  {
    "label": "AddExpectedError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedError(FString ExpectedPatternString, EAutomationExpectedErrorFlags::MatchType CompareType = EAutomationExpectedErrorFlags::Contains, int32 Occurrences = 1, bool IsRegex = true)"
  },
  {
    "label": "AddExpectedErrorPlain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedErrorPlain(FString ExpectedString, EAutomationExpectedErrorFlags::MatchType CompareType = EAutomationExpectedErrorFlags::Contains, int32 Occurrences = 1)"
  },
  {
    "label": "IsComplexTask()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsComplexTask()"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IAutomationLatentCommand> CommandPtr =)",
    "insertText": "MakeShareable(NewCommand)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().EnqueueLatentCommand(CommandPtr)"
  },
  {
    "label": "AddCommand()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddCommand(IAutomationNetworkCommand* NewCommand)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().EnqueueNetworkCommand(CommandPtr)"
  },
  {
    "label": "GetTestSourceFileName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetTestSourceFileName()"
  },
  {
    "label": "GetTestSourceFileLine()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetTestSourceFileLine()"
  },
  {
    "label": "GetTestSourceFileLine()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetTestSourceFileLine(const FString& InTestName)"
  },
  {
    "label": "GetTestAssetPath()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetTestAssetPath(const FString& Parameter)"
  },
  {
    "label": "GetTestOpenCommand()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetTestOpenCommand(const FString& Parameter)"
  },
  {
    "label": "PushContext()",
    "kind": "Method",
    "detail": "Function (ExecutionInfo .)",
    "insertText": "PushContext(Context)"
  },
  {
    "label": "CanRunInEnvironment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanRunInEnvironment(const FString& TestParams, FString* OutReason, bool* OutWarn)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const int64 Actual, const int64 Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_64BITS bool)",
    "insertText": "TestEqual(const TCHAR* What, const SIZE_T Actual, const SIZE_T Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "TestEqual(const TCHAR* What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const FVector Actual, const FVector Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const FTransform Actual, const FTransform Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const FRotator Actual, const FRotator Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const FColor Actual, const FColor Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const FLinearColor Actual, const FLinearColor Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, const TCHAR* Actual, const TCHAR* Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const TCHAR* What, FUtf8StringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqual(const TCHAR* What, const TCHAR* Actual, const TCHAR* Expected)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqual(const TCHAR* What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqual(const TCHAR* What, FUtf8StringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqualSensitive(const TCHAR* What, const TCHAR* Actual, const TCHAR* Expected)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqualSensitive(const TCHAR* What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqualSensitive(const TCHAR* What, FUtf8StringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqualSensitive(const TCHAR* What, const TCHAR* Actual, const TCHAR* Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqualSensitive(const TCHAR* What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqualSensitive(const TCHAR* What, FUtf8StringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestEqual(const FString& What, const int32 Actual, const int32 Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, const FVector Actual, const FVector Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, const FTransform Actual, const FTransform Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, const FRotator Actual, const FRotator Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, const FColor Actual, const FColor Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, const TCHAR* Actual, const TCHAR* Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, FUtf8StringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, FStringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "Tmp()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Tmp(Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqual(const FString& What, FUtf8StringView Actual, FStringView Expected)"
  },
  {
    "label": "Tmp()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Tmp(Actual)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqualSensitive(const FString& What, const TCHAR* Actual, const TCHAR* Expected)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqualSensitive(const FString& What, FUtf8StringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqualSensitive(const FString& What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqualSensitive(const FString& What, FStringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestEqualSensitive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestEqualSensitive(const FString& What, FUtf8StringView Actual, FStringView Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNotEqualSensitive(const FString& What, const TCHAR* Actual, const TCHAR* Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNotEqualSensitive(const FString& What, FUtf8StringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNotEqualSensitive(const FString& What, FStringView Actual, FStringView Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNotEqualSensitive(const FString& What, FStringView Actual, FUtf8StringView Expected)"
  },
  {
    "label": "TestNotEqualSensitive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNotEqualSensitive(const FString& What, FUtf8StringView Actual, FStringView Expected)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "TestEqual(const TCHAR* What, const ValueType& Actual, const ValueType& Expected)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(FString::Printf(TEXT(\"%s: The two values are not equal.\"), What))"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNearlyEqual(const TCHAR* What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNearlyEqual(const TCHAR* What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNearlyEqual(const TCHAR* What, const FVector Actual, const FVector Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNearlyEqual(const TCHAR* What, const FTransform Actual, const FTransform Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNearlyEqual(const TCHAR* What, const FRotator Actual, const FRotator Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNearlyEqual(const FString& What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNearlyEqual(const FString& What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNearlyEqual(const FString& What, const FVector Actual, const FVector Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNearlyEqual(const FString& What, const FTransform Actual, const FTransform Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNearlyEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNearlyEqual(const FString& What, const FRotator Actual, const FRotator Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestLessThan(const TCHAR* What, const int32 Actual, const int32 Expected)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessThan(const TCHAR* What, const int64 Actual, const int64 Expected)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterThan(const TCHAR* What, const int32 Actual, const int32 Expected)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterThan(const TCHAR* What, const int64 Actual, const int64 Expected)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessEqual(const TCHAR* What, const int32 Actual, const int32 Expected)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessEqual(const TCHAR* What, const int64 Actual, const int64 Expected)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterEqual(const TCHAR* What, const int32 Actual, const int32 Expected)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterEqual(const TCHAR* What, const int64 Actual, const int64 Expected)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_64BITS bool)",
    "insertText": "TestLessThan(const TCHAR* What, const SIZE_T Actual, const SIZE_T Expected)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterThan(const TCHAR* What, const SIZE_T Actual, const SIZE_T Expected)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessEqual(const TCHAR* What, const SIZE_T Actual, const SIZE_T Expected)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterEqual(const TCHAR* What, const SIZE_T Actual, const SIZE_T Expected)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "TestLessThan(const TCHAR* What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessThan(const TCHAR* What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterThan(const TCHAR* What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterThan(const TCHAR* What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessEqual(const TCHAR* What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessEqual(const TCHAR* What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterEqual(const TCHAR* What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestGreaterEqual(const TCHAR* What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestLessThan(const FString& What, const int32 Actual, const int32 Expected)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestLessThan(const FString& What, const int64 Actual, const int64 Expected)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestGreaterThan(const FString& What, const int32 Actual, const int32 Expected)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestGreaterThan(const FString& What, const int64 Actual, const int64 Expected)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestLessEqual(const FString& What, const int32 Actual, const int32 Expected)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestLessEqual(const FString& What, const int64 Actual, const int64 Expected)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestGreaterEqual(const FString& What, const int32 Actual, const int32 Expected)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestGreaterEqual(const FString& What, const int64 Actual, const int64 Expected)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestLessThan(const FString& What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestLessThan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestLessThan(const FString& What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestGreaterThan(const FString& What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestGreaterThan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestGreaterThan(const FString& What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestLessEqual(const FString& What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestLessEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestLessEqual(const FString& What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestGreaterEqual(const FString& What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestGreaterEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestGreaterEqual(const FString& What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestFalse()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestFalse(const TCHAR* What, bool Value)"
  },
  {
    "label": "TestFalse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestFalse(const FString& What, bool Value)"
  },
  {
    "label": "TestInvalid()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "TestInvalid(const TCHAR* Description, const ValueType& Value)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(FString::Printf(TEXT(\"%s: The value is valid (.IsValid() returned true).\"), Description))"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "TestNotEqual(const TCHAR* Description, const ValueType& Actual, const ValueType& Expected)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(FString::Printf(TEXT(\"%s: The two values are equal.\"), Description))"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNotEqual(const TCHAR* What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqual(const TCHAR* What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNotEqual(const FString& What, const float Actual, const float Expected, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNotEqual(const FString& What, const double Actual, const double Expected, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TestNotNull()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "TestNotNull(const TCHAR* What, const ValueType* Pointer)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(FString::Printf(TEXT(\"Expected '%s' to be not null.\"), What))"
  },
  {
    "label": "TestNotSame()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "TestNotSame(const TCHAR* Description, const ValueType& Actual, const ValueType& Expected)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(FString::Printf(TEXT(\"%s: The two values are the same.\"), Description))"
  },
  {
    "label": "TestNotSamePtr()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "TestNotSamePtr(const TCHAR* Description, const ValueType* Actual, const ValueType* Expected)"
  },
  {
    "label": "AddWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWarning(FString::Printf(TEXT(\"%s: Actual value is nullptr.\"), Description))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(nullptr == Expected)"
  },
  {
    "label": "AddWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWarning(FString::Printf(TEXT(\"%s: Expected value is nullptr, which may be unintended. If intentional consider instead using TestNotNull().\"), Description))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Actual == Expected)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(FString::Printf(TEXT(\"%s: The two pointers are the same.\"), Description))"
  },
  {
    "label": "TestNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestNull(const TCHAR* What, const void* Pointer)"
  },
  {
    "label": "TestNull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestNull(const FString& What, const void* Pointer)"
  },
  {
    "label": "TestSame()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "TestSame(const TCHAR* Description, const ValueType& Actual, const ValueType& Expected)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(FString::Printf(TEXT(\"%s: The two values are not the same.\"), Description))"
  },
  {
    "label": "TestSamePtr()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "TestSamePtr(const TCHAR* Description, const ValueType* Actual, const ValueType* Expected)"
  },
  {
    "label": "AddWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWarning(FString::Printf(TEXT(\"%s: Expected value is nullptr, which may be unintended. If intentional consider instead using TestNull().\"), Description))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Actual != Expected)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(FString::Printf(TEXT(\"%s: The two pointers are not the same.\"), Description))"
  },
  {
    "label": "TestTrue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestTrue(const TCHAR* What, bool Value)"
  },
  {
    "label": "TestTrue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestTrue(const FString& What, bool Value)"
  },
  {
    "label": "TestTrueExpr()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "TestTrueExpr(Expression) TestTrue(TEXT(#Expression), Expression) template<typename ValueType> FORCEINLINE bool TestValid(const TCHAR* Description, const ValueType& Value)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(FString::Printf(TEXT(\"%s: The value is not valid (.IsValid() returned false).\"), Description))"
  },
  {
    "label": "GetTests()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "GetTests(TArray<FString>& OutBeautifiedNames, TArray <FString>& OutTestCommands)"
  },
  {
    "label": "RunTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunTest(const FString& Parameters)"
  },
  {
    "label": "SetTestContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTestContext(FString Context)"
  },
  {
    "label": "ExtractAutomationTestFlags()",
    "kind": "Method",
    "detail": "Function (TestParameterContext = Context ; } EAutomationTestFlags)",
    "insertText": "ExtractAutomationTestFlags(FString InTagNotation)"
  },
  {
    "label": "IsExpectedMessage()",
    "kind": "Method",
    "detail": "Function (protected : bool bComplexTask ; bool bRunOnSeparateThread ; bool bSuppressLogs = false ; FString TestName ; FString TestParameterContext ; FAutomationTestExecutionInfo ExecutionInfo ; class FAutomationTestFramework ; private : bool)",
    "insertText": "IsExpectedMessage(const FString& Message, const ELogVerbosity::Type& Verbosity = ELogVerbosity::All)"
  },
  {
    "label": "InternalSetSuccessState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetSuccessState(bool bSuccessful)"
  },
  {
    "label": "GetStringValueToDisplay()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStringValueToDisplay(FStringView Value)"
  },
  {
    "label": "GetStringValueToDisplay()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStringValueToDisplay(FUtf8StringView Value)"
  },
  {
    "label": "FBDDAutomationTestBase()",
    "kind": "Method",
    "detail": "Function (TSet<FAutomationExpectedMessage> ExpectedMessages ; FRWLock ActionCS ; } ; class FBDDAutomationTestBase : public FAutomationTestBase { public :)",
    "insertText": "FBDDAutomationTestBase(const FString& InName, const bool bInComplexTask) : FAutomationTestBase(InName, bInComplexTask) , bIsDiscoveryMode(false) , bBaseRunTestRan(false)"
  },
  {
    "label": "FBDDAutomationTestBase()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FBDDAutomationTestBase(this)->BeautifiedNames.Empty()"
  },
  {
    "label": "FBDDAutomationTestBase()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FBDDAutomationTestBase(this)->TestCommands.Empty()"
  },
  {
    "label": "FBDDAutomationTestBase()",
    "kind": "Method",
    "detail": "Function (bIsDiscoveryMode = true ; const_cast<)",
    "insertText": "FBDDAutomationTestBase(this)->RunTest(FString())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (bIsDiscoveryMode = false ; OutBeautifiedNames .)",
    "insertText": "Append(BeautifiedNames)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutTestCommands .)",
    "insertText": "Append(TestCommands)"
  },
  {
    "label": "IsDiscoveryMode()",
    "kind": "Method",
    "detail": "Function (bBaseRunTestRan = false ; } bool)",
    "insertText": "IsDiscoveryMode()"
  },
  {
    "label": "Describe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Describe(const FString& InDescription, TFunction<void()> DoWork)"
  },
  {
    "label": "PushDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDescription(InDescription)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 OriginalBeforeEachCount = BeforeEachStack .)",
    "insertText": "Num()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(OriginalAfterEachCount <= AfterEachStack.Num())"
  },
  {
    "label": "PopDescription()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PopDescription(InDescription)"
  },
  {
    "label": "xIt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xIt(const FString& InDescription, TFunction<void()> DoWork)"
  },
  {
    "label": "It()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "It(const FString& InDescription, TFunction<void()> DoWork)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BeautifiedNames .)",
    "insertText": "Add(GetDescription())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsDiscoveryMode = true ; } else)",
    "insertText": "if(TestIdToExecute.IsEmpty() || GetDescription() == TestIdToExecute)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (BeforeEachStack [)",
    "insertText": "Index()"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DoWork()"
  },
  {
    "label": "BeforeEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeforeEach(TFunction<void()> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (BeforeEachStack .)",
    "insertText": "Push(DoWork)"
  },
  {
    "label": "AfterEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AfterEach(TFunction<void()> DoWork)"
  },
  {
    "label": "PushDescription()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "PushDescription(const FString& InDescription)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Description .)",
    "insertText": "Add(InDescription)"
  },
  {
    "label": "PopDescription()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopDescription(const FString& InDescription)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Description .)",
    "insertText": "RemoveAt(Description.Num() - 1)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetDescription()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FString CompleteDescription ;)",
    "insertText": "for(int32 Index = 0; Index < Description.Num(); ++Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(CompleteDescription.IsEmpty())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CompleteDescription = Description [ Index ] ; } else)",
    "insertText": "if(FChar::IsWhitespace(CompleteDescription[CompleteDescription.Len() - 1]) || FChar::IsWhitespace(Description[Index][0]))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (CompleteDescription = CompleteDescription +)",
    "insertText": "TEXT(\".\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { CompleteDescription = CompleteDescription + Description [ Index ] ; } } else {)",
    "insertText": "if(bIsDiscoveryMode)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (CompleteDescription =)",
    "insertText": "Printf(TEXT(\"%s.%s\"), *CompleteDescription, *Description[Index])"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} else { CompleteDescription =)",
    "insertText": "Printf(TEXT(\"%s %s\"), *CompleteDescription, *Description[Index])"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (TArray<FString> BeautifiedNames ; TArray<FString> TestCommands ; bool bIsDiscoveryMode ; bool bBaseRunTestRan ; } ;)",
    "insertText": "DECLARE_DELEGATE(FDoneDelegate)"
  },
  {
    "label": "FSingleExecuteLatentCommand()",
    "kind": "Method",
    "detail": "Function (class FAutomationSpecBase : public FAutomationTestBase,public TSharedFromThis<FAutomationSpecBase> { private : class FSingleExecuteLatentCommand : public IAutomationLatentCommand { public :)",
    "insertText": "FSingleExecuteLatentCommand(const FAutomationSpecBase* const InSpec, TFunction<void()> InPredicate, bool bInSkipIfErrored = false) : Spec(InSpec) , Predicate(MoveTemp(InPredicate)) , bSkipIfErrored(bInSkipIfErrored)"
  },
  {
    "label": "FSingleExecuteLatentCommand()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSingleExecuteLatentCommand()"
  },
  {
    "label": "FUntilDoneLatentCommand()",
    "kind": "Method",
    "detail": "Function (const bool bSkipIfErrored ; } ; class FUntilDoneLatentCommand : public IAutomationLatentCommand { public :)",
    "insertText": "FUntilDoneLatentCommand(FAutomationSpecBase* const InSpec, TFunction<void(const FDoneDelegate&)> InPredicate, const FTimespan& InTimeout, bool bInSkipIfErrored = false) : Spec(InSpec) , Predicate(MoveTemp(InPredicate)) , Timeout(InTimeout) , bSkipIfErrored(bInSkipIfErrored) , bIsRunning(false) , bDone(false)"
  },
  {
    "label": "FUntilDoneLatentCommand()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FUntilDoneLatentCommand()"
  },
  {
    "label": "Predicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Predicate(FDoneDelegate::CreateSP(this, &FUntilDoneLatentCommand::Done))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bDone)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (Spec ->)",
    "insertText": "AddError(TEXT(\"Latent command timed out.\"), 0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (bDone = false ; bIsRunning = false ; } private : FAutomationSpecBase* const Spec ; const TFunction<)",
    "insertText": "void(const FDoneDelegate&)"
  },
  {
    "label": "FAsyncUntilDoneLatentCommand()",
    "kind": "Method",
    "detail": "Function (const FTimespan Timeout ; const bool bSkipIfErrored ; bool bIsRunning ; FDateTime StartedRunning ; FThreadSafeBool bDone ; } ; class FAsyncUntilDoneLatentCommand : public IAutomationLatentCommand { public :)",
    "insertText": "FAsyncUntilDoneLatentCommand(FAutomationSpecBase* const InSpec, EAsyncExecution InExecution, TFunction<void(const FDoneDelegate&)> InPredicate, const FTimespan& InTimeout, bool bInSkipIfErrored = false) : Spec(InSpec) , Execution(InExecution) , Predicate(MoveTemp(InPredicate)) , Timeout(InTimeout) , bSkipIfErrored(bInSkipIfErrored) , bDone(false)"
  },
  {
    "label": "FAsyncUntilDoneLatentCommand()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAsyncUntilDoneLatentCommand()"
  },
  {
    "label": "UtcNow()",
    "kind": "Method",
    "detail": "Function (bDone = false ; StartedRunning =)",
    "insertText": "UtcNow()"
  },
  {
    "label": "Async()",
    "kind": "Method",
    "detail": "Function (Future =)",
    "insertText": "Async(Execution, [this]() { Predicate(FDoneDelegate::CreateRaw(this, &FAsyncUntilDoneLatentCommand::Done)); })"
  },
  {
    "label": "CriticalSection()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "CriticalSection(&ActionCS)"
  },
  {
    "label": "FAsyncLatentCommand()",
    "kind": "Method",
    "detail": "Function (const FTimespan Timeout ; const bool bSkipIfErrored ; FThreadSafeBool bDone ; FDateTime StartedRunning ; TFuture<void> Future ; FCriticalSection ActionCS ; } ; class FAsyncLatentCommand : public IAutomationLatentCommand { public :)",
    "insertText": "FAsyncLatentCommand(FAutomationSpecBase* const InSpec, EAsyncExecution InExecution, TFunction<void()> InPredicate, const FTimespan& InTimeout, bool bInSkipIfErrored = false) : Spec(InSpec) , Execution(InExecution) , Predicate(MoveTemp(InPredicate)) , Timeout(InTimeout) , bSkipIfErrored(bInSkipIfErrored) , bDone(false)"
  },
  {
    "label": "FAsyncLatentCommand()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAsyncLatentCommand()"
  },
  {
    "label": "Async()",
    "kind": "Method",
    "detail": "Function (Future =)",
    "insertText": "Async(Execution, [this]() { Predicate(); Done(); })"
  },
  {
    "label": "FSpecIt()",
    "kind": "Method",
    "detail": "Function (const FTimespan Timeout ; const bool bSkipIfErrored ; FThreadSafeBool bDone ; FDateTime StartedRunning ; TFuture<void> Future ; FCriticalSection ActionCS ; } ; struct FSpecIt { public : FString Description ; FString Id ; FString Filename ; int32 LineNumber ; TSharedRef<IAutomationLatentCommand> Command ;)",
    "insertText": "FSpecIt(FString InDescription, FString InId, FString InFilename, int32 InLineNumber, TSharedRef<IAutomationLatentCommand> InCommand) : Description(MoveTemp(InDescription)) , Id(MoveTemp(InId)) , Filename(InFilename) , LineNumber(MoveTemp(InLineNumber)) , Command(MoveTemp(InCommand))"
  },
  {
    "label": "FAutomationSpecBase()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSpecDefinitionScope { public : FString Description ; TArray<TSharedRef<IAutomationLatentCommand>> BeforeEach ; TArray<TSharedRef<FSpecIt>> It ; TArray<TSharedRef<IAutomationLatentCommand>> AfterEach ; TArray<TSharedRef<FSpecDefinitionScope>> Children ; } ; struct FSpec { public : FString Id ; FString Description ; FString Filename ; int32 LineNumber ; TArray<TSharedRef<IAutomationLatentCommand>> Commands ; } ; public :)",
    "insertText": "FAutomationSpecBase(const FString& InName, const bool bInComplexTask) : FAutomationTestBase(InName, bInComplexTask) , DefaultTimeout(FTimespan::FromSeconds(30)) , bEnableSkipIfError(true) , RootDefinitionScope(MakeShareable(new FSpecDefinitionScope()))"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (DefinitionScopeStack .)",
    "insertText": "Push(RootDefinitionScope.ToSharedRef())"
  },
  {
    "label": "RunTest()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RunTest(const FString& InParameters)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FSpec>* SpecToRun = IdToSpecMap .)",
    "insertText": "Find(InParameters)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstance().EnqueueLatentCommand((*SpecToRun)->Commands[Index])"
  },
  {
    "label": "GenerateValueArray()",
    "kind": "Method",
    "detail": "Function (} } } else { TArray<TSharedRef<FSpec>> Specs ; IdToSpecMap .)",
    "insertText": "GenerateValueArray(Specs)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstance().EnqueueLatentCommand(Specs[SpecIndex]->Commands[CommandIndex])"
  },
  {
    "label": "IsStressTest()",
    "kind": "Method",
    "detail": "Function (} } } return true ; } bool)",
    "insertText": "IsStressTest()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString TestId = InTestName ;)",
    "insertText": "if(TestId.StartsWith(TestName + TEXT(\" \")))"
  },
  {
    "label": "RightChop()",
    "kind": "Method",
    "detail": "Function (TestId = InTestName .)",
    "insertText": "RightChop(TestName.Len() + 1)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} const TSharedRef<FSpec>* Spec = IdToSpecMap .)",
    "insertText": "Find(TestId)"
  },
  {
    "label": "GetTests()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTests(TArray<FString>& OutBeautifiedNames, TArray<FString>& OutTestCommands)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (OutTestCommands .)",
    "insertText": "Push(Specs[Index]->Id)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (OutBeautifiedNames .)",
    "insertText": "Push(Specs[Index]->Description)"
  },
  {
    "label": "xDescribe()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "xDescribe(const FString& InDescription, TFunction<void()> DoWork)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FSpecDefinitionScope> ParentScope = DefinitionScopeStack .)",
    "insertText": "Last()"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FSpecDefinitionScope> NewScope =)",
    "insertText": "MakeShareable(new FSpecDefinitionScope())"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (NewScope -> Description = InDescription ; ParentScope -> Children .)",
    "insertText": "Push(NewScope)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ParentScope -> Children .)",
    "insertText": "Remove(NewScope)"
  },
  {
    "label": "xIt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xIt(const FString& InDescription, EAsyncExecution Execution, TFunction<void()> DoWork)"
  },
  {
    "label": "xIt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xIt(const FString& InDescription, EAsyncExecution Execution, const FTimespan& Timeout, TFunction<void()> DoWork)"
  },
  {
    "label": "xLatentIt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xLatentIt(const FString& InDescription, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "xLatentIt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xLatentIt(const FString& InDescription, const FTimespan& Timeout, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "xLatentIt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xLatentIt(const FString& InDescription, EAsyncExecution Execution, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "xLatentIt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xLatentIt(const FString& InDescription, EAsyncExecution Execution, const FTimespan& Timeout, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "GetStack()",
    "kind": "Method",
    "detail": "Function (const auto Stack =)",
    "insertText": "GetStack()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> It .)",
    "insertText": "Push(MakeShareable(new FSpecIt(GetDescription(), GetId(), Stack.Get()[0].Filename, Stack.Get()[0].LineNumber, MakeShareable(new FSingleExecuteLatentCommand(this, DoWork, bEnableSkipIfError)))))"
  },
  {
    "label": "It()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "It(const FString& InDescription, EAsyncExecution Execution, TFunction<void()> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> It .)",
    "insertText": "Push(MakeShareable(new FSpecIt(GetDescription(), GetId(), Stack.Get()[0].Filename, Stack.Get()[0].LineNumber, MakeShareable(new FAsyncLatentCommand(this, Execution, DoWork, DefaultTimeout, bEnableSkipIfError)))))"
  },
  {
    "label": "It()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "It(const FString& InDescription, EAsyncExecution Execution, const FTimespan& Timeout, TFunction<void()> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> It .)",
    "insertText": "Push(MakeShareable(new FSpecIt(GetDescription(), GetId(), Stack.Get()[0].Filename, Stack.Get()[0].LineNumber, MakeShareable(new FAsyncLatentCommand(this, Execution, DoWork, Timeout, bEnableSkipIfError)))))"
  },
  {
    "label": "LatentIt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LatentIt(const FString& InDescription, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> It .)",
    "insertText": "Push(MakeShareable(new FSpecIt(GetDescription(), GetId(), Stack.Get()[0].Filename, Stack.Get()[0].LineNumber, MakeShareable(new FUntilDoneLatentCommand(this, DoWork, DefaultTimeout, bEnableSkipIfError)))))"
  },
  {
    "label": "LatentIt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LatentIt(const FString& InDescription, const FTimespan& Timeout, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> It .)",
    "insertText": "Push(MakeShareable(new FSpecIt(GetDescription(), GetId(), Stack.Get()[0].Filename, Stack.Get()[0].LineNumber, MakeShareable(new FUntilDoneLatentCommand(this, DoWork, Timeout, bEnableSkipIfError)))))"
  },
  {
    "label": "LatentIt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LatentIt(const FString& InDescription, EAsyncExecution Execution, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> It .)",
    "insertText": "Push(MakeShareable(new FSpecIt(GetDescription(), GetId(), Stack.Get()[0].Filename, Stack.Get()[0].LineNumber, MakeShareable(new FAsyncUntilDoneLatentCommand(this, Execution, DoWork, DefaultTimeout, bEnableSkipIfError)))))"
  },
  {
    "label": "LatentIt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LatentIt(const FString& InDescription, EAsyncExecution Execution, const FTimespan& Timeout, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> It .)",
    "insertText": "Push(MakeShareable(new FSpecIt(GetDescription(), GetId(), Stack.Get()[0].Filename, Stack.Get()[0].LineNumber, MakeShareable(new FAsyncUntilDoneLatentCommand(this, Execution, DoWork, Timeout, bEnableSkipIfError)))))"
  },
  {
    "label": "xBeforeEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xBeforeEach(TFunction<void()> DoWork)"
  },
  {
    "label": "xBeforeEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xBeforeEach(EAsyncExecution Execution, TFunction<void()> DoWork)"
  },
  {
    "label": "xBeforeEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xBeforeEach(EAsyncExecution Execution, const FTimespan& Timeout, TFunction<void()> DoWork)"
  },
  {
    "label": "xLatentBeforeEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xLatentBeforeEach(TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "xLatentBeforeEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xLatentBeforeEach(const FTimespan& Timeout, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "xLatentBeforeEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xLatentBeforeEach(EAsyncExecution Execution, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "xLatentBeforeEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xLatentBeforeEach(EAsyncExecution Execution, const FTimespan& Timeout, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> BeforeEach .)",
    "insertText": "Push(MakeShareable(new FSingleExecuteLatentCommand(this, DoWork, bEnableSkipIfError)))"
  },
  {
    "label": "BeforeEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeforeEach(EAsyncExecution Execution, TFunction<void()> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> BeforeEach .)",
    "insertText": "Push(MakeShareable(new FAsyncLatentCommand(this, Execution, DoWork, DefaultTimeout, bEnableSkipIfError)))"
  },
  {
    "label": "BeforeEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeforeEach(EAsyncExecution Execution, const FTimespan& Timeout, TFunction<void()> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> BeforeEach .)",
    "insertText": "Push(MakeShareable(new FAsyncLatentCommand(this, Execution, DoWork, Timeout, bEnableSkipIfError)))"
  },
  {
    "label": "LatentBeforeEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LatentBeforeEach(TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> BeforeEach .)",
    "insertText": "Push(MakeShareable(new FUntilDoneLatentCommand(this, DoWork, DefaultTimeout, bEnableSkipIfError)))"
  },
  {
    "label": "LatentBeforeEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LatentBeforeEach(const FTimespan& Timeout, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> BeforeEach .)",
    "insertText": "Push(MakeShareable(new FUntilDoneLatentCommand(this, DoWork, Timeout, bEnableSkipIfError)))"
  },
  {
    "label": "LatentBeforeEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LatentBeforeEach(EAsyncExecution Execution, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> BeforeEach .)",
    "insertText": "Push(MakeShareable(new FAsyncUntilDoneLatentCommand(this, Execution, DoWork, DefaultTimeout, bEnableSkipIfError)))"
  },
  {
    "label": "LatentBeforeEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LatentBeforeEach(EAsyncExecution Execution, const FTimespan& Timeout, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> BeforeEach .)",
    "insertText": "Push(MakeShareable(new FAsyncUntilDoneLatentCommand(this, Execution, DoWork, Timeout, bEnableSkipIfError)))"
  },
  {
    "label": "xAfterEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xAfterEach(TFunction<void()> DoWork)"
  },
  {
    "label": "xAfterEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xAfterEach(EAsyncExecution Execution, TFunction<void()> DoWork)"
  },
  {
    "label": "xAfterEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xAfterEach(EAsyncExecution Execution, const FTimespan& Timeout, TFunction<void()> DoWork)"
  },
  {
    "label": "xLatentAfterEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xLatentAfterEach(TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "xLatentAfterEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xLatentAfterEach(const FTimespan& Timeout, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "xLatentAfterEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xLatentAfterEach(EAsyncExecution Execution, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "xLatentAfterEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "xLatentAfterEach(EAsyncExecution Execution, const FTimespan& Timeout, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> AfterEach .)",
    "insertText": "Push(MakeShareable(new FSingleExecuteLatentCommand(this, DoWork)))"
  },
  {
    "label": "AfterEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AfterEach(EAsyncExecution Execution, TFunction<void()> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> AfterEach .)",
    "insertText": "Push(MakeShareable(new FAsyncLatentCommand(this, Execution, DoWork, DefaultTimeout)))"
  },
  {
    "label": "AfterEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AfterEach(EAsyncExecution Execution, const FTimespan& Timeout, TFunction<void()> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> AfterEach .)",
    "insertText": "Push(MakeShareable(new FAsyncLatentCommand(this, Execution, DoWork, Timeout)))"
  },
  {
    "label": "LatentAfterEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LatentAfterEach(TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> AfterEach .)",
    "insertText": "Push(MakeShareable(new FUntilDoneLatentCommand(this, DoWork, DefaultTimeout)))"
  },
  {
    "label": "LatentAfterEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LatentAfterEach(const FTimespan& Timeout, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> AfterEach .)",
    "insertText": "Push(MakeShareable(new FUntilDoneLatentCommand(this, DoWork, Timeout)))"
  },
  {
    "label": "LatentAfterEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LatentAfterEach(EAsyncExecution Execution, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> AfterEach .)",
    "insertText": "Push(MakeShareable(new FAsyncUntilDoneLatentCommand(this, Execution, DoWork, DefaultTimeout)))"
  },
  {
    "label": "LatentAfterEach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LatentAfterEach(EAsyncExecution Execution, const FTimespan& Timeout, TFunction<void(const FDoneDelegate&)> DoWork)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentScope -> AfterEach .)",
    "insertText": "Push(MakeShareable(new FAsyncUntilDoneLatentCommand(this, Execution, DoWork, Timeout)))"
  },
  {
    "label": "EnsureDefinitions()",
    "kind": "Method",
    "detail": "Function (} protected : FTimespan DefaultTimeout ; bool bEnableSkipIfError ; void)",
    "insertText": "EnsureDefinitions()"
  },
  {
    "label": "FAutomationSpecBase()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FAutomationSpecBase(this)->Define()"
  },
  {
    "label": "FAutomationSpecBase()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FAutomationSpecBase(this)->PostDefine()"
  },
  {
    "label": "Define()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Define()"
  },
  {
    "label": "PostDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDefine()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<IAutomationLatentCommand>> BeforeEach ; TArray<TSharedRef<IAutomationLatentCommand>> AfterEach ;)",
    "insertText": "while(Stack.Num() > 0)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (BeforeEach .)",
    "insertText": "Append(Scope->BeforeEach)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (AfterEach .)",
    "insertText": "Append(Scope->AfterEach)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSpecIt> It = Scope -> It [ ItIndex ] ; TSharedRef<FSpec> Spec =)",
    "insertText": "MakeShareable(new FSpec())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Spec -> Id = It -> Id ; Spec -> Description = It -> Description ; Spec -> Filename = It -> Filename ; Spec -> LineNumber = It -> LineNumber ; Spec -> Commands .)",
    "insertText": "Append(BeforeEach)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Spec -> Commands .)",
    "insertText": "Add(It->Command)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Spec -> Commands .)",
    "insertText": "Add(AfterEach[AfterEachIndex])"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(!IdToSpecMap.Contains(Spec->Id))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (IdToSpecMap .)",
    "insertText": "Add(Spec->Id, Spec)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} Scope -> It .)",
    "insertText": "Empty()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Stack .)",
    "insertText": "Append(Scope->Children)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "while(Stack.Num() > 0 && Stack.Last()->Children.Num() == 0 && Stack.Last()->It.Num() == 0)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (BeforeEach .)",
    "insertText": "RemoveAt(BeforeEach.Num() - PoppedScope->BeforeEach.Num(), PoppedScope->BeforeEach.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(PoppedScope->AfterEach.Num() > 0)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (AfterEach .)",
    "insertText": "RemoveAt(AfterEach.Num() - PoppedScope->AfterEach.Num(), PoppedScope->AfterEach.Num())"
  },
  {
    "label": "Redefine()",
    "kind": "Method",
    "detail": "Function (bHasBeenDefined = true ; } void)",
    "insertText": "Redefine()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (} } return CompleteDescription ; } FString)",
    "insertText": "GetId()"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (ItDescription .)",
    "insertText": "RemoveAt(ItDescription.Len() - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 StartingBraceIndex = INDEX_NONE ;)",
    "insertText": "if(ItDescription.FindLastChar(TEXT('['), StartingBraceIndex) && StartingBraceIndex != ItDescription.Len() - 1)"
  },
  {
    "label": "RightChop()",
    "kind": "Method",
    "detail": "Function (FString CommandId = ItDescription .)",
    "insertText": "RightChop(StartingBraceIndex + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(CompleteId.IsEmpty())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CompleteId = Description [ Index ] ; } else)",
    "insertText": "if(FChar::IsWhitespace(CompleteId[CompleteId.Len() - 1]) || FChar::IsWhitespace(Description[Index][0]))"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (CompleteId = CompleteId + Description [ Index ] ; } else { CompleteId =)",
    "insertText": "Printf(TEXT(\"%s %s\"), *CompleteId, *Description[Index])"
  },
  {
    "label": "StackWalk()",
    "kind": "Method",
    "detail": "Function (} } return CompleteId ; } TArray<FProgramCounterSymbolInfo>)",
    "insertText": "StackWalk(int32 IgnoreCount, int32 MaxDepth)"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_FAutomationSpecBase_StackWalk)"
  },
  {
    "label": "SAFE_GETSTACK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SAFE_GETSTACK(Stack, IgnoreCount, MaxDepth)"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_FAutomationSpecBase_SkipStackWalk)"
  },
  {
    "label": "Strcpy()",
    "kind": "Method",
    "detail": "Function (TArray<FProgramCounterSymbolInfo> Stack ; FProgramCounterSymbolInfo First ; TCString<ANSICHAR)",
    "insertText": "Strcpy(First.Filename, FProgramCounterSymbolInfo::MAX_NAME_LENGTH, \"Unknown\")"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (First . LineNumber = 0 ; Stack .)",
    "insertText": "Add(First)"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_FAutomationSpecBase_GetStack)"
  },
  {
    "label": "NeedSkipStackWalk()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "NeedSkipStackWalk(FAutomationTestFramework::NeedSkipStackWalk())"
  },
  {
    "label": "IgnoreCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "IgnoreCount(3)"
  },
  {
    "label": "MaxDepth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MaxDepth(1)"
  },
  {
    "label": "FProgramCounterSymbolInfo()",
    "kind": "Method",
    "detail": "Function (TSharedRef<TArray<FProgramCounterSymbolInfo>> Stack = MakeShared<TArray<)",
    "insertText": "FProgramCounterSymbolInfo(NeedSkipStackWalk ? SkipStackWalk() : StackWalk(IgnoreCount, MaxDepth))"
  },
  {
    "label": "CommandName()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ ~)",
    "insertText": "CommandName()"
  },
  {
    "label": "DEFINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "DEFINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(CommandName,ParamType,ParamName)"
  },
  {
    "label": "CommandName()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "CommandName(ParamType InputParam) \\ : ParamName(InputParam)"
  },
  {
    "label": "DEFINE_LATENT_AUTOMATION_COMMAND_TWO_PARAMETER()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ ParamType ParamName ; \\ } # define)",
    "insertText": "DEFINE_LATENT_AUTOMATION_COMMAND_TWO_PARAMETER(CommandName,ParamType0,ParamName0,ParamType1,ParamName1)"
  },
  {
    "label": "CommandName()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "CommandName(ParamType0 InputParam0, ParamType1 InputParam1) \\ : ParamName0(InputParam0) \\ , ParamName1(InputParam1)"
  },
  {
    "label": "DEFINE_LATENT_AUTOMATION_COMMAND_THREE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ ParamType0 ParamName0 ; \\ ParamType1 ParamName1 ; \\ } # define)",
    "insertText": "DEFINE_LATENT_AUTOMATION_COMMAND_THREE_PARAMETER(CommandName,ParamType0,ParamName0,ParamType1,ParamName1,ParamType2,ParamName2)"
  },
  {
    "label": "CommandName()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "CommandName(ParamType0 InputParam0, ParamType1 InputParam1, ParamType2 InputParam2) \\ : ParamName0(InputParam0) \\ , ParamName1(InputParam1) \\ , ParamName2(InputParam2)"
  },
  {
    "label": "DEFINE_LATENT_AUTOMATION_COMMAND_FOUR_PARAMETER()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ ParamType0 ParamName0 ; \\ ParamType1 ParamName1 ; \\ ParamType2 ParamName2 ; \\ } # define)",
    "insertText": "DEFINE_LATENT_AUTOMATION_COMMAND_FOUR_PARAMETER(CommandName,ParamType0,ParamName0,ParamType1,ParamName1,ParamType2,ParamName2,ParamType3,ParamName3)"
  },
  {
    "label": "CommandName()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "CommandName(ParamType0 InputParam0, ParamType1 InputParam1, ParamType2 InputParam2, ParamType3 InputParam3) \\ : ParamName0(InputParam0) \\ , ParamName1(InputParam1) \\ , ParamName2(InputParam2) \\ , ParamName3(InputParam3)"
  },
  {
    "label": "DEFINE_LATENT_AUTOMATION_COMMAND_FIVE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ ParamType0 ParamName0 ; \\ ParamType1 ParamName1 ; \\ ParamType2 ParamName2 ; \\ ParamType3 ParamName3 ; \\ } # define)",
    "insertText": "DEFINE_LATENT_AUTOMATION_COMMAND_FIVE_PARAMETER(CommandName,ParamType0,ParamName0,ParamType1,ParamName1,ParamType2,ParamName2,ParamType3,ParamName3,ParamType4,ParamName4)"
  },
  {
    "label": "CommandName()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "CommandName(ParamType0 InputParam0, ParamType1 InputParam1, ParamType2 InputParam2, ParamType3 InputParam3, ParamType4 InputParam4) \\ : ParamName0(InputParam0) \\ , ParamName1(InputParam1) \\ , ParamName2(InputParam2) \\ , ParamName3(InputParam3) \\ , ParamName4(InputParam4)"
  },
  {
    "label": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ ParamType0 ParamName0 ; \\ ParamType1 ParamName1 ; \\ ParamType2 ParamName2 ; \\ ParamType3 ParamName3 ; \\ ParamType4 ParamName4 ; \\ } # define)",
    "insertText": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND(EXPORT_API, CommandName)"
  },
  {
    "label": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(EXPORT_API, CommandName,ParamType,ParamName)"
  },
  {
    "label": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_TWO_PARAMETER()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ ParamType ParamName ; \\ } # define)",
    "insertText": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_TWO_PARAMETER(EXPORT_API, CommandName,ParamType0,ParamName0,ParamType1,ParamName1)"
  },
  {
    "label": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ ParamType0 ParamName0 ; \\ ParamType1 ParamName1 ; \\ } # define)",
    "insertText": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND(CommandName) \\ DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND(ENGINE_API, CommandName) #define DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(CommandName,ParamType,ParamName) \\ DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(ENGINE_API, CommandName, ParamType, ParamName) #define DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_WITH_RETRIES(EXPORT_API,CommandName,RetryCount,WaitTimeBetweenRuns)"
  },
  {
    "label": "CommandName()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "CommandName(int32 InRetryCount, double InWaitTimeBetweenRuns) \\ : IAutomationLatentCommandWithRetriesAndDelays(#CommandName, InRetryCount, InWaitTimeBetweenRuns)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} \\ bool)",
    "insertText": "Execute()"
  },
  {
    "label": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_WITH_RETRIES_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ } # define)",
    "insertText": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_WITH_RETRIES_ONE_PARAMETER(EXPORT_API,CommandName,RetryCount,WaitTimeBetweenRuns,ParamType,ParamName)"
  },
  {
    "label": "CommandName()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "CommandName(int32 InRetryCount, double InWaitTimeBetweenRuns, ParamType ParamName) \\ : IAutomationLatentCommandWithRetriesAndDelays(#CommandName, InRetryCount, InWaitTimeBetweenRuns) \\ , ParamName(ParamName)"
  },
  {
    "label": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_WITH_RETRIES_TWO_PARAMETERS()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ ParamType ParamName ; \\ } # define)",
    "insertText": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_WITH_RETRIES_TWO_PARAMETERS(EXPORT_API,CommandName,RetryCount,WaitTimeBetweenRuns,ParamType0,ParamName0,ParamType1,ParamName1)"
  },
  {
    "label": "CommandName()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "CommandName(int32 InRetryCount, double InWaitTimeBetweenRuns, ParamType0 ParamName0, ParamType1 ParamName1) \\ : IAutomationLatentCommandWithRetriesAndDelays(#CommandName, InRetryCount, InWaitTimeBetweenRuns) \\ , ParamName0(ParamName0) \\ , ParamName1(ParamName1)"
  },
  {
    "label": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_WITH_RETRIES_THREE_PARAMETERS()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ ParamType0 ParamName0 ; \\ ParamType1 ParamName1 ; \\ } # define)",
    "insertText": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_WITH_RETRIES_THREE_PARAMETERS(EXPORT_API,CommandName,RetryCount,WaitTimeBetweenRuns,ParamType0,ParamName0,ParamType1,ParamName1,ParamType2,ParamName2)"
  },
  {
    "label": "CommandName()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "CommandName(int32 InRetryCount, double InWaitTimeBetweenRuns, ParamType0 ParamName0, ParamType1 ParamName1, ParamType2 ParamName2) \\ : IAutomationLatentCommandWithRetriesAndDelays(#CommandName, InRetryCount, InWaitTimeBetweenRuns) \\ , ParamName0(ParamName0) \\ , ParamName1(ParamName1) \\ , ParamName2(ParamName2)"
  },
  {
    "label": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_WITH_RETRIES_FOUR_PARAMETERS()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ ParamType0 ParamName0 ; \\ ParamType1 ParamName1 ; \\ ParamType2 ParamName2 ; \\ } # define)",
    "insertText": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_WITH_RETRIES_FOUR_PARAMETERS(EXPORT_API,CommandName,RetryCount,WaitTimeBetweenRuns,ParamType0,ParamName0,ParamType1,ParamName1,ParamType2,ParamName2,ParamType3,ParamName3)"
  },
  {
    "label": "CommandName()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "CommandName(int32 InRetryCount, double InWaitTimeBetweenRuns, ParamType0 ParamName0, ParamType1 ParamName1, ParamType2 ParamName2, ParamType3 ParamName3) \\ : IAutomationLatentCommandWithRetriesAndDelays(#CommandName, InRetryCount, InWaitTimeBetweenRuns) \\ , ParamName0(ParamName0) \\ , ParamName1(ParamName1) \\ , ParamName2(ParamName2) \\ , ParamName3(ParamName3)"
  },
  {
    "label": "ADD_LATENT_AUTOMATION_COMMAND()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ ParamType0 ParamName0 ; \\ ParamType1 ParamName1 ; \\ ParamType2 ParamName2 ; \\ ParamType3 ParamName3 ; \\ } # if WITH_AUTOMATION_TESTS # define)",
    "insertText": "ADD_LATENT_AUTOMATION_COMMAND(ClassDeclaration) FAutomationTestFramework::Get().EnqueueLatentCommand(MakeShareable(new ClassDeclaration))"
  },
  {
    "label": "ADD_LATENT_AUTOMATION_COMMAND()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "ADD_LATENT_AUTOMATION_COMMAND(ClassDeclaration) #endif #define START_NETWORK_AUTOMATION_COMMAND(ClassDeclaration)"
  },
  {
    "label": "ClassDeclaration()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ int32 RoleIndex ; \\ public : \\ F # #)",
    "insertText": "ClassDeclaration(int32 InRoleIndex) : RoleIndex(InRoleIndex)"
  },
  {
    "label": "ClassDeclaration()",
    "kind": "Method",
    "detail": "Function (} \\ ~ F # #)",
    "insertText": "ClassDeclaration()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "Get().EnqueueNetworkCommand(MakeShareable(new F##ClassDeclaration(InRoleIndex)))"
  },
  {
    "label": "IMPLEMENT_SIMPLE_AUTOMATION_TEST_PRIVATE()",
    "kind": "Method",
    "detail": "Function (\\ # define)",
    "insertText": "IMPLEMENT_SIMPLE_AUTOMATION_TEST_PRIVATE(TClass, TBaseClass, PrettyName, TFlags, FileName, LineNumber)"
  },
  {
    "label": "TClass()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "TClass(const FString& InName ) \\ :TBaseClass( InName, false)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(!!((TFlags) & EAutomationTestFlags_ApplicationContextMask), \"AutomationTest has no application flag. It shouldn't run. See AutomationTest.h.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(!!(((TFlags) & EAutomationTestFlags_FilterMask) == EAutomationTestFlags::SmokeFilter) || \\ !!(((TFlags) & EAutomationTestFlags_FilterMask) == EAutomationTestFlags::EngineFilter) || \\ !!(((TFlags) & EAutomationTestFlags_FilterMask) == EAutomationTestFlags::ProductFilter) || \\ !!(((TFlags) & EAutomationTestFlags_FilterMask) == EAutomationTestFlags::PerfFilter) || \\ !!(((TFlags) & EAutomationTestFlags_FilterMask) == EAutomationTestFlags::StressFilter) || \\ !!(((TFlags) & EAutomationTestFlags_FilterMask) == EAutomationTestFlags::NegativeFilter), \\ \"All AutomationTests must have exactly 1 filter type specified. See AutomationTest.h.\")"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (\\ OutBeautifiedNames .)",
    "insertText": "Add(PrettyName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (\\ OutTestCommands .)",
    "insertText": "Add(FString())"
  },
  {
    "label": "GetBeautifiedTestName()",
    "kind": "Method",
    "detail": "Function (\\ FString)",
    "insertText": "GetBeautifiedTestName()"
  },
  {
    "label": "TClass()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "TClass(const FString& InName ) \\ :TBaseClass( InName, true)"
  },
  {
    "label": "TClass()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "TClass(const FString& InName ) \\ :FBDDAutomationTestBase( InName, false)"
  }
]