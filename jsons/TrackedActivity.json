[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTrackedActivity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackedActivity"
  },
  {
    "label": "FInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInfo"
  },
  {
    "label": "FTrackedActivityScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackedActivityScope"
  },
  {
    "label": "FTrackedActivity()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" enum class ETrackedActivityLight : uint8 { None,Red,Yellow,Green,Inherit,} ; class FTrackedActivity : public TSharedFromThis<FTrackedActivity> { public : enum class EType { Activity,Info,Debug,} ; using ELight = ETrackedActivityLight ;)",
    "insertText": "FTrackedActivity(const TCHAR* Name, const TCHAR* Status = TEXT(\"\"), ELight Light = ELight::None, EType Type = EType::Activity, int32 SortValue = 100)"
  },
  {
    "label": "FTrackedActivity()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTrackedActivity()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Push(const TCHAR* Status, bool bShowParent = false, ELight Light = ELight::Inherit)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pop()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const TCHAR* Status, uint32 Index = ~0u)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const TCHAR* Status, ELight Light, uint32 Index = ~0u)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(ELight Light, uint32 Index = ~0u)"
  },
  {
    "label": "GetEngineActivity()",
    "kind": "Method",
    "detail": "Function (FTrackedActivity&)",
    "insertText": "GetEngineActivity()"
  },
  {
    "label": "GetIOActivity()",
    "kind": "Method",
    "detail": "Function (FTrackedActivity&)",
    "insertText": "GetIOActivity()"
  },
  {
    "label": "TraverseActivities()",
    "kind": "Method",
    "detail": "Function (struct FInfo { const TCHAR* Name ; const TCHAR* Status ; ELight Light ; EType Type ; int32 SortValue ; uint32 Id ; } ; void)",
    "insertText": "TraverseActivities(const TFunction<void(const FInfo& Info)>& Func)"
  },
  {
    "label": "RegisterEventListener()",
    "kind": "Method",
    "detail": "Function (enum class EEvent : int32 { Added = 1,Removed = 2,Changed = 3 } ; void)",
    "insertText": "RegisterEventListener(TUniqueFunction<void(EEvent Event, const FInfo& Info)>&& Func, uint32 MaxDepth = ~0u)"
  },
  {
    "label": "FTrackedActivity()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FTrackedActivity(const FTrackedActivity& O)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTrackedActivity&)",
    "insertText": "operator(const FTrackedActivity& O)"
  },
  {
    "label": "FTrackedActivityScope()",
    "kind": "Method",
    "detail": "Function (void* Internal ; } ; class FTrackedActivityScope { public :)",
    "insertText": "FTrackedActivityScope(FTrackedActivity& Activity, const TCHAR* Status, bool bShowParent = false, FTrackedActivity::ELight Light = FTrackedActivity::ELight::Inherit)"
  },
  {
    "label": "FTrackedActivityScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTrackedActivityScope()"
  },
  {
    "label": "UE_SCOPED_IO_ACTIVITY()",
    "kind": "Method",
    "detail": "Function (private : FTrackedActivity& Activity ; } ; # ifndef UE_ENABLE_TRACKED_IO # if UE_BUILD_SHIPPING # define UE_ENABLE_TRACKED_IO 0 # define)",
    "insertText": "UE_SCOPED_IO_ACTIVITY(...) #else #define UE_ENABLE_TRACKED_IO 1 #define UE_SCOPED_IO_ACTIVITY(...) FTrackedActivityScope ANONYMOUS_VARIABLE(IOActivity_)(FTrackedActivity::GetIOActivity(), __VA_ARGS__)"
  }
]