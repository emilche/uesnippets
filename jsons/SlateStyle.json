[
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FSlateWidgetStyle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateWidgetStyle"
  },
  {
    "label": "FSlateStyleSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateStyleSet"
  },
  {
    "label": "ISlateStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateStyle"
  },
  {
    "label": "FSlateStyleSet()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / SlateColor . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Layout / Margin . h \" # include \" Sound / SlateSound . h \" # include \" Styling / StyleDefaults . h \" # include \" Styling / ISlateStyle . h \" # include \" Brushes / SlateBorderBrush . h \" # include \" Brushes / SlateBoxBrush . h \" # include \" Brushes / SlateColorBrush . h \" # include \" Brushes / SlateRoundedBoxBrush . h \" # include \" Brushes / SlateImageBrush . h \" # include \" Brushes / SlateDynamicImageBrush . h \" # include \" Trace / SlateMemoryTags . h \" class UTexture2D ; struct FSlateWidgetStyle ; class FSlateStyleSet : public ISlateStyle { public :)",
    "insertText": "FSlateStyleSet(const FName& InStyleSetName)"
  },
  {
    "label": "FSlateStyleSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateStyleSet(FSlateStyleSet&&)"
  },
  {
    "label": "FSlateStyleSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateStyleSet(const FSlateStyleSet&)"
  },
  {
    "label": "FSlateStyleSet()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateStyleSet()"
  },
  {
    "label": "GetStyleSetName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetStyleSetName()"
  },
  {
    "label": "GetResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResources(TArray< const FSlateBrush* >& OutResources)"
  },
  {
    "label": "GetEntriesUsingBrush()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetEntriesUsingBrush(const FName BrushName)"
  },
  {
    "label": "SetContentRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContentRoot(const FString& InContentRootDir)"
  },
  {
    "label": "RootToContentDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RootToContentDir(const ANSICHAR* RelativePath, const TCHAR* Extension)"
  },
  {
    "label": "RootToContentDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RootToContentDir(const WIDECHAR* RelativePath, const TCHAR* Extension)"
  },
  {
    "label": "RootToContentDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RootToContentDir(const FString& RelativePath, const TCHAR* Extension)"
  },
  {
    "label": "RootToContentDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RootToContentDir(const ANSICHAR* RelativePath)"
  },
  {
    "label": "RootToContentDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RootToContentDir(const WIDECHAR* RelativePath)"
  },
  {
    "label": "RootToContentDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RootToContentDir(const FString& RelativePath)"
  },
  {
    "label": "GetContentRootDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetContentRootDir()"
  },
  {
    "label": "RootToCoreContentDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RootToCoreContentDir(const ANSICHAR* RelativePath, const TCHAR* Extension)"
  },
  {
    "label": "RootToCoreContentDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RootToCoreContentDir(const WIDECHAR* RelativePath, const TCHAR* Extension)"
  },
  {
    "label": "RootToCoreContentDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RootToCoreContentDir(const FString& RelativePath, const TCHAR* Extension)"
  },
  {
    "label": "RootToCoreContentDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RootToCoreContentDir(const ANSICHAR* RelativePath)"
  },
  {
    "label": "RootToCoreContentDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RootToCoreContentDir(const WIDECHAR* RelativePath)"
  },
  {
    "label": "RootToCoreContentDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RootToCoreContentDir(const FString& RelativePath)"
  },
  {
    "label": "GetFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFloat(const FName PropertyName, const ANSICHAR* Specifier = nullptr, float DefaultValue = FStyleDefaults::GetFloat(), const ISlateStyle* RequestingStyle = nullptr)"
  },
  {
    "label": "GetVector()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetVector(const FName PropertyName, const ANSICHAR* Specifier = nullptr, FVector2D DefaultValue = FStyleDefaults::GetVector2D(), const ISlateStyle* RequestingStyle = nullptr)"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (const FLinearColor&)",
    "insertText": "GetColor(const FName PropertyName, const ANSICHAR* Specifier = nullptr, const FLinearColor& DefaultValue = FStyleDefaults::GetColor(), const ISlateStyle* RequestingStyle = nullptr)"
  },
  {
    "label": "GetSlateColor()",
    "kind": "Method",
    "detail": "Function (const FSlateColor)",
    "insertText": "GetSlateColor(const FName PropertyName, const ANSICHAR* Specifier = nullptr, const FSlateColor& DefaultValue = FStyleDefaults::GetSlateColor(), const ISlateStyle* RequestingStyle = nullptr)"
  },
  {
    "label": "GetMargin()",
    "kind": "Method",
    "detail": "Function (const FMargin&)",
    "insertText": "GetMargin(const FName PropertyName, const ANSICHAR* Specifier = nullptr, const FMargin& DefaultValue = FStyleDefaults::GetMargin(), const ISlateStyle* RequestingStyle = nullptr)"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetBrush(const FName PropertyName, const ANSICHAR* Specifier = nullptr, const ISlateStyle* RequestingStyle = nullptr)"
  },
  {
    "label": "GetOptionalBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetOptionalBrush(const FName PropertyName, const ANSICHAR* Specifier = nullptr, const FSlateBrush* const DefaultBrush = FStyleDefaults::GetNoBrush())"
  },
  {
    "label": "GetDynamicImageBrush()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FSlateDynamicImageBrush>)",
    "insertText": "GetDynamicImageBrush(const FName BrushTemplate, const FName TextureName, const ANSICHAR* Specifier = nullptr, const ISlateStyle* RequestingStyle = nullptr)"
  },
  {
    "label": "GetDynamicImageBrush()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FSlateDynamicImageBrush>)",
    "insertText": "GetDynamicImageBrush(const FName BrushTemplate, const ANSICHAR* Specifier, UTexture2D* TextureResource, const FName TextureName, const ISlateStyle* RequestingStyle = nullptr)"
  },
  {
    "label": "GetDynamicImageBrush()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FSlateDynamicImageBrush>)",
    "insertText": "GetDynamicImageBrush(const FName BrushTemplate, UTexture2D* TextureResource, const FName TextureName, const ISlateStyle* RequestingStyle = nullptr)"
  },
  {
    "label": "GetDefaultBrush()",
    "kind": "Method",
    "detail": "Function (FSlateBrush*)",
    "insertText": "GetDefaultBrush()"
  },
  {
    "label": "GetSound()",
    "kind": "Method",
    "detail": "Function (const FSlateSound&)",
    "insertText": "GetSound(const FName PropertyName, const ANSICHAR* Specifier = nullptr, const ISlateStyle* RequestingStyle = nullptr)"
  },
  {
    "label": "GetFontStyle()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "GetFontStyle(const FName PropertyName, const ANSICHAR* Specifier = nullptr)"
  },
  {
    "label": "SetParentStyleName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentStyleName(const FName& InParentStyleName)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (public : template<DefinitionType> FORCENOINLINE void)",
    "insertText": "Set(const FName PropertyName, const DefinitionType& InStyleDefintion)"
  },
  {
    "label": "LLM_SCOPE_BYTAG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYTAG(UI_Style)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (WidgetStyleValues .)",
    "insertText": "Add(PropertyName, MakeShared<DefinitionType>(InStyleDefintion))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE void)",
    "insertText": "Set(const FName PropertyName, const float InFloat)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FloatValues .)",
    "insertText": "Add(PropertyName, InFloat)"
  },
  {
    "label": "UE_SLATE_VECTOR_DEPRECATED_DEFAULT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_SLATE_VECTOR_DEPRECATED_DEFAULT() FORCENOINLINE void Set(const FName PropertyName, const FVector2D& InVector)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Vector2DValues .)",
    "insertText": "Add(PropertyName, UE::Slate::CastToVector2f(InVector))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE void)",
    "insertText": "Set(const FName PropertyName, const UE::Slate::FDeprecateVector2DResult& InVector)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Vector2DValues .)",
    "insertText": "Add(PropertyName, InVector)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE void)",
    "insertText": "Set(const FName PropertyName, const FVector2f& InVector)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE void)",
    "insertText": "Set(const FName PropertyName, const FLinearColor& InColor)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ColorValues .)",
    "insertText": "Add(PropertyName, InColor)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE void)",
    "insertText": "Set(const FName PropertyName, const FColor& InColor)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE void)",
    "insertText": "Set(const FName PropertyName, const FSlateColor& InColor)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE void)",
    "insertText": "Set(const FName PropertyName, const FMargin& InMargin)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MarginValues .)",
    "insertText": "Add(PropertyName, InMargin)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<BrushType> FORCENOINLINE void)",
    "insertText": "Set(const FName PropertyName, BrushType* InBrush)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BrushResources .)",
    "insertText": "Add(PropertyName, InBrush)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE void)",
    "insertText": "Set(FName PropertyName, const FSlateSound& InSound)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Sounds .)",
    "insertText": "Add(PropertyName, InSound)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE void)",
    "insertText": "Set(FName PropertyName, const FSlateFontInfo& InFontInfo)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FontInfoResources .)",
    "insertText": "Add(PropertyName, InFontInfo)"
  },
  {
    "label": "GetWidgetStyleInternal()",
    "kind": "Method",
    "detail": "Function (} protected : class FSlateStyleSet ; class ISlateStyle ; const FSlateWidgetStyle*)",
    "insertText": "GetWidgetStyleInternal(const FName DesiredTypeName, const FName StyleName, const FSlateWidgetStyle* DefaultStyle, bool bWarnIfNotFound)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(ISlateStyle::EStyleMessageSeverity Severity, const FText& Message)"
  },
  {
    "label": "LogMissingResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMissingResource(EStyleMessageSeverity Severity, const FText& Message, const FName& MissingResource)"
  },
  {
    "label": "MakeDynamicImageBrush()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FSlateDynamicImageBrush>)",
    "insertText": "MakeDynamicImageBrush(const FName BrushTemplate, UTexture2D* TextureResource, const FName TextureName)"
  },
  {
    "label": "LogUnusedBrushResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogUnusedBrushResources()"
  },
  {
    "label": "GetStyleKeys()",
    "kind": "Method",
    "detail": "Function (TSet<FName>)",
    "insertText": "GetStyleKeys()"
  },
  {
    "label": "IsBrushFromFile()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsBrushFromFile(const FString& FilePath, const FSlateBrush* Brush)"
  },
  {
    "label": "GetParentStyle()",
    "kind": "Method",
    "detail": "Function (FName StyleSetName ; FString ContentRootDir ; FString CoreContentRootDir ; TMap<FName,TSharedRef<struct FSlateWidgetStyle>> WidgetStyleValues ; TMap<FName,float> FloatValues ; TMap<FName,FVector2f> Vector2DValues ; TMap<FName,FLinearColor> ColorValues ; TMap<FName,FSlateColor> SlateColorValues ; TMap<FName,FMargin> MarginValues ; FSlateBrush* DefaultBrush ; TMap<FName,FSlateBrush*> BrushResources ; TMap<FName,FSlateSound> Sounds ; TMap<FName,FSlateFontInfo> FontInfoResources ; TMap<FName,TWeakPtr<FSlateDynamicImageBrush>> DynamicBrushes ; TSet<FName> MissingResources ; FName ParentStyleName ; const ISlateStyle*)",
    "insertText": "GetParentStyle()"
  }
]