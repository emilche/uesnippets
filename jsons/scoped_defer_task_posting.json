[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "DeferredTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeferredTask"
  },
  {
    "label": "PostOrDefer()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_COMMON_SCOPED_DEFER_TASK_POSTING_H_ # define BASE_TASK_COMMON_SCOPED_DEFER_TASK_POSTING_H_ # include<vector> # include \" base / base_export . h \" # include \" base / location . h \" # include \" base / task / sequenced_task_runner . h \" # include \" base / time / time . h \" namespace base { class BASE_EXPORT ScopedDeferTaskPosting { public : void)",
    "insertText": "PostOrDefer(scoped_refptr<SequencedTaskRunner> task_runner, const Location& from_here, OnceClosure task, base::TimeDelta delay)"
  },
  {
    "label": "IsPresent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPresent()"
  },
  {
    "label": "ScopedDeferTaskPosting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedDeferTaskPosting()"
  },
  {
    "label": "ScopedDeferTaskPosting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedDeferTaskPosting(const ScopedDeferTaskPosting&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedDeferTaskPosting&)",
    "insertText": "operator(const ScopedDeferTaskPosting&)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (private : ScopedDeferTaskPosting*)",
    "insertText": "Get()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Set(ScopedDeferTaskPosting* scope)"
  },
  {
    "label": "DeferTaskPosting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferTaskPosting(scoped_refptr<SequencedTaskRunner> task_runner, const Location& from_here, OnceClosure task, base::TimeDelta delay)"
  },
  {
    "label": "DeferredTask()",
    "kind": "Method",
    "detail": "Function (struct DeferredTask {)",
    "insertText": "DeferredTask(scoped_refptr<SequencedTaskRunner> task_runner, Location from_here, OnceClosure task, base::TimeDelta delay)"
  },
  {
    "label": "DeferredTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferredTask(const DeferredTask&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DeferredTask&)",
    "insertText": "operator(const DeferredTask&)"
  },
  {
    "label": "DeferredTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferredTask(DeferredTask&& task)"
  },
  {
    "label": "DeferredTask()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DeferredTask()"
  }
]