[
  {
    "label": "UAnimCurveCompressionCodec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimCurveCompressionCodec"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "FBlendedCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendedCurve"
  },
  {
    "label": "FAnimCurveCompressionResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimCurveCompressionResult"
  },
  {
    "label": "FAnimCurveCompressionResult()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / AnimCompressionTypes . h \" # include \" AnimCurveCompressionCodec . generated . h \" class UAnimCurveCompressionCodec ; class UAnimSequence ; struct FBlendedCurve ; # if WITH_EDITORONLY_DATA struct FAnimCurveCompressionResult { TArray<uint8> CompressedBytes ; UAnimCurveCompressionCodec* Codec ;)",
    "insertText": "FAnimCurveCompressionResult() : CompressedBytes(), Codec(nullptr)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ; # endif)",
    "insertText": "UCLASS(abstract, hidecategories = Object, EditInlineNew, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() virtual UAnimCurveCompressionCodec* GetCodec(const FString& Path)"
  },
  {
    "label": "ValidateCompressedData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateCompressedData(UObject* DataOwner, const FCompressedAnimSequence& AnimSeq)"
  },
  {
    "label": "PopulateDDCKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateDDCKey(FArchive& Ar)"
  },
  {
    "label": "DecompressCurves()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "DecompressCurves(const FCompressedAnimSequence& AnimSeq, FBlendedCurve& Curves, float CurrentTime) const PURE_VIRTUAL(UAnimCurveCompressionCodec::DecompressCurves,)"
  },
  {
    "label": "DecompressCurve()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DecompressCurve(const FCompressedAnimSequence& AnimSeq, FName CurveName, float CurrentTime) const PURE_VIRTUAL(UAnimCurveCompressionCodec::DecompressCurve, return 0.0f;)"
  }
]