[
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "MultiResGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiResGrid"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "MaskOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskOp"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "RestrictOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RestrictOp"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "ProlongateOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProlongateOp"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "FractionOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FractionOp"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "CookOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CookOp"
  },
  {
    "label": "MultiResGrid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MultiResGrid"
  },
  {
    "label": "MultiResGrid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MultiResGrid"
  },
  {
    "label": "MultiResGrid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MultiResGrid"
  },
  {
    "label": "MultiResGrid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MultiResGrid"
  },
  {
    "label": "MultiResGrid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MultiResGrid"
  },
  {
    "label": "treePtr()",
    "kind": "Method",
    "detail": "Function (TreePtr)",
    "insertText": "treePtr(size_t level)"
  },
  {
    "label": "grid()",
    "kind": "Method",
    "detail": "Function (GridPtr)",
    "insertText": "grid(size_t level)"
  },
  {
    "label": "grids()",
    "kind": "Method",
    "detail": "Function (GridPtrVecPtr)",
    "insertText": "grids()"
  },
  {
    "label": "xyz()",
    "kind": "Method",
    "detail": "Function (Vec3R)",
    "insertText": "xyz(const Coord& in_ijk, size_t in_level, size_t out_level)"
  },
  {
    "label": "xyz()",
    "kind": "Method",
    "detail": "Function (Vec3R)",
    "insertText": "xyz(const Vec3R& in_xyz, size_t in_level, size_t out_level)"
  },
  {
    "label": "xyz()",
    "kind": "Method",
    "detail": "Function (Vec3R)",
    "insertText": "xyz(const Vec3R& in_xyz, double in_level, double out_level)"
  },
  {
    "label": "prolongateActiveVoxels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prolongateActiveVoxels(size_t destlevel, size_t grainSize = 1)"
  },
  {
    "label": "restrictActiveVoxels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "restrictActiveVoxels(size_t destlevel, size_t grainSize = 1)"
  },
  {
    "label": "MultiResGrid()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "MultiResGrid(const MultiResGrid& other)"
  },
  {
    "label": "topDownRestrict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topDownRestrict(bool useInjection)"
  },
  {
    "label": "initMeta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initMeta()"
  },
  {
    "label": "grids()",
    "kind": "Method",
    "detail": "Function (GridPtrVecPtr)",
    "insertText": "grids( new GridPtrVec )"
  },
  {
    "label": "grids()",
    "kind": "Method",
    "detail": "Function (GridCPtrVecPtr)",
    "insertText": "grids( new GridCPtrVec )"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (ConstAccessor)",
    "insertText": "acc(*mTrees[out_level])"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (ConstAccessor)",
    "insertText": "acc(*mTrees[out_level])"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (ConstAccessor)",
    "insertText": "acc(*mTrees[level + 1])"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (CookOp<ProlongateOp>)",
    "insertText": "tmp( coarseTree, fineTree, grainSize )"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (ConstAccessor)",
    "insertText": "acc( fineTree )"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (CookOp<RestrictOp>)",
    "insertText": "tmp( fineTree, coarseTree, grainSize )"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (injection)",
    "insertText": "for(ValueOnCIter it = fineTree.cbeginValueOn()"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (MaskOp)",
    "insertText": "tmp(fineTree, coarseTree, 128)"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (ManagerT)",
    "insertText": "leafs( mask )"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (registration)",
    "insertText": "for(typename RangeT::Iterator leafIter = range.begin()"
  },
  {
    "label": "examplar()",
    "kind": "Method",
    "detail": "Function (MaskT)",
    "insertText": "examplar( false )"
  },
  {
    "label": "PoolType()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "PoolType( examplar )"
  },
  {
    "label": "manager()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "manager( *mTree1 )"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (tree)",
    "insertText": "for(PoolIterT it=mPool->begin()"
  },
  {
    "label": "manager()",
    "kind": "Method",
    "detail": "Function (Manager2)",
    "insertText": "manager( midTree )"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (registration)",
    "insertText": "for(typename Range1::Iterator leafIter = range.begin()"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (ManagerT)",
    "insertText": "leafs(dstTree)"
  }
]