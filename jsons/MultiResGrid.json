[
  {
    "label": "MultiResGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiResGrid"
  },
  {
    "label": "MaskOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskOp"
  },
  {
    "label": "RestrictOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RestrictOp"
  },
  {
    "label": "ProlongateOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProlongateOp"
  },
  {
    "label": "FractionOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FractionOp"
  },
  {
    "label": "CookOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CookOp"
  },
  {
    "label": "MultiResGrid()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_MULTIRESGRID_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_MULTIRESGRID_HAS_BEEN_INCLUDED # include<openvdb / Grid . h> # include<openvdb / math / FiniteDifference . h> # include<openvdb / math / Math . h> # include<openvdb / math / Operators . h> # include<openvdb / math / Stencils . h> # include<openvdb / Metadata . h> # include<openvdb / tree / LeafManager . h> # include<openvdb / tree / NodeManager . h> # include \" Interpolation . h \" # include \" Morphology . h \" # include \" Prune . h \" # include \" SignedFloodFill . h \" # include \" ValueTransformer . h \" # include<tbb / blocked_range . h> # include<tbb / enumerable_thread_specific . h> # include<tbb / parallel_for . h> # include<iostream> # include<sstream> # include<string> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<TreeType> class MultiResGrid : public MetaMap { public : using Ptr = SharedPtr<MultiResGrid> ; using ConstPtr = SharedPtr<const MultiResGrid> ; using ValueType = TreeType::ValueType ; using ValueOnCIter = TreeType::ValueOnCIter ; using ValueOnIter = TreeType::ValueOnIter ; using TreePtr = TreeType::Ptr ; using ConstTreePtr = TreeType::ConstPtr ; using GridPtr = Grid<TreeType>::Ptr ; using ConstGridPtr = Grid<TreeType>::ConstPtr ;)",
    "insertText": "MultiResGrid(size_t levels, ValueType background, double voxelSize = 1.0)"
  },
  {
    "label": "MultiResGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiResGrid(size_t levels, const Grid<TreeType> &grid, bool useInjection = false)"
  },
  {
    "label": "MultiResGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiResGrid(size_t levels, GridPtr grid, bool useInjection = false)"
  },
  {
    "label": "numLevels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "numLevels()"
  },
  {
    "label": "finestLevel()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "finestLevel()"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (} TreeType&)",
    "insertText": "tree(size_t level)"
  },
  {
    "label": "constTree()",
    "kind": "Method",
    "detail": "Function (const TreeType&)",
    "insertText": "constTree(size_t level)"
  },
  {
    "label": "treePtr()",
    "kind": "Method",
    "detail": "Function (TreePtr)",
    "insertText": "treePtr(size_t level)"
  },
  {
    "label": "constTreePtr()",
    "kind": "Method",
    "detail": "Function (ConstTreePtr)",
    "insertText": "constTreePtr(size_t level)"
  },
  {
    "label": "finestTree()",
    "kind": "Method",
    "detail": "Function (TreeType&)",
    "insertText": "finestTree()"
  },
  {
    "label": "finestConstTree()",
    "kind": "Method",
    "detail": "Function (} const TreeType&)",
    "insertText": "finestConstTree()"
  },
  {
    "label": "finestTreePtr()",
    "kind": "Method",
    "detail": "Function (} TreePtr)",
    "insertText": "finestTreePtr()"
  },
  {
    "label": "finestConstTreePtr()",
    "kind": "Method",
    "detail": "Function (} ConstTreePtr)",
    "insertText": "finestConstTreePtr()"
  },
  {
    "label": "coarsestTree()",
    "kind": "Method",
    "detail": "Function (} TreeType&)",
    "insertText": "coarsestTree()"
  },
  {
    "label": "coarsestConstTree()",
    "kind": "Method",
    "detail": "Function (} const TreeType&)",
    "insertText": "coarsestConstTree()"
  },
  {
    "label": "coarsestTreePtr()",
    "kind": "Method",
    "detail": "Function (} TreePtr)",
    "insertText": "coarsestTreePtr()"
  },
  {
    "label": "coarsestConstTreePtr()",
    "kind": "Method",
    "detail": "Function (} ConstTreePtr)",
    "insertText": "coarsestConstTreePtr()"
  },
  {
    "label": "grid()",
    "kind": "Method",
    "detail": "Function (} GridPtr)",
    "insertText": "grid(size_t level)"
  },
  {
    "label": "createGrid()",
    "kind": "Method",
    "detail": "Function (template<Index Order> GridPtr)",
    "insertText": "createGrid(float level, size_t grainSize = 1)"
  },
  {
    "label": "grids()",
    "kind": "Method",
    "detail": "Function (GridPtrVecPtr)",
    "insertText": "grids()"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (math::Transform&)",
    "insertText": "transform()"
  },
  {
    "label": "xyz()",
    "kind": "Method",
    "detail": "Function (Vec3R)",
    "insertText": "xyz(const Vec3R& in_xyz, size_t in_level, size_t out_level)"
  },
  {
    "label": "xyz()",
    "kind": "Method",
    "detail": "Function (Vec3R)",
    "insertText": "xyz(const Vec3R& in_xyz, double in_level, double out_level)"
  },
  {
    "label": "sampleValue()",
    "kind": "Method",
    "detail": "Function (template<Index Order> ValueType)",
    "insertText": "sampleValue(const Coord& in_ijk, size_t in_level, size_t out_level)"
  },
  {
    "label": "sampleValue()",
    "kind": "Method",
    "detail": "Function (template<Index Order> ValueType)",
    "insertText": "sampleValue(const Vec3R& in_ijk, size_t in_level, size_t out_level)"
  },
  {
    "label": "sampleValue()",
    "kind": "Method",
    "detail": "Function (template<Index Order> ValueType)",
    "insertText": "sampleValue(const Coord& ijk, double level)"
  },
  {
    "label": "sampleValue()",
    "kind": "Method",
    "detail": "Function (template<Index Order> ValueType)",
    "insertText": "sampleValue(const Vec3R& xyz, double level)"
  },
  {
    "label": "prolongateVoxel()",
    "kind": "Method",
    "detail": "Function (ValueType)",
    "insertText": "prolongateVoxel(const Coord& coords, const size_t level)"
  },
  {
    "label": "prolongateActiveVoxels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prolongateActiveVoxels(size_t destlevel, size_t grainSize = 1)"
  },
  {
    "label": "restrictVoxel()",
    "kind": "Method",
    "detail": "Function (ValueType)",
    "insertText": "restrictVoxel(Coord ijk, const size_t level, bool useInjection = false)"
  },
  {
    "label": "restrictActiveVoxels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "restrictActiveVoxels(size_t destlevel, size_t grainSize = 1)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(std::ostream& = std::cout, int verboseLevel = 1)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "getName()"
  },
  {
    "label": "removeMeta()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "removeMeta(GridBase::META_GRID_NAME)"
  },
  {
    "label": "insertMeta()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "insertMeta(GridBase::META_GRID_NAME, StringMetadata(name))"
  },
  {
    "label": "getGridClass()",
    "kind": "Method",
    "detail": "Function (} GridClass)",
    "insertText": "getGridClass()"
  },
  {
    "label": "StringMetadata()",
    "kind": "Method",
    "detail": "Function (StringMetadata::ConstPtr s = this -> getMetadata<)",
    "insertText": "StringMetadata(GridBase::META_GRID_CLASS)"
  },
  {
    "label": "setGridClass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setGridClass(GridClass cls)"
  },
  {
    "label": "insertMeta()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "insertMeta(GridBase::META_GRID_CLASS, StringMetadata(GridBase::gridClassToString(cls)))"
  },
  {
    "label": "clearGridClass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearGridClass()"
  },
  {
    "label": "removeMeta()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "removeMeta(GridBase::META_GRID_CLASS)"
  },
  {
    "label": "MultiResGrid()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "MultiResGrid(const MultiResGrid& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MultiResGrid&)",
    "insertText": "operator(const MultiResGrid& other)"
  },
  {
    "label": "topDownRestrict()",
    "kind": "Method",
    "detail": "Function (using Accessor = tree::ValueAccessor<TreeType,false> ; using ConstAccessor = tree::ValueAccessor<const TreeType,false> ; void)",
    "insertText": "topDownRestrict(bool useInjection)"
  },
  {
    "label": "initMeta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initMeta()"
  },
  {
    "label": "MultiResGrid()",
    "kind": "Method",
    "detail": "Function (struct MaskOp ; struct RestrictOp ; struct ProlongateOp ; template<Index Order> struct FractionOp ; template<OpType> struct CookOp ; std::vector<TreePtr> mTrees ; math::Transform::Ptr mTransform ; } ; template<TreeType> MultiResGrid<TreeType)",
    "insertText": "MultiResGrid(size_t levels, ValueType background, double voxelSize) : mTrees(levels) , mTransform(math::Transform::createLinearTransform( voxelSize ))"
  },
  {
    "label": "MultiResGrid()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> MultiResGrid<TreeType)",
    "insertText": "MultiResGrid(size_t levels, const Grid<TreeType> &grid, bool useInjection) : MetaMap(grid) , mTrees(levels) , mTransform( grid.transform().copy())"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (mTrees [ 0 ] .)",
    "insertText": "reset(new TreeType( grid.tree() ))"
  },
  {
    "label": "voxelizeActiveTiles()",
    "kind": "Method",
    "detail": "Function (mTrees [ 0 ] ->)",
    "insertText": "voxelizeActiveTiles()"
  },
  {
    "label": "topDownRestrict()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "topDownRestrict(useInjection)"
  },
  {
    "label": "MultiResGrid()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> MultiResGrid<TreeType)",
    "insertText": "MultiResGrid(size_t levels, GridPtr grid, bool useInjection) : MetaMap(*grid) , mTrees(levels) , mTransform( grid->transform().copy())"
  },
  {
    "label": "treePtr()",
    "kind": "Method",
    "detail": "Function (mTrees [ 0 ] = grid ->)",
    "insertText": "treePtr()"
  },
  {
    "label": "newTree()",
    "kind": "Method",
    "detail": "Function (grid ->)",
    "insertText": "newTree()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(level < mTrees.size())"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (Grid<TreeType>::Ptr grid = Grid<TreeType)",
    "insertText": "create(this->treePtr(level))"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (math::Transform::Ptr xform = mTransform ->)",
    "insertText": "copy()"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (grid ->)",
    "insertText": "setTransform(xform)"
  },
  {
    "label": "insertMeta()",
    "kind": "Method",
    "detail": "Function (grid ->)",
    "insertText": "insertMeta(*this->copyMeta())"
  },
  {
    "label": "insertMeta()",
    "kind": "Method",
    "detail": "Function (grid ->)",
    "insertText": "insertMeta(\"MultiResGrid_Level\", Int64Metadata(level))"
  },
  {
    "label": "setName()",
    "kind": "Method",
    "detail": "Function (grid ->)",
    "insertText": "setName(ss.str())"
  },
  {
    "label": "createGrid()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> template<Index Order> Grid<TreeType>::Ptr MultiResGrid<TreeType)",
    "insertText": "createGrid(float level, size_t grainSize)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(level >= 0.0f && level <= float(mTrees.size()-1))"
  },
  {
    "label": "grid()",
    "kind": "Method",
    "detail": "Function (Grid<TreeType>::Ptr)",
    "insertText": "grid(new Grid<TreeType>(this->constTree(0).background()))"
  },
  {
    "label": "preScale()",
    "kind": "Method",
    "detail": "Function (xform ->)",
    "insertText": "preScale(math::Pow(2.0f, level))"
  },
  {
    "label": "insertMeta()",
    "kind": "Method",
    "detail": "Function (grid ->)",
    "insertText": "insertMeta(*(this->copyMeta()))"
  },
  {
    "label": "insertMeta()",
    "kind": "Method",
    "detail": "Function (grid ->)",
    "insertText": "insertMeta(\"MultiResGrid_Level\", FloatMetadata(level))"
  },
  {
    "label": "setTree()",
    "kind": "Method",
    "detail": "Function (grid ->)",
    "insertText": "setTree(this->constTree( size_t(floorf(level))).copy())"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (} else { FractionOp<Order>)",
    "insertText": "tmp(*this, grid->tree(), level, grainSize)"
  },
  {
    "label": "signedFloodFill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "signedFloodFill(grid->tree())"
  },
  {
    "label": "pruneLevelSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneLevelSet(grid->tree())"
  },
  {
    "label": "grids()",
    "kind": "Method",
    "detail": "Function (GridPtrVecPtr)",
    "insertText": "grids(new GridPtrVec)"
  },
  {
    "label": "grids()",
    "kind": "Method",
    "detail": "Function (GridCPtrVecPtr)",
    "insertText": "grids(new GridCPtrVec)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(in_level >= 0 && in_level < mTrees.size())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(out_level >= 0 && out_level < mTrees.size())"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (const ConstAccessor)",
    "insertText": "acc(*mTrees[out_level])"
  },
  {
    "label": "sampleValue()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> template<Index Order> TreeType::ValueType MultiResGrid<TreeType)",
    "insertText": "sampleValue(const Vec3R& in_xyz, size_t in_level, size_t out_level)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(level >= 0.0 && level <= double(mTrees.size()-1))"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (const size_t level0 =)",
    "insertText": "size_t(floor(level)), level1 = size_t(ceil(level))"
  },
  {
    "label": "Order()",
    "kind": "Method",
    "detail": "Function (const ValueType v0 = this -> template sampleValue<)",
    "insertText": "Order(ijk, 0, level0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(level1 - level0 == 1)"
  },
  {
    "label": "Order()",
    "kind": "Method",
    "detail": "Function (const ValueType v1 = this -> template sampleValue<)",
    "insertText": "Order(ijk, 0, level1)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_TYPE_CONVERSION_WARNING_BEGIN const ValueType a =)",
    "insertText": "ValueType(level1 - level)"
  },
  {
    "label": "v0()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_TYPE_CONVERSION_WARNING_END return a*)",
    "insertText": "v0(ValueType(1) - a)"
  },
  {
    "label": "Order()",
    "kind": "Method",
    "detail": "Function (const ValueType v0 = this -> template sampleValue<)",
    "insertText": "Order(xyz, 0, level0)"
  },
  {
    "label": "Order()",
    "kind": "Method",
    "detail": "Function (const ValueType v1 = this -> template sampleValue<)",
    "insertText": "Order(xyz, 0, level1)"
  },
  {
    "label": "prolongateVoxel()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> TreeType::ValueType MultiResGrid<TreeType)",
    "insertText": "prolongateVoxel(const Coord& ijk, const size_t level)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(level+1 < mTrees.size())"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (const ConstAccessor)",
    "insertText": "acc(*mTrees[level + 1])"
  },
  {
    "label": "prolongateActiveVoxels()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> void MultiResGrid<TreeType)",
    "insertText": "prolongateActiveVoxels(size_t destlevel, size_t grainSize)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(destlevel < mTrees.size()-1)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (TreeType& fineTree =* mTrees [ destlevel ] ; const TreeType& coarseTree =* mTrees [ destlevel + 1 ] ; CookOp<ProlongateOp>)",
    "insertText": "tmp(coarseTree, fineTree, grainSize)"
  },
  {
    "label": "restrictVoxel()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> TreeType::ValueType MultiResGrid<TreeType)",
    "insertText": "restrictVoxel(Coord ijk, const size_t destlevel, bool useInjection)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(destlevel > 0 && destlevel < mTrees.size())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TreeType& fineTree =* mTrees [ destlevel - 1 ] ;)",
    "insertText": "if(useInjection ) return fineTree.getValue(ijk<<1)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (const ConstAccessor)",
    "insertText": "acc(fineTree)"
  },
  {
    "label": "restrictActiveVoxels()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> void MultiResGrid<TreeType)",
    "insertText": "restrictActiveVoxels(size_t destlevel, size_t grainSize)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (const TreeType& fineTree =* mTrees [ destlevel - 1 ] ; TreeType& coarseTree =* mTrees [ destlevel ] ; CookOp<RestrictOp>)",
    "insertText": "tmp(fineTree, coarseTree, grainSize)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> void MultiResGrid<TreeType)",
    "insertText": "print(std::ostream& os, int verboseLevel)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (os<<\" MultiResGrid with \"<<mTrees .)",
    "insertText": "size()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (os<<\" Level \"<<i<<\" : \" ; mTrees [ i ] ->)",
    "insertText": "print(os, verboseLevel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(MetaMap::metaCount() > 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (os<<\" Additional metadata : \"<<std::endl ;)",
    "insertText": "for(ConstMetaIterator it = beginMeta(), end = endMeta(); it != end; ++it)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (os<<\" \"<<it -> first ;)",
    "insertText": "if(it->second)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (const std::string value = it -> second ->)",
    "insertText": "str()"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (} os<<\" \\ n \" ; } } os<<\" Transform : \"<<std::endl ;)",
    "insertText": "transform().print(os, \" \")"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"MultiResGrid: at least two levels are required\")"
  },
  {
    "label": "insertMeta()",
    "kind": "Method",
    "detail": "Function (} this ->)",
    "insertText": "insertMeta(\"MultiResGrid_Levels\", Int64Metadata( levels ))"
  },
  {
    "label": "TreePtr()",
    "kind": "Method",
    "detail": "Function (const TreeType& fineTree =* mTrees [ n - 1 ] ; mTrees [ n ] =)",
    "insertText": "TreePtr(new TreeType( fineTree.background() ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TreeType& coarseTree =* mTrees [ n ] ;)",
    "insertText": "if(useInjection)"
  },
  {
    "label": "getCoord()",
    "kind": "Method",
    "detail": "Function (const Coord ijk = it .)",
    "insertText": "getCoord()"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (coarseTree .)",
    "insertText": "setValue(ijk >> 1, *it)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (} } else { MaskOp)",
    "insertText": "tmp(fineTree, coarseTree, 128)"
  },
  {
    "label": "restrictActiveVoxels()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "restrictActiveVoxels(n, 64)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(isLevelSet)"
  },
  {
    "label": "signedFloodFill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "signedFloodFill(coarseTree)"
  },
  {
    "label": "pruneLevelSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneLevelSet(coarseTree)"
  },
  {
    "label": "MaskOp()",
    "kind": "Method",
    "detail": "Function (} } } template<TreeType> struct MultiResGrid<TreeType>::MaskOp { using MaskT = TreeType::template ValueConverter<ValueMask>::Type ; using PoolType = tbb::enumerable_thread_specific<TreeType> ; using ManagerT = tree::LeafManager<const MaskT> ; using RangeT = ManagerT::LeafRange ; using VoxelIterT = ManagerT::LeafNodeType::ValueOnCIter ;)",
    "insertText": "MaskOp(const TreeType& fineTree, TreeType& coarseTree, size_t grainSize = 1) : mPool(new PoolType( coarseTree ))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(coarseTree.empty())"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (MaskT)",
    "insertText": "mask(fineTree, false, true, TopologyCopy())"
  },
  {
    "label": "dilateActiveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dilateActiveValues(mask, 1, NN_FACE_EDGE_VERTEX, EXPAND_TILES)"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (ManagerT)",
    "insertText": "leafs(mask)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(leafs.leafRange( grainSize ), *this)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (using IterT = PoolType::const_iterator ;)",
    "insertText": "for(IterT it=mPool->begin(); it!=mPool->end(); ++it) coarseTree.topologyUnion( *it)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (delete mPool ; } void)",
    "insertText": "operator()(const RangeT& range)"
  },
  {
    "label": "coarseAcc()",
    "kind": "Method",
    "detail": "Function (Accessor)",
    "insertText": "coarseAcc(mPool->local())"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (coarseAcc .)",
    "insertText": "setValueOn(ijk >> 1)"
  },
  {
    "label": "FractionOp()",
    "kind": "Method",
    "detail": "Function (} } } PoolType* mPool ; } ; template<TreeType> template<Index Order> struct MultiResGrid<TreeType>::FractionOp { using MaskT = TreeType::template ValueConverter<ValueMask>::Type ; using PoolType = tbb::enumerable_thread_specific<MaskT> ; using PoolIterT = PoolType::iterator ; using Manager1 = tree::LeafManager<const TreeType> ; using Manager2 = tree::LeafManager<TreeType> ; using Range1 = Manager1::LeafRange ; using Range2 = Manager2::LeafRange ;)",
    "insertText": "FractionOp(const MultiResGrid& parent, TreeType& midTree, float level, size_t grainSize = 1) : mLevel( level ) , mPool(nullptr) , mTree0( &*(parent.mTrees[size_t(floorf(level))]) ) , mTree1( &*(parent.mTrees[size_t(ceilf(level))]))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(midTree.empty())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mTree0 != mTree1)"
  },
  {
    "label": "examplar()",
    "kind": "Method",
    "detail": "Function (MaskT)",
    "insertText": "examplar(false)"
  },
  {
    "label": "PoolType()",
    "kind": "Method",
    "detail": "Function (mPool = new)",
    "insertText": "PoolType(examplar)"
  },
  {
    "label": "manager()",
    "kind": "Method",
    "detail": "Function ({ tree::LeafManager<const TreeType>)",
    "insertText": "manager(*mTree1)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(manager.leafRange(grainSize), *this)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "parallel_for(tbb::blocked_range<PoolIterT>(mPool->begin(),mPool->end(),1), *this)"
  },
  {
    "label": "manager()",
    "kind": "Method",
    "detail": "Function (delete mPool ; { Manager2)",
    "insertText": "manager(midTree)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "operator()(const Range1& range)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (using VoxelIter = Manager1::LeafNodeType::ValueOnCIter ; const float scale =)",
    "insertText": "Pow(2.0f, 1.0f - math::FractionalPart(mLevel))"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<MaskT,false>)",
    "insertText": "acc(mPool->local())"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_TYPE_CONVERSION_WARNING_BEGIN const auto value0 = ijk [ 0 ]* scale ; const auto value1 = ijk [ 1 ]* scale ; const auto value2 = ijk [ 2 ]* scale ; OPENVDB_NO_TYPE_CONVERSION_WARNING_END ijk [ 0 ] =)",
    "insertText": "int(math::Round(value0))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (ijk [ 1 ] =)",
    "insertText": "int(math::Round(value1))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (ijk [ 2 ] =)",
    "insertText": "int(math::Round(value2))"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (acc .)",
    "insertText": "setValueOn(ijk)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "operator()(const tbb::blocked_range<PoolIterT>& range)"
  },
  {
    "label": "dilateActiveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dilateActiveValues(*it, 1, tools::NN_FACE_EDGE_VERTEX, tools::IGNORE_TILES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "operator()(const Range2 &r)"
  },
  {
    "label": "FractionalPart()",
    "kind": "Method",
    "detail": "Function (using VoxelIter = TreeType::LeafNodeType::ValueOnIter ; const float b =)",
    "insertText": "FractionalPart(mLevel)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (const float scale0 =)",
    "insertText": "Pow(2.0f, b)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (const float scale1 =)",
    "insertText": "Pow(2.0f,-a)"
  },
  {
    "label": "acc0()",
    "kind": "Method",
    "detail": "Function (ConstAccessor)",
    "insertText": "acc0(*mTree0 ), acc1( *mTree1)"
  },
  {
    "label": "Vec3R()",
    "kind": "Method",
    "detail": "Function (const Vec3R xyz =)",
    "insertText": "Vec3R(voxelIter.getCoord().data())"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (const ValueType v0 = tools::Sampler<Order)",
    "insertText": "sample(acc0, xyz * scale0)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (const ValueType v1 = tools::Sampler<Order)",
    "insertText": "sample(acc1, xyz * scale1)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_TYPE_CONVERSION_WARNING_BEGIN const auto value0 = a* v0 ; const auto value1 = b* v1 ; OPENVDB_NO_TYPE_CONVERSION_WARNING_END voxelIter .)",
    "insertText": "setValue(ValueType(value0 + value1))"
  },
  {
    "label": "CookOp()",
    "kind": "Method",
    "detail": "Function (} } } const float mLevel ; PoolType* mPool ; const TreeType* mTree0,* mTree1 ; } ; template<TreeType> template<OperatorType> struct MultiResGrid<TreeType>::CookOp { using ManagerT = tree::LeafManager<TreeType> ; using RangeT = ManagerT::LeafRange ;)",
    "insertText": "CookOp(const TreeType& srcTree, TreeType& dstTree, size_t grainSize): acc(srcTree)"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (ManagerT)",
    "insertText": "leafs(dstTree)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(leafs.leafRange(grainSize), *this)"
  },
  {
    "label": "CookOp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CookOp(const CookOp &other): acc(other.acc.tree())"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (auto& phi = leafIt .)",
    "insertText": "buffer(0)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (phi .)",
    "insertText": "setValue(voxelIt.pos(), OperatorType::run(voxelIt.getCoord(), acc))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } } const ConstAccessor acc ; } ; template<TreeType> struct MultiResGrid<TreeType>::RestrictOp { ValueType)",
    "insertText": "run(Coord ijk, const ConstAccessor &acc)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (ijk<<= 1 ; ValueType v = 8* acc .)",
    "insertText": "getValue(ijk)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(acc.getValue(ijk.offsetBy(-1, 0, 0)) + acc.getValue(ijk.offsetBy( 1, 0, 0)) + acc.getValue(ijk.offsetBy( 0,-1, 0)) + acc.getValue(ijk.offsetBy( 0, 1, 0)) + acc.getValue(ijk.offsetBy( 0, 0,-1)) + acc.getValue(ijk.offsetBy( 0, 0, 1)))"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(acc.getValue(ijk.offsetBy(-1,-1, 0)) + acc.getValue(ijk.offsetBy(-1, 1, 0)) + acc.getValue(ijk.offsetBy( 1,-1, 0)) + acc.getValue(ijk.offsetBy( 1, 1, 0)) + acc.getValue(ijk.offsetBy(-1, 0,-1)) + acc.getValue(ijk.offsetBy(-1, 0, 1)) + acc.getValue(ijk.offsetBy( 1, 0,-1)) + acc.getValue(ijk.offsetBy( 1, 0, 1)) + acc.getValue(ijk.offsetBy( 0,-1,-1)) + acc.getValue(ijk.offsetBy( 0,-1, 1)) + acc.getValue(ijk.offsetBy( 0, 1,-1)) + acc.getValue(ijk.offsetBy( 0, 1, 1)))"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (} } v* =)",
    "insertText": "ValueType(1.0f/64.0f)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (} ValueType v = zeroVal<)",
    "insertText": "ValueType()"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "ValueType(0.125)"
  }
]