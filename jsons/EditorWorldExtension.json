[
  {
    "label": "FWorldContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldContext"
  },
  {
    "label": "UEditorWorldExtensionCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorWorldExtensionCollection"
  },
  {
    "label": "UEditorWorldExtensionManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorWorldExtensionManager"
  },
  {
    "label": "UEditorWorldExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorWorldExtension"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEditorWorldExtensionActorData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorWorldExtensionActorData"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Templates / SubclassOf . h \" # include \" Templates / Casts . h \" # include \" Engine / EngineBaseTypes . h \" # include \" UObject / GCObject . h \" # include \" EditorWorldExtension . generated . h \" struct FWorldContext ; class UEditorWorldExtensionCollection ; class UEditorWorldExtensionManager ; class UEditorWorldExtension ; class FViewport ; class AActor ; class FEditorViewportClient ; enum class EEditorWorldExtensionTransitionState : uint8 { TransitionNone,TransitionAll,TransitionPIEOnly,TransitionNonPIEOnly } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UEditorWorldExtension()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UEditorWorldExtension()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "InputKey(FEditorViewportClient* InViewportClient, FViewport* Viewport, FKey Key, EInputEvent Event)"
  },
  {
    "label": "InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputAxis(FEditorViewportClient* InViewportClient, FViewport* Viewport, int32 ControllerId, FKey Key, float Delta, float DeltaTime)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetLastEditorWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetLastEditorWorld()"
  },
  {
    "label": "SpawnTransientSceneActor()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "SpawnTransientSceneActor(const FString& ActorName, const bool bWithSceneComponent = false, const EObjectFlags InObjectFlags = EObjectFlags::RF_Transient | EObjectFlags::RF_DuplicateTransient, const bool bValidForPIE = false)"
  },
  {
    "label": "SpawnTransientSceneActor()",
    "kind": "Method",
    "detail": "Function (} AActor*)",
    "insertText": "SpawnTransientSceneActor(TSubclassOf<AActor> ActorClass, const FString& ActorName, const bool bWithSceneComponent = false, const EObjectFlags InObjectFlags = EObjectFlags::RF_Transient | EObjectFlags::RF_DuplicateTransient, const bool bValidForPIE = false)"
  },
  {
    "label": "DestroyTransientActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyTransientActor(AActor* Actor)"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActive(const bool bInActive)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "GetOwningCollection()",
    "kind": "Method",
    "detail": "Function (UEditorWorldExtensionCollection*)",
    "insertText": "GetOwningCollection()"
  },
  {
    "label": "ExecCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecCommand(const FString& InCommand)"
  },
  {
    "label": "TransitionWorld()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "TransitionWorld(UWorld* NewWorld, EEditorWorldExtensionTransitionState TransitionState)"
  },
  {
    "label": "EnteredSimulateInEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnteredSimulateInEditor()"
  },
  {
    "label": "LeftSimulateInEditor()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "LeftSimulateInEditor(UWorld* SimulateWorld)"
  },
  {
    "label": "ReparentActor()",
    "kind": "Method",
    "detail": "Function (} ; UEditorWorldExtensionCollection* OwningExtensionsCollection ; private : void)",
    "insertText": "ReparentActor(AActor* Actor, UWorld* NewWorld)"
  },
  {
    "label": "InitInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitInternal(UEditorWorldExtensionCollection* InOwningExtensionsCollection)"
  },
  {
    "label": "UEditorWorldExtensionCollection()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UEditorWorldExtensionCollection()"
  },
  {
    "label": "AddExtension()",
    "kind": "Method",
    "detail": "Function (UEditorWorldExtension*)",
    "insertText": "AddExtension(TSubclassOf<UEditorWorldExtension> EditorExtensionClass)"
  },
  {
    "label": "AddExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExtension(UEditorWorldExtension* EditorExtension)"
  },
  {
    "label": "RemoveExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveExtension(UEditorWorldExtension* EditorExtension)"
  },
  {
    "label": "FindExtension()",
    "kind": "Method",
    "detail": "Function (UEditorWorldExtension*)",
    "insertText": "FindExtension(TSubclassOf<UEditorWorldExtension> EditorExtensionClass)"
  },
  {
    "label": "ShowAllActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowAllActors(const bool bShow)"
  },
  {
    "label": "SetWorld()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetWorld(UWorld* NewWorld, EEditorWorldExtensionTransitionState TransitionState)"
  },
  {
    "label": "PostPIEStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostPIEStarted(bool bIsSimulatingInEditor)"
  },
  {
    "label": "OnPreEndPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreEndPIE(bool bWasSimulatingInEditor)"
  },
  {
    "label": "OnEndPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndPIE(bool bWasSimulatingInEditor)"
  },
  {
    "label": "SwitchPIEAndSIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwitchPIEAndSIE(bool bIsSimulatingInEditor)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UNREALED_API UEditorWorldExtensionManager()"
  },
  {
    "label": "UEditorWorldExtensionManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UEditorWorldExtensionManager()"
  },
  {
    "label": "GetEditorWorldExtensions()",
    "kind": "Method",
    "detail": "Function (UEditorWorldExtensionCollection*)",
    "insertText": "GetEditorWorldExtensions(UWorld* InWorld, const bool bCreateIfNeeded = true)"
  },
  {
    "label": "OnWorldAdd()",
    "kind": "Method",
    "detail": "Function (private : UEditorWorldExtensionCollection*)",
    "insertText": "OnWorldAdd(UWorld* World)"
  },
  {
    "label": "OnWorldContextRemove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldContextRemove(FWorldContext& InWorldContext)"
  },
  {
    "label": "FindExtensionCollection()",
    "kind": "Method",
    "detail": "Function (UEditorWorldExtensionCollection*)",
    "insertText": "FindExtensionCollection(const UWorld* InWorld)"
  }
]