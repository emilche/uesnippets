[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FShaderCompilerDefinitions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilerDefinitions"
  },
  {
    "label": "FConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstIterator"
  },
  {
    "label": "FPairType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPairType"
  },
  {
    "label": "FShaderInitialDefinesInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderInitialDefinesInitializer"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Misc / CoreMiscDefines . h \" # include \" UObject / NameTypes . h \" # include \" ShaderParameterMetadata . h \" # define SHADER_COMPILER_FLOAT32_FORMAT_STRING)",
    "insertText": "TEXT(\"%#.9gf\")"
  },
  {
    "label": "FShaderCompilerDefinitions()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS class FShaderCompilerDefinitions { public :)",
    "insertText": "FShaderCompilerDefinitions(bool bIncludeInitialDefines = false)"
  },
  {
    "label": "FShaderCompilerDefinitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderCompilerDefinitions(const FShaderCompilerDefinitions&)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (template<ValueType> void)",
    "insertText": "SetDefine(FName Name, ValueType Value)"
  },
  {
    "label": "InternalSetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetValue(FindOrAddMapIndex(Name), Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDefine(FName Name, const TCHAR* Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDefine(FName Name, const FString& Value)"
  },
  {
    "label": "InternalSetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetValue(FindOrAddMapIndex(Name), *Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> void)",
    "insertText": "SetDefine(FShaderCompilerDefineNameCache& Name, ValueType Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDefine(FShaderCompilerDefineNameCache& Name, const TCHAR* Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDefine(FShaderCompilerDefineNameCache& Name, const FString& Value)"
  },
  {
    "label": "GetIntegerValue()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetIntegerValue(FName Name)"
  },
  {
    "label": "FindMapIndex()",
    "kind": "Method",
    "detail": "Function (int32 Result = 0 ; int32 KeyIndex =)",
    "insertText": "FindMapIndex(Name, GetTypeHash(Name))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Result = Pairs [ KeyIndex ] . ValueInteger ; } else)",
    "insertText": "if(ValueTypes[KeyIndex] == EShaderCompilerDefineVariant::String)"
  },
  {
    "label": "Atoi()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "Atoi(*StringValues[Pairs[KeyIndex].ValueInteger])"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Result(int32)"
  },
  {
    "label": "GetIntegerValue()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } int32)",
    "insertText": "GetIntegerValue(FShaderCompilerDefineNameCache& NameCache, int32 ResultIfNotFound)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Result = ResultIfNotFound ; int32 KeyIndex ;)",
    "insertText": "if((uint32)NameCache.MapIndex < InitialDefineCount)"
  },
  {
    "label": "FindMapIndex()",
    "kind": "Method",
    "detail": "Function (KeyIndex = NameCache . MapIndex ; } else { KeyIndex =)",
    "insertText": "FindMapIndex(NameCache.Name, GetTypeHash(NameCache.Name))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(KeyIndex != INDEX_NONE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NameCache . MapIndex = KeyIndex ; } EShaderCompilerDefineVariant ValueType = ValueTypes [ KeyIndex ] ;)",
    "insertText": "if(ValueType == EShaderCompilerDefineVariant::Integer || ValueType == EShaderCompilerDefineVariant::Unsigned)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Result = Pairs [ KeyIndex ] . ValueInteger ; } else)",
    "insertText": "if(ValueType == EShaderCompilerDefineVariant::String)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ValueType == EShaderCompilerDefineVariant::Float)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } bool)",
    "insertText": "Contains(FName Name)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (KeyHashTable .)",
    "insertText": "Free()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Pairs .)",
    "insertText": "Empty()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ValueCount = 0 ;)",
    "insertText": "if(InitialDefineCount)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (* this =* GInitialDefines ; } } } void)",
    "insertText": "Merge(const FShaderCompilerDefinitions& Other)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (int32 OtherIndex = OtherIt .)",
    "insertText": "GetIndex()"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case EShaderCompilerDefineVariant::Unsigned :)",
    "insertText": "SetDefine(OtherIt.KeyFName(), Other.Pairs[OtherIndex].ValueUnsigned)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case EShaderCompilerDefineVariant::Float :)",
    "insertText": "SetDefine(OtherIt.KeyFName(), Other.Pairs[OtherIndex].ValueFloat)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case EShaderCompilerDefineVariant::String :)",
    "insertText": "SetDefine(OtherIt.KeyFName(), OtherIt.Value())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (break ; } } } FShaderCompilerDefinitions&)",
    "insertText": "operator(const FShaderCompilerDefinitions& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (KeyHashTable = Other . KeyHashTable ; Pairs = Other . Pairs ; ValueTypes = Other . ValueTypes ; StringValues = Other . StringValues ; InitialDefineCount = Other . InitialDefineCount ; ValueCount = Other . ValueCount ; return* this ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FShaderCompilerDefinitions& Defs)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Ar<<Defs . ValueCount ;)",
    "insertText": "for(FShaderCompilerDefinitions::FConstIterator DefineIt(Defs); DefineIt; ++DefineIt)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<Defs . Pairs [ Index ] ; Ar<<Defs . ValueTypes [ Index ] ; } Ar<<Defs . StringValues ; } else)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Ar<<Defs . ValueCount ;)",
    "insertText": "for(uint32 ValueIndex = 0; ValueIndex < Defs.ValueCount; ValueIndex++)"
  },
  {
    "label": "FindOrAddMapIndex()",
    "kind": "Method",
    "detail": "Function (FShaderCompilerDefinitions::FPairType Pair ; Ar<<Pair ; int32 Index = Defs .)",
    "insertText": "FindOrAddMapIndex(Pair.Key)"
  },
  {
    "label": "FConstIterator()",
    "kind": "Method",
    "detail": "Function (Defs . Pairs [ Index ] = Pair ; Ar<<Defs . ValueTypes [ Index ] ; } Ar<<Defs . StringValues ; } return Ar ; } class FConstIterator { public :)",
    "insertText": "FConstIterator(const FShaderCompilerDefinitions& InDefines) : Defines(InDefines), Index(-1)"
  },
  {
    "label": "ValueStringBuffer()",
    "kind": "Method",
    "detail": "Function (KeyStringBuffer [ 0 ] = 0 ;)",
    "insertText": "ValueStringBuffer(*this)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Index + + ; int32 PairNum = Defines . Pairs .)",
    "insertText": "Num()"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (Index + + ; } return* this ; } const TCHAR*)",
    "insertText": "Key()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (Defines . Pairs [ Index ] . Key .)",
    "insertText": "ToString(KeyStringBuffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TCHAR* Result ;)",
    "insertText": "if(Defines.ValueTypes[Index] == EShaderCompilerDefineVariant::Integer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 ValueInteger = Defines . Pairs [ Index ] . ValueInteger ;)",
    "insertText": "if(ValueInteger >= 0 && ValueInteger <= 9)"
  },
  {
    "label": "ValueStringBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueStringBuffer(TCHAR)"
  },
  {
    "label": "Sprintf()",
    "kind": "Method",
    "detail": "Function (ValueStringBuffer [ 1 ] = 0 ; } else {)",
    "insertText": "Sprintf(ValueStringBuffer, TEXT(\"%d\"), ValueInteger)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} Result = ValueStringBuffer ; } else)",
    "insertText": "if(Defines.ValueTypes[Index] == EShaderCompilerDefineVariant::Unsigned)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 ValueUnsigned = Defines . Pairs [ Index ] . ValueUnsigned ;)",
    "insertText": "if(ValueUnsigned >= 0 && ValueUnsigned <= 9)"
  },
  {
    "label": "Sprintf()",
    "kind": "Method",
    "detail": "Function (ValueStringBuffer [ 1 ] = 0 ; } else {)",
    "insertText": "Sprintf(ValueStringBuffer, TEXT(\"%u\"), ValueUnsigned)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} Result = ValueStringBuffer ; } else)",
    "insertText": "if(Defines.ValueTypes[Index] == EShaderCompilerDefineVariant::Float)"
  },
  {
    "label": "Sprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sprintf(ValueStringBuffer, SHADER_COMPILER_FLOAT32_FORMAT_STRING, Defines.Pairs[Index].ValueFloat)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Result = ValueStringBuffer ; } else {)",
    "insertText": "check(Defines.ValueTypes[Index] == EShaderCompilerDefineVariant::String)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 KeyHash =)",
    "insertText": "GetTypeHash(Name)"
  },
  {
    "label": "FindMapIndex()",
    "kind": "Method",
    "detail": "Function (int32 KeyIndex =)",
    "insertText": "FindMapIndex(Name, KeyHash)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (KeyIndex = Pairs .)",
    "insertText": "Add(FPairType({ Name, {0} }))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValueTypes .)",
    "insertText": "Add(EShaderCompilerDefineVariant::None)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (KeyHashTable .)",
    "insertText": "Add(KeyHash, KeyIndex)"
  },
  {
    "label": "FindOrAddMapIndex()",
    "kind": "Method",
    "detail": "Function (} return KeyIndex ; } int32)",
    "insertText": "FindOrAddMapIndex(FShaderCompilerDefineNameCache& NameCache)"
  },
  {
    "label": "FindMapIndex()",
    "kind": "Method",
    "detail": "Function (int32 KeyIndex =)",
    "insertText": "FindMapIndex(NameCache.Name, KeyHash)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (KeyIndex = Pairs .)",
    "insertText": "Add(FPairType({ NameCache.Name, {0} }))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InitialDefineCount && NameCache.MapIndex == INDEX_NONE)"
  },
  {
    "label": "InternalSetValue()",
    "kind": "Method",
    "detail": "Function (NameCache . MapIndex = KeyIndex ; } return KeyIndex ; } void)",
    "insertText": "InternalSetValue(int32 Index, const TCHAR* Value)"
  },
  {
    "label": "SetValueType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValueType(Index, EShaderCompilerDefineVariant::Integer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Pairs [ Index ] . ValueInteger = Value [ 0 ] - ' 0 ' ; } else)",
    "insertText": "if(ValueTypes[Index] == EShaderCompilerDefineVariant::String)"
  },
  {
    "label": "SetValueType()",
    "kind": "Method",
    "detail": "Function (StringValues [ Pairs [ Index ] . ValueInteger ] = Value ; } else {)",
    "insertText": "SetValueType(Index, EShaderCompilerDefineVariant::String)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Pairs [ Index ] . ValueInteger = StringValues .)",
    "insertText": "Add(Value)"
  },
  {
    "label": "InternalSetValue()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InternalSetValue(int32 Index, bool Value)"
  },
  {
    "label": "InternalSetValue()",
    "kind": "Method",
    "detail": "Function (Pairs [ Index ] . ValueInteger = Value ? 1 : 0 ; } void)",
    "insertText": "InternalSetValue(int32 Index, int32 Value)"
  },
  {
    "label": "InternalSetValue()",
    "kind": "Method",
    "detail": "Function (Pairs [ Index ] . ValueInteger = Value ; } void)",
    "insertText": "InternalSetValue(int32 Index, uint32 Value)"
  },
  {
    "label": "SetValueType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValueType(Index, EShaderCompilerDefineVariant::Unsigned)"
  },
  {
    "label": "InternalSetValue()",
    "kind": "Method",
    "detail": "Function (Pairs [ Index ] . ValueUnsigned = Value ; } void)",
    "insertText": "InternalSetValue(int32 Index, float Value)"
  },
  {
    "label": "SetValueType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValueType(Index, EShaderCompilerDefineVariant::Float)"
  },
  {
    "label": "SetValueType()",
    "kind": "Method",
    "detail": "Function (Pairs [ Index ] . ValueFloat = Value ; } void)",
    "insertText": "SetValueType(int32 Index, EShaderCompilerDefineVariant InValueType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EShaderCompilerDefineVariant& ValueType = ValueTypes [ Index ] ;)",
    "insertText": "if(ValueType == EShaderCompilerDefineVariant::None)"
  },
  {
    "label": "InitializeInitialDefines()",
    "kind": "Method",
    "detail": "Function (ValueCount + + ; } ValueType = InValueType ; } void)",
    "insertText": "InitializeInitialDefines(const FShaderCompilerDefinitions& InDefines)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FPairType { FName Key ; union { int32 ValueInteger ; uint32 ValueUnsigned ; float ValueFloat ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FPairType& Pair)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Ar<<StringLength ;)",
    "insertText": "check(StringLength < FName::StringBufferSize)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(KeyBufferAnsi, StringLength + 1)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (Pair . Key =)",
    "insertText": "FName(KeyBufferAnsi)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} else { StringLength = Pair . Key .)",
    "insertText": "ToString(KeyBuffer, FName::StringBufferSize)"
  },
  {
    "label": "CharIndex()",
    "kind": "Method",
    "detail": "Function (KeyBufferAnsi [)",
    "insertText": "CharIndex(ANSICHAR)"
  }
]