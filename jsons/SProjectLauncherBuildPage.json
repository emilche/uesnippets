[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SProjectLauncherBuildPage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherBuildPage"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Models / ProjectLauncherModel . h \" # include \" ILauncherProfile . h \" class Error ; enum class ECheckBoxState : uint8 ; class SProjectLauncherBuildPage : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherBuildPage)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() public: ~SProjectLauncherBuildPage()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FProjectLauncherModel>& InModel)"
  },
  {
    "label": "GenerateDSYMForProject()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "GenerateDSYMForProject(const FString& ProjectName, const FString& Configuration)"
  },
  {
    "label": "HandleBuildModeComboButtonContentText()",
    "kind": "Method",
    "detail": "Function (private : FText)",
    "insertText": "HandleBuildModeComboButtonContentText()"
  },
  {
    "label": "HandleBuildModeMenuEntryClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleBuildModeMenuEntryClicked(ELauncherProfileBuildModes::Type BuildMode)"
  },
  {
    "label": "HandleProfileManagerProfileSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleProfileManagerProfileSelected(const ILauncherProfilePtr& SelectedProfile, const ILauncherProfilePtr& PreviousProfile)"
  },
  {
    "label": "HandleBuildPlatformVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "HandleBuildPlatformVisibility()"
  },
  {
    "label": "HandleGenDSYMClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleGenDSYMClicked()"
  },
  {
    "label": "HandleGenDSYMButtonEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleGenDSYMButtonEnabled()"
  },
  {
    "label": "ShowBuildConfiguration()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "ShowBuildConfiguration()"
  },
  {
    "label": "HandleBuildConfigurationSelectorConfigurationSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleBuildConfigurationSelectorConfigurationSelected(EBuildConfiguration Configuration)"
  },
  {
    "label": "HandleBuildConfigurationSelectorText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleBuildConfigurationSelectorText()"
  },
  {
    "label": "HandleValidationErrorIconVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "HandleValidationErrorIconVisibility(ELauncherProfileValidationErrors::Type Error)"
  },
  {
    "label": "HandleUATCheckedStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleUATCheckedStateChanged(ECheckBoxState CheckState)"
  },
  {
    "label": "HandleUATIsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "HandleUATIsChecked()"
  },
  {
    "label": "GetCommandLineText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCommandLineText()"
  },
  {
    "label": "HandleCommandLineTextBoxChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCommandLineTextBoxChanged(const FText& InText)"
  }
]