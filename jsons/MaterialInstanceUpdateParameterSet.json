[
  {
    "label": "FindClosestExpressionByGUIDRecursive()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Materials / Material . h \" # include \" Materials / MaterialInstance . h \" # include \" Materials / MaterialExpressionMaterialAttributeLayers . h \" # include \" Materials / MaterialExpressionMaterialFunctionCall . h \" # include \" Misc / App . h \" # if WITH_EDITOR namespace MaterialInstance_Private { template<ExpressionType> void)",
    "insertText": "FindClosestExpressionByGUIDRecursive(const FName& InName, const FGuid& InGUID, TConstArrayView<TObjectPtr<UMaterialExpression>> InMaterialExpression, ExpressionType*& OutExpression)"
  },
  {
    "label": "UMaterialExpressionMaterialFunctionCall()",
    "kind": "Method",
    "detail": "Function (UMaterialExpression* ExpressionPtr = InMaterialExpression [ ExpressionIndex ] ; UMaterialExpressionMaterialFunctionCall* MaterialFunctionCall = Cast<)",
    "insertText": "UMaterialExpressionMaterialFunctionCall(ExpressionPtr)"
  },
  {
    "label": "UMaterialExpressionMaterialAttributeLayers()",
    "kind": "Method",
    "detail": "Function (UMaterialExpressionMaterialAttributeLayers* MaterialLayers = Cast<)",
    "insertText": "UMaterialExpressionMaterialAttributeLayers(ExpressionPtr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutExpression = ParamExpression ; } } } else)",
    "insertText": "if(MaterialFunctionCall && MaterialFunctionCall->MaterialFunction)"
  },
  {
    "label": "ExpressionType()",
    "kind": "Method",
    "detail": "Function (FindClosestExpressionByGUIDRecursive<)",
    "insertText": "ExpressionType(InName, InGUID, MaterialFunctionCall->MaterialFunction->GetExpressions(), OutExpression)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(MaterialLayers)"
  },
  {
    "label": "GetLayers()",
    "kind": "Method",
    "detail": "Function (const TArray<UMaterialFunctionInterface*>& Layers = MaterialLayers ->)",
    "insertText": "GetLayers()"
  },
  {
    "label": "GetBlends()",
    "kind": "Method",
    "detail": "Function (const TArray<UMaterialFunctionInterface*>& Blends = MaterialLayers ->)",
    "insertText": "GetBlends()"
  },
  {
    "label": "ExpressionType()",
    "kind": "Method",
    "detail": "Function (FindClosestExpressionByGUIDRecursive<)",
    "insertText": "ExpressionType(InName, InGUID, Layer->GetExpressions(), OutExpression)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(const auto* Blend : Blends)"
  },
  {
    "label": "ExpressionType()",
    "kind": "Method",
    "detail": "Function (FindClosestExpressionByGUIDRecursive<)",
    "insertText": "ExpressionType(InName, InGUID, Blend->GetExpressions(), OutExpression)"
  },
  {
    "label": "UpdateParameter_FullTraversal()",
    "kind": "Method",
    "detail": "Function (} } } } } template<ParameterType,ExpressionType> bool)",
    "insertText": "UpdateParameter_FullTraversal(ParameterType& Parameter, UMaterial* ParentMaterial)"
  },
  {
    "label": "ExpressionType()",
    "kind": "Method",
    "detail": "Function (ExpressionType* ParameterExpression = CastChecked<)",
    "insertText": "ExpressionType(Expression)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Parameter . ExpressionGUID = ParameterExpression -> ExpressionGUID ; return true ; } } else)",
    "insertText": "if(UMaterialExpressionMaterialFunctionCall* FunctionCall = Cast<UMaterialExpressionMaterialFunctionCall>(Expression))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bChanged = false ;)",
    "insertText": "for(int32 ParameterIdx = 0; ParameterIdx < Parameters.Num(); ParameterIdx++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bTryToFindByName = true ; ParameterType& Parameter = Parameters [ ParameterIdx ] ;)",
    "insertText": "if(Parameter.ExpressionGUID.IsValid())"
  },
  {
    "label": "ExpressionType()",
    "kind": "Method",
    "detail": "Function (ExpressionType* Expression = nullptr ; FindClosestExpressionByGUIDRecursive<)",
    "insertText": "ExpressionType(Parameter.ParameterInfo.Name, Parameter.ExpressionGUID, ParentMaterial->GetExpressions(), Expression)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bTryToFindByName = false ;)",
    "insertText": "if(Parameter.ParameterInfo.Name != Expression->ParameterName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Parameter . ParameterInfo . Name = Expression -> ParameterName ; bChanged = true ; } } })",
    "insertText": "if(bTryToFindByName && GIsEditor && !FApp::IsGame())"
  },
  {
    "label": "UpdateParameterSet_WithCachedData()",
    "kind": "Method",
    "detail": "Function (bChanged = true ; } } } return bChanged ; } template<ParameterType,ExpressionType> bool)",
    "insertText": "UpdateParameterSet_WithCachedData(EMaterialParameterType ParamTypeEnum, TArray<ParameterType>& Parameters, UMaterial* ParentMaterial)"
  },
  {
    "label": "GetAllParameterInfoOfType()",
    "kind": "Method",
    "detail": "Function (bool bChanged = false ; TArray<FMaterialParameterInfo> CachedParamInfos ; TArray<FGuid> CachedParamGuids ; ParentMaterial ->)",
    "insertText": "GetAllParameterInfoOfType(ParamTypeEnum, CachedParamInfos, CachedParamGuids)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NumCachedParams = CachedParamGuids .)",
    "insertText": "Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 CachedParamCandidate = INDEX_NONE ;)",
    "insertText": "for(int32 CachedParamIdx = 0; CachedParamIdx < NumCachedParams; ++CachedParamIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CachedParamCandidate = CachedParamIdx ; } } })",
    "insertText": "if(CachedParamCandidate != INDEX_NONE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FMaterialParameterInfo& CandidateParamInfo = CachedParamInfos [ CachedParamCandidate ] ; bTryToFindByName = false ;)",
    "insertText": "if(Parameter.ParameterInfo.Name != CandidateParamInfo.Name)"
  },
  {
    "label": "UpdateParameterSet()",
    "kind": "Method",
    "detail": "Function (bChanged = true ; } } } return bChanged ; } } template<ParameterType,ExpressionType> bool)",
    "insertText": "UpdateParameterSet(TArray<ParameterType>& Parameters, UMaterial* ParentMaterial)"
  },
  {
    "label": "UpdateParameterSet()",
    "kind": "Method",
    "detail": "Function (} template<ParameterType,ExpressionType> bool)",
    "insertText": "UpdateParameterSet(TArray<FScalarParameterValue>& Parameters, UMaterial* ParentMaterial)"
  },
  {
    "label": "UpdateParameterSet()",
    "kind": "Method",
    "detail": "Function (} template<ParameterType,ExpressionType> bool)",
    "insertText": "UpdateParameterSet(TArray<FVectorParameterValue>& Parameters, UMaterial* ParentMaterial)"
  },
  {
    "label": "UpdateParameterSet()",
    "kind": "Method",
    "detail": "Function (} template<ParameterType,ExpressionType> bool)",
    "insertText": "UpdateParameterSet(TArray<FDoubleVectorParameterValue>& Parameters, UMaterial* ParentMaterial)"
  },
  {
    "label": "UpdateParameterSet()",
    "kind": "Method",
    "detail": "Function (} template<ParameterType,ExpressionType> bool)",
    "insertText": "UpdateParameterSet(TArray<FTextureParameterValue>& Parameters, UMaterial* ParentMaterial)"
  },
  {
    "label": "UpdateParameterSet()",
    "kind": "Method",
    "detail": "Function (} template<ParameterType,ExpressionType> bool)",
    "insertText": "UpdateParameterSet(TArray<FTextureCollectionParameterValue>& Parameters, UMaterial* ParentMaterial)"
  },
  {
    "label": "UpdateParameterSet()",
    "kind": "Method",
    "detail": "Function (} template<ParameterType,ExpressionType> bool)",
    "insertText": "UpdateParameterSet(TArray<FFontParameterValue>& Parameters, UMaterial* ParentMaterial)"
  },
  {
    "label": "UpdateParameterSet()",
    "kind": "Method",
    "detail": "Function (} template<ParameterType,ExpressionType> bool)",
    "insertText": "UpdateParameterSet(TArray<FRuntimeVirtualTextureParameterValue>& Parameters, UMaterial* ParentMaterial)"
  },
  {
    "label": "UpdateParameterSet()",
    "kind": "Method",
    "detail": "Function (} template<ParameterType,ExpressionType> bool)",
    "insertText": "UpdateParameterSet(TArray<FSparseVolumeTextureParameterValue>& Parameters, UMaterial* ParentMaterial)"
  },
  {
    "label": "UpdateParameterSet()",
    "kind": "Method",
    "detail": "Function (} template<ParameterType,ExpressionType> bool)",
    "insertText": "UpdateParameterSet(TArray<FStaticSwitchParameter>& Parameters, UMaterial* ParentMaterial)"
  },
  {
    "label": "UpdateParameterSet()",
    "kind": "Method",
    "detail": "Function (} template<ParameterType,ExpressionType> bool)",
    "insertText": "UpdateParameterSet(TArray<FStaticComponentMaskParameter>& Parameters, UMaterial* ParentMaterial)"
  }
]