[
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "UField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UField"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStruct"
  },
  {
    "label": "FPropertyTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyTag"
  },
  {
    "label": "FTextProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextProperty"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DECLARE_FIELD_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Internationalization / Text . h \" # include \" Serialization / StructuredArchive . h \" # include \" UObject / Field . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / UnrealType . h \" class FOutputDevice ; class UField ; class UObject ; class UStruct ; struct FPropertyTag ; class FTextProperty : public TProperty<FText,FProperty> {)",
    "insertText": "DECLARE_FIELD_API(FTextProperty, (TProperty<FText, FProperty>), CASTCLASS_FTextProperty, COREUOBJECT_API)"
  },
  {
    "label": "FTextProperty()",
    "kind": "Method",
    "detail": "Function (typedef TTypeFundamentals::TCppType TCppType ;)",
    "insertText": "FTextProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FTextProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextProperty(FFieldVariant InOwner, const UECodeGen_Private::FTextPropertyParams& Prop)"
  },
  {
    "label": "FTextProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FTextProperty(UField* InField)"
  },
  {
    "label": "ConvertFromType()",
    "kind": "Method",
    "detail": "Function (# endif EConvertFromTypeResult)",
    "insertText": "ConvertFromType(const FPropertyTag& Tag, FStructuredArchive::FSlot Slot, uint8* Data, UStruct* DefaultsStruct, const uint8* Defaults)"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Identical(const void* A, const void* B, uint32 PortFlags)"
  },
  {
    "label": "SerializeItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeItem(FStructuredArchive::FSlot Slot, void* Value, void const* Defaults)"
  },
  {
    "label": "ExportText_Internal()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ExportText_Internal(FString& ValueStr, const void* PropertyValueOrContainer, EPropertyPointerType PropertyPointerType, const void* DefaultValue, UObject* Parent, int32 PortFlags, UObject* ExportRootScope)"
  },
  {
    "label": "ImportText_Internal()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ImportText_Internal(const TCHAR* Buffer, void* ContainerOrPropertyPtr, EPropertyPointerType PropertyPointerType, UObject* OwnerObject, int32 PortFlags, FOutputDevice* ErrorText)"
  },
  {
    "label": "Identical_Implementation()",
    "kind": "Method",
    "detail": "Function (enum class EIdenticalLexicalCompareMethod : uint8 { None,SourceString,DisplayString } ; bool)",
    "insertText": "Identical_Implementation(const FText& A, const FText& B, uint32 PortFlags)"
  },
  {
    "label": "Identical_Implementation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Identical_Implementation(const FText& A, const FText& B, uint32 PortFlags, EIdenticalLexicalCompareMethod LexicalCompareMethod)"
  }
]