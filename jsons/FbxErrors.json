[
  {
    "label": "FFbxErrors",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFbxErrors"
  },
  {
    "label": "FFbxErrorToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFbxErrorToken"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Logging / TokenizedMessage . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" struct FFbxErrors { FLazyName Generic_ImportingNewObjectFailed ; FLazyName Generic_ReimportingObjectFailed ; FLazyName Generic_LoadingSceneFailed ; FLazyName Generic_InvalidCharacterInName ; FLazyName Generic_SameNameAssetExists ; FLazyName Generic_SameNameAssetOverriding ; FLazyName Generic_CannotDeleteReferenced ; FLazyName Generic_FBXFileParseFailed ; FLazyName Generic_MeshNotFound ; FLazyName Generic_CannotDetectImportType ; FLazyName Generic_Mesh_NoGeometry ; FLazyName Generic_Mesh_SmallGeometry ; FLazyName Generic_Mesh_TriangulationFailed ; FLazyName Generic_Mesh_ConvertSmoothingGroupFailed ; FLazyName Generic_Mesh_UnsupportingSmoothingGroup ; FLazyName Generic_Mesh_MaterialIndexInconsistency ; FLazyName Generic_Mesh_MeshNotFound ; FLazyName Generic_Mesh_NoSmoothingGroup ; FLazyName Generic_Mesh_LOD_InvalidIndex ; FLazyName Generic_Mesh_LOD_NoFileSelected ; FLazyName Generic_Mesh_LOD_MultipleFilesSelected ; FLazyName Generic_Mesh_SkinxxNameError ; FLazyName Generic_Mesh_TooManyLODs ; FLazyName Generic_Mesh_TangentsComputeError ; FLazyName Generic_Mesh_NoReductionModuleAvailable ; FLazyName Generic_Mesh_TooMuchUVChannels ; FLazyName StaticMesh_TooManyMaterials ; FLazyName StaticMesh_UVSetLayoutProblem ; FLazyName StaticMesh_NoTriangles ; FLazyName StaticMesh_BuildError ; FLazyName StaticMesh_AllTrianglesDegenerate ; FLazyName StaticMesh_AdjacencyOptionForced ; FLazyName SkeletalMesh_DifferentRoots ; FLazyName SkeletalMesh_DuplicateBones ; FLazyName SkeletalMesh_NoInfluences ; FLazyName SkeletalMesh_TooManyInfluences ; FLazyName SkeletalMesh_RestoreSortingMismatchedStrips ; FLazyName SkeletalMesh_RestoreSortingNoSectionMatch ; FLazyName SkeletalMesh_RestoreSortingForSectionNumber ; FLazyName SkeletalMesh_NoMeshFoundOnRoot ; FLazyName SkeletalMesh_InvalidRoot ; FLazyName SkeletalMesh_InvalidBone ; FLazyName SkeletalMesh_InvalidNode ; FLazyName SkeletalMesh_NoWeightsOnDeformer ; FLazyName SkeletalMesh_NoBindPoseInScene ; FLazyName SkeletalMesh_NoAssociatedCluster ; FLazyName SkeletalMesh_NoBoneFound ; FLazyName SkeletalMesh_InvalidBindPose ; FLazyName SkeletalMesh_MultipleRoots ; FLazyName SkeletalMesh_BonesAreMissingFromBindPose ; FLazyName SkeletalMesh_VertMissingInfluences ; FLazyName SkeletalMesh_SectionWithNoTriangle ; FLazyName SkeletalMesh_TooManyVertices ; FLazyName SkeletalMesh_FailedToCreatePhyscisAsset ; FLazyName SkeletalMesh_SkeletonRecreateError ; FLazyName SkeletalMesh_ExceedsMaxBoneCount ; FLazyName SkeletalMesh_NoUVSet ; FLazyName SkeletalMesh_LOD_MissingBone ; FLazyName SkeletalMesh_LOD_FailedToImport ; FLazyName SkeletalMesh_LOD_RootNameIncorrect ; FLazyName SkeletalMesh_LOD_BonesDoNotMatch ; FLazyName SkeletalMesh_LOD_IncorrectParent ; FLazyName SkeletalMesh_LOD_HasSoftVerts ; FLazyName SkeletalMesh_LOD_MissingSocketBone ; FLazyName SkeletalMesh_LOD_MissingMorphTarget ; FLazyName SkeletalMesh_FillImportDataFailed ; FLazyName SkeletalMesh_InvalidPosition ; FLazyName SkeletalMesh_AttributeComponentCountMismatch ; FLazyName Animation_CouldNotFindRootTrack ; FLazyName Animation_CouldNotBuildSkeleton ; FLazyName Animation_CouldNotFindTrack ; FLazyName Animation_ZeroLength ; FLazyName Animation_RootTrackMismatch ; FLazyName Animation_DuplicatedBone ; FLazyName Animation_MissingBones ; FLazyName Animation_InvalidData ; FLazyName Animation_TransformError ; FLazyName Animation_DifferentLength ; FLazyName Animation_CurveNotFound ; } ; class FFbxErrorToken : public FDocumentationToken { public : TSharedRef<FFbxErrorToken>)",
    "insertText": "Create(const FName& InErrorName)"
  },
  {
    "label": "FFbxErrorToken()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FFbxErrorToken(const FName& InErrorName)"
  }
]