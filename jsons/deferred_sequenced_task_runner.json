[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "DeferredTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeferredTask"
  },
  {
    "label": "DeferredSequencedTaskRunner()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_DEFERRED_SEQUENCED_TASK_RUNNER_H_ # define BASE_TASK_DEFERRED_SEQUENCED_TASK_RUNNER_H_ # include<vector> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / compiler_specific . h \" # include \" base / synchronization / lock . h \" # include \" base / task / sequenced_task_runner . h \" # include \" base / threading / platform_thread . h \" # include \" base / time / time . h \" namespace base { class BASE_EXPORT DeferredSequencedTaskRunner : public SequencedTaskRunner { public :)",
    "insertText": "DeferredSequencedTaskRunner(scoped_refptr<SequencedTaskRunner> target_runner)"
  },
  {
    "label": "DeferredSequencedTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferredSequencedTaskRunner()"
  },
  {
    "label": "DeferredSequencedTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferredSequencedTaskRunner(const DeferredSequencedTaskRunner&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DeferredSequencedTaskRunner&)",
    "insertText": "operator(const DeferredSequencedTaskRunner&)"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostDelayedTask(const Location& from_here, OnceClosure task, TimeDelta delay)"
  },
  {
    "label": "RunsTasksInCurrentSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunsTasksInCurrentSequence()"
  },
  {
    "label": "PostNonNestableDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostNonNestableDelayedTask(const Location& from_here, OnceClosure task, TimeDelta delay)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "StartWithTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartWithTaskRunner(scoped_refptr<SequencedTaskRunner> target_task_runner)"
  },
  {
    "label": "DeferredTask()",
    "kind": "Method",
    "detail": "Function (private : struct DeferredTask {)",
    "insertText": "DeferredTask()"
  },
  {
    "label": "DeferredTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferredTask(DeferredTask&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DeferredTask&)",
    "insertText": "operator(DeferredTask&& other)"
  },
  {
    "label": "StartImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartImpl()"
  },
  {
    "label": "QueueDeferredTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueDeferredTask(const Location& from_here, OnceClosure task, TimeDelta delay, bool is_non_nestable)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Lock lock_ ; const PlatformThreadId created_thread_id_ ; bool started_)",
    "insertText": "GUARDED_BY(lock_)"
  }
]