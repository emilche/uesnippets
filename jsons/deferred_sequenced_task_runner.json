[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "DeferredTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeferredTask"
  },
  {
    "label": "DeferredSequencedTaskRunner()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "DeferredSequencedTaskRunner(\n      scoped_refptr<SequencedTaskRunner> target_runner)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "StartWithTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartWithTaskRunner(\n      scoped_refptr<SequencedTaskRunner> target_task_runner)"
  },
  {
    "label": "StartImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartImpl()"
  },
  {
    "label": "QueueDeferredTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueDeferredTask(const Location& from_here,\n                         OnceClosure task,\n                         TimeDelta delay,\n                         bool is_non_nestable)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (target_task_runner_)",
    "insertText": "GUARDED_BY(lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (deferred_tasks_queue_)",
    "insertText": "GUARDED_BY(lock_)"
  }
]