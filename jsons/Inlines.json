[
  {
    "label": "silk_CLZ64()",
    "kind": "Method",
    "detail": "Function (# ifndef SILK_FIX_INLINES_H # define SILK_FIX_INLINES_H # ifdef __cplusplus \" C \" { # endif OPUS_INLINE opus_int32)",
    "insertText": "silk_CLZ64(opus_int64 in)"
  },
  {
    "label": "in_upper()",
    "kind": "Method",
    "detail": "Function (opus_int32 in_upper ;)",
    "insertText": "in_upper(opus_int32)silk_RSHIFT64(in, 32)"
  },
  {
    "label": "silk_CLZ32()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "silk_CLZ32(in_upper)"
  },
  {
    "label": "silk_CLZ_FRAC()",
    "kind": "Method",
    "detail": "Function (} } OPUS_INLINE void)",
    "insertText": "silk_CLZ_FRAC(opus_int32 in, opus_int32 *lz, opus_int32 *frac_Q7)"
  },
  {
    "label": "silk_CLZ32()",
    "kind": "Method",
    "detail": "Function (opus_int32 lzeros =)",
    "insertText": "silk_CLZ32(in)"
  },
  {
    "label": "silk_ROR32()",
    "kind": "Method",
    "detail": "Function (* lz = lzeros ;* frac_Q7 =)",
    "insertText": "silk_ROR32(in, 24 - lzeros)"
  },
  {
    "label": "silk_SQRT_APPROX()",
    "kind": "Method",
    "detail": "Function (} OPUS_INLINE opus_int32)",
    "insertText": "silk_SQRT_APPROX(opus_int32 x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_int32 y,lz,frac_Q7 ;)",
    "insertText": "if(x <= 0)"
  },
  {
    "label": "silk_RSHIFT()",
    "kind": "Method",
    "detail": "Function (y = 3 2 7 6 8 ; } else { y = 4 6 2 1 4 ; } y>> =)",
    "insertText": "silk_RSHIFT(lz, 1)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "silk_SMLAWB(y, y, silk_SMULBB(213, frac_Q7))"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (opus_int a_headrm,b_headrm,lshift ; opus_int32 b32_inv,a32_nrm,b32_nrm,result ;)",
    "insertText": "silk_assert(b32 != 0)"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_assert(Qres >= 0)"
  },
  {
    "label": "silk_CLZ32()",
    "kind": "Method",
    "detail": "Function (a_headrm =)",
    "insertText": "silk_CLZ32(silk_abs(a32))"
  },
  {
    "label": "silk_LSHIFT()",
    "kind": "Method",
    "detail": "Function (a32_nrm =)",
    "insertText": "silk_LSHIFT(a32, a_headrm)"
  },
  {
    "label": "silk_CLZ32()",
    "kind": "Method",
    "detail": "Function (b_headrm =)",
    "insertText": "silk_CLZ32(silk_abs(b32))"
  },
  {
    "label": "silk_LSHIFT()",
    "kind": "Method",
    "detail": "Function (b32_nrm =)",
    "insertText": "silk_LSHIFT(b32, b_headrm)"
  },
  {
    "label": "silk_DIV32_16()",
    "kind": "Method",
    "detail": "Function (b32_inv =)",
    "insertText": "silk_DIV32_16(silk_int32_MAX >> 2, silk_RSHIFT(b32_nrm, 16))"
  },
  {
    "label": "silk_SMULWB()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "silk_SMULWB(a32_nrm, b32_inv)"
  },
  {
    "label": "silk_SUB32_ovflw()",
    "kind": "Method",
    "detail": "Function (a32_nrm =)",
    "insertText": "silk_SUB32_ovflw(a32_nrm, silk_LSHIFT_ovflw( silk_SMMUL(b32_nrm, result), 3 ))"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "silk_SMLAWB(result, a32_nrm, b32_inv)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lshift = 2 9 + a_headrm - b_headrm - Qres ;)",
    "insertText": "if(lshift < 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(lshift < 32)"
  },
  {
    "label": "silk_INVERSE32_varQ()",
    "kind": "Method",
    "detail": "Function (} else { return 0 ; } } } OPUS_INLINE opus_int32)",
    "insertText": "silk_INVERSE32_varQ(const opus_int32 b32, const opus_int Qres)"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_assert(Qres > 0)"
  },
  {
    "label": "silk_LSHIFT()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "silk_LSHIFT(b32_inv, 16)"
  },
  {
    "label": "silk_LSHIFT()",
    "kind": "Method",
    "detail": "Function (err_Q32 =)",
    "insertText": "silk_LSHIFT(((opus_int32)1<<29) - silk_SMULWB(b32_nrm, b32_inv), 3)"
  },
  {
    "label": "silk_SMLAWW()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "silk_SMLAWW(result, err_Q32, b32_inv)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lshift = 6 1 - b_headrm - Qres ;)",
    "insertText": "if(lshift <= 0)"
  }
]