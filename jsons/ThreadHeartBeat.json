[
  {
    "label": "FThreadHeartBeatClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadHeartBeatClock"
  },
  {
    "label": "FThreadHeartBeat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadHeartBeat"
  },
  {
    "label": "FHeartBeatInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeartBeatInfo"
  },
  {
    "label": "EConstants",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EConstants"
  },
  {
    "label": "FSlowHeartBeatScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlowHeartBeatScope"
  },
  {
    "label": "FFunctionHeartBeatScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFunctionHeartBeatScope"
  },
  {
    "label": "FGameThreadHitchHeartBeatThreaded",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameThreadHitchHeartBeatThreaded"
  },
  {
    "label": "FDisableHitchDetectorScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisableHitchDetectorScope"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Delegates / DelegateCombinations . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Runnable . h \" # include \" HAL / ThreadSafeBool . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Misc / AssertionMacros . h \" # include \" UObject / NameTypes . h \" # if PLATFORM_UNIX # include \" Unix / UnixSignalHeartBeat . h \" # endif)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnThreadStuck, uint32)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnThreadUnstuck, uint32)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnHangDelegate, uint32)"
  },
  {
    "label": "FThreadHeartBeatClock()",
    "kind": "Method",
    "detail": "Function (class FThreadHeartBeatClock { uint64 CurrentCycles ; uint64 LastRealTickCycles ; const uint64 MaxTimeStepCycles ; public :)",
    "insertText": "FThreadHeartBeatClock(double InMaxTimeStep)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Seconds()"
  },
  {
    "label": "FHeartBeatInfo()",
    "kind": "Method",
    "detail": "Function (} ; class FThreadHeartBeat : public FRunnable { FThreadHeartBeat* Singleton ; struct FHeartBeatInfo {)",
    "insertText": "FHeartBeatInfo() : LastHeartBeatTime(0.0) , LastHangTime(0.0) , SuspendedCount(0) , HangDuration(0) , LastStuckTime(0.0) , StuckDuration(0.0) , HeartBeatName()"
  },
  {
    "label": "Suspend()",
    "kind": "Method",
    "detail": "Function (} double LastHeartBeatTime ; double LastHangTime ; int32 SuspendedCount ; double HangDuration ; double LastStuckTime ; double StuckDuration ; FName HeartBeatName ; void)",
    "insertText": "Suspend()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (SuspendedCount + + ; } void)",
    "insertText": "Resume(double CurrentTime)"
  },
  {
    "label": "FThreadHeartBeat()",
    "kind": "Method",
    "detail": "Function (LastHeartBeatTime = CurrentTime ; } } } ; FRunnableThread* Thread ; FThreadSafeCounter StopTaskCounter ; FCriticalSection HeartBeatCritical ; TMap<uint32,FHeartBeatInfo> ThreadHeartBeat ; FHeartBeatInfo PresentHeartBeat ; FCriticalSection FunctionHeartBeatCritical ; TMap<uint32,FHeartBeatInfo> FunctionHeartBeat ; FCriticalSection CheckpointHeartBeatCritical ; TMap<FName,FHeartBeatInfo> CheckpointHeartBeat ; FThreadSafeBool bReadyToCheckHeartbeat ; double ConfigHangDuration ; double CurrentHangDuration ; double ConfigPresentDuration ; double CurrentPresentDuration ; double ConfigStuckDuration ; double CurrentStuckDuration ; double HangDurationMultiplier ; uint32 LastHangCallstackCRC ; uint32 LastHungThreadId ; uint32 LastStuckThreadId ; bool bHangsAreFatal ; FThreadSafeCounter GlobalSuspendCount ; int32 CheckpointSuspendCount ; FThreadHeartBeatClock Clock ; FOnThreadStuck OnStuck ; FOnThreadUnstuck OnUnstuck ; FOnHangDelegate OnHangDelegate ;)",
    "insertText": "FThreadHeartBeat()"
  },
  {
    "label": "InitSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSettings()"
  },
  {
    "label": "OnHang()",
    "kind": "Method",
    "detail": "Function (void FORCENOINLINE)",
    "insertText": "OnHang(double HangDuration, uint32 ThreadThatHung)"
  },
  {
    "label": "OnPresentHang()",
    "kind": "Method",
    "detail": "Function (void FORCENOINLINE)",
    "insertText": "OnPresentHang(double HangDuration)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "InvalidThreadId()",
    "kind": "Method",
    "detail": "Function (public : enum EConstants {)",
    "insertText": "InvalidThreadId(uint32)-1, PresentThreadId = (uint32)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FThreadHeartBeat&)",
    "insertText": "Get()"
  },
  {
    "label": "GetNoInit()",
    "kind": "Method",
    "detail": "Function (FThreadHeartBeat*)",
    "insertText": "GetNoInit()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "HeartBeat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeartBeat(bool bReadConfig = false)"
  },
  {
    "label": "PresentFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PresentFrame()"
  },
  {
    "label": "CheckHeartBeat()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CheckHeartBeat(double& OutHangDuration)"
  },
  {
    "label": "KillHeartBeat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KillHeartBeat()"
  },
  {
    "label": "MonitorFunctionStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MonitorFunctionStart()"
  },
  {
    "label": "MonitorFunctionEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MonitorFunctionEnd()"
  },
  {
    "label": "CheckFunctionHeartBeat()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CheckFunctionHeartBeat(double& OutHangDuration)"
  },
  {
    "label": "MonitorCheckpointStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MonitorCheckpointStart(FName EndCheckPoint, double TimeToReachCheckpoint)"
  },
  {
    "label": "MonitorCheckpointEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MonitorCheckpointEnd(FName CheckPoint)"
  },
  {
    "label": "CheckCheckpointHeartBeat()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CheckCheckpointHeartBeat(double& OutHangDuration)"
  },
  {
    "label": "SuspendHeartBeat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendHeartBeat(bool bAllThreads = false)"
  },
  {
    "label": "ResumeHeartBeat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeHeartBeat(bool bAllThreads = false)"
  },
  {
    "label": "IsBeating()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBeating()"
  },
  {
    "label": "SetDurationMultiplier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDurationMultiplier(double NewMultiplier)"
  },
  {
    "label": "GetLastHungThreadId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetLastHungThreadId()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "FSlowHeartBeatScope()",
    "kind": "Method",
    "detail": "Function (} ; struct FSlowHeartBeatScope { private : bool bSuspendedAllThreads ; bool bSuspended ; public :)",
    "insertText": "FSlowHeartBeatScope(bool bAllThreads = false) : bSuspendedAllThreads(bAllThreads) , bSuspended(false)"
  },
  {
    "label": "SuspendHeartBeat()",
    "kind": "Method",
    "detail": "Function (bSuspended = true ; HB ->)",
    "insertText": "SuspendHeartBeat(bSuspendedAllThreads)"
  },
  {
    "label": "FSlowHeartBeatScope()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FSlowHeartBeatScope()"
  },
  {
    "label": "ResumeHeartBeat()",
    "kind": "Method",
    "detail": "Function (HB ->)",
    "insertText": "ResumeHeartBeat(bSuspendedAllThreads)"
  },
  {
    "label": "FFunctionHeartBeatScope()",
    "kind": "Method",
    "detail": "Function (} } } } ; struct FFunctionHeartBeatScope { private : bool bStartedMonitor ; public :)",
    "insertText": "FFunctionHeartBeatScope() : bStartedMonitor(false)"
  },
  {
    "label": "FFunctionHeartBeatScope()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FFunctionHeartBeatScope()"
  },
  {
    "label": "FGameThreadHitchHeartBeatThreaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGameThreadHitchHeartBeatThreaded()"
  },
  {
    "label": "InvalidThreadId()",
    "kind": "Method",
    "detail": "Function (public : enum EConstants {)",
    "insertText": "InvalidThreadId(uint32)"
  },
  {
    "label": "FrameStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameStart(bool bSkipThisFrame = false)"
  },
  {
    "label": "GetFrameStartTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetFrameStartTime()"
  },
  {
    "label": "GetCurrentTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetCurrentTime()"
  },
  {
    "label": "SuspendHeartBeat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendHeartBeat()"
  },
  {
    "label": "ResumeHeartBeat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeHeartBeat()"
  },
  {
    "label": "IsStartedSuspended()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStartedSuspended()"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restart()"
  },
  {
    "label": "PostFork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostFork()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Init()"
  },
  {
    "label": "FDisableHitchDetectorScope()",
    "kind": "Method",
    "detail": "Function (} ; # if PLATFORM_UNIX typedef FUnixSignalGameHitchHeartBeat FGameThreadHitchHeartBeat ; # else typedef FGameThreadHitchHeartBeatThreaded FGameThreadHitchHeartBeat ; # endif struct FDisableHitchDetectorScope {)",
    "insertText": "FDisableHitchDetectorScope()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().SuspendHeartBeat()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().ResumeHeartBeat()"
  }
]