[
  {
    "label": "_xmpp_mem_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_xmpp_mem_t"
  },
  {
    "label": "_xmpp_log_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_xmpp_log_t"
  },
  {
    "label": "_xmpp_ctx_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_xmpp_ctx_t"
  },
  {
    "label": "_xmpp_conn_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_xmpp_conn_t"
  },
  {
    "label": "_xmpp_stanza_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_xmpp_stanza_t"
  },
  {
    "label": "_xmpp_sha1_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_xmpp_sha1_t"
  },
  {
    "label": "xmpp_initialize()",
    "kind": "Method",
    "detail": "Function (# ifndef __LIBSTROPHE_STROPHE_H__ # define __LIBSTROPHE_STROPHE_H__ # include<stddef . h> # ifdef __cplusplus \" C \" { # endif # define XMPP_NS_CLIENT \" jabber : client \" # define XMPP_NS_COMPONENT \" jabber : component : accept \" # define XMPP_NS_STREAMS \" http : # define XMPP_NS_STREAMS_IETF \" urn : ietf : params : xml : ns : xmpp - streams \" # define XMPP_NS_WEBSOCKETS_IETF \" urn : ietf : params : xml : ns : xmpp - framing \" # define XMPP_NS_TLS \" urn : ietf : params : xml : ns : xmpp - tls \" # define XMPP_NS_SASL \" urn : ietf : params : xml : ns : xmpp - sasl \" # define XMPP_NS_BIND \" urn : ietf : params : xml : ns : xmpp - bind \" # define XMPP_NS_SESSION \" urn : ietf : params : xml : ns : xmpp - session \" # define XMPP_NS_AUTH \" jabber : iq : auth \" # define XMPP_NS_DISCO_INFO \" http : # define XMPP_NS_DISCO_ITEMS \" http : # define XMPP_NS_ROSTER \" jabber : iq : roster \" # define XMPP_EOK 0 # define XMPP_EMEM - 1 # define XMPP_EINVOP - 2 # define XMPP_EINT - 3 void)",
    "insertText": "xmpp_initialize(void)"
  },
  {
    "label": "xmpp_shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_shutdown(void)"
  },
  {
    "label": "xmpp_version_check()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_version_check(int major, int minor)"
  },
  {
    "label": "xmpp_ctx_new()",
    "kind": "Method",
    "detail": "Function (typedef struct _xmpp_mem_t xmpp_mem_t ; typedef struct _xmpp_log_t xmpp_log_t ; typedef struct _xmpp_ctx_t xmpp_ctx_t ; xmpp_ctx_t*)",
    "insertText": "xmpp_ctx_new(const xmpp_mem_t * const mem, const xmpp_log_t * const log)"
  },
  {
    "label": "xmpp_ctx_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_ctx_free(xmpp_ctx_t * const ctx)"
  },
  {
    "label": "xmpp_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_free(const xmpp_ctx_t * const ctx, void *p)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (struct _xmpp_mem_t {)",
    "insertText": "void(*alloc)(const size_t size, void * const userdata)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*free)(void *p, void * const userdata)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*realloc)(void *p, const size_t size, void * const userdata)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void* userdata ; } ; typedef enum { XMPP_LEVEL_DEBUG,XMPP_LEVEL_INFO,XMPP_LEVEL_WARN,XMPP_LEVEL_ERROR } xmpp_log_level_t ; typedef enum { XMPP_UNKNOWN,XMPP_CLIENT,XMPP_COMPONENT } xmpp_conn_type_t ; typedef)",
    "insertText": "void(*xmpp_log_handler)(void * const userdata, const xmpp_log_level_t level, const char * const area, const char * const msg)"
  },
  {
    "label": "xmpp_get_default_logger()",
    "kind": "Method",
    "detail": "Function (struct _xmpp_log_t { xmpp_log_handler handler ; void* userdata ; } ; xmpp_log_t*)",
    "insertText": "xmpp_get_default_logger(xmpp_log_level_t level)"
  },
  {
    "label": "XMPP_CONN_FLAG_DISABLE_TLS()",
    "kind": "Method",
    "detail": "Function (typedef struct _xmpp_conn_t xmpp_conn_t ; typedef struct _xmpp_stanza_t xmpp_stanza_t ; # define)",
    "insertText": "XMPP_CONN_FLAG_DISABLE_TLS(1UL << 0) #define XMPP_CONN_FLAG_MANDATORY_TLS (1UL << 1) #define XMPP_CONN_FLAG_LEGACY_SSL (1UL << 2) #define XMPP_CONN_FLAG_TRUST_TLS (1UL << 3) #define XMPP_CONN_FLAG_LEGACY_AUTH (1UL << 4)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (XMPP_CONN_CONNECT,XMPP_CONN_RAW_CONNECT,XMPP_CONN_DISCONNECT,XMPP_CONN_FAIL } xmpp_conn_event_t ; typedef enum { XMPP_SE_BAD_FORMAT,XMPP_SE_BAD_NS_PREFIX,XMPP_SE_CONFLICT,XMPP_SE_CONN_TIMEOUT,XMPP_SE_HOST_GONE,XMPP_SE_HOST_UNKNOWN,XMPP_SE_IMPROPER_ADDR,XMPP_SE_INTERNAL_SERVER_ERROR,XMPP_SE_INVALID_FROM,XMPP_SE_INVALID_ID,XMPP_SE_INVALID_NS,XMPP_SE_INVALID_XML,XMPP_SE_NOT_AUTHORIZED,XMPP_SE_POLICY_VIOLATION,XMPP_SE_REMOTE_CONN_FAILED,XMPP_SE_RESOURCE_CONSTRAINT,XMPP_SE_RESTRICTED_XML,XMPP_SE_SEE_OTHER_HOST,XMPP_SE_SYSTEM_SHUTDOWN,XMPP_SE_UNDEFINED_CONDITION,XMPP_SE_UNSUPPORTED_ENCODING,XMPP_SE_UNSUPPORTED_STANZA_TYPE,XMPP_SE_UNSUPPORTED_VERSION,XMPP_SE_XML_NOT_WELL_FORMED } xmpp_error_type_t ; typedef struct { xmpp_error_type_t type ; char* text ; xmpp_stanza_t* stanza ; } xmpp_stream_error_t ; typedef)",
    "insertText": "void(*xmpp_conn_handler)(xmpp_conn_t * const conn, const xmpp_conn_event_t event, const int error, xmpp_stream_error_t * const stream_error, void * const userdata)"
  },
  {
    "label": "xmpp_send_error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_send_error(xmpp_conn_t * const conn, xmpp_error_type_t const type, char * const text)"
  },
  {
    "label": "xmpp_conn_new()",
    "kind": "Method",
    "detail": "Function (xmpp_conn_t*)",
    "insertText": "xmpp_conn_new(xmpp_ctx_t * const ctx)"
  },
  {
    "label": "xmpp_conn_clone()",
    "kind": "Method",
    "detail": "Function (xmpp_conn_t*)",
    "insertText": "xmpp_conn_clone(xmpp_conn_t * const conn)"
  },
  {
    "label": "xmpp_conn_release()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_conn_release(xmpp_conn_t * const conn)"
  },
  {
    "label": "xmpp_conn_get_flags()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "xmpp_conn_get_flags(const xmpp_conn_t * const conn)"
  },
  {
    "label": "xmpp_conn_set_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_conn_set_flags(xmpp_conn_t * const conn, long flags)"
  },
  {
    "label": "xmpp_conn_get_jid()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "xmpp_conn_get_jid(const xmpp_conn_t * const conn)"
  },
  {
    "label": "xmpp_conn_get_bound_jid()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "xmpp_conn_get_bound_jid(const xmpp_conn_t * const conn)"
  },
  {
    "label": "xmpp_conn_set_jid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_conn_set_jid(xmpp_conn_t * const conn, const char * const jid)"
  },
  {
    "label": "xmpp_conn_get_pass()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "xmpp_conn_get_pass(const xmpp_conn_t * const conn)"
  },
  {
    "label": "xmpp_conn_set_pass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_conn_set_pass(xmpp_conn_t * const conn, const char * const pass)"
  },
  {
    "label": "xmpp_conn_get_context()",
    "kind": "Method",
    "detail": "Function (xmpp_ctx_t*)",
    "insertText": "xmpp_conn_get_context(xmpp_conn_t * const conn)"
  },
  {
    "label": "xmpp_conn_disable_tls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_conn_disable_tls(xmpp_conn_t * const conn)"
  },
  {
    "label": "xmpp_conn_is_secured()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_conn_is_secured(xmpp_conn_t * const conn)"
  },
  {
    "label": "xmpp_conn_set_keepalive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_conn_set_keepalive(xmpp_conn_t * const conn, int timeout, int interval)"
  },
  {
    "label": "xmpp_conn_is_connecting()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_conn_is_connecting(xmpp_conn_t * const conn)"
  },
  {
    "label": "xmpp_conn_is_connected()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_conn_is_connected(xmpp_conn_t * const conn)"
  },
  {
    "label": "xmpp_conn_is_disconnected()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_conn_is_disconnected(xmpp_conn_t * const conn)"
  },
  {
    "label": "xmpp_connect_client()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_connect_client(xmpp_conn_t * const conn, const char * const altdomain, unsigned short altport, xmpp_conn_handler callback, void * const userdata)"
  },
  {
    "label": "xmpp_connect_component()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_connect_component(xmpp_conn_t * const conn, const char * const server, unsigned short port, xmpp_conn_handler callback, void * const userdata)"
  },
  {
    "label": "xmpp_connect_raw()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_connect_raw(xmpp_conn_t * const conn, const char * const altdomain, unsigned short altport, xmpp_conn_handler callback, void * const userdata)"
  },
  {
    "label": "xmpp_conn_open_stream_default()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_conn_open_stream_default(xmpp_conn_t * const conn)"
  },
  {
    "label": "xmpp_conn_open_stream()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_conn_open_stream(xmpp_conn_t * const conn, char **attributes, size_t attributes_len)"
  },
  {
    "label": "xmpp_conn_tls_start()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_conn_tls_start(xmpp_conn_t * const conn)"
  },
  {
    "label": "xmpp_disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_disconnect(xmpp_conn_t * const conn)"
  },
  {
    "label": "xmpp_send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_send(xmpp_conn_t * const conn, xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_send_raw_string()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_send_raw_string(xmpp_conn_t * const conn, const char * const fmt, ...)"
  },
  {
    "label": "xmpp_send_raw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_send_raw(xmpp_conn_t * const conn, const char * const data, const size_t len)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*xmpp_extsock_connect_handler)(void * const userdata)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*xmpp_extsock_close_handler)(void * const userdata)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*xmpp_extsock_send_handler)(const char * const data, const size_t len, void * const userdata)"
  },
  {
    "label": "xmpp_conn_set_extsock_handlers()",
    "kind": "Method",
    "detail": "Function (typedef struct { xmpp_extsock_connect_handler connect_handler ; xmpp_extsock_close_handler close_handler ; xmpp_extsock_send_handler send_handler ; int is_websocket ; void* userdata ; } xmpp_conn_extsock_t ; void)",
    "insertText": "xmpp_conn_set_extsock_handlers(xmpp_conn_t * const conn, const xmpp_conn_extsock_t * const handlers)"
  },
  {
    "label": "xmpp_extsock_connect_client()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_extsock_connect_client(xmpp_conn_t * const conn, xmpp_conn_handler callbask, void * const userdata)"
  },
  {
    "label": "xmpp_extsock_connected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_extsock_connected(xmpp_conn_t * const conn)"
  },
  {
    "label": "xmpp_extsock_connection_error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_extsock_connection_error(xmpp_conn_t * const conn, const char * const reason)"
  },
  {
    "label": "xmpp_extsock_receive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_extsock_receive(xmpp_conn_t * const conn, const char * const data, const size_t len)"
  },
  {
    "label": "xmpp_extsock_parser_reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_extsock_parser_reset(xmpp_conn_t * const conn)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*xmpp_timed_handler)(xmpp_conn_t * const conn, void * const userdata)"
  },
  {
    "label": "xmpp_timed_handler_add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_timed_handler_add(xmpp_conn_t * const conn, xmpp_timed_handler handler, const unsigned long period, void * const userdata)"
  },
  {
    "label": "xmpp_timed_handler_delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_timed_handler_delete(xmpp_conn_t * const conn, xmpp_timed_handler handler)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*xmpp_handler)(xmpp_conn_t * const conn, xmpp_stanza_t * const stanza, void * const userdata)"
  },
  {
    "label": "xmpp_handler_add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_handler_add(xmpp_conn_t * const conn, xmpp_handler handler, const char * const ns, const char * const name, const char * const type, void * const userdata)"
  },
  {
    "label": "xmpp_handler_delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_handler_delete(xmpp_conn_t * const conn, xmpp_handler handler)"
  },
  {
    "label": "xmpp_id_handler_add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_id_handler_add(xmpp_conn_t * const conn, xmpp_handler handler, const char * const id, void * const userdata)"
  },
  {
    "label": "xmpp_id_handler_delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_id_handler_delete(xmpp_conn_t * const conn, xmpp_handler handler, const char * const id)"
  },
  {
    "label": "xmpp_stanza_new()",
    "kind": "Method",
    "detail": "Function (xmpp_stanza_t*)",
    "insertText": "xmpp_stanza_new(xmpp_ctx_t *ctx)"
  },
  {
    "label": "xmpp_stanza_clone()",
    "kind": "Method",
    "detail": "Function (xmpp_stanza_t*)",
    "insertText": "xmpp_stanza_clone(xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_copy()",
    "kind": "Method",
    "detail": "Function (xmpp_stanza_t*)",
    "insertText": "xmpp_stanza_copy(const xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_release()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_release(xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_get_context()",
    "kind": "Method",
    "detail": "Function (xmpp_ctx_t*)",
    "insertText": "xmpp_stanza_get_context(const xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_is_text()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_is_text(xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_is_tag()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_is_tag(xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_to_text()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_to_text(xmpp_stanza_t *stanza, char ** const buf, size_t * const buflen)"
  },
  {
    "label": "xmpp_stanza_get_children()",
    "kind": "Method",
    "detail": "Function (xmpp_stanza_t*)",
    "insertText": "xmpp_stanza_get_children(xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_get_child_by_name()",
    "kind": "Method",
    "detail": "Function (xmpp_stanza_t*)",
    "insertText": "xmpp_stanza_get_child_by_name(xmpp_stanza_t * const stanza, const char * const name)"
  },
  {
    "label": "xmpp_stanza_get_child_by_ns()",
    "kind": "Method",
    "detail": "Function (xmpp_stanza_t*)",
    "insertText": "xmpp_stanza_get_child_by_ns(xmpp_stanza_t * const stanza, const char * const ns)"
  },
  {
    "label": "xmpp_stanza_get_next()",
    "kind": "Method",
    "detail": "Function (xmpp_stanza_t*)",
    "insertText": "xmpp_stanza_get_next(xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_add_child()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_add_child(xmpp_stanza_t *stanza, xmpp_stanza_t *child)"
  },
  {
    "label": "xmpp_stanza_get_attribute()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "xmpp_stanza_get_attribute(xmpp_stanza_t * const stanza, const char * const name)"
  },
  {
    "label": "xmpp_stanza_get_attribute_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_get_attribute_count(xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_get_attributes()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_get_attributes(xmpp_stanza_t * const stanza, const char **attr, int attrlen)"
  },
  {
    "label": "xmpp_stanza_get_text()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "xmpp_stanza_get_text(xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_get_text_ptr()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "xmpp_stanza_get_text_ptr(xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_get_name()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "xmpp_stanza_get_name(xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_set_attribute()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_set_attribute(xmpp_stanza_t * const stanza, const char * const key, const char * const value)"
  },
  {
    "label": "xmpp_stanza_set_name()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_set_name(xmpp_stanza_t *stanza, const char * const name)"
  },
  {
    "label": "xmpp_stanza_set_text()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_set_text(xmpp_stanza_t *stanza, const char * const text)"
  },
  {
    "label": "xmpp_stanza_set_text_with_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_set_text_with_size(xmpp_stanza_t *stanza, const char * const text, const size_t size)"
  },
  {
    "label": "xmpp_stanza_del_attribute()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_del_attribute(xmpp_stanza_t * const stanza, const char * const name)"
  },
  {
    "label": "xmpp_stanza_get_ns()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "xmpp_stanza_get_ns(xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_get_type()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "xmpp_stanza_get_type(xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_get_id()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "xmpp_stanza_get_id(xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_get_to()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "xmpp_stanza_get_to(xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_get_from()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "xmpp_stanza_get_from(xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_stanza_set_ns()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_set_ns(xmpp_stanza_t * const stanza, const char * const ns)"
  },
  {
    "label": "xmpp_stanza_set_id()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_set_id(xmpp_stanza_t * const stanza, const char * const id)"
  },
  {
    "label": "xmpp_stanza_set_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_set_type(xmpp_stanza_t * const stanza, const char * const type)"
  },
  {
    "label": "xmpp_stanza_set_to()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_set_to(xmpp_stanza_t * const stanza, const char * const to)"
  },
  {
    "label": "xmpp_stanza_set_from()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_stanza_set_from(xmpp_stanza_t * const stanza, const char * const from)"
  },
  {
    "label": "xmpp_stanza_reply()",
    "kind": "Method",
    "detail": "Function (xmpp_stanza_t*)",
    "insertText": "xmpp_stanza_reply(xmpp_stanza_t * const stanza)"
  },
  {
    "label": "xmpp_message_new()",
    "kind": "Method",
    "detail": "Function (xmpp_stanza_t*)",
    "insertText": "xmpp_message_new(xmpp_ctx_t *ctx, const char * const type, const char * const to, const char * const id)"
  },
  {
    "label": "xmpp_message_get_body()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "xmpp_message_get_body(xmpp_stanza_t *msg)"
  },
  {
    "label": "xmpp_message_set_body()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "xmpp_message_set_body(xmpp_stanza_t *msg, const char * const text)"
  },
  {
    "label": "xmpp_iq_new()",
    "kind": "Method",
    "detail": "Function (xmpp_stanza_t*)",
    "insertText": "xmpp_iq_new(xmpp_ctx_t *ctx, const char * const type, const char * const id)"
  },
  {
    "label": "xmpp_presence_new()",
    "kind": "Method",
    "detail": "Function (xmpp_stanza_t*)",
    "insertText": "xmpp_presence_new(xmpp_ctx_t *ctx)"
  },
  {
    "label": "xmpp_error_new()",
    "kind": "Method",
    "detail": "Function (xmpp_stanza_t*)",
    "insertText": "xmpp_error_new(xmpp_ctx_t *ctx, xmpp_error_type_t const type, const char * const text)"
  },
  {
    "label": "xmpp_jid_new()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "xmpp_jid_new(xmpp_ctx_t *ctx, const char *node, const char *domain, const char *resource)"
  },
  {
    "label": "xmpp_jid_bare()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "xmpp_jid_bare(xmpp_ctx_t *ctx, const char *jid)"
  },
  {
    "label": "xmpp_jid_node()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "xmpp_jid_node(xmpp_ctx_t *ctx, const char *jid)"
  },
  {
    "label": "xmpp_jid_domain()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "xmpp_jid_domain(xmpp_ctx_t *ctx, const char *jid)"
  },
  {
    "label": "xmpp_jid_resource()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "xmpp_jid_resource(xmpp_ctx_t *ctx, const char *jid)"
  },
  {
    "label": "xmpp_run_once()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_run_once(xmpp_ctx_t *ctx, const unsigned long timeout)"
  },
  {
    "label": "xmpp_run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_run(xmpp_ctx_t *ctx)"
  },
  {
    "label": "xmpp_stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_stop(xmpp_ctx_t *ctx)"
  },
  {
    "label": "xmpp_ctx_set_timeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_ctx_set_timeout(xmpp_ctx_t * const ctx, const unsigned long timeout)"
  },
  {
    "label": "xmpp_uuid_gen()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "xmpp_uuid_gen(xmpp_ctx_t *ctx)"
  },
  {
    "label": "xmpp_sha1()",
    "kind": "Method",
    "detail": "Function (# define XMPP_SHA1_DIGEST_SIZE 2 0 typedef struct _xmpp_sha1_t xmpp_sha1_t ; char*)",
    "insertText": "xmpp_sha1(xmpp_ctx_t *ctx, const unsigned char *data, size_t len)"
  },
  {
    "label": "xmpp_sha1_digest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_sha1_digest(const unsigned char *data, size_t len, unsigned char *digest)"
  },
  {
    "label": "xmpp_sha1_new()",
    "kind": "Method",
    "detail": "Function (xmpp_sha1_t*)",
    "insertText": "xmpp_sha1_new(xmpp_ctx_t *ctx)"
  },
  {
    "label": "xmpp_sha1_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_sha1_free(xmpp_sha1_t *sha1)"
  },
  {
    "label": "xmpp_sha1_update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_sha1_update(xmpp_sha1_t *sha1, const unsigned char *data, size_t len)"
  },
  {
    "label": "xmpp_sha1_final()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_sha1_final(xmpp_sha1_t *sha1)"
  },
  {
    "label": "xmpp_sha1_to_string()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "xmpp_sha1_to_string(xmpp_sha1_t *sha1, char *s, size_t slen)"
  },
  {
    "label": "xmpp_sha1_to_string_alloc()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "xmpp_sha1_to_string_alloc(xmpp_sha1_t *sha1)"
  },
  {
    "label": "xmpp_sha1_to_digest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_sha1_to_digest(xmpp_sha1_t *sha1, unsigned char *digest)"
  },
  {
    "label": "xmpp_base64_encode()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "xmpp_base64_encode(xmpp_ctx_t *ctx, const unsigned char *data, size_t len)"
  },
  {
    "label": "xmpp_base64_decode_str()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "xmpp_base64_decode_str(xmpp_ctx_t *ctx, const char *base64, size_t len)"
  },
  {
    "label": "xmpp_base64_decode_bin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmpp_base64_decode_bin(xmpp_ctx_t *ctx, const char *base64, size_t len, unsigned char **out, size_t *outlen)"
  }
]