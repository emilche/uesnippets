[
  {
    "label": "format_object_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "format_object_base"
  },
  {
    "label": "format_object",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "format_object"
  },
  {
    "label": "FormattedString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormattedString"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "FormattedNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormattedNumber"
  },
  {
    "label": "format_object_base()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_FORMAT_H # define LLVM_SUPPORT_FORMAT_H # include \" dxc / WinAdapter . h \" # include \" llvm / ADT / STLExtras . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / Support / DataTypes . h \" # include<cassert> # include<cstdio> # include<tuple> namespace llvm { class format_object_base { protected : const char* Fmt ; ~)",
    "insertText": "format_object_base()"
  },
  {
    "label": "home()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "home()"
  },
  {
    "label": "snprint()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "snprint(char *Buffer, unsigned BufferSize)"
  },
  {
    "label": "format_object_base()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "format_object_base(const char *fmt) : Fmt(fmt)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "print(char *Buffer, unsigned BufferSize)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(BufferSize && \"Invalid buffer size!\")"
  },
  {
    "label": "snprint()",
    "kind": "Method",
    "detail": "Function (int N =)",
    "insertText": "snprint(Buffer, BufferSize)"
  },
  {
    "label": "_snprintf_s()",
    "kind": "Method",
    "detail": "Function (# ifdef _MSC_VER return)",
    "insertText": "_snprintf_s(Buffer, BufferSize, _TRUNCATE, Fmt, std::get<Is>(Vals)...)"
  },
  {
    "label": "snprintf()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "snprintf(Buffer, BufferSize, Fmt, std::get<Is>(Vals)...)"
  },
  {
    "label": "format_object()",
    "kind": "Method",
    "detail": "Function (# endif } public :)",
    "insertText": "format_object(const char *fmt, const Ts &... vals) : format_object_base(fmt), Vals(vals...)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (} } ; template<. . . Ts> format_object<Ts . . .>)",
    "insertText": "format(const char *Fmt, const Ts &... Vals)"
  },
  {
    "label": "FormattedString()",
    "kind": "Method",
    "detail": "Function (} class FormattedString { StringRef Str ; unsigned Width ; bool RightJustify ; class raw_ostream ; public :)",
    "insertText": "FormattedString(StringRef S, unsigned W, bool R) : Str(S), Width(W), RightJustify(R)"
  },
  {
    "label": "left_justify()",
    "kind": "Method",
    "detail": "Function (} } ; FormattedString)",
    "insertText": "left_justify(StringRef Str, unsigned Width)"
  },
  {
    "label": "right_justify()",
    "kind": "Method",
    "detail": "Function (} FormattedString)",
    "insertText": "right_justify(StringRef Str, unsigned Width)"
  },
  {
    "label": "FormattedNumber()",
    "kind": "Method",
    "detail": "Function (} class FormattedNumber { uint64_t HexValue ; int64_t DecValue ; unsigned Width ; bool Hex ; bool Upper ; bool HexPrefix ; class raw_ostream ; public :)",
    "insertText": "FormattedNumber(uint64_t HV, int64_t DV, unsigned W, bool H, bool U, bool Prefix) : HexValue(HV), DecValue(DV), Width(W), Hex(H), Upper(U), HexPrefix(Prefix)"
  },
  {
    "label": "format_hex()",
    "kind": "Method",
    "detail": "Function (} } ; FormattedNumber)",
    "insertText": "format_hex(uint64_t N, unsigned Width, bool Upper = false)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Width <= 18 && \"hex width must be <= 18\")"
  },
  {
    "label": "format_hex_no_prefix()",
    "kind": "Method",
    "detail": "Function (} FormattedNumber)",
    "insertText": "format_hex_no_prefix(uint64_t N, unsigned Width, bool Upper = false)"
  },
  {
    "label": "format_decimal()",
    "kind": "Method",
    "detail": "Function (} FormattedNumber)",
    "insertText": "format_decimal(int64_t N, unsigned Width)"
  }
]