[
  {
    "label": "FGameProjectHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameProjectHelper"
  },
  {
    "label": "GetAvailableConfigurations()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Paths . h \" # include \" HAL / FileManager . h \" # include \" Misc / PackageName . h \" # include \" DesktopPlatformModule . h \" class FGameProjectHelper { public : TArray<FString>)",
    "insertText": "GetAvailableConfigurations(const FString& GameName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<FString> Result ; Result .)",
    "insertText": "Add(TEXT(\"Debug\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(TEXT(\"Development\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(TEXT(\"Shipping\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(TEXT(\"Test\"))"
  },
  {
    "label": "RootDir()",
    "kind": "Method",
    "detail": "Function (TArray<FString> Result ; TArray<FString> DirectoryNames ; FString SearchPath =)",
    "insertText": "RootDir() / FString(TEXT(\"*\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString GameName = DirectoryNames [ FileIndex ] ;)",
    "insertText": "if(IsGameAvailable(GameName))"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "AddUnique(GameName)"
  },
  {
    "label": "GetAvailableMaps()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } TArray<FString>)",
    "insertText": "GetAvailableMaps(FString GameName, bool IncludeEngineMaps, bool Sorted)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (TArray<FString> Result ; TArray<FString> EnginemapNames ; TArray<FString> ProjectMapNames ; const FString WildCard =)",
    "insertText": "Printf(TEXT(\"*%s\"), *FPackageName::GetMapPackageExtension())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 i = 0; i < ProjectMapNames.Num(); i++)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(FPaths::GetBaseFilename(ProjectMapNames[i]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IncludeEngineMaps)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(FPaths::GetBaseFilename(EnginemapNames[i]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(Sorted)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Sort()"
  },
  {
    "label": "IsGameAvailable()",
    "kind": "Method",
    "detail": "Function (} return Result ; } bool)",
    "insertText": "IsGameAvailable(FString GameName)"
  },
  {
    "label": "bIsEngineDirectory()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsEngineDirectory(GameName == TEXT(\"Engine\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<FString> ExplicitBuildTargetNames ;)",
    "insertText": "if(!InProjectFilePath.IsEmpty())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (InFilterTargetTypes = nullptr ; } TMap<EBuildTargetType,TArray<FString>> BuildTargetNamesByType ; const TArray<FTargetInfo>& Targets =)",
    "insertText": "Get()->GetTargetsForProject(InProjectFilePath)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(InFilterTargetTypes != nullptr && !InFilterTargetTypes->Contains(Target.Type))"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (continue ; } BuildTargetNamesByType .)",
    "insertText": "FindOrAdd(Target.Type).Add(Target.Name)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(auto& Itr : BuildTargetNamesByType)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ExplicitBuildTargetNames .)",
    "insertText": "Append(Itr.Value)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} } } return)",
    "insertText": "MoveTemp(ExplicitBuildTargetNames)"
  }
]