[
  {
    "label": "TBlockSparseSymmetricLinearSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBlockSparseSymmetricLinearSystem"
  },
  {
    "label": "FPimpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPimpl"
  },
  {
    "label": "TBlockSparseSymmetricLinearSystem()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Templates / PimplPtr . h \" namespace Chaos { template<T,int32 BlockSize> class TBlockSparseSymmetricLinearSystem final { public :)",
    "insertText": "TBlockSparseSymmetricLinearSystem()"
  },
  {
    "label": "TBlockSparseSymmetricLinearSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TBlockSparseSymmetricLinearSystem(const TBlockSparseSymmetricLinearSystem&)"
  },
  {
    "label": "TBlockSparseSymmetricLinearSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TBlockSparseSymmetricLinearSystem(TBlockSparseSymmetricLinearSystem&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TBlockSparseSymmetricLinearSystem&)",
    "insertText": "operator(TBlockSparseSymmetricLinearSystem&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TBlockSparseSymmetricLinearSystem&)",
    "insertText": "operator(TBlockSparseSymmetricLinearSystem&&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(int32 NumRows)"
  },
  {
    "label": "ReserveForParallelAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveForParallelAdd(int32 NumDiagEntries, int32 NumOffDiagEntries)"
  },
  {
    "label": "AddMatrixEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMatrixEntry(int32 Index0, int32 Index1, const Chaos::PMatrix<T, BlockSize, BlockSize>& AEntry)"
  },
  {
    "label": "FinalizeSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeSystem()"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Solve(const TConstArrayView<TVector<T, BlockSize>>& RHS, const TArrayView<TVector<T, BlockSize>>& Result, const int32 MaxNumCGIterations, const T CGResidualTolerance, bool bCheckResidual, int32* OptionalOutIterations = nullptr, T* OptionalOutError = nullptr)"
  }
]