[
  {
    "label": "EncoderStreamFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncoderStreamFactory"
  },
  {
    "label": "EncoderStreamFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_CONFIG_ENCODER_STREAM_FACTORY_H_ # define VIDEO_CONFIG_ENCODER_STREAM_FACTORY_H_ # include<string> # include<vector> # include \" api / transport / field_trial_based_config . h \" # include \" api / units / data_rate . h \" # include \" api / video_codecs / video_encoder . h \" # include \" call / adaptation / video_source_restrictions . h \" # include \" video / config / video_encoder_config . h \" namespace cricket { class EncoderStreamFactory : public webrtc::VideoEncoderConfig::VideoStreamFactoryInterface { public :)",
    "insertText": "EncoderStreamFactory(std::string codec_name, int max_qp, bool is_screenshare, bool conference_mode)"
  },
  {
    "label": "EncoderStreamFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncoderStreamFactory(std::string codec_name, int max_qp, bool is_screenshare, bool conference_mode, const webrtc::VideoEncoder::EncoderInfo& encoder_info, absl::optional<webrtc::VideoSourceRestrictions> restrictions = absl::nullopt, const webrtc::FieldTrialsView* trials = nullptr)"
  },
  {
    "label": "CreateEncoderStreams()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::VideoStream>)",
    "insertText": "CreateEncoderStreams(int width, int height, const webrtc::VideoEncoderConfig& encoder_config)"
  },
  {
    "label": "CreateDefaultVideoStreams()",
    "kind": "Method",
    "detail": "Function (private : std::vector<webrtc::VideoStream>)",
    "insertText": "CreateDefaultVideoStreams(int width, int height, const webrtc::VideoEncoderConfig& encoder_config, const absl::optional<webrtc::DataRate>& experimental_min_bitrate)"
  },
  {
    "label": "CreateSimulcastOrConferenceModeScreenshareStreams()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::VideoStream>)",
    "insertText": "CreateSimulcastOrConferenceModeScreenshareStreams(int width, int height, const webrtc::VideoEncoderConfig& encoder_config, const absl::optional<webrtc::DataRate>& experimental_min_bitrate)"
  },
  {
    "label": "GetLayerResolutionFromRequestedResolution()",
    "kind": "Method",
    "detail": "Function (webrtc::Resolution)",
    "insertText": "GetLayerResolutionFromRequestedResolution(int in_frame_width, int in_frame_height, webrtc::Resolution requested_resolution)"
  }
]