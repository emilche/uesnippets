[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CFTypeRefTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CFTypeRefTraits"
  },
  {
    "label": "ScopedTypeRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedTypeRef"
  },
  {
    "label": "InvalidValue()",
    "kind": "Method",
    "detail": "Function (# ifndef SDK_OBJC_HELPERS_SCOPED_CFTYPEREF_H_ # define SDK_OBJC_HELPERS_SCOPED_CFTYPEREF_H_ # include<CoreFoundation / CoreFoundation . h> namespace rtc { enum class RetainPolicy { RETAIN,ASSUME } ; namespace internal { template<T> struct CFTypeRefTraits { T)",
    "insertText": "InvalidValue()"
  },
  {
    "label": "CFRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CFRelease(ref)"
  },
  {
    "label": "Retain()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "Retain(T ref)"
  },
  {
    "label": "CFRetain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CFRetain(ref)"
  },
  {
    "label": "ScopedTypeRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedTypeRef(T ptr) : ptr_(ptr)"
  },
  {
    "label": "ScopedTypeRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedTypeRef(T ptr, RetainPolicy policy) : ScopedTypeRef(ptr)"
  },
  {
    "label": "ScopedTypeRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedTypeRef(const ScopedTypeRef<T, Traits>& rhs) : ptr_(rhs.ptr_)"
  },
  {
    "label": "ScopedTypeRef()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ScopedTypeRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release(ptr_)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} } T)",
    "insertText": "get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ptr_ = rhs ; return* this ; } ScopedTypeRef&)",
    "insertText": "operator(const ScopedTypeRef<T, Traits>& rhs)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset(rhs.get(), RetainPolicy::RETAIN)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(!ptr_)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (ptr_ = ptr ; } T)",
    "insertText": "release()"
  },
  {
    "label": "ScopedCF()",
    "kind": "Method",
    "detail": "Function (} template<T> ScopedCFTypeRef<T>)",
    "insertText": "ScopedCF(T cftype)"
  }
]