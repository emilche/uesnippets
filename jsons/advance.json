[
  {
    "label": "_InputIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIter"
  },
  {
    "label": "_BiDirIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BiDirIter"
  },
  {
    "label": "_RandIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandIter"
  },
  {
    "label": "_Distance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Distance"
  },
  {
    "label": "_IntegralDistance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_IntegralDistance"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Ip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Ip"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ITERATOR_ADVANCE_H # define _LIBCPP___ITERATOR_ADVANCE_H # include<__assert> # include<__config> # include<__iterator / concepts . h> # include<__iterator / incrementable_traits . h> # include<__iterator / iterator_traits . h> # include<__utility / move . h> # include<__utility / unreachable . h> # include<concepts> # include<cstdlib> # include<limits> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _InputIter> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14 void __advance(_InputIter& __i, typename iterator_traits<_InputIter>::difference_type __n, input_iterator_tag)"
  },
  {
    "label": "__advance()",
    "kind": "Method",
    "detail": "Function (} template<class _BiDirIter> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14 void)",
    "insertText": "__advance(_BiDirIter& __i, typename iterator_traits<_BiDirIter>::difference_type __n, bidirectional_iterator_tag)"
  },
  {
    "label": "__advance()",
    "kind": "Method",
    "detail": "Function (} template<class _RandIter> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14 void)",
    "insertText": "__advance(_RandIter& __i, typename iterator_traits<_RandIter>::difference_type __n, random_access_iterator_tag)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (__i + = __n ; } template<class _InputIter,class _Distance,class _IntegralDistance =)",
    "insertText": "decltype(_VSTD::__convert_to_integral(declval<_Distance>())), class = __enable_if_t<is_integral<_IntegralDistance>::value> > _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14 void advance(_InputIter& __i, _Distance __orig_n)"
  },
  {
    "label": "_Difference()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_InputIter>::difference_type _Difference ; _Difference __n = static_cast<)",
    "insertText": "_Difference(_VSTD::__convert_to_integral(__orig_n))"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__n >= 0 || __is_cpp17_bidirectional_iterator<_InputIter>::value, \"Attempt to advance(it, n) with negative n on a non-bidirectional iterator\")"
  },
  {
    "label": "__advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__advance(__i, __n, typename iterator_traits<_InputIter>::iterator_category())"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if _LIBCPP_STD_VER> 1 7&& !)",
    "insertText": "defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__advance_forward()",
    "kind": "Method",
    "detail": "Function (namespace __advance { struct __fn { private : template<class _Ip> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__advance_forward(_Ip& __i, iter_difference_t<_Ip> __n)"
  },
  {
    "label": "__advance_backward()",
    "kind": "Method",
    "detail": "Function (- - __n ; + + __i ; } } template<class _Ip> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__advance_backward(_Ip& __i, iter_difference_t<_Ip> __n)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + __n ; - - __i ; } } public : template<input_or_output_iterator _Ip> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "operator()(_Ip& __i, iter_difference_t<_Ip> __n)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__n >= 0 || bidirectional_iterator<_Ip>, \"If `n < 0`, then `bidirectional_iterator<I>` must be true.\")"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (__i + = __n ; return ; } else if)",
    "insertText": "constexpr(bidirectional_iterator<_Ip>)"
  },
  {
    "label": "__advance_forward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__advance_forward(__i, __n)"
  },
  {
    "label": "__advance_backward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__advance_backward(__i, __n)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (__i =)",
    "insertText": "move(__bound_sentinel)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(sized_sentinel_for<_Sp, _Ip>)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "while(__i != __bound_sentinel)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + __i ; } } } template<input_or_output_iterator _Ip,sentinel_for<_Ip> _Sp> _LIBCPP_HIDE_FROM_ABI iter_difference_t<_Ip>)",
    "insertText": "operator()(_Ip& __i, iter_difference_t<_Ip> __n, _Sp __bound_sentinel)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT((__n >= 0) || (bidirectional_iterator<_Ip> && same_as<_Ip, _Sp>), \"If `n < 0`, then `bidirectional_iterator<I> && same_as<I, S>` must be true.\")"
  },
  {
    "label": "__magnitude_geq()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "__magnitude_geq(auto __a, auto __b)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (+ + __i ; - - __n ; } if)",
    "insertText": "constexpr(bidirectional_iterator<_Ip> && same_as<_Ip, _Sp>)"
  },
  {
    "label": "__libcpp_unreachable()",
    "kind": "Method",
    "detail": "Function (- - __i ; + + __n ; } } return __n ; })",
    "insertText": "__libcpp_unreachable()"
  }
]