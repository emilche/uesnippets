[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "ELauncherVersion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELauncherVersion"
  },
  {
    "label": "ESimpleLauncherVersion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESimpleLauncherVersion"
  },
  {
    "label": "FLauncherSimpleProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLauncherSimpleProfile"
  },
  {
    "label": "FLauncherProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLauncherProfile"
  },
  {
    "label": "DEFINE_LOG_CATEGORY_STATIC()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Modules / ModuleManager . h \" # include \" ILauncherProfile . h \" # include \" ILauncherServicesModule . h \" # include \" Misc / Paths . h \" # include \" Launcher / LauncherProjectPath . h \" # include \" Misc / CommandLine . h \" # include \" Internationalization / Culture . h \" # include \" Misc / App . h \" # include \" Interfaces / ITargetPlatform . h \" # include \" Interfaces / ITargetPlatformManagerModule . h \" # include \" ITargetDeviceProxy . h \" # include \" ITargetDeviceServicesModule . h \" # include \" GameProjectHelper . h \" # include \" Profiles / LauncherProfileLaunchRole . h \" # include \" PlatformInfo . h \" # include \" TargetReceipt . h \" # include \" DesktopPlatformModule . h \" # include \" GameProjectHelper . h \")",
    "insertText": "DEFINE_LOG_CATEGORY_STATIC(LogLauncherProfile, Log, All)"
  },
  {
    "label": "HasPromotedTarget()",
    "kind": "Method",
    "detail": "Function (class Error ; enum ELauncherVersion { LAUNCHERSERVICES_MINPROFILEVERSION = 1 0,LAUNCHERSERVICES_ADDEDINCREMENTALDEPLOYVERSION = 1 1,LAUNCHERSERVICES_ADDEDPATCHSOURCECONTENTPATH = 1 2,LAUNCHERSERVICES_ADDEDRELEASEVERSION = 1 3,LAUNCHERSERVICES_REMOVEDPATCHSOURCECONTENTPATH = 1 4,LAUNCHERSERVICES_ADDEDDLCINCLUDEENGINECONTENT = 1 5,LAUNCHERSERVICES_ADDEDGENERATECHUNKS = 1 6,LAUNCHERSERVICES_ADDEDNUMCOOKERSTOSPAWN = 1 7,LAUNCHERSERVICES_ADDEDSKIPCOOKINGEDITORCONTENT = 1 8,LAUNCHERSERVICES_ADDEDDEFAULTDEPLOYPLATFORM = 1 9,LAUNCHERSERVICES_FIXCOMPRESSIONSERIALIZE = 2 0,LAUNCHERSERVICES_SHAREABLEPROJECTPATHS = 2 1,LAUNCHERSERVICES_FILEFORMATCHANGE = 2 2,LAUNCHERSERVICES_ADDARCHIVE = 2 3,LAUNCHERSERVICES_ADDEDENCRYPTINIFILES = 2 4,LAUNCHERSERVICES_ADDEDMULTILEVELPATCHING = 2 5,LAUNCHERSERVICES_ADDEDADDITIONALCOMMANDLINE = 2 6,LAUNCHERSERVICES_ADDEDINCLUDEPREREQUISITES = 2 7,LAUNCHERSERVICES_ADDEDBUILDMODE = 2 8,LAUNCHERSERVICES_ADDEDUSEIOSTORE = 2 9,LAUNCHERSERVICES_ADDEDMAKEBINARYCONFIG = 3 0,LAUNCHERSERVICES_ADDEDREFERENCECONTAINERS = 3 1,LAUNCHERSERVICES_REMOVEDNUMCOOKERSTOSPAWN = 3 2,LAUNCHERSERVICES_ADDEDORIGINALRELEASEVERSION = 3 3,LAUNCHERSERVICES_ADDBUILDTARGETNAME = 3 4,LAUNCHERSERVICED_ADDEDRETAINSTAGEDDIRECTORY = 3 5,LAUNCHERSERVICED_REMOVEDRETAINSTAGEDDIRECTORY = 3 6,LAUNCHERSERVICES_FINALPLUSONE,LAUNCHERSERVICES_FINAL = LAUNCHERSERVICES_FINALPLUSONE - 1,} ; enum ESimpleLauncherVersion { LAUNCHERSERVICES_SIMPLEPROFILEVERSION = 1,LAUNCHERSERVICES_SIMPLEFILEFORMATCHANGE = 2,} ; bool)",
    "insertText": "HasPromotedTarget(const TCHAR* BaseDir, const TCHAR* TargetName, const TCHAR* Platform, EBuildConfiguration Configuration, const TCHAR* Architecture)"
  },
  {
    "label": "TryGetDefaultTargetName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetDefaultTargetName(const FString& ProjectFile, EBuildTargetType TargetType, FString& OutTargetName)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const TArray<FTargetInfo>& Targets =)",
    "insertText": "Get()->GetTargetsForProject(ProjectFile)"
  },
  {
    "label": "FLauncherSimpleProfile()",
    "kind": "Method",
    "detail": "Function (OutTargetName = Target . Name ; return true ; } } return false ; } class FLauncherSimpleProfile final : public ILauncherSimpleProfile { public :)",
    "insertText": "FLauncherSimpleProfile(const FString& InDeviceName) : DeviceName(InDeviceName)"
  },
  {
    "label": "SetDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaults()"
  },
  {
    "label": "GetDeviceName()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetDeviceName()"
  },
  {
    "label": "SetDeviceVariant()",
    "kind": "Method",
    "detail": "Function (DeviceName = InDeviceName ; } } void)",
    "insertText": "SetDeviceVariant(FName InVariant)"
  },
  {
    "label": "SetBuildConfiguration()",
    "kind": "Method",
    "detail": "Function (Variant = InVariant ; } void)",
    "insertText": "SetBuildConfiguration(EBuildConfiguration InConfiguration)"
  },
  {
    "label": "SetCookMode()",
    "kind": "Method",
    "detail": "Function (BuildConfiguration = InConfiguration ; } void)",
    "insertText": "SetCookMode(ELauncherProfileCookModes::Type InMode)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (CookMode = InMode ; } bool)",
    "insertText": "Serialize(FArchive& Archive)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Version = LAUNCHERSERVICES_SIMPLEPROFILEVERSION ; Archive<<Version ;)",
    "insertText": "if(Version != LAUNCHERSERVICES_SIMPLEPROFILEVERSION)"
  },
  {
    "label": "WriteObjectStart()",
    "kind": "Method",
    "detail": "Function (int32 Version = LAUNCHERSERVICES_SIMPLEFILEFORMATCHANGE ; Writer .)",
    "insertText": "WriteObjectStart()"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(TEXT(\"Version\"), Version)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(TEXT(\"DeviceName\"), DeviceName)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(TEXT(\"Variant\"), Variant.ToString())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(TEXT(\"BuildConfiguration\"), (int32)BuildConfiguration)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(TEXT(\"CookMode\"), CookMode)"
  },
  {
    "label": "WriteObjectEnd()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteObjectEnd()"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Load(const FJsonObject& Object)"
  },
  {
    "label": "Version()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Version(int32)Object.GetNumberField(TEXT(\"Version\"))"
  },
  {
    "label": "Variant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Variant(Object.GetStringField(TEXT(\"Variant\")))"
  },
  {
    "label": "BuildConfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildConfiguration(EBuildConfiguration)((int32)Object.GetNumberField(TEXT(\"BuildConfiguration\")))"
  },
  {
    "label": "CookMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CookMode(TEnumAsByte<ELauncherProfileCookModes::Type>)((int32)Object.GetNumberField(TEXT(\"CookMode\")))"
  },
  {
    "label": "GetProfileFolder()",
    "kind": "Method",
    "detail": "Function (Variant = NAME_None ; BuildConfiguration = EBuildConfiguration::Development ; CookMode = ELauncherProfileCookModes::OnTheFly ; } private : FString DeviceName ; FName Variant ; EBuildConfiguration BuildConfiguration ; TEnumAsByte<ELauncherProfileCookModes::Type> CookMode ; } ; class FLauncherProfile final : public ILauncherProfile { public : FString)",
    "insertText": "GetProfileFolder(bool bNotForLicensees)"
  },
  {
    "label": "EngineDir()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "EngineDir() / TEXT(\"Programs/UnrealFrontend/Profiles\")"
  },
  {
    "label": "FLauncherProfile()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLauncherProfile(ILauncherProfileManagerRef ProfileManager) : LauncherProfileManager(ProfileManager) , DefaultLaunchRole(MakeShareable(new FLauncherProfileLaunchRole()))"
  },
  {
    "label": "AddRaw()",
    "kind": "Method",
    "detail": "Function (ProjectChangedDelegate .)",
    "insertText": "AddRaw(this, &FLauncherProfile::OnSelectedProjectChanged)"
  },
  {
    "label": "FLauncherProfile()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLauncherProfile(ILauncherProfileManagerRef ProfileManager, FGuid InId, const FString& InProfileName) : LauncherProfileManager(ProfileManager) , DefaultLaunchRole(MakeShareable(new FLauncherProfileLaunchRole())) , Id(InId) , Name(InProfileName)"
  },
  {
    "label": "FLauncherProfile()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FLauncherProfile()"
  },
  {
    "label": "OnDeviceAdded()",
    "kind": "Method",
    "detail": "Function (DeployedDeviceGroup ->)",
    "insertText": "OnDeviceAdded().Remove(OnLauncherDeviceGroupDeviceAddedDelegateHandle)"
  },
  {
    "label": "OnDeviceRemoved()",
    "kind": "Method",
    "detail": "Function (DeployedDeviceGroup ->)",
    "insertText": "OnDeviceRemoved().Remove(OnLauncherDeviceGroupDeviceRemoveDelegateHandle)"
  },
  {
    "label": "GetDeployedDeviceGroupId()",
    "kind": "Method",
    "detail": "Function (} } const FGuid&)",
    "insertText": "GetDeployedDeviceGroupId()"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (CookedCultures .)",
    "insertText": "AddUnique(CultureName)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Validate()"
  },
  {
    "label": "AddCookedMap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddCookedMap(const FString& MapName)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (CookedMaps .)",
    "insertText": "AddUnique(MapName)"
  },
  {
    "label": "AddCookedPlatform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddCookedPlatform(const FString& PlatformName)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (CookedPlatforms .)",
    "insertText": "AddUnique(PlatformName)"
  },
  {
    "label": "RefreshValidBuildTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshValidBuildTargets()"
  },
  {
    "label": "SetDefaultDeployPlatform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDefaultDeployPlatform(const FName PlatformName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DefaultDeployPlatform = PlatformName ;)",
    "insertText": "if(DeployedDeviceGroup.IsValid())"
  },
  {
    "label": "RemoveAllDevices()",
    "kind": "Method",
    "detail": "Function (DeployedDeviceGroup ->)",
    "insertText": "RemoveAllDevices()"
  },
  {
    "label": "ITargetDeviceServicesModule()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<ITargetDeviceProxy>> PlatformDeviceProxies ; ITargetDeviceServicesModule& TargetDeviceServicesModule = FModuleManager::LoadModuleChecked<)",
    "insertText": "ITargetDeviceServicesModule(\"TargetDeviceServices\")"
  },
  {
    "label": "GetDeviceProxyManager()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<ITargetDeviceProxyManager>& InDeviceProxyManager = TargetDeviceServicesModule .)",
    "insertText": "GetDeviceProxyManager()"
  },
  {
    "label": "GetProxies()",
    "kind": "Method",
    "detail": "Function (InDeviceProxyManager ->)",
    "insertText": "GetProxies(NAME_None, true, PlatformDeviceProxies)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITargetDeviceProxy> DefaultPlatformDevice ;)",
    "insertText": "for(int32 ProxyIndex = 0; ProxyIndex < PlatformDeviceProxies.Num(); ++ProxyIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITargetDeviceProxy> DeviceProxy = PlatformDeviceProxies [ ProxyIndex ] ;)",
    "insertText": "if(DeviceProxy->GetVanillaPlatformId(NAME_None) == DefaultDeployPlatform)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DefaultPlatformDevice = DeviceProxy ; break ; } })",
    "insertText": "if(DefaultPlatformDevice.IsValid())"
  },
  {
    "label": "AddDevice()",
    "kind": "Method",
    "detail": "Function (DeployedDeviceGroup ->)",
    "insertText": "AddDevice(DefaultPlatformDevice->GetTargetDeviceId(NAME_None))"
  },
  {
    "label": "ClearCookedCultures()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearCookedCultures()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (CookedCultures .)",
    "insertText": "Reset()"
  },
  {
    "label": "ClearCookedMaps()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ClearCookedMaps()"
  },
  {
    "label": "ClearCookedPlatforms()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ClearCookedPlatforms()"
  },
  {
    "label": "CreateLaunchRole()",
    "kind": "Method",
    "detail": "Function (} } ILauncherProfileLaunchRolePtr)",
    "insertText": "CreateLaunchRole()"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (ILauncherProfileLaunchRolePtr Role =)",
    "insertText": "MakeShareable(new FLauncherProfileLaunchRole())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LaunchRoles .)",
    "insertText": "Add(Role)"
  },
  {
    "label": "GetCookConfiguration()",
    "kind": "Method",
    "detail": "Function (} } EBuildConfiguration)",
    "insertText": "GetCookConfiguration()"
  },
  {
    "label": "SetDefaultDeployPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultDeployPlatform(DefaultDeployPlatform)"
  },
  {
    "label": "GetDefaultDeployPlatform()",
    "kind": "Method",
    "detail": "Function (} return DeployedDeviceGroup ; } const FName)",
    "insertText": "GetDefaultDeployPlatform()"
  },
  {
    "label": "GetDLCName()",
    "kind": "Method",
    "detail": "Function (CreateDLC = InBuildDLC ; } FString)",
    "insertText": "GetDLCName()"
  },
  {
    "label": "IsDLCIncludingEngineContent()",
    "kind": "Method",
    "detail": "Function (DLCName = InDLCName ; } bool)",
    "insertText": "IsDLCIncludingEngineContent()"
  },
  {
    "label": "IsCreatingReleaseVersion()",
    "kind": "Method",
    "detail": "Function (DLCIncludeEngineContent = InDLCIncludeEngineContent ; } bool)",
    "insertText": "IsCreatingReleaseVersion()"
  },
  {
    "label": "GetCreateReleaseVersionName()",
    "kind": "Method",
    "detail": "Function (CreateReleaseVersion = InCreateReleaseVersion ; } FString)",
    "insertText": "GetCreateReleaseVersionName()"
  },
  {
    "label": "GetBasedOnReleaseVersionName()",
    "kind": "Method",
    "detail": "Function (CreateReleaseVersionName = InCreateReleaseVersionName ; } FString)",
    "insertText": "GetBasedOnReleaseVersionName()"
  },
  {
    "label": "GetOriginalReleaseVersionName()",
    "kind": "Method",
    "detail": "Function (BasedOnReleaseVersionName = InBasedOnReleaseVersionName ; } FString)",
    "insertText": "GetOriginalReleaseVersionName()"
  },
  {
    "label": "GetReferenceContainerGlobalFileName()",
    "kind": "Method",
    "detail": "Function (OriginalReleaseVersionName = InOriginalReleaseVersionName ; } FString)",
    "insertText": "GetReferenceContainerGlobalFileName()"
  },
  {
    "label": "GetReferenceContainerCryptoKeysFileName()",
    "kind": "Method",
    "detail": "Function (ReferenceContainerGlobalFileName = InReferenceContainerGlobalFileName ; } FString)",
    "insertText": "GetReferenceContainerCryptoKeysFileName()"
  },
  {
    "label": "GetDeploymentMode()",
    "kind": "Method",
    "detail": "Function (ReferenceContainerCryptoKeysFileName = InReferenceContainerCryptoKeysFileName ; } ELauncherProfileDeploymentModes::Type)",
    "insertText": "GetDeploymentMode()"
  },
  {
    "label": "GetFilePath()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetFilePath()"
  },
  {
    "label": "GetLaunchMode()",
    "kind": "Method",
    "detail": "Function (} ELauncherProfileLaunchModes::Type)",
    "insertText": "GetLaunchMode()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutRoles .)",
    "insertText": "Empty()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ILauncherProfileLaunchRolePtr Role =* It ;)",
    "insertText": "if(Role->GetAssignedDevice() == DeviceId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else)",
    "insertText": "if(LaunchMode == ELauncherProfileLaunchModes::DefaultRole)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutRoles .)",
    "insertText": "Add(DefaultLaunchRole)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} return OutRoles .)",
    "insertText": "Num()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetProjectName()",
    "kind": "Method",
    "detail": "Function (FString Path =)",
    "insertText": "GetProjectName(FullProjectPath)"
  },
  {
    "label": "GetProjectBasePath()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetProjectBasePath()"
  },
  {
    "label": "GetProjectPath()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetProjectPath()"
  },
  {
    "label": "GetTimeout()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTimeout()"
  },
  {
    "label": "HasValidationError()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasValidationError(ELauncherProfileValidationErrors::Type Error)"
  },
  {
    "label": "GetInvalidPlatform()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetInvalidPlatform()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bBuild = true ;)",
    "insertText": "if(BuildMode == ELauncherProfileBuildModes::DoNotBuild)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bBuild = false ; } else)",
    "insertText": "if(BuildMode == ELauncherProfileBuildModes::Auto)"
  },
  {
    "label": "FindPlatforms()",
    "kind": "Method",
    "detail": "Function (bBuild = false ; TArray<FString> TargetPlatformNames =)",
    "insertText": "FindPlatforms()"
  },
  {
    "label": "GetTargetPlatformManager()",
    "kind": "Method",
    "detail": "Function (const ITargetPlatform* TargetPlatform =)",
    "insertText": "GetTargetPlatformManager()->FindTargetPlatform(TargetPlatformName)"
  },
  {
    "label": "GetTargetPlatformInfo()",
    "kind": "Method",
    "detail": "Function (const PlatformInfo::FTargetPlatformInfo& PlatformInfo = TargetPlatform ->)",
    "insertText": "GetTargetPlatformInfo()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString ReceiptDir ; FString TargetName ;)",
    "insertText": "if(TryGetDefaultTargetName(FPaths::GetProjectFilePath(), PlatformInfo.PlatformType, TargetName))"
  },
  {
    "label": "GetPath()",
    "kind": "Method",
    "detail": "Function (ReceiptDir =)",
    "insertText": "GetPath(FPaths::GetProjectFilePath())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(TryGetDefaultTargetName(FString(), PlatformInfo.PlatformType, TargetName))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FText Reason ;)",
    "insertText": "if(TargetPlatform->RequiresTempTarget(false, BuildConfiguration, false, Reason))"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogLauncherProfile, Log, TEXT(\"Project does not require temp target\"))"
  },
  {
    "label": "EngineDir()",
    "kind": "Method",
    "detail": "Function (ReceiptDir =)",
    "insertText": "EngineDir()"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "UE_LOG(LogLauncherProfile, Log, TEXT(\"Unable to find any targets for platform %s - forcing build\"), *TargetPlatformName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bBuild = true ; break ; } FString BuildPlatform = PlatformInfo . DataDrivenPlatformInfo -> UBTPlatformString ;)",
    "insertText": "if(!HasPromotedTarget(*ReceiptDir, *TargetName, *BuildPlatform, BuildConfiguration, nullptr))"
  },
  {
    "label": "IsBuildingUAT()",
    "kind": "Method",
    "detail": "Function (bBuild = true ; break ; } } } } return bBuild ; } bool)",
    "insertText": "IsBuildingUAT()"
  },
  {
    "label": "IsDeployingIncrementally()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "IsDeployingIncrementally()"
  },
  {
    "label": "RemoveCookedCulture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveCookedCulture(const FString& CultureName)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (CookedCultures .)",
    "insertText": "Remove(CultureName)"
  },
  {
    "label": "RemoveCookedMap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveCookedMap(const FString& MapName)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (CookedMaps .)",
    "insertText": "Remove(MapName)"
  },
  {
    "label": "RemoveCookedPlatform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveCookedPlatform(const FString& PlatformName)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (CookedPlatforms .)",
    "insertText": "Remove(PlatformName)"
  },
  {
    "label": "RemoveLaunchRole()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveLaunchRole(const ILauncherProfileLaunchRoleRef& Role)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (LaunchRoles .)",
    "insertText": "Remove(Role)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Version = LAUNCHERSERVICES_FINAL ; Archive<<Version ;)",
    "insertText": "if(Version < LAUNCHERSERVICES_MINPROFILEVERSION)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (DeployedDeviceGroupId = DeployedDeviceGroup ->)",
    "insertText": "GetId()"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (} else { DeployedDeviceGroupId =)",
    "insertText": "FGuid()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } bool BuildGame = false ; Archive<<Id<<Name<<Description<<BuildConfiguration<<ProjectSpecified<<ShareableProjectPath<<CookConfiguration<<CookIncremental<<CookOptions<<CookMode<<CookUnversioned<<CookedCultures<<CookedMaps<<CookedPlatforms<<DeployStreamingServer<<DeployWithUnrealPak<<DeployedDeviceGroupId<<DeploymentMode<<HideFileServerWindow<<LaunchMode<<PackagingMode<<PackageDir<<BuildGame<<ForceClose<<Timeout ;)",
    "insertText": "if(Version >= LAUNCHERSERVICES_SHAREABLEPROJECTPATHS)"
  },
  {
    "label": "ConvertRelativePathToFull()",
    "kind": "Method",
    "detail": "Function (FullProjectPath =)",
    "insertText": "ConvertRelativePathToFull(FPaths::RootDir(), ShareableProjectPath)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString DeployPlatformString = DefaultDeployPlatform .)",
    "insertText": "ToString()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<Compressed ; })",
    "insertText": "if(Version>= LAUNCHERSERVICES_ADDEDENCRYPTINIFILES)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<EncryptIniFiles ; Archive<<ForDistribution ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDEDDEFAULTDEPLOYPLATFORM)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<DeployPlatformString ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDEDNUMCOOKERSTOSPAWN && Version < LAUNCHERSERVICES_REMOVEDNUMCOOKERSTOSPAWN)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 OldNumCookersToSpawn ; Archive<<OldNumCookersToSpawn ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDEDSKIPCOOKINGEDITORCONTENT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<bSkipCookingEditorContent ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDEDINCREMENTALDEPLOYVERSION)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<DeployIncremental ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_REMOVEDPATCHSOURCECONTENTPATH)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<GeneratePatch ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDEDMULTILEVELPATCHING)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<AddPatchLevel ; Archive<<StageBaseReleasePaks ; } else)",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDEDPATCHSOURCECONTENTPATH)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString Temp ; Archive<<Temp ; Archive<<GeneratePatch ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDEDDLCINCLUDEENGINECONTENT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<DLCIncludeEngineContent ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDEDRELEASEVERSION)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<CreateReleaseVersion ; Archive<<CreateReleaseVersionName ; Archive<<BasedOnReleaseVersionName ; Archive<<CreateDLC ; Archive<<DLCName ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDEDGENERATECHUNKS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<bGenerateChunks ; Archive<<bGenerateHttpChunkData ; Archive<<HttpChunkDataDirectory ; Archive<<HttpChunkDataReleaseName ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDARCHIVE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<bArchive ; Archive<<ArchiveDir ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDEDADDITIONALCOMMANDLINE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<AdditionalCommandLineParameters ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDEDINCLUDEPREREQUISITES)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<IncludePrerequisites ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDEDBUILDMODE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<BuildMode ; } else)",
    "insertText": "if(Archive.IsLoading())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BuildMode = BuildGame ? ELauncherProfileBuildModes::Build : ELauncherProfileBuildModes::DoNotBuild ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDEDUSEIOSTORE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<bUseIoStore ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDEDMAKEBINARYCONFIG)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<bMakeBinaryConfig ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDEDREFERENCECONTAINERS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<ReferenceContainerGlobalFileName ; Archive<<ReferenceContainerCryptoKeysFileName ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDEDORIGINALRELEASEVERSION)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<OriginalReleaseVersionName ; })",
    "insertText": "if(Version >= LAUNCHERSERVICES_ADDBUILDTARGETNAME)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Archive<<BuildTargetSpecified ; Archive<<BuildTargetName ; })",
    "insertText": "if(Version >= LAUNCHERSERVICED_ADDEDRETAINSTAGEDDIRECTORY && Version < LAUNCHERSERVICED_REMOVEDRETAINSTAGEDDIRECTORY)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool bRetainStagedDirectory = false ; Archive<<bRetainStagedDirectory ; } DefaultLaunchRole ->)",
    "insertText": "Serialize(Archive)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Archive<<NumLaunchRoles ;)",
    "insertText": "for(int32 RoleIndex = 0; RoleIndex < NumLaunchRoles; ++RoleIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LaunchRoles .)",
    "insertText": "Add(MakeShareable(new FLauncherProfileLaunchRole(Archive)))"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (DefaultDeployPlatform =)",
    "insertText": "FName(*DeployPlatformString)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DefaultDeployPlatform != NAME_None)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"Version\", Version)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"Id\", Id.ToString())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"Name\", Name)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"Description\", Description)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"BuildConfiguration\", (int32)BuildConfiguration)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"ProjectSpecified\", ProjectSpecified)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"ShareableProjectPath\", ShareableProjectPath)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"CookConfiguration\", (int32)CookConfiguration)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"CookIncremental\", CookIncremental)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"CookOptions\", CookOptions)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"CookMode\", CookMode)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"CookUnversioned\", CookUnversioned)"
  },
  {
    "label": "WriteArrayStart()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteArrayStart(\"CookedCultures\")"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(Value)"
  },
  {
    "label": "WriteArrayEnd()",
    "kind": "Method",
    "detail": "Function (} Writer .)",
    "insertText": "WriteArrayEnd()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CookedMaps.Num() > 0)"
  },
  {
    "label": "WriteArrayStart()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteArrayStart(\"CookedMaps\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CookedPlatforms.Num() > 0)"
  },
  {
    "label": "WriteArrayStart()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteArrayStart(\"CookedPlatforms\")"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} Writer .)",
    "insertText": "WriteValue(\"DeployStreamingServer\", DeployStreamingServer)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"DeployWithUnrealPak\", DeployWithUnrealPak)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"DeployedDeviceGroupId\", DeployedDeviceGroupId.ToString())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"DeploymentMode\", DeploymentMode)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"HideFileServerWindow\", HideFileServerWindow)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"LaunchMode\", LaunchMode)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"PackagingMode\", PackagingMode)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"PackageDir\", PackageDir)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"BuildMode\", BuildMode)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"ForceClose\", ForceClose)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"Timeout\", (int32)Timeout)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"Compressed\", Compressed)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"EncryptIniFiles\", EncryptIniFiles)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"ForDistribution\", ForDistribution)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"DeployPlatform\", DefaultDeployPlatform.ToString())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"SkipCookingEditorContent\", bSkipCookingEditorContent)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"DeployIncremental\", DeployIncremental)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"GeneratePatch\", GeneratePatch)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"AddPatchLevel\", AddPatchLevel)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"StageBaseReleasePaks\", StageBaseReleasePaks)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"DLCIncludeEngineContent\", DLCIncludeEngineContent)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"CreateReleaseVersion\", CreateReleaseVersion)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"CreateReleaseVersionName\", CreateReleaseVersionName)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"BasedOnReleaseVersionName\", BasedOnReleaseVersionName)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"ReferenceContainerGlobalFileName\", ReferenceContainerGlobalFileName)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"ReferenceContainerCryptoKeysFileName\", ReferenceContainerCryptoKeysFileName)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"OriginalReleaseVersionName\", OriginalReleaseVersionName)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"CreateDLC\", CreateDLC)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"DLCName\", DLCName)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"GenerateChunks\", bGenerateChunks)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"GenerateHttpChunkData\", bGenerateHttpChunkData)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"HttpChunkDataDirectory\", HttpChunkDataDirectory)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"HttpChunkDataReleaseName\", HttpChunkDataReleaseName)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"Archive\", bArchive)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"ArchiveDirectory\", ArchiveDir)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"AdditionalCommandLineParameters\", AdditionalCommandLineParameters)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"IncludePrerequisites\", IncludePrerequisites)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"UseIoStore\", bUseIoStore)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"MakeBinaryConfig\", bMakeBinaryConfig)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"BuildTargetSpecified\", BuildTargetSpecified)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"BuildTargetName\", BuildTargetName)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (DefaultLaunchRole ->)",
    "insertText": "Save(Writer, TEXT(\"DefaultRole\"))"
  },
  {
    "label": "WriteArrayStart()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteArrayStart(\"LaunchRoles\")"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (Value ->)",
    "insertText": "Save(Writer)"
  },
  {
    "label": "SaveUATParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SaveUATParams(Writer)"
  },
  {
    "label": "SaveUATParams()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SaveUATParams(TJsonWriter<>& Writer)"
  },
  {
    "label": "WriteArrayStart()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteArrayStart(\"scripts\")"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"script\", TEXT(\"BuildCookRun\"))"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"project\", ProjectSpecified ? ShareableProjectPath : \"\")"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"noP4\", true)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"nocompile\", !IsBuildingUAT())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"nocompileeditor\", FApp::IsEngineInstalled())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"unrealexe\", GetEditorExe())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"utf8output\", true)"
  },
  {
    "label": "WriteArrayStart()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteArrayStart(\"clientconfig\")"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(LexToString(BuildConfiguration))"
  },
  {
    "label": "WriteArrayStart()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteArrayStart(\"serverconfig\")"
  },
  {
    "label": "FindAllPlatforms()",
    "kind": "Method",
    "detail": "Function (TArray<FString> ServerPlatforms ; TArray<FString> ClientPlatforms ; FString OptionalParams ; bool ClosesAfterLaunch =)",
    "insertText": "FindAllPlatforms(ServerPlatforms, ClientPlatforms, OptionalParams)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"server\", true)"
  },
  {
    "label": "WriteArrayStart()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteArrayStart(\"serverplatform\")"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(ServerPlatforms[Idx])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ClientPlatforms.Num() > 0)"
  },
  {
    "label": "WriteArrayStart()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteArrayStart(\"platform\")"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(ClientPlatforms[Idx])"
  },
  {
    "label": "ParseCommands()",
    "kind": "Method",
    "detail": "Function (} TMap<FString,FString> OptionalCommands =)",
    "insertText": "ParseCommands(OptionalParams)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(Iter.Key(), Iter.Value())"
  },
  {
    "label": "GetDefaultLaunchRole()",
    "kind": "Method",
    "detail": "Function (} FString InitialMap =)",
    "insertText": "GetDefaultLaunchRole()->GetInitialMap()"
  },
  {
    "label": "GetCookedMaps()",
    "kind": "Method",
    "detail": "Function (InitialMap =)",
    "insertText": "GetCookedMaps()"
  },
  {
    "label": "WriteObjectStart()",
    "kind": "Method",
    "detail": "Function (} Writer .)",
    "insertText": "WriteObjectStart(\"cmdline\")"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"\", InitialMap)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"messaging\", true)"
  },
  {
    "label": "ITargetDeviceServicesModule()",
    "kind": "Method",
    "detail": "Function (ITargetDeviceServicesModule& DeviceServiceModule = FModuleManager::LoadModuleChecked<)",
    "insertText": "ITargetDeviceServicesModule(TEXT(\"TargetDeviceServices\"))"
  },
  {
    "label": "GetDeployedDeviceGroup()",
    "kind": "Method",
    "detail": "Function (ILauncherDeviceGroupPtr DeviceGroup =)",
    "insertText": "GetDeployedDeviceGroup()"
  },
  {
    "label": "GetDefaultLaunchRole()",
    "kind": "Method",
    "detail": "Function (TMap<FString,FString> RoleCommands ; FString CommandLine =)",
    "insertText": "GetDefaultLaunchRole()->GetUATCommandLine()"
  },
  {
    "label": "ParseCommands()",
    "kind": "Method",
    "detail": "Function (TMap<FString,FString> Commands =)",
    "insertText": "ParseCommands(CommandLine)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (RoleCommands .)",
    "insertText": "Append(Commands)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DeviceGroup.IsValid())"
  },
  {
    "label": "GetDeviceIDs()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>& Devices = DeviceGroup ->)",
    "insertText": "GetDeviceIDs()"
  },
  {
    "label": "WriteArrayStart()",
    "kind": "Method",
    "detail": "Function (bool bUseVsync = false ; Writer .)",
    "insertText": "WriteArrayStart(\"device\")"
  },
  {
    "label": "FindProxyDeviceForTargetDevice()",
    "kind": "Method",
    "detail": "Function (const FString& DeviceId = Devices [ DeviceIndex ] ; TSharedPtr<ITargetDeviceProxy> DeviceProxy = DeviceProxyManager ->)",
    "insertText": "FindProxyDeviceForTargetDevice(DeviceId)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(DeviceId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<ILauncherProfileLaunchRolePtr> Roles ;)",
    "insertText": "if(GetLaunchRolesFor(DeviceId, Roles) > 0)"
  },
  {
    "label": "GetUATCommandLine()",
    "kind": "Method",
    "detail": "Function (bUseVsync = true ; } CommandLine = Roles [ RoleIndex ] ->)",
    "insertText": "GetUATCommandLine()"
  },
  {
    "label": "SessionId()",
    "kind": "Method",
    "detail": "Function (} FGuid)",
    "insertText": "SessionId(FGuid::NewGuid())"
  },
  {
    "label": "WriteObjectStart()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteObjectStart(\"addcmdline\")"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"sessionid\", SessionId.ToString())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"sessionowner\", FPlatformProcess::UserName(true))"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"sessionname\", GetName())"
  },
  {
    "label": "WriteArrayStart()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteArrayStart(\"map\")"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(CookedMapsArray[MapIndex])"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} } else { Writer .)",
    "insertText": "WriteValue(InitialMap)"
  },
  {
    "label": "GetPackageDirectory()",
    "kind": "Method",
    "detail": "Function (auto PackageDirectory =)",
    "insertText": "GetPackageDirectory()"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"stagingdirectory\", PackageDirectory)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} Writer .)",
    "insertText": "WriteValue(\"build\", ShouldBuild())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"unversionedcookedcontent\", IsCookingUnversioned())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"pak\", IsPackingWithUnrealPak())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"createreleaseversion\", GetCreateReleaseVersionName())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsCreatingDLC())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"dlcname\", GetDLCName())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} Writer .)",
    "insertText": "WriteValue(\"generatepatch\", IsGeneratingPatch())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"basedonreleaseversion\", GetBasedOnReleaseVersionName())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"stagebasereleasepaks\", ShouldStageBaseReleasePaks())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(GetOriginalReleaseVersionName().IsEmpty() == false)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"originalreleaseversion\", GetOriginalReleaseVersionName())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(IsGeneratingPatch())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"addpatchlevel\", ShouldAddPatchLevel())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} Writer .)",
    "insertText": "WriteValue(\"manifests\", IsGeneratingChunks())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"createchunkinstall\", true)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"chunkinstalldirectory\", GetHttpChunkDataDirectory())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"chunkinstallversion\", GetHttpChunkDataReleaseName())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsArchiving())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"archive\", true)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"archivedirectory\", GetArchiveDirectory())"
  },
  {
    "label": "ParseCommands()",
    "kind": "Method",
    "detail": "Function (} TMap<FString,FString> CookCommands =)",
    "insertText": "ParseCommands(GetCookOptions())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} } break ; case ELauncherProfileCookModes::OnTheFly : { Writer .)",
    "insertText": "WriteValue(\"cookonthefly\", true)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"nokill\", true)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} } break ; case ELauncherProfileCookModes::OnTheFlyInEditor : Writer .)",
    "insertText": "WriteValue(\"skipcook\", true)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (break ; } Writer .)",
    "insertText": "WriteValue(\"iterativecooking\", IsCookingIncrementally())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"iteratesharedcookedbuild\", IsIterateSharedCookedBuild())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"skipcookingeditorcontent\", GetSkipCookingEditorContent())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"compressed\", IsCompressed())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"EncryptIniFiles\", IsEncryptingIniFiles())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"ForDistribution\", IsForDistribution())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bIsStaging = false ;)",
    "insertText": "if(GetDeploymentMode() != ELauncherProfileDeploymentModes::DoNotDeploy)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"deploy\", true)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} break ; case ELauncherProfileDeploymentModes::CopyToDevice : { Writer .)",
    "insertText": "WriteValue(\"iterativedeploy\", IsDeployingIncrementally())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} case ELauncherProfileDeploymentModes::FileServer : { Writer .)",
    "insertText": "WriteValue(\"stage\", true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} break ; })",
    "insertText": "if(GetLaunchMode() != ELauncherProfileLaunchModes::DoNotLaunch)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"run\", true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(GetPackagingMode() == ELauncherProfilePackagingModes::Locally)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (bIsStaging = true ; Writer .)",
    "insertText": "WriteValue(\"package\", true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(bIsStaging && GetReferenceContainerGlobalFileName().Len())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"ReferenceContainerGlobalFileName\", GetReferenceContainerGlobalFileName())"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteValue(\"ReferenceContainerCryptoKeys\", GetReferenceContainerCryptoKeysFileName())"
  },
  {
    "label": "ParseCommands()",
    "kind": "Method",
    "detail": "Function (} TMap<FString,FString>)",
    "insertText": "ParseCommands(FString CommandLine)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (TMap<FString,FString> RoleCommands ; FString Left ; FString Right ;)",
    "insertText": "while(CommandLine.Split(TEXT(\" \"), &Left, &Right))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString Key ; FString Value ;)",
    "insertText": "if(!Left.Split(TEXT(\"=\"), &Key, &Value))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Key = Left ; Value =)",
    "insertText": "TEXT(\"true\")"
  },
  {
    "label": "RemoveFromStart()",
    "kind": "Method",
    "detail": "Function (} Key .)",
    "insertText": "RemoveFromStart(TEXT(\"-\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RoleCommands .)",
    "insertText": "Add(Key, Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} CommandLine = Right ; })",
    "insertText": "if(CommandLine.Len() > 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RoleCommands .)",
    "insertText": "Add(Left, Right)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<FString> Platforms ;)",
    "insertText": "if(GetCookMode() == ELauncherProfileCookModes::ByTheBook)"
  },
  {
    "label": "GetCookedPlatforms()",
    "kind": "Method",
    "detail": "Function (Platforms =)",
    "insertText": "GetCookedPlatforms()"
  },
  {
    "label": "GetTargetDeviceVariant()",
    "kind": "Method",
    "detail": "Function (Variant = DeviceProxy ->)",
    "insertText": "GetTargetDeviceVariant(DeviceId)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Platforms .)",
    "insertText": "AddUnique(DeviceProxy->GetTargetPlatformName(Variant))"
  },
  {
    "label": "FindAllPlatforms()",
    "kind": "Method",
    "detail": "Function (} } } return Platforms ; } bool)",
    "insertText": "FindAllPlatforms(TArray<FString>& ServerPlatforms, TArray<FString>& ClientPlatforms, FString& OptionalParams)"
  },
  {
    "label": "FindPlatformInfo()",
    "kind": "Method",
    "detail": "Function (const PlatformInfo::FTargetPlatformInfo* PlatformInfo =)",
    "insertText": "FindPlatformInfo(FName(*InPlatforms[PlatformIndex]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OptionalParams + = PlatformInfo -> UATCommandLine ; } bUATClosesAfterLaunch | = PlatformInfo -> DataDrivenPlatformInfo -> bUATClosesAfterLaunch ; })",
    "insertText": "if(OptionalParams.Contains(TEXT(\"-client\")) && OptionalParams.Contains(TEXT(\"-noclient\")))"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (OptionalParams = OptionalParams .)",
    "insertText": "Replace(TEXT(\"-noclient\"), TEXT(\"\"))"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (Name = Object .)",
    "insertText": "GetStringField(TEXT(\"Name\"))"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (Description = Object .)",
    "insertText": "GetStringField(TEXT(\"Description\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (ProjectSpecified = Object .)",
    "insertText": "GetBoolField(TEXT(\"ProjectSpecified\"))"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (ShareableProjectPath = Object .)",
    "insertText": "GetStringField(TEXT(\"ShareableProjectPath\"))"
  },
  {
    "label": "CookConfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CookConfiguration(EBuildConfiguration)((int32)Object.GetNumberField(TEXT(\"CookConfiguration\")))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (CookIncremental = Object .)",
    "insertText": "GetBoolField(TEXT(\"CookIncremental\"))"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (CookOptions = Object .)",
    "insertText": "GetStringField(TEXT(\"CookOptions\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (CookUnversioned = Object .)",
    "insertText": "GetBoolField(TEXT(\"CookUnversioned\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FJsonValue>>* Cultures = NULL ;)",
    "insertText": "if(Object.TryGetArrayField(TEXT(\"CookedCultures\"), Cultures))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CookedCultures .)",
    "insertText": "Add(Value->AsString())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FJsonValue>>* Maps = NULL ;)",
    "insertText": "if(Object.TryGetArrayField(TEXT(\"CookedMaps\"), Maps))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FJsonValue>>* Platforms = NULL ;)",
    "insertText": "if(Object.TryGetArrayField(TEXT(\"CookedPlatforms\"), Platforms))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (} } DeployStreamingServer = Object .)",
    "insertText": "GetBoolField(TEXT(\"DeployStreamingServer\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (DeployWithUnrealPak = Object .)",
    "insertText": "GetBoolField(TEXT(\"DeployWithUnrealPak\"))"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(Object.GetStringField(TEXT(\"DeployedDeviceGroupId\")), DeployedDeviceGroupId)"
  },
  {
    "label": "DeploymentMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeploymentMode(TEnumAsByte<ELauncherProfileDeploymentModes::Type>)((int32)Object.GetNumberField(TEXT(\"DeploymentMode\")))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (HideFileServerWindow = Object .)",
    "insertText": "GetBoolField(TEXT(\"HideFileServerWindow\"))"
  },
  {
    "label": "LaunchMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchMode(TEnumAsByte<ELauncherProfileLaunchModes::Type>)((int32)Object.GetNumberField(TEXT(\"LaunchMode\")))"
  },
  {
    "label": "PackagingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PackagingMode(TEnumAsByte<ELauncherProfilePackagingModes::Type>)((int32)Object.GetNumberField(TEXT(\"PackagingMode\")))"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (PackageDir = Object .)",
    "insertText": "GetStringField(TEXT(\"PackageDir\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int64 BuildModeValue ;)",
    "insertText": "if(Object.TryGetNumberField(TEXT(\"BuildMode\"), BuildModeValue))"
  },
  {
    "label": "BuildMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildMode(TEnumAsByte<ELauncherProfileBuildModes::Type>)(int32)"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (} else { BuildMode = Object .)",
    "insertText": "GetBoolField(TEXT(\"BuildGame\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (} ForceClose = Object .)",
    "insertText": "GetBoolField(TEXT(\"ForceClose\"))"
  },
  {
    "label": "Timeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Timeout(uint32)Object.GetNumberField(TEXT(\"Timeout\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (Compressed = Object .)",
    "insertText": "GetBoolField(TEXT(\"Compressed\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (EncryptIniFiles = Object .)",
    "insertText": "GetBoolField(TEXT(\"EncryptIniFiles\"))"
  },
  {
    "label": "DefaultDeployPlatform()",
    "kind": "Method",
    "detail": "Function (} else { EncryptIniFiles = false ; ForDistribution = false ; })",
    "insertText": "DefaultDeployPlatform(Object.GetStringField(TEXT(\"DeployPlatform\")))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (bSkipCookingEditorContent = Object .)",
    "insertText": "GetBoolField(TEXT(\"SkipCookingEditorContent\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (DeployIncremental = Object .)",
    "insertText": "GetBoolField(TEXT(\"DeployIncremental\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (GeneratePatch = Object .)",
    "insertText": "GetBoolField(TEXT(\"GeneratePatch\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (AddPatchLevel = Object .)",
    "insertText": "GetBoolField(TEXT(\"AddPatchLevel\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (StageBaseReleasePaks = Object .)",
    "insertText": "GetBoolField(TEXT(\"StageBaseReleasePaks\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (} else { AddPatchLevel = false ; StageBaseReleasePaks = false ; } DLCIncludeEngineContent = Object .)",
    "insertText": "GetBoolField(TEXT(\"DLCIncludeEngineContent\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (CreateReleaseVersion = Object .)",
    "insertText": "GetBoolField(TEXT(\"CreateReleaseVersion\"))"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (CreateReleaseVersionName = Object .)",
    "insertText": "GetStringField(TEXT(\"CreateReleaseVersionName\"))"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (BasedOnReleaseVersionName = Object .)",
    "insertText": "GetStringField(TEXT(\"BasedOnReleaseVersionName\"))"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (ReferenceContainerCryptoKeysFileName = Object .)",
    "insertText": "GetStringField(TEXT(\"ReferenceContainerCryptoKeysFileName\"))"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (ReferenceContainerGlobalFileName = Object .)",
    "insertText": "GetStringField(TEXT(\"ReferenceContainerGlobalFileName\"))"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (OriginalReleaseVersionName = Object .)",
    "insertText": "GetStringField(TEXT(\"OriginalReleaseVersionName\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (} CreateDLC = Object .)",
    "insertText": "GetBoolField(TEXT(\"CreateDLC\"))"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (DLCName = Object .)",
    "insertText": "GetStringField(TEXT(\"DLCName\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (bGenerateChunks = Object .)",
    "insertText": "GetBoolField(TEXT(\"GenerateChunks\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (bGenerateHttpChunkData = Object .)",
    "insertText": "GetBoolField(TEXT(\"GenerateHttpChunkData\"))"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (HttpChunkDataDirectory = Object .)",
    "insertText": "GetStringField(TEXT(\"HttpChunkDataDirectory\"))"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (HttpChunkDataReleaseName = Object .)",
    "insertText": "GetStringField(TEXT(\"HttpChunkDataReleaseName\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (bArchive = Object .)",
    "insertText": "GetBoolField(TEXT(\"Archive\"))"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (ArchiveDir = Object .)",
    "insertText": "GetStringField(TEXT(\"ArchiveDirectory\"))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} else { bArchive = false ; ArchiveDir =)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (AdditionalCommandLineParameters = Object .)",
    "insertText": "GetStringField(TEXT(\"AdditionalCommandLineParameters\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (IncludePrerequisites = Object .)",
    "insertText": "GetBoolField(TEXT(\"IncludePrerequisites\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (bUseIoStore = Object .)",
    "insertText": "GetBoolField(TEXT(\"UseIoStore\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (bMakeBinaryConfig = Object .)",
    "insertText": "GetBoolField(TEXT(\"MakeBinaryConfig\"))"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (BuildTargetSpecified = Object .)",
    "insertText": "GetBoolField(TEXT(\"BuildTargetSpecified\"))"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (BuildTargetName = Object .)",
    "insertText": "GetStringField(TEXT(\"BuildTargetName\"))"
  },
  {
    "label": "GetObjectField()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FJsonObject> Role = Object .)",
    "insertText": "GetObjectField(TEXT(\"DefaultRole\"))"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (DefaultLaunchRole ->)",
    "insertText": "Load(*(Role.Get()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FJsonValue>>* Roles = NULL ;)",
    "insertText": "if(Object.TryGetArrayField(TEXT(\"LaunchRoles\"), Roles))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LaunchRoles .)",
    "insertText": "Add(MakeShareable(new FLauncherProfileLaunchRole(*(Value->AsObject().Get()))))"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (ProjectSpecified = false ; AdditionalCommandLineParameters =)",
    "insertText": "FString()"
  },
  {
    "label": "GetProjectFilePath()",
    "kind": "Method",
    "detail": "Function (FullProjectPath =)",
    "insertText": "GetProjectFilePath()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FGameProjectHelper::IsGameAvailable(FApp::GetProjectName()))"
  },
  {
    "label": "RootDir()",
    "kind": "Method",
    "detail": "Function (FullProjectPath =)",
    "insertText": "RootDir() / FApp::GetProjectName() / FApp::GetProjectName() + TEXT(\".uproject\")"
  },
  {
    "label": "MakePathRelativeTo()",
    "kind": "Method",
    "detail": "Function (} FString RelativeProjectPath = FullProjectPath ; bool bRelative =)",
    "insertText": "MakePathRelativeTo(RelativeProjectPath, *FPaths::RootDir())"
  },
  {
    "label": "bRelative()",
    "kind": "Method",
    "detail": "Function (bool bIsUnderUERoot =)",
    "insertText": "bRelative(RelativeProjectPath.StartsWith(FString(\"../\"), ESearchCase::CaseSensitive))"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (ShareableProjectPath = RelativeProjectPath ; } else { ShareableProjectPath = FullProjectPath ; } ProjectSpecified = ! FullProjectPath .)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (BuildConfiguration = EBuildConfiguration::Development ; FInternationalization& I18N =)",
    "insertText": "Get()"
  },
  {
    "label": "GetEngineIsPromotedBuild()",
    "kind": "Method",
    "detail": "Function (BuildMode = ELauncherProfileBuildModes::Auto ; BuildUAT = !)",
    "insertText": "GetEngineIsPromotedBuild() && !FApp::IsEngineInstalled()"
  },
  {
    "label": "GetBuildConfiguration()",
    "kind": "Method",
    "detail": "Function (BuildTargetSpecified = false ; CookConfiguration =)",
    "insertText": "GetBuildConfiguration()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CookedCultures .)",
    "insertText": "Add(I18N.GetCurrentCulture()->GetName())"
  },
  {
    "label": "SetCommandLine()",
    "kind": "Method",
    "detail": "Function (DefaultDeployPlatform = NAME_None ; LaunchMode = ELauncherProfileLaunchModes::DefaultRole ; DefaultLaunchRole ->)",
    "insertText": "SetCommandLine(FString())"
  },
  {
    "label": "SetInitialCulture()",
    "kind": "Method",
    "detail": "Function (DefaultLaunchRole ->)",
    "insertText": "SetInitialCulture(I18N.GetCurrentCulture()->GetName())"
  },
  {
    "label": "SetInitialMap()",
    "kind": "Method",
    "detail": "Function (DefaultLaunchRole ->)",
    "insertText": "SetInitialMap(FString())"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (DefaultLaunchRole ->)",
    "insertText": "SetName(TEXT(\"Default Role\"))"
  },
  {
    "label": "SetInstanceType()",
    "kind": "Method",
    "detail": "Function (DefaultLaunchRole ->)",
    "insertText": "SetInstanceType(ELauncherProfileRoleInstanceTypes::StandaloneClient)"
  },
  {
    "label": "SetVsyncEnabled()",
    "kind": "Method",
    "detail": "Function (DefaultLaunchRole ->)",
    "insertText": "SetVsyncEnabled(false)"
  },
  {
    "label": "ILauncherServicesModule()",
    "kind": "Method",
    "detail": "Function (PackagingMode = ELauncherProfilePackagingModes::DoNotPackage ; ILauncherServicesModule& LauncherServicesModule = FModuleManager::GetModuleChecked<)",
    "insertText": "ILauncherServicesModule(TEXT(\"LauncherServices\"))"
  },
  {
    "label": "GetExecutableForCommandlets()",
    "kind": "Method",
    "detail": "Function (EditorExe = LauncherServicesModule .)",
    "insertText": "GetExecutableForCommandlets()"
  },
  {
    "label": "SetBuildMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBuildMode(ELauncherProfileBuildModes::Type Mode)"
  },
  {
    "label": "SetBuildUAT()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetBuildUAT(bool Build)"
  },
  {
    "label": "SetAdditionalCommandLineParameters()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetAdditionalCommandLineParameters(const FString& Params)"
  },
  {
    "label": "SetBuildConfiguration()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetBuildConfiguration(EBuildConfiguration Configuration)"
  },
  {
    "label": "SetBuildTargetSpecified()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetBuildTargetSpecified(bool Specified)"
  },
  {
    "label": "FallbackBuildTargetUpdated()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FallbackBuildTargetUpdated()"
  },
  {
    "label": "SetBuildTarget()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetBuildTarget(const FString& TargetName)"
  },
  {
    "label": "SetCookConfiguration()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetCookConfiguration(EBuildConfiguration Configuration)"
  },
  {
    "label": "SetCookMode()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetCookMode(ELauncherProfileCookModes::Type Mode)"
  },
  {
    "label": "SetCookOptions()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetCookOptions(const FString& Options)"
  },
  {
    "label": "SetSkipCookingEditorContent()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetSkipCookingEditorContent(const bool InSkipCookingEditorContent)"
  },
  {
    "label": "SetDeployWithUnrealPak()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetDeployWithUnrealPak(bool UseUnrealPak)"
  },
  {
    "label": "SetGenerateChunks()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetGenerateChunks(bool bInGenerateChunks)"
  },
  {
    "label": "SetGenerateHttpChunkData()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetGenerateHttpChunkData(bool bInGenerateHttpChunkData)"
  },
  {
    "label": "SetHttpChunkDataDirectory()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetHttpChunkDataDirectory(const FString& InHttpChunkDataDirectory)"
  },
  {
    "label": "SetHttpChunkDataReleaseName()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetHttpChunkDataReleaseName(const FString& InHttpChunkDataReleaseName)"
  },
  {
    "label": "SetDeployedDeviceGroup()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetDeployedDeviceGroup(const ILauncherDeviceGroupPtr& DeviceGroup)"
  },
  {
    "label": "OnDeviceAdded()",
    "kind": "Method",
    "detail": "Function (OnLauncherDeviceGroupDeviceAddedDelegateHandle = DeployedDeviceGroup ->)",
    "insertText": "OnDeviceAdded().AddRaw(this, &FLauncherProfile::OnLauncherDeviceGroupDeviceAdded)"
  },
  {
    "label": "OnDeviceRemoved()",
    "kind": "Method",
    "detail": "Function (OnLauncherDeviceGroupDeviceRemoveDelegateHandle = DeployedDeviceGroup ->)",
    "insertText": "OnDeviceRemoved().AddRaw(this, &FLauncherProfile::OnLauncherDeviceGroupDeviceRemove)"
  },
  {
    "label": "OnIsCookFinished()",
    "kind": "Method",
    "detail": "Function (} FIsCookFinishedDelegate&)",
    "insertText": "OnIsCookFinished()"
  },
  {
    "label": "SetForceClose()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetForceClose(bool Close)"
  },
  {
    "label": "SetHideFileServerWindow()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetHideFileServerWindow(bool Hide)"
  },
  {
    "label": "SetIncrementalCooking()",
    "kind": "Method",
    "detail": "Function (HideFileServerWindow = Hide ; } void)",
    "insertText": "SetIncrementalCooking(bool Incremental)"
  },
  {
    "label": "SetIterateSharedCookedBuild()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetIterateSharedCookedBuild(bool SharedCookedBuild)"
  },
  {
    "label": "SetCompressed()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetCompressed(bool Enabled)"
  },
  {
    "label": "SetForDistribution()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetForDistribution(bool Enabled)"
  },
  {
    "label": "SetEncryptingIniFiles()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetEncryptingIniFiles(bool Enabled)"
  },
  {
    "label": "SetIncrementalDeploying()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetIncrementalDeploying(bool Incremental)"
  },
  {
    "label": "SetLaunchMode()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetLaunchMode(ELauncherProfileLaunchModes::Type Mode)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetName(const FString& NewName)"
  },
  {
    "label": "SetDescription()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetDescription(const FString& NewDescription)"
  },
  {
    "label": "SetNotForLicensees()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetNotForLicensees()"
  },
  {
    "label": "SetPackagingMode()",
    "kind": "Method",
    "detail": "Function (bNotForLicensees = true ; } void)",
    "insertText": "SetPackagingMode(ELauncherProfilePackagingModes::Type Mode)"
  },
  {
    "label": "SetPackageDirectory()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetPackageDirectory(const FString& Dir)"
  },
  {
    "label": "SetArchive()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetArchive(bool bInArchive)"
  },
  {
    "label": "SetArchiveDirectory()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetArchiveDirectory(const FString& Dir)"
  },
  {
    "label": "SetProjectSpecified()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetProjectSpecified(bool Specified)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (ProjectChangedDelegate .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "FallbackProjectUpdated()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FallbackProjectUpdated()"
  },
  {
    "label": "SetProjectPath()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetProjectPath(const FString& Path)"
  },
  {
    "label": "ConvertRelativePathToFull()",
    "kind": "Method",
    "detail": "Function (FullProjectPath = Path ; } else { FullProjectPath =)",
    "insertText": "ConvertRelativePathToFull(Path)"
  },
  {
    "label": "SetStreamingFileServer()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetStreamingFileServer(bool Streaming)"
  },
  {
    "label": "SetIncludePrerequisites()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetIncludePrerequisites(bool InValue)"
  },
  {
    "label": "SetTimeout()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetTimeout(uint32 InTime)"
  },
  {
    "label": "SetUnversionedCooking()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetUnversionedCooking(bool Unversioned)"
  },
  {
    "label": "SetGeneratePatch()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetGeneratePatch(bool InGeneratePatch)"
  },
  {
    "label": "SetAddPatchLevel()",
    "kind": "Method",
    "detail": "Function (GeneratePatch = InGeneratePatch ; } void)",
    "insertText": "SetAddPatchLevel(bool InAddPatchLevel)"
  },
  {
    "label": "SetStageBaseReleasePaks()",
    "kind": "Method",
    "detail": "Function (AddPatchLevel = InAddPatchLevel ; } void)",
    "insertText": "SetStageBaseReleasePaks(bool InStageBaseReleasePaks)"
  },
  {
    "label": "SupportsEngineMaps()",
    "kind": "Method",
    "detail": "Function (StageBaseReleasePaks = InStageBaseReleasePaks ; } bool)",
    "insertText": "SupportsEngineMaps()"
  },
  {
    "label": "GetEditorExe()",
    "kind": "Method",
    "detail": "Function (EditorExe = InEditorExe ; } FString)",
    "insertText": "GetEditorExe()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bUseIoStore = bInUseIoStore ;)",
    "insertText": "if(bUseIoStore)"
  },
  {
    "label": "SetDeployWithUnrealPak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeployWithUnrealPak(true)"
  },
  {
    "label": "IsUsingIoStore()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsUsingIoStore()"
  },
  {
    "label": "IsUsingZenStore()",
    "kind": "Method",
    "detail": "Function (bUseZenStore = bInUseZenStore ; } bool)",
    "insertText": "IsUsingZenStore()"
  },
  {
    "label": "ShouldUpdateDeviceFlash()",
    "kind": "Method",
    "detail": "Function (bShouldUpdateFlash = bInShouldUpdateFlash ; } bool)",
    "insertText": "ShouldUpdateDeviceFlash()"
  },
  {
    "label": "IsDeviceASimulator()",
    "kind": "Method",
    "detail": "Function (bIsDeviceASimulator = bInIsDeviceASimualtor ; } bool)",
    "insertText": "IsDeviceASimulator()"
  },
  {
    "label": "MakeBinaryConfig()",
    "kind": "Method",
    "detail": "Function (bMakeBinaryConfig = bInMakeBinaryConfig ; } bool)",
    "insertText": "MakeBinaryConfig()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::NoBuildConfigurationSelected)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(GetProjectPath().IsEmpty())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::NoProjectSelected)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((CookMode == ELauncherProfileCookModes::ByTheBook) && (CookedPlatforms.Num() == 0))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::NoPlatformSelected)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((CookMode == ELauncherProfileCookModes::ByTheBook) && (CookedCultures.Num() == 0))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::NoCookedCulturesSelected)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((DeploymentMode == ELauncherProfileDeploymentModes::CopyToDevice) && !DeployedDeviceGroupId.IsValid())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::DeployedDeviceGroupRequired)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((DeploymentMode == ELauncherProfileDeploymentModes::CopyToDevice) && ((CookMode != ELauncherProfileCookModes::ByTheBook)&&(CookMode!=ELauncherProfileCookModes::ByTheBookInEditor)))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::CopyToDeviceRequiresCookByTheBook)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((DeploymentMode == ELauncherProfileDeploymentModes::CopyToDevice) && (PackagingMode != ELauncherProfilePackagingModes::DoNotPackage))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::CopyToDeviceRequiresNoPackaging)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((DeploymentMode == ELauncherProfileDeploymentModes::CopyRepository) && (PackageDir == TEXT(\"\")))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::NoPackageDirectorySpecified)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(LaunchMode == ELauncherProfileLaunchModes::CustomRoles)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::CustomRolesNotSupportedYet)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::NoLaunchRoleDeviceAssigned)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } } })",
    "insertText": "if(CookUnversioned && CookIncremental && ((CookMode == ELauncherProfileCookModes::ByTheBook) || (CookMode == ELauncherProfileCookModes::ByTheBookInEditor)))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::UnversionedAndIncrimental)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((IsGeneratingPatch() || ShouldAddPatchLevel()) && (CookMode != ELauncherProfileCookModes::ByTheBook))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::GeneratingPatchesCanOnlyRunFromByTheBookCookMode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ShouldAddPatchLevel() && !IsGeneratingPatch())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::GeneratingMultiLevelPatchesRequiresGeneratePatch)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ShouldStageBaseReleasePaks() && BasedOnReleaseVersionName.IsEmpty())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::StagingBaseReleasePaksWithoutABaseReleaseVersion)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsGeneratingChunks() && (CookMode != ELauncherProfileCookModes::ByTheBook))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::GeneratingChunksRequiresCookByTheBook)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsGeneratingChunks() && !IsPackingWithUnrealPak())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::GeneratingChunksRequiresUnrealPak)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsGenerateHttpChunkData() && !IsGeneratingChunks() && !IsCreatingDLC())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::GeneratingHttpChunkDataRequiresGeneratingChunks)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsGenerateHttpChunkData() && (GetHttpChunkDataReleaseName().IsEmpty() || !FPaths::DirectoryExists(*GetHttpChunkDataDirectory())))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::GeneratingHttpChunkDataRequiresValidDirectoryAndName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(LaunchMode != ELauncherProfileLaunchModes::DoNotLaunch && CookMode != ELauncherProfileCookModes::OnTheFly && CookMode != ELauncherProfileCookModes::OnTheFlyInEditor)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((CookMode == ELauncherProfileCookModes::OnTheFly) || (CookMode == ELauncherProfileCookModes::OnTheFlyInEditor))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::ShippingDoesntSupportCommandlineOptionsCantUseCookOnTheFly)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(CookMode == ELauncherProfileCookModes::OnTheFly)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::CookOnTheFlyDoesntSupportServer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(bArchive && ArchiveDir.IsEmpty())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::NoArchiveDirectorySpecified)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bUseIoStore && !DeployWithUnrealPak)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::IoStoreRequiresPakFiles)"
  },
  {
    "label": "ValidateBuildTarget()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValidateBuildTarget()"
  },
  {
    "label": "ValidatePlatformSDKs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidatePlatformSDKs()"
  },
  {
    "label": "ValidateDeviceStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateDeviceStatus()"
  },
  {
    "label": "ValidatePlatformSDKs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidatePlatformSDKs(void)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Remove(ELauncherProfileValidationErrors::NoPlatformSDKInstalled)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bProjectHasCode = false ; FString NotInstalledDocLink ;)",
    "insertText": "for(auto PlatformName : CookedPlatforms)"
  },
  {
    "label": "GetTargetPlatformManager()",
    "kind": "Method",
    "detail": "Function (const ITargetPlatform* Platform =)",
    "insertText": "GetTargetPlatformManager()->FindTargetPlatform(PlatformName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::NoPlatformSDKInstalled)"
  },
  {
    "label": "BroadcastLauncherServicesSDKNotInstalled()",
    "kind": "Method",
    "detail": "Function (LauncherServicesModule .)",
    "insertText": "BroadcastLauncherServicesSDKNotInstalled(PlatformName, NotInstalledDocLink)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { InvalidPlatform = PlatformName ; } return ; } } })",
    "insertText": "if((DeploymentMode != ELauncherProfileDeploymentModes::DoNotDeploy) && DeployedDeviceGroup.IsValid())"
  },
  {
    "label": "ITargetDeviceServicesModule()",
    "kind": "Method",
    "detail": "Function (ITargetDeviceServicesModule* TargetDeviceServicesModule = static_cast<)",
    "insertText": "ITargetDeviceServicesModule(FModuleManager::Get().LoadModule(TEXT(\"TargetDeviceServices\")))"
  },
  {
    "label": "GetDeviceProxyManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITargetDeviceProxy> DeviceProxy = TargetDeviceServicesModule ->)",
    "insertText": "GetDeviceProxyManager()->FindProxy(DeviceId)"
  },
  {
    "label": "GetTargetPlatformName()",
    "kind": "Method",
    "detail": "Function (FString const& PlatformName = DeviceProxy ->)",
    "insertText": "GetTargetPlatformName(DeviceProxy->GetTargetDeviceVariant(DeviceId))"
  },
  {
    "label": "RemoveDevice()",
    "kind": "Method",
    "detail": "Function (DeployedDeviceGroup ->)",
    "insertText": "RemoveDevice(DeviceId)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Remove(ELauncherProfileValidationErrors::LaunchDeviceIsUnauthorized)"
  },
  {
    "label": "GetDeviceProxyManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITargetDeviceProxy> DeviceProxy = TargetDeviceServicesModule ->)",
    "insertText": "GetDeviceProxyManager()->FindProxyDeviceForTargetDevice(DeviceId)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::LaunchDeviceIsUnauthorized)"
  },
  {
    "label": "GetBuildTarget()",
    "kind": "Method",
    "detail": "Function (bool bBuildTargetIsRequired = false ; bool bBuildTargetIsSelected = false ; FString BuildTarget =)",
    "insertText": "GetBuildTarget()"
  },
  {
    "label": "GetCookTargetTypes()",
    "kind": "Method",
    "detail": "Function (TSet<EBuildTargetType> CookTargetTypes =)",
    "insertText": "GetCookTargetTypes()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CookTargetTypes .)",
    "insertText": "Add(EBuildTargetType::Game)"
  },
  {
    "label": "HasProjectSpecified()",
    "kind": "Method",
    "detail": "Function (} const TArray<FString>& BuildTargetNames =)",
    "insertText": "HasProjectSpecified() ? ExplictBuildTargetNames : LauncherProfileManager->GetAllExplicitBuildTargetNames()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const TArray<FTargetInfo>& Targets =)",
    "insertText": "Get()->GetTargetsForProject(GetProjectPath())"
  },
  {
    "label": "bSupportsDefaultBuildTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bSupportsDefaultBuildTarget(Target.Type != EBuildTargetType::Program)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bBuildTargetIsRequired = true ; break ; } } else {)",
    "insertText": "if(Target.Name == BuildTarget)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bBuildTargetIsSelected = true ; break ; } } } })",
    "insertText": "if(!BuildTarget.IsEmpty() && !bBuildTargetIsSelected)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::BuildTargetCookVariantMismatch)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bBuildTargetIsRequired)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::BuildTargetIsRequired)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { ValidationErrors .)",
    "insertText": "Add(ELauncherProfileValidationErrors::FallbackBuildTargetIsRequired)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<FString> LatestExplicitBuildTargetNames ;)",
    "insertText": "if(HasProjectSpecified())"
  },
  {
    "label": "GetExplicitBuildTargetsForProject()",
    "kind": "Method",
    "detail": "Function (LatestExplicitBuildTargetNames =)",
    "insertText": "GetExplicitBuildTargetsForProject(GetProjectPath(), &CookTargetTypes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ExplictBuildTargetNames != LatestExplicitBuildTargetNames)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TSet<EBuildTargetType> CookTargetTypes ;)",
    "insertText": "for(const FString& Variant : GetCookedPlatforms())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CookTargetTypes .)",
    "insertText": "Add(EBuildTargetType::Client)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Variant.EndsWith(TEXT(\"Server\")))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CookTargetTypes .)",
    "insertText": "Add(EBuildTargetType::Server)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Variant.EndsWith(TEXT(\"Editor\")))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CookTargetTypes .)",
    "insertText": "Add(EBuildTargetType::Editor)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "MoveTemp(CookTargetTypes)"
  },
  {
    "label": "OnLauncherDeviceGroupDeviceAdded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnLauncherDeviceGroupDeviceAdded(const ILauncherDeviceGroupRef& DeviceGroup, const FString& DeviceId)"
  },
  {
    "label": "OnLauncherDeviceGroupDeviceRemove()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnLauncherDeviceGroupDeviceRemove(const ILauncherDeviceGroupRef& DeviceGroup, const FString& DeviceId)"
  },
  {
    "label": "OnSelectedProjectChanged()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnSelectedProjectChanged()"
  }
]