[
  {
    "label": "SimulatedNetwork",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimulatedNetwork"
  },
  {
    "label": "PacketInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketInfo"
  },
  {
    "label": "ConfigState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConfigState"
  },
  {
    "label": "SimulatedNetwork()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_SIMULATED_NETWORK_H_ # define CALL_SIMULATED_NETWORK_H_ # include<stdint . h> # include<deque> # include<queue> # include<vector> # include \" absl / types / optional . h \" # include \" api / sequence_checker . h \" # include \" api / test / simulated_network . h \" # include \" api / units / data_size . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / race_checker . h \" # include \" rtc_base / random . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class SimulatedNetwork : public SimulatedNetworkInterface { public : using Config = BuiltInNetworkBehaviorConfig ;)",
    "insertText": "SimulatedNetwork(Config config, uint64_t random_seed = 1)"
  },
  {
    "label": "SimulatedNetwork()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SimulatedNetwork()"
  },
  {
    "label": "SetConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConfig(const Config& config)"
  },
  {
    "label": "UpdateConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConfig(std::function<void(BuiltInNetworkBehaviorConfig*)> config_modifier)"
  },
  {
    "label": "PauseTransmissionUntil()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseTransmissionUntil(int64_t until_us)"
  },
  {
    "label": "EnqueuePacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnqueuePacket(PacketInFlightInfo packet)"
  },
  {
    "label": "DequeueDeliverablePackets()",
    "kind": "Method",
    "detail": "Function (std::vector<PacketDeliveryInfo>)",
    "insertText": "DequeueDeliverablePackets(int64_t receive_time_us)"
  },
  {
    "label": "NextDeliveryTimeUs()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "NextDeliveryTimeUs()"
  },
  {
    "label": "UpdateCapacityQueue()",
    "kind": "Method",
    "detail": "Function (private : struct PacketInfo { PacketInFlightInfo packet ; int64_t arrival_time_us ; } ; struct ConfigState { Config config ; double prob_loss_bursting ; double prob_start_bursting ; int64_t pause_transmission_until_us = 0 ; } ; void)",
    "insertText": "UpdateCapacityQueue(ConfigState state, int64_t time_now_us) RTC_RUN_ON(&process_checker_)"
  },
  {
    "label": "GetConfigState()",
    "kind": "Method",
    "detail": "Function (ConfigState)",
    "insertText": "GetConfigState()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Mutex config_lock_ ; rtc::RaceChecker process_checker_ ; std::queue<PacketInfo> capacity_link_)",
    "insertText": "RTC_GUARDED_BY(process_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (ConfigState config_state_)",
    "insertText": "RTC_GUARDED_BY(config_lock_)"
  }
]