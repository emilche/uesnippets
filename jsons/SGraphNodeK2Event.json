[
  {
    "label": "SGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPin"
  },
  {
    "label": "SNodeTitle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNodeTitle"
  },
  {
    "label": "SOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOverlay"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "SGraphNodeK2Event()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / GameViewportClient . h \" # include \" KismetNodes / SGraphNodeK2Default . h \" # include \" Layout / Visibility . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / SOverlay . h \" # include \" Widgets / SWidget . h \" class SGraphPin ; class SNodeTitle ; class SOverlay ; class SWidget ; class SGraphNodeK2Event : public SGraphNodeK2Default { public :)",
    "insertText": "SGraphNodeK2Event() : SGraphNodeK2Default(), bHasDelegateOutputPin(false)"
  },
  {
    "label": "CreateTitleWidget()",
    "kind": "Method",
    "detail": "Function (} protected : TSharedRef<SWidget>)",
    "insertText": "CreateTitleWidget(TSharedPtr<SNodeTitle> NodeTitle)"
  },
  {
    "label": "UseLowDetailNodeTitles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseLowDetailNodeTitles()"
  },
  {
    "label": "AddPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPin(const TSharedRef<SGraphPin>& PinToAdd)"
  },
  {
    "label": "SetDefaultTitleAreaWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultTitleAreaWidget(TSharedRef<SOverlay> DefaultTitleAreaWidget)"
  },
  {
    "label": "ParentUseLowDetailNodeTitles()",
    "kind": "Method",
    "detail": "Function (TitleAreaWidget = DefaultTitleAreaWidget ; } private : bool)",
    "insertText": "ParentUseLowDetailNodeTitles()"
  },
  {
    "label": "GetTitleVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetTitleVisibility()"
  }
]