[
  {
    "label": "_LIST_ENTRY",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIST_ENTRY"
  },
  {
    "label": "String",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "String"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SetVerifyOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SetVerifyOutput"
  },
  {
    "label": "DisableVerifyExceptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DisableVerifyExceptions"
  },
  {
    "label": "CONCAT2()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CLANG_UNITTESTS_WEX_ADAPTER_H # define LLVM_CLANG_UNITTESTS_WEX_ADAPTER_H # ifndef _WIN32 # include<unistd . h> # include<wchar . h> # include \" dxc / Support / WinFunctions . h \" # include \" dxc / WinAdapter . h \" # include \" gtest / gtest . h \" # define MAX_PATH 2 6 0 # define)",
    "insertText": "CONCAT2(a, b) a##b #define CONCAT1(a, b) CONCAT2(a, b) #define CONCAT(a, b) CONCAT1(a, b) #define ARG_CT(_1, _2, _3, N, ...) N #define NARG(...) ARG_CT(__VA_ARGS__, 3, 2, 1, 0) #define MACRO_N_(PREFIX, N, ...) CONCAT(PREFIX, N)(__VA_ARGS__) #define MACRO_N(PREFIX, ...) MACRO_N_(PREFIX, NARG(__VA_ARGS__), __VA_ARGS__) #define VERIFY_SUCCEEDED_1(expr) EXPECT_TRUE(SUCCEEDED(expr)) #define VERIFY_SUCCEEDED_2(expr, msg) EXPECT_TRUE(SUCCEEDED(expr)) << msg #define VERIFY_SUCCEEDED(...) MACRO_N(VERIFY_SUCCEEDED_, __VA_ARGS__) #define VERIFY_FAILED_1(expr) EXPECT_FALSE(SUCCEEDED(expr)) #define VERIFY_FAILED_2(expr, msg) EXPECT_FALSE(SUCCEEDED(expr)) << msg #define VERIFY_FAILED(...) MACRO_N(VERIFY_FAILED_, __VA_ARGS__) #define VERIFY_ARE_EQUAL_2(A, B) EXPECT_EQ(A, B) #define VERIFY_ARE_EQUAL_3(A, B, msg) EXPECT_EQ(A, B) << msg #define VERIFY_ARE_EQUAL(...) MACRO_N(VERIFY_ARE_EQUAL_, __VA_ARGS__) #define VERIFY_ARE_NOT_EQUAL_2(A, B) EXPECT_NE(A, B) #define VERIFY_ARE_NOT_EQUAL_3(A, B, msg) EXPECT_NE(A, B) << msg #define VERIFY_ARE_NOT_EQUAL(...) MACRO_N(VERIFY_ARE_NOT_EQUAL_, __VA_ARGS__) #define VERIFY_IS_TRUE_1(expr) EXPECT_TRUE(expr) #define VERIFY_IS_TRUE_2(expr, msg) EXPECT_TRUE(expr) << msg #define VERIFY_IS_TRUE(...) MACRO_N(VERIFY_IS_TRUE_, __VA_ARGS__) #define VERIFY_IS_FALSE_1(expr) EXPECT_FALSE(expr) #define VERIFY_IS_FALSE_2(expr, msg) EXPECT_FALSE(expr) << msg #define VERIFY_IS_FALSE(...) MACRO_N(VERIFY_IS_FALSE_, __VA_ARGS__) #define VERIFY_IS_NULL_1(expr) EXPECT_EQ(nullptr, (expr)) #define VERIFY_IS_NULL_2(expr, msg) EXPECT_EQ(nullptr, (expr)) << msg #define VERIFY_IS_NULL(...) MACRO_N(VERIFY_IS_NULL_, __VA_ARGS__) #define VERIFY_IS_NOT_NULL_1(expr) EXPECT_NE(nullptr, (expr)) #define VERIFY_IS_NOT_NULL_2(expr, msg) EXPECT_NE(nullptr, (expr)) << msg #define VERIFY_IS_NOT_NULL(...) MACRO_N(VERIFY_IS_NOT_NULL_, __VA_ARGS__) #define VERIFY_IS_GREATER_THAN_OR_EQUAL(greater, less) EXPECT_GE(greater, less) #define VERIFY_IS_GREATER_THAN_2(greater, less) EXPECT_GT(greater, less) #define VERIFY_IS_GREATER_THAN_3(greater, less, msg) \\ EXPECT_GT(greater, less) << msg #define VERIFY_IS_GREATER_THAN(...) \\ MACRO_N(VERIFY_IS_GREATER_THAN_, __VA_ARGS__) #define VERIFY_IS_LESS_THAN_2(greater, less) EXPECT_LT(greater, less) #define VERIFY_IS_LESS_THAN_3(greater, less, msg) \\ EXPECT_LT(greater, less) << msg #define VERIFY_IS_LESS_THAN(...) MACRO_N(VERIFY_IS_LESS_THAN_, __VA_ARGS__) #define VERIFY_WIN32_BOOL_SUCCEEDED_1(expr) EXPECT_TRUE(expr) #define VERIFY_WIN32_BOOL_SUCCEEDED_2(expr, msg) EXPECT_TRUE(expr) << msg #define VERIFY_WIN32_BOOL_SUCCEEDED(...) \\ MACRO_N(VERIFY_WIN32_BOOL_SUCCEEDED_, __VA_ARGS__) #define VERIFY_FAIL(...) ADD_FAILURE() << __VA_ARGS__ \"\" #define TEST_CLASS_SETUP(method) \\ bool method()"
  },
  {
    "label": "SetUp()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "SetUp()"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE(method())"
  },
  {
    "label": "TEST_CLASS_CLEANUP()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "TEST_CLASS_CLEANUP(method) \\ bool method()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "TearDown()"
  },
  {
    "label": "BEGIN_TEST_CLASS()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "BEGIN_TEST_CLASS(test) #define TEST_CLASS_PROPERTY(str1, str2) #define TEST_METHOD_PROPERTY(str1, str2) #define END_TEST_CLASS() #define TEST_METHOD(method) #define BEGIN_TEST_METHOD(method) #define END_TEST_METHOD() bool moduleSetup()"
  },
  {
    "label": "moduleTeardown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "moduleTeardown()"
  },
  {
    "label": "MODULE_SETUP()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "MODULE_SETUP(method) \\ bool method()"
  },
  {
    "label": "moduleSetup()",
    "kind": "Method",
    "detail": "Function (\\ bool)",
    "insertText": "moduleSetup()"
  },
  {
    "label": "MODULE_CLEANUP()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "MODULE_CLEANUP(method) \\ bool method()"
  },
  {
    "label": "ExpandEnvironmentStringsW()",
    "kind": "Method",
    "detail": "Function (} DWORD)",
    "insertText": "ExpandEnvironmentStringsW(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned i ; bool wasSlash = false ;)",
    "insertText": "for(i = 0; i < nSize && *lpSrc; i++, lpSrc++)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (wasSlash = true ; } else {* lpDst + + =* lpSrc ; wasSlash = false ; } }* lpDst = L ' \\ 0 ' ; return i ; } typedef struct _LIST_ENTRY { struct _LIST_ENTRY* Flink ; struct _LIST_ENTRY* Blink ; } LIST_ENTRY,* PLIST_ENTRY,PRLIST_ENTRY ; namespace WEX { namespace Common { class String : public std::wstring { public :)",
    "insertText": "String()"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "String(const wchar_t *S) : std::wstring(S)"
  },
  {
    "label": "GetLength()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetLength()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "CompareNoCase()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "CompareNoCase(std::wstring str)"
  },
  {
    "label": "wchar_t()",
    "kind": "Method",
    "detail": "Function (} operator const)",
    "insertText": "wchar_t()"
  },
  {
    "label": "GetBuffer()",
    "kind": "Method",
    "detail": "Function (} const wchar_t*)",
    "insertText": "GetBuffer()"
  },
  {
    "label": "va_start()",
    "kind": "Method",
    "detail": "Function (wchar_t msg [ 5 1 2 ] ; va_list args ;)",
    "insertText": "va_start(args, fmt)"
  },
  {
    "label": "vswprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vswprintf(msg, 512, fmt, args)"
  },
  {
    "label": "va_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "va_end(args)"
  },
  {
    "label": "DisableVerifyExceptions()",
    "kind": "Method",
    "detail": "Function (} } ; class DisableVerifyExceptions { public :)",
    "insertText": "DisableVerifyExceptions()"
  },
  {
    "label": "TryGetValue()",
    "kind": "Method",
    "detail": "Function (} } ; namespace RuntimeParameters { HRESULT)",
    "insertText": "TryGetValue(const wchar_t *param, Common::String &retStr)"
  },
  {
    "label": "StartGroup()",
    "kind": "Method",
    "detail": "Function (} } namespace Logging { namespace Log { void)",
    "insertText": "StartGroup(const wchar_t *name)"
  },
  {
    "label": "wprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wprintf(L\"BEGIN TEST(S): <%ls>\\n\", name)"
  },
  {
    "label": "EndGroup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndGroup(const wchar_t *name)"
  },
  {
    "label": "wprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wprintf(L\"END TEST(S): <%ls>\\n\", name)"
  },
  {
    "label": "Comment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Comment(const wchar_t *msg)"
  },
  {
    "label": "fputws()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fputws(msg, stdout)"
  },
  {
    "label": "fputwc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fputwc(L'\\n', stdout)"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Error(const wchar_t *msg)"
  },
  {
    "label": "fputws()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fputws(msg, stderr)"
  },
  {
    "label": "fputwc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fputwc(L'\\n', stderr)"
  },
  {
    "label": "ADD_FAILURE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ADD_FAILURE()"
  }
]