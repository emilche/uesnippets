[
  {
    "label": "FGeometryCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollection"
  },
  {
    "label": "FGeometryDynamicCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryDynamicCollection"
  },
  {
    "label": "FCollectionLevelSetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollectionLevelSetData"
  },
  {
    "label": "FCollectionCollisionParticleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollectionCollisionParticleData"
  },
  {
    "label": "FCollectionCollisionTypeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollectionCollisionTypeData"
  },
  {
    "label": "FSharedSimulationSizeSpecificData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedSimulationSizeSpecificData"
  },
  {
    "label": "ESimulationInitializationState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESimulationInitializationState"
  },
  {
    "label": "FSharedSimulationParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedSimulationParameters"
  },
  {
    "label": "FSimulationParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimulationParameters"
  },
  {
    "label": "FCollectionLevelSetData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" Field / FieldSystem . h \" # include \" GeometryCollection / RecordedTransformTrack . h \" # include \" GeometryCollectionSimulationTypes . h \" # include \" Chaos / ClusterCreationParameters . h \" # include \" Chaos / CollisionFilterData . h \" # include \" Chaos / PBDRigidsEvolutionFwd . h \" # include \" Chaos / PBDRigidClusteringTypes . h \" class FGeometryCollection ; class FGeometryDynamicCollection ; struct FCollectionLevelSetData {)",
    "insertText": "FCollectionLevelSetData() : MinLevelSetResolution(5) , MaxLevelSetResolution(10) , MinClusterLevelSetResolution(25) , MaxClusterLevelSetResolution(50)"
  },
  {
    "label": "FCollectionCollisionParticleData()",
    "kind": "Method",
    "detail": "Function (} int32 MinLevelSetResolution ; int32 MaxLevelSetResolution ; int32 MinClusterLevelSetResolution ; int32 MaxClusterLevelSetResolution ; } ; struct FCollectionCollisionParticleData {)",
    "insertText": "FCollectionCollisionParticleData() : CollisionParticlesFraction(1.f) , MaximumCollisionParticles(60)"
  },
  {
    "label": "FCollectionCollisionTypeData()",
    "kind": "Method",
    "detail": "Function (} float CollisionParticlesFraction ; int32 MaximumCollisionParticles ; } ; struct FCollectionCollisionTypeData {)",
    "insertText": "FCollectionCollisionTypeData() : CollisionType(ECollisionTypeEnum::Chaos_Surface_Volumetric) , ImplicitType(EImplicitTypeEnum::Chaos_Implicit_Sphere) , LevelSetData() , CollisionParticleData() , CollisionObjectReductionPercentage(0.f) , CollisionMarginFraction(0.f)"
  },
  {
    "label": "FSharedSimulationSizeSpecificData()",
    "kind": "Method",
    "detail": "Function (} ECollisionTypeEnum CollisionType ; EImplicitTypeEnum ImplicitType ; FCollectionLevelSetData LevelSetData ; FCollectionCollisionParticleData CollisionParticleData ; float CollisionObjectReductionPercentage ; float CollisionMarginFraction ; } ; struct FSharedSimulationSizeSpecificData {)",
    "insertText": "FSharedSimulationSizeSpecificData() : MaxSize(0.f) , DamageThreshold(5000.f) , CollisionShapesData({ FCollectionCollisionTypeData() })"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} float MaxSize ; float DamageThreshold ; TArray<FCollectionCollisionTypeData> CollisionShapesData ; bool)",
    "insertText": "operator(const FSharedSimulationSizeSpecificData& Rhs)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (SizeSpecificData .)",
    "insertText": "AddDefaulted()"
  },
  {
    "label": "FSharedSimulationParameters()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSharedSimulationParameters(ECollisionTypeEnum InCollisionType ,EImplicitTypeEnum InImplicitType ,int32 InMinLevelSetResolution ,int32 InMaxLevelSetResolution ,int32 InMinClusterLevelSetResolution ,int32 InMaxClusterLevelSetResolution ,bool InMassAsDensity ,float InMass , float InMinimumMassClamp , float InMaximumMassClamp , float InMinimumBoundingExtentClamp , float InMaximumBoundingExtentClamp , float InMinimumInertiaTensorDiagonalClamp , float InMaximumInertiaTensorDiagonalClamp , float InCollisionParticlesFraction , int32 InMaximumCollisionParticleCount , float InCollisionMarginFraction , bool InUseImportedCollisionImplicits ) : MinimumMassClamp(InMinimumMassClamp) , MaximumMassClamp(InMinimumMassClamp) , MinimumBoundingExtentClamp(InMinimumBoundingExtentClamp) , MaximumBoundingExtentClamp(InMinimumBoundingExtentClamp) , MinimumInertiaTensorDiagonalClamp(InMinimumInertiaTensorDiagonalClamp) , MaximumInertiaTensorDiagonalClamp(InMaximumInertiaTensorDiagonalClamp) , MaximumCollisionParticleCount(InMaximumCollisionParticleCount) , Mass(InMass) , bMassAsDensity(InMassAsDensity) , bUseImportedCollisionImplicits(InUseImportedCollisionImplicits)"
  },
  {
    "label": "MinimumVolumeClamp()",
    "kind": "Method",
    "detail": "Function (SizeSpecificData [ 0 ] . CollisionShapesData [ 0 ] . CollisionType = InCollisionType ; SizeSpecificData [ 0 ] . CollisionShapesData [ 0 ] . ImplicitType = InImplicitType ; SizeSpecificData [ 0 ] . CollisionShapesData [ 0 ] . CollisionMarginFraction = InCollisionMarginFraction ; SizeSpecificData [ 0 ] . CollisionShapesData [ 0 ] . LevelSetData . MinLevelSetResolution = InMinLevelSetResolution ; SizeSpecificData [ 0 ] . CollisionShapesData [ 0 ] . LevelSetData . MaxLevelSetResolution = InMaxLevelSetResolution ; SizeSpecificData [ 0 ] . CollisionShapesData [ 0 ] . LevelSetData . MinClusterLevelSetResolution = InMinClusterLevelSetResolution ; SizeSpecificData [ 0 ] . CollisionShapesData [ 0 ] . LevelSetData . MaxClusterLevelSetResolution = InMaxClusterLevelSetResolution ; SizeSpecificData [ 0 ] . CollisionShapesData [ 0 ] . CollisionParticleData . CollisionParticlesFraction = InCollisionParticlesFraction ; SizeSpecificData [ 0 ] . CollisionShapesData [ 0 ] . CollisionParticleData . MaximumCollisionParticles = InMaximumCollisionParticleCount ; } } TArray<FSharedSimulationSizeSpecificData> SizeSpecificData ; float MinimumMassClamp ; float MaximumMassClamp ; float MinimumBoundingExtentClamp ; float MaximumBoundingExtentClamp ; float MinimumInertiaTensorDiagonalClamp ; float MaximumInertiaTensorDiagonalClamp ; int32 MaximumCollisionParticleCount ; float Mass ; bool bMassAsDensity : 1 ; bool bUseImportedCollisionImplicits : 1 ; float)",
    "insertText": "MinimumVolumeClamp()"
  },
  {
    "label": "FSimulationParameters()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSimulationParameters(const FSimulationParameters& Other) : Name(Other.Name) PRAGMA_DISABLE_DEPRECATION_WARNINGS , RestCollection(Other.RestCollection) PRAGMA_ENABLE_DEPRECATION_WARNINGS , RestCollectionShared(Other.RestCollectionShared) , Shared(Other.Shared) , WorldTransform(Other.WorldTransform) , InitializationCommands(Other.InitializationCommands) , DamageThreshold(Other.DamageThreshold) , InitialRootIndex(Other.InitialRootIndex) , ClusterGroupIndex(Other.ClusterGroupIndex) , MaxClusterLevel(Other.MaxClusterLevel) , MaxSimulatedLevel(Other.MaxSimulatedLevel) , ObjectType(Other.ObjectType) , InitialVelocityType(Other.InitialVelocityType) , DamageModel(Other.DamageModel) , DamageEvaluationModel(Other.DamageEvaluationModel) , ClusterConnectionMethod(Other.ClusterConnectionMethod) , ConnectionGraphBoundsFilteringMargin(Other.ConnectionGraphBoundsFilteringMargin) , CollisionGroup(Other.CollisionGroup) , CollisionSampleFraction(Other.CollisionSampleFraction) , InitialLinearVelocity(Other.InitialLinearVelocity) , InitialAngularVelocity(Other.InitialAngularVelocity) , PhysicalMaterialHandle(Other.PhysicalMaterialHandle) , MaterialOverrideMassScaleMultiplier(Other.MaterialOverrideMassScaleMultiplier) , Simulating(Other.Simulating) , EnableClustering(Other.EnableClustering) , bUseSizeSpecificDamageThresholds(Other.bUseSizeSpecificDamageThresholds) , bUseMaterialDamageModifiers(Other.bUseMaterialDamageModifiers) , bUsePerClusterOnlyDamageThreshold(Other.bUsePerClusterOnlyDamageThreshold) , StartAwake(Other.StartAwake) , bForceUpdateActiveTransforms(Other.bForceUpdateActiveTransforms) , bGenerateBreakingData(Other.bGenerateBreakingData) , bGenerateCollisionData(Other.bGenerateCollisionData) , bGenerateTrailingData(Other.bGenerateTrailingData) , bGenerateCrumblingData(Other.bGenerateCrumblingData) , bGenerateCrumblingChildrenData(Other.bGenerateCrumblingChildrenData) , bGenerateGlobalBreakingData(Other.bGenerateGlobalBreakingData) , bGenerateGlobalCollisionData(Other.bGenerateGlobalCollisionData) , bGenerateGlobalCrumblingData(Other.bGenerateGlobalCrumblingData) , bGenerateGlobalCrumblingChildrenData(Other.bGenerateGlobalCrumblingChildrenData) , EnableGravity(Other.EnableGravity) , UseInertiaConditioning(Other.UseInertiaConditioning) , UseCCD(Other.UseCCD) , UseMACD(Other.UseMACD) , bEnableStrainOnCollision(Other.bEnableStrainOnCollision) , bUseStaticMeshCollisionForTraces(Other.bUseStaticMeshCollisionForTraces) , bOptimizeConvexes(Other.bOptimizeConvexes) , bUseSimplicialsWhenAvailable(Other.bUseSimplicialsWhenAvailable) , bUseDamagePropagation(Other.bUseDamagePropagation) , PositionSolverIterations(Other.PositionSolverIterations) , VelocitySolverIterations(Other.VelocitySolverIterations) , ProjectionSolverIterations(Other.ProjectionSolverIterations) , BreakDamagePropagationFactor(Other.BreakDamagePropagationFactor) , ShockDamagePropagationFactor(Other.ShockDamagePropagationFactor) , LinearDamping(Other.LinearDamping) , AngularDamping(Other.AngularDamping) , InitialOverlapDepenetrationVelocity(Other.InitialOverlapDepenetrationVelocity) , SleepThresholdMultiplier(Other.SleepThresholdMultiplier) , GravityGroupIndex(Other.GravityGroupIndex) , OneWayInteractionLevel(Other.OneWayInteractionLevel) , SimulationFilterData(Other.SimulationFilterData) , QueryFilterData(Other.QueryFilterData) , UserData(Other.UserData) #if SIMULATIONPARAMETERS_CACHE_PARAMETERS PRAGMA_DISABLE_DEPRECATION_WARNINGS , RecordedTrack(Other.RecordedTrack) , CacheBeginTime(Other.CacheBeginTime) , ReverseCacheBeginTime(Other.ReverseCacheBeginTime) , CacheType(Other.CacheType) , bClearCache(Other.bClearCache) , bOwnsTrack(false)"
  },
  {
    "label": "FSimulationParameters()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSimulationParameters()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if SIMULATIONPARAMETERS_CACHE_PARAMETERS PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "if(bOwnsTrack)"
  },
  {
    "label": "FRecordedTransformTrack()",
    "kind": "Method",
    "detail": "Function (delete const_cast<)",
    "insertText": "FRecordedTransformTrack(RecordedTrack)"
  }
]