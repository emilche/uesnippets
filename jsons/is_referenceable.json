[
  {
    "label": "__is_referenceable_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_referenceable_impl"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__is_referenceable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_referenceable"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_IS_REFERENCEABLE_H # define _LIBCPP___TYPE_TRAITS_IS_REFERENCEABLE_H # include<__config> # include<__type_traits / integral_constant . h> # include<__type_traits / is_same . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (template<class _Tp> _Tp&)",
    "insertText": "__test(int)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (template<class _Tp> false_type)",
    "insertText": "__test(...)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Tp> struct __is_referenceable : integral_constant<bool,_IsNotSame<)",
    "insertText": "decltype(__is_referenceable_impl::__test<_Tp>(0))"
  }
]