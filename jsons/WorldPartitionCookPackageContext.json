[
  {
    "label": "IWorldPartitionCookPackageGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWorldPartitionCookPackageGenerator"
  },
  {
    "label": "FWorldPartitionCookPackageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionCookPackageContext"
  },
  {
    "label": "FWorldPartitionCookPackageContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" CoreMinimal . h \" # include \" UObject / ObjectKey . h \" # include \" WorldPartition / Cook / WorldPartitionCookPackageContextInterface . h \" # include \" WorldPartition / Cook / WorldPartitionCookPackage . h \" class IWorldPartitionCookPackageGenerator ; class FWorldPartitionCookPackageContext : public IWorldPartitionCookPackageContext { public :)",
    "insertText": "FWorldPartitionCookPackageContext()"
  },
  {
    "label": "RegisterPackageCookPackageGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPackageCookPackageGenerator(IWorldPartitionCookPackageGenerator* CookPackageGenerator)"
  },
  {
    "label": "UnregisterPackageCookPackageGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPackageCookPackageGenerator(IWorldPartitionCookPackageGenerator* CookPackageGenerator)"
  },
  {
    "label": "AddPackageToGenerate()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionCookPackage*)",
    "insertText": "AddPackageToGenerate(IWorldPartitionCookPackageGenerator* Generator, IWorldPartitionCookPackageObject* InCookPackageObject, const FString& Root, const FString& RelativePath)"
  },
  {
    "label": "GetGeneratedPackagePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGeneratedPackagePath(IWorldPartitionCookPackageObject* InCookPackageObject)"
  },
  {
    "label": "GatherPackagesToCook()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GatherPackagesToCook(const FWorldPartitionCookPackageContextParams& Params = FWorldPartitionCookPackageContextParams())"
  },
  {
    "label": "GetParams()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionCookPackageContextParams&)",
    "insertText": "GetParams()"
  },
  {
    "label": "GetCookPackages()",
    "kind": "Method",
    "detail": "Function (const TArray<FWorldPartitionCookPackage*>*)",
    "insertText": "GetCookPackages(const IWorldPartitionCookPackageGenerator* CookPackageGenerator)"
  },
  {
    "label": "GetCookPackageGeneratorAndPackage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetCookPackageGeneratorAndPackage(const FString& PackageRoot, const FString& PackageRelativePath, IWorldPartitionCookPackageGenerator*& CookPackageGenerator, FWorldPartitionCookPackage*& CookPackage)"
  },
  {
    "label": "NumPackageToGenerate()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NumPackageToGenerate()"
  },
  {
    "label": "NumGenerators()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "NumGenerators()"
  },
  {
    "label": "GetCookPackageGenerators()",
    "kind": "Method",
    "detail": "Function (} TArray<IWorldPartitionCookPackageGenerator*>&)",
    "insertText": "GetCookPackageGenerators()"
  },
  {
    "label": "AddGenericPackageToGenerate()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionCookPackage*)",
    "insertText": "AddGenericPackageToGenerate(IWorldPartitionCookPackageGenerator* CookPackageGenerator, const FString& Root, const FString& RelativePath)"
  },
  {
    "label": "AddPackageToGenerateInternal()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionCookPackage*)",
    "insertText": "AddPackageToGenerateInternal(IWorldPartitionCookPackageGenerator* CookPackageGenerator, const FString& Root, const FString& RelativePath, FWorldPartitionCookPackage::EType Type)"
  }
]