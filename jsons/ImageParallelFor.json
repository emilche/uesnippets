[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ImageParallelForComputeNumRows()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ImageCore . h \" # include \" Async / ParallelFor . h \" namespace FImageCore { int64)",
    "insertText": "ImageParallelForComputeNumRows(const FImageView & Image)"
  },
  {
    "label": "ImageParallelForGetOneRowView()",
    "kind": "Method",
    "detail": "Function (} FImageView)",
    "insertText": "ImageParallelForGetOneRowView(const FImageView & Image,int64 Y)"
  },
  {
    "label": "RawData()",
    "kind": "Method",
    "detail": "Function (FImageView ImageRow = Image ; ImageRow . SizeY = 1 ; ImageRow . NumSlices = 1 ; ImageRow .)",
    "insertText": "RawData(uint8 *)Image.RawData + Image.GetBytesPerPixel()"
  },
  {
    "label": "ImageParallelForMakePart()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "ImageParallelForMakePart(FImageView * Part,const FImageView & Whole,int64 JobIndex,int64 RowsPerJob)"
  },
  {
    "label": "ImageParallelFor()",
    "kind": "Method",
    "detail": "Function (template<Lambda> void)",
    "insertText": "ImageParallelFor(const TCHAR* DebugName, const FImageView & Image, const Lambda& Func)"
  },
  {
    "label": "ImageParallelForComputeNumJobs()",
    "kind": "Method",
    "detail": "Function (int64 RowsPerJob ; int32 NumJobs =)",
    "insertText": "ImageParallelForComputeNumJobs(Image,&RowsPerJob)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(DebugName, NumJobs, 1, [=](int64 JobIndex) { FImageView Part; int64 StartY = ImageParallelForMakePart(&Part,Image,JobIndex,RowsPerJob); Func(Part,StartY); }, EParallelForFlags::Unbalanced)"
  },
  {
    "label": "ProcessLinearPixels()",
    "kind": "Method",
    "detail": "Function (} enum class ProcessLinearPixelsAction { ReadOnly,Modified } ; template<Lambda> void)",
    "insertText": "ProcessLinearPixels(const FImageView & Image, const Lambda& Func, int64 StartY)"
  },
  {
    "label": "AsRGBA32F()",
    "kind": "Method",
    "detail": "Function (TArrayView64<FLinearColor> Colors = Image .)",
    "insertText": "AsRGBA32F()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FLinearColor* Start =& Colors [ 0 ] ;)",
    "insertText": "for(int64 Y=0;Y<ImageParallelForComputeNumRows(Image);Y++)"
  },
  {
    "label": "RowColors()",
    "kind": "Method",
    "detail": "Function (TArrayView64<FLinearColor>)",
    "insertText": "RowColors(Start+Y*Image.SizeX,Image.SizeX)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(RowColors,StartY+Y)"
  },
  {
    "label": "LinearRow()",
    "kind": "Method",
    "detail": "Function (} } else { FImage)",
    "insertText": "LinearRow(Image.SizeX,1,1,ERawImageFormat::RGBA32F,EGammaSpace::Linear)"
  },
  {
    "label": "ImageParallelForGetOneRowView()",
    "kind": "Method",
    "detail": "Function (FImageView ImageRow =)",
    "insertText": "ImageParallelForGetOneRowView(Image,Y)"
  },
  {
    "label": "CopyImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyImage(ImageRow,LinearRow)"
  },
  {
    "label": "CopyImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyImage(LinearRow,ImageRow)"
  },
  {
    "label": "ImageParallelProcessLinearPixels()",
    "kind": "Method",
    "detail": "Function (} } } } template<Lambda> void)",
    "insertText": "ImageParallelProcessLinearPixels(const TCHAR* DebugName, const FImageView & Image, const Lambda& Func)"
  },
  {
    "label": "ImageParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImageParallelFor(DebugName,Image,[Func](const FImageView &Part,int64 StartY) { ProcessLinearPixels(Part,Func,StartY); })"
  }
]