[
  {
    "label": "FStorageServerConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStorageServerConnection"
  },
  {
    "label": "FStorageServerSerializationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStorageServerSerializationContext"
  },
  {
    "label": "FStorageServerIoDispatcherBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStorageServerIoDispatcherBackend"
  },
  {
    "label": "FRequestQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestQueue"
  },
  {
    "label": "FBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatch"
  },
  {
    "label": "FStorageServerIoDispatcherBackend()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IO / IoDispatcherBackend . h \" # include \" HAL / Runnable . h \" # include \" Misc / IQueuedWork . h \" # if ! UE_BUILD_SHIPPING class FStorageServerConnection ; struct FStorageServerSerializationContext ; class FStorageServerIoDispatcherBackend final : public FRunnable,public IIoDispatcherBackend { public :)",
    "insertText": "FStorageServerIoDispatcherBackend(FStorageServerConnection& Connection)"
  },
  {
    "label": "FStorageServerIoDispatcherBackend()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStorageServerIoDispatcherBackend()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(TSharedRef<const FIoDispatcherBackendContext> Context)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "ResolveIoRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveIoRequests(FIoRequestList Requests, FIoRequestList& OutUnresolved)"
  },
  {
    "label": "CancelIoRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelIoRequest(FIoRequestImpl* Request)"
  },
  {
    "label": "UpdatePriorityForIoRequest()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "UpdatePriorityForIoRequest(FIoRequestImpl* Request)"
  },
  {
    "label": "DoesChunkExist()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "DoesChunkExist(const FIoChunkId& ChunkId)"
  },
  {
    "label": "GetSizeForChunk()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<uint64>)",
    "insertText": "GetSizeForChunk(const FIoChunkId& ChunkId)"
  },
  {
    "label": "GetCompletedIoRequests()",
    "kind": "Method",
    "detail": "Function (FIoRequestImpl*)",
    "insertText": "GetCompletedIoRequests()"
  },
  {
    "label": "OpenMapped()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FIoMappedRegion>)",
    "insertText": "OpenMapped(const FIoChunkId& ChunkId, const FIoReadOptions& Options)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Init()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (private : class FRequestQueue { public : FIoRequestImpl*)",
    "insertText": "Pop()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Push(FIoRequestImpl& Request)"
  },
  {
    "label": "UpdateOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOrder()"
  },
  {
    "label": "QueueSortFunc()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "QueueSortFunc(const FIoRequestImpl& A, const FIoRequestImpl& B)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t ASequence = reinterpret_cast<)",
    "insertText": "uintptr_t(A.BackendData)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t BSequence = reinterpret_cast<)",
    "insertText": "uintptr_t(B.BackendData)"
  },
  {
    "label": "DoThreadedWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoThreadedWork()"
  },
  {
    "label": "Abandon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Abandon()"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (} ; FStorageServerIoDispatcherBackend& Owner ; FBatch* Next = nullptr ; FIoRequestImpl* RequestsHead = nullptr ; FIoRequestImpl* RequestsTail = nullptr ; uint64 RequestsCount = 0 ; } ; bool)",
    "insertText": "Resolve(FIoRequestImpl* Request)"
  },
  {
    "label": "SubmitBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitBatch(FBatch* Batch)"
  },
  {
    "label": "OnBatchCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBatchCompleted(FBatch* Batch)"
  },
  {
    "label": "WaitForBatchToComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForBatchToComplete(uint32 WaitTime = MAX_uint32)"
  }
]