[
  {
    "label": "FunctionVideoDecoderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionVideoDecoderFactory"
  },
  {
    "label": "FunctionVideoDecoderFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TEST_VIDEO_FUNCTION_VIDEO_DECODER_FACTORY_H_ # define API_TEST_VIDEO_FUNCTION_VIDEO_DECODER_FACTORY_H_ # include<functional> # include<memory> # include<utility> # include<vector> # include \" api / video_codecs / sdp_video_format . h \" # include \" api / video_codecs / video_decoder . h \" # include \" api / video_codecs / video_decoder_factory . h \" # include \" rtc_base / checks . h \" namespace webrtc { namespace test { class FunctionVideoDecoderFactory final : public VideoDecoderFactory { public :)",
    "insertText": "FunctionVideoDecoderFactory(std::function<std::unique_ptr<VideoDecoder>()> create) : create_([create = std::move(create)](const SdpVideoFormat&) { return create(); })"
  },
  {
    "label": "FunctionVideoDecoderFactory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FunctionVideoDecoderFactory(std::function<std::unique_ptr<VideoDecoder>(const SdpVideoFormat&)> create) : create_(std::move(create))"
  },
  {
    "label": "FunctionVideoDecoderFactory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FunctionVideoDecoderFactory(std::function<std::unique_ptr<VideoDecoder>()> create, std::vector<SdpVideoFormat> sdp_video_formats) : create_([create = std::move(create)](const SdpVideoFormat&) { return create(); }), sdp_video_formats_(std::move(sdp_video_formats))"
  },
  {
    "label": "GetSupportedFormats()",
    "kind": "Method",
    "detail": "Function (} std::vector<SdpVideoFormat>)",
    "insertText": "GetSupportedFormats()"
  },
  {
    "label": "VideoDecoder()",
    "kind": "Method",
    "detail": "Function (} private : const std::function<std::unique_ptr<)",
    "insertText": "VideoDecoder(const SdpVideoFormat&)"
  }
]