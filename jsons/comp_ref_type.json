[
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "__debug_less",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__debug_less"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "_LHS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LHS"
  },
  {
    "label": "_RHS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RHS"
  },
  {
    "label": "_Comp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Comp"
  },
  {
    "label": "__comp_ref_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__comp_ref_type"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_COMP_REF_TYPE_H # define _LIBCPP___ALGORITHM_COMP_REF_TYPE_H # include<__config> # include<__debug> # include<__utility / declval . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__debug_less()",
    "kind": "Method",
    "detail": "Function (_Compare& __comp_ ; _LIBCPP_CONSTEXPR_AFTER_CXX11)",
    "insertText": "__debug_less(_Compare& __c) : __comp_(__c)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Up> _LIBCPP_CONSTEXPR_AFTER_CXX11 bool)",
    "insertText": "operator()(const _Tp& __x, const _Up& __y)"
  },
  {
    "label": "__comp_()",
    "kind": "Method",
    "detail": "Function (bool __r =)",
    "insertText": "__comp_(__x, __y)"
  },
  {
    "label": "_LIBCPP_DEBUG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_DEBUG_ASSERT(!__comp_(__l, __r), \"Comparator does not induce a strict weak ordering\")"
  },
  {
    "label": "__do_compare_assert()",
    "kind": "Method",
    "detail": "Function (} template<class _LHS,class _RHS> _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "__do_compare_assert(long, _LHS &, _RHS &)"
  }
]