[
  {
    "label": "SRP_gN_cache_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SRP_gN_cache_st"
  },
  {
    "label": "SRP_user_pwd_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SRP_user_pwd_st"
  },
  {
    "label": "SRP_VBASE_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SRP_VBASE_st"
  },
  {
    "label": "SRP_gN_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SRP_gN_st"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (# ifndef HEADER_SRP_H # define HEADER_SRP_H # include<openssl / opensslconf . h> # ifndef OPENSSL_NO_SRP # include<stdio . h> # include<string . h> # include<openssl / safestack . h> # include<openssl / bn . h> # include<openssl / crypto . h> # ifdef __cplusplus \" C \" { # endif typedef struct SRP_gN_cache_st { char* b64_bn ; BIGNUM* bn ; } SRP_gN_cache ;)",
    "insertText": "DEFINE_STACK_OF(SRP_gN_cache)"
  },
  {
    "label": "SRP_user_pwd_free()",
    "kind": "Method",
    "detail": "Function (char* id ; BIGNUM* s ; BIGNUM* v ; const BIGNUM* g ; const BIGNUM* N ; char* info ; } SRP_user_pwd ; void)",
    "insertText": "SRP_user_pwd_free(SRP_user_pwd *user_pwd)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_STACK_OF(SRP_user_pwd)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(SRP_user_pwd)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(SRP_gN_cache)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (char* seed_key ; const BIGNUM* default_g ; const BIGNUM* default_N ; } SRP_VBASE ; typedef struct SRP_gN_st { char* id ; const BIGNUM* g ; const BIGNUM* N ; } SRP_gN ;)",
    "insertText": "DEFINE_STACK_OF(SRP_gN) SRP_VBASE *SRP_VBASE_new(char *seed_key)"
  },
  {
    "label": "SRP_VBASE_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SRP_VBASE_free(SRP_VBASE *vb)"
  },
  {
    "label": "SRP_VBASE_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file)"
  },
  {
    "label": "DEPRECATEDIN_1_1_0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATEDIN_1_1_0(SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)) SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username)"
  },
  {
    "label": "SRP_create_verifier()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "SRP_create_verifier(const char *user, const char *pass, char **salt, char **verifier, const char *N, const char *g)"
  },
  {
    "label": "SRP_create_verifier_BN()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt, BIGNUM **verifier, const BIGNUM *N, const BIGNUM *g)"
  },
  {
    "label": "SRP_check_known_gN_param()",
    "kind": "Method",
    "detail": "Function (# define SRP_NO_ERROR 0 # define SRP_ERR_VBASE_INCOMPLETE_FILE 1 # define SRP_ERR_VBASE_BN_LIB 2 # define SRP_ERR_OPEN_FILE 3 # define SRP_ERR_MEMORY 4 # define DB_srptype 0 # define DB_srpverifier 1 # define DB_srpsalt 2 # define DB_srpid 3 # define DB_srpgN 4 # define DB_srpinfo 5 # undef DB_NUMBER # define DB_NUMBER 6 # define DB_SRP_INDEX ' I ' # define DB_SRP_VALID ' V ' # define DB_SRP_REVOKED ' R ' # define DB_SRP_MODIF ' v ' char*)",
    "insertText": "SRP_check_known_gN_param(const BIGNUM *g, const BIGNUM *N)"
  },
  {
    "label": "SRP_get_default_gN()",
    "kind": "Method",
    "detail": "Function (SRP_gN*)",
    "insertText": "SRP_get_default_gN(const char *id)"
  },
  {
    "label": "SRP_Calc_server_key()",
    "kind": "Method",
    "detail": "Function (BIGNUM*)",
    "insertText": "SRP_Calc_server_key(const BIGNUM *A, const BIGNUM *v, const BIGNUM *u, const BIGNUM *b, const BIGNUM *N)"
  },
  {
    "label": "SRP_Calc_B()",
    "kind": "Method",
    "detail": "Function (BIGNUM*)",
    "insertText": "SRP_Calc_B(const BIGNUM *b, const BIGNUM *N, const BIGNUM *g, const BIGNUM *v)"
  },
  {
    "label": "SRP_Verify_A_mod_N()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SRP_Verify_A_mod_N(const BIGNUM *A, const BIGNUM *N)"
  },
  {
    "label": "SRP_Calc_u()",
    "kind": "Method",
    "detail": "Function (BIGNUM*)",
    "insertText": "SRP_Calc_u(const BIGNUM *A, const BIGNUM *B, const BIGNUM *N)"
  },
  {
    "label": "SRP_Calc_x()",
    "kind": "Method",
    "detail": "Function (BIGNUM*)",
    "insertText": "SRP_Calc_x(const BIGNUM *s, const char *user, const char *pass)"
  },
  {
    "label": "SRP_Calc_A()",
    "kind": "Method",
    "detail": "Function (BIGNUM*)",
    "insertText": "SRP_Calc_A(const BIGNUM *a, const BIGNUM *N, const BIGNUM *g)"
  },
  {
    "label": "SRP_Calc_client_key()",
    "kind": "Method",
    "detail": "Function (BIGNUM*)",
    "insertText": "SRP_Calc_client_key(const BIGNUM *N, const BIGNUM *B, const BIGNUM *g, const BIGNUM *x, const BIGNUM *a, const BIGNUM *u)"
  },
  {
    "label": "SRP_Verify_B_mod_N()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SRP_Verify_B_mod_N(const BIGNUM *B, const BIGNUM *N)"
  }
]