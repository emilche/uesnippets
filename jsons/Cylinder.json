[
  {
    "label": "FCylinderSpecializeSamplingHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCylinderSpecializeSamplingHelper"
  },
  {
    "label": "FCylinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCylinder"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FCylinder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ImplicitObject . h \" # include \" Chaos / Plane . h \" # include \" Chaos / Rotation . h \" # include \" Chaos / Sphere . h \" # include \" ChaosArchive . h \" namespace Chaos { struct FCylinderSpecializeSamplingHelper ; class FCylinder final : public FImplicitObject { public : using FImplicitObject::SignedDistance ; using FImplicitObject::GetTypeName ;)",
    "insertText": "FCylinder(const FVec3& x1, const FVec3& x2, const FReal Radius) : FImplicitObject(EImplicitObject::FiniteConvex, ImplicitObjectType::Cylinder) , MPlane1(x1, (x2 - x1).GetSafeNormal()) , MPlane2(x2, -MPlane1.Normal()) , MHeight((x2 - x1).Size()) , MRadius(Radius) , MLocalBoundingBox(x1, x1)"
  },
  {
    "label": "GrowToInclude()",
    "kind": "Method",
    "detail": "Function (MLocalBoundingBox .)",
    "insertText": "GrowToInclude(x2)"
  },
  {
    "label": "FAABB3()",
    "kind": "Method",
    "detail": "Function (MLocalBoundingBox =)",
    "insertText": "FAABB3(MLocalBoundingBox.Min() - FVec3(MRadius), MLocalBoundingBox.Max() + FVec3(MRadius))"
  },
  {
    "label": "FCylinder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCylinder(const FCylinder& Other) : FImplicitObject(EImplicitObject::FiniteConvex, ImplicitObjectType::Cylinder) , MPlane1(Other.MPlane1) , MPlane2(Other.MPlane2) , MHeight(Other.MHeight) , MRadius(Other.MRadius) , MLocalBoundingBox(Other.MLocalBoundingBox)"
  },
  {
    "label": "FCylinder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCylinder(FCylinder&& Other) : FImplicitObject(EImplicitObject::FiniteConvex, ImplicitObjectType::Cylinder) , MPlane1(MoveTemp(Other.MPlane1)) , MPlane2(MoveTemp(Other.MPlane2)) , MHeight(Other.MHeight) , MRadius(Other.MRadius) , MLocalBoundingBox(MoveTemp(Other.MLocalBoundingBox))"
  },
  {
    "label": "FCylinder()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCylinder()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (} EImplicitObjectType)",
    "insertText": "StaticType()"
  },
  {
    "label": "ComputeLocalSamplePoints()",
    "kind": "Method",
    "detail": "Function (TArray<FVec3>)",
    "insertText": "ComputeLocalSamplePoints(const FReal PointsPerUnitArea, const bool IncludeEndCaps = true, const int32 MinPoints = 0, const int32 MaxPoints = 1000)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (} TArray<FVec3>)",
    "insertText": "ComputeSamplePoints(const int32 NumPoints, const bool IncludeEndCaps = true)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (TArray<FVec3>)",
    "insertText": "ComputeSamplePoints(const FReal PointsPerUnitArea, const bool IncludeEndCaps = true, const int32 MinPoints = 0, const int32 MaxPoints = 1000)"
  },
  {
    "label": "SignedDistance()",
    "kind": "Method",
    "detail": "Function (} # if 0 FReal)",
    "insertText": "SignedDistance(const FVec3& x)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (FVec3 V = MPlane1 .)",
    "insertText": "X()"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (FReal Plane1Distance =)",
    "insertText": "DotProduct(V, MPlane1.Normal())"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (FReal PlaneDistance =)",
    "insertText": "Max(Plane1Distance, -MHeight - Plane1Distance)"
  },
  {
    "label": "CylinderDistance()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "CylinderDistance(V - Plane1Distance * MPlane1.Normal()).Size()"
  },
  {
    "label": "PhiWithNormal()",
    "kind": "Method",
    "detail": "Function (} # endif FReal)",
    "insertText": "PhiWithNormal(const FVec3& x, FVec3& Normal)"
  },
  {
    "label": "PhiWithNormal()",
    "kind": "Method",
    "detail": "Function (FVec3 Normal1,Normal2 ; const FReal Distance1 = MPlane1 .)",
    "insertText": "PhiWithNormal(x, Normal1)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (const FVec3 v = x -)",
    "insertText": "FVec3(Normal1 * Distance1 + MPlane1.X())"
  },
  {
    "label": "GetSafeNormal()",
    "kind": "Method",
    "detail": "Function (const FVec3 Corner = v .)",
    "insertText": "GetSafeNormal() * MRadius + MPlane1.X()"
  },
  {
    "label": "SafeNormalize()",
    "kind": "Method",
    "detail": "Function (Normal = x - Corner ; return Normal .)",
    "insertText": "SafeNormalize()"
  },
  {
    "label": "PhiWithNormal()",
    "kind": "Method",
    "detail": "Function (} else { Normal = - Normal1 ; return - Distance1 ; } } const FReal Distance2 = MPlane2 .)",
    "insertText": "PhiWithNormal(x, Normal2)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (const FVec3 v = x -)",
    "insertText": "FVec3(Normal2 * Distance2 + MPlane2.X())"
  },
  {
    "label": "GetSafeNormal()",
    "kind": "Method",
    "detail": "Function (const FVec3 Corner = v .)",
    "insertText": "GetSafeNormal() * MRadius + MPlane2.X()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else { Normal = - Normal2 ; return - Distance2 ; } })",
    "insertText": "check(FMath::Abs(Distance1 + Distance2 - MHeight) < UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "SideVector()",
    "kind": "Method",
    "detail": "Function (const FVec3)",
    "insertText": "SideVector(x - FVec3(Normal1 * Distance1 + MPlane1.X()))"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (const FReal SideDistance = SideVector .)",
    "insertText": "Size()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReal TopDistance = Distance1<Distance2 ? Distance1 : Distance2 ;)",
    "insertText": "if(TopDistance < -SideDistance)"
  },
  {
    "label": "GetSafeNormal()",
    "kind": "Method",
    "detail": "Function (Normal = Distance1<Distance2 ? - Normal1 : - Normal2 ; return - TopDistance ; } } Normal = SideVector .)",
    "insertText": "GetSafeNormal()"
  },
  {
    "label": "GetX2()",
    "kind": "Method",
    "detail": "Function (} const FVec3&)",
    "insertText": "GetX2()"
  },
  {
    "label": "GetOrigin()",
    "kind": "Method",
    "detail": "Function (} const FVec3&)",
    "insertText": "GetOrigin()"
  },
  {
    "label": "GetInsertion()",
    "kind": "Method",
    "detail": "Function (} const FVec3&)",
    "insertText": "GetInsertion()"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetCenter()"
  },
  {
    "label": "GetCenterOfMass()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetCenterOfMass()"
  },
  {
    "label": "GetAxis()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetAxis()"
  },
  {
    "label": "GetArea()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetArea(const bool IncludeEndCaps = true)"
  },
  {
    "label": "GetArea()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetArea(const FReal Height, const FReal Radius, const bool IncludeEndCaps)"
  },
  {
    "label": "Radius()",
    "kind": "Method",
    "detail": "Function (const FReal PI2 = 2 .* UE_PI ; return IncludeEndCaps ? PI2*)",
    "insertText": "Radius(Height + Radius)"
  },
  {
    "label": "GetVolume()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetVolume()"
  },
  {
    "label": "GetVolume()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetVolume(const FReal Height, const FReal Radius)"
  },
  {
    "label": "GetInertiaTensor()",
    "kind": "Method",
    "detail": "Function (} FMatrix33)",
    "insertText": "GetInertiaTensor(const FReal Mass, const FReal Height, const FReal Radius)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FReal RR = Radius* Radius ; const FReal Diag12 = static_cast<)",
    "insertText": "FReal(Mass / 12. * (3.*RR + Height*Height))"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FReal Diag3 = static_cast<)",
    "insertText": "FReal(Mass / 2. * RR)"
  },
  {
    "label": "GetRotationOfMass()",
    "kind": "Method",
    "detail": "Function (} FRotation3)",
    "insertText": "GetRotationOfMass()"
  },
  {
    "label": "GetRotationOfMass()",
    "kind": "Method",
    "detail": "Function (} FRotation3)",
    "insertText": "GetRotationOfMass(const FVec3& Axis)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "ScopedMemory()",
    "kind": "Method",
    "detail": "Function (FChaosArchiveScopedMemory)",
    "insertText": "ScopedMemory(Ar, GetTypeName())"
  },
  {
    "label": "SerializeImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeImp(Ar)"
  },
  {
    "label": "SerializeAsAABB()",
    "kind": "Method",
    "detail": "Function (Ar<<MPlane1 ; Ar<<MPlane2 ; Ar<<MHeight ; Ar<<MRadius ; TBox<FReal,3)",
    "insertText": "SerializeAsAABB(Ar, MLocalBoundingBox)"
  },
  {
    "label": "FindClosestIntersectionImp()",
    "kind": "Method",
    "detail": "Function (} private : Pair<FVec3,bool>)",
    "insertText": "FindClosestIntersectionImp(const FVec3& StartPoint, const FVec3& EndPoint, const FReal Thickness)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (TArray<Pair<FReal,FVec3>> Intersections ; FVec3 ProjectedEnd = EndPoint -)",
    "insertText": "DotProduct(EndPoint - StartPoint, MPlane1.Normal()) * MPlane1.Normal()"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (FVec3 ProjectedCenter = MPlane1 .)",
    "insertText": "X() - FVec3::DotProduct(MPlane1.X() - StartPoint, MPlane1.Normal()) * MPlane1.Normal()"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (auto ProjectedSphere = TSphere<)",
    "insertText": "FReal(ProjectedCenter, MRadius)"
  },
  {
    "label": "FindClosestIntersection()",
    "kind": "Method",
    "detail": "Function (auto InfiniteCylinderIntersection = ProjectedSphere .)",
    "insertText": "FindClosestIntersection(StartPoint, ProjectedEnd, Thickness)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (auto UnprojectedIntersection = TPlane<)",
    "insertText": "FReal(InfiniteCylinderIntersection.First, (StartPoint - InfiniteCylinderIntersection.First).GetSafeNormal()).FindClosestIntersection(StartPoint, EndPoint, 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Intersections .)",
    "insertText": "Add(MakePair((FReal)(UnprojectedIntersection.First - StartPoint).Size(), UnprojectedIntersection.First))"
  },
  {
    "label": "FindClosestIntersection()",
    "kind": "Method",
    "detail": "Function (} auto Plane1Intersection = MPlane1 .)",
    "insertText": "FindClosestIntersection(StartPoint, EndPoint, Thickness)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (Intersections .)",
    "insertText": "Sort([](const Pair<FReal, FVec3>& Elem1, const Pair<FReal, FVec3>& Elem2) { return Elem1.First < Elem2.First; })"
  },
  {
    "label": "MakePair()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "MakePair(FVec3(0), false)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (const uint32 PlaneHashes =)",
    "insertText": "HashCombine(MPlane1.GetTypeHash(), MPlane2.GetTypeHash())"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (const uint32 PropertyHash =)",
    "insertText": "HashCombine(::GetTypeHash(MHeight), ::GetTypeHash(MRadius))"
  },
  {
    "label": "FCylinder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCylinder() : FImplicitObject(EImplicitObject::HasBoundingBox, ImplicitObjectType::Cylinder)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (} FImplicitObject ; private : TPlane<FReal,3> MPlane1,MPlane2 ; FReal MHeight,MRadius ; FAABB3 MLocalBoundingBox ; } ; struct FCylinderSpecializeSamplingHelper { void)",
    "insertText": "ComputeSamplePoints(TArray<FVec3>& Points, const FCylinder& Cylinder, const int32 NumPoints, const bool IncludeEndCaps = true)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 Offset = Points .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Points .)",
    "insertText": "SetNumUninitialized(Offset + 1)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (} else { Points .)",
    "insertText": "SetNumUninitialized(Offset + 3)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (} return ; })",
    "insertText": "ComputeGoldenSpiralPoints(Points, Cylinder, NumPoints, IncludeEndCaps)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeGoldenSpiralPoints(TArray<FVec3>& Points, const FCylinder& Cylinder, const int32 NumPoints, const bool IncludeEndCaps = true)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGoldenSpiralPoints(Points, Cylinder.GetOrigin(), Cylinder.GetAxis(), Cylinder.GetRadius(), Cylinder.GetHeight(), NumPoints, IncludeEndCaps)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeGoldenSpiralPoints(TArray<FVec3>& Points, const FVec3& Origin, const FVec3& Axis, const FReal Radius, const FReal Height, const int32 NumPoints, const bool IncludeEndCaps = true, int32 SpiralSeed = 0)"
  },
  {
    "label": "ComputeGoldenSpiralPointsUnoriented()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGoldenSpiralPointsUnoriented(Points, Radius, Height, NumPoints, IncludeEndCaps, SpiralSeed)"
  },
  {
    "label": "FromRotatedVector()",
    "kind": "Method",
    "detail": "Function (const FReal HalfHeight = Height / 2 ; const FRotation3 Rotation =)",
    "insertText": "FromRotatedVector(FVec3(0, 0, 1), Axis)"
  },
  {
    "label": "RotateVector()",
    "kind": "Method",
    "detail": "Function (FVec3& Point = Points [ i ] ; const FVec3 PointNew = Rotation .)",
    "insertText": "RotateVector(Point + FVec3(0, 0, HalfHeight))"
  },
  {
    "label": "ComputeGoldenSpiralPointsUnoriented()",
    "kind": "Method",
    "detail": "Function (Point = PointNew ; } } void)",
    "insertText": "ComputeGoldenSpiralPointsUnoriented(TArray<FVec3>& Points, const FReal Radius, const FReal Height, const int32 NumPoints, const bool IncludeEndCaps = true, int32 SpiralSeed = 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 NumPointsEndCap ; int32 NumPointsCylinder ;)",
    "insertText": "if(IncludeEndCaps)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FReal CapArea = UE_PI* Radius* Radius ; const FReal CylArea = static_cast<)",
    "insertText": "FReal(2.0 * UE_PI * Radius * Height)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReal AllArea = CylArea + CapArea* 2 ;)",
    "insertText": "if(AllArea > UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (NumPointsCylinder = static_cast<)",
    "insertText": "int32(round(CylArea / AllArea * (FReal)NumPoints))"
  },
  {
    "label": "NumPointsCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NumPointsCylinder(NumPoints - NumPointsCylinder)"
  },
  {
    "label": "NumPointsEndCap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NumPointsEndCap(NumPoints - NumPointsCylinder)"
  },
  {
    "label": "NumPointsEndCap()",
    "kind": "Method",
    "detail": "Function (} else { NumPointsCylinder = 0 ;)",
    "insertText": "NumPointsEndCap(NumPoints - (NumPoints % 2))"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} } else { NumPointsCylinder = NumPoints ; NumPointsEndCap = 0 ; } const int32 NumPointsToAdd = NumPointsCylinder + NumPointsEndCap* 2 ; Points .)",
    "insertText": "Reserve(Points.Num() + NumPointsToAdd)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (const FReal HalfHeight = Height / 2 ; TArray<FVec2> Points2D ; Points2D .)",
    "insertText": "Reserve(NumPointsEndCap)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (TSphereSpecializeSamplingHelper<FReal,2)",
    "insertText": "ComputeGoldenSpiralPoints(Points2D, FVec2((FReal)0.0), Radius, NumPointsEndCap, SpiralSeed)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (Offset = Points .)",
    "insertText": "AddUninitialized(Points2D.Num())"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (const FVec2& Pt = Points2D [ i ] ;)",
    "insertText": "checkSlow(Pt.Size() < Radius + UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (Points [ i + Offset ] =)",
    "insertText": "FVec3(Pt[0], Pt[1], -HalfHeight)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (} Offset = Points .)",
    "insertText": "AddUninitialized(NumPointsCylinder)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FReal Increment = static_cast<)",
    "insertText": "FReal(UE_PI * (1.0 + sqrt(5)))"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (const FReal R = Radius ; const FReal Theta =)",
    "insertText": "Increment(0.5f + (FReal)i + (FReal)SpiralSeed)"
  },
  {
    "label": "LerpStable()",
    "kind": "Method",
    "detail": "Function (const FReal Z =)",
    "insertText": "LerpStable(-HalfHeight, HalfHeight, static_cast<FReal>(i) / (static_cast<FReal>(NumPointsCylinder) - 1))"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (Points [ i + Offset ] =)",
    "insertText": "FVec3(R * FMath::Cos(Theta), R * FMath::Sin(Theta), Z)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Points2D .)",
    "insertText": "Reset()"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (Points [ i + Offset ] =)",
    "insertText": "FVec3(Pt[0], Pt[1], HalfHeight)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (} } } } ; TArray<FVec3>)",
    "insertText": "ComputeSamplePoints(const int32 NumPoints, const bool IncludeEndCaps)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (TArray<FVec3> Points ;)",
    "insertText": "ComputeSamplePoints(Points, *this, NumPoints, IncludeEndCaps)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSamplePoints(Points, FCylinder(MPlane1.X() - Mid, MPlane2.X() - Mid, GetRadius()), NumPoints, IncludeEndCaps)"
  }
]