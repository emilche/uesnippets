[
  {
    "label": "IUMGDesigner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IUMGDesigner"
  },
  {
    "label": "UCanvasPanelSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvasPanelSlot"
  },
  {
    "label": "UPanelSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPanelSlot"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "STransformHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STransformHandle"
  },
  {
    "label": "FScopedTransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTransaction"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Layout / Margin . h \" # include \" Layout / Visibility . h \" # include \" Math / Vector2D . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" class IUMGDesigner ; class UCanvasPanelSlot ; class UPanelSlot ; struct FGeometry ; struct FPointerEvent ; namespace ETransformDirection { enum Type { TopLeft = 0,TopCenter,TopRight,CenterLeft,CenterRight,BottomLeft,BottomCenter,BottomRight,MAX } ; } enum class ETransformAction { None,Primary,Secondary } ; class STransformHandle : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(STransformHandle)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, IUMGDesigner* InDesigner, ETransformDirection::Type InTransformDirection)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "GetHandleVisibility()",
    "kind": "Method",
    "detail": "Function (protected : EVisibility)",
    "insertText": "GetHandleVisibility()"
  },
  {
    "label": "CanResize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanResize(UPanelSlot* Slot, const FVector2D& Direction)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(UCanvasPanelSlot* Slot, const FVector2D& Direction, const FVector2D& Amount)"
  },
  {
    "label": "ComputeActionAtLocation()",
    "kind": "Method",
    "detail": "Function (ETransformAction)",
    "insertText": "ComputeActionAtLocation(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ComputeDragDirection()",
    "kind": "Method",
    "detail": "Function (protected : FVector2D)",
    "insertText": "ComputeDragDirection(ETransformDirection::Type InTransformDirection)"
  },
  {
    "label": "ComputeOrigin()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeOrigin(ETransformDirection::Type InTransformDirection)"
  }
]