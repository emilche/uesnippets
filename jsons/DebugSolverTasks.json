[
  {
    "label": "FPhysicsSolverBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsSolverBase"
  },
  {
    "label": "FDebugSolverTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugSolverTask"
  },
  {
    "label": "FAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncTask"
  },
  {
    "label": "FDebugSolverTasks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugSolverTasks"
  },
  {
    "label": "FDebugSolverTask()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Framework / DebugSubstep . h \" # include \" Templates / Function . h \" # include \" Chaos / Declares . h \" # if CHAOS_DEBUG_SUBSTEP # include \" Async / AsyncWork . h \" namespace Chaos { class FPhysicsSolverBase ; class FDebugSolverTask final : public FNonAbandonableTask { class FAsyncTask<FDebugSolverTask> ; public :)",
    "insertText": "FDebugSolverTask(TFunction<void()> InStepFunction, FDebugSubstep& InDebugSubstep)"
  },
  {
    "label": "FDebugSolverTask()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDebugSolverTask()"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoWork()"
  },
  {
    "label": "FDebugSolverTask()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FDebugSolverTask(const FDebugSolverTask&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FDebugSolverTask&)",
    "insertText": "operator(const FDebugSolverTask&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} private : TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FDebugSolverTasks()",
    "kind": "Method",
    "detail": "Function (FDebugSubstep& DebugSubstep ; } ; class FDebugSolverTasks final { public :)",
    "insertText": "FDebugSolverTasks() : SolverToTaskMap()"
  },
  {
    "label": "FDebugSolverTasks()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDebugSolverTasks()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(FPhysicsSolverBase* Solver)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(FPhysicsSolverBase* Solver)"
  },
  {
    "label": "DebugStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugStep(FPhysicsSolverBase* Solver, TFunction<void()> StepFunction)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(FPhysicsSolverBase*)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(FPhysicsSolverBase*)"
  },
  {
    "label": "DebugStep()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DebugStep(FPhysicsSolverBase* , TFunction<void()> StepFunction)"
  },
  {
    "label": "StepFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepFunction()"
  }
]