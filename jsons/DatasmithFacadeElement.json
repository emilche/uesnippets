[
  {
    "label": "FDatasmithFacadeScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithFacadeScene"
  },
  {
    "label": "DATASMITHFACADE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DATASMITHFACADE_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SetCoordinateSystemType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DatasmithSceneFactory . h \" class FDatasmithFacadeScene ; class FDatasmithFacadeElement { class FDatasmithFacadeScene ; public : enum class ECoordinateSystemType { LeftHandedYup,LeftHandedZup,RightHandedZup } ; public : void)",
    "insertText": "SetCoordinateSystemType(ECoordinateSystemType InWorldCoordinateSystemType)"
  },
  {
    "label": "SetWorldUnitScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldUnitScale(float InWorldUnitScale)"
  },
  {
    "label": "FDatasmithFacadeElement()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDatasmithFacadeElement()"
  },
  {
    "label": "GetStringHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetStringHash(const TCHAR* InString, TCHAR OutBuffer[33], size_t BufferSize)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetName(const TCHAR* InElementName)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "SetLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLabel(const TCHAR* InElementLabel)"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetLabel()"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (# ifdef SWIG_FACADE protected : # endif template<bool kIsForward,bool kIsDirection,Vec_t> Vec_t)",
    "insertText": "Convert(const Vec_t& V)"
  },
  {
    "label": "ConvertDirection()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertDirection(const FVector& In)"
  },
  {
    "label": "ConvertBackDirection()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertBackDirection(const FVector& In)"
  },
  {
    "label": "ConvertPosition()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertPosition(const FVector& In)"
  },
  {
    "label": "ConvertBackPosition()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertBackPosition(const FVector& In)"
  },
  {
    "label": "ConvertDirection()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertDirection(double InX, double InY, double InZ)"
  },
  {
    "label": "ConvertBackDirection()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertBackDirection(double InX, double InY, double InZ)"
  },
  {
    "label": "ConvertPosition()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertPosition(double InX, double InY, double InZ)"
  },
  {
    "label": "ConvertBackPosition()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertBackPosition(double InX, double InY, double InZ)"
  },
  {
    "label": "ConvertDirection()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "ConvertDirection(const FVector3f& In)"
  },
  {
    "label": "ConvertBackDirection()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "ConvertBackDirection(const FVector3f& In)"
  },
  {
    "label": "ConvertPosition()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "ConvertPosition(const FVector3f& In)"
  },
  {
    "label": "ConvertBackPosition()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "ConvertBackPosition(const FVector3f& In)"
  },
  {
    "label": "ConvertDirection()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "ConvertDirection(float InX, float InY, float InZ)"
  },
  {
    "label": "ConvertBackDirection()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "ConvertBackDirection(float InX, float InY, float InZ)"
  },
  {
    "label": "ConvertPosition()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "ConvertPosition(float InX, float InY, float InZ)"
  },
  {
    "label": "ConvertBackPosition()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "ConvertBackPosition(float InX, float InY, float InZ)"
  },
  {
    "label": "ConvertTranslation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertTranslation(FVector const& InVertex)"
  },
  {
    "label": "ConvertTranslation()",
    "kind": "Method",
    "detail": "Function (} FVector3f)",
    "insertText": "ConvertTranslation(FVector3f const& InVertex)"
  },
  {
    "label": "ExportAsset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExportAsset(FString const& InAssetFolder)"
  },
  {
    "label": "GetDatasmithElement()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IDatasmithElement>&)",
    "insertText": "GetDatasmithElement()"
  }
]