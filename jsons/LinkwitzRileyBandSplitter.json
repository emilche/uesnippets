[
  {
    "label": "FLinkwitzRileyBandFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinkwitzRileyBandFilter"
  },
  {
    "label": "FMultibandBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMultibandBuffer"
  },
  {
    "label": "FLinkwitzRileyBandSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkwitzRileyBandSplitter"
  },
  {
    "label": "FCrossoverBandwidthPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrossoverBandwidthPair"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Filter . h \" # include \" DSP / VariablePoleFilter . h \" # include \" DSP / BufferVectorOperations . h \" # define MAX_BUFFER_SIZE 8 1 9 2 namespace Audio { struct FLinkwitzRileyBandFilter { TArray<FVariablePoleFilter> Filters ; FVariablePoleFilter&)",
    "insertText": "operator(int32 InIndex)"
  },
  {
    "label": "FMultibandBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMultibandBuffer(int32 InBands, int32 InSamples) : NumBands(InBands) , NumSamples(InSamples)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "SetNumZeroed(InBands * InSamples)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(int32 InBands, int32 InSamples)"
  },
  {
    "label": "SetBands()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBands(int32 InBands)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (NumBands = InBands ;)",
    "insertText": "Reset()"
  },
  {
    "label": "SetSamples()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSamples(int32 InSamples)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "Reset(NumSamples * NumBands)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "AddZeroed(NumSamples * NumBands)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} float*)",
    "insertText": "operator(int32 BandIndex)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Init(const int32 InChannels, const float InSampleRate, const EFilterOrder FilterOrder, const bool bInPhaseCompensate, const TArray<float>& InCrossovers)"
  },
  {
    "label": "ProcessAudioFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioFrame(const float* InBuffer, FMultibandBuffer& OutBuffer)"
  },
  {
    "label": "ProcessAudioBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioBuffer(const float* InBuffer, FMultibandBuffer& OutBuffer, const int32 NumFrames)"
  },
  {
    "label": "SetCrossovers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrossovers(const TArray<float>& InCrossoverFrequencies)"
  },
  {
    "label": "CopyToBuffer()",
    "kind": "Method",
    "detail": "Function (private : EFilterOrder FilterOrder = EFilterOrder::FourPole ; int32 NumBands = 1 ; int32 NumChannels = 2 ; float SampleRate = 4 8 0 0 0 . f ; TArray<float> SharedBuffer ; TArray<float> BandWorkBuffer ; FAlignedFloatBuffer SharedAlignedBuffer ; FAlignedFloatBuffer BandAlignedBuffer ; TArray<FLinkwitzRileyBandFilter> BandFilters ; TArray<FCrossoverBandwidthPair> Crossovers ; void)",
    "insertText": "CopyToBuffer(float* Destination, const float* Origin, const int32 NumSamples)"
  },
  {
    "label": "InvertBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvertBuffer(float* Buffer, const int32 NumSamples)"
  },
  {
    "label": "GetQ()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetQ(EFilterOrder InFilterOrder)"
  }
]