[
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "UPhysicsAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsAsset"
  },
  {
    "label": "UPhysicsConstraintTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsConstraintTemplate"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "EPhysAssetFitGeomType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPhysAssetFitGeomType"
  },
  {
    "label": "EPhysAssetFitVertWeight",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPhysAssetFitVertWeight"
  },
  {
    "label": "FPhysAssetCreateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysAssetCreateParams"
  },
  {
    "label": "UPhysicsAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsAsset"
  },
  {
    "label": "UPhysicsConstraintTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsConstraintTemplate"
  },
  {
    "label": "FBoneVertInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneVertInfo"
  },
  {
    "label": "CreateFromSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateFromSkeletalMesh(UPhysicsAsset* PhysicsAsset, USkeletalMesh* SkelMesh, const FPhysAssetCreateParams& Params, FText& OutErrorMessage, bool bSetToMesh = true, bool bShowProgress = true)"
  },
  {
    "label": "CreateCollisionFromBone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateCollisionFromBone( UBodySetup* bs, USkeletalMesh* skelMesh, int32 BoneIndex, const FPhysAssetCreateParams& Params, const FBoneVertInfo& Info )"
  },
  {
    "label": "CreateCollisionFromBones()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateCollisionFromBones( UBodySetup* bs, USkeletalMesh* skelMesh, const TArray<int32>& BoneIndices, FPhysAssetCreateParams& Params, const FBoneVertInfo& Info )"
  },
  {
    "label": "CreateCollisionsFromBones()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateCollisionsFromBones(UPhysicsAsset* PhysicsAsset, USkeletalMesh* SkelMesh, const TArray<int32>& BodyIndices, const FPhysAssetCreateParams& Params, const TArray<FBoneVertInfo>& Infos, TArray<int32>& OutSuccessfulBodyIndices)"
  },
  {
    "label": "WeldBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WeldBodies(UPhysicsAsset* PhysAsset, int32 BaseBodyIndex, int32 AddBodyIndex, USkeletalMeshComponent* SkelComp)"
  },
  {
    "label": "CreateNewConstraint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CreateNewConstraint(UPhysicsAsset* PhysAsset, FName InConstraintName, UPhysicsConstraintTemplate* InConstraintSetup = NULL)"
  },
  {
    "label": "DestroyConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyConstraint(UPhysicsAsset* PhysAsset, int32 ConstraintIndex)"
  },
  {
    "label": "CreateNewBody()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CreateNewBody(UPhysicsAsset* PhysAsset, FName InBodyName, const FPhysAssetCreateParams& Params)"
  },
  {
    "label": "DestroyBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyBody(UPhysicsAsset* PhysAsset, int32 BodyIndex)"
  },
  {
    "label": "CanCreateConstraints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCreateConstraints()"
  },
  {
    "label": "SanitizeRestrictedContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SanitizeRestrictedContent(UPhysicsAsset* PhysAsset)"
  }
]