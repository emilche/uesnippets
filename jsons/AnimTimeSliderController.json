[
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FContextMenuSuppressor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContextMenuSuppressor"
  },
  {
    "label": "FScrubRangeToScreen",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScrubRangeToScreen"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FAnimModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimModel"
  },
  {
    "label": "FPaintSectionAreaViewArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPaintSectionAreaViewArgs"
  },
  {
    "label": "FAnimTimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimTimeSliderController"
  },
  {
    "label": "FDrawTickArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDrawTickArgs"
  },
  {
    "label": "FScrubPixelRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScrubPixelRange"
  },
  {
    "label": "DragType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DragType"
  },
  {
    "label": "FPaintSectionAreaViewArgs()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" TimeSliderArgs . h \" # include \" AnimTimeline / SAnimTimeline . h \" class FSlateWindowElementList ; struct FContextMenuSuppressor ; struct FScrubRangeToScreen ; struct FSlateBrush ; class FAnimModel ; struct FPaintSectionAreaViewArgs {)",
    "insertText": "FPaintSectionAreaViewArgs() : bDisplayTickLines(false), bDisplayScrubPosition(false)"
  },
  {
    "label": "FAnimTimeSliderController()",
    "kind": "Method",
    "detail": "Function (} bool bDisplayTickLines ; bool bDisplayScrubPosition ; TOptional<FPaintPlaybackRangeArgs> PlaybackRangeArgs ; } ; class FAnimTimeSliderController : public ITimeSliderController { public :)",
    "insertText": "FAnimTimeSliderController(const FTimeSliderArgs& InArgs, TWeakPtr<FAnimModel> InWeakModel, TWeakPtr<SAnimTimeline> InWeakTimeline, TSharedPtr<INumericTypeInterface<double>> InSecondaryNumericTypeInterface)"
  },
  {
    "label": "DetermineOptimalSpacing()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DetermineOptimalSpacing(float InPixelsPerInput, uint32 MinTick, float MinTickSpacing)"
  },
  {
    "label": "OnPaintTimeSlider()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaintTimeSlider(bool bMirrorLabels, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnPaintViewArea()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaintViewArea(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, bool bEnabled, const FPaintViewAreaArgs& Args)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(SWidget& WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(SWidget& WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(SWidget& WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(SWidget& WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(TSharedRef<const SWidget> WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "SetViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewRange(double NewRangeMin, double NewRangeMax, EViewRangeInterpolation Interpolation)"
  },
  {
    "label": "SetClampRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClampRange(double NewRangeMin, double NewRangeMax)"
  },
  {
    "label": "SetPlayRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayRange(FFrameNumber RangeStart, int32 RangeDuration)"
  },
  {
    "label": "GetDisplayRate()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetDisplayRate()"
  },
  {
    "label": "GetTickResolution()",
    "kind": "Method",
    "detail": "Function (} FFrameRate)",
    "insertText": "GetTickResolution()"
  },
  {
    "label": "GetViewRange()",
    "kind": "Method",
    "detail": "Function (} FAnimatedRange)",
    "insertText": "GetViewRange()"
  },
  {
    "label": "GetClampRange()",
    "kind": "Method",
    "detail": "Function (} FAnimatedRange)",
    "insertText": "GetClampRange()"
  },
  {
    "label": "GetPlayRange()",
    "kind": "Method",
    "detail": "Function (} TRange<FFrameNumber>)",
    "insertText": "GetPlayRange()"
  },
  {
    "label": "GetScrubPosition()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "GetScrubPosition()"
  },
  {
    "label": "SetScrubPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetScrubPosition(FFrameTime InTime, bool bEvaluate)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (TimeSliderArgs . OnScrubPositionChanged .)",
    "insertText": "ExecuteIfBound(InTime, false, bEvaluate)"
  },
  {
    "label": "ClampViewRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClampViewRange(double& NewRangeMin, double& NewRangeMax)"
  },
  {
    "label": "ZoomByDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ZoomByDelta(float InDelta, float ZoomBias = 0.5f)"
  },
  {
    "label": "PanByDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PanByDelta(float InDelta)"
  },
  {
    "label": "GetFrameTimeFromMouse()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "GetFrameTimeFromMouse(const FGeometry& Geometry, FVector2D ScreenSpacePosition)"
  },
  {
    "label": "CommitScrubPosition()",
    "kind": "Method",
    "detail": "Function (private : struct FDrawTickArgs ; struct FScrubRangeToScreen ; void)",
    "insertText": "CommitScrubPosition(FFrameTime NewValue, bool bIsScrubbing)"
  },
  {
    "label": "DrawTicks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTicks(FSlateWindowElementList& OutDrawElements, const TRange<double>& ViewRange, const FScrubRangeToScreen& RangeToScreen, FDrawTickArgs& InArgs)"
  },
  {
    "label": "DrawSelectionRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawSelectionRange(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FScrubRangeToScreen& RangeToScreen, const FPaintPlaybackRangeArgs& Args)"
  },
  {
    "label": "DrawPlaybackRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawPlaybackRange(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FScrubRangeToScreen& RangeToScreen, const FPaintPlaybackRangeArgs& Args)"
  },
  {
    "label": "HitTestRangeStart()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "HitTestRangeStart(const FScrubRangeToScreen& RangeToScreen, const TRange<double>& Range, float HitPixel)"
  },
  {
    "label": "HitTestRangeEnd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HitTestRangeEnd(const FScrubRangeToScreen& RangeToScreen, const TRange<double>& Range, float HitPixel)"
  },
  {
    "label": "HitTestTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HitTestTime(const FScrubRangeToScreen& RangeToScreen, double Time, float HitPixel)"
  },
  {
    "label": "HitTestTimes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "HitTestTimes(const FScrubRangeToScreen& RangeToScreen, float HitPixel)"
  },
  {
    "label": "SetPlaybackRangeStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackRangeStart(FFrameNumber NewStart)"
  },
  {
    "label": "SetPlaybackRangeEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackRangeEnd(FFrameNumber NewEnd)"
  },
  {
    "label": "SetSelectionRangeStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRangeStart(FFrameNumber NewStart)"
  },
  {
    "label": "SetSelectionRangeEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRangeEnd(FFrameNumber NewEnd)"
  },
  {
    "label": "OpenSetPlaybackRangeMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OpenSetPlaybackRangeMenu(FFrameNumber FrameNumber)"
  },
  {
    "label": "ComputeFrameTimeFromMouse()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "ComputeFrameTimeFromMouse(const FGeometry& Geometry, FVector2D ScreenSpacePosition, FScrubRangeToScreen RangeToScreen, bool CheckSnapping = true)"
  },
  {
    "label": "GetHitTestScrubberPixelRange()",
    "kind": "Method",
    "detail": "Function (private : struct FScrubPixelRange { TRange<float> Range ; TRange<float> HandleRange ; bool bClamped ; } ; FScrubPixelRange)",
    "insertText": "GetHitTestScrubberPixelRange(FFrameTime ScrubTime, const FScrubRangeToScreen& RangeToScreen)"
  },
  {
    "label": "GetScrubberPixelRange()",
    "kind": "Method",
    "detail": "Function (FScrubPixelRange)",
    "insertText": "GetScrubberPixelRange(FFrameTime ScrubTime, const FScrubRangeToScreen& RangeToScreen)"
  },
  {
    "label": "GetScrubberPixelRange()",
    "kind": "Method",
    "detail": "Function (FScrubPixelRange)",
    "insertText": "GetScrubberPixelRange(FFrameTime ScrubTime, FFrameRate Resolution, FFrameRate PlayRate, const FScrubRangeToScreen& RangeToScreen, float DilationPixels = 0.f)"
  },
  {
    "label": "SetEditableTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditableTime(int32 TimeIndex, float Time, bool bIsDragging)"
  },
  {
    "label": "DrawEditableTimes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawEditableTimes(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FScrubRangeToScreen& RangeToScreen)"
  }
]