[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__libcpp_is_nothrow_destructible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__libcpp_is_nothrow_destructible"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "__libcpp_nothrow_destructor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__libcpp_nothrow_destructor"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_IS_NOTHROW_DESTRUCTIBLE_H # define _LIBCPP___TYPE_TRAITS_IS_NOTHROW_DESTRUCTIBLE_H # include<__config> # include<__type_traits / add_const . h> # include<__type_traits / integral_constant . h> # include<__type_traits / is_destructible . h> # include<__type_traits / is_reference . h> # include<__type_traits / is_scalar . h> # include<__type_traits / remove_all_extents . h> # include<__utility / declval . h> # include<cstddef> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if !defined(_LIBCPP_CXX03_LANG)"
  },
  {
    "label": "noexcept()",
    "kind": "Method",
    "detail": "Function (template<class _Tp> struct __libcpp_is_nothrow_destructible<false,_Tp> : public false_type { } ; template<class _Tp> struct __libcpp_is_nothrow_destructible<true,_Tp> : public integral_constant<bool,)",
    "insertText": "noexcept(declval<_Tp>().~_Tp())"
  }
]