[
  {
    "label": "CodecBufferUsage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CodecBufferUsage"
  },
  {
    "label": "GenericFrameInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GenericFrameInfo"
  },
  {
    "label": "Builder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Builder"
  },
  {
    "label": "CodecBufferUsage()",
    "kind": "Method",
    "detail": "Function (# ifndef COMMON_VIDEO_GENERIC_FRAME_DESCRIPTOR_GENERIC_FRAME_INFO_H_ # define COMMON_VIDEO_GENERIC_FRAME_DESCRIPTOR_GENERIC_FRAME_INFO_H_ # include<bitset> # include<initializer_list> # include<vector> # include \" absl / container / inlined_vector . h \" # include \" absl / strings / string_view . h \" # include \" api / transport / rtp / dependency_descriptor . h \" # include \" api / video / video_codec_constants . h \" namespace webrtc { struct CodecBufferUsage {)",
    "insertText": "CodecBufferUsage(int id, bool referenced, bool updated) : id(id), referenced(referenced), updated(updated)"
  },
  {
    "label": "GenericFrameInfo()",
    "kind": "Method",
    "detail": "Function (} int id = 0 ; bool referenced = false ; bool updated = false ; } ; struct GenericFrameInfo : public FrameDependencyTemplate { class Builder ;)",
    "insertText": "GenericFrameInfo()"
  },
  {
    "label": "GenericFrameInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericFrameInfo(const GenericFrameInfo&)"
  },
  {
    "label": "Builder()",
    "kind": "Method",
    "detail": "Function (absl::InlinedVector<CodecBufferUsage,kMaxEncoderBuffers> encoder_buffers ; std::vector<bool> part_of_chain ; std::bitset<3 2> active_decode_targets = ~ uint32_t { 0 } ; } ; class GenericFrameInfo::Builder { public :)",
    "insertText": "Builder()"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (GenericFrameInfo)",
    "insertText": "Build()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Builder&)",
    "insertText": "T(int temporal_id)"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (Builder&)",
    "insertText": "S(int spatial_id)"
  },
  {
    "label": "Dtis()",
    "kind": "Method",
    "detail": "Function (Builder&)",
    "insertText": "Dtis(absl::string_view indication_symbols)"
  }
]