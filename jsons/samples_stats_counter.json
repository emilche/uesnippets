[
  {
    "label": "SamplesStatsCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SamplesStatsCounter"
  },
  {
    "label": "StatsSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StatsSample"
  },
  {
    "label": "SamplesStatsCounter()",
    "kind": "Method",
    "detail": "Function (# ifndef API_NUMERICS_SAMPLES_STATS_COUNTER_H_ # define API_NUMERICS_SAMPLES_STATS_COUNTER_H_ # include<map> # include<string> # include<vector> # include \" api / array_view . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / numerics / running_statistics . h \" namespace webrtc { class SamplesStatsCounter { public : struct StatsSample { double value ; Timestamp time ; std::map<std::string,std::string> metadata ; } ;)",
    "insertText": "SamplesStatsCounter()"
  },
  {
    "label": "SamplesStatsCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SamplesStatsCounter(size_t expected_samples_count)"
  },
  {
    "label": "SamplesStatsCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SamplesStatsCounter(const SamplesStatsCounter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SamplesStatsCounter&)",
    "insertText": "operator(const SamplesStatsCounter&)"
  },
  {
    "label": "SamplesStatsCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SamplesStatsCounter(SamplesStatsCounter&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SamplesStatsCounter&)",
    "insertText": "operator(SamplesStatsCounter&&)"
  },
  {
    "label": "AddSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSample(double value)"
  },
  {
    "label": "AddSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSample(StatsSample sample)"
  },
  {
    "label": "AddSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSamples(const SamplesStatsCounter& other)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "NumSamples()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "NumSamples()"
  },
  {
    "label": "GetMin()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetMin()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(!IsEmpty())"
  },
  {
    "label": "GetMax()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetMax()"
  },
  {
    "label": "GetAverage()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetAverage()"
  },
  {
    "label": "GetVariance()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetVariance()"
  },
  {
    "label": "GetStandardDeviation()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetStandardDeviation()"
  },
  {
    "label": "GetPercentile()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetPercentile(double percentile)"
  },
  {
    "label": "GetTimedSamples()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const StatsSample>)",
    "insertText": "GetTimedSamples()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (std::vector<double> out ; out .)",
    "insertText": "reserve(samples_.size())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (out .)",
    "insertText": "push_back(sample.value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return out ; } private : webrtc_impl::RunningStatistics<double> stats_ ; std::vector<StatsSample> samples_ ; bool sorted_ = false ; } ; SamplesStatsCounter)",
    "insertText": "operator(const SamplesStatsCounter& counter, double value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SamplesStatsCounter)",
    "insertText": "operator(double value, const SamplesStatsCounter& counter)"
  }
]