[
  {
    "label": "__celt_check_mode_ptr_ptr()",
    "kind": "Method",
    "detail": "Function (# ifndef CELT_H # define CELT_H # include \" opus_types . h \" # include \" opus_defines . h \" # include \" opus_custom . h \" # include \" entenc . h \" # include \" entdec . h \" # include \" arch . h \" # ifdef __cplusplus \" C \" { # endif # define CELTEncoder OpusCustomEncoder # define CELTDecoder OpusCustomDecoder # define CELTMode OpusCustomMode # define LEAK_BANDS 1 9 typedef struct { int valid ; float tonality ; float tonality_slope ; float noisiness ; float activity ; float music_prob ; float music_prob_min ; float music_prob_max ; int bandwidth ; float activity_probability ; float max_pitch_ratio ; unsigned char leak_boost [ LEAK_BANDS ] ; } AnalysisInfo ; typedef struct { int signalType ; int offset ; } SILKInfo ; # define)",
    "insertText": "__celt_check_mode_ptr_ptr(ptr) ((ptr) + ((ptr) - (const CELTMode**)(ptr))) #define __celt_check_analysis_ptr(ptr) ((ptr) + ((ptr) - (const AnalysisInfo*)(ptr))) #define __celt_check_silkinfo_ptr(ptr) ((ptr) + ((ptr) - (const SILKInfo*)(ptr))) #define CELT_SET_PREDICTION_REQUEST 10002 #define CELT_SET_PREDICTION(x) CELT_SET_PREDICTION_REQUEST, __opus_check_int(x) #define CELT_SET_INPUT_CLIPPING_REQUEST 10004 #define CELT_SET_INPUT_CLIPPING(x) CELT_SET_INPUT_CLIPPING_REQUEST, __opus_check_int(x) #define CELT_GET_AND_CLEAR_ERROR_REQUEST 10007 #define CELT_GET_AND_CLEAR_ERROR(x) CELT_GET_AND_CLEAR_ERROR_REQUEST, __opus_check_int_ptr(x) #define CELT_SET_CHANNELS_REQUEST 10008 #define CELT_SET_CHANNELS(x) CELT_SET_CHANNELS_REQUEST, __opus_check_int(x) #define CELT_SET_START_BAND_REQUEST 10010 #define CELT_SET_START_BAND(x) CELT_SET_START_BAND_REQUEST, __opus_check_int(x) #define CELT_SET_END_BAND_REQUEST 10012 #define CELT_SET_END_BAND(x) CELT_SET_END_BAND_REQUEST, __opus_check_int(x) #define CELT_GET_MODE_REQUEST 10015 #define CELT_GET_MODE(x) CELT_GET_MODE_REQUEST, __celt_check_mode_ptr_ptr(x) #define CELT_SET_SIGNALLING_REQUEST 10016 #define CELT_SET_SIGNALLING(x) CELT_SET_SIGNALLING_REQUEST, __opus_check_int(x) #define CELT_SET_TONALITY_REQUEST 10018 #define CELT_SET_TONALITY(x) CELT_SET_TONALITY_REQUEST, __opus_check_int(x) #define CELT_SET_TONALITY_SLOPE_REQUEST 10020 #define CELT_SET_TONALITY_SLOPE(x) CELT_SET_TONALITY_SLOPE_REQUEST, __opus_check_int(x) #define CELT_SET_ANALYSIS_REQUEST 10022 #define CELT_SET_ANALYSIS(x) CELT_SET_ANALYSIS_REQUEST, __celt_check_analysis_ptr(x) #define OPUS_SET_LFE_REQUEST 10024 #define OPUS_SET_LFE(x) OPUS_SET_LFE_REQUEST, __opus_check_int(x) #define OPUS_SET_ENERGY_MASK_REQUEST 10026 #define OPUS_SET_ENERGY_MASK(x) OPUS_SET_ENERGY_MASK_REQUEST, __opus_check_val16_ptr(x) #define CELT_SET_SILK_INFO_REQUEST 10028 #define CELT_SET_SILK_INFO(x) CELT_SET_SILK_INFO_REQUEST, __celt_check_silkinfo_ptr(x) int celt_encoder_get_size(int channels)"
  },
  {
    "label": "celt_encode_with_ec()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "celt_encode_with_ec(OpusCustomEncoder * OPUS_RESTRICT st, const opus_val16 * pcm, int frame_size, unsigned char *compressed, int nbCompressedBytes, ec_enc *enc)"
  },
  {
    "label": "celt_encoder_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "celt_encoder_init(CELTEncoder *st, opus_int32 sampling_rate, int channels, int arch)"
  },
  {
    "label": "celt_decoder_get_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "celt_decoder_get_size(int channels)"
  },
  {
    "label": "celt_decoder_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "celt_decoder_init(CELTDecoder *st, opus_int32 sampling_rate, int channels)"
  },
  {
    "label": "celt_decode_with_ec()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "celt_decode_with_ec(OpusCustomDecoder * OPUS_RESTRICT st, const unsigned char *data, int len, opus_val16 * OPUS_RESTRICT pcm, int frame_size, ec_dec *dec, int accum)"
  },
  {
    "label": "toOpus()",
    "kind": "Method",
    "detail": "Function (# define celt_encoder_ctl opus_custom_encoder_ctl # define celt_decoder_ctl opus_custom_decoder_ctl # ifdef CUSTOM_MODES # define OPUS_CUSTOM_NOSTATIC # else # define OPUS_CUSTOM_NOSTATIC OPUS_INLINE # endif const unsigned char trim_icdf [ 1 1 ] = { 1 2 6,1 2 4,1 1 9,1 0 9,8 7,4 1,1 9,9,4,2,0 } ; const unsigned char spread_icdf [ 4 ] = { 2 5,2 3,2,0 } ; const unsigned char tapset_icdf [ 3 ] = { 2,1,0 } ; # ifdef CUSTOM_MODES const unsigned char toOpusTable [ 2 0 ] = { 0 xE0,0 xE8,0 xF0,0 xF8,0 xC0,0 xC8,0 xD0,0 xD8,0 xA0,0 xA8,0 xB0,0 xB8,0 x00,0 x00,0 x00,0 x00,0 x80,0 x88,0 x90,0 x98,} ; const unsigned char fromOpusTable [ 1 6 ] = { 0 x80,0 x88,0 x90,0 x98,0 x40,0 x48,0 x50,0 x58,0 x20,0 x28,0 x30,0 x38,0 x00,0 x08,0 x10,0 x18 } ; OPUS_INLINE int)",
    "insertText": "toOpus(unsigned char c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int ret = 0 ;)",
    "insertText": "if(c<0xA0)"
  },
  {
    "label": "fromOpus()",
    "kind": "Method",
    "detail": "Function (} OPUS_INLINE int)",
    "insertText": "fromOpus(unsigned char c)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # define COMBFILTER_MAXPERIOD 1 0 2 4 # define COMBFILTER_MINPERIOD 1 5 const signed char tf_select_table [ 4 ] [ 8 ] ; # if)",
    "insertText": "defined(ENABLE_HARDENING) || defined(ENABLE_ASSERTIONS) void validate_celt_decoder(CELTDecoder *st)"
  },
  {
    "label": "VALIDATE_CELT_DECODER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "VALIDATE_CELT_DECODER(st) validate_celt_decoder(st) #else #define VALIDATE_CELT_DECODER(st) #endif int resampling_factor(opus_int32 rate)"
  },
  {
    "label": "celt_preemphasis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "celt_preemphasis(const opus_val16 * OPUS_RESTRICT pcmp, celt_sig * OPUS_RESTRICT inp, int N, int CC, int upsample, const opus_val16 *coef, celt_sig *mem, int clip)"
  },
  {
    "label": "comb_filter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "comb_filter(opus_val32 *y, opus_val32 *x, int T0, int T1, int N, opus_val16 g0, opus_val16 g1, int tapset0, int tapset1, const opus_val16 *window, int overlap, int arch)"
  },
  {
    "label": "comb_filter_const_c()",
    "kind": "Method",
    "detail": "Function (# ifdef NON_STATIC_COMB_FILTER_CONST_C void)",
    "insertText": "comb_filter_const_c(opus_val32 *y, opus_val32 *x, int T, int N, opus_val16 g10, opus_val16 g11, opus_val16 g12)"
  },
  {
    "label": "comb_filter_const()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OVERRIDE_COMB_FILTER_CONST # define)",
    "insertText": "comb_filter_const(y, x, T, N, g10, g11, g12, arch) \\ ((void)(arch),comb_filter_const_c(y, x, T, N, g10, g11, g12)) #endif void init_caps(const CELTMode *m,int *cap,int LM,int C)"
  },
  {
    "label": "deemphasis()",
    "kind": "Method",
    "detail": "Function (# ifdef RESYNTH void)",
    "insertText": "deemphasis(celt_sig *in[], opus_val16 *pcm, int N, int C, int downsample, const opus_val16 *coef, celt_sig *mem)"
  },
  {
    "label": "celt_synthesis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "celt_synthesis(const CELTMode *mode, celt_norm *X, celt_sig * out_syn[], opus_val16 *oldBandE, int start, int effEnd, int C, int CC, int isTransient, int LM, int downsample, int silence)"
  }
]