[
  {
    "label": "celt_encoder_get_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "celt_encoder_get_size(int channels)"
  },
  {
    "label": "celt_encode_with_ec()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "celt_encode_with_ec(OpusCustomEncoder * OPUS_RESTRICT st, const opus_val16 * pcm, int frame_size, unsigned char *compressed, int nbCompressedBytes, ec_enc *enc)"
  },
  {
    "label": "celt_encoder_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "celt_encoder_init(CELTEncoder *st, opus_int32 sampling_rate, int channels,\n                      int arch)"
  },
  {
    "label": "celt_decoder_get_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "celt_decoder_get_size(int channels)"
  },
  {
    "label": "celt_decoder_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "celt_decoder_init(CELTDecoder *st, opus_int32 sampling_rate, int channels)"
  },
  {
    "label": "celt_decode_with_ec()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "celt_decode_with_ec(OpusCustomDecoder * OPUS_RESTRICT st, const unsigned char *data,\n      int len, opus_val16 * OPUS_RESTRICT pcm, int frame_size, ec_dec *dec, int accum)"
  },
  {
    "label": "validate_celt_decoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "validate_celt_decoder(CELTDecoder *st)"
  },
  {
    "label": "resampling_factor()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "resampling_factor(opus_int32 rate)"
  },
  {
    "label": "celt_preemphasis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "celt_preemphasis(const opus_val16 * OPUS_RESTRICT pcmp, celt_sig * OPUS_RESTRICT inp,\n                        int N, int CC, int upsample, const opus_val16 *coef, celt_sig *mem, int clip)"
  },
  {
    "label": "comb_filter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "comb_filter(opus_val32 *y, opus_val32 *x, int T0, int T1, int N,\n      opus_val16 g0, opus_val16 g1, int tapset0, int tapset1,\n      const opus_val16 *window, int overlap, int arch)"
  },
  {
    "label": "comb_filter_const_c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "comb_filter_const_c(opus_val32 *y, opus_val32 *x, int T, int N,\n                         opus_val16 g10, opus_val16 g11, opus_val16 g12)"
  },
  {
    "label": "init_caps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init_caps(const CELTMode *m,int *cap,int LM,int C)"
  },
  {
    "label": "deemphasis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deemphasis(celt_sig *in[], opus_val16 *pcm, int N, int C, int downsample, const opus_val16 *coef, celt_sig *mem)"
  },
  {
    "label": "celt_synthesis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "celt_synthesis(const CELTMode *mode, celt_norm *X, celt_sig * out_syn[],\n      opus_val16 *oldBandE, int start, int effEnd, int C, int CC, int isTransient,\n      int LM, int downsample, int silence)"
  }
]