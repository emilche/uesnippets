[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FArchiveHasReferences",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveHasReferences"
  },
  {
    "label": "FArchiveHasReferences()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" Serialization / ArchiveUObject . h \" class FArchive ; class UObject ; class FArchiveHasReferences : private FArchiveUObject { public :)",
    "insertText": "FArchiveHasReferences(UObject* InTarget, const TSet<UObject*>& InPotentiallyReferencedObjects)"
  },
  {
    "label": "HasReferences()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReferences()"
  },
  {
    "label": "GetAllReferencers()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*>)",
    "insertText": "GetAllReferencers(const TSet<UObject*>& Referencees, const TSet<UObject*>* ObjectsToIgnore)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : FArchive&)",
    "insertText": "operator(UObject*& Obj)"
  }
]