[
  {
    "label": "EProtocol",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EProtocol"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNewEventEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNewEventEvent"
  },
  {
    "label": "FEventHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventHeader"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once namespace UE { namespace Trace { # if)",
    "insertText": "defined(TRACE_PRIVATE_PROTOCOL_0)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (enum EProtocol : uint8 { Id = 0 } ; enum : uint8 { Field_CategoryMask = 0 3 0 0,Field_Integer = 0 0 0 0,Field_Float = 0 1 0 0,Field_Array = 0 2 0 0,Field_Pow2SizeMask = 0 0 0 3,Field_8 = 0 0 0 0,Field_16 = 0 0 0 1,Field_32 = 0 0 0 2,Field_64 = 0 0 0 3,# if PLATFORM_64BITS Field_Ptr = Field_64,# else Field_Ptr = Field_32,# endif Field_SpecialMask = 0 0 3 0,Field_Pod = 0 0 0 0,Field_String = 0 0 1 0,Field_Signed = 0 0 2 0,} ; enum class EFieldType : uint8 { Bool = Field_Pod | Field_Integer | Field_8,Int8 = Field_Pod | Field_Integer | Field_Signed | Field_8,Int16 = Field_Pod | Field_Integer | Field_Signed | Field_16,Int32 = Field_Pod | Field_Integer | Field_Signed | Field_32,Int64 = Field_Pod | Field_Integer | Field_Signed | Field_64,Uint8 = Field_Pod | Field_Integer | Field_8,Uint16 = Field_Pod | Field_Integer | Field_16,Uint32 = Field_Pod | Field_Integer | Field_32,Uint64 = Field_Pod | Field_Integer | Field_64,Pointer = Field_Pod | Field_Integer | Field_Ptr,Float32 = Field_Pod | Field_Float | Field_32,Float64 = Field_Pod | Field_Float | Field_64,AnsiString = Field_String | Field_Integer | Field_Array | Field_8,WideString = Field_String | Field_Integer | Field_Array | Field_16,Array = Field_Array,} ; struct FNewEventEvent { uint16 EventUid ; uint8 FieldCount ; uint8 Flags ; uint8 LoggerNameSize ; uint8 EventNameSize ; struct { uint16 Offset ; uint16 Size ; uint8 TypeInfo ; uint8 NameSize ; } Fields [ ] ; } ; enum class EKnownEventUids : uint16 { NewEvent,User,)",
    "insertText": "Max(1 << 14)"
  }
]