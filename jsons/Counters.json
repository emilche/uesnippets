[
  {
    "label": "ECounterDisplayHint",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECounterDisplayHint"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ICounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICounter"
  },
  {
    "label": "IEditableCounterProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableCounterProvider"
  },
  {
    "label": "IEditableCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableCounter"
  },
  {
    "label": "ICounterProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICounterProvider"
  },
  {
    "label": "ICounter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Templates / Function . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" UObject / NameTypes . h \" namespace TraceServices { enum ECounterDisplayHint { CounterDisplayHint_None,CounterDisplayHint_Memory,} ; enum class ECounterOpType : uint8 { Set = 0,Add = 1,} ; class ICounter { public : ~)",
    "insertText": "ICounter()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetGroup()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetGroup()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetDescription()"
  },
  {
    "label": "IsFloatingPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFloatingPoint()"
  },
  {
    "label": "IsResetEveryFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResetEveryFrame()"
  },
  {
    "label": "EnumerateValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateValues(double IntervalStart, double IntervalEnd, bool bIncludeExternalBounds, TFunctionRef<void(double, int64)> Callback)"
  },
  {
    "label": "EnumerateFloatValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateFloatValues(double IntervalStart, double IntervalEnd, bool bIncludeExternalBounds, TFunctionRef<void(double, double)> Callback)"
  },
  {
    "label": "EnumerateOps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateOps(double IntervalStart, double IntervalEnd, bool bIncludeExternalBounds, TFunctionRef<void(double, ECounterOpType, int64)> Callback)"
  },
  {
    "label": "EnumerateFloatOps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateFloatOps(double IntervalStart, double IntervalEnd, bool bIncludeExternalBounds, TFunctionRef<void(double, ECounterOpType, double)> Callback)"
  },
  {
    "label": "IEditableCounter()",
    "kind": "Method",
    "detail": "Function (} ; class IEditableCounterProvider ; class IEditableCounter { public : ~)",
    "insertText": "IEditableCounter()"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetName(const TCHAR* Name)"
  },
  {
    "label": "SetGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGroup(const TCHAR* Group)"
  },
  {
    "label": "SetDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDescription(const TCHAR* Description)"
  },
  {
    "label": "SetIsFloatingPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsFloatingPoint(bool bIsFloatingPoint)"
  },
  {
    "label": "SetIsResetEveryFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsResetEveryFrame(bool bInIsResetEveryFrame)"
  },
  {
    "label": "SetDisplayHint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisplayHint(ECounterDisplayHint DisplayHint)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValue(double Time, int64 Value)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValue(double Time, double Value)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(double Time, int64 Value)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(double Time, double Value)"
  },
  {
    "label": "ICounterProvider()",
    "kind": "Method",
    "detail": "Function (} ; class ICounterProvider : public IProvider { public : ~)",
    "insertText": "ICounterProvider()"
  },
  {
    "label": "GetCounterCount()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetCounterCount()"
  },
  {
    "label": "ReadCounter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadCounter(uint32 CounterId, TFunctionRef<void(const ICounter&)> Callback)"
  },
  {
    "label": "EnumerateCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateCounters(TFunctionRef<void(uint32, const ICounter&)> Callback)"
  },
  {
    "label": "IEditableCounterProvider()",
    "kind": "Method",
    "detail": "Function (} ; class IEditableCounterProvider : public IEditableProvider { public : ~)",
    "insertText": "IEditableCounterProvider()"
  },
  {
    "label": "GetCounter()",
    "kind": "Method",
    "detail": "Function (const ICounter*)",
    "insertText": "GetCounter(IEditableCounter* EditableCounter)"
  },
  {
    "label": "CreateEditableCounter()",
    "kind": "Method",
    "detail": "Function (IEditableCounter*)",
    "insertText": "CreateEditableCounter()"
  },
  {
    "label": "AddCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCounter(const ICounter* Counter)"
  },
  {
    "label": "GetCounterProviderName()",
    "kind": "Method",
    "detail": "Function (} ; FName)",
    "insertText": "GetCounterProviderName()"
  },
  {
    "label": "ReadCounterProvider()",
    "kind": "Method",
    "detail": "Function (const ICounterProvider&)",
    "insertText": "ReadCounterProvider(const IAnalysisSession& Session)"
  },
  {
    "label": "EditCounterProvider()",
    "kind": "Method",
    "detail": "Function (IEditableCounterProvider&)",
    "insertText": "EditCounterProvider(IAnalysisSession& Session)"
  }
]