[
  {
    "label": "ArrayViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayViewBase"
  },
  {
    "label": "ArrayView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayView"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef API_ARRAY_VIEW_H_ # define API_ARRAY_VIEW_H_ # include<algorithm> # include<array> # include<iterator> # include<type_traits> # include \" rtc_base / checks . h \" # include \" rtc_base / type_traits . h \" namespace rtc { namespace array_view_internal { enum : std::ptrdiff_t { kArrayViewVarSize = - 4 7 1 1 } ; template<T,std::ptrdiff_t Size> class ArrayViewBase {)",
    "insertText": "static_assert(Size > 0, \"ArrayView size must be variable or non-negative\")"
  },
  {
    "label": "ArrayViewBase()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ArrayViewBase(T* data, size_t size) : data_(data)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(size == 0 ? nullptr : data, this->data())"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(size, this->size())"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(!this->data(), this->size() == 0)"
  },
  {
    "label": "ArrayView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArrayView() : ArrayView(nullptr, 0)"
  },
  {
    "label": "ArrayView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArrayView(std::nullptr_t) : ArrayView()"
  },
  {
    "label": "ArrayView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArrayView(std::nullptr_t, size_t size) : ArrayView(static_cast<T*>(nullptr), size)"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(0, size)"
  },
  {
    "label": "ArrayView()",
    "kind": "Method",
    "detail": "Function (} template<U,size_t N>)",
    "insertText": "ArrayView(U (&array)[N]) : ArrayView(array, N)"
  },
  {
    "label": "ptrdiff_t()",
    "kind": "Method",
    "detail": "Function (} template<U,size_t N,std::enable_if<Size = = static_cast<)",
    "insertText": "ptrdiff_t(N)>::type* = nullptr> ArrayView(std::array<U, N>& u) : ArrayView(u.data(), u.size())"
  },
  {
    "label": "ptrdiff_t()",
    "kind": "Method",
    "detail": "Function (} template<U,size_t N,std::enable_if<Size = = static_cast<)",
    "insertText": "ptrdiff_t(N)>::type* = nullptr> ArrayView(const std::array<U, N>& u) : ArrayView(u.data(), u.size())"
  },
  {
    "label": "ArrayView()",
    "kind": "Method",
    "detail": "Function (} template<U,std::enable_if<Size ! = array_view_internal::kArrayViewVarSize&& HasDataAndSize<U,T>::value>::type* = nullptr>)",
    "insertText": "ArrayView(U& u) : ArrayView(u.data(), u.size())"
  },
  {
    "label": "ArrayView()",
    "kind": "Method",
    "detail": "Function (} template<U,std::enable_if<Size ! = array_view_internal::kArrayViewVarSize&& HasDataAndSize<U,T>::value>::type* = nullptr>)",
    "insertText": "ArrayView(const U& u) : ArrayView(u.data(), u.size())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "operator(size_t idx)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(idx, this->size())"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(this->data())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "end()"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (} const T*)",
    "insertText": "cbegin()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (} const T*)",
    "insertText": "cend()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} std::reverse_iterator<T*>)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} std::reverse_iterator<T*>)",
    "insertText": "rend()"
  },
  {
    "label": "crbegin()",
    "kind": "Method",
    "detail": "Function (} std::reverse_iterator<const T*>)",
    "insertText": "crbegin()"
  },
  {
    "label": "crend()",
    "kind": "Method",
    "detail": "Function (} std::reverse_iterator<const T*>)",
    "insertText": "crend()"
  },
  {
    "label": "subview()",
    "kind": "Method",
    "detail": "Function (} ArrayView<T>)",
    "insertText": "subview(size_t offset, size_t size)"
  },
  {
    "label": "subview()",
    "kind": "Method",
    "detail": "Function (} ArrayView<T>)",
    "insertText": "subview(size_t offset)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,std::ptrdiff_t Size1,std::ptrdiff_t Size2> bool)",
    "insertText": "operator(const ArrayView<T, Size1>& a, const ArrayView<T, Size2>& b)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "static_assert(sizeof(ArrayView<int>) == 2 * sizeof(int*), \"\")"
  },
  {
    "label": "MakeArrayView()",
    "kind": "Method",
    "detail": "Function (template<T> ArrayView<T>)",
    "insertText": "MakeArrayView(T* data, size_t size)"
  },
  {
    "label": "reinterpret_array_view()",
    "kind": "Method",
    "detail": "Function (} template<U,T,std::ptrdiff_t Size> ArrayView<U,Size>)",
    "insertText": "reinterpret_array_view(ArrayView<T, Size> view)"
  }
]