[
  {
    "label": "SNameComboBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNameComboBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "SGraphPinCollisionProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPinCollisionProfile"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" SGraphPin . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" class SNameComboBox ; class SWidget ; class UEdGraphPin ; class SGraphPinCollisionProfile : public SGraphPin { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphPinCollisionProfile)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, UEdGraphPin* InGraphPinObj)"
  },
  {
    "label": "GetDefaultValueWidget()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<SWidget>)",
    "insertText": "GetDefaultValueWidget()"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged(TSharedPtr<FName> NameItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "OnComboBoxOpening()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComboBoxOpening()"
  },
  {
    "label": "GetSelectedName()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FName>)",
    "insertText": "GetSelectedName()"
  },
  {
    "label": "SetPropertyWithName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPropertyWithName(const FName& Name)"
  },
  {
    "label": "GetPropertyAsName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPropertyAsName(FName& OutName)"
  }
]