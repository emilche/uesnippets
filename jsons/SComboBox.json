[
  {
    "label": "SComboRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboRow"
  },
  {
    "label": "SComboBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboBox"
  },
  {
    "label": "FSlateAccessibleComboBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateAccessibleComboBox"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Events . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Sound / SlateSound . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / AppStyle . h \" # include \" Framework / SlateDelegates . h \" # include \" Framework / Application / SlateApplication . h \" # include \" Framework / Application / SlateUser . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Input / SComboButton . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Framework / Views / TableViewTypeTraits . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / SListView . h \" # if WITH_ACCESSIBILITY # include \" GenericPlatform / Accessibility / GenericAccessibleInterfaces . h \" # include \" Widgets / Accessibility / SlateCoreAccessibleWidgets . h \" # include \" Widgets / Accessibility / SlateAccessibleMessageHandler . h \" # endif)",
    "insertText": "DECLARE_DELEGATE(FOnComboBoxOpening)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_BEGIN_ARGS(SComboRow ) : _Style(&FAppStyle::Get().GetWidgetStyle<FTableRowStyle>(\"ComboBox.Row\")) , _Content() , _Padding(FMargin(0))"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FTableRowStyle, Style) SLATE_DEFAULT_SLOT( FArguments, Content ) SLATE_ATTRIBUTE(FMargin, Padding) SLATE_END_ARGS() public: void Construct( const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTable)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (STableRow<OptionType)",
    "insertText": "Construct(typename STableRow<OptionType>::FArguments() .Style(InArgs._Style) .Padding(InArgs._Padding) .Content() [ InArgs._Content.Widget ] , InOwnerTable)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITypedTableView<OptionType>> OwnerWidget = this -> OwnerTablePtr .)",
    "insertText": "Pin()"
  },
  {
    "label": "Private_ItemFromWidget()",
    "kind": "Method",
    "detail": "Function (const TObjectPtrWrapTypeOf<OptionType>* MyItem = OwnerWidget ->)",
    "insertText": "Private_ItemFromWidget(this)"
  },
  {
    "label": "Private_IsItemSelected()",
    "kind": "Method",
    "detail": "Function (const bool bIsSelected = OwnerWidget ->)",
    "insertText": "Private_IsItemSelected(*MyItem)"
  },
  {
    "label": "Private_SignalSelectionChanged()",
    "kind": "Method",
    "detail": "Function (OwnerWidget ->)",
    "insertText": "Private_SignalSelectionChanged(ESelectInfo::Direct)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (} } return STableRow<OptionType)",
    "insertText": "OnMouseButtonDown(MyGeometry, MouseEvent)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } ; template<OptionType> class SComboBox : public SComboButton { public : typedef TListTypeTraits<OptionType> ListTypeTraits ; typedef TListTypeTraits<OptionType>::NullableType NullableOptionType ; typedef SListView<OptionType> SComboListType ; typedef TSlateDelegates<OptionType>::FOnGenerateWidget FOnGenerateWidget ; typedef TSlateDelegates<NullableOptionType>::FOnSelectionChanged FOnSelectionChanged ;)",
    "insertText": "SLATE_BEGIN_ARGS(SComboBox ) : _Content() , _ComboBoxStyle(&FAppStyle::Get().GetWidgetStyle< FComboBoxStyle >(\"ComboBox\")) , _ButtonStyle(nullptr) , _ItemStyle(&FAppStyle::Get().GetWidgetStyle< FTableRowStyle >(\"ComboBox.Row\")) , _ScrollBarStyle(&FAppStyle::Get().GetWidgetStyle<FScrollBarStyle>(\"ScrollBar\")) , _ContentPadding(_ComboBoxStyle->ContentPadding) , _ForegroundColor(FSlateColor::UseStyle()) , _OnSelectionChanged() , _OnGenerateWidget() , _InitiallySelectedItem(ListTypeTraits::MakeNullPtr()) , _Method() , _MaxListHeight(450.0f) , _HasDownArrow( true ) , _EnableGamepadNavigationMode(false) , _IsFocusable( true)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content ) SLATE_STYLE_ARGUMENT( FComboBoxStyle, ComboBoxStyle ) SLATE_STYLE_ARGUMENT( FButtonStyle, ButtonStyle ) SLATE_STYLE_ARGUMENT(FTableRowStyle, ItemStyle) SLATE_STYLE_ARGUMENT( FScrollBarStyle, ScrollBarStyle ) SLATE_ATTRIBUTE( FMargin, ContentPadding ) SLATE_ATTRIBUTE( FSlateColor, ForegroundColor ) SLATE_ITEMS_SOURCE_ARGUMENT( OptionType, OptionsSource ) SLATE_EVENT( FOnSelectionChanged, OnSelectionChanged ) SLATE_EVENT( FOnGenerateWidget, OnGenerateWidget ) SLATE_EVENT( FOnComboBoxOpening, OnComboBoxOpening ) SLATE_ARGUMENT(TSharedPtr<SScrollBar>, CustomScrollbar) SLATE_ARGUMENT( NullableOptionType, InitiallySelectedItem ) SLATE_ARGUMENT( TOptional<EPopupMethod>, Method ) SLATE_ARGUMENT(float, MaxListHeight) SLATE_ARGUMENT( TOptional<FSlateSound>, PressedSoundOverride ) SLATE_ARGUMENT( TOptional<FSlateSound>, SelectionChangeSoundOverride ) SLATE_ARGUMENT( bool, HasDownArrow ) SLATE_ARGUMENT(bool, EnableGamepadNavigationMode) SLATE_ARGUMENT( bool, IsFocusable ) SLATE_ARGUMENT(bool, CollapseMenuOnParentFocus) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ItemStyle = InArgs . _ItemStyle ; ComboBoxStyle = InArgs . _ComboBoxStyle ; MenuRowPadding = ComboBoxStyle -> MenuRowPadding ; bShowMenuBackground = false ; const FComboButtonStyle& OurComboButtonStyle = ComboBoxStyle -> ComboButtonStyle ; const FButtonStyle* const OurButtonStyle = InArgs . _ButtonStyle ? InArgs . _ButtonStyle :& OurComboButtonStyle . ButtonStyle ; PressedSound = InArgs . _PressedSoundOverride .)",
    "insertText": "Get(ComboBoxStyle->PressedSlateSound)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (SelectionChangeSound = InArgs . _SelectionChangeSoundOverride .)",
    "insertText": "Get(ComboBoxStyle->SelectionChangeSlateSound)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (this -> OnComboBoxOpening = InArgs . _OnComboBoxOpening ; this -> OnSelectionChanged = InArgs . _OnSelectionChanged ; this -> OnGenerateWidget = InArgs . _OnGenerateWidget ; this -> EnableGamepadNavigationMode = InArgs . _EnableGamepadNavigationMode ; this -> bControllerInputCaptured = false ; CustomScrollbar = InArgs . _CustomScrollbar ; ComboBoxMenuContent =)",
    "insertText": "SNew(SBox) .MaxDesiredHeight(InArgs._MaxListHeight) [ SAssignNew(this->ComboListView, SComboListType) .ListItemsSource(InArgs.GetOptionsSource()) .OnGenerateRow(this, &SComboBox< OptionType >::GenerateMenuItemRow) .OnSelectionChanged(this, &SComboBox< OptionType >::OnSelectionChanged_Internal) .OnKeyDownHandler(this, &SComboBox< OptionType >::OnKeyDownHandler) .SelectionMode(ESelectionMode::Single) .ScrollBarStyle(InArgs._ScrollBarStyle) .ExternalScrollbar(InArgs._CustomScrollbar)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget> ButtonContent = InArgs . _Content . Widget ;)",
    "insertText": "if(InArgs._Content.Widget == SNullWidget::NullWidget)"
  },
  {
    "label": "SAssignNew()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SAssignNew(ButtonContent, STextBlock) .Text(NSLOCTEXT(\"SComboBox\", \"ContentWarning\", \"No Content Provided\")) .ColorAndOpacity( FLinearColor::Red)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Construct(SComboButton::FArguments() .ComboButtonStyle(&OurComboButtonStyle) .ButtonStyle(OurButtonStyle) .Method( InArgs._Method ) .ButtonContent() [ ButtonContent.ToSharedRef() ] .MenuContent() [ ComboBoxMenuContent.ToSharedRef() ] .HasDownArrow( InArgs._HasDownArrow ) .ContentPadding( InArgs._ContentPadding ) .ForegroundColor( InArgs._ForegroundColor ) .OnMenuOpenChanged(this, &SComboBox< OptionType >::OnMenuOpenChanged) .IsFocusable(InArgs._IsFocusable) .CollapseMenuOnParentFocus(InArgs._CollapseMenuOnParentFocus))"
  },
  {
    "label": "SetMenuContentWidgetToFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMenuContentWidgetToFocus(ComboListView)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SelectedItem = InArgs . _InitiallySelectedItem ;)",
    "insertText": "if(TListTypeTraits<OptionType>::IsPtrValid( SelectedItem ))"
  },
  {
    "label": "NullableItemTypeConvertToItemType()",
    "kind": "Method",
    "detail": "Function (OptionType ValidatedItem = TListTypeTraits<OptionType)",
    "insertText": "NullableItemTypeConvertToItemType(SelectedItem)"
  },
  {
    "label": "Private_SetItemSelection()",
    "kind": "Method",
    "detail": "Function (ComboListView ->)",
    "insertText": "Private_SetItemSelection(ValidatedItem, true)"
  },
  {
    "label": "RequestScrollIntoView()",
    "kind": "Method",
    "detail": "Function (ComboListView ->)",
    "insertText": "RequestScrollIntoView(ValidatedItem, 0)"
  },
  {
    "label": "SetBackgroundBrush()",
    "kind": "Method",
    "detail": "Function (} ComboListView ->)",
    "insertText": "SetBackgroundBrush(FStyleDefaults::GetNoBrush())"
  },
  {
    "label": "SComboBox()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SComboBox()"
  },
  {
    "label": "FSlateAccessibleComboBox()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY AccessibleBehavior = EAccessibleBehavior::Auto ; bCanChildrenBeAccessible = true ; # endif } # if WITH_ACCESSIBILITY protected : class FSlateAccessibleComboBox ; class FSlateAccessibleComboBox : public FSlateAccessibleWidget,public IAccessibleProperty { public :)",
    "insertText": "FSlateAccessibleComboBox(TWeakPtr<SWidget> InWidget) : FSlateAccessibleWidget(InWidget, EAccessibleWidgetType::ComboBox)"
  },
  {
    "label": "AsProperty()",
    "kind": "Method",
    "detail": "Function (} IAccessibleProperty*)",
    "insertText": "AsProperty()"
  },
  {
    "label": "OptionType()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SComboBox<OptionType>> ComboBox = StaticCastSharedPtr<SComboBox<)",
    "insertText": "OptionType(Widget.Pin())"
  },
  {
    "label": "NullableItemTypeConvertToItemType()",
    "kind": "Method",
    "detail": "Function (OptionType SelectedOption = TListTypeTraits<OptionType)",
    "insertText": "NullableItemTypeConvertToItemType(ComboBox->SelectedItem)"
  },
  {
    "label": "WidgetFromItem()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITableRow> SelectedTableRow = ComboBox -> ComboListView ->)",
    "insertText": "WidgetFromItem(SelectedOption)"
  },
  {
    "label": "AsWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget> TableRowWidget = SelectedTableRow ->)",
    "insertText": "AsWidget()"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (} } } return)",
    "insertText": "GetEmpty().ToString()"
  },
  {
    "label": "GetValueAsVariant()",
    "kind": "Method",
    "detail": "Function (} FVariant)",
    "insertText": "GetValueAsVariant()"
  },
  {
    "label": "CreateAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (} } ; public : TSharedRef<FSlateAccessibleWidget>)",
    "insertText": "CreateAccessibleWidget()"
  },
  {
    "label": "GetDefaultAccessibleText()",
    "kind": "Method",
    "detail": "Function (} TOptional<FText>)",
    "insertText": "GetDefaultAccessibleText(EAccessibleType AccessibleType)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Name(TEXT(\"Combo Box\"))"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "SetSelectedItem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSelectedItem(NullableOptionType InSelectedItem)"
  },
  {
    "label": "NullableItemTypeConvertToItemType()",
    "kind": "Method",
    "detail": "Function (OptionType InSelected = TListTypeTraits<OptionType)",
    "insertText": "NullableItemTypeConvertToItemType(InSelectedItem)"
  },
  {
    "label": "SetSelection()",
    "kind": "Method",
    "detail": "Function (ComboListView ->)",
    "insertText": "SetSelection(InSelected)"
  },
  {
    "label": "SetEnableGamepadNavigationMode()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetEnableGamepadNavigationMode(bool InEnableGamepadNavigationMode)"
  },
  {
    "label": "SetMaxHeight()",
    "kind": "Method",
    "detail": "Function (this -> EnableGamepadNavigationMode = InEnableGamepadNavigationMode ; } void)",
    "insertText": "SetMaxHeight(float InMaxHeight)"
  },
  {
    "label": "SetMaxDesiredHeight()",
    "kind": "Method",
    "detail": "Function (ComboBoxMenuContent ->)",
    "insertText": "SetMaxDesiredHeight(InMaxHeight)"
  },
  {
    "label": "SetStyle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStyle(const FComboBoxStyle* InStyle)"
  },
  {
    "label": "InvalidateStyle()",
    "kind": "Method",
    "detail": "Function (ComboBoxStyle = InStyle ;)",
    "insertText": "InvalidateStyle()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate(EInvalidateWidgetReason::Layout)"
  },
  {
    "label": "SetItemStyle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetItemStyle(const FTableRowStyle* InItemStyle)"
  },
  {
    "label": "InvalidateItemStyle()",
    "kind": "Method",
    "detail": "Function (ItemStyle = InItemStyle ;)",
    "insertText": "InvalidateItemStyle()"
  },
  {
    "label": "GetSelectedItem()",
    "kind": "Method",
    "detail": "Function (} NullableOptionType)",
    "insertText": "GetSelectedItem()"
  },
  {
    "label": "SetItemsSource()",
    "kind": "Method",
    "detail": "Function (ComboListView ->)",
    "insertText": "SetItemsSource(InListItemsSource)"
  },
  {
    "label": "SetItemsSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetItemsSource(TSharedRef<::UE::Slate::Containers::TObservableArray<OptionType>> InListItemsSource)"
  },
  {
    "label": "ClearItemsSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearItemsSource()"
  },
  {
    "label": "RefreshOptions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RefreshOptions()"
  },
  {
    "label": "RequestListRefresh()",
    "kind": "Method",
    "detail": "Function (ComboListView ->)",
    "insertText": "RequestListRefresh()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (} protected : FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const EUINavigationAction NavAction =)",
    "insertText": "Get().GetNavigationActionFromKey(InKeyEvent)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const EUINavigation NavDirection =)",
    "insertText": "Get().GetNavigationDirectionFromKey(InKeyEvent)"
  },
  {
    "label": "PlayPressedSound()",
    "kind": "Method",
    "detail": "Function (bControllerInputCaptured = true ;)",
    "insertText": "PlayPressedSound()"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnComboBoxOpening .)",
    "insertText": "ExecuteIfBound()"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (} else { bControllerInputCaptured = false ; TArray<OptionType> SelectedItems = ComboListView ->)",
    "insertText": "GetSelectedItems()"
  },
  {
    "label": "OnSelectionChanged_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged_Internal(SelectedItems[0], ESelectInfo::Direct)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} FReply Reply =)",
    "insertText": "Handled()"
  },
  {
    "label": "SetUserFocus()",
    "kind": "Method",
    "detail": "Function (Reply .)",
    "insertText": "SetUserFocus(this->AsShared(), EFocusCause::SetDirectly)"
  },
  {
    "label": "OnMenuOpenChanged()",
    "kind": "Method",
    "detail": "Function (const bool bWasInputCaptured = bControllerInputCaptured ;)",
    "insertText": "OnMenuOpenChanged(false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(bControllerInputCaptured)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "if(NavDirection == EUINavigation::Up)"
  },
  {
    "label": "NullableItemTypeConvertToItemType()",
    "kind": "Method",
    "detail": "Function (OptionType ActuallySelected = TListTypeTraits<OptionType)",
    "insertText": "NullableItemTypeConvertToItemType(NullableSelected)"
  },
  {
    "label": "GetItems()",
    "kind": "Method",
    "detail": "Function (const TArrayView<const OptionType> OptionsSource = ComboListView ->)",
    "insertText": "GetItems()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32 SelectionIndex = OptionsSource .)",
    "insertText": "Find(ActuallySelected)"
  },
  {
    "label": "SetSelectedItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedItem(OptionsSource[SelectionIndex - 1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(NavDirection == EUINavigation::Down)"
  },
  {
    "label": "SetSelectedItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedItem(OptionsSource[SelectionIndex + 1])"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "OnKeyDown(MyGeometry, InKeyEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "GenerateMenuItemRow()",
    "kind": "Method",
    "detail": "Function (} private : TSharedRef<ITableRow>)",
    "insertText": "GenerateMenuItemRow(OptionType InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "SNew(SComboRow<OptionType>, OwnerTable) [ SNew(STextBlock).Text(NSLOCTEXT(\"SlateCore\", \"ComboBoxMissingOnGenerateWidgetMethod\", \"Please provide a .OnGenerateWidget() handler.\"))"
  },
  {
    "label": "OnSelectionChanged_Internal()",
    "kind": "Method",
    "detail": "Function (} } / void)",
    "insertText": "OnSelectionChanged_Internal(NullableOptionType ProposedSelection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "PlaySelectionChangeSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySelectionChangeSound()"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (SelectedItem = ProposedSelection ; OnSelectionChanged .)",
    "insertText": "ExecuteIfBound(ProposedSelection, SelectInfo)"
  },
  {
    "label": "SetIsOpen()",
    "kind": "Method",
    "detail": "Function (} this ->)",
    "insertText": "SetIsOpen(false)"
  },
  {
    "label": "OnButtonClicked()",
    "kind": "Method",
    "detail": "Function (} } FReply)",
    "insertText": "OnButtonClicked()"
  },
  {
    "label": "OnKeyDownHandler()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnKeyDownHandler(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnSelectionChanged_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged_Internal(SelectedItems[0], ESelectInfo::OnKeyPress)"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "Unhandled()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().PlaySound( PressedSound)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().PlaySound( SelectionChangeSound)"
  }
]