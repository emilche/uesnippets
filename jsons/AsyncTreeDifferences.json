[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TTreeDiffSpecification",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTreeDiffSpecification"
  },
  {
    "label": "TDiffNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDiffNode"
  },
  {
    "label": "TAsyncTreeDifferences",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAsyncTreeDifferences"
  },
  {
    "label": "TTreeDiffSpecification()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DiffUtils . h \" # include \" Engine / EngineTypes . h \" # include \" Misc / Attribute . h \" # include \" Templates / UniquePtr . h \" enum class ETreeDiffResult { Invalid,MissingFromTree1,MissingFromTree2,DifferentValues,Identical } ; enum class ETreeTraverseOrder { PreOrder,PostOrder,ReversePreOrder,ReversePostOrder } ; enum class ETreeTraverseControl { Continue,Break,SkipChildren,} ; template<InNodeType> class TTreeDiffSpecification { public : ~)",
    "insertText": "TTreeDiffSpecification()"
  },
  {
    "label": "AreValuesEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreValuesEqual(const InNodeType& TreeNodeA, const InNodeType& TreeNodeB, TArray<FPropertySoftPath>* OutDifferingProperties = nullptr)"
  },
  {
    "label": "ShouldMatchByValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldMatchByValue(const InNodeType& TreeNode)"
  },
  {
    "label": "TDiffNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TDiffNode(TDiffNode &&Other)"
  },
  {
    "label": "TDiffNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TDiffNode(const ValueType& InValueA, const ValueType& InValueB, const TDiffNode* InParent) : ValueA(InValueA), ValueB(InValueB), Children(), Parent(InParent)"
  },
  {
    "label": "SetDiffType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDiffType(TUniquePtr<TTreeDiffSpecification<ValueType>>& Specification)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const TDiffNode& Other)"
  },
  {
    "label": "TAsyncTreeDifferences()",
    "kind": "Method",
    "detail": "Function (ValueType NullValue { } ; } ; template<InNodeType> class TAsyncTreeDifferences { public : using ValueType = InNodeType ; using DiffNodeType = TDiffNode<ValueType> ;)",
    "insertText": "TAsyncTreeDifferences(const TAttribute<TArray<ValueType>>& InRootValuesA, const TAttribute<TArray<ValueType>>& InRootValuesB)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float MaxAllottedTimeMs = 1.f)"
  },
  {
    "label": "FlushQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushQueue()"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEach(ETreeTraverseOrder TraversalOrder, const TFunction<ETreeTraverseControl(const TUniquePtr<DiffNodeType>&)>& Method)"
  },
  {
    "label": "SetDiffSpecification()",
    "kind": "Method",
    "detail": "Function (template<SpecificationType,. . . TArgs> void)",
    "insertText": "SetDiffSpecification(TArgs... Args)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<DiffNodeType> Head ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnQueueFlushed, const TAsyncTreeDifferences&)"
  },
  {
    "label": "ProcessTopOfQueue()",
    "kind": "Method",
    "detail": "Function (FOnQueueFlushed OnQueueFlushed ; private : void)",
    "insertText": "ProcessTopOfQueue()"
  },
  {
    "label": "QueueParallelNodeLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueParallelNodeLists(const TArray<ValueType>& ValuesA, const TArray<ValueType>& ValuesB, DiffNodeType* ParentNode)"
  },
  {
    "label": "CalculateLCSTableForMatchingValues()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>>)",
    "insertText": "CalculateLCSTableForMatchingValues(const TArray<ValueType>& ValuesA, const TArray<ValueType>& ValuesB)"
  },
  {
    "label": "CalculateLCSTableForDiffNodes()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>>)",
    "insertText": "CalculateLCSTableForDiffNodes(const TArray<DiffNodeType>& FoundNodes, const TArray<TUniquePtr<DiffNodeType>>& ExpectedNodes)"
  },
  {
    "label": "AreMatching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreMatching(const ValueType& ValueA, const ValueType& ValueB)"
  },
  {
    "label": "PreOrderRecursive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreOrderRecursive(const TUniquePtr<DiffNodeType>& Node, const TFunction<ETreeTraverseControl(const TUniquePtr<DiffNodeType>&)>& Method)"
  },
  {
    "label": "PostOrderRecursive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostOrderRecursive(const TUniquePtr<DiffNodeType>& Node, const TFunction<ETreeTraverseControl(const TUniquePtr<DiffNodeType>&)>& Method)"
  },
  {
    "label": "ReversePreOrderRecursive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReversePreOrderRecursive(const TUniquePtr<DiffNodeType>& Node, const TFunction<ETreeTraverseControl(const TUniquePtr<DiffNodeType>&)>& Method)"
  },
  {
    "label": "ReversePostOrderRecursive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReversePostOrderRecursive(const TUniquePtr<DiffNodeType>& Node, const TFunction<ETreeTraverseControl(const TUniquePtr<DiffNodeType>&)>& Method)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (DifferingProperties .)",
    "insertText": "Reset()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DiffResult = ETreeDiffResult::DifferentValues ; return ; } } DiffResult = ETreeDiffResult::Identical ; return ; } else {)",
    "insertText": "if(Specification->AreValuesEqual(ValueA, ValueB, &DifferingProperties))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DiffResult = ETreeDiffResult::Identical ; return ; } DiffResult = ETreeDiffResult::DifferentValues ; return ; } })",
    "insertText": "if(ValueA != NullValue && ValueB == NullValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DiffResult = ETreeDiffResult::MissingFromTree2 ; return ; })",
    "insertText": "if(ValueA == NullValue && ValueB != NullValue)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (DiffResult = ETreeDiffResult::MissingFromTree1 ; return ; })",
    "insertText": "check(false)"
  },
  {
    "label": "QueueParallelNodeLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueParallelNodeLists(RootValuesA.Get(), RootValuesB.Get(), Head.Get())"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} template<InNodeType> void TAsyncTreeDifferences<InNodeType)",
    "insertText": "Tick(float MaxAllottedTimeMs)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (} const double StartTime =)",
    "insertText": "Seconds()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(UpdateQueue.IsEmpty())"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnQueueFlushed .)",
    "insertText": "Broadcast(*this)"
  },
  {
    "label": "PostOrderRecursive()",
    "kind": "Method",
    "detail": "Function (break ; case ETreeTraverseOrder::PostOrder :)",
    "insertText": "PostOrderRecursive(Head, Method)"
  },
  {
    "label": "ReversePreOrderRecursive()",
    "kind": "Method",
    "detail": "Function (break ; case ETreeTraverseOrder::ReversePreOrder :)",
    "insertText": "ReversePreOrderRecursive(Head, Method)"
  },
  {
    "label": "ReversePostOrderRecursive()",
    "kind": "Method",
    "detail": "Function (break ; case ETreeTraverseOrder::ReversePostOrder :)",
    "insertText": "ReversePostOrderRecursive(Head, Method)"
  },
  {
    "label": "SpecificationType()",
    "kind": "Method",
    "detail": "Function (Specification = MakeUnique<)",
    "insertText": "SpecificationType(Args...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TUniquePtr<DiffNodeType>& Child = Node -> Children [ I ] ;)",
    "insertText": "if(!ReversePreOrderRecursive(Child, Method))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TUniquePtr<DiffNodeType>& Child = Node -> Children [ I ] ;)",
    "insertText": "if(!ReversePostOrderRecursive(Child, Method))"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (DiffNodeType* DiffNode = UpdateQueue .)",
    "insertText": "Pop()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<ValueType> ChildrenA ; TArray<ValueType> ChildrenB ;)",
    "insertText": "if(DiffNode->ValueA != DiffNodeType::NullValue)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (Specification ->)",
    "insertText": "GetChildren(DiffNode->ValueA, ChildrenA)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DiffNode->ValueB != DiffNodeType::NullValue)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (Specification ->)",
    "insertText": "GetChildren(DiffNode->ValueB, ChildrenB)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!ChildrenA.IsEmpty() || !ChildrenB.IsEmpty())"
  },
  {
    "label": "QueueParallelNodeLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueParallelNodeLists(ChildrenA, ChildrenB, DiffNode)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (TArray<DiffNodeType> FoundChildren ; {)",
    "insertText": "Reverse(const_cast<TArray<ValueType>&>(ValuesA))"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse(const_cast<TArray<ValueType>&>(ValuesB))"
  },
  {
    "label": "CalculateLCSTableForMatchingValues()",
    "kind": "Method",
    "detail": "Function (const TArray<TArray<int32>> LCS =)",
    "insertText": "CalculateLCSTableForMatchingValues(ValuesA, ValuesB)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 IndexA = ValuesA .)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FoundChildren .)",
    "insertText": "Add(DiffNodeType(DiffNodeType::NullValue, ValuesB[--IndexB], ParentNode))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(IndexB == 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FoundChildren .)",
    "insertText": "Add(DiffNodeType(ValuesA[--IndexA], DiffNodeType::NullValue, ParentNode))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(AreMatching(ValuesA[IndexA - 1], ValuesB[IndexB - 1]))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FoundChildren .)",
    "insertText": "Add(DiffNodeType(ValuesA[--IndexA], ValuesB[--IndexB], ParentNode))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(LCS[IndexA - 1][IndexB] <= LCS[IndexA][IndexB - 1])"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} TArray<DiffNodeType> AllFoundChildren =)",
    "insertText": "MoveTemp(FoundChildren)"
  },
  {
    "label": "DiffNodeType()",
    "kind": "Method",
    "detail": "Function (FoundChildren = TArray<)",
    "insertText": "DiffNodeType()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 CompressIndex = INDEX_NONE ; int32 CompressCount = 0 ;)",
    "insertText": "for(DiffNodeType& FoundChild : AllFoundChildren)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} + + CompressCount ; FoundChildren .)",
    "insertText": "Add(MoveTemp(FoundChild))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(CompressCount > 0 && FoundChild.ValueB == DiffNodeType::NullValue && Specification->ShouldMatchByValue(FoundChild.ValueA))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (CompressIndex = INDEX_NONE ; CompressCount = 0 ; } { TArray<TUniquePtr<DiffNodeType>> ExpectedChildren =)",
    "insertText": "MoveTemp(ParentNode->Children)"
  },
  {
    "label": "CalculateLCSTableForDiffNodes()",
    "kind": "Method",
    "detail": "Function (const TArray<TArray<int32>> LCS =)",
    "insertText": "CalculateLCSTableForDiffNodes(FoundChildren, ExpectedChildren)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ParentNode -> Children .)",
    "insertText": "Add(MakeUnique<DiffNodeType>(MoveTemp(FoundChildren[--FoundChildrenIndex])))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FoundChildren[FoundChildrenIndex - 1] == *ExpectedChildren[ExpectedChildrenIndex - 1])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ParentNode -> Children .)",
    "insertText": "Add(MoveTemp(ExpectedChildren[--ExpectedChildrenIndex]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - FoundChildrenIndex ; } else)",
    "insertText": "if(LCS[FoundChildrenIndex - 1][ExpectedChildrenIndex] <= LCS[FoundChildrenIndex][ExpectedChildrenIndex - 1])"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "Reverse(ParentNode->Children)"
  },
  {
    "label": "SetDiffType()",
    "kind": "Method",
    "detail": "Function (Child ->)",
    "insertText": "SetDiffType(Specification)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const TUniquePtr<DiffNodeType>& Child : ParentNode->Children)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UpdateQueue .)",
    "insertText": "Add(Child.Get())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>> LCS ; LCS .)",
    "insertText": "SetNum(ValuesA.Num() + 1)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (LCS [ I ] .)",
    "insertText": "SetNum(ValuesB.Num() + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "for(int32 J = 1; J <= ValuesB.Num(); J++)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (LCS [ I ] [ J ] = LCS [ I - 1 ] [ J - 1 ] + 1 ; } else { LCS [ I ] [ J ] =)",
    "insertText": "Max(LCS[I - 1][J], LCS[I][J - 1])"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>> LCS ; LCS .)",
    "insertText": "SetNum(FoundNodes.Num() + 1)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (LCS [ I ] .)",
    "insertText": "SetNum(ExpectedNodes.Num() + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "for(int32 J = 1; J <= ExpectedNodes.Num(); J++)"
  },
  {
    "label": "ShouldMatchByValue()",
    "kind": "Method",
    "detail": "Function (const bool bMatchValueAByValue = Specification ->)",
    "insertText": "ShouldMatchByValue(ValueA)"
  },
  {
    "label": "ShouldMatchByValue()",
    "kind": "Method",
    "detail": "Function (const bool bMatchValueBByValue = Specification ->)",
    "insertText": "ShouldMatchByValue(ValueB)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bMatchValueAByValue && !bMatchValueBByValue)"
  }
]