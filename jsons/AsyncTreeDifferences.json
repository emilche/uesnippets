[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TTreeDiffSpecification",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTreeDiffSpecification"
  },
  {
    "label": "TDiffNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDiffNode"
  },
  {
    "label": "TAsyncTreeDifferences",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAsyncTreeDifferences"
  },
  {
    "label": "AreValuesEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreValuesEqual(const InNodeType& TreeNodeA, const InNodeType& TreeNodeB, TArray<FPropertySoftPath>* OutDifferingProperties = nullptr)"
  },
  {
    "label": "AreMatching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreMatching(const InNodeType& TreeNodeA, const InNodeType& TreeNodeB, TArray<FPropertySoftPath>* OutDifferingProperties = nullptr)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildren(const InNodeType& InParent, TArray<InNodeType>& OutChildren)"
  },
  {
    "label": "ShouldMatchByValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldMatchByValue(const InNodeType& TreeNode)"
  },
  {
    "label": "SetDiffType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDiffType(TUniquePtr<TTreeDiffSpecification<ValueType>>& Specification)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float MaxAllottedTimeMs = 1.f)"
  },
  {
    "label": "FlushQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushQueue()"
  },
  {
    "label": "SetDiffSpecification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDiffSpecification(TArgs... Args)"
  },
  {
    "label": "ProcessTopOfQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessTopOfQueue()"
  },
  {
    "label": "QueueParallelNodeLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueParallelNodeLists(const TArray<ValueType>& ValuesA, const TArray<ValueType>& ValuesB, DiffNodeType* ParentNode)"
  },
  {
    "label": "CalculateLCSTableForMatchingValues()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>>)",
    "insertText": "CalculateLCSTableForMatchingValues(const TArray<ValueType>& ValuesA, const TArray<ValueType>& ValuesB)"
  },
  {
    "label": "CalculateLCSTableForDiffNodes()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>>)",
    "insertText": "CalculateLCSTableForDiffNodes(const TArray<DiffNodeType>& FoundNodes, const TArray<TUniquePtr<DiffNodeType>>& ExpectedNodes)"
  },
  {
    "label": "AreMatching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreMatching(const ValueType& ValueA, const ValueType& ValueB)"
  },
  {
    "label": "PreOrderRecursive()",
    "kind": "Method",
    "detail": "Function (ETreeTraverseOrder::PreOrder:)",
    "insertText": "PreOrderRecursive(Head, Method)"
  },
  {
    "label": "PostOrderRecursive()",
    "kind": "Method",
    "detail": "Function (ETreeTraverseOrder::PostOrder:)",
    "insertText": "PostOrderRecursive(Head, Method)"
  },
  {
    "label": "ReversePreOrderRecursive()",
    "kind": "Method",
    "detail": "Function (ETreeTraverseOrder::ReversePreOrder:)",
    "insertText": "ReversePreOrderRecursive(Head, Method)"
  },
  {
    "label": "ReversePostOrderRecursive()",
    "kind": "Method",
    "detail": "Function (ETreeTraverseOrder::ReversePostOrder:)",
    "insertText": "ReversePostOrderRecursive(Head, Method)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "check(false)"
  }
]