[
  {
    "label": "iterator_range",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator_range"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "iterator_range()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_ITERATOR_RANGE_H # define LLVM_ADT_ITERATOR_RANGE_H # include<utility> namespace llvm { template<IteratorT> class iterator_range { IteratorT begin_iterator,end_iterator ; public :)",
    "insertText": "iterator_range(IteratorT begin_iterator, IteratorT end_iterator) : begin_iterator(std::move(begin_iterator)), end_iterator(std::move(end_iterator))"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} IteratorT)",
    "insertText": "begin()"
  },
  {
    "label": "make_range()",
    "kind": "Method",
    "detail": "Function (} template<T> iterator_range<T>)",
    "insertText": "make_range(std::pair<T, T> p)"
  }
]