[
  {
    "label": "tuple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tuple"
  },
  {
    "label": "ByRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ByRef"
  },
  {
    "label": "AddRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AddRef"
  },
  {
    "label": "Get",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Get"
  },
  {
    "label": "Tuple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tuple"
  },
  {
    "label": "TupleElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TupleElement"
  },
  {
    "label": "GTEST_1_TUPLE_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_1_TUPLE_"
  },
  {
    "label": "gtest_internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "gtest_internal"
  },
  {
    "label": "GTEST_2_TUPLE_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_2_TUPLE_"
  },
  {
    "label": "GTEST_3_TUPLE_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_3_TUPLE_"
  },
  {
    "label": "GTEST_4_TUPLE_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_4_TUPLE_"
  },
  {
    "label": "GTEST_5_TUPLE_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_5_TUPLE_"
  },
  {
    "label": "GTEST_6_TUPLE_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_6_TUPLE_"
  },
  {
    "label": "GTEST_7_TUPLE_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_7_TUPLE_"
  },
  {
    "label": "GTEST_8_TUPLE_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_8_TUPLE_"
  },
  {
    "label": "GTEST_9_TUPLE_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_9_TUPLE_"
  },
  {
    "label": "tuple_size",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tuple_size"
  },
  {
    "label": "tuple_element",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tuple_element"
  },
  {
    "label": "SameSizeTuplePrefixComparator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameSizeTuplePrefixComparator"
  },
  {
    "label": "Tuple1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tuple1"
  },
  {
    "label": "Tuple2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tuple2"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_ # define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_ # include<utility> # if)",
    "insertText": "defined(__SYMBIAN32__) || (defined(__SUNPRO_CC) && __SUNPRO_CC < 0x590) # define GTEST_DECLARE_TUPLE_AS_FRIEND_ public: #else # define GTEST_DECLARE_TUPLE_AS_FRIEND_ \\ template <GTEST_10_TYPENAMES_(U)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (\\ private : # endif # if)",
    "insertText": "defined(_MSC_VER) && _MSC_VER >= 1600 # error \"gtest's tuple doesn't compile on Visual Studio 2010 or later. \\ GTEST_USE_OWN_TR1_TUPLE must be set to 0 on those compilers.\" #endif #define GTEST_0_TUPLE_(T) tuple<> #define GTEST_1_TUPLE_(T) tuple<T##0, void, void, void, void, void, void, \\ void, void, void> #define GTEST_2_TUPLE_(T) tuple<T##0, T##1, void, void, void, void, void, \\ void, void, void> #define GTEST_3_TUPLE_(T) tuple<T##0, T##1, T##2, void, void, void, void, \\ void, void, void> #define GTEST_4_TUPLE_(T) tuple<T##0, T##1, T##2, T##3, void, void, void, \\ void, void, void> #define GTEST_5_TUPLE_(T) tuple<T##0, T##1, T##2, T##3, T##4, void, void, \\ void, void, void> #define GTEST_6_TUPLE_(T) tuple<T##0, T##1, T##2, T##3, T##4, T##5, void, \\ void, void, void> #define GTEST_7_TUPLE_(T) tuple<T##0, T##1, T##2, T##3, T##4, T##5, T##6, \\ void, void, void> #define GTEST_8_TUPLE_(T) tuple<T##0, T##1, T##2, T##3, T##4, T##5, T##6, \\ T##7, void, void> #define GTEST_9_TUPLE_(T) tuple<T##0, T##1, T##2, T##3, T##4, T##5, T##6, \\ T##7, T##8, void> #define GTEST_10_TUPLE_(T) tuple<T##0, T##1, T##2, T##3, T##4, T##5, T##6, \\ T##7, T##8, T##9> #define GTEST_0_TYPENAMES_(T) #define GTEST_1_TYPENAMES_(T) typename T##0 #define GTEST_2_TYPENAMES_(T) typename T##0, typename T##1 #define GTEST_3_TYPENAMES_(T) typename T##0, typename T##1, typename T##2 #define GTEST_4_TYPENAMES_(T) typename T##0, typename T##1, typename T##2, \\ typename T##3 #define GTEST_5_TYPENAMES_(T) typename T##0, typename T##1, typename T##2, \\ typename T##3, typename T##4 #define GTEST_6_TYPENAMES_(T) typename T##0, typename T##1, typename T##2, \\ typename T##3, typename T##4, typename T##5 #define GTEST_7_TYPENAMES_(T) typename T##0, typename T##1, typename T##2, \\ typename T##3, typename T##4, typename T##5, typename T##6 #define GTEST_8_TYPENAMES_(T) typename T##0, typename T##1, typename T##2, \\ typename T##3, typename T##4, typename T##5, typename T##6, typename T##7 #define GTEST_9_TYPENAMES_(T) typename T##0, typename T##1, typename T##2, \\ typename T##3, typename T##4, typename T##5, typename T##6, \\ typename T##7, typename T##8 #define GTEST_10_TYPENAMES_(T)"
  },
  {
    "label": "GTEST_BY_REF_()",
    "kind": "Method",
    "detail": "Function (namespace tr1 { template<T0 = void,T1 = void,T2 = void,T3 = void,T4 = void,T5 = void,T6 = void,T7 = void,T8 = void,T9 = void> class tuple ; namespace gtest_internal { template<T> struct ByRef { typedef const T& type ; } ; template<T> struct ByRef<T&> { typedef T& type ; } ; # define)",
    "insertText": "GTEST_BY_REF_(T)"
  },
  {
    "label": "GTEST_ADD_REF_()",
    "kind": "Method",
    "detail": "Function (typedef T& type ; } ; template<T> struct AddRef<T&> { typedef T& type ; } ; # define)",
    "insertText": "GTEST_ADD_REF_(T)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (template<bool kIndexValid,int kIndex,class Tuple> struct TupleElement ; template<)",
    "insertText": "GTEST_10_TYPENAMES_(T)> struct TupleElement<true, 0, GTEST_10_TUPLE_(T)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (typedef T0 type ; } ; template<)",
    "insertText": "GTEST_10_TYPENAMES_(T)> struct TupleElement<true, 1, GTEST_10_TUPLE_(T)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (typedef T1 type ; } ; template<)",
    "insertText": "GTEST_10_TYPENAMES_(T)> struct TupleElement<true, 2, GTEST_10_TUPLE_(T)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (typedef T2 type ; } ; template<)",
    "insertText": "GTEST_10_TYPENAMES_(T)> struct TupleElement<true, 3, GTEST_10_TUPLE_(T)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (typedef T3 type ; } ; template<)",
    "insertText": "GTEST_10_TYPENAMES_(T)> struct TupleElement<true, 4, GTEST_10_TUPLE_(T)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (typedef T4 type ; } ; template<)",
    "insertText": "GTEST_10_TYPENAMES_(T)> struct TupleElement<true, 5, GTEST_10_TUPLE_(T)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (typedef T5 type ; } ; template<)",
    "insertText": "GTEST_10_TYPENAMES_(T)> struct TupleElement<true, 6, GTEST_10_TUPLE_(T)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (typedef T6 type ; } ; template<)",
    "insertText": "GTEST_10_TYPENAMES_(T)> struct TupleElement<true, 7, GTEST_10_TUPLE_(T)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (typedef T7 type ; } ; template<)",
    "insertText": "GTEST_10_TYPENAMES_(T)> struct TupleElement<true, 8, GTEST_10_TUPLE_(T)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (typedef T8 type ; } ; template<)",
    "insertText": "GTEST_10_TYPENAMES_(T)> struct TupleElement<true, 9, GTEST_10_TUPLE_(T)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (typedef T9 type ; } ; } template<> class tuple<> { public :)",
    "insertText": "tuple()"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(const tuple&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} tuple&)",
    "insertText": "operator(const tuple&)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (public : template<int k> class gtest_internal::Get ;)",
    "insertText": "tuple() : f0_()"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(GTEST_BY_REF_(T0) f0) : f0_(f0)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(const tuple& t) : f0_(t.f0_)"
  },
  {
    "label": "GTEST_1_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_1_TYPENAMES_(U)> tuple(const GTEST_1_TUPLE_(U)& t) : f0_(t.f0_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} tuple&)",
    "insertText": "operator(const tuple& t)"
  },
  {
    "label": "GTEST_1_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_1_TYPENAMES_(U)> tuple& operator=(const GTEST_1_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_1_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} GTEST_DECLARE_TUPLE_AS_FRIEND_ template<)",
    "insertText": "GTEST_1_TYPENAMES_(U)> tuple& CopyFrom(const GTEST_1_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_2_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (f0_ = t . f0_ ; return* this ; } T0 f0_ ; } ; template<)",
    "insertText": "GTEST_2_TYPENAMES_(T)> class GTEST_2_TUPLE_(T)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (public : template<int k> class gtest_internal::Get ;)",
    "insertText": "tuple() : f0_(), f1_()"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1) : f0_(f0), f1_(f1)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(const tuple& t) : f0_(t.f0_), f1_(t.f1_)"
  },
  {
    "label": "GTEST_2_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_2_TYPENAMES_(U)> tuple(const GTEST_2_TUPLE_(U)& t) : f0_(t.f0_), f1_(t.f1_)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (} template<U0,U1>)",
    "insertText": "tuple(const ::std::pair<U0, U1>& p) : f0_(p.first), f1_(p.second)"
  },
  {
    "label": "GTEST_2_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_2_TYPENAMES_(U)> tuple& operator=(const GTEST_2_TUPLE_(U)& t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<U0,U1> tuple&)",
    "insertText": "operator(const ::std::pair<U0, U1>& p)"
  },
  {
    "label": "GTEST_2_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (f0_ = p . first ; f1_ = p . second ; return* this ; } GTEST_DECLARE_TUPLE_AS_FRIEND_ template<)",
    "insertText": "GTEST_2_TYPENAMES_(U)> tuple& CopyFrom(const GTEST_2_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_3_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (f0_ = t . f0_ ; f1_ = t . f1_ ; return* this ; } T0 f0_ ; T1 f1_ ; } ; template<)",
    "insertText": "GTEST_3_TYPENAMES_(T)> class GTEST_3_TUPLE_(T)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (public : template<int k> class gtest_internal::Get ;)",
    "insertText": "tuple() : f0_(), f1_(), f2_()"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1, GTEST_BY_REF_(T2) f2) : f0_(f0), f1_(f1), f2_(f2)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(const tuple& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_)"
  },
  {
    "label": "GTEST_3_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_3_TYPENAMES_(U)> tuple(const GTEST_3_TUPLE_(U)& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_)"
  },
  {
    "label": "GTEST_3_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_3_TYPENAMES_(U)> tuple& operator=(const GTEST_3_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_3_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} GTEST_DECLARE_TUPLE_AS_FRIEND_ template<)",
    "insertText": "GTEST_3_TYPENAMES_(U)> tuple& CopyFrom(const GTEST_3_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_4_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (f0_ = t . f0_ ; f1_ = t . f1_ ; f2_ = t . f2_ ; return* this ; } T0 f0_ ; T1 f1_ ; T2 f2_ ; } ; template<)",
    "insertText": "GTEST_4_TYPENAMES_(T)> class GTEST_4_TUPLE_(T)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (public : template<int k> class gtest_internal::Get ;)",
    "insertText": "tuple() : f0_(), f1_(), f2_(), f3_()"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1, GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3) : f0_(f0), f1_(f1), f2_(f2), f3_(f3)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(const tuple& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_)"
  },
  {
    "label": "GTEST_4_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_4_TYPENAMES_(U)> tuple(const GTEST_4_TUPLE_(U)& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_)"
  },
  {
    "label": "GTEST_4_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_4_TYPENAMES_(U)> tuple& operator=(const GTEST_4_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_4_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} GTEST_DECLARE_TUPLE_AS_FRIEND_ template<)",
    "insertText": "GTEST_4_TYPENAMES_(U)> tuple& CopyFrom(const GTEST_4_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_5_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (f0_ = t . f0_ ; f1_ = t . f1_ ; f2_ = t . f2_ ; f3_ = t . f3_ ; return* this ; } T0 f0_ ; T1 f1_ ; T2 f2_ ; T3 f3_ ; } ; template<)",
    "insertText": "GTEST_5_TYPENAMES_(T)> class GTEST_5_TUPLE_(T)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (public : template<int k> class gtest_internal::Get ;)",
    "insertText": "tuple() : f0_(), f1_(), f2_(), f3_(), f4_()"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1, GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4) : f0_(f0), f1_(f1), f2_(f2), f3_(f3), f4_(f4)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(const tuple& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_), f4_(t.f4_)"
  },
  {
    "label": "GTEST_5_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_5_TYPENAMES_(U)> tuple(const GTEST_5_TUPLE_(U)& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_), f4_(t.f4_)"
  },
  {
    "label": "GTEST_5_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_5_TYPENAMES_(U)> tuple& operator=(const GTEST_5_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_5_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} GTEST_DECLARE_TUPLE_AS_FRIEND_ template<)",
    "insertText": "GTEST_5_TYPENAMES_(U)> tuple& CopyFrom(const GTEST_5_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_6_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (f0_ = t . f0_ ; f1_ = t . f1_ ; f2_ = t . f2_ ; f3_ = t . f3_ ; f4_ = t . f4_ ; return* this ; } T0 f0_ ; T1 f1_ ; T2 f2_ ; T3 f3_ ; T4 f4_ ; } ; template<)",
    "insertText": "GTEST_6_TYPENAMES_(T)> class GTEST_6_TUPLE_(T)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (public : template<int k> class gtest_internal::Get ;)",
    "insertText": "tuple() : f0_(), f1_(), f2_(), f3_(), f4_(), f5_()"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1, GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4, GTEST_BY_REF_(T5) f5) : f0_(f0), f1_(f1), f2_(f2), f3_(f3), f4_(f4), f5_(f5)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(const tuple& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_), f4_(t.f4_), f5_(t.f5_)"
  },
  {
    "label": "GTEST_6_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_6_TYPENAMES_(U)> tuple(const GTEST_6_TUPLE_(U)& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_), f4_(t.f4_), f5_(t.f5_)"
  },
  {
    "label": "GTEST_6_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_6_TYPENAMES_(U)> tuple& operator=(const GTEST_6_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_6_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} GTEST_DECLARE_TUPLE_AS_FRIEND_ template<)",
    "insertText": "GTEST_6_TYPENAMES_(U)> tuple& CopyFrom(const GTEST_6_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_7_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (f0_ = t . f0_ ; f1_ = t . f1_ ; f2_ = t . f2_ ; f3_ = t . f3_ ; f4_ = t . f4_ ; f5_ = t . f5_ ; return* this ; } T0 f0_ ; T1 f1_ ; T2 f2_ ; T3 f3_ ; T4 f4_ ; T5 f5_ ; } ; template<)",
    "insertText": "GTEST_7_TYPENAMES_(T)> class GTEST_7_TUPLE_(T)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (public : template<int k> class gtest_internal::Get ;)",
    "insertText": "tuple() : f0_(), f1_(), f2_(), f3_(), f4_(), f5_(), f6_()"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1, GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4, GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6) : f0_(f0), f1_(f1), f2_(f2), f3_(f3), f4_(f4), f5_(f5), f6_(f6)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(const tuple& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_), f4_(t.f4_), f5_(t.f5_), f6_(t.f6_)"
  },
  {
    "label": "GTEST_7_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_7_TYPENAMES_(U)> tuple(const GTEST_7_TUPLE_(U)& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_), f4_(t.f4_), f5_(t.f5_), f6_(t.f6_)"
  },
  {
    "label": "GTEST_7_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_7_TYPENAMES_(U)> tuple& operator=(const GTEST_7_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_7_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} GTEST_DECLARE_TUPLE_AS_FRIEND_ template<)",
    "insertText": "GTEST_7_TYPENAMES_(U)> tuple& CopyFrom(const GTEST_7_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_8_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (f0_ = t . f0_ ; f1_ = t . f1_ ; f2_ = t . f2_ ; f3_ = t . f3_ ; f4_ = t . f4_ ; f5_ = t . f5_ ; f6_ = t . f6_ ; return* this ; } T0 f0_ ; T1 f1_ ; T2 f2_ ; T3 f3_ ; T4 f4_ ; T5 f5_ ; T6 f6_ ; } ; template<)",
    "insertText": "GTEST_8_TYPENAMES_(T)> class GTEST_8_TUPLE_(T)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (public : template<int k> class gtest_internal::Get ;)",
    "insertText": "tuple() : f0_(), f1_(), f2_(), f3_(), f4_(), f5_(), f6_(), f7_()"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1, GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4, GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7) : f0_(f0), f1_(f1), f2_(f2), f3_(f3), f4_(f4), f5_(f5), f6_(f6), f7_(f7)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(const tuple& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_), f4_(t.f4_), f5_(t.f5_), f6_(t.f6_), f7_(t.f7_)"
  },
  {
    "label": "GTEST_8_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_8_TYPENAMES_(U)> tuple(const GTEST_8_TUPLE_(U)& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_), f4_(t.f4_), f5_(t.f5_), f6_(t.f6_), f7_(t.f7_)"
  },
  {
    "label": "GTEST_8_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_8_TYPENAMES_(U)> tuple& operator=(const GTEST_8_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_8_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} GTEST_DECLARE_TUPLE_AS_FRIEND_ template<)",
    "insertText": "GTEST_8_TYPENAMES_(U)> tuple& CopyFrom(const GTEST_8_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_9_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (f0_ = t . f0_ ; f1_ = t . f1_ ; f2_ = t . f2_ ; f3_ = t . f3_ ; f4_ = t . f4_ ; f5_ = t . f5_ ; f6_ = t . f6_ ; f7_ = t . f7_ ; return* this ; } T0 f0_ ; T1 f1_ ; T2 f2_ ; T3 f3_ ; T4 f4_ ; T5 f5_ ; T6 f6_ ; T7 f7_ ; } ; template<)",
    "insertText": "GTEST_9_TYPENAMES_(T)> class GTEST_9_TUPLE_(T)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (public : template<int k> class gtest_internal::Get ;)",
    "insertText": "tuple() : f0_(), f1_(), f2_(), f3_(), f4_(), f5_(), f6_(), f7_(), f8_()"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1, GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4, GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7, GTEST_BY_REF_(T8) f8) : f0_(f0), f1_(f1), f2_(f2), f3_(f3), f4_(f4), f5_(f5), f6_(f6), f7_(f7), f8_(f8)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(const tuple& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_), f4_(t.f4_), f5_(t.f5_), f6_(t.f6_), f7_(t.f7_), f8_(t.f8_)"
  },
  {
    "label": "GTEST_9_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_9_TYPENAMES_(U)> tuple(const GTEST_9_TUPLE_(U)& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_), f4_(t.f4_), f5_(t.f5_), f6_(t.f6_), f7_(t.f7_), f8_(t.f8_)"
  },
  {
    "label": "GTEST_9_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_9_TYPENAMES_(U)> tuple& operator=(const GTEST_9_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_9_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} GTEST_DECLARE_TUPLE_AS_FRIEND_ template<)",
    "insertText": "GTEST_9_TYPENAMES_(U)> tuple& CopyFrom(const GTEST_9_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (f0_ = t . f0_ ; f1_ = t . f1_ ; f2_ = t . f2_ ; f3_ = t . f3_ ; f4_ = t . f4_ ; f5_ = t . f5_ ; f6_ = t . f6_ ; f7_ = t . f7_ ; f8_ = t . f8_ ; return* this ; } T0 f0_ ; T1 f1_ ; T2 f2_ ; T3 f3_ ; T4 f4_ ; T5 f5_ ; T6 f6_ ; T7 f7_ ; T8 f8_ ; } ; template<)",
    "insertText": "GTEST_10_TYPENAMES_(T)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (public : template<int k> class gtest_internal::Get ;)",
    "insertText": "tuple() : f0_(), f1_(), f2_(), f3_(), f4_(), f5_(), f6_(), f7_(), f8_(), f9_()"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1, GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4, GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7, GTEST_BY_REF_(T8) f8, GTEST_BY_REF_(T9) f9) : f0_(f0), f1_(f1), f2_(f2), f3_(f3), f4_(f4), f5_(f5), f6_(f6), f7_(f7), f8_(f8), f9_(f9)"
  },
  {
    "label": "tuple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "tuple(const tuple& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_), f4_(t.f4_), f5_(t.f5_), f6_(t.f6_), f7_(t.f7_), f8_(t.f8_), f9_(t.f9_)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_10_TYPENAMES_(U)> tuple(const GTEST_10_TUPLE_(U)& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_), f4_(t.f4_), f5_(t.f5_), f6_(t.f6_), f7_(t.f7_), f8_(t.f8_), f9_(t.f9_)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_10_TYPENAMES_(U)> tuple& operator=(const GTEST_10_TUPLE_(U)& t)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} GTEST_DECLARE_TUPLE_AS_FRIEND_ template<)",
    "insertText": "GTEST_10_TYPENAMES_(U)> tuple& CopyFrom(const GTEST_10_TUPLE_(U)& t)"
  },
  {
    "label": "make_tuple()",
    "kind": "Method",
    "detail": "Function (f0_ = t . f0_ ; f1_ = t . f1_ ; f2_ = t . f2_ ; f3_ = t . f3_ ; f4_ = t . f4_ ; f5_ = t . f5_ ; f6_ = t . f6_ ; f7_ = t . f7_ ; f8_ = t . f8_ ; f9_ = t . f9_ ; return* this ; } T0 f0_ ; T1 f1_ ; T2 f2_ ; T3 f3_ ; T4 f4_ ; T5 f5_ ; T6 f6_ ; T7 f7_ ; T8 f8_ ; T9 f9_ ; } ; tuple<>)",
    "insertText": "make_tuple()"
  },
  {
    "label": "GTEST_1_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_1_TYPENAMES_(T)> inline GTEST_1_TUPLE_(T) make_tuple(const T0& f0)"
  },
  {
    "label": "GTEST_2_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_2_TYPENAMES_(T)> inline GTEST_2_TUPLE_(T) make_tuple(const T0& f0, const T1& f1)"
  },
  {
    "label": "GTEST_3_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_3_TYPENAMES_(T)> inline GTEST_3_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2)"
  },
  {
    "label": "GTEST_4_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_4_TYPENAMES_(T)> inline GTEST_4_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2, const T3& f3)"
  },
  {
    "label": "GTEST_5_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_5_TYPENAMES_(T)> inline GTEST_5_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2, const T3& f3, const T4& f4)"
  },
  {
    "label": "GTEST_6_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_6_TYPENAMES_(T)> inline GTEST_6_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2, const T3& f3, const T4& f4, const T5& f5)"
  },
  {
    "label": "GTEST_7_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_7_TYPENAMES_(T)> inline GTEST_7_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2, const T3& f3, const T4& f4, const T5& f5, const T6& f6)"
  },
  {
    "label": "GTEST_8_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_8_TYPENAMES_(T)> inline GTEST_8_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2, const T3& f3, const T4& f4, const T5& f5, const T6& f6, const T7& f7)"
  },
  {
    "label": "GTEST_9_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_9_TYPENAMES_(T)> inline GTEST_9_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2, const T3& f3, const T4& f4, const T5& f5, const T6& f6, const T7& f7, const T8& f8)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_10_TYPENAMES_(T)> inline GTEST_10_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2, const T3& f3, const T4& f4, const T5& f5, const T6& f6, const T7& f7, const T8& f8, const T9& f9)"
  },
  {
    "label": "GTEST_0_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<Tuple> struct tuple_size ; template<)",
    "insertText": "GTEST_0_TYPENAMES_(T)> struct tuple_size<GTEST_0_TUPLE_(T)"
  },
  {
    "label": "GTEST_1_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (const int value = 0 ; } ; template<)",
    "insertText": "GTEST_1_TYPENAMES_(T)> struct tuple_size<GTEST_1_TUPLE_(T)"
  },
  {
    "label": "GTEST_2_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (const int value = 1 ; } ; template<)",
    "insertText": "GTEST_2_TYPENAMES_(T)> struct tuple_size<GTEST_2_TUPLE_(T)"
  },
  {
    "label": "GTEST_3_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (const int value = 2 ; } ; template<)",
    "insertText": "GTEST_3_TYPENAMES_(T)> struct tuple_size<GTEST_3_TUPLE_(T)"
  },
  {
    "label": "GTEST_4_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (const int value = 3 ; } ; template<)",
    "insertText": "GTEST_4_TYPENAMES_(T)> struct tuple_size<GTEST_4_TUPLE_(T)"
  },
  {
    "label": "GTEST_5_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (const int value = 4 ; } ; template<)",
    "insertText": "GTEST_5_TYPENAMES_(T)> struct tuple_size<GTEST_5_TUPLE_(T)"
  },
  {
    "label": "GTEST_6_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (const int value = 5 ; } ; template<)",
    "insertText": "GTEST_6_TYPENAMES_(T)> struct tuple_size<GTEST_6_TUPLE_(T)"
  },
  {
    "label": "GTEST_7_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (const int value = 6 ; } ; template<)",
    "insertText": "GTEST_7_TYPENAMES_(T)> struct tuple_size<GTEST_7_TUPLE_(T)"
  },
  {
    "label": "GTEST_8_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (const int value = 7 ; } ; template<)",
    "insertText": "GTEST_8_TYPENAMES_(T)> struct tuple_size<GTEST_8_TUPLE_(T)"
  },
  {
    "label": "GTEST_9_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (const int value = 8 ; } ; template<)",
    "insertText": "GTEST_9_TYPENAMES_(T)> struct tuple_size<GTEST_9_TUPLE_(T)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (const int value = 9 ; } ; template<)",
    "insertText": "GTEST_10_TYPENAMES_(T)> struct tuple_size<GTEST_10_TUPLE_(T)"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (const int value = 1 0 ; } ; template<int k,class Tuple> struct tuple_element { typedef gtest_internal::TupleElement<)",
    "insertText": "k(tuple_size<Tuple>::value)"
  },
  {
    "label": "GTEST_TUPLE_ELEMENT_()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "GTEST_TUPLE_ELEMENT_(k, Tuple)"
  },
  {
    "label": "GTEST_ADD_REF_()",
    "kind": "Method",
    "detail": "Function (template<> class Get<0> { public : template<class Tuple>)",
    "insertText": "GTEST_ADD_REF_(GTEST_TUPLE_ELEMENT_(0, Tuple)) Field(Tuple& t)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<int k,)",
    "insertText": "GTEST_10_TYPENAMES_(T)> GTEST_BY_REF_(GTEST_TUPLE_ELEMENT_(k, GTEST_10_TUPLE_(T))) get(const GTEST_10_TUPLE_(T)& t)"
  },
  {
    "label": "Eq()",
    "kind": "Method",
    "detail": "Function (} namespace gtest_internal { template<int kSize1,int kSize2> struct SameSizeTuplePrefixComparator ; template<> struct SameSizeTuplePrefixComparator<0,0> { template<class Tuple1,class Tuple2> bool)",
    "insertText": "Eq(const Tuple1& , const Tuple2&)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} } ; } template<)",
    "insertText": "GTEST_10_TYPENAMES_(T), GTEST_10_TYPENAMES_(U)> inline bool operator==(const GTEST_10_TUPLE_(T)& t, const GTEST_10_TUPLE_(U)& u)"
  },
  {
    "label": "GTEST_10_TYPENAMES_()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "GTEST_10_TYPENAMES_(T), GTEST_10_TYPENAMES_(U)> inline bool operator!=(const GTEST_10_TUPLE_(T)& t, const GTEST_10_TUPLE_(U)& u)"
  }
]