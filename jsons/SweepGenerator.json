[
  {
    "label": "FProgressCancel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProgressCancel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSweepGeneratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSweepGeneratorBase"
  },
  {
    "label": "FVerticalCylinderGeneratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVerticalCylinderGeneratorBase"
  },
  {
    "label": "FCylinderGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCylinderGenerator"
  },
  {
    "label": "FArrowGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrowGenerator"
  },
  {
    "label": "FGeneralizedCylinderGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeneralizedCylinderGenerator"
  },
  {
    "label": "FProfileSweepGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfileSweepGenerator"
  },
  {
    "label": "FSweepGeneratorBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BoxTypes . h \" # include \" CompGeom / PolygonTriangulation . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" Curve / CurveUtil . h \" # include \" FrameTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" IndexTypes . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" MathUtil . h \" # include \" MatrixTypes . h \" # include \" MeshShapeGenerator . h \" # include \" Misc / AssertionMacros . h \" # include \" Polygon2 . h \" # include \" Templates / UnrealTemplate . h \" # include \" Util / ProgressCancel . h \" # include \" VectorTypes . h \" class FProgressCancel ; namespace UE { namespace Geometry { enum class ECapType { None = 0,FlatTriangulation = 1,FlatMidpointFan = 2 } ; class FSweepGeneratorBase : public FMeshShapeGenerator { public : ~)",
    "insertText": "FSweepGeneratorBase()"
  },
  {
    "label": "ConstructMeshTopology()",
    "kind": "Method",
    "detail": "Function (} bool bPolygroupPerQuad = false ; bool bProfileCurveIsClosed = true ; protected : int32 CapVertStart [ 2 ],CapNormalStart [ 2 ],CapUVStart [ 2 ],CapTriangleStart [ 2 ],CapPolygonStart [ 2 ] ; void)",
    "insertText": "ConstructMeshTopology(const FPolygon2d& CrossSection, const TArrayView<const int32>& UVSections, const TArrayView<const int32>& NormalSections, const TArrayView<const int32>& SharpNormalsAlongLength, bool bEvenlySpaceUVs, const TArrayView<const FVector3d>& Path, int32 NumCrossSections, bool bLoop, const ECapType Caps[2], FVector2f SectionsUVScale, FVector2f CapUVScale, FVector2f CapUVOffset, const TArrayView<const float>& CustomCrossSectionTexCoord = {}, const TArrayView<const float>& CustomPathTexCoord = {})"
  },
  {
    "label": "VertexCount()",
    "kind": "Method",
    "detail": "Function (const int32 XVerts = CrossSection .)",
    "insertText": "VertexCount()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 XSegments = bProfileCurveIsClosed ? XVerts : XVerts - 1 ; const int32 XNormals = XVerts + NormalSections .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float TotalPerimeter = 0 . 0 f,TotalPathLength = 0 . 0 f ; TArray<float> CrossSectionTexCoord,PathTexCoord ;)",
    "insertText": "if(bProfileCurveIsClosed && CustomCrossSectionTexCoord.Num() >= XVerts + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CrossSectionTexCoord = CustomCrossSectionTexCoord ; } else)",
    "insertText": "if(bProfileCurveIsClosed && CustomCrossSectionTexCoord.Num() == XVerts)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CrossSectionTexCoord = CustomCrossSectionTexCoord ; CrossSectionTexCoord .)",
    "insertText": "Add(CrossSectionTexCoord[0])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bProfileCurveIsClosed == false && CustomCrossSectionTexCoord.Num() >= XVerts)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CrossSectionTexCoord = CustomCrossSectionTexCoord ; } else)",
    "insertText": "if(bEvenlySpaceUVs)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CrossSectionTexCoord .)",
    "insertText": "Add(0.0f)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (float SegLen =)",
    "insertText": "float(Distance(CrossSection[Idx], CrossSection[(Idx + 1) % XSegments]))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TotalPerimeter + = SegLen ; CrossSectionTexCoord .)",
    "insertText": "Add(TotalPerimeter)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} TotalPerimeter =)",
    "insertText": "Max(TotalPerimeter, FMathf::ZeroTolerance)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (CrossSectionTexCoord [ Idx ] / = TotalPerimeter ; CrossSectionTexCoord [ Idx ] = 1 . 0 f - CrossSectionTexCoord [ Idx ] ; } } else {)",
    "insertText": "for(int Idx = 0; Idx < XSegments; Idx++)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (float U =)",
    "insertText": "float(Idx) / float(XSegments)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CrossSectionTexCoord .)",
    "insertText": "Add(1.0f - U)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CustomPathTexCoord.Num() >= NumCrossSections)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PathTexCoord = CustomPathTexCoord ; } else)",
    "insertText": "if(bLoop && CustomPathTexCoord.Num() == NumCrossSections - 1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PathTexCoord = CustomPathTexCoord ; PathTexCoord .)",
    "insertText": "Add(PathTexCoord[0])"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int NumPathSegs = bLoop ? Path .)",
    "insertText": "Num() : Path.Num()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (float SegLen =)",
    "insertText": "float(Distance(Path[Idx], Path[(Idx + 1) % Path.Num()]))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TotalPathLength + = SegLen ; PathTexCoord .)",
    "insertText": "Add(TotalPathLength)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} TotalPathLength =)",
    "insertText": "Max(TotalPathLength, FMathf::ZeroTolerance)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (PathTexCoord [ Idx ] / = TotalPathLength ; PathTexCoord [ Idx ] = 1 . 0 f - PathTexCoord [ Idx ] ; } } else {)",
    "insertText": "for(int32 Idx = 0; Idx < NumCrossSections; Idx++)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (float V =)",
    "insertText": "float(Idx) / float(NumCrossSections - 1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PathTexCoord .)",
    "insertText": "Add(1.0f - V)"
  },
  {
    "label": "NumCrossSections()",
    "kind": "Method",
    "detail": "Function (} } int32 NumVerts = XVerts*)",
    "insertText": "NumCrossSections(bLoop ? XVerts : 0)"
  },
  {
    "label": "NumCrossSections()",
    "kind": "Method",
    "detail": "Function (int32 NumNormals =)",
    "insertText": "NumCrossSections(XNormals * NumCrossSections - (bLoop ? XNormals : 0))"
  },
  {
    "label": "NumPolygons()",
    "kind": "Method",
    "detail": "Function (int32 NumUVs = NumCrossSections> 1 ? XUVs* NumCrossSections : 0 ; int32)",
    "insertText": "NumPolygons(NumCrossSections - 1)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (int32 NumTriangles = NumPolygons* 2 ; TArray<FIndex3i> OutTriangles ;)",
    "insertText": "ensure(!bLoop || (Caps[0] == ECapType::None && Caps[1] == ECapType::None))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CapVertStart [ CapIdx ] = NumVerts ; CapNormalStart [ CapIdx ] = NumNormals ; CapUVStart [ CapIdx ] = NumUVs ; CapTriangleStart [ CapIdx ] = NumTriangles ; CapPolygonStart [ CapIdx ] = NumPolygons ;)",
    "insertText": "if(Caps[CapIdx] == ECapType::FlatTriangulation)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NumTriangles + = XVerts - 2 ; NumPolygons + + ; NumUVs + = XVerts ; NumNormals + = XVerts ; } else)",
    "insertText": "if(Caps[CapIdx] == ECapType::FlatMidpointFan)"
  },
  {
    "label": "SetBufferSizes()",
    "kind": "Method",
    "detail": "Function (NumTriangles + = XSegments ; NumPolygons + + ; NumUVs + = XVerts + 1 ; NumNormals + = XVerts + 1 ; NumVerts + = 1 ; } } })",
    "insertText": "SetBufferSizes(NumVerts, NumTriangles, NumUVs, NumNormals)"
  },
  {
    "label": "CapIdx()",
    "kind": "Method",
    "detail": "Function (int32 VertOffset =)",
    "insertText": "CapIdx(XVerts * (NumCrossSections - 1))"
  },
  {
    "label": "TriangulateSimplePolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriangulateSimplePolygon(CrossSection.GetVertices(), OutTriangles)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 TriIdx = CapTriangleStart [ CapIdx ] ; int32 PolyIdx = CapPolygonStart [ CapIdx ] ;)",
    "insertText": "for(const FIndex3i& Triangle : OutTriangles)"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (bool Flipped = CapIdx = = 0 ;)",
    "insertText": "SetTriangle(TriIdx, Triangle.A + VertOffset, Triangle.B + VertOffset, Triangle.C + VertOffset, Flipped)"
  },
  {
    "label": "SetTriangleUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleUVs(TriIdx, Triangle.A + CapUVStart[CapIdx], Triangle.B + CapUVStart[CapIdx], Triangle.C + CapUVStart[CapIdx], Flipped)"
  },
  {
    "label": "SetTriangleNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleNormals(TriIdx, Triangle.A + CapNormalStart[CapIdx], Triangle.B + CapNormalStart[CapIdx], Triangle.C + CapNormalStart[CapIdx], Flipped)"
  },
  {
    "label": "SetTrianglePolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrianglePolygon(TriIdx, PolyIdx)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (TriIdx + + ; } float SideScale =)",
    "insertText": "float(2 * CapIdx - 1)"
  },
  {
    "label": "CenteredVert()",
    "kind": "Method",
    "detail": "Function (FVector2f)",
    "insertText": "CenteredVert(FVector2f)CrossSection.GetVertices()"
  },
  {
    "label": "SetUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUV(CapUVStart[CapIdx] + Idx, FVector2f(CenteredVert.X * SideScale, CenteredVert.Y), VertOffset + Idx)"
  },
  {
    "label": "SetNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNormal(CapNormalStart[CapIdx] + Idx, FVector3f::Zero(), VertOffset + Idx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 CapVertStartIdx = CapVertStart [ CapIdx ] ; int32 TriIdx = CapTriangleStart [ CapIdx ] ; int32 PolyIdx = CapPolygonStart [ CapIdx ] ;)",
    "insertText": "for(int32 VertIdx = 0; VertIdx < XSegments; VertIdx++)"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (bool Flipped = CapIdx = = 0 ;)",
    "insertText": "SetTriangle(TriIdx, VertOffset + VertIdx, CapVertStartIdx, VertOffset + (VertIdx + 1) % XVerts, Flipped)"
  },
  {
    "label": "SetTriangleUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleUVs(TriIdx, CapUVStart[CapIdx] + VertIdx, CapUVStart[CapIdx] + XVerts, CapUVStart[CapIdx] + (VertIdx + 1) % XVerts, Flipped)"
  },
  {
    "label": "SetTriangleNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleNormals(TriIdx, CapNormalStart[CapIdx] + VertIdx, CapNormalStart[CapIdx] + XVerts, CapNormalStart[CapIdx] + (VertIdx + 1) % XVerts, Flipped)"
  },
  {
    "label": "SetUV()",
    "kind": "Method",
    "detail": "Function (TriIdx + + ; })",
    "insertText": "SetUV(CapUVStart[CapIdx] + XVerts, FVector2f::Zero() + CapUVOffset, CapVertStartIdx)"
  },
  {
    "label": "SetNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNormal(CapNormalStart[CapIdx] + XVerts, FVector3f::Zero(), CapVertStartIdx)"
  },
  {
    "label": "SetUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUV(CapUVStart[CapIdx] + Idx, FVector2f(CenteredVert.X, CenteredVert.Y), VertOffset + Idx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } int MinValidCrossSections = bLoop ? 3 : 2 ; int CurFaceGroupIndex = NumPolygons ;)",
    "insertText": "if(NumCrossSections >= MinValidCrossSections)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 UVSection = 0,UVSubIdx = 0 ; int CrossSectionsMod = NumCrossSections ;)",
    "insertText": "if(bLoop)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 NextDupVertIdx = UVSection<NumSections ? UVSections [ UVSection ] : - 1 ;)",
    "insertText": "for(int32 VertSubIdx = 0; VertSubIdx < XSegments; UVSubIdx++)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (FVector2f UV =)",
    "insertText": "FVector2f(CrossSectionTexCoord[VertSubIdx], PathTexCoord[XIdx])"
  },
  {
    "label": "SetUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUV(XIdx * XUVs + UVSubIdx, UV * SectionsUVScale, (XIdx % CrossSectionsMod) * XVerts + VertSubIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(VertSubIdx == NextDupVertIdx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (NextDupVertIdx = UVSection<NumSections ? UVSections [ UVSection ] : - 1 ; } else {)",
    "insertText": "for(int32 XIdx = 0; XIdx + 1 < NumCrossSections; XIdx++)"
  },
  {
    "label": "SetTriangleUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleUVs(XSegments * 2 * XIdx + 2 * VertSubIdx, XIdx * XUVs + UVSubIdx, XIdx * XUVs + UVSubIdx + 1, (XIdx + 1) * XUVs + UVSubIdx, true)"
  },
  {
    "label": "SetTriangleUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleUVs(XSegments * 2 * XIdx + 2 * VertSubIdx + 1, (XIdx + 1) * XUVs + UVSubIdx + 1, (XIdx + 1) * XUVs + UVSubIdx, XIdx * XUVs + UVSubIdx + 1, true)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} VertSubIdx + + ; } } { int32 VertSubIdx = bProfileCurveIsClosed ? 0 : XSegments ;)",
    "insertText": "for(int32 XIdx = 0; XIdx < NumCrossSections; XIdx++)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (FVector2f UV =)",
    "insertText": "FVector2f(CrossSectionTexCoord.Last(), PathTexCoord[XIdx])"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (int32 NormalSection = 0 ; NextDupVertIdx = NormalSection<NumSections ? NormalSections [ NormalSection ] : - 1 ;)",
    "insertText": "check(NextDupVertIdx < XVerts)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int SharpNormalIdx = 0 ;)",
    "insertText": "for(int32 XIdx = 0, NormalXIdx = 0; XIdx < NumCrossSections; XIdx++, NormalXIdx++)"
  },
  {
    "label": "SetNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNormal((NormalXIdx % NormalCrossSectionsMod) * XNormals + NormalSubIdx, FVector3f(0, 0, 0), (XIdx % CrossSectionsMod) * XVerts + VertSubIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(VertSubIdx < XSegments)"
  },
  {
    "label": "WrappedNextNormalSubIdx()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "WrappedNextNormalSubIdx(NormalSubIdx + 1)"
  },
  {
    "label": "WrappedNextVertexSubIdx()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "WrappedNextVertexSubIdx(VertSubIdx + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (SharpNormalIdx = 0 ;)",
    "insertText": "for(int32 XIdx = 0, NXIdx = 0; XIdx + 1 < NumCrossSections; XIdx++, NXIdx++)"
  },
  {
    "label": "NextXIdx()",
    "kind": "Method",
    "detail": "Function (int32 T0Idx = XSegments* 2* XIdx + 2* VertSubIdx ; int32 T1Idx = T0Idx + 1 ; int32 PIdx = XSegments* XIdx + VertSubIdx ; int32)",
    "insertText": "NextXIdx(XIdx + 1)"
  },
  {
    "label": "NextNXIdx()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NextNXIdx(NXIdx + 1)"
  },
  {
    "label": "SetTrianglePolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrianglePolygon(T0Idx, (bPolygroupPerQuad) ? PIdx : (CurFaceGroupIndex + XIdx))"
  },
  {
    "label": "SetTrianglePolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrianglePolygon(T1Idx, (bPolygroupPerQuad) ? PIdx : (CurFaceGroupIndex + XIdx))"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangle(T0Idx, XIdx * XVerts + VertSubIdx, XIdx * XVerts + WrappedNextVertexSubIdx, NextXIdx * XVerts + VertSubIdx, true)"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangle(T1Idx, NextXIdx * XVerts + WrappedNextVertexSubIdx, NextXIdx * XVerts + VertSubIdx, XIdx * XVerts + WrappedNextVertexSubIdx, true)"
  },
  {
    "label": "SetTriangleNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleNormals(T0Idx, NXIdx * XNormals + NormalSubIdx, NXIdx * XNormals + WrappedNextNormalSubIdx, NextNXIdx * XNormals + NormalSubIdx, true)"
  },
  {
    "label": "SetTriangleNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleNormals(T1Idx, NextNXIdx * XNormals + WrappedNextNormalSubIdx, NextNXIdx * XNormals + NormalSubIdx, NXIdx * XNormals + WrappedNextNormalSubIdx, true)"
  },
  {
    "label": "ComputeSegLengths()",
    "kind": "Method",
    "detail": "Function (NXIdx + + ; SharpNormalIdx + + ; } } } VertSubIdx + + ; } } } } } ; class FVerticalCylinderGeneratorBase : public FSweepGeneratorBase { public : int AngleSamples = 1 6 ; bool bCapped = false ; bool bUVScaleMatchSidesAndCaps = true ; ECapType CapType = ECapType::FlatMidpointFan ; float)",
    "insertText": "ComputeSegLengths(const TArrayView<float>& Radii, const TArrayView<float>& Heights, TArray<float>& AlongPercents)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (AlongPercents .)",
    "insertText": "SetNum(NumX)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (AlongPercents [ 0 ] = 0 ;)",
    "insertText": "for(int XIdx = 0; XIdx+1 < NumX; XIdx++)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (LenAlong + =)",
    "insertText": "float(Dist)"
  },
  {
    "label": "GenerateVerticalCircleSweep()",
    "kind": "Method",
    "detail": "Function (AlongPercents [ XIdx + 1 ] / = LenAlong ; } return LenAlong ; } bool)",
    "insertText": "GenerateVerticalCircleSweep(const TArrayView<float>& Radii, const TArrayView<float>& Heights, const TArrayView<int>& SharpNormalsAlongLength)"
  },
  {
    "label": "MakeCircle()",
    "kind": "Method",
    "detail": "Function (FPolygon2d X =)",
    "insertText": "MakeCircle(1.0, AngleSamples)"
  },
  {
    "label": "GetVertices()",
    "kind": "Method",
    "detail": "Function (const TArray<FVector2d>& XVerts = X .)",
    "insertText": "GetVertices()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ECapType Caps [ 2 ] = { ECapType::None,ECapType::None } ;)",
    "insertText": "if(bCapped)"
  },
  {
    "label": "ConstructMeshTopology()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructMeshTopology(X, {}, {}, SharpNormalsAlongLength, false, {}, NumX, false, Caps, FVector2f(1, 1), FVector2f(.5f, .5f), FVector2f(.5f, .5f))"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<FVector2d> NormalSides ; NormalSides .)",
    "insertText": "SetNum(NumX - 1)"
  },
  {
    "label": "FVector2d()",
    "kind": "Method",
    "detail": "Function (FVector2d Vec =)",
    "insertText": "FVector2d(Radii[XIdx + 1], Heights[XIdx + 1]) - FVector2d(Radii[XIdx], Heights[XIdx])"
  },
  {
    "label": "Normalized()",
    "kind": "Method",
    "detail": "Function (NormalSides [ XIdx ] =)",
    "insertText": "Normalized(PerpCW(Vec))"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (SmoothedNormalSides [ 0 ] = NormalSides [ 0 ] ; SmoothedNormalSides .)",
    "insertText": "Last() = NormalSides.Last()"
  },
  {
    "label": "Normalized()",
    "kind": "Method",
    "detail": "Function (SmoothedNormalSides [ XIdx ] =)",
    "insertText": "Normalized(NormalSides[XIdx] + NormalSides[XIdx - 1])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int SubIdx = 0; SubIdx < X.VertexCount(); SubIdx++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int SharpNormalIdx = 0 ;)",
    "insertText": "for(int XIdx = 0, NormalXIdx = 0; XIdx < NumX; ++XIdx, ++NormalXIdx)"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (Normals [ SubIdx + NormalXIdx* AngleSamples ] =)",
    "insertText": "FVector3f(float(XVerts[SubIdx].X*NormalSides[XIdx-1].X), float(XVerts[SubIdx].Y*NormalSides[XIdx-1].X), float(NormalSides[XIdx-1].Y))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} NormalXIdx + + ;)",
    "insertText": "if(ensure(XIdx + 1 < NumX))"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (Normals [ SubIdx + NormalXIdx* AngleSamples ] =)",
    "insertText": "FVector3f(float(XVerts[SubIdx].X*NormalSides[XIdx].X), float(XVerts[SubIdx].Y*NormalSides[XIdx].X), float(NormalSides[XIdx].Y))"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (} SharpNormalIdx + + ; } else { Normals [ SubIdx + NormalXIdx* AngleSamples ] =)",
    "insertText": "FVector3f(float(XVerts[SubIdx].X*SmoothedNormalSides[XIdx].X), float(XVerts[SubIdx].Y*SmoothedNormalSides[XIdx].X), float(SmoothedNormalSides[XIdx].Y))"
  },
  {
    "label": "UnitZ()",
    "kind": "Method",
    "detail": "Function (Vertices [ CapVertStart [ CapIdx ] ] =)",
    "insertText": "UnitZ() * (double)Heights[CapIdx * (Heights.Num() - 1)"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (Normals [ CapNormalStart [ XBotTop ] + SubIdx ] =)",
    "insertText": "FVector3f(0.f, 0.f, float(2 * XBotTop - 1))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int CapIdx = 0; CapIdx < 2; CapIdx++)"
  },
  {
    "label": "VertexCount()",
    "kind": "Method",
    "detail": "Function (Normals [ CapNormalStart [ CapIdx ] + X .)",
    "insertText": "VertexCount()] = FVector3f(0.f, 0.f, float(2 * CapIdx - 1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(bUVScaleMatchSidesAndCaps)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (float MaxAbsRad =)",
    "insertText": "Abs(Radii[0])"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (MaxAbsRad =)",
    "insertText": "Max(FMathf::Abs(Radii[XIdx]), MaxAbsRad)"
  },
  {
    "label": "Max3()",
    "kind": "Method",
    "detail": "Function (} float AbsHeight = LenAlong ; float MaxAbsCircumference = MaxAbsRad* FMathf::TwoPi ; float ThetaScale = MaxAbsCircumference ; float HeightScale = AbsHeight ; float CapScale = MaxAbsRad* 2 ; float MaxScale =)",
    "insertText": "Max3(ThetaScale, HeightScale, CapScale)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ThetaScale / = MaxScale ; HeightScale / = MaxScale ; CapScale / = MaxScale ;)",
    "insertText": "for(int UVIdx = 0; UVIdx < CapUVStart[0]; UVIdx++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (UVs [ UVIdx ] . X* = ThetaScale ; UVs [ UVIdx ] . Y* = HeightScale ; })",
    "insertText": "for(int UVIdx = CapUVStart[0]; UVIdx < UVs.Num(); UVIdx++)"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (UVs [ UVIdx ]* = CapScale ; } } return true ; } } ; class FCylinderGenerator : public FVerticalCylinderGeneratorBase { public : float Radius [ 2 ] = { 1 . 0 f,1 . 0 f } ; float Height = 1 . 0 f ; int LengthSamples = 0 ; public : FMeshShapeGenerator&)",
    "insertText": "Generate()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (AngleSamples =)",
    "insertText": "Max(AngleSamples, 3)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} TArray<float> Radii,Heights ; Radii .)",
    "insertText": "Add(Radius[0])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Heights .)",
    "insertText": "Add(0)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (float Along =)",
    "insertText": "float(ExtraIdx + 1) / float(LengthSamples + 1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Radii .)",
    "insertText": "Add(FMath::Lerp(Radius[0], Radius[1], Along))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Heights .)",
    "insertText": "Add(Height * Along)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} Radii .)",
    "insertText": "Add(Radius[1])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Heights .)",
    "insertText": "Add(Height)"
  },
  {
    "label": "GenerateVerticalCircleSweep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateVerticalCircleSweep(Radii, Heights, {})"
  },
  {
    "label": "ComputeSegLengths()",
    "kind": "Method",
    "detail": "Function (TArray<float> AlongPercents ; TArray<float> Radii { StickRadius,StickRadius,HeadBaseRadius,HeadTipRadius } ; TArray<float> Heights { 0,StickLength,StickLength,StickLength + HeadLength } ; float LenAlong =)",
    "insertText": "ComputeSegLengths(Radii, Heights, AlongPercents)"
  },
  {
    "label": "Idx()",
    "kind": "Method",
    "detail": "Function (AdditionalLengthSamples [)",
    "insertText": "Idx(int)(.5f+AlongPercents[Idx + 1] * float(TargetSamples))"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (const float SrcRadii [ ] { StickRadius,StickRadius,HeadBaseRadius,HeadTipRadius } ; const float SrcHeights [ ] { 0,StickLength,StickLength,StickLength + HeadLength } ; TArray<float> Radii,Heights ; const int NumVerts = 4 + AdditionalLengthSamples [ 0 ] + AdditionalLengthSamples [ 1 ] + AdditionalLengthSamples [ 2 ] ; Radii .)",
    "insertText": "SetNumUninitialized(NumVerts)"
  },
  {
    "label": "VertIdx()",
    "kind": "Method",
    "detail": "Function (int VertIdx = 0 ; auto SetVert = [& Radii,& Heights,&)",
    "insertText": "VertIdx(float Radius, float Height)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Radii [ VertIdx ] = Radius ; Heights [ VertIdx ] = Height ; + + VertIdx ; } ;)",
    "insertText": "for(int SegIdx = 0; true; ++SegIdx)"
  },
  {
    "label": "SetVert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVert(SrcRadii[SegIdx], SrcHeights[SegIdx])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "for(int ExtraSeg = 1, NumExtraSegs = AdditionalLengthSamples[SegIdx] + 1; ExtraSeg < NumExtraSegs; ++ExtraSeg)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float Along =)",
    "insertText": "float(ExtraSeg) / float(NumExtraSegs)"
  },
  {
    "label": "SetVert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVert(FMath::Lerp(SrcRadii[SegIdx], SrcRadii[SegIdx + 1], Along), FMath::Lerp(SrcHeights[SegIdx], SrcHeights[SegIdx + 1], Along))"
  },
  {
    "label": "GenerateVerticalCircleSweep()",
    "kind": "Method",
    "detail": "Function (} } TArray<int> SharpNormalsAlongLength { 1 + AdditionalLengthSamples [ 0 ],2 + AdditionalLengthSamples [ 0 ] + AdditionalLengthSamples [ 1 ] } ;)",
    "insertText": "GenerateVerticalCircleSweep(Radii, Heights, SharpNormalsAlongLength)"
  },
  {
    "label": "SetMiterLimitByAngle()",
    "kind": "Method",
    "detail": "Function (MiterLimit = InMiterLimit ; bAlignFramesToSampledTangents = true ; } void)",
    "insertText": "SetMiterLimitByAngle(double MiterAngleLimitInDeg)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (MiterAngleLimitInDeg =)",
    "insertText": "Clamp(MiterAngleLimitInDeg, 0, 180 - FMathd::ZeroTolerance)"
  },
  {
    "label": "Sin()",
    "kind": "Method",
    "detail": "Function (MiterLimit = 1 . 0 /)",
    "insertText": "Sin(MiterAngleLimitInDeg * FMathd::DegToRad * .5)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ECapType Caps [ 2 ] = { ECapType::None,ECapType::None } ;)",
    "insertText": "if(bCapped && !bLoop)"
  },
  {
    "label": "bHavePathScaling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bHavePathScaling(PathScales.Num() == PathNum)"
  },
  {
    "label": "bApplyScaling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bApplyScaling(bHavePathScaling|| (StartScale != 1.0) || (EndScale != 1.0)) && (bLoop == false)"
  },
  {
    "label": "bNeedArcLength()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bNeedArcLength(bApplyScaling || bUVScaleRelativeWorld)"
  },
  {
    "label": "Bounds()",
    "kind": "Method",
    "detail": "Function (FAxisAlignedBox2f)",
    "insertText": "Bounds(FAxisAlignedBox2f)CrossSection.Bounds()"
  },
  {
    "label": "SectionScale()",
    "kind": "Method",
    "detail": "Function (FVector2f)",
    "insertText": "SectionScale(1.f, 1.f), CapScale((float)BoundsMaxDimInv, (float)BoundsMaxDimInv)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (SectionScale . X =)",
    "insertText": "float(Perimeter / UnitUVInWorldCoordinates)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (SectionScale . Y =)",
    "insertText": "float(TotalPathArcLength / UnitUVInWorldCoordinates)"
  },
  {
    "label": "ConstructMeshTopology()",
    "kind": "Method",
    "detail": "Function (CapScale . X = CapScale . Y = 1 . 0 f / UnitUVInWorldCoordinates ; })",
    "insertText": "ConstructMeshTopology(CrossSection, {}, {}, {}, true, Path, PathNum + (bLoop ? 1 : 0), bLoop, Caps, SectionScale, CapScale, Bounds.Center(), CrossSectionTexCoord, PathTexCoord)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<FVector2d> XNormals ; XNormals .)",
    "insertText": "SetNum(XNum)"
  },
  {
    "label": "GetNormal_FaceAvg()",
    "kind": "Method",
    "detail": "Function (XNormals [ Idx ] = CrossSection .)",
    "insertText": "GetNormal_FaceAvg(Idx)"
  },
  {
    "label": "bHaveExplicitFrames()",
    "kind": "Method",
    "detail": "Function (} double AccumArcLength = 0 ; FFrame3d CrossSectionFrame = InitialFrame ; bool)",
    "insertText": "bHaveExplicitFrames(PathFrames.Num() == Path.Num())"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (FVector3d C = Path [ PathIdx ] ; FVector3d X,Y ; FMatrix2d MiterPosScale =)",
    "insertText": "Identity()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CrossSectionFrame = PathFrames [ PathIdx ] ; C = PathFrames [ PathIdx ] . Origin ; })",
    "insertText": "if(!bHaveExplicitFrames || bAlignFramesToSampledTangents)"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (FVector3d ToPrev,ToNext ; UE::Geometry::CurveUtil::GetVectorsToPrevNext<double,)",
    "insertText": "FVector3d(Path, PathIdx, ToPrev, ToNext, true, bLoop)"
  },
  {
    "label": "Normalized()",
    "kind": "Method",
    "detail": "Function (FVector3d Tangent =)",
    "insertText": "Normalized(-ToPrev + ToNext)"
  },
  {
    "label": "AlignAxis()",
    "kind": "Method",
    "detail": "Function (CrossSectionFrame .)",
    "insertText": "AlignAxis(2, Tangent)"
  },
  {
    "label": "ScaleAlong()",
    "kind": "Method",
    "detail": "Function (FVector3d TurnDir = ToPrev + ToNext ; FVector2d)",
    "insertText": "ScaleAlong(FVector2d)CrossSectionFrame.ToFrameVector(TurnDir)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (ScaleAmount = MiterLimit ; } else { ScaleAmount =)",
    "insertText": "Sqrt(SqrScale)"
  },
  {
    "label": "AxisScale()",
    "kind": "Method",
    "detail": "Function (} MiterPosScale =)",
    "insertText": "AxisScale(ScaleAlong, ScaleAmount, false)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (} } } } X = CrossSectionFrame .)",
    "insertText": "X()"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (Y = CrossSectionFrame .)",
    "insertText": "Y()"
  },
  {
    "label": "PathScaling()",
    "kind": "Method",
    "detail": "Function (FVector2d)",
    "insertText": "PathScaling(bHavePathScaling) ? PathScales[PathIdx] : FVector2d::One()"
  },
  {
    "label": "MiterPosScale()",
    "kind": "Method",
    "detail": "Function (FVector2d XP =)",
    "insertText": "MiterPosScale(UniformScale * PathScaling * CrossSection[SubIdx])"
  },
  {
    "label": "XNum()",
    "kind": "Method",
    "detail": "Function (FVector2d XN = XNormals [ SubIdx ] ; Vertices [ SubIdx + PathIdx* XNum ] = C + X* XP . X + Y* XP . Y ; Normals [ SubIdx + PathIdx*)",
    "insertText": "XNum(FVector3f)(X * XN.X + Y * XN.Y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(PathIdx < PathNum - 1)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (AccumArcLength + =)",
    "insertText": "Distance(C, Path[PathIdx + 1])"
  },
  {
    "label": "CapIdx()",
    "kind": "Method",
    "detail": "Function (Vertices [ CapVertStart [ CapIdx ] ] = Path [)",
    "insertText": "CapIdx(Path.Num() - 1)"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (FVector3d Normal = CurveUtil::Tangent<double,)",
    "insertText": "FVector3d(Path, CapIdx * (PathNum - 1), bLoop) * (double)(CapIdx * 2 - 1)"
  },
  {
    "label": "SubIdx()",
    "kind": "Method",
    "detail": "Function (Normals [ CapNormalStart [ CapIdx ] +)",
    "insertText": "SubIdx(FVector3f)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "for(int k = 0; k < Normals.Num(); ++k)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize(Normals[k])"
  },
  {
    "label": "FVector2d()",
    "kind": "Method",
    "detail": "Function (} return* this ; } } ; enum class EProfileSweepPolygonGrouping : uint8 { Single,PerFace,PerSweepSegment,PerProfileSegment } ; enum class EProfileSweepQuadSplit : uint8 { Uniform,ShortestDiagonal } ; class FProfileSweepGenerator : public FMeshShapeGenerator { public : TArray<FVector3d> ProfileCurve ; TArray<FFrame3d> SweepCurve ; TArray<FVector3d> SweepScaleCurve ; TSet<int32> WeldedVertices ; FVector2d UVScale =)",
    "insertText": "FVector2d(1,1)"
  },
  {
    "label": "FVector2d()",
    "kind": "Method",
    "detail": "Function (FVector2d UVOffset =)",
    "insertText": "FVector2d(0, 0)"
  },
  {
    "label": "InitializeUvBuffer()",
    "kind": "Method",
    "detail": "Function (TArray<int32> EndProfiles [ 2 ] ; protected : void)",
    "insertText": "InitializeUvBuffer(const TArray<int32>& VertPositionOffsets, int32& NumUvRowsOut, int32& NumUvColumnsOut)"
  },
  {
    "label": "AdjustNormalsForTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustNormalsForTriangle(int32 TriIndex, int32 FirstIndex, int32 SecondIndex, int32 ThirdIndex, TArray<FVector3d>& WeightedNormals)"
  },
  {
    "label": "AdjustNormalsForTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustNormalsForTriangle(int32 TriIndex, int32 FirstIndex, int32 SecondIndex, int32 ThirdIndex, TArray<FVector3d>& WeightedNormals, const FVector3d& AbNormalized)"
  }
]