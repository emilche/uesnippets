[
  {
    "label": "FProgressCancel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProgressCancel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FProfileSweepGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfileSweepGenerator"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (length)",
    "insertText": "for(int SubIdx = 0; SubIdx < X.VertexCount()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (normals)",
    "insertText": "for(int SubIdx = 0; SubIdx < X.VertexCount()"
  },
  {
    "label": "InitializeUvBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeUvBuffer(const TArray<int32>& VertPositionOffsets, \n\t\tint32& NumUvRowsOut, int32& NumUvColumnsOut)"
  },
  {
    "label": "AdjustNormalsForTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustNormalsForTriangle(int32 TriIndex, int32 FirstIndex, int32 SecondIndex, int32 ThirdIndex,\n\t\tTArray<FVector3d>& WeightedNormals)"
  },
  {
    "label": "AdjustNormalsForTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustNormalsForTriangle(int32 TriIndex, int32 FirstIndex, int32 SecondIndex, int32 ThirdIndex,\n\t\tTArray<FVector3d>& WeightedNormals, const FVector3d& AbNormalized)"
  }
]