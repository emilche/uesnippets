[
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FMaterialCachedHLSLTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCachedHLSLTree"
  },
  {
    "label": "FMaterialCompilationOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompilationOutput"
  },
  {
    "label": "FSharedShaderCompilerEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedShaderCompilerEnvironment"
  },
  {
    "label": "FMaterialCompileTargetParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialCompileTargetParameters"
  },
  {
    "label": "FMaterialParameterMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialParameterMetadata"
  },
  {
    "label": "UMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterial"
  },
  {
    "label": "UMaterialFunctionInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialFunctionInterface"
  },
  {
    "label": "UMaterialExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpression"
  },
  {
    "label": "UMaterialExpressionFunctionInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionFunctionInput"
  },
  {
    "label": "UMaterialExpressionFunctionOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionFunctionOutput"
  },
  {
    "label": "UMaterialExpressionCustomOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionCustomOutput"
  },
  {
    "label": "UMaterialExpressionVertexInterpolator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionVertexInterpolator"
  },
  {
    "label": "UMaterialParameterCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialParameterCollection"
  },
  {
    "label": "FFunctionExpressionInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFunctionExpressionInput"
  },
  {
    "label": "FExpressionInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpressionInput"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSwizzleParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSwizzleParameters"
  },
  {
    "label": "FStructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructType"
  },
  {
    "label": "TMaterialHLSLGeneratorType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMaterialHLSLGeneratorType"
  },
  {
    "label": "FMaterialHLSLGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialHLSLGenerator"
  },
  {
    "label": "FConnectedInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConnectedInput"
  },
  {
    "label": "FExpressionDataKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpressionDataKey"
  },
  {
    "label": "FFunctionCallEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFunctionCallEntry"
  },
  {
    "label": "FScopedGenerateFunctionOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedGenerateFunctionOutput"
  },
  {
    "label": "FStatementEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatementEntry"
  },
  {
    "label": "NoPreviousScope()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if WITH_EDITOR # include \" Containers / Map . h \" # include \" Misc / MemStack . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UniquePtr . h \" # include \" RHIDefinitions . h \" # include \" Materials / MaterialLayersFunctions . h \" # include \" HLSLTree / HLSLTree . h \" class FMaterial ; class FMaterialCachedHLSLTree ; class FMaterialCompilationOutput ; struct FSharedShaderCompilerEnvironment ; struct FMaterialCompileTargetParameters ; struct FMaterialParameterMetadata ; class UMaterial ; class UMaterialFunctionInterface ; class UMaterialExpression ; class UMaterialExpressionFunctionInput ; class UMaterialExpressionFunctionOutput ; class UMaterialExpressionCustomOutput ; class UMaterialExpressionVertexInterpolator ; class UMaterialParameterCollection ; struct FFunctionExpressionInput ; struct FExpressionInput ; class ITargetPlatform ; enum class EMaterialParameterType : uint8 ; namespace UE::HLSLTree { struct FSwizzleParameters ; } namespace UE::HLSLTree::Material { enum class EExternalInput : uint8 ; } namespace UE::Shader { struct FStructType ; } enum class EMaterialNewScopeFlag : uint8 { None = 0 u,)",
    "insertText": "NoPreviousScope(1u << 0)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EMaterialNewScopeFlag)"
  },
  {
    "label": "DECLARE_MATERIAL_HLSLGENERATOR_DATA()",
    "kind": "Method",
    "detail": "Function (template<T> struct TMaterialHLSLGeneratorType ; # define)",
    "insertText": "DECLARE_MATERIAL_HLSLGENERATOR_DATA(T)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "Name(TEXT(#T))"
  },
  {
    "label": "GetLayerOverrides()",
    "kind": "Method",
    "detail": "Function (const FMaterialLayersFunctions*)",
    "insertText": "GetLayerOverrides()"
  },
  {
    "label": "GetTree()",
    "kind": "Method",
    "detail": "Function (UE::HLSLTree::FTree&)",
    "insertText": "GetTree()"
  },
  {
    "label": "GetTypeRegistry()",
    "kind": "Method",
    "detail": "Function (UE::Shader::FStructTypeRegistry&)",
    "insertText": "GetTypeRegistry()"
  },
  {
    "label": "GetMaterialAttributesType()",
    "kind": "Method",
    "detail": "Function (const UE::Shader::FStructType*)",
    "insertText": "GetMaterialAttributesType()"
  },
  {
    "label": "GetMaterialAttributesDefaultExpression()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "GetMaterialAttributesDefaultExpression()"
  },
  {
    "label": "GetCurrentExpression()",
    "kind": "Method",
    "detail": "Function (UMaterialExpression*)",
    "insertText": "GetCurrentExpression()"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (template<StringType> bool)",
    "insertText": "Error(const StringType& InError)"
  },
  {
    "label": "Errorf()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . Types> bool)",
    "insertText": "Errorf(const FormatType& Format, Types... Args)"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (TStringBuilder<1 0 2 4> String ; String .)",
    "insertText": "Appendf(Format, Forward<Types>(Args)...)"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Generate()"
  },
  {
    "label": "GenerateResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateResult(UE::HLSLTree::FScope& Scope)"
  },
  {
    "label": "NewScope()",
    "kind": "Method",
    "detail": "Function (UE::HLSLTree::FScope*)",
    "insertText": "NewScope(UE::HLSLTree::FScope& Scope, EMaterialNewScopeFlag Flags = EMaterialNewScopeFlag::None)"
  },
  {
    "label": "NewOwnedScope()",
    "kind": "Method",
    "detail": "Function (UE::HLSLTree::FScope*)",
    "insertText": "NewOwnedScope(UE::HLSLTree::FStatement& Owner)"
  },
  {
    "label": "NewJoinedScope()",
    "kind": "Method",
    "detail": "Function (UE::HLSLTree::FScope*)",
    "insertText": "NewJoinedScope(UE::HLSLTree::FScope& Scope)"
  },
  {
    "label": "NewConstant()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "NewConstant(const UE::Shader::FValue& Value)"
  },
  {
    "label": "NewTexCoord()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "NewTexCoord(int32 Index)"
  },
  {
    "label": "NewExternalInput()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "NewExternalInput(UE::HLSLTree::Material::EExternalInput Input)"
  },
  {
    "label": "NewSwizzle()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "NewSwizzle(const UE::HLSLTree::FSwizzleParameters& Params, const UE::HLSLTree::FExpression* Input)"
  },
  {
    "label": "NewErrorExpression()",
    "kind": "Method",
    "detail": "Function (template<StringType> [ [ nodiscard ] ] const UE::HLSLTree::FExpression*)",
    "insertText": "NewErrorExpression(const StringType& InError)"
  },
  {
    "label": "NewErrorExpressionf()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . Types> [ [ nodiscard ] ] const UE::HLSLTree::FExpression*)",
    "insertText": "NewErrorExpressionf(const FormatType& Format, Types... Args)"
  },
  {
    "label": "FindInputIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindInputIndex(const FExpressionInput* Input)"
  },
  {
    "label": "NewDefaultInputConstant()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "NewDefaultInputConstant(int32 InputIndex, const UE::Shader::FValue& Value)"
  },
  {
    "label": "NewDefaultInputExternal()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "NewDefaultInputExternal(int32 InputIndex, UE::HLSLTree::Material::EExternalInput Input)"
  },
  {
    "label": "NewDefaultInputExpression()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "NewDefaultInputExpression(int32 InputIndex, const UE::HLSLTree::FExpression* Expression)"
  },
  {
    "label": "AcquireExpression()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "AcquireExpression(UE::HLSLTree::FScope& Scope, int32 InputIndex, UMaterialExpression* MaterialExpression, int32 OutputIndex, const UE::HLSLTree::FSwizzleParameters& Swizzle)"
  },
  {
    "label": "AcquireFunctionInputExpression()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "AcquireFunctionInputExpression(UE::HLSLTree::FScope& Scope, const UMaterialExpressionFunctionInput* MaterialExpression)"
  },
  {
    "label": "GenerateStatements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateStatements(UE::HLSLTree::FScope& Scope, UMaterialExpression* MaterialExpression)"
  },
  {
    "label": "GenerateMaterialParameter()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "GenerateMaterialParameter(FName InParameterName, const FMaterialParameterMetadata& InParameterMeta, EMaterialSamplerType InSamplerType = SAMPLERTYPE_Color, const FGuid& InExternalTextureGuid = FGuid())"
  },
  {
    "label": "FConnectedInput()",
    "kind": "Method",
    "detail": "Function (struct FConnectedInput { const UE::HLSLTree::FExpression* Expression ; const FExpressionInput* Input ; UE::HLSLTree::FScope* Scope ;)",
    "insertText": "FConnectedInput(const UE::HLSLTree::FExpression* InExpression) : Expression(InExpression) , Input(nullptr) , Scope(nullptr)"
  },
  {
    "label": "FConnectedInput()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConnectedInput(const FExpressionInput* InInput, UE::HLSLTree::FScope* InScope) : Expression(nullptr) , Input(InInput) , Scope(InScope)"
  },
  {
    "label": "GenerateFunctionCall()",
    "kind": "Method",
    "detail": "Function (} } ; const UE::HLSLTree::FExpression*)",
    "insertText": "GenerateFunctionCall(UE::HLSLTree::FScope& Scope, UMaterialFunctionInterface* Function, EMaterialParameterAssociation ParameterAssociation, int32 ParameterIndex, TArrayView<FConnectedInput> ConnectedInputs, int32 OutputIndex)"
  },
  {
    "label": "GenerateBranch()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "GenerateBranch(UE::HLSLTree::FScope& Scope, const UE::HLSLTree::FExpression* ConditionExpression, const UE::HLSLTree::FExpression* TrueExpression, const UE::HLSLTree::FExpression* FalseExpression)"
  },
  {
    "label": "NewExpressionData()",
    "kind": "Method",
    "detail": "Function (template<T,. . . ArgTypes> T*)",
    "insertText": "NewExpressionData(const UMaterialExpression* MaterialExpression, ArgTypes... Args)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Data = new)",
    "insertText": "T(Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "InternalRegisterExpressionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalRegisterExpressionData(TMaterialHLSLGeneratorType<T>::GetTypeName(), MaterialExpression, Data)"
  },
  {
    "label": "AcquireGlobalData()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "AcquireGlobalData()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Data = static_cast<)",
    "insertText": "T(InternalFindExpressionData(TMaterialHLSLGeneratorType<T>::GetTypeName(), nullptr))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Data = new)",
    "insertText": "T()"
  },
  {
    "label": "InternalRegisterExpressionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalRegisterExpressionData(TMaterialHLSLGeneratorType<T>::GetTypeName(), nullptr, Data)"
  },
  {
    "label": "GetParameterOverrideValueForCurrentFunction()",
    "kind": "Method",
    "detail": "Function (} return Data ; } bool)",
    "insertText": "GetParameterOverrideValueForCurrentFunction(EMaterialParameterType ParameterType, FName ParameterName, FMaterialParameterMetadata& OutResult)"
  },
  {
    "label": "GetParameterInfo()",
    "kind": "Method",
    "detail": "Function (FMaterialParameterInfo)",
    "insertText": "GetParameterInfo(const FName& ParameterName)"
  },
  {
    "label": "FindOrAddCustomExpressionOutputStructId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindOrAddCustomExpressionOutputStructId(TArrayView<UE::Shader::FStructFieldInitializer> StructFields)"
  },
  {
    "label": "FExpressionDataKey()",
    "kind": "Method",
    "detail": "Function (private : int32 MaxNumPreviousScopes = UE::HLSLTree::MaxNumPreviousScopes ; struct FExpressionDataKey {)",
    "insertText": "FExpressionDataKey(const FName& InTypeName, const UMaterialExpression* InMaterialExpression) : MaterialExpression(InMaterialExpression), TypeName(InTypeName)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} const UMaterialExpression* MaterialExpression ; FName ; uint32)",
    "insertText": "GetTypeHash(const FExpressionDataKey& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FExpressionDataKey& Lhs, const FExpressionDataKey& Rhs)"
  },
  {
    "label": "GeneratingOutputMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeneratingOutputMask(1llu << OutputIndex)"
  },
  {
    "label": "EndGeneratingOutput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndGeneratingOutput(int32 OutputIndex)"
  },
  {
    "label": "IsGeneratingOutput()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGeneratingOutput(int32 OutputIndex)"
  },
  {
    "label": "FScopedGenerateFunctionOutput()",
    "kind": "Method",
    "detail": "Function (} } ; struct FScopedGenerateFunctionOutput {)",
    "insertText": "FScopedGenerateFunctionOutput(FFunctionCallEntry* InFunctionCall, int32 InOutputIndex) : FunctionCall(InFunctionCall) , OutputIndex(InOutputIndex)"
  },
  {
    "label": "BeginGeneratingOutput()",
    "kind": "Method",
    "detail": "Function (FunctionCall ->)",
    "insertText": "BeginGeneratingOutput(OutputIndex)"
  },
  {
    "label": "FScopedGenerateFunctionOutput()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedGenerateFunctionOutput()"
  },
  {
    "label": "EndGeneratingOutput()",
    "kind": "Method",
    "detail": "Function (FunctionCall ->)",
    "insertText": "EndGeneratingOutput(OutputIndex)"
  },
  {
    "label": "InternalGenerate()",
    "kind": "Method",
    "detail": "Function (} private : FFunctionCallEntry* FunctionCall ; int32 OutputIndex ; } ; struct FStatementEntry { UE::HLSLTree::FScope* PreviousScope [ MaxNumPreviousScopes ] ; int32 NumInputs = 0 ; } ; bool)",
    "insertText": "InternalGenerate()"
  },
  {
    "label": "InternalNewErrorExpression()",
    "kind": "Method",
    "detail": "Function (const UE::HLSLTree::FExpression*)",
    "insertText": "InternalNewErrorExpression(FStringView Error)"
  },
  {
    "label": "InternalError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InternalError(FStringView ErrorMessage)"
  },
  {
    "label": "InternalRegisterExpressionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalRegisterExpressionData(const FName& Type, const UMaterialExpression* MaterialExpression, void* Data)"
  },
  {
    "label": "InternalFindExpressionData()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "InternalFindExpressionData(const FName& Type, const UMaterialExpression* MaterialExpression)"
  },
  {
    "label": "AcquireError()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "AcquireError()"
  },
  {
    "label": "NeedToPushOwnerExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedToPushOwnerExpression()"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (const FFunctionCallEntry* FunctionEntry = FunctionCallStack .)",
    "insertText": "Last()"
  }
]