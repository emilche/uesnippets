[
  {
    "label": "CharType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharType"
  },
  {
    "label": "TPrettyJsonPrintPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPrettyJsonPrintPolicy"
  },
  {
    "label": "PrintPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PrintPolicy"
  },
  {
    "label": "TJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TJsonWriter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UCurveTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveTable"
  },
  {
    "label": "UAssetImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetImportData"
  },
  {
    "label": "FCurveTableRowHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveTableRowHandle"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / Class . h \" # include \" Policies / PrettyJsonPrintPolicy . h \" # include \" Curves / CurveOwnerInterface . h \" # include \" Curves / SimpleCurve . h \" # include \" CurveTable . generated . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogCurveTable, Log, All)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (template<class CharType> struct TPrettyJsonPrintPolicy ; template<class CharType,class PrintPolicy> class TJsonWriter ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (Empty,SimpleCurves,RichCurves } ;)",
    "insertText": "UCLASS(MinimalAPI, Meta = (LoadBehavior = \"LazyOnDemand\"))"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() DECLARE_MULTICAST_DELEGATE(FOnCurveTableChanged)"
  },
  {
    "label": "GetRowMap()",
    "kind": "Method",
    "detail": "Function (const TMap<FName,FRealCurve*>&)",
    "insertText": "GetRowMap()"
  },
  {
    "label": "GetRichCurveRowMap()",
    "kind": "Method",
    "detail": "Function (} const TMap<FName,FRichCurve*>&)",
    "insertText": "GetRichCurveRowMap()"
  },
  {
    "label": "GetSimpleCurveRowMap()",
    "kind": "Method",
    "detail": "Function (} const TMap<FName,FSimpleCurve*>&)",
    "insertText": "GetSimpleCurveRowMap()"
  },
  {
    "label": "GetCurveTableMode()",
    "kind": "Method",
    "detail": "Function (} ECurveTableMode)",
    "insertText": "GetCurveTableMode()"
  },
  {
    "label": "AddRichCurve()",
    "kind": "Method",
    "detail": "Function (FRichCurve&)",
    "insertText": "AddRichCurve(FName RowName)"
  },
  {
    "label": "AddSimpleCurve()",
    "kind": "Method",
    "detail": "Function (FSimpleCurve&)",
    "insertText": "AddSimpleCurve(FName RowName)"
  },
  {
    "label": "RenameRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameRow(FName& CurveName, FName& NewCurveName)"
  },
  {
    "label": "DeleteRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteRow(FName& CurveName)"
  },
  {
    "label": "GetCurveTableChangeCriticalSection()",
    "kind": "Method",
    "detail": "Function (protected : TMap<FName,FRealCurve*> RowMap ; FCriticalSection&)",
    "insertText": "GetCurveTableChangeCriticalSection()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "GetCurves()",
    "kind": "Method",
    "detail": "Function (# endif TArray<FRichCurveEditInfoConst>)",
    "insertText": "GetCurves()"
  },
  {
    "label": "ModifyOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyOwner()"
  },
  {
    "label": "MakeTransactional()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeTransactional()"
  },
  {
    "label": "OnCurveChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCurveChanged(const TArray<FRichCurveEditInfo>& ChangedCurveEditInfos)"
  },
  {
    "label": "IsValidCurve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidCurve(FRichCurveEditInfo CurveInfo)"
  },
  {
    "label": "GetOwners()",
    "kind": "Method",
    "detail": "Function (TArray<const UObject*>)",
    "insertText": "GetOwners()"
  },
  {
    "label": "RepointCurveOwner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RepointCurveOwner(const FPackageReloadedEvent& InPackageReloadedEvent, FCurveOwnerInterface*& OutNewCurveOwner)"
  },
  {
    "label": "HasRichCurves()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasRichCurves()"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CLOG(bWarnIfNotFound, LogCurveTable, Warning, TEXT(\"UCurveTable::FindCurve : NAME_None is invalid row name for CurveTable '%s' (%s).\"), *GetPathName(), *ContextString)"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CLOG(bWarnIfNotFound, LogCurveTable, Warning, TEXT(\"UCurveTable::FindCurve : Row '%s' not found in CurveTable '%s' (%s).\"), *RowName.ToString(), *GetPathName(), *ContextString)"
  },
  {
    "label": "FindSimpleCurve()",
    "kind": "Method",
    "detail": "Function (} FSimpleCurve*)",
    "insertText": "FindSimpleCurve(FName RowName, const FString& ContextString, bool bWarnIfNotFound = true)"
  },
  {
    "label": "FindCurveUnchecked()",
    "kind": "Method",
    "detail": "Function (} FRealCurve*)",
    "insertText": "FindCurveUnchecked(FName RowName)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FRealCurve* const* FoundCurve = RowMap .)",
    "insertText": "Find(RowName)"
  },
  {
    "label": "GetTableAsCSV()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTableAsCSV()"
  },
  {
    "label": "GetTableAsJSON()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTableAsJSON()"
  },
  {
    "label": "WriteTableAsJSON()",
    "kind": "Method",
    "detail": "Function (template<CharType = TCHAR> bool)",
    "insertText": "WriteTableAsJSON(const TSharedRef< TJsonWriter<CharType, TPrettyJsonPrintPolicy<CharType> > >& JsonWriter,bool bAsArray = true)"
  },
  {
    "label": "CreateTableFromCSVString()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "CreateTableFromCSVString(const FString& InString, ERichCurveInterpMode InterpMode = RCIM_Linear)"
  },
  {
    "label": "CreateTableFromJSONString()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "CreateTableFromJSONString(const FString& InString, ERichCurveInterpMode InterpMode = RCIM_Linear)"
  },
  {
    "label": "CreateTableFromOtherTable()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "CreateTableFromOtherTable(const UCurveTable* InTable)"
  },
  {
    "label": "EmptyTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyTable()"
  },
  {
    "label": "InvalidateAllCachedCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateAllCachedCurves()"
  },
  {
    "label": "GetGlobalCachedCurveID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetGlobalCachedCurveID()"
  },
  {
    "label": "MakeValidName()",
    "kind": "Method",
    "detail": "Function (# endif protected : FName)",
    "insertText": "MakeValidName(const FString& InString)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (int32 GlobalCachedCurveID ; private : FOnCurveTableChanged OnCurveTableChangedDelegate ; protected : ECurveTableMode CurveTableMode ; } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FCurveTableRowHandle() : CurveTable(nullptr) , RowName(NAME_None)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(const FString& ContextString)"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "GetCurve()",
    "kind": "Method",
    "detail": "Function (} FRealCurve*)",
    "insertText": "GetCurve(const FString& ContextString, bool bWarnIfNotFound=true)"
  },
  {
    "label": "GetRichCurve()",
    "kind": "Method",
    "detail": "Function (FRichCurve*)",
    "insertText": "GetRichCurve(const FString& ContextString, bool bWarnIfNotFound=true)"
  },
  {
    "label": "GetSimpleCurve()",
    "kind": "Method",
    "detail": "Function (FSimpleCurve*)",
    "insertText": "GetSimpleCurve(const FString& ContextString, bool bWarnIfNotFound = true)"
  },
  {
    "label": "Eval()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Eval(float XValue,const FString& ContextString)"
  },
  {
    "label": "Eval()",
    "kind": "Method",
    "detail": "Function (float Result = 0 . f ;)",
    "insertText": "Eval(XValue, &Result, ContextString)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FCurveTableRowHandle& Other)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  }
]