[
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FFilterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilterData"
  },
  {
    "label": "FFIRFilterTimeBased",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFIRFilterTimeBased"
  },
  {
    "label": "FFIRFilter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FFIRFilter()"
  },
  {
    "label": "FFIRFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFIRFilter(int32 WindowLen)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(WindowLen)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(int32 WindowLen)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (FilterData .)",
    "insertText": "AddZeroed(WindowLen)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (CurrentStack = 0 ; } else { FilterData .)",
    "insertText": "Reset()"
  },
  {
    "label": "CalculateCoefficient()",
    "kind": "Method",
    "detail": "Function (CurrentStack = 0 ; } } void)",
    "insertText": "CalculateCoefficient(EFilterInterpolationType InterpolationType)"
  },
  {
    "label": "GetFilteredData()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFilteredData(float Input)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetStep()",
    "kind": "Method",
    "detail": "Function (} float LastOutput ; private : TArray<float> FilterData ; TArray<float> Coefficients ; int32 CurrentStack ; float)",
    "insertText": "GetStep()"
  },
  {
    "label": "GetInterpolationCoefficient()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetInterpolationCoefficient(EFilterInterpolationType InterpolationType, int32 CoefficientIndex)"
  },
  {
    "label": "CalculateFilteredOutput()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateFilteredOutput()"
  },
  {
    "label": "FFilterData()",
    "kind": "Method",
    "detail": "Function (} ; struct FFilterData { float Input ; float Time ;)",
    "insertText": "FFilterData()"
  },
  {
    "label": "FFilterData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFilterData(const float InInput, const float InTime) : Input(InInput) , Time(InTime)"
  },
  {
    "label": "EnsureTimeIsValid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnsureTimeIsValid(const float CurrentTime, const float ValidationWindow)"
  },
  {
    "label": "Diff()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Diff(const float InTime)"
  },
  {
    "label": "SetInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInput(const float InData, const float InTime)"
  },
  {
    "label": "FFIRFilterTimeBased()",
    "kind": "Method",
    "detail": "Function (Input = InData ; Time = InTime ; } } ; struct FFIRFilterTimeBased { public :)",
    "insertText": "FFIRFilterTimeBased()"
  },
  {
    "label": "FFIRFilterTimeBased()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFIRFilterTimeBased(float InWindowDuration, EFilterInterpolationType InInterpolationType, float InDampingRatio, float InMin, float InMax, float InMaxSpeed, bool bInClamp)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(InWindowDuration, InInterpolationType, InDampingRatio, InMin, InMax, InMaxSpeed, bInClamp)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(float InWindowDuration, EFilterInterpolationType InInterpolationType, float InDampingRatio, float InMinValue, float InMaxValue, float InMaxSpeed, bool bInClamp)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (InterpolationType = InInterpolationType ; FilterData .)",
    "insertText": "Empty()"
  },
  {
    "label": "SetParams()",
    "kind": "Method",
    "detail": "Function (CurrentStackIndex = 0 ; WindowDuration = InWindowDuration ; DampingRatio = InDampingRatio ; MinValue = InMinValue ; MaxValue = InMaxValue ; MaxSpeed = InMaxSpeed ; bClamp = bInClamp ; CurrentTime = 0 . f ; LastOutput = 0 . f ; } void)",
    "insertText": "SetParams(float InDampingRatio, float InMinValue, float InMaxValue, float InMaxSpeed, bool bInClamp)"
  },
  {
    "label": "UpdateAndGetFilteredData()",
    "kind": "Method",
    "detail": "Function (DampingRatio = InDampingRatio ; MinValue = InMinValue ; MaxValue = InMaxValue ; MaxSpeed = InMaxSpeed ; bClamp = bInClamp ; } float)",
    "insertText": "UpdateAndGetFilteredData(float Input, float DeltaTime)"
  },
  {
    "label": "WrapToValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WrapToValue(float Input, float Range)"
  },
  {
    "label": "SetToValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToValue(float Input)"
  },
  {
    "label": "NeedsUpdate()",
    "kind": "Method",
    "detail": "Function (WindowDuration = InWindowDuration ; } # if WITH_EDITOR bool)",
    "insertText": "NeedsUpdate(const EFilterInterpolationType InType, const float InWindowDuration)"
  },
  {
    "label": "GetSafeCurrentStackIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSafeCurrentStackIndex()"
  },
  {
    "label": "RefreshValidFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshValidFilters()"
  }
]