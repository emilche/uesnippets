[
  {
    "label": "FAudioStreamCacheMemoryHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioStreamCacheMemoryHandle"
  },
  {
    "label": "FAudioChunkCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioChunkCache"
  },
  {
    "label": "FChunkKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkKey"
  },
  {
    "label": "FCacheMissEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheMissEntry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCacheElementDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheElementDebugInfo"
  },
  {
    "label": "FCacheElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheElement"
  },
  {
    "label": "FSoundWaveMemoryTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveMemoryTracker"
  },
  {
    "label": "FCacheMissInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheMissInfo"
  },
  {
    "label": "FCachedAudioStreamingManagerParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedAudioStreamingManagerParams"
  },
  {
    "label": "FCacheDimensions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheDimensions"
  },
  {
    "label": "FCachedAudioStreamingManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedAudioStreamingManager"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Containers / IndirectArray . h \" # include \" Containers / Queue . h \" # include \" Stats / Stats . h \" # include \" ContentStreaming . h \" # include \" Async / AsyncWork . h \" # include \" Async / AsyncFileHandle . h \" # include \" HAL / ThreadSafeBool . h \" # include \" AudioStreaming . h \" # include \" Sound / SoundWave . h \" # include \" Sound / SoundWaveLoadingBehavior . h \" # include \" UObject / ObjectKey . h \" # define DEBUG_STREAM_CACHE ! UE_BUILD_SHIPPING)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAudioStreamCaching, Display, All)"
  },
  {
    "label": "FChunkKey()",
    "kind": "Method",
    "detail": "Function (class FAudioStreamCacheMemoryHandle ; class FAudioChunkCache { public : struct FChunkKey { public :)",
    "insertText": "FChunkKey()"
  },
  {
    "label": "FChunkKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChunkKey(const FChunkKey& Other)"
  },
  {
    "label": "FChunkKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChunkKey(const FName& InSoundWaveName , const FGuid& InSoundWaveGuid , uint32 InChunkIndex #if WITH_EDITOR , uint32 InChunkRevision = 0 #endif)"
  },
  {
    "label": "FChunkKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChunkKey(const FSoundWavePtr& InSoundWave , uint32 InChunkIndex #if WITH_EDITOR , uint32 InChunkRevision = 0 #endif)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FChunkKey&)",
    "insertText": "operator(const FChunkKey& Other)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (public : FName SoundWaveName =)",
    "insertText": "FName()"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (FGuid ObjectKey =)",
    "insertText": "FGuid()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FChunkKey& InChunkKey)"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "HashCombineFast(HashCombineFast(GetTypeHash(InChunkKey.SoundWaveName), InChunkKey.ChunkIndex), GetTypeHash(InChunkKey.ObjectKey))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR Hash =)",
    "insertText": "HashCombineFast(Hash, InChunkKey.ChunkRevision)"
  },
  {
    "label": "FCacheMissEntry()",
    "kind": "Method",
    "detail": "Function (# endif return Hash ; } } ; struct FCacheMissEntry { public :)",
    "insertText": "FCacheMissEntry(FName InSoundWaveName, uint32 InChunkIndex) : SoundWaveName(InSoundWaveName) , ChunkIndex(InChunkIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FCacheMissEntry& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} FName SoundWaveName ; uint32 ChunkIndex ; uint32)",
    "insertText": "GetTypeHash(const FCacheMissEntry& InCacheMissEntry)"
  },
  {
    "label": "FAudioChunkCache()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FAudioChunkCache(uint32 InMaxChunkSize, uint32 NumChunks, uint64 InMemoryLimitInBytes)"
  },
  {
    "label": "FAudioChunkCache()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAudioChunkCache()"
  },
  {
    "label": "AddOrTouchChunk()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "AddOrTouchChunk(const FChunkKey& InKey, const TSharedPtr<FSoundWaveData>& InSoundWavePtr, TFunction<void(EAudioChunkLoadResult) > OnLoadCompleted, ENamedThreads::Type CallbackThread, bool bNeededForPlayback)"
  },
  {
    "label": "GetChunk()",
    "kind": "Method",
    "detail": "Function (TArrayView<uint8>)",
    "insertText": "GetChunk(const FChunkKey& InKey, const TSharedPtr<FSoundWaveData>& InSoundWavePtr, bool bBlockForLoadCompletion, bool bNeededForPlayback, uint64& InOutCacheLookupID)"
  },
  {
    "label": "AddNewReferenceToChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewReferenceToChunk(const FChunkKey& InKey)"
  },
  {
    "label": "RemoveReferenceToChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReferenceToChunk(const FChunkKey& InKey)"
  },
  {
    "label": "ClearCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCache()"
  },
  {
    "label": "AddForceInlineSoundWave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceInlineSoundWave(const FSoundWaveProxyPtr&)"
  },
  {
    "label": "RemoveForceInlineSoundWave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveForceInlineSoundWave(const FSoundWaveProxyPtr&)"
  },
  {
    "label": "AddMemoryCountedFeature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMemoryCountedFeature(const FAudioStreamCacheMemoryHandle& Feature)"
  },
  {
    "label": "RemoveMemoryCountedFeature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMemoryCountedFeature(const FAudioStreamCacheMemoryHandle& Feature)"
  },
  {
    "label": "TrimMemory()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "TrimMemory(uint64 BytesToFree, bool bAllowRetainedChunkTrimming)"
  },
  {
    "label": "GetLeastRecentlyUsedRetainedSoundWaves()",
    "kind": "Method",
    "detail": "Function (TArray<FObjectKey>)",
    "insertText": "GetLeastRecentlyUsedRetainedSoundWaves(int32 NumSoundWavesToRetrieve)"
  },
  {
    "label": "BlockForAllPendingLoads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockForAllPendingLoads()"
  },
  {
    "label": "CancelAllPendingLoads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAllPendingLoads()"
  },
  {
    "label": "ReportCacheSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "ReportCacheSize()"
  },
  {
    "label": "BeginLoggingCacheMisses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginLoggingCacheMisses()"
  },
  {
    "label": "StopLoggingCacheMisses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopLoggingCacheMisses()"
  },
  {
    "label": "FlushCacheMissLog()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FlushCacheMissLog()"
  },
  {
    "label": "DoesKeyContainValidChunkIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesKeyContainValidChunkIndex(const FChunkKey& InKey, const FSoundWaveData& InSoundWaveData)"
  },
  {
    "label": "GetCacheLookupIDForChunk()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetCacheLookupIDForChunk(const FChunkKey& InChunkKey)"
  },
  {
    "label": "SetCacheLookupIDForChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCacheLookupIDForChunk(const FChunkKey& InChunkKey, uint64 InCacheLookupID)"
  },
  {
    "label": "DebugDisplayLegacy()",
    "kind": "Method",
    "detail": "Function (const int32 MaxChunkSize ; TPair<int,int>)",
    "insertText": "DebugDisplayLegacy(UWorld* World, FViewport* Viewport, FCanvas* Canvas, int32 X, int32 Y, const FVector* ViewLocation, const FRotator* ViewRotation)"
  },
  {
    "label": "DebugPrint()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DebugPrint()"
  },
  {
    "label": "DebugDisplay()",
    "kind": "Method",
    "detail": "Function (enum class EDebugDisplayElementTypes { NumRetainedAndPlaying = 0,NumRetained,NumPrimedAndPlaying,NumPrimed,NumRetainedAndPlayingCacheMiss,NumRetainedCacheMiss,NumPrimedAndPlayingCacheMiss,NumPrimedCacheMiss,NumLODAndPlaying,NumLOD,NumTrimmed,NumLoadInProgress,NumOther,Count } ; TPair<int,int>)",
    "insertText": "DebugDisplay(UWorld* World, FViewport* Viewport, FCanvas* Canvas, int32 X, int32 Y, const FVector* ViewLocation, const FRotator* ViewRotation)"
  },
  {
    "label": "DebugVisualDisplay()",
    "kind": "Method",
    "detail": "Function (TPair<int,int>)",
    "insertText": "DebugVisualDisplay(UWorld* World, FViewport* Viewport, FCanvas* Canvas, int32 X, int32 Y, const FVector* ViewLocation, const FRotator* ViewRotation)"
  },
  {
    "label": "DebugBirdsEyeDisplay()",
    "kind": "Method",
    "detail": "Function (TPair<int,int>)",
    "insertText": "DebugBirdsEyeDisplay(UWorld* World, FViewport* Viewport, FCanvas* Canvas, int32 X, int32 Y, const FVector* ViewLocation, const FRotator* ViewRotation)"
  },
  {
    "label": "IncrementCacheOverflowCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementCacheOverflowCounter()"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (CacheOverflowCount .)",
    "insertText": "Increment()"
  },
  {
    "label": "GetNumberOfCacheOverflows()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumberOfCacheOverflows()"
  },
  {
    "label": "FCacheElementDebugInfo()",
    "kind": "Method",
    "detail": "Function (} private : # if DEBUG_STREAM_CACHE struct FCacheElementDebugInfo { int32 NumTotalChunks ; int32 NumTimesTouched ; uint64 TimeLoadStarted ; float TimeToLoad ; float AverageLocationInCacheWhenNeeded ; ESoundWaveLoadingBehavior LoadingBehavior ; bool bLoadingBehaviorExternallyOverriden ; bool bWasCacheMiss ; bool bWasLoadedFromInlineChunk = false ; bool bWasInlinedButUnloaded = false ;)",
    "insertText": "FCacheElementDebugInfo() : NumTotalChunks(0) , NumTimesTouched(0) , TimeLoadStarted(0) , TimeToLoad(0.0) , AverageLocationInCacheWhenNeeded(0.0f) , LoadingBehavior(ESoundWaveLoadingBehavior::Uninitialized) , bWasCacheMiss(false)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FCacheElement()",
    "kind": "Method",
    "detail": "Function (NumTotalChunks = 0 ; NumTimesTouched = 0 ; TimeLoadStarted = 0 ; TimeToLoad = 0 . 0 f ; LoadingBehavior = ESoundWaveLoadingBehavior::Uninitialized ; bWasCacheMiss = false ; AverageLocationInCacheWhenNeeded = 0 . 0 f ; bWasLoadedFromInlineChunk = false ; bWasInlinedButUnloaded = false ; } } ; # endif FThreadSafeCounter CacheOverflowCount ; struct FCacheElement { FChunkKey Key ; uint8* ChunkData ; uint32 ChunkDataSize ; FCacheElement* MoreRecentElement ; FCacheElement* LessRecentElement ; uint64 CacheLookupID = InvalidAudioStreamCacheLookupID ; TWeakPtr<FSoundWaveData,ESPMode::ThreadSafe> SoundWaveWeakPtr ; FThreadSafeBool bIsLoaded ; FThreadSafeCounter NumConsumers ; # if WITH_EDITORONLY_DATA TUniquePtr<FAsyncStreamDerivedChunkTask> DDCTask ; # endif IBulkDataIORequest* ReadRequest ; # if DEBUG_STREAM_CACHE FCacheElementDebugInfo DebugInfo ; # endif)",
    "insertText": "FCacheElement(uint32 InCacheIndex) : ChunkData(nullptr) , ChunkDataSize(0) , MoreRecentElement(nullptr) , LessRecentElement(nullptr) , CacheLookupID(InCacheIndex) , bIsLoaded(false) , ReadRequest(nullptr)"
  },
  {
    "label": "WaitForAsyncLoadCompletion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WaitForAsyncLoadCompletion(bool bCancel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "if(DDCTask.IsValid() && !DDCTask->IsDone())"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (DDCTask ->)",
    "insertText": "Cancel()"
  },
  {
    "label": "EnsureCompletion()",
    "kind": "Method",
    "detail": "Function (} DDCTask ->)",
    "insertText": "EnsureCompletion(false)"
  },
  {
    "label": "LocalReadRequest()",
    "kind": "Method",
    "detail": "Function (} # endif IBulkDataIORequest*)",
    "insertText": "LocalReadRequest(IBulkDataIORequest*)FPlatformAtomics::InterlockedExchangePtr((void* volatile*)&ReadRequest, (void*)0x1)"
  },
  {
    "label": "WaitCompletion()",
    "kind": "Method",
    "detail": "Function (} LocalReadRequest ->)",
    "insertText": "WaitCompletion()"
  },
  {
    "label": "IsLoadInProgress()",
    "kind": "Method",
    "detail": "Function (delete LocalReadRequest ; } } bool)",
    "insertText": "IsLoadInProgress()"
  },
  {
    "label": "IsBeingPlayed()",
    "kind": "Method",
    "detail": "Function (} # if DEBUG_STREAM_CACHE bool)",
    "insertText": "IsBeingPlayed()"
  },
  {
    "label": "UpdateDebugInfoLoadingBehavior()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDebugInfoLoadingBehavior()"
  },
  {
    "label": "CanEvictChunk()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "CanEvictChunk()"
  },
  {
    "label": "GetNumChunks()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumChunks()"
  },
  {
    "label": "GetChunk()",
    "kind": "Method",
    "detail": "Function (FStreamedAudioChunk*)",
    "insertText": "GetChunk(uint32 InChunkIndex)"
  },
  {
    "label": "IsChunkStale()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "IsChunkStale()"
  },
  {
    "label": "ReleaseRetainedAudioOnSoundWave()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ReleaseRetainedAudioOnSoundWave()"
  },
  {
    "label": "IsSoundWaveRetainingAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSoundWaveRetainingAudio()"
  },
  {
    "label": "FCacheElement()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCacheElement()"
  },
  {
    "label": "WaitForAsyncLoadCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAsyncLoadCompletion(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ChunkData)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(ChunkData)"
  },
  {
    "label": "GetCurrentMemoryUsageBytes()",
    "kind": "Method",
    "detail": "Function (ChunkData = nullptr ; } } } ; TArray<FCacheElement> CachePool ; FCacheElement* MostRecentElement ; FCacheElement* LeastRecentElement ; int32 ChunksInUse ; TAtomic<uint64> MemoryCounterBytes ; uint64 MemoryLimitBytes ; TAtomic<uint64> ForceInlineMemoryCounterBytes ; TAtomic<uint64> FeatureMemoryCounterBytes ; FThreadSafeCounter NumberOfLoadsInFlight ; FCriticalSection CacheMutationCriticalSection ; TMap<FChunkKey,uint64> CacheLookupIdMap ; struct FSoundWaveMemoryTracker { int32 RefCount = 0 ; int64 MemoryCount = 0 ; } ; TMap<FSoundWaveProxyPtr,FSoundWaveMemoryTracker> SoundWaveTracker ; FCriticalSection SoundWaveMemoryTrackerCritSec ; struct FCacheMissInfo { FName SoundWaveName ; uint32 ChunkIndex ; uint32 TotalChunksInWave ; bool bBlockedForLoad ; } ; TQueue<FCacheMissInfo> CacheMissQueue ; bool bLogCacheMisses ; uint64)",
    "insertText": "GetCurrentMemoryUsageBytes()"
  },
  {
    "label": "LinearSearchCacheForElement()",
    "kind": "Method",
    "detail": "Function (FCacheElement*)",
    "insertText": "LinearSearchCacheForElement(const FChunkKey& InKey)"
  },
  {
    "label": "LinearSearchChunkArrayForElement()",
    "kind": "Method",
    "detail": "Function (FCacheElement*)",
    "insertText": "LinearSearchChunkArrayForElement(const FChunkKey& InKey)"
  },
  {
    "label": "TouchElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TouchElement(FCacheElement* InElement)"
  },
  {
    "label": "InsertChunk()",
    "kind": "Method",
    "detail": "Function (FCacheElement*)",
    "insertText": "InsertChunk(const FChunkKey& InKey, const TSharedPtr<FSoundWaveData>& InSoundWaveWeakPtr)"
  },
  {
    "label": "SetUpLeastRecentChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpLeastRecentChunk()"
  },
  {
    "label": "ShouldAddNewChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAddNewChunk()"
  },
  {
    "label": "EvictLeastRecentChunk()",
    "kind": "Method",
    "detail": "Function (FCacheElement*)",
    "insertText": "EvictLeastRecentChunk(bool bBlockForPendingLoads = false)"
  },
  {
    "label": "KickOffAsyncLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KickOffAsyncLoad(FCacheElement* CacheElement, const FChunkKey& InKey, TFunction<void(EAudioChunkLoadResult)> OnLoadCompleted, ENamedThreads::Type CallbackThread, bool bNeededForPlayback)"
  },
  {
    "label": "GetAsyncPriorityForChunk()",
    "kind": "Method",
    "detail": "Function (EAsyncIOPriorityAndFlags)",
    "insertText": "GetAsyncPriorityForChunk(const FChunkKey& InKey, bool bNeededForPlayback)"
  },
  {
    "label": "ExecuteOnLoadCompleteCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOnLoadCompleteCallback(EAudioChunkLoadResult Result, const TFunction<void(EAudioChunkLoadResult)>& OnLoadCompleted, const ENamedThreads::Type& CallbackThread)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "operator(const FAudioChunkCache& Element1, const FAudioChunkCache& Element2)"
  },
  {
    "label": "FCachedAudioStreamingManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCachedAudioStreamingManager()"
  },
  {
    "label": "UpdateResourceStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResourceStreaming(float DeltaTime, bool bProcessEverything=false)"
  },
  {
    "label": "BlockTillAllRequestsFinished()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BlockTillAllRequestsFinished(float TimeLimit = 0.0f, bool bLogResults = false)"
  },
  {
    "label": "CancelForcedResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelForcedResources()"
  },
  {
    "label": "NotifyLevelChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLevelChange()"
  },
  {
    "label": "SetDisregardWorldResourcesForFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisregardWorldResourcesForFrames(int32 NumFrames)"
  },
  {
    "label": "AddLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLevel(class ULevel* Level)"
  },
  {
    "label": "RemoveLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLevel(class ULevel* Level)"
  },
  {
    "label": "NotifyLevelOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLevelOffset(class ULevel* Level, const FVector& Offset)"
  },
  {
    "label": "AddForceInlineSoundWave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceInlineSoundWave(const FSoundWaveProxyPtr& SoundWave)"
  },
  {
    "label": "RemoveForceInlineSoundWave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveForceInlineSoundWave(const FSoundWaveProxyPtr& SoundWave)"
  },
  {
    "label": "RequestChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestChunk(const FSoundWaveProxyPtr& SoundWave, uint32 ChunkIndex, TFunction<void(EAudioChunkLoadResult)> OnLoadCompleted, ENamedThreads::Type ThreadToCallOnLoadCompletedOn, bool bForImmediatePlayback = false)"
  },
  {
    "label": "GetLoadedChunk()",
    "kind": "Method",
    "detail": "Function (FAudioChunkHandle)",
    "insertText": "GetLoadedChunk(const FSoundWaveProxyPtr& SoundWave, uint32 ChunkIndex, bool bBlockForLoad = false, bool bForImmediatePlayback = false)"
  },
  {
    "label": "TrimMemory()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "TrimMemory(uint64 NumBytesToFree)"
  },
  {
    "label": "RenderStatAudioStreaming()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RenderStatAudioStreaming(UWorld* World, FViewport* Viewport, FCanvas* Canvas, int32 X, int32 Y, const FVector* ViewLocation, const FRotator* ViewRotation)"
  },
  {
    "label": "GenerateMemoryReport()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateMemoryReport()"
  },
  {
    "label": "SetProfilingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProfilingMode(bool bEnabled)"
  },
  {
    "label": "AddReferenceToChunk()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AddReferenceToChunk(const FAudioChunkHandle& InHandle)"
  },
  {
    "label": "RemoveReferenceToChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReferenceToChunk(const FAudioChunkHandle& InHandle)"
  },
  {
    "label": "GetCacheForWave()",
    "kind": "Method",
    "detail": "Function (FAudioChunkCache*)",
    "insertText": "GetCacheForWave(const FSoundWaveProxyPtr& InSoundWave)"
  },
  {
    "label": "GetCacheForChunkSize()",
    "kind": "Method",
    "detail": "Function (FAudioChunkCache*)",
    "insertText": "GetCacheForChunkSize(uint32 InChunkSize)"
  },
  {
    "label": "GetNextChunkIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNextChunkIndex(const FSoundWaveProxyPtr& InSoundWave, uint32 CurrentChunkIndex)"
  }
]