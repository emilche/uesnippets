[
  {
    "label": "FAudioStreamCacheMemoryHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioStreamCacheMemoryHandle"
  },
  {
    "label": "FAudioChunkCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioChunkCache"
  },
  {
    "label": "FChunkKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkKey"
  },
  {
    "label": "FCacheMissEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheMissEntry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "lets",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "lets"
  },
  {
    "label": "FCacheElementDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheElementDebugInfo"
  },
  {
    "label": "FCacheElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheElement"
  },
  {
    "label": "FSoundWaveMemoryTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveMemoryTracker"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "FCacheMissInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheMissInfo"
  },
  {
    "label": "FCachedAudioStreamingManagerParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedAudioStreamingManagerParams"
  },
  {
    "label": "FCacheDimensions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheDimensions"
  },
  {
    "label": "FCachedAudioStreamingManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedAudioStreamingManager"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAudioStreamCaching, Display, All)"
  },
  {
    "label": "GetChunk()",
    "kind": "Method",
    "detail": "Function (TArrayView<uint8>)",
    "insertText": "GetChunk(const FChunkKey& InKey, const TSharedPtr<FSoundWaveData>& InSoundWavePtr, bool bBlockForLoadCompletion, bool bNeededForPlayback, uint64& InOutCacheLookupID)"
  },
  {
    "label": "AddNewReferenceToChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewReferenceToChunk(const FChunkKey& InKey)"
  },
  {
    "label": "RemoveReferenceToChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReferenceToChunk(const FChunkKey& InKey)"
  },
  {
    "label": "ClearCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCache()"
  },
  {
    "label": "AddForceInlineSoundWave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceInlineSoundWave(const FSoundWaveProxyPtr&)"
  },
  {
    "label": "RemoveForceInlineSoundWave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveForceInlineSoundWave(const FSoundWaveProxyPtr&)"
  },
  {
    "label": "AddMemoryCountedFeature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMemoryCountedFeature(const FAudioStreamCacheMemoryHandle& Feature)"
  },
  {
    "label": "RemoveMemoryCountedFeature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMemoryCountedFeature(const FAudioStreamCacheMemoryHandle& Feature)"
  },
  {
    "label": "TrimMemory()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "TrimMemory(uint64 BytesToFree, bool bAllowRetainedChunkTrimming)"
  },
  {
    "label": "GetLeastRecentlyUsedRetainedSoundWaves()",
    "kind": "Method",
    "detail": "Function (TArray<FObjectKey>)",
    "insertText": "GetLeastRecentlyUsedRetainedSoundWaves(int32 NumSoundWavesToRetrieve)"
  },
  {
    "label": "CancelAllPendingLoads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAllPendingLoads()"
  },
  {
    "label": "ReportCacheSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "ReportCacheSize()"
  },
  {
    "label": "BeginLoggingCacheMisses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginLoggingCacheMisses()"
  },
  {
    "label": "StopLoggingCacheMisses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopLoggingCacheMisses()"
  },
  {
    "label": "FlushCacheMissLog()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FlushCacheMissLog()"
  },
  {
    "label": "DoesKeyContainValidChunkIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesKeyContainValidChunkIndex(const FChunkKey& InKey, const FSoundWaveData& InSoundWaveData)"
  },
  {
    "label": "SetCacheLookupIDForChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCacheLookupIDForChunk(const FChunkKey& InChunkKey, uint64 InCacheLookupID)"
  },
  {
    "label": "DebugPrint()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DebugPrint()"
  },
  {
    "label": "UpdateDebugInfoLoadingBehavior()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDebugInfoLoadingBehavior()"
  },
  {
    "label": "IsChunkStale()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsChunkStale()"
  },
  {
    "label": "ReleaseRetainedAudioOnSoundWave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRetainedAudioOnSoundWave()"
  },
  {
    "label": "TouchElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TouchElement(FCacheElement* InElement)"
  },
  {
    "label": "SetUpLeastRecentChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpLeastRecentChunk()"
  },
  {
    "label": "GetAsyncPriorityForChunk()",
    "kind": "Method",
    "detail": "Function (EAsyncIOPriorityAndFlags)",
    "insertText": "GetAsyncPriorityForChunk(const FChunkKey& InKey, bool bNeededForPlayback)"
  }
]