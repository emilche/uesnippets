[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "AudioEncoderMultiChannelOpusConfig()",
    "kind": "Method",
    "detail": "Function (# ifndef API_AUDIO_CODECS_OPUS_AUDIO_ENCODER_MULTI_CHANNEL_OPUS_CONFIG_H_ # define API_AUDIO_CODECS_OPUS_AUDIO_ENCODER_MULTI_CHANNEL_OPUS_CONFIG_H_ # include<stddef . h> # include<vector> # include \" absl / types / optional . h \" # include \" api / audio_codecs / opus / audio_encoder_opus_config . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { struct RTC_EXPORT AudioEncoderMultiChannelOpusConfig { int kDefaultFrameSizeMs = 2 0 ; int kMinBitrateBps = 6 0 0 0 ; int kMaxBitrateBps = 5 1 0 0 0 0 ;)",
    "insertText": "AudioEncoderMultiChannelOpusConfig()"
  },
  {
    "label": "AudioEncoderMultiChannelOpusConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioEncoderMultiChannelOpusConfig(const AudioEncoderMultiChannelOpusConfig&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioEncoderMultiChannelOpusConfig&)",
    "insertText": "operator(const AudioEncoderMultiChannelOpusConfig&)"
  },
  {
    "label": "IsOk()",
    "kind": "Method",
    "detail": "Function (int frame_size_ms ; size_t num_channels ; enum class ApplicationMode { kVoip,kAudio } ; ApplicationMode application ; int bitrate_bps ; bool fec_enabled ; bool cbr_enabled ; bool dtx_enabled ; int max_playback_rate_hz ; std::vector<int> supported_frame_lengths_ms ; int complexity ; int num_streams ; int coupled_streams ; std::vector<unsigned char> channel_mapping ; bool)",
    "insertText": "IsOk()"
  }
]