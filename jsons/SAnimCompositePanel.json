[
  {
    "label": "SAnimCompositeEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimCompositeEditor"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "FAnimModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimModel"
  },
  {
    "label": "FAnimSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSegment"
  },
  {
    "label": "SAnimCompositePanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimCompositePanel"
  },
  {
    "label": "UAnimComposite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimComposite"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" SAnimTrackPanel . h \" # include \" STrack . h \" class SAnimCompositeEditor ; class SBorder ; class FAnimModel ; struct FAnimSegment ; class SAnimCompositePanel : public SAnimTrackPanel,public FEditorUndoClient { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimCompositePanel ) : _Composite() , _ViewInputMin() , _ViewInputMax() , _InputMin() , _InputMax() , _OnSetInputViewRange()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(class UAnimComposite*, Composite) SLATE_ARGUMENT( float, WidgetWidth ) SLATE_ATTRIBUTE( float, ViewInputMin ) SLATE_ATTRIBUTE( float, ViewInputMax ) SLATE_ATTRIBUTE( float, InputMin ) SLATE_ATTRIBUTE( float, InputMax ) SLATE_EVENT( FOnSetInputViewRange, OnSetInputViewRange ) SLATE_END_ARGS() ~SAnimCompositePanel()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FAnimModel>& InModel)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "ClearSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelected()"
  },
  {
    "label": "ShowSegmentInDetailsView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowSegmentInDetailsView(int32 SegmentIndex)"
  },
  {
    "label": "PreAnimUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreAnimUpdate()"
  },
  {
    "label": "PostAnimUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostAnimUpdate()"
  },
  {
    "label": "SortAndUpdateComposite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortAndUpdateComposite()"
  },
  {
    "label": "OnCompositeChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCompositeChange(class UObject *EditorAnimBaseObj, bool bRebuild)"
  },
  {
    "label": "TriggerRebuildPanel()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "TriggerRebuildPanel(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "PostUndoRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndoRedo()"
  },
  {
    "label": "CollapseComposite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollapseComposite()"
  },
  {
    "label": "HandleGetNodeColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "HandleGetNodeColor(const FAnimSegment& InSegment)"
  },
  {
    "label": "HandleObjectsSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectsSelected(const TArray<UObject*>& InObjects)"
  },
  {
    "label": "OnIsAnimAssetValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnIsAnimAssetValid(const UAnimSequenceBase* AnimSequenceBase, FText* OutReason)"
  }
]