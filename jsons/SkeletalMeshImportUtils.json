[
  {
    "label": "FExistingSkelMeshData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExistingSkelMeshData"
  },
  {
    "label": "FReferenceSkeleton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeleton"
  },
  {
    "label": "FSkeletalMaterial",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMaterial"
  },
  {
    "label": "FSkeletalMeshImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshImportData"
  },
  {
    "label": "FSkeletalMeshLODModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshLODModel"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "SaveExistingSkelMeshData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" struct FExistingSkelMeshData ; struct FReferenceSkeleton ; struct FSkeletalMaterial ; class FSkeletalMeshImportData ; class FSkeletalMeshLODModel ; class USkeletalMesh ; class USkeleton ; namespace SkeletalMeshImportUtils { TSharedPtr<FExistingSkelMeshData>)",
    "insertText": "SaveExistingSkelMeshData(USkeletalMesh* SourceSkeletalMesh, bool bSaveMaterials, int32 ReimportLODIndex)"
  },
  {
    "label": "RestoreExistingSkelMeshData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreExistingSkelMeshData(const TSharedPtr<const FExistingSkelMeshData>& MeshData, USkeletalMesh* SkeletalMesh, int32 ReimportLODIndex, bool bCanShowDialog, bool bImportSkinningOnly, bool bForceMaterialReset)"
  },
  {
    "label": "ProcessImportMeshInfluences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessImportMeshInfluences(FSkeletalMeshImportData& ImportData, const FString& SkeletalMeshName)"
  },
  {
    "label": "ProcessImportMeshMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessImportMeshMaterials(TArray<FSkeletalMaterial>& Materials, FSkeletalMeshImportData& ImportData)"
  },
  {
    "label": "ProcessImportMeshSkeleton()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessImportMeshSkeleton(const USkeleton* SkeletonAsset, FReferenceSkeleton& RefSkeleton, int32& SkeletalDepth, FSkeletalMeshImportData& ImportData)"
  },
  {
    "label": "ApplySkinning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySkinning(USkeletalMesh* SkeletalMesh, FSkeletalMeshLODModel& SrcLODModel, FSkeletalMeshLODModel& DestLODModel)"
  }
]