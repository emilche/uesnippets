[
  {
    "label": "TPlanarComplex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPlanarComplex"
  },
  {
    "label": "FPolygonNesting",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPolygonNesting"
  },
  {
    "label": "FPolygonInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPolygonInfo"
  },
  {
    "label": "FindSolidRegions()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SegmentTypes . h \" # include \" VectorTypes . h \" # include \" BoxTypes . h \" # include \" Polygon2 . h \" # include \" Curve / GeneralPolygon2 . h \" namespace UE { namespace Geometry { template<RealType> struct TPlanarComplex { TArray<TPolygon2<RealType>> Polygons ; bool bTrustOrientations = true ; bool bAllowOverlappingHoles = false ; struct FPolygonNesting { int OuterIndex ; TArray<int> HoleIndices ; } ; TArray<FPolygonNesting> Solids ; void)",
    "insertText": "FindSolidRegions()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Solids .)",
    "insertText": "Empty()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 N = Polygons .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<int> PolygonIndices ; PolygonIndices .)",
    "insertText": "SetNum(N)"
  },
  {
    "label": "SignedArea()",
    "kind": "Method",
    "detail": "Function (RealType SignedArea = Polygons [ i ] .)",
    "insertText": "SignedArea()"
  },
  {
    "label": "Bounds()",
    "kind": "Method",
    "detail": "Function (Info [ i ] . Orientation = SignedArea> 0 ; Info [ i ] . Area = Info [ i ] . Orientation ? SignedArea : - SignedArea ; Info [ i ] . Bounds = Polygons [ i ] .)",
    "insertText": "Bounds()"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} PolygonIndices .)",
    "insertText": "Sort([&Info](int Ind1, int Ind2) { return Info[Ind1].Area > Info[Ind2].Area; })"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (TArray<int> Parent ; Parent .)",
    "insertText": "SetNumUninitialized(N)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Parent [ i ] = - 1 ; })",
    "insertText": "for(int ParentCand = 0; ParentCand+1 < N; ParentCand++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int PIdx = PolygonIndices [ ParentCand ] ; const TPolygon2<RealType>& PPoly = Polygons [ PIdx ] ; const FPolygonInfo& PInfo = Info [ PIdx ] ;)",
    "insertText": "if(bTrustOrientations && !PInfo.Orientation)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "for(int ChildCand = ParentCand + 1; ChildCand < N; ChildCand++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int CIdx = PolygonIndices [ ChildCand ] ; const TPolygon2<RealType>& CPoly = Polygons [ CIdx ] ; const FPolygonInfo& CInfo = Info [ CIdx ] ;)",
    "insertText": "if(bTrustOrientations && CInfo.Orientation)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(PInfo.Bounds.Contains(CInfo.Bounds) && PPoly.Contains(CPoly))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bOverlapFound = false ;)",
    "insertText": "if(!bAllowOverlappingHoles)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bOverlapFound = true ; break ; } } } })",
    "insertText": "if(!bOverlapFound)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (Parent [ ChildCand ] = ParentCand ; } } } } TArray<bool> Taken ; Taken .)",
    "insertText": "SetNumZeroed(N)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int NIdx = PolygonIndices [ NestCand ] ;)",
    "insertText": "if(Taken[NestCand] || (bTrustOrientations && !Info[NIdx].Orientation))"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (continue ; } FPolygonNesting& Nest = Solids .)",
    "insertText": "Emplace_GetRef()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Nest . OuterIndex = NIdx ;)",
    "insertText": "for(int HoleCand = NestCand + 1; HoleCand < N; HoleCand++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int HIdx = PolygonIndices [ HoleCand ] ;)",
    "insertText": "if(Parent[HoleCand] == NestCand)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Nest . HoleIndices .)",
    "insertText": "Add(HIdx)"
  },
  {
    "label": "ConvertNestToGeneralPolygon()",
    "kind": "Method",
    "detail": "Function (Taken [ HoleCand ] = true ; } } } } TGeneralPolygon2<RealType>)",
    "insertText": "ConvertNestToGeneralPolygon(const FPolygonNesting& Nest)"
  },
  {
    "label": "GPoly()",
    "kind": "Method",
    "detail": "Function (TGeneralPolygon2<RealType>)",
    "insertText": "GPoly(Polygons[Nest.OuterIndex])"
  },
  {
    "label": "AddHole()",
    "kind": "Method",
    "detail": "Function (GPoly .)",
    "insertText": "AddHole(Polygons[HoleIdx], false, false)"
  },
  {
    "label": "ConvertOutputToGeneralPolygons()",
    "kind": "Method",
    "detail": "Function (} return GPoly ; } TArray<TGeneralPolygon2<RealType>>)",
    "insertText": "ConvertOutputToGeneralPolygons()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<TGeneralPolygon2<RealType>> Output ;)",
    "insertText": "for(const FPolygonNesting& Nest : Solids)"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (TGeneralPolygon2<RealType>& GPoly = Output .)",
    "insertText": "Emplace_GetRef(TGeneralPolygon2<RealType>(Polygons[Nest.OuterIndex]))"
  }
]