[
  {
    "label": "FSlateTextureData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateTextureData"
  },
  {
    "label": "FSlateOpenGLTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateOpenGLTexture"
  },
  {
    "label": "FSlateFontTextureOpenGL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateFontTextureOpenGL"
  },
  {
    "label": "FSlateShaderResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateShaderResource"
  },
  {
    "label": "FTextureResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureResource"
  },
  {
    "label": "FSlateTextureAtlasOpenGL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTextureAtlasOpenGL"
  },
  {
    "label": "FSlateOpenGLTexture()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Textures / SlateShaderResource . h \" # include \" Fonts / FontTypes . h \" # include \" Textures / SlateUpdatableTexture . h \" # include \" OpenGL / SlateOpenGLExtensions . h \" struct FSlateTextureData ; class FSlateOpenGLTexture : public TSlateTexture<GLuint>,public FSlateUpdatableTexture { public :)",
    "insertText": "FSlateOpenGLTexture(uint32 InSizeX, uint32 InSizeY ) : TSlateTexture( FSlateOpenGLTexture::NullTexture ) , SizeX(InSizeX) , SizeY(InSizeY) , TextureTargetType(GL_TEXTURE_2D)"
  },
  {
    "label": "FSlateOpenGLTexture()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlateOpenGLTexture() : TSlateTexture( FSlateOpenGLTexture::NullTexture ) , SizeX(0) , SizeY(0) #if PLATFORM_LINUX , TextureTargetType(GL_TEXTURE_RECTANGLE) #else , TextureTargetType(GL_TEXTURE_RECTANGLE_ARB)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(GLenum InTexFormat, const TArray<uint8>& TextureData)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(GLuint TextureID)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(void* TextureHandle)"
  },
  {
    "label": "FSlateOpenGLTexture()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateOpenGLTexture()"
  },
  {
    "label": "glDeleteTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDeleteTextures(1, &ShaderResource)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (delete this ; } uint32)",
    "insertText": "GetWidth()"
  },
  {
    "label": "UpdateTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTexture(const TArray<uint8>& Bytes)"
  },
  {
    "label": "UpdateTextureThreadSafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextureThreadSafe(const TArray<uint8>& Bytes)"
  },
  {
    "label": "UpdateTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTexture(Bytes)"
  },
  {
    "label": "UpdateTextureThreadSafeRaw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateTextureThreadSafeRaw(uint32 Width, uint32 Height, const void* Buffer, const FIntRect& Dirty = FIntRect())"
  },
  {
    "label": "UpdateTextureThreadSafeWithTextureData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextureThreadSafeWithTextureData(FSlateTextureData* TextureData)"
  },
  {
    "label": "UpdateTextureThreadSafeWithKeyedTextureHandle()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_MAC void)",
    "insertText": "UpdateTextureThreadSafeWithKeyedTextureHandle(void* TextureHandle, int KeyLockVal, int KeyUnlockVal, const FIntRect& Dirty = FIntRect())"
  },
  {
    "label": "GetTextureTargetType()",
    "kind": "Method",
    "detail": "Function (} # endif uint32)",
    "insertText": "GetTextureTargetType()"
  },
  {
    "label": "FSlateFontTextureOpenGL()",
    "kind": "Method",
    "detail": "Function (GLuint NullTexture ; GLenum TexFormat ; uint32 SizeX ; uint32 SizeY ; bool bHasPendingResize ; uint32 TextureTargetType ; } ; class FSlateFontTextureOpenGL : public FSlateFontAtlas { public :)",
    "insertText": "FSlateFontTextureOpenGL(uint32 Width, uint32 Height, ESlateFontAtlasContentType InContentType)"
  },
  {
    "label": "FSlateFontTextureOpenGL()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateFontTextureOpenGL()"
  },
  {
    "label": "CreateFontTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFontTexture()"
  },
  {
    "label": "ConditionalUpdateTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalUpdateTexture()"
  },
  {
    "label": "GetSlateTexture()",
    "kind": "Method",
    "detail": "Function (class FSlateShaderResource*)",
    "insertText": "GetSlateTexture()"
  },
  {
    "label": "GetGLTextureInternalFormat()",
    "kind": "Method",
    "detail": "Function (} private : GLint)",
    "insertText": "GetGLTextureInternalFormat()"
  },
  {
    "label": "GetGLTextureFormat()",
    "kind": "Method",
    "detail": "Function (GLint)",
    "insertText": "GetGLTextureFormat()"
  },
  {
    "label": "GetGLTextureType()",
    "kind": "Method",
    "detail": "Function (GLint)",
    "insertText": "GetGLTextureType()"
  },
  {
    "label": "FSlateTextureAtlasOpenGL()",
    "kind": "Method",
    "detail": "Function (FSlateOpenGLTexture* FontTexture ; } ; class FSlateTextureAtlasOpenGL : public FSlateTextureAtlas { public :)",
    "insertText": "FSlateTextureAtlasOpenGL(uint32 Width, uint32 Height, uint32 StrideBytes, ESlateTextureAtlasPaddingStyle PaddingStyle)"
  },
  {
    "label": "FSlateTextureAtlasOpenGL()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateTextureAtlasOpenGL()"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "GetAtlasTexture()",
    "kind": "Method",
    "detail": "Function (} FSlateOpenGLTexture*)",
    "insertText": "GetAtlasTexture()"
  }
]