[
  {
    "label": "VSInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VSInfo"
  },
  {
    "label": "HSInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HSInfo"
  },
  {
    "label": "DSInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DSInfo"
  },
  {
    "label": "GSInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GSInfo"
  },
  {
    "label": "PSInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSInfo"
  },
  {
    "label": "MSInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MSInfo"
  },
  {
    "label": "ASInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ASInfo"
  },
  {
    "label": "MSInfo1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MSInfo1"
  },
  {
    "label": "PSVRuntimeInfo0",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSVRuntimeInfo0"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "PSVRuntimeInfo1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSVRuntimeInfo1"
  },
  {
    "label": "PSVRuntimeInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSVRuntimeInfo2"
  },
  {
    "label": "PSVRuntimeInfo3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSVRuntimeInfo3"
  },
  {
    "label": "PSVStringTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSVStringTable"
  },
  {
    "label": "PSVResourceBindInfo0",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSVResourceBindInfo0"
  },
  {
    "label": "PSVResourceBindInfo1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSVResourceBindInfo1"
  },
  {
    "label": "PSVComponentMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSVComponentMask"
  },
  {
    "label": "PSVDependencyTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSVDependencyTable"
  },
  {
    "label": "PSVString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSVString"
  },
  {
    "label": "PSVSemanticIndexTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSVSemanticIndexTable"
  },
  {
    "label": "PSVSemanticIndexes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSVSemanticIndexes"
  },
  {
    "label": "PSVSignatureElement0",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSVSignatureElement0"
  },
  {
    "label": "PSVSignatureElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PSVSignatureElement"
  },
  {
    "label": "PSVInitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSVInitInfo"
  },
  {
    "label": "DxilPipelineStateValidation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilPipelineStateValidation"
  },
  {
    "label": "CheckedReaderWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CheckedReaderWriter"
  },
  {
    "label": "ViewIDValidator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ViewIDValidator"
  },
  {
    "label": "PSVComputeMaskDwordsFromVectors()",
    "kind": "Method",
    "detail": "Function (# ifndef __DXIL_PIPELINE_STATE_VALIDATION__H__ # define __DXIL_PIPELINE_STATE_VALIDATION__H__ # include \" dxc / WinAdapter . h \" # include<cstring> # include<stdint . h> # ifndef UINT_MAX # define UINT_MAX 0 xffffffff # endif uint32_t)",
    "insertText": "PSVComputeMaskDwordsFromVectors(uint32_t Vectors)"
  },
  {
    "label": "PSVComputeInputOutputTableDwords()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "PSVComputeInputOutputTableDwords(uint32_t InputVectors, uint32_t OutputVectors)"
  },
  {
    "label": "PSVALIGN()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "PSVALIGN(ptr, alignbits) \\ (((ptr) + ((1 << (alignbits)) - 1)) & ~((1 << (alignbits)) - 1)) #define PSVALIGN4(ptr) (((ptr) + 3) & ~3) #define PSV_GS_MAX_STREAMS 4 #ifndef NDEBUG #define PSV_RETB(exp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!(exp))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(false && #exp)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ return false ; \\ } \\ })",
    "insertText": "while(0) #else #define PSV_RETB(exp)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ return false ; \\ } \\ })",
    "insertText": "while(0)"
  },
  {
    "label": "PSVStringTable()",
    "kind": "Method",
    "detail": "Function (char OutputPositionPresent ; } ; struct HSInfo { uint32_t InputControlPointCount ; uint32_t OutputControlPointCount ; uint32_t TessellatorDomain ; uint32_t TessellatorOutputPrimitive ; } ; struct DSInfo { uint32_t InputControlPointCount ; char OutputPositionPresent ; uint32_t TessellatorDomain ; } ; struct GSInfo { uint32_t InputPrimitive ; uint32_t OutputTopology ; uint32_t OutputStreamMask ; char OutputPositionPresent ; } ; struct PSInfo { char DepthOutput ; char SampleFrequency ; } ; struct MSInfo { uint32_t GroupSharedBytesUsed ; uint32_t GroupSharedBytesDependentOnViewID ; uint32_t PayloadSizeInBytes ; uint16_t MaxOutputVertices ; uint16_t MaxOutputPrimitives ; } ; struct ASInfo { uint32_t PayloadSizeInBytes ; } ; struct MSInfo1 { uint8_t SigPrimVectors ; uint8_t MeshOutputTopology ; } ; struct PSVRuntimeInfo0 { union { VSInfo VS ; HSInfo HS ; DSInfo DS ; GSInfo GS ; PSInfo PS ; MSInfo MS ; ASInfo AS ; } ; uint32_t MinimumExpectedWaveLaneCount ; uint32_t MaximumExpectedWaveLaneCount ; } ; enum class PSVShaderKind : uint8_t { Pixel = 0,Vertex,Geometry,Hull,Domain,Compute,Library,RayGeneration,Intersection,AnyHit,ClosestHit,Miss,Callable,Mesh,Amplification,Node,Invalid,} ; struct PSVRuntimeInfo1 : public PSVRuntimeInfo0 { uint8_t ShaderStage ; uint8_t UsesViewID ; union { uint16_t MaxVertexCount ; uint8_t SigPatchConstOrPrimVectors ; struct MSInfo1 MS1 ; } ; uint8_t SigInputElements ; uint8_t SigOutputElements ; uint8_t SigPatchConstOrPrimElements ; uint8_t SigInputVectors ; uint8_t SigOutputVectors [ PSV_GS_MAX_STREAMS ] ; } ; struct PSVRuntimeInfo2 : public PSVRuntimeInfo1 { uint32_t NumThreadsX ; uint32_t NumThreadsY ; uint32_t NumThreadsZ ; } ; struct PSVRuntimeInfo3 : public PSVRuntimeInfo2 { uint32_t EntryFunctionName ; } ; enum class PSVResourceType { Invalid = 0,Sampler,CBV,SRVTyped,SRVRaw,SRVStructured,UAVTyped,UAVRaw,UAVStructured,UAVStructuredWithCounter,NumEntries } ; enum class PSVResourceKind { Invalid = 0,Texture1D,Texture2D,Texture2DMS,Texture3D,TextureCube,Texture1DArray,Texture2DArray,Texture2DMSArray,TextureCubeArray,TypedBuffer,RawBuffer,StructuredBuffer,CBuffer,Sampler,TBuffer,RTAccelerationStructure,FeedbackTexture2D,FeedbackTexture2DArray,NumEntries } ; enum class PSVResourceFlag { None = 0 x00000000,UsedByAtomic64 = 0 x00000001,} ; struct PSVStringTable { const char* Table ; uint32_t Size ;)",
    "insertText": "PSVStringTable() : Table(nullptr), Size(0)"
  },
  {
    "label": "PSVStringTable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PSVStringTable(const char *table, uint32_t size) : Table(table), Size(size)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "Get(uint32_t offset)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(offset < Size && Table && Table[Size - 1] == '\\0')"
  },
  {
    "label": "PSVComponentMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PSVComponentMask(const PSVComponentMask &other) : Mask(other.Mask), NumVectors(other.NumVectors)"
  },
  {
    "label": "PSVComponentMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PSVComponentMask(uint32_t *pMask, uint32_t outputVectors) : Mask(pMask), NumVectors(outputVectors)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const PSVComponentMask&)",
    "insertText": "operator(const PSVComponentMask &other)"
  },
  {
    "label": "PSVComputeMaskDwordsFromVectors()",
    "kind": "Method",
    "detail": "Function (uint32_t dwords =)",
    "insertText": "PSVComputeMaskDwordsFromVectors(NumVectors < other.NumVectors ? NumVectors : other.NumVectors)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Mask [ i ] | = other . Mask [ i ] ; } return* this ; } bool)",
    "insertText": "Get(uint32_t ComponentIndex)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear(uint32_t ComponentIndex)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "PSVDependencyTable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PSVDependencyTable(const PSVDependencyTable &other) : Table(other.Table), InputVectors(other.InputVectors), OutputVectors(other.OutputVectors)"
  },
  {
    "label": "PSVDependencyTable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PSVDependencyTable(uint32_t *pTable, uint32_t inputVectors, uint32_t outputVectors) : Table(pTable), InputVectors(inputVectors), OutputVectors(outputVectors)"
  },
  {
    "label": "GetMaskForInput()",
    "kind": "Method",
    "detail": "Function (} PSVComponentMask)",
    "insertText": "GetMaskForInput(uint32_t inputComponentIndex)"
  },
  {
    "label": "PSVString()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PSVString(uint32_t offset) : Offset(offset)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "Get(const PSVStringTable &table)"
  },
  {
    "label": "PSVSemanticIndexTable()",
    "kind": "Method",
    "detail": "Function (} } ; struct PSVSemanticIndexTable { const uint32_t* Table ; uint32_t Entries ;)",
    "insertText": "PSVSemanticIndexTable() : Table(nullptr), Entries(0)"
  },
  {
    "label": "PSVSemanticIndexTable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PSVSemanticIndexTable(const uint32_t *table, uint32_t entries) : Table(table), Entries(entries)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(offset < Entries && Table)"
  },
  {
    "label": "PSVSemanticIndexes()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PSVSemanticIndexes(uint32_t offset) : Offset(offset)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const uint32_t*)",
    "insertText": "Get(const PSVSemanticIndexTable &table)"
  },
  {
    "label": "PSVSignatureElement()",
    "kind": "Method",
    "detail": "Function (} } ; enum class PSVSemanticKind : uint8_t { Arbitrary,VertexID,InstanceID,Position,RenderTargetArrayIndex,ViewPortArrayIndex,ClipDistance,CullDistance,OutputControlPointID,DomainLocation,PrimitiveID,GSInstanceID,SampleIndex,IsFrontFace,Coverage,InnerCoverage,Target,Depth,DepthLessEqual,DepthGreaterEqual,StencilRef,DispatchThreadID,GroupID,GroupIndex,GroupThreadID,TessFactor,InsideTessFactor,ViewID,Barycentrics,ShadingRate,CullPrimitive,Invalid,} ; struct PSVSignatureElement0 { uint32_t SemanticName ; uint32_t SemanticIndexes ; uint8_t Rows ; uint8_t StartRow ; uint8_t ColsAndStart ; uint8_t SemanticKind ; uint8_t ComponentType ; uint8_t InterpolationMode ; uint8_t DynamicMaskAndStream ; uint8_t Reserved ; } ; class PSVSignatureElement { private : const PSVStringTable& m_StringTable ; const PSVSemanticIndexTable& m_SemanticIndexTable ; const PSVSignatureElement0* m_pElement0 ; public :)",
    "insertText": "PSVSignatureElement(const PSVStringTable &stringTable, const PSVSemanticIndexTable &semanticIndexTable, const PSVSignatureElement0 *pElement0) : m_StringTable(stringTable), m_SemanticIndexTable(semanticIndexTable), m_pElement0(pElement0)"
  },
  {
    "label": "GetSemanticName()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "GetSemanticName()"
  },
  {
    "label": "GetSemanticIndexes()",
    "kind": "Method",
    "detail": "Function (} const uint32_t*)",
    "insertText": "GetSemanticIndexes()"
  },
  {
    "label": "GetRows()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetRows()"
  },
  {
    "label": "GetCols()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetCols()"
  },
  {
    "label": "IsAllocated()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAllocated()"
  },
  {
    "label": "GetStartRow()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "GetStartRow()"
  },
  {
    "label": "GetStartCol()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "GetStartCol()"
  },
  {
    "label": "GetSemanticKind()",
    "kind": "Method",
    "detail": "Function (} PSVSemanticKind)",
    "insertText": "GetSemanticKind()"
  },
  {
    "label": "GetComponentType()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetComponentType()"
  },
  {
    "label": "GetInterpolationMode()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetInterpolationMode()"
  },
  {
    "label": "GetOutputStream()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetOutputStream()"
  },
  {
    "label": "GetDynamicIndexMask()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetDynamicIndexMask()"
  },
  {
    "label": "PSVInitInfo()",
    "kind": "Method",
    "detail": "Function (} } ; # define MAX_PSV_VERSION 3 struct PSVInitInfo {)",
    "insertText": "PSVInitInfo(uint32_t psvVersion) : PSVVersion(psvVersion)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} uint32_t PSVVersion = 0 ; uint32_t ResourceCount = 0 ; PSVShaderKind ShaderStage = PSVShaderKind::Invalid ; PSVStringTable StringTable ; PSVSemanticIndexTable SemanticIndexTable ; uint8_t UsesViewID = 0 ; uint8_t SigInputElements = 0 ; uint8_t SigOutputElements = 0 ; uint8_t SigPatchConstOrPrimElements = 0 ; uint8_t SigInputVectors = 0 ; uint8_t SigPatchConstOrPrimVectors = 0 ; uint8_t SigOutputVectors [ PSV_GS_MAX_STREAMS ] = { 0,0,0,0 } ;)",
    "insertText": "static_assert(MAX_PSV_VERSION == 3, \"otherwise this needs updating.\")"
  },
  {
    "label": "RuntimeInfoSize()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "RuntimeInfoSize()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (default : break ; } return)",
    "insertText": "sizeof(PSVRuntimeInfo3)"
  },
  {
    "label": "ResourceBindInfoSize()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "ResourceBindInfoSize()"
  },
  {
    "label": "SignatureElementSize()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "SignatureElementSize()"
  },
  {
    "label": "DxilPipelineStateValidation()",
    "kind": "Method",
    "detail": "Function (} } ; class DxilPipelineStateValidation { uint32_t m_uPSVRuntimeInfoSize = 0 ; PSVRuntimeInfo0* m_pPSVRuntimeInfo0 = nullptr ; PSVRuntimeInfo1* m_pPSVRuntimeInfo1 = nullptr ; PSVRuntimeInfo2* m_pPSVRuntimeInfo2 = nullptr ; PSVRuntimeInfo3* m_pPSVRuntimeInfo3 = nullptr ; uint32_t m_uResourceCount = 0 ; uint32_t m_uPSVResourceBindInfoSize = 0 ; void* m_pPSVResourceBindInfo = nullptr ; PSVStringTable m_StringTable ; PSVSemanticIndexTable m_SemanticIndexTable ; uint32_t m_uPSVSignatureElementSize = 0 ; void* m_pSigInputElements = nullptr ; void* m_pSigOutputElements = nullptr ; void* m_pSigPatchConstOrPrimElements = nullptr ; uint32_t* m_pViewIDOutputMask [ PSV_GS_MAX_STREAMS ] = { nullptr,nullptr,nullptr,nullptr } ; uint32_t* m_pViewIDPCOrPrimOutputMask = nullptr ; uint32_t* m_pInputToOutputTable [ PSV_GS_MAX_STREAMS ] = { nullptr,nullptr,nullptr,nullptr } ; uint32_t* m_pInputToPCOutputTable = nullptr ; uint32_t* m_pPCInputToOutputTable = nullptr ; public :)",
    "insertText": "DxilPipelineStateValidation()"
  },
  {
    "label": "CheckedReaderWriter()",
    "kind": "Method",
    "detail": "Function (} enum class RWMode { Read,CalcSize,Write,} ; class CheckedReaderWriter { private : char* Ptr ; uint32_t Size ; uint32_t Offset ; RWMode Mode ; public :)",
    "insertText": "CheckedReaderWriter(const void *ptr, uint32_t size, RWMode mode) : Ptr(reinterpret_cast<char *>(const_cast<void *>(ptr))), Size(mode == RWMode::CalcSize ? 0 : size), Offset(0), Mode(mode)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetSize()"
  },
  {
    "label": "IncrementPos()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IncrementPos(size_t size)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (template<_T> bool)",
    "insertText": "Cast(_T **ppPtr, size_t size)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (template<_T> bool)",
    "insertText": "Cast(_T **ppPtr)"
  },
  {
    "label": "MapPtr()",
    "kind": "Method",
    "detail": "Function (template<_T> bool)",
    "insertText": "MapPtr(_T **ppPtr, size_t size = 0)"
  },
  {
    "label": "MapValue()",
    "kind": "Method",
    "detail": "Function (template<_T> bool)",
    "insertText": "MapValue(_T *pValue, const _T init = {})"
  },
  {
    "label": "MapArray()",
    "kind": "Method",
    "detail": "Function (template<_T> bool)",
    "insertText": "MapArray(_T **ppPtr, size_t count, size_t eltSize)"
  },
  {
    "label": "MapArray()",
    "kind": "Method",
    "detail": "Function (template<_T> bool)",
    "insertText": "MapArray(_T **ppPtr, size_t count = 1)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "AssignDerived()",
    "kind": "Method",
    "detail": "Function (} ; template<_Base,_T> bool)",
    "insertText": "AssignDerived(_T **ppDerived, _Base *pBase, uint32_t size)"
  },
  {
    "label": "_T()",
    "kind": "Method",
    "detail": "Function (* ppDerived = reinterpret_cast<)",
    "insertText": "_T(pBase)"
  },
  {
    "label": "InitFromPSV0()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "InitFromPSV0(const void *pBits, uint32_t size)"
  },
  {
    "label": "InitNew()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InitNew(uint32_t ResourceCount, void *pBuffer, uint32_t *pSize)"
  },
  {
    "label": "initInfo()",
    "kind": "Method",
    "detail": "Function (PSVInitInfo)",
    "insertText": "initInfo(0)"
  },
  {
    "label": "InitNew()",
    "kind": "Method",
    "detail": "Function (initInfo . ResourceCount = ResourceCount ; return)",
    "insertText": "InitNew(initInfo, pBuffer, pSize)"
  },
  {
    "label": "InitNew()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InitNew(const PSVInitInfo &initInfo, void *pBuffer, uint32_t *pSize)"
  },
  {
    "label": "ReadOrWrite()",
    "kind": "Method",
    "detail": "Function (RWMode Mode = nullptr ! = pBuffer ? RWMode::Write : RWMode::CalcSize ; return)",
    "insertText": "ReadOrWrite(pBuffer, pSize, Mode, initInfo)"
  },
  {
    "label": "GetPSVRuntimeInfo0()",
    "kind": "Method",
    "detail": "Function (} PSVRuntimeInfo0*)",
    "insertText": "GetPSVRuntimeInfo0()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((size_t)index * (size_t)recordSize <= UINT_MAX)"
  },
  {
    "label": "GetPSVResourceBindInfo0()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } PSVResourceBindInfo0*)",
    "insertText": "GetPSVResourceBindInfo0(uint32_t index)"
  },
  {
    "label": "GetPSVResourceBindInfo1()",
    "kind": "Method",
    "detail": "Function (} PSVResourceBindInfo1*)",
    "insertText": "GetPSVResourceBindInfo1(uint32_t index)"
  },
  {
    "label": "GetStringTable()",
    "kind": "Method",
    "detail": "Function (} const PSVStringTable&)",
    "insertText": "GetStringTable()"
  },
  {
    "label": "GetOutputElement0()",
    "kind": "Method",
    "detail": "Function (} PSVSignatureElement0*)",
    "insertText": "GetOutputElement0(uint32_t index)"
  },
  {
    "label": "GetPatchConstOrPrimElement0()",
    "kind": "Method",
    "detail": "Function (} PSVSignatureElement0*)",
    "insertText": "GetPatchConstOrPrimElement0(uint32_t index)"
  },
  {
    "label": "GetSignatureElement()",
    "kind": "Method",
    "detail": "Function (} PSVSignatureElement)",
    "insertText": "GetSignatureElement(PSVSignatureElement0 *pElement0)"
  },
  {
    "label": "GetShaderKind()",
    "kind": "Method",
    "detail": "Function (} PSVShaderKind)",
    "insertText": "GetShaderKind()"
  },
  {
    "label": "IsHS()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHS()"
  },
  {
    "label": "IsDS()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDS()"
  },
  {
    "label": "IsGS()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGS()"
  },
  {
    "label": "IsPS()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPS()"
  },
  {
    "label": "IsCS()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCS()"
  },
  {
    "label": "IsMS()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMS()"
  },
  {
    "label": "IsAS()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAS()"
  },
  {
    "label": "GetViewIDOutputMask()",
    "kind": "Method",
    "detail": "Function (} PSVComponentMask)",
    "insertText": "GetViewIDOutputMask(unsigned streamIndex = 0)"
  },
  {
    "label": "GetViewIDPCOutputMask()",
    "kind": "Method",
    "detail": "Function (} PSVComponentMask)",
    "insertText": "GetViewIDPCOutputMask()"
  },
  {
    "label": "GetInputToOutputTable()",
    "kind": "Method",
    "detail": "Function (} PSVDependencyTable)",
    "insertText": "GetInputToOutputTable(unsigned streamIndex = 0)"
  },
  {
    "label": "PSVDependencyTable()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "PSVDependencyTable()"
  },
  {
    "label": "GetInputToPCOutputTable()",
    "kind": "Method",
    "detail": "Function (} PSVDependencyTable)",
    "insertText": "GetInputToPCOutputTable()"
  },
  {
    "label": "GetPCInputToOutputTable()",
    "kind": "Method",
    "detail": "Function (} PSVDependencyTable)",
    "insertText": "GetPCInputToOutputTable()"
  },
  {
    "label": "GetNumThreads()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetNumThreads(uint32_t *pNumThreadsX, uint32_t *pNumThreadsY, uint32_t *pNumThreadsZ)"
  },
  {
    "label": "CheckBounds()",
    "kind": "Method",
    "detail": "Function (} } ; bool DxilPipelineStateValidation::)",
    "insertText": "CheckBounds(size_t size)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(size <= UINT_MAX)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(Offset <= Size)"
  },
  {
    "label": "uSize()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "uSize(uint32_t)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(uSize <= Size + uSize)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (Size + = uSize ; })",
    "insertText": "PSV_RETB(CheckBounds(size))"
  },
  {
    "label": "MapPtr()",
    "kind": "Method",
    "detail": "Function (} template<_T> bool DxilPipelineStateValidation::)",
    "insertText": "MapPtr(_T **ppPtr, size_t size)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(Cast(ppPtr, size))"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(IncrementPos(size))"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (_T* pPtr = nullptr ;)",
    "insertText": "PSV_RETB(MapPtr(&pPtr, sizeof(_T)))"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(count <= UINT_MAX && eltSize <= UINT_MAX && eltSize >= sizeof(_T))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} template<> bool DxilPipelineStateValidation::CheckedReaderWriter::MapArray<)",
    "insertText": "void(void **ppPtr, size_t count, size_t eltSize)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(count <= UINT_MAX && eltSize <= UINT_MAX && eltSize > 0)"
  },
  {
    "label": "MapArray()",
    "kind": "Method",
    "detail": "Function (} template<_T> bool DxilPipelineStateValidation::)",
    "insertText": "MapArray(_T **ppPtr, size_t count)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(Ptr, 0, Size)"
  },
  {
    "label": "ReadOrWrite()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "ReadOrWrite(const void *pBits, uint32_t *pSize, RWMode mode, const PSVInitInfo &initInfo)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(pSize != nullptr)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(pBits != nullptr || mode == RWMode::CalcSize)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(initInfo.PSVVersion <= MAX_PSV_VERSION)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(rw.MapValue(&m_uPSVRuntimeInfoSize, initInfo.RuntimeInfoSize()))"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(rw.MapArray(&m_pPSVRuntimeInfo0, 1, m_uPSVRuntimeInfoSize))"
  },
  {
    "label": "AssignDerived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignDerived(&m_pPSVRuntimeInfo1, m_pPSVRuntimeInfo0, m_uPSVRuntimeInfoSize)"
  },
  {
    "label": "AssignDerived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignDerived(&m_pPSVRuntimeInfo2, m_pPSVRuntimeInfo0, m_uPSVRuntimeInfoSize)"
  },
  {
    "label": "AssignDerived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignDerived(&m_pPSVRuntimeInfo3, m_pPSVRuntimeInfo0, m_uPSVRuntimeInfoSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PSVRuntimeInfo1 tempRuntimeInfo = { } ;)",
    "insertText": "if(mode == RWMode::CalcSize && initInfo.PSVVersion > 0)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (m_pPSVRuntimeInfo1 =& tempRuntimeInfo ; })",
    "insertText": "PSV_RETB(rw.MapValue(&m_uResourceCount, initInfo.ResourceCount))"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(rw.MapValue(&m_uPSVResourceBindInfoSize, initInfo.ResourceBindInfoSize()))"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(sizeof(PSVResourceBindInfo0) <= m_uPSVResourceBindInfoSize)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(rw.MapArray(&m_pPSVResourceBindInfo, m_uResourceCount, m_uPSVResourceBindInfoSize))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(m_pPSVRuntimeInfo1)"
  },
  {
    "label": "ShaderStage()",
    "kind": "Method",
    "detail": "Function (m_pPSVRuntimeInfo1 ->)",
    "insertText": "ShaderStage(uint8_t)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_pPSVRuntimeInfo1 -> SigInputElements = initInfo . SigInputElements ; m_pPSVRuntimeInfo1 -> SigOutputElements = initInfo . SigOutputElements ; m_pPSVRuntimeInfo1 -> SigPatchConstOrPrimElements = initInfo . SigPatchConstOrPrimElements ; m_pPSVRuntimeInfo1 -> UsesViewID = initInfo . UsesViewID ;)",
    "insertText": "for(unsigned i = 0; i < PSV_GS_MAX_STREAMS; i++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_pPSVRuntimeInfo1 -> SigOutputVectors [ i ] = initInfo . SigOutputVectors [ i ] ; })",
    "insertText": "if(IsHS() || IsDS() || IsMS())"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (m_pPSVRuntimeInfo1 -> SigPatchConstOrPrimVectors = initInfo . SigPatchConstOrPrimVectors ; } m_pPSVRuntimeInfo1 -> SigInputVectors = initInfo . SigInputVectors ; })",
    "insertText": "PSV_RETB(rw.MapValue(&m_StringTable.Size, PSVALIGN4(initInfo.StringTable.Size)))"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(PSVALIGN4(m_StringTable.Size) == m_StringTable.Size)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(rw.MapArray(&m_StringTable.Table, m_StringTable.Size))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(const_cast<char *>(m_StringTable.Table), initInfo.StringTable.Table, initInfo.StringTable.Size)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "PSV_RETB(rw.MapValue(&m_SemanticIndexTable.Entries, initInfo.SemanticIndexTable.Entries))"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(rw.MapArray(&m_SemanticIndexTable.Table, m_SemanticIndexTable.Entries))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(const_cast<uint32_t *>(m_SemanticIndexTable.Table), initInfo.SemanticIndexTable.Table, sizeof(uint32_t) * initInfo.SemanticIndexTable.Entries)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(m_pPSVRuntimeInfo1->SigInputElements || m_pPSVRuntimeInfo1->SigOutputElements || m_pPSVRuntimeInfo1->SigPatchConstOrPrimElements)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(rw.MapValue(&m_uPSVSignatureElementSize, initInfo.SignatureElementSize()))"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(sizeof(PSVSignatureElement0) <= m_uPSVSignatureElementSize)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(rw.MapArray(&m_pSigInputElements, m_pPSVRuntimeInfo1->SigInputElements, m_uPSVSignatureElementSize))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(m_pPSVRuntimeInfo1->SigOutputElements)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(rw.MapArray(&m_pSigOutputElements, m_pPSVRuntimeInfo1->SigOutputElements, m_uPSVSignatureElementSize))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(m_pPSVRuntimeInfo1->SigPatchConstOrPrimElements)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(rw.MapArray(&m_pSigPatchConstOrPrimElements, m_pPSVRuntimeInfo1->SigPatchConstOrPrimElements, m_uPSVSignatureElementSize))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(m_pPSVRuntimeInfo1->UsesViewID)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(rw.MapArray(&m_pViewIDOutputMask[i], PSVComputeMaskDwordsFromVectors( m_pPSVRuntimeInfo1->SigOutputVectors[i])))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!IsGS())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((IsHS() || IsMS()) && m_pPSVRuntimeInfo1->SigPatchConstOrPrimVectors)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(rw.MapArray(&m_pViewIDPCOrPrimOutputMask, PSVComputeMaskDwordsFromVectors( m_pPSVRuntimeInfo1->SigPatchConstOrPrimVectors)))"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(rw.MapArray(&m_pInputToOutputTable[i], PSVComputeInputOutputTableDwords( m_pPSVRuntimeInfo1->SigInputVectors, m_pPSVRuntimeInfo1->SigOutputVectors[i])))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsHS() && m_pPSVRuntimeInfo1->SigPatchConstOrPrimVectors > 0 && m_pPSVRuntimeInfo1->SigInputVectors > 0)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(rw.MapArray(&m_pInputToPCOutputTable, PSVComputeInputOutputTableDwords( m_pPSVRuntimeInfo1->SigInputVectors, m_pPSVRuntimeInfo1->SigPatchConstOrPrimVectors)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsDS() && m_pPSVRuntimeInfo1->SigOutputVectors[0] > 0 && m_pPSVRuntimeInfo1->SigPatchConstOrPrimVectors > 0)"
  },
  {
    "label": "PSV_RETB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSV_RETB(rw.MapArray(&m_pPCInputToOutputTable, PSVComputeInputOutputTableDwords( m_pPSVRuntimeInfo1->SigPatchConstOrPrimVectors, m_pPSVRuntimeInfo1->SigOutputVectors[0])))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(mode == RWMode::CalcSize)"
  },
  {
    "label": "ViewIDValidator()",
    "kind": "Method",
    "detail": "Function (m_pPSVRuntimeInfo1 = nullptr ; } return true ; } namespace hlsl { class ViewIDValidator { public : enum class Result { Success = 0,SuccessWithViewIDDependentTessFactor,InsufficientInputSpace,InsufficientOutputSpace,InsufficientPCSpace,MismatchedSignatures,MismatchedPCSignatures,InvalidUsage,InvalidPSVVersion,InvalidPSV,} ; ~)",
    "insertText": "ViewIDValidator()"
  },
  {
    "label": "ValidateStage()",
    "kind": "Method",
    "detail": "Function (} Result)",
    "insertText": "ValidateStage(const DxilPipelineStateValidation &PSV, bool bFinalStage, bool bExpandInputOnly, unsigned &mismatchElementId)"
  },
  {
    "label": "NewViewIDValidator()",
    "kind": "Method",
    "detail": "Function (} ; ViewIDValidator*)",
    "insertText": "NewViewIDValidator(unsigned viewIDCount, unsigned gsRastStreamIndex)"
  }
]