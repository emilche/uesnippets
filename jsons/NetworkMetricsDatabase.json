[
  {
    "label": "MetricType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MetricType"
  },
  {
    "label": "FNetworkMetric",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkMetric"
  },
  {
    "label": "FNetworkMetricSnapshot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkMetricSnapshot"
  },
  {
    "label": "ENGINE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ENGINE_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" NetworkMetricsDatabase . generated . h \" namespace UE::Net { template<class MetricType> struct FNetworkMetric { FName Name ; MetricType Value ; } ; struct FNetworkMetricSnapshot { TArray<FNetworkMetric<int64>> MetricInts ; TArray<FNetworkMetric<float>> MetricFloats ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ; })",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: void CreateFloat(const FName MetricName, float DefaultValue)"
  },
  {
    "label": "CreateInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateInt(const FName MetricName, int64 DefaultValue)"
  },
  {
    "label": "SetFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFloat(const FName MetricName, float Value)"
  },
  {
    "label": "SetMinFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMinFloat(const FName MetricName, float Value)"
  },
  {
    "label": "SetMaxFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMaxFloat(const FName MetricName, float Value)"
  },
  {
    "label": "SetInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetInt(const FName MetricName, int64 Value)"
  },
  {
    "label": "SetMinInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMinInt(const FName MetricName, int64 Value)"
  },
  {
    "label": "SetMaxInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMaxInt(const FName MetricName, int64 Value)"
  },
  {
    "label": "IncrementInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IncrementInt(const FName MetricName, int64 Value)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const FName MetricName)"
  },
  {
    "label": "ProcessListeners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessListeners()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(const FName MetricName, TWeakObjectPtr<UNetworkMetricsBaseListener> Reporter)"
  },
  {
    "label": "HasReportIntervalPassed()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "HasReportIntervalPassed(double CurrentTimeSeconds, UNetworkMetricsBaseListener* Listener)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (enum class EMetricType { Integer,Float } ; TMap<FName,EMetricType> MetricTypes ; TMap<FName,UE::Net::FNetworkMetric<int64>> MetricInts ; TMap<FName,UE::Net::FNetworkMetric<float>> MetricFloats ; using FNameAndType = TPair<FName,EMetricType> ; TMap<TWeakObjectPtr<UNetworkMetricsBaseListener>,double> LastReportListener ; TMap<TWeakObjectPtr<UNetworkMetricsBaseListener>,TSet<FNameAndType>> ListenersToMetrics ; } ;)",
    "insertText": "UCLASS(abstract, Config=Engine)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UNetworkMetricsBaseListener()"
  },
  {
    "label": "UNetworkMetricsBaseListener()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UNetworkMetricsBaseListener()"
  },
  {
    "label": "SetInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInterval(double Seconds)"
  },
  {
    "label": "GetInterval()",
    "kind": "Method",
    "detail": "Function (IntervalSeconds = Seconds ; } } double)",
    "insertText": "GetInterval()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UNetworkMetricsCSV()"
  },
  {
    "label": "UNetworkMetricsCSV()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UNetworkMetricsCSV()"
  },
  {
    "label": "SetCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCategory(const FString& CategoryName)"
  },
  {
    "label": "Report()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Report(const UE::Net::FNetworkMetricSnapshot& Snapshot)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: virtual ~UNetworkMetricsPerfCounters()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UNetworkMetricsStats()"
  },
  {
    "label": "UNetworkMetricsStats()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UNetworkMetricsStats()"
  },
  {
    "label": "SetStatName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStatName(const FName Name)"
  }
]