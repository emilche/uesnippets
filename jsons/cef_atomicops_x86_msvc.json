[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_BASE_INTERNAL_CEF_ATOMICOPS_X86_MSVC_H_ # define CEF_INCLUDE_BASE_INTERNAL_CEF_ATOMICOPS_X86_MSVC_H_ # include<windows . h> # include<intrin . h> # include \" include / base / cef_macros . h \" # if)",
    "insertText": "defined(ARCH_CPU_64_BITS)"
  },
  {
    "label": "NoBarrier_CompareAndSwap()",
    "kind": "Method",
    "detail": "Function (namespace subtle { Atomic32)",
    "insertText": "NoBarrier_CompareAndSwap(volatile Atomic32* ptr, Atomic32 old_value, Atomic32 new_value)"
  },
  {
    "label": "_InterlockedCompareExchange()",
    "kind": "Method",
    "detail": "Function (LONG result =)",
    "insertText": "_InterlockedCompareExchange(reinterpret_cast<volatile LONG*>(ptr), static_cast<LONG>(new_value), static_cast<LONG>(old_value))"
  },
  {
    "label": "NoBarrier_AtomicExchange()",
    "kind": "Method",
    "detail": "Function (} Atomic32)",
    "insertText": "NoBarrier_AtomicExchange(volatile Atomic32* ptr, Atomic32 new_value)"
  },
  {
    "label": "_InterlockedExchange()",
    "kind": "Method",
    "detail": "Function (LONG result =)",
    "insertText": "_InterlockedExchange(reinterpret_cast<volatile LONG*>(ptr), static_cast<LONG>(new_value))"
  },
  {
    "label": "Barrier_AtomicIncrement()",
    "kind": "Method",
    "detail": "Function (} Atomic32)",
    "insertText": "Barrier_AtomicIncrement(volatile Atomic32* ptr, Atomic32 increment)"
  },
  {
    "label": "NoBarrier_AtomicIncrement()",
    "kind": "Method",
    "detail": "Function (} Atomic32)",
    "insertText": "NoBarrier_AtomicIncrement(volatile Atomic32* ptr, Atomic32 increment)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "if(defined(_MSC_VER) && _MSC_VER >= 1400) #error \"We require at least vs2005 for MemoryBarrier\" #endif inline void MemoryBarrier()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(ARCH_CPU_64_BITS) __faststorefence()"
  },
  {
    "label": "MemoryBarrier()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "MemoryBarrier()"
  },
  {
    "label": "Acquire_CompareAndSwap()",
    "kind": "Method",
    "detail": "Function (# endif } Atomic32)",
    "insertText": "Acquire_CompareAndSwap(volatile Atomic32* ptr, Atomic32 old_value, Atomic32 new_value)"
  },
  {
    "label": "Release_CompareAndSwap()",
    "kind": "Method",
    "detail": "Function (} Atomic32)",
    "insertText": "Release_CompareAndSwap(volatile Atomic32* ptr, Atomic32 old_value, Atomic32 new_value)"
  },
  {
    "label": "NoBarrier_Store()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value)"
  },
  {
    "label": "Acquire_Store()",
    "kind": "Method",
    "detail": "Function (* ptr = value ; } void)",
    "insertText": "Acquire_Store(volatile Atomic32* ptr, Atomic32 value)"
  },
  {
    "label": "NoBarrier_AtomicExchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoBarrier_AtomicExchange(ptr, value)"
  },
  {
    "label": "Release_Store()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release_Store(volatile Atomic32* ptr, Atomic32 value)"
  },
  {
    "label": "NoBarrier_Load()",
    "kind": "Method",
    "detail": "Function (* ptr = value ; } Atomic32)",
    "insertText": "NoBarrier_Load(volatile const Atomic32* ptr)"
  },
  {
    "label": "Release_Load()",
    "kind": "Method",
    "detail": "Function (Atomic32 value =* ptr ; return value ; } Atomic32)",
    "insertText": "Release_Load(volatile const Atomic32* ptr)"
  },
  {
    "label": "NoBarrier_CompareAndSwap()",
    "kind": "Method",
    "detail": "Function (Atomic64)",
    "insertText": "NoBarrier_CompareAndSwap(volatile Atomic64* ptr, Atomic64 old_value, Atomic64 new_value)"
  },
  {
    "label": "InterlockedCompareExchangePointer()",
    "kind": "Method",
    "detail": "Function (PVOID result =)",
    "insertText": "InterlockedCompareExchangePointer(reinterpret_cast<volatile PVOID*>(ptr), reinterpret_cast<PVOID>(new_value), reinterpret_cast<PVOID>(old_value))"
  },
  {
    "label": "NoBarrier_AtomicExchange()",
    "kind": "Method",
    "detail": "Function (} Atomic64)",
    "insertText": "NoBarrier_AtomicExchange(volatile Atomic64* ptr, Atomic64 new_value)"
  },
  {
    "label": "InterlockedExchangePointer()",
    "kind": "Method",
    "detail": "Function (PVOID result =)",
    "insertText": "InterlockedExchangePointer(reinterpret_cast<volatile PVOID*>(ptr), reinterpret_cast<PVOID>(new_value))"
  },
  {
    "label": "Barrier_AtomicIncrement()",
    "kind": "Method",
    "detail": "Function (} Atomic64)",
    "insertText": "Barrier_AtomicIncrement(volatile Atomic64* ptr, Atomic64 increment)"
  },
  {
    "label": "NoBarrier_AtomicIncrement()",
    "kind": "Method",
    "detail": "Function (} Atomic64)",
    "insertText": "NoBarrier_AtomicIncrement(volatile Atomic64* ptr, Atomic64 increment)"
  },
  {
    "label": "NoBarrier_Store()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NoBarrier_Store(volatile Atomic64* ptr, Atomic64 value)"
  },
  {
    "label": "Acquire_Store()",
    "kind": "Method",
    "detail": "Function (* ptr = value ; } void)",
    "insertText": "Acquire_Store(volatile Atomic64* ptr, Atomic64 value)"
  },
  {
    "label": "Release_Store()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release_Store(volatile Atomic64* ptr, Atomic64 value)"
  },
  {
    "label": "NoBarrier_Load()",
    "kind": "Method",
    "detail": "Function (* ptr = value ; } Atomic64)",
    "insertText": "NoBarrier_Load(volatile const Atomic64* ptr)"
  },
  {
    "label": "Release_Load()",
    "kind": "Method",
    "detail": "Function (Atomic64 value =* ptr ; return value ; } Atomic64)",
    "insertText": "Release_Load(volatile const Atomic64* ptr)"
  },
  {
    "label": "Release_CompareAndSwap()",
    "kind": "Method",
    "detail": "Function (} Atomic64)",
    "insertText": "Release_CompareAndSwap(volatile Atomic64* ptr, Atomic64 old_value, Atomic64 new_value)"
  }
]