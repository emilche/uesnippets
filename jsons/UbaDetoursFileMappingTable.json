[
  {
    "label": "MemoryFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MemoryFile"
  },
  {
    "label": "FileInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileInfo"
  },
  {
    "label": "MappedFileTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MappedFileTable"
  },
  {
    "label": "DirHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DirHash"
  },
  {
    "label": "MappedFileTable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaBinaryReaderWriter . h \" # include \" UbaDetoursShared . h \" namespace uba { struct MemoryFile ; struct FileInfo { u64 size = InvalidValue ; bool tracked = false ; StringKey fileNameKey ; const tchar* name = nullptr ; const tchar* originalName = nullptr ; u32 lastDesiredAccess = 0 ; MemoryFile* memoryFile = nullptr ; bool isFileMap = false ; bool deleted = false ; void* trueFileMapHandle = 0 ; u64 trueFileMapOffset = 0 ; u8* fileMapMem = nullptr ; u8* fileMapMemEnd = nullptr ; # if PLATFORM_WINDOWS u32 fileMapDesiredAccess = PAGE_READONLY ; u32 fileMapViewDesiredAccess = FILE_MAP_READ ; # endif } ; class MappedFileTable { public :)",
    "insertText": "MappedFileTable(MemoryBlock& memoryBlock)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const u8* mem, u32 tableCount, u32 tableSize)"
  },
  {
    "label": "ParseNoLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseNoLock(u32 tableSize)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(u32 tableSize)"
  },
  {
    "label": "SetDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeleted(const StringKey& key, const tchar* name, bool deleted)"
  },
  {
    "label": "Rpc_CreateFileW()",
    "kind": "Method",
    "detail": "Function (MemoryBlock& m_memoryBlock ; const u8* m_mem = 0 ; u32 m_memPosition = 0 ; ReaderWriterLock m_lookupLock ; GrowingUnorderedMap<StringKey,FileInfo> m_lookup ; ReaderWriterLock m_memLookupLock ; UnorderedMap<const void*,int> m_memLookup ; } ; enum : u8 { AccessFlag_Read = 1,AccessFlag_Write = 2 } ; void)",
    "insertText": "Rpc_CreateFileW(const tchar* fileName, const StringKey& fileNameKey, u8 accessFlags, tchar* outNewName, u64 newNameCapacity, u64& outSize, u32& outCloseId, bool lock)"
  },
  {
    "label": "Rpc_UpdateDirectory()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "Rpc_UpdateDirectory(const StringKey& dirKey, const tchar* dirName, u64 dirNameLen, bool lockDirTable = true)"
  },
  {
    "label": "Rpc_UpdateCloseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rpc_UpdateCloseHandle(const tchar* handleName, u32 closeId, bool deleteOnClose, const tchar* newName, u64 mappingHandle, u64 mappingWritten, bool success)"
  },
  {
    "label": "Rpc_UpdateTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rpc_UpdateTables()"
  },
  {
    "label": "Rpc_GetEntryOffset()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "Rpc_GetEntryOffset(const StringKey& entryNameKey, const tchar* entryName, u64 entryNameLen, bool checkIfDir = false)"
  },
  {
    "label": "Rpc_GetFullFileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rpc_GetFullFileName(const tchar*& path, u64& pathLen, StringBufferBase& tempBuf, bool useVirtualName, const tchar* const* loaderPaths = nullptr)"
  },
  {
    "label": "Rpc_GetParentWrittenFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rpc_GetParentWrittenFiles()"
  },
  {
    "label": "DirHash()",
    "kind": "Method",
    "detail": "Function (struct DirHash {)",
    "insertText": "DirHash(const tchar* str, u64 strLen)"
  }
]