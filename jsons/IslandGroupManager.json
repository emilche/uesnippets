[
  {
    "label": "FPBDConstraintContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDConstraintContainer"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "EPerIslandStat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPerIslandStat"
  },
  {
    "label": "FPBDIslandGroupManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDIslandGroupManager"
  },
  {
    "label": "FIslandGroupRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIslandGroupRange"
  },
  {
    "label": "moved",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "moved"
  },
  {
    "label": "CSV_CUSTOM_STAT_ISLANDGROUP_HELPER()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Island / IslandGroup . h \" namespace Chaos { class FPBDConstraintContainer ; # if CSV_PROFILER_STATS # define)",
    "insertText": "CSV_CUSTOM_STAT_ISLANDGROUP_HELPER(Stat) CSV_CUSTOM_STAT(PhysicsVerbose, Stat, Stats[Stat] * 1000.0, ECsvCustomStatOp::Set)"
  },
  {
    "label": "CSV_SCOPED_ISLANDGROUP_TIMING_STAT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CSV_SCOPED_ISLANDGROUP_TIMING_STAT(Stat, ThreadIndex) FScopedDurationTimer Timer_##Stat(GetThreadStatAccumulator(ThreadIndex, FIslandGroupStats::Stat)) struct alignas(64)"
  },
  {
    "label": "ReportStats()",
    "kind": "Method",
    "detail": "Function (enum EPerIslandStat { PerIslandSolve_GatherTotalSerialized,PerIslandSolve_ApplyTotalSerialized,PerIslandSolve_ApplyPushOutTotalSerialized,PerIslandSolve_ApplyProjectionTotalSerialized,PerIslandSolve_ScatterTotalSerialized,NumStats } ; void)",
    "insertText": "ReportStats()"
  },
  {
    "label": "CSV_CUSTOM_STAT_ISLANDGROUP_HELPER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_CUSTOM_STAT_ISLANDGROUP_HELPER(PerIslandSolve_GatherTotalSerialized)"
  },
  {
    "label": "CSV_CUSTOM_STAT_ISLANDGROUP_HELPER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_CUSTOM_STAT_ISLANDGROUP_HELPER(PerIslandSolve_ApplyTotalSerialized)"
  },
  {
    "label": "CSV_CUSTOM_STAT_ISLANDGROUP_HELPER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_CUSTOM_STAT_ISLANDGROUP_HELPER(PerIslandSolve_ApplyPushOutTotalSerialized)"
  },
  {
    "label": "CSV_CUSTOM_STAT_ISLANDGROUP_HELPER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_CUSTOM_STAT_ISLANDGROUP_HELPER(PerIslandSolve_ApplyProjectionTotalSerialized)"
  },
  {
    "label": "CSV_CUSTOM_STAT_ISLANDGROUP_HELPER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_CUSTOM_STAT_ISLANDGROUP_HELPER(PerIslandSolve_ScatterTotalSerialized)"
  },
  {
    "label": "FIslandGroupStats()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIslandGroupStats()"
  },
  {
    "label": "Flatten()",
    "kind": "Method",
    "detail": "Function (Stat = 0 . 0 ; } } FIslandGroupStats)",
    "insertText": "Flatten(const TArray<FIslandGroupStats>& PerGroupStats)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FIslandGroupStats Flat ;)",
    "insertText": "for(const FIslandGroupStats& GroupStats : PerGroupStats)"
  },
  {
    "label": "CSV_SCOPED_ISLANDGROUP_TIMING_STAT()",
    "kind": "Method",
    "detail": "Function (Flat . Stats [ Stat ] + = GroupStats . Stats [ Stat ] ; } } return Flat ; } double Stats [ EPerIslandStat::NumStats ] ; } ; # else # define)",
    "insertText": "CSV_SCOPED_ISLANDGROUP_TIMING_STAT(Stat, ThreadIndex)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (class FPBDIslandGroupManager { public :)",
    "insertText": "UE_NONCOPYABLE(FPBDIslandGroupManager) CHAOS_API FPBDIslandGroupManager(FPBDIslandManager& InIslandManager)"
  },
  {
    "label": "FPBDIslandGroupManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPBDIslandGroupManager()"
  },
  {
    "label": "AddConstraintContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstraintContainer(FPBDConstraintContainer& ConstraintContainer, const int32 Priority = 0)"
  },
  {
    "label": "RemoveConstraintContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConstraintContainer(FPBDConstraintContainer& ConstraintContainer)"
  },
  {
    "label": "SetConstraintContainerPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintContainerPriority(const int32 ContainerId, const int32 Priority)"
  },
  {
    "label": "GetNumActiveGroups()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumActiveGroups()"
  },
  {
    "label": "BuildGroups()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "BuildGroups(const bool bIsResimming)"
  },
  {
    "label": "SetIterationSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIterationSettings(const FIterationSettings& InIterations)"
  },
  {
    "label": "SetNumPositionIterations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumPositionIterations(const int32 InNumIterations)"
  },
  {
    "label": "SetNumPositionIterations()",
    "kind": "Method",
    "detail": "Function (Iterations .)",
    "insertText": "SetNumPositionIterations(InNumIterations)"
  },
  {
    "label": "SetNumVelocityIterations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumVelocityIterations(const int32 InNumIterations)"
  },
  {
    "label": "SetNumVelocityIterations()",
    "kind": "Method",
    "detail": "Function (Iterations .)",
    "insertText": "SetNumVelocityIterations(InNumIterations)"
  },
  {
    "label": "SetNumProjectionIterations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumProjectionIterations(const int32 InNumIterations)"
  },
  {
    "label": "SetNumProjectionIterations()",
    "kind": "Method",
    "detail": "Function (Iterations .)",
    "insertText": "SetNumProjectionIterations(InNumIterations)"
  },
  {
    "label": "GetIterationSettings()",
    "kind": "Method",
    "detail": "Function (} const FIterationSettings&)",
    "insertText": "GetIterationSettings()"
  },
  {
    "label": "FIslandGroupRange()",
    "kind": "Method",
    "detail": "Function (private : struct FIslandGroupRange {)",
    "insertText": "FIslandGroupRange(FPBDIslandConstraintGroupSolver* InIslandGroup, const int32 InBeginIndex, const int32 InEndIndex) : BeginIndex(InBeginIndex) , EndIndex(InEndIndex) , IslandGroup(InIslandGroup)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FIslandGroupRange& L, const FIslandGroupRange& R)"
  },
  {
    "label": "SolveSerial()",
    "kind": "Method",
    "detail": "Function (} int32 BeginIndex ; int32 EndIndex ; FPBDIslandConstraintGroupSolver* IslandGroup ; } ; void)",
    "insertText": "SolveSerial(const FReal Dt)"
  },
  {
    "label": "SolveParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SolveParallelFor(const FReal Dt)"
  },
  {
    "label": "SolveParallelTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SolveParallelTasks(const FReal Dt)"
  },
  {
    "label": "BuildGatherBatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildGatherBatches(TArray<FIslandGroupRange>& BodyRanges, TArray<FIslandGroupRange>& ConstraintRanges)"
  },
  {
    "label": "SolveGroupConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SolveGroupConstraints(const int32 GroupIndex, const FReal Dt)"
  },
  {
    "label": "GetThreadStatAccumulator()",
    "kind": "Method",
    "detail": "Function (FPBDIslandManager& IslandManager ; TArray<TUniquePtr<FPBDIslandConstraintGroupSolver>> IslandGroups ; int32 NumActiveGroups ; int32 NumWorkerThreads ; int32 TargetNumBodiesPerTask ; int32 TargetNumConstraintsPerTask ; FIterationSettings Iterations ; # if CSV_PROFILER_STATS double&)",
    "insertText": "GetThreadStatAccumulator(const int32 ThreadIndex, const FIslandGroupStats::EPerIslandStat StatId)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (GroupStats .)",
    "insertText": "SetNum(ThreadIndex + 1)"
  }
]