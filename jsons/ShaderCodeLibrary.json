[
  {
    "label": "FShaderMapResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderMapResource"
  },
  {
    "label": "FShaderMapResourceCode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderMapResourceCode"
  },
  {
    "label": "FShaderPipeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipeline"
  },
  {
    "label": "FIoBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoBuffer"
  },
  {
    "label": "FIoChunkId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoChunkId"
  },
  {
    "label": "IPlugin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlugin"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "ICookArtifactReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookArtifactReader"
  },
  {
    "label": "FShaderCodeLibraryPipeline",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeLibraryPipeline"
  },
  {
    "label": "FCompactFullName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactFullName"
  },
  {
    "label": "FStableShaderKeyAndValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStableShaderKeyAndValue"
  },
  {
    "label": "TMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMap"
  },
  {
    "label": "FShaderCodeLibrary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeLibrary"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FShaderLibraryCooker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderLibraryCooker"
  },
  {
    "label": "FShaderFormatDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderFormatDescriptor"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FShaderPipeline* Pipeline)"
  },
  {
    "label": "GetPipelineHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPipelineHash(FSHAHash& Output)"
  },
  {
    "label": "ParseFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseFromString(const FStringView& Src)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FCompactFullName& A)"
  },
  {
    "label": "SetCompactFullNameFromObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompactFullNameFromObject(UObject* InDepObject)"
  },
  {
    "label": "ComputeKeyHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeKeyHash()"
  },
  {
    "label": "ParseFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseFromString(const FStringView& Src)"
  },
  {
    "label": "ParseFromStringCached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseFromStringCached(const FStringView& Src, class TMap<uint32, FName>& NameCache)"
  },
  {
    "label": "HeaderLine()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "HeaderLine()"
  },
  {
    "label": "SetPipelineHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPipelineHash(const FShaderPipeline* Pipeline)"
  },
  {
    "label": "WriteToCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToCompactBinary(FCbWriter& Writer, const FStableShaderKeyAndValue& Key, \n\tconst TMap<FSHAHash, int32>& HashToIndex)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FStableShaderKeyAndValue& Key,\n\tconst TArray<FSHAHash>& IndexToHash)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "DECLARE_DELEGATE_OneParam(FSharedShaderMapResourceExplicitRelease, const FShaderMapResource*)"
  },
  {
    "label": "PreInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreInit()"
  },
  {
    "label": "InitForRuntime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitForRuntime(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "AreShaderMapsPreloadedAtLoadTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreShaderMapsPreloadedAtLoadTime()"
  },
  {
    "label": "AddKnownChunkIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKnownChunkIDs(const int32* IDs, const int32 NumChunkIDs)"
  },
  {
    "label": "OpenLibrary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenLibrary(FString const& Name, FString const& Directory, bool bMonolithicOnly = false)"
  },
  {
    "label": "CloseLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseLibrary(FString const& Name)"
  },
  {
    "label": "ContainsShaderCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsShaderCode(const FSHAHash& Hash)"
  },
  {
    "label": "ContainsShaderCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsShaderCode(const FSHAHash& Hash, const FString& LogicalLibraryName)"
  },
  {
    "label": "LoadResource()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FShaderMapResource>)",
    "insertText": "LoadResource(const FSHAHash& Hash, FArchive* Ar)"
  },
  {
    "label": "PreloadShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreloadShader(const FSHAHash& Hash, FArchive* Ar)"
  },
  {
    "label": "ReleasePreloadedShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReleasePreloadedShader(const FSHAHash& Hash)"
  },
  {
    "label": "CreateVertexShader()",
    "kind": "Method",
    "detail": "Function (FVertexShaderRHIRef)",
    "insertText": "CreateVertexShader(EShaderPlatform Platform, const FSHAHash& Hash)"
  },
  {
    "label": "CreatePixelShader()",
    "kind": "Method",
    "detail": "Function (FPixelShaderRHIRef)",
    "insertText": "CreatePixelShader(EShaderPlatform Platform, const FSHAHash& Hash)"
  },
  {
    "label": "CreateGeometryShader()",
    "kind": "Method",
    "detail": "Function (FGeometryShaderRHIRef)",
    "insertText": "CreateGeometryShader(EShaderPlatform Platform, const FSHAHash& Hash)"
  },
  {
    "label": "CreateComputeShader()",
    "kind": "Method",
    "detail": "Function (FComputeShaderRHIRef)",
    "insertText": "CreateComputeShader(EShaderPlatform Platform, const FSHAHash& Hash)"
  },
  {
    "label": "CreateMeshShader()",
    "kind": "Method",
    "detail": "Function (FMeshShaderRHIRef)",
    "insertText": "CreateMeshShader(EShaderPlatform Platform, const FSHAHash& Hash)"
  },
  {
    "label": "CreateAmplificationShader()",
    "kind": "Method",
    "detail": "Function (FAmplificationShaderRHIRef)",
    "insertText": "CreateAmplificationShader(EShaderPlatform Platform, const FSHAHash& Hash)"
  },
  {
    "label": "CreateRayTracingShader()",
    "kind": "Method",
    "detail": "Function (FRayTracingShaderRHIRef)",
    "insertText": "CreateRayTracingShader(EShaderPlatform Platform, const FSHAHash& Hash, EShaderFrequency Frequency)"
  },
  {
    "label": "GetShaderCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetShaderCount(void)"
  },
  {
    "label": "GetRuntimeShaderPlatform()",
    "kind": "Method",
    "detail": "Function (EShaderPlatform)",
    "insertText": "GetRuntimeShaderPlatform(void)"
  },
  {
    "label": "SafeAssignHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeAssignHash(FRHIShader* InShader, const FSHAHash& Hash)"
  },
  {
    "label": "RegisterSharedShaderCodeRequestDelegate_Handle()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterSharedShaderCodeRequestDelegate_Handle(const FSharedShaderCodeRequest::FDelegate& Delegate)"
  },
  {
    "label": "UnregisterSharedShaderCodeRequestDelegate_Handle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSharedShaderCodeRequestDelegate_Handle(FDelegateHandle Handle)"
  },
  {
    "label": "DontOpenPluginShaderLibraryOnMount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DontOpenPluginShaderLibraryOnMount(const FString& PluginName)"
  },
  {
    "label": "OpenPluginShaderLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenPluginShaderLibrary(IPlugin& Plugin, bool bMonolithicOnly = true)"
  },
  {
    "label": "InitForCooking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitForCooking(bool bNativeFormat, ICookArtifactReader* CookArtifactReader)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "CleanDirectories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanDirectories(TArray<FName> const& ShaderFormats)"
  },
  {
    "label": "BeginCookingLibrary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginCookingLibrary(FString const& Name)"
  },
  {
    "label": "EndCookingLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCookingLibrary(FString const& Name)"
  },
  {
    "label": "IsShaderLibraryEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShaderLibraryEnabled()"
  },
  {
    "label": "CookShaderFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CookShaderFormats(TArray<FShaderFormatDescriptor> const& ShaderFormats)"
  },
  {
    "label": "AddShaderCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddShaderCode(EShaderPlatform ShaderPlatform, const FShaderMapResourceCode* Code, const FShaderMapAssetPaths& AssociatedAssets)"
  },
  {
    "label": "CopyToCompactBinaryAndClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyToCompactBinaryAndClear(FCbWriter& Writer, bool& bOutHasData, bool& bOutRanOutOfRoom, int64 MaxShaderSize)"
  },
  {
    "label": "AppendFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendFromCompactBinary(FCbFieldView Field)"
  },
  {
    "label": "NeedsShaderStableKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsShaderStableKeys(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "AddShaderStableKeyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddShaderStableKeyValue(EShaderPlatform ShaderPlatform, FStableShaderKeyAndValue& StableKeyValue)"
  },
  {
    "label": "FinishPopulateShaderLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishPopulateShaderLibrary(const ITargetPlatform* TargetPlatform, FString const& Name, FString const& SandboxDestinationPath,\n\t\tFString const& SandboxMetadataPath)"
  },
  {
    "label": "MergeShaderCodeArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MergeShaderCodeArchive(const TArray<FString>& CookedMetadataDirs, const FString& OutputDir, TArray<FString>& OutWrittenFiles)"
  },
  {
    "label": "SaveShaderLibraryWithoutChunking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveShaderLibraryWithoutChunking(const ITargetPlatform* TargetPlatform, FString const& Name, FString const& SandboxDestinationPath,\n\t\tFString const& SandboxMetadataPath, TArray<FString>& PlatformSCLCSVPaths, FString& OutErrorMessage, bool& bOutHasData)"
  },
  {
    "label": "SaveShaderLibraryChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveShaderLibraryChunk(int32 ChunkId, const TSet<FName>& InPackagesInChunk, const ITargetPlatform* TargetPlatform,\n\t\tconst FString& SandboxDestinationPath, const FString& SandboxMetadataPath, TArray<FString>& OutChunkFilenames, bool& bOutHasData)"
  },
  {
    "label": "DumpShaderCodeStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpShaderCodeStats()"
  },
  {
    "label": "CreatePatchLibrary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreatePatchLibrary(TArray<FString> const& OldMetaDataDirs, FString const& NewMetaDataDir, FString const& OutDir, bool bNativeFormat, bool bNeedsDeterministicOrder)"
  }
]