[
  {
    "label": "FShaderCompilerInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerInput"
  },
  {
    "label": "FShaderCompilerOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerOutput"
  },
  {
    "label": "FCalledVMFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCalledVMFunction"
  },
  {
    "label": "FVectorVMCompilationOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorVMCompilationOutput"
  },
  {
    "label": "FCalledVMFunction()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" Serialization / Archive . h \" # include \" VectorVM . h \" # include \" VectorVMCommon . h \" struct FShaderCompilerInput ; struct FShaderCompilerOutput ; struct FCalledVMFunction { FString Name ; TArray<bool> InputParamLocations ; int32 NumOutputs ;)",
    "insertText": "FCalledVMFunction() :NumOutputs(0)"
  },
  {
    "label": "FVectorVMCompilationOutput()",
    "kind": "Method",
    "detail": "Function (} } ; struct FVectorVMCompilationOutput {)",
    "insertText": "FVectorVMCompilationOutput(): MaxTempRegistersUsed(0), NumOps(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TArray<uint8> ByteCode ; int32 MaxTempRegistersUsed ; TArray<int32> InternalConstantOffsets ; TArray<uint8> InternalConstantData ; TArray<EVectorVMBaseTypes> InternalConstantTypes ; TArray<FCalledVMFunction> CalledVMFunctionTable ; FString AssemblyAsString ; uint32 NumOps ; FString Errors ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FCalledVMFunction& Function)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Function . Name ; Ar<<Function . InputParamLocations ; Ar<<Function . NumOutputs ; return Ar ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FVectorVMCompilationOutput& Output)"
  }
]