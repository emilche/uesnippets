[
  {
    "label": "TFieldArrayView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFieldArrayView"
  },
  {
    "label": "TFieldArrayView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / Array . h \" template<InElementType> class TFieldArrayView { public : using ElementType = InElementType ; using SizeType = int32 ;)",
    "insertText": "TFieldArrayView(TArray<ElementType>& InElementArray, const SizeType InArrayOffset, const SizeType InArrayNum) : ElementArray(InElementArray) , ArrayOffset(InArrayOffset) , ArrayNum(InArrayNum)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} ElementType*)",
    "insertText": "GetData()"
  },
  {
    "label": "GetTypeSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetTypeSize()"
  },
  {
    "label": "GetTypeAlignment()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetTypeAlignment()"
  },
  {
    "label": "CheckInvariants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckInvariants()"
  },
  {
    "label": "RangeCheck()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RangeCheck(SizeType Index)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(SizeType Index)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "RangeCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RangeCheck(Index)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} ElementType*)",
    "insertText": "end()"
  }
]