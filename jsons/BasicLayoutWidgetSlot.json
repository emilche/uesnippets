[
  {
    "label": "TAlignmentWidgetSlotMixin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAlignmentWidgetSlotMixin"
  },
  {
    "label": "FSlotArgumentsMixin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlotArgumentsMixin"
  },
  {
    "label": "TAlignmentSingleWidgetSlotMixin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAlignmentSingleWidgetSlotMixin"
  },
  {
    "label": "TPaddingWidgetSlotMixin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPaddingWidgetSlotMixin"
  },
  {
    "label": "TPaddingSingleWidgetSlotMixin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPaddingSingleWidgetSlotMixin"
  },
  {
    "label": "TBasicLayoutWidgetSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBasicLayoutWidgetSlot"
  },
  {
    "label": "FBasicLayoutWidgetSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBasicLayoutWidgetSlot"
  },
  {
    "label": "TAlignmentWidgetSlotMixin()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / WidgetSlotWithAttributeSupport . h \" # include \" Layout / FlowDirection . h \" # include \" Layout / Margin . h \" # include \" Misc / Optional . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include<type_traits> template<MixedIntoType> class TAlignmentWidgetSlotMixin { public :)",
    "insertText": "TAlignmentWidgetSlotMixin() : HAlignment(HAlign_Fill) , VAlignment(VAlign_Fill)"
  },
  {
    "label": "TAlignmentWidgetSlotMixin()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TAlignmentWidgetSlotMixin(const EHorizontalAlignment InHAlign, const EVerticalAlignment InVAlign) : HAlignment(InHAlign) , VAlignment(InVAlign)"
  },
  {
    "label": "HAlign()",
    "kind": "Method",
    "detail": "Function (} public : struct FSlotArgumentsMixin { private : TAlignmentWidgetSlotMixin ; public : MixedIntoType::FSlotArguments&)",
    "insertText": "HAlign(EHorizontalAlignment InHAlignment)"
  },
  {
    "label": "FSlotArguments()",
    "kind": "Method",
    "detail": "Function (_HAlignment = InHAlignment ; return static_cast<)",
    "insertText": "FSlotArguments(*this)"
  },
  {
    "label": "VAlign()",
    "kind": "Method",
    "detail": "Function (} MixedIntoType::FSlotArguments&)",
    "insertText": "VAlign(EVerticalAlignment InVAlignment)"
  },
  {
    "label": "ConstructMixin()",
    "kind": "Method",
    "detail": "Function (} private : TOptional<EHorizontalAlignment> _HAlignment ; TOptional<EVerticalAlignment> _VAlignment ; } ; protected : void)",
    "insertText": "ConstructMixin(const FChildren& SlotOwner, FSlotArgumentsMixin&& InArgs)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (HAlignment = InArgs . _HAlignment .)",
    "insertText": "Get(HAlignment)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (VAlignment = InArgs . _VAlignment .)",
    "insertText": "Get(VAlignment)"
  },
  {
    "label": "SetHorizontalAlignment()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetHorizontalAlignment(EHorizontalAlignment Alignment)"
  },
  {
    "label": "MixedIntoType()",
    "kind": "Method",
    "detail": "Function (HAlignment = Alignment ; static_cast<)",
    "insertText": "MixedIntoType(this)->Invalidate(EInvalidateWidgetReason::Layout)"
  },
  {
    "label": "GetHorizontalAlignment()",
    "kind": "Method",
    "detail": "Function (} } EHorizontalAlignment)",
    "insertText": "GetHorizontalAlignment()"
  },
  {
    "label": "GetVerticalAlignment()",
    "kind": "Method",
    "detail": "Function (} } EVerticalAlignment)",
    "insertText": "GetVerticalAlignment()"
  },
  {
    "label": "TAlignmentSingleWidgetSlotMixin()",
    "kind": "Method",
    "detail": "Function (} template<WidgetType,V = std::enable_if<std::is_base_of<SWidget,WidgetType>::value>::type>)",
    "insertText": "TAlignmentSingleWidgetSlotMixin(WidgetType& InParent, const EHorizontalAlignment InHAlign, const EVerticalAlignment InVAlign) : HAlignment(InHAlign) , VAlignment(InVAlign)"
  },
  {
    "label": "ConstructMixin()",
    "kind": "Method",
    "detail": "Function (} private : TOptional<EHorizontalAlignment> _HAlignment ; TOptional<EVerticalAlignment> _VAlignment ; } ; protected : void)",
    "insertText": "ConstructMixin(FSlotArgumentsMixin&& InArgs)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (HAlignment = InHAlignment ;)",
    "insertText": "return(static_cast<MixedIntoType*>(this))"
  },
  {
    "label": "TPaddingWidgetSlotMixin()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPaddingWidgetSlotMixin(const FMargin& Margin) : SlotPaddingAttribute(*static_cast<MixedIntoType*>(this), Margin)"
  },
  {
    "label": "Padding()",
    "kind": "Method",
    "detail": "Function (} public : struct FSlotArgumentsMixin { private : TPaddingWidgetSlotMixin ; TAttribute<FMargin> _Padding ; public : MixedIntoType::FSlotArguments&)",
    "insertText": "Padding(TAttribute<FMargin> InPadding)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (_Padding =)",
    "insertText": "MoveTemp(InPadding)"
  },
  {
    "label": "Padding()",
    "kind": "Method",
    "detail": "Function (} MixedIntoType::FSlotArguments&)",
    "insertText": "Padding(float Uniform)"
  },
  {
    "label": "FMargin()",
    "kind": "Method",
    "detail": "Function (_Padding =)",
    "insertText": "FMargin(Uniform)"
  },
  {
    "label": "Padding()",
    "kind": "Method",
    "detail": "Function (} MixedIntoType::FSlotArguments&)",
    "insertText": "Padding(float Horizontal, float Vertical)"
  },
  {
    "label": "FMargin()",
    "kind": "Method",
    "detail": "Function (_Padding =)",
    "insertText": "FMargin(Horizontal, Vertical)"
  },
  {
    "label": "Padding()",
    "kind": "Method",
    "detail": "Function (} MixedIntoType::FSlotArguments&)",
    "insertText": "Padding(float Left, float Top, float Right, float Bottom)"
  },
  {
    "label": "FMargin()",
    "kind": "Method",
    "detail": "Function (_Padding =)",
    "insertText": "FMargin(Left, Top, Right, Bottom)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (SlotPaddingAttribute .)",
    "insertText": "Assign(*static_cast<MixedIntoType*>(this), MoveTemp(InArgs._Padding))"
  },
  {
    "label": "RegisterAttributesMixin()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RegisterAttributesMixin(FSlateWidgetSlotAttributeInitializer& AttributeInitializer)"
  },
  {
    "label": "SLATE_ADD_SLOT_ATTRIBUTE_DEFINITION_WITH_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ADD_SLOT_ATTRIBUTE_DEFINITION_WITH_NAME(MixedIntoType, AttributeInitializer, \"Slot.Padding\", SlotPaddingAttribute, EInvalidateWidgetReason::Layout)"
  },
  {
    "label": "SetPadding()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetPadding(TAttribute<FMargin> InPadding)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (SlotPaddingAttribute .)",
    "insertText": "Assign(static_cast<MixedIntoType&>(*this), MoveTemp(InPadding))"
  },
  {
    "label": "GetPadding()",
    "kind": "Method",
    "detail": "Function (} FMargin)",
    "insertText": "GetPadding()"
  },
  {
    "label": "TPaddingSingleWidgetSlotMixin()",
    "kind": "Method",
    "detail": "Function (} private : using SlotPaddingCompareType = TSlateAttributeComparePredicate<> ; using SlotPaddingType =::SlateAttributePrivate::TSlateContainedAttribute<FMargin,::SlateAttributePrivate::FSlateAttributeNoInvalidationReason,SlotPaddingCompareType> ; SlotPaddingType SlotPaddingAttribute ; } ; template<MixedIntoType,EInvalidateWidgetReason InPaddingInvalidationReason = EInvalidateWidgetReason::Layout> class TPaddingSingleWidgetSlotMixin { public : template<WidgetType,V = std::enable_if<std::is_base_of<SWidget,WidgetType>::value>::type>)",
    "insertText": "TPaddingSingleWidgetSlotMixin(WidgetType& InParent) : SlotPaddingAttribute(InParent)"
  },
  {
    "label": "TPaddingSingleWidgetSlotMixin()",
    "kind": "Method",
    "detail": "Function (} template<WidgetType,V = std::enable_if<std::is_base_of<SWidget,WidgetType>::value>::type>)",
    "insertText": "TPaddingSingleWidgetSlotMixin(WidgetType& InParent, const FMargin & Margin) : SlotPaddingAttribute(InParent, Margin)"
  },
  {
    "label": "MixedIntoType()",
    "kind": "Method",
    "detail": "Function (SWidget* OwnerWidget = static_cast<)",
    "insertText": "MixedIntoType(this)->GetOwnerWidget()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (SlotPaddingAttribute .)",
    "insertText": "Assign(*OwnerWidget, MoveTemp(InArgs._Padding))"
  },
  {
    "label": "SetPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPadding(MoveTemp(InPadding))"
  },
  {
    "label": "SetPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPadding(FMargin(Uniform))"
  },
  {
    "label": "SetPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPadding(FMargin(Horizontal, Vertical))"
  },
  {
    "label": "SetPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPadding(FMargin(Left, Top, Right, Bottom))"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (SlotPaddingAttribute .)",
    "insertText": "Assign(*OwnerWidget, MoveTemp(InPadding))"
  },
  {
    "label": "GetSlotPaddingAttribute()",
    "kind": "Method",
    "detail": "Function (} public : using SlotPaddingInvalidationType = std::conditional<InPaddingInvalidationReason = = EInvalidateWidgetReason::None,::SlateAttributePrivate::FSlateAttributeNoInvalidationReason,TSlateAttributeInvalidationReason<InPaddingInvalidationReason>>::type ; using SlotPaddingAttributeType = SlateAttributePrivate::TSlateMemberAttribute<FMargin,SlotPaddingInvalidationType,TSlateAttributeComparePredicate<>> ; using SlotPaddingAttributeRefType = SlateAttributePrivate::TSlateMemberAttributeRef<SlotPaddingAttributeType> ; template<WidgetType,V = std::enable_if<std::is_base_of<SWidget,WidgetType>::value>::type> SlotPaddingAttributeRefType)",
    "insertText": "GetSlotPaddingAttribute()"
  },
  {
    "label": "WidgetType()",
    "kind": "Method",
    "detail": "Function (WidgetType* Widget = static_cast<)",
    "insertText": "WidgetType(static_cast<MixedIntoType*>(this)->GetOwnerWidget())"
  },
  {
    "label": "TBasicLayoutWidgetSlot()",
    "kind": "Method",
    "detail": "Function (} protected : SlotPaddingAttributeType SlotPaddingAttribute ; } ; template<SlotType> class TBasicLayoutWidgetSlot : public TWidgetSlotWithAttributeSupport<SlotType>,public TPaddingWidgetSlotMixin<SlotType>,public TAlignmentWidgetSlotMixin<SlotType> { public :)",
    "insertText": "TBasicLayoutWidgetSlot() : TWidgetSlotWithAttributeSupport<SlotType>() , TPaddingWidgetSlotMixin<SlotType>() , TAlignmentWidgetSlotMixin<SlotType>()"
  },
  {
    "label": "TBasicLayoutWidgetSlot()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBasicLayoutWidgetSlot(FChildren& InOwner) : TWidgetSlotWithAttributeSupport<SlotType>(InOwner) , TPaddingWidgetSlotMixin<SlotType>() , TAlignmentWidgetSlotMixin<SlotType>()"
  },
  {
    "label": "TBasicLayoutWidgetSlot()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBasicLayoutWidgetSlot(const EHorizontalAlignment InHAlign, const EVerticalAlignment InVAlign) : TWidgetSlotWithAttributeSupport<SlotType>() , TPaddingWidgetSlotMixin<SlotType>() , TAlignmentWidgetSlotMixin<SlotType>(InHAlign, InVAlign)"
  },
  {
    "label": "TBasicLayoutWidgetSlot()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBasicLayoutWidgetSlot(FChildren& InOwner, const EHorizontalAlignment InHAlign, const EVerticalAlignment InVAlign) : TWidgetSlotWithAttributeSupport<SlotType>(InOwner) , TPaddingWidgetSlotMixin<SlotType>() , TAlignmentWidgetSlotMixin<SlotType>(InHAlign, InVAlign)"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS_TwoMixins()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "SLATE_SLOT_BEGIN_ARGS_TwoMixins(TBasicLayoutWidgetSlot, TSlotBase<SlotType>, TPaddingWidgetSlotMixin<SlotType>, TAlignmentWidgetSlotMixin<SlotType>) SLATE_SLOT_END_ARGS() void Construct(const FChildren& SlotOwner, FSlotArguments&& InArgs)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (TWidgetSlotWithAttributeSupport<SlotType)",
    "insertText": "Construct(SlotOwner, MoveTemp(InArgs))"
  },
  {
    "label": "ConstructMixin()",
    "kind": "Method",
    "detail": "Function (TPaddingWidgetSlotMixin<SlotType)",
    "insertText": "ConstructMixin(SlotOwner, MoveTemp(InArgs))"
  },
  {
    "label": "RegisterAttributes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterAttributes(FSlateWidgetSlotAttributeInitializer& AttributeInitializer)"
  },
  {
    "label": "RegisterAttributes()",
    "kind": "Method",
    "detail": "Function (TWidgetSlotWithAttributeSupport<SlotType)",
    "insertText": "RegisterAttributes(AttributeInitializer)"
  },
  {
    "label": "RegisterAttributesMixin()",
    "kind": "Method",
    "detail": "Function (TPaddingWidgetSlotMixin<SlotType)",
    "insertText": "RegisterAttributesMixin(AttributeInitializer)"
  }
]