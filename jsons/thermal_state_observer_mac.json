[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_POWER_MONITOR_THERMAL_STATE_OBSERVER_MAC_H_ # define BASE_POWER_MONITOR_THERMAL_STATE_OBSERVER_MAC_H_ # include<dispatch / dispatch . h> # include<objc / objc . h> # include<IOKit / pwr_mgt / IOPMLib . h> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / gtest_prod_util . h \" # include \" base / power_monitor / power_observer . h \" namespace base { class BASE_EXPORT ThermalStateObserverMac { public : using StateUpdateCallback = base::RepeatingCallback<)",
    "insertText": "void(PowerThermalObserver::DeviceThermalState)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using SpeedLimitUpdateCallback = base::RepeatingCallback<)",
    "insertText": "void(int)"
  },
  {
    "label": "ThermalStateObserverMac()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThermalStateObserverMac(StateUpdateCallback state_update_callback, SpeedLimitUpdateCallback speed_limit_update_callback, const char* power_notification_key = kIOPMCPUPowerNotificationKey)"
  },
  {
    "label": "ThermalStateObserverMac()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ThermalStateObserverMac()"
  },
  {
    "label": "GetCurrentThermalState()",
    "kind": "Method",
    "detail": "Function (PowerThermalObserver::DeviceThermalState)",
    "insertText": "GetCurrentThermalState()"
  },
  {
    "label": "GetCurrentSpeedLimit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetCurrentSpeedLimit()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(ThermalStateObserverMacTest, StateChange)"
  }
]