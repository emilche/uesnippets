[
  {
    "label": "FbxCache_internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxCache_internal"
  },
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "EFileFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFileFormat"
  },
  {
    "label": "EMCFileCount",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMCFileCount"
  },
  {
    "label": "EMCDataType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMCDataType"
  },
  {
    "label": "EMCBinaryFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMCBinaryFormat"
  },
  {
    "label": "EMCSamplingType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMCSamplingType"
  },
  {
    "label": "EOpenFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOpenFlag"
  },
  {
    "label": "FBXSDK_OBJECT_DECLARE()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_SCENE_GEOMETRY_CACHE_H_ # define _FBXSDK_SCENE_GEOMETRY_CACHE_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / fbxobject . h> # include<fbxsdk / core / base / fbxstatus . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FbxCache_internal ; class FBXSDK_DLL FbxCache : public FbxObject {)",
    "insertText": "FBXSDK_OBJECT_DECLARE(FbxCache, FbxObject)"
  },
  {
    "label": "SetCacheFileFormat()",
    "kind": "Method",
    "detail": "Function (public : enum EFileFormat { eUnknownFileFormat,eMaxPointCacheV2,eMayaCache,eAlembic } ; void)",
    "insertText": "SetCacheFileFormat(EFileFormat pFileFormat, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetCacheFileFormat()",
    "kind": "Method",
    "detail": "Function (EFileFormat)",
    "insertText": "GetCacheFileFormat()"
  },
  {
    "label": "SetCacheFileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCacheFileName(const char* pRelativeFileName_UTF8, const char* pAbsoluteFileName_UTF8, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetCacheFileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCacheFileName(FbxString& pRelativeFileName_UTF8, FbxString& pAbsoluteFileName_UTF8)"
  },
  {
    "label": "OpenFileForRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenFileForRead(FbxStatus* pStatus=NULL)"
  },
  {
    "label": "IsOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpen(FbxStatus* pStatus=NULL)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(float** pBuffer, unsigned int& pBufferLength, const FbxTime& pTime, unsigned int pChannel=0)"
  },
  {
    "label": "CloseFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseFile(FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetCacheTimePerFrame()",
    "kind": "Method",
    "detail": "Function (FbxTime)",
    "insertText": "GetCacheTimePerFrame(FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetChannelCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetChannelCount(FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetChannelName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChannelName(int pChannelIndex, FbxString& pChannelName, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "OpenFileForWrite()",
    "kind": "Method",
    "detail": "Function (enum EMCFileCount { eMCOneFile,eMCOneFilePerFrame } ; enum EMCDataType { eUnknownData,eDouble,eDoubleArray,eDoubleVectorArray,eInt32Array,eFloatArray,eFloatVectorArray } ; enum EMCBinaryFormat { eMCC,eMCX } ; enum EMCSamplingType { eSamplingRegular,eSamplingIrregular } ; bool)",
    "insertText": "OpenFileForWrite(EMCFileCount pFileCount, double pSamplingFrameRate, const char* pChannelName, EMCBinaryFormat pBinaryFormat, EMCDataType pMCDataType=eDoubleVectorArray, const char* pInterpretation=\"Points\", FbxStatus* pStatus=NULL)"
  },
  {
    "label": "AddChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddChannel(const char* pChannelName, EMCDataType pMCDataType, const char* pInterpretation, unsigned int& pChannelIndex, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetChannelDataType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChannelDataType(int pChannelIndex, EMCDataType& pChannelType, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetChannelIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetChannelIndex(const char* pChannelName, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(int pChannelIndex, FbxTime& pTime, double* pBuffer, unsigned int pPointCount, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(int pChannelIndex, FbxTime& pTime, float* pBuffer, unsigned int pPointCount, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(int pChannelIndex, FbxTime& pTime, int* pBuffer, unsigned int pPointCount, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "BeginWriteAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginWriteAt(FbxTime& pTime, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(int pChannelIndex, FbxTime& pTime, double* pBuffer, unsigned int pPointCount, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(int pChannelIndex, FbxTime& pTime, float* pBuffer, unsigned int pPointCount, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(int pChannelIndex, FbxTime& pTime, int* pBuffer, unsigned int pPointCount, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "EndWriteAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndWriteAt(FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetAnimationRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAnimationRange(int pChannelIndex, FbxTime &pTimeStart, FbxTime &pTimeEnd, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetCacheType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCacheType(EMCFileCount& pFileCount, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetChannelInterpretation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChannelInterpretation(int pChannelIndex, FbxString& pInterpretation, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetChannelSamplingType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChannelSamplingType(int pChannelIndex, EMCSamplingType& pSamplingType, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetChannelSamplingRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChannelSamplingRate(int pChannelIndex, FbxTime& pSamplingRate, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetChannelSampleCount()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChannelSampleCount(int pChannelIndex, unsigned int& pSampleCount, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetChannelPointCount()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChannelPointCount(int pChannelIndex, FbxTime pTime, unsigned int& pPointCount, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetCacheDataFileCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetCacheDataFileCount(FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetCacheDataFileName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCacheDataFileName(int pIndex, FbxString& pRelativeFileName, FbxString& pAbsoluteFileName, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "EnableMultiChannelFetching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableMultiChannelFetching(bool pMultiChannelFetching, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetNextTimeWithData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNextTimeWithData(FbxTime pCurTime, FbxTime& pNextTime, int pChannelIndex = -1, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetDataCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetDataCount(int pChannelIndex, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetDataTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDataTime(int pChannelIndex, unsigned int pDataIndex, FbxTime& pTime, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "OpenFileForWrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenFileForWrite(double pFrameStartOffset, double pSamplingFrameRate, unsigned int pSampleCount, unsigned int pPointCount, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetSampleCount()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "GetSampleCount(FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetPointCount()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "GetPointCount(FbxStatus* pStatus=NULL)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(unsigned int pFrameIndex, double* pBuffer, unsigned int pPointCount, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(unsigned int pFrameIndex, double* pBuffer, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "ConvertFromPC2ToMC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertFromPC2ToMC(EMCFileCount pFileCount, double pSamplingFrameRate, EMCBinaryFormat pBinaryFormat, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "ConvertFromMCToPC2()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertFromMCToPC2(double pSamplingFrameRate, unsigned int pChannelIndex, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "OpenFile()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS enum EOpenFlag { eReadOnly,eWriteOnly } ; protected : bool)",
    "insertText": "OpenFile(EOpenFlag pFlag, EMCFileCount pFileCount, double pSamplingFrameRate, const char* pChannelName, const char* pInterpretation, unsigned int pSampleCount, unsigned int pPointCount, double pFrameStartOffset, FbxStatus* pStatus, EMCDataType pMCDataType = eDoubleVectorArray, EMCBinaryFormat pBinaryFormat = eMCX)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FbxObject* pFrom)"
  },
  {
    "label": "ConstructProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructProperties(bool pForceSet)"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destruct(bool pRecursive)"
  },
  {
    "label": "AllocateReadBuffer()",
    "kind": "Method",
    "detail": "Function (FbxCache_internal* mData ; private : bool)",
    "insertText": "AllocateReadBuffer(unsigned int pTypeSize, unsigned int pTypeLength, unsigned int pLength, bool pAllocateConvertBuffer)"
  },
  {
    "label": "ReadMayaCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadMayaCache(float** pBuffer, unsigned int& pBufferLength, const FbxTime& pTime, unsigned int pChannel)"
  },
  {
    "label": "ReadMaxCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadMaxCache(float** pBuffer, unsigned int& pBufferLength, const FbxTime& pTime)"
  },
  {
    "label": "ReadAlembicCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadAlembicCache(float** pBuffer, unsigned int& pBufferLength, const FbxTime& pTime, unsigned int pChannel)"
  },
  {
    "label": "FbxTypeOf()",
    "kind": "Method",
    "detail": "Function (FbxPropertyT<FbxString> CacheFile ; FbxPropertyT<FbxString> CacheFileAbsolutePath ; FbxPropertyT<FbxEnum> CacheFileType ; void* mReadBuffer ; unsigned int mReadBufferLength ; unsigned int mReadBufferSize ; unsigned int mReadTypeSize ; unsigned int mReadTypeLength ; unsigned int mReadLength ; void* mConvertBuffer ; # endif } ; EFbxType)",
    "insertText": "FbxTypeOf(const FbxCache::EFileFormat&)"
  }
]