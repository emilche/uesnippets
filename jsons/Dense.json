[
  {
    "label": "MemoryLayout",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MemoryLayout"
  },
  {
    "label": "DenseBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseBase"
  },
  {
    "label": "Dense",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Dense"
  },
  {
    "label": "CopyToDense",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CopyToDense"
  },
  {
    "label": "CopyFromDense",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CopyFromDense"
  },
  {
    "label": "Block",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Block"
  },
  {
    "label": "copyToDense()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_DENSE_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_DENSE_HAS_BEEN_INCLUDED # include<openvdb / Types . h> # include<openvdb / Grid . h> # include<openvdb / tree / ValueAccessor . h> # include<openvdb / Exceptions . h> # include<openvdb / util / Formats . h> # include \" Prune . h \" # include<tbb / parallel_for . h> # include<iostream> # include<memory> # include<string> # include<utility> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<DenseT,GridOrTreeT> void)",
    "insertText": "copyToDense(const GridOrTreeT& sparse, DenseT& dense, bool serial = false)"
  },
  {
    "label": "copyFromDense()",
    "kind": "Method",
    "detail": "Function (template<DenseT,GridOrTreeT> void)",
    "insertText": "copyFromDense(const DenseT& dense, GridOrTreeT& sparse, const typename GridOrTreeT::ValueType& tolerance, bool serial = false)"
  },
  {
    "label": "coordToOffset()",
    "kind": "Method",
    "detail": "Function (enum MemoryLayout { LayoutXYZ,LayoutZYX } ; template<ValueT,MemoryLayout Layout> class DenseBase ; template<ValueT> class DenseBase<ValueT,LayoutZYX> { public : size_t)",
    "insertText": "coordToOffset(size_t i, size_t j, size_t k)"
  },
  {
    "label": "Coord()",
    "kind": "Method",
    "detail": "Function (const size_t x = n / mX ; n - = mX* x ; const size_t y = n / mY ; return)",
    "insertText": "Coord(Coord::ValueType(x), Coord::ValueType(y), Coord::ValueType(n - mY*y))"
  },
  {
    "label": "xStride()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "xStride()"
  },
  {
    "label": "Coord()",
    "kind": "Method",
    "detail": "Function (const size_t z = n / mZ ; n - = mZ* z ; const size_t y = n / mY ; return)",
    "insertText": "Coord(Coord::ValueType(n - mY*y), Coord::ValueType(y), Coord::ValueType(z))"
  },
  {
    "label": "Dense()",
    "kind": "Method",
    "detail": "Function (} const CoordBBox mBBox ; const size_t mY,mZ ; } ; template<ValueT,MemoryLayout Layout = LayoutZYX> class Dense : public DenseBase<ValueT,Layout> { public : using ValueType = ValueT ; using BaseT = DenseBase<ValueT,Layout> ; using Ptr = SharedPtr<Dense> ; using ConstPtr = SharedPtr<const Dense> ;)",
    "insertText": "Dense(const CoordBBox& bbox) : BaseT(bbox)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "init()"
  },
  {
    "label": "Dense()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Dense(const CoordBBox& bbox, const ValueT& value) : BaseT(bbox)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "fill(value)"
  },
  {
    "label": "Dense()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Dense(const CoordBBox& bbox, ValueT* data) : BaseT(bbox), mData(data)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"can't construct a dense grid with an empty bounding box\")"
  },
  {
    "label": "Dense()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "Dense(const Coord& dim, const Coord& min = Coord(0)) : BaseT(CoordBBox(min, min+dim.offsetBy(-1)))"
  },
  {
    "label": "memoryLayout()",
    "kind": "Method",
    "detail": "Function (} MemoryLayout)",
    "insertText": "memoryLayout()"
  },
  {
    "label": "valueCount()",
    "kind": "Method",
    "detail": "Function (} Index64)",
    "insertText": "valueCount()"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setValue(size_t offset, const ValueT& value)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mData [ offset ] = value ; } const ValueT&)",
    "insertText": "getValue(size_t offset)"
  },
  {
    "label": "coordToOffset()",
    "kind": "Method",
    "detail": "Function (mData [)",
    "insertText": "coordToOffset(i,j,k)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} const ValueT&)",
    "insertText": "getValue(size_t i, size_t j, size_t k)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setValue(const Coord& xyz, const ValueT& value)"
  },
  {
    "label": "coordToOffset()",
    "kind": "Method",
    "detail": "Function (mData [ this ->)",
    "insertText": "coordToOffset(xyz)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} const ValueT&)",
    "insertText": "getValue(const Coord& xyz)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fill(const ValueT& value)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (ValueT* a = mData ;)",
    "insertText": "while(size--)"
  },
  {
    "label": "coordToOffset()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "coordToOffset(const Coord& xyz)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(BaseT::mBBox.isInside(xyz))"
  },
  {
    "label": "offsetToCoord()",
    "kind": "Method",
    "detail": "Function (} Coord)",
    "insertText": "offsetToCoord(size_t n)"
  },
  {
    "label": "memUsage()",
    "kind": "Method",
    "detail": "Function (} Index64)",
    "insertText": "memUsage()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(const std::string& name = \"\", std::ostream& os = std::cout)"
  },
  {
    "label": "dim()",
    "kind": "Method",
    "detail": "Function (const Coord dim = BaseT::mBBox .)",
    "insertText": "dim()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (os<<\" Dense Grid \" ;)",
    "insertText": "if(!name.empty())"
  },
  {
    "label": "printBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printBytes(os, this->memUsage(), \":\\n Memory footprint: \")"
  },
  {
    "label": "formattedInt()",
    "kind": "Method",
    "detail": "Function (os<<\" Dimensions of grid : \"<<dim [ 0 ]<<\" x \"<<dim [ 1 ]<<\" x \"<<dim [ 2 ]<<\" \\ n \" ; os<<\" Number of voxels : \"<<)",
    "insertText": "formattedInt(this->valueCount())"
  }
]