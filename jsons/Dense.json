[
  {
    "label": "MemoryLayout",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MemoryLayout"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "DenseBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseBase"
  },
  {
    "label": "DenseBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseBase"
  },
  {
    "label": "DenseBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseBase"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "Dense",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Dense"
  },
  {
    "label": "CopyToDense",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CopyToDense"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "allocates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "allocates"
  },
  {
    "label": "CopyFromDense",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CopyFromDense"
  },
  {
    "label": "Block",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Block"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "copyToDense()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyToDense(\n    const GridOrTreeT& sparse,\n    DenseT& dense,\n    bool serial = false)"
  },
  {
    "label": "copyFromDense()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyFromDense(\n    const DenseT& dense,\n    GridOrTreeT& sparse,\n    const typename GridOrTreeT::ValueType& tolerance,\n    bool serial = false)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeT>)",
    "insertText": "acc(*mTree)"
  },
  {
    "label": "LeafT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "LeafT()"
  },
  {
    "label": "LeafT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "LeafT()"
  }
]