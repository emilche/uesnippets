[
  {
    "label": "FAssetPackageData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetPackageData"
  },
  {
    "label": "IAssetRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistry"
  },
  {
    "label": "ICookedPackageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookedPackageWriter"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookOnTheFlyServer"
  },
  {
    "label": "FRequestQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestQueue"
  },
  {
    "label": "FDiscoveryQueueElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiscoveryQueueElement"
  },
  {
    "label": "FFilePlatformRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilePlatformRequest"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "FPackageDatas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageDatas"
  },
  {
    "label": "FPackagePlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackagePlatformData"
  },
  {
    "label": "FPackageTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageTracker"
  },
  {
    "label": "FRequestCluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestCluster"
  },
  {
    "label": "FGraphSearch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphSearch"
  },
  {
    "label": "FVisitStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisitStatus"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FQueryPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryPlatformData"
  },
  {
    "label": "FVertexData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexData"
  },
  {
    "label": "FQueryVertexBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryVertexBatch"
  },
  {
    "label": "FPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformData"
  },
  {
    "label": "FFetchPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFetchPlatformData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGraphSearch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphSearch"
  },
  {
    "label": "FScratchPlatformDependencyBits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScratchPlatformDependencyBits"
  },
  {
    "label": "FExploreEdgesContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExploreEdgesContext"
  },
  {
    "label": "FQueryVertexBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryVertexBatch"
  },
  {
    "label": "FVertexData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexData"
  },
  {
    "label": "FProcessingFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcessingFlags"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has"
  },
  {
    "label": "FRequestCluster()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FRequestCluster(UCookOnTheFlyServer& COTFS, TArray<FFilePlatformRequest>&& InRequests)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(const FCookerTimer& CookerTimer, bool& bOutComplete)"
  },
  {
    "label": "RemovePackageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePackageData(FPackageData* PackageData)"
  },
  {
    "label": "OnNewReachablePlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewReachablePlatforms(FPackageData* PackageData)"
  },
  {
    "label": "OnPlatformAddedToSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlatformAddedToSession(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "OnRemoveSessionPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveSessionPlatform(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "RemapTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapTargetPlatforms(TMap<ITargetPlatform*, ITargetPlatform*>& Remap)"
  },
  {
    "label": "ClearAndDetachOwnedPackageDatas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAndDetachOwnedPackageDatas(TArray<FPackageData*>& OutRequestsToLoad,\n\t\tTArray<TPair<FPackageData*, ESuppressCookReason>>& OutRequestsToDemote,\n\t\tTMap<FPackageData*, TArray<FPackageData*>>& OutRequestGraph)"
  },
  {
    "label": "GetLocalizationReferences()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FName>)",
    "insertText": "GetLocalizationReferences(FName PackageName, UCookOnTheFlyServer& InCOTFS)"
  },
  {
    "label": "GetAssetManagerReferences()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetAssetManagerReferences(FName PackageName)"
  },
  {
    "label": "IsRequestCookable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IsRequestCookable(const ITargetPlatform* TargetPlatform, FPackageData& PackageData,\n\t\tUCookOnTheFlyServer& COTFS, ESuppressCookReason& OutReason, bool& bOutCookable, bool& bOutExplorable)"
  },
  {
    "label": "GetAsyncQueryStatus()",
    "kind": "Method",
    "detail": "Function (EAsyncQueryStatus)",
    "insertText": "GetAsyncQueryStatus()"
  },
  {
    "label": "CompareExchangeAsyncQueryStatus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareExchangeAsyncQueryStatus(EAsyncQueryStatus& Expected, EAsyncQueryStatus Desired)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send()"
  },
  {
    "label": "RecordCacheResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordCacheResults(FName PackageName, int32 PlatformIndex,\n\t\t\tUE::TargetDomain::FCookAttachments&& CookAttachments)"
  },
  {
    "label": "FGraphSearch()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FGraphSearch(FRequestCluster& InCluster, ETraversalTier TraversalTier)"
  },
  {
    "label": "VisitWithoutDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitWithoutDependencies()"
  },
  {
    "label": "StartSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSearch()"
  },
  {
    "label": "OnNewReachablePlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewReachablePlatforms(FPackageData* PackageData)"
  },
  {
    "label": "TickExploration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickExploration(bool& bOutDone)"
  },
  {
    "label": "WaitForAsyncQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAsyncQueue(double WaitTimeSeconds)"
  },
  {
    "label": "FExploreEdgesContext()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FExploreEdgesContext(FRequestCluster& InCluster, FGraphSearch& InGraphSearch)"
  },
  {
    "label": "Explore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Explore(FVertexData& InVertex)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FVertexData& InVertex)"
  },
  {
    "label": "CalculatePlatformsToProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculatePlatformsToProcess()"
  },
  {
    "label": "TryCalculateIterativelyUnmodified()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryCalculateIterativelyUnmodified()"
  },
  {
    "label": "CalculatePackageDataDependenciesPlatformAgnostic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculatePackageDataDependenciesPlatformAgnostic()"
  },
  {
    "label": "CalculateDependenciesAndIterativelySkippable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateDependenciesAndIterativelySkippable()"
  },
  {
    "label": "QueueVisitsOfDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueVisitsOfDependencies()"
  },
  {
    "label": "MarkExploreComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkExploreComplete()"
  },
  {
    "label": "AddPlatformDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPlatformDependency(FName DependencyName, int32 PlatformIndex, EInstigator InstigatorType)"
  },
  {
    "label": "AddPlatformDependencyRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPlatformDependencyRange(TConstArrayView<FName> Range, int32 PlatformIndex, EInstigator InstigatorType)"
  },
  {
    "label": "ProcessPlatformAttachments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPlatformAttachments(int32 PlatformIndex, const ITargetPlatform* TargetPlatform,\n\t\t\t\tFFetchPlatformData& FetchPlatformData, FPackagePlatformData& PackagePlatformData,\n\t\t\t\tUE::TargetDomain::FCookAttachments& PlatformAttachments, bool bExploreDependencies)"
  },
  {
    "label": "SetIsIterativelyUnmodified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsIterativelyUnmodified(int32 PlatformIndex, bool bIterativelyUnmodified,\n\t\t\t\tFPackagePlatformData& PackagePlatformData)"
  },
  {
    "label": "UpdateDisplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDisplay()"
  },
  {
    "label": "QueueEdgesFetch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueEdgesFetch(FVertexData& Vertex, TConstArrayView<int32> PlatformIndexes)"
  },
  {
    "label": "VisitVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitVertex(FVertexData& VertexData)"
  },
  {
    "label": "VisitVertexForPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitVertexForPlatform(FVertexData& VertexData, const ITargetPlatform* Platform,\n\t\t\tFPackagePlatformData& PlatformData, ESuppressCookReason& AccumulatedSuppressCookReason)"
  },
  {
    "label": "ResolveTransitiveBuildDependencyCycle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveTransitiveBuildDependencyCycle()"
  },
  {
    "label": "AddToVisitVertexQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToVisitVertexQueue(FVertexData& Vertex)"
  },
  {
    "label": "FreeBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeBatch(FQueryVertexBatch* Batch)"
  },
  {
    "label": "CreateAvailableBatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAvailableBatches(bool bAllowIncompleteBatch)"
  },
  {
    "label": "OnBatchCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBatchCompleted(FQueryVertexBatch* Batch)"
  },
  {
    "label": "KickVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KickVertex(FVertexData* Vertex)"
  },
  {
    "label": "GetPlatformDataArray()",
    "kind": "Method",
    "detail": "Function (TArrayView<FQueryPlatformData>)",
    "insertText": "GetPlatformDataArray(FVertexData& Vertex)"
  },
  {
    "label": "SetValid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValid()"
  },
  {
    "label": "SetSuppressReason()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSuppressReason(ESuppressCookReason Value)"
  },
  {
    "label": "SetWasMarkedCooked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWasMarkedCooked(bool bValue)"
  },
  {
    "label": "FRequestCluster()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FRequestCluster(UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "ReserveInitialRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveInitialRequests(int32 RequestNum)"
  },
  {
    "label": "PullIntoCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PullIntoCluster(FPackageData& PackageData)"
  },
  {
    "label": "FetchPackageNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FetchPackageNames(const FCookerTimer& CookerTimer, bool& bOutComplete)"
  },
  {
    "label": "PumpExploration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpExploration(const FCookerTimer& CookerTimer, bool& bOutComplete)"
  },
  {
    "label": "StartAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAsync(const FCookerTimer& CookerTimer, bool& bOutComplete)"
  },
  {
    "label": "SetPackageDataSuppressReason()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackageDataSuppressReason(FPackageData& PackageData, ESuppressCookReason Reason,\n\t\tbool* bOutExisted = nullptr)"
  },
  {
    "label": "SetPackageDataWasMarkedCooked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackageDataWasMarkedCooked(FPackageData& PackageData, bool bValue, bool* bOutExisted = nullptr)"
  },
  {
    "label": "IsRequestCookable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IsRequestCookable(const ITargetPlatform* TargetPlatform, FName PackageName, FPackageData& PackageData,\n\t\tESuppressCookReason& OutReason, bool& bOutCookable, bool& bOutExplorable)"
  },
  {
    "label": "IsRequestCookable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IsRequestCookable(const ITargetPlatform* TargetPlatform, FName PackageName, FPackageData& PackageData,\n\t\tUCookOnTheFlyServer& InCOTFS, FStringView InDLCPath, ESuppressCookReason& OutReason, bool& bOutCookable,\n\t\tbool& bOutExplorable)"
  }
]