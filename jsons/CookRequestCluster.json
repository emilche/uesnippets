[
  {
    "label": "FAssetPackageData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetPackageData"
  },
  {
    "label": "IAssetRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistry"
  },
  {
    "label": "ICookedPackageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookedPackageWriter"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookOnTheFlyServer"
  },
  {
    "label": "FRequestQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestQueue"
  },
  {
    "label": "FDiscoveryQueueElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiscoveryQueueElement"
  },
  {
    "label": "FFilePlatformRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilePlatformRequest"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "FPackageDatas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageDatas"
  },
  {
    "label": "FPackagePlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackagePlatformData"
  },
  {
    "label": "FPackageTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageTracker"
  },
  {
    "label": "FRequestCluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestCluster"
  },
  {
    "label": "FGraphSearch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphSearch"
  },
  {
    "label": "FVisitStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisitStatus"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FQueryPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryPlatformData"
  },
  {
    "label": "FVertexData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexData"
  },
  {
    "label": "FQueryVertexBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryVertexBatch"
  },
  {
    "label": "FPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformData"
  },
  {
    "label": "FFetchPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFetchPlatformData"
  },
  {
    "label": "FScratchPlatformDependencyBits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScratchPlatformDependencyBits"
  },
  {
    "label": "FExploreEdgesContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExploreEdgesContext"
  },
  {
    "label": "FProcessingFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcessingFlags"
  },
  {
    "label": "FRequestCluster()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / BitArray . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / Set . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Event . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / MpscQueue . h \" # include \" Containers / RingBuffer . h \" # include \" Cooker / CookTypes . h \" # include \" Cooker / TypedBlockAllocator . h \" # include \" HAL / CriticalSection . h \" # include \" TargetDomain / TargetDomainUtils . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / ICookInfo . h \" # include \" UObject / NameTypes . h \" # include<atomic> class FAssetPackageData ; class IAssetRegistry ; class ICookedPackageWriter ; class ITargetPlatform ; class UCookOnTheFlyServer ; namespace UE::Cook { class FRequestQueue ; } namespace UE::Cook { struct FDiscoveryQueueElement ; } namespace UE::Cook { struct FFilePlatformRequest ; } namespace UE::Cook { struct FPackageData ; } namespace UE::Cook { struct FPackageDatas ; } namespace UE::Cook { struct FPackagePlatformData ; } namespace UE::Cook { struct FPackageTracker ; } namespace UE::Cook { class FRequestCluster { public :)",
    "insertText": "FRequestCluster(UCookOnTheFlyServer& COTFS, TArray<FFilePlatformRequest>&& InRequests)"
  },
  {
    "label": "FRequestCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRequestCluster(UCookOnTheFlyServer& COTFS, FPackageDataSet&& InRequests)"
  },
  {
    "label": "FRequestCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRequestCluster(UCookOnTheFlyServer& COTFS, TRingBuffer<FDiscoveryQueueElement>& DiscoveryQueue)"
  },
  {
    "label": "FRequestCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRequestCluster(FRequestCluster&&)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(const FCookerTimer& CookerTimer, bool& bOutComplete)"
  },
  {
    "label": "NumPackageDatas()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumPackageDatas()"
  },
  {
    "label": "RemovePackageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePackageData(FPackageData* PackageData)"
  },
  {
    "label": "OnNewReachablePlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewReachablePlatforms(FPackageData* PackageData)"
  },
  {
    "label": "OnPlatformAddedToSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlatformAddedToSession(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "OnRemoveSessionPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveSessionPlatform(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "RemapTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapTargetPlatforms(TMap<ITargetPlatform*, ITargetPlatform*>& Remap)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(FPackageData* PackageData)"
  },
  {
    "label": "ClearAndDetachOwnedPackageDatas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAndDetachOwnedPackageDatas(TArray<FPackageData*>& OutRequestsToLoad, TArray<TPair<FPackageData*, ESuppressCookReason>>& OutRequestsToDemote, TMap<FPackageData*, TArray<FPackageData*>>& OutRequestGraph)"
  },
  {
    "label": "GetPackagesToMarkNotInProgress()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPackagesToMarkNotInProgress()"
  },
  {
    "label": "GetLocalizationReferences()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FName>)",
    "insertText": "GetLocalizationReferences(FName PackageName, UCookOnTheFlyServer& InCOTFS)"
  },
  {
    "label": "GetAssetManagerReferences()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetAssetManagerReferences(FName PackageName)"
  },
  {
    "label": "IsRequestCookable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IsRequestCookable(const ITargetPlatform* TargetPlatform, FPackageData& PackageData, UCookOnTheFlyServer& COTFS, ESuppressCookReason& OutReason, bool& bOutCookable, bool& bOutExplorable)"
  },
  {
    "label": "GetAsyncQueryStatus()",
    "kind": "Method",
    "detail": "Function (private : struct FGraphSearch ; struct FVisitStatus { FPackageData* PackageData = nullptr ; bool bVisited = false ; } ; enum class EAsyncQueryStatus : uint8 { NotRequested,SchedulerRequested,AsyncRequested,Complete,} ; struct FQueryPlatformData { EAsyncQueryStatus)",
    "insertText": "GetAsyncQueryStatus()"
  },
  {
    "label": "CompareExchangeAsyncQueryStatus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareExchangeAsyncQueryStatus(EAsyncQueryStatus& Expected, EAsyncQueryStatus Desired)"
  },
  {
    "label": "FVertexData()",
    "kind": "Method",
    "detail": "Function (public : UE::TargetDomain::FCookAttachments CookAttachments ; bool bSchedulerThreadFetchCompleted = false ; bool bExploreRequested = false ; bool bExploreCompleted = false ; bool bIterativelyUnmodifiedRequested = false ; bool bTransitiveBuildDependenciesResolvedAsNotModified = false ; TOptional<bool> bIterativelyUnmodified ; private : std::atomic<EAsyncQueryStatus> AsyncQueryStatus ; } ; struct FVertexData {)",
    "insertText": "FVertexData(FName InPackageName, UE::Cook::FPackageData* InPackageData, FGraphSearch& GraphSearch)"
  },
  {
    "label": "GetGeneratedAssetPackageData()",
    "kind": "Method",
    "detail": "Function (const FAssetPackageData*)",
    "insertText": "GetGeneratedAssetPackageData()"
  },
  {
    "label": "FQueryVertexBatch()",
    "kind": "Method",
    "detail": "Function (FName PackageName ; TArray<FVertexData*> IterativelyModifiedListeners ; UE::Cook::FPackageData* PackageData = nullptr ; bool bAnyCookable = true ; bool bPulledIntoCluster = false ; TUniquePtr<FQueryPlatformData [ ]> PlatformData ; } ; struct FQueryVertexBatch {)",
    "insertText": "FQueryVertexBatch(FGraphSearch& InGraphSearch)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send()"
  },
  {
    "label": "RecordCacheResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordCacheResults(FName PackageName, int32 PlatformIndex, UE::TargetDomain::FCookAttachments&& CookAttachments)"
  },
  {
    "label": "FGraphSearch()",
    "kind": "Method",
    "detail": "Function (struct FPlatformData { TArray<FName> PackageNames ; } ; TArray<FPlatformData> PlatformDatas ; TMap<FName,FVertexData*> Vertices ; FGraphSearch& ThreadSafeOnlyVars ; std::atomic<uint32> NumPendingRequests ; } ; struct FFetchPlatformData { const ITargetPlatform* Platform = nullptr ; ICookedPackageWriter* Writer = nullptr ; bool bIsPlatformAgnosticPlatform = false ; bool bIsCookerLoadingPlatform = false ; } ; int32 PlatformAgnosticPlatformIndex = 0 ; int32 CookerLoadingPlatformIndex = 1 ; int32 FirstSessionPlatformIndex = 2 ; enum class ETraversalTier { None,FetchEdgeData,FollowDependencies,All = FollowDependencies,} ; struct FGraphSearch { public :)",
    "insertText": "FGraphSearch(FRequestCluster& InCluster, ETraversalTier TraversalTier)"
  },
  {
    "label": "FGraphSearch()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FGraphSearch()"
  },
  {
    "label": "VisitWithoutDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitWithoutDependencies()"
  },
  {
    "label": "StartSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSearch()"
  },
  {
    "label": "TickExploration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickExploration(bool& bOutDone)"
  },
  {
    "label": "WaitForAsyncQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAsyncQueue(double WaitTimeSeconds)"
  },
  {
    "label": "GetGraphEdges()",
    "kind": "Method",
    "detail": "Function (TMap<FPackageData*,TArray<FPackageData*>>&)",
    "insertText": "GetGraphEdges()"
  },
  {
    "label": "FExploreEdgesContext()",
    "kind": "Method",
    "detail": "Function (private : struct FScratchPlatformDependencyBits { TBitArray<> HasPlatformByIndex ; EInstigator InstigatorType = EInstigator::SoftDependency ; } ; struct FExploreEdgesContext { public :)",
    "insertText": "FExploreEdgesContext(FRequestCluster& InCluster, FGraphSearch& InGraphSearch)"
  },
  {
    "label": "Explore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Explore(FVertexData& InVertex)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Initialize(FVertexData& InVertex)"
  },
  {
    "label": "CalculatePlatformsToProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculatePlatformsToProcess()"
  },
  {
    "label": "TryCalculateIterativelyUnmodified()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryCalculateIterativelyUnmodified()"
  },
  {
    "label": "CalculatePackageDataDependenciesPlatformAgnostic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculatePackageDataDependenciesPlatformAgnostic()"
  },
  {
    "label": "CalculateDependenciesAndIterativelySkippable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateDependenciesAndIterativelySkippable()"
  },
  {
    "label": "QueueVisitsOfDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueVisitsOfDependencies()"
  },
  {
    "label": "MarkExploreComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkExploreComplete()"
  },
  {
    "label": "AddPlatformDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPlatformDependency(FName DependencyName, int32 PlatformIndex, EInstigator InstigatorType)"
  },
  {
    "label": "AddPlatformDependencyRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPlatformDependencyRange(TConstArrayView<FName> Range, int32 PlatformIndex, EInstigator InstigatorType)"
  },
  {
    "label": "ProcessPlatformAttachments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPlatformAttachments(int32 PlatformIndex, const ITargetPlatform* TargetPlatform, FFetchPlatformData& FetchPlatformData, FPackagePlatformData& PackagePlatformData, UE::TargetDomain::FCookAttachments& PlatformAttachments, bool bExploreDependencies)"
  },
  {
    "label": "SetIsIterativelyUnmodified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsIterativelyUnmodified(int32 PlatformIndex, bool bIterativelyUnmodified, FPackagePlatformData& PackagePlatformData)"
  },
  {
    "label": "UpdateDisplay()",
    "kind": "Method",
    "detail": "Function (private : FRequestCluster& Cluster ; FGraphSearch& GraphSearch ; FVertexData* Vertex = nullptr ; FPackageData* PackageData = nullptr ; TArray<FName>* DiscoveredDependencies = nullptr ; TArray<FName> HardGameDependencies ; TArray<FName> HardEditorDependencies ; TArray<FName> SoftGameDependencies ; TArray<FName> CookerLoadingDependencies ; TArray<int32,TInlineAllocator<1 0>> PlatformsToProcess ; TArray<int32,TInlineAllocator<1 0>> PlatformsToExplore ; TMap<FName,FScratchPlatformDependencyBits> PlatformDependencyMap ; TSet<FName> HardDependenciesSet ; TSet<FName> SkippedPackages ; TArray<FVertexData*> UnreadyTransitiveBuildVertices ; FName PackageName ; int32 LocalNumFetchPlatforms = 0 ; bool bFetchAnyTargetPlatform = false ; } ; struct FQueryVertexBatch ; struct FVertexData ; void)",
    "insertText": "UpdateDisplay()"
  },
  {
    "label": "QueueEdgesFetch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueEdgesFetch(FVertexData& Vertex, TConstArrayView<int32> PlatformIndexes)"
  },
  {
    "label": "VisitVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitVertex(FVertexData& VertexData)"
  },
  {
    "label": "VisitVertexForPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitVertexForPlatform(FVertexData& VertexData, const ITargetPlatform* Platform, FPackagePlatformData& PlatformData, ESuppressCookReason& AccumulatedSuppressCookReason)"
  },
  {
    "label": "ResolveTransitiveBuildDependencyCycle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveTransitiveBuildDependencyCycle()"
  },
  {
    "label": "FindOrAddVertex()",
    "kind": "Method",
    "detail": "Function (FVertexData&)",
    "insertText": "FindOrAddVertex(FName PackageName, FGenerationHelper* ParentGenerationHelper = nullptr)"
  },
  {
    "label": "FindOrAddVertex()",
    "kind": "Method",
    "detail": "Function (FVertexData&)",
    "insertText": "FindOrAddVertex(FName PackageName, FPackageData& PackageData)"
  },
  {
    "label": "AllocateVertex()",
    "kind": "Method",
    "detail": "Function (FVertexData*)",
    "insertText": "AllocateVertex(FName PackageName, FPackageData* PackageData)"
  },
  {
    "label": "AddToVisitVertexQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToVisitVertexQueue(FVertexData& Vertex)"
  },
  {
    "label": "AllocateBatch()",
    "kind": "Method",
    "detail": "Function (FQueryVertexBatch*)",
    "insertText": "AllocateBatch()"
  },
  {
    "label": "FreeBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeBatch(FQueryVertexBatch* Batch)"
  },
  {
    "label": "CreateAvailableBatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAvailableBatches(bool bAllowIncompleteBatch)"
  },
  {
    "label": "CreateBatchOfPoppedVertices()",
    "kind": "Method",
    "detail": "Function (FQueryVertexBatch*)",
    "insertText": "CreateBatchOfPoppedVertices(int32 BatchSize)"
  },
  {
    "label": "OnBatchCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBatchCompleted(FQueryVertexBatch* Batch)"
  },
  {
    "label": "KickVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KickVertex(FVertexData* Vertex)"
  },
  {
    "label": "NumFetchPlatforms()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumFetchPlatforms()"
  },
  {
    "label": "NumSessionPlatforms()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumSessionPlatforms()"
  },
  {
    "label": "GetPlatformDataArray()",
    "kind": "Method",
    "detail": "Function (TArrayView<FQueryPlatformData>)",
    "insertText": "GetPlatformDataArray(FVertexData& Vertex)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (private : TArray<FFetchPlatformData> FetchPlatforms ; FRequestCluster& Cluster ; ETraversalTier TraversalTier = ETraversalTier::All ; FExploreEdgesContext ExploreEdgesContext ; TMap<FPackageData*,TArray<FPackageData*>> GraphEdges ; TMap<FName,FVertexData*> Vertices ; TSet<FVertexData*> VisitVertexQueue ; TSet<FVertexData*> PendingTransitiveBuildDependencyVertices ; TTypedBlockAllocatorFreeList<FVertexData> VertexAllocator ; TRingBuffer<FVertexData*> PreAsyncQueue ; double LastActivityTime = 0 . ; int32 RunAwayTickLoopCount = 0 ; FCriticalSection Lock ; TTypedBlockAllocatorResetList<FQueryVertexBatch> BatchAllocator ; TSet<FQueryVertexBatch*> AsyncQueueBatches ; TMpscQueue<FVertexData*> AsyncQueueResults ; FEventRef AsyncResultsReadyEvent ; } ; struct FProcessingFlags { bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetSuppressReason()",
    "kind": "Method",
    "detail": "Function (ESuppressCookReason)",
    "insertText": "GetSuppressReason()"
  },
  {
    "label": "WasMarkedCooked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasMarkedCooked()"
  },
  {
    "label": "ShouldMarkNotInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldMarkNotInProgress()"
  },
  {
    "label": "SetValid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValid()"
  },
  {
    "label": "SetSuppressReason()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSuppressReason(ESuppressCookReason Value)"
  },
  {
    "label": "SetWasMarkedCooked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWasMarkedCooked(bool bValue)"
  },
  {
    "label": "FRequestCluster()",
    "kind": "Method",
    "detail": "Function (private : ESuppressCookReason SuppressCookReason = ESuppressCookReason::NotSuppressed ; bool bValid = false ; bool bWasMarkedCooked = false ; } ; private :)",
    "insertText": "FRequestCluster(UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "ReserveInitialRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveInitialRequests(int32 RequestNum)"
  },
  {
    "label": "PullIntoCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PullIntoCluster(FPackageData& PackageData)"
  },
  {
    "label": "FetchPackageNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FetchPackageNames(const FCookerTimer& CookerTimer, bool& bOutComplete)"
  },
  {
    "label": "PumpExploration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpExploration(const FCookerTimer& CookerTimer, bool& bOutComplete)"
  },
  {
    "label": "StartAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAsync(const FCookerTimer& CookerTimer, bool& bOutComplete)"
  },
  {
    "label": "IsIncrementalCook()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIncrementalCook()"
  },
  {
    "label": "SetPackageDataSuppressReason()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackageDataSuppressReason(FPackageData& PackageData, ESuppressCookReason Reason, bool* bOutExisted = nullptr)"
  },
  {
    "label": "SetPackageDataWasMarkedCooked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackageDataWasMarkedCooked(FPackageData& PackageData, bool bValue, bool* bOutExisted = nullptr)"
  },
  {
    "label": "IsRequestCookable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IsRequestCookable(const ITargetPlatform* TargetPlatform, FName PackageName, FPackageData& PackageData, ESuppressCookReason& OutReason, bool& bOutCookable, bool& bOutExplorable)"
  },
  {
    "label": "IsRequestCookable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IsRequestCookable(const ITargetPlatform* TargetPlatform, FName PackageName, FPackageData& PackageData, UCookOnTheFlyServer& InCOTFS, FStringView InDLCPath, ESuppressCookReason& OutReason, bool& bOutCookable, bool& bOutExplorable)"
  }
]