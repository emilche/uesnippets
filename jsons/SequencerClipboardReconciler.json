[
  {
    "label": "FChannelModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannelModel"
  },
  {
    "label": "FSequencerPasteEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerPasteEnvironment"
  },
  {
    "label": "FSequencerClipboardPasteGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerClipboardPasteGroup"
  },
  {
    "label": "FSequencerClipboardReconciler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerClipboardReconciler"
  },
  {
    "label": "FPasteMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPasteMetaData"
  },
  {
    "label": "EMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMethod"
  },
  {
    "label": "ReportPastedKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / SparseArray . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Curves / KeyHandle . h \" # include \" Misc / Optional . h \" # include \" MovieSceneClipboard . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" namespace UE { namespace Sequencer { class FChannelModel ; } } struct FSequencerPasteEnvironment : FMovieSceneClipboardEnvironment { void)",
    "insertText": "ReportPastedKey(FKeyHandle KeyHandle, TSharedPtr<UE::Sequencer::FChannelModel> ChannelModel)"
  },
  {
    "label": "OnKeyPasted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnKeyPasted(KeyHandle, ChannelModel)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } TFunction<)",
    "insertText": "void(FKeyHandle, TSharedPtr<UE::Sequencer::FChannelModel>)"
  },
  {
    "label": "FSequencerClipboardPasteGroup()",
    "kind": "Method",
    "detail": "Function (} ; struct FSequencerClipboardPasteGroup {)",
    "insertText": "FSequencerClipboardPasteGroup(TArray<TArray<TSharedPtr<UE::Sequencer::FChannelModel>>>& InOwnerArray) : OwnerArray(InOwnerArray) , Index(INDEX_NONE)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(TSharedPtr<UE::Sequencer::FChannelModel> InChannel)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (Index = OwnerArray .)",
    "insertText": "AddDefaulted()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} OwnerArray [ Index ] .)",
    "insertText": "Add(InChannel)"
  },
  {
    "label": "FSequencerClipboardReconciler()",
    "kind": "Method",
    "detail": "Function (} private : TArray<TArray<TSharedPtr<UE::Sequencer::FChannelModel>>>& OwnerArray ; int32 Index ; } ; class FSequencerClipboardReconciler { public :)",
    "insertText": "FSequencerClipboardReconciler(TSharedRef<const FMovieSceneClipboard> InClipboard)"
  },
  {
    "label": "Reconcile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Reconcile()"
  },
  {
    "label": "Paste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Paste(const FSequencerPasteEnvironment& PasteEnvironment)"
  },
  {
    "label": "AddDestinationGroup()",
    "kind": "Method",
    "detail": "Function (public : FSequencerClipboardPasteGroup)",
    "insertText": "AddDestinationGroup()"
  },
  {
    "label": "AddTrackAlias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrackAlias(FName Alias1, FName Alias2)"
  },
  {
    "label": "CanAutoPaste()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "CanAutoPaste()"
  },
  {
    "label": "PasteImpl()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "PasteImpl(const FSequencerPasteEnvironment& PasteEnvironment)"
  },
  {
    "label": "FindMatchingGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindMatchingGroup(const TArray<TSharedPtr<UE::Sequencer::FChannelModel>>& Destination, const TArray<FMovieSceneClipboardKeyTrack>& Source, TMap<int32, int32>& Map, bool bAllowAliases)"
  },
  {
    "label": "ReconcileOneToMany()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReconcileOneToMany()"
  },
  {
    "label": "FPasteMetaData()",
    "kind": "Method",
    "detail": "Function (private : struct FPasteMetaData { enum EMethod { Compress,Expand,Apply,ApplyRepeating,Custom } ;)",
    "insertText": "FPasteMetaData(int32 InSourceGroup, EMethod InMethod) : SourceGroup(InSourceGroup) , Method(InMethod)"
  }
]