[
  {
    "label": "FPThreadSemaphore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPThreadSemaphore"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / Timespan . h \" # include \" Misc / AssertionMacros . h \" # include<pthread . h> # include<errno . h> # include<semaphore . h> class FPThreadSemaphore { public :)",
    "insertText": "UE_NONCOPYABLE(FPThreadSemaphore)"
  },
  {
    "label": "FPThreadSemaphore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPThreadSemaphore(int32 InitialCount, int32 MaxCount)"
  },
  {
    "label": "sem_init()",
    "kind": "Method",
    "detail": "Function (int Res =)",
    "insertText": "sem_init(&Semaphore, 0, InitialCount)"
  },
  {
    "label": "FPThreadSemaphore()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPThreadSemaphore()"
  },
  {
    "label": "sem_destroy()",
    "kind": "Method",
    "detail": "Function (int Res =)",
    "insertText": "sem_destroy(&Semaphore)"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Acquire()"
  },
  {
    "label": "sem_wait()",
    "kind": "Method",
    "detail": "Function (int Res =)",
    "insertText": "sem_wait(&Semaphore)"
  },
  {
    "label": "TryAcquire()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryAcquire(FTimespan Timeout = FTimespan::Zero())"
  },
  {
    "label": "clock_gettime()",
    "kind": "Method",
    "detail": "Function (timespec ts ; int Res =)",
    "insertText": "clock_gettime(CLOCK_REALTIME, &ts)"
  },
  {
    "label": "tv_sec()",
    "kind": "Method",
    "detail": "Function (ts .)",
    "insertText": "tv_sec(uint64)Timeout.GetTotalSeconds()"
  },
  {
    "label": "GetFractionNano()",
    "kind": "Method",
    "detail": "Function (ts . tv_nsec + = Timeout .)",
    "insertText": "GetFractionNano()"
  },
  {
    "label": "sem_timedwait()",
    "kind": "Method",
    "detail": "Function (Res =)",
    "insertText": "sem_timedwait(&Semaphore, &ts)"
  },
  {
    "label": "sem_post()",
    "kind": "Method",
    "detail": "Function (int Res =)",
    "insertText": "sem_post(&Semaphore)"
  }
]