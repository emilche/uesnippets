[
  {
    "label": "_InIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Comp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Comp"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_PREV_PERMUTATION_H # define _LIBCPP___ALGORITHM_RANGES_PREV_PERMUTATION_H # include<__algorithm / in_found_result . h> # include<__algorithm / iterator_operations . h> # include<__algorithm / make_projected . h> # include<__algorithm / prev_permutation . h> # include<__config> # include<__functional / identity . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / sortable . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _InIter> using prev_permutation_result = in_found_result<_InIter> ; namespace __prev_permutation { struct __fn { template<bidirectional_iterator _Iter,sentinel_for<_Iter> _Sent,class _Comp = ranges::less,class _Proj = identity> requires sortable<_Iter,_Comp,_Proj> _LIBCPP_HIDE_FROM_ABI prev_permutation_result<_Iter>)",
    "insertText": "operator()(_Iter __first, _Sent __last, _Comp __comp = {}, _Proj __proj = {})"
  },
  {
    "label": "_RangeAlgPolicy()",
    "kind": "Method",
    "detail": "Function (auto __result = std::__prev_permutation<)",
    "insertText": "_RangeAlgPolicy(std::move(__first), std::move(__last), std::__make_projected(__comp, __proj))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<bidirectional_range _Range,class _Comp = ranges::less,class _Proj = identity> requires sortable<iterator_t<_Range>,_Comp,_Proj> _LIBCPP_HIDE_FROM_ABI prev_permutation_result<borrowed_iterator_t<_Range>>)",
    "insertText": "operator()(_Range&& __range, _Comp __comp = {}, _Proj __proj = {})"
  },
  {
    "label": "_RangeAlgPolicy()",
    "kind": "Method",
    "detail": "Function (auto __result = std::__prev_permutation<)",
    "insertText": "_RangeAlgPolicy(ranges::begin(__range), ranges::end(__range), std::__make_projected(__comp, __proj))"
  }
]