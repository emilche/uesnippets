[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Descriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Descriptor"
  },
  {
    "label": "FileDescriptorStore()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FILE_DESCRIPTOR_STORE_H_ # define BASE_FILE_DESCRIPTOR_STORE_H_ # include<map> # include<string> # include \" base / base_export . h \" # include \" base / files / memory_mapped_file . h \" # include \" base / files / scoped_file . h \" namespace base { class BASE_EXPORT FileDescriptorStore { public :)",
    "insertText": "FileDescriptorStore(const FileDescriptorStore&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FileDescriptorStore&)",
    "insertText": "operator(const FileDescriptorStore&)"
  },
  {
    "label": "Descriptor()",
    "kind": "Method",
    "detail": "Function (struct Descriptor {)",
    "insertText": "Descriptor(const std::string& key, base::ScopedFD fd)"
  },
  {
    "label": "Descriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Descriptor(const std::string& key, base::ScopedFD fd, base::MemoryMappedFile::Region region)"
  },
  {
    "label": "Descriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Descriptor(Descriptor&& other)"
  },
  {
    "label": "Descriptor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Descriptor()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Descriptor&)",
    "insertText": "operator(Descriptor&& other)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (std::string key ; base::ScopedFD fd ; base::MemoryMappedFile::Region region ; } ; using Mapping = std::map<std::string,Descriptor> ; FileDescriptorStore&)",
    "insertText": "GetInstance()"
  },
  {
    "label": "TakeFD()",
    "kind": "Method",
    "detail": "Function (base::ScopedFD)",
    "insertText": "TakeFD(const std::string& key, base::MemoryMappedFile::Region* region)"
  },
  {
    "label": "MaybeTakeFD()",
    "kind": "Method",
    "detail": "Function (base::ScopedFD)",
    "insertText": "MaybeTakeFD(const std::string& key, base::MemoryMappedFile::Region* region)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const std::string& key, base::ScopedFD fd)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const std::string& key, base::ScopedFD fd, base::MemoryMappedFile::Region region)"
  },
  {
    "label": "FileDescriptorStore()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FileDescriptorStore()"
  }
]