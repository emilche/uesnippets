[
  {
    "label": "ScreenCapturerFuchsia",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScreenCapturerFuchsia"
  },
  {
    "label": "ScreenCapturerFuchsia()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_SCREEN_CAPTURER_FUCHSIA_H_ # define MODULES_DESKTOP_CAPTURE_SCREEN_CAPTURER_FUCHSIA_H_ # include<fuchsia / sysmem / cpp / fidl . h> # include<fuchsia / ui / composition / cpp / fidl . h> # include<lib / sys / cpp / component_context . h> # include<memory> # include<unordered_map> # include \" modules / desktop_capture / desktop_capture_options . h \" # include \" modules / desktop_capture / desktop_capturer . h \" # include \" modules / desktop_capture / desktop_frame . h \" namespace webrtc { class ScreenCapturerFuchsia final : public DesktopCapturer { public :)",
    "insertText": "ScreenCapturerFuchsia()"
  },
  {
    "label": "CheckRequirements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckRequirements()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(Callback* callback)"
  },
  {
    "label": "CaptureFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureFrame()"
  },
  {
    "label": "GetSourceList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSourceList(SourceList* screens)"
  },
  {
    "label": "SelectSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectSource(SourceId id)"
  },
  {
    "label": "GetBufferConstraints()",
    "kind": "Method",
    "detail": "Function (private : fuchsia::sysmem::BufferCollectionConstraints)",
    "insertText": "GetBufferConstraints()"
  },
  {
    "label": "SetupBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupBuffers()"
  },
  {
    "label": "GetPixelsPerRow()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetPixelsPerRow(const fuchsia::sysmem::ImageFormatConstraints& constraints)"
  }
]