[
  {
    "label": "FCreateOutlinerColumnParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateOutlinerColumnParams"
  },
  {
    "label": "IOutlinerColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerColumn"
  },
  {
    "label": "FSequencerEditorViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerEditorViewModel"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MVVM / Extensions / IOutlinerExtension . h \" # include \" MVVM / ViewModelPtr . h \" # include \" ScopedTransaction . h \" # include \" Templates / UniquePtr . h \" namespace UE::Sequencer { struct FCreateOutlinerColumnParams ; class IOutlinerColumn ; class FSequencerEditorViewModel ; class SColumnToggleWidget : public SImage { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SColumnToggleWidget)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct( const FArguments& InArgs, const TWeakPtr<IOutlinerColumn> InOutlinerColumn, const FCreateOutlinerColumnParams& InParams)"
  },
  {
    "label": "OnToggleOperationComplete()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "OnToggleOperationComplete()"
  },
  {
    "label": "GetImageColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "GetImageColorAndOpacity()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "SetIsActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsActive(const bool bInIsActive)"
  },
  {
    "label": "IsChildActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsChildActive()"
  },
  {
    "label": "IsImplicitlyActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImplicitlyActive()"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (protected : const FSlateBrush*)",
    "insertText": "GetBrush()"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (protected : FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleClick()"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseCaptureLost(const FCaptureLostEvent& CaptureLostEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "RefreshSequencerTree()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "RefreshSequencerTree()"
  }
]