[
  {
    "label": "FChaosArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosArchive"
  },
  {
    "label": "FGeometryCollectionConvexPropertiesInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionConvexPropertiesInterface"
  },
  {
    "label": "FGeometryCollectionProximityPropertiesInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionProximityPropertiesInterface"
  },
  {
    "label": "FGeometryCollectionDefaults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionDefaults"
  },
  {
    "label": "FGeometryCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollection"
  },
  {
    "label": "ESimulationTypes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESimulationTypes"
  },
  {
    "label": "ENodeFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENodeFlags"
  },
  {
    "label": "FGeometryCollection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" TransformCollection . h \" # include \" Misc / Crc . h \" # include \" GeometryCollection / GeometryCollectionConvexPropertiesInterface . h \" # include \" GeometryCollection / GeometryCollectionProximityPropertiesInterface . h \" # include \" GeometryCollection / ManagedArrayAccessor . h \" # include \" GeometryCollection / Facades / CollectionUVFacade . h \" namespace Chaos { class FChaosArchive ; } class FGeometryCollectionConvexPropertiesInterface ; class FGeometryCollectionProximityPropertiesInterface ; struct FGeometryCollectionDefaults { FLinearColor DefaultVertexColor = FLinearColor::White ; } ; class FGeometryCollection : public FTransformCollection,public FGeometryCollectionConvexPropertiesInterface,public FGeometryCollectionProximityPropertiesInterface { public : typedef FTransformCollection Super ;)",
    "insertText": "FGeometryCollection(FGeometryCollectionDefaults InDefaults = FGeometryCollectionDefaults())"
  },
  {
    "label": "FGeometryCollection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FGeometryCollection()"
  },
  {
    "label": "FGeometryCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGeometryCollection(FGeometryCollection &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGeometryCollection&)",
    "insertText": "operator(const FGeometryCollection &)"
  },
  {
    "label": "FGeometryCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGeometryCollection(FGeometryCollection &&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGeometryCollection&)",
    "insertText": "operator(FGeometryCollection &&)"
  },
  {
    "label": "MANAGED_ARRAY_COLLECTION_INTERNAL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MANAGED_ARRAY_COLLECTION_INTERNAL(FGeometryCollection)"
  },
  {
    "label": "AreCollisionParticlesEnabled()",
    "kind": "Method",
    "detail": "Function (const FName VerticesGroup ; const FName FacesGroup ; const FName GeometryGroup ; const FName BreakingGroup ; const FName MaterialGroup ; const FName SimulatableParticlesAttribute ; const FName SimulationTypeAttribute ; const FName StatusFlagsAttribute ; const FName ExternalCollisionsAttribute ; const FName ColorAttribute ; enum ESimulationTypes : uint8 { FST_None = 0,FST_Rigid = 1,FST_Clustered = 2,FST_Max = 3 } ; enum ENodeFlags : uint32 { FS_None = 0,FS_RemoveOnFracture = 0 x00000004,FS_IgnoreCollisionInParentCluster = 0 x00000008 } ; bool)",
    "insertText": "AreCollisionParticlesEnabled()"
  },
  {
    "label": "NewGeometryCollection()",
    "kind": "Method",
    "detail": "Function (FGeometryCollection*)",
    "insertText": "NewGeometryCollection(const TArray<float>& RawVertexArray, const TArray<int32>& RawIndicesArray, bool ReverseVertexOrder = true, FGeometryCollectionDefaults InDefaults = FGeometryCollectionDefaults())"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FGeometryCollection* Collection, const TArray<float>& RawVertexArray, const TArray<int32>& RawIndicesArray, bool ReverseVertexOrder = true)"
  },
  {
    "label": "DefineGeometrySchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineGeometrySchema(FManagedArrayCollection&)"
  },
  {
    "label": "NewGeometryCollection()",
    "kind": "Method",
    "detail": "Function (FGeometryCollection*)",
    "insertText": "NewGeometryCollection(const TArray<float>& RawVertexArray, const TArray<int32>& RawIndicesArray, const TArray<int32>& RawBoneMapArray, const TArray<FTransform>& RawTransformArray, const TManagedArray<int32>& RawLevelArray, const TManagedArray<int32>& RawParentArray, const TManagedArray<TSet<int32>>& RawChildrenArray, const TManagedArray<int32>& RawSimulationTypeArray, const TManagedArray<int32>& RawStatusFlagsArray, FGeometryCollectionDefaults InDefaults = FGeometryCollectionDefaults())"
  },
  {
    "label": "AppendCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendCollection(const FGeometryCollection& InCollection)"
  },
  {
    "label": "AppendGeometry()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AppendGeometry(const FGeometryCollection & GeometryCollection, int32 MaterialIDOffset = 0, bool ReindexAllMaterials = true, const FTransform& TransformRoot = FTransform::Identity)"
  },
  {
    "label": "AppendEmbeddedInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendEmbeddedInstance(int32 InExemplarIndex, int32 InParentIndex, const FTransform& InTransform = FTransform::Identity)"
  },
  {
    "label": "ReindexExemplarIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReindexExemplarIndices(TArray<int32>& SortedRemovedIndices)"
  },
  {
    "label": "RemoveElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveElements(const FName & Group, const TArray<int32>& DeletionList, FProcessingParameters Params = FProcessingParameters())"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ReorderElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReorderElements(FName Group, const TArray<int32>& NewOrder)"
  },
  {
    "label": "InitializeInterfaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeInterfaces()"
  },
  {
    "label": "UpdateBoundingBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBoundingBox()"
  },
  {
    "label": "UpdateBoundingBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBoundingBox(FManagedArrayCollection&, bool bSkipCheck=false)"
  },
  {
    "label": "GetBoundingBox()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "GetBoundingBox()"
  },
  {
    "label": "UpdateGeometryVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGeometryVisibility(const TArray<int32>& NodeList, bool VisibilityState)"
  },
  {
    "label": "ReindexMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReindexMaterials()"
  },
  {
    "label": "ReindexMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReindexMaterials(FManagedArrayCollection&)"
  },
  {
    "label": "BuildMeshSections()",
    "kind": "Method",
    "detail": "Function (TArray<FGeometryCollectionSection>)",
    "insertText": "BuildMeshSections(const TArray<FIntVector> &Indices, const TArray<int32>& BaseMeshOriginalIndicesIndex, TArray<FIntVector> &RetIndices)"
  },
  {
    "label": "HasVisibleGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVisibleGeometry()"
  },
  {
    "label": "HasContiguousVertices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasContiguousVertices()"
  },
  {
    "label": "HasContiguousFaces()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasContiguousFaces()"
  },
  {
    "label": "HasContiguousRenderFaces()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasContiguousRenderFaces()"
  },
  {
    "label": "NumUVLayers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumUVLayers()"
  },
  {
    "label": "SetNumUVLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetNumUVLayers(int32 NumLayers)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const TManagedArray<int32>& SimType = SimulationType ;)",
    "insertText": "return(SimType[Element] == ESimulationTypes::FST_Clustered)"
  },
  {
    "label": "IsRigid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRigid(int32 Element)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const TManagedArray<int32>& SimType = SimulationType ;)",
    "insertText": "return(SimType[Element] == ESimulationTypes::FST_Rigid)"
  },
  {
    "label": "IsTransform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTransform(int32 Element)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFlags(int32 Element, int32 InFlags)"
  },
  {
    "label": "ClearFlags()",
    "kind": "Method",
    "detail": "Function (TManagedArray<int32>& Status = StatusFlags ; Status [ Element ] | = InFlags ; } void)",
    "insertText": "ClearFlags(int32 Element, int32 InFlags)"
  },
  {
    "label": "HasFlags()",
    "kind": "Method",
    "detail": "Function (TManagedArray<int32>& Status = StatusFlags ; Status [ Element ] = Status [ Element ]& ~ InFlags ; } bool)",
    "insertText": "HasFlags(int32 Element, int32 InFlags)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const TManagedArray<int32>& Status = StatusFlags ;)",
    "insertText": "return(Status[Element] & InFlags)"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVisible(int32 Element)"
  },
  {
    "label": "ConnectionGraph()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>>)",
    "insertText": "ConnectionGraph()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Chaos::FChaosArchive& Ar)"
  },
  {
    "label": "WriteDataToHeaderFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteDataToHeaderFile(const FString &Name, const FString &Path)"
  },
  {
    "label": "WriteDataToOBJFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteDataToOBJFile(const FString &Name, const FString &Path, const bool WriteTopology=true, const bool WriteAuxStructures=true)"
  },
  {
    "label": "SetDefaults()",
    "kind": "Method",
    "detail": "Function (FGeometryCollectionDefaults Defaults ; void)",
    "insertText": "SetDefaults(FName Group, uint32 StartSize, uint32 NumElements)"
  },
  {
    "label": "ModifyUV()",
    "kind": "Method",
    "detail": "Function (TManagedArray<int32> TransformToGeometryIndex ; TManagedArray<int32> SimulationType ; TManagedArray<int32> StatusFlags ; TManagedArray<int32> InitialDynamicState ; TManagedArray<int32> ExemplarIndex ; TManagedArray<FVector3f> Vertex ; FVector2f&)",
    "insertText": "ModifyUV(int32 VertexIndex, int32 UVLayer)"
  },
  {
    "label": "GetUV()",
    "kind": "Method",
    "detail": "Function (} const FVector2f&)",
    "insertText": "GetUV(int32 VertexIndex, int32 UVLayer)"
  },
  {
    "label": "FindUVLayer()",
    "kind": "Method",
    "detail": "Function (} TManagedArray<FVector2f>*)",
    "insertText": "FindUVLayer(int32 UVLayer)"
  },
  {
    "label": "MatchOptionalDefaultAttributes()",
    "kind": "Method",
    "detail": "Function (} TManagedArray<FLinearColor> Color ; TManagedArray<FVector3f> TangentU ; TManagedArray<FVector3f> TangentV ; TManagedArray<FVector3f> Normal ; TManagedArray<int32> BoneMap ; TManagedArray<FIntVector> Indices ; TManagedArray<bool> Visible ; TManagedArray<int32> MaterialIndex ; TManagedArray<int32> MaterialID ; TManagedArray<bool> Internal ; TManagedArray<int32> TransformIndex ; TManagedArray<FBox> BoundingBox ; TManagedArray<float> InnerRadius ; TManagedArray<float> OuterRadius ; TManagedArray<int32> VertexStart ; TManagedArray<int32> VertexCount ; TManagedArray<int32> FaceStart ; TManagedArray<int32> FaceCount ; TManagedArray<FGeometryCollectionSection> Sections ; protected : void)",
    "insertText": "MatchOptionalDefaultAttributes(const FManagedArrayCollection& InCollection)"
  },
  {
    "label": "MatchUVLayerCount()",
    "kind": "Method",
    "detail": "Function (GeometryCollection::)",
    "insertText": "MatchUVLayerCount(*this, InCollection)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct()"
  },
  {
    "label": "RemoveGeometryElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGeometryElements(const TArray<int32>& SortedGeometryIndicesToDelete)"
  },
  {
    "label": "BuildFaceToGeometryMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildFaceToGeometryMapping(bool InSaved=false)"
  },
  {
    "label": "UpdateFaceGroupElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFaceGroupElements()"
  },
  {
    "label": "BuildVertexToGeometryMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildVertexToGeometryMapping(bool InSaved = false)"
  },
  {
    "label": "UpdateVerticesGroupElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVerticesGroupElements()"
  },
  {
    "label": "ReorderGeometryElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReorderGeometryElements(const TArray<int32>& NewOrder)"
  },
  {
    "label": "ReorderTransformElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReorderTransformElements(const TArray<int32>& NewOrder)"
  },
  {
    "label": "GetLatestVersionNumber()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLatestVersionNumber()"
  },
  {
    "label": "UpdateOldAttributeNames()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "UpdateOldAttributeNames()"
  },
  {
    "label": "TransformSelectionToGeometryIndices()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "TransformSelectionToGeometryIndices(const TArray<int32>& Transforms)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; Chaos::FChaosArchive&)",
    "insertText": "operator(Chaos::FChaosArchive& Ar, FGeometryCollection& Value)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Serialize(Ar)"
  }
]