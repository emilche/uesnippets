[
  {
    "label": "FChaosArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosArchive"
  },
  {
    "label": "FGeometryCollectionConvexPropertiesInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionConvexPropertiesInterface"
  },
  {
    "label": "FGeometryCollectionProximityPropertiesInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionProximityPropertiesInterface"
  },
  {
    "label": "FGeometryCollectionDefaults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionDefaults"
  },
  {
    "label": "FGeometryCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollection"
  },
  {
    "label": "ESimulationTypes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESimulationTypes"
  },
  {
    "label": "ENodeFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENodeFlags"
  },
  {
    "label": "AreCollisionParticlesEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreCollisionParticlesEnabled()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FGeometryCollection* Collection, const TArray<float>& RawVertexArray, const TArray<int32>& RawIndicesArray, bool ReverseVertexOrder = true)"
  },
  {
    "label": "DefineGeometrySchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineGeometrySchema(FManagedArrayCollection&)"
  },
  {
    "label": "AppendCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendCollection(const FGeometryCollection& InCollection)"
  },
  {
    "label": "AppendGeometry()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AppendGeometry(const FGeometryCollection & GeometryCollection, int32 MaterialIDOffset = 0, bool ReindexAllMaterials = true, const FTransform& TransformRoot = FTransform::Identity)"
  },
  {
    "label": "AppendEmbeddedInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendEmbeddedInstance(int32 InExemplarIndex, int32 InParentIndex, const FTransform& InTransform = FTransform::Identity)"
  },
  {
    "label": "ReindexExemplarIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReindexExemplarIndices(TArray<int32>& SortedRemovedIndices)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "InitializeInterfaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeInterfaces()"
  },
  {
    "label": "UpdateBoundingBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBoundingBox()"
  },
  {
    "label": "UpdateBoundingBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBoundingBox(FManagedArrayCollection&, bool bSkipCheck=false)"
  },
  {
    "label": "UpdateGeometryVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGeometryVisibility(const TArray<int32>& NodeList, bool VisibilityState)"
  },
  {
    "label": "ReindexMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReindexMaterials()"
  },
  {
    "label": "ReindexMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReindexMaterials(FManagedArrayCollection&)"
  },
  {
    "label": "SetNumUVLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetNumUVLayers(int32 NumLayers)"
  },
  {
    "label": "ConnectionGraph()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>>)",
    "insertText": "ConnectionGraph()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Chaos::FChaosArchive& Ar)"
  },
  {
    "label": "WriteDataToHeaderFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteDataToHeaderFile(const FString &Name, const FString &Path)"
  },
  {
    "label": "WriteDataToOBJFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteDataToOBJFile(const FString &Name, const FString &Path, const bool WriteTopology=true, const bool WriteAuxStructures=true)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct()"
  },
  {
    "label": "RemoveGeometryElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGeometryElements(const TArray<int32>& SortedGeometryIndicesToDelete)"
  },
  {
    "label": "BuildFaceToGeometryMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildFaceToGeometryMapping(bool InSaved=false)"
  },
  {
    "label": "UpdateFaceGroupElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFaceGroupElements()"
  },
  {
    "label": "BuildVertexToGeometryMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildVertexToGeometryMapping(bool InSaved = false)"
  },
  {
    "label": "UpdateVerticesGroupElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVerticesGroupElements()"
  },
  {
    "label": "ReorderGeometryElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReorderGeometryElements(const TArray<int32>& NewOrder)"
  },
  {
    "label": "ReorderTransformElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReorderTransformElements(const TArray<int32>& NewOrder)"
  },
  {
    "label": "UpdateOldAttributeNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOldAttributeNames()"
  },
  {
    "label": "TransformSelectionToGeometryIndices()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "TransformSelectionToGeometryIndices(const TArray<int32>& Transforms)"
  }
]