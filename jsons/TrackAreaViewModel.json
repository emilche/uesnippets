[
  {
    "label": "FFrameNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameNumber"
  },
  {
    "label": "FFrameRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameRate"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FEditorViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewModel"
  },
  {
    "label": "ISequencerEditTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerEditTool"
  },
  {
    "label": "ITrackAreaHotspot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ITrackAreaHotspot"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreTypes . h \" # include \" MVVM / ICastable . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" MVVM / ViewModels / ViewModel . h \" # include \" Math / Range . h \" # include \" Templates / SharedPointer . h \" # include \" TimeToPixel . h \" # include \" UObject / NameTypes . h \" struct FFrameNumber ; struct FFrameRate ; struct FGeometry ; namespace UE { namespace Sequencer { class FEditorViewModel ; class ISequencerEditTool ; struct ITrackAreaHotspot ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnTrackAreaHotspotChanged, TSharedPtr<ITrackAreaHotspot>)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (class FTrackAreaViewModel : public FViewModel { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FTrackAreaViewModel, FViewModel)"
  },
  {
    "label": "FTrackAreaViewModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTrackAreaViewModel()"
  },
  {
    "label": "GetEditor()",
    "kind": "Method",
    "detail": "Function (public : TSharedPtr<FEditorViewModel>)",
    "insertText": "GetEditor()"
  },
  {
    "label": "GetTimeToPixel()",
    "kind": "Method",
    "detail": "Function (FTimeToPixel)",
    "insertText": "GetTimeToPixel(float TrackAreaWidth)"
  },
  {
    "label": "GetTickResolution()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetTickResolution()"
  },
  {
    "label": "GetViewRange()",
    "kind": "Method",
    "detail": "Function (TRange<double>)",
    "insertText": "GetViewRange()"
  },
  {
    "label": "GetHotspot()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITrackAreaHotspot>)",
    "insertText": "GetHotspot()"
  },
  {
    "label": "SetHotspot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHotspot(TSharedPtr<ITrackAreaHotspot> NewHotspot)"
  },
  {
    "label": "AddHotspot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHotspot(TSharedPtr<ITrackAreaHotspot> NewHotspot)"
  },
  {
    "label": "RemoveHotspot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveHotspot(FViewModelTypeID Type)"
  },
  {
    "label": "ClearHotspots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearHotspots()"
  },
  {
    "label": "LockHotspot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockHotspot(bool bIsLocked)"
  },
  {
    "label": "GetOnHotspotChangedDelegate()",
    "kind": "Method",
    "detail": "Function (FOnTrackAreaHotspotChanged&)",
    "insertText": "GetOnHotspotChangedDelegate()"
  },
  {
    "label": "AddEditTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEditTool(TSharedPtr<ISequencerEditTool> InNewTool)"
  },
  {
    "label": "GetEditTool()",
    "kind": "Method",
    "detail": "Function (ISequencerEditTool*)",
    "insertText": "GetEditTool()"
  },
  {
    "label": "CanActivateEditTool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanActivateEditTool(FName Identifier)"
  },
  {
    "label": "AttemptToActivateTool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AttemptToActivateTool(FName Identifier)"
  },
  {
    "label": "LockEditTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockEditTool()"
  },
  {
    "label": "UnlockEditTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockEditTool()"
  }
]