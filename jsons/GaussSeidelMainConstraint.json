[
  {
    "label": "FGaussSeidelMainConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGaussSeidelMainConstraint"
  },
  {
    "label": "PERF_SCOPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSpringConstraintsBase . h \" # include \" Chaos / XPBDCorotatedConstraints . h \" # include \" ChaosStats . h \" # include \" Chaos / ImplicitQRSVD . h \" # include \" Chaos / GraphColoring . h \" # include \" Chaos / NewtonCorotatedCache . h \" # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / Deformable / GaussSeidelWeakConstraints . h \" # include \" Chaos / Deformable / GaussSeidelCorotatedConstraints . h \" # define)",
    "insertText": "PERF_SCOPE(X) SCOPE_CYCLE_COUNTER(X)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(X)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Chaos.Deformable.GSMainConstraint.Apply\"), STAT_ChaosGSMainConstraint_Apply, STATGROUP_Chaos)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Chaos.Deformable.GSMainConstraint.Acceleration\"), STAT_ChaosGSMainConstraint_Acceleration, STATGROUP_Chaos)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Chaos.Deformable.GSMainConstraint.Init\"), STAT_ChaosGSMainConstraint_Init, STATGROUP_Chaos)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Chaos.Deformable.GSMainConstraint.InitTransientColor\"), STAT_ChaosGSMainConstraint_InitTransientColor, STATGROUP_Chaos)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Chaos.Deformable.GSMainConstraint.InitDynamicColor\"), STAT_ChaosGSMainConstraint_InitDynamicColor, STATGROUP_Chaos)"
  },
  {
    "label": "DEFINE_LOG_CATEGORY_STATIC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_LOG_CATEGORY_STATIC(LogDeformableGaussSeidelMainConstraint, Log, All)"
  },
  {
    "label": "FGaussSeidelMainConstraint()",
    "kind": "Method",
    "detail": "Function (namespace Chaos::Softs { template<T,ParticleType> class FGaussSeidelMainConstraint { public :)",
    "insertText": "FGaussSeidelMainConstraint(const ParticleType& InParticles, const bool bDoQuasistaticsIn = false, const bool bDoSORIn = true, const T InOmegaSOR = (T)1.6, const int32 ParallelMaxIn = 1000, const T MaxDxRatioIn = T(1), const FDeformableXPBDCorotatedParams& InParams = FDeformableXPBDCorotatedParams()) : bDoQuasistatics(bDoQuasistaticsIn) , bDoAcceleration(bDoSORIn) , OmegaSOR(InOmegaSOR) , ParallelMax(ParallelMaxIn) , CorotatedParams(InParams)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize((int32)InParticles.Size())"
  },
  {
    "label": "InitializeLambdas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeLambdas()"
  },
  {
    "label": "MaxCoord()",
    "kind": "Method",
    "detail": "Function (TVec3<T>)",
    "insertText": "MaxCoord((T)100.), MinCoord((T)-100.)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (MinCoord [ j ] = InParticles .)",
    "insertText": "X(i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InParticles.X(i)[j] > MaxCoord[j])"
  },
  {
    "label": "MaxDxSize()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "MaxDxSize(MaxCoord - MinCoord).Size()"
  },
  {
    "label": "FGaussSeidelMainConstraint()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGaussSeidelMainConstraint()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Resize(const int32 NewSize)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (xtilde .)",
    "insertText": "SetNum(NewSize)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (X_k_1 .)",
    "insertText": "Init(TVector<T, 3>(T(0.)), NewSize)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} const TArray<TFunction<)",
    "insertText": "void(const ParticleType&, const int32, const int32, const T, TVec3<T>&, Chaos::PMatrix<T, 3, 3>&)>>& StaticConstraintResidualAndHessian()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 CurrentSize = AddStaticConstraintResidualAndHessian .)",
    "insertText": "Num()"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (AddStaticConstraintResidualAndHessian .)",
    "insertText": "AddDefaulted(NumConstraints)"
  },
  {
    "label": "AddTransientConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTransientConstraints(const TArray<TArray<int32>>& ExtraConstraints, TArray<TArray<int32>>& ExtraIncidentElements, TArray<TArray<int32>>& ExtraIncidentElementsLocal, bool CheckIncidentElements = false)"
  },
  {
    "label": "AddDynamicConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDynamicConstraints(const TArray<TArray<int32>>& ExtraConstraints, TArray<TArray<int32>>& ExtraIncidentElements, TArray<TArray<int32>>& ExtraIncidentElementsLocal, bool CheckIncidentElements = false)"
  },
  {
    "label": "ResetDynamicConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDynamicConstraints()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (DynamicConstraints = { } ;)",
    "insertText": "for(int32 p = 0; p < DynamicIncidentElements.Num(); p++)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (DynamicIncidentElements [ p ] .)",
    "insertText": "SetNum(0)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} DynamicIncidentElementsOffsets = { } ; } void)",
    "insertText": "Apply(ParticleType& Particles, const T Dt, const int32 MaxWriteIters = 10, const bool Write2File = false, const TPBDActiveView<FSolverParticles>* InParticleActiveView = nullptr)"
  },
  {
    "label": "PERF_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PERF_SCOPE(STAT_ChaosGSMainConstraint_Apply)"
  },
  {
    "label": "ComputeNewtonResiduals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeNewtonResiduals(Particles, Dt, Write2File)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 i = 0; i < ParticlesPerColor.Num(); i++)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (NumBatch + + ; })",
    "insertText": "PhysicsParallelFor(NumBatch, [&](const int32 BatchIndex) { for (int32 BatchSubIndex = 0; BatchSubIndex < CorotatedParams.XPBDCorotatedBatchSize; BatchSubIndex++) { int32 TaskIndex = CorotatedParams.XPBDCorotatedBatchSize * BatchIndex + BatchSubIndex; if (TaskIndex < ParticlesPerColor[i].Num()) { if (Particles.InvM(ParticlesPerColor[i][TaskIndex]) != T(0)) { int32 ParticleIndex = ParticlesPerColor[i][TaskIndex]; ApplySingleParticle(ParticleIndex, Dt, Particles); } } } }, NumBatch < CorotatedParams.XPBDCorotatedBatchThreshold)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bDoAcceleration)"
  },
  {
    "label": "PERF_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PERF_SCOPE(STAT_ChaosGSMainConstraint_Acceleration)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (InParticleActiveView ->)",
    "insertText": "ParallelFor(AccelerationTechniquePerParticle, CorotatedParams.XPBDCorotatedBatchSize)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "PhysicsParallelFor(Particles.Size(), [this, &Particles](const int32 ParticleIndex) { this->AccelerationTechniquePerParticle(Particles, ParticleIndex); }, Particles.Size() < 1000)"
  },
  {
    "label": "InitStaticColor()",
    "kind": "Method",
    "detail": "Function (} } CurrentIt + + ; } void)",
    "insertText": "InitStaticColor(const ParticleType& Particles, const TPBDActiveView<FSolverParticles>* InParticleActiveView = nullptr)"
  },
  {
    "label": "ComputeNodalColoring()",
    "kind": "Method",
    "detail": "Function (StaticParticlesPerColor =)",
    "insertText": "ComputeNodalColoring(StaticConstraints, Particles, 0, Particles.Size(), StaticIncidentElements, StaticIncidentElementsLocal, InParticleActiveView, &StaticParticleColors)"
  },
  {
    "label": "InitTransientColor()",
    "kind": "Method",
    "detail": "Function (ParticleColors = StaticParticleColors ; ParticlesPerColor = StaticParticlesPerColor ; } void)",
    "insertText": "InitTransientColor(const ParticleType& Particles)"
  },
  {
    "label": "PERF_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PERF_SCOPE(STAT_ChaosGSMainConstraint_InitTransientColor)"
  },
  {
    "label": "ComputeExtraNodalColoring()",
    "kind": "Method",
    "detail": "Function (ParticleColors = StaticParticleColors ; ParticlesPerColor = StaticParticlesPerColor ;)",
    "insertText": "ComputeExtraNodalColoring(StaticConstraints, DynamicConstraints, TransientConstraints, Particles, StaticIncidentElements, DynamicIncidentElements, TransientIncidentElements, ParticleColors, ParticlesPerColor)"
  },
  {
    "label": "InitDynamicColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitDynamicColor(const ParticleType& Particles)"
  },
  {
    "label": "PERF_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PERF_SCOPE(STAT_ChaosGSMainConstraint_InitDynamicColor)"
  },
  {
    "label": "ComputeExtraNodalColoring()",
    "kind": "Method",
    "detail": "Function (ParticleColors = StaticParticleColors ; ParticlesPerColor = StaticParticlesPerColor ;)",
    "insertText": "ComputeExtraNodalColoring(StaticConstraints, DynamicConstraints, Particles, StaticIncidentElements, TransientIncidentElements, ParticleColors, ParticlesPerColor)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const T Dt, const ParticleType& Particles)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize((int32)Particles.Size())"
  },
  {
    "label": "PERF_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PERF_SCOPE(STAT_ChaosGSMainConstraint_Init)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (xtilde [ i ] = Particles .)",
    "insertText": "P(i)"
  },
  {
    "label": "IsClean()",
    "kind": "Method",
    "detail": "Function (} } CurrentIt = 0 ; } bool)",
    "insertText": "IsClean(const TArray<TArray<int32>>& ConstraintsIn, const TArray<TArray<int32>>& IncidentElementsIn, const TArray<TArray<int32>>& IncidentElementsLocalIn)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 TotalEntries = 0 ;)",
    "insertText": "for(int32 i = 0; i < IncidentElementsIn.Num(); i++)"
  },
  {
    "label": "ApplyCG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCG(ParticleType& Particles, const T Dt)"
  },
  {
    "label": "ApplySingleParticle()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ApplySingleParticle(const int32 p, const T Dt, ParticleType& Particles)"
  },
  {
    "label": "ParticleResidual()",
    "kind": "Method",
    "detail": "Function (int32 ConstraintIndex = 0 ; Chaos::TVector<T,3>)",
    "insertText": "ParticleResidual((T)0.)"
  },
  {
    "label": "ParticleHessian()",
    "kind": "Method",
    "detail": "Function (Chaos::PMatrix<T,3,3>)",
    "insertText": "ParticleHessian((T)0., (T)0., (T)0.)"
  },
  {
    "label": "ComputeInitialResidualAndHessian()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeInitialResidualAndHessian(Particles, p, Dt, ParticleResidual, ParticleHessian)"
  },
  {
    "label": "ConstraintIndex()",
    "kind": "Method",
    "detail": "Function (ConstraintIndex + + ; } AddStaticConstraintResidualAndHessian [)",
    "insertText": "ConstraintIndex(Particles, StaticIncidentElements[p][i] - StaticIncidentElementsOffsets[ConstraintIndex], StaticIncidentElementsLocal[p][i], Dt, ParticleResidual, ParticleHessian)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} ConstraintIndex = 0 ;)",
    "insertText": "for(int32 i = 0; i < DynamicIncidentElements[p].Num(); i++)"
  },
  {
    "label": "ConstraintIndex()",
    "kind": "Method",
    "detail": "Function (ConstraintIndex + + ; } AddDynamicConstraintResidualAndHessian [)",
    "insertText": "ConstraintIndex(Particles, DynamicIncidentElements[p][i] - DynamicIncidentElementsOffsets[ConstraintIndex], DynamicIncidentElementsLocal[p][i], Dt, ParticleResidual, ParticleHessian)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} ConstraintIndex = 0 ;)",
    "insertText": "for(int32 i = 0; i < TransientIncidentElements[p].Num(); i++)"
  },
  {
    "label": "ConstraintIndex()",
    "kind": "Method",
    "detail": "Function (ConstraintIndex + + ; } AddTransientConstraintResidualAndHessian [)",
    "insertText": "ConstraintIndex(Particles, TransientIncidentElements[p][i] - TransientIncidentElementsOffsets[ConstraintIndex], TransientIncidentElementsLocal[p][i], Dt, ParticleResidual, ParticleHessian)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 i = 0; i < AddPerNodeHessian.Num(); i++)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (AddPerNodeHessian [)",
    "insertText": "i(p, Dt, ParticleHessian)"
  },
  {
    "label": "Determinant()",
    "kind": "Method",
    "detail": "Function (} T HessianDet = ParticleHessian .)",
    "insertText": "Determinant()"
  },
  {
    "label": "SymmetricCofactorMatrix()",
    "kind": "Method",
    "detail": "Function (Chaos::PMatrix<T,3,3> HessianInv = ParticleHessian .)",
    "insertText": "SymmetricCofactorMatrix()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (HessianInv* =)",
    "insertText": "T(1)"
  },
  {
    "label": "GetTransposed()",
    "kind": "Method",
    "detail": "Function (Chaos::TVector<T,3> Dx = HessianInv .)",
    "insertText": "GetTransposed() * (-ParticleResidual)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "P(p)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogDeformableGaussSeidelMainConstraint, Warning, TEXT(\"Following Particle is skipped because of too large dx size: %d\"), p)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (ComputeInitialResidualAndHessian = [)",
    "insertText": "this(const ParticleType& Particles, const int32 p, const T Dt, TVec3<T>& ParticleResidual, Chaos::PMatrix<T, 3, 3>& ParticleHessian)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (ParticleResidual [ alpha ] = Particles .)",
    "insertText": "M(p) * (Particles.P(p)[alpha] - this->xtilde[p][alpha])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 alpha = 0; alpha < 3; alpha++)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (ParticleHessian .)",
    "insertText": "SetAt(alpha, alpha, Particles.M(p))"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (ParticleResidual [ alpha ] = - Dt* Dt* ExternalForce [ alpha ]* Particles .)",
    "insertText": "M(p)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (} } } ; AccelerationTechniquePerParticle = [)",
    "insertText": "this(ParticleType& Particles, int32 ParticleIndex)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (X_k_1[ParticleIndex])",
    "insertText": "P(ParticleIndex) = OmegaSOR * (Particles.P(ParticleIndex) - this->X_k_1[ParticleIndex])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Particles.InvM(ParticleIndex) != T(0))"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (this -> X_k_1 [ ParticleIndex ] = this -> X_k [ ParticleIndex ] ; this -> X_k [ ParticleIndex ] = Particles .)",
    "insertText": "P(ParticleIndex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; } TArray<TArray<int32>> StaticConstraints = { } ; TArray<TArray<int32>> StaticIncidentElements ; TArray<TArray<int32>> StaticIncidentElementsLocal ; TArray<TArray<int32>> TransientConstraints = { } ; TArray<TArray<int32>> TransientIncidentElements ; TArray<TArray<int32>> TransientIncidentElementsLocal ; TArray<TArray<int32>> DynamicConstraints = { } ; TArray<TArray<int32>> DynamicIncidentElements ; TArray<TArray<int32>> DynamicIncidentElementsLocal ; TFunction<)",
    "insertText": "void(const ParticleType&, const int32, const T, TVec3<T>&, Chaos::PMatrix<T, 3, 3>&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TArray<TFunction<)",
    "insertText": "void(const ParticleType&, const int32, const int32, const T, TVec3<T>&, Chaos::PMatrix<T, 3, 3>&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TArray<TFunction<)",
    "insertText": "void(const int32, const T, Chaos::PMatrix<T, 3, 3>&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TArray<int32> StaticParticleColors ; TArray<TArray<int32>> StaticParticlesPerColor ; TArray<int32> ParticleColors ; TArray<TArray<int32>> ParticlesPerColor ; TArray<int32> StaticIncidentElementsOffsets ; TArray<int32> TransientIncidentElementsOffsets ; TArray<int32> DynamicIncidentElementsOffsets ; bool bDoQuasistatics = false ; TArray<Chaos::TVector<T,3>> xtilde ; TFunction<)",
    "insertText": "void(ParticleType&, int32)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (TArray<Chaos::TVector<T,3>> X_k_1 ; TArray<Chaos::TVector<T,3>> X_k ; int32 CurrentIt = 0 ; bool bDoAcceleration = true ; T OmegaSOR =)",
    "insertText": "T(1.6)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (int32 SORStart = 1 ; int32 ParallelMax = 1 0 0 0 ; FDeformableXPBDCorotatedParams CorotatedParams ; TArray<TFunction<)",
    "insertText": "void(const ParticleType&, const TArray<TVec3<T>>&, TArray<TVec3<T>>&)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<TArray<int32>> use_list ; int32 NumTotalParticles ; TArray<TVec3<T>> ReorderedPs ; T MaxDxSize =)",
    "insertText": "T(0)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (public : bool DebugResidual = false ; bool IsFirstFrame = true ; int32 PassedIters = 0 ; TVec3<T> ExternalForce = TVec3<)",
    "insertText": "T((T)0.)"
  }
]