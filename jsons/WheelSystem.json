[
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "EWheelDamageStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWheelDamageStatus"
  },
  {
    "label": "EWheelSimulationStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWheelSimulationStatus"
  },
  {
    "label": "EFrictionCombineMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFrictionCombineMethod"
  },
  {
    "label": "EAxleType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAxleType"
  },
  {
    "label": "EExternalTorqueCombineMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EExternalTorqueCombineMethod"
  },
  {
    "label": "FSimpleWheelConfig()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" TireSystem . h \" # include \" VehicleSystemTemplate . h \" # include \" VehicleUtility . h \" # if VEHICLE_DEBUGGING_ENABLED UE_DISABLE_OPTIMIZATION # endif namespace Chaos { struct FSimpleWheelConfig { enum EWheelDamageStatus { NONE,BUCKLED,FLAT,MISSING } ; enum EWheelSimulationStatus { ROLLING,SPINNING,LOCKED } ; enum EFrictionCombineMethod { Multiply,Average } ; enum EAxleType : uint8 { UndefinedAxle = 0,Front,Rear } ; enum EExternalTorqueCombineMethod : uint8 { None = 0,Override,Additive } ;)",
    "insertText": "FSimpleWheelConfig() : Offset(FVector(2.f, 1.f, 0.f)) , WheelMass(20.f) , WheelRadius(30.f) , WheelWidth(20.f) , MaxSteeringAngle(70) , MaxBrakeTorque(2000.f) , HandbrakeTorque(1000.f) , ABSEnabled(false) , BrakeEnabled(true) , HandbrakeEnabled(true) , SteeringEnabled(true) , EngineEnabled(false) , TractionControlEnabled(false) , TorqueRatio(0.f) , AxleType(EAxleType::UndefinedAxle) , FrictionCombineMethod(EFrictionCombineMethod::Multiply) , ExternalTorqueCombineMethod(EExternalTorqueCombineMethod::None) , FrictionMultiplier(2.0f) , LateralSlipGraphMultiplier(1.0f) , CorneringStiffness(1000.0f) , SideSlipModifier(1.0f) , SlipThreshold(20.0f) , SkidThreshold(20.0f) , MaxSpinRotation(30.0f)"
  },
  {
    "label": "FSimpleWheelSim()",
    "kind": "Method",
    "detail": "Function (} FVector Offset ; float WheelMass ; float WheelRadius ; float WheelWidth ; int MaxSteeringAngle ; float MaxBrakeTorque ; float HandbrakeTorque ; bool ABSEnabled ; bool BrakeEnabled ; bool HandbrakeEnabled ; bool SteeringEnabled ; bool EngineEnabled ; bool TractionControlEnabled ; float TorqueRatio ; EAxleType AxleType ; EFrictionCombineMethod FrictionCombineMethod ; EExternalTorqueCombineMethod ExternalTorqueCombineMethod ; float FrictionMultiplier ; float LateralSlipGraphMultiplier ; float CorneringStiffness ; float SideSlipModifier ; float SlipThreshold ; float SkidThreshold ; FGraph LateralSlipGraph ; float MaxSpinRotation ; } ; class FSimpleWheelSim : public TVehicleSystem<FSimpleWheelConfig> { public :)",
    "insertText": "FSimpleWheelSim(const FSimpleWheelConfig* SetupIn)"
  },
  {
    "label": "SetWheelRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWheelRadius(float NewRadius)"
  },
  {
    "label": "SetAngularPosition()",
    "kind": "Method",
    "detail": "Function (Re = NewRadius ; } void)",
    "insertText": "SetAngularPosition(float PositionIn)"
  },
  {
    "label": "SetAngularVelocity()",
    "kind": "Method",
    "detail": "Function (AngularPosition = PositionIn ; } void)",
    "insertText": "SetAngularVelocity(float AngularVelocityIn)"
  },
  {
    "label": "SetMatchingSpeed()",
    "kind": "Method",
    "detail": "Function (Omega = AngularVelocityIn ; } void)",
    "insertText": "SetMatchingSpeed(float LinearMetersPerSecondIn)"
  },
  {
    "label": "SetBrakeTorque()",
    "kind": "Method",
    "detail": "Function (Omega = LinearMetersPerSecondIn / Re ; } void)",
    "insertText": "SetBrakeTorque(float BrakeTorqueIn, bool bEngineBrakingIn = false)"
  },
  {
    "label": "SetDriveTorque()",
    "kind": "Method",
    "detail": "Function (BrakeTorque = BrakeTorqueIn ; bEngineBraking = bEngineBrakingIn ; } void)",
    "insertText": "SetDriveTorque(float EngineTorqueIn)"
  },
  {
    "label": "SetTorqueCombineMethod()",
    "kind": "Method",
    "detail": "Function (DriveTorque = EngineTorqueIn ; } void)",
    "insertText": "SetTorqueCombineMethod(FSimpleWheelConfig::EExternalTorqueCombineMethod InCombineMethod)"
  },
  {
    "label": "SetBrakeTorqueOverride()",
    "kind": "Method",
    "detail": "Function (ExternalTorqueCombineMethod = InCombineMethod ; } void)",
    "insertText": "SetBrakeTorqueOverride(float BrakeTorqueIn, bool bEngineBrakingIn = false)"
  },
  {
    "label": "SetDriveTorqueOverride()",
    "kind": "Method",
    "detail": "Function (ExternalBrakeTorque = BrakeTorqueIn ; bEngineBraking = bEngineBrakingIn ; } void)",
    "insertText": "SetDriveTorqueOverride(float EngineTorqueIn)"
  },
  {
    "label": "SetVehicleGroundSpeed()",
    "kind": "Method",
    "detail": "Function (ExternalDriveTorque = EngineTorqueIn ; } void)",
    "insertText": "SetVehicleGroundSpeed(const FVector& VIn)"
  },
  {
    "label": "SetWheelLoadForce()",
    "kind": "Method",
    "detail": "Function (GroundVelocityVector = VIn ; } void)",
    "insertText": "SetWheelLoadForce(float WheelLoadForceIn)"
  },
  {
    "label": "SetSurfaceFriction()",
    "kind": "Method",
    "detail": "Function (bInContact = true ; } else { bInContact = false ; } } void)",
    "insertText": "SetSurfaceFriction(float InFriction)"
  },
  {
    "label": "SetOnGround()",
    "kind": "Method",
    "detail": "Function (SurfaceFriction = InFriction ; } void)",
    "insertText": "SetOnGround(bool OnGround)"
  },
  {
    "label": "SetSteeringAngle()",
    "kind": "Method",
    "detail": "Function (bInContact = OnGround ; } void)",
    "insertText": "SetSteeringAngle(float InAngle)"
  },
  {
    "label": "SetMaxOmega()",
    "kind": "Method",
    "detail": "Function (SteeringAngle = InAngle ; } void)",
    "insertText": "SetMaxOmega(float InMaxOmega)"
  },
  {
    "label": "SetWheelIndex()",
    "kind": "Method",
    "detail": "Function (MaxOmega = InMaxOmega ; } void)",
    "insertText": "SetWheelIndex(uint32 InIndex)"
  },
  {
    "label": "GetNormalisedFrictionFromSlipAngle()",
    "kind": "Method",
    "detail": "Function (WheelIndex = InIndex ; } float)",
    "insertText": "GetNormalisedFrictionFromSlipAngle(float SlipIn)"
  },
  {
    "label": "ClampNormalRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClampNormalRange(SlipIn)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (float FunctionResult = 1 . 1 2 5)",
    "insertText": "f(1.0f - exp(-20.0f * SlipIn))"
  },
  {
    "label": "GetForceFromFriction()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetForceFromFriction()"
  },
  {
    "label": "InContact()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InContact()"
  },
  {
    "label": "IsSkidding()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSkidding()"
  },
  {
    "label": "IsABSActivated()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsABSActivated()"
  },
  {
    "label": "GetWheelLoadForce()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetWheelLoadForce()"
  },
  {
    "label": "GetSkidMagnitude()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSkidMagnitude()"
  },
  {
    "label": "SetMassPerWheel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMassPerWheel(float VehicleMassPerWheel)"
  },
  {
    "label": "FAxleSim()",
    "kind": "Method",
    "detail": "Function (MassPerWheel = VehicleMassPerWheel ; } public : bool BrakeEnabled ; bool HandbrakeEnabled ; bool SteeringEnabled ; bool EngineEnabled ; bool TractionControlEnabled ; bool ABSEnabled ; float FrictionMultiplier ; float LateralSlipGraphMultiplier ; float CorneringStiffness ; float MaxSteeringAngle ; float MaxBrakeTorque ; float HandbrakeTorque ; FSimpleWheelConfig::EExternalTorqueCombineMethod ExternalTorqueCombineMethod ; float Re ; float Omega ; float Sx ; float Inertia ; float DriveTorque ; float BrakeTorque ; float ForceIntoSurface ; FVector GroundVelocityVector ; float AngularPosition ; float SteeringAngle ; float SurfaceFriction ; float MaxOmega ; float ExternalDriveTorque ; float ExternalBrakeTorque ; FVector ForceFromFriction ; float MassPerWheel ; float SlipVelocity ; float SlipAngle ; bool bInContact ; uint32 WheelIndex ; bool bEngineBraking ; public : float AppliedLinearDriveForce ; float AppliedLinearBrakeForce ; float LongitudinalAdhesiveLimit ; float LateralAdhesiveLimit ; float SideSlipModifier ; float Spin ; float AvailableGrip ; FVector InputForces ; bool bClipping ; bool bABSActivated ; } ; struct FAxleConfig { TArray<uint16> WheelIndex ; float RollbarScaling ; } ; class FAxleSim : public TVehicleSystem<FAxleConfig> { public :)",
    "insertText": "FAxleSim()"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Simulate(float DeltaTime)"
  }
]