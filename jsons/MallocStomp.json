[
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FMallocStomp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocStomp"
  },
  {
    "label": "FAllocationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocationData"
  },
  {
    "label": "FMallocStomp()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / MemoryBase . h \" class FOutputDevice ; class UWorld ; # if WITH_MALLOC_STOMP # if PLATFORM_WINDOWS # include \" Windows / WindowsHWrapper . h \" # endif class FMallocStomp final : public FMalloc { struct FAllocationData ; const SIZE_T PageSize ; const bool bUseUnderrunMode ; UPTRINT VirtualAddressCursor = 0 ; SIZE_T VirtualAddressMax = 0 ; SIZE_T VirtualAddressBlockSize = 1* 1 0 2 4* 1 0 2 4* 1 0 2 4 ; public :)",
    "insertText": "FMallocStomp(const bool InUseUnderrunMode = false)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Malloc(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "TryMalloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "TryMalloc(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Realloc(void* InPtr, SIZE_T NewSize, uint32 Alignment)"
  },
  {
    "label": "TryRealloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "TryRealloc(void* InPtr, SIZE_T NewSize, uint32 Alignment)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* InPtr)"
  },
  {
    "label": "GetAllocationSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllocationSize(void *Original, SIZE_T &SizeOut)"
  },
  {
    "label": "DumpAllocatorStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpAllocatorStats(FOutputDevice& Ar)"
  },
  {
    "label": "ValidateHeap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValidateHeap()"
  },
  {
    "label": "IsInternallyThreadSafe()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInternallyThreadSafe()"
  }
]