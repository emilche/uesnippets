[
  {
    "label": "panel_dfs_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "panel_dfs_traits"
  },
  {
    "label": "panel_dfs_traits()",
    "kind": "Method",
    "detail": "Function (# ifndef SPARSELU_PANEL_DFS_H # define SPARSELU_PANEL_DFS_H namespace Eigen { namespace internal { template<IndexVector> struct panel_dfs_traits { typedef IndexVector::Scalar StorageIndex ;)",
    "insertText": "panel_dfs_traits(Index jcol, StorageIndex* marker) : m_jcol(jcol), m_marker(marker)"
  },
  {
    "label": "update_segrep()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "update_segrep(Index krep, StorageIndex jj)"
  },
  {
    "label": "mem_expand()",
    "kind": "Method",
    "detail": "Function (m_marker [ krep ] = jj ; return true ; } return false ; } void)",
    "insertText": "mem_expand(IndexVector& , Index , Index)"
  },
  {
    "label": "dfs_kernel()",
    "kind": "Method",
    "detail": "Function (} enum { ExpandMem = false } ; Index m_jcol ; StorageIndex* m_marker ; } ; template<Scalar,StorageIndex> template<Traits> void SparseLUImpl<Scalar,StorageIndex)",
    "insertText": "dfs_kernel(const StorageIndex jj, IndexVector& perm_r, Index& nseg, IndexVector& panel_lsub, IndexVector& segrep, Ref<IndexVector> repfnz_col, IndexVector& xprune, Ref<IndexVector> marker, IndexVector& parent, IndexVector& xplore, GlobalLU_t& glu, Index& nextl_col, Index krow, Traits& traits)"
  },
  {
    "label": "marker()",
    "kind": "Method",
    "detail": "Function (StorageIndex kmark =)",
    "insertText": "marker(krow)"
  },
  {
    "label": "perm_r()",
    "kind": "Method",
    "detail": "Function (StorageIndex kperm =)",
    "insertText": "perm_r(krow)"
  },
  {
    "label": "panel_lsub()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "panel_lsub(nextl_col++) = StorageIndex(krow)"
  },
  {
    "label": "mem_expand()",
    "kind": "Method",
    "detail": "Function (traits .)",
    "insertText": "mem_expand(panel_lsub, nextl_col, kmark)"
  },
  {
    "label": "xsup()",
    "kind": "Method",
    "detail": "Function (} else { StorageIndex krep = glu .)",
    "insertText": "xsup(glu.supno(kperm)+1)"
  },
  {
    "label": "repfnz_col()",
    "kind": "Method",
    "detail": "Function (StorageIndex myfnz =)",
    "insertText": "repfnz_col(krep)"
  },
  {
    "label": "parent()",
    "kind": "Method",
    "detail": "Function (} else { StorageIndex oldrep = emptyIdxLU ;)",
    "insertText": "parent(krep)"
  },
  {
    "label": "xlsub()",
    "kind": "Method",
    "detail": "Function (StorageIndex xdfs = glu .)",
    "insertText": "xlsub(krep)"
  },
  {
    "label": "xprune()",
    "kind": "Method",
    "detail": "Function (Index maxdfs =)",
    "insertText": "xprune(krep)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (StorageIndex kpar ; do {)",
    "insertText": "while(xdfs < maxdfs)"
  },
  {
    "label": "lsub()",
    "kind": "Method",
    "detail": "Function (StorageIndex kchild = glu .)",
    "insertText": "lsub(xdfs)"
  },
  {
    "label": "marker()",
    "kind": "Method",
    "detail": "Function (xdfs + + ; StorageIndex chmark =)",
    "insertText": "marker(kchild)"
  },
  {
    "label": "perm_r()",
    "kind": "Method",
    "detail": "Function (StorageIndex chperm =)",
    "insertText": "perm_r(kchild)"
  },
  {
    "label": "panel_lsub()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "panel_lsub(nextl_col++)"
  },
  {
    "label": "mem_expand()",
    "kind": "Method",
    "detail": "Function (traits .)",
    "insertText": "mem_expand(panel_lsub, nextl_col, chmark)"
  },
  {
    "label": "xsup()",
    "kind": "Method",
    "detail": "Function (} else { StorageIndex chrep = glu .)",
    "insertText": "xsup(glu.supno(chperm)+1)"
  },
  {
    "label": "repfnz_col()",
    "kind": "Method",
    "detail": "Function (myfnz =)",
    "insertText": "repfnz_col(chrep)"
  },
  {
    "label": "xplore()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "xplore(krep)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "if(traits.update_segrep(krep,jj))"
  },
  {
    "label": "segrep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "segrep(nseg)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(kpar != emptyIdxLU)"
  },
  {
    "label": "panel_dfs()",
    "kind": "Method",
    "detail": "Function (} } } template<Scalar,StorageIndex> void SparseLUImpl<Scalar,StorageIndex)",
    "insertText": "panel_dfs(const Index m, const Index w, const Index jcol, MatrixType& A, IndexVector& perm_r, Index& nseg, ScalarVector& dense, IndexVector& panel_lsub, IndexVector& segrep, IndexVector& repfnz, IndexVector& xprune, IndexVector& marker, IndexVector& parent, IndexVector& xplore, GlobalLU_t& glu)"
  },
  {
    "label": "marker1()",
    "kind": "Method",
    "detail": "Function (Index nextl_col ; VectorBlock<IndexVector>)",
    "insertText": "marker1(marker, m, m)"
  },
  {
    "label": "traits()",
    "kind": "Method",
    "detail": "Function (nseg = 0 ; panel_dfs_traits<IndexVector>)",
    "insertText": "traits(jcol, marker1.data())"
  },
  {
    "label": "nextl_col()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nextl_col(jj - jcol)"
  },
  {
    "label": "repfnz_col()",
    "kind": "Method",
    "detail": "Function (VectorBlock<IndexVector>)",
    "insertText": "repfnz_col(repfnz, nextl_col, m)"
  },
  {
    "label": "dense_col()",
    "kind": "Method",
    "detail": "Function (VectorBlock<ScalarVector>)",
    "insertText": "dense_col(dense,nextl_col, m)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (Index krow = it .)",
    "insertText": "row()"
  },
  {
    "label": "dense_col()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dense_col(krow) = it.value()"
  },
  {
    "label": "dfs_kernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dfs_kernel(jj, perm_r, nseg, panel_lsub, segrep, repfnz_col, xprune, marker, parent, xplore, glu, nextl_col, krow, traits)"
  }
]