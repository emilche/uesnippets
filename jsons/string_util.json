[
  {
    "label": "CaseInsensitiveCompareASCII",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CaseInsensitiveCompareASCII"
  },
  {
    "label": "TrimPositions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TrimPositions"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "vsnprintf()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_STRING_UTIL_H_ # define BASE_STRINGS_STRING_UTIL_H_ # include<ctype . h> # include<stdarg . h> # include<stddef . h> # include<stdint . h> # include<initializer_list> # include<sstream> # include<string> # include<type_traits> # include<vector> # include \" base / base_export . h \" # include \" base / check_op . h \" # include \" base / compiler_specific . h \" # include \" base / containers / span . h \" # include \" base / cxx20_to_address . h \" # include \" base / strings / string_piece . h \" # include \" base / strings / string_util_internal . h \" # include \" build / build_config . h \" namespace base { int)",
    "insertText": "vsnprintf(char* buffer, size_t size, const char* format, va_list arguments) PRINTF_FORMAT(3, 0)"
  },
  {
    "label": "snprintf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "snprintf(char* buffer, size_t size, const char* format, ...) PRINTF_FORMAT(3, 4)"
  },
  {
    "label": "snprintf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "snprintf(char* buffer, size_t size, const char* format, ...)"
  },
  {
    "label": "va_start()",
    "kind": "Method",
    "detail": "Function (va_list arguments ;)",
    "insertText": "va_start(arguments, format)"
  },
  {
    "label": "vsnprintf()",
    "kind": "Method",
    "detail": "Function (int result =)",
    "insertText": "vsnprintf(buffer, size, format, arguments)"
  },
  {
    "label": "va_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "va_end(arguments)"
  },
  {
    "label": "wcslcpy()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "wcslcpy(wchar_t* dst, const wchar_t* src, size_t dst_size)"
  },
  {
    "label": "IsWprintfFormatPortable()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsWprintfFormatPortable(const wchar_t* format)"
  },
  {
    "label": "MakeBasicStringPiece()",
    "kind": "Method",
    "detail": "Function (template<CharT,Iter> BasicStringPiece<CharT>)",
    "insertText": "MakeBasicStringPiece(Iter begin, Iter end)"
  },
  {
    "label": "DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_GE(end - begin, 0)"
  },
  {
    "label": "MakeStringPiece()",
    "kind": "Method",
    "detail": "Function (} template<Iter> StringPiece)",
    "insertText": "MakeStringPiece(Iter begin, Iter end)"
  },
  {
    "label": "MakeStringPiece16()",
    "kind": "Method",
    "detail": "Function (} template<Iter> StringPiece16)",
    "insertText": "MakeStringPiece16(Iter begin, Iter end)"
  },
  {
    "label": "MakeWStringPiece()",
    "kind": "Method",
    "detail": "Function (} template<Iter> WStringPiece)",
    "insertText": "MakeWStringPiece(Iter begin, Iter end)"
  },
  {
    "label": "StreamableToString()",
    "kind": "Method",
    "detail": "Function (} template<. . . Streamable> std::string)",
    "insertText": "StreamableToString(const Streamable&... values)"
  },
  {
    "label": "ss()",
    "kind": "Method",
    "detail": "Function (std::ostringstream)",
    "insertText": "ss(ss << ... << values)"
  },
  {
    "label": "ToLowerASCII()",
    "kind": "Method",
    "detail": "Function (} template<CharT,= std::enable_if_t<std::is_integral<CharT>::value>> CharT)",
    "insertText": "ToLowerASCII(CharT c)"
  },
  {
    "label": "ToUpperASCII()",
    "kind": "Method",
    "detail": "Function (} template<CharT,= std::enable_if_t<std::is_integral<CharT>::value>> CharT)",
    "insertText": "ToUpperASCII(CharT c)"
  },
  {
    "label": "ToLowerASCII()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT std::string)",
    "insertText": "ToLowerASCII(StringPiece str)"
  },
  {
    "label": "ToLowerASCII()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::u16string)",
    "insertText": "ToLowerASCII(StringPiece16 str)"
  },
  {
    "label": "ToUpperASCII()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "ToUpperASCII(StringPiece str)"
  },
  {
    "label": "ToUpperASCII()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::u16string)",
    "insertText": "ToUpperASCII(StringPiece16 str)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<Char> struct CaseInsensitiveCompareASCII { public : bool)",
    "insertText": "operator()(Char x, Char y)"
  },
  {
    "label": "CompareCaseInsensitiveASCII()",
    "kind": "Method",
    "detail": "Function (} } ; BASE_EXPORT int)",
    "insertText": "CompareCaseInsensitiveASCII(StringPiece a, StringPiece b)"
  },
  {
    "label": "CompareCaseInsensitiveASCII()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT int)",
    "insertText": "CompareCaseInsensitiveASCII(StringPiece16 a, StringPiece16 b)"
  },
  {
    "label": "EqualsCaseInsensitiveASCII()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EqualsCaseInsensitiveASCII(StringPiece a, StringPiece b)"
  },
  {
    "label": "EqualsCaseInsensitiveASCII()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EqualsCaseInsensitiveASCII(StringPiece16 a, StringPiece16 b)"
  },
  {
    "label": "EqualsCaseInsensitiveASCII()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EqualsCaseInsensitiveASCII(StringPiece16 a, StringPiece b)"
  },
  {
    "label": "EqualsCaseInsensitiveASCII()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EqualsCaseInsensitiveASCII(StringPiece a, StringPiece16 b)"
  },
  {
    "label": "EmptyString()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT const std::string&)",
    "insertText": "EmptyString()"
  },
  {
    "label": "EmptyString16()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT const std::u16string&)",
    "insertText": "EmptyString16()"
  },
  {
    "label": "RemoveChars()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT const wchar_t kWhitespaceWide [ ] ; BASE_EXPORT const char16_t kWhitespaceUTF16 [ ] ; BASE_EXPORT const char16_t kWhitespaceNoCrLfUTF16 [ ] ; BASE_EXPORT const char kWhitespaceASCII [ ] ; BASE_EXPORT const char16_t kWhitespaceASCIIAs16 [ ] ; BASE_EXPORT const char kUtf8ByteOrderMark [ ] ; BASE_EXPORT bool)",
    "insertText": "RemoveChars(StringPiece16 input, StringPiece16 remove_chars, std::u16string* output)"
  },
  {
    "label": "RemoveChars()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "RemoveChars(StringPiece input, StringPiece remove_chars, std::string* output)"
  },
  {
    "label": "ReplaceChars()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "ReplaceChars(StringPiece16 input, StringPiece16 replace_chars, StringPiece16 replace_with, std::u16string* output)"
  },
  {
    "label": "ReplaceChars()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "ReplaceChars(StringPiece input, StringPiece replace_chars, StringPiece replace_with, std::string* output)"
  },
  {
    "label": "TrimString()",
    "kind": "Method",
    "detail": "Function (enum TrimPositions { TRIM_NONE = 0,TRIM_LEADING = 1<<0,TRIM_TRAILING = 1<<1,TRIM_ALL = TRIM_LEADING | TRIM_TRAILING,} ; BASE_EXPORT bool)",
    "insertText": "TrimString(StringPiece16 input, StringPiece16 trim_chars, std::u16string* output)"
  },
  {
    "label": "TrimString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "TrimString(StringPiece input, StringPiece trim_chars, std::string* output)"
  },
  {
    "label": "TrimString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT StringPiece16)",
    "insertText": "TrimString(StringPiece16 input, StringPiece16 trim_chars, TrimPositions positions)"
  },
  {
    "label": "TrimString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT StringPiece)",
    "insertText": "TrimString(StringPiece input, StringPiece trim_chars, TrimPositions positions)"
  },
  {
    "label": "TruncateUTF8ToByteSize()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "TruncateUTF8ToByteSize(const std::string& input, const size_t byte_size, std::string* output)"
  },
  {
    "label": "TrimWhitespace()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT TrimPositions)",
    "insertText": "TrimWhitespace(StringPiece16 input, TrimPositions positions, std::u16string* output)"
  },
  {
    "label": "TrimWhitespace()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT StringPiece16)",
    "insertText": "TrimWhitespace(StringPiece16 input, TrimPositions positions)"
  },
  {
    "label": "TrimWhitespaceASCII()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT TrimPositions)",
    "insertText": "TrimWhitespaceASCII(StringPiece input, TrimPositions positions, std::string* output)"
  },
  {
    "label": "TrimWhitespaceASCII()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT StringPiece)",
    "insertText": "TrimWhitespaceASCII(StringPiece input, TrimPositions positions)"
  },
  {
    "label": "CollapseWhitespace()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::u16string)",
    "insertText": "CollapseWhitespace(StringPiece16 text, bool trim_sequences_with_line_breaks)"
  },
  {
    "label": "CollapseWhitespaceASCII()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "CollapseWhitespaceASCII(StringPiece text, bool trim_sequences_with_line_breaks)"
  },
  {
    "label": "ContainsOnlyChars()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "ContainsOnlyChars(StringPiece input, StringPiece characters)"
  },
  {
    "label": "ContainsOnlyChars()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "ContainsOnlyChars(StringPiece16 input, StringPiece16 characters)"
  },
  {
    "label": "IsStringUTF8()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsStringUTF8(StringPiece str)"
  },
  {
    "label": "IsStringUTF8AllowingNoncharacters()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsStringUTF8AllowingNoncharacters(StringPiece str)"
  },
  {
    "label": "IsStringASCII()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsStringASCII(StringPiece str)"
  },
  {
    "label": "IsStringASCII()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsStringASCII(StringPiece16 str)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WCHAR_T_IS_UTF32) BASE_EXPORT bool IsStringASCII(WStringPiece str)"
  },
  {
    "label": "EqualsASCII()",
    "kind": "Method",
    "detail": "Function (# endif BASE_EXPORT bool)",
    "insertText": "EqualsASCII(StringPiece16 str, StringPiece ascii)"
  },
  {
    "label": "StartsWith()",
    "kind": "Method",
    "detail": "Function (enum class CompareCase { SENSITIVE,INSENSITIVE_ASCII,} ; BASE_EXPORT bool)",
    "insertText": "StartsWith(StringPiece str, StringPiece search_for, CompareCase case_sensitivity = CompareCase::SENSITIVE)"
  },
  {
    "label": "StartsWith()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "StartsWith(StringPiece16 str, StringPiece16 search_for, CompareCase case_sensitivity = CompareCase::SENSITIVE)"
  },
  {
    "label": "EndsWith()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "EndsWith(StringPiece str, StringPiece search_for, CompareCase case_sensitivity = CompareCase::SENSITIVE)"
  },
  {
    "label": "EndsWith()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "EndsWith(StringPiece16 str, StringPiece16 search_for, CompareCase case_sensitivity = CompareCase::SENSITIVE)"
  },
  {
    "label": "IsAsciiWhitespace()",
    "kind": "Method",
    "detail": "Function (template<Char> bool)",
    "insertText": "IsAsciiWhitespace(Char c)"
  },
  {
    "label": "IsAsciiAlpha()",
    "kind": "Method",
    "detail": "Function (} return false ; } template<Char> bool)",
    "insertText": "IsAsciiAlpha(Char c)"
  },
  {
    "label": "IsAsciiUpper()",
    "kind": "Method",
    "detail": "Function (} template<Char> bool)",
    "insertText": "IsAsciiUpper(Char c)"
  },
  {
    "label": "IsAsciiPrintable()",
    "kind": "Method",
    "detail": "Function (} template<Char> bool)",
    "insertText": "IsAsciiPrintable(Char c)"
  },
  {
    "label": "HexDigitToInt()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT char)",
    "insertText": "HexDigitToInt(char c)"
  },
  {
    "label": "HexDigitToInt()",
    "kind": "Method",
    "detail": "Function (char)",
    "insertText": "HexDigitToInt(char16_t c)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(IsHexDigit(c))"
  },
  {
    "label": "enable_if_t()",
    "kind": "Method",
    "detail": "Function (} template<Char,=)",
    "insertText": "enable_if_t(sizeof(Char) > 1)>> inline bool IsUnicodeWhitespace(Char c)"
  },
  {
    "label": "IsWhitespace()",
    "kind": "Method",
    "detail": "Function (} return false ; } template<Char> bool)",
    "insertText": "IsWhitespace(Char c)"
  },
  {
    "label": "IsAsciiWhitespace()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "IsAsciiWhitespace(c)"
  },
  {
    "label": "FormatBytesUnlocalized()",
    "kind": "Method",
    "detail": "Function (} } BASE_EXPORT std::u16string)",
    "insertText": "FormatBytesUnlocalized(int64_t bytes)"
  },
  {
    "label": "ReplaceFirstSubstringAfterOffset()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "ReplaceFirstSubstringAfterOffset(std::u16string* str, size_t start_offset, StringPiece16 find_this, StringPiece16 replace_with)"
  },
  {
    "label": "ReplaceFirstSubstringAfterOffset()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "ReplaceFirstSubstringAfterOffset(std::string* str, size_t start_offset, StringPiece find_this, StringPiece replace_with)"
  },
  {
    "label": "ReplaceSubstringsAfterOffset()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "ReplaceSubstringsAfterOffset(std::u16string* str, size_t start_offset, StringPiece16 find_this, StringPiece16 replace_with)"
  },
  {
    "label": "ReplaceSubstringsAfterOffset()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "ReplaceSubstringsAfterOffset(std::string* str, size_t start_offset, StringPiece find_this, StringPiece replace_with)"
  },
  {
    "label": "WriteInto()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT char*)",
    "insertText": "WriteInto(std::string* str, size_t length_with_null)"
  },
  {
    "label": "WriteInto()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT char16_t*)",
    "insertText": "WriteInto(std::u16string* str, size_t length_with_null)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "JoinString(span<const std::string> parts, StringPiece separator)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::u16string)",
    "insertText": "JoinString(span<const std::u16string> parts, StringPiece16 separator)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "JoinString(span<const StringPiece> parts, StringPiece separator)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::u16string)",
    "insertText": "JoinString(span<const StringPiece16> parts, StringPiece16 separator)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "JoinString(std::initializer_list<StringPiece> parts, StringPiece separator)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::u16string)",
    "insertText": "JoinString(std::initializer_list<StringPiece16> parts, StringPiece16 separator)"
  },
  {
    "label": "ReplaceStringPlaceholders()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::u16string)",
    "insertText": "ReplaceStringPlaceholders(StringPiece16 format_string, const std::vector<std::u16string>& subst, std::vector<size_t>* offsets)"
  },
  {
    "label": "ReplaceStringPlaceholders()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "ReplaceStringPlaceholders(StringPiece format_string, const std::vector<std::string>& subst, std::vector<size_t>* offsets)"
  },
  {
    "label": "ReplaceStringPlaceholders()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::u16string)",
    "insertText": "ReplaceStringPlaceholders(const std::u16string& format_string, const std::u16string& a, size_t* offset)"
  }
]