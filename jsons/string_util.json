[
  {
    "label": "CaseInsensitiveCompareASCII",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CaseInsensitiveCompareASCII"
  },
  {
    "label": "member",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "member"
  },
  {
    "label": "TrimPositions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TrimPositions"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "strlcpy()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "strlcpy(char* dst, const char* src, size_t dst_size)"
  },
  {
    "label": "wcslcpy()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "wcslcpy(wchar_t* dst, const wchar_t* src, size_t dst_size)"
  },
  {
    "label": "IsWprintfFormatPortable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWprintfFormatPortable(const wchar_t* format)"
  },
  {
    "label": "ToLowerASCII()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToLowerASCII(StringPiece str)"
  },
  {
    "label": "ToLowerASCII()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "ToLowerASCII(StringPiece16 str)"
  },
  {
    "label": "ToUpperASCII()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToUpperASCII(StringPiece str)"
  },
  {
    "label": "ToUpperASCII()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "ToUpperASCII(StringPiece16 str)"
  },
  {
    "label": "RemoveChars()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveChars(StringPiece16 input,\n                             StringPiece16 remove_chars,\n                             std::u16string* output)"
  },
  {
    "label": "RemoveChars()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveChars(StringPiece input,\n                             StringPiece remove_chars,\n                             std::string* output)"
  },
  {
    "label": "ReplaceChars()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceChars(StringPiece16 input,\n                              StringPiece16 replace_chars,\n                              StringPiece16 replace_with,\n                              std::u16string* output)"
  },
  {
    "label": "ReplaceChars()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceChars(StringPiece input,\n                              StringPiece replace_chars,\n                              StringPiece replace_with,\n                              std::string* output)"
  },
  {
    "label": "TrimString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrimString(StringPiece16 input,\n                            StringPiece16 trim_chars,\n                            std::u16string* output)"
  },
  {
    "label": "TrimString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrimString(StringPiece input,\n                            StringPiece trim_chars,\n                            std::string* output)"
  },
  {
    "label": "TrimString()",
    "kind": "Method",
    "detail": "Function (StringPiece16)",
    "insertText": "TrimString(StringPiece16 input,\n                                     StringPiece16 trim_chars,\n                                     TrimPositions positions)"
  },
  {
    "label": "TrimString()",
    "kind": "Method",
    "detail": "Function (StringPiece)",
    "insertText": "TrimString(StringPiece input,\n                                   StringPiece trim_chars,\n                                   TrimPositions positions)"
  },
  {
    "label": "TruncateUTF8ToByteSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TruncateUTF8ToByteSize(const std::string& input,\n                                        const size_t byte_size,\n                                        std::string* output)"
  },
  {
    "label": "TrimWhitespace()",
    "kind": "Method",
    "detail": "Function (TrimPositions)",
    "insertText": "TrimWhitespace(StringPiece16 input,\n                                         TrimPositions positions,\n                                         std::u16string* output)"
  },
  {
    "label": "TrimWhitespace()",
    "kind": "Method",
    "detail": "Function (StringPiece16)",
    "insertText": "TrimWhitespace(StringPiece16 input,\n                                         TrimPositions positions)"
  },
  {
    "label": "TrimWhitespaceASCII()",
    "kind": "Method",
    "detail": "Function (TrimPositions)",
    "insertText": "TrimWhitespaceASCII(StringPiece input,\n                                              TrimPositions positions,\n                                              std::string* output)"
  },
  {
    "label": "TrimWhitespaceASCII()",
    "kind": "Method",
    "detail": "Function (StringPiece)",
    "insertText": "TrimWhitespaceASCII(StringPiece input,\n                                            TrimPositions positions)"
  },
  {
    "label": "CollapseWhitespace()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "CollapseWhitespace(\n    StringPiece16 text,\n    bool trim_sequences_with_line_breaks)"
  },
  {
    "label": "CollapseWhitespaceASCII()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "CollapseWhitespaceASCII(\n    StringPiece text,\n    bool trim_sequences_with_line_breaks)"
  },
  {
    "label": "ContainsOnlyChars()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsOnlyChars(StringPiece input, StringPiece characters)"
  },
  {
    "label": "ContainsOnlyChars()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsOnlyChars(StringPiece16 input,\n                                   StringPiece16 characters)"
  },
  {
    "label": "IsStringUTF8()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStringUTF8(StringPiece str)"
  },
  {
    "label": "IsStringUTF8AllowingNoncharacters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStringUTF8AllowingNoncharacters(StringPiece str)"
  },
  {
    "label": "IsStringASCII()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStringASCII(StringPiece str)"
  },
  {
    "label": "IsStringASCII()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStringASCII(StringPiece16 str)"
  },
  {
    "label": "IsStringASCII()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStringASCII(WStringPiece str)"
  },
  {
    "label": "EqualsASCII()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualsASCII(StringPiece16 str, StringPiece ascii)"
  },
  {
    "label": "StartsWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartsWith(\n    StringPiece str,\n    StringPiece search_for,\n    CompareCase case_sensitivity = CompareCase::SENSITIVE)"
  },
  {
    "label": "StartsWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartsWith(\n    StringPiece16 str,\n    StringPiece16 search_for,\n    CompareCase case_sensitivity = CompareCase::SENSITIVE)"
  },
  {
    "label": "EndsWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndsWith(\n    StringPiece str,\n    StringPiece search_for,\n    CompareCase case_sensitivity = CompareCase::SENSITIVE)"
  },
  {
    "label": "EndsWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndsWith(\n    StringPiece16 str,\n    StringPiece16 search_for,\n    CompareCase case_sensitivity = CompareCase::SENSITIVE)"
  },
  {
    "label": "HexDigitToInt()",
    "kind": "Method",
    "detail": "Function (char)",
    "insertText": "HexDigitToInt(char c)"
  },
  {
    "label": "IsUnicodeWhitespace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsUnicodeWhitespace(c)"
  },
  {
    "label": "IsAsciiWhitespace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsAsciiWhitespace(c)"
  },
  {
    "label": "FormatBytesUnlocalized()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "FormatBytesUnlocalized(int64_t bytes)"
  },
  {
    "label": "ReplaceFirstSubstringAfterOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceFirstSubstringAfterOffset(std::u16string* str,\n                                                  size_t start_offset,\n                                                  StringPiece16 find_this,\n                                                  StringPiece16 replace_with)"
  },
  {
    "label": "ReplaceFirstSubstringAfterOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceFirstSubstringAfterOffset(\n    std::string* str,\n    size_t start_offset,\n    StringPiece find_this,\n    StringPiece replace_with)"
  },
  {
    "label": "ReplaceSubstringsAfterOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceSubstringsAfterOffset(std::u16string* str,\n                                              size_t start_offset,\n                                              StringPiece16 find_this,\n                                              StringPiece16 replace_with)"
  },
  {
    "label": "ReplaceSubstringsAfterOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceSubstringsAfterOffset(\n    std::string* str,\n    size_t start_offset,\n    StringPiece find_this,\n    StringPiece replace_with)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "JoinString(span<const std::string> parts,\n                                   StringPiece separator)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "JoinString(span<const std::u16string> parts,\n                                      StringPiece16 separator)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "JoinString(span<const StringPiece> parts,\n                                   StringPiece separator)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "JoinString(span<const StringPiece16> parts,\n                                      StringPiece16 separator)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "JoinString(std::initializer_list<StringPiece> parts,\n                                   StringPiece separator)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "JoinString(\n    std::initializer_list<StringPiece16> parts,\n    StringPiece16 separator)"
  },
  {
    "label": "ReplaceStringPlaceholders()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "ReplaceStringPlaceholders(\n    StringPiece16 format_string,\n    const std::vector<std::u16string>& subst,\n    std::vector<size_t>* offsets)"
  },
  {
    "label": "ReplaceStringPlaceholders()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ReplaceStringPlaceholders(\n    StringPiece format_string,\n    const std::vector<std::string>& subst,\n    std::vector<size_t>* offsets)"
  },
  {
    "label": "ReplaceStringPlaceholders()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "ReplaceStringPlaceholders(\n    const std::u16string& format_string,\n    const std::u16string& a,\n    size_t* offset)"
  }
]