[
  {
    "label": "GenerateBoxSegments()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" VectorTypes . h \" # include \" FrameTypes . h \" # include \" TransformTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> void)",
    "insertText": "GenerateBoxSegments(const TVector<RealType>& HalfDimensions, const TVector<RealType>& Center, const TVector<RealType>& AxisX, const TVector<RealType>& AxisY, const TVector<RealType>& AxisZ, const TTransformSRT3<RealType>& Transform, TFunctionRef<void(const TVector<RealType>& A, const TVector<RealType>& B)> EmitLineFunc)"
  },
  {
    "label": "GenerateCircleSegments()",
    "kind": "Method",
    "detail": "Function (template<RealType> void)",
    "insertText": "GenerateCircleSegments(int32 NumSteps, RealType Radius, const TVector<RealType>& Center, const TVector<RealType>& AxisX, const TVector<RealType>& AxisY, const TTransformSRT3<RealType>& Transform, TFunctionRef<void(const TVector<RealType>& A, const TVector<RealType>& B)> EmitLineFunc)"
  },
  {
    "label": "GenerateArcSegments()",
    "kind": "Method",
    "detail": "Function (template<RealType> void)",
    "insertText": "GenerateArcSegments(int32 NumSteps, RealType Radius, RealType StartAngle, RealType EndAngle, const TVector<RealType>& Center, const TVector<RealType>& AxisX, const TVector<RealType>& AxisY, const TTransformSRT3<RealType>& Transform, TFunctionRef<void(const TVector<RealType>& A, const TVector<RealType>& B)> EmitLineFunc)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> B [ 2 ],P,Q ; B [ 0 ] = Center + HalfDimensions ; B [ 1 ] = Center - HalfDimensions ;)",
    "insertText": "for(int32 i = 0; i < 2; i++)"
  },
  {
    "label": "EmitLineFunc()",
    "kind": "Method",
    "detail": "Function (P . X = B [ i ] . X ; Q . X = B [ i ] . X ; P . Y = B [ j ] . Y ; Q . Y = B [ j ] . Y ; P . Z = B [ 0 ] . Z ; Q . Z = B [ 1 ] . Z ;)",
    "insertText": "EmitLineFunc(Transform.TransformPosition(P), Transform.TransformPosition(Q))"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> PrevPos = TVector<RealType)",
    "insertText": "Zero()"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "t(RealType)i / (RealType)"
  },
  {
    "label": "Angle()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "Angle(RealType)"
  },
  {
    "label": "Cos()",
    "kind": "Method",
    "detail": "Function (RealType PlaneX = Radius* TMathUtil<RealType)",
    "insertText": "Cos(Angle)"
  },
  {
    "label": "Sin()",
    "kind": "Method",
    "detail": "Function (RealType PlaneY = Radius* TMathUtil<RealType)",
    "insertText": "Sin(Angle)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> CurPos = Transform .)",
    "insertText": "TransformPosition(Center + PlaneX * AxisX + PlaneY * AxisY)"
  },
  {
    "label": "EmitLineFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitLineFunc(PrevPos, CurPos)"
  },
  {
    "label": "Angle()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "Angle((RealType)1 - t) * StartAngle + (t)"
  }
]