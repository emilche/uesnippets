[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Line3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Line3"
  },
  {
    "label": "S",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "S"
  },
  {
    "label": "Line3()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMATHLINE_H # define INCLUDED_IMATHLINE_H # include \" ImathMatrix . h \" # include \" ImathNamespace . h \" # include \" ImathVec . h \" IMATH_INTERNAL_NAMESPACE_HEADER_ENTER template<class T> class Line3 { public : Vec3<T> pos ; Vec3<T> dir ; IMATH_HOSTDEVICE)",
    "insertText": "Line3()"
  },
  {
    "label": "Line3()",
    "kind": "Method",
    "detail": "Function (} IMATH_HOSTDEVICE IMATH_CONSTEXPR14)",
    "insertText": "Line3(const Vec3<T>& point1, const Vec3<T>& point2)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE void)",
    "insertText": "set(const Vec3<T>& point1, const Vec3<T>& point2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE Vec3<T>)",
    "insertText": "operator() (T parameter)"
  },
  {
    "label": "distanceTo()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE T)",
    "insertText": "distanceTo(const Vec3<T>& point)"
  },
  {
    "label": "distanceTo()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14 T)",
    "insertText": "distanceTo(const Line3<T>& line)"
  },
  {
    "label": "closestPointTo()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE Vec3<T>)",
    "insertText": "closestPointTo(const Vec3<T>& point)"
  },
  {
    "label": "closestPointTo()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14 Vec3<T>)",
    "insertText": "closestPointTo(const Line3<T>& line)"
  },
  {
    "label": "Line3()",
    "kind": "Method",
    "detail": "Function (} ; typedef Line3<float> Line3f ; typedef Line3<double> Line3d ; template<class T> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 Line3<T)",
    "insertText": "Line3(const Vec3<T>& p0, const Vec3<T>& p1)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set(p0, p1)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} template<class T> IMATH_HOSTDEVICE void Line3<T)",
    "insertText": "set(const Vec3<T>& p0, const Vec3<T>& p1)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (pos = p0 ; dir = p1 - p0 ; dir .)",
    "insertText": "normalize()"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "d(dir % line.dir) ^ (line.pos - pos)"
  },
  {
    "label": "absDenom()",
    "kind": "Method",
    "detail": "Function (Vec3<T> posLpos = pos - line . pos ; T c = dir ^ posLpos ; T a = line . dir ^ dir ; T f = line . dir ^ posLpos ; T num = c - a* f ; T denom = a* a - 1 ; T)",
    "insertText": "absDenom((denom >= 0) ? denom : -denom)"
  },
  {
    "label": "absNum()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "absNum((num >= 0) ? num : -num)"
  },
  {
    "label": "dir()",
    "kind": "Method",
    "detail": "Function (} return pos +)",
    "insertText": "dir(num / denom)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class T> std::ostream&)",
    "insertText": "operator(std::ostream& o, const Line3<T>& line)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class S,class T> IMATH_HOSTDEVICE Line3<S>)",
    "insertText": "operator(const Line3<S>& line, const Matrix44<T>& M)"
  }
]