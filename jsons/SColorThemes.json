[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SErrorText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SErrorText"
  },
  {
    "label": "STextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STextBlock"
  },
  {
    "label": "SThemeColorBlocksBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SThemeColorBlocksBar"
  },
  {
    "label": "FColorInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColorInfo"
  },
  {
    "label": "FColorTheme",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColorTheme"
  },
  {
    "label": "SColorTrash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColorTrash"
  },
  {
    "label": "SThemeColorBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SThemeColorBlock"
  },
  {
    "label": "SThemeColorBlocksBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SThemeColorBlocksBar"
  },
  {
    "label": "SColorThemeBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColorThemeBar"
  },
  {
    "label": "SColorThemesViewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColorThemesViewer"
  },
  {
    "label": "FColorDragDrop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColorDragDrop"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "InsertNewColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertNewColor(TSharedPtr<FLinearColor> InColor, int32 InsertPosition)"
  },
  {
    "label": "InsertNewColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertNewColor(TSharedPtr<FColorInfo> InColor, int32 InsertPosition)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAll()"
  },
  {
    "label": "RemoveColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveColor(const TSharedPtr<FLinearColor> InColor)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct( const FArguments& InArgs )"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs )"
  },
  {
    "label": "OnColorBlockRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnColorBlockRename()"
  },
  {
    "label": "SetLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLabel(const FText& NewColorLabel, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "AddNewColorBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewColorBlock(FLinearColor Color, int32 InsertPosition)"
  },
  {
    "label": "RemoveColorBlock()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveColorBlock(TSharedPtr<FLinearColor> ColorToRemove)"
  },
  {
    "label": "RemoveRefreshCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRefreshCallback()"
  },
  {
    "label": "AddRefreshCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRefreshCallback()"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refresh()"
  },
  {
    "label": "SetPlaceholderGrabOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaceholderGrabOffset(FVector2D GrabOffset)"
  },
  {
    "label": "DestroyPlaceholders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPlaceholders()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown( const FGeometry& MyGeometry, const FPointerEvent& MouseEvent )"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetUseAlpha()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseAlpha( const TAttribute<bool>& InUseAlpha )"
  },
  {
    "label": "LoadColorThemesFromIni()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadColorThemesFromIni()"
  },
  {
    "label": "SaveColorThemesToIni()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveColorThemesToIni()"
  },
  {
    "label": "MenuToStandardNoReturn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MenuToStandardNoReturn()"
  },
  {
    "label": "NewColorTheme()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NewColorTheme()"
  },
  {
    "label": "DuplicateColorTheme()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "DuplicateColorTheme()"
  },
  {
    "label": "DeleteColorTheme()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "DeleteColorTheme()"
  },
  {
    "label": "AcceptThemeName()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "AcceptThemeName()"
  },
  {
    "label": "CommitThemeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitThemeName(const FText& InText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "UpdateThemeNameFromTextBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateThemeNameFromTextBox()"
  },
  {
    "label": "ChangeThemeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeThemeName(const FText& InText)"
  },
  {
    "label": "SetCurrentColorTheme()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentColorTheme(TSharedPtr<FColorTheme> NewTheme)"
  },
  {
    "label": "MenuToStandard()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "MenuToStandard()"
  },
  {
    "label": "MenuToRename()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "MenuToRename()"
  },
  {
    "label": "MenuToDelete()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "MenuToDelete()"
  },
  {
    "label": "MenuToTrash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MenuToTrash()"
  },
  {
    "label": "RefreshThemes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshThemes()"
  },
  {
    "label": "OnGenerateColorThemeBars()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateColorThemeBars(TSharedPtr<FColorTheme> InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetDefaultColorTheme()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FColorTheme>)",
    "insertText": "GetDefaultColorTheme(bool bCreateNew = false)"
  },
  {
    "label": "GetColorTheme()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FColorTheme>)",
    "insertText": "GetColorTheme(const FString& ThemeName)"
  },
  {
    "label": "IsColorTheme()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FColorTheme>)",
    "insertText": "IsColorTheme(const FString& ThemeName)"
  },
  {
    "label": "MakeUniqueThemeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MakeUniqueThemeName(const FString& ThemeName)"
  }
]