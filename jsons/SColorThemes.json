[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SErrorText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SErrorText"
  },
  {
    "label": "STextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STextBlock"
  },
  {
    "label": "SThemeColorBlocksBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SThemeColorBlocksBar"
  },
  {
    "label": "FColorInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColorInfo"
  },
  {
    "label": "FColorTheme",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColorTheme"
  },
  {
    "label": "SColorTrash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColorTrash"
  },
  {
    "label": "SThemeColorBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SThemeColorBlock"
  },
  {
    "label": "SColorThemeBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColorThemeBar"
  },
  {
    "label": "SColorThemesViewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColorThemesViewer"
  },
  {
    "label": "FColorDragDrop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColorDragDrop"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "FColorInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Input / DragAndDrop . h \" # include \" Input / Reply . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Layout / Children . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SPanel . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Colors / SColorBlock . h \" class FArrangedChildren ; class SEditableTextBox ; class SErrorText ; class STextBlock ; class SThemeColorBlocksBar ; struct FColorInfo { TSharedPtr<FLinearColor> Color ; FText Label ;)",
    "insertText": "FColorInfo(TSharedPtr<FLinearColor> InColor)"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (Color = InColor ; Label =)",
    "insertText": "FText()"
  },
  {
    "label": "FColorInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FColorInfo(TSharedPtr<FLinearColor> InColor, FText InLabel)"
  },
  {
    "label": "FColorTheme()",
    "kind": "Method",
    "detail": "Function (Color = InColor ; Label = InLabel ; } } ; class FColorTheme { public :)",
    "insertText": "FColorTheme(const FString& InName = TEXT(\"\"), const TArray< TSharedPtr<FColorInfo> >& InColors = TArray< TSharedPtr<FColorInfo> >())"
  },
  {
    "label": "GetColors()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FColorInfo>>&)",
    "insertText": "GetColors()"
  },
  {
    "label": "InsertNewColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertNewColor(TSharedPtr<FColorInfo> InColor, int32 InsertPosition)"
  },
  {
    "label": "FindApproxColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindApproxColor(const FLinearColor& InColor, float Tolerance = KINDA_SMALL_NUMBER)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAll()"
  },
  {
    "label": "RemoveColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveColor(const TSharedPtr<FLinearColor> InColor)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (FString Name ;)",
    "insertText": "DECLARE_EVENT(FColorTheme, FRefreshEvent)"
  },
  {
    "label": "OnRefresh()",
    "kind": "Method",
    "detail": "Function (FRefreshEvent&)",
    "insertText": "OnRefresh()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(bool, UsesSmallIcon) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "GetBorderStyle()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetBorderStyle()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (private : bool bBorderActivated ; } ; class SThemeColorBlock : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SThemeColorBlock) : _Color() , _ColorInfo() , _OnSelectColor() , _Parent() , _ShowTrashCallback() , _HideTrashCallback() , _UseSRGB() , _UseAlpha()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(TSharedPtr<FLinearColor>, Color) SLATE_ATTRIBUTE(TSharedPtr<FColorInfo>, ColorInfo) SLATE_EVENT(FOnLinearColorValueChanged, OnSelectColor) SLATE_ATTRIBUTE(TSharedPtr<SThemeColorBlocksBar>, Parent) SLATE_EVENT(FSimpleDelegate, ShowTrashCallback) SLATE_EVENT(FSimpleDelegate, HideTrashCallback) SLATE_ATTRIBUTE(bool, UseSRGB) SLATE_ATTRIBUTE(bool, UseAlpha) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnColorBlockRename()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnColorBlockRename()"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLabel()"
  },
  {
    "label": "SetLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLabel(const FText& NewColorLabel, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetColor()"
  },
  {
    "label": "HandleBorderColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "HandleBorderColor()"
  },
  {
    "label": "HandleBorderImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "HandleBorderImage()"
  },
  {
    "label": "GetRedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetRedText()"
  },
  {
    "label": "GetGreenText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetGreenText()"
  },
  {
    "label": "GetBlueText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBlueText()"
  },
  {
    "label": "GetAlphaText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetAlphaText()"
  },
  {
    "label": "GetHueText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetHueText()"
  },
  {
    "label": "GetSaturationText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSaturationText()"
  },
  {
    "label": "GetValueText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetValueText()"
  },
  {
    "label": "FormatToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FormatToolTipText(const FText& ColorIdentifier, float Value)"
  },
  {
    "label": "OnGetAlphaDisplayMode()",
    "kind": "Method",
    "detail": "Function (EColorBlockAlphaDisplayMode)",
    "insertText": "OnGetAlphaDisplayMode()"
  },
  {
    "label": "OnReadShowBackgroundForAlpha()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnReadShowBackgroundForAlpha()"
  },
  {
    "label": "OnGetAlphaVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "OnGetAlphaVisibility()"
  },
  {
    "label": "OnGetLabelVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "OnGetLabelVisibility()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FLinearColor> ColorPtr ; TSharedPtr<FColorInfo> ColorInfo ; TWeakPtr<SThemeColorBlocksBar> ParentPtr ; FOnLinearColorValueChanged OnSelectColor ; FSimpleDelegate ShowTrashCallback ; FSimpleDelegate HideTrashCallback ; TAttribute<bool> bUseSRGB ; TAttribute<bool> bUseAlpha ; float DistanceDragged ; } ; class SThemeColorBlocksBar : public SPanel { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SThemeColorBlocksBar) : _ColorTheme() , _OnSelectColor() , _ShowTrashCallback() , _HideTrashCallback() , _EmptyText() , _UseSRGB() , _UseAlpha()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(TSharedPtr<FColorTheme>, ColorTheme) SLATE_EVENT(FOnLinearColorValueChanged, OnSelectColor) SLATE_EVENT(FSimpleDelegate, ShowTrashCallback) SLATE_EVENT(FSimpleDelegate, HideTrashCallback) SLATE_ARGUMENT(FText, EmptyText) SLATE_ATTRIBUTE(bool, UseSRGB) SLATE_ATTRIBUTE(bool, UseAlpha) SLATE_END_ARGS() SThemeColorBlocksBar()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "AddNewColorBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewColorBlock(FLinearColor Color, int32 InsertPosition)"
  },
  {
    "label": "RemoveColorBlock()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveColorBlock(TSharedPtr<FLinearColor> ColorToRemove)"
  },
  {
    "label": "RemoveRefreshCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRefreshCallback()"
  },
  {
    "label": "AddRefreshCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRefreshCallback()"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refresh()"
  },
  {
    "label": "SetPlaceholderGrabOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaceholderGrabOffset(FVector2D GrabOffset)"
  },
  {
    "label": "DestroyPlaceholders()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DestroyPlaceholders()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (TSlotlessChildren<SThemeColorBlock> ColorBlocks ; TSharedPtr<SThemeColorBlock> NewColorBlockPlaceholder ; TSharedPtr<FLinearColor> NewColorPlaceholder ; float PlaceholderBlockOffset ; FVector2D PlaceholderInitialGrabOffset ; TSharedPtr<SWidget> EmptyHintTextBlock ; TAttribute<TSharedPtr<FColorTheme>> ColorTheme ; FOnLinearColorValueChanged OnSelectColor ; FSimpleDelegate RefreshCallback ; FDelegateHandle RefreshCallbackHandle ; FSimpleDelegate ShowTrashCallback ; FSimpleDelegate HideTrashCallback ; TAttribute<bool> bUseSRGB ; TAttribute<bool> bUseAlpha ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnCurrentThemeChanged, TSharedPtr<FColorTheme>)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_BEGIN_ARGS(SColorThemeBar) : _ColorTheme() , _OnCurrentThemeChanged() , _ShowTrashCallback() , _HideTrashCallback() , _UseSRGB() , _UseAlpha()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(TSharedPtr<FColorTheme>, ColorTheme) SLATE_EVENT(FOnCurrentThemeChanged, OnCurrentThemeChanged) SLATE_EVENT(FSimpleDelegate, ShowTrashCallback) SLATE_EVENT(FSimpleDelegate, HideTrashCallback) SLATE_ATTRIBUTE(bool, UseSRGB) SLATE_ATTRIBUTE(bool, UseAlpha) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "GetThemeName()",
    "kind": "Method",
    "detail": "Function (private : FText)",
    "insertText": "GetThemeName()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<STextBlock> ThemeNameText ; TWeakPtr<FColorTheme> ColorTheme ; FOnCurrentThemeChanged OnCurrentThemeChanged ; FSimpleDelegate ShowTrashCallback ; FSimpleDelegate HideTrashCallback ; TAttribute<bool> bUseSRGB ; TAttribute<bool> bUseAlpha ; } ; class SColorThemesViewer : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SColorThemesViewer) : _UseAlpha()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(bool, UseAlpha) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "GetCurrentColorTheme()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FColorTheme>)",
    "insertText": "GetCurrentColorTheme()"
  },
  {
    "label": "SetUseAlpha()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseAlpha(const TAttribute<bool>& InUseAlpha)"
  },
  {
    "label": "LoadColorThemesFromIni()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadColorThemesFromIni()"
  },
  {
    "label": "SaveColorThemesToIni()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveColorThemesToIni()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(SColorThemesViewer, FCurrentThemeChangedEvent)"
  },
  {
    "label": "OnCurrentThemeChanged()",
    "kind": "Method",
    "detail": "Function (FCurrentThemeChangedEvent&)",
    "insertText": "OnCurrentThemeChanged()"
  },
  {
    "label": "NewColorTheme()",
    "kind": "Method",
    "detail": "Function (private : FReply)",
    "insertText": "NewColorTheme()"
  },
  {
    "label": "DuplicateColorTheme()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "DuplicateColorTheme()"
  },
  {
    "label": "DeleteColorTheme()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "DeleteColorTheme()"
  },
  {
    "label": "AcceptThemeName()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "AcceptThemeName()"
  },
  {
    "label": "CommitThemeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitThemeName(const FText& InText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "UpdateThemeNameFromTextBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateThemeNameFromTextBox()"
  },
  {
    "label": "CanAcceptThemeName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAcceptThemeName()"
  },
  {
    "label": "ChangeThemeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeThemeName(const FText& InText)"
  },
  {
    "label": "OnGetErrorTextVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "OnGetErrorTextVisibility()"
  },
  {
    "label": "SetCurrentColorTheme()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentColorTheme(TSharedPtr<FColorTheme> NewTheme)"
  },
  {
    "label": "MenuToStandard()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "MenuToStandard()"
  },
  {
    "label": "MenuToRename()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "MenuToRename()"
  },
  {
    "label": "MenuToDelete()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "MenuToDelete()"
  },
  {
    "label": "MenuToTrash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MenuToTrash()"
  },
  {
    "label": "OnReadUseSRGB()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnReadUseSRGB()"
  },
  {
    "label": "OnReadUseAlpha()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnReadUseAlpha()"
  },
  {
    "label": "RefreshThemes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshThemes()"
  },
  {
    "label": "OnGenerateColorThemeBars()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateColorThemeBars(TSharedPtr<FColorTheme> InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetDefaultColorTheme()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FColorTheme>)",
    "insertText": "GetDefaultColorTheme(bool bCreateNew = false)"
  },
  {
    "label": "GetColorTheme()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FColorTheme>)",
    "insertText": "GetColorTheme(const FString& ThemeName)"
  },
  {
    "label": "IsColorTheme()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FColorTheme>)",
    "insertText": "IsColorTheme(const FString& ThemeName)"
  },
  {
    "label": "MakeUniqueThemeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MakeUniqueThemeName(const FString& ThemeName)"
  },
  {
    "label": "NewColorTheme()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FColorTheme>)",
    "insertText": "NewColorTheme(const FString& ThemeName, const TArray< TSharedPtr<FColorInfo> >& ThemeColors = TArray< TSharedPtr<FColorInfo> >())"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SListView<TSharedPtr<FColorTheme>>> ColorThemeList ; TSharedPtr<SBorder> Menu ; TSharedPtr<SWidget> MenuStandard ; TSharedPtr<SWidget> MenuRename ; TSharedPtr<SWidget> MenuConfirmDelete ; TSharedPtr<SWidget> MenuTrashColor ; TSharedPtr<SErrorText> ErrorText ; TSharedPtr<SEditableTextBox> RenameTextBox ; FCurrentThemeChangedEvent CurrentThemeChangedEvent ; TAttribute<bool> bUseAlpha ; TArray<TSharedPtr<FColorTheme>> ColorThemes ; TWeakPtr<FColorTheme> CurrentlySelectedThemePtr ; } ; class FColorDragDrop : public FDragDropOperation { public :)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FColorDragDrop, FDragDropOperation) virtual void OnDrop( bool bDropWasHandled, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragged(const class FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "GetDefaultDecorator()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetDefaultDecorator()"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FColorDragDrop>)",
    "insertText": "New(FLinearColor InColor, bool bSRGB, bool bUseAlpha, FSimpleDelegate TrashShowCallback = FSimpleDelegate(), FSimpleDelegate TrashHideCallback = FSimpleDelegate(), TSharedPtr<SThemeColorBlocksBar> Origin = TSharedPtr<SThemeColorBlocksBar>(), int32 OriginPosition = 0)"
  }
]