[
  {
    "label": "FTextureBuildSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureBuildSettings"
  },
  {
    "label": "FChildTextureFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChildTextureFormat"
  },
  {
    "label": "FTextureFormatCompressorCaps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureFormatCompressorCaps"
  },
  {
    "label": "FTextureEngineParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureEngineParameters"
  },
  {
    "label": "FEncodedTextureExtendedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEncodedTextureExtendedData"
  },
  {
    "label": "FEncodedTextureDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEncodedTextureDescription"
  },
  {
    "label": "ITextureTiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextureTiler"
  },
  {
    "label": "ITextureFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextureFormat"
  },
  {
    "label": "FImage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImage"
  },
  {
    "label": "FCompressedImage2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompressedImage2D"
  },
  {
    "label": "FTilerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTilerSettings"
  },
  {
    "label": "FTextureFormatCompressorCaps()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" PixelFormat . h \" # include \" Serialization / CompactBinary . h \" struct FTextureBuildSettings ; class FChildTextureFormat ; struct FTextureFormatCompressorCaps {)",
    "insertText": "FTextureFormatCompressorCaps() : MaxTextureDimension_DEPRECATED(TNumericLimits<uint32>::Max()) , NumMipsInTail_DEPRECATED(0) , ExtData_DEPRECATED(0)"
  },
  {
    "label": "GetStreamingDisabledForNonVirtualTextureProperties()",
    "kind": "Method",
    "detail": "Function (} uint32 MaxTextureDimension_DEPRECATED ; uint32 NumMipsInTail_DEPRECATED ; uint32 ExtData_DEPRECATED ; } ; struct FTextureEngineParameters { bool bEngineSupportsVolumeTextureStreaming = true ; bool bEngineSupportsTexture2DArrayStreaming = true ; int32 NumInlineDerivedMips = 7 ; } ; bool)",
    "insertText": "GetStreamingDisabledForNonVirtualTextureProperties(bool bInCubeMap, bool bInVolumeTexture, bool bInTextureArray, const FTextureEngineParameters& InEngineParameters)"
  },
  {
    "label": "GetStreamingDisabledForNonVirtualTextureProperties()",
    "kind": "Method",
    "detail": "Function (bool bAllowStreaming = true ; { const bool bDisableStreaming =)",
    "insertText": "GetStreamingDisabledForNonVirtualTextureProperties(bInCubeMap, bInVolumeTexture, bInTextureArray, InEngineParameters)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} int32 NumStreamingMips = 0 ;)",
    "insertText": "if(bAllowStreaming)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 NumMipsInTail = 0 ;)",
    "insertText": "if(InExtendedData)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (NumMipsInTail = InExtendedData -> NumMipsInTail ; } int32 NumInlineMips =)",
    "insertText": "Max(NumMipsInTail, InEngineParameters.NumInlineDerivedMips)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (NumStreamingMips =)",
    "insertText": "Max(0, InNumMips - NumInlineMips)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return NumStreamingMips ; } struct FEncodedTextureDescription { int32 TopMipSizeX ; int32 TopMipSizeY ; int32 TopMipVolumeSizeZ ; int32 ArraySlices ; EPixelFormat PixelFormat ; uint8 NumMips ; bool bCubeMap ; bool bTextureArray ; bool bVolumeTexture ; typedef TArray<FSharedBuffer,TInlineAllocator<FEncodedTextureExtendedData::MAX_TEXTURE_MIP_COUNT>> FSharedBufferMipChain ; typedef TArray<FUniqueBuffer,TInlineAllocator<FEncodedTextureExtendedData::MAX_TEXTURE_MIP_COUNT>> FUniqueBufferMipChain ; bool)",
    "insertText": "operator(const FEncodedTextureDescription& OtherTextureDescription)"
  },
  {
    "label": "GetNumSlices_WithDepth()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumSlices_WithDepth(int32 InMipIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check((bTextureArray && ArraySlices >= 1) || (!bTextureArray && ArraySlices == 1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Slices = ArraySlices ;)",
    "insertText": "if(bCubeMap)"
  },
  {
    "label": "GetNumSlices_NoDepth()",
    "kind": "Method",
    "detail": "Function (Slices* = 6 ; } return Slices ; } int32)",
    "insertText": "GetNumSlices_NoDepth()"
  },
  {
    "label": "GetMipWidth()",
    "kind": "Method",
    "detail": "Function (Slices* = 6 ; } return Slices ; } int32)",
    "insertText": "GetMipWidth(int32 InMipIndex)"
  },
  {
    "label": "GetMipHeight()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMipHeight(int32 InMipIndex)"
  },
  {
    "label": "GetMipDepth()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMipDepth(int32 InMipIndex)"
  },
  {
    "label": "GetMipWidth()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMipWidth(int32 InTextureWidth, int32 InMipIndex)"
  },
  {
    "label": "GetMipHeight()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMipHeight(int32 InTextureHeight, int32 InMipIndex)"
  },
  {
    "label": "GetMipDepth()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMipDepth(int32 InTextureDepth, int32 InMipIndex, bool bInVolumeTexture)"
  },
  {
    "label": "GetMipDimensions()",
    "kind": "Method",
    "detail": "Function (} FIntVector3)",
    "insertText": "GetMipDimensions(int32 InMipIndex)"
  },
  {
    "label": "GetMipWidth()",
    "kind": "Method",
    "detail": "Function (FIntVector3 Results ; Results . X =)",
    "insertText": "GetMipWidth(InMipIndex)"
  },
  {
    "label": "GetMipHeight()",
    "kind": "Method",
    "detail": "Function (Results . Y =)",
    "insertText": "GetMipHeight(InMipIndex)"
  },
  {
    "label": "GetMipDepth()",
    "kind": "Method",
    "detail": "Function (Results . Z =)",
    "insertText": "GetMipDepth(InMipIndex)"
  },
  {
    "label": "GetMipDimensions()",
    "kind": "Method",
    "detail": "Function (FIntVector3 MipDims =)",
    "insertText": "GetMipDimensions(InMipIndex)"
  },
  {
    "label": "Get2DImageSizeInBytes()",
    "kind": "Method",
    "detail": "Function (uint64 SliceByteCount = GPixelFormats [ PixelFormat ] .)",
    "insertText": "Get2DImageSizeInBytes(MipDims.X, MipDims.Y)"
  },
  {
    "label": "GetMipSliceSizeInBytes()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetMipSliceSizeInBytes(int32 InMipIndex)"
  },
  {
    "label": "GetMipSliceRowPitchBytes()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetMipSliceRowPitchBytes(int32 InMipIndex)"
  },
  {
    "label": "GetBlockCountForWidth()",
    "kind": "Method",
    "detail": "Function (const uint64 WidthInBlocks = GPixelFormats [ PixelFormat ] .)",
    "insertText": "GetBlockCountForWidth(GetMipWidth(InMipIndex))"
  },
  {
    "label": "GetEncodedMipIterators()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetEncodedMipIterators(const FEncodedTextureExtendedData* InExtendedData, int32& OutMipTailIndex, int32& OutMipsInTail)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutMipTailIndex = NumMips - 1 ; OutMipsInTail = 1 ;)",
    "insertText": "if(InExtendedData && InExtendedData->NumMipsInTail > 1)"
  },
  {
    "label": "GetNumEncodedMips()",
    "kind": "Method",
    "detail": "Function (OutMipsInTail = InExtendedData -> NumMipsInTail ; OutMipTailIndex = NumMips - OutMipsInTail ; } } int32)",
    "insertText": "GetNumEncodedMips(const FEncodedTextureExtendedData* InExtendedData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MipTextureDescription . TopMipSizeX = TailFirstMipDims . X ; MipTextureDescription . TopMipSizeY = TailFirstMipDims . Y ; MipTextureDescription . TopMipVolumeSizeZ = TailFirstMipDims . Z ; MipTextureDescription . NumMips = 1 ;)",
    "insertText": "if(InExtendedData && InExtendedData->NumMipsInTail && InMipIndex >= NumMips - InExtendedData->NumMipsInTail)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (MipTextureDescription . NumMips = IntCastChecked<)",
    "insertText": "uint8(InExtendedData->NumMipsInTail)"
  },
  {
    "label": "RemoveTopMips()",
    "kind": "Method",
    "detail": "Function (} return MipTextureDescription ; } FEncodedTextureDescription)",
    "insertText": "RemoveTopMips(const FEncodedTextureExtendedData* InExtendedData, int32 InRemoveCount)"
  },
  {
    "label": "GetMipDimensions()",
    "kind": "Method",
    "detail": "Function (FEncodedTextureDescription MipTextureDescription =* this ; FIntVector3 TailFirstMipDims =)",
    "insertText": "GetMipDimensions(InRemoveCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MipTextureDescription . TopMipSizeX = TailFirstMipDims . X ; MipTextureDescription . TopMipSizeY = TailFirstMipDims . Y ; MipTextureDescription . TopMipVolumeSizeZ = TailFirstMipDims . Z ; MipTextureDescription . NumMips = NumMips - InRemoveCount ;)",
    "insertText": "if(InExtendedData && InExtendedData->NumMipsInTail && InRemoveCount >= NumMips - InExtendedData->NumMipsInTail)"
  },
  {
    "label": "GetExtendedDataForTexture()",
    "kind": "Method",
    "detail": "Function (} return MipTextureDescription ; } } ; class ITextureTiler { public : FEncodedTextureExtendedData)",
    "insertText": "GetExtendedDataForTexture(const FEncodedTextureDescription& InTextureDescription, int8 InLODBias)"
  },
  {
    "label": "GetBuildFunctionName()",
    "kind": "Method",
    "detail": "Function (const FUtf8StringView)",
    "insertText": "GetBuildFunctionName()"
  },
  {
    "label": "GetDetileBuildFunctionName()",
    "kind": "Method",
    "detail": "Function (const FUtf8StringView)",
    "insertText": "GetDetileBuildFunctionName()"
  },
  {
    "label": "ProcessMipLevel()",
    "kind": "Method",
    "detail": "Function (FSharedBuffer)",
    "insertText": "ProcessMipLevel(const FEncodedTextureDescription& InTextureDescription, const FEncodedTextureExtendedData& InExtendedData, TArrayView<FMemoryView> InLinearSurfaces, int32 InMipIndex)"
  },
  {
    "label": "DetileMipChain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DetileMipChain(FEncodedTextureDescription::FUniqueBufferMipChain& OutLinearMips, FEncodedTextureDescription::FSharedBufferMipChain InTiledMips, const FEncodedTextureDescription& InTextureDescription, const FEncodedTextureExtendedData& InExtendedData, const FString& InTexturePathName)"
  },
  {
    "label": "SupportsEncodeSpeed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsEncodeSpeed(FName Format)"
  },
  {
    "label": "GetVersion()",
    "kind": "Method",
    "detail": "Function (} uint16)",
    "insertText": "GetVersion(FName Format, const FTextureBuildSettings* BuildSettings = nullptr)"
  },
  {
    "label": "GetDerivedDataKeyString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDerivedDataKeyString(const FTextureBuildSettings& InBuildSettings, int32 InMipCount, const FIntVector3& InMip0Dimensions)"
  },
  {
    "label": "GetSupportedFormats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetSupportedFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "GetEncodedPixelFormat()",
    "kind": "Method",
    "detail": "Function (} EPixelFormat)",
    "insertText": "GetEncodedPixelFormat(const FTextureBuildSettings& InBuildSettings, bool bInImageHasAlphaChannel)"
  },
  {
    "label": "CanDecodeFormat()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanDecodeFormat(EPixelFormat InPixelFormat)"
  },
  {
    "label": "CompressImageEx()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompressImageEx(const FImage* Images, const uint32 NumImages, const FTextureBuildSettings& BuildSettings, const FIntVector3& InMip0Dimensions, int32 InMip0NumSlicesNoDepth, int32 InMipIndex, int32 InMipCount, FStringView DebugTexturePathName, bool bImageHasAlphaChannel, uint32 ExtData, FCompressedImage2D& OutCompressedImage)"
  },
  {
    "label": "CompressImageTiled()",
    "kind": "Method",
    "detail": "Function (} struct FTilerSettings { } ; bool)",
    "insertText": "CompressImageTiled(const FImage* Images, uint32 NumImages, const FTextureBuildSettings& BuildSettings, FStringView DebugTexturePathName, bool bImageHasAlphaChannel, TSharedPtr<FTilerSettings>& TilerSettings, struct FCompressedImage2D& OutCompressedImage)"
  },
  {
    "label": "unimplemented()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unimplemented()"
  },
  {
    "label": "ExportGlobalFormatConfig()",
    "kind": "Method",
    "detail": "Function (} FCbObject)",
    "insertText": "ExportGlobalFormatConfig(const FTextureBuildSettings& BuildSettings)"
  },
  {
    "label": "GetAlternateTextureFormatPrefix()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetAlternateTextureFormatPrefix()"
  },
  {
    "label": "GetChildFormat()",
    "kind": "Method",
    "detail": "Function (} const FChildTextureFormat*)",
    "insertText": "GetChildFormat()"
  }
]