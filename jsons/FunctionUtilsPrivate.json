[
  {
    "label": "TDoesStaticFunctionSignatureMatchImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDoesStaticFunctionSignatureMatchImpl"
  },
  {
    "label": "TIsUHTUEnum",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUHTUEnum"
  },
  {
    "label": "TIsUHTUStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUHTUStruct"
  },
  {
    "label": "TCPPTypeToPropertyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCPPTypeToPropertyType"
  },
  {
    "label": "TDoesParamMatchImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDoesParamMatchImpl"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / UnrealType . h \" # include \" UObject / PropertyOptional . h \" namespace UE::Private { template<T> struct TDoesStaticFunctionSignatureMatchImpl ; template<T,= void> struct TIsUHTUEnum : std::false_type { } ; template<T> struct TIsUHTUEnum<T,std::void_t<)",
    "insertText": "decltype(&T::StaticEnum)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<T,= void> struct TIsUHTUStruct : std::false_type { } ; template<T> struct TIsUHTUStruct<T,std::void_t<)",
    "insertText": "decltype(&T::StaticStruct)"
  },
  {
    "label": "DoesMatchProperty()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct TCPPTypeToPropertyType { using PropertyType = std::conditional<TIsUHTUStruct<T>::value,FStructProperty,std::conditional<TIsUHTUEnum<T>::value,FEnumProperty,std::false_type>> ; } ; template<> struct TCPPTypeToPropertyType<int8> { using PropertyType = FInt8Property ; } ; template<> struct TCPPTypeToPropertyType<int16> { using PropertyType = FInt16Property ; } ; template<> struct TCPPTypeToPropertyType<int32> { using PropertyType = FIntProperty ; } ; template<> struct TCPPTypeToPropertyType<int64> { using PropertyType = FInt64Property ; } ; template<> struct TCPPTypeToPropertyType<uint8> { using PropertyType = FByteProperty ; } ; template<> struct TCPPTypeToPropertyType<uint16> { using PropertyType = FUInt16Property ; } ; template<> struct TCPPTypeToPropertyType<uint32> { using PropertyType = FUInt32Property ; } ; template<> struct TCPPTypeToPropertyType<uint64> { using PropertyType = FUInt64Property ; } ; template<> struct TCPPTypeToPropertyType<float> { using PropertyType = FFloatProperty ; } ; template<> struct TCPPTypeToPropertyType<double> { using PropertyType = FDoubleProperty ; } ; template<> struct TCPPTypeToPropertyType<bool> { using PropertyType = FBoolProperty ; } ; template<> struct TCPPTypeToPropertyType<FString> { using PropertyType = FStrProperty ; } ; template<> struct TCPPTypeToPropertyType<FName> { using PropertyType = FNameProperty ; } ; template<> struct TCPPTypeToPropertyType<FText> { using PropertyType = FTextProperty ; } ; template<T> struct TCPPTypeToPropertyType<TObjectPtr<T>> { using PropertyType = FObjectProperty ; } ; template<T> struct TCPPTypeToPropertyType<TSubclassOf<T>> { using PropertyType = FClassProperty ; } ; template<T> struct TCPPTypeToPropertyType<TSoftObjectPtr<T>> { using PropertyType = FSoftObjectProperty ; } ; template<T> struct TCPPTypeToPropertyType<TSoftClassPtr<T>> { using PropertyType = FSoftClassProperty ; } ; template<T> struct TCPPTypeToPropertyType<TWeakObjectPtr<T>> { using PropertyType = FWeakObjectProperty ; } ; template<T> struct TCPPTypeToPropertyType<TLazyObjectPtr<T>> { using PropertyType = FLazyObjectProperty ; } ; template<T> struct TCPPTypeToPropertyType<TArray<T>> { using PropertyType = FArrayProperty ; } ; template<K,V> struct TCPPTypeToPropertyType<TMap<K,V>> { using PropertyType = FMapProperty ; } ; template<T> struct TCPPTypeToPropertyType<TOptional<T>> { using PropertyType = FOptionalProperty ; } ; template<T> struct TCPPTypeToPropertyType<TScriptInterface<T>> { using PropertyType = FInterfaceProperty ; } ; template<T> struct TCPPTypeToPropertyType<TMulticastDelegate<T>> { using PropertyType = FMulticastInlineDelegateProperty ; } ; template<A,B,C> struct TCPPTypeToPropertyType<TSparseDynamicDelegate<A,B,C>> { using PropertyType = FMulticastSparseDelegateProperty ; } ; template<T> struct TCPPTypeToPropertyType<TScriptDelegate<T>> { using PropertyType = FDelegateProperty ; } ; template<T> struct TDoesParamMatchImpl { bool)",
    "insertText": "DoesMatchProperty(const FProperty* Property)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (using PropertyType = TCPPTypeToPropertyType<T>::PropertyType ; if)",
    "insertText": "constexpr(TIsUHTUStruct<T>::value)"
  },
  {
    "label": "PropertyType()",
    "kind": "Method",
    "detail": "Function (const PropertyType* SP = CastField<)",
    "insertText": "PropertyType(Property)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(TIsUHTUEnum<T>::value)"
  },
  {
    "label": "DoesReferencePropertyMatch()",
    "kind": "Method",
    "detail": "Function (} } } ; template<T> bool)",
    "insertText": "DoesReferencePropertyMatch(const T* Property, UClass* Type)"
  },
  {
    "label": "FClassProperty()",
    "kind": "Method",
    "detail": "Function (} template<> bool DoesReferencePropertyMatch<)",
    "insertText": "FClassProperty(const FClassProperty* Property, UClass* Type)"
  },
  {
    "label": "FSoftClassProperty()",
    "kind": "Method",
    "detail": "Function (} template<> bool DoesReferencePropertyMatch<)",
    "insertText": "FSoftClassProperty(const FSoftClassProperty* Property, UClass* Type)"
  },
  {
    "label": "DoesMatchProperty()",
    "kind": "Method",
    "detail": "Function (} template<template<> T,ReferenceType> struct TDoesParamMatchImpl<T<ReferenceType>> { bool)",
    "insertText": "DoesMatchProperty(const FProperty* P)"
  },
  {
    "label": "PropertyType()",
    "kind": "Method",
    "detail": "Function (using PropertyType = TCPPTypeToPropertyType<TSet<ContainedType>>::PropertyType ; const PropertyType* SetProperty = CastField<)",
    "insertText": "PropertyType(P)"
  },
  {
    "label": "DoesParamMatch()",
    "kind": "Method",
    "detail": "Function (} } ; template<Arg,. . . Args> bool)",
    "insertText": "DoesParamMatch(const FProperty* Param)"
  },
  {
    "label": "bMatches()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "bMatches(Param->Next == nullptr || !static_cast<const FProperty*>(Param->Next)->HasAnyPropertyFlags(CPF_Parm))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } template<. . . Args> struct TDoesStaticFunctionSignatureMatchImpl<)",
    "insertText": "void(Args...)"
  },
  {
    "label": "DoesMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesMatch(const UFunction* Fn)"
  },
  {
    "label": "ReturnType()",
    "kind": "Method",
    "detail": "Function (} } ; template<ReturnType,. . . Args> struct TDoesStaticFunctionSignatureMatchImpl<)",
    "insertText": "ReturnType(Args...)"
  }
]