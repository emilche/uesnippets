[
  {
    "label": "AnnexBBufferReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnnexBBufferReader"
  },
  {
    "label": "AvccBufferWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AvccBufferWriter"
  },
  {
    "label": "H264CMSampleBufferToAnnexBBuffer()",
    "kind": "Method",
    "detail": "Function (# ifndef SDK_OBJC_FRAMEWORK_CLASSES_VIDEOTOOLBOX_NALU_REWRITER_H_ # define SDK_OBJC_FRAMEWORK_CLASSES_VIDEOTOOLBOX_NALU_REWRITER_H_ # include \" modules / video_coding / codecs / h264 / include / h264 . h \" # include<CoreMedia / CoreMedia . h> # include<vector> # include \" common_video / h264 / h264_common . h \" # include \" rtc_base / buffer . h \" using webrtc::H264::NaluIndex ; namespace webrtc { bool)",
    "insertText": "H264CMSampleBufferToAnnexBBuffer(CMSampleBufferRef avcc_sample_buffer, bool is_keyframe, rtc::Buffer* annexb_buffer)"
  },
  {
    "label": "H264AnnexBBufferToCMSampleBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "H264AnnexBBufferToCMSampleBuffer(const uint8_t* annexb_buffer, size_t annexb_buffer_size, CMVideoFormatDescriptionRef video_format, CMSampleBufferRef* out_sample_buffer, CMMemoryPoolRef memory_pool)"
  },
  {
    "label": "CreateVideoFormatDescription()",
    "kind": "Method",
    "detail": "Function (CMVideoFormatDescriptionRef)",
    "insertText": "CreateVideoFormatDescription(const uint8_t* annexb_buffer, size_t annexb_buffer_size)"
  },
  {
    "label": "AnnexBBufferReader()",
    "kind": "Method",
    "detail": "Function (class AnnexBBufferReader final { public :)",
    "insertText": "AnnexBBufferReader(const uint8_t* annexb_buffer, size_t length)"
  },
  {
    "label": "AnnexBBufferReader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AnnexBBufferReader()"
  },
  {
    "label": "AnnexBBufferReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnexBBufferReader(const AnnexBBufferReader& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const AnnexBBufferReader& other)"
  },
  {
    "label": "ReadNalu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadNalu(const uint8_t** out_nalu, size_t* out_length)"
  },
  {
    "label": "BytesRemaining()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "BytesRemaining()"
  },
  {
    "label": "SeekToStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeekToStart()"
  },
  {
    "label": "SeekToNextNaluOfType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SeekToNextNaluOfType(H264::NaluType type)"
  },
  {
    "label": "FindNextNaluHeader()",
    "kind": "Method",
    "detail": "Function (private : size_t)",
    "insertText": "FindNextNaluHeader(const uint8_t* start, size_t length, size_t offset)"
  },
  {
    "label": "AvccBufferWriter()",
    "kind": "Method",
    "detail": "Function (const uint8_t* const start_ ; std::vector<NaluIndex> offsets_ ; std::vector<NaluIndex>::iterator offset_ ; const size_t length_ ; } ; class AvccBufferWriter final { public :)",
    "insertText": "AvccBufferWriter(uint8_t* const avcc_buffer, size_t length)"
  },
  {
    "label": "AvccBufferWriter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AvccBufferWriter()"
  },
  {
    "label": "AvccBufferWriter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AvccBufferWriter(const AvccBufferWriter& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const AvccBufferWriter& other)"
  },
  {
    "label": "WriteNalu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteNalu(const uint8_t* data, size_t data_size)"
  }
]