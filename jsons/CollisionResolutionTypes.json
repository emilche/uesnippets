[
  {
    "label": "TConvexContactPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConvexContactPoint"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TContactPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TContactPoint"
  },
  {
    "label": "TCArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCArray"
  },
  {
    "label": "FCollisionContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionContext"
  },
  {
    "label": "FGenericParticlePairMidPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericParticlePairMidPhase"
  },
  {
    "label": "FParticlePairMidPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticlePairMidPhase"
  },
  {
    "label": "FPBDCollisionConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraints"
  },
  {
    "label": "FPBDCollisionConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraint"
  },
  {
    "label": "FPBDCollisionConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraintHandle"
  },
  {
    "label": "FPerShapeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerShapeData"
  },
  {
    "label": "FShapePairParticlePairMidPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShapePairParticlePairMidPhase"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / ObjectPool . h \" # include \" Chaos / ParticleHandleFwd . h \" # define CHAOS_COLLISION_OBJECTPOOL_ENABLED 1 # define CHAOS_MIDPHASE_OBJECTPOOL_ENABLED 0 namespace Chaos { namespace Private { template<T> class TConvexContactPoint ; using FConvexContactPoint = TConvexContactPoint<FReal> ; using FConvexContactPointf = TConvexContactPoint<FRealSingle> ; enum class EConvexFeatureType : int8 ; } template<T> class TContactPoint ; using FContactPoint = TContactPoint<FReal> ; using FContactPointf = TContactPoint<FRealSingle> ; template<T,int32 N> class TCArray ; using FContactPointManifold = TCArray<FContactPoint,4> ; using FContactPointLargeManifold = TArray<FContactPoint> ; enum class ECollisionUpdateType { Any,Deepest } ; enum class ECollisionModifierResult { Unchanged,Modified,Disabled,} ; enum class EContactShapesType : int8 { Unknown,SphereSphere,SphereCapsule,SphereBox,SphereConvex,SphereTriMesh,SphereHeightField,SpherePlane,CapsuleCapsule,CapsuleBox,CapsuleConvex,CapsuleTriMesh,CapsuleHeightField,BoxBox,BoxConvex,BoxTriMesh,BoxHeightField,BoxPlane,ConvexConvex,ConvexTriMesh,ConvexHeightField,GenericConvexConvex,LevelSetLevelSet,NumShapesTypes } ; enum class EOneWayInteractionPairCollisionMode { IgnoreCollision,NormalCollision,SphereCollision,} ; class FCollisionContext ; class FGenericParticlePairMidPhase ; class FParticlePairMidPhase ; class FPBDCollisionConstraints ; class FPBDCollisionConstraint ; class FPBDCollisionConstraintHandle ; class FPerShapeData ; class FShapePairParticlePairMidPhase ; # if CHAOS_COLLISION_OBJECTPOOL_ENABLED using FPBDCollisionConstraintPool = TObjectPool<FPBDCollisionConstraint> ; using FPBDCollisionConstraintDeleter = TObjectPoolDeleter<FPBDCollisionConstraintPool> ; using FPBDCollisionConstraintPtr = TUniquePtr<FPBDCollisionConstraint,FPBDCollisionConstraintDeleter> ; # else using FPBDCollisionConstraintPtr = TUniquePtr<FPBDCollisionConstraint> ; # endif # if CHAOS_MIDPHASE_OBJECTPOOL_ENABLED)",
    "insertText": "static_assert(false, \"CHAOS_MIDPHASE_OBJECTPOOL_ENABLED not supported yet\")"
  }
]