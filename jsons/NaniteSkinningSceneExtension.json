[
  {
    "label": "FNaniteSkinningParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteSkinningParameters"
  },
  {
    "label": "FSkinnedSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkinnedSceneProxy"
  },
  {
    "label": "FSkinningSceneExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkinningSceneExtension"
  },
  {
    "label": "FUpdater",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUpdater"
  },
  {
    "label": "FRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderer"
  },
  {
    "label": "ETask",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETask"
  },
  {
    "label": "FHeaderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeaderData"
  },
  {
    "label": "FBuffers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuffers"
  },
  {
    "label": "FUploader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUploader"
  },
  {
    "label": "DECLARE_SCENE_EXTENSION()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SpanAllocator . h \" # include \" Containers / Map . h \" # include \" SceneExtensions . h \" # include \" Skinning / SkinningTransformProvider . h \" # include \" NaniteDefinitions . h \" # include \" RendererPrivateUtils . h \" # include \" Matrix3x4 . h \" # include \" Delegates / DelegateCombinations . h \" # include \" Delegates / Delegate . h \" # include \" Tickable . h \" class FNaniteSkinningParameters ; namespace Nanite { class FSkinnedSceneProxy ; class FSkinningSceneExtension : public ISceneExtension,public FTickableGameObject {)",
    "insertText": "DECLARE_SCENE_EXTENSION(RENDERER_API, FSkinningSceneExtension)"
  },
  {
    "label": "DECLARE_SCENE_EXTENSION_UPDATER()",
    "kind": "Method",
    "detail": "Function (public : class FUpdater : public ISceneExtensionUpdater {)",
    "insertText": "DECLARE_SCENE_EXTENSION_UPDATER(FUpdater, FSkinningSceneExtension)"
  },
  {
    "label": "FUpdater()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FUpdater(FSkinningSceneExtension& InSceneData)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "End()"
  },
  {
    "label": "PreSceneUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSceneUpdate(FRDGBuilder& GraphBuilder, const FScenePreUpdateChangeSet& ChangeSet, FSceneUniformBuffer& SceneUniforms)"
  },
  {
    "label": "PostSceneUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSceneUpdate(FRDGBuilder& GraphBuilder, const FScenePostUpdateChangeSet& ChangeSet)"
  },
  {
    "label": "PostMeshUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostMeshUpdate(FRDGBuilder& GraphBuilder, const TConstArrayView<FPrimitiveSceneInfo*>& SceneInfosWithStaticDrawListUpdate)"
  },
  {
    "label": "DECLARE_SCENE_EXTENSION_RENDERER()",
    "kind": "Method",
    "detail": "Function (private : FSkinningSceneExtension* SceneData = nullptr ; TConstArrayView<FPrimitiveSceneInfo*> AddedList ; TConstArrayView<FPrimitiveSceneInfo*> UpdateList ; TArray<int32,FSceneRenderingArrayAllocator> DirtyPrimitiveList ; const bool bEnableAsync = true ; bool bForceFullUpload = false ; bool bDefragging = false ; } ; class FRenderer : public ISceneExtensionRenderer {)",
    "insertText": "DECLARE_SCENE_EXTENSION_RENDERER(FRenderer, FSkinningSceneExtension)"
  },
  {
    "label": "FRenderer()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FRenderer(FSkinningSceneExtension& InSceneData) : SceneData(&InSceneData)"
  },
  {
    "label": "UpdateSceneUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSceneUniformBuffer(FRDGBuilder& GraphBuilder, FSceneUniformBuffer& Buffer)"
  },
  {
    "label": "ShouldCreateExtension()",
    "kind": "Method",
    "detail": "Function (private : FSkinningSceneExtension* SceneData = nullptr ; } ; class FUpdater ; bool)",
    "insertText": "ShouldCreateExtension(FScene& InScene)"
  },
  {
    "label": "InitExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitExtension(FScene& InScene)"
  },
  {
    "label": "CreateUpdater()",
    "kind": "Method",
    "detail": "Function (ISceneExtensionUpdater*)",
    "insertText": "CreateUpdater()"
  },
  {
    "label": "CreateRenderer()",
    "kind": "Method",
    "detail": "Function (ISceneExtensionRenderer*)",
    "insertText": "CreateRenderer()"
  },
  {
    "label": "GetSkinnedPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSkinnedPrimitives(TArray<FPrimitiveSceneInfo*>& OutPrimitives)"
  },
  {
    "label": "GetRefPoseProviderId()",
    "kind": "Method",
    "detail": "Function (const FSkinningTransformProvider::FProviderId&)",
    "insertText": "GetRefPoseProviderId()"
  },
  {
    "label": "GetAnimRuntimeProviderId()",
    "kind": "Method",
    "detail": "Function (const FSkinningTransformProvider::FProviderId&)",
    "insertText": "GetAnimRuntimeProviderId()"
  },
  {
    "label": "Pack()",
    "kind": "Method",
    "detail": "Function (private : enum ETask : uint32 { FreeBufferSpaceTask,InitHeaderDataTask,AllocBufferSpaceTask,UploadHeaderDataTask,UploadHierarchyDataTask,UploadTransformDataTask,NumTasks } ; struct FHeaderData { FPrimitiveSceneInfo* PrimitiveSceneInfo = nullptr ; uint32 ObjectSpaceBufferOffset = INDEX_NONE ; uint32 ObjectSpaceBufferCount = 0 ; uint32 HierarchyBufferOffset = INDEX_NONE ; uint32 HierarchyBufferCount = 0 ; uint32 TransformBufferOffset = INDEX_NONE ; uint32 TransformBufferCount = 0 ; uint16 MaxTransformCount = 0 ; uint8 MaxInfluenceCount = 0 ; uint8 UniqueAnimationCount = 1 ; uint8 bHasScale : 1 = false ; FNaniteSkinningHeader)",
    "insertText": "Pack()"
  },
  {
    "label": "FBuffers()",
    "kind": "Method",
    "detail": "Function (FNaniteSkinningHeader Output ; Output . HierarchyBufferOffset = HierarchyBufferOffset ; Output . TransformBufferOffset = TransformBufferOffset ; Output . ObjectSpaceBufferOffset = ObjectSpaceBufferOffset ; Output . MaxTransformCount = MaxTransformCount ; Output . MaxInfluenceCount = MaxInfluenceCount ; Output . UniqueAnimationCount = UniqueAnimationCount ; Output . bHasScale = bHasScale ; Output . Padding = 0 ; return Output ; } } ; class FBuffers { public :)",
    "insertText": "FBuffers()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (TPersistentByteAddressBuffer<FNaniteSkinningHeader> HeaderDataBuffer ; TPersistentByteAddressBuffer<uint32> BoneHierarchyBuffer ; TPersistentByteAddressBuffer<float> BoneObjectSpaceBuffer ; TPersistentByteAddressBuffer<FMatrix3x4> TransformDataBuffer ; } ; class FUploader { public : TByteAddressBufferScatterUploader<FNaniteSkinningHeader> HeaderDataUploader ; TByteAddressBufferScatterUploader<uint32> BoneHierarchyUploader ; TByteAddressBufferScatterUploader<float> BoneObjectSpaceUploader ; TByteAddressBufferScatterUploader<FMatrix3x4> TransformDataUploader ; } ; bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEnabled(bool bEnabled)"
  },
  {
    "label": "SyncAllTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncAllTasks()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "Wait(TaskHandles)"
  },
  {
    "label": "FinishSkinningBufferUpload()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinishSkinningBufferUpload(FRDGBuilder& GraphBuilder, FNaniteSkinningParameters* OutParams = nullptr)"
  },
  {
    "label": "PerformSkinning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformSkinning(FNaniteSkinningParameters& Parameters, FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "ProcessBufferDefragmentation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessBufferDefragmentation()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "GetTickableGameObjectWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetTickableGameObjectWorld()"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "ProvideAnimRuntimeTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProvideAnimRuntimeTransforms(FSkinningTransformProvider::FProviderContext& Context)"
  }
]