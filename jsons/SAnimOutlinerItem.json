[
  {
    "label": "FAnimObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimObject"
  },
  {
    "label": "SAnimTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimTrack"
  },
  {
    "label": "SAnimOutlinerItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimOutlinerItem"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STreeView . h \" # include \" AnimTimeline / AnimTimelineTrack . h \" class FAnimObject ; class SAnimTrack ; class SAnimOutlinerItem : public SMultiColumnTableRow<TSharedRef<FAnimTimelineTrack>> { public :)",
    "insertText": "DECLARE_DELEGATE_RetVal_ThreeParams(TSharedRef<SWidget>, FOnGenerateWidgetForColumn, const TSharedRef<FAnimTimelineTrack>&, const FName&, const TSharedRef<SAnimOutlinerItem>&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimOutlinerItem)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnGenerateWidgetForColumn, OnGenerateWidgetForColumn) SLATE_ATTRIBUTE(FText, HighlightText) SLATE_END_ARGS() ~SAnimOutlinerItem()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView, const TSharedRef<FAnimTimelineTrack>& InTrack)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float LayoutScaleMultiplier)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnId)"
  },
  {
    "label": "GetTrack()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FAnimTimelineTrack>)",
    "insertText": "GetTrack()"
  },
  {
    "label": "AddTrackAreaReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTrackAreaReference(const TSharedPtr<SAnimTrack>& InTrackWidget)"
  },
  {
    "label": "GetHighlightText()",
    "kind": "Method",
    "detail": "Function (TAttribute<FText>)",
    "insertText": "GetHighlightText()"
  },
  {
    "label": "ShouldAppearHovered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAppearHovered()"
  }
]