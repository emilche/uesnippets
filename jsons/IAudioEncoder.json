[
  {
    "label": "IAudioEncoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioEncoder"
  },
  {
    "label": "IAudioEncoder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Dsp . h \" # include \" Interfaces / IAudioFormat . h \" namespace Audio { class IAudioEncoder { public :)",
    "insertText": "IAudioEncoder(uint32 AudioBufferSlack, uint32 DataBufferSlack = 4096)"
  },
  {
    "label": "IAudioEncoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IAudioEncoder()"
  },
  {
    "label": "PushAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushAudio(const float* InBuffer, int32 NumSamples, bool bEncodeIfPossible = true)"
  },
  {
    "label": "PopData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PopData(uint8* OutData, int32 DataSize)"
  },
  {
    "label": "GetCompressedPacketSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCompressedPacketSize()"
  },
  {
    "label": "EncodeIfPossible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EncodeIfPossible()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Finalize()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Init(const FSoundQualityInfo& InQualityInfo)"
  },
  {
    "label": "SamplesRequiredPerEncode()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "SamplesRequiredPerEncode()"
  },
  {
    "label": "StartFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartFile(const FSoundQualityInfo& InQualityInfo, TArray<uint8>& OutFileStart)"
  },
  {
    "label": "EncodeChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EncodeChunk(const TArray<float>& InAudio, TArray<uint8>& OutBytes)"
  },
  {
    "label": "EndFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndFile(TArray<uint8>& OutBytes)"
  }
]