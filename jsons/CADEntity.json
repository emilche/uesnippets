[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDatabase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatabase"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FInfoEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInfoEntity"
  },
  {
    "label": "FSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSession"
  },
  {
    "label": "FSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSystem"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / CADKernelArchive . h \" # include \" Core / HaveStates . h \" # include \" Core / OrientedEntity . h \" # include \" Core / Types . h \" # include \" Geo / GeoEnum . h \" # include \" Serialization / Archive . h \" # ifdef CADKERNEL_DEV # include \" Toolkit / Core / InfoEntity . h \" # endif namespace UE::CADKernel { enum class EEntity : uint8 { None = 0,Curve,Surface,EdgeLink,VertexLink,TopologicalEdge,TopologicalFace,TopologicalLink,TopologicalLoop,TopologicalVertex,Shell,Body,Model,MeshModel,Mesh,Group,Criterion,Property,EntityTypeEnd,} ; class FDatabase ; class FEntity ; class FInfoEntity ; class FSession ; class FSystem ; class FEntity : public TSharedFromThis<FEntity>,public FHaveStates { class FDatabase ; protected : const TCHAR* TypesNames [ ] ; FIdent Id = 0 ; public : ~)",
    "insertText": "FEntity()"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delete()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "SetDeletedMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeletedMarker()"
  },
  {
    "label": "MakeShared()",
    "kind": "Method",
    "detail": "Function (} template<OtherEntity,. . . InArgTypes> TSharedRef<OtherEntity>)",
    "insertText": "MakeShared(InArgTypes&&... Args)"
  },
  {
    "label": "OtherEntity()",
    "kind": "Method",
    "detail": "Function (OtherEntity* Entity = new)",
    "insertText": "OtherEntity(Forward<InArgTypes>(Args)...)"
  },
  {
    "label": "OtherEntity()",
    "kind": "Method",
    "detail": "Function (TSharedRef<OtherEntity> NewShared = MakeShareable<)",
    "insertText": "OtherEntity(Entity)"
  },
  {
    "label": "AddEntityInDatabase()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV)",
    "insertText": "AddEntityInDatabase(NewShared)"
  },
  {
    "label": "MakeShared()",
    "kind": "Method",
    "detail": "Function (# endif return NewShared ; } template<OtherEntity> TSharedRef<OtherEntity>)",
    "insertText": "MakeShared(FCADKernelArchive& Archive)"
  },
  {
    "label": "OtherEntity()",
    "kind": "Method",
    "detail": "Function (OtherEntity* Entity = new)",
    "insertText": "OtherEntity()"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(FCADKernelArchive& Ar, TWeakPtr<FEntity>& Entity, bool bSaveSelection = true)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(FCADKernelArchive& Ar, FEntity** Entity, bool bSaveSelection = true)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (template<EntityType> void)",
    "insertText": "SerializeIdent(FCADKernelArchive& Ar, EntityType** Entity, bool bSaveSelection = true)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(Ar, (FEntity**)Entity, bSaveSelection)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (} template<EntityType> void)",
    "insertText": "SerializeIdent(FCADKernelArchive& Ar, TSharedPtr<EntityType>& Entity, bool bSaveSelection = true)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(Ar, (TSharedPtr<FEntity>&) Entity, bSaveSelection)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (} template<EntityType> void)",
    "insertText": "SerializeIdent(FCADKernelArchive& Ar, TWeakPtr<EntityType>& Entity, bool bSaveSelection = true)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(Ar, (TWeakPtr<FEntity>&) Entity, bSaveSelection)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeIdents(FCADKernelArchive& Ar, TArray<FEntity*>& Array, bool bSaveSelection = true)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdents(FCADKernelArchive& Ar, TArray<TWeakPtr<FEntity>>& Array, bool bSaveSelection = true)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdents(FCADKernelArchive& Ar, TArray<TSharedPtr<FEntity>>& Array, bool bSaveSelection = true)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdents(FCADKernelArchive& Ar, TArray<TOrientedEntity<FEntity>>& Array)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (template<EntityType> void)",
    "insertText": "SerializeIdents(FCADKernelArchive& Ar, TArray<EntityType*>& Array, bool bSaveSelection = true)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdents(Ar, (TArray<FEntity*>&) Array, bSaveSelection)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (} template<EntityType> void)",
    "insertText": "SerializeIdents(FCADKernelArchive& Ar, TArray<TWeakPtr<EntityType>>& Array, bool bSaveSelection = true)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdents(Ar, (TArray<TWeakPtr<FEntity>>&) Array, bSaveSelection)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (} template<EntityType> void)",
    "insertText": "SerializeIdents(FCADKernelArchive& Ar, TArray<TSharedPtr<EntityType>>& Array, bool bSaveSelection = true)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdents(Ar, (TArray<TSharedPtr<FEntity>>&) Array, bSaveSelection)"
  },
  {
    "label": "SpawnIdentOnEntities()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SpawnIdentOnEntities(TArray<FEntity*>& Array, FDatabase& Database)"
  },
  {
    "label": "SpawnIdent()",
    "kind": "Method",
    "detail": "Function (Entity ->)",
    "insertText": "SpawnIdent(Database)"
  },
  {
    "label": "SpawnIdentOnEntities()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SpawnIdentOnEntities(TArray<TSharedPtr<FEntity>>& Array, FDatabase& Database)"
  },
  {
    "label": "SpawnIdentOnEntities()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SpawnIdentOnEntities(TArray<TOrientedEntity<FEntity>>& Array, FDatabase& Database)"
  },
  {
    "label": "SpawnIdentOnEntities()",
    "kind": "Method",
    "detail": "Function (} } template<EntityType> void)",
    "insertText": "SpawnIdentOnEntities(TArray<TSharedPtr<EntityType>>& Array, FDatabase& Database)"
  },
  {
    "label": "SpawnIdentOnEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnIdentOnEntities((TArray<TSharedPtr<FEntity>>&) Array, Database)"
  },
  {
    "label": "ResetMarkersRecursivelyOnEntities()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetMarkersRecursivelyOnEntities(const TArray<FEntity*>& Array)"
  },
  {
    "label": "ResetMarkersRecursively()",
    "kind": "Method",
    "detail": "Function (Entity ->)",
    "insertText": "ResetMarkersRecursively()"
  },
  {
    "label": "ResetMarkersRecursivelyOnEntities()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ResetMarkersRecursivelyOnEntities(const TArray<TWeakPtr<FEntity>>& Array)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (Entity .)",
    "insertText": "Pin()->ResetMarkersRecursively()"
  },
  {
    "label": "ResetMarkersRecursivelyOnEntities()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ResetMarkersRecursivelyOnEntities(const TArray<TSharedPtr<FEntity>>& Array)"
  },
  {
    "label": "ResetMarkersRecursivelyOnEntities()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ResetMarkersRecursivelyOnEntities(const TArray<TOrientedEntity<FEntity>>& Array)"
  },
  {
    "label": "ResetMarkersRecursivelyOnEntities()",
    "kind": "Method",
    "detail": "Function (} } template<EntityType> void)",
    "insertText": "ResetMarkersRecursivelyOnEntities(const TArray<TSharedPtr<EntityType>>& Array)"
  },
  {
    "label": "ResetMarkersRecursivelyOnEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkersRecursivelyOnEntities((const TArray<TSharedPtr<FEntity>>&) Array)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar<<Id ;)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FEntity>)",
    "insertText": "Deserialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetTypeName(EEntity Type)"
  },
  {
    "label": "GetEntityType()",
    "kind": "Method",
    "detail": "Function (EEntity)",
    "insertText": "GetEntityType()"
  },
  {
    "label": "IsTopologicalEntity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTopologicalEntity()"
  },
  {
    "label": "IsTopologicalShapeEntity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTopologicalShapeEntity()"
  },
  {
    "label": "IsGeometricalEntity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGeometricalEntity()"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (} const FIdent&)",
    "insertText": "GetId()"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity& EntityInfo)"
  },
  {
    "label": "AddEntityInDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntityInDatabase(TSharedRef<FEntity> Entity)"
  },
  {
    "label": "SpawnIdent()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SpawnIdent(FDatabase& Database)"
  },
  {
    "label": "ResetMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkers()"
  },
  {
    "label": "SetId()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "SetId(FDatabase& Database)"
  }
]