[
  {
    "label": "CollationCacheEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CollationCacheEntry"
  },
  {
    "label": "CollationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CollationData"
  },
  {
    "label": "CollationSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CollationSettings"
  },
  {
    "label": "CollationTailoring",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CollationTailoring"
  },
  {
    "label": "StringSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringSearch"
  },
  {
    "label": "CollationElementIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CollationElementIterator"
  },
  {
    "label": "CollationKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CollationKey"
  },
  {
    "label": "SortKeyByteSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SortKeyByteSink"
  },
  {
    "label": "UnicodeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnicodeSet"
  },
  {
    "label": "UnicodeString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnicodeString"
  },
  {
    "label": "UVector64",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVector64"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "Collator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Collator"
  },
  {
    "label": "Attributes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Attributes"
  },
  {
    "label": "RuleBasedCollator()",
    "kind": "Method",
    "detail": "Function (# ifndef TBLCOLL_H # define TBLCOLL_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_COLLATION # include \" unicode / coll . h \" # include \" unicode / locid . h \" # include \" unicode / uiter . h \" # include \" unicode / ucol . h \" U_NAMESPACE_BEGIN struct CollationCacheEntry ; struct CollationData ; struct CollationSettings ; struct CollationTailoring ; class StringSearch ; class CollationElementIterator ; class CollationKey ; class SortKeyByteSink ; class UnicodeSet ; class UnicodeString ; class UVector64 ; class U_I18N_API RuleBasedCollator : public Collator { public :)",
    "insertText": "RuleBasedCollator(const UnicodeString& rules, UErrorCode& status)"
  },
  {
    "label": "RuleBasedCollator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RuleBasedCollator(const UnicodeString& rules, ECollationStrength collationStrength, UErrorCode& status)"
  },
  {
    "label": "RuleBasedCollator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RuleBasedCollator(const UnicodeString& rules, UColAttributeValue decompositionMode, UErrorCode& status)"
  },
  {
    "label": "RuleBasedCollator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RuleBasedCollator(const UnicodeString& rules, ECollationStrength collationStrength, UColAttributeValue decompositionMode, UErrorCode& status)"
  },
  {
    "label": "RuleBasedCollator()",
    "kind": "Method",
    "detail": "Function (# ifndef)",
    "insertText": "RuleBasedCollator(const UnicodeString &rules, UParseError &parseError, UnicodeString &reason, UErrorCode &errorCode)"
  },
  {
    "label": "RuleBasedCollator()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "RuleBasedCollator(const RuleBasedCollator& other)"
  },
  {
    "label": "RuleBasedCollator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RuleBasedCollator(const uint8_t *bin, int32_t length, const RuleBasedCollator *base, UErrorCode &status)"
  },
  {
    "label": "RuleBasedCollator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RuleBasedCollator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RuleBasedCollator&)",
    "insertText": "operator(const RuleBasedCollator& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Collator& other)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Collator*)",
    "insertText": "clone(void)"
  },
  {
    "label": "createCollationElementIterator()",
    "kind": "Method",
    "detail": "Function (CollationElementIterator*)",
    "insertText": "createCollationElementIterator(const UnicodeString& source)"
  },
  {
    "label": "createCollationElementIterator()",
    "kind": "Method",
    "detail": "Function (CollationElementIterator*)",
    "insertText": "createCollationElementIterator(const CharacterIterator& source)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (using Collator::compare ; UCollationResult)",
    "insertText": "compare(const UnicodeString& source, const UnicodeString& target, UErrorCode &status)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (UCollationResult)",
    "insertText": "compare(const UnicodeString& source, const UnicodeString& target, int32_t length, UErrorCode &status)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (UCollationResult)",
    "insertText": "compare(const char16_t* source, int32_t sourceLength, const char16_t* target, int32_t targetLength, UErrorCode &status)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (UCollationResult)",
    "insertText": "compare(UCharIterator &sIter, UCharIterator &tIter, UErrorCode &status)"
  },
  {
    "label": "compareUTF8()",
    "kind": "Method",
    "detail": "Function (UCollationResult)",
    "insertText": "compareUTF8(const StringPiece &source, const StringPiece &target, UErrorCode &status)"
  },
  {
    "label": "getCollationKey()",
    "kind": "Method",
    "detail": "Function (CollationKey&)",
    "insertText": "getCollationKey(const UnicodeString& source, CollationKey& key, UErrorCode& status)"
  },
  {
    "label": "getCollationKey()",
    "kind": "Method",
    "detail": "Function (CollationKey&)",
    "insertText": "getCollationKey(const char16_t *source, int32_t sourceLength, CollationKey& key, UErrorCode& status)"
  },
  {
    "label": "hashCode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "hashCode()"
  },
  {
    "label": "getLocale()",
    "kind": "Method",
    "detail": "Function (Locale)",
    "insertText": "getLocale(ULocDataLocaleType type, UErrorCode& status)"
  },
  {
    "label": "getRules()",
    "kind": "Method",
    "detail": "Function (const UnicodeString&)",
    "insertText": "getRules()"
  },
  {
    "label": "getVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getVersion(UVersionInfo info)"
  },
  {
    "label": "getMaxExpansion()",
    "kind": "Method",
    "detail": "Function (# ifndef int32_t)",
    "insertText": "getMaxExpansion(int32_t order)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (# endif UClassID)",
    "insertText": "getDynamicClassID(void)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "cloneRuleData()",
    "kind": "Method",
    "detail": "Function (# ifndef uint8_t*)",
    "insertText": "cloneRuleData(int32_t &length, UErrorCode &status)"
  },
  {
    "label": "cloneBinary()",
    "kind": "Method",
    "detail": "Function (# endif int32_t)",
    "insertText": "cloneBinary(uint8_t *buffer, int32_t capacity, UErrorCode &status)"
  },
  {
    "label": "getRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getRules(UColRuleOption delta, UnicodeString &buffer)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(UColAttribute attr, UColAttributeValue value, UErrorCode &status)"
  },
  {
    "label": "getAttribute()",
    "kind": "Method",
    "detail": "Function (UColAttributeValue)",
    "insertText": "getAttribute(UColAttribute attr, UErrorCode &status)"
  },
  {
    "label": "setMaxVariable()",
    "kind": "Method",
    "detail": "Function (Collator&)",
    "insertText": "setMaxVariable(UColReorderCode group, UErrorCode &errorCode)"
  },
  {
    "label": "getMaxVariable()",
    "kind": "Method",
    "detail": "Function (UColReorderCode)",
    "insertText": "getMaxVariable()"
  },
  {
    "label": "setVariableTop()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "setVariableTop(const char16_t *varTop, int32_t len, UErrorCode &status)"
  },
  {
    "label": "setVariableTop()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "setVariableTop(const UnicodeString &varTop, UErrorCode &status)"
  },
  {
    "label": "setVariableTop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setVariableTop(uint32_t varTop, UErrorCode &status)"
  },
  {
    "label": "getVariableTop()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getVariableTop(UErrorCode &status)"
  },
  {
    "label": "getTailoredSet()",
    "kind": "Method",
    "detail": "Function (UnicodeSet*)",
    "insertText": "getTailoredSet(UErrorCode &status)"
  },
  {
    "label": "getSortKey()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getSortKey(const UnicodeString& source, uint8_t *result, int32_t resultLength)"
  },
  {
    "label": "getSortKey()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getSortKey(const char16_t *source, int32_t sourceLength, uint8_t *result, int32_t resultLength)"
  },
  {
    "label": "getReorderCodes()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getReorderCodes(int32_t *dest, int32_t destCapacity, UErrorCode& status)"
  },
  {
    "label": "setReorderCodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setReorderCodes(const int32_t* reorderCodes, int32_t reorderCodesLength, UErrorCode& status)"
  },
  {
    "label": "internalCompareUTF8()",
    "kind": "Method",
    "detail": "Function (UCollationResult)",
    "insertText": "internalCompareUTF8(const char *left, int32_t leftLength, const char *right, int32_t rightLength, UErrorCode &errorCode)"
  },
  {
    "label": "internalGetShortDefinitionString()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "internalGetShortDefinitionString(const char *locale, char *buffer, int32_t capacity, UErrorCode &status)"
  },
  {
    "label": "internalNextSortKeyPart()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "internalNextSortKeyPart(UCharIterator *iter, uint32_t state[2], uint8_t *dest, int32_t count, UErrorCode &errorCode)"
  },
  {
    "label": "internalGetLocaleID()",
    "kind": "Method",
    "detail": "Function (# ifndef const char*)",
    "insertText": "internalGetLocaleID(ULocDataLocaleType type, UErrorCode &errorCode)"
  },
  {
    "label": "internalGetContractionsAndExpansions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internalGetContractionsAndExpansions(UnicodeSet *contractions, UnicodeSet *expansions, UBool addPrefixes, UErrorCode &errorCode)"
  },
  {
    "label": "internalAddContractions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internalAddContractions(UChar32 c, UnicodeSet &set, UErrorCode &errorCode)"
  },
  {
    "label": "internalBuildTailoring()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internalBuildTailoring(const UnicodeString &rules, int32_t strength, UColAttributeValue decompositionMode, UParseError *outParseError, UnicodeString *outReason, UErrorCode &errorCode)"
  },
  {
    "label": "rbcFromUCollator()",
    "kind": "Method",
    "detail": "Function (RuleBasedCollator*)",
    "insertText": "rbcFromUCollator(UCollator *uc)"
  },
  {
    "label": "rbcFromUCollator()",
    "kind": "Method",
    "detail": "Function (} const RuleBasedCollator*)",
    "insertText": "rbcFromUCollator(const UCollator *uc)"
  },
  {
    "label": "internalGetCEs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "internalGetCEs(const UnicodeString &str, UVector64 &ces, UErrorCode &errorCode)"
  },
  {
    "label": "setLocales()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "setLocales(const Locale& requestedLocale, const Locale& validLocale, const Locale& actualLocale)"
  },
  {
    "label": "RuleBasedCollator()",
    "kind": "Method",
    "detail": "Function (private : class CollationElementIterator ; class Collator ;)",
    "insertText": "RuleBasedCollator(const CollationCacheEntry *entry)"
  },
  {
    "label": "adoptTailoring()",
    "kind": "Method",
    "detail": "Function (enum Attributes { ATTR_VARIABLE_TOP = UCOL_ATTRIBUTE_COUNT,ATTR_LIMIT } ; void)",
    "insertText": "adoptTailoring(CollationTailoring *t, UErrorCode &errorCode)"
  },
  {
    "label": "doCompare()",
    "kind": "Method",
    "detail": "Function (UCollationResult)",
    "insertText": "doCompare(const char16_t *left, int32_t leftLength, const char16_t *right, int32_t rightLength, UErrorCode &errorCode)"
  },
  {
    "label": "doCompare()",
    "kind": "Method",
    "detail": "Function (UCollationResult)",
    "insertText": "doCompare(const uint8_t *left, int32_t leftLength, const uint8_t *right, int32_t rightLength, UErrorCode &errorCode)"
  },
  {
    "label": "writeSortKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeSortKey(const char16_t *s, int32_t length, SortKeyByteSink &sink, UErrorCode &errorCode)"
  },
  {
    "label": "writeIdenticalLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeIdenticalLevel(const char16_t *s, const char16_t *limit, SortKeyByteSink &sink, UErrorCode &errorCode)"
  },
  {
    "label": "getDefaultSettings()",
    "kind": "Method",
    "detail": "Function (const CollationSettings&)",
    "insertText": "getDefaultSettings()"
  },
  {
    "label": "setAttributeDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttributeDefault(int32_t attribute)"
  },
  {
    "label": "explicitlySetAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "explicitlySetAttributes((uint32_t)1 << attribute)"
  },
  {
    "label": "setAttributeExplicitly()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setAttributeExplicitly(int32_t attribute)"
  },
  {
    "label": "explicitlySetAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "explicitlySetAttributes(uint32_t)"
  },
  {
    "label": "attributeHasBeenSetExplicitly()",
    "kind": "Method",
    "detail": "Function (} UBool)",
    "insertText": "attributeHasBeenSetExplicitly(int32_t attribute)"
  },
  {
    "label": "isUnsafe()",
    "kind": "Method",
    "detail": "Function (} UBool)",
    "insertText": "isUnsafe(UChar32 c)"
  },
  {
    "label": "computeMaxExpansions()",
    "kind": "Method",
    "detail": "Function (void U_CALLCONV)",
    "insertText": "computeMaxExpansions(const CollationTailoring *t, UErrorCode &errorCode)"
  },
  {
    "label": "initMaxExpansions()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "initMaxExpansions(UErrorCode &errorCode)"
  },
  {
    "label": "setFastLatinOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFastLatinOptions(CollationSettings &ownedSettings)"
  }
]