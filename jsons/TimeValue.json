[
  {
    "label": "TimeValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeValue"
  },
  {
    "label": "TimeConversions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TimeConversions"
  },
  {
    "label": "MinTime()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_TIMEVALUE_H # define LLVM_SUPPORT_TIMEVALUE_H # include \" llvm / Support / DataTypes . h \" # include<string> namespace llvm { namespace sys { class TimeValue { public : TimeValue)",
    "insertText": "MinTime()"
  },
  {
    "label": "MaxTime()",
    "kind": "Method",
    "detail": "Function (} TimeValue)",
    "insertText": "MaxTime()"
  },
  {
    "label": "ZeroTime()",
    "kind": "Method",
    "detail": "Function (} TimeValue)",
    "insertText": "ZeroTime()"
  },
  {
    "label": "PosixZeroTime()",
    "kind": "Method",
    "detail": "Function (} TimeValue)",
    "insertText": "PosixZeroTime()"
  },
  {
    "label": "Win32ZeroTime()",
    "kind": "Method",
    "detail": "Function (} TimeValue)",
    "insertText": "Win32ZeroTime()"
  },
  {
    "label": "TimeValue()",
    "kind": "Method",
    "detail": "Function (} public : typedef int64_t SecondsType ; typedef int32_t NanoSecondsType ; enum TimeConversions { NANOSECONDS_PER_SECOND = 1 0 0 0 0 0 0 0 0 0,MICROSECONDS_PER_SECOND = 1 0 0 0 0 0 0,MILLISECONDS_PER_SECOND = 1 0 0 0,NANOSECONDS_PER_MICROSECOND = 1 0 0 0,NANOSECONDS_PER_MILLISECOND = 1 0 0 0 0 0 0,NANOSECONDS_PER_WIN32_TICK = 1 0 0 } ; public :)",
    "insertText": "TimeValue() : seconds_(0), nanos_(0)"
  },
  {
    "label": "TimeValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TimeValue(SecondsType seconds, NanoSecondsType nanos = 0) : seconds_( seconds ), nanos_( nanos)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "normalize()"
  },
  {
    "label": "TimeValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TimeValue(double new_time ) : seconds_( 0 ) , nanos_ ( 0)"
  },
  {
    "label": "SecondsType()",
    "kind": "Method",
    "detail": "Function (SecondsType integer_part = static_cast<)",
    "insertText": "SecondsType(new_time)"
  },
  {
    "label": "NanoSecondsType()",
    "kind": "Method",
    "detail": "Function (seconds_ = integer_part ; nanos_ = static_cast<)",
    "insertText": "NanoSecondsType((new_time - static_cast<double>(integer_part)) * NANOSECONDS_PER_SECOND)"
  },
  {
    "label": "now()",
    "kind": "Method",
    "detail": "Function (} TimeValue)",
    "insertText": "now()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : TimeValue&)",
    "insertText": "operator(const TimeValue& that)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } int)",
    "insertText": "operator(const TimeValue &that)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TimeValue)",
    "insertText": "operator(const TimeValue &tv1, const TimeValue &tv2)"
  },
  {
    "label": "seconds()",
    "kind": "Method",
    "detail": "Function (public : SecondsType)",
    "insertText": "seconds()"
  },
  {
    "label": "msec()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "msec()"
  },
  {
    "label": "toEpochTime()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "toEpochTime()"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "result(uint64_t)10000000 * (seconds_ - Win32ZeroTimeSeconds)"
  },
  {
    "label": "getTimespecTime()",
    "kind": "Method",
    "detail": "Function (result + = nanos_ / NANOSECONDS_PER_WIN32_TICK ; return result ; } void)",
    "insertText": "getTimespecTime(uint64_t& seconds, uint32_t& nanos)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (seconds = seconds_ - PosixZeroTimeSeconds ; nanos = nanos_ ; } std::string)",
    "insertText": "str()"
  },
  {
    "label": "seconds()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "seconds(SecondsType sec)"
  },
  {
    "label": "nanoseconds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "nanoseconds(NanoSecondsType nanos)"
  },
  {
    "label": "microseconds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "microseconds(int32_t micros)"
  },
  {
    "label": "milliseconds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "milliseconds(int32_t millis)"
  },
  {
    "label": "usec()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "usec(int64_t microseconds)"
  },
  {
    "label": "NanoSecondsType()",
    "kind": "Method",
    "detail": "Function (this -> seconds_ = microseconds / MICROSECONDS_PER_SECOND ; this -> nanos_ =)",
    "insertText": "NanoSecondsType(microseconds % MICROSECONDS_PER_SECOND)"
  },
  {
    "label": "msec()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "msec(int64_t milliseconds)"
  },
  {
    "label": "NanoSecondsType()",
    "kind": "Method",
    "detail": "Function (this -> seconds_ = milliseconds / MILLISECONDS_PER_SECOND ; this -> nanos_ =)",
    "insertText": "NanoSecondsType(milliseconds % MILLISECONDS_PER_SECOND)"
  },
  {
    "label": "fromEpochTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fromEpochTime(SecondsType seconds)"
  },
  {
    "label": "fromWin32Time()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fromWin32Time(uint64_t win32Time)"
  },
  {
    "label": "NanoSecondsType()",
    "kind": "Method",
    "detail": "Function (this -> seconds_ = win32Time / 1 0 0 0 0 0 0 0 + Win32ZeroTimeSeconds ; this -> nanos_ =)",
    "insertText": "NanoSecondsType(win32Time % 10000000)"
  },
  {
    "label": "sum()",
    "kind": "Method",
    "detail": "Function (TimeValue)",
    "insertText": "sum(tv1.seconds_ + tv2.seconds_, tv1.nanos_ + tv2.nanos_)"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (TimeValue)",
    "insertText": "difference(tv1.seconds_ - tv2.seconds_, tv1.nanos_ - tv2.nanos_)"
  }
]