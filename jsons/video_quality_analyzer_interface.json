[
  {
    "label": "VideoQualityAnalyzerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoQualityAnalyzerInterface"
  },
  {
    "label": "EncoderStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EncoderStats"
  },
  {
    "label": "DecoderStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DecoderStats"
  },
  {
    "label": "VideoQualityAnalyzerInterface()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TEST_VIDEO_QUALITY_ANALYZER_INTERFACE_H_ # define API_TEST_VIDEO_QUALITY_ANALYZER_INTERFACE_H_ # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / test / stats_observer_interface . h \" # include \" api / video / encoded_image . h \" # include \" api / video / video_frame . h \" # include \" api / video_codecs / video_encoder . h \" namespace webrtc { class VideoQualityAnalyzerInterface : public webrtc_pc_e2e::StatsObserverInterface { public : struct EncoderStats { std::string encoder_name = \" unknown \" ; uint32_t target_encode_bitrate = 0 ; } ; struct DecoderStats { std::string decoder_name = \" unknown \" ; absl::optional<int32_t> decode_time_ms = absl::nullopt ; } ; ~)",
    "insertText": "VideoQualityAnalyzerInterface()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(std::string test_case_name, rtc::ArrayView<const std::string> peer_names, int max_threads_count)"
  },
  {
    "label": "OnFrameCaptured()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "OnFrameCaptured(absl::string_view peer_name, const std::string& stream_label, const VideoFrame& frame)"
  },
  {
    "label": "OnFramePreEncode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFramePreEncode(absl::string_view peer_name, const VideoFrame& frame)"
  },
  {
    "label": "OnFrameEncoded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFrameEncoded(absl::string_view peer_name, uint16_t frame_id, const EncodedImage& encoded_image, const EncoderStats& stats, bool discarded)"
  },
  {
    "label": "OnFrameDropped()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFrameDropped(absl::string_view peer_name, EncodedImageCallback::DropReason reason)"
  },
  {
    "label": "OnFramePreDecode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFramePreDecode(absl::string_view peer_name, uint16_t frame_id, const EncodedImage& encoded_image)"
  },
  {
    "label": "OnFrameDecoded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFrameDecoded(absl::string_view peer_name, const VideoFrame& frame, const DecoderStats& stats)"
  },
  {
    "label": "OnFrameRendered()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFrameRendered(absl::string_view peer_name, const VideoFrame& frame)"
  },
  {
    "label": "OnEncoderError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEncoderError(absl::string_view peer_name, const VideoFrame& frame, int32_t error_code)"
  },
  {
    "label": "OnDecoderError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDecoderError(absl::string_view peer_name, uint16_t frame_id, int32_t error_code, const DecoderStats& stats)"
  },
  {
    "label": "OnStatsReports()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnStatsReports(absl::string_view pc_label, const rtc::scoped_refptr<const RTCStatsReport>& report)"
  },
  {
    "label": "RegisterParticipantInCall()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterParticipantInCall(absl::string_view peer_name)"
  },
  {
    "label": "UnregisterParticipantInCall()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterParticipantInCall(absl::string_view peer_name)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Stop()"
  },
  {
    "label": "GetStreamLabel()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "GetStreamLabel(uint16_t frame_id)"
  }
]