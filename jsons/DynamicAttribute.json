[
  {
    "label": "FMeshIndexMappings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshIndexMappings"
  },
  {
    "label": "TDynamicAttributeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicAttributeBase"
  },
  {
    "label": "TDynamicAttributeChangeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicAttributeChangeBase"
  },
  {
    "label": "TDynamicAttributeSetBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicAttributeSetBase"
  },
  {
    "label": "TDynamicAttributeChangeBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DynamicMesh / DynamicMesh3 . h \" # include \" MeshIndexMappings . h \" # include \" Serialization / NameAsStringProxyArchive . h \" namespace UE { namespace Geometry { struct FMeshIndexMappings ; template<ParentType> class TDynamicAttributeBase ; template<ParentType> class TDynamicAttributeChangeBase { public : ~)",
    "insertText": "TDynamicAttributeChangeBase()"
  },
  {
    "label": "SaveInitialTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SaveInitialTriangle(const TDynamicAttributeBase<ParentType>* Attribute, int TriangleID)"
  },
  {
    "label": "SaveInitialVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SaveInitialVertex(const TDynamicAttributeBase<ParentType>* Attribute, int VertexID)"
  },
  {
    "label": "StoreAllFinalTriangles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StoreAllFinalTriangles(const TDynamicAttributeBase<ParentType>* Attribute, const TArray<int>& TriangleIDs)"
  },
  {
    "label": "StoreAllFinalVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StoreAllFinalVertices(const TDynamicAttributeBase<ParentType>* Attribute, const TArray<int>& VertexIDs)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Apply(TDynamicAttributeBase<ParentType>* Attribute, bool bRevert)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} public : FName)",
    "insertText": "GetName()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (Name = NameIn ; } protected : FName Name =)",
    "insertText": "FName()"
  },
  {
    "label": "MakeCopy()",
    "kind": "Method",
    "detail": "Function (public : TDynamicAttributeBase*)",
    "insertText": "MakeCopy(ParentType* ParentIn)"
  },
  {
    "label": "MakeNew()",
    "kind": "Method",
    "detail": "Function (TDynamicAttributeBase*)",
    "insertText": "MakeNew(ParentType* ParentIn)"
  },
  {
    "label": "MakeCompactCopy()",
    "kind": "Method",
    "detail": "Function (TDynamicAttributeBase*)",
    "insertText": "MakeCompactCopy(const FCompactMaps& CompactMaps, ParentType* ParentIn)"
  },
  {
    "label": "MakeCopy()",
    "kind": "Method",
    "detail": "Function (TDynamicAttributeBase* Copy =)",
    "insertText": "MakeCopy(ParentIn)"
  },
  {
    "label": "CompactInPlace()",
    "kind": "Method",
    "detail": "Function (Copy ->)",
    "insertText": "CompactInPlace(CompactMaps)"
  },
  {
    "label": "Reparent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reparent(ParentType* NewParent)"
  },
  {
    "label": "CopyThroughMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyThroughMapping(const TDynamicAttributeBase* Source, const FMeshIndexMappings& Mapping)"
  },
  {
    "label": "CopyOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyOut(int RawID, void* Buffer, int BufferSize)"
  },
  {
    "label": "CopyIn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyIn(int RawID, void* Buffer, int BufferSize)"
  },
  {
    "label": "OnNewVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewVertex(int VertexID, bool bInserted)"
  },
  {
    "label": "OnRemoveVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRemoveVertex(int VertexID)"
  },
  {
    "label": "OnNewTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnNewTriangle(int TriangleID, bool bInserted)"
  },
  {
    "label": "OnRemoveTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRemoveTriangle(int TriangleID)"
  },
  {
    "label": "OnReverseTriOrientation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnReverseTriOrientation(int TriangleID)"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckValidity(bool bAllowNonmanifold, EValidityCheckFailMode FailMode)"
  },
  {
    "label": "OnSplitEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSplitEdge(const DynamicMeshInfo::FEdgeSplitInfo& SplitInfo)"
  },
  {
    "label": "OnFlipEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFlipEdge(const DynamicMeshInfo::FEdgeFlipInfo& FlipInfo)"
  },
  {
    "label": "OnCollapseEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCollapseEdge(const DynamicMeshInfo::FEdgeCollapseInfo& CollapseInfo)"
  },
  {
    "label": "OnPokeTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPokeTriangle(const DynamicMeshInfo::FPokeTriangleInfo& PokeInfo)"
  },
  {
    "label": "OnMergeEdges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMergeEdges(const DynamicMeshInfo::FMergeEdgesInfo& MergeInfo)"
  },
  {
    "label": "OnMergeVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMergeVertices(const DynamicMeshInfo::FMergeVerticesInfo& MergeInfo)"
  },
  {
    "label": "OnSplitVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSplitVertex(const DynamicMeshInfo::FVertexSplitInfo& SplitInfo, const TArrayView<const int>& TrianglesToUpdate)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, TDynamicAttributeBase<ParentType>& Attr)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Attr .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FUE5MainStreamObjectVersion::GUID)"
  },
  {
    "label": "ProxyArchive()",
    "kind": "Method",
    "detail": "Function (FNameAsStringProxyArchive)",
    "insertText": "ProxyArchive(Ar)"
  },
  {
    "label": "CopyParentClassData()",
    "kind": "Method",
    "detail": "Function (ProxyArchive<<Name ; } } protected : void)",
    "insertText": "CopyParentClassData(const TDynamicAttributeBase<ParentType>& Other)"
  },
  {
    "label": "RegisterExternalAttribute()",
    "kind": "Method",
    "detail": "Function (Name = Other . Name ; } } ; typedef TDynamicAttributeBase<FDynamicMesh3> FDynamicMeshAttributeBase ; template<ParentType> class TDynamicAttributeSetBase { protected : TArray<TDynamicAttributeBase<ParentType>*> RegisteredAttributes ; void)",
    "insertText": "RegisterExternalAttribute(TDynamicAttributeBase<ParentType>* Attribute)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RegisteredAttributes .)",
    "insertText": "Add(Attribute)"
  },
  {
    "label": "UnregisterExternalAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterExternalAttribute(TDynamicAttributeBase<ParentType>* Attribute)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (RegisteredAttributes .)",
    "insertText": "Remove(Attribute)"
  },
  {
    "label": "ResetRegisteredAttributes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetRegisteredAttributes()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (RegisteredAttributes .)",
    "insertText": "Reset()"
  },
  {
    "label": "TDynamicAttributeSetBase()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "TDynamicAttributeSetBase()"
  },
  {
    "label": "NumRegisteredAttributes()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "NumRegisteredAttributes()"
  },
  {
    "label": "GetRegisteredAttribute()",
    "kind": "Method",
    "detail": "Function (} TDynamicAttributeBase<ParentType>*)",
    "insertText": "GetRegisteredAttribute(int Idx)"
  },
  {
    "label": "OnNewTriangle()",
    "kind": "Method",
    "detail": "Function (A ->)",
    "insertText": "OnNewTriangle(TriangleID, bInserted)"
  },
  {
    "label": "OnNewVertex()",
    "kind": "Method",
    "detail": "Function (A ->)",
    "insertText": "OnNewVertex(VertexID, bInserted)"
  },
  {
    "label": "OnRemoveTriangle()",
    "kind": "Method",
    "detail": "Function (A ->)",
    "insertText": "OnRemoveTriangle(TriangleID)"
  },
  {
    "label": "OnRemoveVertex()",
    "kind": "Method",
    "detail": "Function (A ->)",
    "insertText": "OnRemoveVertex(VertexID)"
  },
  {
    "label": "OnReverseTriOrientation()",
    "kind": "Method",
    "detail": "Function (A ->)",
    "insertText": "OnReverseTriOrientation(TriangleID)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bValid = true ;)",
    "insertText": "for(TDynamicAttributeBase<ParentType>* A : RegisteredAttributes)"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (bValid = A ->)",
    "insertText": "CheckValidity(bAllowNonmanifold, FailMode)"
  },
  {
    "label": "OnSplitEdge()",
    "kind": "Method",
    "detail": "Function (A ->)",
    "insertText": "OnSplitEdge(SplitInfo)"
  },
  {
    "label": "OnFlipEdge()",
    "kind": "Method",
    "detail": "Function (A ->)",
    "insertText": "OnFlipEdge(FlipInfo)"
  },
  {
    "label": "OnCollapseEdge()",
    "kind": "Method",
    "detail": "Function (A ->)",
    "insertText": "OnCollapseEdge(CollapseInfo)"
  },
  {
    "label": "OnPokeTriangle()",
    "kind": "Method",
    "detail": "Function (A ->)",
    "insertText": "OnPokeTriangle(PokeInfo)"
  },
  {
    "label": "OnMergeEdges()",
    "kind": "Method",
    "detail": "Function (A ->)",
    "insertText": "OnMergeEdges(MergeInfo)"
  },
  {
    "label": "OnCollapseEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCollapseEdge(MergeInfo.EdgeCollapseInfo.GetValue())"
  },
  {
    "label": "OnMergeEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMergeEdges(MergeInfo.MergeEdgesInfo.GetValue())"
  },
  {
    "label": "OnMergeVertices()",
    "kind": "Method",
    "detail": "Function (A ->)",
    "insertText": "OnMergeVertices(MergeInfo)"
  },
  {
    "label": "OnSplitVertex()",
    "kind": "Method",
    "detail": "Function (A ->)",
    "insertText": "OnSplitVertex(SplitInfo, TrianglesToUpdate)"
  }
]