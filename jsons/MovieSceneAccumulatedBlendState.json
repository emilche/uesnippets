[
  {
    "label": "IMovieScenePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieScenePlayer"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FMovieSceneEvaluationOperand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationOperand"
  },
  {
    "label": "FMovieSceneBlendingKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneBlendingKey"
  },
  {
    "label": "FMovieSceneAccumulatedBlendState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneAccumulatedBlendState"
  },
  {
    "label": "FTokenEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTokenEntry"
  },
  {
    "label": "TTokenEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTokenEntry"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Evaluation / Blending / BlendableToken . h \" # include \" Evaluation / Blending / BlendableTokenStack . h \" # include \" Evaluation / Blending / MovieSceneBlendingActuatorID . h \" # include \" Evaluation / MovieSceneAnimTypeID . h \" # include \" Evaluation / MovieSceneEvaluationScope . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / InlineValue . h \" # include \" MovieSceneFwd . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / ObjectKey . h \" class IMovieScenePlayer ; class UObject ; struct FMovieSceneEvaluationOperand ; typedef TInlineValue<IBlendableTokenStack,6 4> FActuatorTokenStackPtr ; struct FMovieSceneBlendingKey { UObject* ObjectPtr ; FMovieSceneBlendingActuatorID ActuatorType ; uint32)",
    "insertText": "GetTypeHash(const FMovieSceneBlendingKey& InKey)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMovieSceneBlendingKey& A, const FMovieSceneBlendingKey& B)"
  },
  {
    "label": "FMovieSceneAccumulatedBlendState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneAccumulatedBlendState(const FMovieSceneAccumulatedBlendState&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneAccumulatedBlendState&)",
    "insertText": "operator(const FMovieSceneAccumulatedBlendState&)"
  },
  {
    "label": "FMovieSceneAccumulatedBlendState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneAccumulatedBlendState(FMovieSceneAccumulatedBlendState&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneAccumulatedBlendState&)",
    "insertText": "operator(FMovieSceneAccumulatedBlendState&&)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (template<DataType> void)",
    "insertText": "Add(FMovieSceneBlendingActuatorID InActuatorType, TBlendableToken<DataType>&& InToken)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (TokensToBlend .)",
    "insertText": "Emplace(TTokenEntry<DataType>(InActuatorType, MoveTemp(InToken)))"
  },
  {
    "label": "Consolidate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Consolidate(TMap<FMovieSceneBlendingKey, FActuatorTokenStackPtr>& InOutBlendState, FMovieSceneEvaluationOperand InOperand, IMovieScenePlayer& Player)"
  },
  {
    "label": "Consolidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Consolidate(TMap<FMovieSceneBlendingKey, FActuatorTokenStackPtr>& InOutBlendState)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FTokenEntry()",
    "kind": "Method",
    "detail": "Function (} private : struct FTokenEntry { ~)",
    "insertText": "FTokenEntry()"
  },
  {
    "label": "Consolidate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Consolidate(FActuatorTokenStackPtr& OutStack)"
  },
  {
    "label": "GetActuatorID()",
    "kind": "Method",
    "detail": "Function (FMovieSceneBlendingActuatorID)",
    "insertText": "GetActuatorID()"
  },
  {
    "label": "TTokenEntry()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneBlendingActuatorID ActuatorTypeID ; FMovieSceneAnimTypeID DataTypeID ; } ; template<DataType> struct TTokenEntry : FTokenEntry {)",
    "insertText": "TTokenEntry(FMovieSceneBlendingActuatorID InActuatorTypeID, TBlendableToken<DataType>&& InToken) : FTokenEntry(InActuatorTypeID, GetBlendingDataType<DataType>()) , Token(MoveTemp(InToken))"
  },
  {
    "label": "DataType()",
    "kind": "Method",
    "detail": "Function (OutStack = TBlendableTokenStack<)",
    "insertText": "DataType()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ensureMsgf(OutStack->DataTypeID == DataTypeID, TEXT(\"Data type mismatch between actuators of the same ID\")))"
  },
  {
    "label": "DataType()",
    "kind": "Method",
    "detail": "Function (TBlendableTokenStack<DataType>& TypedStack = static_cast<TBlendableTokenStack<)",
    "insertText": "DataType(OutStack.GetValue())"
  },
  {
    "label": "AddToken()",
    "kind": "Method",
    "detail": "Function (TypedStack .)",
    "insertText": "AddToken(&Token)"
  }
]