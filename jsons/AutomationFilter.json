[
  {
    "label": "FAutomationFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationFilter"
  },
  {
    "label": "IAutomationReport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAutomationReport"
  },
  {
    "label": "FAutomationFilter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IAutomationReport . h \" # include \" Misc / IFilter . h \" class FAutomationFilter : public IFilter<const TSharedPtr<class IAutomationReport>&> { public :)",
    "insertText": "FAutomationFilter() : OnlySmokeTests( false ) , ShowErrors( false ) , ShowWarnings( false ) , OnlyExcludedTests ( false)"
  },
  {
    "label": "SetShowWarnings()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetShowWarnings(const bool InShowWarnings)"
  },
  {
    "label": "ShouldShowWarnings()",
    "kind": "Method",
    "detail": "Function (ShowWarnings = InShowWarnings ; } const bool)",
    "insertText": "ShouldShowWarnings()"
  },
  {
    "label": "ShouldShowErrors()",
    "kind": "Method",
    "detail": "Function (ShowErrors = InShowErrors ; } const bool)",
    "insertText": "ShouldShowErrors()"
  },
  {
    "label": "OnlyShowSmokeTests()",
    "kind": "Method",
    "detail": "Function (OnlySmokeTests = InOnlySmokeTests ; } const bool)",
    "insertText": "OnlyShowSmokeTests()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (OnlyExcludedTests = InOnlyExcludedTests ; } public :)",
    "insertText": "DECLARE_DERIVED_EVENT(FAutomationFilter, IFilter< const TSharedPtr< class IAutomationReport >& >::FChangedEvent, FChangedEvent)"
  },
  {
    "label": "OnChanged()",
    "kind": "Method",
    "detail": "Function (FChangedEvent&)",
    "insertText": "OnChanged()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool FilterPassed = true ;)",
    "insertText": "if(OnlySmokeTests)"
  },
  {
    "label": "HasWarnings()",
    "kind": "Method",
    "detail": "Function (FilterPassed = InReport ->)",
    "insertText": "HasWarnings() || InReport->HasErrors()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!ShowWarnings && ShowErrors)"
  },
  {
    "label": "HasErrors()",
    "kind": "Method",
    "detail": "Function (FilterPassed = InReport ->)",
    "insertText": "HasErrors()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ShowWarnings && !ShowErrors)"
  },
  {
    "label": "HasWarnings()",
    "kind": "Method",
    "detail": "Function (FilterPassed = InReport ->)",
    "insertText": "HasWarnings() && !InReport->HasErrors()"
  }
]