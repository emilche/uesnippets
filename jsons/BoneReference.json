[
  {
    "label": "FBoneContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneContainer"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FBoneReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneReference"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BoneIndices . h \" # include \" BoneReference . generated . h \" struct FBoneContainer ; class USkeleton ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category = BoneReference)"
  },
  {
    "label": "FBoneReference()",
    "kind": "Method",
    "detail": "Function (int32 BoneIndex : 3 1 ; uint32 bUseSkeletonIndex : 1 ; FCompactPoseBoneIndex CachedCompactPoseIndex ;)",
    "insertText": "FBoneReference() : BoneName(NAME_None) , BoneIndex(INDEX_NONE) , bUseSkeletonIndex(false) , CachedCompactPoseIndex(INDEX_NONE)"
  },
  {
    "label": "FBoneReference()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBoneReference(const FName& InBoneName) : BoneName(InBoneName) , BoneIndex(INDEX_NONE) , bUseSkeletonIndex(false) , CachedCompactPoseIndex(INDEX_NONE)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FBoneReference& Other)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(const USkeleton* Skeleton)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "InvalidateCachedBoneIndex()",
    "kind": "Method",
    "detail": "Function (BoneName = NAME_None ;)",
    "insertText": "InvalidateCachedBoneIndex()"
  },
  {
    "label": "HasValidSetup()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasValidSetup()"
  },
  {
    "label": "IsValidToEvaluate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidToEvaluate(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "IsValidToEvaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidToEvaluate()"
  },
  {
    "label": "FCompactPoseBoneIndex()",
    "kind": "Method",
    "detail": "Function (BoneIndex = INDEX_NONE ; CachedCompactPoseIndex =)",
    "insertText": "FCompactPoseBoneIndex(INDEX_NONE)"
  },
  {
    "label": "GetSkeletonPoseIndex()",
    "kind": "Method",
    "detail": "Function (} FSkeletonPoseBoneIndex)",
    "insertText": "GetSkeletonPoseIndex(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "GetMeshPoseIndex()",
    "kind": "Method",
    "detail": "Function (FMeshPoseBoneIndex)",
    "insertText": "GetMeshPoseIndex(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "GetCompactPoseIndex()",
    "kind": "Method",
    "detail": "Function (FCompactPoseBoneIndex)",
    "insertText": "GetCompactPoseIndex(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FBoneReference& B)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  }
]