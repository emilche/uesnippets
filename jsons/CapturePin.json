[
  {
    "label": "FAVIWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAVIWriter"
  },
  {
    "label": "FCapturedFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCapturedFrame"
  },
  {
    "label": "FCapturePin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCapturePin"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class FAVIWriter ; struct FCapturedFrame ; # if PLATFORM_WINDOWS&& WITH_UNREAL_DEVELOPER_TOOLS # include \" Windows / AllowWindowsPlatformTypes . h \" typedef TCHAR* PTCHAR ; THIRD_PARTY_INCLUDES_START # if)",
    "insertText": "defined(__clang__) #pragma clang diagnostic push #pragma clang diagnostic ignored \"-Woverloaded-virtual\" #else #pragma warning(push) #pragma warning(disable: 4263) #pragma warning(disable: 4264) #if USING_CODE_ANALYSIS #pragma warning(disable: 6101) #pragma warning(disable: 6509) #pragma warning(disable: 28204) #endif #endif #include <streams.h> #if defined(__clang__) #pragma clang diagnostic pop #else #pragma warning(pop)"
  },
  {
    "label": "ProcessFrames()",
    "kind": "Method",
    "detail": "Function (struct FCapturedFrame ; class FCapturePin : public CSourceStream { protected : const REFERENCE_TIME FrameLength ; int32 ImageHeight ; int32 ImageWidth ; CCritSec SharedState ; const FAVIWriter& Writer ; const FCapturedFrame* CurrentFrame ; TOptional<HRESULT>)",
    "insertText": "ProcessFrames()"
  },
  {
    "label": "FCapturePin()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FCapturePin(HRESULT *phr, CSource *pFilter, const FAVIWriter& InWriter)"
  },
  {
    "label": "FCapturePin()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCapturePin()"
  },
  {
    "label": "DecideBufferSize()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DecideBufferSize(IMemAllocator *pAlloc, ALLOCATOR_PROPERTIES *pRequest)"
  },
  {
    "label": "FillBuffer()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "FillBuffer(IMediaSample *pSample)"
  },
  {
    "label": "DoBufferProcessingLoop()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DoBufferProcessingLoop(void)"
  },
  {
    "label": "SetMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SetMediaType(const CMediaType *pMediaType)"
  },
  {
    "label": "CheckMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CheckMediaType(const CMediaType *pMediaType)"
  },
  {
    "label": "GetMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetMediaType(int32 iPosition, CMediaType *pmt)"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Notify(IBaseFilter *pSelf, Quality q)"
  }
]