[
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "LoadInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoadInst"
  },
  {
    "label": "StoreInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StoreInst"
  },
  {
    "label": "VAArgInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VAArgInst"
  },
  {
    "label": "AliasSetTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasSetTracker"
  },
  {
    "label": "AliasSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasSet"
  },
  {
    "label": "PointerRec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerRec"
  },
  {
    "label": "AccessLattice",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AccessLattice"
  },
  {
    "label": "AliasLattice",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AliasLattice"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator"
  },
  {
    "label": "ilist_sentinel_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_sentinel_traits"
  },
  {
    "label": "ASTCallbackVH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ASTCallbackVH"
  },
  {
    "label": "ASTCallbackVHDenseMapInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ASTCallbackVHDenseMapInfo"
  },
  {
    "label": "PointerRec()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_ALIASSETTRACKER_H # define LLVM_ANALYSIS_ALIASSETTRACKER_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / ilist . h \" # include \" llvm / ADT / ilist_node . h \" # include \" llvm / IR / Metadata . h \" # include \" llvm / IR / ValueHandle . h \" # include<vector> namespace llvm { class AliasAnalysis ; class LoadInst ; class StoreInst ; class VAArgInst ; class AliasSetTracker ; class AliasSet ; class AliasSet : public ilist_node<AliasSet> { class AliasSetTracker ; class PointerRec { Value* Val ; PointerRec** PrevInList,* NextInList ; AliasSet* AS ; uint64_t Size ; AAMDNodes AAInfo ; public :)",
    "insertText": "PointerRec(Value *V) : Val(V), PrevInList(nullptr), NextInList(nullptr), AS(nullptr), Size(0), AAInfo(DenseMapInfo<AAMDNodes>::getEmptyKey())"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "getValue()"
  },
  {
    "label": "updateSizeAndAAInfo()",
    "kind": "Method",
    "detail": "Function (PrevInList = PIL ; return& NextInList ; } void)",
    "insertText": "updateSizeAndAAInfo(uint64_t NewSize, const AAMDNodes &NewAAInfo)"
  },
  {
    "label": "getSize()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getSize()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(AS && \"No AliasSet yet!\")"
  },
  {
    "label": "getForwardedTarget()",
    "kind": "Method",
    "detail": "Function (AliasSet* OldAS = AS ; AS = OldAS ->)",
    "insertText": "getForwardedTarget(AST)"
  },
  {
    "label": "addRef()",
    "kind": "Method",
    "detail": "Function (AS ->)",
    "insertText": "addRef()"
  },
  {
    "label": "dropRef()",
    "kind": "Method",
    "detail": "Function (OldAS ->)",
    "insertText": "dropRef(AST)"
  },
  {
    "label": "setAliasSet()",
    "kind": "Method",
    "detail": "Function (} return AS ; } void)",
    "insertText": "setAliasSet(AliasSet *as)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!AS && \"Already have an alias set!\")"
  },
  {
    "label": "eraseFromList()",
    "kind": "Method",
    "detail": "Function (AS = as ; } void)",
    "insertText": "eraseFromList()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* PrevInList = NextInList ;)",
    "insertText": "if(AS->PtrListEnd == &NextInList)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (AS -> PtrListEnd = PrevInList ;)",
    "insertText": "assert(*AS->PtrListEnd == nullptr && \"List not terminated right!\")"
  },
  {
    "label": "dropRef()",
    "kind": "Method",
    "detail": "Function (+ + RefCount ; } void)",
    "insertText": "dropRef(AliasSetTracker &AST)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(RefCount >= 1 && \"Invalid reference count detected!\")"
  },
  {
    "label": "getUnknownInst()",
    "kind": "Method",
    "detail": "Function (} Instruction*)",
    "insertText": "getUnknownInst(unsigned i)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(i < UnknownInsts.size())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (class iterator ; iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (class iterator { PointerRec* CurNode ; public : using iterator_category = std::forward_iterator_tag ; using value_type = PointerRec ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ;)",
    "insertText": "iterator(PointerRec *CN = nullptr) : CurNode(CN)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const iterator& x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} value_type&)",
    "insertText": "operator()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(CurNode && \"Dereferencing AliasSet.end()!\")"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "getPointer()"
  },
  {
    "label": "getAAInfo()",
    "kind": "Method",
    "detail": "Function (} AAMDNodes)",
    "insertText": "getAAInfo()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(CurNode && \"Advancing past AliasSet.end()!\")"
  },
  {
    "label": "getNext()",
    "kind": "Method",
    "detail": "Function (CurNode = CurNode ->)",
    "insertText": "getNext()"
  },
  {
    "label": "AliasSet()",
    "kind": "Method",
    "detail": "Function (iterator tmp =* this ; + +* this ; return tmp ; } } ; private : struct ilist_sentinel_traits<AliasSet> ;)",
    "insertText": "AliasSet() : PtrList(nullptr), PtrListEnd(&PtrList), Forward(nullptr), RefCount(0), Access(NoAccess), Alias(SetMustAlias), Volatile(false)"
  },
  {
    "label": "AliasSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AliasSet(const AliasSet &AS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const AliasSet &AS)"
  },
  {
    "label": "getSomePointer()",
    "kind": "Method",
    "detail": "Function (PointerRec*)",
    "insertText": "getSomePointer()"
  },
  {
    "label": "addPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPointer(AliasSetTracker &AST, PointerRec &Entry, uint64_t Size, const AAMDNodes &AAInfo, bool KnownMustAlias = false)"
  },
  {
    "label": "addUnknownInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addUnknownInst(Instruction *I, AliasAnalysis &AA)"
  },
  {
    "label": "removeUnknownInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeUnknownInst(AliasSetTracker &AST, Instruction *I)"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (UnknownInsts [ i ] = UnknownInsts .)",
    "insertText": "back()"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (UnknownInsts .)",
    "insertText": "pop_back()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - i ; - - e ; })",
    "insertText": "if(!WasEmpty && UnknownInsts.empty()) dropRef(AST)"
  },
  {
    "label": "setVolatile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setVolatile()"
  },
  {
    "label": "aliasesPointer()",
    "kind": "Method",
    "detail": "Function (Volatile = true ; } public : bool)",
    "insertText": "aliasesPointer(const Value *Ptr, uint64_t Size, const AAMDNodes &AAInfo, AliasAnalysis &AA)"
  },
  {
    "label": "aliasesUnknownInst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "aliasesUnknownInst(const Instruction *Inst, AliasAnalysis &AA)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const AliasSet &AS)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (AS .)",
    "insertText": "print(OS)"
  },
  {
    "label": "allUsesReplacedWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allUsesReplacedWith(Value *)"
  },
  {
    "label": "ASTCallbackVH()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ASTCallbackVH(Value *V, AliasSetTracker *AST = nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ASTCallbackVH&)",
    "insertText": "operator(Value *V)"
  },
  {
    "label": "AliasSetTracker()",
    "kind": "Method",
    "detail": "Function (} ; struct ASTCallbackVHDenseMapInfo : public DenseMapInfo<Value*> { } ; AliasAnalysis& AA ; ilist<AliasSet> AliasSets ; typedef DenseMap<ASTCallbackVH,AliasSet::PointerRec*,ASTCallbackVHDenseMapInfo> PointerMapType ; PointerMapType PointerMap ; public :)",
    "insertText": "AliasSetTracker(AliasAnalysis &aa) : AA(aa)"
  },
  {
    "label": "AliasSetTracker()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "AliasSetTracker()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "add(Value *Ptr, uint64_t Size, const AAMDNodes &AAInfo)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "add(LoadInst *LI)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "add(StoreInst *SI)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "add(VAArgInst *VAAI)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "add(Instruction *I)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(BasicBlock &BB)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(const AliasSetTracker &AST)"
  },
  {
    "label": "addUnknown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addUnknown(Instruction *I)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "remove(Value *Ptr, uint64_t Size, const AAMDNodes &AAInfo)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "remove(LoadInst *LI)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "remove(StoreInst *SI)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "remove(VAArgInst *VAAI)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "remove(Instruction *I)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remove(AliasSet &AS)"
  },
  {
    "label": "removeUnknown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "removeUnknown(Instruction *I)"
  },
  {
    "label": "getAliasSets()",
    "kind": "Method",
    "detail": "Function (const ilist<AliasSet>&)",
    "insertText": "getAliasSets()"
  },
  {
    "label": "getAliasSetForPointerIfExists()",
    "kind": "Method",
    "detail": "Function (AliasSet*)",
    "insertText": "getAliasSetForPointerIfExists(const Value *P, uint64_t Size, const AAMDNodes &AAInfo)"
  },
  {
    "label": "containsPointer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "containsPointer(const Value *P, uint64_t Size, const AAMDNodes &AAInfo)"
  },
  {
    "label": "containsUnknown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "containsUnknown(const Instruction *I)"
  },
  {
    "label": "getAliasAnalysis()",
    "kind": "Method",
    "detail": "Function (AliasAnalysis&)",
    "insertText": "getAliasAnalysis()"
  },
  {
    "label": "copyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyValue(Value *From, Value *To)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(raw_ostream &OS)"
  },
  {
    "label": "removeAliasSet()",
    "kind": "Method",
    "detail": "Function (private : class AliasSet ; void)",
    "insertText": "removeAliasSet(AliasSet *AS)"
  },
  {
    "label": "getEntryFor()",
    "kind": "Method",
    "detail": "Function (AliasSet::PointerRec&)",
    "insertText": "getEntryFor(Value *V)"
  },
  {
    "label": "ASTCallbackVH()",
    "kind": "Method",
    "detail": "Function (AliasSet::PointerRec*& Entry = PointerMap [)",
    "insertText": "ASTCallbackVH(V, this)"
  },
  {
    "label": "getAliasSetForPointer()",
    "kind": "Method",
    "detail": "Function (NewSet = false ; AliasSet& AS =)",
    "insertText": "getAliasSetForPointer(P, Size, AAInfo, &NewSet)"
  },
  {
    "label": "findAliasSetForPointer()",
    "kind": "Method",
    "detail": "Function (AS . Access | = E ; return AS ; } AliasSet*)",
    "insertText": "findAliasSetForPointer(const Value *Ptr, uint64_t Size, const AAMDNodes &AAInfo)"
  },
  {
    "label": "findAliasSetForUnknownInst()",
    "kind": "Method",
    "detail": "Function (AliasSet*)",
    "insertText": "findAliasSetForUnknownInst(Instruction *Inst)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const AliasSetTracker &AST)"
  }
]