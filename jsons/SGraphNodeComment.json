[
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "SCommentBubble",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCommentBubble"
  },
  {
    "label": "SGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphNode"
  },
  {
    "label": "UEdGraphNode_Comment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode_Comment"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "FGraphNodeMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphNodeMetaData"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Input / Reply . h \" # include \" Layout / SlateRect . h \" # include \" Math / Vector2D . h \" # include \" SGraphNodeResizable . h \" # include \" SNodePanel . h \" # include \" Styling / SlateColor . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" class FDragDropEvent ; class SBorder ; class SCommentBubble ; class SGraphNode ; class UEdGraphNode_Comment ; struct FGeometry ; struct FPointerEvent ; struct FSlateBrush ; class SGraphNodeComment : public SGraphNodeResizable { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphNodeComment)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() virtual FReply OnMouseButtonDoubleClick( const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "GetShadowBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetShadowBrush(bool bSelected)"
  },
  {
    "label": "GetOverlayBrushes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOverlayBrushes(bool bSelected, const FVector2D WidgetSize, TArray<FOverlayBrushInfo>& Brushes)"
  },
  {
    "label": "ShouldAllowCulling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAllowCulling()"
  },
  {
    "label": "EndUserInteraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndUserInteraction()"
  },
  {
    "label": "GetNodeComment()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNodeComment()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "IsNameReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNameReadOnly()"
  },
  {
    "label": "GetCommentColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetCommentColor()"
  },
  {
    "label": "RequestRenameOnSpawn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestRenameOnSpawn()"
  },
  {
    "label": "RequestRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRename()"
  },
  {
    "label": "ApplyRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRename()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs, UEdGraphNode_Comment* InNode)"
  },
  {
    "label": "CanBeSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeSelected(const FVector2D& MousePositionInNode)"
  },
  {
    "label": "GetDesiredSizeForMarquee()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetDesiredSizeForMarquee()"
  },
  {
    "label": "GetTitleRect()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "GetTitleRect()"
  },
  {
    "label": "UpdateGraphNode()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateGraphNode()"
  },
  {
    "label": "PopulateMetaTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateMetaTag(class FGraphNodeMetaData* TagMeta)"
  },
  {
    "label": "HandleSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSelection(bool bIsSelected, bool bUpdateNodesUnderComment = false)"
  },
  {
    "label": "IsNodeUnderComment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeUnderComment(UEdGraphNode_Comment* InCommentNode, const TSharedRef<SGraphNode> InNodeWidget)"
  },
  {
    "label": "MoveTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveTo(const FVector2D& NewPosition, FNodeSet& NodeFilter, bool bMarkDirty = true)"
  },
  {
    "label": "GetTitleBarHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTitleBarHeight()"
  },
  {
    "label": "GetHitTestingBorder()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "GetHitTestingBorder()"
  },
  {
    "label": "GetNodeMaximumSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetNodeMaximumSize()"
  },
  {
    "label": "GetCommentBodyColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetCommentBodyColor()"
  },
  {
    "label": "GetCommentTitleBarColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetCommentTitleBarColor()"
  },
  {
    "label": "GetCommentBubbleColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetCommentBubbleColor()"
  },
  {
    "label": "GetWrapAt()",
    "kind": "Method",
    "detail": "Function (private : float)",
    "insertText": "GetWrapAt()"
  }
]