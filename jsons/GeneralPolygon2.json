[
  {
    "label": "TGeneralPolygon2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGeneralPolygon2"
  },
  {
    "label": "TGeneralPolygon2()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / UnrealTemplate . h \" # include \" Math / UnrealMath . h \" # include \" VectorTypes . h \" # include \" Polygon2 . h \" # include \" BoxTypes . h \" # include \" MatrixTypes . h \" # include \" MathUtil . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<T> class TGeneralPolygon2 { protected : TPolygon2<T> Outer ; bool bOuterIsCW ; TArray<TPolygon2<T>> Holes ; public :)",
    "insertText": "TGeneralPolygon2()"
  },
  {
    "label": "TGeneralPolygon2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TGeneralPolygon2(const TPolygon2<T>& ToSetOuter) : Outer(ToSetOuter)"
  },
  {
    "label": "IsClockwise()",
    "kind": "Method",
    "detail": "Function (bOuterIsCW = ToSetOuter .)",
    "insertText": "IsClockwise()"
  },
  {
    "label": "SetOuter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOuter(const TPolygon2<T>& ToSetOuter)"
  },
  {
    "label": "SetOuterWithOrientation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOuterWithOrientation(const TPolygon2<T>& ToSetOuter, bool bToSetOuterIsCW)"
  },
  {
    "label": "GetOuter()",
    "kind": "Method",
    "detail": "Function (this -> Outer = ToSetOuter ; this -> bOuterIsCW = bToSetOuterIsCW ; } const TPolygon2<T>&)",
    "insertText": "GetOuter()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Holes .)",
    "insertText": "Empty()"
  },
  {
    "label": "HasHoles()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasHoles()"
  },
  {
    "label": "FilterHoles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FilterHoles(TFunctionRef<bool(const TPolygon2<T>&)> RemoveHolePredicateFunc)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NumHoles = Holes .)",
    "insertText": "Num()"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (Holes .)",
    "insertText": "RemoveAtSwap(k)"
  },
  {
    "label": "SignedArea()",
    "kind": "Method",
    "detail": "Function (k - - ; NumHoles - - ; } } } double)",
    "insertText": "SignedArea()"
  },
  {
    "label": "HoleUnsignedArea()",
    "kind": "Method",
    "detail": "Function (} return AreaSum ; } double)",
    "insertText": "HoleUnsignedArea()"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (AreaSum + =)",
    "insertText": "Abs(Hole.SignedArea())"
  },
  {
    "label": "Perimeter()",
    "kind": "Method",
    "detail": "Function (} return AreaSum ; } double)",
    "insertText": "Perimeter()"
  },
  {
    "label": "Bounds()",
    "kind": "Method",
    "detail": "Function (} return PerimSum ; } TAxisAlignedBox2<T>)",
    "insertText": "Bounds()"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (Box .)",
    "insertText": "Contain(Hole.Bounds())"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (} return Box ; } void)",
    "insertText": "Translate(TVector2<T> translate)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (Outer .)",
    "insertText": "Translate(translate)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Scale(TVector2<T> scale, TVector2<T> origin)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (Outer .)",
    "insertText": "Scale(scale, origin)"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Transform(const TFunction<TVector2<T> (const TVector2<T>&)>& TransformFunc)"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (Outer .)",
    "insertText": "Transform(TransformFunc)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reverse()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bOuterIsCW = ! bOuterIsCW ;)",
    "insertText": "for(TPolygon2<T>& Hole : Holes)"
  },
  {
    "label": "OuterIsClockwise()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "OuterIsClockwise()"
  },
  {
    "label": "GetSegmentPoint()",
    "kind": "Method",
    "detail": "Function (} return Holes [ iHoleIndex ] .)",
    "insertText": "GetSegmentPoint(iSegment, fSegT)"
  },
  {
    "label": "Segment()",
    "kind": "Method",
    "detail": "Function (} TSegment2<T>)",
    "insertText": "Segment(int iSegment, int iHoleIndex = -1)"
  },
  {
    "label": "Segment()",
    "kind": "Method",
    "detail": "Function (} return Holes [ iHoleIndex ] .)",
    "insertText": "Segment(iSegment)"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (} TVector2<T>)",
    "insertText": "GetNormal(int iSegment, double segT, int iHoleIndex = -1)"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (} return Holes [ iHoleIndex ] .)",
    "insertText": "GetNormal(iSegment, segT)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "DistanceSquared(TVector2<T> p, int &iHoleIndex, int &iNearSeg, double &fNearSegT)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (iNearSeg = iHoleIndex = - 1 ; fNearSegT = TMathUtil<T>::MaxReal ; double dist = Outer .)",
    "insertText": "DistanceSquared(p, iNearSeg, fNearSegT)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (int seg ; double segt ; double holedist = Holes [ i ] .)",
    "insertText": "DistanceSquared(p, seg, segt)"
  },
  {
    "label": "Simplify()",
    "kind": "Method",
    "detail": "Function (dist = holedist ; iHoleIndex = i ; iNearSeg = seg ; fNearSegT = segt ; } } return dist ; } void)",
    "insertText": "Simplify(double ClusterTol = 0.0001, double LineDeviationTol = 0.01)"
  },
  {
    "label": "Simplify()",
    "kind": "Method",
    "detail": "Function (Outer .)",
    "insertText": "Simplify(ClusterTol, LineDeviationTol)"
  },
  {
    "label": "VtxNormalOffset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "VtxNormalOffset(T OffsetDistance, bool bUseFaceAvg = false)"
  },
  {
    "label": "VtxNormalOffset()",
    "kind": "Method",
    "detail": "Function (Outer .)",
    "insertText": "VtxNormalOffset(OffsetDistance, bUseFaceAvg)"
  }
]