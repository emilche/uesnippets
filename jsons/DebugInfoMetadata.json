[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TypedDINodeRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TypedDINodeRef"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "MapTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MapTy"
  },
  {
    "label": "DITypeRefArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DITypeRefArray"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator"
  },
  {
    "label": "DINode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DINode"
  },
  {
    "label": "LLVMContextImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContextImpl"
  },
  {
    "label": "MDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDNode"
  },
  {
    "label": "Ty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Ty"
  },
  {
    "label": "DIFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DIFlags"
  },
  {
    "label": "simplify_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "simplify_type"
  },
  {
    "label": "GenericDINode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericDINode"
  },
  {
    "label": "DISubrange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DISubrange"
  },
  {
    "label": "DIEnumerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIEnumerator"
  },
  {
    "label": "DIScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIScope"
  },
  {
    "label": "DIFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIFile"
  },
  {
    "label": "DIType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIType"
  },
  {
    "label": "DIBasicType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIBasicType"
  },
  {
    "label": "DIDerivedTypeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIDerivedTypeBase"
  },
  {
    "label": "DIDerivedType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIDerivedType"
  },
  {
    "label": "DICompositeTypeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DICompositeTypeBase"
  },
  {
    "label": "DICompositeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DICompositeType"
  },
  {
    "label": "DISubroutineType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DISubroutineType"
  },
  {
    "label": "DICompileUnit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DICompileUnit"
  },
  {
    "label": "DILocalScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DILocalScope"
  },
  {
    "label": "DILocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DILocation"
  },
  {
    "label": "DISubprogram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DISubprogram"
  },
  {
    "label": "DILexicalBlockBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DILexicalBlockBase"
  },
  {
    "label": "DILexicalBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DILexicalBlock"
  },
  {
    "label": "DILexicalBlockFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DILexicalBlockFile"
  },
  {
    "label": "DINamespace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DINamespace"
  },
  {
    "label": "DIModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIModule"
  },
  {
    "label": "DITemplateParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DITemplateParameter"
  },
  {
    "label": "DITemplateTypeParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DITemplateTypeParameter"
  },
  {
    "label": "DITemplateValueParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DITemplateValueParameter"
  },
  {
    "label": "DIVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIVariable"
  },
  {
    "label": "DIGlobalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIGlobalVariable"
  },
  {
    "label": "DILocalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DILocalVariable"
  },
  {
    "label": "DIExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIExpression"
  },
  {
    "label": "ExprOperand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExprOperand"
  },
  {
    "label": "expr_op_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "expr_op_iterator"
  },
  {
    "label": "DIObjCProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIObjCProperty"
  },
  {
    "label": "DIImportedEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIImportedEntity"
  },
  {
    "label": "DEFINE_MDNODE_GET_UNPACK_IMPL()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_DEBUGINFOMETADATA_H # define LLVM_IR_DEBUGINFOMETADATA_H # include \" llvm / IR / Metadata . h \" # include \" llvm / Support / Dwarf . h \" # define)",
    "insertText": "DEFINE_MDNODE_GET_UNPACK_IMPL(...) __VA_ARGS__ #define DEFINE_MDNODE_GET_UNPACK(ARGS) DEFINE_MDNODE_GET_UNPACK_IMPL ARGS #define DEFINE_MDNODE_GET(CLASS, FORMAL, ARGS) \\ static CLASS *get(LLVMContext &Context, DEFINE_MDNODE_GET_UNPACK(FORMAL))"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "getImpl(Context, DEFINE_MDNODE_GET_UNPACK(ARGS), Uniqued)"
  },
  {
    "label": "getIfExists()",
    "kind": "Method",
    "detail": "Function (\\ } \\ CLASS*)",
    "insertText": "getIfExists(LLVMContext &Context, \\ DEFINE_MDNODE_GET_UNPACK(FORMAL))"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "getImpl(Context, DEFINE_MDNODE_GET_UNPACK(ARGS), Uniqued, \\ false)"
  },
  {
    "label": "getDistinct()",
    "kind": "Method",
    "detail": "Function (\\ } \\ CLASS*)",
    "insertText": "getDistinct(LLVMContext &Context, \\ DEFINE_MDNODE_GET_UNPACK(FORMAL))"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "getImpl(Context, DEFINE_MDNODE_GET_UNPACK(ARGS), Distinct)"
  },
  {
    "label": "getTemporary()",
    "kind": "Method",
    "detail": "Function (\\ } \\ Temp # # CLASS)",
    "insertText": "getTemporary(LLVMContext &Context, \\ DEFINE_MDNODE_GET_UNPACK(FORMAL))"
  },
  {
    "label": "CLASS()",
    "kind": "Method",
    "detail": "Function (\\ return Temp # #)",
    "insertText": "CLASS(\\ getImpl(Context, DEFINE_MDNODE_GET_UNPACK(ARGS), Temporary))"
  },
  {
    "label": "TypedDINodeRef()",
    "kind": "Method",
    "detail": "Function (\\ } namespace llvm { template<class T> class TypedDINodeRef { const Metadata* MD = nullptr ; public :)",
    "insertText": "TypedDINodeRef()"
  },
  {
    "label": "TypedDINodeRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TypedDINodeRef(std::nullptr_t)"
  },
  {
    "label": "TypedDINodeRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TypedDINodeRef(const Metadata *MD) : MD(MD)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((!MD || isa<MDString>(MD) || isa<T>(MD)) && \"Expected valid ref\")"
  },
  {
    "label": "TypedDINodeRef()",
    "kind": "Method",
    "detail": "Function (} template<class U>)",
    "insertText": "TypedDINodeRef(const TypedDINodeRef<U> &X, typename std::enable_if<std::is_convertible<U *, T *>::value>::type * = nullptr) : MD(X)"
  },
  {
    "label": "Metadata()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "Metadata()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TypedDINodeRef<T> &X)"
  },
  {
    "label": "resolve()",
    "kind": "Method",
    "detail": "Function (template<class MapTy> T*)",
    "insertText": "resolve(const MapTy &Map)"
  },
  {
    "label": "MDString()",
    "kind": "Method",
    "detail": "Function (auto* S = cast<)",
    "insertText": "MDString(MD)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto I = Map .)",
    "insertText": "find(S)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I != Map.end() && \"Missing identifier in type map\")"
  },
  {
    "label": "DITypeRefArray()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TypedDINodeRef<DINode> DINodeRef ; typedef TypedDINodeRef<DIScope> DIScopeRef ; typedef TypedDINodeRef<DIType> DITypeRef ; class DITypeRefArray { const MDTuple* N = nullptr ; public :)",
    "insertText": "DITypeRefArray(const MDTuple *N) : N(N)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "MDTuple()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "MDTuple()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} MDTuple*)",
    "insertText": "get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} MDTuple*)",
    "insertText": "operator()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "size()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} DITypeRef)",
    "insertText": "operator(unsigned I)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (} class iterator { MDNode::op_iterator I = nullptr ; public : using iterator_category = std::input_iterator_tag ; using value_type = DITypeRef ; using difference_type = std::ptrdiff_t ; using pointer = void ; using reference = DITypeRef ;)",
    "insertText": "iterator()"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iterator(MDNode::op_iterator I) : I(I)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + I ; return* this ; } iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "Temp(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + I ; return Temp ; } bool)",
    "insertText": "operator(const iterator &X)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "DINode()",
    "kind": "Method",
    "detail": "Function (} } ; class DINode : public MDNode { class LLVMContextImpl ; class MDNode ; protected :)",
    "insertText": "DINode(LLVMContext &C, unsigned ID, StorageType Storage, unsigned Tag, ArrayRef<Metadata *> Ops1, ArrayRef<Metadata *> Ops2 = None) : MDNode(C, ID, Storage, Ops1, Ops2)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Tag < 1u << 16)"
  },
  {
    "label": "DINode()",
    "kind": "Method",
    "detail": "Function (SubclassData16 = Tag ; } ~)",
    "insertText": "DINode()"
  },
  {
    "label": "getOperandAs()",
    "kind": "Method",
    "detail": "Function (template<class Ty> Ty*)",
    "insertText": "getOperandAs(unsigned I)"
  },
  {
    "label": "getStringOperand()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getStringOperand(unsigned I)"
  },
  {
    "label": "getCanonicalMDString()",
    "kind": "Method",
    "detail": "Function (} MDString*)",
    "insertText": "getCanonicalMDString(LLVMContext &Context, StringRef S)"
  },
  {
    "label": "getTag()",
    "kind": "Method",
    "detail": "Function (} public : unsigned)",
    "insertText": "getTag()"
  },
  {
    "label": "getFlag()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getFlag(StringRef Flag)"
  },
  {
    "label": "getFlagString()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getFlagString(unsigned Flag)"
  },
  {
    "label": "splitFlags()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "splitFlags(unsigned Flags, SmallVectorImpl<unsigned> &SplitFlags)"
  },
  {
    "label": "getRef()",
    "kind": "Method",
    "detail": "Function (DINodeRef)",
    "insertText": "getRef()"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "classof(const Metadata *MD)"
  },
  {
    "label": "getSimplifiedValue()",
    "kind": "Method",
    "detail": "Function (default : return false ; case GenericDINodeKind : case DISubrangeKind : case DIEnumeratorKind : case DIBasicTypeKind : case DIDerivedTypeKind : case DICompositeTypeKind : case DISubroutineTypeKind : case DIFileKind : case DICompileUnitKind : case DISubprogramKind : case DILexicalBlockKind : case DILexicalBlockFileKind : case DINamespaceKind : case DITemplateTypeParameterKind : case DITemplateValueParameterKind : case DIGlobalVariableKind : case DILocalVariableKind : case DIObjCPropertyKind : case DIImportedEntityKind : case DIModuleKind : return true ; } } } ; template<class T> struct simplify_type<const TypedDINodeRef<T>> { typedef Metadata* SimpleType ; SimpleType)",
    "insertText": "getSimplifiedValue(const TypedDINodeRef<T> &MD)"
  },
  {
    "label": "setHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setHash(Hash)"
  },
  {
    "label": "GenericDINode()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "GenericDINode()"
  },
  {
    "label": "dropAllReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropAllReferences()"
  },
  {
    "label": "setHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setHash(unsigned Hash)"
  },
  {
    "label": "recalculateHash()",
    "kind": "Method",
    "detail": "Function (SubclassData32 = Hash ; } void)",
    "insertText": "recalculateHash()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (GenericDINode*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Tag, StringRef Header, ArrayRef<Metadata *> DwarfOps, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} GenericDINode*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Tag, MDString *Header, ArrayRef<Metadata *> DwarfOps, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "cloneImpl()",
    "kind": "Method",
    "detail": "Function (TempGenericDINode)",
    "insertText": "cloneImpl()"
  },
  {
    "label": "getHash()",
    "kind": "Method",
    "detail": "Function (} public : unsigned)",
    "insertText": "getHash()"
  },
  {
    "label": "dwarf_op_begin()",
    "kind": "Method",
    "detail": "Function (} op_iterator)",
    "insertText": "dwarf_op_begin()"
  },
  {
    "label": "dwarf_op_end()",
    "kind": "Method",
    "detail": "Function (} op_iterator)",
    "insertText": "dwarf_op_end()"
  },
  {
    "label": "dwarf_operands()",
    "kind": "Method",
    "detail": "Function (} op_range)",
    "insertText": "dwarf_operands()"
  },
  {
    "label": "getNumDwarfOperands()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumDwarfOperands()"
  },
  {
    "label": "getDwarfOperand()",
    "kind": "Method",
    "detail": "Function (} const MDOperand&)",
    "insertText": "getDwarfOperand(unsigned I)"
  },
  {
    "label": "replaceDwarfOperandWith()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "replaceDwarfOperandWith(unsigned I, Metadata *New)"
  },
  {
    "label": "replaceOperandWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceOperandWith(I + 1, New)"
  },
  {
    "label": "DISubrange()",
    "kind": "Method",
    "detail": "Function (} } ; class DISubrange : public DINode { class LLVMContextImpl ; class MDNode ; int64_t Count ; int64_t LowerBound ;)",
    "insertText": "DISubrange(LLVMContext &C, StorageType Storage, int64_t Count, int64_t LowerBound) : DINode(C, DISubrangeKind, Storage, dwarf::DW_TAG_subrange_type, None), Count(Count), LowerBound(LowerBound)"
  },
  {
    "label": "DISubrange()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DISubrange()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DISubrange*)",
    "insertText": "getImpl(LLVMContext &Context, int64_t Count, int64_t LowerBound, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DISubrange, (int64_t Count, int64_t LowerBound = 0), (Count, LowerBound)) TempDISubrange clone()"
  },
  {
    "label": "getLowerBound()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "getLowerBound()"
  },
  {
    "label": "DIEnumerator()",
    "kind": "Method",
    "detail": "Function (} } ; class DIEnumerator : public DINode { class LLVMContextImpl ; class MDNode ; int64_t Value ;)",
    "insertText": "DIEnumerator(LLVMContext &C, StorageType Storage, int64_t Value, ArrayRef<Metadata *> Ops) : DINode(C, DIEnumeratorKind, Storage, dwarf::DW_TAG_enumerator, Ops), Value(Value)"
  },
  {
    "label": "DIEnumerator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DIEnumerator()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DIEnumerator*)",
    "insertText": "getImpl(LLVMContext &Context, int64_t Value, StringRef Name, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DIEnumerator*)",
    "insertText": "getImpl(LLVMContext &Context, int64_t Value, MDString *Name, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DIEnumerator, (int64_t Value, StringRef Name), (Value, Name)) DEFINE_MDNODE_GET(DIEnumerator, (int64_t Value, MDString *Name), (Value, Name)) TempDIEnumerator clone()"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "getValue()"
  },
  {
    "label": "getRawName()",
    "kind": "Method",
    "detail": "Function (} MDString*)",
    "insertText": "getRawName()"
  },
  {
    "label": "DIScope()",
    "kind": "Method",
    "detail": "Function (} } ; class DIScope : public DINode { protected :)",
    "insertText": "DIScope(LLVMContext &C, unsigned ID, StorageType Storage, unsigned Tag, ArrayRef<Metadata *> Ops) : DINode(C, ID, Storage, Tag, Ops)"
  },
  {
    "label": "DIScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DIScope()"
  },
  {
    "label": "getFile()",
    "kind": "Method",
    "detail": "Function (public : DIFile*)",
    "insertText": "getFile()"
  },
  {
    "label": "getFilename()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getFilename()"
  },
  {
    "label": "getDirectory()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getDirectory()"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getName()"
  },
  {
    "label": "getScope()",
    "kind": "Method",
    "detail": "Function (DIScopeRef)",
    "insertText": "getScope()"
  },
  {
    "label": "getRawFile()",
    "kind": "Method",
    "detail": "Function (Metadata*)",
    "insertText": "getRawFile()"
  },
  {
    "label": "DIFile()",
    "kind": "Method",
    "detail": "Function (default : return false ; case DIBasicTypeKind : case DIDerivedTypeKind : case DICompositeTypeKind : case DISubroutineTypeKind : case DIFileKind : case DICompileUnitKind : case DISubprogramKind : case DILexicalBlockKind : case DILexicalBlockFileKind : case DINamespaceKind : case DIModuleKind : return true ; } } } ; class DIFile : public DIScope { class LLVMContextImpl ; class MDNode ;)",
    "insertText": "DIFile(LLVMContext &C, StorageType Storage, ArrayRef<Metadata *> Ops) : DIScope(C, DIFileKind, Storage, dwarf::DW_TAG_file_type, Ops)"
  },
  {
    "label": "DIFile()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DIFile()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DIFile*)",
    "insertText": "getImpl(LLVMContext &Context, StringRef Filename, StringRef Directory, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DIFile*)",
    "insertText": "getImpl(LLVMContext &Context, MDString *Filename, MDString *Directory, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DIFile, (StringRef Filename, StringRef Directory), (Filename, Directory)) DEFINE_MDNODE_GET(DIFile, (MDString * Filename, MDString *Directory), (Filename, Directory)) TempDIFile clone()"
  },
  {
    "label": "getRawFilename()",
    "kind": "Method",
    "detail": "Function (} MDString*)",
    "insertText": "getRawFilename()"
  },
  {
    "label": "getRawDirectory()",
    "kind": "Method",
    "detail": "Function (} MDString*)",
    "insertText": "getRawDirectory()"
  },
  {
    "label": "DIType()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DIType()"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (public : TempDIType)",
    "insertText": "clone()"
  },
  {
    "label": "getLine()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getLine()"
  },
  {
    "label": "getRawScope()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawScope()"
  },
  {
    "label": "setScope()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setScope(Metadata *scope)"
  },
  {
    "label": "setOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOperand(1, scope)"
  },
  {
    "label": "setFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setFlags(unsigned NewFlags)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!isUniqued() && \"Cannot set flags on uniqued nodes\")"
  },
  {
    "label": "isPrivate()",
    "kind": "Method",
    "detail": "Function (Flags = NewFlags ; } bool)",
    "insertText": "isPrivate()"
  },
  {
    "label": "isProtected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isProtected()"
  },
  {
    "label": "isPublic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPublic()"
  },
  {
    "label": "isForwardDecl()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isForwardDecl()"
  },
  {
    "label": "isAppleBlockExtension()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAppleBlockExtension()"
  },
  {
    "label": "isBlockByrefStruct()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBlockByrefStruct()"
  },
  {
    "label": "isVirtual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isVirtual()"
  },
  {
    "label": "isArtificial()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isArtificial()"
  },
  {
    "label": "isObjectPointer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isObjectPointer()"
  },
  {
    "label": "isObjcClassComplete()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isObjcClassComplete()"
  },
  {
    "label": "isVector()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isVector()"
  },
  {
    "label": "isStaticMember()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isStaticMember()"
  },
  {
    "label": "isLValueReference()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLValueReference()"
  },
  {
    "label": "isRValueReference()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isRValueReference()"
  },
  {
    "label": "DIBasicType()",
    "kind": "Method",
    "detail": "Function (default : return false ; case DIBasicTypeKind : case DIDerivedTypeKind : case DICompositeTypeKind : case DISubroutineTypeKind : return true ; } } } ; class DIBasicType : public DIType { class LLVMContextImpl ; class MDNode ; unsigned Encoding ;)",
    "insertText": "DIBasicType(LLVMContext &C, StorageType Storage, unsigned Tag, uint64_t SizeInBits, uint64_t AlignInBits, unsigned Encoding, ArrayRef<Metadata *> Ops) : DIType(C, DIBasicTypeKind, Storage, Tag, 0, SizeInBits, AlignInBits, 0, 0, Ops), Encoding(Encoding)"
  },
  {
    "label": "DIBasicType()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DIBasicType()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DIBasicType*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Tag, StringRef Name, uint64_t SizeInBits, uint64_t AlignInBits, unsigned Encoding, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DIBasicType*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Tag, MDString *Name, uint64_t SizeInBits, uint64_t AlignInBits, unsigned Encoding, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DIBasicType, (unsigned Tag, StringRef Name), (Tag, Name, 0, 0, 0)) DEFINE_MDNODE_GET(DIBasicType, (unsigned Tag, StringRef Name, uint64_t SizeInBits, uint64_t AlignInBits, unsigned Encoding), (Tag, Name, SizeInBits, AlignInBits, Encoding)) DEFINE_MDNODE_GET(DIBasicType, (unsigned Tag, MDString *Name, uint64_t SizeInBits, uint64_t AlignInBits, unsigned Encoding), (Tag, Name, SizeInBits, AlignInBits, Encoding)) TempDIBasicType clone()"
  },
  {
    "label": "getEncoding()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getEncoding()"
  },
  {
    "label": "DIDerivedTypeBase()",
    "kind": "Method",
    "detail": "Function (} } ; class DIDerivedTypeBase : public DIType { protected :)",
    "insertText": "DIDerivedTypeBase(LLVMContext &C, unsigned ID, StorageType Storage, unsigned Tag, unsigned Line, uint64_t SizeInBits, uint64_t AlignInBits, uint64_t OffsetInBits, unsigned Flags, ArrayRef<Metadata *> Ops) : DIType(C, ID, Storage, Tag, Line, SizeInBits, AlignInBits, OffsetInBits, Flags, Ops)"
  },
  {
    "label": "DIDerivedTypeBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DIDerivedTypeBase()"
  },
  {
    "label": "getBaseType()",
    "kind": "Method",
    "detail": "Function (public : DITypeRef)",
    "insertText": "getBaseType()"
  },
  {
    "label": "getRawBaseType()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawBaseType()"
  },
  {
    "label": "DIDerivedType()",
    "kind": "Method",
    "detail": "Function (} } ; class DIDerivedType : public DIDerivedTypeBase { class LLVMContextImpl ; class MDNode ;)",
    "insertText": "DIDerivedType(LLVMContext &C, StorageType Storage, unsigned Tag, unsigned Line, uint64_t SizeInBits, uint64_t AlignInBits, uint64_t OffsetInBits, unsigned Flags, ArrayRef<Metadata *> Ops) : DIDerivedTypeBase(C, DIDerivedTypeKind, Storage, Tag, Line, SizeInBits, AlignInBits, OffsetInBits, Flags, Ops)"
  },
  {
    "label": "DIDerivedType()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DIDerivedType()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DIDerivedType*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Tag, StringRef Name, DIFile *File, unsigned Line, DIScopeRef Scope, DITypeRef BaseType, uint64_t SizeInBits, uint64_t AlignInBits, uint64_t OffsetInBits, unsigned Flags, Metadata *ExtraData, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DIDerivedType*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Tag, MDString *Name, Metadata *File, unsigned Line, Metadata *Scope, Metadata *BaseType, uint64_t SizeInBits, uint64_t AlignInBits, uint64_t OffsetInBits, unsigned Flags, Metadata *ExtraData, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DIDerivedType, (unsigned Tag, MDString *Name, Metadata *File, unsigned Line, Metadata *Scope, Metadata *BaseType, uint64_t SizeInBits, uint64_t AlignInBits, uint64_t OffsetInBits, unsigned Flags, Metadata *ExtraData = nullptr), (Tag, Name, File, Line, Scope, BaseType, SizeInBits, AlignInBits, OffsetInBits, Flags, ExtraData)) DEFINE_MDNODE_GET(DIDerivedType, (unsigned Tag, StringRef Name, DIFile *File, unsigned Line, DIScopeRef Scope, DITypeRef BaseType, uint64_t SizeInBits, uint64_t AlignInBits, uint64_t OffsetInBits, unsigned Flags, Metadata *ExtraData = nullptr), (Tag, Name, File, Line, Scope, BaseType, SizeInBits, AlignInBits, OffsetInBits, Flags, ExtraData)) TempDIDerivedType clone()"
  },
  {
    "label": "getExtraData()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getExtraData()"
  },
  {
    "label": "getRawExtraData()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawExtraData()"
  },
  {
    "label": "getClassType()",
    "kind": "Method",
    "detail": "Function (} DITypeRef)",
    "insertText": "getClassType()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getTag() == dwarf::DW_TAG_ptr_to_member_type)"
  },
  {
    "label": "getObjCProperty()",
    "kind": "Method",
    "detail": "Function (} DIObjCProperty*)",
    "insertText": "getObjCProperty()"
  },
  {
    "label": "getConstant()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getConstant()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getTag() == dwarf::DW_TAG_member && isStaticMember())"
  },
  {
    "label": "DICompositeTypeBase()",
    "kind": "Method",
    "detail": "Function (} } ; class DICompositeTypeBase : public DIDerivedTypeBase { unsigned RuntimeLang ; protected :)",
    "insertText": "DICompositeTypeBase(LLVMContext &C, unsigned ID, StorageType Storage, unsigned Tag, unsigned Line, unsigned RuntimeLang, uint64_t SizeInBits, uint64_t AlignInBits, uint64_t OffsetInBits, unsigned Flags, ArrayRef<Metadata *> Ops) : DIDerivedTypeBase(C, ID, Storage, Tag, Line, SizeInBits, AlignInBits, OffsetInBits, Flags, Ops), RuntimeLang(RuntimeLang)"
  },
  {
    "label": "DICompositeTypeBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DICompositeTypeBase()"
  },
  {
    "label": "getElements()",
    "kind": "Method",
    "detail": "Function (public : DINodeArray)",
    "insertText": "getElements()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!isa<DISubroutineType>(this) && \"no elements for DISubroutineType\")"
  },
  {
    "label": "getVTableHolder()",
    "kind": "Method",
    "detail": "Function (} DITypeRef)",
    "insertText": "getVTableHolder()"
  },
  {
    "label": "getTemplateParams()",
    "kind": "Method",
    "detail": "Function (} DITemplateParameterArray)",
    "insertText": "getTemplateParams()"
  },
  {
    "label": "getIdentifier()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getIdentifier()"
  },
  {
    "label": "getRuntimeLang()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getRuntimeLang()"
  },
  {
    "label": "getRawVTableHolder()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawVTableHolder()"
  },
  {
    "label": "getRawTemplateParams()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawTemplateParams()"
  },
  {
    "label": "getRawIdentifier()",
    "kind": "Method",
    "detail": "Function (} MDString*)",
    "insertText": "getRawIdentifier()"
  },
  {
    "label": "replaceElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "replaceElements(DINodeArray Elements)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# ifndef NDEBUG)",
    "insertText": "for(DINode *Op : getElements()) assert(std::find(Elements->op_begin(), Elements->op_end(), Op) && \"Lost a member during member list replacement\")"
  },
  {
    "label": "replaceOperandWith()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "replaceOperandWith(4, Elements.get())"
  },
  {
    "label": "replaceVTableHolder()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "replaceVTableHolder(DITypeRef VTableHolder)"
  },
  {
    "label": "replaceOperandWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceOperandWith(5, VTableHolder)"
  },
  {
    "label": "replaceTemplateParams()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "replaceTemplateParams(DITemplateParameterArray TemplateParams)"
  },
  {
    "label": "replaceOperandWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceOperandWith(6, TemplateParams.get())"
  },
  {
    "label": "DICompositeType()",
    "kind": "Method",
    "detail": "Function (} } ; class DICompositeType : public DICompositeTypeBase { class LLVMContextImpl ; class MDNode ;)",
    "insertText": "DICompositeType(LLVMContext &C, StorageType Storage, unsigned Tag, unsigned Line, unsigned RuntimeLang, uint64_t SizeInBits, uint64_t AlignInBits, uint64_t OffsetInBits, unsigned Flags, ArrayRef<Metadata *> Ops) : DICompositeTypeBase(C, DICompositeTypeKind, Storage, Tag, Line, RuntimeLang, SizeInBits, AlignInBits, OffsetInBits, Flags, Ops)"
  },
  {
    "label": "DICompositeType()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DICompositeType()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DICompositeType*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Tag, StringRef Name, Metadata *File, unsigned Line, DIScopeRef Scope, DITypeRef BaseType, uint64_t SizeInBits, uint64_t AlignInBits, uint64_t OffsetInBits, uint64_t Flags, DINodeArray Elements, unsigned RuntimeLang, DITypeRef VTableHolder, DITemplateParameterArray TemplateParams, StringRef Identifier, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DICompositeType*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Tag, MDString *Name, Metadata *File, unsigned Line, Metadata *Scope, Metadata *BaseType, uint64_t SizeInBits, uint64_t AlignInBits, uint64_t OffsetInBits, unsigned Flags, Metadata *Elements, unsigned RuntimeLang, Metadata *VTableHolder, Metadata *TemplateParams, MDString *Identifier, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DICompositeType, (unsigned Tag, StringRef Name, DIFile *File, unsigned Line, DIScopeRef Scope, DITypeRef BaseType, uint64_t SizeInBits, uint64_t AlignInBits, uint64_t OffsetInBits, unsigned Flags, DINodeArray Elements, unsigned RuntimeLang, DITypeRef VTableHolder, DITemplateParameterArray TemplateParams = nullptr, StringRef Identifier = \"\"), (Tag, Name, File, Line, Scope, BaseType, SizeInBits, AlignInBits, OffsetInBits, Flags, Elements, RuntimeLang, VTableHolder, TemplateParams, Identifier)) DEFINE_MDNODE_GET(DICompositeType, (unsigned Tag, MDString *Name, Metadata *File, unsigned Line, Metadata *Scope, Metadata *BaseType, uint64_t SizeInBits, uint64_t AlignInBits, uint64_t OffsetInBits, unsigned Flags, Metadata *Elements, unsigned RuntimeLang, Metadata *VTableHolder, Metadata *TemplateParams = nullptr, MDString *Identifier = nullptr), (Tag, Name, File, Line, Scope, BaseType, SizeInBits, AlignInBits, OffsetInBits, Flags, Elements, RuntimeLang, VTableHolder, TemplateParams, Identifier)) TempDICompositeType clone()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> TypedDINodeRef<T> TypedDINodeRef<T)",
    "insertText": "get(const T *N)"
  },
  {
    "label": "DISubroutineType()",
    "kind": "Method",
    "detail": "Function (} class DISubroutineType : public DICompositeTypeBase { class LLVMContextImpl ; class MDNode ;)",
    "insertText": "DISubroutineType(LLVMContext &C, StorageType Storage, unsigned Flags, ArrayRef<Metadata *> Ops) : DICompositeTypeBase(C, DISubroutineTypeKind, Storage, dwarf::DW_TAG_subroutine_type, 0, 0, 0, 0, 0, Flags, Ops)"
  },
  {
    "label": "DISubroutineType()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DISubroutineType()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DISubroutineType*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Flags, DITypeRefArray TypeArray, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DISubroutineType*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Flags, Metadata *TypeArray, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DISubroutineType, (unsigned Flags, DITypeRefArray TypeArray), (Flags, TypeArray)) DEFINE_MDNODE_GET(DISubroutineType, (unsigned Flags, Metadata *TypeArray), (Flags, TypeArray)) TempDISubroutineType clone()"
  },
  {
    "label": "getTypeArray()",
    "kind": "Method",
    "detail": "Function (} DITypeRefArray)",
    "insertText": "getTypeArray()"
  },
  {
    "label": "getRawTypeArray()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawTypeArray()"
  },
  {
    "label": "DICompileUnit()",
    "kind": "Method",
    "detail": "Function (} } ; class DICompileUnit : public DIScope { class LLVMContextImpl ; class MDNode ; unsigned SourceLanguage ; bool IsOptimized ; unsigned RuntimeVersion ; unsigned EmissionKind ; uint64_t DWOId ;)",
    "insertText": "DICompileUnit(LLVMContext &C, StorageType Storage, unsigned SourceLanguage, bool IsOptimized, unsigned RuntimeVersion, unsigned EmissionKind, uint64_t DWOId, ArrayRef<Metadata *> Ops) : DIScope(C, DICompileUnitKind, Storage, dwarf::DW_TAG_compile_unit, Ops), SourceLanguage(SourceLanguage), IsOptimized(IsOptimized), RuntimeVersion(RuntimeVersion), EmissionKind(EmissionKind), DWOId(DWOId)"
  },
  {
    "label": "DICompileUnit()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DICompileUnit()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DICompileUnit*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned SourceLanguage, DIFile *File, StringRef Producer, bool IsOptimized, StringRef Flags, unsigned RuntimeVersion, StringRef SplitDebugFilename, unsigned EmissionKind, DICompositeTypeArray EnumTypes, DITypeArray RetainedTypes, DISubprogramArray Subprograms, DIGlobalVariableArray GlobalVariables, DIImportedEntityArray ImportedEntities, uint64_t DWOId, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DICompileUnit*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned SourceLanguage, Metadata *File, MDString *Producer, bool IsOptimized, MDString *Flags, unsigned RuntimeVersion, MDString *SplitDebugFilename, unsigned EmissionKind, Metadata *EnumTypes, Metadata *RetainedTypes, Metadata *Subprograms, Metadata *GlobalVariables, Metadata *ImportedEntities, uint64_t DWOId, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DICompileUnit, (unsigned SourceLanguage, DIFile *File, StringRef Producer, bool IsOptimized, StringRef Flags, unsigned RuntimeVersion, StringRef SplitDebugFilename, unsigned EmissionKind, DICompositeTypeArray EnumTypes, DITypeArray RetainedTypes, DISubprogramArray Subprograms, DIGlobalVariableArray GlobalVariables, DIImportedEntityArray ImportedEntities, uint64_t DWOId), (SourceLanguage, File, Producer, IsOptimized, Flags, RuntimeVersion, SplitDebugFilename, EmissionKind, EnumTypes, RetainedTypes, Subprograms, GlobalVariables, ImportedEntities, DWOId)) DEFINE_MDNODE_GET( DICompileUnit, (unsigned SourceLanguage, Metadata *File, MDString *Producer, bool IsOptimized, MDString *Flags, unsigned RuntimeVersion, MDString *SplitDebugFilename, unsigned EmissionKind, Metadata *EnumTypes, Metadata *RetainedTypes, Metadata *Subprograms, Metadata *GlobalVariables, Metadata *ImportedEntities, uint64_t DWOId), (SourceLanguage, File, Producer, IsOptimized, Flags, RuntimeVersion, SplitDebugFilename, EmissionKind, EnumTypes, RetainedTypes, Subprograms, GlobalVariables, ImportedEntities, DWOId)) TempDICompileUnit clone()"
  },
  {
    "label": "getSourceLanguage()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getSourceLanguage()"
  },
  {
    "label": "getFlags()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getFlags()"
  },
  {
    "label": "getSplitDebugFilename()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getSplitDebugFilename()"
  },
  {
    "label": "getEnumTypes()",
    "kind": "Method",
    "detail": "Function (} DICompositeTypeArray)",
    "insertText": "getEnumTypes()"
  },
  {
    "label": "getRetainedTypes()",
    "kind": "Method",
    "detail": "Function (} DITypeArray)",
    "insertText": "getRetainedTypes()"
  },
  {
    "label": "getSubprograms()",
    "kind": "Method",
    "detail": "Function (} DISubprogramArray)",
    "insertText": "getSubprograms()"
  },
  {
    "label": "getGlobalVariables()",
    "kind": "Method",
    "detail": "Function (} DIGlobalVariableArray)",
    "insertText": "getGlobalVariables()"
  },
  {
    "label": "getImportedEntities()",
    "kind": "Method",
    "detail": "Function (} DIImportedEntityArray)",
    "insertText": "getImportedEntities()"
  },
  {
    "label": "getDWOId()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getDWOId()"
  },
  {
    "label": "getRawFlags()",
    "kind": "Method",
    "detail": "Function (} MDString*)",
    "insertText": "getRawFlags()"
  },
  {
    "label": "getRawSplitDebugFilename()",
    "kind": "Method",
    "detail": "Function (} MDString*)",
    "insertText": "getRawSplitDebugFilename()"
  },
  {
    "label": "getRawEnumTypes()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawEnumTypes()"
  },
  {
    "label": "getRawRetainedTypes()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawRetainedTypes()"
  },
  {
    "label": "getRawSubprograms()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawSubprograms()"
  },
  {
    "label": "getRawGlobalVariables()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawGlobalVariables()"
  },
  {
    "label": "getRawImportedEntities()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawImportedEntities()"
  },
  {
    "label": "replaceEnumTypes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "replaceEnumTypes(DICompositeTypeArray N)"
  },
  {
    "label": "replaceOperandWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceOperandWith(4, N.get())"
  },
  {
    "label": "replaceRetainedTypes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "replaceRetainedTypes(DITypeArray N)"
  },
  {
    "label": "replaceOperandWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceOperandWith(5, N.get())"
  },
  {
    "label": "replaceSubprograms()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "replaceSubprograms(DISubprogramArray N)"
  },
  {
    "label": "replaceOperandWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceOperandWith(6, N.get())"
  },
  {
    "label": "replaceGlobalVariables()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "replaceGlobalVariables(DIGlobalVariableArray N)"
  },
  {
    "label": "replaceOperandWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceOperandWith(7, N.get())"
  },
  {
    "label": "replaceImportedEntities()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "replaceImportedEntities(DIImportedEntityArray N)"
  },
  {
    "label": "replaceOperandWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceOperandWith(8, N.get())"
  },
  {
    "label": "DILocalScope()",
    "kind": "Method",
    "detail": "Function (} } ; class DILocalScope : public DIScope { protected :)",
    "insertText": "DILocalScope(LLVMContext &C, unsigned ID, StorageType Storage, unsigned Tag, ArrayRef<Metadata *> Ops) : DIScope(C, ID, Storage, Tag, Ops)"
  },
  {
    "label": "DILocalScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DILocalScope()"
  },
  {
    "label": "getSubprogram()",
    "kind": "Method",
    "detail": "Function (public : DISubprogram*)",
    "insertText": "getSubprogram()"
  },
  {
    "label": "DILocation()",
    "kind": "Method",
    "detail": "Function (} } ; class DILocation : public MDNode { class LLVMContextImpl ; class MDNode ;)",
    "insertText": "DILocation(LLVMContext &C, StorageType Storage, unsigned Line, unsigned Column, ArrayRef<Metadata *> MDs)"
  },
  {
    "label": "DILocation()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DILocation()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DILocation*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Line, unsigned Column, Metadata *Scope, Metadata *InlinedAt, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DILocation*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Line, unsigned Column, DILocalScope *Scope, DILocation *InlinedAt, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "replaceOperandWith()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "replaceOperandWith(unsigned I, Metadata *New)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DEFINE_MDNODE_GET(DILocation, (unsigned Line, unsigned Column, Metadata *Scope, Metadata *InlinedAt = nullptr), (Line, Column, Scope, InlinedAt)) DEFINE_MDNODE_GET(DILocation, (unsigned Line, unsigned Column, DILocalScope *Scope, DILocation *InlinedAt = nullptr), (Line, Column, Scope, InlinedAt)) TempDILocation clone()"
  },
  {
    "label": "getInlinedAt()",
    "kind": "Method",
    "detail": "Function (} DILocation*)",
    "insertText": "getInlinedAt()"
  },
  {
    "label": "getInlinedAtScope()",
    "kind": "Method",
    "detail": "Function (} DILocalScope*)",
    "insertText": "getInlinedAtScope()"
  },
  {
    "label": "canDiscriminate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "canDiscriminate(const DILocation &RHS)"
  },
  {
    "label": "getDiscriminator()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getDiscriminator()"
  },
  {
    "label": "computeNewDiscriminator()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "computeNewDiscriminator()"
  },
  {
    "label": "getRawInlinedAt()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawInlinedAt()"
  },
  {
    "label": "DISubprogram()",
    "kind": "Method",
    "detail": "Function (} } ; class DISubprogram : public DILocalScope { class LLVMContextImpl ; class MDNode ; unsigned Line ; unsigned ScopeLine ; unsigned Virtuality ; unsigned VirtualIndex ; unsigned Flags ; bool IsLocalToUnit ; bool IsDefinition ; bool IsOptimized ;)",
    "insertText": "DISubprogram(LLVMContext &C, StorageType Storage, unsigned Line, unsigned ScopeLine, unsigned Virtuality, unsigned VirtualIndex, unsigned Flags, bool IsLocalToUnit, bool IsDefinition, bool IsOptimized, ArrayRef<Metadata *> Ops) : DILocalScope(C, DISubprogramKind, Storage, dwarf::DW_TAG_subprogram, Ops), Line(Line), ScopeLine(ScopeLine), Virtuality(Virtuality), VirtualIndex(VirtualIndex), Flags(Flags), IsLocalToUnit(IsLocalToUnit), IsDefinition(IsDefinition), IsOptimized(IsOptimized)"
  },
  {
    "label": "DISubprogram()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DISubprogram()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DISubprogram*)",
    "insertText": "getImpl(LLVMContext &Context, DIScopeRef Scope, StringRef Name, StringRef LinkageName, DIFile *File, unsigned Line, DISubroutineType *Type, bool IsLocalToUnit, bool IsDefinition, unsigned ScopeLine, DITypeRef ContainingType, unsigned Virtuality, unsigned VirtualIndex, unsigned Flags, bool IsOptimized, Constant *Function, DITemplateParameterArray TemplateParams, DISubprogram *Declaration, DILocalVariableArray Variables, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DISubprogram*)",
    "insertText": "getImpl(LLVMContext &Context, Metadata *Scope, MDString *Name, MDString *LinkageName, Metadata *File, unsigned Line, Metadata *Type, bool IsLocalToUnit, bool IsDefinition, unsigned ScopeLine, Metadata *ContainingType, unsigned Virtuality, unsigned VirtualIndex, unsigned Flags, bool IsOptimized, Metadata *Function, Metadata *TemplateParams, Metadata *Declaration, Metadata *Variables, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DISubprogram, (DIScopeRef Scope, StringRef Name, StringRef LinkageName, DIFile *File, unsigned Line, DISubroutineType *Type, bool IsLocalToUnit, bool IsDefinition, unsigned ScopeLine, DITypeRef ContainingType, unsigned Virtuality, unsigned VirtualIndex, unsigned Flags, bool IsOptimized, Constant *Function = nullptr, DITemplateParameterArray TemplateParams = nullptr, DISubprogram *Declaration = nullptr, DILocalVariableArray Variables = nullptr), (Scope, Name, LinkageName, File, Line, Type, IsLocalToUnit, IsDefinition, ScopeLine, ContainingType, Virtuality, VirtualIndex, Flags, IsOptimized, Function, TemplateParams, Declaration, Variables)) DEFINE_MDNODE_GET( DISubprogram, (Metadata * Scope, MDString *Name, MDString *LinkageName, Metadata *File, unsigned Line, Metadata *Type, bool IsLocalToUnit, bool IsDefinition, unsigned ScopeLine, Metadata *ContainingType, unsigned Virtuality, unsigned VirtualIndex, unsigned Flags, bool IsOptimized, Metadata *Function = nullptr, Metadata *TemplateParams = nullptr, Metadata *Declaration = nullptr, Metadata *Variables = nullptr), (Scope, Name, LinkageName, File, Line, Type, IsLocalToUnit, IsDefinition, ScopeLine, ContainingType, Virtuality, VirtualIndex, Flags, IsOptimized, Function, TemplateParams, Declaration, Variables)) TempDISubprogram clone()"
  },
  {
    "label": "isExplicit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isExplicit()"
  },
  {
    "label": "isPrototyped()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPrototyped()"
  },
  {
    "label": "getDisplayName()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getDisplayName()"
  },
  {
    "label": "getLinkageName()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getLinkageName()"
  },
  {
    "label": "getRawLinkageName()",
    "kind": "Method",
    "detail": "Function (} MDString*)",
    "insertText": "getRawLinkageName()"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (} DISubroutineType*)",
    "insertText": "getType()"
  },
  {
    "label": "getContainingType()",
    "kind": "Method",
    "detail": "Function (} DITypeRef)",
    "insertText": "getContainingType()"
  },
  {
    "label": "getFunctionConstant()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getFunctionConstant()"
  },
  {
    "label": "getDeclaration()",
    "kind": "Method",
    "detail": "Function (} DISubprogram*)",
    "insertText": "getDeclaration()"
  },
  {
    "label": "getVariables()",
    "kind": "Method",
    "detail": "Function (} DILocalVariableArray)",
    "insertText": "getVariables()"
  },
  {
    "label": "getRawType()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawType()"
  },
  {
    "label": "getRawContainingType()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawContainingType()"
  },
  {
    "label": "getRawFunction()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawFunction()"
  },
  {
    "label": "getRawDeclaration()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawDeclaration()"
  },
  {
    "label": "getRawVariables()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawVariables()"
  },
  {
    "label": "getFunction()",
    "kind": "Method",
    "detail": "Function (} Function*)",
    "insertText": "getFunction()"
  },
  {
    "label": "replaceFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceFunction(Function *F)"
  },
  {
    "label": "replaceFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceFunction(ConstantAsMetadata *MD)"
  },
  {
    "label": "replaceOperandWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceOperandWith(7, MD)"
  },
  {
    "label": "replaceFunction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "replaceFunction(std::nullptr_t)"
  },
  {
    "label": "replaceOperandWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceOperandWith(7, nullptr)"
  },
  {
    "label": "describes()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "describes(const Function *F)"
  },
  {
    "label": "DILexicalBlockBase()",
    "kind": "Method",
    "detail": "Function (} } ; class DILexicalBlockBase : public DILocalScope { protected :)",
    "insertText": "DILexicalBlockBase(LLVMContext &C, unsigned ID, StorageType Storage, ArrayRef<Metadata *> Ops) : DILocalScope(C, ID, Storage, dwarf::DW_TAG_lexical_block, Ops)"
  },
  {
    "label": "DILexicalBlockBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DILexicalBlockBase()"
  },
  {
    "label": "getColumn()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getColumn()"
  },
  {
    "label": "DILexicalBlock()",
    "kind": "Method",
    "detail": "Function (} } ; class DILexicalBlock : public DILexicalBlockBase { class LLVMContextImpl ; class MDNode ; unsigned Line ; unsigned Column ;)",
    "insertText": "DILexicalBlock(LLVMContext &C, StorageType Storage, unsigned Line, unsigned Column, ArrayRef<Metadata *> Ops) : DILexicalBlockBase(C, DILexicalBlockKind, Storage, Ops), Line(Line), Column(Column)"
  },
  {
    "label": "DILexicalBlock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DILexicalBlock()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DILexicalBlock*)",
    "insertText": "getImpl(LLVMContext &Context, DILocalScope *Scope, DIFile *File, unsigned Line, unsigned Column, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DILexicalBlock*)",
    "insertText": "getImpl(LLVMContext &Context, Metadata *Scope, Metadata *File, unsigned Line, unsigned Column, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DILexicalBlock, (DILocalScope * Scope, DIFile *File, unsigned Line, unsigned Column), (Scope, File, Line, Column)) DEFINE_MDNODE_GET(DILexicalBlock, (Metadata * Scope, Metadata *File, unsigned Line, unsigned Column), (Scope, File, Line, Column)) TempDILexicalBlock clone()"
  },
  {
    "label": "DILexicalBlockFile()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DILexicalBlockFile()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DILexicalBlockFile*)",
    "insertText": "getImpl(LLVMContext &Context, DILocalScope *Scope, DIFile *File, unsigned Discriminator, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DILexicalBlockFile*)",
    "insertText": "getImpl(LLVMContext &Context, Metadata *Scope, Metadata *File, unsigned Discriminator, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DILexicalBlockFile, (DILocalScope * Scope, DIFile *File, unsigned Discriminator), (Scope, File, Discriminator)) DEFINE_MDNODE_GET(DILexicalBlockFile, (Metadata * Scope, Metadata *File, unsigned Discriminator), (Scope, File, Discriminator)) TempDILexicalBlockFile clone()"
  },
  {
    "label": "DINamespace()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DINamespace()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DINamespace*)",
    "insertText": "getImpl(LLVMContext &Context, DIScope *Scope, DIFile *File, StringRef Name, unsigned Line, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DINamespace*)",
    "insertText": "getImpl(LLVMContext &Context, Metadata *Scope, Metadata *File, MDString *Name, unsigned Line, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DINamespace, (DIScope * Scope, DIFile *File, StringRef Name, unsigned Line), (Scope, File, Name, Line)) DEFINE_MDNODE_GET(DINamespace, (Metadata * Scope, Metadata *File, MDString *Name, unsigned Line), (Scope, File, Name, Line)) TempDINamespace clone()"
  },
  {
    "label": "DIModule()",
    "kind": "Method",
    "detail": "Function (} } ; class DIModule : public DIScope { class LLVMContextImpl ; class MDNode ;)",
    "insertText": "DIModule(LLVMContext &Context, StorageType Storage, ArrayRef<Metadata *> Ops) : DIScope(Context, DIModuleKind, Storage, dwarf::DW_TAG_module, Ops)"
  },
  {
    "label": "DIModule()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DIModule()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DIModule*)",
    "insertText": "getImpl(LLVMContext &Context, DIScope *Scope, StringRef Name, StringRef ConfigurationMacros, StringRef IncludePath, StringRef ISysRoot, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DIModule*)",
    "insertText": "getImpl(LLVMContext &Context, Metadata *Scope, MDString *Name, MDString *ConfigurationMacros, MDString *IncludePath, MDString *ISysRoot, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DIModule, (DIScope *Scope, StringRef Name, StringRef ConfigurationMacros, StringRef IncludePath, StringRef ISysRoot), (Scope, Name, ConfigurationMacros, IncludePath, ISysRoot)) DEFINE_MDNODE_GET(DIModule, (Metadata *Scope, MDString *Name, MDString *ConfigurationMacros, MDString *IncludePath, MDString *ISysRoot), (Scope, Name, ConfigurationMacros, IncludePath, ISysRoot)) TempDIModule clone()"
  },
  {
    "label": "getConfigurationMacros()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getConfigurationMacros()"
  },
  {
    "label": "getIncludePath()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getIncludePath()"
  },
  {
    "label": "getISysRoot()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getISysRoot()"
  },
  {
    "label": "getRawConfigurationMacros()",
    "kind": "Method",
    "detail": "Function (} MDString*)",
    "insertText": "getRawConfigurationMacros()"
  },
  {
    "label": "getRawIncludePath()",
    "kind": "Method",
    "detail": "Function (} MDString*)",
    "insertText": "getRawIncludePath()"
  },
  {
    "label": "getRawISysRoot()",
    "kind": "Method",
    "detail": "Function (} MDString*)",
    "insertText": "getRawISysRoot()"
  },
  {
    "label": "DITemplateParameter()",
    "kind": "Method",
    "detail": "Function (} } ; class DITemplateParameter : public DINode { protected :)",
    "insertText": "DITemplateParameter(LLVMContext &Context, unsigned ID, StorageType Storage, unsigned Tag, ArrayRef<Metadata *> Ops) : DINode(Context, ID, Storage, Tag, Ops)"
  },
  {
    "label": "DITemplateParameter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DITemplateParameter()"
  },
  {
    "label": "DITemplateTypeParameter()",
    "kind": "Method",
    "detail": "Function (} } ; class DITemplateTypeParameter : public DITemplateParameter { class LLVMContextImpl ; class MDNode ;)",
    "insertText": "DITemplateTypeParameter(LLVMContext &Context, StorageType Storage, ArrayRef<Metadata *> Ops) : DITemplateParameter(Context, DITemplateTypeParameterKind, Storage, dwarf::DW_TAG_template_type_parameter, Ops)"
  },
  {
    "label": "DITemplateTypeParameter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DITemplateTypeParameter()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DITemplateTypeParameter*)",
    "insertText": "getImpl(LLVMContext &Context, StringRef Name, DITypeRef Type, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DITemplateTypeParameter*)",
    "insertText": "getImpl(LLVMContext &Context, MDString *Name, Metadata *Type, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DITemplateTypeParameter, (StringRef Name, DITypeRef Type), (Name, Type)) DEFINE_MDNODE_GET(DITemplateTypeParameter, (MDString * Name, Metadata *Type), (Name, Type)) TempDITemplateTypeParameter clone()"
  },
  {
    "label": "DITemplateValueParameter()",
    "kind": "Method",
    "detail": "Function (} } ; class DITemplateValueParameter : public DITemplateParameter { class LLVMContextImpl ; class MDNode ;)",
    "insertText": "DITemplateValueParameter(LLVMContext &Context, StorageType Storage, unsigned Tag, ArrayRef<Metadata *> Ops) : DITemplateParameter(Context, DITemplateValueParameterKind, Storage, Tag, Ops)"
  },
  {
    "label": "DITemplateValueParameter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DITemplateValueParameter()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DITemplateValueParameter*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Tag, StringRef Name, DITypeRef Type, Metadata *Value, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DITemplateValueParameter*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Tag, MDString *Name, Metadata *Type, Metadata *Value, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DITemplateValueParameter, (unsigned Tag, StringRef Name, DITypeRef Type, Metadata *Value), (Tag, Name, Type, Value)) DEFINE_MDNODE_GET(DITemplateValueParameter, (unsigned Tag, MDString *Name, Metadata *Type, Metadata *Value), (Tag, Name, Type, Value)) TempDITemplateValueParameter clone()"
  },
  {
    "label": "DIVariable()",
    "kind": "Method",
    "detail": "Function (} } ; class DIVariable : public DINode { unsigned Line ; protected :)",
    "insertText": "DIVariable(LLVMContext &C, unsigned ID, StorageType Storage, unsigned Tag, unsigned Line, ArrayRef<Metadata *> Ops) : DINode(C, ID, Storage, Tag, Ops), Line(Line)"
  },
  {
    "label": "DIVariable()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DIVariable()"
  },
  {
    "label": "setOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOperand(0, scope)"
  },
  {
    "label": "DIGlobalVariable()",
    "kind": "Method",
    "detail": "Function (} } ; class DIGlobalVariable : public DIVariable { class LLVMContextImpl ; class MDNode ; bool IsLocalToUnit ; bool IsDefinition ;)",
    "insertText": "DIGlobalVariable(LLVMContext &C, StorageType Storage, unsigned Line, bool IsLocalToUnit, bool IsDefinition, ArrayRef<Metadata *> Ops) : DIVariable(C, DIGlobalVariableKind, Storage, dwarf::DW_TAG_variable, Line, Ops), IsLocalToUnit(IsLocalToUnit), IsDefinition(IsDefinition)"
  },
  {
    "label": "DIGlobalVariable()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DIGlobalVariable()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DIGlobalVariable*)",
    "insertText": "getImpl(LLVMContext &Context, DIScope *Scope, StringRef Name, StringRef LinkageName, DIFile *File, unsigned Line, DITypeRef Type, bool IsLocalToUnit, bool IsDefinition, Constant *Variable, DIDerivedType *StaticDataMemberDeclaration, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DIGlobalVariable*)",
    "insertText": "getImpl(LLVMContext &Context, Metadata *Scope, MDString *Name, MDString *LinkageName, Metadata *File, unsigned Line, Metadata *Type, bool IsLocalToUnit, bool IsDefinition, Metadata *Variable, Metadata *StaticDataMemberDeclaration, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DIGlobalVariable, (DIScope * Scope, StringRef Name, StringRef LinkageName, DIFile *File, unsigned Line, DITypeRef Type, bool IsLocalToUnit, bool IsDefinition, Constant *Variable, DIDerivedType *StaticDataMemberDeclaration), (Scope, Name, LinkageName, File, Line, Type, IsLocalToUnit, IsDefinition, Variable, StaticDataMemberDeclaration)) DEFINE_MDNODE_GET(DIGlobalVariable, (Metadata * Scope, MDString *Name, MDString *LinkageName, Metadata *File, unsigned Line, Metadata *Type, bool IsLocalToUnit, bool IsDefinition, Metadata *Variable, Metadata *StaticDataMemberDeclaration), (Scope, Name, LinkageName, File, Line, Type, IsLocalToUnit, IsDefinition, Variable, StaticDataMemberDeclaration)) TempDIGlobalVariable clone()"
  },
  {
    "label": "isLocalToUnit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLocalToUnit()"
  },
  {
    "label": "getVariable()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getVariable()"
  },
  {
    "label": "getRawVariable()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawVariable()"
  },
  {
    "label": "getRawStaticDataMemberDeclaration()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawStaticDataMemberDeclaration()"
  },
  {
    "label": "DILocalVariable()",
    "kind": "Method",
    "detail": "Function (} } ; class DILocalVariable : public DIVariable { class LLVMContextImpl ; class MDNode ; unsigned Arg ; unsigned Flags ;)",
    "insertText": "DILocalVariable(LLVMContext &C, StorageType Storage, unsigned Tag, unsigned Line, unsigned Arg, unsigned Flags, ArrayRef<Metadata *> Ops) : DIVariable(C, DILocalVariableKind, Storage, Tag, Line, Ops), Arg(Arg), Flags(Flags)"
  },
  {
    "label": "DILocalVariable()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DILocalVariable()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DILocalVariable*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Tag, DIScope *Scope, StringRef Name, DIFile *File, unsigned Line, DITypeRef Type, unsigned Arg, unsigned Flags, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DILocalVariable*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Tag, Metadata *Scope, MDString *Name, Metadata *File, unsigned Line, Metadata *Type, unsigned Arg, unsigned Flags, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DILocalVariable, (unsigned Tag, DILocalScope *Scope, StringRef Name, DIFile *File, unsigned Line, DITypeRef Type, unsigned Arg, unsigned Flags), (Tag, Scope, Name, File, Line, Type, Arg, Flags)) DEFINE_MDNODE_GET(DILocalVariable, (unsigned Tag, Metadata *Scope, MDString *Name, Metadata *File, unsigned Line, Metadata *Type, unsigned Arg, unsigned Flags), (Tag, Scope, Name, File, Line, Type, Arg, Flags)) TempDILocalVariable clone()"
  },
  {
    "label": "getArg()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getArg()"
  },
  {
    "label": "isValidLocationForIntrinsic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValidLocationForIntrinsic(const DILocation *DL)"
  },
  {
    "label": "DIExpression()",
    "kind": "Method",
    "detail": "Function (} } ; class DIExpression : public MDNode { class LLVMContextImpl ; class MDNode ; std::vector<uint64_t> Elements ;)",
    "insertText": "DIExpression(LLVMContext &C, StorageType Storage, ArrayRef<uint64_t> Elements) : MDNode(C, DIExpressionKind, Storage, None), Elements(Elements.begin(), Elements.end())"
  },
  {
    "label": "DIExpression()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DIExpression()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DIExpression*)",
    "insertText": "getImpl(LLVMContext &Context, ArrayRef<uint64_t> Elements, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DIExpression, (ArrayRef<uint64_t> Elements), (Elements)) TempDIExpression clone()"
  },
  {
    "label": "getElement()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getElement(unsigned I)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I < Elements.size() && \"Index out of range\")"
  },
  {
    "label": "getBitPieceOffset()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getBitPieceOffset()"
  },
  {
    "label": "getBitPieceSize()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getBitPieceSize()"
  },
  {
    "label": "elements_begin()",
    "kind": "Method",
    "detail": "Function (typedef ArrayRef<uint64_t>::iterator element_iterator ; element_iterator)",
    "insertText": "elements_begin()"
  },
  {
    "label": "elements_end()",
    "kind": "Method",
    "detail": "Function (} element_iterator)",
    "insertText": "elements_end()"
  },
  {
    "label": "ExprOperand()",
    "kind": "Method",
    "detail": "Function (} class ExprOperand { const uint64_t* Op ; public :)",
    "insertText": "ExprOperand(const uint64_t *Op) : Op(Op)"
  },
  {
    "label": "getSize()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getSize()"
  },
  {
    "label": "expr_op_iterator()",
    "kind": "Method",
    "detail": "Function (} ; class expr_op_iterator { ExprOperand Op ; public : using iterator_category = std::input_iterator_tag ; using value_type = ExprOperand ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ;)",
    "insertText": "expr_op_iterator(element_iterator I) : Op(I)"
  },
  {
    "label": "getBase()",
    "kind": "Method",
    "detail": "Function (} element_iterator)",
    "insertText": "getBase()"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "increment()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (expr_op_iterator)",
    "insertText": "T(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const expr_op_iterator &X)"
  },
  {
    "label": "ExprOperand()",
    "kind": "Method",
    "detail": "Function (Op =)",
    "insertText": "ExprOperand(getBase() + Op.getSize())"
  },
  {
    "label": "expr_op_begin()",
    "kind": "Method",
    "detail": "Function (} } ; expr_op_iterator)",
    "insertText": "expr_op_begin()"
  },
  {
    "label": "expr_op_end()",
    "kind": "Method",
    "detail": "Function (} expr_op_iterator)",
    "insertText": "expr_op_end()"
  },
  {
    "label": "isValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValid()"
  },
  {
    "label": "DIObjCProperty()",
    "kind": "Method",
    "detail": "Function (} } ; class DIObjCProperty : public DINode { class LLVMContextImpl ; class MDNode ; unsigned Line ; unsigned Attributes ;)",
    "insertText": "DIObjCProperty(LLVMContext &C, StorageType Storage, unsigned Line, unsigned Attributes, ArrayRef<Metadata *> Ops) : DINode(C, DIObjCPropertyKind, Storage, dwarf::DW_TAG_APPLE_property, Ops), Line(Line), Attributes(Attributes)"
  },
  {
    "label": "DIObjCProperty()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DIObjCProperty()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DIObjCProperty*)",
    "insertText": "getImpl(LLVMContext &Context, StringRef Name, DIFile *File, unsigned Line, StringRef GetterName, StringRef SetterName, unsigned Attributes, DITypeRef Type, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DIObjCProperty*)",
    "insertText": "getImpl(LLVMContext &Context, MDString *Name, Metadata *File, unsigned Line, MDString *GetterName, MDString *SetterName, unsigned Attributes, Metadata *Type, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DIObjCProperty, (StringRef Name, DIFile *File, unsigned Line, StringRef GetterName, StringRef SetterName, unsigned Attributes, DITypeRef Type), (Name, File, Line, GetterName, SetterName, Attributes, Type)) DEFINE_MDNODE_GET(DIObjCProperty, (MDString * Name, Metadata *File, unsigned Line, MDString *GetterName, MDString *SetterName, unsigned Attributes, Metadata *Type), (Name, File, Line, GetterName, SetterName, Attributes, Type)) TempDIObjCProperty clone()"
  },
  {
    "label": "getGetterName()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getGetterName()"
  },
  {
    "label": "getSetterName()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getSetterName()"
  },
  {
    "label": "getRawGetterName()",
    "kind": "Method",
    "detail": "Function (} MDString*)",
    "insertText": "getRawGetterName()"
  },
  {
    "label": "getRawSetterName()",
    "kind": "Method",
    "detail": "Function (} MDString*)",
    "insertText": "getRawSetterName()"
  },
  {
    "label": "DIImportedEntity()",
    "kind": "Method",
    "detail": "Function (} } ; class DIImportedEntity : public DINode { class LLVMContextImpl ; class MDNode ; unsigned Line ;)",
    "insertText": "DIImportedEntity(LLVMContext &C, StorageType Storage, unsigned Tag, unsigned Line, ArrayRef<Metadata *> Ops) : DINode(C, DIImportedEntityKind, Storage, Tag, Ops), Line(Line)"
  },
  {
    "label": "DIImportedEntity()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DIImportedEntity()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (DIImportedEntity*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Tag, DIScope *Scope, DINodeRef Entity, unsigned Line, StringRef Name, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (} DIImportedEntity*)",
    "insertText": "getImpl(LLVMContext &Context, unsigned Tag, Metadata *Scope, Metadata *Entity, unsigned Line, MDString *Name, StorageType Storage, bool ShouldCreate = true)"
  },
  {
    "label": "DEFINE_MDNODE_GET()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DEFINE_MDNODE_GET(DIImportedEntity, (unsigned Tag, DIScope *Scope, DINodeRef Entity, unsigned Line, StringRef Name = \"\"), (Tag, Scope, Entity, Line, Name)) DEFINE_MDNODE_GET(DIImportedEntity, (unsigned Tag, Metadata *Scope, Metadata *Entity, unsigned Line, MDString *Name), (Tag, Scope, Entity, Line, Name)) TempDIImportedEntity clone()"
  },
  {
    "label": "getEntity()",
    "kind": "Method",
    "detail": "Function (} DINodeRef)",
    "insertText": "getEntity()"
  },
  {
    "label": "getRawEntity()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "getRawEntity()"
  }
]