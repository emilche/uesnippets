[
  {
    "label": "MockRecordableEncodedFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockRecordableEncodedFrame"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (# ifndef API_VIDEO_TEST_MOCK_RECORDABLE_ENCODED_FRAME_H_ # define API_VIDEO_TEST_MOCK_RECORDABLE_ENCODED_FRAME_H_ # include \" api / video / recordable_encoded_frame . h \" # include \" test / gmock . h \" namespace webrtc { class MockRecordableEncodedFrame : public RecordableEncodedFrame { public :)",
    "insertText": "MOCK_METHOD(rtc::scoped_refptr<const EncodedImageBufferInterface>, encoded_buffer, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(absl::optional<webrtc::ColorSpace>, color_space, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(VideoCodecType, codec, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, is_key_frame, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(EncodedResolution, resolution, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(Timestamp, render_time, (), (const, override))"
  }
]