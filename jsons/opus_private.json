[
  {
    "label": "OpusRepacketizer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpusRepacketizer"
  },
  {
    "label": "ChannelLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChannelLayout"
  },
  {
    "label": "OpusMSEncoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpusMSEncoder"
  },
  {
    "label": "OpusMSDecoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpusMSDecoder"
  },
  {
    "label": "OpusMSEncoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpusMSEncoder"
  },
  {
    "label": "OpusMSDecoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpusMSDecoder"
  },
  {
    "label": "foo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "foo"
  },
  {
    "label": "foo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "foo"
  },
  {
    "label": "OpusMSEncoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpusMSEncoder"
  },
  {
    "label": "OpusMSDecoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpusMSDecoder"
  },
  {
    "label": "opus_multistream_encoder_ctl_va_list()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "opus_multistream_encoder_ctl_va_list(struct OpusMSEncoder *st, int request,\n  va_list ap)"
  },
  {
    "label": "opus_multistream_decoder_ctl_va_list()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "opus_multistream_decoder_ctl_va_list(struct OpusMSDecoder *st, int request,\n  va_list ap)"
  },
  {
    "label": "validate_layout()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "validate_layout(const ChannelLayout *layout)"
  },
  {
    "label": "get_left_channel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "get_left_channel(const ChannelLayout *layout, int stream_id, int prev)"
  },
  {
    "label": "get_right_channel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "get_right_channel(const ChannelLayout *layout, int stream_id, int prev)"
  },
  {
    "label": "get_mono_channel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "get_mono_channel(const ChannelLayout *layout, int stream_id, int prev)"
  },
  {
    "label": "downmix_float()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "downmix_float(const void *_x, opus_val32 *sub, int subframe, int offset, int c1, int c2, int C)"
  },
  {
    "label": "downmix_int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "downmix_int(const void *_x, opus_val32 *sub, int subframe, int offset, int c1, int c2, int C)"
  },
  {
    "label": "is_digital_silence()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "is_digital_silence(const opus_val16* pcm, int frame_size, int channels, int lsb_depth)"
  },
  {
    "label": "encode_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "encode_size(int size, unsigned char *data)"
  },
  {
    "label": "frame_size_select()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "frame_size_select(opus_int32 frame_size, int variable_duration, opus_int32 Fs)"
  },
  {
    "label": "opus_encode_native()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "opus_encode_native(OpusEncoder *st, const opus_val16 *pcm, int frame_size,\n      unsigned char *data, opus_int32 out_data_bytes, int lsb_depth,\n      const void *analysis_pcm, opus_int32 analysis_size, int c1, int c2,\n      int analysis_channels, downmix_func downmix, int float_api)"
  },
  {
    "label": "opus_decode_native()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "opus_decode_native(OpusDecoder *st, const unsigned char *data, opus_int32 len,\n      opus_val16 *pcm, int frame_size, int decode_fec, int self_delimited,\n      opus_int32 *packet_offset, int soft_clip)"
  },
  {
    "label": "opus_packet_parse_impl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "opus_packet_parse_impl(const unsigned char *data, opus_int32 len,\n      int self_delimited, unsigned char *out_toc,\n      const unsigned char *frames[48], opus_int16 size[48],\n      int *payload_offset, opus_int32 *packet_offset)"
  },
  {
    "label": "opus_repacketizer_out_range_impl()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "opus_repacketizer_out_range_impl(OpusRepacketizer *rp, int begin, int end,\n      unsigned char *data, opus_int32 maxlen, int self_delimited, int pad)"
  },
  {
    "label": "pad_frame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "pad_frame(unsigned char *data, opus_int32 len, opus_int32 new_len)"
  },
  {
    "label": "opus_multistream_encode_native()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "opus_multistream_encode_native(\n  struct OpusMSEncoder *st,\n  opus_copy_channel_in_func copy_channel_in,\n  const void *pcm,\n  int analysis_frame_size,\n  unsigned char *data,\n  opus_int32 max_data_bytes,\n  int lsb_depth,\n  downmix_func downmix,\n  int float_api,\n  void *user_data\n)"
  },
  {
    "label": "opus_multistream_decode_native()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "opus_multistream_decode_native(\n  struct OpusMSDecoder *st,\n  const unsigned char *data,\n  opus_int32 len,\n  void *pcm,\n  opus_copy_channel_out_func copy_channel_out,\n  int frame_size,\n  int decode_fec,\n  int soft_clip,\n  void *user_data\n)"
  }
]