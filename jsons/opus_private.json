[
  {
    "label": "OpusRepacketizer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpusRepacketizer"
  },
  {
    "label": "ChannelLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChannelLayout"
  },
  {
    "label": "OpusMSEncoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpusMSEncoder"
  },
  {
    "label": "OpusMSDecoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpusMSDecoder"
  },
  {
    "label": "foo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "foo"
  },
  {
    "label": "opus_multistream_encoder_ctl_va_list()",
    "kind": "Method",
    "detail": "Function (# ifndef OPUS_PRIVATE_H # define OPUS_PRIVATE_H # include \" arch . h \" # include \" opus . h \" # include \" celt . h \" # include<stdarg . h> # include<stddef . h> struct OpusRepacketizer { unsigned char toc ; int nb_frames ; const unsigned char* frames [ 4 8 ] ; opus_int16 len [ 4 8 ] ; int framesize ; } ; typedef struct ChannelLayout { int nb_channels ; int nb_streams ; int nb_coupled_streams ; unsigned char mapping [ 2 5 6 ] ; } ChannelLayout ; typedef enum { MAPPING_TYPE_NONE,MAPPING_TYPE_SURROUND,MAPPING_TYPE_AMBISONICS } MappingType ; struct OpusMSEncoder { ChannelLayout layout ; int arch ; int lfe_stream ; int application ; int variable_duration ; MappingType mapping_type ; opus_int32 bitrate_bps ; } ; struct OpusMSDecoder { ChannelLayout layout ; } ; int)",
    "insertText": "opus_multistream_encoder_ctl_va_list(struct OpusMSEncoder *st, int request, va_list ap)"
  },
  {
    "label": "opus_multistream_decoder_ctl_va_list()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "opus_multistream_decoder_ctl_va_list(struct OpusMSDecoder *st, int request, va_list ap)"
  },
  {
    "label": "validate_layout()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "validate_layout(const ChannelLayout *layout)"
  },
  {
    "label": "get_left_channel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "get_left_channel(const ChannelLayout *layout, int stream_id, int prev)"
  },
  {
    "label": "get_right_channel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "get_right_channel(const ChannelLayout *layout, int stream_id, int prev)"
  },
  {
    "label": "get_mono_channel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "get_mono_channel(const ChannelLayout *layout, int stream_id, int prev)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*opus_copy_channel_in_func)( opus_val16 *dst, int dst_stride, const void *src, int src_stride, int src_channel, int frame_size, void *user_data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*opus_copy_channel_out_func)( void *dst, int dst_stride, int dst_channel, const opus_val16 *src, int src_stride, int frame_size, void *user_data)"
  },
  {
    "label": "OPUS_SET_VOICE_RATIO()",
    "kind": "Method",
    "detail": "Function (# define MODE_SILK_ONLY 1 0 0 0 # define MODE_HYBRID 1 0 0 1 # define MODE_CELT_ONLY 1 0 0 2 # define OPUS_SET_VOICE_RATIO_REQUEST 1 1 0 1 8 # define OPUS_GET_VOICE_RATIO_REQUEST 1 1 0 1 9 # define)",
    "insertText": "OPUS_SET_VOICE_RATIO(x) OPUS_SET_VOICE_RATIO_REQUEST, __opus_check_int(x) #define OPUS_GET_VOICE_RATIO(x) OPUS_GET_VOICE_RATIO_REQUEST, __opus_check_int_ptr(x) #define OPUS_SET_FORCE_MODE_REQUEST 11002 #define OPUS_SET_FORCE_MODE(x) OPUS_SET_FORCE_MODE_REQUEST, __opus_check_int(x) typedef void (*downmix_func)(const void *, opus_val32 *, int, int, int, int, int)"
  },
  {
    "label": "downmix_float()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "downmix_float(const void *_x, opus_val32 *sub, int subframe, int offset, int c1, int c2, int C)"
  },
  {
    "label": "downmix_int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "downmix_int(const void *_x, opus_val32 *sub, int subframe, int offset, int c1, int c2, int C)"
  },
  {
    "label": "is_digital_silence()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "is_digital_silence(const opus_val16* pcm, int frame_size, int channels, int lsb_depth)"
  },
  {
    "label": "encode_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "encode_size(int size, unsigned char *data)"
  },
  {
    "label": "frame_size_select()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "frame_size_select(opus_int32 frame_size, int variable_duration, opus_int32 Fs)"
  },
  {
    "label": "opus_encode_native()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "opus_encode_native(OpusEncoder *st, const opus_val16 *pcm, int frame_size, unsigned char *data, opus_int32 out_data_bytes, int lsb_depth, const void *analysis_pcm, opus_int32 analysis_size, int c1, int c2, int analysis_channels, downmix_func downmix, int float_api)"
  },
  {
    "label": "opus_decode_native()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "opus_decode_native(OpusDecoder *st, const unsigned char *data, opus_int32 len, opus_val16 *pcm, int frame_size, int decode_fec, int self_delimited, opus_int32 *packet_offset, int soft_clip)"
  },
  {
    "label": "align()",
    "kind": "Method",
    "detail": "Function (OPUS_INLINE int)",
    "insertText": "align(int i)"
  },
  {
    "label": "offsetof()",
    "kind": "Method",
    "detail": "Function (struct foo { char c ; union { void* p ; opus_int32 i ; opus_val32 v ; } u ; } ; unsigned int alignment =)",
    "insertText": "offsetof(struct foo, u)"
  },
  {
    "label": "opus_packet_parse_impl()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "opus_packet_parse_impl(const unsigned char *data, opus_int32 len, int self_delimited, unsigned char *out_toc, const unsigned char *frames[48], opus_int16 size[48], int *payload_offset, opus_int32 *packet_offset)"
  },
  {
    "label": "opus_repacketizer_out_range_impl()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "opus_repacketizer_out_range_impl(OpusRepacketizer *rp, int begin, int end, unsigned char *data, opus_int32 maxlen, int self_delimited, int pad)"
  },
  {
    "label": "pad_frame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "pad_frame(unsigned char *data, opus_int32 len, opus_int32 new_len)"
  },
  {
    "label": "opus_multistream_encode_native()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "opus_multistream_encode_native(struct OpusMSEncoder *st, opus_copy_channel_in_func copy_channel_in, const void *pcm, int analysis_frame_size, unsigned char *data, opus_int32 max_data_bytes, int lsb_depth, downmix_func downmix, int float_api, void *user_data)"
  },
  {
    "label": "opus_multistream_decode_native()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "opus_multistream_decode_native(struct OpusMSDecoder *st, const unsigned char *data, opus_int32 len, void *pcm, opus_copy_channel_out_func copy_channel_out, int frame_size, int decode_fec, int soft_clip, void *user_data)"
  }
]