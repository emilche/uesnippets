[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "Sample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Sample"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_OPoints_h # define Alembic_AbcGeom_OPoints_h # include<Alembic / Util / Export . h> # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / AbcGeom / SchemaInfoDeclarations . h> # include<Alembic / AbcGeom / OGeomParam . h> # include<Alembic / AbcGeom / OGeomBase . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT OPointsSchema : public OGeomBaseSchema<PointsSchemaInfo> { public : class Sample { public :)",
    "insertText": "Sample()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Sample(const Abc::P3fArraySample &iPos, const Abc::V3fArraySample &iVelocities = Abc::V3fArraySample(), const OFloatGeomParam::Sample &iWidths = \\ OFloatGeomParam::Sample() ) : m_positions( iPos ) , m_velocities( iVelocities ) , m_widths( iWidths)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Sample(const Abc::P3fArraySample &iPos, const Abc::UInt64ArraySample &iId, const Abc::V3fArraySample &iVelocities = Abc::V3fArraySample(), const OFloatGeomParam::Sample &iWidths = \\ OFloatGeomParam::Sample() ) : m_positions( iPos ) , m_velocities( iVelocities ) , m_ids( iId ) , m_widths( iWidths)"
  },
  {
    "label": "getPositions()",
    "kind": "Method",
    "detail": "Function (} const Abc::P3fArraySample&)",
    "insertText": "getPositions()"
  },
  {
    "label": "getIds()",
    "kind": "Method",
    "detail": "Function (m_positions = iSmp ; } const Abc::UInt64ArraySample&)",
    "insertText": "getIds()"
  },
  {
    "label": "getVelocities()",
    "kind": "Method",
    "detail": "Function (m_ids = iSmp ; } const Abc::V3fArraySample&)",
    "insertText": "getVelocities()"
  },
  {
    "label": "getWidths()",
    "kind": "Method",
    "detail": "Function (m_velocities = iVelocities ; } const OFloatGeomParam::Sample&)",
    "insertText": "getWidths()"
  },
  {
    "label": "getSelfBounds()",
    "kind": "Method",
    "detail": "Function (m_widths = iWidths ; } const Abc::Box3d&)",
    "insertText": "getSelfBounds()"
  },
  {
    "label": "makeEmpty()",
    "kind": "Method",
    "detail": "Function (m_selfBounds .)",
    "insertText": "makeEmpty()"
  },
  {
    "label": "isPartialSample()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPartialSample()"
  },
  {
    "label": "OPointsSchema()",
    "kind": "Method",
    "detail": "Function (m_selectiveExport = false ; m_numSamples = 0 ; m_timeSamplingIndex = 0 ; })",
    "insertText": "OPointsSchema(AbcA::CompoundPropertyWriterPtr iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument(), const Abc::Argument &iArg2 = Abc::Argument(), const Abc::Argument &iArg3 = Abc::Argument())"
  },
  {
    "label": "OPointsSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPointsSchema(Abc::OCompoundProperty iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument(), const Abc::Argument &iArg2 = Abc::Argument())"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (AbcA::TimeSamplingPtr)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "getObject()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "getObject().getArchive().getTimeSampling( 0)"
  },
  {
    "label": "getNumSamples()",
    "kind": "Method",
    "detail": "Function (} } size_t)",
    "insertText": "getNumSamples()"
  },
  {
    "label": "setFromPrevious()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFromPrevious()"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSampling(uint32_t iIndex)"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSampling(AbcA::TimeSamplingPtr iTime)"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid()"
  },
  {
    "label": "ALEMBIC_OVERRIDE_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OVERRIDE_OPERATOR_BOOL(OPointsSchema::valid())"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "init(uint32_t iTsIdx, bool isSparse)"
  },
  {
    "label": "selectiveSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "selectiveSet(const Sample &iSamp)"
  },
  {
    "label": "createPositionProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createPositionProperty()"
  },
  {
    "label": "createIdProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createIdProperty()"
  },
  {
    "label": "createVelocityProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createVelocityProperty()"
  },
  {
    "label": "createWidthsProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createWidthsProperty(const Sample &iSamp)"
  }
]