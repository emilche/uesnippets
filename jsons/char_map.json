[
  {
    "label": "Charmap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Charmap"
  },
  {
    "label": "Charmap()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_CHAR_MAP_H_ # define ABSL_STRINGS_INTERNAL_CHAR_MAP_H_ # include<cstddef> # include<cstdint> # include<cstring> # include \" absl / base / macros . h \" # include \" absl / base / port . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace strings_internal { class Charmap { public :)",
    "insertText": "Charmap() : m_()"
  },
  {
    "label": "Charmap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Charmap(const char* str, int len) : m_()"
  },
  {
    "label": "Charmap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Charmap(const char* str) : m_()"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "contains(unsigned char c)"
  },
  {
    "label": "IntersectsWith()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IntersectsWith(const Charmap& c)"
  },
  {
    "label": "IsZero()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "IsZero()"
  },
  {
    "label": "Char()",
    "kind": "Method",
    "detail": "Function (} return true ; } Charmap)",
    "insertText": "Char(char x)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} Charmap)",
    "insertText": "FromString(const char* s)"
  },
  {
    "label": "Range()",
    "kind": "Method",
    "detail": "Function (} Charmap)",
    "insertText": "Range(char lo, char hi)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Charmap)",
    "insertText": "operator(const Charmap& a, const Charmap& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Charmap)",
    "insertText": "operator(const Charmap& a)"
  },
  {
    "label": "Charmap()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "Charmap(uint64_t b0, uint64_t b1, uint64_t b2, uint64_t b3)"
  },
  {
    "label": "RangeForWord()",
    "kind": "Method",
    "detail": "Function (b0,b1,b2,b3 } { } uint64_t)",
    "insertText": "RangeForWord(char lo, char hi, uint64_t word)"
  },
  {
    "label": "OpenRangeFromZeroForWord()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "OpenRangeFromZeroForWord(uint64_t upper, uint64_t word)"
  },
  {
    "label": "CharMaskForWord()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "CharMaskForWord(char x, uint64_t word)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const auto unsigned_x = static_cast<unsigned)",
    "insertText": "char(x)"
  },
  {
    "label": "SetChar()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetChar(char c)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const auto unsigned_c = static_cast<unsigned)",
    "insertText": "char(c)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (m_ [ unsigned_c / 6 4 ] | = static_cast<)",
    "insertText": "uint64_t(1) << (unsigned_c % 64)"
  },
  {
    "label": "UpperCharmap()",
    "kind": "Method",
    "detail": "Function (} uint64_t m_ [ 4 ] ; } ; Charmap)",
    "insertText": "UpperCharmap()"
  },
  {
    "label": "LowerCharmap()",
    "kind": "Method",
    "detail": "Function (} Charmap)",
    "insertText": "LowerCharmap()"
  },
  {
    "label": "DigitCharmap()",
    "kind": "Method",
    "detail": "Function (} Charmap)",
    "insertText": "DigitCharmap()"
  },
  {
    "label": "AlphaCharmap()",
    "kind": "Method",
    "detail": "Function (} Charmap)",
    "insertText": "AlphaCharmap()"
  },
  {
    "label": "AlnumCharmap()",
    "kind": "Method",
    "detail": "Function (} Charmap)",
    "insertText": "AlnumCharmap()"
  },
  {
    "label": "XDigitCharmap()",
    "kind": "Method",
    "detail": "Function (} Charmap)",
    "insertText": "XDigitCharmap()"
  },
  {
    "label": "PrintCharmap()",
    "kind": "Method",
    "detail": "Function (} Charmap)",
    "insertText": "PrintCharmap()"
  },
  {
    "label": "SpaceCharmap()",
    "kind": "Method",
    "detail": "Function (} Charmap)",
    "insertText": "SpaceCharmap()"
  },
  {
    "label": "CntrlCharmap()",
    "kind": "Method",
    "detail": "Function (} Charmap)",
    "insertText": "CntrlCharmap()"
  },
  {
    "label": "BlankCharmap()",
    "kind": "Method",
    "detail": "Function (} Charmap)",
    "insertText": "BlankCharmap()"
  },
  {
    "label": "GraphCharmap()",
    "kind": "Method",
    "detail": "Function (} Charmap)",
    "insertText": "GraphCharmap()"
  },
  {
    "label": "PunctCharmap()",
    "kind": "Method",
    "detail": "Function (} Charmap)",
    "insertText": "PunctCharmap()"
  }
]