[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FIoStoreTocHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoStoreTocHeader"
  },
  {
    "label": "FIoStoreTocEntryMeta",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoStoreTocEntryMeta"
  },
  {
    "label": "FIoStoreTocCompressedBlockEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoStoreTocCompressedBlockEntry"
  },
  {
    "label": "FIoStoreTocResource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoStoreTocResource"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" HAL / Platform . h \" # include \" HAL / UnrealMemory . h \" # include \" IO / IoContainerId . h \" # include \" IO / IoDispatcher . h \" # include \" IO / IoOffsetLength . h \" # include \" Logging / LogMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Guid . h \" # include \" Misc / SecureHash . h \" # include \" UObject / NameTypes . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogIoStore, Log, All)"
  },
  {
    "label": "MakeMagic()",
    "kind": "Method",
    "detail": "Function (enum class EIoStoreTocVersion : uint8 { Invalid = 0,Initial,DirectoryIndex,PartitionSize,PerfectHash,PerfectHashWithOverflow,OnDemandMetaData,RemovedOnDemandMetaData,ReplaceIoChunkHashWithIoHash,LatestPlusOne,Latest = LatestPlusOne - 1 } ; struct FIoStoreTocHeader { char TocMagicImg [ ] = \" - = = - - = = - - = = - - = = - \" ; uint8 TocMagic [ 1 6 ] ; uint8 Version ; uint8 Reserved0 = 0 ; uint16 Reserved1 = 0 ; uint32 TocHeaderSize ; uint32 TocEntryCount ; uint32 TocCompressedBlockEntryCount ; uint32 TocCompressedBlockEntrySize ; uint32 CompressionMethodNameCount ; uint32 CompressionMethodNameLength ; uint32 CompressionBlockSize ; uint32 DirectoryIndexSize ; uint32 PartitionCount = 0 ; FIoContainerId ContainerId ; FGuid EncryptionKeyGuid ; EIoContainerFlags ContainerFlags ; uint8 Reserved3 = 0 ; uint16 Reserved4 = 0 ; uint32 TocChunkPerfectHashSeedsCount = 0 ; uint64 PartitionSize = 0 ; uint32 TocChunksWithoutPerfectHashCount = 0 ; uint32 Reserved7 = 0 ; uint64 Reserved8 [ 5 ] = { 0 } ; void)",
    "insertText": "MakeMagic()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(TocMagic, TocMagicImg, sizeof TocMagic)"
  },
  {
    "label": "CheckMagic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckMagic()"
  },
  {
    "label": "Compressed()",
    "kind": "Method",
    "detail": "Function (} } ; enum class FIoStoreTocEntryMetaFlags : uint8 { None,)",
    "insertText": "Compressed(1 << 0), MemoryMapped = (1 << 1)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(FIoStoreTocEntryMetaFlags)"
  },
  {
    "label": "OffsetMask()",
    "kind": "Method",
    "detail": "Function (struct FIoStoreTocEntryMeta { FIoHash ChunkHash ; FIoStoreTocEntryMetaFlags Flags = FIoStoreTocEntryMetaFlags::None ; uint8 Pad [ 3 ] = { 0 } ; } ; struct FIoStoreTocCompressedBlockEntry { uint32 OffsetBits = 4 0 ; uint64)",
    "insertText": "OffsetMask(1ull << OffsetBits)"
  },
  {
    "label": "SizeMask()",
    "kind": "Method",
    "detail": "Function (uint32 SizeBits = 2 4 ; uint32)",
    "insertText": "SizeMask(1 << SizeBits)"
  },
  {
    "label": "GetOffset()",
    "kind": "Method",
    "detail": "Function (uint32 SizeShift = 8 ; uint64)",
    "insertText": "GetOffset()"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (const uint64* Offset = reinterpret_cast<const)",
    "insertText": "uint64(Data)"
  },
  {
    "label": "GetCompressedSize()",
    "kind": "Method",
    "detail": "Function (* Offset = InOffset& OffsetMask ; } uint32)",
    "insertText": "GetCompressedSize()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32* Size = reinterpret_cast<const)",
    "insertText": "uint32(Data)"
  },
  {
    "label": "SetCompressedSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCompressedSize(uint32 InSize)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "Size(uint32(InSize) << SizeShift)"
  },
  {
    "label": "GetUncompressedSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetUncompressedSize()"
  },
  {
    "label": "GetCompressionMethodIndex()",
    "kind": "Method",
    "detail": "Function (* UncompressedSize = InSize& SizeMask ; } uint8)",
    "insertText": "GetCompressionMethodIndex()"
  },
  {
    "label": "SetCompressionMethodIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCompressionMethodIndex(uint8 InIndex)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (* Index | =)",
    "insertText": "uint32(InIndex)"
  },
  {
    "label": "ReadDirectoryIndex()",
    "kind": "Method",
    "detail": "Function (} private : uint8 Data [ 5 + 3 + 3 + 1 ] ; } ; enum class EIoStoreTocReadOptions { Default,)",
    "insertText": "ReadDirectoryIndex(1 << 0), ReadTocMeta = (1 << 1)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EIoStoreTocReadOptions)"
  },
  {
    "label": "GetTocChunkInfo()",
    "kind": "Method",
    "detail": "Function (struct FIoStoreTocResource { enum { CompressionMethodNameLen = 3 2 } ; FIoStoreTocHeader Header ; TArray<FIoChunkId> ChunkIds ; TArray<FIoOffsetAndLength> ChunkOffsetLengths ; TArray<int32> ChunkPerfectHashSeeds ; TArray<int32> ChunkIndicesWithoutPerfectHash ; TArray<FIoStoreTocCompressedBlockEntry> CompressionBlocks ; TArray<FName> CompressionMethods ; FSHAHash SignatureHash ; TArray<FSHAHash> ChunkBlockSignatures ; TArray<uint8> DirectoryIndexBuffer ; TArray<FIoStoreTocEntryMeta> ChunkMetas ; [ [ nodiscard ] ] FIoStoreTocChunkInfo)",
    "insertText": "GetTocChunkInfo(int32 TocEntryIndex)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FIoStatus)",
    "insertText": "Read(const TCHAR* TocFilePath, EIoStoreTocReadOptions ReadOptions, FIoStoreTocResource& OutTocResource)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] TIoStatusOr<uint64>)",
    "insertText": "Write(const TCHAR* TocFilePath, FIoStoreTocResource& TocResource, uint32 CompressionBlockSize, uint64 MaxPartitionSize, const FIoContainerSettings& ContainerSettings)"
  },
  {
    "label": "HashChunkIdWithSeed()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "HashChunkIdWithSeed(int32 Seed, const FIoChunkId& ChunkId)"
  }
]