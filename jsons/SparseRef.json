[
  {
    "label": "SparseRefBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseRefBase"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "match",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "match"
  },
  {
    "label": "Ref",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Ref"
  },
  {
    "label": "evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator"
  },
  {
    "label": "IsVectorAtCompileTime()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSE_REF_H # define EIGEN_SPARSE_REF_H namespace Eigen { enum { StandardCompressedFormat = 2 } ; namespace internal { template<Derived> class SparseRefBase ; template<MatScalar,int MatOptions,MatIndex,int _Options,_StrideType> struct traits<Ref<SparseMatrix<MatScalar,MatOptions,MatIndex>,_Options,_StrideType>> : public traits<SparseMatrix<MatScalar,MatOptions,MatIndex>> { typedef SparseMatrix<MatScalar,MatOptions,MatIndex> PlainObjectType ; enum { Options = _Options,Flags = traits<PlainObjectType>::Flags | CompressedAccessBit | NestByRefBit } ; template<Derived> struct match { enum { StorageOrderMatch = PlainObjectType::IsVectorAtCompileTime | |)",
    "insertText": "IsVectorAtCompileTime((PlainObjectType::Flags&RowMajorBit)==(Derived::Flags&RowMajorBit)), MatchAtCompileTime = (Derived::Flags&CompressedAccessBit)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<MatchAtCompileTime,internal::true_type,internal::false_type>::type type ; } ; } ; template<MatScalar,int MatOptions,MatIndex,int _Options,_StrideType> struct traits<Ref<const SparseMatrix<MatScalar,MatOptions,MatIndex>,_Options,_StrideType>> : public traits<Ref<SparseMatrix<MatScalar,MatOptions,MatIndex>,_Options,_StrideType>> { enum {)",
    "insertText": "Flags(traits<SparseMatrix<MatScalar,MatOptions,MatIndex> >::Flags | CompressedAccessBit | NestByRefBit)"
  },
  {
    "label": "MatchAtCompileTime()",
    "kind": "Method",
    "detail": "Function (} ; template<MatScalar,int MatOptions,MatIndex,int _Options,_StrideType> struct traits<Ref<SparseVector<MatScalar,MatOptions,MatIndex>,_Options,_StrideType>> : public traits<SparseVector<MatScalar,MatOptions,MatIndex>> { typedef SparseVector<MatScalar,MatOptions,MatIndex> PlainObjectType ; enum { Options = _Options,Flags = traits<PlainObjectType>::Flags | CompressedAccessBit | NestByRefBit } ; template<Derived> struct match { enum {)",
    "insertText": "MatchAtCompileTime(Derived::Flags&CompressedAccessBit)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<MatchAtCompileTime,internal::true_type,internal::false_type>::type type ; } ; } ; template<MatScalar,int MatOptions,MatIndex,int _Options,_StrideType> struct traits<Ref<const SparseVector<MatScalar,MatOptions,MatIndex>,_Options,_StrideType>> : public traits<Ref<SparseVector<MatScalar,MatOptions,MatIndex>,_Options,_StrideType>> { enum {)",
    "insertText": "Flags(traits<SparseVector<MatScalar,MatOptions,MatIndex> >::Flags | CompressedAccessBit | NestByRefBit)"
  },
  {
    "label": "EIGEN_SPARSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; template<Derived> struct traits<SparseRefBase<Derived>> : public traits<Derived> { } ; template<Derived> class SparseRefBase : public SparseMapBase<Derived> { public : typedef SparseMapBase<Derived> Base ;)",
    "insertText": "EIGEN_SPARSE_PUBLIC_INTERFACE(SparseRefBase) SparseRefBase() : Base(RowsAtCompileTime==Dynamic?0:RowsAtCompileTime,ColsAtCompileTime==Dynamic?0:ColsAtCompileTime, 0, 0, 0, 0, 0)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} protected : template<Expression> void)",
    "insertText": "construct(Expression& expr)"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (} } ; } # ifndef EIGEN_PARSED_BY_DOXYGEN template<MatScalar,int MatOptions,MatIndex,int Options,StrideType> class Ref<SparseMatrix<MatScalar,MatOptions,MatIndex>,Options,StrideType> : public internal::SparseRefBase<Ref<SparseMatrix<MatScalar,MatOptions,MatIndex>,Options,StrideType>> # else template<SparseMatrixType,int Options> class Ref<SparseMatrixType,Options> : public SparseMapBase<Derived,WriteAccessors> # endif { typedef SparseMatrix<MatScalar,MatOptions,MatIndex> PlainObjectType ; typedef internal::traits<Ref> Traits ; template<int OtherOptions>)",
    "insertText": "Ref(const SparseMatrix<MatScalar,OtherOptions,MatIndex>& expr)"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (template<int OtherOptions>)",
    "insertText": "Ref(const MappedSparseMatrix<MatScalar,OtherOptions,MatIndex>& expr)"
  },
  {
    "label": "EIGEN_SPARSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (public : typedef internal::SparseRefBase<Ref> Base ;)",
    "insertText": "EIGEN_SPARSE_PUBLIC_INTERFACE(Ref) #ifndef EIGEN_PARSED_BY_DOXYGEN template<int OtherOptions> inline Ref(SparseMatrix<MatScalar,OtherOptions,MatIndex>& expr)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(bool(Traits::template match<SparseMatrix<MatScalar,OtherOptions,MatIndex> >::MatchAtCompileTime), STORAGE_LAYOUT_DOES_NOT_MATCH)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(((Options & int(StandardCompressedFormat))==0) || (expr.isCompressed()))"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct(expr.derived())"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (} template<int OtherOptions>)",
    "insertText": "Ref(MappedSparseMatrix<MatScalar,OtherOptions,MatIndex>& expr)"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (} template<Derived>)",
    "insertText": "Ref(const SparseCompressedBase<Derived>& expr) #else template<typename Derived> inline Ref(SparseCompressedBase<Derived>& expr)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(bool(internal::is_lvalue<Derived>::value), THIS_EXPRESSION_IS_NOT_A_LVALUE__IT_IS_READ_ONLY)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(bool(Traits::template match<Derived>::MatchAtCompileTime), STORAGE_LAYOUT_DOES_NOT_MATCH)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct(expr.const_cast_derived())"
  },
  {
    "label": "EIGEN_SPARSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatScalar,int MatOptions,MatIndex,int Options,StrideType> class Ref<const SparseMatrix<MatScalar,MatOptions,MatIndex>,Options,StrideType> : public internal::SparseRefBase<Ref<const SparseMatrix<MatScalar,MatOptions,MatIndex>,Options,StrideType>> { typedef SparseMatrix<MatScalar,MatOptions,MatIndex> TPlainObjectType ; typedef internal::traits<Ref> Traits ; public : typedef internal::SparseRefBase<Ref> Base ;)",
    "insertText": "EIGEN_SPARSE_PUBLIC_INTERFACE(Ref) template<typename Derived> inline Ref(const SparseMatrixBase<Derived>& expr) : m_hasCopy(false)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct(expr.derived(), typename Traits::template match<Derived>::type())"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Ref(const Ref& other) : Base(other), m_hasCopy(false)"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (} template<OtherRef>)",
    "insertText": "Ref(const RefBase<OtherRef>& other) : m_hasCopy(false)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct(other.derived(), typename Traits::template match<OtherRef>::type())"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Ref()"
  },
  {
    "label": "TPlainObjectType()",
    "kind": "Method",
    "detail": "Function (TPlainObjectType* obj = reinterpret_cast<)",
    "insertText": "TPlainObjectType(&m_storage)"
  },
  {
    "label": "TPlainObjectType()",
    "kind": "Method",
    "detail": "Function (obj -> ~)",
    "insertText": "TPlainObjectType()"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} } protected : template<Expression> void)",
    "insertText": "construct(const Expression& expr,internal::true_type)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(obj) TPlainObjectType(expr)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (m_hasCopy = true ;)",
    "insertText": "construct(*obj)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "construct(expr)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} } template<Expression> void)",
    "insertText": "construct(const Expression& expr, internal::false_type)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} protected : internal::aligned_storage<)",
    "insertText": "sizeof(TPlainObjectType), EIGEN_ALIGNOF(TPlainObjectType)"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (bool m_hasCopy ; } ; # ifndef EIGEN_PARSED_BY_DOXYGEN template<MatScalar,int MatOptions,MatIndex,int Options,StrideType> class Ref<SparseVector<MatScalar,MatOptions,MatIndex>,Options,StrideType> : public internal::SparseRefBase<Ref<SparseVector<MatScalar,MatOptions,MatIndex>,Options,StrideType>> # else template<SparseVectorType> class Ref<SparseVectorType> : public SparseMapBase<Derived,WriteAccessors> # endif { typedef SparseVector<MatScalar,MatOptions,MatIndex> PlainObjectType ; typedef internal::traits<Ref> Traits ; template<int OtherOptions>)",
    "insertText": "Ref(const SparseVector<MatScalar,OtherOptions,MatIndex>& expr)"
  },
  {
    "label": "EIGEN_SPARSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (public : typedef internal::SparseRefBase<Ref> Base ;)",
    "insertText": "EIGEN_SPARSE_PUBLIC_INTERFACE(Ref) #ifndef EIGEN_PARSED_BY_DOXYGEN template<int OtherOptions> inline Ref(SparseVector<MatScalar,OtherOptions,MatIndex>& expr)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(bool(Traits::template match<SparseVector<MatScalar,OtherOptions,MatIndex> >::MatchAtCompileTime), STORAGE_LAYOUT_DOES_NOT_MATCH)"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (bool m_hasCopy ; } ; namespace internal { template<MatScalar,int MatOptions,MatIndex,int Options,StrideType> struct evaluator<Ref<SparseMatrix<MatScalar,MatOptions,MatIndex>,Options,StrideType>> : evaluator<SparseCompressedBase<Ref<SparseMatrix<MatScalar,MatOptions,MatIndex>,Options,StrideType>>> { typedef evaluator<SparseCompressedBase<Ref<SparseMatrix<MatScalar,MatOptions,MatIndex>,Options,StrideType>>> Base ; typedef Ref<SparseMatrix<MatScalar,MatOptions,MatIndex>,Options,StrideType> XprType ;)",
    "insertText": "evaluator() : Base()"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "evaluator(const XprType &mat) : Base(mat)"
  }
]