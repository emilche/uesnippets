[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ShouldScheduleWork",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ShouldScheduleWork"
  },
  {
    "label": "NextTask",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NextTask"
  },
  {
    "label": "Flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flags"
  },
  {
    "label": "State",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "State"
  },
  {
    "label": "WorkDeduplicator()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_WORK_DEDUPLICATOR_H_ # define BASE_TASK_SEQUENCE_MANAGER_WORK_DEDUPLICATOR_H_ # include<atomic> # include \" base / base_export . h \" # include \" base / task / sequence_manager / associated_thread_id . h \" namespace base { namespace sequence_manager { namespace internal { class BASE_EXPORT WorkDeduplicator { public :)",
    "insertText": "WorkDeduplicator(scoped_refptr<const AssociatedThreadId> associated_thread)"
  },
  {
    "label": "WorkDeduplicator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WorkDeduplicator()"
  },
  {
    "label": "BindToCurrentThread()",
    "kind": "Method",
    "detail": "Function (enum ShouldScheduleWork { kScheduleImmediate,kNotNeeded,} ; ShouldScheduleWork)",
    "insertText": "BindToCurrentThread()"
  },
  {
    "label": "OnWorkRequested()",
    "kind": "Method",
    "detail": "Function (ShouldScheduleWork)",
    "insertText": "OnWorkRequested()"
  },
  {
    "label": "OnDelayedWorkRequested()",
    "kind": "Method",
    "detail": "Function (ShouldScheduleWork)",
    "insertText": "OnDelayedWorkRequested()"
  },
  {
    "label": "OnWorkStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorkStarted()"
  },
  {
    "label": "WillCheckForMoreWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WillCheckForMoreWork()"
  },
  {
    "label": "DidCheckForMoreWork()",
    "kind": "Method",
    "detail": "Function (enum NextTask { kIsImmediate,kIsDelayed,} ; ShouldScheduleWork)",
    "insertText": "DidCheckForMoreWork(NextTask next_task)"
  }
]