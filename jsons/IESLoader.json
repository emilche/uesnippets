[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FIESLoader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIESLoader"
  },
  {
    "label": "FIESLoader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" enum class EIESPhotometricType ; class FIESLoader { public :)",
    "insertText": "FIESLoader(const uint8* Buffer, uint32 BufferLength)"
  },
  {
    "label": "ExtractInRGBA16F()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ExtractInRGBA16F(TArray<uint8>& OutData)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetWidth()"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetHeight()"
  },
  {
    "label": "GetBrightness()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBrightness()"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetError()"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (} private : TArray<float> HAngles ; TArray<float> VAngles ; TArray<float> CandelaValues ; float Brightness ; float CachedIntegral ; EIESPhotometricType PhotometricType ; void)",
    "insertText": "Load(const uint8* Buffer)"
  },
  {
    "label": "ComputeMax()",
    "kind": "Method",
    "detail": "Function (FString Error ; float)",
    "insertText": "ComputeMax()"
  },
  {
    "label": "ComputeFullIntegral()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeFullIntegral()"
  },
  {
    "label": "ComputeFilterPos()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeFilterPos(float Value, const TArray<float>& SortedValues)"
  },
  {
    "label": "InterpolatePoint()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "InterpolatePoint(int X, int Y)"
  },
  {
    "label": "InterpolateBilinear()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "InterpolateBilinear(float fX, float fY)"
  },
  {
    "label": "Interpolate2D()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Interpolate2D(float HAngle, float VAngle)"
  },
  {
    "label": "Interpolate1D()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Interpolate1D(float VAngle)"
  }
]