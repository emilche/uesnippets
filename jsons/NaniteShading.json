[
  {
    "label": "FNaniteShadingCommands",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteShadingCommands"
  },
  {
    "label": "FLumenCardPassUniformParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenCardPassUniformParameters"
  },
  {
    "label": "FCardPageRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCardPageRenderData"
  },
  {
    "label": "FSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneRenderer"
  },
  {
    "label": "FRasterResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRasterResults"
  },
  {
    "label": "FRasterContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRasterContext"
  },
  {
    "label": "FShadeBinning",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShadeBinning"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ShadeBinning()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" NaniteShared . h \" # include \" NaniteSceneProxy . h \" # include \" SceneRendering . h \" # include \" Stats / Stats . h \" struct FNaniteShadingCommands ; class FLumenCardPassUniformParameters ; class FCardPageRenderData ; class FSceneRenderer ; namespace Nanite { struct FRasterResults ; struct FRasterContext ; struct FShadeBinning { FRDGBufferRef ShadingBinData = nullptr ; FRDGBufferRef ShadingBinArgs = nullptr ; FRDGBufferRef ShadingBinStats = nullptr ; FRDGTextureRef FastClearVisualize = nullptr ; uint32 DataByteOffset = 0 u ; } ; FShadeBinning)",
    "insertText": "ShadeBinning(FRDGBuilder& GraphBuilder, const FScene& Scene, const FViewInfo& View, const FIntRect InViewRect, const FNaniteShadingCommands& ShadingCommands, const FRasterResults& RasterResults, const TConstArrayView<FRDGTextureRef> ClearTargets)"
  },
  {
    "label": "BuildShadingCommands()",
    "kind": "Method",
    "detail": "Function (enum class EBuildShadingCommandsMode : uint8 { Default = 0,Custom,} ; void)",
    "insertText": "BuildShadingCommands(FRDGBuilder& GraphBuilder, FScene& Scene, ENaniteMeshPass::Type MeshPass, FNaniteShadingCommands& ShadingCommands, EBuildShadingCommandsMode Mode = EBuildShadingCommandsMode::Default)"
  },
  {
    "label": "LoadBasePassPipeline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadBasePassPipeline(const FScene& Scene, FSceneProxyBase* SceneProxy, FSceneProxyBase::FMaterialSection& Section, FNaniteShadingPipeline& ShadingPipeline)"
  },
  {
    "label": "LoadLumenCardPipeline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadLumenCardPipeline(const FScene& Scene, FSceneProxyBase* SceneProxy, FSceneProxyBase::FMaterialSection& Section, FNaniteShadingPipeline& ShadingPipeline)"
  },
  {
    "label": "DispatchBasePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchBasePass(FRDGBuilder& GraphBuilder, FNaniteShadingCommands& ShadingCommands, const FSceneRenderer& SceneRenderer, const FSceneTextures& SceneTextures, const FRenderTargetBindingSlots& BasePassRenderTargets, const FDBufferTextures& DBufferTextures, const FScene& Scene, const FViewInfo& View, const uint32 ViewIndex, const FRasterResults& RasterResults)"
  },
  {
    "label": "CollectBasePassShadingPSOInitializers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectBasePassShadingPSOInitializers(const FSceneTexturesConfig& SceneTexturesConfig, const FPSOPrecacheVertexFactoryData& VertexFactoryData, const FMaterial& Material, const FPSOPrecacheParams& PreCacheParams, ERHIFeatureLevel::Type FeatureLevel, EShaderPlatform ShaderPlatform, int32 PSOCollectorIndex, TArray<FPSOPrecacheData>& PSOInitializers)"
  },
  {
    "label": "CollectLumenCardPSOInitializers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectLumenCardPSOInitializers(const FSceneTexturesConfig& SceneTexturesConfig, const FPSOPrecacheVertexFactoryData& VertexFactoryData, const FMaterial& Material, const FPSOPrecacheParams& PreCacheParams, ERHIFeatureLevel::Type FeatureLevel, EShaderPlatform ShaderPlatform, int32 PSOCollectorIndex, TArray<FPSOPrecacheData>& PSOInitializers)"
  },
  {
    "label": "HasNoDerivativeOps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNoDerivativeOps(FRHIComputeShader* ComputeShaderRHI)"
  },
  {
    "label": "PackMaterialBitFlags()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PackMaterialBitFlags(const FMaterial& Material, uint32 BoundTargetMask, bool bNoDerivativeOps)"
  },
  {
    "label": "DispatchLumenMeshCapturePass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DispatchLumenMeshCapturePass(FRDGBuilder& GraphBuilder, FScene& Scene, FViewInfo* SharedView, TArrayView<const FCardPageRenderData> CardPagesToRender, const Nanite::FRasterResults& RasterResults, const Nanite::FRasterContext& RasterContext, FLumenCardPassUniformParameters* PassUniformParameters, FRDGBufferSRVRef RectMinMaxBufferSRV, uint32 NumRects, FIntPoint ViewportSize, FRDGTextureRef AlbedoAtlasTexture, FRDGTextureRef NormalAtlasTexture, FRDGTextureRef EmissiveAtlasTexture, FRDGTextureRef DepthAtlasTexture)"
  }
]