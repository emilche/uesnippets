[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "SVDBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVDBase"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "internal"
  },
  {
    "label": "EIGEN_SIZE_MIN_PREFER_DYNAMIC()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SVDBASE_H # define EIGEN_SVDBASE_H namespace Eigen { namespace internal { template<Derived> struct traits<SVDBase<Derived>> : traits<Derived> { typedef MatrixXpr XprKind ; typedef SolverStorage StorageKind ; typedef int StorageIndex ; enum { Flags = 0 } ; } ; } template<Derived> class SVDBase : public SolverBase<SVDBase<Derived>> { public : template<Derived_> struct internal::solve_assertion ; typedef internal::traits<Derived>::MatrixType MatrixType ; typedef MatrixType::Scalar Scalar ; typedef NumTraits<MatrixType::Scalar>::Real RealScalar ; typedef Eigen::internal::traits<SVDBase>::StorageIndex StorageIndex ; typedef Eigen::Index Index ; enum { RowsAtCompileTime = MatrixType::RowsAtCompileTime,ColsAtCompileTime = MatrixType::ColsAtCompileTime,DiagSizeAtCompileTime =)",
    "insertText": "EIGEN_SIZE_MIN_PREFER_DYNAMIC(RowsAtCompileTime,ColsAtCompileTime), MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime, MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime, MaxDiagSizeAtCompileTime = EIGEN_SIZE_MIN_PREFER_FIXED(MaxRowsAtCompileTime,MaxColsAtCompileTime)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (typedef Matrix<Scalar,RowsAtCompileTime,RowsAtCompileTime,MatrixOptions,MaxRowsAtCompileTime,MaxRowsAtCompileTime> MatrixUType ; typedef Matrix<Scalar,ColsAtCompileTime,ColsAtCompileTime,MatrixOptions,MaxColsAtCompileTime,MaxColsAtCompileTime> MatrixVType ; typedef internal::plain_diag_type<MatrixType,RealScalar>::type SingularValuesType ; Derived&)",
    "insertText": "derived()"
  },
  {
    "label": "matrixU()",
    "kind": "Method",
    "detail": "Function (} const MatrixUType&)",
    "insertText": "matrixU()"
  },
  {
    "label": "_check_compute_assertions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_check_compute_assertions()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(computeU() && \"This SVD decomposition didn't compute U. Did you ask for it?\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(computeV() && \"This SVD decomposition didn't compute V. Did you ask for it?\")"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (RealScalar premultiplied_threshold = numext::maxi<)",
    "insertText": "RealScalar(m_singularValues.coeff(0) * threshold(), (std::numeric_limits<RealScalar>::min)())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Index i = m_nonzeroSingularValues - 1 ;)",
    "insertText": "while(i>=0 && m_singularValues.coeff(i) < premultiplied_threshold)"
  },
  {
    "label": "setThreshold()",
    "kind": "Method",
    "detail": "Function (} Derived&)",
    "insertText": "setThreshold(Default_t)"
  },
  {
    "label": "threshold()",
    "kind": "Method",
    "detail": "Function (} RealScalar)",
    "insertText": "threshold()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized || m_usePrescribedThreshold)"
  },
  {
    "label": "diagSize()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "diagSize(std::max<Index>)(1,m_diagSize)"
  },
  {
    "label": "computeU()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "computeU()"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (# endif EIGEN_DEVICE_FUNC ComputationInfo)",
    "insertText": "info()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"SVD is not initialized.\")"
  },
  {
    "label": "_solve_impl_transposed()",
    "kind": "Method",
    "detail": "Function (template<bool Conjugate,RhsType,DstType> void)",
    "insertText": "_solve_impl_transposed(const RhsType &rhs, DstType &dst)"
  },
  {
    "label": "check_template_parameters()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "check_template_parameters()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_NON_INTEGER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_NON_INTEGER(Scalar)"
  },
  {
    "label": "_check_solve_assertion()",
    "kind": "Method",
    "detail": "Function (} template<bool Transpose_,Rhs> void)",
    "insertText": "_check_solve_assertion(const Rhs& b)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(b)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(computeU() && computeV() && \"SVDBase::solve(): Both unitaries U and V are required to be computed (thin unitaries suffice).\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((Transpose_?cols():rows())==b.rows() && \"SVDBase::solve(): invalid number of rows of the right hand side matrix b\")"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "allocate(Index rows, Index cols, unsigned int computationOptions)"
  },
  {
    "label": "SVDBase()",
    "kind": "Method",
    "detail": "Function (MatrixUType m_matrixU ; MatrixVType m_matrixV ; SingularValuesType m_singularValues ; ComputationInfo m_info ; bool m_isInitialized,m_isAllocated,m_usePrescribedThreshold ; bool m_computeFullU,m_computeThinU ; bool m_computeFullV,m_computeThinV ; unsigned int m_computationOptions ; Index m_nonzeroSingularValues,m_rows,m_cols,m_diagSize ; RealScalar m_prescribedThreshold ;)",
    "insertText": "SVDBase() : m_info(Success), m_isInitialized(false), m_isAllocated(false), m_usePrescribedThreshold(false), m_computeFullU(false), m_computeThinU(false), m_computeFullV(false), m_computeThinV(false), m_computationOptions(0), m_rows(-1), m_cols(-1), m_diagSize(0)"
  },
  {
    "label": "_solve_impl()",
    "kind": "Method",
    "detail": "Function (} } ; # ifndef EIGEN_PARSED_BY_DOXYGEN template<Derived> template<RhsType,DstType> void SVDBase<Derived)",
    "insertText": "_solve_impl(const RhsType &rhs, DstType &dst)"
  },
  {
    "label": "rank()",
    "kind": "Method",
    "detail": "Function (Matrix<RhsType::Scalar,Dynamic,RhsType::ColsAtCompileTime,0,MatrixType::MaxRowsAtCompileTime,RhsType::MaxColsAtCompileTime> tmp ; Index l_rank =)",
    "insertText": "rank()"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (tmp .)",
    "insertText": "noalias() = m_matrixU.leftCols(l_rank).adjoint()"
  },
  {
    "label": "head()",
    "kind": "Method",
    "detail": "Function (tmp = m_singularValues .)",
    "insertText": "head(l_rank).asDiagonal().inverse()"
  },
  {
    "label": "leftCols()",
    "kind": "Method",
    "detail": "Function (dst = m_matrixV .)",
    "insertText": "leftCols(l_rank)"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (tmp .)",
    "insertText": "noalias() = m_matrixV.leftCols(l_rank).transpose().template conjugateIf<Conjugate>()"
  },
  {
    "label": "Conjugate()",
    "kind": "Method",
    "detail": "Function (dst = m_matrixU . template conjugateIf<!)",
    "insertText": "Conjugate().leftCols(l_rank)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rows >= 0 && cols >= 0)"
  },
  {
    "label": "m_computeThinU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_computeThinU(computationOptions & ComputeThinU)"
  },
  {
    "label": "m_computeFullV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_computeFullV(computationOptions & ComputeFullV)"
  },
  {
    "label": "m_computeThinV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_computeThinV(computationOptions & ComputeThinV)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(!(m_computeFullU && m_computeThinU) && \"SVDBase: you can't ask for both full and thin U\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(!(m_computeFullV && m_computeThinV) && \"SVDBase: you can't ask for both full and thin V\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(EIGEN_IMPLIES(m_computeThinU || m_computeThinV, MatrixType::ColsAtCompileTime==Dynamic) && \"SVDBase: thin U and V are only available when your matrix has a dynamic number of columns.\")"
  },
  {
    "label": "m_diagSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_diagSize(std::min)(m_rows, m_cols)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_singularValues .)",
    "insertText": "resize(m_diagSize)"
  }
]