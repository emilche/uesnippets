[
  {
    "label": "SwapByteOrder_16()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_SWAPBYTEORDER_H # define LLVM_SUPPORT_SWAPBYTEORDER_H # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / DataTypes . h \" # include<cstddef> # include<limits> namespace llvm { namespace sys { uint16_t)",
    "insertText": "SwapByteOrder_16(uint16_t value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) && !defined(_DEBUG) return _byteswap_ushort(value)"
  },
  {
    "label": "SwapByteOrder_32()",
    "kind": "Method",
    "detail": "Function (# else uint16_t Hi = value<<8 ; uint16_t Lo = value>> 8 ; return Hi | Lo ; # endif } uint32_t)",
    "insertText": "SwapByteOrder_32(uint32_t value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__llvm__) || (LLVM_GNUC_PREREQ(4, 3, 0) && !defined(__ICC)) return __builtin_bswap32(value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(_MSC_VER) && !defined(_DEBUG) return _byteswap_ulong(value)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else uint32_t Byte0 = value& 0 x000000FF ; uint32_t Byte1 = value& 0 x0000FF00 ; uint32_t Byte2 = value& 0 x00FF0000 ; uint32_t Byte3 = value& 0 xFF000000 ;)",
    "insertText": "return(Byte0 << 24) | (Byte1 << 8) | (Byte2 >> 8) | (Byte3 >> 24)"
  },
  {
    "label": "SwapByteOrder_64()",
    "kind": "Method",
    "detail": "Function (# endif } uint64_t)",
    "insertText": "SwapByteOrder_64(uint64_t value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__llvm__) || (LLVM_GNUC_PREREQ(4, 3, 0) && !defined(__ICC)) return __builtin_bswap64(value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(_MSC_VER) && !defined(_DEBUG) return _byteswap_uint64(value)"
  },
  {
    "label": "SwapByteOrder_32()",
    "kind": "Method",
    "detail": "Function (# else uint64_t Hi =)",
    "insertText": "SwapByteOrder_32(uint32_t(value))"
  },
  {
    "label": "SwapByteOrder_32()",
    "kind": "Method",
    "detail": "Function (uint32_t Lo =)",
    "insertText": "SwapByteOrder_32(uint32_t(value >> 32))"
  },
  {
    "label": "getSwappedBytes()",
    "kind": "Method",
    "detail": "Function (# endif } unsigned char)",
    "insertText": "getSwappedBytes(unsigned char C)"
  },
  {
    "label": "getSwappedBytes()",
    "kind": "Method",
    "detail": "Function (} signed short)",
    "insertText": "getSwappedBytes(signed short C)"
  },
  {
    "label": "getSwappedBytes()",
    "kind": "Method",
    "detail": "Function (} unsigned int)",
    "insertText": "getSwappedBytes(unsigned int C)"
  },
  {
    "label": "getSwappedBytes()",
    "kind": "Method",
    "detail": "Function (} signed int)",
    "insertText": "getSwappedBytes(signed int C)"
  },
  {
    "label": "getSwappedBytes()",
    "kind": "Method",
    "detail": "Function (} # if __LONG_MAX__ = = __INT_MAX__ unsigned long)",
    "insertText": "getSwappedBytes(unsigned long C)"
  },
  {
    "label": "getSwappedBytes()",
    "kind": "Method",
    "detail": "Function (} signed long)",
    "insertText": "getSwappedBytes(signed long C)"
  },
  {
    "label": "getSwappedBytes()",
    "kind": "Method",
    "detail": "Function (} # else # error \" Unknown long size ! \" # endif unsigned long long)",
    "insertText": "getSwappedBytes(unsigned long long C)"
  },
  {
    "label": "getSwappedBytes()",
    "kind": "Method",
    "detail": "Function (} signed long long)",
    "insertText": "getSwappedBytes(signed long long C)"
  },
  {
    "label": "getSwappedBytes()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "getSwappedBytes(float C)"
  },
  {
    "label": "SwapByteOrder_32()",
    "kind": "Method",
    "detail": "Function (union { uint32_t i ; float f ; } in,out ; in . f = C ; out . i =)",
    "insertText": "SwapByteOrder_32(in.i)"
  },
  {
    "label": "SwapByteOrder_64()",
    "kind": "Method",
    "detail": "Function (union { uint64_t i ; double d ; } in,out ; in . d = C ; out . i =)",
    "insertText": "SwapByteOrder_64(in.i)"
  },
  {
    "label": "getSwappedBytes()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "getSwappedBytes(Value)"
  }
]