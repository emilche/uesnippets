[
  {
    "label": "UnitTestPlatformDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitTestPlatformDelegate"
  },
  {
    "label": "DefaultUnitTestPlatformDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultUnitTestPlatformDelegate"
  },
  {
    "label": "UnitTestLauncherDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitTestLauncherDelegate"
  },
  {
    "label": "MergeTestFilterSwitchHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MergeTestFilterSwitchHandler"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_LAUNCHER_UNIT_TEST_LAUNCHER_H_ # define BASE_TEST_LAUNCHER_UNIT_TEST_LAUNCHER_H_ # include<stddef . h> # include<string> # include<vector> # include \" base / callback . h \" # include \" base / files / file_path . h \" # include \" base / files / scoped_temp_dir . h \" # include \" base / memory / raw_ptr . h \" # include \" base / test / launcher / test_launcher . h \" # include \" build / build_config . h \" namespace base { const char kDontUseJobObjectFlag [ ] ; using RunTestSuiteCallback = OnceCallback<)",
    "insertText": "int(void)"
  },
  {
    "label": "LaunchUnitTests()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "LaunchUnitTests(int argc, char** argv, RunTestSuiteCallback run_test_suite, size_t retry_limit = 1U)"
  },
  {
    "label": "LaunchUnitTestsSerially()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "LaunchUnitTestsSerially(int argc, char** argv, RunTestSuiteCallback run_test_suite)"
  },
  {
    "label": "LaunchUnitTestsWithOptions()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "LaunchUnitTestsWithOptions(int argc, char** argv, size_t parallel_jobs, int default_batch_limit, bool use_job_objects, RepeatingClosure timeout_callback, RunTestSuiteCallback run_test_suite)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) int LaunchUnitTests(int argc, wchar_t** argv, bool use_job_objects, RunTestSuiteCallback run_test_suite)"
  },
  {
    "label": "GetTests()",
    "kind": "Method",
    "detail": "Function (# endif class UnitTestPlatformDelegate { public : bool)",
    "insertText": "GetTests(std::vector<TestIdentifier>* output)"
  },
  {
    "label": "CreateResultsFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateResultsFile(const base::FilePath& temp_dir, base::FilePath* path)"
  },
  {
    "label": "CreateTemporaryFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateTemporaryFile(const base::FilePath& temp_dir, base::FilePath* path)"
  },
  {
    "label": "GetCommandLineForChildGTestProcess()",
    "kind": "Method",
    "detail": "Function (CommandLine)",
    "insertText": "GetCommandLineForChildGTestProcess(const std::vector<std::string>& test_names, const base::FilePath& output_file, const base::FilePath& flag_file)"
  },
  {
    "label": "GetWrapperForChildGTestProcess()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetWrapperForChildGTestProcess()"
  },
  {
    "label": "UnitTestPlatformDelegate()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "UnitTestPlatformDelegate()"
  },
  {
    "label": "DefaultUnitTestPlatformDelegate()",
    "kind": "Method",
    "detail": "Function (} ; class DefaultUnitTestPlatformDelegate : public UnitTestPlatformDelegate { public :)",
    "insertText": "DefaultUnitTestPlatformDelegate()"
  },
  {
    "label": "DefaultUnitTestPlatformDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultUnitTestPlatformDelegate(const DefaultUnitTestPlatformDelegate&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DefaultUnitTestPlatformDelegate&)",
    "insertText": "operator(const DefaultUnitTestPlatformDelegate&)"
  },
  {
    "label": "UnitTestLauncherDelegate()",
    "kind": "Method",
    "detail": "Function (ScopedTempDir temp_dir_ ; } ; class UnitTestLauncherDelegate : public TestLauncherDelegate { public :)",
    "insertText": "UnitTestLauncherDelegate(UnitTestPlatformDelegate* delegate, size_t batch_limit, bool use_job_objects, RepeatingClosure timeout_callback)"
  },
  {
    "label": "UnitTestLauncherDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnitTestLauncherDelegate(const UnitTestLauncherDelegate&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnitTestLauncherDelegate&)",
    "insertText": "operator(const UnitTestLauncherDelegate&)"
  },
  {
    "label": "UnitTestLauncherDelegate()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UnitTestLauncherDelegate()"
  },
  {
    "label": "GetCommandLine()",
    "kind": "Method",
    "detail": "Function (CommandLine)",
    "insertText": "GetCommandLine(const std::vector<std::string>& test_names, const FilePath& temp_dir, FilePath* output_file)"
  },
  {
    "label": "GetWrapper()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetWrapper()"
  },
  {
    "label": "GetLaunchOptions()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLaunchOptions()"
  },
  {
    "label": "GetTimeout()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetTimeout()"
  },
  {
    "label": "GetBatchSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetBatchSize()"
  },
  {
    "label": "OnTestTimedOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestTimedOut(const CommandLine& cmd_line)"
  },
  {
    "label": "MergeTestFilterSwitchHandler()",
    "kind": "Method",
    "detail": "Function (ThreadChecker thread_checker_ ; raw_ptr<UnitTestPlatformDelegate> platform_delegate_ ; size_t batch_limit_ ; bool use_job_objects_ ; RepeatingClosure timeout_callback_ ; } ; class MergeTestFilterSwitchHandler : public DuplicateSwitchHandler { public : ~)",
    "insertText": "MergeTestFilterSwitchHandler()"
  },
  {
    "label": "ResolveDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveDuplicate(base::StringPiece key, CommandLine::StringPieceType new_value, CommandLine::StringType& out_value)"
  }
]