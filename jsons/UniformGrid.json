[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TArrayND",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TArrayND"
  },
  {
    "label": "TArrayFaceND",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TArrayFaceND"
  },
  {
    "label": "TGridPrecisionLimit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGridPrecisionLimit"
  },
  {
    "label": "TUniformGridBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUniformGridBase"
  },
  {
    "label": "T_SCALAR",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T_SCALAR"
  },
  {
    "label": "TUniformGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUniformGrid"
  },
  {
    "label": "TMPMGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMPMGrid"
  },
  {
    "label": "InterpType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "InterpType"
  },
  {
    "label": "CHAOS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHAOS_API"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Vector . h \" # include \" ChaosCheck . h \" # include \" Chaos / ArrayCollectionArray . h \" # include \" Chaos / DynamicParticles . h \" namespace Chaos { template<class T,int d> class TArrayND ; template<class T,int d> class TArrayFaceND ; template<T> struct TGridPrecisionLimit {)",
    "insertText": "static_assert(sizeof(T) == 0, \"Unsupported grid floating point type\")"
  },
  {
    "label": "TUniformGridBase()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TGridPrecisionLimit<FRealSingle> { FRealSingle value = 1 e7 ; } ; template<> struct TGridPrecisionLimit<FRealDouble> { FRealDouble value = 4 . 5 0 3 5 e15 ; } ; template<class T,int d> class TUniformGridBase { protected :)",
    "insertText": "TUniformGridBase()"
  },
  {
    "label": "TUniformGridBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUniformGridBase(const TVector<T, d>& MinCorner, const TVector<T, d>& MaxCorner, const TVector<int32, d>& Cells, const uint32 GhostCells) : MMinCorner(MinCorner), MMaxCorner(MaxCorner), MCells(Cells)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} bool bValidBounds = true ;)",
    "insertText": "if(MMaxCorner == TVector<T, d>(-TNumericLimits<T>::Max()) && MMinCorner == TVector<T, d>(TNumericLimits<T>::Max()))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bValidBounds = false ; } else {)",
    "insertText": "for(int32 i = 0; i < d; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bValidBounds = false ; break ; } } })",
    "insertText": "if(bValidBounds)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (MDx = TVector<T,)",
    "insertText": "d(MMaxCorner - MMinCorner)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (} else { MDx = TVector<T,)",
    "insertText": "d(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(GhostCells > 0)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (MMinCorner - = MDx* static_cast<)",
    "insertText": "T(GhostCells)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (MCells + = TVector<T,)",
    "insertText": "d(2 * static_cast<T>(GhostCells))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(MDx.Min() >= UE_SMALL_NUMBER)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const TVector<T,d> MinToDXRatio = MMinCorner / MDx ;)",
    "insertText": "for(int32 Axis = 0; Axis < d; ++Axis)"
  },
  {
    "label": "TUniformGridBase()",
    "kind": "Method",
    "detail": "Function (} } } # if COMPILE_WITHOUT_UNREAL_SUPPORT)",
    "insertText": "TUniformGridBase(std::istream& Stream) : MMinCorner(Stream), MMaxCorner(Stream), MCells(Stream)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} public : # if COMPILE_WITHOUT_UNREAL_SUPPORT void)",
    "insertText": "Write(std::ostream& Stream)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (MMinCorner .)",
    "insertText": "Write(Stream)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Location()",
    "kind": "Method",
    "detail": "Function (Ar<<MMinCorner ; Ar<<MMaxCorner ; Ar<<MCells ; Ar<<MDx ; } TVector<T,d>)",
    "insertText": "Location(const TVector<int32, d>& Cell)"
  },
  {
    "label": "Location()",
    "kind": "Method",
    "detail": "Function (} TVector<T,d>)",
    "insertText": "Location(const Pair<int32, TVector<int32, 3>>& Face)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "CellUnsafe()",
    "kind": "Method",
    "detail": "Function (} # ifdef PLATFORM_COMPILER_CLANG DISABLE_FUNCTION_OPTIMIZATION # endif TVector<int32,d>)",
    "insertText": "CellUnsafe(const TVector<T, d>& X)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const TVector<T,d> Delta = X - MMinCorner ; TVector<int32,d> Result = Delta / MDx ;)",
    "insertText": "for(int Axis = 0; Axis < d; ++Axis)"
  },
  {
    "label": "Cell()",
    "kind": "Method",
    "detail": "Function (Result [ Axis ] - = 1 ; } } return Result ; } # ifdef PLATFORM_COMPILER_CLANG DISABLE_FUNCTION_OPTIMIZATION # endif TVector<int32,d>)",
    "insertText": "Cell(const TVector<T, d>& X)"
  },
  {
    "label": "Axis()",
    "kind": "Method",
    "detail": "Function (Result [ Axis ] = Result [ Axis ]> = MCells [ Axis ] ? MCells [)",
    "insertText": "Axis(Result[Axis] < 0 ? 0 : Result[Axis])"
  },
  {
    "label": "Face()",
    "kind": "Method",
    "detail": "Function (} return Result ; } TVector<int32,d>)",
    "insertText": "Face(const TVector<T, d>& X, const int32 Component)"
  },
  {
    "label": "DomainSize()",
    "kind": "Method",
    "detail": "Function (} TVector<T,d>)",
    "insertText": "DomainSize()"
  },
  {
    "label": "GetNumCells()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumCells()"
  },
  {
    "label": "GetNumNodes()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumNodes()"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (} TVector<T,d>)",
    "insertText": "Node(const TVector<int32, d>& Index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TVector<T,d> Tmp = MMinCorner ;)",
    "insertText": "for(int32 i = 0; i < d; i++)"
  },
  {
    "label": "FlatToMultiIndex()",
    "kind": "Method",
    "detail": "Function (TVector<int32,d> Index ;)",
    "insertText": "FlatToMultiIndex(FlatIndex, Index, true)"
  },
  {
    "label": "InteriorNode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InteriorNode(const TVector<int32, d>& Index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool Interior = true ;)",
    "insertText": "for(int32 i = 0; i < d && Interior; i++)"
  },
  {
    "label": "FlatIndex()",
    "kind": "Method",
    "detail": "Function (} return Interior ; } int32)",
    "insertText": "FlatIndex(const TVector<int32, 2>& MIndex, const bool NodeIndex=false)"
  },
  {
    "label": "FlatIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FlatIndex(const TVector<int32, 3>& MIndex, const bool NodeIndex=false)"
  },
  {
    "label": "FlatToMultiIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FlatToMultiIndex(const int32 FlatIndex, TVector<int32, 2>& MIndex, const bool NodeIndex=false)"
  },
  {
    "label": "FlatIndex()",
    "kind": "Method",
    "detail": "Function (MIndex [ 0 ] =)",
    "insertText": "FlatIndex(NodeIndex?MCells[1]+1:MCells[1])"
  },
  {
    "label": "FlatIndex()",
    "kind": "Method",
    "detail": "Function (MIndex [ 1 ] =)",
    "insertText": "FlatIndex(NodeIndex?MCells[1]+1: MCells[1])"
  },
  {
    "label": "FlatToMultiIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FlatToMultiIndex(const int32 FlatIndex, TVector<int32, 3>& MIndex, const bool NodeIndex=false)"
  },
  {
    "label": "FlatIndex()",
    "kind": "Method",
    "detail": "Function (MIndex [ 0 ] =)",
    "insertText": "FlatIndex((MCells[1]+1) * (MCells[2]+1))"
  },
  {
    "label": "MIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MIndex(FlatIndex / (MCells[2]+1)) % (MCells[1]+1)"
  },
  {
    "label": "FlatIndex()",
    "kind": "Method",
    "detail": "Function (MIndex [ 2 ] =)",
    "insertText": "FlatIndex(MCells[2]+1)"
  },
  {
    "label": "FlatIndex()",
    "kind": "Method",
    "detail": "Function (} else { MIndex [ 0 ] =)",
    "insertText": "FlatIndex(MCells[1] * MCells[2])"
  },
  {
    "label": "MIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MIndex(FlatIndex / MCells[2])"
  },
  {
    "label": "LinearlyInterpolate()",
    "kind": "Method",
    "detail": "Function (MIndex [ 2 ] = FlatIndex % MCells [ 2 ] ; } } template<class T_SCALAR> T_SCALAR)",
    "insertText": "LinearlyInterpolate(const TArrayND<T_SCALAR, d>& ScalarN, const TVector<T, d>& X)"
  },
  {
    "label": "LinearlyInterpolateComponent()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "LinearlyInterpolateComponent(const TArrayND<T, d>& ScalarNComponent, const TVector<T, d>& X, const int32 Axis)"
  },
  {
    "label": "LinearlyInterpolate()",
    "kind": "Method",
    "detail": "Function (TVector<T,d>)",
    "insertText": "LinearlyInterpolate(const TArrayFaceND<T, d>& ScalarN, const TVector<T, d>& X)"
  },
  {
    "label": "LinearlyInterpolate()",
    "kind": "Method",
    "detail": "Function (TVector<T,d>)",
    "insertText": "LinearlyInterpolate(const TArrayFaceND<T, d>& ScalarN, const TVector<T, d>& X, const Pair<int32, TVector<int32, d>> Index)"
  },
  {
    "label": "Counts()",
    "kind": "Method",
    "detail": "Function (const TVector<int32,d>&)",
    "insertText": "Counts()"
  },
  {
    "label": "Dx()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>&)",
    "insertText": "Dx()"
  },
  {
    "label": "TUniformGrid()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUniformGrid(const TVector<T, d>& MinCorner, const TVector<T, d>& MaxCorner, const TVector<int32, d>& Cells, const uint32 GhostCells = 0) : TUniformGridBase<T, d>(MinCorner, MaxCorner, Cells, GhostCells)"
  },
  {
    "label": "TUniformGrid()",
    "kind": "Method",
    "detail": "Function (} # if COMPILE_WITHOUT_UNREAL_SUPPORT)",
    "insertText": "TUniformGrid(std::istream& Stream) : TUniformGridBase<T, d>(Stream)"
  },
  {
    "label": "TUniformGrid()",
    "kind": "Method",
    "detail": "Function (} # endif ~)",
    "insertText": "TUniformGrid()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} TVector<int32,d>)",
    "insertText": "GetIndex(const int32 Index)"
  },
  {
    "label": "Center()",
    "kind": "Method",
    "detail": "Function (TVector<T,d>)",
    "insertText": "Center(const int32 Index)"
  },
  {
    "label": "ClampIndex()",
    "kind": "Method",
    "detail": "Function (} TVector<int32,d>)",
    "insertText": "ClampIndex(const TVector<int32, d>& Index)"
  },
  {
    "label": "ClampMinusHalf()",
    "kind": "Method",
    "detail": "Function (TVector<T,d>)",
    "insertText": "ClampMinusHalf(const TVector<T, d>& X)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(const TVector<int32, d>& X)"
  },
  {
    "label": "TMPMGrid()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> class TMPMGrid : public TUniformGridBase<T,3> { using TUniformGridBase<T,3>::MCells ; using TUniformGridBase<T,3>::MMinCorner ; using TUniformGridBase<T,3>::MMaxCorner ; using TUniformGridBase<T,3>::MDx ; public : using TUniformGridBase<T,3>::GetNumCells ; using TUniformGridBase<T,3>::Location ;)",
    "insertText": "TMPMGrid()"
  },
  {
    "label": "TMPMGrid()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMPMGrid(const TVector<T, 3>& MinCorner, const TVector<T, 3>& MaxCorner, const TVector<int32, 3>& Cells, const uint32 GhostCells = 0) : TUniformGridBase<T, 3>(MinCorner, MaxCorner, Cells, GhostCells)"
  },
  {
    "label": "TMPMGrid()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMPMGrid(const int32 GridN)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (MDx [)",
    "insertText": "i(T)1. / (T)"
  },
  {
    "label": "TMPMGrid()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TMPMGrid(const T GridDx)"
  },
  {
    "label": "TMPMGrid()",
    "kind": "Method",
    "detail": "Function (MDx [ i ] = GridDx ; } } # if COMPILE_WITHOUT_UNREAL_SUPPORT)",
    "insertText": "TMPMGrid(std::istream& Stream) : TUniformGridBase<T, 3>(Stream)"
  },
  {
    "label": "BaseNodeIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BaseNodeIndex(const TVector<T, 3>& X, TVector<int32, 3>& Index, TVector<T, 3>& weights)"
  },
  {
    "label": "Nijk()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "Nijk(T w, int32 ii)"
  },
  {
    "label": "GradNi()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GradNi(const TVector<T, 3>& Ni, const TVector<T, 3>& dNi, TVector<T, 3>& result)"
  },
  {
    "label": "dNijk()",
    "kind": "Method",
    "detail": "Function (result [ 0 ] = dNi [ 0 ]* Ni [ 1 ]* Ni [ 2 ] ; result [ 1 ] = Ni [ 0 ]* dNi [ 1 ]* Ni [ 2 ] ; result [ 2 ] = Ni [ 0 ]* Ni [ 1 ]* dNi [ 2 ] ; } T)",
    "insertText": "dNijk(T w, int32 ii, T dx)"
  },
  {
    "label": "Loc2GlobIndex()",
    "kind": "Method",
    "detail": "Function (} TVector<int32,3>)",
    "insertText": "Loc2GlobIndex(const TVector<int32, 3>& IndexIn, const TVector<int32, 3>& LocalIndexIn)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TVector<int32,3> Result ;)",
    "insertText": "if(interp == linear)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(uint32 i = 0; i < 3; ++i)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} return Result ; } int32)",
    "insertText": "Size()"
  },
  {
    "label": "Loc2GlobIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Loc2GlobIndex(const int32 IndexIn, const TVector<int32, 3>& LocalIndexIn)"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (TVector<T,3>)",
    "insertText": "Node(const TVector<int32, 3>& IndexIn)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (TVector<T,3>)",
    "insertText": "Result((T)0.)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Result [ i ] =)",
    "insertText": "T(IndexIn[i])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(size_t i = 0; i < 3; ++i)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (Result [)",
    "insertText": "i(T(IndexIn[i]) + T(0.5))"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } TVector<T,3>)",
    "insertText": "Node(int32 FlatIndexIn)"
  },
  {
    "label": "FlatIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FlatIndex(const TVector<int32, 3>& Index)"
  },
  {
    "label": "Lin2MultiIndex()",
    "kind": "Method",
    "detail": "Function (TVector<int32,3>)",
    "insertText": "Lin2MultiIndex(const int32 IndexIn)"
  },
  {
    "label": "GetCells()",
    "kind": "Method",
    "detail": "Function (const TVector<int32,3>)",
    "insertText": "GetCells()"
  },
  {
    "label": "UpdateGridFromPositions()",
    "kind": "Method",
    "detail": "Function (MDx = DxIn ; } void)",
    "insertText": "UpdateGridFromPositions(const Chaos::TDynamicParticles<T, 3>& InParticles)"
  },
  {
    "label": "SetInterp()",
    "kind": "Method",
    "detail": "Function (enum InterpType { linear = 1,quadratic = 2 } ; void)",
    "insertText": "SetInterp(InterpType InterpIn)"
  },
  {
    "label": "TUniformGrid()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUniformGrid(const TVector<T, 3>& MinCorner, const TVector<T, 3>& MaxCorner, const TVector<int32, 3>& Cells, const uint32 GhostCells = 0) : TUniformGridBase<T, 3>(MinCorner, MaxCorner, Cells, GhostCells)"
  },
  {
    "label": "TUniformGrid()",
    "kind": "Method",
    "detail": "Function (} # if COMPILE_WITHOUT_UNREAL_SUPPORT)",
    "insertText": "TUniformGrid(std::istream& Stream) : TUniformGridBase<T, 3>(Stream)"
  },
  {
    "label": "GetFaceIndex()",
    "kind": "Method",
    "detail": "Function (Pair<int32,TVector<int32,3>>)",
    "insertText": "GetFaceIndex(int32 Index)"
  },
  {
    "label": "GetNumFaces()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumFaces()"
  },
  {
    "label": "ClampIndex()",
    "kind": "Method",
    "detail": "Function (} TVector<int32,3>)",
    "insertText": "ClampIndex(const TVector<int32, 3>& Index)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (TVector<T,3>)",
    "insertText": "Clamp(const TVector<T, 3>& X)"
  },
  {
    "label": "ClampMinusHalf()",
    "kind": "Method",
    "detail": "Function (TVector<T,3>)",
    "insertText": "ClampMinusHalf(const TVector<T, 3>& X)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(const TVector<int32, 3>& X)"
  },
  {
    "label": "SubGrid()",
    "kind": "Method",
    "detail": "Function (TUniformGrid<T,3>)",
    "insertText": "SubGrid(const TVector<int32, 3>& MinCell, const TVector<int32, 3>& MaxCell)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<T,int d> FArchive&)",
    "insertText": "operator(FArchive& Ar, TUniformGridBase<T, d>& Value)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Serialize(Ar)"
  }
]