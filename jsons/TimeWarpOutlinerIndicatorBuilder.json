[
  {
    "label": "FCreateOutlinerColumnParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateOutlinerColumnParams"
  },
  {
    "label": "IOutlinerColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerColumn"
  },
  {
    "label": "STimeWarpIndicatorWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimeWarpIndicatorWidget"
  },
  {
    "label": "FTimeWarpOutlinerIndicatorBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimeWarpOutlinerIndicatorBuilder"
  },
  {
    "label": "FTimeWarpOutlinerIndicatorBuilder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MVVM / ViewModels / OutlinerIndicators / OutlinerIndicatorBuilderBase . h \" namespace UE::Sequencer { struct FCreateOutlinerColumnParams ; class IOutlinerColumn ; class STimeWarpIndicatorWidget ; class FTimeWarpOutlinerIndicatorBuilder : public FOutlinerIndicatorBuilderBase { public :)",
    "insertText": "FTimeWarpOutlinerIndicatorBuilder()"
  },
  {
    "label": "GetIndicatorName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetIndicatorName()"
  },
  {
    "label": "IsItemCompatibleWithIndicator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsItemCompatibleWithIndicator(const FCreateOutlinerColumnParams& InParams)"
  },
  {
    "label": "CreateIndicatorWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateIndicatorWidget(const FCreateOutlinerColumnParams& InParams, const TSharedRef<ISequencerTreeViewRow>& TreeViewRow, const TSharedRef<IOutlinerColumn>& OutlinerColumn, const int32 NumCompatibleIndicators)"
  }
]