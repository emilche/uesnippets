[
  {
    "label": "MakePointer_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MakePointer_"
  },
  {
    "label": "TensorMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorMap"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_MAP_H # define EIGEN_CXX11_TENSOR_TENSOR_MAP_H namespace Eigen { template<PlainObjectType,int Options_,template<class> class MakePointer_> class TensorMap : public TensorBase<TensorMap<PlainObjectType,Options_,MakePointer_>> { public : typedef TensorMap<PlainObjectType,Options_,MakePointer_> Self ; typedef TensorBase<TensorMap<PlainObjectType,Options_,MakePointer_>> Base ; # ifdef EIGEN_USE_SYCL typedef Eigen::internal::remove_reference<Eigen::internal::nested<Self>::type>::type Nested ; # else typedef Eigen::internal::nested<Self>::type Nested ; # endif typedef internal::traits<PlainObjectType>::StorageKind StorageKind ; typedef internal::traits<PlainObjectType>::Index Index ; typedef internal::traits<PlainObjectType>::Scalar Scalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef PlainObjectType::Base::CoeffReturnType CoeffReturnType ; typedef MakePointer_<Scalar>::Type PointerType ; typedef MakePointer_<Scalar>::ConstType PointerConstType ; typedef internal::conditional<)",
    "insertText": "bool(internal::is_lvalue<PlainObjectType>::value)"
  },
  {
    "label": "IsAligned()",
    "kind": "Method",
    "detail": "Function (const int Options = Options_ ; const Index NumIndices = PlainObjectType::NumIndices ; typedef PlainObjectType::Dimensions Dimensions ; enum {)",
    "insertText": "IsAligned((int(Options_)&Aligned)==Aligned)"
  },
  {
    "label": "TensorMap()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorMap(StoragePointerType dataPtr) : m_data(dataPtr), m_dimensions()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((0 == NumIndices || NumIndices == Dynamic), YOU_MADE_A_PROGRAMMING_MISTAKE) } #if EIGEN_HAS_VARIADIC_TEMPLATES template<typename... IndexTypes> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorMap(StoragePointerType dataPtr, Index firstDimension, IndexTypes... otherDimensions) : m_data(dataPtr), m_dimensions(firstDimension, otherDimensions...)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((sizeof...(otherDimensions) + 1 == NumIndices || NumIndices == Dynamic), YOU_MADE_A_PROGRAMMING_MISTAKE) } #else EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorMap(StoragePointerType dataPtr, Index firstDimension) : m_data(dataPtr), m_dimensions(firstDimension)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((1 == NumIndices || NumIndices == Dynamic), YOU_MADE_A_PROGRAMMING_MISTAKE) } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorMap(StoragePointerType dataPtr, Index dim1, Index dim2) : m_data(dataPtr), m_dimensions(dim1, dim2)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(2 == NumIndices || NumIndices == Dynamic, YOU_MADE_A_PROGRAMMING_MISTAKE) } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorMap(StoragePointerType dataPtr, Index dim1, Index dim2, Index dim3) : m_data(dataPtr), m_dimensions(dim1, dim2, dim3)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(3 == NumIndices || NumIndices == Dynamic, YOU_MADE_A_PROGRAMMING_MISTAKE) } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorMap(StoragePointerType dataPtr, Index dim1, Index dim2, Index dim3, Index dim4) : m_data(dataPtr), m_dimensions(dim1, dim2, dim3, dim4)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(4 == NumIndices || NumIndices == Dynamic, YOU_MADE_A_PROGRAMMING_MISTAKE) } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorMap(StoragePointerType dataPtr, Index dim1, Index dim2, Index dim3, Index dim4, Index dim5) : m_data(dataPtr), m_dimensions(dim1, dim2, dim3, dim4, dim5)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(5 == NumIndices || NumIndices == Dynamic, YOU_MADE_A_PROGRAMMING_MISTAKE) } #endif EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorMap(StoragePointerType dataPtr, const array<Index, NumIndices>& dimensions) : m_data(dataPtr), m_dimensions(dimensions)"
  },
  {
    "label": "TensorMap()",
    "kind": "Method",
    "detail": "Function (} template<Dimensions> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorMap(StoragePointerType dataPtr, const Dimensions& dimensions) : m_data(dataPtr), m_dimensions(dimensions)"
  },
  {
    "label": "TensorMap()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorMap(PlainObjectType& tensor) : m_data(tensor.data()), m_dimensions(tensor.dimensions())"
  },
  {
    "label": "rank()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "rank()"
  },
  {
    "label": "dimension()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "dimension(Index n)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE StoragePointerType)",
    "insertText": "data()"
  },
  {
    "label": "IndexOfRowMajor()",
    "kind": "Method",
    "detail": "Function (const Index index = m_dimensions .)",
    "insertText": "IndexOfRowMajor(indices)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(NumIndices == 0, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE StorageRefType)",
    "insertText": "operator()(Index index)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(index >= 0 && index < size())"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(sizeof...(otherIndices) + 2 == NumIndices, YOU_MADE_A_PROGRAMMING_MISTAKE) eigen_assert(internal::all((Eigen::NumTraits<Index>::highest() >= otherIndices)...))"
  },
  {
    "label": "IndexOfRowMajor()",
    "kind": "Method",
    "detail": "Function (const Index index = m_dimensions .)",
    "insertText": "IndexOfRowMajor(array<Index, NumIndices>{{firstIndex, secondIndex, otherIndices...}})"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const Index index = i1 + i0* m_dimensions [ 1 ] ; return m_data [ index ] ; } else { const Index index = i0 + i1* m_dimensions [ 0 ] ; return m_data [ index ] ; } } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE StorageRefType)",
    "insertText": "operator()(Index i0, Index i1, Index i2)"
  },
  {
    "label": "m_dimensions()",
    "kind": "Method",
    "detail": "Function (const Index index = i2 +)",
    "insertText": "m_dimensions(i1 + m_dimensions[1] * i0)"
  },
  {
    "label": "m_dimensions()",
    "kind": "Method",
    "detail": "Function (const Index index = i3 +)",
    "insertText": "m_dimensions(i2 + m_dimensions[2] * (i1 + m_dimensions[1] * i0))"
  },
  {
    "label": "m_dimensions()",
    "kind": "Method",
    "detail": "Function (const Index index = i4 +)",
    "insertText": "m_dimensions(i3 + m_dimensions[3] * (i2 + m_dimensions[2] * (i1 + m_dimensions[1] * i0)))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(internal::all((Eigen::NumTraits<Index>::highest() >= otherIndices)...))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const std::size_t NumDims =)",
    "insertText": "sizeof(otherIndices)"
  },
  {
    "label": "IndexOfRowMajor()",
    "kind": "Method",
    "detail": "Function (const Index index = m_dimensions .)",
    "insertText": "IndexOfRowMajor(array<Index, NumDims>{{firstIndex, secondIndex, otherIndices...}})"
  }
]