[
  {
    "label": "FMessageEndpoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageEndpoint"
  },
  {
    "label": "FMessageAddress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMessageAddress"
  },
  {
    "label": "FEndpoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEndpoint"
  },
  {
    "label": "FPipeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPipeBase"
  },
  {
    "label": "FScenePipeToNetwork",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScenePipeToNetwork"
  },
  {
    "label": "FScenePipeFromNetwork",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScenePipeFromNetwork"
  },
  {
    "label": "FPipeBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DirectLinkDeltaConsumer . h \" # include \" DirectLinkMessages . h \" # include \" DirectLinkStreamCommunicationInterface . h \" # include \" CoreTypes . h \" # include \" IMessageContext . h \" class FMessageEndpoint ; struct FMessageAddress ; namespace DirectLink { class FEndpoint ; class FPipeBase { protected :)",
    "insertText": "FPipeBase(TSharedPtr<FMessageEndpoint, ESPMode::ThreadSafe> ThisEndpoint, const FMessageAddress& RemoteAddress, FStreamPort RemoteStreamPort) : ThisEndpoint(ThisEndpoint) , RemoteAddress(RemoteAddress) , RemoteStreamPort(RemoteStreamPort)"
  },
  {
    "label": "SendInternal()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "SendInternal(MessageType* Message, int32 ByteSizeHint=0)"
  },
  {
    "label": "FScenePipeToNetwork()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMessageEndpoint,ESPMode::ThreadSafe> ThisEndpoint ; FMessageAddress RemoteAddress ; FStreamPort RemoteStreamPort ; } ; class FScenePipeToNetwork : public FPipeBase,public IDeltaConsumer { public :)",
    "insertText": "FScenePipeToNetwork(TSharedPtr<FMessageEndpoint, ESPMode::ThreadSafe> ThisEndpoint, const FMessageAddress& RemoteAddress, FStreamPort RemoteStreamPort) : FPipeBase(ThisEndpoint, RemoteAddress, RemoteStreamPort)"
  },
  {
    "label": "InitSetElementBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSetElementBuffer()"
  },
  {
    "label": "SetDeltaProducer()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetDeltaProducer(IDeltaProducer* Producer)"
  },
  {
    "label": "SetupScene()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupScene(FSetupSceneArg& SetupSceneArg)"
  },
  {
    "label": "OpenDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenDelta(FOpenDeltaArg& OpenDeltaArg)"
  },
  {
    "label": "OnSetElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetElement(FSetElementArg& SetElementArg)"
  },
  {
    "label": "RemoveElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveElements(FRemoveElementsArg& RemoveElementsArg)"
  },
  {
    "label": "OnCloseDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCloseDelta(FCloseDeltaArg& CloseDeltaArg)"
  },
  {
    "label": "GetSentDeltaMessageCount()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "GetSentDeltaMessageCount()"
  },
  {
    "label": "SendSetElementBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendSetElementBuffer()"
  },
  {
    "label": "FScenePipeFromNetwork()",
    "kind": "Method",
    "detail": "Function (private : int8 BatchNumber = 0 ; int32 NextMessageNumber ; TArray<uint8> SetElementBuffer ; } ; class FScenePipeFromNetwork : public FPipeBase,public IDeltaProducer,public IStreamCommunicationInterface { public :)",
    "insertText": "FScenePipeFromNetwork(TSharedPtr<FMessageEndpoint, ESPMode::ThreadSafe> Sender, const FMessageAddress& RemoteAddress, FStreamPort RemoteStreamPort, const TSharedRef<IDeltaConsumer> Consumer) : FPipeBase(Sender, RemoteAddress, RemoteStreamPort) , Consumer(Consumer)"
  },
  {
    "label": "SetDeltaProducer()",
    "kind": "Method",
    "detail": "Function (Consumer ->)",
    "insertText": "SetDeltaProducer(this)"
  },
  {
    "label": "HandleDeltaMessage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleDeltaMessage(FDirectLinkMsg_DeltaMessage& Message)"
  },
  {
    "label": "OnOpenHaveList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOpenHaveList(const FSceneIdentifier& HaveSceneId, bool bKeepPreviousContent, int32 SyncCycle)"
  },
  {
    "label": "OnHaveElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHaveElement(FSceneGraphId NodeId, FElementHash HaveHash)"
  },
  {
    "label": "SendHaveElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendHaveElements()"
  },
  {
    "label": "OnCloseHaveList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCloseHaveList()"
  },
  {
    "label": "GetCommunicationStatus()",
    "kind": "Method",
    "detail": "Function (public : FCommunicationStatus)",
    "insertText": "GetCommunicationStatus()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(FDirectLinkMsg_HaveListMessage* Message)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : int32 BatchNumber = 0 ; int32 NextMessageNumber ; FDirectLinkMsg_HaveListMessage* BufferedHaveListContent = nullptr ; int32 BufferSize = 1 0 0 ; TMap<int32,FDirectLinkMsg_DeltaMessage> MessageBuffer ; int32 NextTransmitableMessageIndex = 0 ; int32 CurrentBatchCode = 0 ; TSharedPtr<IDeltaConsumer> Consumer ; FCommunicationStatus CurrentCommunicationStatus ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FSceneIdentifier& SceneId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, IDeltaConsumer::FSetupSceneArg& SetupSceneArg)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, IDeltaConsumer::FOpenDeltaArg& OpenDeltaArg)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, IDeltaConsumer::FCloseDeltaArg& CloseDeltaArg)"
  }
]