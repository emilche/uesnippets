[
  {
    "label": "EnumSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EnumSet"
  },
  {
    "label": "values",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "values"
  },
  {
    "label": "around",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "around"
  },
  {
    "label": "EnumSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EnumSet"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "element",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "element"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "values",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "values"
  },
  {
    "label": "Union()",
    "kind": "Method",
    "detail": "Function (Max>)",
    "insertText": "Union(EnumSet<E, Min, Max> set1,\n                           EnumSet<E, Min, Max> set2)"
  },
  {
    "label": "Intersection()",
    "kind": "Method",
    "detail": "Function (Max>)",
    "insertText": "Intersection(EnumSet<E, Min, Max> set1,\n                                  EnumSet<E, Min, Max> set2)"
  },
  {
    "label": "Difference()",
    "kind": "Method",
    "detail": "Function (Max>)",
    "insertText": "Difference(EnumSet<E, Min, Max> set1,\n                                EnumSet<E, Min, Max> set2)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "static_assert(\n      std::is_enum<E>::value,\n      \"First template parameter of EnumSet must be an enumeration type\")"
  },
  {
    "label": "FromIndex()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FromIndex(i_)"
  },
  {
    "label": "old()",
    "kind": "Method",
    "detail": "Function (Iterator)",
    "insertText": "old(*this)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Iterator(enums_)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Iterator()"
  }
]