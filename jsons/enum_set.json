[
  {
    "label": "EnumSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EnumSet"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "values",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "values"
  },
  {
    "label": "Union()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_ENUM_SET_H_ # define BASE_CONTAINERS_ENUM_SET_H_ # include<bitset> # include<cstddef> # include<type_traits> # include<utility> # include \" base / check . h \" # include \" base / check_op . h \" # include \" base / memory / raw_ptr . h \" namespace base { template<E,E MinEnumValue,E MaxEnumValue> class EnumSet ; template<E,E Min,E Max> EnumSet<E,Min,Max>)",
    "insertText": "Union(EnumSet<E, Min, Max> set1, EnumSet<E, Min, Max> set2)"
  },
  {
    "label": "Intersection()",
    "kind": "Method",
    "detail": "Function (template<E,E Min,E Max> EnumSet<E,Min,Max>)",
    "insertText": "Intersection(EnumSet<E, Min, Max> set1, EnumSet<E, Min, Max> set2)"
  },
  {
    "label": "Difference()",
    "kind": "Method",
    "detail": "Function (template<E,E Min,E Max> EnumSet<E,Min,Max>)",
    "insertText": "Difference(EnumSet<E, Min, Max> set1, EnumSet<E, Min, Max> set2)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (template<E,E MinEnumValue,E MaxEnumValue> class EnumSet { private :)",
    "insertText": "static_assert(std::is_enum<E>::value, \"First template parameter of EnumSet must be an enumeration type\")"
  },
  {
    "label": "InRange()",
    "kind": "Method",
    "detail": "Function (using enum_underlying_type = std::underlying_type_t<E> ; bool)",
    "insertText": "InRange(E value)"
  },
  {
    "label": "GetUnderlyingValue()",
    "kind": "Method",
    "detail": "Function (} enum_underlying_type)",
    "insertText": "GetUnderlyingValue(E value)"
  },
  {
    "label": "GetUnderlyingValue()",
    "kind": "Method",
    "detail": "Function (} public : using EnumType = E ; const E kMinValue = MinEnumValue ; const E kMaxValue = MaxEnumValue ; const size_t kValueCount =)",
    "insertText": "GetUnderlyingValue(kMaxValue) - GetUnderlyingValue(kMinValue)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (private : using EnumBitSet = std::bitset<kValueCount> ; public : class Iterator { public :)",
    "insertText": "Iterator() : enums_(nullptr), i_(kValueCount)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Iterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Iterator& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} E)",
    "insertText": "operator()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(Good())"
  },
  {
    "label": "FindNext()",
    "kind": "Method",
    "detail": "Function (i_ =)",
    "insertText": "FindNext(i_ + 1)"
  },
  {
    "label": "old()",
    "kind": "Method",
    "detail": "Function (Iterator)",
    "insertText": "old(*this)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} private : Iterator)",
    "insertText": "begin()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Iterator(const EnumBitSet& enums) : enums_(&enums), i_(FindNext(0))"
  },
  {
    "label": "Good()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Good()"
  },
  {
    "label": "FindNext()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "FindNext(size_t i)"
  },
  {
    "label": "EnumSet()",
    "kind": "Method",
    "detail": "Function (+ + i ; } return i ; } raw_ptr<const EnumBitSet,DanglingUntriaged> enums_ ; size_t i_ ; } ;)",
    "insertText": "EnumSet()"
  },
  {
    "label": "single_val_bitstring()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "single_val_bitstring(E val)"
  },
  {
    "label": "ToIndex()",
    "kind": "Method",
    "detail": "Function (const uint64_t bitstring = 1 ; const size_t shift_amount =)",
    "insertText": "ToIndex(val)"
  },
  {
    "label": "single_val_bitstring()",
    "kind": "Method",
    "detail": "Function (uint64_t converted [ ] = {)",
    "insertText": "single_val_bitstring(values)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint64_t result = 0 ;)",
    "insertText": "for(uint64_t e : converted)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (} EnumSet)",
    "insertText": "All()"
  },
  {
    "label": "FromRange()",
    "kind": "Method",
    "detail": "Function (} EnumSet)",
    "insertText": "FromRange(E start, E end)"
  },
  {
    "label": "FromEnumBitmask()",
    "kind": "Method",
    "detail": "Function (} EnumSet)",
    "insertText": "FromEnumBitmask(const uint64_t bitmask)"
  },
  {
    "label": "ToEnumBitmask()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "ToEnumBitmask()"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Put(E value)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (enums_ .)",
    "insertText": "set(ToIndex(value))"
  },
  {
    "label": "PutAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PutAll(EnumSet other)"
  },
  {
    "label": "PutRange()",
    "kind": "Method",
    "detail": "Function (enums_ | = other . enums_ ; } void)",
    "insertText": "PutRange(E start, E end)"
  },
  {
    "label": "ToIndex()",
    "kind": "Method",
    "detail": "Function (size_t endIndexInclusive =)",
    "insertText": "ToIndex(end)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (enums_ .)",
    "insertText": "set(current)"
  },
  {
    "label": "RetainAll()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RetainAll(EnumSet other)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (enums_& = other . enums_ ; } void)",
    "insertText": "Remove(E value)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (enums_ .)",
    "insertText": "reset(ToIndex(value))"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveAll(EnumSet other)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (enums_& = ~ other . enums_ ; } void)",
    "insertText": "Clear()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (enums_ .)",
    "insertText": "reset()"
  },
  {
    "label": "Has()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Has(E value)"
  },
  {
    "label": "HasAll()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAll(EnumSet other)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Empty()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "Size()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "end()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const EnumSet& other)"
  },
  {
    "label": "MaxEnumValue()",
    "kind": "Method",
    "detail": "Function (EnumSet Intersection<E,MinEnumValue,)",
    "insertText": "MaxEnumValue(EnumSet set1, EnumSet set2)"
  },
  {
    "label": "EnumSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumSet(EnumBitSet enums) : enums_(enums)"
  },
  {
    "label": "ToIndex()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "ToIndex(E value)"
  },
  {
    "label": "FromIndex()",
    "kind": "Method",
    "detail": "Function (} E)",
    "insertText": "FromIndex(size_t i)"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(i, kValueCount)"
  }
]