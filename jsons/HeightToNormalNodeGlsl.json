[
  {
    "label": "MX_GENGLSL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_GENGLSL_API"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_HEIGHTTONORMALNODEGLSL_H # define MATERIALX_HEIGHTTONORMALNODEGLSL_H # include<MaterialXGenGlsl / Export . h> # include<MaterialXGenShader / Nodes / ConvolutionNode . h> MATERIALX_NAMESPACE_BEGIN class HeightToNormalNodeGlsl : public ConvolutionNode { public : ShaderNodeImplPtr)",
    "insertText": "create()"
  },
  {
    "label": "emitFunctionDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitFunctionDefinition(const ShaderNode& node, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitFunctionCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitFunctionCall(const ShaderNode& node, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "getTarget()",
    "kind": "Method",
    "detail": "Function (const string&)",
    "insertText": "getTarget()"
  },
  {
    "label": "acceptsInputType()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "acceptsInputType(const TypeDesc* type)"
  },
  {
    "label": "computeSampleOffsetStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeSampleOffsetStrings(const string& sampleSizeName, const string& offsetTypeString, unsigned int filterWidth, StringVec& offsetStrings)"
  }
]