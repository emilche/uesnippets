[
  {
    "label": "TTriangleMeshAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTriangleMeshAdapter"
  },
  {
    "label": "TIndexMeshArrayAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIndexMeshArrayAdapter"
  },
  {
    "label": "TIndexVectorMeshArrayAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIndexVectorMeshArrayAdapter"
  },
  {
    "label": "WrappedMeshType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WrappedMeshType"
  },
  {
    "label": "TMeshWrapperAdapterd",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMeshWrapperAdapterd"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" TriangleTypes . h \" # include \" VectorTypes . h \" # include \" Math / IntVector . h \" # include \" Math / Vector . h \" # include \" IndexTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> struct TTriangleMeshAdapter { TFunction<)",
    "insertText": "bool(int32 index)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "int32()"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "uint64()"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "FIndex3i(int32)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (TFunction<TVector<)",
    "insertText": "RealType(int32)"
  },
  {
    "label": "GetTriVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTriVertices(int TID, UE::Math::TVector<RealType>& V0, UE::Math::TVector<RealType>& V1, UE::Math::TVector<RealType>& V2)"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function (FIndex3i TriIndices =)",
    "insertText": "GetTriangle(TID)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (V0 =)",
    "insertText": "GetVertex(TriIndices.A)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (V1 =)",
    "insertText": "GetVertex(TriIndices.B)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (V2 =)",
    "insertText": "GetVertex(TriIndices.C)"
  },
  {
    "label": "GetArrayMesh()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TTriangleMeshAdapter<double> FTriangleMeshAdapterd ; typedef TTriangleMeshAdapter<float> FTriangleMeshAdapterf ; FTriangleMeshAdapterd)",
    "insertText": "GetArrayMesh(TArray<FVector>& Vertices, TArray<FIntVector>& Triangles)"
  },
  {
    "label": "SetSources()",
    "kind": "Method",
    "detail": "Function (} } ; } template<IndexType,OutRealType,InVectorType = FVector> struct TIndexMeshArrayAdapter { const TArray<InVectorType>* SourceVertices ; const TArray<IndexType>* SourceTriangles ; void)",
    "insertText": "SetSources(const TArray<InVectorType>* SourceVerticesIn, const TArray<IndexType>* SourceTrianglesIn)"
  },
  {
    "label": "TIndexMeshArrayAdapter()",
    "kind": "Method",
    "detail": "Function (SourceVertices = SourceVerticesIn ; SourceTriangles = SourceTrianglesIn ; })",
    "insertText": "TIndexMeshArrayAdapter() : SourceVertices(nullptr), SourceTriangles(nullptr)"
  },
  {
    "label": "TIndexMeshArrayAdapter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIndexMeshArrayAdapter(const TArray<InVectorType>* SourceVerticesIn, const TArray<IndexType>* SourceTrianglesIn) : SourceVertices(SourceVerticesIn), SourceTriangles(SourceTrianglesIn)"
  },
  {
    "label": "IsTriangle()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTriangle(int32 Index)"
  },
  {
    "label": "IsVertex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVertex(int32 Index)"
  },
  {
    "label": "MaxTriangleID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "MaxTriangleID()"
  },
  {
    "label": "MaxVertexID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "MaxVertexID()"
  },
  {
    "label": "TriangleCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "TriangleCount()"
  },
  {
    "label": "VertexCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "VertexCount()"
  },
  {
    "label": "GetChangeStamp()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetChangeStamp()"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (int32 Start = Index* 3 ; return)",
    "insertText": "FIndex3i((int)(*SourceTriangles)[Start], (int)(*SourceTriangles)[Start+1], (int)(*SourceTriangles)[Start+2])"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (} TVector<OutRealType>)",
    "insertText": "GetVertex(int32 Index)"
  },
  {
    "label": "GetTriVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTriVertices(int32 TriIndex, UE::Math::TVector<OutRealType>& V0, UE::Math::TVector<OutRealType>& V1, UE::Math::TVector<OutRealType>& V2)"
  },
  {
    "label": "OutRealType()",
    "kind": "Method",
    "detail": "Function (int32 Start = TriIndex* 3 ; V0 = TVector<)",
    "insertText": "OutRealType((*SourceVertices)[(*SourceTriangles)[Start]])"
  },
  {
    "label": "OutRealType()",
    "kind": "Method",
    "detail": "Function (V1 = TVector<)",
    "insertText": "OutRealType((*SourceVertices)[(*SourceTriangles)[Start+1]])"
  },
  {
    "label": "OutRealType()",
    "kind": "Method",
    "detail": "Function (V2 = TVector<)",
    "insertText": "OutRealType((*SourceVertices)[(*SourceTriangles)[Start+2]])"
  },
  {
    "label": "SetSources()",
    "kind": "Method",
    "detail": "Function (} } ; template<IndexVectorType,OutRealType,InVectorType = FVector> struct TIndexVectorMeshArrayAdapter { const TArray<InVectorType>* SourceVertices ; const TArray<IndexVectorType>* SourceTriangles ; void)",
    "insertText": "SetSources(const TArray<InVectorType>* SourceVerticesIn, const TArray<IndexVectorType>* SourceTrianglesIn)"
  },
  {
    "label": "TIndexVectorMeshArrayAdapter()",
    "kind": "Method",
    "detail": "Function (SourceVertices = SourceVerticesIn ; SourceTriangles = SourceTrianglesIn ; })",
    "insertText": "TIndexVectorMeshArrayAdapter() : SourceVertices(nullptr), SourceTriangles(nullptr)"
  },
  {
    "label": "TIndexVectorMeshArrayAdapter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIndexVectorMeshArrayAdapter(const TArray<InVectorType>* SourceVerticesIn, const TArray<IndexVectorType>* SourceTrianglesIn) : SourceVertices(SourceVerticesIn), SourceTriangles(SourceTrianglesIn)"
  },
  {
    "label": "Tri()",
    "kind": "Method",
    "detail": "Function (const IndexVectorType&)",
    "insertText": "Tri(*SourceTriangles)"
  },
  {
    "label": "OutRealType()",
    "kind": "Method",
    "detail": "Function (V0 = TVector<)",
    "insertText": "OutRealType((*SourceVertices)[Tri[0]])"
  },
  {
    "label": "OutRealType()",
    "kind": "Method",
    "detail": "Function (V1 = TVector<)",
    "insertText": "OutRealType((*SourceVertices)[Tri[1]])"
  },
  {
    "label": "OutRealType()",
    "kind": "Method",
    "detail": "Function (V2 = TVector<)",
    "insertText": "OutRealType((*SourceVertices)[Tri[2]])"
  },
  {
    "label": "TMeshWrapperAdapterd()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TIndexMeshArrayAdapter<uint32,double> FIndexMeshArrayAdapterd ; template<class WrappedMeshType> struct TMeshWrapperAdapterd : public UE::Geometry::FTriangleMeshAdapterd { WrappedMeshType* WrappedAdapter ;)",
    "insertText": "TMeshWrapperAdapterd(WrappedMeshType* WrappedAdapterIn) : WrappedAdapter(WrappedAdapterIn)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (IsTriangle = [)",
    "insertText": "this(int index)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (} ; MaxTriangleID = [)",
    "insertText": "this()"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (} ; GetTriangle = [)",
    "insertText": "this(int32 TriangleID)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (} ; GetVertex = [)",
    "insertText": "this(int32 VertexID)"
  }
]