[
  {
    "label": "_Ip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Ip"
  },
  {
    "label": "_Op",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Op"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_InIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter"
  },
  {
    "label": "_DiffType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_DiffType"
  },
  {
    "label": "_OutIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutIter"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_COPY_N_H # define _LIBCPP___ALGORITHM_RANGES_COPY_N_H # include<__algorithm / copy . h> # include<__algorithm / in_out_result . h> # include<__algorithm / ranges_copy . h> # include<__config> # include<__functional / identity . h> # include<__iterator / concepts . h> # include<__iterator / incrementable_traits . h> # include<__iterator / unreachable_sentinel . h> # include<__iterator / wrap_iter . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__go()",
    "kind": "Method",
    "detail": "Function (template<class _Ip,class _Op> using copy_n_result = in_out_result<_Ip,_Op> ; namespace __copy_n { struct __fn { template<class _InIter,class _DiffType,class _OutIter> _LIBCPP_HIDE_FROM_ABI copy_n_result<_InIter,_OutIter>)",
    "insertText": "__go(_InIter __first, _DiffType __n, _OutIter __result)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (* __result =* __first ; + + __first ; + + __result ; - - __n ; } return {)",
    "insertText": "move(__first), std::move(__result)"
  },
  {
    "label": "__copy()",
    "kind": "Method",
    "detail": "Function (auto __ret =)",
    "insertText": "__copy(__first, __first + __n, __result)"
  }
]