[
  {
    "label": "FCriterion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCriterion"
  },
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FModelMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModelMesh"
  },
  {
    "label": "FThinZoneSide",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThinZoneSide"
  },
  {
    "label": "FTopologicalEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEntity"
  },
  {
    "label": "FTopologicalEdge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEdge"
  },
  {
    "label": "FTopologicalFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalFace"
  },
  {
    "label": "FTopologicalLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalLoop"
  },
  {
    "label": "FTopologicalShapeEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalShapeEntity"
  },
  {
    "label": "FCostToFace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCostToFace"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FParametricMesher()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FParametricMesher(FModelMesh& InMeshModel, double GeometricTolerance, bool bActivateThinZoneMeshing)"
  },
  {
    "label": "MeshEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshEntities(TArray<FTopologicalShapeEntity*>& InEntities)"
  },
  {
    "label": "Mesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mesh(FTopologicalFace& Face)"
  },
  {
    "label": "Mesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mesh(FTopologicalEdge& InEdge, const FTopologicalFace& CarrierFace, bool bFinalMeshing = true)"
  },
  {
    "label": "Mesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mesh(FTopologicalVertex& Vertex)"
  },
  {
    "label": "MeshFaceLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshFaceLoops(FGrid& Grid)"
  },
  {
    "label": "MeshThinZoneEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshThinZoneEdges(FTopologicalFace& Face)"
  },
  {
    "label": "MeshThinZoneSide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshThinZoneSide(FThinZoneSide& Side, bool bFinalMeshing)"
  },
  {
    "label": "DefineImposedCuttingPointsBasedOnOtherSideMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineImposedCuttingPointsBasedOnOtherSideMesh(FTopologicalFace& Face, FThinZoneSide& Side1, FThinZoneSide& Side2, bool Last)"
  },
  {
    "label": "GenerateCloud()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateCloud(FGrid& Grid)"
  },
  {
    "label": "PreMeshingTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreMeshingTasks()"
  },
  {
    "label": "MeshEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshEntities()"
  },
  {
    "label": "LinkQuadSurfaceForMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkQuadSurfaceForMesh(TArray<ParametricMesherTool::FCostToFace>& QuadTrimmedSurfaceSet, TArray<TArray<FTopologicalFace*>>& OutStrips)"
  },
  {
    "label": "MeshSurfaceByFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshSurfaceByFront(TArray<ParametricMesherTool::FCostToFace>& QuadTrimmedSurfaceSet)"
  },
  {
    "label": "ApplyEdgeCriteria()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyEdgeCriteria(FTopologicalEdge& Edge)"
  },
  {
    "label": "ApplyFaceCriteria()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFaceCriteria(FTopologicalFace& Face, const TArray<TSharedPtr<FCriterion>>& Criteria, const double, bool)"
  }
]