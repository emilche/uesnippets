[
  {
    "label": "FCriterion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCriterion"
  },
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FModelMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModelMesh"
  },
  {
    "label": "FThinZoneSide",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThinZoneSide"
  },
  {
    "label": "FTopologicalEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEntity"
  },
  {
    "label": "FTopologicalEdge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEdge"
  },
  {
    "label": "FTopologicalFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalFace"
  },
  {
    "label": "FTopologicalLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalLoop"
  },
  {
    "label": "FTopologicalShapeEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalShapeEntity"
  },
  {
    "label": "FCostToFace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCostToFace"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FCostToFace()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Chrono . h \" # include \" Core / Types . h \" # include \" Mesh / Meshers / ParametricMesherConstantes . h \" namespace UE::CADKernel { class FCriterion ; class FGrid ; class FModelMesh ; class FThinZoneSide ; class FTopologicalEntity ; class FTopologicalEdge ; class FTopologicalFace ; class FTopologicalLoop ; class FTopologicalShapeEntity ; namespace ParametricMesherTool { struct FCostToFace { double Cost ; FTopologicalFace* Face ;)",
    "insertText": "FCostToFace(double NewCost, FTopologicalFace* NewFace) : Cost(NewCost) , Face(NewFace)"
  },
  {
    "label": "FParametricMesher()",
    "kind": "Method",
    "detail": "Function (} } ; } double ConstMinCurvature = 0 . 0 0 1 ; class FParametricMesher { protected : FMeshingTolerances Tolerances ; bool bThinZoneMeshing = false ; FModelMesh& MeshModel ; TArray<FTopologicalFace*> Faces ; # ifdef CADKERNEL_DEV bool bDisplay = false ; # endif public :)",
    "insertText": "FParametricMesher(FModelMesh& InMeshModel, double GeometricTolerance, bool bActivateThinZoneMeshing)"
  },
  {
    "label": "GetMeshModel()",
    "kind": "Method",
    "detail": "Function (const FModelMesh&)",
    "insertText": "GetMeshModel()"
  },
  {
    "label": "MeshEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshEntity(FTopologicalShapeEntity& InEntity)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<FTopologicalShapeEntity*> Entities ; Entities .)",
    "insertText": "Add(&InEntity)"
  },
  {
    "label": "MeshEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshEntities(Entities)"
  },
  {
    "label": "Mesh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Mesh(FTopologicalFace& Face)"
  },
  {
    "label": "PreMeshingTasks()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PreMeshingTasks()"
  },
  {
    "label": "MeshEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshEntities()"
  },
  {
    "label": "IsolateQuadFace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IsolateQuadFace(TArray<ParametricMesherTool::FCostToFace>& QuadSurfaces, TArray<FTopologicalFace*>& OtherSurfaces)"
  },
  {
    "label": "LinkQuadSurfaceForMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkQuadSurfaceForMesh(TArray<ParametricMesherTool::FCostToFace>& QuadTrimmedSurfaceSet, TArray<TArray<FTopologicalFace*>>& OutStrips)"
  },
  {
    "label": "MeshSurfaceByFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshSurfaceByFront(TArray<ParametricMesherTool::FCostToFace>& QuadTrimmedSurfaceSet)"
  },
  {
    "label": "ApplyEdgeCriteria()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyEdgeCriteria(FTopologicalEdge& Edge)"
  },
  {
    "label": "ApplyFaceCriteria()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFaceCriteria(FTopologicalFace& Face, const TArray<TSharedPtr<FCriterion>>& Criteria, const double, bool)"
  }
]