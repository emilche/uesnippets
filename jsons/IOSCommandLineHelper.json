[
  {
    "label": "FIOSCommandLineHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIOSCommandLineHelper"
  },
  {
    "label": "MergeCommandlineWithSaved()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / CommandLine . h \" # define IOS_MAX_PATH 1 0 2 4 # define CMD_LINE_MAX 1 6 3 8 4 FString GSavedCommandLine ; class FIOSCommandLineHelper { public : void)",
    "insertText": "MergeCommandlineWithSaved(TCHAR CommandLine[16384])"
  },
  {
    "label": "Strcpy()",
    "kind": "Method",
    "detail": "Function (FString CombinedCommandLine = GSavedCommandLine + CommandLine ;)",
    "insertText": "Strcpy(CommandLine, CMD_LINE_MAX, *CombinedCommandLine)"
  },
  {
    "label": "Strchr()",
    "kind": "Method",
    "detail": "Function (} else { TCHAR* Space =)",
    "insertText": "Strchr(CommandLine, ' ')"
  },
  {
    "label": "Strcat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Strcat(CommandLine, CMD_LINE_MAX, *GSavedCommandLine)"
  },
  {
    "label": "AfterSpace()",
    "kind": "Method",
    "detail": "Function (} else { FString)",
    "insertText": "AfterSpace(Space)"
  },
  {
    "label": "Strcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Strcpy(Space, CMD_LINE_MAX - (Space - CommandLine), *GSavedCommandLine)"
  },
  {
    "label": "Strcat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Strcat(CommandLine, CMD_LINE_MAX, *AfterSpace)"
  },
  {
    "label": "TryReadCommandLineFile()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "TryReadCommandLineFile(const FString& CommandLineFilePath)"
  },
  {
    "label": "fopen()",
    "kind": "Method",
    "detail": "Function (bool bHasFile = false ; FILE* CommandLineFile =)",
    "insertText": "fopen(TCHAR_TO_UTF8(*CommandLineFilePath), \"r\")"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\"Checking for command line in %s... FOUND!\") LINE_TERMINATOR, *CommandLineFilePath)"
  },
  {
    "label": "fgets()",
    "kind": "Method",
    "detail": "Function (char CommandLine [ CMD_LINE_MAX ] = { 0 } ; char* DataExists =)",
    "insertText": "fgets(CommandLine, UE_ARRAY_COUNT(CommandLine) - 1, CommandLineFile)"
  },
  {
    "label": "strlen()",
    "kind": "Method",
    "detail": "Function (CommandLine [)",
    "insertText": "strlen(CommandLine)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Append(UTF8_TO_TCHAR(CommandLine))"
  },
  {
    "label": "fclose()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "fclose(CommandLineFile)"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (bHasFile = true ; } else {)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\"Checking for command line in %s... NOT FOUND!\") LINE_TERMINATOR, *CommandLineFilePath)"
  },
  {
    "label": "InitCommandArgs()",
    "kind": "Method",
    "detail": "Function (} return bHasFile ; } void)",
    "insertText": "InitCommandArgs(FString AdditionalCommandArgs)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(TEXT(\"\"))"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (FString BundleCommandLineFilePath =)",
    "insertText": "FString([[NSBundle mainBundle] bundlePath]) + TEXT(\"/uecommandline.txt\")"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (FString DocumentsCommandLineFilePath =)",
    "insertText": "FString([NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0]) + TEXT(\"/uecommandline.txt\")"
  },
  {
    "label": "TryReadCommandLineFile()",
    "kind": "Method",
    "detail": "Function (# if UE_BUILD_SHIPPING bool bIsTestFlightOrInternal = [ [ [ [ NSBundle mainBundle ] appStoreReceiptURL ] lastPathComponent ] isEqualToString : @ \" sandboxReceipt \" ] ; # else bool bIsTestFlightOrInternal = YES ; # endif bool bFoundDocumentsCommandLine = bIsTestFlightOrInternal&&)",
    "insertText": "TryReadCommandLineFile(DocumentsCommandLineFilePath)"
  },
  {
    "label": "TryReadCommandLineFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryReadCommandLineFile(BundleCommandLineFilePath)"
  },
  {
    "label": "GetStoredValue()",
    "kind": "Method",
    "detail": "Function (} FString ReplacementCL,AppendCL ; bool bHasReplacementCL =)",
    "insertText": "GetStoredValue(TEXT(\"\"), TEXT(\"IOSCommandLine\"), TEXT(\"ReplacementCL\"), ReplacementCL)"
  },
  {
    "label": "GetStoredValue()",
    "kind": "Method",
    "detail": "Function (bool bHasAppendCL =)",
    "insertText": "GetStoredValue(TEXT(\"\"), TEXT(\"IOSCommandLine\"), TEXT(\"AppendCL\"), AppendCL)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(*ReplacementCL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bHasAppendCL)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(TEXT(\" \"))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(*AppendCL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!AdditionalCommandArgs.IsEmpty() && !FChar::IsWhitespace(AdditionalCommandArgs[0]))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(*AdditionalCommandArgs)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(*GSavedCommandLine)"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\"Combined iOS Commandline: %s\") LINE_TERMINATOR, FCommandLine::Get())"
  }
]