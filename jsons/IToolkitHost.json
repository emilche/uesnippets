[
  {
    "label": "FEditorModeTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeTools"
  },
  {
    "label": "UTypedElementCommonActions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementCommonActions"
  },
  {
    "label": "IAssetViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetViewport"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "IToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkit"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "IToolkitHost()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class FEditorModeTools ; class UTypedElementCommonActions ; class IAssetViewport ; class IToolkitHost { public : ~)",
    "insertText": "IToolkitHost()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnActiveViewportChanged, TSharedPtr<IAssetViewport>, TSharedPtr<IAssetViewport>) virtual TSharedRef< class SWidget > GetParentWidget()"
  },
  {
    "label": "BringToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringToFront()"
  },
  {
    "label": "GetTabManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class FTabManager>)",
    "insertText": "GetTabManager()"
  },
  {
    "label": "OnToolkitHostingStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToolkitHostingStarted(const TSharedRef< class IToolkit >& Toolkit)"
  },
  {
    "label": "OnToolkitHostingFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToolkitHostingFinished(const TSharedRef< class IToolkit >& Toolkit)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (class UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetEditorModeManager()",
    "kind": "Method",
    "detail": "Function (FEditorModeTools&)",
    "insertText": "GetEditorModeManager()"
  },
  {
    "label": "GetCommonActions()",
    "kind": "Method",
    "detail": "Function (UTypedElementCommonActions*)",
    "insertText": "GetCommonActions()"
  },
  {
    "label": "GetStatusBarName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetStatusBarName()"
  },
  {
    "label": "AddViewportOverlayWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddViewportOverlayWidget(TSharedRef<SWidget> InOverlaidWidget, TSharedPtr<IAssetViewport> InViewport = nullptr)"
  },
  {
    "label": "AddViewportOverlayWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddViewportOverlayWidget(InOverlaidWidget, INDEX_NONE, InViewport)"
  },
  {
    "label": "AddViewportOverlayWidget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddViewportOverlayWidget(TSharedRef<SWidget> InOverlaidWidget, int32 ZOrder, TSharedPtr<IAssetViewport> InViewport = nullptr)"
  },
  {
    "label": "RemoveViewportOverlayWidget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveViewportOverlayWidget(TSharedRef<SWidget> InOverlaidWidget, TSharedPtr<IAssetViewport> InViewport = nullptr)"
  },
  {
    "label": "GetActiveViewportSize()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "GetActiveViewportSize()"
  },
  {
    "label": "OnActiveViewportChanged()",
    "kind": "Method",
    "detail": "Function (} FOnActiveViewportChanged&)",
    "insertText": "OnActiveViewportChanged()"
  }
]