[
  {
    "label": "Image",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Image"
  },
  {
    "label": "Mipmap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Mipmap"
  },
  {
    "label": "Compressor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Compressor"
  },
  {
    "label": "Private()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_TT_COMPRESSOR_H # define NV_TT_COMPRESSOR_H # include<nvcore / Ptr . h> # include<nvtt / cuda / CudaCompressDXT . h> # include \" nvtt . h \" namespace nv { class Image ; } namespace nvtt { struct Mipmap ; struct Compressor::Private {)",
    "insertText": "Private()"
  },
  {
    "label": "compress()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "compress(const InputOptions::Private & inputOptions, const CompressionOptions::Private & compressionOptions, const OutputOptions::Private & outputOptions)"
  },
  {
    "label": "estimateSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "estimateSize(const InputOptions::Private & inputOptions, const CompressionOptions::Private & compressionOptions)"
  },
  {
    "label": "outputHeader()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "outputHeader(const InputOptions::Private & inputOptions, const CompressionOptions::Private & compressionOptions, const OutputOptions::Private & outputOptions)"
  },
  {
    "label": "compressMipmaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "compressMipmaps(uint f, const InputOptions::Private & inputOptions, const CompressionOptions::Private & compressionOptions, const OutputOptions::Private & outputOptions)"
  },
  {
    "label": "initMipmap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "initMipmap(Mipmap & mipmap, const InputOptions::Private & inputOptions, uint w, uint h, uint d, uint f, uint m)"
  },
  {
    "label": "findExactMipmap()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "findExactMipmap(const InputOptions::Private & inputOptions, uint w, uint h, uint d, uint f)"
  },
  {
    "label": "findClosestMipmap()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "findClosestMipmap(const InputOptions::Private & inputOptions, uint w, uint h, uint d, uint f)"
  },
  {
    "label": "downsampleMipmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "downsampleMipmap(Mipmap & mipmap, const InputOptions::Private & inputOptions)"
  },
  {
    "label": "scaleMipmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scaleMipmap(Mipmap & mipmap, const InputOptions::Private & inputOptions, uint w, uint h, uint d)"
  },
  {
    "label": "processInputImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "processInputImage(Mipmap & mipmap, const InputOptions::Private & inputOptions)"
  },
  {
    "label": "quantizeMipmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "quantizeMipmap(Mipmap & mipmap, const CompressionOptions::Private & compressionOptions)"
  },
  {
    "label": "compressMipmap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "compressMipmap(const Mipmap & mipmap, const InputOptions::Private & inputOptions, const CompressionOptions::Private & compressionOptions, const OutputOptions::Private & outputOptions)"
  }
]