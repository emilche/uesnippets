[
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "WaterDensity()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / Real . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / NumericLimits . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # define VEHICLE_DEBUGGING_ENABLED 0 namespace Chaos { struct RealWorldConsts { float)",
    "insertText": "WaterDensity()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Graph .)",
    "insertText": "Empty()"
  },
  {
    "label": "AddNormalized()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddNormalized(float Value)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Graph .)",
    "insertText": "Add(Value)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetValue(float InX, float MaxX = 1.0f, float MaxY = 1.0f)"
  },
  {
    "label": "MaxX()",
    "kind": "Method",
    "detail": "Function (float Step =)",
    "insertText": "MaxX(Graph.Num() - 1)"
  },
  {
    "label": "NormalisedRamp()",
    "kind": "Method",
    "detail": "Function (int StartIndex = InX / Step ; float)",
    "insertText": "NormalisedRamp((float)InX - (float)StartIndex * Step)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float NormYValue = 0 . 0 f ;)",
    "insertText": "if(StartIndex >= Graph.Num() - 1)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (NormYValue = Graph [ Graph .)",
    "insertText": "Num()"
  },
  {
    "label": "StartIndex()",
    "kind": "Method",
    "detail": "Function (} else { NormYValue = Graph [)",
    "insertText": "StartIndex(1.f - NormalisedRamp)"
  },
  {
    "label": "FGraph()",
    "kind": "Method",
    "detail": "Function (} return NormYValue* MaxY ; } private : TArray<float> Graph ; } ; class FGraph { public :)",
    "insertText": "FGraph()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (BoundsX . X = TNumericLimits<FReal)",
    "insertText": "Max()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const FVec2& Value)"
  },
  {
    "label": "EvaluateY()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EvaluateY(float InX)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "ClampNormalRange()",
    "kind": "Method",
    "detail": "Function (} private : TArray<FVec2> Graph ; FVector2D BoundsX ; FVector2D BoundsY ; } ; class FVehicleUtility { public : void)",
    "insertText": "ClampNormalRange(float& InOutValue)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (InOutValue =)",
    "insertText": "Clamp(InOutValue, 0.f, 1.f)"
  },
  {
    "label": "YawFromForwardVectorRadians()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "YawFromForwardVectorRadians(const FVector& NormalizedForwardsVector)"
  },
  {
    "label": "PitchFromForwardVectorRadians()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "PitchFromForwardVectorRadians(const FVector& NormalizedForwardsVector)"
  },
  {
    "label": "RollFromRightVectorRadians()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "RollFromRightVectorRadians(const FVector& NormalizedRightVector)"
  },
  {
    "label": "TurnRadiusFromThreePoints()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "TurnRadiusFromThreePoints(const FVector& PtA, const FVector& PtB, const FVector& PtC)"
  },
  {
    "label": "CalculateSlipAngle()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateSlipAngle(float Y, float X)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float Value = 0 . 0 f ; float LateralSpeedThreshold = 0 . 0 5 f ;)",
    "insertText": "if(FMath::Abs(Y) > LateralSpeedThreshold)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "Abs(FMath::Atan2(Y, X))"
  },
  {
    "label": "MToCmScaling()",
    "kind": "Method",
    "detail": "Function (Value = PI - Value ; } } return Value ; } } ; float)",
    "insertText": "MToCmScaling()"
  },
  {
    "label": "DegToRad()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "DegToRad(float InDeg)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "FPerformanceMeasure()",
    "kind": "Method",
    "detail": "Function (private : FString Description ; bool PreStartConditionsMet ; bool StartConditionsMet ; bool MeasurementComplete ; FVector InitialLocation ; double InitialTime ; float InitialVelocityMPH ; float FinalTargetVelocityMPH ; float FinalTargetDistanceMiles ; float VelocityResultMPH ; float DistanceResultMiles ; float TimeResultSeconds ; } ; class FPerformanceMeasure { public : enum class EMeasure : uint8 { ZeroToThirtyMPH = 0,ZeroToSixtyMPH,QuarterMile,ThirtyToZeroMPH,SixtyToZeroMPH,} ;)",
    "insertText": "FPerformanceMeasure()"
  },
  {
    "label": "AddMeasure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeasure(FTimeAndDistanceMeasure& MeasureIn)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PerformanceMeasure .)",
    "insertText": "Add(MeasureIn)"
  },
  {
    "label": "GetMeasure()",
    "kind": "Method",
    "detail": "Function (} const FTimeAndDistanceMeasure&)",
    "insertText": "GetMeasure(int MeasurementIdx)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Update(float DeltaTime, const FVector& CurrentLocation, float CurrentVelocity)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (PerformanceMeasure [ I ] .)",
    "insertText": "Update(DeltaTime, CurrentLocation, CurrentVelocity)"
  },
  {
    "label": "GetNumMeasures()",
    "kind": "Method",
    "detail": "Function (} } int)",
    "insertText": "GetNumMeasures()"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Enable()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (IsEnabledThisFrame = true ; } bool)",
    "insertText": "IsEnabled()"
  }
]