[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__libcpp_is_member_pointer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__libcpp_is_member_pointer"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_IS_MEMBER_FUNCTION_POINTER_H # define _LIBCPP___TYPE_TRAITS_IS_MEMBER_FUNCTION_POINTER_H # include<__config> # include<__type_traits / integral_constant . h> # include<__type_traits / is_function . h> # include<__type_traits / remove_cv . h> # include<cstddef> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__has_builtin()",
    "kind": "Method",
    "detail": "Function (enum { __is_member = false,__is_func = false,__is_obj = false } ; } ; template<class _Tp,class _Up> struct __libcpp_is_member_pointer<_Tp _Up::*> { enum { __is_member = true,__is_func = is_function<_Tp>::value,__is_obj = ! __is_func,} ; } ; # if)",
    "insertText": "__has_builtin(__is_member_function_pointer) template<class _Tp> struct _LIBCPP_TEMPLATE_VIS is_member_function_pointer : _BoolConstant<__is_member_function_pointer(_Tp)"
  },
  {
    "label": "__is_member_function_pointer()",
    "kind": "Method",
    "detail": "Function (} ; # if _LIBCPP_STD_VER> 1 4 template<class _Tp> bool is_member_function_pointer_v =)",
    "insertText": "__is_member_function_pointer(_Tp)"
  }
]