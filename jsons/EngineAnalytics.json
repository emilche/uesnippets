[
  {
    "label": "FEngineSessionManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEngineSessionManager"
  },
  {
    "label": "FAnalyticsSessionSummaryManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnalyticsSessionSummaryManager"
  },
  {
    "label": "IAnalyticsProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyticsProvider"
  },
  {
    "label": "IAnalyticsProviderET",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyticsProviderET"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FEngineAnalytics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEngineAnalytics"
  },
  {
    "label": "IEngineAnalyticsConfigOverride",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEngineAnalyticsConfigOverride"
  },
  {
    "label": "GetProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / ContainersFwd . h \" # include \" Delegates / Delegate . h \" # include \" IAnalyticsProviderET . h \" class FEngineSessionManager ; class FAnalyticsSessionSummaryManager ; class IAnalyticsProvider ; class IAnalyticsProviderET ; struct FAnalyticsEventAttribute ; class FEngineAnalytics : FNoncopyable { public : IAnalyticsProviderET&)",
    "insertText": "GetProvider()"
  },
  {
    "label": "GetSummaryManager()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FAnalyticsSessionSummaryManager&)",
    "insertText": "GetSummaryManager()"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FSimpleMulticastDelegate OnInitializeEngineAnalytics ; # endif void)",
    "insertText": "Shutdown(bool bIsEngineShutdown = false)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FSimpleMulticastDelegate OnShutdownEngineAnalytics ; # endif void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "LowDriveSpaceDetected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowDriveSpaceDetected()"
  },
  {
    "label": "AppendMachineStats()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AppendMachineStats(TArray<FAnalyticsEventAttribute>& EventAttributes)"
  },
  {
    "label": "SendMachineInfoForAccount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendMachineInfoForAccount(const FString& EpicAccountId)"
  },
  {
    "label": "OnEpicAccountIdChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEpicAccountIdChanged(const FString& EpicAccountId)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (bool bIsInitialized ; TSharedPtr<IAnalyticsProviderET> Analytics ; TSet<FString> SessionEpicAccountIds ; } ; namespace UE::Analytics::Private {)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnEpicAccountIdChanged, const FString&)"
  },
  {
    "label": "IEngineAnalyticsConfigOverride()",
    "kind": "Method",
    "detail": "Function (class IEngineAnalyticsConfigOverride { public : ~)",
    "insertText": "IEngineAnalyticsConfigOverride()"
  },
  {
    "label": "ApplyConfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyConfiguration(FAnalyticsET::Config& Config)"
  },
  {
    "label": "OnInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitialized(IAnalyticsProviderET& provider, const FOnEpicAccountIdChanged& OnEpicAccountIdChanged)"
  }
]