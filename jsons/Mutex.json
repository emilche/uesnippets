[
  {
    "label": "Condition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Condition"
  },
  {
    "label": "SynchWaitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SynchWaitParams"
  },
  {
    "label": "ABSL_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABSL_LOCKABLE"
  },
  {
    "label": "MuHowS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MuHowS"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "CondVar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CondVar"
  },
  {
    "label": "ABSL_SCOPED_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABSL_SCOPED_LOCKABLE"
  },
  {
    "label": "ABSL_SCOPED_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABSL_SCOPED_LOCKABLE"
  },
  {
    "label": "ABSL_SCOPED_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABSL_SCOPED_LOCKABLE"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "Condition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Condition"
  },
  {
    "label": "comment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "comment"
  },
  {
    "label": "comment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "comment"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "CondVar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CondVar"
  },
  {
    "label": "ABSL_SCOPED_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABSL_SCOPED_LOCKABLE"
  },
  {
    "label": "ABSL_SCOPED_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABSL_SCOPED_LOCKABLE"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "mu()",
    "kind": "Method",
    "detail": "Function (absl::Mutex)",
    "insertText": "mu(absl::kConstInit)"
  },
  {
    "label": "Mutex()",
    "kind": "Method",
    "detail": "Function (constexpr)",
    "insertText": "Mutex(absl::ConstInitType)"
  },
  {
    "label": "ABSL_ASSERT_EXCLUSIVE_LOCK()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "ABSL_ASSERT_EXCLUSIVE_LOCK()"
  },
  {
    "label": "ABSL_ASSERT_SHARED_LOCK()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "ABSL_ASSERT_SHARED_LOCK()"
  },
  {
    "label": "Await()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Await(const Condition &cond)"
  },
  {
    "label": "AwaitWithTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AwaitWithTimeout(const Condition &cond, absl::Duration timeout)"
  },
  {
    "label": "AwaitWithDeadline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AwaitWithDeadline(const Condition &cond, absl::Time deadline)"
  },
  {
    "label": "EnableDebugLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableDebugLog(const char *name)"
  },
  {
    "label": "ForgetDeadlockInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForgetDeadlockInfo()"
  },
  {
    "label": "InternalAttemptToUseMutexInFatalSignalHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalAttemptToUseMutexInFatalSignalHandler()"
  },
  {
    "label": "IncrementSynchSem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementSynchSem(Mutex *mu, base_internal::PerThreadSynch *w)"
  },
  {
    "label": "DecrementSynchSem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecrementSynchSem(Mutex *mu, base_internal::PerThreadSynch *w,\n                                synchronization_internal::KernelTimeout t)"
  },
  {
    "label": "LockSlowLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockSlowLoop(SynchWaitParams *waitp, int flags)"
  },
  {
    "label": "LockSlowWithDeadline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LockSlowWithDeadline(MuHow how, const Condition *cond,\n                            synchronization_internal::KernelTimeout t,\n                            int flags)"
  },
  {
    "label": "AwaitCommon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AwaitCommon(const Condition &cond,\n                   synchronization_internal::KernelTimeout t)"
  },
  {
    "label": "TryRemove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryRemove(base_internal::PerThreadSynch *s)"
  },
  {
    "label": "Block()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Block(base_internal::PerThreadSynch *s)"
  },
  {
    "label": "Trans()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Trans(MuHow how)"
  },
  {
    "label": "Fer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fer(\n      base_internal::PerThreadSynch *w)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&mu_)"
  },
  {
    "label": "ABSL_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (count_)",
    "insertText": "ABSL_GUARDED_BY(mu_)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&mu_, count_is_zero)"
  },
  {
    "label": "Condition()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Condition(const bool *cond)"
  },
  {
    "label": "GuaranteedEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GuaranteedEqual(const Condition *a, const Condition *b)"
  },
  {
    "label": "Condition()",
    "kind": "Method",
    "detail": "Function (method_)",
    "insertText": "Condition()"
  },
  {
    "label": "CallVoidPtrFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CallVoidPtrFunction(const Condition*)"
  },
  {
    "label": "CastAndCallFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CastAndCallFunction(const Condition* c)"
  },
  {
    "label": "CastAndCallMethod()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CastAndCallMethod(const Condition* c)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait(Mutex *mu)"
  },
  {
    "label": "WaitWithTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitWithTimeout(Mutex *mu, absl::Duration timeout)"
  },
  {
    "label": "WaitWithDeadline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitWithDeadline(Mutex *mu, absl::Time deadline)"
  },
  {
    "label": "Signal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Signal()"
  },
  {
    "label": "SignalAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalAll()"
  },
  {
    "label": "EnableDebugLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableDebugLog(const char *name)"
  },
  {
    "label": "WaitCommon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitCommon(Mutex *mutex, synchronization_internal::KernelTimeout t)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(base_internal::PerThreadSynch *s)"
  },
  {
    "label": "Wakeup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wakeup(base_internal::PerThreadSynch *w)"
  },
  {
    "label": "EnableMutexInvariantDebugging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMutexInvariantDebugging(bool enabled)"
  },
  {
    "label": "SetMutexDeadlockDetectionMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMutexDeadlockDetectionMode(OnDeadlockCycle mode)"
  }
]