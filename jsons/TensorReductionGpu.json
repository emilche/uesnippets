[
  {
    "label": "FullReductionLauncher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FullReductionLauncher"
  },
  {
    "label": "FullReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FullReducer"
  },
  {
    "label": "InnerReductionLauncher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InnerReductionLauncher"
  },
  {
    "label": "InnerReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InnerReducer"
  },
  {
    "label": "OuterReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OuterReducer"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_REDUCTION_GPU_H # define EIGEN_CXX11_TENSOR_TENSOR_REDUCTION_GPU_H namespace Eigen { namespace internal { # if)",
    "insertText": "defined(EIGEN_USE_GPU) && defined(EIGEN_GPUCC) template <typename T, typename R> __device__ EIGEN_ALWAYS_INLINE void atomicReduce(T* output, T accum, R& reducer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(defined(EIGEN_HIP_DEVICE_COMPILE) && defined(__HIP_ARCH_HAS_WARP_SHUFFLE__)) || (EIGEN_CUDA_ARCH >= 300) if (sizeof(T) == 4)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (unsigned int oldval =* reinterpret_cast<unsigned)",
    "insertText": "int(output)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (unsigned int newval = oldval ; reducer .)",
    "insertText": "reduce(accum, reinterpret_cast<T*>(&newval))"
  },
  {
    "label": "long()",
    "kind": "Method",
    "detail": "Function (unsigned long long oldval =* reinterpret_cast<unsigned long)",
    "insertText": "long(output)"
  },
  {
    "label": "gpu_assert()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "gpu_assert(0 && \"Shouldn't be called on unsupported device\")"
  },
  {
    "label": "atomicExchCustom()",
    "kind": "Method",
    "detail": "Function (# endif } template<Type> __device__ Type)",
    "insertText": "atomicExchCustom(Type* address, Type val)"
  },
  {
    "label": "atomicExchCustom()",
    "kind": "Method",
    "detail": "Function (} template<> __device__ double)",
    "insertText": "atomicExchCustom(double* address, double val)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (unsigned long long int* address_as_ull = reinterpret_cast<unsigned long long)",
    "insertText": "int(address)"
  },
  {
    "label": "atomicReduce()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_HAS_GPU_FP16 template<R> __device__ void)",
    "insertText": "atomicReduce(half2* output, half2 accum, R& reducer)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (unsigned int newval = oldval ; reducer .)",
    "insertText": "reducePacket(accum, reinterpret_cast<half2*>(&newval))"
  },
  {
    "label": "half2()",
    "kind": "Method",
    "detail": "Function (half2* houtput = reinterpret_cast<)",
    "insertText": "half2(output)"
  },
  {
    "label": "half2()",
    "kind": "Method",
    "detail": "Function (half2* haccum = reinterpret_cast<)",
    "insertText": "half2(&accum)"
  },
  {
    "label": "atomicReduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "atomicReduce(houtput+i,*(haccum+i),reducer)"
  },
  {
    "label": "atomicReduce()",
    "kind": "Method",
    "detail": "Function (} } # endif template<> __device__ void)",
    "insertText": "atomicReduce(float* output, float accum, SumReducer<float>&)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(defined(EIGEN_HIP_DEVICE_COMPILE) && defined(__HIP_ARCH_HAS_WARP_SHUFFLE__)) || (EIGEN_CUDA_ARCH >= 300) atomicAdd(output, accum)"
  },
  {
    "label": "ReductionInitKernel()",
    "kind": "Method",
    "detail": "Function (# endif } template<CoeffType,Index> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void)",
    "insertText": "ReductionInitKernel(const CoeffType val, Index num_preserved_coeffs, CoeffType* output)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Index thread_id = blockIdx . x* blockDim . x + threadIdx . x ; const Index num_threads = blockDim . x* gridDim . x ;)",
    "insertText": "for(Index i = thread_id; i < num_preserved_coeffs; i += num_threads)"
  },
  {
    "label": "FullReductionKernel()",
    "kind": "Method",
    "detail": "Function (output [ i ] = val ; } } template<int BlockSize,int NumPerThread,Self,Reducer,Index> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void)",
    "insertText": "FullReductionKernel(Reducer reducer, const Self input, Index num_coeffs, typename Self::CoeffReturnType* output, unsigned int* semaphore)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(defined(EIGEN_HIP_DEVICE_COMPILE) && defined(__HIP_ARCH_HAS_WARP_SHUFFLE__)) || (EIGEN_CUDA_ARCH >= 300)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (* output = reducer .)",
    "insertText": "initialize()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(threadIdx.x == 0)"
  },
  {
    "label": "atomicCAS()",
    "kind": "Method",
    "detail": "Function (unsigned int block =)",
    "insertText": "atomicCAS(semaphore, 0u, 1u)"
  },
  {
    "label": "atomicExchCustom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "atomicExchCustom(output, reducer.initialize())"
  },
  {
    "label": "__threadfence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__threadfence()"
  },
  {
    "label": "atomicExch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "atomicExch(semaphore, 2u)"
  },
  {
    "label": "atomicCAS()",
    "kind": "Method",
    "detail": "Function (} else { unsigned int val ; do { val =)",
    "insertText": "atomicCAS(semaphore, 2u, 2u)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(val < 2u)"
  },
  {
    "label": "__syncthreads()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "__syncthreads()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(gridDim.x == 1 || *semaphore >= 2u)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index max_iter = numext::mini<)",
    "insertText": "Index(num_coeffs - first_index, NumPerThread*BlockSize)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (const Index index = first_index + i ;)",
    "insertText": "eigen_assert(index < num_coeffs)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Self::CoeffReturnType val = input . m_impl .)",
    "insertText": "coeff(index)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reduce(val, &accum)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} # pragma unroll)",
    "insertText": "for(int offset = warpSize/2; offset > 0; offset /= 2)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_HIPCC) if (std::is_floating_point<typename Self::CoeffReturnType>::value)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reduce(__shfl_down(static_cast<float>(accum), offset, warpSize), &accum)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (} else { reducer .)",
    "insertText": "reduce(__shfl_down(static_cast<int>(accum), offset, warpSize), &accum)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "defined(EIGEN_CUDA_SDK_VER) && EIGEN_CUDA_SDK_VER < 90000 reducer.reduce(__shfl_down(accum, offset, warpSize), &accum)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (# else reducer .)",
    "insertText": "reduce(__shfl_down_sync(0xFFFFFFFF, accum, offset, warpSize), &accum)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "if((threadIdx.x & (warpSize - 1)) == 0)"
  },
  {
    "label": "atomicReduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "atomicReduce(output, accum, reducer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(gridDim.x > 1 && threadIdx.x == 0)"
  },
  {
    "label": "atomicInc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "atomicInc(semaphore, gridDim.x + 1)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_HIPCC) __threadfence_system()"
  },
  {
    "label": "ReductionInitFullReduxKernelHalfFloat()",
    "kind": "Method",
    "detail": "Function (# endif } # ifdef EIGEN_HAS_GPU_FP16 template<Self,Reducer,Index> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void)",
    "insertText": "ReductionInitFullReduxKernelHalfFloat(Reducer reducer, const Self input, Index num_coeffs, packet_traits<Eigen::half>::type* scratch)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(blockDim.x == 1)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(gridDim.x == 1)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (typedef packet_traits<Eigen::half>::type packet_type ; Index packet_remainder = num_coeffs %)",
    "insertText": "Index(unpacket_traits<packet_type>::size)"
  },
  {
    "label": "half2()",
    "kind": "Method",
    "detail": "Function (half2* h2scratch = reinterpret_cast<)",
    "insertText": "half2(scratch)"
  },
  {
    "label": "__halves2half2()",
    "kind": "Method",
    "detail": "Function (* h2scratch =)",
    "insertText": "__halves2half2(input.m_impl.coeff(i), input.m_impl.coeff(i + 1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (h2scratch + + ; })",
    "insertText": "if((num_coeffs & 1) != 0)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (half lastCoeff = input . m_impl .)",
    "insertText": "coeff(num_coeffs - 1)"
  },
  {
    "label": "__halves2half2()",
    "kind": "Method",
    "detail": "Function (* h2scratch =)",
    "insertText": "__halves2half2(lastCoeff, reducer.initialize())"
  },
  {
    "label": "packet_type()",
    "kind": "Method",
    "detail": "Function (} } else {* scratch = reducer . template initializePacket<)",
    "insertText": "packet_type()"
  },
  {
    "label": "ReductionInitKernelHalfFloat()",
    "kind": "Method",
    "detail": "Function (} } template<Self,Reducer,Index> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void)",
    "insertText": "ReductionInitKernelHalfFloat(Reducer reducer, const Self input, Index num_coeffs, half* output)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const Index thread_id = blockIdx . x* blockDim . x + threadIdx . x ; const Index num_threads = blockDim . x* gridDim . x ; typedef packet_traits<Eigen::half>::type PacketType ; const Index num_packets = num_coeffs /)",
    "insertText": "Index(unpacket_traits<PacketType>::size)"
  },
  {
    "label": "PacketType()",
    "kind": "Method",
    "detail": "Function (PacketType* p_output = reinterpret_cast<)",
    "insertText": "PacketType(output)"
  },
  {
    "label": "PacketType()",
    "kind": "Method",
    "detail": "Function (p_output [ i ] = reducer . template initializePacket<)",
    "insertText": "PacketType()"
  },
  {
    "label": "FullReductionKernelHalfFloat()",
    "kind": "Method",
    "detail": "Function (} } template<int BlockSize,int NumPerThread,Self,Reducer,Index> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void)",
    "insertText": "FullReductionKernelHalfFloat(Reducer reducer, const Self input, Index num_coeffs, half* output, packet_traits<Eigen::half>::type* scratch)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (typedef packet_traits<Eigen::half>::type PacketType ; const int packet_width = unpacket_traits<PacketType>::size ;)",
    "insertText": "eigen_assert(NumPerThread % packet_width == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index first_index = blockIdx . x* BlockSize* NumPerThread + packet_width* threadIdx . x ;)",
    "insertText": "if(gridDim.x == 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int rem = num_coeffs % packet_width ;)",
    "insertText": "if(rem != 0)"
  },
  {
    "label": "__halves2half2()",
    "kind": "Method",
    "detail": "Function (* p_scratch =)",
    "insertText": "__halves2half2(input.m_impl.coeff(num_coeffs - packet_width + 2 * i), input.m_impl.coeff(num_coeffs - packet_width + 2 * i + 1))"
  },
  {
    "label": "__halves2half2()",
    "kind": "Method",
    "detail": "Function (* p_scratch =)",
    "insertText": "__halves2half2(last, reducer.initialize())"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const Index max_iter = numext::mini<)",
    "insertText": "Index((num_coeffs - first_index) / packet_width, NumPerThread * BlockSize / packet_width)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (const Index index = first_index + packet_width* i ;)",
    "insertText": "eigen_assert(index + packet_width < num_coeffs)"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (PacketType val = input . m_impl . template packet<)",
    "insertText": "Unaligned(index)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reducePacket(val, &accum)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_HIPCC)"
  },
  {
    "label": "half2()",
    "kind": "Method",
    "detail": "Function (half2* hr = reinterpret_cast<)",
    "insertText": "half2(&r1)"
  },
  {
    "label": "__shfl_down()",
    "kind": "Method",
    "detail": "Function (union { int i ; half2 h ; } wka_in,wka_out ; wka_in . h = hacc [ i ] ; wka_out . i =)",
    "insertText": "__shfl_down(wka_in.i, offset, warpSize)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (hr [ i ] = wka_out . h ; } reducer .)",
    "insertText": "reducePacket(r1, &accum)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(EIGEN_CUDA_SDK_VER)"
  },
  {
    "label": "__shfl_down()",
    "kind": "Method",
    "detail": "Function (hr [ i ] =)",
    "insertText": "__shfl_down(hacc[i], offset, warpSize)"
  },
  {
    "label": "__shfl_down_sync()",
    "kind": "Method",
    "detail": "Function (hr [ i ] =)",
    "insertText": "__shfl_down_sync(0xFFFFFFFF, hacc[i], (unsigned)offset, warpSize)"
  },
  {
    "label": "atomicReduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "atomicReduce(scratch, accum, reducer)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reducePacket(rv1[2], rv1)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reducePacket(rv1[3], rv1 + 1)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reducePacket(rv1[1], rv1)"
  },
  {
    "label": "__low2half()",
    "kind": "Method",
    "detail": "Function (half tmp =)",
    "insertText": "__low2half(*rv1)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reduce(__high2half(*rv1), &tmp)"
  },
  {
    "label": "ReductionCleanupKernelHalfFloat()",
    "kind": "Method",
    "detail": "Function (* output = tmp ; } } } template<Op> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void)",
    "insertText": "ReductionCleanupKernelHalfFloat(Op reducer, half* output, packet_traits<Eigen::half>::type* scratch)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(threadIdx.x == 1)"
  },
  {
    "label": "__float2half()",
    "kind": "Method",
    "detail": "Function (half tmp =)",
    "insertText": "__float2half(0.f)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (typedef packet_traits<Eigen::half>::type packet_type ;)",
    "insertText": "for(int i = 0; i < unpacket_traits<packet_type>::size; i += 2)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reduce(__low2half(*pscratch), &tmp)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reduce(__high2half(*pscratch), &tmp)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (pscratch + + ; }* output = tmp ; } # endif template<Self,Op,OutputType,bool PacketAccess,Enabled = void> struct FullReductionLauncher { void)",
    "insertText": "run(const Self&, Op&, const GpuDevice&, OutputType*, typename Self::Index)"
  },
  {
    "label": "gpu_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gpu_assert(false && \"Should only be called on doubles, floats and half floats\")"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Self,Op,OutputType,bool PacketAccess> struct FullReductionLauncher<Self,Op,OutputType,PacketAccess,internal::enable_if<internal::is_same<float,OutputType>::value | | internal::is_same<double,OutputType>::value,void>::type> { void)",
    "insertText": "run(const Self& self, Op& reducer, const GpuDevice& device, OutputType* output, typename Self::Index num_coeffs)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef Self::Index Index ; const int block_size = 2 5 6 ; const int num_per_thread = 1 2 8 ; const int num_blocks = divup<)",
    "insertText": "int(num_coeffs, block_size * num_per_thread)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned int* semaphore = NULL ;)",
    "insertText": "if(num_blocks > 1)"
  },
  {
    "label": "semaphore()",
    "kind": "Method",
    "detail": "Function (semaphore = device .)",
    "insertText": "semaphore()"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LAUNCH_GPU_KERNEL((FullReductionKernel<block_size, num_per_thread, Self, Op, Index>), num_blocks, block_size, 0, device, reducer, self, num_coeffs, output, semaphore)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; # ifdef EIGEN_HAS_GPU_FP16 template<Self,Op> struct FullReductionLauncher<Self,Op,Eigen::half,false> { void)",
    "insertText": "run(const Self&, Op&, const GpuDevice&, half*, typename Self::Index)"
  },
  {
    "label": "gpu_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gpu_assert(false && \"Should not be called since there is no packet accessor\")"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Self,Op> struct FullReductionLauncher<Self,Op,Eigen::half,true> { void)",
    "insertText": "run(const Self& self, Op& reducer, const GpuDevice& device, half* output, typename Self::Index num_coeffs)"
  },
  {
    "label": "PacketType()",
    "kind": "Method",
    "detail": "Function (PacketType* scratch = static_cast<)",
    "insertText": "PacketType(device.scratchpad())"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAUNCH_GPU_KERNEL((ReductionInitFullReduxKernelHalfFloat<Self, Op, Index>), 1, 1, 0, device, reducer, self, num_coeffs, scratch)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LAUNCH_GPU_KERNEL((FullReductionKernelHalfFloat<block_size, num_per_thread, Self, Op, Index>), num_blocks, block_size, 0, device, reducer, self, num_coeffs, output, scratch)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAUNCH_GPU_KERNEL((ReductionCleanupKernelHalfFloat<Op>), 1, 1, 0, device, reducer, output, scratch)"
  },
  {
    "label": "IsStateful()",
    "kind": "Method",
    "detail": "Function (} } } ; # endif template<Self,Op,bool Vectorizable> struct FullReducer<Self,Op,GpuDevice,Vectorizable> { # ifdef EIGEN_HAS_GPU_FP16 const bool HasOptimizedImplementation = ! Self::)",
    "insertText": "IsStateful(internal::is_same<typename Self::CoeffReturnType, float>::value || internal::is_same<typename Self::CoeffReturnType, double>::value || (internal::is_same<typename Self::CoeffReturnType, Eigen::half>::value && reducer_traits<Op, GpuDevice>::PacketAccess))"
  },
  {
    "label": "IsStateful()",
    "kind": "Method",
    "detail": "Function (# else const bool HasOptimizedImplementation = ! Self::)",
    "insertText": "IsStateful(internal::is_same<typename Self::CoeffReturnType, float>::value || internal::is_same<typename Self::CoeffReturnType, double>::value)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# endif template<OutputType> void)",
    "insertText": "run(const Self& self, Op& reducer, const GpuDevice& device, OutputType* output)"
  },
  {
    "label": "gpu_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gpu_assert(HasOptimizedImplementation && \"Should only be called on doubles, floats or half floats\")"
  },
  {
    "label": "array_prod()",
    "kind": "Method",
    "detail": "Function (const Index num_coeffs =)",
    "insertText": "array_prod(self.m_impl.dimensions())"
  },
  {
    "label": "InnerReductionKernel()",
    "kind": "Method",
    "detail": "Function (} } ; template<int NumPerThread,Self,Reducer,Index> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void)",
    "insertText": "InnerReductionKernel(Reducer reducer, const Self input, Index num_coeffs_to_reduce, Index num_preserved_coeffs, typename Self::CoeffReturnType* output)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(blockDim.y == 1)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(blockDim.z == 1)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(gridDim.y == 1)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(gridDim.z == 1)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (const int unroll_times = 1 6 ;)",
    "insertText": "eigen_assert(NumPerThread % unroll_times == 0)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const Index input_col_blocks = divup<)",
    "insertText": "Index(num_coeffs_to_reduce, blockDim.x * NumPerThread)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index i = blockIdx.x; i < num_input_blocks; i += gridDim.x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index row = i / input_col_blocks ;)",
    "insertText": "if(row < num_preserved_coeffs)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (const Index last_col = col_begin + blockDim .)",
    "insertText": "x(j + unroll_times - 1)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (const Type val = input . m_impl .)",
    "insertText": "coeff(row * num_coeffs_to_reduce + col)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reduce(val, &reduced_val)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} break ; } else { # pragma unroll)",
    "insertText": "for(int k = 0; k < unroll_times; ++k)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (const Index col = col_begin + blockDim .)",
    "insertText": "x(j + k)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reduce(input.m_impl.coeff(row * num_coeffs_to_reduce + col), &reduced_val)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_HIPCC) if (std::is_floating_point<Type>::value)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reduce(__shfl_down(static_cast<float>(reduced_val), offset), &reduced_val)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (} else { reducer .)",
    "insertText": "reduce(__shfl_down(static_cast<int>(reduced_val), offset), &reduced_val)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "defined(EIGEN_CUDA_SDK_VER) && EIGEN_CUDA_SDK_VER < 90000 reducer.reduce(__shfl_down(reduced_val, offset), &reduced_val)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (# else reducer .)",
    "insertText": "reduce(__shfl_down_sync(0xFFFFFFFF, reduced_val, offset), &reduced_val)"
  },
  {
    "label": "atomicReduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "atomicReduce(&(output[row]), reduced_val, reducer)"
  },
  {
    "label": "InnerReductionKernelHalfFloat()",
    "kind": "Method",
    "detail": "Function (# endif } # ifdef EIGEN_HAS_GPU_FP16 template<int NumPerThread,Self,Reducer,Index> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void)",
    "insertText": "InnerReductionKernelHalfFloat(Reducer reducer, const Self input, Index num_coeffs_to_reduce, Index num_preserved_coeffs, half* output)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(unroll_times % 2 == 0)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const Index input_col_blocks = divup<)",
    "insertText": "Index(num_coeffs_to_reduce, blockDim.x * NumPerThread * 2)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const Index num_input_blocks = divup<)",
    "insertText": "Index(input_col_blocks * num_preserved_coeffs, 2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index i = packet_width* thread_id ;)",
    "insertText": "for(; i + packet_width <= num_preserved_coeffs; i += packet_width * num_threads)"
  },
  {
    "label": "PacketType()",
    "kind": "Method",
    "detail": "Function (PacketType* poutput = reinterpret_cast<)",
    "insertText": "PacketType(output + i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(i < num_preserved_coeffs)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "row(i / input_col_blocks)"
  },
  {
    "label": "packet_width()",
    "kind": "Method",
    "detail": "Function (const Index col_block = i % input_col_blocks ; const Index col_begin =)",
    "insertText": "packet_width(col_block * blockDim.x * NumPerThread + threadIdx.x)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index col = col_begin + blockDim . x* j ;)",
    "insertText": "for(; col + packet_width <= num_coeffs_to_reduce; col += blockDim.x)"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (const PacketType val1 = input . m_impl . template packet<)",
    "insertText": "Unaligned(row * num_coeffs_to_reduce + col)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reducePacket(val1, &reduced_val1)"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (const PacketType val2 = input . m_impl . template packet<)",
    "insertText": "Unaligned((row + 1) * num_coeffs_to_reduce + col)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reducePacket(val2, &reduced_val2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(col < num_coeffs_to_reduce)"
  },
  {
    "label": "half2()",
    "kind": "Method",
    "detail": "Function (half2* hr2 = reinterpret_cast<)",
    "insertText": "half2(&r2)"
  },
  {
    "label": "__halves2half2()",
    "kind": "Method",
    "detail": "Function (* hr1 =)",
    "insertText": "__halves2half2(input.m_impl.coeff(row * num_coeffs_to_reduce + col), input.m_impl.coeff(row * num_coeffs_to_reduce + col + 1))"
  },
  {
    "label": "__halves2half2()",
    "kind": "Method",
    "detail": "Function (* hr2 =)",
    "insertText": "__halves2half2(input.m_impl.coeff((row + 1) * num_coeffs_to_reduce + col), input.m_impl.coeff((row + 1) * num_coeffs_to_reduce + col + 1))"
  },
  {
    "label": "__halves2half2()",
    "kind": "Method",
    "detail": "Function (* hr1 =)",
    "insertText": "__halves2half2(last1, reducer.initialize())"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (const half last2 = input . m_impl .)",
    "insertText": "coeff((row + 1) * num_coeffs_to_reduce + col)"
  },
  {
    "label": "__halves2half2()",
    "kind": "Method",
    "detail": "Function (* hr2 =)",
    "insertText": "__halves2half2(last2, reducer.initialize())"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (} reducer .)",
    "insertText": "reducePacket(r1, &reduced_val1)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reducePacket(r2, &reduced_val2)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reducePacket(input.m_impl.template packet<Unaligned>( row * num_coeffs_to_reduce + col), &reduced_val1)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reducePacket(input.m_impl.template packet<Unaligned>( (row + 1) * num_coeffs_to_reduce + col), &reduced_val2)"
  },
  {
    "label": "half2()",
    "kind": "Method",
    "detail": "Function (half2* rv1 = reinterpret_cast<)",
    "insertText": "half2(&reduced_val1)"
  },
  {
    "label": "half2()",
    "kind": "Method",
    "detail": "Function (half2* rv2 = reinterpret_cast<)",
    "insertText": "half2(&reduced_val2)"
  },
  {
    "label": "__shfl_down()",
    "kind": "Method",
    "detail": "Function (union { int i ; half2 h ; } wka_in1,wka_out1 ; wka_in1 . h = rv1 [ i ] ; wka_out1 . i =)",
    "insertText": "__shfl_down(wka_in1.i, offset, warpSize)"
  },
  {
    "label": "__shfl_down()",
    "kind": "Method",
    "detail": "Function (hr1 [ i ] = wka_out1 . h ; union { int i ; half2 h ; } wka_in2,wka_out2 ; wka_in2 . h = rv2 [ i ] ; wka_out2 . i =)",
    "insertText": "__shfl_down(wka_in2.i, offset, warpSize)"
  },
  {
    "label": "__shfl_down()",
    "kind": "Method",
    "detail": "Function (hr1 [ i ] =)",
    "insertText": "__shfl_down(rv1[i], offset, warpSize)"
  },
  {
    "label": "__shfl_down()",
    "kind": "Method",
    "detail": "Function (hr2 [ i ] =)",
    "insertText": "__shfl_down(rv2[i], offset, warpSize)"
  },
  {
    "label": "__shfl_down_sync()",
    "kind": "Method",
    "detail": "Function (hr1 [ i ] =)",
    "insertText": "__shfl_down_sync(0xFFFFFFFF, rr1[i], (unsigned)offset, warpSize)"
  },
  {
    "label": "__shfl_down_sync()",
    "kind": "Method",
    "detail": "Function (hr2 [ i ] =)",
    "insertText": "__shfl_down_sync(0xFFFFFFFF, rr2[i], (unsigned)offset, warpSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (half2 val ;)",
    "insertText": "if(packet_width > 2)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reducePacket(rv2[2], rv2)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reducePacket(rv2[3], rv2 + 1)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reducePacket(rv2[1], rv2)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reduce(__high2half(*rv1), &val1)"
  },
  {
    "label": "__low2half()",
    "kind": "Method",
    "detail": "Function (half val2 =)",
    "insertText": "__low2half(*rv2)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reduce(__high2half(*rv2), &val2)"
  },
  {
    "label": "__halves2half2()",
    "kind": "Method",
    "detail": "Function (val =)",
    "insertText": "__halves2half2(val1, val2)"
  },
  {
    "label": "atomicReduce()",
    "kind": "Method",
    "detail": "Function (half* loc = output + row ;)",
    "insertText": "atomicReduce((half2*)loc, val, reducer)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } } } # endif template<Self,Op,OutputType,bool PacketAccess,Enabled = void> struct InnerReductionLauncher { EIGEN_DEVICE_FUNC bool)",
    "insertText": "run(const Self&, Op&, const GpuDevice&, OutputType*, typename Self::Index, typename Self::Index)"
  },
  {
    "label": "gpu_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gpu_assert(false && \"Should only be called to reduce doubles, floats and half floats on a gpu device\")"
  },
  {
    "label": "getNumGpuMultiProcessors()",
    "kind": "Method",
    "detail": "Function (const int max_blocks = device .)",
    "insertText": "getNumGpuMultiProcessors() * device.maxGpuThreadsPerMultiProcessor()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int num_blocks = numext::mini<)",
    "insertText": "int(max_blocks, dyn_blocks)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int dyn_blocks = divup<)",
    "insertText": "int(num_preserved_vals, 1024)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAUNCH_GPU_KERNEL((ReductionInitKernel<OutputType, Index>), num_blocks, 1024, 0, device, reducer.initialize(), num_preserved_vals, output)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LAUNCH_GPU_KERNEL((InnerReductionKernel<num_per_thread, Self, Op, Index>), num_blocks, block_size, 0, device, reducer, self, num_coeffs_to_reduce, num_preserved_vals, output)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef Self::Index Index ;)",
    "insertText": "if(num_preserved_vals % 2 != 0)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAUNCH_GPU_KERNEL((ReductionInitKernelHalfFloat<Self, Op, Index>), 1, 1, 0, device, reducer, self, num_preserved_vals, output)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LAUNCH_GPU_KERNEL((InnerReductionKernelHalfFloat<num_per_thread, Self, Op, Index>), num_blocks, block_size, 0, device, reducer, self, num_coeffs_to_reduce, num_preserved_vals, output)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# endif template<OutputType> bool)",
    "insertText": "run(const Self& self, Op& reducer, const GpuDevice& device, OutputType* output, typename Self::Index num_coeffs_to_reduce, typename Self::Index num_preserved_vals)"
  },
  {
    "label": "OuterReductionKernel()",
    "kind": "Method",
    "detail": "Function (} } ; template<int NumPerThread,Self,Reducer,Index> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void)",
    "insertText": "OuterReductionKernel(Reducer reducer, const Self input, Index num_coeffs_to_reduce, Index num_preserved_coeffs, typename Self::CoeffReturnType* output)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (} const Index max_iter = num_preserved_coeffs* divup<)",
    "insertText": "Index(num_coeffs_to_reduce, NumPerThread)"
  },
  {
    "label": "input_row()",
    "kind": "Method",
    "detail": "Function (const Index input_col = i % num_preserved_coeffs ; const Index)",
    "insertText": "input_row(i / num_preserved_coeffs)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (const Index max_row =)",
    "insertText": "mini(input_row + NumPerThread, num_coeffs_to_reduce)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Self::CoeffReturnType val = input . m_impl .)",
    "insertText": "coeff(j * num_preserved_coeffs + input_col)"
  },
  {
    "label": "atomicReduce()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "atomicReduce(&(output[input_col]), reduced_val, reducer)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (template<Device,OutputType> # if !)",
    "insertText": "defined(EIGEN_HIPCC) EIGEN_DEVICE_FUNC #endif bool run(const Self&, Op&, const Device&, OutputType*, typename Self::Index, typename Self::Index)"
  },
  {
    "label": "gpu_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gpu_assert(false && \"Should only be called to reduce doubles or floats on a gpu device\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef Self::Index Index ;)",
    "insertText": "if(num_coeffs_to_reduce <= 32)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAUNCH_GPU_KERNEL((ReductionInitKernel<float, Index>), num_blocks, 1024, 0, device, reducer.initialize(), num_preserved_vals, output)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LAUNCH_GPU_KERNEL((OuterReductionKernel<num_per_thread, Self, Op, Index>), num_blocks, block_size, 0, device, reducer, self, num_coeffs_to_reduce, num_preserved_vals, output)"
  }
]