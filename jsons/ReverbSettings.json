[
  {
    "label": "UReverbEffect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReverbEffect"
  },
  {
    "label": "USoundEffectSubmixPreset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundEffectSubmixPreset"
  },
  {
    "label": "ReverbPreset",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ReverbPreset"
  },
  {
    "label": "FReverbSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReverbSettings"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ReverbSettings . generated . h \" class UReverbEffect ; class USoundEffectSubmixPreset ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (REVERB_Default,REVERB_Bathroom,REVERB_StoneRoom,REVERB_Auditorium,REVERB_ConcertHall,REVERB_Cave,REVERB_Hallway,REVERB_StoneCorridor,REVERB_Alley,REVERB_Forest,REVERB_City,REVERB_Mountains,REVERB_Quarry,REVERB_Plain,REVERB_ParkingLot,REVERB_SewerPipe,REVERB_Underwater,REVERB_SmallRoom,REVERB_MediumRoom,REVERB_LargeRoom,REVERB_MediumHall,REVERB_LargeHall,REVERB_Plate,REVERB_MAX,} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=ReverbSettings)"
  },
  {
    "label": "FReverbSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FReverbSettings() : bApplyReverb(true) #if WITH_EDITORONLY_DATA , ReverbType_DEPRECATED(REVERB_Default) #endif , ReverbEffect(nullptr) , ReverbPluginEffect(nullptr) , Volume(0.5f) , FadeTime(2.0f)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FReverbSettings& Other)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  }
]