[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "ISelectionElementBridge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISelectionElementBridge"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "FTypedElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementHandle"
  },
  {
    "label": "USelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USelection"
  },
  {
    "label": "TSelectionIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSelectionIterator"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "must",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "must"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FGenericSelectionFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericSelectionFilter"
  },
  {
    "label": "TSelectionIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSelectionIterator"
  },
  {
    "label": "FSelectionIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectionIterator"
  },
  {
    "label": "FSelectedEditableComponentFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectedEditableComponentFilter"
  },
  {
    "label": "FSelectedEditableComponentIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectedEditableComponentIterator"
  },
  {
    "label": "FDeselectedActorsEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeselectedActorsEvent"
  },
  {
    "label": "SetElementSelectionSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetElementSelectionSet(UTypedElementSelectionSet* InElementSelectionSet)"
  },
  {
    "label": "BeginBatchSelectOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginBatchSelectOperation()"
  },
  {
    "label": "EndBatchSelectOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndBatchSelectOperation(bool bNotify = true)"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Select(UObject* InObject)"
  },
  {
    "label": "Deselect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deselect(UObject* InObject)"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Select(UObject* InObject, bool bSelect)"
  },
  {
    "label": "ToggleSelect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSelect(UObject* InObject)"
  },
  {
    "label": "DeselectAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectAll( UClass* InClass = NULL )"
  },
  {
    "label": "ForceBatchDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceBatchDirty()"
  },
  {
    "label": "NoteSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteSelectionChanged()"
  },
  {
    "label": "NoteUnknownSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteUnknownSelectionChanged()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(TSharedRef<ISelectionElementBridge>&& InSelectionElementBridge)"
  },
  {
    "label": "OnElementListSyncEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnElementListSyncEvent(const FTypedElementList& InElementList, FTypedElementList::FLegacySync::ESyncType InSyncType, const FTypedElementHandle& InElementHandle, bool bIsWithinBatchOperation)"
  },
  {
    "label": "GetCurrentObject()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetCurrentObject()"
  },
  {
    "label": "GetCurrentObject()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetCurrentObject()"
  },
  {
    "label": "IsIndexValid()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsIndexValid()"
  }
]