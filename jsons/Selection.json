[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "ISelectionElementBridge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISelectionElementBridge"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "FTypedElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementHandle"
  },
  {
    "label": "USelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USelection"
  },
  {
    "label": "TSelectionIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSelectionIterator"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FGenericSelectionFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericSelectionFilter"
  },
  {
    "label": "FSelectionIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectionIterator"
  },
  {
    "label": "FSelectedEditableComponentFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectedEditableComponentFilter"
  },
  {
    "label": "FSelectedEditableComponentIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectedEditableComponentIterator"
  },
  {
    "label": "FDeselectedActorsEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeselectedActorsEvent"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Components / ActorComponent . h \" # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Elements / Framework / TypedElementList . h \" # include \" Elements / Framework / TypedElementListFwd . h \" # include \" Elements / Framework / TypedElementSelectionSet . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PlatformMath . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / Casts . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / Class . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / Package . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / UnrealNames . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Selection . generated . h \" class FArchive ; class ISelectionElementBridge ; class UTypedElementSelectionSet ; struct FTypedElementHandle ;)",
    "insertText": "UCLASS(transient, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "CreateObjectSelection()",
    "kind": "Method",
    "detail": "Function (public : USelection*)",
    "insertText": "CreateObjectSelection(UObject* InOuter = GetTransientPackage(), FName InName = NAME_None, EObjectFlags InFlags = RF_NoFlags)"
  },
  {
    "label": "CreateActorSelection()",
    "kind": "Method",
    "detail": "Function (USelection*)",
    "insertText": "CreateActorSelection(UObject* InOuter = GetTransientPackage(), FName InName = NAME_None, EObjectFlags InFlags = RF_NoFlags)"
  },
  {
    "label": "CreateComponentSelection()",
    "kind": "Method",
    "detail": "Function (USelection*)",
    "insertText": "CreateComponentSelection(UObject* InOuter = GetTransientPackage(), FName InName = NAME_None, EObjectFlags InFlags = RF_NoFlags)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(USelection, FOnSelectionChanged, UObject*)"
  },
  {
    "label": "DECLARE_EVENT_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_ThreeParams(USelection, FOnSelectionElementSelectionPtrChanged, USelection* , UTypedElementSelectionSet* , UTypedElementSelectionSet*)"
  },
  {
    "label": "SetElementSelectionSet()",
    "kind": "Method",
    "detail": "Function (FOnSelectionChanged SelectionChangedEvent ; FOnSelectionChanged SelectObjectEvent ; FSimpleMulticastDelegate SelectNoneEvent ; FOnSelectionElementSelectionPtrChanged SelectionElementSelectionPtrChanged ; void)",
    "insertText": "SetElementSelectionSet(UTypedElementSelectionSet* InElementSelectionSet)"
  },
  {
    "label": "GetElementSelectionSet()",
    "kind": "Method",
    "detail": "Function (UTypedElementSelectionSet*)",
    "insertText": "GetElementSelectionSet()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetSelectedObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetSelectedObject(const int32 InIndex)"
  },
  {
    "label": "BeginBatchSelectOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginBatchSelectOperation()"
  },
  {
    "label": "EndBatchSelectOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndBatchSelectOperation(bool bNotify = true)"
  },
  {
    "label": "IsBatchSelecting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBatchSelecting()"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Select(UObject* InObject)"
  },
  {
    "label": "Deselect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deselect(UObject* InObject)"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Select(UObject* InObject, bool bSelect)"
  },
  {
    "label": "ToggleSelect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSelect(UObject* InObject)"
  },
  {
    "label": "DeselectAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectAll(UClass* InClass = NULL)"
  },
  {
    "label": "ForceBatchDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceBatchDirty()"
  },
  {
    "label": "NoteSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteSelectionChanged()"
  },
  {
    "label": "NoteUnknownSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteUnknownSelectionChanged()"
  },
  {
    "label": "GetTop()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetTop(const UClass* InClass, const UClass* RequiredInterface=nullptr, bool bArchetypesOnly=false)"
  },
  {
    "label": "GetSelectedObject()",
    "kind": "Method",
    "detail": "Function (UObject* SelectedObject =)",
    "insertText": "GetSelectedObject(i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(InClass->HasAnyClassFlags(CLASS_Interface))"
  },
  {
    "label": "GetTop()",
    "kind": "Method",
    "detail": "Function (UObject* Selected =)",
    "insertText": "GetTop(T::StaticClass())"
  },
  {
    "label": "GetBottom()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "GetBottom()"
  },
  {
    "label": "GetBottom()",
    "kind": "Method",
    "detail": "Function (UObject* Selected =)",
    "insertText": "GetBottom(T::StaticClass())"
  },
  {
    "label": "IsSelected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSelected(const UObject* InObject)"
  },
  {
    "label": "CountSelections()",
    "kind": "Method",
    "detail": "Function (template<class T> int32)",
    "insertText": "CountSelections(bool bIgnorePendingKill=false)"
  },
  {
    "label": "CountSelections()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CountSelections(UClass *ClassToCount, bool bIgnorePendingKill=false)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Count = 0 ;)",
    "insertText": "for(int32 i=0; i<Num(); ++i)"
  },
  {
    "label": "IsClassSelected()",
    "kind": "Method",
    "detail": "Function (+ + Count ; } } return Count ; } bool)",
    "insertText": "IsClassSelected(UClass* Class)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Modify(bool bAlwaysMarkDirty=true)"
  },
  {
    "label": "GetSelectedObjects()",
    "kind": "Method",
    "detail": "Function (template<class T> int32)",
    "insertText": "GetSelectedObjects(TArray<T*> &OutSelectedObjects)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutSelectedObjects .)",
    "insertText": "Empty(Num())"
  },
  {
    "label": "GetSelectedObject()",
    "kind": "Method",
    "detail": "Function (UObject* SelectedObject =)",
    "insertText": "GetSelectedObject(Idx)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutSelectedObjects .)",
    "insertText": "Add((T*)SelectedObject)"
  },
  {
    "label": "GetSelectedObjects()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSelectedObjects(TArray<TWeakObjectPtr<UObject>>& OutSelectedObjects)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutSelectedObjects .)",
    "insertText": "Add(SelectedObject)"
  },
  {
    "label": "GetSelectedObjects()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSelectedObjects(UClass *FilterClass, TArray<UObject*> &OutSelectedObjects)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Initialize(TSharedRef<ISelectionElementBridge>&& InSelectionElementBridge)"
  },
  {
    "label": "IsValidObjectToSelect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidObjectToSelect(const UObject* InObject)"
  },
  {
    "label": "GetObjectForElementHandle()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetObjectForElementHandle(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "OnElementListSyncEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnElementListSyncEvent(const FTypedElementList& InElementList, FTypedElementList::FLegacySync::ESyncType InSyncType, const FTypedElementHandle& InElementHandle, bool bIsWithinBatchOperation)"
  },
  {
    "label": "IsSelected()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsSelected()"
  },
  {
    "label": "IsObjectValid()",
    "kind": "Method",
    "detail": "Function (} } ; class FGenericSelectionFilter { public : bool)",
    "insertText": "IsObjectValid(const UObject* InObject)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + Index ;)",
    "insertText": "if(!IsIndexValid())"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Index(*this)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetIndex()"
  },
  {
    "label": "IsObjectValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsObjectValid()"
  },
  {
    "label": "IsIndexValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIndexValid()"
  },
  {
    "label": "FSelectionIterator()",
    "kind": "Method",
    "detail": "Function (} USelection& Selection ; SelectionFilter Filter ; int32 Index ; } ; class FSelectionIterator : public TSelectionIterator<FGenericSelectionFilter> { public :)",
    "insertText": "FSelectionIterator(USelection& InSelection) : TSelectionIterator<FGenericSelectionFilter>( InSelection)"
  },
  {
    "label": "IsObjectValid()",
    "kind": "Method",
    "detail": "Function (} } ; class FSelectedEditableComponentFilter { public : bool)",
    "insertText": "IsObjectValid(const UObject* Object)"
  },
  {
    "label": "FSelectedEditableComponentIterator()",
    "kind": "Method",
    "detail": "Function (} return false ; } } ; class FSelectedEditableComponentIterator : public TSelectionIterator<FSelectedEditableComponentFilter> { public :)",
    "insertText": "FSelectedEditableComponentIterator(USelection& InSelection) : TSelectionIterator<FSelectedEditableComponentFilter>(InSelection)"
  },
  {
    "label": "FDeselectedActorsEvent()",
    "kind": "Method",
    "detail": "Function (} } ; class FDeselectedActorsEvent { public :)",
    "insertText": "FDeselectedActorsEvent(const TArray<AActor*>& InDeselectedActors) : DeselectedActors(InDeselectedActors)"
  },
  {
    "label": "FDeselectedActorsEvent()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDeselectedActorsEvent()"
  }
]