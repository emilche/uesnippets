[
  {
    "label": "FIntegerDelay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIntegerDelay"
  },
  {
    "label": "FIntegerDelay()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Dsp . h \" # include \" DSP / AlignedBlockBuffer . h \" # include \" DSP / BufferVectorOperations . h \" namespace Audio { class FIntegerDelay { public :)",
    "insertText": "FIntegerDelay(int32 InMaxNumDelaySamples, int32 InNumDelaySamples, int32 InNumInternalBufferSamples = 256)"
  },
  {
    "label": "FIntegerDelay()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FIntegerDelay()"
  },
  {
    "label": "SetDelayLengthSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDelayLengthSamples(int32 InNumDelaySamples)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetNumDelaySamples()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumDelaySamples()"
  },
  {
    "label": "AddSamples()",
    "kind": "Method",
    "detail": "Function (DelayLine ->)",
    "insertText": "AddSamples(&InSample, 1)"
  },
  {
    "label": "DelayedSample()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "DelayedSample(DelayLine->InspectSamples(1 + NumBufferOffsetSamples, NumDelayLineOffsetSamples))"
  },
  {
    "label": "RemoveSamples()",
    "kind": "Method",
    "detail": "Function (DelayLine ->)",
    "insertText": "RemoveSamples(1)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(TArrayView<const float> InSamples, TArrayView<float> OutSamples)"
  },
  {
    "label": "PeekDelayLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeekDelayLine(int32 InNum, Audio::FAlignedFloatBuffer& OutSamples)"
  },
  {
    "label": "ProcessAudioBlock()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ProcessAudioBlock(const float* InSamples, const int32 InNum, float* OutSamples)"
  }
]