[
  {
    "label": "FSandboxPlatformFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSandboxPlatformFile"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookOnTheFlyServer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UCookCommandlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookCommandlet"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Commandlets / Commandlet . h \" # include \" IPlatformFileSandboxWrapper . h \" # include \" Misc / Guid . h \" # include \" Misc / PackageName . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / WeakObjectPtr . h \" # include \" CookCommandlet . generated . h \" class FSandboxPlatformFile ; class ITargetPlatform ; class UCookOnTheFlyServer ; enum class ECookByTheBookOptions ;)",
    "insertText": "UCLASS(config=Editor)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() protected: UE_DEPRECATED(5.2, \"No longer used\")"
  },
  {
    "label": "CookOnTheFly()",
    "kind": "Method",
    "detail": "Function (bool bIterativeCooking ; bool bCookOnTheFly ; bool bFastCook ; bool bCookAll ; bool bSkipEditorContent ; bool bUnversioned ; bool bCookEditorOptional ; bool bGenerateStreamingInstallManifests ; bool bErrorOnEngineContentUse ; bool bCookSinglePackage ; bool bKeepSinglePackageRefs ; bool bVerboseCookerWarnings ; bool bPartialGC ; bool bIgnoreIniSettingsOutOfDate ; TArray<FString> Tokens ; TArray<FString> Switches ; FString Params ; bool)",
    "insertText": "CookOnTheFly(FGuid InstanceId, int32 Port, int32 Timeout = 180, bool bForceClose = false, const TArray<ITargetPlatform*>& TargetPlatforms=TArray<ITargetPlatform*>())"
  },
  {
    "label": "CookByTheBook()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CookByTheBook(const TArray<ITargetPlatform*>& Platforms)"
  },
  {
    "label": "CookAsCookWorker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CookAsCookWorker()"
  },
  {
    "label": "ConditionalCollectGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalCollectGarbage(uint32 TickResults, UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "Main()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "Main(const FString& CmdLineParams)"
  },
  {
    "label": "RunCookByTheBookList()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RunCookByTheBookList(UCookOnTheFlyServer* CookOnTheFlyServer, void* StartupOptionsAsVoid, ECookByTheBookOptions CookOptions)"
  },
  {
    "label": "RunCookByTheBookCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunCookByTheBookCook(UCookOnTheFlyServer* CookOnTheFlyServer, void* StartupOptionsAsVoid, ECookByTheBookOptions CookOptions)"
  }
]