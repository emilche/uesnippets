[
  {
    "label": "for",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "for"
  },
  {
    "label": "ets_key_usage_type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ets_key_usage_type"
  },
  {
    "label": "enumerable_thread_specific",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "enumerable_thread_specific"
  },
  {
    "label": "ets_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ets_base"
  },
  {
    "label": "slot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "slot"
  },
  {
    "label": "array",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "array"
  },
  {
    "label": "slot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "slot"
  },
  {
    "label": "ets_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ets_base"
  },
  {
    "label": "enumerable_thread_specific_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "enumerable_thread_specific_iterator"
  },
  {
    "label": "enumerable_thread_specific_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "enumerable_thread_specific_iterator"
  },
  {
    "label": "segmented_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "segmented_iterator"
  },
  {
    "label": "segmented_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "segmented_iterator"
  },
  {
    "label": "construct_by_default",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "construct_by_default"
  },
  {
    "label": "construct_by_exemplar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "construct_by_exemplar"
  },
  {
    "label": "construct_by_finit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "construct_by_finit"
  },
  {
    "label": "construct_by_args",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "construct_by_args"
  },
  {
    "label": "callback_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "callback_base"
  },
  {
    "label": "callback_leaf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "callback_leaf"
  },
  {
    "label": "ets_element",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ets_element"
  },
  {
    "label": "is_compatible_ets",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_compatible_ets"
  },
  {
    "label": "is_compatible_ets",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_compatible_ets"
  },
  {
    "label": "is_callable_no_args",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is_callable_no_args"
  },
  {
    "label": "enumerable_thread_specific",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "enumerable_thread_specific"
  },
  {
    "label": "enumerable_thread_specific",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "enumerable_thread_specific"
  },
  {
    "label": "generic_range_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "generic_range_type"
  },
  {
    "label": "flattened2d",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "flattened2d"
  },
  {
    "label": "table_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "table_clear()"
  },
  {
    "label": "pthread_getspecific()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "pthread_getspecific(my_key)"
  },
  {
    "label": "enumerable_thread_specific_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "enumerable_thread_specific_iterator(*my_container, my_index + offset)"
  },
  {
    "label": "enumerable_thread_specific_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "enumerable_thread_specific_iterator( *my_container, my_index-offset )"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (container)",
    "insertText": "for(outer_iter = new_outer_iter ;outer_iter!=my_segcont->end()"
  },
  {
    "label": "make()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "make(*this)"
  },
  {
    "label": "local()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "local(exists)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator( my_locals, 0 )"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_iterator(my_locals, 0)"
  }
]