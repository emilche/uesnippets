[
  {
    "label": "TGetKeyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGetKeyType"
  },
  {
    "label": "FNameFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameFuncs"
  },
  {
    "label": "TPerPlatformProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPerPlatformProperty"
  },
  {
    "label": "FFreezablePerPlatformInt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFreezablePerPlatformInt"
  },
  {
    "label": "FPerPlatformInt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerPlatformInt"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FFreezablePerPlatformFloat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFreezablePerPlatformFloat"
  },
  {
    "label": "FPerPlatformFloat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerPlatformFloat"
  },
  {
    "label": "FPerPlatformBool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerPlatformBool"
  },
  {
    "label": "FPerPlatformFrameRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerPlatformFrameRate"
  },
  {
    "label": "NameToKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Object . h \" # include \" Serialization / Archive . h \" # include \" Containers / Map . h \" # include \" Algo / Find . h \" # include \" Serialization / MemoryLayout . h \" # include \" Misc / DataDrivenPlatformInfoRegistry . h \" # include \" Misc / FrameRate . h \" # include \" PerPlatformProperties . generated . h \" namespace PerPlatformProperty::Private { template<MapType> struct TGetKeyType { using Type = TTupleElement<0,MapType::ElementType>::Type ; } ; template<NameType> struct FNameFuncs ; template<> struct FNameFuncs<FName> { FName)",
    "insertText": "NameToKey(FName Name)"
  },
  {
    "label": "SerializePerPlatformMap()",
    "kind": "Method",
    "detail": "Function (Ar<<Map ; } template<ValueType> void)",
    "insertText": "SerializePerPlatformMap(FArchive& UnderlyingArchive, FStructuredArchive::FRecord& Record, TMap<FName, ValueType>& Map)"
  },
  {
    "label": "SA_VALUE()",
    "kind": "Method",
    "detail": "Function (Record<<)",
    "insertText": "SA_VALUE(TEXT(\"PerPlatform\"), Map)"
  },
  {
    "label": "SerializePerPlatformMap()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> void)",
    "insertText": "SerializePerPlatformMap(FArchive& Ar, TMemoryImageMap<FMemoryImageName, ValueType>& Map)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (TMemoryImageMap<FName,ValueType> TempMap ; Ar<<TempMap ; Map .)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Map .)",
    "insertText": "Add(FMemoryImageName(Pair.Key), Pair.Value)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else { TMemoryImageMap<FName,ValueType> TempMap ;)",
    "insertText": "for(TPair<FMemoryImageName, ValueType>& Pair : Map)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TempMap .)",
    "insertText": "Add(FName(Pair.Key), Pair.Value)"
  },
  {
    "label": "SerializePerPlatformMap()",
    "kind": "Method",
    "detail": "Function (} Ar<<TempMap ; } } template<ValueType> void)",
    "insertText": "SerializePerPlatformMap(FArchive& UnderlyingArchive, FStructuredArchive::FRecord& Record, TMemoryImageMap<FMemoryImageName, ValueType>& Map)"
  },
  {
    "label": "SA_VALUE()",
    "kind": "Method",
    "detail": "Function (TMemoryImageMap<FName,ValueType> TempMap ; Record<<)",
    "insertText": "SA_VALUE(TEXT(\"PerPlatform\"), TempMap)"
  },
  {
    "label": "GetValueForPlatform()",
    "kind": "Method",
    "detail": "Function (} } } ; template<MapType> using KeyFuncs = FNameFuncs<TGetKeyType<MapType>::Type> ; } template<_StructType,_ValueType,EName _BasePropertyName> struct TPerPlatformProperty { typedef _ValueType ValueType ; typedef _StructType StructType ; # if WITH_EDITOR _ValueType)",
    "insertText": "GetValueForPlatform(FName PlatformName)"
  },
  {
    "label": "_StructType()",
    "kind": "Method",
    "detail": "Function (const _StructType* This = StaticCast<const)",
    "insertText": "_StructType(this)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using MapType =)",
    "insertText": "decltype(This->PerPlatform)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (using KeyFuncs = PerPlatformProperty::Private::KeyFuncs<MapType> ; const _ValueType* Ptr = This -> PerPlatform .)",
    "insertText": "Find(KeyFuncs::NameToKey(PlatformName))"
  },
  {
    "label": "GetPlatformInfo()",
    "kind": "Method",
    "detail": "Function (const FDataDrivenPlatformInfo& Info =)",
    "insertText": "GetPlatformInfo(PlatformName)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (Ptr = This -> PerPlatform .)",
    "insertText": "Find(KeyFuncs::NameToKey(Info.PlatformGroupName))"
  },
  {
    "label": "GetDefault()",
    "kind": "Method",
    "detail": "Function (} } return Ptr ?* Ptr : This -> Default ; } # endif _ValueType)",
    "insertText": "GetDefault()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA&& WITH_EDITOR FName PlatformName ;)",
    "insertText": "if(UObject::OnGetPreviewPlatform.IsBound() && UObject::OnGetPreviewPlatform.Execute(PlatformName))"
  },
  {
    "label": "_StructType()",
    "kind": "Method",
    "detail": "Function (_ValueType OldValue ; Ar<<OldValue ;* This =)",
    "insertText": "_StructType(OldValue)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar<<* this ; return true ; } bool)",
    "insertText": "Serialize(FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Slot<<* this ; return true ; } } ; template<_StructType,_ValueType,EName _BasePropertyName> FArchive&)",
    "insertText": "operator(FArchive& Ar, TPerPlatformProperty<_StructType, _ValueType, _BasePropertyName>& P)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<_StructType,_ValueType,EName _BasePropertyName> void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, TPerPlatformProperty<_StructType, _ValueType, _BasePropertyName>& P)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (struct FFreezablePerPlatformInt ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = PerPlatform)"
  },
  {
    "label": "FPerPlatformInt()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FPerPlatformInt() : Default(0)"
  },
  {
    "label": "FPerPlatformInt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPerPlatformInt(int32 InDefaultValue) : Default(InDefaultValue)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "FPerPlatformInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPerPlatformInt(const FFreezablePerPlatformInt& Other)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TYPE_LAYOUT(FFreezablePerPlatformInt, NonVirtual)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (using FPerPlatformMap = TMemoryImageMap<FMemoryImageName,int32> ;)",
    "insertText": "LAYOUT_FIELD(int32, Default)"
  },
  {
    "label": "LAYOUT_FIELD_EDITORONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_EDITORONLY(FPerPlatformMap, PerPlatform)"
  },
  {
    "label": "FFreezablePerPlatformInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFreezablePerPlatformInt() : Default(0)"
  },
  {
    "label": "FFreezablePerPlatformInt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFreezablePerPlatformInt(int32 InDefaultValue) : Default(InDefaultValue)"
  },
  {
    "label": "FFreezablePerPlatformInt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFreezablePerPlatformInt(const FPerPlatformInt& Other) : Default(Other.Default)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "for(const TPair<FName, int32>& Pair : Other.PerPlatform)"
  },
  {
    "label": "FPerPlatformInt()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FPerPlatformInt(const FFreezablePerPlatformInt& Other) : Default(Other.Default)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "for(const TPair<FMemoryImageName, int32>& Pair : Other.PerPlatform)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif } template FArchive&)",
    "insertText": "operator(FArchive&, TPerPlatformProperty<FPerPlatformInt, int32, NAME_IntProperty>&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, TPerPlatformProperty<FPerPlatformInt, int32, NAME_IntProperty>&)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (template<> struct TStructOpsTypeTraits<FPerPlatformInt> : public TStructOpsTypeTraitsBase2<FPerPlatformInt> { enum { WithSerializeFromMismatchedTag = true,WithSerializer = true } ; EPropertyObjectReferenceType WithSerializerObjectReferences = EPropertyObjectReferenceType::None ; } ; struct FFreezablePerPlatformFloat ;)",
    "insertText": "USTRUCT(BlueprintType, meta = (CanFlattenStruct))"
  },
  {
    "label": "FPerPlatformFloat()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FPerPlatformFloat() : Default(0.f)"
  },
  {
    "label": "FPerPlatformFloat()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPerPlatformFloat(float InDefaultValue) : Default(InDefaultValue)"
  },
  {
    "label": "FPerPlatformFloat()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPerPlatformFloat(const FFreezablePerPlatformFloat& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template FArchive&)",
    "insertText": "operator(FArchive&, TPerPlatformProperty<FPerPlatformFloat, float, NAME_FloatProperty>&)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (struct FFreezablePerPlatformFloat # if CPP : public TPerPlatformProperty<FFreezablePerPlatformFloat,float,NAME_FloatProperty> # endif {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FFreezablePerPlatformFloat, NonVirtual)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (public : using FPerPlatformMap = TMemoryImageMap<FMemoryImageName,float> ;)",
    "insertText": "LAYOUT_FIELD(float, Default)"
  },
  {
    "label": "FFreezablePerPlatformFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFreezablePerPlatformFloat() : Default(0.0f)"
  },
  {
    "label": "FFreezablePerPlatformFloat()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFreezablePerPlatformFloat(float InDefaultValue) : Default(InDefaultValue)"
  },
  {
    "label": "FFreezablePerPlatformFloat()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFreezablePerPlatformFloat(const FPerPlatformFloat& Other) : Default(Other.Default)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "for(const TPair<FName, float>& Pair : Other.PerPlatform)"
  },
  {
    "label": "FPerPlatformFloat()",
    "kind": "Method",
    "detail": "Function (} # endif } } ;)",
    "insertText": "FPerPlatformFloat(const FFreezablePerPlatformFloat& Other) : Default(Other.Default)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "for(const TPair<FMemoryImageName, float>& Pair : Other.PerPlatform)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category = PerPlatform)"
  },
  {
    "label": "FPerPlatformBool()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FPerPlatformBool() : Default(false)"
  },
  {
    "label": "FPerPlatformBool()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPerPlatformBool(bool InDefaultValue) : Default(InDefaultValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template FArchive&)",
    "insertText": "operator(FArchive&, TPerPlatformProperty<FPerPlatformBool, bool, NAME_BoolProperty>&)"
  },
  {
    "label": "FPerPlatformFrameRate()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FPerPlatformFrameRate() : Default(30, 1)"
  },
  {
    "label": "FPerPlatformFrameRate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPerPlatformFrameRate(FFrameRate InDefaultValue) : Default(InDefaultValue)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SerializeFromMismatchedTag(const FPropertyTag& Tag, FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFrameRate Value ; Ar<<Value . Denominator ; Ar<<Value . Numerator ; Default = Value ; return true ; } return false ; } } ; template FArchive&)",
    "insertText": "operator(FArchive&, TPerPlatformProperty<FPerPlatformFrameRate, FFrameRate, NAME_FrameRate>&)"
  }
]