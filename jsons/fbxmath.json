[
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "EAxis",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAxis"
  },
  {
    "label": "EOrder",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOrder"
  },
  {
    "label": "EFbxQuatInterpMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFbxQuatInterpMode"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "DegenerateThreshold()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_CORE_MATH_H_ # define _FBXSDK_CORE_MATH_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / math / fbxvector2 . h> # include<fbxsdk / core / math / fbxvector4 . h> # include<fbxsdk / core / math / fbxmatrix . h> # include<fbxsdk / core / math / fbxaffinematrix . h> # include<fbxsdk / fbxsdk_nsbegin . h> # define FBXSDK_PI 3 . 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 3 2 7 9 5 0 2 8 8 4 1 9 7 1 6 9 3 9 9 3 7 5 1 # define FBXSDK_PI_DIV_2 1 . 5 7 0 7 9 6 3 2 6 7 9 4 8 9 6 6 1 9 2 3 1 3 2 1 6 9 1 6 3 9 7 5 1 4 4 2 0 9 8 5 8 4 6 9 9 6 8 7 5 # define FBXSDK_PI_DIV_180 0 . 0 1 7 4 5 3 2 9 2 5 1 9 9 4 3 2 9 5 7 6 9 2 3 6 9 0 7 6 8 4 8 8 6 1 2 7 1 3 4 4 2 8 7 1 8 8 8 5 4 1 7 # define FBXSDK_180_DIV_PI 5 7 . 2 9 5 7 7 9 5 1 3 0 8 2 3 2 0 8 7 6 7 9 8 1 5 4 8 1 4 1 0 5 1 7 0 3 3 2 4 0 5 4 7 2 4 6 6 5 6 5 # define FBXSDK_1_DIV_LN2 1 . 4 4 2 6 9 5 0 4 0 8 8 8 9 6 3 4 0 7 3 5 9 9 2 4 6 8 1 0 0 1 8 9 2 1 3 7 4 2 6 6 4 5 9 5 4 1 5 3 0 # define FBXSDK_DEG_TO_RAD FBXSDK_PI_DIV_180 # define FBXSDK_RAD_TO_DEG FBXSDK_180_DIV_PI # define FBXSDK_IN_TO_CM 2 . 5 4 # define FBXSDK_MM_TO_CM 0 . 1 # define FBXSDK_CM_TO_IN 0 . 3 9 3 7 0 0 7 8 7 # define FBXSDK_IN_TO_MM 2 5 . 4 # define FBXSDK_MM_TO_IN 0 . 0 3 9 3 7 0 0 7 8 7 # define FBXSDK_FT_TO_M 0 . 3 0 4 8 # define FBXSDK_M_TO_FT 3 . 2 8 0 8 3 9 9 # define FBXSDK_YD_TO_FT 3 # define FBXSDK_FT_TO_YD 0 . 3 3 3 3 3 3 3 3 3 # define FBXSDK_KM_TO_MILE 0 . 6 2 1 3 7 1 1 9 2 # define FBXSDK_MILE_TO_KM 1 . 6 0 9 3 4 4 # define FBXSDK_YD_TO_M 0 . 9 1 4 4 # define FBXSDK_M_TO_YD 1 . 0 9 3 6 1 3 3 # define FBXSDK_EULER_DEGENERATE)",
    "insertText": "DegenerateThreshold()"
  },
  {
    "label": "IsParityOdd()",
    "kind": "Method",
    "detail": "Function (public : enum EAxis { eAxisX = 0,eAxisY = 1,eAxisZ = 2 } ; enum EOrder { eOrderXYZ,eOrderXZY,eOrderYZX,eOrderYXZ,eOrderZXY,eOrderZYX,eOrderSphericXYZ } ; bool)",
    "insertText": "IsParityOdd(EOrder pOrder)"
  },
  {
    "label": "IsRepeat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRepeat(EOrder pOrder)"
  },
  {
    "label": "SetDegenerateThreshold()",
    "kind": "Method",
    "detail": "Function (const int AxisTableSize ; const int AxisTable [ ] [ 3 ] ; void)",
    "insertText": "SetDegenerateThreshold(double pThreshold=16.0*FBXSDK_FLOAT_EPSILON)"
  },
  {
    "label": "FbxFloor()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "FbxFloor(const double x)"
  },
  {
    "label": "FbxCeil()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "FbxCeil(const float x)"
  },
  {
    "label": "FbxCeil()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "FbxCeil(const double x)"
  },
  {
    "label": "FbxSign()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxSign(const T x)"
  },
  {
    "label": "FbxRound()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxRound(const T x)"
  },
  {
    "label": "FbxFloor()",
    "kind": "Method",
    "detail": "Function (T y =)",
    "insertText": "FbxFloor(x)"
  },
  {
    "label": "FbxAbs()",
    "kind": "Method",
    "detail": "Function (} FbxUChar)",
    "insertText": "FbxAbs(const FbxUChar x)"
  },
  {
    "label": "FbxAbs()",
    "kind": "Method",
    "detail": "Function (} FbxDouble)",
    "insertText": "FbxAbs(const FbxDouble x)"
  },
  {
    "label": "FbxAbs()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxAbs(const T x)"
  },
  {
    "label": "FbxClamp()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxClamp(const T value, const T min, const T max)"
  },
  {
    "label": "FbxEqual()",
    "kind": "Method",
    "detail": "Function (} template<class T> bool)",
    "insertText": "FbxEqual(const T x, const T y, const T e=(T)FBXSDK_TOLERANCE)"
  },
  {
    "label": "FbxEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FbxEqual(const FbxDouble2& x, const FbxDouble2& y, const double e=FBXSDK_TOLERANCE)"
  },
  {
    "label": "FbxEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FbxEqual(const FbxDouble3& x, const FbxDouble3& y, const double e=FBXSDK_TOLERANCE)"
  },
  {
    "label": "FbxEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FbxEqual(const FbxDouble4& x, const FbxDouble4& y, const double e=FBXSDK_TOLERANCE)"
  },
  {
    "label": "FbxEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FbxEqual(const FbxDouble4x4& x, const FbxDouble4x4& y, const double e=FBXSDK_TOLERANCE)"
  },
  {
    "label": "FbxEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FbxEqual(const FbxVector2& x, const FbxVector2& y, const double e=FBXSDK_TOLERANCE)"
  },
  {
    "label": "FbxEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FbxEqual(const FbxVector4& x, const FbxVector4& y, const double e=FBXSDK_TOLERANCE)"
  },
  {
    "label": "FbxEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FbxEqual(const FbxMatrix& x, const FbxMatrix& y, const double e=FBXSDK_TOLERANCE)"
  },
  {
    "label": "FbxEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FbxEqual(const FbxAMatrix& x, const FbxAMatrix& y, const double e=FBXSDK_TOLERANCE)"
  },
  {
    "label": "FbxMod()",
    "kind": "Method",
    "detail": "Function (} FbxDouble)",
    "insertText": "FbxMod(const FbxFloat x, FbxFloat& i)"
  },
  {
    "label": "FbxMod()",
    "kind": "Method",
    "detail": "Function (} FbxDouble)",
    "insertText": "FbxMod(const FbxDouble x, FbxDouble& i)"
  },
  {
    "label": "FbxMod()",
    "kind": "Method",
    "detail": "Function (} FbxDouble)",
    "insertText": "FbxMod(const FbxFloat x)"
  },
  {
    "label": "modff()",
    "kind": "Method",
    "detail": "Function (FbxFloat i ; return)",
    "insertText": "modff(x, &i)"
  },
  {
    "label": "FbxMod()",
    "kind": "Method",
    "detail": "Function (} FbxDouble)",
    "insertText": "FbxMod(const FbxDouble x)"
  },
  {
    "label": "modf()",
    "kind": "Method",
    "detail": "Function (FbxDouble i ; return)",
    "insertText": "modf(x, &i)"
  },
  {
    "label": "FbxReciprocal()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxReciprocal(const T x)"
  },
  {
    "label": "FbxSqrt()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "FbxSqrt(const double x)"
  },
  {
    "label": "FbxSqrt()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "FbxSqrt(const float x)"
  },
  {
    "label": "FbxSqrt()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxSqrt(const T x)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (T z,y = x>> 1 ; do { z = y ;)",
    "insertText": "y(y + (x / y))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(y < z)"
  },
  {
    "label": "FbxExp()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "FbxExp(const double x)"
  },
  {
    "label": "FbxLog()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "FbxLog(const float x)"
  },
  {
    "label": "FbxLog()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "FbxLog(const double x)"
  },
  {
    "label": "FbxPow()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxPow(const T x, const T y)"
  },
  {
    "label": "FbxLog2()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxLog2(const T x)"
  },
  {
    "label": "FbxSin()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "FbxSin(const float x)"
  },
  {
    "label": "FbxSin()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "FbxSin(const double x)"
  },
  {
    "label": "FbxCos()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "FbxCos(const float x)"
  },
  {
    "label": "FbxCos()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "FbxCos(const double x)"
  },
  {
    "label": "FbxTan()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "FbxTan(const float x)"
  },
  {
    "label": "FbxTan()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "FbxTan(const double x)"
  },
  {
    "label": "FbxSinCos()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxSinCos(const T x, T* y)"
  },
  {
    "label": "FbxSinCosd()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxSinCosd(const T x, T* y)"
  },
  {
    "label": "FbxASin()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "FbxASin(const float x)"
  },
  {
    "label": "FbxASin()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "FbxASin(const double x)"
  },
  {
    "label": "FbxASind()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxASind(const T x)"
  },
  {
    "label": "FbxACos()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "FbxACos(const float x)"
  },
  {
    "label": "FbxACos()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "FbxACos(const double x)"
  },
  {
    "label": "FbxACosd()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxACosd(const T x)"
  },
  {
    "label": "FbxATan()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "FbxATan(const float x)"
  },
  {
    "label": "FbxATan()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "FbxATan(const double x)"
  },
  {
    "label": "FbxATand()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxATand(const T x)"
  },
  {
    "label": "FbxATan()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "FbxATan(const float y, const float x)"
  },
  {
    "label": "FbxATan()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "FbxATan(const double y, const double x)"
  },
  {
    "label": "FbxATand()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxATand(const T y, const T x)"
  },
  {
    "label": "FbxNorm()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxNorm(const T x, const T y)"
  },
  {
    "label": "FbxNorm()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxNorm(const T x, const T y, const T z)"
  },
  {
    "label": "FbxNorm()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxNorm(const T w, const T x, const T y, const T z)"
  },
  {
    "label": "FbxHypot()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxHypot(const T x, const T y)"
  },
  {
    "label": "FbxHypot()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxHypot(const T x, const T y, const T z)"
  },
  {
    "label": "FbxHypot()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxHypot(const T w, const T x, const T y, const T z)"
  },
  {
    "label": "FbxRejection()",
    "kind": "Method",
    "detail": "Function (} FbxVector4)",
    "insertText": "FbxRejection(const FbxVector4& a, const FbxVector4& b)"
  },
  {
    "label": "FbxBitCount()",
    "kind": "Method",
    "detail": "Function (} template<class T> int)",
    "insertText": "FbxBitCount(const T x)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int n = 0 ; T c = x ;)",
    "insertText": "while(c)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (n + =)",
    "insertText": "int(c & 1)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "c(c >> 1)"
  },
  {
    "label": "FbxFixInfinite()",
    "kind": "Method",
    "detail": "Function (} return n ; } template<class T> void)",
    "insertText": "FbxFixInfinite(T& x)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "T(0)"
  },
  {
    "label": "FbxExp()",
    "kind": "Method",
    "detail": "Function (} } template<class T> T)",
    "insertText": "FbxExp(const T x)"
  },
  {
    "label": "FbxLog()",
    "kind": "Method",
    "detail": "Function (template<class T> T)",
    "insertText": "FbxLog(const T x)"
  },
  {
    "label": "FbxSin()",
    "kind": "Method",
    "detail": "Function (template<class T> T)",
    "insertText": "FbxSin(const T x)"
  },
  {
    "label": "FbxCos()",
    "kind": "Method",
    "detail": "Function (template<class T> T)",
    "insertText": "FbxCos(const T x)"
  },
  {
    "label": "FbxASin()",
    "kind": "Method",
    "detail": "Function (template<class T> T)",
    "insertText": "FbxASin(const T x)"
  },
  {
    "label": "FbxACos()",
    "kind": "Method",
    "detail": "Function (template<class T> T)",
    "insertText": "FbxACos(const T x)"
  },
  {
    "label": "FbxATan()",
    "kind": "Method",
    "detail": "Function (template<class T> T)",
    "insertText": "FbxATan(const T x)"
  },
  {
    "label": "FbxATan()",
    "kind": "Method",
    "detail": "Function (template<class T> T)",
    "insertText": "FbxATan(const T y, const T x)"
  }
]