[
  {
    "label": "ParametrizedLine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParametrizedLine"
  },
  {
    "label": "EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF_VECTORIZABLE_FIXED_SIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_PARAMETRIZEDLINE_H # define EIGEN_PARAMETRIZEDLINE_H namespace Eigen { template<_Scalar,int _AmbientDim,int _Options> class ParametrizedLine { public :)",
    "insertText": "EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF_VECTORIZABLE_FIXED_SIZE(_Scalar,_AmbientDim)"
  },
  {
    "label": "ParametrizedLine()",
    "kind": "Method",
    "detail": "Function (AmbientDimAtCompileTime = _AmbientDim,Options = _Options } ; typedef _Scalar Scalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef Eigen::Index Index ; typedef Matrix<Scalar,AmbientDimAtCompileTime,1,Options> VectorType ; EIGEN_DEVICE_FUNC)",
    "insertText": "ParametrizedLine()"
  },
  {
    "label": "ParametrizedLine()",
    "kind": "Method",
    "detail": "Function (} template<int OtherOptions> EIGEN_DEVICE_FUNC)",
    "insertText": "ParametrizedLine(const ParametrizedLine<Scalar,AmbientDimAtCompileTime,OtherOptions>& other) : m_origin(other.origin()), m_direction(other.direction())"
  },
  {
    "label": "ParametrizedLine()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "ParametrizedLine(Index _dim) : m_origin(_dim), m_direction(_dim)"
  },
  {
    "label": "ParametrizedLine()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "ParametrizedLine(const VectorType& origin, const VectorType& direction) : m_origin(origin), m_direction(direction)"
  },
  {
    "label": "ParametrizedLine()",
    "kind": "Method",
    "detail": "Function (} template<int OtherOptions> EIGEN_DEVICE_FUNC)",
    "insertText": "ParametrizedLine(const Hyperplane<_Scalar, _AmbientDim, OtherOptions>& hyperplane)"
  },
  {
    "label": "Through()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC ParametrizedLine)",
    "insertText": "Through(const VectorType& p0, const VectorType& p1)"
  },
  {
    "label": "dim()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Index)",
    "insertText": "dim()"
  },
  {
    "label": "origin()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const VectorType&)",
    "insertText": "origin()"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC RealScalar)",
    "insertText": "distance(const VectorType& p)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(sqrt) return sqrt(squaredDistance(p))"
  },
  {
    "label": "projection()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC VectorType)",
    "insertText": "projection(const VectorType& p)"
  },
  {
    "label": "pointAt()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC VectorType)",
    "insertText": "pointAt(const Scalar& t)"
  },
  {
    "label": "intersectionParameter()",
    "kind": "Method",
    "detail": "Function (template<int OtherOptions> EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "intersectionParameter(const Hyperplane<_Scalar, _AmbientDim, OtherOptions>& hyperplane)"
  },
  {
    "label": "intersection()",
    "kind": "Method",
    "detail": "Function (template<int OtherOptions> EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "intersection(const Hyperplane<_Scalar, _AmbientDim, OtherOptions>& hyperplane)"
  },
  {
    "label": "intersectionPoint()",
    "kind": "Method",
    "detail": "Function (template<int OtherOptions> EIGEN_DEVICE_FUNC VectorType)",
    "insertText": "intersectionPoint(const Hyperplane<_Scalar, _AmbientDim, OtherOptions>& hyperplane)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (template<XprType> EIGEN_DEVICE_FUNC ParametrizedLine&)",
    "insertText": "transform(const MatrixBase<XprType>& mat, TransformTraits traits = Affine)"
  },
  {
    "label": "origin()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "origin() = mat * origin()"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transform(t.linear(), traits)"
  },
  {
    "label": "origin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "origin() += t.translation()"
  },
  {
    "label": "ParametrizedLine()",
    "kind": "Method",
    "detail": "Function (} template<OtherScalarType,int OtherOptions> EIGEN_DEVICE_FUNC)",
    "insertText": "ParametrizedLine(const ParametrizedLine<OtherScalarType,AmbientDimAtCompileTime,OtherOptions>& other)"
  },
  {
    "label": "origin()",
    "kind": "Method",
    "detail": "Function (m_origin = other .)",
    "insertText": "origin().template cast<Scalar>()"
  },
  {
    "label": "direction()",
    "kind": "Method",
    "detail": "Function (m_direction = other .)",
    "insertText": "direction().template cast<Scalar>()"
  },
  {
    "label": "isApprox()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC bool)",
    "insertText": "isApprox(const ParametrizedLine& other, const typename NumTraits<Scalar>::Real& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "ParametrizedLine()",
    "kind": "Method",
    "detail": "Function (} protected : VectorType m_origin,m_direction ; } ; template<_Scalar,int _AmbientDim,int _Options> template<int OtherOptions> EIGEN_DEVICE_FUNC ParametrizedLine<_Scalar,_AmbientDim,_Options)",
    "insertText": "ParametrizedLine(const Hyperplane<_Scalar, _AmbientDim,OtherOptions>& hyperplane)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(VectorType, 2) direction() = hyperplane.normal().unitOrthogonal()"
  },
  {
    "label": "origin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "origin() = -hyperplane.normal()*hyperplane.offset()"
  },
  {
    "label": "pointAt()",
    "kind": "Method",
    "detail": "Function (} template<_Scalar,int _AmbientDim,int _Options> EIGEN_DEVICE_FUNC ParametrizedLine<_Scalar,_AmbientDim,_Options>::VectorType ParametrizedLine<_Scalar,_AmbientDim,_Options)",
    "insertText": "pointAt(const _Scalar& t)"
  }
]