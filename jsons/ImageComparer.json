[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FComparableImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComparableImage"
  },
  {
    "label": "SCREENSHOTCOMPARISONTOOLS_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SCREENSHOTCOMPARISONTOOLS_API"
  },
  {
    "label": "FPixelOperations",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPixelOperations"
  },
  {
    "label": "FImageComparisonResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImageComparisonResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainersFwd . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Math / UnrealMathSSE . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / DateTime . h \" # include \" Misc / Paths . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / ObjectMacros . h \" # include \" ImageComparer . generated . h \" class Error ; class FComparableImage ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: UPROPERTY()"
  },
  {
    "label": "FImageTolerance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FImageTolerance() : Red(0) , Green(0) , Blue(0) , Alpha(0) , MinBrightness(0) , MaxBrightness(255) , IgnoreAntiAliasing(false) , IgnoreColors(false) , MaximumLocalError(0.0f) , MaximumGlobalError(0.0f)"
  },
  {
    "label": "FImageTolerance()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FImageTolerance(uint8 R, uint8 G, uint8 B, uint8 A, uint8 InMinBrightness, uint8 InMaxBrightness, bool InIgnoreAntiAliasing, bool InIgnoreColors, float InMaximumLocalError, float InMaximumGlobalError) : Red(R) , Green(G) , Blue(B) , Alpha(A) , MinBrightness(InMinBrightness) , MaxBrightness(InMaxBrightness) , IgnoreAntiAliasing(InIgnoreAntiAliasing) , IgnoreColors(InIgnoreColors) , MaximumLocalError(InMaximumLocalError) , MaximumGlobalError(InMaximumGlobalError)"
  },
  {
    "label": "GetLuminance()",
    "kind": "Method",
    "detail": "Function (} public : const FImageTolerance DefaultIgnoreNothing ; const FImageTolerance DefaultIgnoreLess ; const FImageTolerance DefaultIgnoreAntiAliasing ; const FImageTolerance DefaultIgnoreColors ; } ; class FComparableImage ; class FPixelOperations { public : double)",
    "insertText": "GetLuminance(const FColor& Color)"
  },
  {
    "label": "IsBrightnessSimilar()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBrightnessSimilar(const FColor& ColorA, const FColor& ColorB, const FImageTolerance& Tolerance)"
  },
  {
    "label": "IsNearlyEqual()",
    "kind": "Method",
    "detail": "Function (const bool AlphaSimilar =)",
    "insertText": "IsNearlyEqual((float)ColorA.A, ColorB.A, Tolerance.Alpha)"
  },
  {
    "label": "GetLuminance()",
    "kind": "Method",
    "detail": "Function (const double BrightnessA =)",
    "insertText": "GetLuminance(ColorA)"
  },
  {
    "label": "GetLuminance()",
    "kind": "Method",
    "detail": "Function (const double BrightnessB =)",
    "insertText": "GetLuminance(ColorB)"
  },
  {
    "label": "IsNearlyEqual()",
    "kind": "Method",
    "detail": "Function (const bool BrightnessSimilar =)",
    "insertText": "IsNearlyEqual(BrightnessA, BrightnessB, Tolerance.MinBrightness)"
  },
  {
    "label": "IsNearlyEqual()",
    "kind": "Method",
    "detail": "Function (const bool RedSimilar =)",
    "insertText": "IsNearlyEqual((float)ColorA.R, ColorB.R, Tolerance.Red)"
  },
  {
    "label": "IsNearlyEqual()",
    "kind": "Method",
    "detail": "Function (const bool GreenSimilar =)",
    "insertText": "IsNearlyEqual((float)ColorA.G, ColorB.G, Tolerance.Green)"
  },
  {
    "label": "IsNearlyEqual()",
    "kind": "Method",
    "detail": "Function (const bool BlueSimilar =)",
    "insertText": "IsNearlyEqual((float)ColorA.B, ColorB.B, Tolerance.Blue)"
  },
  {
    "label": "GetHue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetHue(const FColor& Color)"
  },
  {
    "label": "IsAntialiased()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAntialiased(const FColor& SourcePixel, const FComparableImage* Image, int32 X, int32 Y, const FImageTolerance& Tolerance)"
  },
  {
    "label": "FComparableImage()",
    "kind": "Method",
    "detail": "Function (} ; class FComparableImage { public : int32 Width = 0 ; int32 Height = 0 ; TArray64<uint8> Bytes ;)",
    "insertText": "FComparableImage()"
  },
  {
    "label": "CanGetPixel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanGetPixel(int32 X, int32 Y)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Offset((int64)Y * Width + X)"
  },
  {
    "label": "LoadFile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadFile(const FString& ImagePath, FText& OutError)"
  },
  {
    "label": "LoadCompressedData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadCompressedData(const void* CompressedData, int64 CompressedSize, const FString& ImageExtension, FText& OutError)"
  },
  {
    "label": "FImageComparisonResult()",
    "kind": "Method",
    "detail": "Function (int32 CurrentVersion = 3 ; int32 OldestSupportedVersion = 2 ;)",
    "insertText": "FImageComparisonResult() : CreationTime(0) , MaxLocalDifference(0.0f) , GlobalDifference(0.0f) , ErrorMessage() , bSkipAttachingImages(false) , Version(CurrentVersion)"
  },
  {
    "label": "FImageComparisonResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FImageComparisonResult(const FText& Error) : CreationTime(0) , MaxLocalDifference(0.0f) , GlobalDifference(0.0f) , ErrorMessage(Error) , bSkipAttachingImages(false) , Version(CurrentVersion)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsNew()",
    "kind": "Method",
    "detail": "Function (Version = 0 ; } bool)",
    "insertText": "IsNew()"
  },
  {
    "label": "IsIdeal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIdeal()"
  },
  {
    "label": "AreSimilar()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreSimilar()"
  },
  {
    "label": "SetComparisonResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComparisonResult(const FImageComparisonResult& InResult)"
  },
  {
    "label": "GetComparisonResult()",
    "kind": "Method",
    "detail": "Function (Comparison = InResult ; } const FImageComparisonResult&)",
    "insertText": "GetComparisonResult()"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (FImageComparisonResult)",
    "insertText": "Compare(const FComparableImage* ImageA, const FComparableImage* ImageB, FImageTolerance Tolerance, const FString& OutDeltaPath)"
  },
  {
    "label": "CompareStructuralSimilarity()",
    "kind": "Method",
    "detail": "Function (enum class EStructuralSimilarityComponent : uint8 { Luminance,Color } ; double)",
    "insertText": "CompareStructuralSimilarity(const FString& ImagePathA, const FString& ImagePathB, EStructuralSimilarityComponent InCompareComponent, const FString& OutDeltaPath)"
  }
]