[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FComparableImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComparableImage"
  },
  {
    "label": "SCREENSHOTCOMPARISONTOOLS_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SCREENSHOTCOMPARISONTOOLS_API"
  },
  {
    "label": "FComparableImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComparableImage"
  },
  {
    "label": "FPixelOperations",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPixelOperations"
  },
  {
    "label": "SCREENSHOTCOMPARISONTOOLS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCREENSHOTCOMPARISONTOOLS_API"
  },
  {
    "label": "holds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "holds"
  },
  {
    "label": "FImageComparisonResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImageComparisonResult"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "as"
  },
  {
    "label": "SCREENSHOTCOMPARISONTOOLS_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SCREENSHOTCOMPARISONTOOLS_API"
  },
  {
    "label": "SCREENSHOTCOMPARISONTOOLS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCREENSHOTCOMPARISONTOOLS_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GetHue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetHue(const FColor& Color)"
  },
  {
    "label": "IsAntialiased()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAntialiased(const FColor& SourcePixel, const FComparableImage* Image, int32 X, int32 Y, const FImageTolerance& Tolerance)"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FColor(\n\t\t\tBytes[Offset],\n\t\t\tBytes[Offset + 1],\n\t\t\tBytes[Offset + 2],\n\t\t\tBytes[Offset + 3])"
  },
  {
    "label": "LoadFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFile(const FString& ImagePath, FText& OutError)"
  },
  {
    "label": "LoadCompressedData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadCompressedData(const void* CompressedData, int64 CompressedSize, const FString& ImageExtension, FText& OutError)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (FImageComparisonResult)",
    "insertText": "Compare(const FString& ImagePathA, const FString& ImagePathB, FImageTolerance Tolerance, const FString& OutDeltaPath)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (FImageComparisonResult)",
    "insertText": "Compare(const FComparableImage* ImageA, const FComparableImage* ImageB, FImageTolerance Tolerance, const FString& OutDeltaPath)"
  },
  {
    "label": "CompareStructuralSimilarity()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "CompareStructuralSimilarity(const FString& ImagePathA, const FString& ImagePathB, EStructuralSimilarityComponent InCompareComponent, const FString& OutDeltaPath)"
  },
  {
    "label": "CompareStructuralSimilarity()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "CompareStructuralSimilarity(const FComparableImage* ImageA, const FComparableImage* ImageB, EStructuralSimilarityComponent InCompareComponent, const FString& OutDeltaPath)"
  }
]