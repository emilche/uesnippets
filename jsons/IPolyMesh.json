[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "Sample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Sample"
  },
  {
    "label": "IPolyMeshSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPolyMeshSchema"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_IPolyMesh_h # define Alembic_AbcGeom_IPolyMesh_h # include<Alembic / Util / Export . h> # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / AbcGeom / SchemaInfoDeclarations . h> # include<Alembic / AbcGeom / IFaceSet . h> # include<Alembic / AbcGeom / IGeomParam . h> # include<Alembic / AbcGeom / IGeomBase . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT IPolyMeshSchema : public IGeomBaseSchema<PolyMeshSchemaInfo> { public : class Sample { public : typedef Sample this_type ;)",
    "insertText": "Sample()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "getPositions()",
    "kind": "Method",
    "detail": "Function (} Abc::P3fArraySamplePtr)",
    "insertText": "getPositions()"
  },
  {
    "label": "makeEmpty()",
    "kind": "Method",
    "detail": "Function (m_selfBounds .)",
    "insertText": "makeEmpty()"
  },
  {
    "label": "ALEMBIC_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OPERATOR_BOOL(valid())"
  },
  {
    "label": "IPolyMeshSchema()",
    "kind": "Method",
    "detail": "Function (protected : class IPolyMeshSchema ; Abc::P3fArraySamplePtr m_positions ; Abc::V3fArraySamplePtr m_velocities ; Abc::Int32ArraySamplePtr m_indices ; Abc::Int32ArraySamplePtr m_counts ; Abc::Box3d m_selfBounds ; } ; public : typedef IPolyMeshSchema this_type ;)",
    "insertText": "IPolyMeshSchema()"
  },
  {
    "label": "IPolyMeshSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IPolyMeshSchema(const ICompoundProperty &iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument() ) : IGeomBaseSchema<PolyMeshSchemaInfo>( iParent, iName, iArg0, iArg1)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(iArg0, iArg1)"
  },
  {
    "label": "IPolyMeshSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IPolyMeshSchema(const ICompoundProperty &iProp, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument() ) : IGeomBaseSchema<PolyMeshSchemaInfo>( iProp, iArg0, iArg1)"
  },
  {
    "label": "IPolyMeshSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IPolyMeshSchema(const IPolyMeshSchema& iCopy) : IGeomBaseSchema<PolyMeshSchemaInfo>()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this = iCopy ; } const IPolyMeshSchema&)",
    "insertText": "operator(const IPolyMeshSchema & rhs)"
  },
  {
    "label": "getNumSamples()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "getNumSamples()"
  },
  {
    "label": "getTopologyVariance()",
    "kind": "Method",
    "detail": "Function (} MeshTopologyVariance)",
    "insertText": "getTopologyVariance()"
  },
  {
    "label": "isConstant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isConstant()"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (} AbcA::TimeSamplingPtr)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "getObject()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "getObject().getArchive().getTimeSampling( 0)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "get(Sample &oSample, const Abc::ISampleSelector &iSS = Abc::ISampleSelector())"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"IPolyMeshSchema::get()\")"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (m_positionsProperty .)",
    "insertText": "get(oSample.m_positions, iSS)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (m_indicesProperty .)",
    "insertText": "get(oSample.m_indices, iSS)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (m_countsProperty .)",
    "insertText": "get(oSample.m_counts, iSS)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (m_selfBoundsProperty .)",
    "insertText": "get(oSample.m_selfBounds, iSS)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (m_velocitiesProperty .)",
    "insertText": "get(oSample.m_velocities, iSS)"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_END()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_END()"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} Sample)",
    "insertText": "getValue(const Abc::ISampleSelector &iSS = Abc::ISampleSelector())"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Sample smp ;)",
    "insertText": "get(smp, iSS)"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid()"
  },
  {
    "label": "getFaceSetNames()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getFaceSetNames(std::vector <std::string> & oFaceSetNames)"
  },
  {
    "label": "hasFaceSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasFaceSet(const std::string &iFaceSetName)"
  },
  {
    "label": "ALEMBIC_OVERRIDE_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_OVERRIDE_OPERATOR_BOOL(IPolyMeshSchema::valid())"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "init(const Abc::Argument &iArg0, const Abc::Argument &iArg1)"
  },
  {
    "label": "loadFaceSetNames()",
    "kind": "Method",
    "detail": "Function (Abc::IP3fArrayProperty m_positionsProperty ; Abc::IV3fArrayProperty m_velocitiesProperty ; Abc::IInt32ArrayProperty m_indicesProperty ; Abc::IInt32ArrayProperty m_countsProperty ; IV2fGeomParam m_uvsParam ; IN3fGeomParam m_normalsParam ; bool m_faceSetsLoaded ; std::map<std::string,IFaceSet> m_faceSets ; Alembic::Util::mutex m_faceSetsMutex ; void)",
    "insertText": "loadFaceSetNames()"
  }
]