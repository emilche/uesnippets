[
  {
    "label": "WhiteNoiseGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WhiteNoiseGenerator"
  },
  {
    "label": "SineGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SineGenerator"
  },
  {
    "label": "PulseGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PulseGenerator"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_AGC2_TESTING_COMMON_H_ # define MODULES_AUDIO_PROCESSING_AGC2_AGC2_TESTING_COMMON_H_ # include<limits> # include<vector> # include \" rtc_base / random . h \" namespace webrtc { namespace test { float kMinS16 = static_cast<)",
    "insertText": "float(std::numeric_limits<int16_t>::min())"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (float kMaxS16 = static_cast<)",
    "insertText": "float(std::numeric_limits<int16_t>::max())"
  },
  {
    "label": "LinSpace()",
    "kind": "Method",
    "detail": "Function (float kDecayMs = 2 0 . 0 f ; float kLimiterMaxInputLevelDbFs = 1 . f ; float kLimiterKneeSmoothnessDb = 1 . f ; float kLimiterCompressionRatio = 5 . f ; std::vector<double>)",
    "insertText": "LinSpace(double l, double r, int num_points)"
  },
  {
    "label": "WhiteNoiseGenerator()",
    "kind": "Method",
    "detail": "Function (class WhiteNoiseGenerator { public :)",
    "insertText": "WhiteNoiseGenerator(int min_amplitude, int max_amplitude)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "operator()()"
  },
  {
    "label": "SineGenerator()",
    "kind": "Method",
    "detail": "Function (private : Random rand_gen_ ; const int min_amplitude_ ; const int max_amplitude_ ; } ; class SineGenerator { public :)",
    "insertText": "SineGenerator(float amplitude, float frequency_hz, int sample_rate_hz)"
  },
  {
    "label": "PulseGenerator()",
    "kind": "Method",
    "detail": "Function (private : const float amplitude_ ; const float frequency_hz_ ; const int sample_rate_hz_ ; float x_radians_ ; } ; class PulseGenerator { public :)",
    "insertText": "PulseGenerator(float pulse_amplitude, float no_pulse_amplitude, float frequency_hz, int sample_rate_hz)"
  }
]