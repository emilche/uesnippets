[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TNonNullSubclassOf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TNonNullSubclassOf"
  },
  {
    "label": "TNonNullSubclassOf()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Class . h \" # include \" UObject / Field . h \" # include \" SubclassOf . h \" # include \" Misc / IntrusiveUnsetOptionalState . h \" enum class EDefaultConstructNonNullSubclassOf { UnsafeDoNotUse } ; template<T> class TNonNullSubclassOf : public TSubclassOf<T> { using Super = TSubclassOf<T> ; public :)",
    "insertText": "TNonNullSubclassOf(EDefaultConstructNonNullSubclassOf) : Super(nullptr)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<PtrType)",
    "insertText": "UE_REQUIRES(std::is_same_v<PtrType, UClass> || std::is_same_v<PtrType, FFieldClass>)> FORCEINLINE TNonNullSubclassOf(PtrType* From) : Super(From)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<U)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<U*, T*>) > FORCEINLINE TNonNullSubclassOf(const TSubclassOf<U>& From) : Super(From)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<U)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<U*, T*>) > FORCEINLINE TNonNullSubclassOf& operator=(const TSubclassOf<U>& From)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(From)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FIntrusiveUnsetOptionalState)"
  }
]