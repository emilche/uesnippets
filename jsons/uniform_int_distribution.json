[
  {
    "label": "uniform_int_distribution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "uniform_int_distribution"
  },
  {
    "label": "param_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "param_type"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_UNIFORM_INT_DISTRIBUTION_H_ # define ABSL_RANDOM_UNIFORM_INT_DISTRIBUTION_H_ # include<cassert> # include<istream> # include<limits> # include<type_traits> # include \" absl / base / optimization . h \" # include \" absl / random / internal / fast_uniform_bits . h \" # include \" absl / random / internal / iostream_state_saver . h \" # include \" absl / random / internal / traits . h \" # include \" absl / random / internal / wide_multiply . h \" namespace absl { ABSL_NAMESPACE_BEGIN template<IntType = int> class uniform_int_distribution { private : using unsigned_type = random_internal::make_unsigned_bits<IntType>::type ; public : using result_type = IntType ; class param_type { public : using distribution_type = uniform_int_distribution ;)",
    "insertText": "param_type(result_type lo = 0, result_type hi = (std::numeric_limits<result_type>::max)()) : lo_(lo), range_(static_cast<unsigned_type>(hi) - static_cast<unsigned_type>(lo))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(lo <= hi)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (} result_type)",
    "insertText": "a()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const param_type& a, const param_type& b)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (} private : class uniform_int_distribution ; unsigned_type)",
    "insertText": "range()"
  },
  {
    "label": "uniform_int_distribution()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "uniform_int_distribution() : uniform_int_distribution(0)"
  },
  {
    "label": "uniform_int_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "uniform_int_distribution(result_type lo, result_type hi = (std::numeric_limits<result_type>::max)()) : param_(lo, hi)"
  },
  {
    "label": "uniform_int_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "uniform_int_distribution(const param_type& param) : param_(param)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()(URBG& gen)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()( URBG& gen, const param_type& param)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (} result_type)",
    "insertText": "b()"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (} param_type)",
    "insertText": "param()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (param_ = params ; })",
    "insertText": "result_type(min)()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "result_type(max)()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const uniform_int_distribution& a, const uniform_int_distribution& b)"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (} private : template<URBG> unsigned_type)",
    "insertText": "Generate(URBG& g, unsigned_type R)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (param_type param_ ; } ; template<CharT,Traits,IntType> std::basic_ostream<CharT,Traits>&)",
    "insertText": "operator(std::basic_ostream<CharT, Traits>& os, const uniform_int_distribution<IntType>& x)"
  },
  {
    "label": "make_ostream_state_saver()",
    "kind": "Method",
    "detail": "Function (using stream_type = random_internal::stream_format_type<IntType>::type ; auto saver =)",
    "insertText": "make_ostream_state_saver(os)"
  },
  {
    "label": "stream_type()",
    "kind": "Method",
    "detail": "Function (os<<static_cast<)",
    "insertText": "stream_type(x.a()) << os.fill() << static_cast<stream_type>(x.b())"
  },
  {
    "label": "make_istream_state_saver()",
    "kind": "Method",
    "detail": "Function (using param_type = uniform_int_distribution<IntType>::param_type ; using result_type = uniform_int_distribution<IntType>::result_type ; using stream_type = random_internal::stream_format_type<IntType>::type ; stream_type a ; stream_type b ; auto saver =)",
    "insertText": "make_istream_state_saver(is)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (is>> a>> b ;)",
    "insertText": "if(!is.fail())"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "param(param_type(static_cast<result_type>(a), static_cast<result_type>(b)))"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (} return is ; } template<IntType> template<URBG> random_internal::make_unsigned_bits<IntType>::type uniform_int_distribution<IntType)",
    "insertText": "Generate(URBG& g, typename random_internal::make_unsigned_bits<IntType>::type R)"
  },
  {
    "label": "fast_bits()",
    "kind": "Method",
    "detail": "Function (random_internal::FastUniformBits<unsigned_type> fast_bits ; unsigned_type bits =)",
    "insertText": "fast_bits(g)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const unsigned_type Lim = R + 1 ;)",
    "insertText": "if((R & Lim) == 0)"
  },
  {
    "label": "threshold()",
    "kind": "Method",
    "detail": "Function (const unsigned_type)",
    "insertText": "threshold((std::numeric_limits<unsigned_type>::max)() - Lim + 1)"
  },
  {
    "label": "multiply()",
    "kind": "Method",
    "detail": "Function (product =)",
    "insertText": "multiply(bits, Lim)"
  },
  {
    "label": "hi()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "hi(product)"
  }
]