[
  {
    "label": "MCAsmInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmInfo"
  },
  {
    "label": "MCAsmLexer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmLexer"
  },
  {
    "label": "MCAsmParserExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmParserExtension"
  },
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "MCExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExpr"
  },
  {
    "label": "MCInstPrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstPrinter"
  },
  {
    "label": "MCInstrInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstrInfo"
  },
  {
    "label": "MCStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCStreamer"
  },
  {
    "label": "MCTargetAsmParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCTargetAsmParser"
  },
  {
    "label": "SMLoc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMLoc"
  },
  {
    "label": "SMRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMRange"
  },
  {
    "label": "SourceMgr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SourceMgr"
  },
  {
    "label": "Twine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Twine"
  },
  {
    "label": "InlineAsmIdentifierInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InlineAsmIdentifierInfo"
  },
  {
    "label": "MCAsmParserSemaCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmParserSemaCallback"
  },
  {
    "label": "MCAsmParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmParser"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCPARSER_MCASMPARSER_H # define LLVM_MC_MCPARSER_MCASMPARSER_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / MC / MCParser / AsmLexer . h \" # include \" llvm / Support / DataTypes . h \" namespace llvm { class MCAsmInfo ; class MCAsmLexer ; class MCAsmParserExtension ; class MCContext ; class MCExpr ; class MCInstPrinter ; class MCInstrInfo ; class MCStreamer ; class MCTargetAsmParser ; class SMLoc ; class SMRange ; class SourceMgr ; class Twine ; class InlineAsmIdentifierInfo { public : void* OpDecl ; bool IsVarDecl ; unsigned Length,Size,Type ; void)",
    "insertText": "clear()"
  },
  {
    "label": "MCAsmParserSemaCallback()",
    "kind": "Method",
    "detail": "Function (OpDecl = nullptr ; IsVarDecl = false ; Length = 1 ; Size = 0 ; Type = 0 ; } } ; class MCAsmParserSemaCallback { public : ~)",
    "insertText": "MCAsmParserSemaCallback()"
  },
  {
    "label": "LookupInlineAsmIdentifier()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "LookupInlineAsmIdentifier(StringRef &LineBuf, InlineAsmIdentifierInfo &Info, bool IsUnevaluatedContext)"
  },
  {
    "label": "LookupInlineAsmLabel()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "LookupInlineAsmLabel(StringRef Identifier, SourceMgr &SM, SMLoc Location, bool Create)"
  },
  {
    "label": "LookupInlineAsmField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LookupInlineAsmField(StringRef Base, StringRef Member, unsigned &Offset)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; class MCAsmParser { public : typedef)",
    "insertText": "bool(*DirectiveHandler)(MCAsmParserExtension*, StringRef, SMLoc)"
  },
  {
    "label": "MCAsmParser()",
    "kind": "Method",
    "detail": "Function (typedef std::pair<MCAsmParserExtension*,DirectiveHandler> ExtensionDirectiveHandler ; private :)",
    "insertText": "MCAsmParser(const MCAsmParser &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const MCAsmParser &)"
  },
  {
    "label": "MCAsmParser()",
    "kind": "Method",
    "detail": "Function (MCTargetAsmParser* TargetParser ; unsigned ShowParsedOperands : 1 ; protected :)",
    "insertText": "MCAsmParser()"
  },
  {
    "label": "addDirectiveHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDirectiveHandler(StringRef Directive, ExtensionDirectiveHandler Handler)"
  },
  {
    "label": "addAliasForDirective()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAliasForDirective(StringRef Directive, StringRef Alias)"
  },
  {
    "label": "getSourceManager()",
    "kind": "Method",
    "detail": "Function (SourceMgr&)",
    "insertText": "getSourceManager()"
  },
  {
    "label": "getLexer()",
    "kind": "Method",
    "detail": "Function (MCAsmLexer&)",
    "insertText": "getLexer()"
  },
  {
    "label": "getContext()",
    "kind": "Method",
    "detail": "Function (} MCContext&)",
    "insertText": "getContext()"
  },
  {
    "label": "getStreamer()",
    "kind": "Method",
    "detail": "Function (MCStreamer&)",
    "insertText": "getStreamer()"
  },
  {
    "label": "getTargetParser()",
    "kind": "Method",
    "detail": "Function (MCTargetAsmParser&)",
    "insertText": "getTargetParser()"
  },
  {
    "label": "getAssemblerDialect()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getAssemblerDialect()"
  },
  {
    "label": "getShowParsedOperands()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "getShowParsedOperands()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (ShowParsedOperands = Value ; } bool)",
    "insertText": "Run(bool NoInitialTextSection, bool NoFinalize = false)"
  },
  {
    "label": "setParsingInlineAsm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setParsingInlineAsm(bool V)"
  },
  {
    "label": "isParsingInlineAsm()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isParsingInlineAsm()"
  },
  {
    "label": "parseMSInlineAsm()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parseMSInlineAsm(void *AsmLoc, std::string &AsmString, unsigned &NumOutputs, unsigned &NumInputs, SmallVectorImpl<std::pair<void *, bool>> &OpDecls, SmallVectorImpl<std::string> &Constraints, SmallVectorImpl<std::string> &Clobbers, const MCInstrInfo *MII, const MCInstPrinter *IP, MCAsmParserSemaCallback &SI)"
  },
  {
    "label": "Note()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Note(SMLoc L, const Twine &Msg, ArrayRef<SMRange> Ranges = None)"
  },
  {
    "label": "Warning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Warning(SMLoc L, const Twine &Msg, ArrayRef<SMRange> Ranges = None)"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Error(SMLoc L, const Twine &Msg, ArrayRef<SMRange> Ranges = None)"
  },
  {
    "label": "Lex()",
    "kind": "Method",
    "detail": "Function (const AsmToken&)",
    "insertText": "Lex()"
  },
  {
    "label": "getTok()",
    "kind": "Method",
    "detail": "Function (const AsmToken&)",
    "insertText": "getTok()"
  },
  {
    "label": "TokError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TokError(const Twine &Msg, ArrayRef<SMRange> Ranges = None)"
  },
  {
    "label": "parseIdentifier()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parseIdentifier(StringRef &Res)"
  },
  {
    "label": "parseStringToEndOfStatement()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "parseStringToEndOfStatement()"
  },
  {
    "label": "parseEscapedString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parseEscapedString(std::string &Data)"
  },
  {
    "label": "eatToEndOfStatement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eatToEndOfStatement()"
  },
  {
    "label": "parseExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parseExpression(const MCExpr *&Res, SMLoc &EndLoc)"
  },
  {
    "label": "parseExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parseExpression(const MCExpr *&Res)"
  },
  {
    "label": "parsePrimaryExpr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parsePrimaryExpr(const MCExpr *&Res, SMLoc &EndLoc)"
  },
  {
    "label": "parseParenExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parseParenExpression(const MCExpr *&Res, SMLoc &EndLoc)"
  },
  {
    "label": "parseAbsoluteExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parseAbsoluteExpression(int64_t &Res)"
  },
  {
    "label": "checkForValidSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "checkForValidSection()"
  },
  {
    "label": "parseParenExprOfDepth()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parseParenExprOfDepth(unsigned ParenDepth, const MCExpr *&Res, SMLoc &EndLoc)"
  },
  {
    "label": "createMCAsmParser()",
    "kind": "Method",
    "detail": "Function (} ; MCAsmParser*)",
    "insertText": "createMCAsmParser(SourceMgr &, MCContext &, MCStreamer &, const MCAsmInfo &)"
  }
]