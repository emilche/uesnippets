[
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifdef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_MAC_DEFAULT_ZONE_H_ # error This header is meant to be included only once by allocator_shim . cc # endif # ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_MAC_DEFAULT_ZONE_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_MAC_DEFAULT_ZONE_H_ # if !)",
    "insertText": "BUILDFLAG(USE_PARTITION_ALLOC_AS_MALLOC)"
  },
  {
    "label": "PartitionAllocMallocHookOnBeforeForkInParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PartitionAllocMallocHookOnBeforeForkInParent()"
  },
  {
    "label": "PartitionAllocMallocHookOnAfterForkInParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PartitionAllocMallocHookOnAfterForkInParent()"
  },
  {
    "label": "PartitionAllocMallocHookOnAfterForkInChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PartitionAllocMallocHookOnAfterForkInChild()"
  },
  {
    "label": "MallocIntrospectionEnumerator()",
    "kind": "Method",
    "detail": "Function (} namespace allocator_shim { namespace { kern_return_t)",
    "insertText": "MallocIntrospectionEnumerator(task_t task, void*, unsigned type_mask, vm_address_t zone_address, memory_reader_t reader, vm_range_recorder_t recorder)"
  },
  {
    "label": "MallocIntrospectionCheck()",
    "kind": "Method",
    "detail": "Function (} boolean_t)",
    "insertText": "MallocIntrospectionCheck(malloc_zone_t* zone)"
  },
  {
    "label": "MallocIntrospectionLog()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MallocIntrospectionLog(malloc_zone_t* zone, void* address)"
  },
  {
    "label": "MallocIntrospectionForceLock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MallocIntrospectionForceLock(malloc_zone_t* zone)"
  },
  {
    "label": "MallocIntrospectionForceUnlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MallocIntrospectionForceUnlock(malloc_zone_t* zone)"
  },
  {
    "label": "MallocIntrospectionStatistics()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MallocIntrospectionStatistics(malloc_zone_t* zone, malloc_statistics_t* stats)"
  },
  {
    "label": "MallocIntrospectionZoneLocked()",
    "kind": "Method",
    "detail": "Function (stats -> blocks_in_use = 0 ; stats -> size_in_use = 0 ; stats -> max_size_in_use = 0 ; stats -> size_allocated = 0 ; } boolean_t)",
    "insertText": "MallocIntrospectionZoneLocked(malloc_zone_t* zone)"
  },
  {
    "label": "MallocIntrospectionDischarge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MallocIntrospectionDischarge(malloc_zone_t* zone, void* memory)"
  },
  {
    "label": "MallocIntrospectionEnumerateDischargedPointers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MallocIntrospectionEnumerateDischargedPointers(malloc_zone_t* zone, void (^report_discharged)(void* memory, void* info))"
  },
  {
    "label": "MallocIntrospectionReinitLock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MallocIntrospectionReinitLock(malloc_zone_t* zone)"
  },
  {
    "label": "MallocIntrospectionPrintTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MallocIntrospectionPrintTask(task_t task, unsigned level, vm_address_t zone_address, memory_reader_t reader, print_task_printer_t printer)"
  },
  {
    "label": "MallocIntrospectionTaskStatistics()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MallocIntrospectionTaskStatistics(task_t task, vm_address_t zone_address, memory_reader_t reader, malloc_statistics_t* stats)"
  },
  {
    "label": "MallocZoneSize()",
    "kind": "Method",
    "detail": "Function (stats -> blocks_in_use = 0 ; stats -> size_in_use = 0 ; stats -> max_size_in_use = 0 ; stats -> size_allocated = 0 ; } size_t)",
    "insertText": "MallocZoneSize(malloc_zone_t* zone, const void* ptr)"
  },
  {
    "label": "MallocZoneMalloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "MallocZoneMalloc(malloc_zone_t* zone, size_t size)"
  },
  {
    "label": "MallocZoneCalloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "MallocZoneCalloc(malloc_zone_t* zone, size_t n, size_t size)"
  },
  {
    "label": "MallocZoneValloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "MallocZoneValloc(malloc_zone_t* zone, size_t size)"
  },
  {
    "label": "MallocZoneFree()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MallocZoneFree(malloc_zone_t* zone, void* ptr)"
  },
  {
    "label": "MallocZoneRealloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "MallocZoneRealloc(malloc_zone_t* zone, void* ptr, size_t size)"
  },
  {
    "label": "MallocZoneDestroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MallocZoneDestroy(malloc_zone_t* zone)"
  },
  {
    "label": "MallocZoneMemalign()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "MallocZoneMemalign(malloc_zone_t* zone, size_t alignment, size_t size)"
  },
  {
    "label": "MallocZoneFreeDefiniteSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MallocZoneFreeDefiniteSize(malloc_zone_t* zone, void* ptr, size_t size)"
  },
  {
    "label": "MallocZoneBatchMalloc()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "MallocZoneBatchMalloc(malloc_zone_t* zone, size_t size, void** results, unsigned num_requested)"
  },
  {
    "label": "MallocZoneBatchFree()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MallocZoneBatchFree(malloc_zone_t* zone, void** to_be_freed, unsigned num)"
  },
  {
    "label": "GetDefaultMallocZone()",
    "kind": "Method",
    "detail": "Function (} malloc_introspection_t g_mac_malloc_introspection { } ; malloc_zone_t g_mac_malloc_zone { } ; malloc_zone_t*)",
    "insertText": "GetDefaultMallocZone()"
  },
  {
    "label": "malloc_get_all_zones()",
    "kind": "Method",
    "detail": "Function (unsigned int zone_count = 0 ; vm_address_t* zones = nullptr ; kern_return_t result =)",
    "insertText": "malloc_get_all_zones(mach_task_self(), nullptr, &zones, &zone_count)"
  },
  {
    "label": "MACH_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MACH_CHECK(result == KERN_SUCCESS, result)"
  },
  {
    "label": "IsAlreadyRegistered()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAlreadyRegistered()"
  },
  {
    "label": "malloc_zone_t()",
    "kind": "Method",
    "detail": "Function (malloc_zone_t* zone = reinterpret_cast<)",
    "insertText": "malloc_zone_t(zones[i])"
  },
  {
    "label": "RAW_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAW_LOG(ERROR, \"Trying to load the allocator multiple times. This is *not* \" \"supported.\")"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (g_mac_malloc_introspection . enumerator = MallocIntrospectionEnumerator ; g_mac_malloc_introspection . good_size = MallocIntrospectionGoodSize ; g_mac_malloc_introspection . check = MallocIntrospectionCheck ; g_mac_malloc_introspection . print = MallocIntrospectionPrint ; g_mac_malloc_introspection . log = MallocIntrospectionLog ; g_mac_malloc_introspection . force_lock = MallocIntrospectionForceLock ; g_mac_malloc_introspection . force_unlock = MallocIntrospectionForceUnlock ; g_mac_malloc_introspection . statistics = MallocIntrospectionStatistics ; g_mac_malloc_introspection . zone_locked = MallocIntrospectionZoneLocked ; g_mac_malloc_introspection . enable_discharge_checking = MallocIntrospectionEnableDischargeChecking ; g_mac_malloc_introspection . disable_discharge_checking = MallocIntrospectionDisableDischargeChecking ; g_mac_malloc_introspection . discharge = MallocIntrospectionDischarge ; g_mac_malloc_introspection . enumerate_discharged_pointers = MallocIntrospectionEnumerateDischargedPointers ; g_mac_malloc_introspection . reinit_lock = MallocIntrospectionReinitLock ; g_mac_malloc_introspection . print_task = MallocIntrospectionPrintTask ; g_mac_malloc_introspection . task_statistics = MallocIntrospectionTaskStatistics ; g_mac_malloc_zone . version = partition_alloc::kZoneVersion ; g_mac_malloc_zone . zone_name = partition_alloc::kPartitionAllocZoneName ; g_mac_malloc_zone . introspect =& g_mac_malloc_introspection ; g_mac_malloc_zone . size = MallocZoneSize ; g_mac_malloc_zone . malloc = MallocZoneMalloc ; g_mac_malloc_zone . calloc = MallocZoneCalloc ; g_mac_malloc_zone . valloc = MallocZoneValloc ; g_mac_malloc_zone . free = MallocZoneFree ; g_mac_malloc_zone . realloc = MallocZoneRealloc ; g_mac_malloc_zone . destroy = MallocZoneDestroy ; g_mac_malloc_zone . batch_malloc = MallocZoneBatchMalloc ; g_mac_malloc_zone . batch_free = MallocZoneBatchFree ; g_mac_malloc_zone . memalign = MallocZoneMemalign ; g_mac_malloc_zone . free_definite_size = MallocZoneFreeDefiniteSize ; g_mac_malloc_zone . pressure_relief = nullptr ; g_mac_malloc_zone . claimed_address = nullptr ; })",
    "insertText": "__attribute__((constructor(0))) void InitializeDefaultMallocZoneWithPartitionAlloc()"
  },
  {
    "label": "malloc_default_zone()",
    "kind": "Method",
    "detail": "Function (std::ignore =)",
    "insertText": "malloc_default_zone()"
  },
  {
    "label": "malloc_default_purgeable_zone()",
    "kind": "Method",
    "detail": "Function (std::ignore =)",
    "insertText": "malloc_default_purgeable_zone()"
  },
  {
    "label": "InitializeDefaultAllocatorPartitionRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeDefaultAllocatorPartitionRoot()"
  },
  {
    "label": "InitializeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeZone()"
  },
  {
    "label": "malloc_zone_register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "malloc_zone_register(&g_mac_malloc_zone)"
  },
  {
    "label": "malloc_zone_unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "malloc_zone_unregister(system_default_zone)"
  },
  {
    "label": "malloc_zone_register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "malloc_zone_register(system_default_zone)"
  }
]