[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "nested_eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested_eval"
  },
  {
    "label": "ReturnByValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReturnByValue"
  },
  {
    "label": "Unusable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Unusable"
  },
  {
    "label": "evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_RETURNBYVALUE_H # define EIGEN_RETURNBYVALUE_H namespace Eigen { namespace internal { template<Derived> struct traits<ReturnByValue<Derived>> : public traits<traits<Derived>::ReturnType> { enum {)",
    "insertText": "Flags(traits<typename traits<Derived>::ReturnType>::Flags | EvalBeforeNestingBit)"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; template<Derived,int n,PlainObject> struct nested_eval<ReturnByValue<Derived>,n,PlainObject> { typedef traits<Derived>::ReturnType type ; } ; } template<Derived> class ReturnByValue : public internal::dense_xpr_base<ReturnByValue<Derived>>::type,internal::no_assignment_operator { public : typedef internal::traits<Derived>::ReturnType ReturnType ; typedef internal::dense_xpr_base<ReturnByValue>::type Base ;)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(ReturnByValue) template<typename Dest> EIGEN_DEVICE_FUNC inline void evalTo(Dest& dst)"
  },
  {
    "label": "Derived()",
    "kind": "Method",
    "detail": "Function (static_cast<const)",
    "insertText": "Derived(this)->evalTo(dst)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "Unusable()",
    "kind": "Method",
    "detail": "Function (} # ifndef EIGEN_PARSED_BY_DOXYGEN # define Unusable YOU_ARE_TRYING_TO_ACCESS_A_SINGLE_COEFFICIENT_IN_A_SPECIAL_EXPRESSION_WHERE_THAT_IS_NOT_ALLOWED_BECAUSE_THAT_WOULD_BE_INEFFICIENT class Unusable {)",
    "insertText": "Unusable(const Unusable&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Unusable&)",
    "insertText": "operator(const Unusable&)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} const Unusable&)",
    "insertText": "coeff(Index,Index)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} Unusable&)",
    "insertText": "coeffRef(Index)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} Unusable&)",
    "insertText": "coeffRef(Index,Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # undef Unusable # endif } ; template<Derived> template<OtherDerived> EIGEN_DEVICE_FUNC Derived& DenseBase<Derived)",
    "insertText": "operator(const ReturnByValue<OtherDerived>& other)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (other .)",
    "insertText": "evalTo(derived())"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (} namespace internal { template<Derived> struct evaluator<ReturnByValue<Derived>> : public evaluator<internal::traits<Derived>::ReturnType> { typedef ReturnByValue<Derived> XprType ; typedef internal::traits<Derived>::ReturnType PlainObject ; typedef evaluator<PlainObject> Base ; EIGEN_DEVICE_FUNC)",
    "insertText": "evaluator(const XprType& xpr) : m_result(xpr.rows(), xpr.cols())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(static_cast<Base*>(this)) Base(m_result)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (xpr .)",
    "insertText": "evalTo(m_result)"
  }
]