[
  {
    "label": "FLinkerTables",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerTables"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FObjectImport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectImport"
  },
  {
    "label": "FObjectRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectRef"
  },
  {
    "label": "FPackedObjectRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedObjectRef"
  },
  {
    "label": "FStoredObjectPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStoredObjectPath"
  },
  {
    "label": "FObjectPathId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectPathId"
  },
  {
    "label": "EInvalid",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInvalid"
  },
  {
    "label": "FStoredObjectPath()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" HAL / Platform . h \" # include \" Templates / TypeHash . h \" # include \" UObject / NameTypes . h \" class FLinkerTables ; class UObject ; struct FObjectImport ; struct FObjectRef ; namespace UE::CoreUObject::Private { struct FPackedObjectRef ; struct FStoredObjectPath { const int32 NumInlineElements = 3 ; int32 NumElements ; union { FMinimalName Short [ NumInlineElements ] ; FMinimalName* Long ; } ;)",
    "insertText": "FStoredObjectPath(TConstArrayView<FMinimalName> InNames)"
  },
  {
    "label": "FStoredObjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStoredObjectPath(const FMinimalName* Parent, int32 NumParent, const FMinimalName* Child, int32 NumChild)"
  },
  {
    "label": "FStoredObjectPath()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStoredObjectPath()"
  },
  {
    "label": "FStoredObjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStoredObjectPath(const FStoredObjectPath&)"
  },
  {
    "label": "FStoredObjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStoredObjectPath(FStoredObjectPath&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FStoredObjectPath&)",
    "insertText": "operator(const FStoredObjectPath&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FStoredObjectPath&)",
    "insertText": "operator(FStoredObjectPath&&)"
  },
  {
    "label": "GetView()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FMinimalName>)",
    "insertText": "GetView()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const FMinimalName*)",
    "insertText": "GetData()"
  },
  {
    "label": "FObjectPathId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectPathId(const FObjectPathId& Other)"
  },
  {
    "label": "FObjectPathId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectPathId(const UObject* Object)"
  },
  {
    "label": "FObjectPathId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectPathId(const FObjectImport& Import, const FLinkerTables& LinkerTables)"
  },
  {
    "label": "FObjectPathId()",
    "kind": "Method",
    "detail": "Function (enum EInvalid { Invalid = 0 } ;)",
    "insertText": "FObjectPathId(EInvalid) : Index(0) , Number(SimpleNameMask | WeakObjectMask)"
  },
  {
    "label": "MakeImportPathIdAndPackageName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "MakeImportPathIdAndPackageName(const FObjectImport& Import, const FLinkerTables& LinkerTables, FObjectPathId& OutPathId)"
  },
  {
    "label": "FObjectPathId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectPathId(FWideStringView StringPath)"
  },
  {
    "label": "FObjectPathId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectPathId(FAnsiStringView StringPath)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FObjectPathId&)",
    "insertText": "operator(const FObjectPathId& Other)"
  },
  {
    "label": "IsSimple()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSimple()"
  },
  {
    "label": "IsWeakObj()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsWeakObj()"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (} using ResolvedNameContainerType = TArray<FName,TInlineAllocator<3>> ; void)",
    "insertText": "Resolve(ResolvedNameContainerType& OutContainer)"
  },
  {
    "label": "GetWeakObjPtr()",
    "kind": "Method",
    "detail": "Function (FWeakObjectPtr)",
    "insertText": "GetWeakObjPtr()"
  },
  {
    "label": "GetSimpleName()",
    "kind": "Method",
    "detail": "Function (FMinimalName)",
    "insertText": "GetSimpleName()"
  },
  {
    "label": "MakeWeakObjPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeWeakObjPtr(const UObject& Object)"
  },
  {
    "label": "GetStoredPath()",
    "kind": "Method",
    "detail": "Function (const FStoredObjectPath&)",
    "insertText": "GetStoredPath()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "StoreObjectPathId()",
    "kind": "Method",
    "detail": "Function (Index = 0 ; Number = 0 ; } private : template<NameProducerType> void)",
    "insertText": "StoreObjectPathId(NameProducerType& NameProducer)"
  },
  {
    "label": "WeakObjectMask()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "WeakObjectMask((~0u) >> 1)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 SimpleNameMask = WeakObjectMask>> 1 ; uint32 Index = 0 ; uint32 Number = 0 ; uint32)",
    "insertText": "GetTypeHash(FObjectPathId Value)"
  }
]