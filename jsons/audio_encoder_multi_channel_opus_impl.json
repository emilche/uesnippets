[
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "AudioEncoderMultiChannelOpusImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioEncoderMultiChannelOpusImpl"
  },
  {
    "label": "AudioEncoderMultiChannelOpus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioEncoderMultiChannelOpus"
  },
  {
    "label": "AudioEncoderMultiChannelOpusImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_CODECS_OPUS_AUDIO_ENCODER_MULTI_CHANNEL_OPUS_IMPL_H_ # define MODULES_AUDIO_CODING_CODECS_OPUS_AUDIO_ENCODER_MULTI_CHANNEL_OPUS_IMPL_H_ # include<memory> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / audio_codecs / audio_encoder . h \" # include \" api / audio_codecs / audio_format . h \" # include \" api / audio_codecs / opus / audio_encoder_multi_channel_opus_config . h \" # include \" api / units / time_delta . h \" # include \" modules / audio_coding / codecs / opus / opus_interface . h \" namespace webrtc { class RtcEventLog ; class AudioEncoderMultiChannelOpusImpl final : public AudioEncoder { public :)",
    "insertText": "AudioEncoderMultiChannelOpusImpl(const AudioEncoderMultiChannelOpusConfig& config, int payload_type)"
  },
  {
    "label": "AudioEncoderMultiChannelOpusImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioEncoderMultiChannelOpusImpl()"
  },
  {
    "label": "AudioEncoderMultiChannelOpusImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioEncoderMultiChannelOpusImpl(const AudioEncoderMultiChannelOpusImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioEncoderMultiChannelOpusImpl&)",
    "insertText": "operator(const AudioEncoderMultiChannelOpusImpl&)"
  },
  {
    "label": "GetPayloadName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetPayloadName()"
  },
  {
    "label": "SampleRateHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SampleRateHz()"
  },
  {
    "label": "NumChannels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "NumChannels()"
  },
  {
    "label": "Num10MsFramesInNextPacket()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Num10MsFramesInNextPacket()"
  },
  {
    "label": "Max10MsFramesInAPacket()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Max10MsFramesInAPacket()"
  },
  {
    "label": "GetTargetBitrate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTargetBitrate()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetFrameLengthRange()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::pair<TimeDelta,TimeDelta>>)",
    "insertText": "GetFrameLengthRange()"
  },
  {
    "label": "EncodeImpl()",
    "kind": "Method",
    "detail": "Function (protected : EncodedInfo)",
    "insertText": "EncodeImpl(uint32_t rtp_timestamp, rtc::ArrayView<const int16_t> audio, rtc::Buffer* encoded)"
  },
  {
    "label": "SdpToConfig()",
    "kind": "Method",
    "detail": "Function (private : absl::optional<AudioEncoderMultiChannelOpusConfig>)",
    "insertText": "SdpToConfig(const SdpAudioFormat& format)"
  },
  {
    "label": "QueryAudioEncoder()",
    "kind": "Method",
    "detail": "Function (AudioCodecInfo)",
    "insertText": "QueryAudioEncoder(const AudioEncoderMultiChannelOpusConfig& config)"
  },
  {
    "label": "MakeAudioEncoder()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<AudioEncoder>)",
    "insertText": "MakeAudioEncoder(const AudioEncoderMultiChannelOpusConfig&, int payload_type)"
  },
  {
    "label": "Num10msFramesPerPacket()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Num10msFramesPerPacket()"
  },
  {
    "label": "SamplesPer10msFrame()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SamplesPer10msFrame()"
  },
  {
    "label": "SufficientOutputBufferSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SufficientOutputBufferSize()"
  },
  {
    "label": "RecreateEncoderInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecreateEncoderInstance(const AudioEncoderMultiChannelOpusConfig& config)"
  },
  {
    "label": "SetFrameLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameLength(int frame_length_ms)"
  },
  {
    "label": "SetNumChannelsToEncode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumChannelsToEncode(size_t num_channels_to_encode)"
  },
  {
    "label": "SetProjectedPacketLossRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProjectedPacketLossRate(float fraction)"
  }
]