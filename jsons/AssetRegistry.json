[
  {
    "label": "FAsyncConsumer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncConsumer"
  },
  {
    "label": "UAssetRegistryImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetRegistryImpl"
  },
  {
    "label": "FFileChangeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileChangeData"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistryImpl . h \" # include \" UObject / Object . h \" # include \" AssetRegistry . generated . h \" namespace UE::AssetRegistry::Premade { struct FAsyncConsumer ; } PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "UCLASS(transient)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UAssetRegistryImpl(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "UAssetRegistryImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UAssetRegistryImpl(FVTableHelper& Helper)"
  },
  {
    "label": "UAssetRegistryImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UAssetRegistryImpl()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UAssetRegistryImpl&)",
    "insertText": "Get()"
  },
  {
    "label": "HasAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAssets(const FName PackagePath, const bool bRecursive = false)"
  },
  {
    "label": "GetAssetsByPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssetsByPackageName(FName PackageName, TArray<FAssetData>& OutAssetData, bool bIncludeOnlyOnDiskAssets = false, bool bSkipARFilteredAssets=true)"
  },
  {
    "label": "GetAssetsByPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssetsByPath(FName PackagePath, TArray<FAssetData>& OutAssetData, bool bRecursive = false, bool bIncludeOnlyOnDiskAssets = false)"
  },
  {
    "label": "GetAssetsByPaths()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssetsByPaths(TArray<FName> PackagePath, TArray<FAssetData>& OutAssetData, bool bRecursive = false, bool bIncludeOnlyOnDiskAssets = false)"
  },
  {
    "label": "GetAssetsByClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssetsByClass(FTopLevelAssetPath ClassPathName, TArray<FAssetData>& OutAssetData, bool bSearchSubClasses = false)"
  },
  {
    "label": "GetAssetsByTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssetsByTags(const TArray<FName>& AssetTags, TArray<FAssetData>& OutAssetData)"
  },
  {
    "label": "GetAssetsByTagValues()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssetsByTagValues(const TMultiMap<FName, FString>& AssetTagsAndValues, TArray<FAssetData>& OutAssetData)"
  },
  {
    "label": "GetAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssets(const FARFilter& Filter, TArray<FAssetData>& OutAssetData, bool bSkipARFilteredAssets = true)"
  },
  {
    "label": "GetAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssets(const FARCompiledFilter& Filter, TArray<FAssetData>& OutAssetData, bool bSkipARFilteredAssets = true)"
  },
  {
    "label": "GetInMemoryAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInMemoryAssets(const FARFilter& Filter, TArray<FAssetData>& OutAssetData, bool bSkipARFilteredAssets=true)"
  },
  {
    "label": "GetInMemoryAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInMemoryAssets(const FARCompiledFilter& Filter, TArray<FAssetData>& OutAssetData, bool bSkipARFilteredAssets=true)"
  },
  {
    "label": "EnumerateAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateAssets(const FARFilter& Filter, TFunctionRef<bool(const FAssetData&)> Callback, bool bSkipARFilteredAssets)"
  },
  {
    "label": "EnumerateAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateAssets(const FARCompiledFilter& Filter, TFunctionRef<bool(const FAssetData&)> Callback, bool bSkipARFilteredAssets)"
  },
  {
    "label": "EnumerateAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateAssets(const FARFilter& Filter, TFunctionRef<bool(const FAssetData&)> Callback)"
  },
  {
    "label": "EnumerateAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateAssets(const FARCompiledFilter& Filter, TFunctionRef<bool(const FAssetData&)> Callback)"
  },
  {
    "label": "EnumerateAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateAssets(const FARFilter& Filter, TFunctionRef<bool(const FAssetData&)> Callback, UE::AssetRegistry::EEnumerateAssetsFlags InEnumerateFlags)"
  },
  {
    "label": "EnumerateAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateAssets(const FARCompiledFilter& Filter, TFunctionRef<bool(const FAssetData&)> Callback, UE::AssetRegistry::EEnumerateAssetsFlags InEnumerateFlags)"
  },
  {
    "label": "GetAssetByObjectPath()",
    "kind": "Method",
    "detail": "Function (FAssetData)",
    "insertText": "GetAssetByObjectPath(const FSoftObjectPath& ObjectPath, bool bIncludeOnlyOnDiskAssets = false, bool bSkipARFilteredAssets = true)"
  },
  {
    "label": "TryGetAssetByObjectPath()",
    "kind": "Method",
    "detail": "Function (UE::AssetRegistry::EExists)",
    "insertText": "TryGetAssetByObjectPath(const FSoftObjectPath& ObjectPath, FAssetData& OutAssetData)"
  },
  {
    "label": "TryGetAssetPackageData()",
    "kind": "Method",
    "detail": "Function (UE::AssetRegistry::EExists)",
    "insertText": "TryGetAssetPackageData(const FName PackageName, FAssetPackageData& OutAssetPackageData)"
  },
  {
    "label": "TryGetAssetPackageData()",
    "kind": "Method",
    "detail": "Function (UE::AssetRegistry::EExists)",
    "insertText": "TryGetAssetPackageData(const FName PackageName, FAssetPackageData& OutAssetPackageData, FName& OutCorrectCasePackageName)"
  },
  {
    "label": "GetAllAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllAssets(TArray<FAssetData>& OutAssetData, bool bIncludeOnlyOnDiskAssets = false)"
  },
  {
    "label": "EnumerateAllAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateAllAssets(TFunctionRef<bool(const FAssetData&)> Callback, bool bIncludeOnlyOnDiskAssets)"
  },
  {
    "label": "EnumerateAllAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateAllAssets(TFunctionRef<bool(const FAssetData&)> Callback)"
  },
  {
    "label": "EnumerateAllAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateAllAssets(TFunctionRef<bool(const FAssetData&)> Callback, UE::AssetRegistry::EEnumerateAssetsFlags InEnumerateFlags)"
  },
  {
    "label": "GetPackagesByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPackagesByName(FStringView PackageName, TArray<FName>& OutPackageNames)"
  },
  {
    "label": "GetFirstPackageByName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFirstPackageByName(FStringView PackageName)"
  },
  {
    "label": "GetDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDependencies(const FAssetIdentifier& AssetIdentifier, TArray<FAssetIdentifier>& OutDependencies, UE::AssetRegistry::EDependencyCategory Category = UE::AssetRegistry::EDependencyCategory::All, const UE::AssetRegistry::FDependencyQuery& Flags = UE::AssetRegistry::FDependencyQuery())"
  },
  {
    "label": "GetDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDependencies(const FAssetIdentifier& AssetIdentifier, TArray<FAssetDependency>& OutDependencies, UE::AssetRegistry::EDependencyCategory Category = UE::AssetRegistry::EDependencyCategory::All, const UE::AssetRegistry::FDependencyQuery& Flags = UE::AssetRegistry::FDependencyQuery())"
  },
  {
    "label": "GetDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDependencies(FName PackageName, TArray<FName>& OutDependencies, UE::AssetRegistry::EDependencyCategory Category = UE::AssetRegistry::EDependencyCategory::Package, const UE::AssetRegistry::FDependencyQuery& Flags = UE::AssetRegistry::FDependencyQuery())"
  },
  {
    "label": "GetReferencers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReferencers(const FAssetIdentifier& AssetIdentifier, TArray<FAssetIdentifier>& OutReferencers, UE::AssetRegistry::EDependencyCategory Category = UE::AssetRegistry::EDependencyCategory::All, const UE::AssetRegistry::FDependencyQuery& Flags = UE::AssetRegistry::FDependencyQuery())"
  },
  {
    "label": "GetReferencers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReferencers(const FAssetIdentifier& AssetIdentifier, TArray<FAssetDependency>& OutReferencers, UE::AssetRegistry::EDependencyCategory Category = UE::AssetRegistry::EDependencyCategory::All, const UE::AssetRegistry::FDependencyQuery& Flags = UE::AssetRegistry::FDependencyQuery())"
  },
  {
    "label": "GetReferencers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReferencers(FName PackageName, TArray<FName>& OutReferencers, UE::AssetRegistry::EDependencyCategory Category = UE::AssetRegistry::EDependencyCategory::Package, const UE::AssetRegistry::FDependencyQuery& Flags = UE::AssetRegistry::FDependencyQuery())"
  },
  {
    "label": "GetAssetPackageDataCopy()",
    "kind": "Method",
    "detail": "Function (TOptional<FAssetPackageData>)",
    "insertText": "GetAssetPackageDataCopy(FName PackageName)"
  },
  {
    "label": "GetAssetPackageDatasCopy()",
    "kind": "Method",
    "detail": "Function (TArray<TOptional<FAssetPackageData>>)",
    "insertText": "GetAssetPackageDatasCopy(TArrayView<FName> PackageNames)"
  },
  {
    "label": "EnumerateAllPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateAllPackages(TFunctionRef<void(FName PackageName, const FAssetPackageData& PackageData)> Callback)"
  },
  {
    "label": "DoesPackageExistOnDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPackageExistOnDisk(FName PackageName, FString* OutCorrectCasePackageName = nullptr, FString* OutExtension = nullptr)"
  },
  {
    "label": "GetRedirectedObjectPath()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "GetRedirectedObjectPath(const FSoftObjectPath& ObjectPath)"
  },
  {
    "label": "GetAncestorClassNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAncestorClassNames(FTopLevelAssetPath ClassName, TArray<FTopLevelAssetPath>& OutAncestorClassNames)"
  },
  {
    "label": "GetDerivedClassNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDerivedClassNames(const TArray<FTopLevelAssetPath>& ClassNames, const TSet<FTopLevelAssetPath>& ExcludedClassNames, TSet<FTopLevelAssetPath>& OutDerivedClassNames)"
  },
  {
    "label": "GetAllCachedPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllCachedPaths(TArray<FString>& OutPathList)"
  },
  {
    "label": "EnumerateAllCachedPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateAllCachedPaths(TFunctionRef<bool(FString)> Callback)"
  },
  {
    "label": "EnumerateAllCachedPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateAllCachedPaths(TFunctionRef<bool(FName)> Callback)"
  },
  {
    "label": "GetSubPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSubPaths(const FString& InBasePath, TArray<FString>& OutPathList, bool bInRecurse)"
  },
  {
    "label": "GetSubPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSubPaths(const FName& InBasePath, TArray<FName>& OutPathList, bool bInRecurse)"
  },
  {
    "label": "EnumerateSubPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateSubPaths(const FString& InBasePath, TFunctionRef<bool(FString)> Callback, bool bInRecurse)"
  },
  {
    "label": "EnumerateSubPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateSubPaths(const FName InBasePath, TFunctionRef<bool(FName)> Callback, bool bInRecurse)"
  },
  {
    "label": "RunAssetsThroughFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunAssetsThroughFilter(TArray<FAssetData>& AssetDataList, const FARFilter& Filter)"
  },
  {
    "label": "UseFilterToExcludeAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseFilterToExcludeAssets(TArray<FAssetData>& AssetDataList, const FARFilter& Filter)"
  },
  {
    "label": "UseFilterToExcludeAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseFilterToExcludeAssets(TArray<FAssetData>& AssetDataList, const FARCompiledFilter& CompiledFilter)"
  },
  {
    "label": "IsAssetIncludedByFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetIncludedByFilter(const FAssetData& AssetData, const FARCompiledFilter& Filter)"
  },
  {
    "label": "IsAssetExcludedByFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetExcludedByFilter(const FAssetData& AssetData, const FARCompiledFilter& Filter)"
  },
  {
    "label": "CompileFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileFilter(const FARFilter& InFilter, FARCompiledFilter& OutCompiledFilter)"
  },
  {
    "label": "SetTemporaryCachingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTemporaryCachingMode(bool bEnable)"
  },
  {
    "label": "SetTemporaryCachingModeInvalidated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTemporaryCachingModeInvalidated()"
  },
  {
    "label": "GetTemporaryCachingMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTemporaryCachingMode()"
  },
  {
    "label": "GetAssetAvailability()",
    "kind": "Method",
    "detail": "Function (EAssetAvailability::Type)",
    "insertText": "GetAssetAvailability(const FAssetData& AssetData)"
  },
  {
    "label": "GetAssetAvailabilityProgress()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAssetAvailabilityProgress(const FAssetData& AssetData, EAssetAvailabilityProgressReportingType::Type ReportType)"
  },
  {
    "label": "GetAssetAvailabilityProgressTypeSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssetAvailabilityProgressTypeSupported(EAssetAvailabilityProgressReportingType::Type ReportType)"
  },
  {
    "label": "PrioritizeAssetInstall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrioritizeAssetInstall(const FAssetData& AssetData)"
  },
  {
    "label": "HasVerseFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVerseFiles(FName PackagePath, bool bRecursive = false)"
  },
  {
    "label": "GetVerseFilesByPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVerseFilesByPath(FName PackagePath, TArray<FName>& OutFilePaths, bool bRecursive = false)"
  },
  {
    "label": "AddPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddPath(const FString& PathToAdd)"
  },
  {
    "label": "RemovePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePath(const FString& PathToRemove)"
  },
  {
    "label": "PathExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PathExists(const FString& PathToTest)"
  },
  {
    "label": "PathExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PathExists(const FName PathToTest)"
  },
  {
    "label": "SearchAllAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchAllAssets(bool bSynchronousSearch)"
  },
  {
    "label": "IsSearchAllAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSearchAllAssets()"
  },
  {
    "label": "IsSearchAsync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSearchAsync()"
  },
  {
    "label": "WaitForCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForCompletion()"
  },
  {
    "label": "WaitForPremadeAssetRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForPremadeAssetRegistry()"
  },
  {
    "label": "ClearGathererCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearGathererCache()"
  },
  {
    "label": "WaitForPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForPackage(const FString& PackageName)"
  },
  {
    "label": "ScanSynchronous()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScanSynchronous(const TArray<FString>& InPaths, const TArray<FString>& InFilePaths, UE::AssetRegistry::EScanFlags InScanFlags = UE::AssetRegistry::EScanFlags::None)"
  },
  {
    "label": "ScanPathsSynchronous()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScanPathsSynchronous(const TArray<FString>& InPaths, bool bForceRescan = false, bool bIgnoreDenyListScanFilters = false)"
  },
  {
    "label": "ScanFilesSynchronous()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScanFilesSynchronous(const TArray<FString>& InFilePaths, bool bForceRescan = false)"
  },
  {
    "label": "PrioritizeSearchPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrioritizeSearchPath(const FString& PathToPrioritize)"
  },
  {
    "label": "ScanModifiedAssetFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScanModifiedAssetFiles(const TArray<FString>& InFilePaths)"
  },
  {
    "label": "ScanModifiedAssetFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScanModifiedAssetFiles(const TArray<FString>& InFilePaths, UE::AssetRegistry::EScanFlags ScanFlags)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "AppendState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendState(const FAssetRegistryState& InState)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedSize(bool bLogDetailed = false)"
  },
  {
    "label": "LoadPackageRegistryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadPackageRegistryData(FArchive& Ar, FLoadPackageRegistryData& InOutData)"
  },
  {
    "label": "LoadPackageRegistryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadPackageRegistryData(const FString& PackageFilename, FLoadPackageRegistryData& InOutData)"
  },
  {
    "label": "InitializeTemporaryAssetRegistryState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTemporaryAssetRegistryState(FAssetRegistryState& OutState, const FAssetRegistrySerializationOptions& Options, bool bRefreshExisting = false, const TSet<FName>& RequiredPackages = TSet<FName>(), const TSet<FName>& RemovePackages = TSet<FName>())"
  },
  {
    "label": "DumpState()",
    "kind": "Method",
    "detail": "Function (# if ASSET_REGISTRY_STATE_DUMPING_ENABLED void)",
    "insertText": "DumpState(const TArray<FString>& Arguments, TArray<FString>& OutPages, int32 LinesPerPage = 1)"
  },
  {
    "label": "GetAssetRegistryState()",
    "kind": "Method",
    "detail": "Function (# endif const FAssetRegistryState*)",
    "insertText": "GetAssetRegistryState()"
  },
  {
    "label": "GetCachedEmptyPackagesCopy()",
    "kind": "Method",
    "detail": "Function (TSet<FName>)",
    "insertText": "GetCachedEmptyPackagesCopy()"
  },
  {
    "label": "GetCachedEmptyPackages()",
    "kind": "Method",
    "detail": "Function (const TSet<FName>&)",
    "insertText": "GetCachedEmptyPackages()"
  },
  {
    "label": "ContainsTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsTag(FName TagName)"
  },
  {
    "label": "InitializeSerializationOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSerializationOptions(FAssetRegistrySerializationOptions& Options, const FString& PlatformIniName = FString(), UE::AssetRegistry::ESerializationTarget Target = UE::AssetRegistry::ESerializationTarget::ForGame)"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FFilesBlockedEvent, FFilesBlockedEvent)"
  },
  {
    "label": "OnFilesBlocked()",
    "kind": "Method",
    "detail": "Function (FFilesBlockedEvent&)",
    "insertText": "OnFilesBlocked()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FPathsEvent, FPathsEvent)"
  },
  {
    "label": "OnPathsAdded()",
    "kind": "Method",
    "detail": "Function (FPathsEvent&)",
    "insertText": "OnPathsAdded()"
  },
  {
    "label": "OnPathsRemoved()",
    "kind": "Method",
    "detail": "Function (FPathsEvent&)",
    "insertText": "OnPathsRemoved()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FPathAddedEvent, FPathAddedEvent)"
  },
  {
    "label": "OnPathAdded()",
    "kind": "Method",
    "detail": "Function (FPathAddedEvent&)",
    "insertText": "OnPathAdded()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FPathRemovedEvent, FPathRemovedEvent)"
  },
  {
    "label": "OnPathRemoved()",
    "kind": "Method",
    "detail": "Function (FPathRemovedEvent&)",
    "insertText": "OnPathRemoved()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FScanStartedEvent, FScanStartedEvent)"
  },
  {
    "label": "OnScanStarted()",
    "kind": "Method",
    "detail": "Function (FScanStartedEvent&)",
    "insertText": "OnScanStarted()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FScanEndedEvent, FScanEndedEvent)"
  },
  {
    "label": "OnScanEnded()",
    "kind": "Method",
    "detail": "Function (FScanEndedEvent&)",
    "insertText": "OnScanEnded()"
  },
  {
    "label": "AssetCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetCreated(UObject* NewAsset)"
  },
  {
    "label": "AssetDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetDeleted(UObject* DeletedAsset)"
  },
  {
    "label": "AssetRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetRenamed(const UObject* RenamedAsset, const FString& OldObjectPath)"
  },
  {
    "label": "AssetsSaved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetsSaved(TArray<FAssetData>&& SavedAssets)"
  },
  {
    "label": "AssetUpdateTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetUpdateTags(UObject* Object, EAssetRegistryTagsCaller Caller)"
  },
  {
    "label": "AssetTagsFinalized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetTagsFinalized(const UObject& FinalizedAsset)"
  },
  {
    "label": "VerseCreated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerseCreated(const FString& FilePath)"
  },
  {
    "label": "VerseDeleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerseDeleted(const FString& FilePath)"
  },
  {
    "label": "PackageDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PackageDeleted(UPackage* DeletedPackage)"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FAssetAddedEvent, FAssetAddedEvent)"
  },
  {
    "label": "OnAssetAdded()",
    "kind": "Method",
    "detail": "Function (FAssetAddedEvent&)",
    "insertText": "OnAssetAdded()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FAssetRemovedEvent, FAssetRemovedEvent)"
  },
  {
    "label": "OnAssetRemoved()",
    "kind": "Method",
    "detail": "Function (FAssetRemovedEvent&)",
    "insertText": "OnAssetRemoved()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FAssetRenamedEvent, FAssetRenamedEvent)"
  },
  {
    "label": "OnAssetRenamed()",
    "kind": "Method",
    "detail": "Function (FAssetRenamedEvent&)",
    "insertText": "OnAssetRenamed()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FAssetUpdatedEvent, FAssetUpdatedEvent)"
  },
  {
    "label": "OnAssetUpdated()",
    "kind": "Method",
    "detail": "Function (FAssetUpdatedEvent&)",
    "insertText": "OnAssetUpdated()"
  },
  {
    "label": "OnAssetUpdatedOnDisk()",
    "kind": "Method",
    "detail": "Function (FAssetUpdatedEvent&)",
    "insertText": "OnAssetUpdatedOnDisk()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FAssetsEvent, FAssetsEvent)"
  },
  {
    "label": "OnAssetsAdded()",
    "kind": "Method",
    "detail": "Function (FAssetsEvent&)",
    "insertText": "OnAssetsAdded()"
  },
  {
    "label": "OnAssetsRemoved()",
    "kind": "Method",
    "detail": "Function (FAssetsEvent&)",
    "insertText": "OnAssetsRemoved()"
  },
  {
    "label": "OnAssetsUpdated()",
    "kind": "Method",
    "detail": "Function (FAssetsEvent&)",
    "insertText": "OnAssetsUpdated()"
  },
  {
    "label": "OnAssetsUpdatedOnDisk()",
    "kind": "Method",
    "detail": "Function (FAssetsEvent&)",
    "insertText": "OnAssetsUpdatedOnDisk()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FInMemoryAssetCreatedEvent, FInMemoryAssetCreatedEvent)"
  },
  {
    "label": "OnInMemoryAssetCreated()",
    "kind": "Method",
    "detail": "Function (FInMemoryAssetCreatedEvent&)",
    "insertText": "OnInMemoryAssetCreated()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FInMemoryAssetDeletedEvent, FInMemoryAssetDeletedEvent)"
  },
  {
    "label": "OnInMemoryAssetDeleted()",
    "kind": "Method",
    "detail": "Function (FInMemoryAssetDeletedEvent&)",
    "insertText": "OnInMemoryAssetDeleted()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FVerseAddedEvent, FVerseAddedEvent)"
  },
  {
    "label": "OnVerseAdded()",
    "kind": "Method",
    "detail": "Function (FVerseAddedEvent&)",
    "insertText": "OnVerseAdded()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FVerseRemovedEvent, FVerseRemovedEvent)"
  },
  {
    "label": "OnVerseRemoved()",
    "kind": "Method",
    "detail": "Function (FVerseRemovedEvent&)",
    "insertText": "OnVerseRemoved()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FFilesLoadedEvent, FFilesLoadedEvent)"
  },
  {
    "label": "OnFilesLoaded()",
    "kind": "Method",
    "detail": "Function (FFilesLoadedEvent&)",
    "insertText": "OnFilesLoaded()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(UAssetRegistryImpl, IAssetRegistry::FFileLoadProgressUpdatedEvent, FFileLoadProgressUpdatedEvent)"
  },
  {
    "label": "OnFileLoadProgressUpdated()",
    "kind": "Method",
    "detail": "Function (FFileLoadProgressUpdatedEvent&)",
    "insertText": "OnFileLoadProgressUpdated()"
  },
  {
    "label": "IsLoadingAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoadingAssets()"
  },
  {
    "label": "ShouldUpdateDiskCacheAfterLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUpdateDiskCacheAfterLoad()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA return bUpdateDiskCacheAfterLoad ; # else return false ; # endif } void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "ReadLockEnumerateAllTagToAssetDatas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadLockEnumerateAllTagToAssetDatas(TFunctionRef<bool(FName TagName, IAssetRegistry::FEnumerateAssetDatasFunc EnumerateAssets)> Callback)"
  },
  {
    "label": "IsPathBeautificationNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPathBeautificationNeeded(const FString& InAssetPath)"
  },
  {
    "label": "TickOnBackgroundThread()",
    "kind": "Method",
    "detail": "Function (UE::AssetRegistry::Impl::EGatherStatus)",
    "insertText": "TickOnBackgroundThread()"
  },
  {
    "label": "SetManageReferences()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetManageReferences(const TMultiMap<FAssetIdentifier, FAssetIdentifier>& ManagerMap, bool bClearExisting, UE::AssetRegistry::EDependencyCategory RecurseType, TSet<FDependsNode*>& ExistingManagedNodes, ShouldSetManagerPredicate ShouldSetManager = nullptr)"
  },
  {
    "label": "SetPrimaryAssetIdForObjectPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPrimaryAssetIdForObjectPath(const FSoftObjectPath& ObjectPath, FPrimaryAssetId PrimaryAssetId)"
  },
  {
    "label": "OnPreExit()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnPreExit()"
  },
  {
    "label": "OnFEngineLoopInitCompleteSearchAllAssets()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "OnFEngineLoopInitCompleteSearchAllAssets()"
  },
  {
    "label": "OnAssetDependencyGathererRegistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetDependencyGathererRegistered()"
  },
  {
    "label": "InitializeEvents()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "InitializeEvents(UE::AssetRegistry::Impl::FInitializeContext& Context)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Broadcast(UE::AssetRegistry::Impl::FEventContext& EventContext, bool bAllowFileLoadedEvent = false)"
  },
  {
    "label": "OnResolveRedirect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnResolveRedirect(const FString& InPackageName, FString& OutPackageName)"
  },
  {
    "label": "OnDirectoryChanged()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "OnDirectoryChanged(const TArray<struct FFileChangeData>& Files)"
  },
  {
    "label": "OnAssetLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetLoaded(UObject* AssetLoaded)"
  },
  {
    "label": "OnContentPathMounted()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "OnContentPathMounted(const FString& AssetPath, const FString& FileSystemPath)"
  },
  {
    "label": "OnContentPathDismounted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContentPathDismounted(const FString& AssetPath, const FString& FileSystemPath)"
  },
  {
    "label": "OnPostEngineInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostEngineInit()"
  },
  {
    "label": "OnInitialPluginLoadingComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitialPluginLoadingComplete()"
  },
  {
    "label": "ScanPathsSynchronousInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScanPathsSynchronousInternal(const TArray<FString>& InDirs, const TArray<FString>& InFiles, UE::AssetRegistry::EScanFlags InScanFlags)"
  },
  {
    "label": "ProcessLoadedAssetsToUpdateCache()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "ProcessLoadedAssetsToUpdateCache(UE::AssetRegistry::Impl::FEventContext& EventContext, UE::AssetRegistry::Impl::EGatherStatus Status, UE::AssetRegistry::Impl::FInterruptionContext& InOutInterruptionContext)"
  },
  {
    "label": "GetInheritanceContextWithRequiredLock()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetInheritanceContextWithRequiredLock(UE::AssetRegistry::FInterfaceRWScopeLock& InOutScopeLock, UE::AssetRegistry::Impl::FClassInheritanceContext& InheritanceContext, UE::AssetRegistry::Impl::FClassInheritanceBuffer& StackBuffer)"
  },
  {
    "label": "GetInheritanceContextWithRequiredLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInheritanceContextWithRequiredLock(UE::AssetRegistry::FInterfaceWriteScopeLock& InOutScopeLock, UE::AssetRegistry::Impl::FClassInheritanceContext& InheritanceContext, UE::AssetRegistry::Impl::FClassInheritanceBuffer& StackBuffer)"
  },
  {
    "label": "GetInheritanceContextAfterVerifyingLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInheritanceContextAfterVerifyingLock(uint64 CurrentGeneratorClassesVersionNumber, uint64 CurrentAllClassesVersionNumber, UE::AssetRegistry::Impl::FClassInheritanceContext& InheritanceContext, UE::AssetRegistry::Impl::FClassInheritanceBuffer& StackBuffer)"
  },
  {
    "label": "OnGetExtraObjectTags()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "OnGetExtraObjectTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "IsDirAlreadyWatchedByRootWatchers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirAlreadyWatchedByRootWatchers(const FString& Directory)"
  },
  {
    "label": "RequestPauseBackgroundProcessing()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RequestPauseBackgroundProcessing()"
  },
  {
    "label": "RequestResumeBackgroundProcessing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestResumeBackgroundProcessing()"
  },
  {
    "label": "IsBackgroundProcessingPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBackgroundProcessingPaused()"
  },
  {
    "label": "SIZE_T()",
    "kind": "Method",
    "detail": "Function (# else return true ; # endif } private : UE::AssetRegistry::FAssetRegistryImpl GuardedData ; UE::AssetRegistry::Private::FRWLockWithPriority InterfaceLock ; FCriticalSection GatheredDataProcessingLock ; # if WITH_EDITOR TMap<FString,FDelegateHandle> OnDirectoryChangedDelegateHandles ; TArray<FString> DirectoryWatchRoots ; # endif # if WITH_EDITORONLY_DATA bool bAddMetaDataTagsToOnGetExtraObjectTags = true ; bool bUpdateDiskCacheAfterLoad = true ; # endif FFilesBlockedEvent FilesBlockedEvent ; FPathsEvent PathsAddedEvent ; FPathsEvent PathsRemovedEvent ; FPathAddedEvent PathAddedEvent ; FPathRemovedEvent PathRemovedEvent ; FAssetAddedEvent AssetAddedEvent ; FAssetRemovedEvent AssetRemovedEvent ; FAssetRenamedEvent AssetRenamedEvent ; FAssetUpdatedEvent AssetUpdatedEvent ; FAssetUpdatedEvent AssetUpdatedOnDiskEvent ; SIZE_T NumBatchedEvents = static_cast<)",
    "insertText": "SIZE_T(UE::AssetRegistry::Impl::FEventContext::EEvent::MAX)"
  }
]