[
  {
    "label": "FSourceMeshDataForDerivedDataTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSourceMeshDataForDerivedDataTask"
  },
  {
    "label": "FMeshBuildDataProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshBuildDataProvider"
  },
  {
    "label": "FEmbreeTriangleDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmbreeTriangleDesc"
  },
  {
    "label": "FEmbreeGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmbreeGeometry"
  },
  {
    "label": "FEmbreeScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmbreeScene"
  },
  {
    "label": "FEmbreeRay",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmbreeRay"
  },
  {
    "label": "FEmbreeIntersectionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmbreeIntersectionContext"
  },
  {
    "label": "FMeshBuildDataProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MeshUtilities . h \" # include \" kDOP . h \" # if USE_EMBREE # include<embree3 / rtcore . h> # include<embree3 / rtcore_ray . h> # else typedef void* RTCDevice ; typedef void* RTCScene ; typedef void* RTCGeometry ; # endif class FSourceMeshDataForDerivedDataTask ; class FMeshBuildDataProvider { public :)",
    "insertText": "FMeshBuildDataProvider(const TkDOPTree<const FMeshBuildDataProvider, uint32>& InkDopTree) : kDopTree(InkDopTree)"
  },
  {
    "label": "GetkDOPTree()",
    "kind": "Method",
    "detail": "Function (} const TkDOPTree<const FMeshBuildDataProvider,uint32>&)",
    "insertText": "GetkDOPTree(void)"
  },
  {
    "label": "GetHitNormal()",
    "kind": "Method",
    "detail": "Function (hit . u = hit . v = 0 ; ray . time = 0 ; ray . mask = 0 xFFFFFFFF ; hit . geomID = RTC_INVALID_GEOMETRY_ID ; hit . instID [ 0 ] = RTC_INVALID_GEOMETRY_ID ; hit . primID = RTC_INVALID_GEOMETRY_ID ; } FVector3f)",
    "insertText": "GetHitNormal()"
  },
  {
    "label": "IsHitTwoSided()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHitTwoSided()"
  },
  {
    "label": "GetTangentBasisFrisvad()",
    "kind": "Method",
    "detail": "Function (FMatrix44f)",
    "insertText": "GetTangentBasisFrisvad(FVector3f TangentZ)"
  },
  {
    "label": "SetupEmbreeScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupEmbreeScene(FString MeshName, const FSourceMeshDataForDerivedDataTask& SourceMeshData, const FStaticMeshLODResources& LODModel, const TArray<FSignedDistanceFieldBuildSectionData>& SectionData, bool bGenerateAsIfTwoSided, bool bIncludeTranslucentTriangles, FEmbreeScene& EmbreeScene)"
  },
  {
    "label": "DeleteEmbreeScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteEmbreeScene(FEmbreeScene& EmbreeScene)"
  }
]