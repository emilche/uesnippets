[
  {
    "label": "ir_variable_compare",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ir_variable_compare"
  },
  {
    "label": "glsl_uniform_block",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "glsl_uniform_block"
  },
  {
    "label": "ir_variable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ir_variable"
  },
  {
    "label": "SCBufferMember",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SCBufferMember"
  },
  {
    "label": "SCBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SCBuffer"
  },
  {
    "label": "glsl_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "glsl_type"
  },
  {
    "label": "EArrayType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EArrayType"
  },
  {
    "label": "glsl_packed_uniform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "glsl_packed_uniform"
  },
  {
    "label": "_mesa_glsl_parser_targets",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_mesa_glsl_parser_targets"
  },
  {
    "label": "gl_context",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "gl_context"
  },
  {
    "label": "glsl_switch_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "glsl_switch_state"
  },
  {
    "label": "ast_switch_statement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ast_switch_statement"
  },
  {
    "label": "hash_table",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hash_table"
  },
  {
    "label": "ast_case_label",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ast_case_label"
  },
  {
    "label": "_mesa_glsl_parse_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_mesa_glsl_parse_state"
  },
  {
    "label": "ILanguageSpec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ILanguageSpec"
  },
  {
    "label": "ir_function_signature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ir_function_signature"
  },
  {
    "label": "ast_iteration_statement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ast_iteration_statement"
  },
  {
    "label": "YYLTYPE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "YYLTYPE"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef GLSL_PARSER_EXTRAS_H # define GLSL_PARSER_EXTRAS_H # ifdef __cplusplus # include<map> # include<list> # include<set> # include<limits> # include \" glsl_symbol_table . h \" struct ir_variable_compare { bool)",
    "insertText": "operator() (const ir_variable* const& lhs, const ir_variable* const& rhs)"
  },
  {
    "label": "alloc()",
    "kind": "Method",
    "detail": "Function (} ; typedef std::set<ir_variable*,ir_variable_compare> TIRVarSet ; typedef std::map<ir_variable*,TIRVarSet,ir_variable_compare> TIRVarSetMap ; typedef std::set<std::string> TStringSet ; typedef std::map<std::string,TStringSet> TStringToSetMap ; struct glsl_uniform_block { const char* name ; unsigned num_vars ; class ir_variable* vars [ 1 ] ; glsl_uniform_block*)",
    "insertText": "alloc(void* mem_ctx, unsigned num)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size_t block_size =)",
    "insertText": "sizeof(glsl_uniform_block)+ (num - 1) * sizeof(ir_variable*)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (glsl_uniform_block*)",
    "insertText": "block(glsl_uniform_block*)rzalloc_size(mem_ctx, block_size)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (block -> num_vars = num ; return block ; } } ; struct SCBufferMember { std::string Name ; unsigned OffsetInFloats ; unsigned SizeInFloats ; unsigned NumColumns ; unsigned NumRows ; unsigned NumArrayElements ; ir_variable* Var ; } ; typedef std::list<SCBufferMember> TCBufferMembers ; struct SCBuffer { std::string Name ; TCBufferMembers Members ; void)",
    "insertText": "AddMember(const struct glsl_type * field_type, ir_variable* var)"
  },
  {
    "label": "CalculateMemberInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateMemberInfo(unsigned& SizeInFloats, unsigned& StartOffset, const struct glsl_type * field_type, unsigned* OutLastRowElement = NULL)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TCBufferMembers::iterator)",
    "insertText": "Find(ir_variable* Var)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(ir_variable* Var)"
  },
  {
    "label": "ConvertArrayTypeToIndex()",
    "kind": "Method",
    "detail": "Function (} } ; typedef std::list<SCBuffer> TCBuffers ; enum EArrayType { EArrayType_FloatHighp = ' h ',EArrayType_FloatMediump = ' m ',EArrayType_FloatLowp = ' l ',EArrayType_Int = ' i ',EArrayType_UInt = ' u ',EArrayType_Sampler = ' s ',EArrayType_Image = ' g ',EArrayType_Index_FloatHighp = 0,EArrayType_Index_FloatMediump = 1,EArrayType_Index_FloatLowp = 2,EArrayType_Index_Int = 3,EArrayType_Index_UInt = 4,EArrayType_Index_Sampler = 5,EArrayType_Index_Image = 6,} ; int)",
    "insertText": "ConvertArrayTypeToIndex(EArrayType Type)"
  },
  {
    "label": "glsl_packed_uniform()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } struct glsl_packed_uniform { std::string Name ; unsigned offset ; unsigned num_components ; std::string CB_PackedSampler ; unsigned OffsetIntoCBufferInFloats ; unsigned SizeInFloats ;)",
    "insertText": "glsl_packed_uniform() : Name(\"<INVALID>\"), offset(0), num_components(0), CB_PackedSampler(\"\"), OffsetIntoCBufferInFloats(0), SizeInFloats(0)"
  },
  {
    "label": "glsl_variable_tag_from_parser_target()",
    "kind": "Method",
    "detail": "Function (} } ; enum _mesa_glsl_parser_targets { vertex_shader,geometry_shader,fragment_shader,tessellation_control_shader,tessellation_evaluation_shader,compute_shader } ; const char*)",
    "insertText": "glsl_variable_tag_from_parser_target(const _mesa_glsl_parser_targets target)"
  },
  {
    "label": "_mesa_glsl_parse_state()",
    "kind": "Method",
    "detail": "Function (} } ; struct _mesa_glsl_parse_state {)",
    "insertText": "_mesa_glsl_parse_state(void *mem_ctx, _mesa_glsl_parser_targets target, struct ILanguageSpec* InBackendLanguage, int glsl_version)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* operator)",
    "insertText": "new(size_t size, void *ctx)"
  },
  {
    "label": "rzalloc_size()",
    "kind": "Method",
    "detail": "Function (void* mem =)",
    "insertText": "rzalloc_size(ctx, size)"
  },
  {
    "label": "ralloc_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ralloc_free(mem)"
  },
  {
    "label": "AddUserStruct()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddUserStruct(const glsl_type* Type)"
  },
  {
    "label": "FindCBufferByName()",
    "kind": "Method",
    "detail": "Function (void* scanner ; const char* base_source_file ; const char* current_source_file ; exec_list translation_unit ; glsl_symbol_table* symbols ; struct ILanguageSpec* LanguageSpec ; bool bFlattenUniformBuffers ; bool bGenerateES ; bool bSeparateShaderObjects ; unsigned language_version ; enum _mesa_glsl_parser_targets target ; int maxunrollcount ; unsigned maxvertexcount ; unsigned geometryinput ; unsigned outputstream_type ; bool bGenerateLayoutLocations ; unsigned next_in_location_slot ; unsigned next_out_location_slot ; glsl_tessellation_info tessellation ; bool adjust_clip_space_dx11_to_opengl ; class ir_function_signature* current_function ; exec_list* toplevel_ir ; bool found_return ; bool error ; bool all_invariant ; class ast_iteration_statement* loop_nesting_ast ; struct glsl_switch_state switch_state ; const glsl_type** user_structures ; unsigned num_user_structures ; const glsl_uniform_block** uniform_blocks ; unsigned num_uniform_blocks ; typedef std::list<glsl_packed_uniform> TUniformList ; typedef std::map<char,TUniformList> TPackedArraysMap ; typedef std::map<std::string,TPackedArraysMap> TCBPackedArraysMap ; TPackedArraysMap GlobalPackedArraysMap ; TCBPackedArraysMap CBPackedArraysMap ; TCBuffers CBuffersOriginal ; TCBuffers CBuffersStructuresFlattened ; SCBuffer*)",
    "insertText": "FindCBufferByName(bool bFlattenStructure, const char* CBName)"
  },
  {
    "label": "FindOffsetIntoCBufferInFloats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindOffsetIntoCBufferInFloats(bool bFlattenStructure, const char* CBName, const char* Member, unsigned& OffsetInCBInFloats, unsigned& SizeInFloats)"
  },
  {
    "label": "FindPackedSamplerEntry()",
    "kind": "Method",
    "detail": "Function (const glsl_packed_uniform*)",
    "insertText": "FindPackedSamplerEntry(const char* Name)"
  },
  {
    "label": "YYLLOC_DEFAULT()",
    "kind": "Method",
    "detail": "Function (bool has_packed_uniforms ; char* info_log ; TStringToSetMap TextureToSamplerMap ; bool conservative_propagation ; bool bInBackEnd = false ; } ; typedef struct YYLTYPE { int first_line ; int first_column ; int last_line ; int last_column ; const char* source_file ; } YYLTYPE ; # define YYLTYPE_IS_DECLARED 1 # define YYLTYPE_IS_TRIVIAL 1 # define)",
    "insertText": "YYLLOC_DEFAULT(Current, Rhs, N)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(N)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "else(Current).first_line = (Current).last_line = \\ YYRHSLOC(Rhs, 0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) extern void _mesa_glsl_error(YYLTYPE *locp, _mesa_glsl_parse_state *state, const char *fmt, ...)"
  },
  {
    "label": "_mesa_glsl_error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mesa_glsl_error(_mesa_glsl_parse_state *state, const char *fmt, ...)"
  },
  {
    "label": "_mesa_glsl_warning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mesa_glsl_warning(const YYLTYPE *locp, _mesa_glsl_parse_state *state, const char *fmt, ...)"
  },
  {
    "label": "_mesa_glsl_warning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mesa_glsl_warning(_mesa_glsl_parse_state *state, const char *fmt, ...)"
  },
  {
    "label": "_mesa_glsl_lexer_ctor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mesa_glsl_lexer_ctor(struct _mesa_glsl_parse_state *state, const char *string)"
  },
  {
    "label": "_mesa_glsl_lexer_dtor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mesa_glsl_lexer_dtor(struct _mesa_glsl_parse_state *state)"
  },
  {
    "label": "_mesa_glsl_lex()",
    "kind": "Method",
    "detail": "Function (union YYSTYPE ; int)",
    "insertText": "_mesa_glsl_lex(union YYSTYPE *yylval, YYLTYPE *yylloc, void *scanner)"
  },
  {
    "label": "_mesa_glsl_parse()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_mesa_glsl_parse(struct _mesa_glsl_parse_state *)"
  },
  {
    "label": "_mesa_hlsl_lexer_ctor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mesa_hlsl_lexer_ctor(struct _mesa_glsl_parse_state *state, const char *string)"
  },
  {
    "label": "_mesa_hlsl_lexer_dtor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mesa_hlsl_lexer_dtor(struct _mesa_glsl_parse_state *state)"
  },
  {
    "label": "_mesa_hlsl_lex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_mesa_hlsl_lex(union YYSTYPE *yylval, YYLTYPE *yylloc, void *scanner)"
  },
  {
    "label": "_mesa_hlsl_parse()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_mesa_hlsl_parse(struct _mesa_glsl_parse_state *)"
  },
  {
    "label": "_mesa_glsl_shader_target_name()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "_mesa_glsl_shader_target_name(enum _mesa_glsl_parser_targets target)"
  },
  {
    "label": "preprocess()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "preprocess(void *ctx, const char **shader, char **info_log)"
  }
]