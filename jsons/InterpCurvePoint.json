[
  {
    "label": "EInterpCurveMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInterpCurveMode"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FInterpCurvePoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInterpCurvePoint"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "FInterpCurvePoint()",
    "kind": "Method",
    "detail": "Function (FORCEINLINE)",
    "insertText": "FInterpCurvePoint(EForceInit)"
  },
  {
    "label": "ClampFloatTangent()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ClampFloatTangent( float PrevPointVal, float PrevTime, float CurPointVal, float CurTime, float NextPointVal, float NextTime )"
  },
  {
    "label": "AutoCalcTangent()",
    "kind": "Method",
    "detail": "Function (needed)",
    "insertText": "AutoCalcTangent( PrevPoint, CurPoint, NextPoint, Tension, OutTangent )"
  },
  {
    "label": "CurveFloatFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "CurveFloatFindIntervalBounds( const FInterpCurvePoint<float>& Start, const FInterpCurvePoint<float>& End, float& CurrentMin, float& CurrentMax )"
  },
  {
    "label": "CurveVector2DFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "CurveVector2DFindIntervalBounds( const FInterpCurvePoint<FVector2D>& Start, const FInterpCurvePoint<FVector2D>& End, FVector2D& CurrentMin, FVector2D& CurrentMax )"
  },
  {
    "label": "CurveVectorFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "CurveVectorFindIntervalBounds( const FInterpCurvePoint<FVector>& Start, const FInterpCurvePoint<FVector>& End, FVector& CurrentMin, FVector& CurrentMax )"
  },
  {
    "label": "CurveTwoVectorsFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "CurveTwoVectorsFindIntervalBounds(const FInterpCurvePoint<FTwoVectors>& Start, const FInterpCurvePoint<FTwoVectors>& End, FTwoVectors& CurrentMin, FTwoVectors& CurrentMax)"
  },
  {
    "label": "CurveLinearColorFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "CurveLinearColorFindIntervalBounds( const FInterpCurvePoint<FLinearColor>& Start, const FInterpCurvePoint<FLinearColor>& End, FLinearColor& CurrentMin, FLinearColor& CurrentMax )"
  }
]