[
  {
    "label": "EInterpCurveMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInterpCurveMode"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FInterpCurvePoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInterpCurvePoint"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "FInterpCurvePoint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" Containers / EnumAsByte . h \" # include \" Math / Vector . h \" # include \" Math / Quat . h \" # include \" Math / TwoVectors . h \" enum EInterpCurveMode { CIM_Linear,CIM_CurveAuto,CIM_Constant,CIM_CurveUser,CIM_CurveBreak,CIM_CurveAutoClamped,CIM_Unknown } ; template<class T> class FInterpCurvePoint { public : float InVal ; T OutVal ; T ArriveTangent ; T LeaveTangent ; TEnumAsByte<EInterpCurveMode> InterpMode ; public :)",
    "insertText": "FInterpCurvePoint()"
  },
  {
    "label": "FInterpCurvePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInterpCurvePoint(const float In, const T &Out)"
  },
  {
    "label": "FInterpCurvePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInterpCurvePoint(const float In, const T &Out, const T &InArriveTangent, const T &InLeaveTangent, const EInterpCurveMode InInterpMode)"
  },
  {
    "label": "FInterpCurvePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInterpCurvePoint(EForceInit)"
  },
  {
    "label": "IsCurveKey()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsCurveKey()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : FArchive&)",
    "insertText": "operator(FArchive& Ar, FInterpCurvePoint& Point)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Point . InVal<<Point . OutVal ; Ar<<Point . ArriveTangent<<Point . LeaveTangent ; Ar<<Point . InterpMode ; return Ar ; } bool)",
    "insertText": "operator(const FInterpCurvePoint& Point1, const FInterpCurvePoint& Point2)"
  },
  {
    "label": "FInterpCurvePoint()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> FInterpCurvePoint<T)",
    "insertText": "FInterpCurvePoint(const float In, const T &Out ) : InVal(In) , OutVal(Out)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(&ArriveTangent, 0, sizeof(T))"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(&LeaveTangent, 0, sizeof(T))"
  },
  {
    "label": "FInterpCurvePoint()",
    "kind": "Method",
    "detail": "Function (InterpMode = CIM_Linear ; } template<class T> FInterpCurvePoint<T)",
    "insertText": "FInterpCurvePoint(const float In, const T &Out, const T &InArriveTangent, const T &InLeaveTangent, const EInterpCurveMode InInterpMode) : InVal(In) , OutVal(Out) , ArriveTangent(InArriveTangent) , LeaveTangent(InLeaveTangent) , InterpMode(InInterpMode)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (InVal = 0 . 0 f ;)",
    "insertText": "Memset(&OutVal, 0, sizeof(T))"
  },
  {
    "label": "ClampFloatTangent()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "ClampFloatTangent(float PrevPointVal, float PrevTime, float CurPointVal, float CurTime, float NextPointVal, float NextTime)"
  },
  {
    "label": "AutoCalcTangent()",
    "kind": "Method",
    "detail": "Function (template<class T,class U> void)",
    "insertText": "AutoCalcTangent(const T& PrevP, const T& P, const T& NextP, const U& Tension, T& OutTan)"
  },
  {
    "label": "OutTan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutTan(1.f - Tension) * ( (P - PrevP) + (NextP - P))"
  },
  {
    "label": "AutoCalcTangent()",
    "kind": "Method",
    "detail": "Function (} template<class U> void)",
    "insertText": "AutoCalcTangent(const FQuat& PrevP, const FQuat& P, const FQuat& NextP, const U& Tension, FQuat& OutTan)"
  },
  {
    "label": "CalcTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcTangents(PrevP, P, NextP, Tension, OutTan)"
  },
  {
    "label": "ComputeCurveTangent()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "ComputeCurveTangent(float PrevTime, const T& PrevPoint, float CurTime, const T& CurPoint, float NextTime, const T& NextPoint, float Tension, bool bWantClamping, T& OutTangent)"
  },
  {
    "label": "AutoCalcTangent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoCalcTangent(PrevPoint, CurPoint, NextPoint, Tension, OutTangent)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float PrevToNextTimeDiff = FMath::Max<)",
    "insertText": "float(UE_KINDA_SMALL_NUMBER, NextTime - PrevTime)"
  },
  {
    "label": "ComputeClampableFloatVectorCurveTangent()",
    "kind": "Method",
    "detail": "Function (OutTangent / = PrevToNextTimeDiff ; } template<class T> void)",
    "insertText": "ComputeClampableFloatVectorCurveTangent(float PrevTime, const T& PrevPoint, float CurTime, const T& CurPoint, float NextTime, const T& NextPoint, float Tension, bool bWantClamping, T& OutTangent)"
  },
  {
    "label": "PrevPointVal()",
    "kind": "Method",
    "detail": "Function (float*)",
    "insertText": "PrevPointVal(float*)"
  },
  {
    "label": "CurPointVal()",
    "kind": "Method",
    "detail": "Function (float*)",
    "insertText": "CurPointVal(float*)"
  },
  {
    "label": "NextPointVal()",
    "kind": "Method",
    "detail": "Function (float*)",
    "insertText": "NextPointVal(float*)"
  },
  {
    "label": "OutTangentVal()",
    "kind": "Method",
    "detail": "Function (float*)",
    "insertText": "OutTangentVal(float*)"
  },
  {
    "label": "ClampFloatTangent()",
    "kind": "Method",
    "detail": "Function (const float ClampedTangent =)",
    "insertText": "ClampFloatTangent(*PrevPointVal, PrevTime, *CurPointVal, CurTime, *NextPointVal, NextTime)"
  },
  {
    "label": "OutTangentVal()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "OutTangentVal(1.0f - Tension)"
  },
  {
    "label": "ComputeCurveTangent()",
    "kind": "Method",
    "detail": "Function (OutTangent / = PrevToNextTimeDiff ; } } void)",
    "insertText": "ComputeCurveTangent(float PrevTime, const float& PrevPoint, float CurTime, const float& CurPoint, float NextTime, const float& NextPoint, float Tension, bool bWantClamping, float& OutTangent)"
  },
  {
    "label": "ComputeClampableFloatVectorCurveTangent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeClampableFloatVectorCurveTangent(PrevTime, PrevPoint, CurTime, CurPoint, NextTime, NextPoint, Tension, bWantClamping, OutTangent)"
  },
  {
    "label": "ComputeCurveTangent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeCurveTangent(float PrevTime, const FVector& PrevPoint, float CurTime, const FVector& CurPoint, float NextTime, const FVector& NextPoint, float Tension, bool bWantClamping, FVector& OutTangent)"
  },
  {
    "label": "ComputeCurveTangent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeCurveTangent(float PrevTime, const FVector2D& PrevPoint, float CurTime, const FVector2D& CurPoint, float NextTime, const FVector2D& NextPoint, float Tension, bool bWantClamping, FVector2D& OutTangent)"
  },
  {
    "label": "ComputeCurveTangent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeCurveTangent(float PrevTime, const FTwoVectors& PrevPoint, float CurTime, const FTwoVectors& CurPoint, float NextTime, const FTwoVectors& NextPoint, float Tension, bool bWantClamping, FTwoVectors& OutTangent)"
  },
  {
    "label": "CurveFloatFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CurveFloatFindIntervalBounds(const FInterpCurvePoint<float>& Start, const FInterpCurvePoint<float>& End, float& CurrentMin, float& CurrentMax)"
  },
  {
    "label": "CurveVector2DFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurveVector2DFindIntervalBounds(const FInterpCurvePoint<FVector2D>& Start, const FInterpCurvePoint<FVector2D>& End, FVector2D& CurrentMin, FVector2D& CurrentMax)"
  },
  {
    "label": "CurveVectorFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurveVectorFindIntervalBounds(const FInterpCurvePoint<FVector>& Start, const FInterpCurvePoint<FVector>& End, FVector& CurrentMin, FVector& CurrentMax)"
  },
  {
    "label": "CurveTwoVectorsFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurveTwoVectorsFindIntervalBounds(const FInterpCurvePoint<FTwoVectors>& Start, const FInterpCurvePoint<FTwoVectors>& End, FTwoVectors& CurrentMin, FTwoVectors& CurrentMax)"
  },
  {
    "label": "CurveLinearColorFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurveLinearColorFindIntervalBounds(const FInterpCurvePoint<FLinearColor>& Start, const FInterpCurvePoint<FLinearColor>& End, FLinearColor& CurrentMin, FLinearColor& CurrentMax)"
  },
  {
    "label": "CurveFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (template<class T,class U> void)",
    "insertText": "CurveFindIntervalBounds(const FInterpCurvePoint<T>& Start, const FInterpCurvePoint<T>& End, T& CurrentMin, T& CurrentMax, const U& Dummy)"
  },
  {
    "label": "CurveFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (} template<class U> void)",
    "insertText": "CurveFindIntervalBounds(const FInterpCurvePoint<float>& Start, const FInterpCurvePoint<float>& End, float& CurrentMin, float& CurrentMax, const U& Dummy)"
  },
  {
    "label": "CurveFloatFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurveFloatFindIntervalBounds(Start, End, CurrentMin, CurrentMax)"
  },
  {
    "label": "CurveFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (} template<class U> void)",
    "insertText": "CurveFindIntervalBounds(const FInterpCurvePoint<FVector2D>& Start, const FInterpCurvePoint<FVector2D>& End, FVector2D& CurrentMin, FVector2D& CurrentMax, const U& Dummy)"
  },
  {
    "label": "CurveVector2DFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurveVector2DFindIntervalBounds(Start, End, CurrentMin, CurrentMax)"
  },
  {
    "label": "CurveFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (} template<class U> void)",
    "insertText": "CurveFindIntervalBounds(const FInterpCurvePoint<FVector>& Start, const FInterpCurvePoint<FVector>& End, FVector& CurrentMin, FVector& CurrentMax, const U& Dummy)"
  },
  {
    "label": "CurveVectorFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurveVectorFindIntervalBounds(Start, End, CurrentMin, CurrentMax)"
  },
  {
    "label": "CurveFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (} template<class U> void)",
    "insertText": "CurveFindIntervalBounds(const FInterpCurvePoint<FTwoVectors>& Start, const FInterpCurvePoint<FTwoVectors>& End, FTwoVectors& CurrentMin, FTwoVectors& CurrentMax, const U& Dummy)"
  },
  {
    "label": "CurveTwoVectorsFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurveTwoVectorsFindIntervalBounds(Start, End, CurrentMin, CurrentMax)"
  },
  {
    "label": "CurveFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (} template<class U> void)",
    "insertText": "CurveFindIntervalBounds(const FInterpCurvePoint<FLinearColor>& Start, const FInterpCurvePoint<FLinearColor>& End, FLinearColor& CurrentMin, FLinearColor& CurrentMax, const U& Dummy)"
  },
  {
    "label": "CurveLinearColorFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurveLinearColorFindIntervalBounds(Start, End, CurrentMin, CurrentMax)"
  }
]