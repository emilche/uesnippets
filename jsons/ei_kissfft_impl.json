[
  {
    "label": "kiss_cpx_fft",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "kiss_cpx_fft"
  },
  {
    "label": "kissfft_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "kissfft_impl"
  },
  {
    "label": "make_twiddles()",
    "kind": "Method",
    "detail": "Function (namespace Eigen { namespace internal { template<_Scalar> struct kiss_cpx_fft { typedef _Scalar Scalar ; typedef std::complex<Scalar> Complex ; std::vector<Complex> m_twiddles ; std::vector<int> m_stageRadix ; std::vector<int> m_stageRemainder ; std::vector<Complex> m_scratchBuf ; bool m_inverse ; void)",
    "insertText": "make_twiddles(int nfft, bool inverse)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (using numext::sin ; using numext::cos ; m_inverse = inverse ; m_twiddles .)",
    "insertText": "resize(nfft)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar flip = inverse ?)",
    "insertText": "Scalar(1) : Scalar(-1)"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (m_twiddles [ 0 ] =)",
    "insertText": "Complex(Scalar(1), Scalar(0))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i = 1 ;)",
    "insertText": "for(;i*8<nfft;++i)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar c =)",
    "insertText": "Scalar(cos(i*8*phinc))"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar s =)",
    "insertText": "Scalar(sin(i*8*phinc))"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (m_twiddles [ i ] =)",
    "insertText": "Complex(c, s*flip)"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (m_twiddles [ nfft - i ] =)",
    "insertText": "Complex(c, -s*flip)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(;i*4<nfft;++i)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar c =)",
    "insertText": "Scalar(cos((2*nfft-8*i)*phinc))"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar s =)",
    "insertText": "Scalar(sin((2*nfft-8*i)*phinc))"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (m_twiddles [ i ] =)",
    "insertText": "Complex(s, c*flip)"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (m_twiddles [ nfft - i ] =)",
    "insertText": "Complex(s, -c*flip)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(;i*8<3*nfft;++i)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar c =)",
    "insertText": "Scalar(cos((8*i-2*nfft)*phinc))"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar s =)",
    "insertText": "Scalar(sin((8*i-2*nfft)*phinc))"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (m_twiddles [ i ] =)",
    "insertText": "Complex(-s, c*flip)"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (m_twiddles [ nfft - i ] =)",
    "insertText": "Complex(-s, -c*flip)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(;i*2<nfft;++i)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar c =)",
    "insertText": "Scalar(cos((4*nfft-8*i)*phinc))"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar s =)",
    "insertText": "Scalar(sin((4*nfft-8*i)*phinc))"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (m_twiddles [ i ] =)",
    "insertText": "Complex(-c, s*flip)"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (m_twiddles [ nfft - i ] =)",
    "insertText": "Complex(-c, -s*flip)"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "factorize(int nfft)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int n = nfft ; int p = 4 ; do {)",
    "insertText": "while(n % p)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} n / = p ; m_stageRadix .)",
    "insertText": "push_back(p)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (m_stageRemainder .)",
    "insertText": "push_back(n)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(n>1)"
  },
  {
    "label": "work()",
    "kind": "Method",
    "detail": "Function (} template<_Src> void)",
    "insertText": "work(int stage,Complex * xout, const _Src * xin, size_t fstride,size_t in_stride)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int p = m_stageRadix [ stage ] ; int m = m_stageRemainder [ stage ] ; Complex* Fout_beg = xout ; Complex* Fout_end = xout + p* m ;)",
    "insertText": "if(m>1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (xin + = fstride* in_stride ; })",
    "insertText": "while((xout += m) != Fout_end)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} else { do {* xout =* xin ; xin + = fstride* in_stride ; })",
    "insertText": "while(++xout != Fout_end)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (} xout = Fout_beg ;)",
    "insertText": "switch(p)"
  },
  {
    "label": "bfly3()",
    "kind": "Method",
    "detail": "Function (break ; case 3 :)",
    "insertText": "bfly3(xout,fstride,m)"
  },
  {
    "label": "bfly4()",
    "kind": "Method",
    "detail": "Function (break ; case 4 :)",
    "insertText": "bfly4(xout,fstride,m)"
  },
  {
    "label": "bfly5()",
    "kind": "Method",
    "detail": "Function (break ; case 5 :)",
    "insertText": "bfly5(xout,fstride,m)"
  },
  {
    "label": "bfly_generic()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "bfly_generic(xout,fstride,m,p)"
  },
  {
    "label": "bfly2()",
    "kind": "Method",
    "detail": "Function (break ; } } void)",
    "insertText": "bfly2(Complex * Fout, const size_t fstride, int m)"
  },
  {
    "label": "bfly4()",
    "kind": "Method",
    "detail": "Function (Complex t = Fout [ m + k ]* m_twiddles [ k* fstride ] ; Fout [ m + k ] = Fout [ k ] - t ; Fout [ k ] + = t ; } } void)",
    "insertText": "bfly4(Complex * Fout, const size_t fstride, const size_t m)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Complex scratch [ 6 ] ; int negative_if_inverse = m_inverse* - 2 + 1 ;)",
    "insertText": "for(size_t k=0;k<m;++k)"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (scratch [ 0 ] = Fout [ k + m ]* m_twiddles [ k* fstride ] ; scratch [ 1 ] = Fout [ k + 2* m ]* m_twiddles [ k* fstride* 2 ] ; scratch [ 2 ] = Fout [ k + 3* m ]* m_twiddles [ k* fstride* 3 ] ; scratch [ 5 ] = Fout [ k ] - scratch [ 1 ] ; Fout [ k ] + = scratch [ 1 ] ; scratch [ 3 ] = scratch [ 0 ] + scratch [ 2 ] ; scratch [ 4 ] = scratch [ 0 ] - scratch [ 2 ] ; scratch [ 4 ] =)",
    "insertText": "Complex(scratch[4].imag()*negative_if_inverse , -scratch[4].real()* negative_if_inverse)"
  },
  {
    "label": "bfly3()",
    "kind": "Method",
    "detail": "Function (Fout [ k + 2* m ] = Fout [ k ] - scratch [ 3 ] ; Fout [ k ] + = scratch [ 3 ] ; Fout [ k + m ] = scratch [ 5 ] + scratch [ 4 ] ; Fout [ k + 3* m ] = scratch [ 5 ] - scratch [ 4 ] ; } } void)",
    "insertText": "bfly3(Complex * Fout, const size_t fstride, const size_t m)"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (size_t k = m ; const size_t m2 = 2* m ; Complex* tw1,* tw2 ; Complex scratch [ 5 ] ; Complex epi3 ; epi3 = m_twiddles [ fstride* m ] ; tw1 = tw2 =& m_twiddles [ 0 ] ; do { scratch [ 1 ] = Fout [ m ]** tw1 ; scratch [ 2 ] = Fout [ m2 ]** tw2 ; scratch [ 3 ] = scratch [ 1 ] + scratch [ 2 ] ; scratch [ 0 ] = scratch [ 1 ] - scratch [ 2 ] ; tw1 + = fstride ; tw2 + = fstride* 2 ; Fout [ m ] =)",
    "insertText": "Complex(Fout->real() - Scalar(.5)*scratch[3].real() , Fout->imag() - Scalar(.5)*scratch[3].imag())"
  },
  {
    "label": "imag()",
    "kind": "Method",
    "detail": "Function (scratch [ 0 ]* = epi3 .)",
    "insertText": "imag()"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (* Fout + = scratch [ 3 ] ; Fout [ m2 ] =)",
    "insertText": "Complex(Fout[m].real() + scratch[0].imag() , Fout[m].imag() - scratch[0].real())"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (Fout [ m ] + =)",
    "insertText": "Complex(-scratch[0].imag(),scratch[0].real())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + Fout ; })",
    "insertText": "while(--k)"
  },
  {
    "label": "bfly5()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "bfly5(Complex * Fout, const size_t fstride, const size_t m)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Complex* Fout0,* Fout1,* Fout2,* Fout3,* Fout4 ; size_t u ; Complex scratch [ 1 3 ] ; Complex* twiddles =& m_twiddles [ 0 ] ; Complex* tw ; Complex ya,yb ; ya = twiddles [ fstride* m ] ; yb = twiddles [ fstride* 2* m ] ; Fout0 = Fout ; Fout1 = Fout0 + m ; Fout2 = Fout0 + 2* m ; Fout3 = Fout0 + 3* m ; Fout4 = Fout0 + 4* m ; tw = twiddles ;)",
    "insertText": "for(u=0; u<m; ++u)"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (scratch [ 0 ] =* Fout0 ; scratch [ 1 ] =* Fout1* tw [ u* fstride ] ; scratch [ 2 ] =* Fout2* tw [ 2* u* fstride ] ; scratch [ 3 ] =* Fout3* tw [ 3* u* fstride ] ; scratch [ 4 ] =* Fout4* tw [ 4* u* fstride ] ; scratch [ 7 ] = scratch [ 1 ] + scratch [ 4 ] ; scratch [ 1 0 ] = scratch [ 1 ] - scratch [ 4 ] ; scratch [ 8 ] = scratch [ 2 ] + scratch [ 3 ] ; scratch [ 9 ] = scratch [ 2 ] - scratch [ 3 ] ;* Fout0 + = scratch [ 7 ] ;* Fout0 + = scratch [ 8 ] ; scratch [ 5 ] = scratch [ 0 ] +)",
    "insertText": "Complex((scratch[7].real()*ya.real() ) + (scratch[8].real() *yb.real() ), (scratch[7].imag()*ya.real()) + (scratch[8].imag()*yb.real()))"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (scratch [ 6 ] =)",
    "insertText": "Complex((scratch[10].imag()*ya.imag()) + (scratch[9].imag()*yb.imag()), -(scratch[10].real()*ya.imag()) - (scratch[9].real()*yb.imag()))"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (* Fout1 = scratch [ 5 ] - scratch [ 6 ] ;* Fout4 = scratch [ 5 ] + scratch [ 6 ] ; scratch [ 1 1 ] = scratch [ 0 ] +)",
    "insertText": "Complex((scratch[7].real()*yb.real()) + (scratch[8].real()*ya.real()), (scratch[7].imag()*yb.real()) + (scratch[8].imag()*ya.real()))"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (scratch [ 1 2 ] =)",
    "insertText": "Complex(-(scratch[10].imag()*yb.imag()) + (scratch[9].imag()*ya.imag()), (scratch[10].real()*yb.imag()) - (scratch[9].real()*ya.imag()))"
  },
  {
    "label": "bfly_generic()",
    "kind": "Method",
    "detail": "Function (* Fout2 = scratch [ 1 1 ] + scratch [ 1 2 ] ;* Fout3 = scratch [ 1 1 ] - scratch [ 1 2 ] ; + + Fout0 ; + + Fout1 ; + + Fout2 ; + + Fout3 ; + + Fout4 ; } } void)",
    "insertText": "bfly_generic(Complex * Fout, const size_t fstride, int m, int p)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int u,k,q1,q ; Complex* twiddles =& m_twiddles [ 0 ] ; Complex t ; int Norig = static_cast<)",
    "insertText": "int(m_twiddles.size())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (k = u ;)",
    "insertText": "for(q1=0 ; q1<p ; ++q1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int twidx = 0 ; Fout [ k ] = scratchbuf [ 0 ] ;)",
    "insertText": "for(q=1;q<p;++q)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (twidx + = static_cast<)",
    "insertText": "int(fstride)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (t = scratchbuf [ q ]* twiddles [ twidx ] ; Fout [ k ] + = t ; } k + = m ; } } } } ; template<_Scalar> struct kissfft_impl { typedef _Scalar Scalar ; typedef std::complex<Scalar> Complex ; void)",
    "insertText": "clear()"
  },
  {
    "label": "fwd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fwd(Complex * dst,const Complex *src,int nfft)"
  },
  {
    "label": "get_plan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get_plan(nfft,false).work(0, dst, src, 1,1)"
  },
  {
    "label": "fwd2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fwd2(Complex * dst,const Complex *src,int n0,int n1)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(dst)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(src)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(n0)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(n1)"
  },
  {
    "label": "inv2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "inv2(Complex * dst,const Complex *src,int n0,int n1)"
  },
  {
    "label": "fwd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fwd(Complex * dst,const Scalar * src,int nfft)"
  },
  {
    "label": "get_plan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get_plan(nfft,false).work(0, &m_tmpBuf1[0], src, 1,1)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(m_tmpBuf1.begin(),m_tmpBuf1.begin()+(nfft>>1)+1,dst)"
  },
  {
    "label": "real_twiddles()",
    "kind": "Method",
    "detail": "Function (} else { int ncfft = nfft>> 1 ; int ncfft2 = nfft>> 2 ; Complex* rtw =)",
    "insertText": "real_twiddles(ncfft2)"
  },
  {
    "label": "fwd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fwd(dst, reinterpret_cast<const Complex*> (src), ncfft)"
  },
  {
    "label": "dc()",
    "kind": "Method",
    "detail": "Function (Complex)",
    "insertText": "dc(dst[0].real() + dst[0].imag())"
  },
  {
    "label": "nyquist()",
    "kind": "Method",
    "detail": "Function (Complex)",
    "insertText": "nyquist(dst[0].real() - dst[0].imag())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int k ;)",
    "insertText": "for(k=1;k <= ncfft2 ; ++k)"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (Complex fpk = dst [ k ] ; Complex fpnk =)",
    "insertText": "conj(dst[ncfft-k])"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (Complex f1k = fpk + fpnk ; Complex f2k = fpk - fpnk ; Complex tw = f2k* rtw [ k - 1 ] ; dst [)",
    "insertText": "k(f1k + tw) * Scalar(.5)"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (dst [ ncfft - k ] =)",
    "insertText": "conj(f1k -tw)*Scalar(.5)"
  },
  {
    "label": "inv()",
    "kind": "Method",
    "detail": "Function (} dst [ 0 ] = dc ; dst [ ncfft ] = nyquist ; } } void)",
    "insertText": "inv(Complex * dst,const Complex *src,int nfft)"
  },
  {
    "label": "get_plan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get_plan(nfft,true).work(0, dst, src, 1,1)"
  },
  {
    "label": "inv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "inv(Scalar * dst,const Complex * src,int nfft)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(src,src+(nfft>>1)+1,m_tmpBuf1.begin())"
  },
  {
    "label": "inv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inv(&m_tmpBuf2[0],&m_tmpBuf1[0],nfft)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_tmpBuf1 .)",
    "insertText": "resize(ncfft)"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (m_tmpBuf1 [ 0 ] =)",
    "insertText": "Complex(src[0].real() + src[ncfft].real(), src[0].real() - src[ncfft].real())"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (Complex fk = src [ k ] ; Complex fnkc =)",
    "insertText": "conj(src[ncfft-k])"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (Complex fek = fk + fnkc ; Complex tmp = fk - fnkc ; Complex fok = tmp*)",
    "insertText": "conj(rtw[k-1])"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (m_tmpBuf1 [ k ] = fek + fok ; m_tmpBuf1 [ ncfft - k ] =)",
    "insertText": "conj(fek - fok)"
  },
  {
    "label": "get_plan()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "get_plan(ncfft,true).work(0, reinterpret_cast<Complex*>(dst), &m_tmpBuf1[0], 1,1)"
  },
  {
    "label": "PlanKey()",
    "kind": "Method",
    "detail": "Function (} } protected : typedef kiss_cpx_fft<Scalar> PlanData ; typedef std::map<int,PlanData> PlanMap ; PlanMap m_plans ; std::map<int,std::vector<Complex>> m_realTwiddles ; std::vector<Complex> m_tmpBuf1 ; std::vector<Complex> m_tmpBuf2 ; int)",
    "insertText": "PlanKey(int nfft, bool isinverse)"
  },
  {
    "label": "get_plan()",
    "kind": "Method",
    "detail": "Function (} PlanData&)",
    "insertText": "get_plan(int nfft, bool inverse)"
  },
  {
    "label": "PlanKey()",
    "kind": "Method",
    "detail": "Function (PlanData& pd = m_plans [)",
    "insertText": "PlanKey(nfft,inverse)"
  },
  {
    "label": "make_twiddles()",
    "kind": "Method",
    "detail": "Function (pd .)",
    "insertText": "make_twiddles(nfft,inverse)"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (pd .)",
    "insertText": "factorize(nfft)"
  },
  {
    "label": "real_twiddles()",
    "kind": "Method",
    "detail": "Function (} return pd ; } Complex*)",
    "insertText": "real_twiddles(int ncfft2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using std::acos ; std::vector<Complex>& twidref = m_realTwiddles [ ncfft2 ] ;)",
    "insertText": "if((int)twidref.size() != ncfft2)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (twidref .)",
    "insertText": "resize(ncfft2)"
  },
  {
    "label": "acos()",
    "kind": "Method",
    "detail": "Function (int ncfft = ncfft2<<1 ; Scalar pi =)",
    "insertText": "acos(Scalar(-1))"
  }
]