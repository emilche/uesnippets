[
  {
    "label": "UMovieSceneBlenderSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneBlenderSystem"
  },
  {
    "label": "UMovieSceneInterrogatedPropertyInstantiatorSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneInterrogatedPropertyInstantiatorSystem"
  },
  {
    "label": "FPropertyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyInfo"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieSceneEntityInstantiatorSystem . h \" # include \" EntitySystem / BuiltInComponentTypes . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" EntitySystem / MovieScenePropertyComponentHandler . h \" # include \" EntitySystem / MovieSceneOverlappingEntityTracker . h \" # include \" MovieSceneInterrogatedPropertyInstantiator . generated . h \" class UMovieSceneBlenderSystem ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public : using FMovieSceneEntityID = UE::MovieScene::FMovieSceneEntityID ; using FValueRecompositionResult = UE::MovieScene::TRecompositionResult<double> ;)",
    "insertText": "GENERATED_BODY() MOVIESCENETRACKS_API UMovieSceneInterrogatedPropertyInstantiatorSystem(const FObjectInitializer& ObjInit)"
  },
  {
    "label": "RecomposeBlendChannel()",
    "kind": "Method",
    "detail": "Function (FValueRecompositionResult)",
    "insertText": "RecomposeBlendChannel(const UE::MovieScene::FPropertyDefinition& PropertyDefinition, int32 ChannelCompositeIndex, const UE::MovieScene::FDecompositionQuery& InQuery, double InCurrentValue)"
  },
  {
    "label": "RecomposeBlend()",
    "kind": "Method",
    "detail": "Function (template<PropertyTraits,ValueType> UE::MovieScene::TRecompositionResult<ValueType>)",
    "insertText": "RecomposeBlend(const UE::MovieScene::TPropertyComponents<PropertyTraits>& InComponents, const UE::MovieScene::FDecompositionQuery& InQuery, const ValueType& InCurrentValue)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (PropertyTraits::StorageType WorkingValue { } ;)",
    "insertText": "ConvertOperationalProperty(InCurrentValue, WorkingValue)"
  },
  {
    "label": "RecomposeBlendOperational()",
    "kind": "Method",
    "detail": "Function (WorkingValue =)",
    "insertText": "RecomposeBlendOperational(InComponents, InQuery, WorkingValue)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (ValueType Result { } ;)",
    "insertText": "ConvertOperationalProperty(WorkingValue, Result)"
  },
  {
    "label": "FPropertyInfo()",
    "kind": "Method",
    "detail": "Function (public : struct FPropertyInfo {)",
    "insertText": "FPropertyInfo() : BlendChannel(INVALID_BLEND_CHANNEL)"
  },
  {
    "label": "InitializeOutput()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<UMovieSceneBlenderSystem> Blender ; UE::MovieScene::FInterrogationChannel InterrogationChannel ; UE::MovieScene::FMovieSceneEntityID PropertyEntityID ; uint16 BlendChannel ; } ; void)",
    "insertText": "InitializeOutput(UE::MovieScene::FInterrogationKey Key, TArrayView<const FMovieSceneEntityID> Inputs, FPropertyInfo* Output, UE::MovieScene::FEntityOutputAggregate Aggregate)"
  },
  {
    "label": "UpdateOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOutput(UE::MovieScene::FInterrogationKey Key, TArrayView<const FMovieSceneEntityID> Inputs, FPropertyInfo* Output, UE::MovieScene::FEntityOutputAggregate Aggregate)"
  },
  {
    "label": "DestroyOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyOutput(UE::MovieScene::FInterrogationKey Key, FPropertyInfo* Output, UE::MovieScene::FEntityOutputAggregate Aggregate)"
  },
  {
    "label": "FindPropertyInfo()",
    "kind": "Method",
    "detail": "Function (const FPropertyInfo*)",
    "insertText": "FindPropertyInfo(UE::MovieScene::FInterrogationKey Key)"
  },
  {
    "label": "FindEntityIDs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindEntityIDs(UE::MovieScene::FInterrogationKey Key, TArray<FMovieSceneEntityID>& OutEntityIDs)"
  },
  {
    "label": "FindEntityIDs()",
    "kind": "Method",
    "detail": "Function (PropertyTracker .)",
    "insertText": "FindEntityIDs(Key, OutEntityIDs)"
  },
  {
    "label": "OnRun()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "OnRun(FSystemTaskPrerequisites& InPrerequisites, FSystemSubsequentTasks& Subsequents)"
  },
  {
    "label": "IsRelevantImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRelevantImpl(UMovieSceneEntitySystemLinker* InLinker)"
  },
  {
    "label": "PropertySupportsFastPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PropertySupportsFastPath(TArrayView<const FMovieSceneEntityID> Inputs, FPropertyInfo* Output)"
  },
  {
    "label": "ResolveBlenderClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "ResolveBlenderClass(const UE::MovieScene::FPropertyDefinition& PropertyDefinition, TArrayView<const FMovieSceneEntityID> Inputs)"
  },
  {
    "label": "FindPropertyFromSource()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::FPropertyRecomposerPropertyInfo)",
    "insertText": "FindPropertyFromSource(FMovieSceneEntityID EntityID, UObject* Object)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (private : uint16 INVALID_BLEND_CHANNEL =)",
    "insertText": "uint16(-1)"
  },
  {
    "label": "RecomposeBlendOperational()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::TOverlappingEntityTracker<FPropertyInfo,UE::MovieScene::FInterrogationKey> PropertyTracker ; UE::MovieScene::FComponentMask CleanFastPathMask ; UE::MovieScene::FBuiltInComponentTypes* BuiltInComponents ; UE::MovieScene::FPropertyRecomposerImpl RecomposerImpl ; } ; template<PropertyTraits> UE::MovieScene::TRecompositionResult<PropertyTraits::StorageType>)",
    "insertText": "RecomposeBlendOperational(const UE::MovieScene::TPropertyComponents<PropertyTraits>& Components, const UE::MovieScene::FDecompositionQuery& InQuery, const typename PropertyTraits::StorageType& InCurrentValue)"
  }
]