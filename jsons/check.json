[
  {
    "label": "VoidifyStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VoidifyStream"
  },
  {
    "label": "LogMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LogMessage"
  },
  {
    "label": "PA_COMPONENT_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_COMPONENT_EXPORT"
  },
  {
    "label": "VoidifyStream()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_BASE_CHECK_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_BASE_CHECK_H_ # include<iosfwd> # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / debug / debugging_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / immediate_crash . h \" namespace partition_alloc::internal::logging { class VoidifyStream { public :)",
    "insertText": "VoidifyStream()"
  },
  {
    "label": "VoidifyStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VoidifyStream(bool ignored)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(std::ostream&)"
  },
  {
    "label": "PA_LAZY_CHECK_STREAM()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "PA_LAZY_CHECK_STREAM(stream, condition) \\ !(condition) \\ ? (void)0 \\ : ::partition_alloc::internal::logging::VoidifyStream() & (stream) #define PA_EAT_CHECK_STREAM_PARAMS(expr) \\ true ? (void)0 \\ : ::partition_alloc::internal::logging::VoidifyStream(expr) & \\ (*::partition_alloc::internal::logging::g_swallow_stream) PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (class LogMessage ; class)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (public : CheckError)",
    "insertText": "Check(const char* file, int line, const char* condition)"
  },
  {
    "label": "DCheck()",
    "kind": "Method",
    "detail": "Function (CheckError)",
    "insertText": "DCheck(const char* file, int line, const char* condition)"
  },
  {
    "label": "PCheck()",
    "kind": "Method",
    "detail": "Function (CheckError)",
    "insertText": "PCheck(const char* file, int line, const char* condition)"
  },
  {
    "label": "PCheck()",
    "kind": "Method",
    "detail": "Function (CheckError)",
    "insertText": "PCheck(const char* file, int line)"
  },
  {
    "label": "DPCheck()",
    "kind": "Method",
    "detail": "Function (CheckError)",
    "insertText": "DPCheck(const char* file, int line, const char* condition)"
  },
  {
    "label": "NotImplemented()",
    "kind": "Method",
    "detail": "Function (CheckError)",
    "insertText": "NotImplemented(const char* file, int line, const char* function)"
  },
  {
    "label": "stream()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "stream()"
  },
  {
    "label": "CheckError()",
    "kind": "Method",
    "detail": "Function (PA_NOMERGE ~)",
    "insertText": "CheckError()"
  },
  {
    "label": "CheckError()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "CheckError(LogMessage* log_message)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (LogMessage* log_message_ ; } ; # if)",
    "insertText": "defined(OFFICIAL_BUILD) && !defined(NDEBUG) #error \"Debug builds are not expected to be optimized as official builds.\" #endif #if defined(OFFICIAL_BUILD) && !BUILDFLAG(PA_DCHECK_IS_ON) #define PA_BASE_CHECK(condition) \\ PA_UNLIKELY(!(condition)) ? PA_IMMEDIATE_CRASH() \\ : PA_EAT_CHECK_STREAM_PARAMS() #define CHECK_WILL_STREAM() false #define PA_BASE_PCHECK(condition) \\ PA_LAZY_CHECK_STREAM( \\ ::partition_alloc::internal::logging::CheckError::PCheck(__FILE__, \\ __LINE__) \\ .stream(), \\ PA_UNLIKELY(!(condition))) #else #define PA_BASE_CHECK(condition) \\ PA_LAZY_CHECK_STREAM( \\ ::partition_alloc::internal::logging::CheckError::Check( \\ __FILE__, __LINE__, #condition) \\ .stream(), \\ !PA_ANALYZER_ASSUME_TRUE(condition)) #define CHECK_WILL_STREAM() true #define PA_BASE_PCHECK(condition) \\ PA_LAZY_CHECK_STREAM( \\ ::partition_alloc::internal::logging::CheckError::PCheck( \\ __FILE__, __LINE__, #condition) \\ .stream(), \\ !PA_ANALYZER_ASSUME_TRUE(condition)) #endif #if BUILDFLAG(PA_DCHECK_IS_ON) #define PA_BASE_DCHECK(condition) \\ PA_LAZY_CHECK_STREAM( \\ ::partition_alloc::internal::logging::CheckError::DCheck( \\ __FILE__, __LINE__, #condition) \\ .stream(), \\ !PA_ANALYZER_ASSUME_TRUE(condition)) #define PA_BASE_DPCHECK(condition) \\ PA_LAZY_CHECK_STREAM( \\ ::partition_alloc::internal::logging::CheckError::DPCheck( \\ __FILE__, __LINE__, #condition) \\ .stream(), \\ !PA_ANALYZER_ASSUME_TRUE(condition)) #else #define PA_BASE_DCHECK(condition) PA_EAT_CHECK_STREAM_PARAMS(!(condition)) #define PA_BASE_DPCHECK(condition) PA_EAT_CHECK_STREAM_PARAMS(!(condition)) #endif PA_COMPONENT_EXPORT(PARTITION_ALLOC) void RawCheck(const char* message)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void RawError(const char* message)"
  },
  {
    "label": "PA_RAW_CHECK()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "PA_RAW_CHECK(condition)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!(condition)) \\ ::partition_alloc::internal::logging::RawCheck( \\ \"Check failed: \" #condition \"\\n\")"
  }
]