[
  {
    "label": "FMultiSizeIndexContainerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMultiSizeIndexContainerData"
  },
  {
    "label": "FMultiSizeIndexContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMultiSizeIndexContainer"
  },
  {
    "label": "FMultiSizeIndexContainer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RawIndexBuffer . h \" struct FMultiSizeIndexContainerData { TArray<uint32> Indices ; uint32 DataTypeSize ; } ; class FMultiSizeIndexContainer { public :)",
    "insertText": "FMultiSizeIndexContainer() : DataTypeSize(sizeof(uint16)) , IndexBuffer(NULL)"
  },
  {
    "label": "FMultiSizeIndexContainer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMultiSizeIndexContainer()"
  },
  {
    "label": "SetOwnerName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwnerName(const FName& OwnerName)"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResources()"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, bool bNeedsCPUAccess)"
  },
  {
    "label": "SerializeMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeMetaData(FArchive& Ar, bool bNeedsCPUAccess)"
  },
  {
    "label": "CreateIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateIndexBuffer(uint8 DataTypeSize)"
  },
  {
    "label": "RebuildIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildIndexBuffer(uint8 InDataTypeSize, const TArray<uint32>& NewArray)"
  },
  {
    "label": "GetIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetIndexBuffer(TArray<uint32>& OutArray)"
  },
  {
    "label": "CopyIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyIndexBuffer(const TArray<uint32>& NewArray)"
  },
  {
    "label": "IsIndexBufferValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIndexBufferValid()"
  },
  {
    "label": "FMultiSizeIndexContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMultiSizeIndexContainer(const FMultiSizeIndexContainer& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMultiSizeIndexContainer&)",
    "insertText": "operator(const FMultiSizeIndexContainer& Buffer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif FArchive&)",
    "insertText": "operator(FArchive& Ar, FMultiSizeIndexContainer& Buffer)"
  },
  {
    "label": "CreateRHIBuffer()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef)",
    "insertText": "CreateRHIBuffer(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "InitRHIForStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHIForStreaming(FRHIBuffer* IntermediateBuffer, FRHIResourceReplaceBatcher& Batcher)"
  },
  {
    "label": "ReleaseRHIForStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHIForStreaming(FRHIResourceReplaceBatcher& Batcher)"
  }
]