[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROCESS_PROCESS_H_ # define BASE_PROCESS_PROCESS_H_ # include \" base / base_export . h \" # include \" base / process / process_handle . h \" # include \" base / strings / string_piece . h \" # include \" base / time / time . h \" # include \" build / build_config . h \" # include \" build / chromeos_buildflags . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN) #include \"base/win/scoped_handle.h\" #endif #if BUILDFLAG(IS_FUCHSIA) #include <lib/zx/process.h> #endif #if BUILDFLAG(IS_APPLE) || BUILDFLAG(IS_CHROMEOS) #include \"base/feature_list.h\" #endif #if BUILDFLAG(IS_APPLE)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_APPLE) BASE_DECLARE_FEATURE(kMacAllowBackgroundingProcesses)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS) BASE_EXPORT BASE_DECLARE_FEATURE(kOneGroupPerRenderer)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (# endif class BASE_EXPORT Process { public :)",
    "insertText": "Process(ProcessHandle handle = kNullProcessHandle)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(Process&& other)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(const Process&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Process&)",
    "insertText": "operator(const Process&)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Process()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Process&)",
    "insertText": "operator(Process&& other)"
  },
  {
    "label": "Current()",
    "kind": "Method",
    "detail": "Function (Process)",
    "insertText": "Current()"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (Process)",
    "insertText": "Open(ProcessId pid)"
  },
  {
    "label": "OpenWithExtraPrivileges()",
    "kind": "Method",
    "detail": "Function (Process)",
    "insertText": "OpenWithExtraPrivileges(ProcessId pid)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) static Process OpenWithAccess(ProcessId pid, DWORD desired_access)"
  },
  {
    "label": "CanBackgroundProcesses()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "CanBackgroundProcesses()"
  },
  {
    "label": "TerminateCurrentProcessImmediately()",
    "kind": "Method",
    "detail": "Function ([ [ noreturn ] ] void)",
    "insertText": "TerminateCurrentProcessImmediately(int exit_code)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (ProcessHandle)",
    "insertText": "Handle()"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (Process)",
    "insertText": "Duplicate()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] ProcessHandle)",
    "insertText": "Release()"
  },
  {
    "label": "Pid()",
    "kind": "Method",
    "detail": "Function (ProcessId)",
    "insertText": "Pid()"
  },
  {
    "label": "CreationTime()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "CreationTime()"
  },
  {
    "label": "is_current()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_current()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS) const std::string& unique_token()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) bool IsRunning()"
  },
  {
    "label": "Terminate()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "Terminate(int exit_code, bool wait)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "WaitForExitOrEvent()",
    "kind": "Method",
    "detail": "Function (PROCESS_EXITED,STOP_EVENT_SIGNALED,FAILED,} ; WaitExitStatus)",
    "insertText": "WaitForExitOrEvent(const base::win::ScopedHandle& stop_event_handle, int* exit_code)"
  },
  {
    "label": "WaitForExit()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "WaitForExit(int* exit_code)"
  },
  {
    "label": "WaitForExitWithTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForExitWithTimeout(TimeDelta timeout, int* exit_code)"
  },
  {
    "label": "Exited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exited(int exit_code)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_MAC) bool IsProcessBackgrounded(PortProvider* port_provider)"
  },
  {
    "label": "SetProcessBackgrounded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetProcessBackgrounded(PortProvider* port_provider, bool value)"
  },
  {
    "label": "IsProcessBackgrounded()",
    "kind": "Method",
    "detail": "Function (# else bool)",
    "insertText": "IsProcessBackgrounded()"
  },
  {
    "label": "SetProcessBackgrounded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetProcessBackgrounded(bool value)"
  },
  {
    "label": "GetPriority()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "GetPriority()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS_ASH) ProcessId GetPidInNamespace()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS) static bool OneGroupPerRendererEnabledForTesting()"
  },
  {
    "label": "CleanUpStaleProcessStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpStaleProcessStates()"
  },
  {
    "label": "InitializePriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePriority()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif private : # if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS) void CleanUpProcess(int remaining_retries)"
  },
  {
    "label": "CleanUpProcessAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpProcessAsync()"
  },
  {
    "label": "CleanUpProcessScheduled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpProcessScheduled(Process process, int remaining_retries)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# else ProcessHandle process_ ; # endif # if)",
    "insertText": "BUILDFLAG(IS_WIN) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif } ; # if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS) BASE_EXPORT bool IsProcessBackgroundedCGroup( const StringPiece& cgroup_contents)"
  }
]