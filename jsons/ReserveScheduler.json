[
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_NONCOPYABLE(FReserveScheduler)"
  },
  {
    "label": "FReserveScheduler()",
    "kind": "Method",
    "detail": "Function (FReserveScheduler Singleton ; public :)",
    "insertText": "FReserveScheduler()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using FConditional = TTaskDelegate<)",
    "insertText": "bool()"
  },
  {
    "label": "StartWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartWorkers(uint32 ReserveWorkers = 0, FThread::EForkable IsForkable = FThread::NonForkable, EThreadPriority WorkerPriority = EThreadPriority::TPri_Normal)"
  },
  {
    "label": "StopWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopWorkers()"
  },
  {
    "label": "DoReserveWorkUntil()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoReserveWorkUntil(FConditional&& Condition)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (private : struct)",
    "insertText": "alignas(64)"
  },
  {
    "label": "CompletedDelegate()",
    "kind": "Method",
    "detail": "Function (FEventRef SleepEvent ; FConditional)",
    "insertText": "CompletedDelegate()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS TEventStack<FYieldedWork> EventStack = { ReserveEvents } ; PRAGMA_ENABLE_DEPRECATION_WARNINGS TAlignedArray<FYieldedWork> ReserveEvents ; FCriticalSection WorkerThreadsCS ; TArray<TUniquePtr<FThread>> WorkerThreads ; std::atomic_uint ActiveWorkers { 0 } ; std::atomic_uint NextWorkerId { 0 } ; } ; PRAGMA_DISABLE_DEPRECATION_WARNINGS FReserveScheduler&)",
    "insertText": "Get()"
  }
]