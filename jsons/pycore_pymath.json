[
  {
    "label": "_Py_ADJUST_ERANGE1()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_INTERNAL_PYMATH_H # define Py_INTERNAL_PYMATH_H # ifdef __cplusplus \" C \" { # endif # ifndef Py_BUILD_CORE # error \" this header requires Py_BUILD_CORE define \" # endif void)",
    "insertText": "_Py_ADJUST_ERANGE1(double x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (errno = ERANGE ; } } else)",
    "insertText": "if(errno == ERANGE && x == 0.0)"
  },
  {
    "label": "_Py_ADJUST_ERANGE2()",
    "kind": "Method",
    "detail": "Function (errno = 0 ; } } void)",
    "insertText": "_Py_ADJUST_ERANGE2(double x, double y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (errno = ERANGE ; } } else)",
    "insertText": "if(errno == ERANGE)"
  },
  {
    "label": "_Py_IntegralTypeSigned()",
    "kind": "Method",
    "detail": "Function (errno = 0 ; } } # define)",
    "insertText": "_Py_IntegralTypeSigned(type) \\ ((type)(-1) < 0) #define _Py_IntegralTypeMax(type) \\ ((_Py_IntegralTypeSigned(type)) ? (((((type)1 << (sizeof(type)*CHAR_BIT - 2)) - 1) << 1) + 1) : ~(type)0) #define _Py_IntegralTypeMin(type) \\ ((_Py_IntegralTypeSigned(type)) ? -_Py_IntegralTypeMax(type) - 1 : 0) #define _Py_InIntegralTypeRange(type, v) \\ (_Py_IntegralTypeMin(type) <= v && v <= _Py_IntegralTypeMax(type)) #ifdef HAVE_GCC_ASM_FOR_X87 #define HAVE_PY_SET_53BIT_PRECISION 1 extern unsigned short _Py_get_387controlword(void)"
  },
  {
    "label": "_Py_set_387controlword()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Py_set_387controlword(unsigned short)"
  },
  {
    "label": "_Py_get_387controlword()",
    "kind": "Method",
    "detail": "Function (# define _Py_SET_53BIT_PRECISION_HEADER \\ unsigned short old_387controlword,new_387controlword # define _Py_SET_53BIT_PRECISION_START \\ do { \\ old_387controlword =)",
    "insertText": "_Py_get_387controlword()"
  },
  {
    "label": "new_387controlword()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "new_387controlword(old_387controlword & ~0x0f00)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(new_387controlword != old_387controlword)"
  },
  {
    "label": "_Py_set_387controlword()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_Py_set_387controlword(new_387controlword)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0)"
  },
  {
    "label": "_Py_set_387controlword()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_Py_set_387controlword(old_387controlword)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) #endif #if defined(_MSC_VER) && !defined(_WIN64) && !defined(_M_ARM)"
  },
  {
    "label": "__control87_2()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__control87_2(0, 0, &old_387controlword, NULL)"
  },
  {
    "label": "new_387controlword()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "new_387controlword(old_387controlword & ~(_MCW_PC | _MCW_RC)) | (_PC_53 | _RC_NEAR)"
  },
  {
    "label": "__control87_2()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__control87_2(new_387controlword, _MCW_PC | _MCW_RC, \\ &out_387controlword, NULL)"
  },
  {
    "label": "__control87_2()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__control87_2(old_387controlword, _MCW_PC | _MCW_RC, \\ &out_387controlword, NULL)"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__asm__(\"fmove.l %%fpcr,%0\" : \"=g\" (old_fpcr))"
  },
  {
    "label": "new_fpcr()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "new_fpcr(old_fpcr & ~0xf0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(new_fpcr != old_fpcr)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\"fmove.l %0,%%fpcr\" : : \"g\" (new_fpcr))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\"fmove.l %0,%%fpcr\" : : \"g\" (old_fpcr))"
  }
]