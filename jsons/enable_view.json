[
  {
    "label": "view_base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "view_base"
  },
  {
    "label": "_Derived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Derived"
  },
  {
    "label": "view_interface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "view_interface"
  },
  {
    "label": "_Op",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Op"
  },
  {
    "label": "_Yp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Yp"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANGES_ENABLE_VIEW_H # define _LIBCPP___RANGES_ENABLE_VIEW_H # include<__config> # include<concepts> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__is_derived_from_view_interface()",
    "kind": "Method",
    "detail": "Function (struct view_base { } ; template<class _Derived> requires is_class_v<_Derived>&& same_as<_Derived,remove_cv_t<_Derived>> class view_interface ; template<class _Op,class _Yp> requires is_convertible_v<_Op*,view_interface<_Yp>*> void)",
    "insertText": "__is_derived_from_view_interface(const _Op*, const view_interface<_Yp>*)"
  },
  {
    "label": "__is_derived_from_view_interface()",
    "kind": "Method",
    "detail": "Function (template<class _Tp> bool enable_view = derived_from<_Tp,view_base> | | requires {)",
    "insertText": "__is_derived_from_view_interface((_Tp*)nullptr, (_Tp*)nullptr)"
  }
]