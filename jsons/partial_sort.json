[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "_RandomAccessIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandomAccessIterator"
  },
  {
    "label": "_Sentinel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sentinel"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_PARTIAL_SORT_H # define _LIBCPP___ALGORITHM_PARTIAL_SORT_H # include<__algorithm / comp . h> # include<__algorithm / comp_ref_type . h> # include<__algorithm / iterator_operations . h> # include<__algorithm / make_heap . h> # include<__algorithm / sift_down . h> # include<__algorithm / sort_heap . h> # include<__config> # include<__debug> # include<__debug_utils / randomize_range . h> # include<__iterator / iterator_traits . h> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _Compare, class _RandomAccessIterator, class _Sentinel> _LIBCPP_CONSTEXPR_AFTER_CXX17 _RandomAccessIterator __partial_sort_impl( _RandomAccessIterator __first, _RandomAccessIterator __middle, _Sentinel __last, _Compare&& __comp)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (} std::__make_heap<)",
    "insertText": "_AlgPolicy(__first, __middle, __comp)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (iterator_traits<_RandomAccessIterator>::difference_type __len = __middle - __first ; _RandomAccessIterator __i = __middle ;)",
    "insertText": "for(; __i != __last; ++__i)"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (_IterOps<_AlgPolicy)",
    "insertText": "iter_swap(__i, __first)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__sift_down<)",
    "insertText": "_AlgPolicy(__first, __comp, __len, __first)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (} } std::__sort_heap<)",
    "insertText": "_AlgPolicy(std::move(__first), std::move(__middle), __comp)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__debug_randomize_range<)",
    "insertText": "_AlgPolicy(__first, __last)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (using _Comp_ref = __comp_ref_type<_Compare>::type ; auto __last_iter = std::__partial_sort_impl<)",
    "insertText": "_AlgPolicy(__first, __middle, __last, static_cast<_Comp_ref>(__comp))"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__debug_randomize_range<)",
    "insertText": "_AlgPolicy(__middle, __last)"
  },
  {
    "label": "partial_sort()",
    "kind": "Method",
    "detail": "Function (} template<class _RandomAccessIterator> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 void)",
    "insertText": "partial_sort(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)"
  },
  {
    "label": "partial_sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "partial_sort(__first, __middle, __last, __less<typename iterator_traits<_RandomAccessIterator>::value_type>())"
  }
]