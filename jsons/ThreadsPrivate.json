[
  {
    "label": "FThreadProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadProvider"
  },
  {
    "label": "FThreadInfoInternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadInfoInternal"
  },
  {
    "label": "FThreadProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" HAL / PlatformAffinity . h \" # include \" ProfilingDebugging / MiscTrace . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" TraceServices / Model / Threads . h \" namespace TraceServices { class FThreadProvider : public IThreadProvider,public IEditableThreadProvider { public :)",
    "insertText": "FThreadProvider(IAnalysisSession& Session)"
  },
  {
    "label": "FThreadProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FThreadProvider()"
  },
  {
    "label": "AddGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGameThread(uint32 Id)"
  },
  {
    "label": "AddThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddThread(uint32 Id, const TCHAR* Name, EThreadPriority Priority)"
  },
  {
    "label": "SetThreadPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadPriority(uint32 Id, EThreadPriority Priority)"
  },
  {
    "label": "SetThreadGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadGroup(uint32 Id, const TCHAR* GroupName)"
  },
  {
    "label": "GetModCount()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetModCount()"
  },
  {
    "label": "GetThreadName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetThreadName(uint32 ThreadId)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (private : struct FThreadInfoInternal { uint32 Id = 0 ; const TCHAR* Name =)",
    "insertText": "TEXT(\"UnnamedThread\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uint32 GroupSortOrder = ~ 0 u ; int32 PrioritySortOrder = INT_MAX ; uint32 FallbackSortOrder = ~ 0 u ; const TCHAR* GroupName = nullptr ; bool)",
    "insertText": "operator(const FThreadInfoInternal& Other)"
  },
  {
    "label": "SortThreads()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SortThreads()"
  },
  {
    "label": "GetPrioritySortOrder()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPrioritySortOrder(EThreadPriority ThreadPriority)"
  },
  {
    "label": "GetGroupSortOrder()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetGroupSortOrder(const TCHAR* GroupName)"
  }
]