[
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FDrawContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDrawContext"
  },
  {
    "label": "FPacketViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPacketViewport"
  },
  {
    "label": "FNetworkPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkPacket"
  },
  {
    "label": "FNetworkPacketAggregatedSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkPacketAggregatedSample"
  },
  {
    "label": "FNetworkPacketSeries",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkPacketSeries"
  },
  {
    "label": "FNetworkPacketSeriesBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPacketSeriesBuilder"
  },
  {
    "label": "FPacketViewDrawHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPacketViewDrawHelper"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetworkPacket()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Styling / WidgetStyle . h \" # include \" TraceServices / Model / NetProfiler . h \" # include<limits> struct FSlateBrush ; namespace UE::Insights { class FDrawContext ; } namespace UE::Insights::NetworkingProfiler { class FPacketViewport ; struct FNetworkPacket { int32 Index ; uint32 SequenceNumber ; uint32 ContentSizeInBits ; uint32 TotalSizeInBytes ; double TimeStamp ; TraceServices::ENetProfilerConnectionState ConnectionState ; TraceServices::ENetProfilerDeliveryStatus Status ;)",
    "insertText": "FNetworkPacket() : Index(-1) , SequenceNumber(0) , ContentSizeInBits(0) , TotalSizeInBytes(0) , TimeStamp(std::numeric_limits<double>::infinity()) , ConnectionState(TraceServices::ENetProfilerConnectionState::USOCK_Invalid) , Status(TraceServices::ENetProfilerDeliveryStatus::Unknown)"
  },
  {
    "label": "FNetworkPacket()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetworkPacket(const FNetworkPacket&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetworkPacket&)",
    "insertText": "operator(const FNetworkPacket&)"
  },
  {
    "label": "FNetworkPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetworkPacket(FNetworkPacket&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetworkPacket&)",
    "insertText": "operator(FNetworkPacket&&)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const FNetworkPacket& Other)"
  },
  {
    "label": "FNetworkPacketAggregatedSample()",
    "kind": "Method",
    "detail": "Function (} } ; struct FNetworkPacketAggregatedSample { int32 NumPackets ; double StartTime ; double EndTime ; TraceServices::ENetProfilerDeliveryStatus AggregatedStatus ; FNetworkPacket LargestPacket ; bool bAtLeastOnePacketMatchesFilter ; uint32 FilterMatchHighlightSizeInBits ;)",
    "insertText": "FNetworkPacketAggregatedSample() : NumPackets(0) , StartTime(DBL_MAX) , EndTime(-DBL_MAX) , AggregatedStatus(TraceServices::ENetProfilerDeliveryStatus::Unknown) , LargestPacket() , bAtLeastOnePacketMatchesFilter(true) , FilterMatchHighlightSizeInBits(0)"
  },
  {
    "label": "FNetworkPacketAggregatedSample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetworkPacketAggregatedSample(const FNetworkPacketAggregatedSample&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetworkPacketAggregatedSample&)",
    "insertText": "operator(const FNetworkPacketAggregatedSample&)"
  },
  {
    "label": "FNetworkPacketAggregatedSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetworkPacketAggregatedSample(FNetworkPacketAggregatedSample&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetworkPacketAggregatedSample&)",
    "insertText": "operator(FNetworkPacketAggregatedSample&&)"
  },
  {
    "label": "AddPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPacket(const int32 PacketIndex, const TraceServices::FNetProfilerPacket& Packet)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const FNetworkPacketAggregatedSample& Other)"
  },
  {
    "label": "AreEquals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreEquals(const FNetworkPacketAggregatedSample& A, const FNetworkPacketAggregatedSample& B)"
  },
  {
    "label": "FNetworkPacketSeries()",
    "kind": "Method",
    "detail": "Function (} } ; struct FNetworkPacketSeries { int32 NumAggregatedPackets ; TArray<FNetworkPacketAggregatedSample> Samples ; int32 HighlightEventTypeIndex ;)",
    "insertText": "FNetworkPacketSeries() : NumAggregatedPackets(0) , Samples() , HighlightEventTypeIndex(-1)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FNetworkPacketSeriesBuilder()",
    "kind": "Method",
    "detail": "Function (HighlightEventTypeIndex = - 1 ; } } ; class FNetworkPacketSeriesBuilder { public :)",
    "insertText": "FNetworkPacketSeriesBuilder(FNetworkPacketSeries& InSeries, const FPacketViewport& InViewport)"
  },
  {
    "label": "FNetworkPacketSeriesBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetworkPacketSeriesBuilder(const FNetworkPacketSeriesBuilder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetworkPacketSeriesBuilder&)",
    "insertText": "operator(const FNetworkPacketSeriesBuilder&)"
  },
  {
    "label": "AddPacket()",
    "kind": "Method",
    "detail": "Function (FNetworkPacketAggregatedSample*)",
    "insertText": "AddPacket(int32 PacketIndex, const TraceServices::FNetProfilerPacket& Packet)"
  },
  {
    "label": "GetNumAddedPackets()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumAddedPackets()"
  },
  {
    "label": "FPacketViewDrawHelper()",
    "kind": "Method",
    "detail": "Function (private : FNetworkPacketSeries& Series ; const FPacketViewport& Viewport ; float SampleW ; int32 PacketsPerSample ; int32 FirstPacketIndex ; int32 NumSamples ; int32 NumAddedPackets ; } ; class FPacketViewDrawHelper { public : enum class EHighlightMode : uint32 { Hovered = 1,Selected = 2,SelectedAndHovered = 3 } ; public :)",
    "insertText": "FPacketViewDrawHelper(const FDrawContext& InDrawContext, const FPacketViewport& InViewport)"
  },
  {
    "label": "FPacketViewDrawHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPacketViewDrawHelper(const FPacketViewDrawHelper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPacketViewDrawHelper&)",
    "insertText": "operator(const FPacketViewDrawHelper&)"
  },
  {
    "label": "DrawBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBackground()"
  },
  {
    "label": "DrawCached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCached(const FNetworkPacketSeries& Series)"
  },
  {
    "label": "DrawSampleHighlight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSampleHighlight(const FNetworkPacketAggregatedSample& Sample, EHighlightMode Mode)"
  },
  {
    "label": "DrawSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSelection(int32 StartPacketIndex, int32 EndPacketIndex, double SelectionTimeSpan)"
  },
  {
    "label": "GetColorByStatus()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetColorByStatus(TraceServices::ENetProfilerDeliveryStatus Status)"
  },
  {
    "label": "GetNumPackets()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPackets()"
  }
]