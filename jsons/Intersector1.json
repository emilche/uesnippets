[
  {
    "label": "TIntersector1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntersector1"
  },
  {
    "label": "TIntersector1()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / UnrealMath . h \" # include \" VectorTypes . h \" # include \" BoxTypes . h \" namespace UE { namespace Geometry { template<RealType> class TIntersector1 { private : TInterval1<RealType> Intersections ; public : TInterval1<RealType> U ; TInterval1<RealType> V ; int NumIntersections = 0 ;)",
    "insertText": "TIntersector1(RealType u0, RealType u1, RealType v0, RealType v1) : Intersections(0,0), U(u0, u1), V(v0, v1)"
  },
  {
    "label": "TIntersector1()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIntersector1(const TInterval1<RealType>& u, const TInterval1<RealType>& v) : Intersections(0, 0), U(u), V(v)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Test()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NumIntersections = 0 ; } else)",
    "insertText": "if(U.Max > V.Min)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (NumIntersections = 2 ; Intersections .)",
    "insertText": "Min(U.Min < V.Min ? V.Min : U.Min)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Intersections .)",
    "insertText": "Max(U.Max > V.Max ? V.Max : U.Max)"
  }
]