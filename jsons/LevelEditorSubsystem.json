[
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "FToolMenuContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuContext"
  },
  {
    "label": "FEditorModeTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeTools"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "LEVELEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LEVELEDITOR_API"
  },
  {
    "label": "LightingBuildQuality",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LightingBuildQuality"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "ExtendQuickActionMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendQuickActionMenu()"
  },
  {
    "label": "PilotLevelActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PilotLevelActor(AActor* ActorToPilot, FName ViewportConfigKey = NAME_None)"
  },
  {
    "label": "PilotLevelActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PilotLevelActor(const FToolMenuContext& InContext)"
  },
  {
    "label": "EjectPilotLevelActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EjectPilotLevelActor(FName ViewportConfigKey = NAME_None)"
  },
  {
    "label": "EditorPlaySimulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorPlaySimulate()"
  },
  {
    "label": "EditorInvalidateViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorInvalidateViewports()"
  },
  {
    "label": "EditorSetViewportRealtime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorSetViewportRealtime(bool bInRealtime, FName ViewportConfigKey = NAME_None)"
  },
  {
    "label": "EditorSetGameView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorSetGameView(bool bGameView, FName ViewportConfigKey = NAME_None)"
  },
  {
    "label": "EditorGetGameView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EditorGetGameView(FName ViewportConfigKey = NAME_None)"
  },
  {
    "label": "EditorRequestBeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorRequestBeginPlay()"
  },
  {
    "label": "EditorRequestEndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorRequestEndPlay()"
  },
  {
    "label": "GetViewportConfigKeys()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetViewportConfigKeys()"
  },
  {
    "label": "GetActiveViewportConfigKey()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetActiveViewportConfigKey()"
  },
  {
    "label": "SetAllowsCinematicControl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowsCinematicControl(bool bAllow, FName ViewportConfigKey = NAME_None)"
  },
  {
    "label": "GetAllowsCinematicControl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllowsCinematicControl(FName ViewportConfigKey = NAME_None)"
  },
  {
    "label": "NewLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NewLevel(const FString& AssetPath, bool bIsPartitionedWorld = false)"
  },
  {
    "label": "NewLevelFromTemplate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NewLevelFromTemplate(const FString& AssetPath, const FString& TemplateAssetPath)"
  },
  {
    "label": "LoadLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadLevel(const FString& AssetPath)"
  },
  {
    "label": "SaveCurrentLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveCurrentLevel()"
  },
  {
    "label": "SaveAllDirtyLevels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveAllDirtyLevels()"
  },
  {
    "label": "SetCurrentLevelByName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCurrentLevelByName(FName LevelName)"
  },
  {
    "label": "BuildLightMaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildLightMaps(ELightingBuildQuality Quality = ELightingBuildQuality::Quality_Production, bool bWithReflectionCaptures = false)"
  },
  {
    "label": "OnLevelAddedOrRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelAddedOrRemoved(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "OnCurrentLevelChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCurrentLevelChanged(ULevel* InNewLevel, ULevel* InOldLevel, UWorld* InWorld)"
  },
  {
    "label": "HandleOnPreSaveWorldWithContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnPreSaveWorldWithContext(class UWorld* World, FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "HandleOnPostSaveWorldWithContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnPostSaveWorldWithContext(class UWorld* World, FObjectPostSaveContext ObjectSaveContext)"
  },
  {
    "label": "HandleOnEditorCameraMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnEditorCameraMoved(const FVector& Location, const FRotator& Rotation, ELevelViewportType ViewportType, int32 ViewIndex)"
  },
  {
    "label": "HandleOnMapChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnMapChanged(uint32 MapChangeFlags)"
  },
  {
    "label": "HandleOnMapOpened()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnMapOpened(const FString& Filename, bool bAsTemplate)"
  }
]