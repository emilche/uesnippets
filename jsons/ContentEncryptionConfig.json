[
  {
    "label": "FContentEncryptionConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentEncryptionConfig"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGroup"
  },
  {
    "label": "AddPackage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" CoreTypes . h \" # include \" Misc / Guid . h \" # include \" UObject / NameTypes . h \" class FContentEncryptionConfig { public : enum class EAllowedReferences { None,Soft,All,} ; enum class EGroupType { Root,} ; struct FGroup { TSet<FName> PackageNames ; TSet<FString> NonAssetFiles ; TSet<FName> MountPoints ; EGroupType GroupType = EGroupType::Root ; EAllowedReferences AllowedReferences = EAllowedReferences::None ; } ; typedef TMap<FName,FGroup> TGroupMap ; void)",
    "insertText": "AddPackage(FName InGroupName, FName InPackageName)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (PackageGroups .)",
    "insertText": "FindOrAdd(InGroupName).PackageNames.Add(InPackageName)"
  },
  {
    "label": "AddNonAssetFile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddNonAssetFile(FName InGroupName, const FString& InFilename)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (PackageGroups .)",
    "insertText": "FindOrAdd(InGroupName).NonAssetFiles.Add(InFilename)"
  },
  {
    "label": "AddMountPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMountPoint(FName InGroupName, FName InMountPoint)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (PackageGroups .)",
    "insertText": "FindOrAdd(InGroupName).MountPoints.Add(InMountPoint)"
  },
  {
    "label": "SetGroupType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGroupType(FName InGroupName, EGroupType InGroupType)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (PackageGroups .)",
    "insertText": "FindOrAdd(InGroupName)"
  },
  {
    "label": "SetAllowedReferences()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAllowedReferences(FName InGroupName, EAllowedReferences InAllowedReferences)"
  },
  {
    "label": "AddReleasedKey()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReleasedKey(FGuid InKey)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ReleasedKeys .)",
    "insertText": "Add(InKey)"
  },
  {
    "label": "GetPackageGroupMap()",
    "kind": "Method",
    "detail": "Function (} const TGroupMap&)",
    "insertText": "GetPackageGroupMap()"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (PackageGroups .)",
    "insertText": "FindOrAdd(NAME_None).PackageNames.Append(PackageGroups.Find(GroupName)->PackageNames)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (PackageGroups .)",
    "insertText": "Remove(GroupName)"
  }
]