[
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FNavigableGeometryExport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigableGeometryExport"
  },
  {
    "label": "FNavigationRelevantData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationRelevantData"
  },
  {
    "label": "PxShape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PxShape"
  },
  {
    "label": "UShapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UShapeComponent"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "UNavAreaBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavAreaBase"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" Components / PrimitiveComponent . h \" # include \" ShapeComponent . generated . h \" class FPrimitiveSceneProxy ; struct FNavigableGeometryExport ; struct FNavigationRelevantData ; namespace physx { class PxShape ; })",
    "insertText": "UCLASS(abstract, hidecategories=(Object,LOD,Lighting,TextureStreaming,Activation,\"Components|Activation\"), editinlinenew, meta=(BlueprintSpawnableComponent), showcategories=(Mobility), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(transient, duplicatetransient)"
  },
  {
    "label": "PrepareSharedBodySetup()",
    "kind": "Method",
    "detail": "Function (template<ComponentType> bool)",
    "insertText": "PrepareSharedBodySetup()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bSuccess = bUseArchetypeBodySetup ;)",
    "insertText": "if(bUseArchetypeBodySetup && ShapeBodySetup == nullptr)"
  },
  {
    "label": "ComponentType()",
    "kind": "Method",
    "detail": "Function (ShapeBodySetup = CastChecked<)",
    "insertText": "ComponentType(GetArchetype())->GetBodySetup()"
  },
  {
    "label": "AddShapeToGeomArray()",
    "kind": "Method",
    "detail": "Function (bSuccess = ShapeBodySetup ! = nullptr ; } return bSuccess ; } template<ShapeElemType> void)",
    "insertText": "AddShapeToGeomArray()"
  },
  {
    "label": "SetShapeToNewGeom()",
    "kind": "Method",
    "detail": "Function (template<ShapeElemType> void)",
    "insertText": "SetShapeToNewGeom(const FPhysicsShapeHandle& Shape)"
  },
  {
    "label": "CreateShapeBodySetupIfNeeded()",
    "kind": "Method",
    "detail": "Function (template<ShapeElemType> void)",
    "insertText": "CreateShapeBodySetupIfNeeded()"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "GetBodySetup()",
    "kind": "Method",
    "detail": "Function (class UBodySetup*)",
    "insertText": "GetBodySetup()"
  },
  {
    "label": "DoCustomNavigableGeometryExport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoCustomNavigableGeometryExport(FNavigableGeometryExport& GeomExport)"
  },
  {
    "label": "GetNavigationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNavigationData(FNavigationRelevantData& Data)"
  },
  {
    "label": "IsNavigationRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNavigationRelevant()"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "ShouldCollideWhenPlacing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCollideWhenPlacing()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetIgnoreBoundsForEditorFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIgnoreBoundsForEditorFocus()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "UpdateBodySetup()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "UpdateBodySetup()"
  },
  {
    "label": "GetDesiredAreaClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<class UNavAreaBase>)",
    "insertText": "GetDesiredAreaClass()"
  },
  {
    "label": "SetAreaClassOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAreaClassOverride(TSubclassOf<class UNavAreaBase> InAreaClassOverride)"
  },
  {
    "label": "SetUseSystemDefaultObstacleAreaClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseSystemDefaultObstacleAreaClass()"
  }
]