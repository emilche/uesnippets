[
  {
    "label": "FMetadataSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetadataSchema"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FField"
  },
  {
    "label": "FBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuilder"
  },
  {
    "label": "FWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWriter"
  },
  {
    "label": "FReader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReader"
  },
  {
    "label": "IMetadataProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMetadataProvider"
  },
  {
    "label": "IEditableMetadataProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableMetadataProvider"
  },
  {
    "label": "FBuilder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Internationalization / Text . h \" # include \" Memory / SharedBuffer . h \" # include \" Templates / Function . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" UObject / NameTypes . h \" namespace TraceServices { class FMetadataSchema { public : enum class EFieldType : uint8 { Integer,SignedInteger,FloatingPoint,WideStringPtr,Reference,} ; struct FField { FName Name ; EFieldType Type ; uint8 Offset ; uint8 Size ; } ; struct FBuilder {)",
    "insertText": "FBuilder(FField* InBuffer, uint8 InMaxFieldCount) : Buffer(InBuffer), MaxFieldCount(InMaxFieldCount), CurrentFieldCount(0), CurrentOffset(0)"
  },
  {
    "label": "AddField()",
    "kind": "Method",
    "detail": "Function (} template<T> FBuilder&)",
    "insertText": "AddField(FName FieldName, EFieldType Type)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (FField* Field =& Buffer [ CurrentFieldCount + + ] ; Field -> Name = FieldName ; Field -> Type = Type ; Field -> Offset = CurrentOffset ; Field -> Size =)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "FWriter()",
    "kind": "Method",
    "detail": "Function (} private : FField* Buffer ; uint8 MaxFieldCount ; uint8 CurrentFieldCount ; uint8 CurrentOffset ; } ; struct FWriter {)",
    "insertText": "FWriter(const FField* InBuffer, uint8 InFieldCount) : Buffer(InBuffer), FieldCount(InFieldCount), Offset(0)"
  },
  {
    "label": "WriteField()",
    "kind": "Method",
    "detail": "Function (} template<ArrayType> void)",
    "insertText": "WriteField(uint8 Index, const void* Src, uint8 Size, ArrayType& Dst)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FField& Field = Buffer [ Index ] ;)",
    "insertText": "if(Dst.Num() < Field.Offset + Size)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (Dst .)",
    "insertText": "AddZeroed(Size)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} void* Dest = Dst .)",
    "insertText": "GetData()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Dest, Src, Size)"
  },
  {
    "label": "FReader()",
    "kind": "Method",
    "detail": "Function (} private : const FField* Buffer ; uint8 FieldCount ; uint8 Offset ; } ; struct FReader {)",
    "insertText": "FReader(const FField* InBuffer, uint8 InFieldCount) : Buffer(InBuffer), FieldCount(InFieldCount)"
  },
  {
    "label": "GetFieldCount()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "GetFieldCount()"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (const FField& Field = Buffer [ Index ] ;)",
    "insertText": "switch(Field.Type)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "Printf(TEXT(\"%llu\"), *GetValue<uint64>(MetaData, Index))"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (} } case EFieldType::SignedInteger : {)",
    "insertText": "switch(Field.Size)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "Printf(TEXT(\"%lli\"), *GetValue<int64>(MetaData, Index))"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "Format(TEXT(\"{0}\"), {*GetValue<double>(MetaData, Index)})"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (} } case EFieldType::WideStringPtr : { const TCHAR* String =* GetValue<)",
    "insertText": "TCHAR(MetaData, Index)"
  },
  {
    "label": "FEventRef16()",
    "kind": "Method",
    "detail": "Function (} case 2 : { const auto* Ref = GetValueAs<UE::)",
    "insertText": "FEventRef16(MetaData, Index)"
  },
  {
    "label": "FEventRef32()",
    "kind": "Method",
    "detail": "Function (} case 4 : { const auto* Ref = GetValueAs<UE::)",
    "insertText": "FEventRef32(MetaData, Index)"
  },
  {
    "label": "FEventRef64()",
    "kind": "Method",
    "detail": "Function (} default : { const auto* Ref = GetValueAs<UE::)",
    "insertText": "FEventRef64(MetaData, Index)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetText(uint8* MetaData, uint8 Index)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "AsNumber(*GetValue<uint64>(MetaData, Index))"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "AsNumber(*GetValue<int64>(MetaData, Index))"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "AsNumber(*GetValue<double>(MetaData, Index))"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} break ; case EFieldType::Reference : { const FTextFormat Fmt =)",
    "insertText": "FromString(TEXT(\"Ref({0},{1})\"))"
  },
  {
    "label": "GetValueAs()",
    "kind": "Method",
    "detail": "Function (} template<T> const T*)",
    "insertText": "GetValueAs(const uint8* Metadata, uint8 Index)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} private : template<T> const T*)",
    "insertText": "GetValue(const uint8* Metadata, uint8 Index)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const FField& Field = Buffer [ Index ] ;)",
    "insertText": "return(T*)(Metadata + Field.Offset)"
  },
  {
    "label": "FMetadataSchema()",
    "kind": "Method",
    "detail": "Function (} private : const FField* Buffer ; uint8 FieldCount ; } ;)",
    "insertText": "FMetadataSchema(uint8 InFieldCount)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (Fields .)",
    "insertText": "AddZeroed(InFieldCount)"
  },
  {
    "label": "FMetadataSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMetadataSchema(const FMetadataSchema& InSchema) : Fields(InSchema.Fields)"
  },
  {
    "label": "Builder()",
    "kind": "Method",
    "detail": "Function (} FBuilder)",
    "insertText": "Builder()"
  },
  {
    "label": "Writer()",
    "kind": "Method",
    "detail": "Function (} FWriter)",
    "insertText": "Writer()"
  },
  {
    "label": "Reader()",
    "kind": "Method",
    "detail": "Function (} FReader)",
    "insertText": "Reader()"
  },
  {
    "label": "FMetadataSchema()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FMetadataSchema()"
  },
  {
    "label": "IMetadataProvider()",
    "kind": "Method",
    "detail": "Function (TArray<FField> Fields ; } ; class IMetadataProvider : public IProvider { public : uint32 InvalidMetadataId = 0 xFFFFFFFF ; uint16 InvalidMetadataType = 0 xFF ; ~)",
    "insertText": "IMetadataProvider()"
  },
  {
    "label": "BeginRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRead()"
  },
  {
    "label": "EndRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRead()"
  },
  {
    "label": "ReadAccessCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadAccessCheck()"
  },
  {
    "label": "GetRegisteredMetadataType()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetRegisteredMetadataType(FName Name)"
  },
  {
    "label": "GetRegisteredMetadataName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetRegisteredMetadataName(uint16 Type)"
  },
  {
    "label": "GetRegisteredMetadataSchema()",
    "kind": "Method",
    "detail": "Function (const FMetadataSchema*)",
    "insertText": "GetRegisteredMetadataSchema(uint16)"
  },
  {
    "label": "GetMetadataStackSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMetadataStackSize(uint32 InThreadId, uint32 InMetadataId)"
  },
  {
    "label": "GetMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMetadata(uint32 InThreadId, uint32 InMetadataId, uint32 InStackDepth, uint16& OutType, const void*& OutData, uint32& OutSize)"
  },
  {
    "label": "EnumerateMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateMetadata(uint32 InThreadId, uint32 InMetadataId, TFunctionRef<bool(uint32 StackDepth, uint16 Type, const void* Data, uint32 Size)> Callback)"
  },
  {
    "label": "IEditableMetadataProvider()",
    "kind": "Method",
    "detail": "Function (} ; class IEditableMetadataProvider : public IEditableProvider { public : ~)",
    "insertText": "IEditableMetadataProvider()"
  },
  {
    "label": "BeginEdit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginEdit()"
  },
  {
    "label": "EndEdit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndEdit()"
  },
  {
    "label": "EditAccessCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditAccessCheck()"
  },
  {
    "label": "RegisterMetadataType()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "RegisterMetadataType(const TCHAR* InName, const FMetadataSchema& InSchema)"
  },
  {
    "label": "PushScopedMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushScopedMetadata(uint32 InThreadId, uint16 InType, const void* InData, uint32 InSize)"
  },
  {
    "label": "PopScopedMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopScopedMetadata(uint32 InThreadId, uint16 InType)"
  },
  {
    "label": "BeginClearStackScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginClearStackScope(uint32 InThreadId)"
  },
  {
    "label": "EndClearStackScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndClearStackScope(uint32 InThreadId)"
  },
  {
    "label": "SaveStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveStack(uint32 InThreadId, uint32 InSavedStackId)"
  },
  {
    "label": "BeginRestoreSavedStackScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRestoreSavedStackScope(uint32 InThreadId, uint32 InSavedStackId)"
  },
  {
    "label": "EndRestoreSavedStackScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRestoreSavedStackScope(uint32 InThreadId)"
  },
  {
    "label": "PinAndGetId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PinAndGetId(uint32 InThreadId)"
  },
  {
    "label": "OnAnalysisCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisCompleted()"
  },
  {
    "label": "GetMetadataProviderName()",
    "kind": "Method",
    "detail": "Function (} } ; FName)",
    "insertText": "GetMetadataProviderName()"
  },
  {
    "label": "ReadMetadataProvider()",
    "kind": "Method",
    "detail": "Function (const IMetadataProvider*)",
    "insertText": "ReadMetadataProvider(const IAnalysisSession& Session)"
  },
  {
    "label": "EditMetadataProvider()",
    "kind": "Method",
    "detail": "Function (IEditableMetadataProvider*)",
    "insertText": "EditMetadataProvider(IAnalysisSession& Session)"
  }
]