[
  {
    "label": "lazyAssign()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_ASSIGN_H # define EIGEN_ASSIGN_H namespace Eigen { template<Derived> template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived& DenseBase<Derived)",
    "insertText": "lazyAssign(const DenseBase<OtherDerived>& other)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_LVALUE()",
    "kind": "Method",
    "detail": "Function (enum { SameType = internal::is_same<Derived::Scalar,OtherDerived::Scalar>::value } ;)",
    "insertText": "EIGEN_STATIC_ASSERT_LVALUE(Derived) EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Derived,OtherDerived) EIGEN_STATIC_ASSERT(SameType,YOU_MIXED_DIFFERENT_NUMERIC_TYPES__YOU_NEED_TO_USE_THE_CAST_METHOD_OF_MATRIXBASE_TO_CAST_NUMERIC_TYPES_EXPLICITLY) eigen_assert(rows() == other.rows() && cols() == other.cols())"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(derived(),other.derived())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived& DenseBase<Derived)",
    "insertText": "operator(const DenseBase<OtherDerived>& other)"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment(derived(), other.derived())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived& DenseBase<Derived)",
    "insertText": "operator(const DenseBase& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived& MatrixBase<Derived)",
    "insertText": "operator(const MatrixBase& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived& MatrixBase<Derived)",
    "insertText": "operator(const EigenBase<OtherDerived>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived& MatrixBase<Derived)",
    "insertText": "operator(const ReturnByValue<OtherDerived>& other)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (other .)",
    "insertText": "derived().evalTo(derived())"
  }
]