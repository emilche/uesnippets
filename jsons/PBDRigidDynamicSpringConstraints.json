[
  {
    "label": "FPBDRigidDynamicSpringConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidDynamicSpringConstraints"
  },
  {
    "label": "FPBDRigidDynamicSpringConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidDynamicSpringConstraintHandle"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPBDRigidDynamicSpringConstraintHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Array . h \" # include \" Chaos / Evolution / IndexedConstraintContainer . h \" # include \" Chaos / ParticleHandle . h \" namespace Chaos { class FPBDRigidDynamicSpringConstraints ; class FPBDRigidDynamicSpringConstraintHandle final : public TIndexedContainerConstraintHandle<FPBDRigidDynamicSpringConstraints> { public : using Base = TIndexedContainerConstraintHandle<FPBDRigidDynamicSpringConstraints> ; using FConstraintContainer = FPBDRigidDynamicSpringConstraints ;)",
    "insertText": "FPBDRigidDynamicSpringConstraintHandle()"
  },
  {
    "label": "FPBDRigidDynamicSpringConstraintHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDRigidDynamicSpringConstraintHandle(FConstraintContainer* InConstraintContainer, int32 InConstraintIndex) : TIndexedContainerConstraintHandle<FPBDRigidDynamicSpringConstraints>(InConstraintContainer, InConstraintIndex)"
  },
  {
    "label": "GetConstrainedParticles()",
    "kind": "Method",
    "detail": "Function (} FParticlePair)",
    "insertText": "GetConstrainedParticles()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (const FConstraintHandleTypeID&)",
    "insertText": "StaticType()"
  },
  {
    "label": "STypeID()",
    "kind": "Method",
    "detail": "Function (FConstraintHandleTypeID)",
    "insertText": "STypeID(TEXT(\"FRigidDynamicSpringConstraintHandle\"), &FIndexedConstraintHandle::StaticType())"
  },
  {
    "label": "FPBDRigidDynamicSpringConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDRigidDynamicSpringConstraints(TArray<FConstrainedParticlePair>&& InConstraints, const FReal InCreationThreshold = (FReal)1., const int32 InMaxSprings = 1, const FReal InStiffness = (FReal)1.) : TPBDIndexedConstraintContainer<FPBDRigidDynamicSpringConstraints>(FConstraintContainerHandle::StaticType()) , Constraints(MoveTemp(InConstraints)) , CreationThreshold(InCreationThreshold) , MaxSprings(InMaxSprings) , Stiffness(InStiffness)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Handles .)",
    "insertText": "Reserve(Constraints.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Handles .)",
    "insertText": "Add(HandleAllocator.AllocHandle(this, ConstraintIndex))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Distances .)",
    "insertText": "Add({})"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ConstraintSolverBodies .)",
    "insertText": "Add({ nullptr, nullptr })"
  },
  {
    "label": "FPBDRigidDynamicSpringConstraints()",
    "kind": "Method",
    "detail": "Function (} } } ~)",
    "insertText": "FPBDRigidDynamicSpringConstraints()"
  },
  {
    "label": "NumConstraints()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumConstraints()"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (} FConstraintContainerHandle*)",
    "insertText": "AddConstraint(const FConstrainedParticlePair& InConstrainedParticles)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Handles .)",
    "insertText": "Add(HandleAllocator.AllocHandle(this, Handles.Num()))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Constraints .)",
    "insertText": "Add(InConstrainedParticles)"
  },
  {
    "label": "RemoveConstraint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveConstraint(int ConstraintIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FConstraintContainerHandle* ConstraintHandle = Handles [ ConstraintIndex ] ;)",
    "insertText": "if(ConstraintHandle != nullptr)"
  },
  {
    "label": "FreeHandle()",
    "kind": "Method",
    "detail": "Function (HandleAllocator .)",
    "insertText": "FreeHandle(ConstraintHandle)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (Handles [ ConstraintIndex ] = nullptr ; } Constraints .)",
    "insertText": "RemoveAtSwap(ConstraintIndex)"
  },
  {
    "label": "SetConstraintIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintIndex(Handles[ConstraintIndex], ConstraintIndex)"
  },
  {
    "label": "DisableConstraints()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DisableConstraints(const TSet<FGeometryParticleHandle*>& RemovedParticles)"
  },
  {
    "label": "SetCreationThreshold()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCreationThreshold(const FReal InCreationThreshold)"
  },
  {
    "label": "SetMaxSprings()",
    "kind": "Method",
    "detail": "Function (CreationThreshold = InCreationThreshold ; } void)",
    "insertText": "SetMaxSprings(const int32 InMaxSprings)"
  },
  {
    "label": "GetConstraintHandles()",
    "kind": "Method",
    "detail": "Function (MaxSprings = InMaxSprings ; } FHandles&)",
    "insertText": "GetConstraintHandles()"
  },
  {
    "label": "GetNumConstraints()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumConstraints()"
  },
  {
    "label": "ResetConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetConstraints()"
  },
  {
    "label": "AddConstraintsToGraph()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddConstraintsToGraph(Private::FPBDIslandManager& IslandManager)"
  },
  {
    "label": "PrepareTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareTick()"
  },
  {
    "label": "UnprepareTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnprepareTick()"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddBodies(FSolverBodyContainer& SolverBodyContainer)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInput(const FReal Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ScatterOutput(const FReal Dt)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProjectionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddBodies(const TArrayView<int32>& ConstraintIndices, FSolverBodyContainer& SolverBodyContainer)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInput(const TArrayView<int32>& ConstraintIndices, const FReal Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ScatterOutput(const TArrayView<int32>& ConstraintIndices, const FReal Dt)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionConstraints(const TArrayView<int32>& ConstraintIndices, const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityConstraints(const TArrayView<int32>& ConstraintIndices, const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProjectionConstraints(const TArrayView<int32>& ConstraintIndices, const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (} protected : using Base::GetConstraintIndex ; using Base::SetConstraintIndex ; private : void)",
    "insertText": "AddBodies(const int32 ConstraintIndex, FSolverBodyContainer& SolverBodyContainer)"
  },
  {
    "label": "ApplySingle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySingle(const FReal Dt, int32 ConstraintIndex)"
  },
  {
    "label": "GetDelta()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetDelta(const FVec3& WorldSpaceX1, const FVec3& WorldSpaceX2, const int32 ConstraintIndex, const int32 SpringIndex)"
  }
]