[
  {
    "label": "FMixerDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerDevice"
  },
  {
    "label": "FQuartzClockManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzClockManager"
  },
  {
    "label": "FQuartzShareableCommandQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzShareableCommandQueue"
  },
  {
    "label": "FQuartzTickableObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzTickableObject"
  },
  {
    "label": "UQuartzClockHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UQuartzClockHandle"
  },
  {
    "label": "FQuartzTickableObjectsManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzTickableObjectsManager"
  },
  {
    "label": "UQuartzSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UQuartzSubsystem"
  },
  {
    "label": "UQuartzGameSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UQuartzGameSubsystem"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "SubscribeToQuartzTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribeToQuartzTick(FQuartzTickableObject* InObjectToTick)"
  },
  {
    "label": "UnsubscribeFromQuartzTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromQuartzTick(FQuartzTickableObject* InObjectToTick)"
  },
  {
    "label": "SubscribeToQuartzTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribeToQuartzTick(FQuartzTickableObject* InObjectToTick)"
  },
  {
    "label": "UnsubscribeFromQuartzTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromQuartzTick(FQuartzTickableObject* InObjectToTick)"
  },
  {
    "label": "AddProxyForExternalClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddProxyForExternalClock(const Audio::FQuartzClockProxy& InProxy)"
  },
  {
    "label": "CreateRequestDataForTickRateChange()",
    "kind": "Method",
    "detail": "Function (Audio::FQuartzQuantizedRequestData)",
    "insertText": "CreateRequestDataForTickRateChange(UQuartzClockHandle* InClockHandle, const FOnQuartzCommandEventBP& InDelegate, const Audio::FQuartzClockTickRate& InNewTickRate, const FQuartzQuantizationBoundary& InQuantizationBoundary)"
  },
  {
    "label": "CreateRequestDataForTransportReset()",
    "kind": "Method",
    "detail": "Function (Audio::FQuartzQuantizedRequestData)",
    "insertText": "CreateRequestDataForTransportReset(UQuartzClockHandle* InClockHandle, const FQuartzQuantizationBoundary& InQuantizationBoundary, const FOnQuartzCommandEventBP& InDelegate)"
  },
  {
    "label": "CreateRequestDataForStartOtherClock()",
    "kind": "Method",
    "detail": "Function (Audio::FQuartzQuantizedRequestData)",
    "insertText": "CreateRequestDataForStartOtherClock(UQuartzClockHandle* InClockHandle, FName InClockToStart, const FQuartzQuantizationBoundary& InQuantizationBoundary, const FOnQuartzCommandEventBP& InDelegate)"
  },
  {
    "label": "CreateRequestDataForSchedulePlaySound()",
    "kind": "Method",
    "detail": "Function (Audio::FQuartzQuantizedRequestData)",
    "insertText": "CreateRequestDataForSchedulePlaySound(UQuartzClockHandle* InClockHandle, const FOnQuartzCommandEventBP& InDelegate, const FQuartzQuantizationBoundary& InQuantizationBoundary)"
  },
  {
    "label": "CreateRequestDataForQuantizedNotify()",
    "kind": "Method",
    "detail": "Function (Audio::FQuartzQuantizedRequestData)",
    "insertText": "CreateRequestDataForQuantizedNotify(UQuartzClockHandle* InClockHandle, const FQuartzQuantizationBoundary& InQuantizationBoundary, const FOnQuartzCommandEventBP& InDelegate, float InMsOffset = 0.f)"
  },
  {
    "label": "IsQuartzEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsQuartzEnabled()"
  },
  {
    "label": "DeleteClockByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteClockByName(const UObject* WorldContextObject, FName ClockName)"
  },
  {
    "label": "DoesClockExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesClockExist(const UObject* WorldContextObject, FName ClockName)"
  },
  {
    "label": "IsClockRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClockRunning(const UObject* WorldContextObject, FName ClockName)"
  },
  {
    "label": "GetDurationOfQuantizationTypeInSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDurationOfQuantizationTypeInSeconds(const UObject* WorldContextObject, FName ClockName, const EQuartzCommandQuantization& QuantizationType, float Multiplier = 1.0f)"
  },
  {
    "label": "GetCurrentClockTimestamp()",
    "kind": "Method",
    "detail": "Function (FQuartzTransportTimeStamp)",
    "insertText": "GetCurrentClockTimestamp(const UObject* WorldContextObject, const FName& InClockName)"
  },
  {
    "label": "GetEstimatedClockRunTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEstimatedClockRunTime(const UObject* WorldContextObject, const FName& InClockName)"
  },
  {
    "label": "GetGameThreadToAudioRenderThreadAverageLatency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGameThreadToAudioRenderThreadAverageLatency(const UObject* WorldContextObject)"
  },
  {
    "label": "GetGameThreadToAudioRenderThreadMinLatency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGameThreadToAudioRenderThreadMinLatency(const UObject* WorldContextObject)"
  },
  {
    "label": "GetGameThreadToAudioRenderThreadMaxLatency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGameThreadToAudioRenderThreadMaxLatency(const UObject* WorldContextObject)"
  },
  {
    "label": "GetAudioRenderThreadToGameThreadAverageLatency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAudioRenderThreadToGameThreadAverageLatency()"
  },
  {
    "label": "GetAudioRenderThreadToGameThreadMinLatency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAudioRenderThreadToGameThreadMinLatency()"
  },
  {
    "label": "GetAudioRenderThreadToGameThreadMaxLatency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAudioRenderThreadToGameThreadMaxLatency()"
  },
  {
    "label": "GetRoundTripAverageLatency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRoundTripAverageLatency(const UObject* WorldContextObject)"
  },
  {
    "label": "GetRoundTripMinLatency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRoundTripMinLatency(const UObject* WorldContextObject)"
  },
  {
    "label": "GetRoundTripMaxLatency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRoundTripMaxLatency(const UObject* WorldContextObject)"
  },
  {
    "label": "SetQuartzSubsystemTickableWhenPaused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQuartzSubsystemTickableWhenPaused(const bool bInTickableWhenPaused)"
  },
  {
    "label": "PruneStaleProxies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneStaleProxies()"
  },
  {
    "label": "PruneStaleProxiesInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneStaleProxiesInternal(TArray<Audio::FQuartzClockProxy>& ContainerToPrune)"
  }
]