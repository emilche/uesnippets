[
  {
    "label": "FMixerDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerDevice"
  },
  {
    "label": "FQuartzClockManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzClockManager"
  },
  {
    "label": "FQuartzShareableCommandQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzShareableCommandQueue"
  },
  {
    "label": "FQuartzTickableObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzTickableObject"
  },
  {
    "label": "UQuartzClockHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UQuartzClockHandle"
  },
  {
    "label": "FQuartzTickableObjectsManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzTickableObjectsManager"
  },
  {
    "label": "UQuartzSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UQuartzSubsystem"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Subsystems / WorldSubsystem . h \" # include \" Quartz / AudioMixerClockManager . h \" # include \" Sound / QuartzQuantizationUtilities . h \" # include \" QuartzSubsystem . generated . h \" namespace Audio { class FMixerDevice ; class FQuartzClockManager ; class FQuartzShareableCommandQueue ; } class FQuartzTickableObject ; class UQuartzClockHandle ; using MetronomeCommandQueuePtr = TSharedPtr<Audio::FQuartzShareableCommandQueue,ESPMode::ThreadSafe> ; struct FQuartzTickableObjectsManager : public FQuartLatencyTracker { public : void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "SubscribeToQuartzTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribeToQuartzTick(FQuartzTickableObject* InObjectToTick)"
  },
  {
    "label": "UnsubscribeFromQuartzTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromQuartzTick(FQuartzTickableObject* InObjectToTick)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (private : TArray<FQuartzTickableObject*> QuartzTickSubscribers ; int32 UpdateIndex { 0 } ; } ;)",
    "insertText": "UCLASS(DisplayName = \"Quartz\", MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UQuartzSubsystem()"
  },
  {
    "label": "UQuartzSubsystem()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UQuartzSubsystem()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FSubsystemCollectionBase& Collection)"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "DoesSupportWorldType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSupportWorldType(EWorldType::Type WorldType)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "IsTickableWhenPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickableWhenPaused()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "GetProxyForClock()",
    "kind": "Method",
    "detail": "Function (Audio::FQuartzClockProxy)",
    "insertText": "GetProxyForClock(FName ClockName)"
  },
  {
    "label": "AddProxyForExternalClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddProxyForExternalClock(const Audio::FQuartzClockProxy& InProxy)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UQuartzSubsystem*)",
    "insertText": "Get(const UWorld* const World)"
  },
  {
    "label": "CreateRequestDataForTickRateChange()",
    "kind": "Method",
    "detail": "Function (Audio::FQuartzQuantizedRequestData)",
    "insertText": "CreateRequestDataForTickRateChange(UQuartzClockHandle* InClockHandle, const FOnQuartzCommandEventBP& InDelegate, const Audio::FQuartzClockTickRate& InNewTickRate, const FQuartzQuantizationBoundary& InQuantizationBoundary)"
  },
  {
    "label": "CreateRequestDataForTransportReset()",
    "kind": "Method",
    "detail": "Function (Audio::FQuartzQuantizedRequestData)",
    "insertText": "CreateRequestDataForTransportReset(UQuartzClockHandle* InClockHandle, const FQuartzQuantizationBoundary& InQuantizationBoundary, const FOnQuartzCommandEventBP& InDelegate)"
  },
  {
    "label": "CreateRequestDataForStartOtherClock()",
    "kind": "Method",
    "detail": "Function (Audio::FQuartzQuantizedRequestData)",
    "insertText": "CreateRequestDataForStartOtherClock(UQuartzClockHandle* InClockHandle, FName InClockToStart, const FQuartzQuantizationBoundary& InQuantizationBoundary, const FOnQuartzCommandEventBP& InDelegate)"
  },
  {
    "label": "CreateRequestDataForSchedulePlaySound()",
    "kind": "Method",
    "detail": "Function (Audio::FQuartzQuantizedRequestData)",
    "insertText": "CreateRequestDataForSchedulePlaySound(UQuartzClockHandle* InClockHandle, const FOnQuartzCommandEventBP& InDelegate, const FQuartzQuantizationBoundary& InQuantizationBoundary)"
  },
  {
    "label": "CreateRequestDataForQuantizedNotify()",
    "kind": "Method",
    "detail": "Function (Audio::FQuartzQuantizedRequestData)",
    "insertText": "CreateRequestDataForQuantizedNotify(UQuartzClockHandle* InClockHandle, const FQuartzQuantizationBoundary& InQuantizationBoundary, const FOnQuartzCommandEventBP& InDelegate, float InMsOffset = 0.f)"
  },
  {
    "label": "GetTickableObjectManager()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FQuartzTickableObjectsManager>)",
    "insertText": "GetTickableObjectManager()"
  },
  {
    "label": "PruneStaleProxies()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PruneStaleProxies()"
  },
  {
    "label": "PruneStaleProxiesInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneStaleProxiesInternal(TArray<Audio::FQuartzClockProxy>& ContainerToPrune)"
  },
  {
    "label": "FQuartzTickableObjectsManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FQuartzTickableObjectsManager> TickableObjectManagerPtr { MakeShared<)",
    "insertText": "FQuartzTickableObjectsManager()"
  },
  {
    "label": "FindProxyByName()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<Audio::FPersistentQuartzSubsystemData> ClockManagerDataPtr { nullptr } ; bool bTickEvenWhenPaused = false ; Audio::FQuartzClockProxy*)",
    "insertText": "FindProxyByName(const FName& ClockName)"
  },
  {
    "label": "GetClockManager()",
    "kind": "Method",
    "detail": "Function (Audio::FQuartzClockManager*)",
    "insertText": "GetClockManager(const UObject* WorldContextObject, bool bUseAudioEngineClockManager = true)"
  }
]