[
  {
    "label": "FNetBitWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitWriter"
  },
  {
    "label": "FNetTokenStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenStore"
  },
  {
    "label": "FNetTokenStoreState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenStoreState"
  },
  {
    "label": "FNetTokenExportContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenExportContext"
  },
  {
    "label": "FNetTokenExportScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenExportScope"
  },
  {
    "label": "GetNetTokenStore()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" NetToken . h \" class FNetBitWriter ; namespace UE::Net { class FNetTokenStore ; class FNetTokenStoreState ; } namespace UE::Net { class FNetTokenExportContext { public : typedef TArray<UE::Net::FNetToken,TInlineAllocator<4>> FNetTokenExports ; FNetTokenStore*)",
    "insertText": "GetNetTokenStore()"
  },
  {
    "label": "AddNetTokenPendingExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNetTokenPendingExport(UE::Net::FNetToken NetToken)"
  },
  {
    "label": "AppendNetTokensPendingExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendNetTokensPendingExport(TArrayView<const UE::Net::FNetToken> NetTokens)"
  },
  {
    "label": "GetNetTokensPendingExport()",
    "kind": "Method",
    "detail": "Function (TArrayView<const UE::Net::FNetToken>)",
    "insertText": "GetNetTokensPendingExport()"
  },
  {
    "label": "GetNetTokenExportContext()",
    "kind": "Method",
    "detail": "Function (FNetTokenExportContext*)",
    "insertText": "GetNetTokenExportContext(FArchive& Ar)"
  },
  {
    "label": "FNetTokenExportContext()",
    "kind": "Method",
    "detail": "Function (private : class FNetTokenExportScope ;)",
    "insertText": "FNetTokenExportContext(FNetTokenStore* InNetTokenStore, FNetTokenExports* InNetTokensPendingExport)"
  },
  {
    "label": "FNetTokenExportScope()",
    "kind": "Method",
    "detail": "Function (FNetTokenStore* NetTokenStore = nullptr ; FNetTokenExports* NetTokensPendingExport = nullptr ; } ; class FNetTokenExportScope { public :)",
    "insertText": "FNetTokenExportScope(FNetBitWriter& InNetBitWriter, UE::Net::FNetTokenStore* InNetTokenStore, FNetTokenExportContext::FNetTokenExports& TargetExports, const char* InDebugName = \"None\")"
  },
  {
    "label": "FNetTokenExportScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNetTokenExportScope()"
  }
]