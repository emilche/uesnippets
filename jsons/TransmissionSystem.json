[
  {
    "label": "ETransmissionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETransmissionType"
  },
  {
    "label": "EDifferentialType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDifferentialType"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FSimpleDifferentialConfig()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Math / UnrealMathSSE . h \" # include \" VehicleSystemTemplate . h \" # include \" VehicleUtility . h \" # if VEHICLE_DEBUGGING_ENABLED UE_DISABLE_OPTIMIZATION_SHIP # endif namespace Chaos { enum ETransmissionType : uint8 { Manual,Automatic } ; enum EDifferentialType : uint8 { UndefinedDrive,AllWheelDrive,FrontWheelDrive,RearWheelDrive,} ; struct FSimpleDifferentialConfig {)",
    "insertText": "FSimpleDifferentialConfig() : DifferentialType(EDifferentialType::RearWheelDrive) , FrontRearSplit(0.5f)"
  },
  {
    "label": "FSimpleDifferentialSim()",
    "kind": "Method",
    "detail": "Function (} EDifferentialType DifferentialType ; float FrontRearSplit ; } ; class FSimpleDifferentialSim : public TVehicleSystem<FSimpleDifferentialConfig> { public :)",
    "insertText": "FSimpleDifferentialSim(const FSimpleDifferentialConfig* SetupIn) : TVehicleSystem<FSimpleDifferentialConfig>(SetupIn) , FrontRearSplit(Setup().FrontRearSplit)"
  },
  {
    "label": "FSimpleTransmissionConfig()",
    "kind": "Method",
    "detail": "Function (} float FrontRearSplit ; } ; struct FSimpleTransmissionConfig {)",
    "insertText": "FSimpleTransmissionConfig() : FinalDriveRatio(1.f) , ChangeUpRPM(5000) , ChangeDownRPM(2500) , GearChangeTime(0.2f) , TransmissionEfficiency(1.f) , TransmissionType(ETransmissionType::Automatic) , AutoReverse(true)"
  },
  {
    "label": "FSimpleTransmissionSim()",
    "kind": "Method",
    "detail": "Function (} TArray<float> ForwardRatios ; TArray<float> ReverseRatios ; float FinalDriveRatio ; uint32 ChangeUpRPM ; uint32 ChangeDownRPM ; float GearChangeTime ; float TransmissionEfficiency ; ETransmissionType TransmissionType ; bool AutoReverse ; } ; class FSimpleTransmissionSim : public TVehicleSystem<FSimpleTransmissionConfig> { public :)",
    "insertText": "FSimpleTransmissionSim(const FSimpleTransmissionConfig* SetupIn)"
  },
  {
    "label": "SetGear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGear(int32 InGear, bool Immediate = false)"
  },
  {
    "label": "ChangeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeUp()"
  },
  {
    "label": "SetGear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGear(TargetGear + 1)"
  },
  {
    "label": "ChangeDown()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ChangeDown()"
  },
  {
    "label": "SetGear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGear(TargetGear - 1)"
  },
  {
    "label": "SetEngineRPM()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEngineRPM(float InRPM)"
  },
  {
    "label": "SetAllowedToChangeGear()",
    "kind": "Method",
    "detail": "Function (EngineRPM = InRPM ; } void)",
    "insertText": "SetAllowedToChangeGear(bool OkToChangeIn)"
  },
  {
    "label": "GetCurrentGear()",
    "kind": "Method",
    "detail": "Function (AllowedToChangeGear = OkToChangeIn ; } int32)",
    "insertText": "GetCurrentGear()"
  },
  {
    "label": "SetTargetGear()",
    "kind": "Method",
    "detail": "Function (CurrentGear = InCurrentGear ; } void)",
    "insertText": "SetTargetGear(const int32 InTargetGear)"
  },
  {
    "label": "SetCurrentGearChangeTime()",
    "kind": "Method",
    "detail": "Function (TargetGear = InTargetGear ; } void)",
    "insertText": "SetCurrentGearChangeTime(const float InCurrentGearChangeTime)"
  },
  {
    "label": "IsCurrentlyChangingGear()",
    "kind": "Method",
    "detail": "Function (CurrentGearChangeTime = InCurrentGearChangeTime ; } bool)",
    "insertText": "IsCurrentlyChangingGear()"
  },
  {
    "label": "GetGearRatio()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetGearRatio(int32 InGear)"
  },
  {
    "label": "GetTransmissionRPM()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTransmissionRPM(float InEngineRPM, int InGear)"
  },
  {
    "label": "GetTransmissionRPM()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetTransmissionRPM()"
  },
  {
    "label": "GetTransmissionTorque()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetTransmissionTorque(float InEngineTorque)"
  },
  {
    "label": "GetEngineRPMFromWheelRPM()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetEngineRPMFromWheelRPM(float InWheelRPM)"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Simulate(float DeltaTime)"
  },
  {
    "label": "CorrectGearInputRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CorrectGearInputRange(int32& GearIndexInOut)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (GearIndexInOut =)",
    "insertText": "Clamp(GearIndexInOut, -Setup().ReverseRatios.Num(), Setup().ForwardRatios.Num())"
  }
]