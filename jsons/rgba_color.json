[
  {
    "label": "RgbaColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RgbaColor"
  },
  {
    "label": "RgbaColor()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_RGBA_COLOR_H_ # define MODULES_DESKTOP_CAPTURE_RGBA_COLOR_H_ # include<stdint . h> # include \" modules / desktop_capture / desktop_frame . h \" namespace webrtc { struct RgbaColor final {)",
    "insertText": "RgbaColor(uint8_t blue, uint8_t green, uint8_t red, uint8_t alpha)"
  },
  {
    "label": "RgbaColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RgbaColor(uint8_t blue, uint8_t green, uint8_t red)"
  },
  {
    "label": "RgbaColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RgbaColor(const uint8_t* bgra)"
  },
  {
    "label": "RgbaColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RgbaColor(uint32_t bgra)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const RgbaColor& right)"
  },
  {
    "label": "ToUInt32()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "ToUInt32()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (uint8_t blue ; uint8_t green ; uint8_t red ; uint8_t alpha ; } ;)",
    "insertText": "static_assert(DesktopFrame::kBytesPerPixel == sizeof(RgbaColor), \"A pixel in DesktopFrame should be safe to be represented by a RgbaColor\")"
  }
]