[
  {
    "label": "USoundModulatorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundModulatorBase"
  },
  {
    "label": "FModulationParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModulationParameter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSoundModulationDestinationSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundModulationDestinationSettings"
  },
  {
    "label": "FSoundModulationDefaultSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundModulationDefaultSettings"
  },
  {
    "label": "FSoundModulationDefaultRoutingSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundModulationDefaultRoutingSettings"
  },
  {
    "label": "FModulationDestination",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModulationDestination"
  },
  {
    "label": "FModulationDestinationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModulationDestinationData"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" Containers / Set . h \" # include \" DSP / BufferVectorOperations . h \" # include \" HAL / CriticalSection . h \" # include \" IAudioModulation . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectPtr . h \" # include \" SoundModulationDestination . generated . h \" class USoundModulatorBase ; namespace Audio { struct FModulationParameter ; })",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Volume,Pitch,Lowpass,Highpass,Count)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Modulation)"
  },
  {
    "label": "VersionModulators()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "VersionModulators()"
  },
  {
    "label": "FSoundModulationDestinationSettings()",
    "kind": "Method",
    "detail": "Function (# endif PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FSoundModulationDestinationSettings()"
  },
  {
    "label": "FSoundModulationDestinationSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoundModulationDestinationSettings(const FSoundModulationDestinationSettings&)"
  },
  {
    "label": "FSoundModulationDestinationSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoundModulationDestinationSettings(FSoundModulationDestinationSettings&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSoundModulationDestinationSettings&)",
    "insertText": "operator(const FSoundModulationDestinationSettings&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSoundModulationDestinationSettings&)",
    "insertText": "operator(FSoundModulationDestinationSettings&&)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() ENGINE_API FSoundModulationDefaultSettings()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() ENGINE_API FSoundModulationDefaultRoutingSettings()"
  },
  {
    "label": "FModulationDestination()",
    "kind": "Method",
    "detail": "Function (} ; namespace Audio { struct FModulationDestination { public :)",
    "insertText": "FModulationDestination()"
  },
  {
    "label": "FModulationDestination()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FModulationDestination(const FModulationDestination& InModulationDestination)"
  },
  {
    "label": "FModulationDestination()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FModulationDestination(FModulationDestination&& InModulationDestination)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FModulationDestination&)",
    "insertText": "operator(const FModulationDestination& InModulationDestination)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FModulationDestination&)",
    "insertText": "operator(FModulationDestination&& InModulationDestination)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FDeviceId InDeviceId, bool bInIsBuffered = false, bool bInValueNormalized = false)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FDeviceId InDeviceId, FName InParameterName, bool bInIsBuffered = false, bool bInValueNormalized = false)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "ProcessControl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessControl(float InValueUnitBase, int32 InNumSamples = 0)"
  },
  {
    "label": "UpdateModulators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModulators(const TSet<TObjectPtr<USoundModulatorBase>>& InModulators)"
  },
  {
    "label": "UpdateModulators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModulators(const TSet<USoundModulatorBase*>& InModulators)"
  },
  {
    "label": "UpdateModulators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModulators(const TSet<const USoundModulatorBase*>& InModulators)"
  },
  {
    "label": "UpdateModulatorsInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateModulatorsInternal(TArray<TUniquePtr<Audio::IModulatorSettings>>&& ProxySettings)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FModulationDestinationData { FDeviceId DeviceId = INDEX_NONE ; float ValueTarget = 1 . 0 f ; bool bIsBuffered = false ; bool bValueNormalized = false ; bool bHasProcessed = false ; FAlignedFloatBuffer OutputBuffer ; TSet<FModulatorHandle> Handles ; FModulationParameter Parameter ; FCriticalSection HandleCritSection ; FModulationDestinationData&)",
    "insertText": "operator(const FModulationDestinationData& InDestInfo)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FModulationDestinationData&)",
    "insertText": "operator(FModulationDestinationData&& InDestInfo)"
  },
  {
    "label": "GetDeviceId()",
    "kind": "Method",
    "detail": "Function (const FDeviceId&)",
    "insertText": "GetDeviceId()"
  },
  {
    "label": "GetParameter()",
    "kind": "Method",
    "detail": "Function (const FModulationParameter&)",
    "insertText": "GetParameter()"
  },
  {
    "label": "SetHandles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHandles(TSet<FModulatorHandle>&& Handles)"
  },
  {
    "label": "ResetHandles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetHandles()"
  },
  {
    "label": "FModulationDestinationData()",
    "kind": "Method",
    "detail": "Function (} ; TSharedRef<FModulationDestinationData> DestinationData { MakeShared<)",
    "insertText": "FModulationDestinationData()"
  },
  {
    "label": "GetBuffer()",
    "kind": "Method",
    "detail": "Function (public : const FAlignedFloatBuffer&)",
    "insertText": "GetBuffer()"
  }
]