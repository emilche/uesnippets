[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_PORTS_X86_H_ # define VPX_VPX_PORTS_X86_H_ # include<stdlib . h> # if)",
    "insertText": "defined(_MSC_VER)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif typedef enum { VPX_CPU_UNKNOWN = - 1,VPX_CPU_AMD,VPX_CPU_AMD_OLD,VPX_CPU_CENTAUR,VPX_CPU_CYRIX,VPX_CPU_INTEL,VPX_CPU_NEXGEN,VPX_CPU_NSC,VPX_CPU_RISE,VPX_CPU_SIS,VPX_CPU_TRANSMETA,VPX_CPU_TRANSMETA_OLD,VPX_CPU_UMC,VPX_CPU_VIA,VPX_CPU_LAST } vpx_cpu_t ; # if)",
    "insertText": "defined(__GNUC__) && __GNUC__ || defined(__ANDROID__) #if VPX_ARCH_X86_64 #define cpuid(func, func2, ax, bx, cx, dx) \\ __asm__ __volatile__(\"cpuid \\n\\t\" \\ : \"=a\"(ax), \"=b\"(bx), \"=c\"(cx), \"=d\"(dx) \\ : \"a\"(func), \"c\"(func2)) #else #define cpuid(func, func2, ax, bx, cx, dx) \\ __asm__ __volatile__( \\ \"mov %%ebx, %%edi \\n\\t\" \\ \"cpuid \\n\\t\" \\ \"xchg %%edi, %%ebx \\n\\t\" \\ : \"=a\"(ax), \"=D\"(bx), \"=c\"(cx), \"=d\"(dx) \\ : \"a\"(func), \"c\"(func2)) #endif #elif defined(__SUNPRO_C) || \\ defined(__SUNPRO_CC) #if VPX_ARCH_X86_64 #define cpuid(func, func2, ax, bx, cx, dx) \\ asm volatile( \\ \"xchg %rsi, %rbx \\n\\t\" \\ \"cpuid \\n\\t\" \\ \"movl %ebx, %edi \\n\\t\" \\ \"xchg %rsi, %rbx \\n\\t\" \\ : \"=a\"(ax), \"=D\"(bx), \"=c\"(cx), \"=d\"(dx) \\ : \"a\"(func), \"c\"(func2)) #else #define cpuid(func, func2, ax, bx, cx, dx) \\ asm volatile( \\ \"pushl %ebx \\n\\t\" \\ \"cpuid \\n\\t\" \\ \"movl %ebx, %edi \\n\\t\" \\ \"popl %ebx \\n\\t\" \\ : \"=a\"(ax), \"=D\"(bx), \"=c\"(cx), \"=d\"(dx) \\ : \"a\"(func), \"c\"(func2)) #endif #else #if VPX_ARCH_X86_64 #if defined(_MSC_VER) && _MSC_VER > 1500 #define cpuid(func, func2, a, b, c, d)"
  },
  {
    "label": "__cpuidex()",
    "kind": "Method",
    "detail": "Function (\\ int regs [ 4 ] ; \\)",
    "insertText": "__cpuidex(regs, func, func2)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ a = regs [ 0 ] ; \\ b = regs [ 1 ] ; \\ c = regs [ 2 ] ; \\ d = regs [ 3 ] ; \\ })",
    "insertText": "while(0) #else #define cpuid(func, func2, a, b, c, d)"
  },
  {
    "label": "__cpuid()",
    "kind": "Method",
    "detail": "Function (\\ int regs [ 4 ] ; \\)",
    "insertText": "__cpuid(regs, func)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ a = regs [ 0 ] ; \\ b = regs [ 1 ] ; \\ c = regs [ 2 ] ; \\ d = regs [ 3 ] ; \\ })",
    "insertText": "while(0) #endif #else #define cpuid(func, func2, a, b, c, d) \\ __asm mov eax, func __asm mov ecx, func2 __asm cpuid __asm mov a, \\ eax __asm mov b, ebx __asm mov c, ecx __asm mov d, edx #endif #endif #if !defined(__native_client__) && (defined(__i386__) || defined(__x86_64__)) static INLINE uint64_t xgetbv(void)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (const uint32_t ecx = 0 ; uint32_t eax,edx ; __asm__)",
    "insertText": "volatile(\".byte 0x0f, 0x01, 0xd0\\n\" : \"=a\"(eax), \"=d\"(edx) : \"c\"(ecx))"
  },
  {
    "label": "elif()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "elif(defined(_M_X64) || defined(_M_IX86)) && defined(_MSC_FULL_VER) && \\ _MSC_FULL_VER >= 160040219 #include <immintrin.h> #define xgetbv() _xgetbv(0) #elif defined(_MSC_VER) && defined(_M_IX86) static INLINE uint64_t xgetbv(void)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (uint32_t eax_,edx_ ; __asm { xor ecx,ecx __asm _emit 0 x0f __asm _emit 0 x01 __asm _emit 0 xd0 mov eax_,eax mov edx_,edx })",
    "insertText": "return((uint64_t)edx_ << 32)"
  },
  {
    "label": "xgetbv()",
    "kind": "Method",
    "detail": "Function (} # else # define)",
    "insertText": "xgetbv() 0U #endif #if defined(_MSC_VER) && _MSC_VER >= 1700 #undef NOMINMAX #define NOMINMAX #ifndef WIN32_LEAN_AND_MEAN #define WIN32_LEAN_AND_MEAN #endif #include <windows.h> #if WINAPI_FAMILY_PARTITION(WINAPI_FAMILY_APP) #define getenv(x) NULL #endif #endif #define HAS_MMX 0x001 #define HAS_SSE 0x002 #define HAS_SSE2 0x004 #define HAS_SSE3 0x008 #define HAS_SSSE3 0x010 #define HAS_SSE4_1 0x020 #define HAS_AVX 0x040 #define HAS_AVX2 0x080 #define HAS_AVX512 0x100 #ifndef BIT #define BIT(n) (1u << (n)) #endif static INLINE int x86_simd_caps(void)"
  },
  {
    "label": "env()",
    "kind": "Method",
    "detail": "Function (unsigned int flags = 0 ; unsigned int mask = ~ 0 u ; unsigned int max_cpuid_val,reg_eax,reg_ebx,reg_ecx,reg_edx ; char*)",
    "insertText": "env(void)"
  },
  {
    "label": "getenv()",
    "kind": "Method",
    "detail": "Function (env =)",
    "insertText": "getenv(\"VPX_SIMD_CAPS\")"
  },
  {
    "label": "getenv()",
    "kind": "Method",
    "detail": "Function (env =)",
    "insertText": "getenv(\"VPX_SIMD_CAPS_MASK\")"
  },
  {
    "label": "cpuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cpuid(0, 0, max_cpuid_val, reg_ebx, reg_ecx, reg_edx)"
  },
  {
    "label": "cpuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cpuid(1, 0, reg_eax, reg_ebx, reg_ecx, reg_edx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (flags | = HAS_AVX ;)",
    "insertText": "if(max_cpuid_val >= 7)"
  },
  {
    "label": "cpuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cpuid(7, 0, reg_eax, reg_ebx, reg_ecx, reg_edx)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "__volatile__(\"rdtsc\\n\\t\" : \"=a\"(tsc) :)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"rdtsc\\n\\t\" : \"=a\"(tsc) :)"
  },
  {
    "label": "x86_readtsc64()",
    "kind": "Method",
    "detail": "Function (# else __asm rdtsc ; # endif # endif } uint64_t)",
    "insertText": "x86_readtsc64(void)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "__volatile__(\"rdtsc\" : \"=a\"(lo), \"=d\"(hi))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(__SUNPRO_C) || defined(__SUNPRO_CC)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"rdtsc\\n\\t\" : \"=a\"(lo), \"=d\"(hi))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else # if VPX_ARCH_X86_64)",
    "insertText": "return(uint64_t)__rdtsc()"
  },
  {
    "label": "x86_readtscp()",
    "kind": "Method",
    "detail": "Function (# else __asm rdtsc ; # endif # endif } unsigned int)",
    "insertText": "x86_readtscp(void)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "__volatile__(\"rdtscp\\n\\t\" : \"=a\"(tscp) :)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"rdtscp\\n\\t\" : \"=a\"(tscp) :)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else # if VPX_ARCH_X86_64)",
    "insertText": "return(unsigned int)__rdtscp()"
  },
  {
    "label": "x86_tsc_start()",
    "kind": "Method",
    "detail": "Function (# else __asm rdtscp ; # endif # endif } unsigned int)",
    "insertText": "x86_tsc_start(void)"
  },
  {
    "label": "cpuid()",
    "kind": "Method",
    "detail": "Function (unsigned int reg_eax,reg_ebx,reg_ecx,reg_edx ;)",
    "insertText": "cpuid(0, 0, reg_eax, reg_ebx, reg_ecx, reg_edx)"
  },
  {
    "label": "x86_tsc_end()",
    "kind": "Method",
    "detail": "Function (} unsigned int)",
    "insertText": "x86_tsc_end(void)"
  },
  {
    "label": "x86_readtscp()",
    "kind": "Method",
    "detail": "Function (uint32_t v =)",
    "insertText": "x86_readtscp()"
  },
  {
    "label": "x86_pause_hint()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "x86_pause_hint() __asm pause #endif #endif #if defined(__GNUC__) && __GNUC__ static void x87_set_control_word(unsigned short mode)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "__volatile__(\"fldcw %0\" : : \"m\"(*&mode))"
  },
  {
    "label": "x87_get_control_word()",
    "kind": "Method",
    "detail": "Function (} unsigned short)",
    "insertText": "x87_get_control_word(void)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (unsigned short mode ; __asm__)",
    "insertText": "__volatile__(\"fstcw %0\\n\\t\" : \"=m\"(*&mode) :)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"fldcw %0\" : : \"m\"(*&mode))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (unsigned short mode ; asm)",
    "insertText": "volatile(\"fstcw %0\\n\\t\" : \"=m\"(*&mode) :)"
  },
  {
    "label": "vpx_winx64_fstcw()",
    "kind": "Method",
    "detail": "Function (unsigned short)",
    "insertText": "vpx_winx64_fstcw(void)"
  },
  {
    "label": "x87_set_control_word()",
    "kind": "Method",
    "detail": "Function (# define x87_set_control_word vpx_winx64_fldcw # define x87_get_control_word vpx_winx64_fstcw # else void)",
    "insertText": "x87_set_control_word(unsigned short mode)"
  },
  {
    "label": "x87_set_double_precision()",
    "kind": "Method",
    "detail": "Function (unsigned short mode ; __asm { fstcw mode } return mode ; } # endif unsigned int)",
    "insertText": "x87_set_double_precision(void)"
  },
  {
    "label": "x87_get_control_word()",
    "kind": "Method",
    "detail": "Function (unsigned int mode =)",
    "insertText": "x87_get_control_word()"
  },
  {
    "label": "x87_set_control_word()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x87_set_control_word((mode & ~0x300u) | 0x200u)"
  }
]