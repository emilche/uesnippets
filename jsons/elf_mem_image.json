[
  {
    "label": "ElfMemImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ElfMemImage"
  },
  {
    "label": "SymbolInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SymbolInfo"
  },
  {
    "label": "SymbolIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SymbolIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_DEBUGGING_INTERNAL_ELF_MEM_IMAGE_H_ # define ABSL_DEBUGGING_INTERNAL_ELF_MEM_IMAGE_H_ # include<climits> # include \" absl / base / config . h \" # ifdef ABSL_HAVE_ELF_MEM_IMAGE # error ABSL_HAVE_ELF_MEM_IMAGE cannot be directly set # endif # if)",
    "insertText": "defined(__ELF__) && !defined(__OpenBSD__) && !defined(__QNX__) && \\ !defined(__native_client__) && !defined(__asmjs__) && \\ !defined(__wasm__) && !defined(__HAIKU__) #define ABSL_HAVE_ELF_MEM_IMAGE 1 #endif #ifdef ABSL_HAVE_ELF_MEM_IMAGE #include <link.h> #if defined(__FreeBSD__) && !defined(ElfW) #define ElfW(x) __ElfN(x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN namespace debugging_internal { class ElfMemImage { private : const int kInvalidBaseSentinel ; public : const void* const kInvalidBase = static_cast<const)",
    "insertText": "void(&kInvalidBaseSentinel)"
  },
  {
    "label": "ElfW()",
    "kind": "Method",
    "detail": "Function (struct SymbolInfo { const char* name ; const char* version ; const void* address ; const)",
    "insertText": "ElfW(Sym)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; class SymbolIterator { public : class ElfMemImage ; const SymbolInfo*)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const SymbolIterator &rhs)"
  },
  {
    "label": "SymbolIterator()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "SymbolIterator(const void *const image, int index)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(int incr)"
  },
  {
    "label": "ElfMemImage()",
    "kind": "Method",
    "detail": "Function (SymbolInfo info_ ; int index_ ; const void* const image_ ; } ;)",
    "insertText": "ElfMemImage(const void *base)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const void *base)"
  },
  {
    "label": "IsPresent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPresent()"
  },
  {
    "label": "ElfW()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "ElfW(Sym)* GetDynsym(int index)"
  },
  {
    "label": "ElfW()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "ElfW(Versym)* GetVersym(int index)"
  },
  {
    "label": "ElfW()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "ElfW(Verdef)* GetVerdef(int index)"
  },
  {
    "label": "ElfW()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "ElfW(Verdaux)* GetVerdefAux(const ElfW(Verdef) *verdef)"
  },
  {
    "label": "GetDynstr()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetDynstr(ElfW(Word) offset)"
  },
  {
    "label": "GetSymAddr()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetSymAddr(const ElfW(Sym) *sym)"
  },
  {
    "label": "GetVerstr()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetVerstr(ElfW(Word) offset)"
  },
  {
    "label": "GetNumSymbols()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumSymbols()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (SymbolIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (SymbolIterator)",
    "insertText": "end()"
  },
  {
    "label": "LookupSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LookupSymbol(const char *name, const char *version, int symbol_type, SymbolInfo *info_out)"
  },
  {
    "label": "LookupSymbolByAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LookupSymbolByAddress(const void *address, SymbolInfo *info_out)"
  },
  {
    "label": "ElfW()",
    "kind": "Method",
    "detail": "Function (private : const)",
    "insertText": "ElfW(Ehdr)"
  },
  {
    "label": "ElfW()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "ElfW(Versym)"
  },
  {
    "label": "ElfW()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "ElfW(Verdef)"
  },
  {
    "label": "ElfW()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "ElfW(Word)"
  },
  {
    "label": "ElfW()",
    "kind": "Method",
    "detail": "Function (const char* dynstr_ ; size_t strsize_ ; size_t verdefnum_ ;)",
    "insertText": "ElfW(Addr)"
  }
]