[
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FViewCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewCommands"
  },
  {
    "label": "FViewDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewDebugInfo"
  },
  {
    "label": "FDrawPrimitiveDebuggerModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDrawPrimitiveDebuggerModule"
  },
  {
    "label": "FPrimitiveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveInfo"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / ScopeRWLock . h \" # include \" PrimitiveSceneInfo . h \" # include \" PrimitiveComponentId . h \" # include \" Components / ComponentInterfaces . h \" # include \" GameFramework / Actor . h \" # if ! UE_BUILD_SHIPPING class UMaterialInterface ; class FScene ; class FViewInfo ; class FViewCommands ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnUpdateViewDebugInfo)"
  },
  {
    "label": "FViewDebugInfo()",
    "kind": "Method",
    "detail": "Function (struct FViewDebugInfo { class FDrawPrimitiveDebuggerModule ; private : FViewDebugInfo Instance ;)",
    "insertText": "FViewDebugInfo()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (public : FViewDebugInfo&)",
    "insertText": "Get()"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (const int32 NameCompare = Name .)",
    "insertText": "Compare(Other.Name)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool bValid = true ; bValid& = Owner .)",
    "insertText": "IsValid()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bValid& = ComponentInterface ! = nullptr ;)",
    "insertText": "if(bValid)"
  },
  {
    "label": "IsUnreachable()",
    "kind": "Method",
    "detail": "Function (bValid& = ! ComponentInterface ->)",
    "insertText": "IsUnreachable()"
  },
  {
    "label": "HasLODs()",
    "kind": "Method",
    "detail": "Function (} } return bValid ; } bool)",
    "insertText": "HasLODs()"
  },
  {
    "label": "IsLODIndexValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLODIndexValid(int32 LOD)"
  },
  {
    "label": "ComputeCurrentLODIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ComputeCurrentLODIndex(int32 PlayerIndex = 0, int32 ViewIndex = 0)"
  },
  {
    "label": "GetCurrentLOD()",
    "kind": "Method",
    "detail": "Function (FPrimitiveLODStats*)",
    "insertText": "GetCurrentLOD(int32 PlayerIndex = 0, int32 ViewIndex = 0)"
  },
  {
    "label": "ComputeCurrentLODIndex()",
    "kind": "Method",
    "detail": "Function (int32 LOD =)",
    "insertText": "ComputeCurrentLODIndex(PlayerIndex, ViewIndex)"
  },
  {
    "label": "GetLOD()",
    "kind": "Method",
    "detail": "Function (} FPrimitiveLODStats*)",
    "insertText": "GetLOD(int32 LOD)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (} UMaterialInterface*)",
    "insertText": "GetMaterial(uint16 Index)"
  },
  {
    "label": "GetNumLODs()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumLODs()"
  },
  {
    "label": "GetOwnerName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetOwnerName()"
  },
  {
    "label": "GetPrimitiveLocation()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetPrimitiveLocation()"
  },
  {
    "label": "ProcessPrimitive()",
    "kind": "Method",
    "detail": "Function (} } ; private : bool bHasEverUpdated ; bool bIsOutdated ; bool bShouldUpdate ; bool bShouldCaptureSingleFrame ; bool bShouldClearCapturedData ; FOnUpdateViewDebugInfo OnUpdate ; FRWLock Lock ; TMap<FPrimitiveComponentId,FPrimitiveInfo> Primitives ; void)",
    "insertText": "ProcessPrimitive(FPrimitiveSceneInfo* PrimitiveSceneInfo, const FViewInfo& View, FScene* Scene, IPrimitiveComponent* DebugComponent)"
  },
  {
    "label": "CaptureNextFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureNextFrame()"
  },
  {
    "label": "EnableLiveCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableLiveCapture()"
  },
  {
    "label": "DisableLiveCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableLiveCapture()"
  },
  {
    "label": "ClearCaptureData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCaptureData()"
  },
  {
    "label": "ProcessPrimitives()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ProcessPrimitives(FScene* Scene, const FViewInfo& View, const FViewCommands& ViewCommands)"
  },
  {
    "label": "DumpDrawCallsToCSV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpDrawCallsToCSV()"
  },
  {
    "label": "DumpToCSV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpToCSV()"
  },
  {
    "label": "ForEachPrimitive()",
    "kind": "Method",
    "detail": "Function (template<CallableT> void)",
    "insertText": "ForEachPrimitive(CallableT Action)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (const FPrimitiveSceneInfo* LastPrimitiveSceneInfo = nullptr ; FRWScopeLock)",
    "insertText": "ScopeLock(Lock, SLT_ReadOnly)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invoke(Action, Primitive)"
  },
  {
    "label": "HasEverUpdated()",
    "kind": "Method",
    "detail": "Function (LastPrimitiveSceneInfo = Primitive . PrimitiveSceneInfo ; } } } bool)",
    "insertText": "HasEverUpdated()"
  },
  {
    "label": "IsOutOfDate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOutOfDate()"
  },
  {
    "label": "AddUpdateHandler()",
    "kind": "Method",
    "detail": "Function (template<UserClass> FDelegateHandle)",
    "insertText": "AddUpdateHandler(UserClass* UserObject, void (UserClass::*Func)())"
  },
  {
    "label": "AddUpdateHandler()",
    "kind": "Method",
    "detail": "Function (} FDelegateHandle)",
    "insertText": "AddUpdateHandler(void (*Func)())"
  },
  {
    "label": "RemoveUpdateHandler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveUpdateHandler(const FDelegateHandle& Handle)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (OnUpdate .)",
    "insertText": "Remove(Handle)"
  }
]