[
  {
    "label": "FExpressionError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpressionError"
  },
  {
    "label": "FFrameRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameRate"
  },
  {
    "label": "FFrameRate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Internationalization / Text . h \" # include \" Math / NumericLimits . h \" # include \" Math / Range . h \" # include \" Math / RangeBound . h \" # include \" Math / UnrealMathUtility . h \" # include \" Misc / ExpressionParserTypes . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameTime . h \" # include \" Templates / ValueOrError . h \" struct FExpressionError ; struct FFrameRate {)",
    "insertText": "FFrameRate() : Numerator(60000), Denominator(1)"
  },
  {
    "label": "FFrameRate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFrameRate(uint32 InNumerator, uint32 InDenominator) : Numerator(InNumerator), Denominator(InDenominator)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} int32 Numerator ; int32 Denominator ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "AsFrameTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "AsFrameTime(double InTimeSeconds)"
  },
  {
    "label": "AsFrameNumber()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "AsFrameNumber(double InTimeSeconds)"
  },
  {
    "label": "IsMultipleOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMultipleOf(FFrameRate Other)"
  },
  {
    "label": "IsFactorOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFactorOf(FFrameRate Other)"
  },
  {
    "label": "TransformTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "TransformTime(FFrameTime SourceTime, FFrameRate SourceRate, FFrameRate DestinationRate)"
  },
  {
    "label": "Snap()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "Snap(FFrameTime SourceTime, FFrameRate SourceRate, FFrameRate SnapToRate)"
  },
  {
    "label": "ToPrettyText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ToPrettyText()"
  },
  {
    "label": "ComputeGridSpacing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeGridSpacing(const float PixelsPerSecond, double& OutMajorInterval, int32& OutMinorDivisions, float MinTickPx = 30.f, float DesiredMajorTickPx = 120.f)"
  },
  {
    "label": "MaxSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "MaxSeconds()"
  },
  {
    "label": "Reciprocal()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "Reciprocal()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FFrameRate& A, const FFrameRate& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FFrameRate)",
    "insertText": "operator(FFrameRate A, FFrameRate B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "operator(FFrameNumber Frame, FFrameRate Rate)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TRange<double>)",
    "insertText": "operator(const TRange<FFrameNumber>& FrameRange, FFrameRate Rate)"
  },
  {
    "label": "GetLowerBound()",
    "kind": "Method",
    "detail": "Function (TRangeBound<FFrameNumber> LowerBound = FrameRange .)",
    "insertText": "GetLowerBound()"
  },
  {
    "label": "GetUpperBound()",
    "kind": "Method",
    "detail": "Function (TRangeBound<FFrameNumber> UpperBound = FrameRange .)",
    "insertText": "GetUpperBound()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "operator(FFrameTime FrameTime, FFrameRate Rate)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "operator(double TimeInSeconds, FFrameRate Rate)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "operator(float TimeInSeconds, FFrameRate Rate)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FFrameRate& Rate)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FFrameRate& FrameRate)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "AsInterval()",
    "kind": "Method",
    "detail": "Function (} ; double)",
    "insertText": "AsInterval()"
  },
  {
    "label": "AsDecimal()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "AsDecimal()"
  },
  {
    "label": "AsSeconds()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "AsSeconds(FFrameTime FrameTime)"
  },
  {
    "label": "GetFrame()",
    "kind": "Method",
    "detail": "Function (const int64 IntegerPart = FrameTime .)",
    "insertText": "GetFrame().Value * int64(Denominator)"
  },
  {
    "label": "GetSubFrame()",
    "kind": "Method",
    "detail": "Function (const double FloatPart = FrameTime .)",
    "insertText": "GetSubFrame() * double(Denominator)"
  },
  {
    "label": "AsFrameTime()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "AsFrameTime(double TimeInSeconds)"
  },
  {
    "label": "TimeAsFrame()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "TimeAsFrame(TimeInSeconds * Numerator)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (FFrameNumber FrameNumber = static_cast<)",
    "insertText": "int32(FMath::Clamp(FMath::FloorToDouble(TimeAsFrame), static_cast<double>(TNumericLimits<int32>::Min()), static_cast<double>(TNumericLimits<int32>::Max())))"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (float SubFrame = static_cast<)",
    "insertText": "float(TimeAsFrame - FMath::FloorToDouble(TimeAsFrame))"
  },
  {
    "label": "TruncToInt()",
    "kind": "Method",
    "detail": "Function (const int32 TruncatedSubFrame =)",
    "insertText": "TruncToInt(SubFrame)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (SubFrame - = static_cast<)",
    "insertText": "float(TruncatedSubFrame)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FrameNumber . Value + = TruncatedSubFrame ;)",
    "insertText": "if(SubFrame > 0.f)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (SubFrame =)",
    "insertText": "Min(SubFrame, FFrameTime::MaxSubframe)"
  },
  {
    "label": "FFrameTime()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FFrameTime(FrameNumber, SubFrame)"
  },
  {
    "label": "AsFrameNumber()",
    "kind": "Method",
    "detail": "Function (} FFrameNumber)",
    "insertText": "AsFrameNumber(double TimeInSeconds)"
  },
  {
    "label": "TimeAsFrame()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "TimeAsFrame(static_cast<double>(TimeInSeconds) * Numerator)"
  },
  {
    "label": "ConvertFrameTime()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "ConvertFrameTime(FFrameTime SourceTime, FFrameRate SourceRate, FFrameRate DestinationRate)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (volatile int64 NewDenominator = static_cast<)",
    "insertText": "int64(DestinationRate.Denominator)"
  },
  {
    "label": "IntegerPart()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "IntegerPart((int64)(SourceTime.GetFrame().Value) * NewNumerator)"
  },
  {
    "label": "IntegerFloatPart()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "IntegerFloatPart((double(SourceTime.GetFrame().Value) * double(NewNumerator)) / double(NewDenominator)) - double(IntegerPart)"
  },
  {
    "label": "FloatPart()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "FloatPart((SourceTime.GetSubFrame() * NewNumerator_d) / NewDenominator_d)"
  },
  {
    "label": "FloorToDouble()",
    "kind": "Method",
    "detail": "Function (const double FloatPartFloored =)",
    "insertText": "FloorToDouble(FloatPart)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (const int64 FloatAsInt =)",
    "insertText": "int64(FloatPartFloored)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (IntegerPart + = FloatAsInt ; float SubFrame = static_cast<)",
    "insertText": "float(FloatPart - FloatPartFloored)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (} IntegerPart = FMath::Clamp<)",
    "insertText": "int64(IntegerPart,TNumericLimits<int32>::Min(),TNumericLimits<int32>::Max())"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (int64 CommonValueA =)",
    "insertText": "int64(Numerator)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (int64 CommonValueB =)",
    "insertText": "int64(Other.Numerator)"
  },
  {
    "label": "ParseFrameRate()",
    "kind": "Method",
    "detail": "Function (} TValueOrError<FFrameRate,FExpressionError>)",
    "insertText": "ParseFrameRate(const TCHAR* FrameRateString)"
  },
  {
    "label": "TryParseString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryParseString(FFrameRate& OutFrameRate, const TCHAR* InString)"
  }
]