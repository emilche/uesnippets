[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ATOMICOPS_H_ # define BASE_ATOMICOPS_H_ # include<stdint . h> # include<cstddef> # include \" build / build_config . h \" namespace base { namespace subtle { typedef int32_t Atomic32 ; # ifdef ARCH_CPU_64_BITS # if)",
    "insertText": "defined(__ILP32__) || BUILDFLAG(IS_NACL)"
  },
  {
    "label": "NoBarrier_CompareAndSwap()",
    "kind": "Method",
    "detail": "Function (# else typedef intptr_t Atomic64 ; # endif # endif typedef intptr_t AtomicWord ; Atomic32)",
    "insertText": "NoBarrier_CompareAndSwap(volatile Atomic32* ptr, Atomic32 old_value, Atomic32 new_value)"
  },
  {
    "label": "NoBarrier_AtomicExchange()",
    "kind": "Method",
    "detail": "Function (Atomic32)",
    "insertText": "NoBarrier_AtomicExchange(volatile Atomic32* ptr, Atomic32 new_value)"
  },
  {
    "label": "NoBarrier_AtomicIncrement()",
    "kind": "Method",
    "detail": "Function (Atomic32)",
    "insertText": "NoBarrier_AtomicIncrement(volatile Atomic32* ptr, Atomic32 increment)"
  },
  {
    "label": "Barrier_AtomicIncrement()",
    "kind": "Method",
    "detail": "Function (Atomic32)",
    "insertText": "Barrier_AtomicIncrement(volatile Atomic32* ptr, Atomic32 increment)"
  },
  {
    "label": "Acquire_CompareAndSwap()",
    "kind": "Method",
    "detail": "Function (Atomic32)",
    "insertText": "Acquire_CompareAndSwap(volatile Atomic32* ptr, Atomic32 old_value, Atomic32 new_value)"
  },
  {
    "label": "Release_CompareAndSwap()",
    "kind": "Method",
    "detail": "Function (Atomic32)",
    "insertText": "Release_CompareAndSwap(volatile Atomic32* ptr, Atomic32 old_value, Atomic32 new_value)"
  },
  {
    "label": "NoBarrier_Store()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value)"
  },
  {
    "label": "Release_Store()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release_Store(volatile Atomic32* ptr, Atomic32 value)"
  },
  {
    "label": "NoBarrier_Load()",
    "kind": "Method",
    "detail": "Function (Atomic32)",
    "insertText": "NoBarrier_Load(volatile const Atomic32* ptr)"
  },
  {
    "label": "Acquire_Load()",
    "kind": "Method",
    "detail": "Function (Atomic32)",
    "insertText": "Acquire_Load(volatile const Atomic32* ptr)"
  },
  {
    "label": "NoBarrier_CompareAndSwap()",
    "kind": "Method",
    "detail": "Function (# ifdef ARCH_CPU_64_BITS Atomic64)",
    "insertText": "NoBarrier_CompareAndSwap(volatile Atomic64* ptr, Atomic64 old_value, Atomic64 new_value)"
  },
  {
    "label": "NoBarrier_AtomicExchange()",
    "kind": "Method",
    "detail": "Function (Atomic64)",
    "insertText": "NoBarrier_AtomicExchange(volatile Atomic64* ptr, Atomic64 new_value)"
  },
  {
    "label": "NoBarrier_AtomicIncrement()",
    "kind": "Method",
    "detail": "Function (Atomic64)",
    "insertText": "NoBarrier_AtomicIncrement(volatile Atomic64* ptr, Atomic64 increment)"
  },
  {
    "label": "Barrier_AtomicIncrement()",
    "kind": "Method",
    "detail": "Function (Atomic64)",
    "insertText": "Barrier_AtomicIncrement(volatile Atomic64* ptr, Atomic64 increment)"
  },
  {
    "label": "Acquire_CompareAndSwap()",
    "kind": "Method",
    "detail": "Function (Atomic64)",
    "insertText": "Acquire_CompareAndSwap(volatile Atomic64* ptr, Atomic64 old_value, Atomic64 new_value)"
  },
  {
    "label": "Release_CompareAndSwap()",
    "kind": "Method",
    "detail": "Function (Atomic64)",
    "insertText": "Release_CompareAndSwap(volatile Atomic64* ptr, Atomic64 old_value, Atomic64 new_value)"
  },
  {
    "label": "NoBarrier_Store()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoBarrier_Store(volatile Atomic64* ptr, Atomic64 value)"
  },
  {
    "label": "Release_Store()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release_Store(volatile Atomic64* ptr, Atomic64 value)"
  },
  {
    "label": "NoBarrier_Load()",
    "kind": "Method",
    "detail": "Function (Atomic64)",
    "insertText": "NoBarrier_Load(volatile const Atomic64* ptr)"
  },
  {
    "label": "Acquire_Load()",
    "kind": "Method",
    "detail": "Function (Atomic64)",
    "insertText": "Acquire_Load(volatile const Atomic64* ptr)"
  }
]