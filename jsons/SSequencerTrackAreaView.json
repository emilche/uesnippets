[
  {
    "label": "ITimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimeSliderController"
  },
  {
    "label": "SSequencerTrackAreaView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerTrackAreaView"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" MVVM / Views / STrackAreaView . h \" class ITimeSliderController ; namespace UE { namespace Sequencer { class SSequencerTrackAreaView : public STrackAreaView { public : void)",
    "insertText": "Construct(const FArguments& InArgs, TWeakPtr<FTrackAreaViewModel> InWeakViewModel, TSharedRef<ITimeSliderController> InTimeSliderController)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnResized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResized(const FVector2D& OldSize, const FVector2D& NewSize)"
  },
  {
    "label": "UpdateHoverStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHoverStates(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  }
]