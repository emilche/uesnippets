[
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "FDiffResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffResults"
  },
  {
    "label": "FDiffSingleResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffSingleResult"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EDiffFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EDiffFlags"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "NodeExistance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" DiffResults . h \" # include \" Internationalization / Text . h \" class UEdGraph ; class UEdGraphNode ; struct FDiffResults ; struct FDiffSingleResult ; class FGraphDiffControl { public : enum class EDiffMode { Additive,Subtractive,} ; struct EDiffFlags { enum Type {)",
    "insertText": "NodeExistance(1<<0), NodeMovement = (1<<1), NodeComment = (1<<2), NodePins = (1<<3), NodeSpecificDiffs = (1<<4)"
  },
  {
    "label": "FNodeDiffContext()",
    "kind": "Method",
    "detail": "Function (} ; struct FNodeDiffContext {)",
    "insertText": "FNodeDiffContext() : DiffMode(EDiffMode::Additive) , DiffFlags(EDiffFlags::All) , NodeTypeDisplayName() , bIsRootNode(true)"
  },
  {
    "label": "FNodeMatch()",
    "kind": "Method",
    "detail": "Function (} EDiffMode DiffMode ; EDiffFlags::Type DiffFlags ; FText NodeTypeDisplayName ; bool bIsRootNode ; } ; struct FNodeMatch {)",
    "insertText": "FNodeMatch() : NewNode(nullptr) , OldNode(nullptr)"
  },
  {
    "label": "Diff()",
    "kind": "Method",
    "detail": "Function (} UEdGraphNode* NewNode ; UEdGraphNode* OldNode ; bool)",
    "insertText": "Diff(const FNodeDiffContext& DiffContext, TArray<FDiffSingleResult>* DiffsResultsOut = nullptr)"
  },
  {
    "label": "Diff()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Diff(const FNodeDiffContext& DiffContext, FDiffResults& DiffsOut)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FindNodeMatch()",
    "kind": "Method",
    "detail": "Function (} ; FNodeMatch)",
    "insertText": "FindNodeMatch(UEdGraph* OldGraph, UEdGraphNode* NewNode, TArray<FNodeMatch> const& PriorMatches)"
  },
  {
    "label": "IsNodeMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeMatch(UEdGraphNode* Node1, UEdGraphNode* Node2, bool bExactOnly = false, TArray<FGraphDiffControl::FNodeMatch> const* Exclusions = nullptr)"
  },
  {
    "label": "DiffGraphs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DiffGraphs(UEdGraph* const OldGraph, UEdGraph* const NewGraph, TArray<FDiffSingleResult>& DiffsOut)"
  },
  {
    "label": "GetGraphPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGraphPath(UEdGraph* Graph)"
  }
]