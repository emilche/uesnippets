[
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "FDiffResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffResults"
  },
  {
    "label": "FDiffSingleResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffSingleResult"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EDiffFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EDiffFlags"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "holding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "holding"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "FindNodeMatch()",
    "kind": "Method",
    "detail": "Function (FNodeMatch)",
    "insertText": "FindNodeMatch(UEdGraph* OldGraph, UEdGraphNode* NewNode, TArray<FNodeMatch> const& PriorMatches)"
  },
  {
    "label": "IsNodeMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeMatch(UEdGraphNode* Node1, UEdGraphNode* Node2, bool bExactOnly = false, TArray<FGraphDiffControl::FNodeMatch> const* Exclusions = nullptr)"
  },
  {
    "label": "DiffGraphs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DiffGraphs(UEdGraph* const OldGraph, UEdGraph* const NewGraph, TArray<FDiffSingleResult>& DiffsOut)"
  },
  {
    "label": "GetGraphPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGraphPath(UEdGraph* Graph)"
  }
]