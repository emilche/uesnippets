[
  {
    "label": "iovec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "iovec"
  },
  {
    "label": "msgpack_vrefbuffer_chunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "msgpack_vrefbuffer_chunk"
  },
  {
    "label": "msgpack_vrefbuffer_inner_buffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "msgpack_vrefbuffer_inner_buffer"
  },
  {
    "label": "msgpack_vrefbuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "msgpack_vrefbuffer"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef MSGPACK_VREFBUFFER_H # define MSGPACK_VREFBUFFER_H # include \" zone . h \" # include<stdlib . h> # if)",
    "insertText": "defined(unix) || defined(__unix) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__QNX__) || defined(__QNXTO__)"
  },
  {
    "label": "msgpack_vrefbuffer_init()",
    "kind": "Method",
    "detail": "Function (void* iov_base ; size_t iov_len ; } ; # endif # ifdef __cplusplus \" C \" { # endif struct msgpack_vrefbuffer_chunk ; typedef struct msgpack_vrefbuffer_chunk msgpack_vrefbuffer_chunk ; typedef struct msgpack_vrefbuffer_inner_buffer { size_t free ; char* ptr ; msgpack_vrefbuffer_chunk* head ; } msgpack_vrefbuffer_inner_buffer ; typedef struct msgpack_vrefbuffer { struct iovec* tail ; struct iovec* end ; struct iovec* array ; size_t chunk_size ; size_t ref_size ; msgpack_vrefbuffer_inner_buffer inner_buffer ; } msgpack_vrefbuffer ; # ifndef MSGPACK_VREFBUFFER_REF_SIZE # define MSGPACK_VREFBUFFER_REF_SIZE 3 2 # endif # ifndef MSGPACK_VREFBUFFER_CHUNK_SIZE # define MSGPACK_VREFBUFFER_CHUNK_SIZE 8 1 9 2 # endif MSGPACK_DLLEXPORT bool)",
    "insertText": "msgpack_vrefbuffer_init(msgpack_vrefbuffer* vbuf, size_t ref_size, size_t chunk_size)"
  },
  {
    "label": "msgpack_vrefbuffer_destroy()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT void)",
    "insertText": "msgpack_vrefbuffer_destroy(msgpack_vrefbuffer* vbuf)"
  },
  {
    "label": "msgpack_vrefbuffer_new()",
    "kind": "Method",
    "detail": "Function (msgpack_vrefbuffer*)",
    "insertText": "msgpack_vrefbuffer_new(size_t ref_size, size_t chunk_size)"
  },
  {
    "label": "msgpack_vrefbuffer_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "msgpack_vrefbuffer_free(msgpack_vrefbuffer* vbuf)"
  },
  {
    "label": "msgpack_vrefbuffer_write()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "msgpack_vrefbuffer_write(void* data, const char* buf, size_t len)"
  },
  {
    "label": "msgpack_vrefbuffer_vec()",
    "kind": "Method",
    "detail": "Function (const struct iovec*)",
    "insertText": "msgpack_vrefbuffer_vec(const msgpack_vrefbuffer* vref)"
  },
  {
    "label": "msgpack_vrefbuffer_veclen()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "msgpack_vrefbuffer_veclen(const msgpack_vrefbuffer* vref)"
  },
  {
    "label": "msgpack_vrefbuffer_append_copy()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT int)",
    "insertText": "msgpack_vrefbuffer_append_copy(msgpack_vrefbuffer* vbuf, const char* buf, size_t len)"
  },
  {
    "label": "msgpack_vrefbuffer_append_ref()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT int)",
    "insertText": "msgpack_vrefbuffer_append_ref(msgpack_vrefbuffer* vbuf, const char* buf, size_t len)"
  },
  {
    "label": "msgpack_vrefbuffer_migrate()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT int)",
    "insertText": "msgpack_vrefbuffer_migrate(msgpack_vrefbuffer* vbuf, msgpack_vrefbuffer* to)"
  },
  {
    "label": "msgpack_vrefbuffer_clear()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT void)",
    "insertText": "msgpack_vrefbuffer_clear(msgpack_vrefbuffer* vref)"
  },
  {
    "label": "vbuf()",
    "kind": "Method",
    "detail": "Function (msgpack_vrefbuffer*)",
    "insertText": "vbuf(msgpack_vrefbuffer*)malloc(sizeof(msgpack_vrefbuffer))"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(vbuf)"
  },
  {
    "label": "vbuf()",
    "kind": "Method",
    "detail": "Function (msgpack_vrefbuffer*)",
    "insertText": "vbuf(msgpack_vrefbuffer*)"
  },
  {
    "label": "msgpack_vrefbuffer_append_ref()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "msgpack_vrefbuffer_append_ref(vbuf, buf, len)"
  }
]