[
  {
    "label": "FMaterialSourceTemplate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialSourceTemplate"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Materials / StringTemplate . h \" # include \" HAL / CriticalSection . h \" # include \" RHI . h \" # if WITH_EDITOR struct FMaterialSourceTemplate { FMaterialSourceTemplate&)",
    "insertText": "Get()"
  },
  {
    "label": "BeginResolve()",
    "kind": "Method",
    "detail": "Function (FStringTemplateResolver)",
    "insertText": "BeginResolve(EShaderPlatform ShaderPlatform, int32* MaterialTemplateLineNumber = nullptr)"
  },
  {
    "label": "GetTemplate()",
    "kind": "Method",
    "detail": "Function (const FStringTemplate&)",
    "insertText": "GetTemplate(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "GetTemplateHashString()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetTemplateHashString(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "Preload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Preload(EShaderPlatform ShaderPlatform)"
  }
]