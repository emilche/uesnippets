[
  {
    "label": "FTimerHandleTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimerHandleTraits"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTimerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimerData"
  },
  {
    "label": "FTimerManagerTraitsBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimerManagerTraitsBase"
  },
  {
    "label": "FTimerManagerDefaultTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimerManagerDefaultTraits"
  },
  {
    "label": "FStorageTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStorageTraits"
  },
  {
    "label": "TTimerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTimerManager"
  },
  {
    "label": "FTimerHeapOrder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimerHeapOrder"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" EventLoop / EventLoopManagedStorage . h \" # include \" Templates / Function . h \" # include \" Misc / ScopeExit . h \" # include \" Misc / Timespan . h \" # include \" Stats / Stats . h \" namespace UE::EventLoop { struct FTimerHandleTraits { TCHAR Name [ ] =)",
    "insertText": "TEXT(\"TimerHandle\")"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; using FTimerCallback = TUniqueFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FTimerData()",
    "kind": "Method",
    "detail": "Function (using FOnTimerCleared = FManagedStorageOnRemoveComplete ; using FTimerHandle = TResourceHandle<FTimerHandleTraits> ; enum class ETimerStatus : uint8 { Pending,Active,PendingRemoval,PendingReschedule,Executing,} ; struct FTimerData {)",
    "insertText": "FTimerData(FTimerCallback&& InCallback, TOptional<FTimespan> InFirstDelay, FTimespan InRate, bool bInRepeat) : Callback(MoveTemp(InCallback)) , FirstDelay(InFirstDelay) , Rate(InRate) , bRepeat(bInRepeat)"
  },
  {
    "label": "FTimerData()",
    "kind": "Method",
    "detail": "Function (} FTimerCallback Callback ; TOptional<FTimespan> FirstDelay ; FTimespan Rate ; FTimespan Expiration ; ETimerStatus Status = ETimerStatus::Pending ; uint8 bRepeat : 1 ;)",
    "insertText": "FTimerData()"
  },
  {
    "label": "FTimerData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTimerData(FTimerData&&)"
  },
  {
    "label": "FTimerData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTimerData(const FTimerData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTimerData&)",
    "insertText": "operator(FTimerData&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTimerData&)",
    "insertText": "operator(const FTimerData&)"
  },
  {
    "label": "CheckIsManagerThread()",
    "kind": "Method",
    "detail": "Function (} ; struct FTimerManagerTraitsBase { void)",
    "insertText": "CheckIsManagerThread(bool bIsManagerThread)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} } ; struct FTimerManagerDefaultTraits : public FTimerManagerTraitsBase { using FTimerHeapAllocatorType = TInlineAllocator<3 2> ; using FTimerRepeatAllocatorType = TInlineAllocator<3 2> ; struct FStorageTraits : public FManagedStorageDefaultTraits { using FExternalHandle = FTimerHandle ; } ; } ; template<Traits = FTimerManagerDefaultTraits> class TTimerManager final : public FNoncopyable { public : using FStorageType = TManagedStorage<FTimerData,Traits::FStorageTraits> ; using FTimerHandle = FStorageType::FExternalHandle ; using FInternalHandle = FStorageType::FInternalHandle ; using FInternalHandleArryType = FStorageType::FInternalHandleArryType ; public : void)",
    "insertText": "Init()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(FTimespan DeltaTime)"
  },
  {
    "label": "HeapTop()",
    "kind": "Method",
    "detail": "Function (FInternalHandle TopHandle = ActiveTimerHeap .)",
    "insertText": "HeapTop()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FTimerData* TimerData = Storage .)",
    "insertText": "Find(TopHandle)"
  },
  {
    "label": "GetNumTimers()",
    "kind": "Method",
    "detail": "Function (OutTimeout = TimerData -> Expiration - InternalTime ; return true ; } return false ; } uint32)",
    "insertText": "GetNumTimers()"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (} FTimerHandle)",
    "insertText": "SetTimer(FTimerCallback&& Callback, FTimespan InRate, bool InbRepeat = false, TOptional<FTimespan> InFirstDelay = TOptional<FTimespan>())"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (const bool bValidCallback = Callback . operator)",
    "insertText": "bool()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (const bool bValidRate = InRate> =)",
    "insertText": "Zero()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (const bool bFirstDelaySetValid = ! InFirstDelay .)",
    "insertText": "IsSet()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (const bool bFirstDelayValidTime = ! InFirstDelay .)",
    "insertText": "IsSet() || (*InFirstDelay >= FTimespan::Zero())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} return Storage .)",
    "insertText": "Add(FTimerData(MoveTemp(Callback), InFirstDelay, InRate, InbRepeat))"
  },
  {
    "label": "ClearTimer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearTimer(FTimerHandle& InHandle, FOnTimerCleared&& OnTimerCleared = FOnTimerCleared())"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (TimerData -> Status = ETimerStatus::PendingRemoval ; } } Storage .)",
    "insertText": "Remove(InHandle, MoveTemp(OnTimerCleared))"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (InHandle .)",
    "insertText": "Invalidate()"
  },
  {
    "label": "HasPendingRepeatTimer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPendingRepeatTimer()"
  },
  {
    "label": "FTimerHeapOrder()",
    "kind": "Method",
    "detail": "Function (} private : struct FTimerHeapOrder {)",
    "insertText": "FTimerHeapOrder(const FStorageType& InStorage) : Storage(InStorage) , NumTimers(InStorage.Num())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(FInternalHandle LhsHandle, FInternalHandle RhsHandle)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FTimerData* LhsData = Storage .)",
    "insertText": "Find(LhsHandle)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FTimerData* RhsData = Storage .)",
    "insertText": "Find(RhsHandle)"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_EventLoop_TTimerManager_Tick)"
  },
  {
    "label": "CheckIsManagerThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckIsManagerThread(Storage.IsManagerThread())"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (bIsTicking = true ; ON_SCOPE_EXIT { bIsTicking = false ; } ; InternalTime + = DeltaTime ; FInternalHandleArryType AddedHandles ; FInternalHandleArryType RemovedHandles ; Storage .)",
    "insertText": "Update(&AddedHandles, &RemovedHandles)"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_EventLoop_TTimerManager_Tick_AddTimers)"
  },
  {
    "label": "HeapPush()",
    "kind": "Method",
    "detail": "Function (const FTimespan EffectiveInitialRate = TimerData -> FirstDelay ?* TimerData -> FirstDelay : TimerData -> Rate ; TimerData -> Expiration = InternalTime + EffectiveInitialRate ; TimerData -> Status = ETimerStatus::Active ; ActiveTimerHeap .)",
    "insertText": "HeapPush(InternalHandle, FTimerHeapOrder(Storage))"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (} } } {)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_EventLoop_TTimerManager_Tick_RemoveTimers)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 InternalHandleIndex = ActiveTimerHeap .)",
    "insertText": "Find(InternalHandle)"
  },
  {
    "label": "HeapRemoveAt()",
    "kind": "Method",
    "detail": "Function (ActiveTimerHeap .)",
    "insertText": "HeapRemoveAt(InternalHandleIndex, FTimerHeapOrder(Storage), EAllowShrinking::No)"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (} } } {)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_EventLoop_TTimerManager_Tick_RescheduleTimers)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} } PendingRepeatTimers .)",
    "insertText": "Empty()"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (} {)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_EventLoop_TTimerManager_Tick_RunTimers)"
  },
  {
    "label": "HeapPop()",
    "kind": "Method",
    "detail": "Function (FInternalHandle TimerHandle ; ActiveTimerHeap .)",
    "insertText": "HeapPop(TimerHandle, FTimerHeapOrder(Storage), EAllowShrinking::No)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(InternalTime >= TimerData->Expiration)"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (TimerData -> Status = ETimerStatus::Executing ; TimerData ->)",
    "insertText": "Callback()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TimerData -> Status = ETimerStatus::PendingReschedule ; PendingRepeatTimers .)",
    "insertText": "Add(TimerHandle)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} else { Storage .)",
    "insertText": "Remove(TopHandle)"
  }
]