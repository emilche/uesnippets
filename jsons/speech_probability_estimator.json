[
  {
    "label": "SpeechProbabilityEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SpeechProbabilityEstimator"
  },
  {
    "label": "SpeechProbabilityEstimator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_NS_SPEECH_PROBABILITY_ESTIMATOR_H_ # define MODULES_AUDIO_PROCESSING_NS_SPEECH_PROBABILITY_ESTIMATOR_H_ # include<array> # include \" api / array_view . h \" # include \" modules / audio_processing / ns / ns_common . h \" # include \" modules / audio_processing / ns / signal_model_estimator . h \" namespace webrtc { class SpeechProbabilityEstimator { public :)",
    "insertText": "SpeechProbabilityEstimator()"
  },
  {
    "label": "SpeechProbabilityEstimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpeechProbabilityEstimator(const SpeechProbabilityEstimator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SpeechProbabilityEstimator&)",
    "insertText": "operator(const SpeechProbabilityEstimator&)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(int32_t num_analyzed_frames, rtc::ArrayView<const float, kFftSizeBy2Plus1> prior_snr, rtc::ArrayView<const float, kFftSizeBy2Plus1> post_snr, rtc::ArrayView<const float, kFftSizeBy2Plus1> conservative_noise_spectrum, rtc::ArrayView<const float, kFftSizeBy2Plus1> signal_spectrum, float signal_spectral_sum, float signal_energy)"
  },
  {
    "label": "get_prior_probability()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "get_prior_probability()"
  }
]