[
  {
    "label": "UInterchangeSourceData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangeSourceData"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "INTERCHANGEENGINE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INTERCHANGEENGINE_API"
  },
  {
    "label": "UInterchangeMeshUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangeMeshUtilities"
  },
  {
    "label": "FInterchangeSkeletalMeshAlternateSkinWeightPostImportTask()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FInterchangeSkeletalMeshAlternateSkinWeightPostImportTask(USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "AddLodToReimportAlternate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddLodToReimportAlternate(int32 LodToAdd)"
  },
  {
    "label": "ShowMeshFilePicker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowMeshFilePicker(FString& OutFilename, const FText& Title)"
  },
  {
    "label": "ImportCustomLod()",
    "kind": "Method",
    "detail": "Function (TFuture<bool>)",
    "insertText": "ImportCustomLod(UObject* MeshObject, const int32 LodIndex, const UInterchangeSourceData* SourceData, bool bAsync)"
  },
  {
    "label": "ImportMorphTarget()",
    "kind": "Method",
    "detail": "Function (TFuture<bool>)",
    "insertText": "ImportMorphTarget(USkeletalMesh* SkeletalMesh, const int32 LodIndex, const UInterchangeSourceData* SourceData, bool bAsync, const FString& MorphTargetName)"
  },
  {
    "label": "InternalImportCustomLod()",
    "kind": "Method",
    "detail": "Function (TFuture<bool>)",
    "insertText": "InternalImportCustomLod(TSharedPtr<TPromise<bool>> Promise, UObject* MeshObject, const int32 LodIndex, const UInterchangeSourceData* SourceData, bool bAsync)"
  }
]