[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "PooledTaskRunnerDelegate()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_POOLED_TASK_RUNNER_DELEGATE_H_ # define BASE_TASK_THREAD_POOL_POOLED_TASK_RUNNER_DELEGATE_H_ # include \" base / base_export . h \" # include \" base / task / task_traits . h \" # include \" base / task / thread_pool / job_task_source . h \" # include \" base / task / thread_pool / sequence . h \" # include \" base / task / thread_pool / task . h \" # include \" base / task / thread_pool / task_source . h \" namespace base { namespace internal { class BASE_EXPORT PooledTaskRunnerDelegate { public :)",
    "insertText": "PooledTaskRunnerDelegate()"
  },
  {
    "label": "MatchesCurrentDelegate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesCurrentDelegate(PooledTaskRunnerDelegate* delegate)"
  },
  {
    "label": "ShouldYield()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldYield(const TaskSource* task_source)"
  },
  {
    "label": "PostTaskWithSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostTaskWithSequence(Task task, scoped_refptr<Sequence> sequence)"
  },
  {
    "label": "EnqueueJobTaskSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnqueueJobTaskSource(scoped_refptr<JobTaskSource> task_source)"
  },
  {
    "label": "RemoveJobTaskSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveJobTaskSource(scoped_refptr<JobTaskSource> task_source)"
  },
  {
    "label": "UpdatePriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePriority(scoped_refptr<TaskSource> task_source, TaskPriority priority)"
  },
  {
    "label": "UpdateJobPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateJobPriority(scoped_refptr<TaskSource> task_source, TaskPriority priority)"
  }
]