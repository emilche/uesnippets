[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # include \" Field / FieldSystemTypes . h \" # include \" Chaos / PBDRigidClusteringTypes . h \" # include \" GeometryCollectionSimulationTypes . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Chaos_Volumetric)",
    "insertText": "UMETA(DisplayName = \"Implicit-Implicit\"), Chaos_Surface_Volumetric UMETA(DisplayName = \"Particle-Implicit\"), Chaos_Max UMETA(Hidden)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Chaos_Implicit_Box)",
    "insertText": "UMETA(DisplayName = \"Box\"), Chaos_Implicit_Sphere UMETA(DisplayName = \"Sphere\"), Chaos_Implicit_Capsule UMETA(DisplayName = \"Capsule\"), Chaos_Implicit_LevelSet UMETA(DisplayName = \"Level Set\"), Chaos_Implicit_None UMETA(DisplayName = \"None\"), Chaos_Implicit_Convex UMETA(DisplayName = \"Convex\"), Chaos_Max UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Chaos_NONE = 0)",
    "insertText": "UMETA(Hidden, DisplayName = \"None\"), Chaos_Object_Sleeping = 1 UMETA(DisplayName = \"Sleeping\"), Chaos_Object_Kinematic = 2 UMETA(DisplayName = \"Kinematic\"), Chaos_Object_Static = 3 UMETA(DisplayName = \"Static\"), Chaos_Object_Dynamic = 4 UMETA(DisplayName = \"Dynamic\"), Chaos_Object_UserDefined = 100 UMETA(DisplayName = \"User Defined\"), Chaos_Max UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Chaos_AngularVelocity)",
    "insertText": "UMETA(DisplayName = \"Angular Velocity\", ToolTip = \"Add a vector field to the particles angular velocity.\"), Chaos_DynamicState UMETA(DisplayName = \"Dynamic State\", ToolTip = \"Set the dynamic state of a particle (static, dynamic, kinematic...)\"), Chaos_LinearVelocity UMETA(DisplayName = \"Linear Velocity\", ToolTip = \"Add a vector field to the particles linear velocity.\"), Chaos_InitialAngularVelocity UMETA(DisplayName = \"Initial Angular Velocity\", ToolTip = \"Initial particles angular velocity.\"), Chaos_InitialLinearVelocity UMETA(DisplayName = \"Initial Linear Velocity\", ToolTip = \"Initial particles linear velocity.\"), Chaos_CollisionGroup UMETA(DisplayName = \"Collision Group\", ToolTip = \"Set the particles collision group.\"), Chaos_LinearForce UMETA(DisplayName = \"Linear Force\", ToolTip = \"Add a vector field to the particles linear force.\"), Chaos_AngularTorque UMETA(DisplayName = \"Angular Torque\", ToolTip = \"Add a vector field to the particles angular torque.\"), Chaos_DisableThreshold UMETA(DisplayName = \"Disable Threshold\", ToolTip = \"Disable the particles if their linear and angular velocity are less than the threshold.\"), Chaos_SleepingThreshold UMETA(DisplayName = \"Sleeping Threshold\", ToolTip = \"Set particles in sleeping mode if their linear and angular velocity are less than the threshold.\"), Chaos_ExternalClusterStrain UMETA(DisplayName = \"External Strain\", ToolTip = \"Apply an external strain over the particles. If this strain is over the internal one, the cluster will break.\"), Chaos_InternalClusterStrain UMETA(DisplayName = \"Internal Strain\", ToolTip = \"Add a strain field to the particles internal one.\"), Chaos_LinearImpulse UMETA(DisplayName = \"Linear Impulse\", ToolTip = \"Add a vector field to apply an impulse to the particles.\"), Chaos_Max UMETA(Hidden)"
  },
  {
    "label": "GetGeometryCollectionPhysicsType()",
    "kind": "Method",
    "detail": "Function (EFieldPhysicsType)",
    "insertText": "GetGeometryCollectionPhysicsType(const EGeometryCollectionPhysicsTypeEnum GeoCollectionType)"
  },
  {
    "label": "PhysicsTypes()",
    "kind": "Method",
    "detail": "Function (const TArray<EFieldPhysicsType> PhysicsTypes = { EFieldPhysicsType::Field_AngularVelociy,EFieldPhysicsType::Field_DynamicState,EFieldPhysicsType::Field_LinearVelocity,EFieldPhysicsType::Field_InitialAngularVelocity,EFieldPhysicsType::Field_InitialLinearVelocity,EFieldPhysicsType::Field_CollisionGroup,EFieldPhysicsType::Field_LinearForce,EFieldPhysicsType::Field_AngularTorque,EFieldPhysicsType::Field_DisableThreshold,EFieldPhysicsType::Field_SleepingThreshold,EFieldPhysicsType::Field_ExternalClusterStrain,EFieldPhysicsType::Field_InternalClusterStrain,EFieldPhysicsType::Field_LinearImpulse,EFieldPhysicsType::Field_PhysicsType_Max } ; return)",
    "insertText": "PhysicsTypes(uint8)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Chaos_Initial_Velocity_User_Defined)",
    "insertText": "UMETA(DisplayName = \"User Defined\"), Chaos_Initial_Velocity_None UMETA(DisplayName = \"None\"), Chaos_Max UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Chaos_Emission_Pattern_First_Frame)",
    "insertText": "UMETA(DisplayName = \"First Frame\"), Chaos_Emission_Pattern_On_Demand UMETA(DisplayName = \"On Demand\"), Chaos_Max UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Chaos_Damage_Model_UserDefined_Damage_Threshold)",
    "insertText": "UMETA(DisplayName = \"User-Defined Damage Threshold\"), Chaos_Damage_Model_Material_Strength_And_Connectivity_DamageThreshold UMETA(DisplayName = \"Material Strength And Connectivity Damage Threshold\"), Chaos_Max UMETA(Hidden)"
  },
  {
    "label": "GetDamageEvaluationModel()",
    "kind": "Method",
    "detail": "Function (Chaos::EDamageEvaluationModel)",
    "insertText": "GetDamageEvaluationModel(const EDamageModelTypeEnum DamageModel)"
  }
]