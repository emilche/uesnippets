[
  {
    "label": "IFFTAlgorithm",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFFTAlgorithm"
  },
  {
    "label": "FSpectrumAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpectrumAnalyzer"
  },
  {
    "label": "FSpectrumAnalyzerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpectrumAnalyzerSettings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSpectrumBandExtractorSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpectrumBandExtractorSettings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSpectrumBandExtractorSpectrumSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpectrumBandExtractorSpectrumSettings"
  },
  {
    "label": "ISpectrumBandExtractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpectrumBandExtractor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBandSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBandSettings"
  },
  {
    "label": "locks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "locks"
  },
  {
    "label": "FSpectrumAnalyzerBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpectrumAnalyzerBuffer"
  },
  {
    "label": "FSpectrumAnalysisAsyncWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpectrumAnalysisAsyncWorker"
  },
  {
    "label": "FSpectrumAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpectrumAnalyzer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSpectrumAnalyzerScopeLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpectrumAnalyzerScopeLock"
  },
  {
    "label": "FAsyncSpectrumAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncSpectrumAnalyzer"
  },
  {
    "label": "FAsyncSpectrumAnalyzerScopeLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncSpectrumAnalyzerScopeLock"
  },
  {
    "label": "CreateSpectrumBandExtractor()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISpectrumBandExtractor>)",
    "insertText": "CreateSpectrumBandExtractor(const FSpectrumBandExtractorSettings& InSettings)"
  },
  {
    "label": "FSpectrumAnalyzerBuffer()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FSpectrumAnalyzerBuffer()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(int32 InNum)"
  },
  {
    "label": "StopWorkOnBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopWorkOnBuffer(double InTimestamp)"
  },
  {
    "label": "UnlockBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockBuffer()"
  },
  {
    "label": "IncrementInputIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementInputIndex()"
  },
  {
    "label": "IncrementOutputIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementOutputIndex()"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoWork()"
  },
  {
    "label": "Abandon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Abandon()"
  },
  {
    "label": "FSpectrumAnalyzer()",
    "kind": "Method",
    "detail": "Function (SIGNALPROCESSING_API)",
    "insertText": "FSpectrumAnalyzer()"
  },
  {
    "label": "FSpectrumAnalyzer()",
    "kind": "Method",
    "detail": "Function (SIGNALPROCESSING_API)",
    "insertText": "FSpectrumAnalyzer(float InSampleRate)"
  },
  {
    "label": "FSpectrumAnalyzer()",
    "kind": "Method",
    "detail": "Function (SIGNALPROCESSING_API)",
    "insertText": "FSpectrumAnalyzer(const FSpectrumAnalyzerSettings& InSettings, float InSampleRate)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(float InSampleRate)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FSpectrumAnalyzerSettings& InSettings, float InSampleRate)"
  },
  {
    "label": "SetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSettings(const FSpectrumAnalyzerSettings& InSettings)"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSettings(FSpectrumAnalyzerSettings& OutSettings)"
  },
  {
    "label": "GetMagnitudeForFrequency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMagnitudeForFrequency(float InFrequency, EPeakInterpolationMethod InMethod = EPeakInterpolationMethod::Linear)"
  },
  {
    "label": "GetNormalizedMagnitudeForFrequency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNormalizedMagnitudeForFrequency(float InFrequency, EPeakInterpolationMethod InMethod = EPeakInterpolationMethod::Linear)"
  },
  {
    "label": "GetPhaseForFrequency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPhaseForFrequency(float InFrequency, EPeakInterpolationMethod InMethod = EPeakInterpolationMethod::Linear)"
  },
  {
    "label": "GetBands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBands(ISpectrumBandExtractor& InExtractor, TArray<float>& OutValues)"
  },
  {
    "label": "LockOutputBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockOutputBuffer()"
  },
  {
    "label": "UnlockOutputBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockOutputBuffer()"
  },
  {
    "label": "PushAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushAudio(const TSampleBuffer<float>& InBuffer)"
  },
  {
    "label": "PushAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushAudio(const float* InBuffer, int32 NumSamples)"
  },
  {
    "label": "PerformAnalysisIfPossible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PerformAnalysisIfPossible(bool bUseLatestAudio = false)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "ResetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSettings()"
  },
  {
    "label": "PerformInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformInterpolation(const FAlignedFloatBuffer& InComplexBuffer, EPeakInterpolationMethod InMethod, const float InFreq, float& OutReal, float& OutImag)"
  },
  {
    "label": "FAsyncSpectrumAnalyzer()",
    "kind": "Method",
    "detail": "Function (SIGNALPROCESSING_API)",
    "insertText": "FAsyncSpectrumAnalyzer()"
  },
  {
    "label": "FAsyncSpectrumAnalyzer()",
    "kind": "Method",
    "detail": "Function (SIGNALPROCESSING_API)",
    "insertText": "FAsyncSpectrumAnalyzer(float InSampleRate)"
  },
  {
    "label": "FAsyncSpectrumAnalyzer()",
    "kind": "Method",
    "detail": "Function (SIGNALPROCESSING_API)",
    "insertText": "FAsyncSpectrumAnalyzer(const FSpectrumAnalyzerSettings& InSettings, float InSampleRate)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(float InSampleRate)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FSpectrumAnalyzerSettings& InSettings, float InSampleRate)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "SetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSettings(const FSpectrumAnalyzerSettings& InSettings)"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSettings(FSpectrumAnalyzerSettings& OutSettings)"
  },
  {
    "label": "GetMagnitudeForFrequency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMagnitudeForFrequency(float InFrequency, FSpectrumAnalyzer::EPeakInterpolationMethod InMethod = FSpectrumAnalyzer::EPeakInterpolationMethod::Linear)"
  },
  {
    "label": "GetNormalizedMagnitudeForFrequency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNormalizedMagnitudeForFrequency(float InFrequency, FSpectrumAnalyzer::EPeakInterpolationMethod InMethod = FSpectrumAnalyzer::EPeakInterpolationMethod::Linear)"
  },
  {
    "label": "GetPhaseForFrequency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPhaseForFrequency(float InFrequency, FSpectrumAnalyzer::EPeakInterpolationMethod InMethod = FSpectrumAnalyzer::EPeakInterpolationMethod::Linear)"
  },
  {
    "label": "GetBands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBands(ISpectrumBandExtractor& InExtractor, TArray<float>& OutValues)"
  },
  {
    "label": "LockOutputBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockOutputBuffer()"
  },
  {
    "label": "UnlockOutputBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockOutputBuffer()"
  },
  {
    "label": "PushAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushAudio(const TSampleBuffer<float>& InBuffer)"
  },
  {
    "label": "PushAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushAudio(const float* InBuffer, int32 NumSamples)"
  },
  {
    "label": "PerformAnalysisIfPossible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PerformAnalysisIfPossible(bool bUseLatestAudio = false)"
  },
  {
    "label": "PerformAsyncAnalysisIfPossible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PerformAsyncAnalysisIfPossible(bool bUseLatestAudio = false)"
  }
]