[
  {
    "label": "IFFTAlgorithm",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFFTAlgorithm"
  },
  {
    "label": "FSpectrumAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpectrumAnalyzer"
  },
  {
    "label": "FSpectrumAnalyzerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpectrumAnalyzerSettings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSpectrumBandExtractorSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpectrumBandExtractorSettings"
  },
  {
    "label": "FSpectrumBandExtractorSpectrumSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpectrumBandExtractorSpectrumSettings"
  },
  {
    "label": "ISpectrumBandExtractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpectrumBandExtractor"
  },
  {
    "label": "FBandSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBandSettings"
  },
  {
    "label": "FSpectrumAnalyzerBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpectrumAnalyzerBuffer"
  },
  {
    "label": "FSpectrumAnalysisAsyncWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpectrumAnalysisAsyncWorker"
  },
  {
    "label": "FSpectrumAnalyzerScopeLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpectrumAnalyzerScopeLock"
  },
  {
    "label": "FAsyncSpectrumAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncSpectrumAnalyzer"
  },
  {
    "label": "FAsyncSpectrumAnalyzerScopeLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncSpectrumAnalyzerScopeLock"
  },
  {
    "label": "FSpectrumAnalyzerSettings()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Dsp . h \" # include \" DSP / AudioFFT . h \" # include \" DSP / BufferVectorOperations . h \" # include \" SampleBuffer . h \" # include \" Async / AsyncWork . h \" namespace Audio { class IFFTAlgorithm ; class FSpectrumAnalyzer ; struct FSpectrumAnalyzerSettings { enum class EFFTSize : uint16 { Default = 5 1 2,TestingMin_8 = 8,Min_64 = 6 4,Small_256 = 2 5 6,Medium_512 = 5 1 2,Large_1024 = 1 0 2 4,VeryLarge_2048 = 2 0 4 8,TestLarge_4096 = 4 0 9 6 } ; EWindowType WindowType ; EFFTSize FFTSize ; float HopSize ;)",
    "insertText": "FSpectrumAnalyzerSettings() : WindowType(EWindowType::Hann) , FFTSize(EFFTSize::Default) , HopSize(0.0f)"
  },
  {
    "label": "FSpectrumBandExtractorSpectrumSettings()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSpectrumBandExtractorSettings { enum class EMetric : uint8 { Magnitude,Power,Decibel } ; EMetric Metric = EMetric::Decibel ; float DecibelNoiseFloor = - 4 0 . f ; bool bDoNormalize = true ; bool bDoAutoRange = true ; float AutoRangeReleaseTimeInSeconds = 3 0 . f ; float AutoRangeAttackTimeInSeconds = 1 . f ; } ; struct FSpectrumBandExtractorSpectrumSettings { float SampleRate ; int32 FFTSize ; EFFTScaling FFTScaling ; EWindowType WindowType ;)",
    "insertText": "FSpectrumBandExtractorSpectrumSettings() : SampleRate(48000.f) , FFTSize(1024) , FFTScaling(EFFTScaling::None) , WindowType(EWindowType::None)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSpectrumBandExtractorSpectrumSettings& Other)"
  },
  {
    "label": "bIsEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bIsEqual((SampleRate == Other.SampleRate) && (FFTSize == Other.FFTSize) && (FFTScaling == Other.FFTScaling) && (WindowType == Other.WindowType))"
  },
  {
    "label": "ISpectrumBandExtractor()",
    "kind": "Method",
    "detail": "Function (} } ; class ISpectrumBandExtractor { public : enum class EBandType : uint8 { NearestNeighbor,Lerp,Quadratic,ConstantQ } ; struct FBandSettings { EBandType Type = EBandType::ConstantQ ; float CenterFrequency = 0 . f ; float QFactor = 1 0 . 0 f ; } ; ~)",
    "insertText": "ISpectrumBandExtractor()"
  },
  {
    "label": "SetSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSettings(const FSpectrumBandExtractorSettings& InSettings)"
  },
  {
    "label": "SetSpectrumSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpectrumSettings(const FSpectrumBandExtractorSpectrumSettings& InSettings)"
  },
  {
    "label": "RemoveAllBands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllBands()"
  },
  {
    "label": "GetNumBands()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumBands()"
  },
  {
    "label": "AddBand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBand(const FBandSettings& InSettings)"
  },
  {
    "label": "ExtractBands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractBands(const FAlignedFloatBuffer& InComplexBuffer, double InTimestamp, TArray<float>& OutValues)"
  },
  {
    "label": "CreateSpectrumBandExtractor()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISpectrumBandExtractor>)",
    "insertText": "CreateSpectrumBandExtractor(const FSpectrumBandExtractorSettings& InSettings)"
  },
  {
    "label": "FSpectrumAnalyzerBuffer()",
    "kind": "Method",
    "detail": "Function (} ; class FSpectrumAnalyzerBuffer { public :)",
    "insertText": "FSpectrumAnalyzerBuffer()"
  },
  {
    "label": "FSpectrumAnalyzerBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSpectrumAnalyzerBuffer(int32 InNum)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(int32 InNum)"
  },
  {
    "label": "StartWorkOnBuffer()",
    "kind": "Method",
    "detail": "Function (FAlignedFloatBuffer&)",
    "insertText": "StartWorkOnBuffer()"
  },
  {
    "label": "StopWorkOnBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopWorkOnBuffer(double InTimestamp)"
  },
  {
    "label": "LockMostRecentBuffer()",
    "kind": "Method",
    "detail": "Function (const FAlignedFloatBuffer&)",
    "insertText": "LockMostRecentBuffer()"
  },
  {
    "label": "LockMostRecentBuffer()",
    "kind": "Method",
    "detail": "Function (const FAlignedFloatBuffer&)",
    "insertText": "LockMostRecentBuffer(double& OutTimestamp)"
  },
  {
    "label": "UnlockBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockBuffer()"
  },
  {
    "label": "IncrementInputIndex()",
    "kind": "Method",
    "detail": "Function (private : TArray<FAlignedFloatBuffer> ComplexBuffers ; TArray<double> Timestamps ; void)",
    "insertText": "IncrementInputIndex()"
  },
  {
    "label": "IncrementOutputIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementOutputIndex()"
  },
  {
    "label": "FSpectrumAnalysisAsyncWorker()",
    "kind": "Method",
    "detail": "Function (volatile int32 OutputIndex ; volatile int32 InputIndex ; FCriticalSection BufferIndicesCriticalSection ; } ; class FSpectrumAnalysisAsyncWorker { public :)",
    "insertText": "FSpectrumAnalysisAsyncWorker(TWeakPtr<FSpectrumAnalyzer, ESPMode::ThreadSafe> InAnalyzer, bool bInUseLatestAudio) : AnalyzerWeakPtr(InAnalyzer) , bUseLatestAudio(bInUseLatestAudio) , bIsAbandoned(false)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (} TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoWork()"
  },
  {
    "label": "CanAbandon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAbandon()"
  },
  {
    "label": "FSpectrumAnalysisAsyncWorker()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FSpectrumAnalysisAsyncWorker()"
  },
  {
    "label": "FSpectrumAnalyzer()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FSpectrumAnalyzer,ESPMode::ThreadSafe> AnalyzerWeakPtr ; bool bUseLatestAudio ; bool bIsAbandoned ; FCriticalSection NonAbandonableSection ; } ; typedef FAsyncTask<FSpectrumAnalysisAsyncWorker> FSpectrumAnalyzerTask ; class FSpectrumAnalyzer { public : enum class EPeakInterpolationMethod : uint8 { NearestNeighbor,Linear,Quadratic } ;)",
    "insertText": "FSpectrumAnalyzer()"
  },
  {
    "label": "FSpectrumAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSpectrumAnalyzer(float InSampleRate)"
  },
  {
    "label": "FSpectrumAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSpectrumAnalyzer(const FSpectrumAnalyzerSettings& InSettings, float InSampleRate)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(float InSampleRate)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FSpectrumAnalyzerSettings& InSettings, float InSampleRate)"
  },
  {
    "label": "SetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSettings(const FSpectrumAnalyzerSettings& InSettings)"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSettings(FSpectrumAnalyzerSettings& OutSettings)"
  },
  {
    "label": "GetMagnitudeForFrequency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMagnitudeForFrequency(float InFrequency, EPeakInterpolationMethod InMethod = EPeakInterpolationMethod::Linear)"
  },
  {
    "label": "GetNormalizedMagnitudeForFrequency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNormalizedMagnitudeForFrequency(float InFrequency, EPeakInterpolationMethod InMethod = EPeakInterpolationMethod::Linear)"
  },
  {
    "label": "GetPhaseForFrequency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPhaseForFrequency(float InFrequency, EPeakInterpolationMethod InMethod = EPeakInterpolationMethod::Linear)"
  },
  {
    "label": "GetBands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBands(ISpectrumBandExtractor& InExtractor, TArray<float>& OutValues)"
  },
  {
    "label": "LockOutputBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockOutputBuffer()"
  },
  {
    "label": "UnlockOutputBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockOutputBuffer()"
  },
  {
    "label": "PushAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushAudio(const TSampleBuffer<float>& InBuffer)"
  },
  {
    "label": "PushAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushAudio(const float* InBuffer, int32 NumSamples)"
  },
  {
    "label": "PerformAnalysisIfPossible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PerformAnalysisIfPossible(bool bUseLatestAudio = false)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "ResetSettings()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ResetSettings()"
  },
  {
    "label": "PerformInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformInterpolation(const FAlignedFloatBuffer& InComplexBuffer, EPeakInterpolationMethod InMethod, const float InFreq, float& OutReal, float& OutImag)"
  },
  {
    "label": "FSpectrumAnalyzerScopeLock()",
    "kind": "Method",
    "detail": "Function (FSpectrumAnalyzerSettings CurrentSettings ; volatile bool bSettingsWereUpdated ; volatile bool bIsInitialized ; float SampleRate ; FWindow Window ; int32 FFTSize ; int32 HopInSamples ; EFFTScaling FFTScaling ; FAlignedFloatBuffer AnalysisTimeDomainBuffer ; FThreadSafeCounter SampleCounter ; TCircularAudioBuffer<float> InputQueue ; FSpectrumAnalyzerBuffer FrequencyBuffer ; double LockedBufferTimestamp ; const FAlignedFloatBuffer* LockedFrequencyVector ; TUniquePtr<IFFTAlgorithm> FFT ; } ; class FSpectrumAnalyzerScopeLock { public :)",
    "insertText": "FSpectrumAnalyzerScopeLock(FSpectrumAnalyzer* InAnalyzer) : Analyzer(InAnalyzer)"
  },
  {
    "label": "FSpectrumAnalyzerScopeLock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSpectrumAnalyzerScopeLock()"
  },
  {
    "label": "FAsyncSpectrumAnalyzer()",
    "kind": "Method",
    "detail": "Function (} private : FSpectrumAnalyzer* Analyzer ; } ; class FAsyncSpectrumAnalyzer {)",
    "insertText": "FAsyncSpectrumAnalyzer(const FSpectrumAnalyzer&)"
  },
  {
    "label": "FAsyncSpectrumAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAsyncSpectrumAnalyzer(FSpectrumAnalyzer&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAsyncSpectrumAnalyzer&)",
    "insertText": "operator(const FSpectrumAnalyzer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAsyncSpectrumAnalyzer&)",
    "insertText": "operator(FSpectrumAnalyzer&&)"
  },
  {
    "label": "FAsyncSpectrumAnalyzer()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAsyncSpectrumAnalyzer()"
  },
  {
    "label": "FAsyncSpectrumAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAsyncSpectrumAnalyzer(float InSampleRate)"
  },
  {
    "label": "FAsyncSpectrumAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAsyncSpectrumAnalyzer(const FSpectrumAnalyzerSettings& InSettings, float InSampleRate)"
  },
  {
    "label": "GetMagnitudeForFrequency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMagnitudeForFrequency(float InFrequency, FSpectrumAnalyzer::EPeakInterpolationMethod InMethod = FSpectrumAnalyzer::EPeakInterpolationMethod::Linear)"
  },
  {
    "label": "GetNormalizedMagnitudeForFrequency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNormalizedMagnitudeForFrequency(float InFrequency, FSpectrumAnalyzer::EPeakInterpolationMethod InMethod = FSpectrumAnalyzer::EPeakInterpolationMethod::Linear)"
  },
  {
    "label": "GetPhaseForFrequency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPhaseForFrequency(float InFrequency, FSpectrumAnalyzer::EPeakInterpolationMethod InMethod = FSpectrumAnalyzer::EPeakInterpolationMethod::Linear)"
  },
  {
    "label": "PerformAsyncAnalysisIfPossible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PerformAsyncAnalysisIfPossible(bool bUseLatestAudio = false)"
  },
  {
    "label": "FAsyncSpectrumAnalyzerScopeLock()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<FSpectrumAnalyzer,ESPMode::ThreadSafe> Analyzer ; TUniquePtr<FSpectrumAnalyzerTask> AsyncAnalysisTask ; } ; class FAsyncSpectrumAnalyzerScopeLock { public :)",
    "insertText": "FAsyncSpectrumAnalyzerScopeLock(FAsyncSpectrumAnalyzer* InAnalyzer) : Analyzer(InAnalyzer)"
  },
  {
    "label": "FAsyncSpectrumAnalyzerScopeLock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAsyncSpectrumAnalyzerScopeLock()"
  }
]