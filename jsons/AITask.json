[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AAIController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AAIController"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UAITask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAITask"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" GameplayTask . h \" # include \" UObject / Package . h \" # include \" AITask . generated . h \" class AActor ; class AAIController ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (Lowest = 0,Low = 6 4,AutonomousAI = 1 2 7,High = 1 9 2,Ultimate = 2 5 4,} ;)",
    "insertText": "UCLASS(Abstract, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() protected: UPROPERTY(BlueprintReadOnly, Category=\"AI|Tasks\")"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Activate()"
  },
  {
    "label": "UAITask()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UAITask(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "GetAIControllerForActor()",
    "kind": "Method",
    "detail": "Function (AAIController*)",
    "insertText": "GetAIControllerForActor(AActor* Actor)"
  },
  {
    "label": "GetAIController()",
    "kind": "Method",
    "detail": "Function (AAIController*)",
    "insertText": "GetAIController()"
  },
  {
    "label": "InitAITask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAITask(AAIController& AIOwner, IGameplayTaskOwnerInterface& InTaskOwner)"
  },
  {
    "label": "RequestAILogicLocking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestAILogicLocking()"
  },
  {
    "label": "NewAITask()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "NewAITask(AAIController& AIOwner, IGameplayTaskOwnerInterface& InTaskOwner, FName InstanceName = FName())"
  },
  {
    "label": "NewAITask()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "NewAITask(AAIController& AIOwner, IGameplayTaskOwnerInterface& InTaskOwner, EAITaskPriority InPriority, FName InstanceName = FName())"
  },
  {
    "label": "NewAITask()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "NewAITask(AAIController& AIOwner, FName InstanceName = FName())"
  },
  {
    "label": "NewAITask()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "NewAITask(AAIController& AIOwner, EAITaskPriority InPriority, FName InstanceName = FName())"
  },
  {
    "label": "NewAITask()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "NewAITask(const UClass& Class, AAIController& AIOwner, IGameplayTaskOwnerInterface& InTaskOwner, FName InstanceName = FName())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* TaskInstance = NewObject<)",
    "insertText": "T(GetTransientPackage(), &Class)"
  },
  {
    "label": "InitAITask()",
    "kind": "Method",
    "detail": "Function (TaskInstance -> InstanceName = InstanceName ; TaskInstance ->)",
    "insertText": "InitAITask(AIOwner, InTaskOwner)"
  },
  {
    "label": "InitAITask()",
    "kind": "Method",
    "detail": "Function (TaskInstance -> InstanceName = InstanceName ; TaskInstance ->)",
    "insertText": "InitAITask(AIOwner, InTaskOwner, (uint8)InPriority)"
  }
]