[
  {
    "label": "SequencedTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequencedTaskRunner"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "DeleteHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DeleteHelper"
  },
  {
    "label": "DeleteUniquePtrHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DeleteUniquePtrHelper"
  },
  {
    "label": "ReleaseHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReleaseHelper"
  },
  {
    "label": "DoDelete()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCED_TASK_RUNNER_HELPERS_H_ # define BASE_TASK_SEQUENCED_TASK_RUNNER_HELPERS_H_ # include<memory> namespace base { class SequencedTaskRunner ; template<class T> class DeleteHelper { private : void)",
    "insertText": "DoDelete(const void* object)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (delete static_cast<const)",
    "insertText": "T(object)"
  },
  {
    "label": "destroyer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<T>)",
    "insertText": "destroyer(const_cast<T*>(static_cast<const T*>(object)))"
  },
  {
    "label": "DoRelease()",
    "kind": "Method",
    "detail": "Function (} class SequencedTaskRunner ; } ; template<class T> class ReleaseHelper { private : void)",
    "insertText": "DoRelease(const void* object)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (static_cast<const)",
    "insertText": "T(object)->Release()"
  }
]