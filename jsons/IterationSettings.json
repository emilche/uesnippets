[
  {
    "label": "TIterationSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIterationSettings"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include<limits> namespace Chaos { namespace Private { template<TIndexType> class TIterationSettings { private : using FIndexType = TIndexType ; FIndexType NumPositionIterations ; FIndexType NumVelocityIterations ; FIndexType NumProjectionIterations ; public : const int32 InvalidIterations = INDEX_NONE ; const int32 MaxIterations = std::numeric_limits<FIndexType)",
    "insertText": "max()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (TIterationSettings<FIndexType>)",
    "insertText": "Empty()"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (} template<TOtherIndex> TIterationSettings<FIndexType>)",
    "insertText": "Merge(const TIterationSettings<FIndexType>& L, const TIterationSettings<TOtherIndex>& R)"
  },
  {
    "label": "FIndexType()",
    "kind": "Method",
    "detail": "Function (} TIterationSettings<)",
    "insertText": "FIndexType() : NumPositionIterations(InvalidIterations) , NumVelocityIterations(InvalidIterations) , NumProjectionIterations(InvalidIterations)"
  },
  {
    "label": "FIndexType()",
    "kind": "Method",
    "detail": "Function (} TIterationSettings<)",
    "insertText": "FIndexType(const int32 InNumPositionIterations, const int32 InNumVelocityIterations, const int32 InNumProjectionInterations)"
  },
  {
    "label": "SetNumPositionIterations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumPositionIterations(InNumPositionIterations)"
  },
  {
    "label": "SetNumVelocityIterations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumVelocityIterations(InNumVelocityIterations)"
  },
  {
    "label": "SetNumProjectionIterations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumProjectionIterations(InNumProjectionInterations)"
  },
  {
    "label": "GetNumPositionIterations()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumPositionIterations()"
  },
  {
    "label": "FIndexType()",
    "kind": "Method",
    "detail": "Function (NumPositionIterations =)",
    "insertText": "FIndexType(FMath::Clamp(InNum, InvalidIterations, MaxIterations))"
  },
  {
    "label": "SetNumVelocityIterations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumVelocityIterations(const int32 InNum)"
  },
  {
    "label": "SetNumProjectionIterations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumProjectionIterations(const int32 InNum)"
  }
]