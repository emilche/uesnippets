[
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSearchBox"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "STreeView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STreeView"
  },
  {
    "label": "TreeFilterHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeFilterHandler"
  },
  {
    "label": "TTextFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTextFilter"
  },
  {
    "label": "IFieldIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFieldIterator"
  },
  {
    "label": "IFieldExpander",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFieldExpander"
  },
  {
    "label": "SFieldName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFieldName"
  },
  {
    "label": "FContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContainer"
  },
  {
    "label": "FTreeNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTreeNode"
  },
  {
    "label": "FNodeReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeReference"
  },
  {
    "label": "FPropertyViewerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyViewerImpl"
  },
  {
    "label": "FContainer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Framework / PropertyViewer / PropertyPath . h \" # include \" Widgets / PropertyViewer / SPropertyViewer . h \" # include \" Types / SlateEnums . h \" # include \" UObject / Field . h \" # include \" UObject / Object . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class ITableRow ; class SSearchBox ; class STableViewBase ; template<ItemType> class STreeView ; template<ItemType> class TreeFilterHandler ; template<ItemType> class TTextFilter ; namespace UE::PropertyViewer { class IFieldIterator ; class IFieldExpander ; class SFieldName ; } namespace UE::PropertyViewer::Private { struct FContainer {)",
    "insertText": "FContainer(SPropertyViewer::FHandle InIdentifier, TOptional<FText> DisplayName, const UStruct* ClassToDisplay)"
  },
  {
    "label": "FContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FContainer(SPropertyViewer::FHandle InIdentifier, TOptional<FText> DisplayName, UObject* InstanceToDisplay)"
  },
  {
    "label": "FContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FContainer(SPropertyViewer::FHandle InIdentifier, TOptional<FText> DisplayName, const UScriptStruct* Struct, void* Data)"
  },
  {
    "label": "GetIdentifier()",
    "kind": "Method",
    "detail": "Function (public : SPropertyViewer::FHandle)",
    "insertText": "GetIdentifier()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UObject* PinObjectInstance = ObjectInstance .)",
    "insertText": "Get()"
  },
  {
    "label": "GetStruct()",
    "kind": "Method",
    "detail": "Function (} const UStruct*)",
    "insertText": "GetStruct()"
  },
  {
    "label": "CanEdit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanEdit()"
  },
  {
    "label": "IsInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInstance()"
  },
  {
    "label": "IsObjectInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsObjectInstance()"
  },
  {
    "label": "IsScriptStructInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsScriptStructInstance()"
  },
  {
    "label": "MakeContainer()",
    "kind": "Method",
    "detail": "Function (private : SPropertyViewer::FHandle Identifier ; TWeakObjectPtr<const UStruct> Container ; TWeakObjectPtr<UObject> ObjectInstance ; void* StructInstance = nullptr ; TOptional<FText> DisplayName ; bool bIsObject = false ; } ; struct FTreeNode : public TSharedFromThis<FTreeNode> { public : TSharedRef<FTreeNode>)",
    "insertText": "MakeContainer(const TSharedPtr<FContainer>& InContainer, TOptional<FText> InDisplayName)"
  },
  {
    "label": "MakeField()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTreeNode>)",
    "insertText": "MakeField(TSharedPtr<FTreeNode> InParent, const FProperty* Property, TOptional<FText> InDisplayName)"
  },
  {
    "label": "MakeField()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTreeNode>)",
    "insertText": "MakeField(TSharedPtr<FTreeNode> InParent, const UFunction* Function, TOptional<FText> InDisplayName)"
  },
  {
    "label": "IsContainer()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<FTreeNode> ParentNode ; TWeakPtr<FContainer> Container ; TWeakObjectPtr<const UStruct> FieldOwner ; FName PropertyName ; FName FunctionName ; bool bIsStructProperty = false ; bool bIsObjectProperty = false ; TOptional<FText> OverrideDisplayName ; public : TWeakPtr<SFieldName> PropertyWidget ; TArray<TSharedPtr<FTreeNode>,TInlineAllocator<1>> ChildNodes ; bool bChildGenerated = false ; public : bool)",
    "insertText": "IsContainer()"
  },
  {
    "label": "GetContainer()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FContainer>)",
    "insertText": "GetContainer()"
  },
  {
    "label": "IsField()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsField()"
  },
  {
    "label": "GetField()",
    "kind": "Method",
    "detail": "Function (} FFieldVariant)",
    "insertText": "GetField()"
  },
  {
    "label": "GetParentNode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTreeNode>)",
    "insertText": "GetParentNode()"
  },
  {
    "label": "GetPropertyPath()",
    "kind": "Method",
    "detail": "Function (} FPropertyPath)",
    "insertText": "GetPropertyPath()"
  },
  {
    "label": "GetFieldPath()",
    "kind": "Method",
    "detail": "Function (TArray<FFieldVariant>)",
    "insertText": "GetFieldPath()"
  },
  {
    "label": "GetOwnerContainer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FContainer>)",
    "insertText": "GetOwnerContainer()"
  },
  {
    "label": "GetOverrideDisplayName()",
    "kind": "Method",
    "detail": "Function (TOptional<FText>)",
    "insertText": "GetOverrideDisplayName()"
  },
  {
    "label": "FNodeReference()",
    "kind": "Method",
    "detail": "Function (struct FNodeReference { TWeakObjectPtr<UObject> Previous ; TWeakPtr<FTreeNode> Node ;)",
    "insertText": "FNodeReference(UObject* InPrevious, const TWeakPtr<FTreeNode>& InNode) : Previous(InPrevious) , Node(InNode)"
  },
  {
    "label": "BuildChildNodes()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FNodeReference>)",
    "insertText": "BuildChildNodes(IFieldIterator& FieldIterator, IFieldExpander& FieldExpander, bool bSortChildNode)"
  },
  {
    "label": "RemoveChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChild()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ChildNodes .)",
    "insertText": "Reset()"
  },
  {
    "label": "BuildChildNodesRecursive()",
    "kind": "Method",
    "detail": "Function (bChildGenerated = false ; } private : void)",
    "insertText": "BuildChildNodesRecursive(IFieldIterator& FieldIterator, IFieldExpander& FieldExpander, bool bSortChildNode, int32 RecursiveCount, TArray<FNodeReference>& OutTickReference)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Sort(const TSharedPtr<FTreeNode>& NodeA, const TSharedPtr<FTreeNode>& NodeB)"
  },
  {
    "label": "FPropertyViewerImpl()",
    "kind": "Method",
    "detail": "Function (} ; class FPropertyViewerImpl : public TSharedFromThis<FPropertyViewerImpl> { public :)",
    "insertText": "FPropertyViewerImpl(const SPropertyViewer::FArguments& InArgs)"
  },
  {
    "label": "FPropertyViewerImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPropertyViewerImpl(const FPropertyViewerImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPropertyViewerImpl&)",
    "insertText": "operator(const FPropertyViewerImpl&)"
  },
  {
    "label": "FPropertyViewerImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPropertyViewerImpl()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (private : TArray<TSharedPtr<FContainer>> Containers ; TArray<FTreeNode::FNodeReference> NodeReferences ; TSharedPtr<SSearchBox> SearchBoxWidget ; TSharedPtr<STreeView<TSharedPtr<FTreeNode>>> TreeWidget ; TArray<TSharedPtr<FTreeNode>> TreeSource ; TArray<TSharedPtr<FTreeNode>> FilteredTreeSource ; using FTextFilter = TTextFilter<TSharedPtr<FTreeNode>> ; TSharedPtr<FTextFilter> SearchFilter ; using FTreeFilter = TreeFilterHandler<TSharedPtr<FTreeNode>> ; TSharedPtr<FTreeFilter> FilterHandler ; SPropertyViewer::FGetFieldWidget OnGetPreSlot ; SPropertyViewer::FGetFieldWidget OnGetPostSlot ; SPropertyViewer::FOnContextMenuOpening OnContextMenuOpening ; SPropertyViewer::FOnSelectionChanged OnSelectionChanged ; SPropertyViewer::FOnDoubleClicked OnDoubleClicked ; SPropertyViewer::FOnDragDetected OnDragDetected ; SPropertyViewer::FOnGenerateContainer OnGenerateContainer ; SPropertyViewer::EPropertyVisibility PropertyVisibility ; bool bSanitizeName = false ; bool bShowFieldIcon = false ; bool bUseRows = false ; bool bSortChildNode = false ; IFieldIterator* FieldIterator = nullptr ; IFieldExpander* FieldExpander = nullptr ; INotifyHook* NotifyHook = nullptr ; bool bOwnFieldIterator = false ; bool bOwnFieldExpander = false ; public : TSharedRef<SWidget>)",
    "insertText": "Construct(const SPropertyViewer::FArguments& InArgs)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "AddContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContainer(SPropertyViewer::FHandle Identifier, TOptional<FText> DisplayName, const UStruct* Struct)"
  },
  {
    "label": "AddContainerInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContainerInstance(SPropertyViewer::FHandle Identifier, TOptional<FText> DisplayName, UObject* Object)"
  },
  {
    "label": "AddContainerInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContainerInstance(SPropertyViewer::FHandle Identifier, TOptional<FText> DisplayName, const UScriptStruct* Struct, void* Data)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(SPropertyViewer::FHandle Identifier)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAll()"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (TArray<SPropertyViewer::FSelectedItem>)",
    "insertText": "GetSelectedItems()"
  },
  {
    "label": "SetRawFilterText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRawFilterText(const FText& InFilterText)"
  },
  {
    "label": "SetSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelection(SPropertyViewer::FHandle Identifier, TArrayView<const FFieldVariant> FieldPath)"
  },
  {
    "label": "AddContainerInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddContainerInternal(SPropertyViewer::FHandle Identifier, TSharedPtr<FContainer>& NewContainer)"
  },
  {
    "label": "CreateSearch()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateSearch()"
  },
  {
    "label": "CreateTree()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateTree(bool bHasPreWidget, bool bShowPropertyValue, bool bHasPostWidget, ESelectionMode::Type SelectionMode)"
  },
  {
    "label": "HandleSearchChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSearchChanged(const FText& InFilterText)"
  },
  {
    "label": "SetRawFilterTextInternal()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "SetRawFilterTextInternal(const FText& InFilterText)"
  },
  {
    "label": "SetHighlightTextRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighlightTextRecursive(const TSharedPtr<FTreeNode>& OwnerNode, const FText& HighlightText)"
  },
  {
    "label": "HandleGetFilterStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleGetFilterStrings(TSharedPtr<FTreeNode> Item, TArray<FString>& OutStrings)"
  },
  {
    "label": "HandleGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "HandleGenerateRow(TSharedPtr<FTreeNode> Item, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "HandleGetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleGetChildren(TSharedPtr<FTreeNode> InParent, TArray<TSharedPtr<FTreeNode>>& OutChildren)"
  },
  {
    "label": "HandleContextMenuOpening()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "HandleContextMenuOpening()"
  },
  {
    "label": "HandleSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSelectionChanged(TSharedPtr<FTreeNode> Item, ESelectInfo::Type SelectionType)"
  },
  {
    "label": "HandleDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDoubleClick(TSharedPtr<FTreeNode> Item)"
  },
  {
    "label": "HandleDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, const TSharedPtr<FTreeNode> Item)"
  },
  {
    "label": "FindExistingChild()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTreeNode>)",
    "insertText": "FindExistingChild(const TSharedPtr<FTreeNode>& ContainerNode, TArrayView<const FFieldVariant> FieldPath)"
  },
  {
    "label": "HandleBlueprintCompiled()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "HandleBlueprintCompiled()"
  },
  {
    "label": "HandleReplaceViewedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReplaceViewedObjects(const TMap<UObject*, UObject*>& OldToNewObjectMap)"
  }
]