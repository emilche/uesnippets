[
  {
    "label": "FLevelCollectionModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelCollectionModel"
  },
  {
    "label": "FLevelModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelModel"
  },
  {
    "label": "SButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SButton"
  },
  {
    "label": "SWorldHierarchyImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWorldHierarchyImpl"
  },
  {
    "label": "SWorldHierarchyItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWorldHierarchyItem"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Input / Reply . h \" # include \" Styling / SlateColor . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" IWorldTreeItem . h \" class FLevelCollectionModel ; class FLevelModel ; class SButton ; class SWorldHierarchyImpl ; class SWorldHierarchyItem : public SMultiColumnTableRow<WorldHierarchy::FWorldTreeItemPtr> { public :)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnNameChanged, const WorldHierarchy::FWorldTreeItemPtr& , const FVector2D&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SWorldHierarchyItem ) : _IsItemExpanded( false ) , _FoldersOnlyMode( false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FLevelCollectionModel>, InWorldModel) SLATE_ARGUMENT(WorldHierarchy::FWorldTreeItemPtr, InItemModel) SLATE_ARGUMENT(TSharedPtr<SWorldHierarchyImpl>, InHierarchy) SLATE_ATTRIBUTE(bool, IsItemExpanded) SLATE_ATTRIBUTE(FText, HighlightText) SLATE_ARGUMENT(bool, FoldersOnlyMode) SLATE_END_ARGS() void Construct(const FArguments& InArgs, TSharedRef<STableViewBase> OwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "OnItemDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnItemDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (protected : FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& Event)"
  },
  {
    "label": "IsSaveEnabled()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsSaveEnabled()"
  },
  {
    "label": "IsLightingScenarioEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLightingScenarioEnabled()"
  },
  {
    "label": "IsLockEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLockEnabled()"
  },
  {
    "label": "IsEditorVisibilityEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorVisibilityEnabled()"
  },
  {
    "label": "IsGameVisibilityEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGameVisibilityEnabled()"
  },
  {
    "label": "IsKismetEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKismetEnabled()"
  },
  {
    "label": "GetDrawColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetDrawColor()"
  },
  {
    "label": "OnToggleEditorVisibility()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnToggleEditorVisibility()"
  },
  {
    "label": "OnToggleGameVisibility()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnToggleGameVisibility()"
  },
  {
    "label": "OnToggleLightingScenario()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnToggleLightingScenario()"
  },
  {
    "label": "OnToggleLock()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnToggleLock()"
  },
  {
    "label": "OnSave()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnSave()"
  },
  {
    "label": "OnOpenKismet()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnOpenKismet()"
  },
  {
    "label": "OnChangeColor()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnChangeColor()"
  },
  {
    "label": "OnSetColorFromColorPicker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetColorFromColorPicker(FLinearColor NewColor)"
  },
  {
    "label": "OnColorPickerCancelled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnColorPickerCancelled(FLinearColor OriginalColor)"
  },
  {
    "label": "OnColorPickerInteractiveBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnColorPickerInteractiveBegin()"
  },
  {
    "label": "OnColorPickerInteractiveEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnColorPickerInteractiveEnd()"
  },
  {
    "label": "GetLightingScenarioVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetLightingScenarioVisibility()"
  },
  {
    "label": "GetColorButtonVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetColorButtonVisibility()"
  },
  {
    "label": "GetEditorVisibilityToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetEditorVisibilityToolTip()"
  },
  {
    "label": "GetGameVisibilityToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetGameVisibilityToolTip()"
  },
  {
    "label": "GetSaveToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSaveToolTip()"
  },
  {
    "label": "GetKismetToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetKismetToolTip()"
  },
  {
    "label": "GetDisplayNameText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayNameText()"
  },
  {
    "label": "GetDisplayNameTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayNameTooltip()"
  },
  {
    "label": "GetDisplayNameFont()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "GetDisplayNameFont()"
  },
  {
    "label": "GetDisplayNameColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetDisplayNameColorAndOpacity()"
  },
  {
    "label": "GetLevelIconBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetLevelIconBrush()"
  },
  {
    "label": "GetLevelVisibilityBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetLevelVisibilityBrush()"
  },
  {
    "label": "GetGameVisibilityBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetGameVisibilityBrush()"
  },
  {
    "label": "GetLightingScenarioBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetLightingScenarioBrush()"
  },
  {
    "label": "GetLevelLockBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetLevelLockBrush()"
  },
  {
    "label": "GetLevelSaveBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetLevelSaveBrush()"
  },
  {
    "label": "GetLevelKismetBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetLevelKismetBrush()"
  },
  {
    "label": "GetLevelColorBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetLevelColorBrush()"
  },
  {
    "label": "GetLightingScenarioToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLightingScenarioToolTip()"
  },
  {
    "label": "GetLevelLockToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLevelLockToolTip()"
  },
  {
    "label": "GetSCCStateTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSCCStateTooltip()"
  },
  {
    "label": "GetSCCStateImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetSCCStateImage()"
  },
  {
    "label": "OnVerifyItemLabelChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVerifyItemLabelChanged(const FText& InLabel, FText& OutErrorMessage)"
  },
  {
    "label": "OnLabelCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLabelCommitted(const FText& InLabel, ETextCommit::Type InCommitInfo)"
  }
]