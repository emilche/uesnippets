[
  {
    "label": "FAsyncLoadingFlushContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncLoadingFlushContext"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Ticker . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" Logging / LogMacros . h \" # include \" Templates / UnrealTemplate . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(AsyncLoadingFlush, Log, All)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnAsyncLoadingFlushComplete)"
  },
  {
    "label": "FAsyncLoadingFlushContext()",
    "kind": "Method",
    "detail": "Function (class FAsyncLoadingFlushContext final : FNoncopyable { public :)",
    "insertText": "FAsyncLoadingFlushContext(const FString & Context)"
  },
  {
    "label": "FAsyncLoadingFlushContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAsyncLoadingFlushContext(FString&& Context)"
  },
  {
    "label": "FAsyncLoadingFlushContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAsyncLoadingFlushContext()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(const FOnAsyncLoadingFlushComplete& OnFlushComplete)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetId()"
  },
  {
    "label": "CleanupTickers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupTickers()"
  },
  {
    "label": "OnAsyncLoadingCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnAsyncLoadingCheck(float DeltaTime)"
  },
  {
    "label": "OnAsyncLoadingWarn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnAsyncLoadingWarn(float DeltaTime)"
  }
]