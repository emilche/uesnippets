[
  {
    "label": "__attribute__",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__attribute__"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef __EGTTYPESH__ # define __EGTTYPESH__ # if !)",
    "insertText": "defined(__RADTYPESH__) && !defined(__RADRR_COREH__) #define __RADTYPESH__ #define __RADRR_COREH__ #if !defined(__RADRES__)"
  },
  {
    "label": "RADDEFAULT()",
    "kind": "Method",
    "detail": "Function (# define RADDEFEND } # define)",
    "insertText": "RADDEFAULT(val ) =val #else #define RADDEFFUNC #define RADDEFSTART #define RADDEFEND #define RADDEFAULT( val ) #endif #define RR_STRINGIZE( L ) #L #define RR_DO_MACRO( M, X ) M(X) #define RR_STRINGIZE_DELAY( X ) RR_DO_MACRO( RR_STRINGIZE, X ) #define RR_STRING_JOIN(arg1, arg2) RR_STRING_JOIN_DELAY(arg1, arg2) #define RR_STRING_JOIN_DELAY(arg1, arg2) RR_STRING_JOIN_IMMEDIATE(arg1, arg2) #define RR_STRING_JOIN_IMMEDIATE(arg1, arg2) arg1 ## arg2 #define RR_PLATFORM_PATH_STR( plat, file ) RR_STRINGIZE_DELAY( RR_STRING_JOIN( plat, file ) ) #ifdef __RAD_NDA_PLATFORM__ #include RR_PLATFORM_PATH_STR( __RAD_NDA_PLATFORM__, _egttypes.h ) #else #if defined(ANDROID) #define __RADANDROID__ 1 #define __RADDETECTED__ __RADANDROID__ #endif #if defined(__QNX__) #define __RADQNX__ 2 #define __RADDETECTED__ __RADQNX__ #endif #if defined(_Windows) || defined(WIN32) || defined(__WINDOWS__) || defined(_WIN32) || defined(_WIN64) || defined(WINAPI_FAMILY) #ifdef WINAPI_FAMILY #include <winapifamily.h> #define RAD_WINAPI_IS_APP (!WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)) #if RAD_WINAPI_IS_APP #define __RADWINRTAPI__ #define __RADWINRT__ 13 #define __RADDETECTED__ __RADWINRT__ #endif #else #define RAD_WINAPI_IS_APP 0 #endif #ifndef __RADWINRT__ #define __RADNT__ 14 #define __RADDETECTED__ __RADNT__ #endif #endif #if defined(__APPLE__) #include \"TargetConditionals.h\" #if defined(TARGET_IPHONE_SIMULATOR) && TARGET_IPHONE_SIMULATOR #define __RADIPHONE__ 15 #define __RADIPHONESIM__ 16 #define __RADDETECTED__ __RADIPHONESIM__ #elif defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE #define __RADIPHONE__ 15 #define __RADDETECTED__ __RADIPHONE__ #else #define __RADMAC__ 17 #define __RADDETECTED__ __RADMAC__ #endif #if defined(TARGET_OS_IOS) && TARGET_OS_IOS #define __RADIOS__ 18 #endif #if defined(TARGET_OS_TVOS) && TARGET_OS_TVOS #define __RADTVOS__ 19 #endif #if defined(TARGET_OS_WATCHOS) && TARGET_OS_WATCHOS #define __RADWATCHOS__ 20 #endif #endif #if defined(__EMSCRIPTEN__) #define __RADEMSCRIPTEN__ 22 #define __RADDETECTED__ __RADEMSCRIPTEN__ #endif #if defined(__linux__) && !defined(ANDROID) #define __RADLINUX__ 3 #define __RADDETECTED__ __RADLINUX__ #endif #if !defined( __RADDETECTED__) && !defined( USING_EGT ) #define __RADUNKNOWN__ 99 #define __RADDETECTED__ __RADUNKNOWN__ #endif #endif #if !defined(__RADDETECTED__) #error \"radtypes.h did not detect your platform.\" #endif #define __RAD32__ #if defined(__arm__) || defined( _M_ARM ) #define __RADARM__ 1 #define __RADDETECTEDPROC__ __RADARM__ #define __RADLITTLEENDIAN__ #if defined(__ARM_NEON__) || defined(__ARM_NEON) #define __RADNEON__ #endif #if !defined(__RADSOFTFP__) && !defined( __ARM_PCS_VFP ) #define __RADSOFTFP__ #endif #endif #if defined(__i386) || defined( __i386__ ) || defined( _M_IX86 ) || defined( _X86_ ) #define __RADX86__ 2 #if !defined __RADIPHONESIM__ #define __RADMMX__ #endif #define __RADDETECTEDPROC__ __RADX86__ #define __RADLITTLEENDIAN__ #endif #if defined(_x86_64) || defined( __x86_64__ ) || defined( _M_X64 ) || defined( _M_AMD64 ) #define __RADX86__ 2 #define __RADX64__ 3 #if !defined __RADIPHONESIM__ #define __RADMMX__ #endif #define __RADDETECTEDPROC__ __RADX64__ #define __RADLITTLEENDIAN__ #endif #if defined(__powerpc) || defined( _M_PPC ) #define __RADPPC__ 4 #define __RADALTIVEC__ #define __RADDETECTEDPROC__ __RADPPC__ #define __RADBIGENDIAN__ #endif #if defined( __aarch64__ ) || defined( __arm64__ ) || defined( _M_ARM64 ) #define __RADARM__ 1 #define __RADARM64__ 6 #define __RADDETECTEDPROC__ __RADARM64__ #define __RADLITTLEENDIAN__ #define __RADNEON__ #endif #if defined(__EMSCRIPTEN__) #define __RADDETECTEDPROC__ #define __RADLITTLEENDIAN__ #endif #if !defined(__RADDETECTEDPROC__) #error \"egttypes.h did not detect your processor type.\" #endif #if defined(__ppc64__) || defined(__aarch64__) || defined(_M_X64) || defined(__x86_64__) || defined(__x86_64) || defined( __arm64__ ) || defined( _M_ARM64 ) #define __RAD64__ #define __RAD64REGS__ #endif #if ( defined(__RADINSTATICLIB__) || defined(__RADNOEXPORTS__ ) || ( defined(__RADNOEXEEXPORTS__) && ( !defined(__RADINDLL__) ) && ( !defined(__RADINSTATICLIB__) ) ) ) #define RADEXPFUNC RADDEFFUNC #else #if defined(__RADINDLL__) #define RADEXPFUNC RADDEFFUNC RADDLLEXPORTDLL #else #define RADEXPFUNC RADDEFFUNC RADDLLIMPORTDLL #endif #endif #if defined(__RADANDROID__) #define RADRESTRICT __restrict #define RADSTRUCT struct __attribute__((__packed__)) #define RADLINK #define RADEXPLINK #define RADDLLEXPORTDLL __attribute__((visibility(\"default\"))) #define RADDLLIMPORTDLL #endif #if defined(__RADQNX__) #define RADRESTRICT __restrict #define RADSTRUCT struct __attribute__((__packed__)) #define RADLINK #define RADEXPLINK RADLINK #define RADDLLEXPORTDLL #define RADDLLIMPORTDLL #endif #if defined(__RADLINUX__) || defined(__RADUNKNOWN__) #define RADRESTRICT __restrict #define RADSTRUCT struct __attribute__((__packed__)) #if defined(__RADX86__) && !defined(__RADX64__) #define RADLINK __attribute__((cdecl)) #define RADEXPLINK __attribute__((cdecl)) #else #define RADLINK #define RADEXPLINK #endif #define RADDLLEXPORTDLL __attribute__((visibility(\"default\"))) #define RADDLLIMPORTDLL #endif #if defined(__RADNT__) #define __RADWIN__ #if _MSC_VER >= 1400 #define RADRESTRICT __restrict #else #define RADRESTRICT #define __RADNOVARARGMACROS__ #endif #define RADSTRUCT struct #define RADLINK __stdcall #define RADEXPLINK __stdcall #define RADDLLEXPORTDLL __declspec(dllexport) #ifdef __RADX32__ #define RADDLLIMPORTDLL #else #define RADDLLIMPORTDLL __declspec(dllimport) #endif #endif #if defined(__RADWINRT__) #define __RADWIN__ #if defined(__RADARM__) #define __RADNEON__ #endif #define RADRESTRICT __restrict #define RADSTRUCT struct #define RADLINK __stdcall #define RADEXPLINK __stdcall #define RADDLLEXPORTDLL __declspec(dllexport) #define RADDLLIMPORTDLL __declspec(dllimport) #endif #if defined(__RADIPHONE__) #define __RADMACAPI__ #define RADRESTRICT __restrict #define RADSTRUCT struct __attribute__((__packed__)) #define RADLINK #define RADEXPLINK #define RADDLLEXPORTDLL #define RADDLLIMPORTDLL #endif #if defined(__RADMAC__) #define __RADMACH__ #define __RADMACAPI__ #define RADRESTRICT __restrict #define RADSTRUCT struct __attribute__((__packed__)) #define RADLINK #define RADEXPLINK #define RADDLLEXPORTDLL __attribute__((visibility(\"default\"))) #define RADDLLIMPORTDLL #ifdef TARGET_API_MAC_CARBON #if TARGET_API_MAC_CARBON #ifndef __RADCARBON__ #define __RADCARBON__ #endif #endif #endif #endif #if defined(__RADEMSCRIPTEN__) #include <emscripten.h> #define RADRESTRICT __restrict #define RADSTRUCT struct __attribute__((__packed__)) #define RADLINK #define RADEXPLINK EMSCRIPTEN_KEEPALIVE #define RADDLLEXPORTDLL #define RADDLLIMPORTDLL #endif #ifndef RADLINK #error RADLINK was not defined. #endif #ifdef _MSC_VER #define RADINLINE __inline #else #define RADINLINE inline #endif #ifdef _MSC_VER #define RR_NUMBERNAME(name) RR_STRING_JOIN(name,__COUNTER__) #else #define RR_NUMBERNAME(name) RR_STRING_JOIN(name,__LINE__) #endif #ifndef RR_COMPILER_ASSERT #if defined(__clang__) #define RR_COMPILER_ASSERT_UNUSED __attribute__((unused)) #else #define RR_COMPILER_ASSERT_UNUSED #endif #define RR_COMPILER_ASSERT(exp) typedef char RR_NUMBERNAME(_dummy_array) [ (exp) ? 1 : -1 ] RR_COMPILER_ASSERT_UNUSED #endif #define RAD_S8 signed char #define RAD_U8 unsigned char #define RAD_U16 unsigned short #define RAD_S16 signed short #if defined(__RAD64__) #define RAD_U32 unsigned int #define RAD_S32 signed int #if ( defined(_MSC_VER) && _MSC_VER >= 1300 && defined(_Wp64) && _Wp64 ) #define RAD_SINTa __w64 signed __int64 #define RAD_UINTa __w64 unsigned __int64 #else #define RAD_UINTa unsigned long long #define RAD_SINTa signed long long #endif #endif #if defined(__RAD32__) && !defined(__RAD64__) #define RAD_U32 unsigned int #define RAD_S32 signed int #if ( ( defined(_MSC_VER) && (_MSC_VER >= 1300 ) ) && ( defined(_Wp64) && ( _Wp64 ) ) ) #define RAD_SINTa __w64 signed long #define RAD_UINTa __w64 unsigned long #else #ifdef _Wp64 #define RAD_SINTa signed long #define RAD_UINTa unsigned long #else #define RAD_SINTa signed int #define RAD_UINTa unsigned int #endif #endif #endif #define RAD_F32 float #define RAD_F64 double #if defined(_MSC_VER) #define RAD_U64 unsigned __int64 #define RAD_S64 signed __int64 #else #define RAD_U64 unsigned long long #define RAD_S64 signed long long #endif #if !defined(RADNOTYPEDEFS)"
  }
]