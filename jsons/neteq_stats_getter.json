[
  {
    "label": "NetEqStatsGetter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqStatsGetter"
  },
  {
    "label": "Stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stats"
  },
  {
    "label": "ConcealmentEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcealmentEvent"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_STATS_GETTER_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_STATS_GETTER_H_ # include<memory> # include<string> # include<vector> # include \" modules / audio_coding / neteq / tools / neteq_delay_analyzer . h \" # include \" modules / audio_coding / neteq / tools / neteq_test . h \" namespace webrtc { namespace test { class NetEqStatsGetter : public NetEqGetAudioCallback { public : struct Stats { double current_buffer_size_ms = 0 . 0 ; double preferred_buffer_size_ms = 0 . 0 ; double jitter_peaks_found = 0 . 0 ; double packet_loss_rate = 0 . 0 ; double expand_rate = 0 . 0 ; double speech_expand_rate = 0 . 0 ; double preemptive_rate = 0 . 0 ; double accelerate_rate = 0 . 0 ; double secondary_decoded_rate = 0 . 0 ; double secondary_discarded_rate = 0 . 0 ; double clockdrift_ppm = 0 . 0 ; double added_zero_samples = 0 . 0 ; double mean_waiting_time_ms = 0 . 0 ; double median_waiting_time_ms = 0 . 0 ; double min_waiting_time_ms = 0 . 0 ; double max_waiting_time_ms = 0 . 0 ; } ; struct ConcealmentEvent { uint64_t duration_ms ; size_t concealment_event_number ; int64_t time_from_previous_event_end_ms ; std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "NetEqStatsGetter()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "NetEqStatsGetter(std::unique_ptr<NetEqDelayAnalyzer> delay_analyzer)"
  },
  {
    "label": "set_stats_query_interval_ms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_stats_query_interval_ms(int64_t stats_query_interval_ms)"
  },
  {
    "label": "BeforeGetAudio()",
    "kind": "Method",
    "detail": "Function (stats_query_interval_ms_ = stats_query_interval_ms ; } void)",
    "insertText": "BeforeGetAudio(NetEq* neteq)"
  },
  {
    "label": "AfterGetAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AfterGetAudio(int64_t time_now_ms, const AudioFrame& audio_frame, bool muted, NetEq* neteq)"
  },
  {
    "label": "delay_analyzer()",
    "kind": "Method",
    "detail": "Function (NetEqDelayAnalyzer*)",
    "insertText": "delay_analyzer()"
  },
  {
    "label": "concealment_events()",
    "kind": "Method",
    "detail": "Function (} const std::vector<ConcealmentEvent>&)",
    "insertText": "concealment_events()"
  }
]