[
  {
    "label": "TKeyTimeIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TKeyTimeIterator"
  },
  {
    "label": "TKeyFrameManipulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TKeyFrameManipulator"
  },
  {
    "label": "TKeyFrameManipulator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Curves / KeyHandle . h \" # include \" Curves / IKeyFrameManipulator . h \" template<TimeType> struct TKeyTimeIterator ; template<TimeType> class TKeyFrameManipulator : IKeyFrameManipulator<TimeType> { public : typedef TCallTraits<TimeType>::ParamType TimeTypeRef ;)",
    "insertText": "TKeyFrameManipulator(TArray<TimeType>* KeyTimesParam, FKeyHandleLookupTable* ExternalKeyHandleLUT = nullptr) : KeyTimes(KeyTimesParam) , KeyHandleLUT(ExternalKeyHandleLUT)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (KeyHandleLUT =& TemporaryKeyHandleLUT ;)",
    "insertText": "for(int32 TimeIndex = 0; TimeIndex < KeyTimes->Num(); ++TimeIndex)"
  },
  {
    "label": "AllocateHandle()",
    "kind": "Method",
    "detail": "Function (FKeyHandle Handle = KeyHandleLUT ->)",
    "insertText": "AllocateHandle(TimeIndex)"
  },
  {
    "label": "TKeyFrameManipulator()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "TKeyFrameManipulator(const TKeyFrameManipulator& Rhs) : KeyTimes(Rhs.KeyTimes) , KeyHandleLUT(Rhs.KeyHandleLUT == &Rhs.TemporaryKeyHandleLUT ? &TemporaryKeyHandleLUT : Rhs.KeyHandleLUT) , TemporaryKeyHandleLUT(Rhs.TemporaryKeyHandleLUT)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TKeyFrameManipulator&)",
    "insertText": "operator(const TKeyFrameManipulator& Rhs)"
  },
  {
    "label": "TKeyFrameManipulator()",
    "kind": "Method",
    "detail": "Function (KeyTimes = Rhs . KeyTimes ; KeyHandleLUT = Rhs . KeyHandleLUT = =& Rhs . TemporaryKeyHandleLUT ?& TemporaryKeyHandleLUT : Rhs . KeyHandleLUT ; TemporaryKeyHandleLUT = Rhs . TemporaryKeyHandleLUT ; } return* this ; })",
    "insertText": "TKeyFrameManipulator(TKeyFrameManipulator&& Rhs) : KeyTimes(Rhs.KeyTimes) , KeyHandleLUT(Rhs.KeyHandleLUT == &Rhs.TemporaryKeyHandleLUT ? &TemporaryKeyHandleLUT : Rhs.KeyHandleLUT) , TemporaryKeyHandleLUT(MoveTemp(Rhs.TemporaryKeyHandleLUT))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TKeyFrameManipulator&)",
    "insertText": "operator(TKeyFrameManipulator&& Rhs)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (KeyTimes = Rhs . KeyTimes ; KeyHandleLUT = Rhs . KeyHandleLUT = =& Rhs . TemporaryKeyHandleLUT ?& TemporaryKeyHandleLUT : Rhs . KeyHandleLUT ; TemporaryKeyHandleLUT =)",
    "insertText": "MoveTemp(Rhs.TemporaryKeyHandleLUT)"
  },
  {
    "label": "TKeyFrameManipulator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } ~)",
    "insertText": "TKeyFrameManipulator()"
  },
  {
    "label": "OnKeyAdded()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "OnKeyAdded(int32 Index)"
  },
  {
    "label": "OnKeyRelocated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnKeyRelocated(int32 OldIndex, int32 NewIndex)"
  },
  {
    "label": "OnKeyRemoved()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnKeyRemoved(int32 Index)"
  },
  {
    "label": "OnReset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnReset()"
  },
  {
    "label": "AddKeyImpl()",
    "kind": "Method",
    "detail": "Function (} private : FKeyHandle)",
    "insertText": "AddKeyImpl(TimeTypeRef InTime)"
  },
  {
    "label": "SetKeyTimeImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetKeyTimeImpl(FKeyHandle KeyHandle, TimeTypeRef NewTime)"
  },
  {
    "label": "SetKeyTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyTime(KeyHandle, NewTime)"
  },
  {
    "label": "RemoveKeyImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveKeyImpl(FKeyHandle KeyHandle)"
  },
  {
    "label": "RemoveKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveKey(KeyHandle)"
  },
  {
    "label": "GetKeyTimeImpl()",
    "kind": "Method",
    "detail": "Function (} TOptional<TimeType>)",
    "insertText": "GetKeyTimeImpl(FKeyHandle KeyHandle)"
  },
  {
    "label": "FindKeyImpl()",
    "kind": "Method",
    "detail": "Function (} TOptional<FKeyHandle>)",
    "insertText": "FindKeyImpl(const TFunctionRef<bool(TimeTypeRef)>& InPredicate)"
  },
  {
    "label": "IterateKeysImpl()",
    "kind": "Method",
    "detail": "Function (} TKeyTimeIterator<TimeType>)",
    "insertText": "IterateKeysImpl()"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (} public : FKeyHandle)",
    "insertText": "AddKey(TimeTypeRef InTime)"
  },
  {
    "label": "ComputeInsertIndex()",
    "kind": "Method",
    "detail": "Function (int32 InsertIndex =)",
    "insertText": "ComputeInsertIndex(InTime)"
  },
  {
    "label": "InsertKeyImpl()",
    "kind": "Method",
    "detail": "Function (FKeyHandle Handle =)",
    "insertText": "InsertKeyImpl(InTime, InsertIndex)"
  },
  {
    "label": "OnKeyAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnKeyAdded(InsertIndex)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (const int32 ExistingIndex = KeyHandleLUT ->)",
    "insertText": "GetIndex(KeyHandle)"
  },
  {
    "label": "ComputeInsertIndex()",
    "kind": "Method",
    "detail": "Function (int32 NewIndex =)",
    "insertText": "ComputeInsertIndex(NewTime, ExistingIndex)"
  },
  {
    "label": "RelocateKeyImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RelocateKeyImpl(ExistingIndex, NewIndex)"
  },
  {
    "label": "OnKeyRelocated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnKeyRelocated(ExistingIndex, NewIndex)"
  },
  {
    "label": "RemoveKey()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveKey(FKeyHandle KeyHandle)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (KeyTimes ->)",
    "insertText": "RemoveAtSwap(RemoveAtIndex, EAllowShrinking::No)"
  },
  {
    "label": "DeallocateHandle()",
    "kind": "Method",
    "detail": "Function (KeyHandleLUT ->)",
    "insertText": "DeallocateHandle(RemoveAtIndex)"
  },
  {
    "label": "OnKeyRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnKeyRemoved(RemoveAtIndex)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (KeyTimes ->)",
    "insertText": "Empty()"
  },
  {
    "label": "GetKeyTime()",
    "kind": "Method",
    "detail": "Function (} public : TOptional<TimeType>)",
    "insertText": "GetKeyTime(FKeyHandle KeyHandle)"
  },
  {
    "label": "FindKey()",
    "kind": "Method",
    "detail": "Function (} TOptional<FKeyHandle>)",
    "insertText": "FindKey(const TFunctionRef<bool(TimeTypeRef)>& InPredicate)"
  },
  {
    "label": "FKeyHandle()",
    "kind": "Method",
    "detail": "Function (} } return TOptional<)",
    "insertText": "FKeyHandle()"
  },
  {
    "label": "IterateKeys()",
    "kind": "Method",
    "detail": "Function (} TKeyTimeIterator<TimeType>)",
    "insertText": "IterateKeys()"
  },
  {
    "label": "ComputeInsertIndex()",
    "kind": "Method",
    "detail": "Function (} protected : int32)",
    "insertText": "ComputeInsertIndex(TimeTypeRef InTime, int32 StartAtIndex = 0)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (KeyTimes ->)",
    "insertText": "Insert(Time, InsertIndex)"
  },
  {
    "label": "GetKeyTimeChecked()",
    "kind": "Method",
    "detail": "Function (} TimeType)",
    "insertText": "GetKeyTimeChecked(int32 KeyIndex)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetIndex(FKeyHandle KeyHandle)"
  },
  {
    "label": "GetKeyHandleFromIndex()",
    "kind": "Method",
    "detail": "Function (} FKeyHandle)",
    "insertText": "GetKeyHandleFromIndex(int32 Index)"
  },
  {
    "label": "RelocateKeyImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RelocateKeyImpl(int32 OldIndex, int32 NewIndex)"
  },
  {
    "label": "Time()",
    "kind": "Method",
    "detail": "Function (TimeType)",
    "insertText": "Time(*KeyTimes)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (KeyTimes ->)",
    "insertText": "RemoveAtSwap(OldIndex, EAllowShrinking::No)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (KeyTimes ->)",
    "insertText": "Insert(Time, NewIndex)"
  },
  {
    "label": "MoveHandle()",
    "kind": "Method",
    "detail": "Function (KeyHandleLUT ->)",
    "insertText": "MoveHandle(OldIndex, NewIndex)"
  }
]