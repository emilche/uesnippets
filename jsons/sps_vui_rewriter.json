[
  {
    "label": "SpsVuiRewriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SpsVuiRewriter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ParseAndRewriteSps()",
    "kind": "Method",
    "detail": "Function (# ifndef COMMON_VIDEO_H264_SPS_VUI_REWRITER_H_ # define COMMON_VIDEO_H264_SPS_VUI_REWRITER_H_ # include<stddef . h> # include<stdint . h> # include \" absl / types / optional . h \" # include \" api / video / color_space . h \" # include \" common_video / h264 / sps_parser . h \" # include \" rtc_base / buffer . h \" namespace webrtc { class SpsVuiRewriter : private SpsParser { public : enum class ParseResult { kFailure,kVuiOk,kVuiRewritten } ; enum class Direction { kIncoming,kOutgoing } ; ParseResult)",
    "insertText": "ParseAndRewriteSps(const uint8_t* buffer, size_t length, absl::optional<SpsParser::SpsState>* sps, const ColorSpace* color_space, rtc::Buffer* destination, Direction Direction)"
  },
  {
    "label": "ParseOutgoingBitstreamAndRewrite()",
    "kind": "Method",
    "detail": "Function (rtc::Buffer)",
    "insertText": "ParseOutgoingBitstreamAndRewrite(rtc::ArrayView<const uint8_t> buffer, const ColorSpace* color_space)"
  },
  {
    "label": "ParseAndRewriteSps()",
    "kind": "Method",
    "detail": "Function (private : ParseResult)",
    "insertText": "ParseAndRewriteSps(const uint8_t* buffer, size_t length, absl::optional<SpsParser::SpsState>* sps, const ColorSpace* color_space, rtc::Buffer* destination)"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStats(ParseResult result, Direction direction)"
  }
]