[
  {
    "label": "FParticleDynamicData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleDynamicData"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "UParticleSystemReplay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSystemReplay"
  },
  {
    "label": "UPhysicalMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterial"
  },
  {
    "label": "EventData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EventData"
  },
  {
    "label": "FDynamicEmitterDataBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicEmitterDataBase"
  },
  {
    "label": "FDynamicEmitterReplayDataBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicEmitterReplayDataBase"
  },
  {
    "label": "FParticleEmitterInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleEmitterInstance"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPSCTickData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPSCTickData"
  },
  {
    "label": "FParticleSystemWorldManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleSystemWorldManager"
  },
  {
    "label": "UAnimNotifyState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimNotifyState"
  },
  {
    "label": "FParticleSystemSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleSystemSceneProxy"
  },
  {
    "label": "UFXSystemAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFXSystemAsset"
  },
  {
    "label": "FParticleAnimTrailEmitterInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleAnimTrailEmitterInstance"
  },
  {
    "label": "EParticleSysParamType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EParticleSysParamType"
  },
  {
    "label": "ParticleReplayState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ParticleReplayState"
  },
  {
    "label": "EParticleEventType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EParticleEventType"
  },
  {
    "label": "UParticleSystemComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSystemComponent"
  },
  {
    "label": "FParticleSysParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleSysParam"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "FParticleEventData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleEventData"
  },
  {
    "label": "UParticleModuleEventSendToGame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleEventSendToGame"
  },
  {
    "label": "FParticleExistingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleExistingData"
  },
  {
    "label": "FParticleEventSpawnData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleEventSpawnData"
  },
  {
    "label": "FParticleEventDeathData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleEventDeathData"
  },
  {
    "label": "FParticleEventCollideData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleEventCollideData"
  },
  {
    "label": "FParticleEventBurstData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleEventBurstData"
  },
  {
    "label": "FParticleEventKismetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleEventKismetData"
  },
  {
    "label": "FFXSystemSpawnParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFXSystemSpawnParameters"
  },
  {
    "label": "UFXSystemComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFXSystemComponent"
  },
  {
    "label": "UParticleSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSystem"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "ParticleSystemLODMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ParticleSystemLODMethod"
  },
  {
    "label": "FFXSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFXSystem"
  },
  {
    "label": "FRenderCommandFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderCommandFence"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "EForceAsyncWorkCompletion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EForceAsyncWorkCompletion"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Components / SceneComponent . h \" # include \" Components / PrimitiveComponent . h \" # include \" Materials / MaterialInterface . h \" # include \" Particles / ParticleSystem . h \" # include \" Particles / Emitter . h \" # include \" Runtime / Launch / Resources / Version . h \" # include \" Particles / WorldPSCPool . h \" # include \" Particles / ParticlePerfStats . h \" # include \" ParticleSystemComponent . generated . h \" class FParticleDynamicData ; class FPrimitiveSceneProxy ; class UParticleSystemReplay ; class UPhysicalMaterial ; struct EventData ; struct FDynamicEmitterDataBase ; struct FDynamicEmitterReplayDataBase ; struct FParticleEmitterInstance ; enum class EParticleSignificanceLevel : uint8 ; struct FPSCTickData ; class FParticleSystemWorldManager ; class UAnimNotifyState ; class FParticleDynamicData ; class FParticleSystemSceneProxy ; class UAnimNotifyState ; class UFXSystemAsset ; struct FDynamicEmitterDataBase ; struct FDynamicEmitterReplayDataBase ; struct FParticleAnimTrailEmitterInstance ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (PSPT_None)",
    "insertText": "UMETA(DisplayName=\"None\"), PSPT_Scalar UMETA(DisplayName=\"Scalar\"), PSPT_ScalarRand UMETA(DisplayName=\"Scalar Random\"), PSPT_Vector UMETA(DisplayName=\"Vector\"), PSPT_VectorRand UMETA(DisplayName=\"Vector Random\"), PSPT_Color UMETA(DisplayName=\"Color\"), PSPT_Actor UMETA(DisplayName=\"Actor\"), PSPT_Material UMETA(DisplayName=\"Material\"), PSPT_VectorUnitRand UMETA(DisplayName = \"Vector Unit Random\")"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (PRS_Disabled)",
    "insertText": "UMETA(DisplayName=\"Disabled\"), PRS_Capturing UMETA(DisplayName=\"Capturing\"), PRS_Replaying UMETA(DisplayName=\"Replaying\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (EPET_Any)",
    "insertText": "UMETA(DisplayName=\"Any\"), EPET_Spawn UMETA(DisplayName=\"Spawn\"), EPET_Death UMETA(DisplayName=\"Death\"), EPET_Collision UMETA(DisplayName=\"Collision\"), EPET_Burst UMETA(DisplayName=\"Burst\"), EPET_Blueprint UMETA(DisplayName=\"Blueprint\")"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnSystemFinished, class UParticleSystemComponent*, PSystem)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnSystemPreActivationChange, class UParticleSystemComponent*, bool)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=ParticleSysParam)"
  },
  {
    "label": "FParticleSysParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FParticleSysParam() : ParamType(0) , Scalar(0) , Scalar_Low(0) , Vector(ForceInit) , Vector_Low(ForceInit) , Color(ForceInit) , Actor(NULL) , Material(NULL) , AsyncActorToWorld(FTransform::Identity) , AsyncActorVelocity(FVector::ZeroVector) , bAsyncDataCopyIsValid(false)"
  },
  {
    "label": "UpdateAsyncActorCache()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateAsyncActorCache()"
  },
  {
    "label": "ActorToWorld()",
    "kind": "Method",
    "detail": "Function (AsyncActorToWorld = Actor ->)",
    "insertText": "ActorToWorld()"
  },
  {
    "label": "GetVelocity()",
    "kind": "Method",
    "detail": "Function (AsyncActorVelocity = Actor ->)",
    "insertText": "GetVelocity()"
  },
  {
    "label": "ResetAsyncActorCache()",
    "kind": "Method",
    "detail": "Function (} bAsyncDataCopyIsValid = true ; } void)",
    "insertText": "ResetAsyncActorCache()"
  },
  {
    "label": "GetAsyncActorToWorld()",
    "kind": "Method",
    "detail": "Function (bAsyncDataCopyIsValid = false ; } FTransform)",
    "insertText": "GetAsyncActorToWorld()"
  },
  {
    "label": "GetAsyncActorVelocity()",
    "kind": "Method",
    "detail": "Function (} return FTransform::Identity ; } FVector)",
    "insertText": "GetAsyncActorVelocity()"
  },
  {
    "label": "FParticleEventData()",
    "kind": "Method",
    "detail": "Function (} return FVector::ZeroVector ; } private : FTransform AsyncActorToWorld ; FVector AsyncActorVelocity ; bool bAsyncDataCopyIsValid ; } ; template<> struct TIsPODType<FParticleSysParam> { enum { Value = true } ; } ; struct FParticleEventData { int32 Type ; FName EventName ; float EmitterTime ; FVector Location ; FVector Velocity ; TArray<class UParticleModuleEventSendToGame*> EventData ;)",
    "insertText": "FParticleEventData() : Type(0) , EmitterTime(0)"
  },
  {
    "label": "FParticleExistingData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FParticleExistingData : FParticleEventData { float ParticleTime ; FVector Direction ;)",
    "insertText": "FParticleExistingData() : ParticleTime(0) , Direction(ForceInit)"
  },
  {
    "label": "FParticleEventCollideData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FParticleEventSpawnData : public FParticleEventData { } ; struct FParticleEventDeathData : public FParticleExistingData { } ; struct FParticleEventCollideData : public FParticleExistingData { FVector Normal ; float Time ; int32 Item ; FName BoneName ; UPhysicalMaterial* PhysMat ;)",
    "insertText": "FParticleEventCollideData() : Normal(ForceInit) , Time(0) , Item(0)"
  },
  {
    "label": "FParticleEventBurstData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FParticleEventBurstData : public FParticleEventData { int32 ParticleCount ;)",
    "insertText": "FParticleEventBurstData() : ParticleCount(0)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, AdvancedDisplay, Category = \"Effects|Components|ParticleSystem\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UFUNCTION(BlueprintCallable, Category = \"Effects|Components|ParticleSystem\") virtual void SetBoolParameter(FName ParameterName, bool Param)"
  },
  {
    "label": "GetApproxMemoryUsage()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetApproxMemoryUsage()"
  },
  {
    "label": "DeactivateImmediate()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DeactivateImmediate()"
  },
  {
    "label": "RequiresLWCTileRecache()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresLWCTileRecache(const FVector3f CurrentTile, const FVector CurrentLocation)"
  },
  {
    "label": "PrecacheAssetPSOs()",
    "kind": "Method",
    "detail": "Function (# if WITH_PER_COMPONENT_PARTICLE_PERF_STATS FParticlePerfStats* ParticlePerfStats = nullptr ; # endif protected : void)",
    "insertText": "PrecacheAssetPSOs(UFXSystemAsset* FXSystemAsset)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(ClassGroup=(Rendering), hidecategories=Object, hidecategories=Physics, hidecategories=Collision, showcategories=Trigger, editinlinenew, meta=(BlueprintSpawnableComponent, DisplayName = \"Cascade Particle System Component\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (class FParticleSystemWorldManager ;)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, BlueprintReadOnly, Category=Particles)"
  },
  {
    "label": "CancelAutoAttachment()",
    "kind": "Method",
    "detail": "Function (uint8 bForcedInActive : 1 ; uint8 bForceLODUpdateFromRenderer : 1 ; uint8 bIsViewRelevanceDirty : 1 ; uint8 bAutoDestroy : 1 ; private : uint8 bIsTransformDirty : 1 ; uint8 bDidAutoAttach : 1 ; uint8 bAsyncDataCopyIsValid : 1 ; uint8 bParallelRenderThreadUpdate : 1 ; uint8 bNeedsFinalize : 1 ; volatile bool bAsyncWorkOutstanding ; void)",
    "insertText": "CancelAutoAttachment(bool bDetachFromParent, const UWorld* MyWorld)"
  },
  {
    "label": "Editor_CanBeTickManaged()",
    "kind": "Method",
    "detail": "Function (int32 ManagerHandle : 3 0 ; int32 bPendingManagerAdd : 1 ; int32 bPendingManagerRemove : 1 ; public : # if WITH_EDITOR bool)",
    "insertText": "Editor_CanBeTickManaged()"
  },
  {
    "label": "GetManagerHandle()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetManagerHandle()"
  },
  {
    "label": "IsPendingManagerAdd()",
    "kind": "Method",
    "detail": "Function (ManagerHandle = InHandle ; } int32)",
    "insertText": "IsPendingManagerAdd()"
  },
  {
    "label": "IsPendingManagerRemove()",
    "kind": "Method",
    "detail": "Function (bPendingManagerAdd = bValue ; } int32)",
    "insertText": "IsPendingManagerRemove()"
  },
  {
    "label": "GetManagerTickData()",
    "kind": "Method",
    "detail": "Function (bPendingManagerRemove = bValue ; } FPSCTickData&)",
    "insertText": "GetManagerTickData()"
  },
  {
    "label": "GetWorldManager()",
    "kind": "Method",
    "detail": "Function (FParticleSystemWorldManager*)",
    "insertText": "GetWorldManager()"
  },
  {
    "label": "ResetNextTick()",
    "kind": "Method",
    "detail": "Function (TEnumAsByte<enum ParticleReplayState> ReplayState ; void)",
    "insertText": "ResetNextTick()"
  },
  {
    "label": "DeactivaateNextTick()",
    "kind": "Method",
    "detail": "Function (bResetTriggered = true ; } void)",
    "insertText": "DeactivaateNextTick()"
  },
  {
    "label": "SetAutoAttachmentParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoAttachmentParameters(USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule)"
  },
  {
    "label": "SetUseAutoManageAttachment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseAutoManageAttachment(bool bAutoManage)"
  },
  {
    "label": "SetRequiredSignificance()",
    "kind": "Method",
    "detail": "Function (private : TArray<struct FParticleSysParam> AsyncInstanceParameters ; TArray<FVector> PlayerLocations ; TArray<float> PlayerLODDistanceFactor ; FBoxSphereBounds AsyncBounds ; FVector AsyncPartSysVelocity ; FVector3f LWCTile = FVector3f::ZeroVector ; public : void)",
    "insertText": "SetRequiredSignificance(EParticleSignificanceLevel NewRequiredSignificance)"
  },
  {
    "label": "ShouldManageSignificance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldManageSignificance()"
  },
  {
    "label": "OnSignificanceChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSignificanceChanged(bool bSignificant, bool bApplyToEmitters, bool bAsync=false)"
  },
  {
    "label": "GetLWCTile()",
    "kind": "Method",
    "detail": "Function (bWasManagingSignificance = bIsManagingSignificance ; bIsManagingSignificance = bManageSignificance ; } const FVector3f&)",
    "insertText": "GetLWCTile()"
  },
  {
    "label": "CanConsiderInvisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanConsiderInvisible()"
  },
  {
    "label": "CanSkipTickDueToVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSkipTickDueToVisibility()"
  },
  {
    "label": "CanBeOccluded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeOccluded()"
  },
  {
    "label": "Complete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Complete()"
  },
  {
    "label": "GetAsyncInstanceParameters()",
    "kind": "Method",
    "detail": "Function (} const TArray<struct FParticleSysParam>&)",
    "insertText": "GetAsyncInstanceParameters()"
  },
  {
    "label": "SetEmitterEnable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEmitterEnable(FName EmitterName, bool bNewEnableState)"
  },
  {
    "label": "SetBoolParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoolParameter(FName ParameterName, bool Param)"
  },
  {
    "label": "SetIntParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIntParameter(FName ParameterName, int Param)"
  },
  {
    "label": "SetFloatParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFloatParameter(FName ParameterName, float Param)"
  },
  {
    "label": "SetVectorParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVectorParameter(FName ParameterName, FVector Param)"
  },
  {
    "label": "SetColorParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColorParameter(FName ParameterName, FLinearColor Param)"
  },
  {
    "label": "SetActorParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorParameter(FName ParameterName, class AActor* Param)"
  },
  {
    "label": "GetFXSystemAsset()",
    "kind": "Method",
    "detail": "Function (UFXSystemAsset*)",
    "insertText": "GetFXSystemAsset()"
  },
  {
    "label": "GetFloatParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFloatParameter(const FName InName, float& OutFloat)"
  },
  {
    "label": "GetVectorParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVectorParameter(const FName InName, FVector& OutVector)"
  },
  {
    "label": "GetAnyVectorParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAnyVectorParameter(const FName InName, FVector& OutVector)"
  },
  {
    "label": "GetColorParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetColorParameter(const FName InName, FLinearColor& OutColor)"
  },
  {
    "label": "GetActorParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetActorParameter(const FName InName, class AActor*& OutActor)"
  },
  {
    "label": "GetMaterialParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMaterialParameter(const FName InName, class UMaterialInterface*& OutMaterial)"
  },
  {
    "label": "ClearParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearParameter(FName ParameterName, enum EParticleSysParamType ParameterType = EParticleSysParamType(0))"
  },
  {
    "label": "GetOwnedTrailEmitters()",
    "kind": "Method",
    "detail": "Function (typedef TArray<struct FParticleAnimTrailEmitterInstance*,TInlineAllocator<8>> TrailEmitterArray ; void)",
    "insertText": "GetOwnedTrailEmitters(TrailEmitterArray& OutTrailEmitters, const void* InOwner, bool bSetOwner = false)"
  },
  {
    "label": "ReleaseToPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseToPool()"
  },
  {
    "label": "SetAsyncWork()",
    "kind": "Method",
    "detail": "Function (public : class FRenderCommandFence* ReleaseResourcesFence ; TArray<struct FParticleEmitterInstance*> EmitterInstances ; FOnSystemPreActivationChange OnSystemPreActivationChange ; FRandomStream RandomStream ; private : void)",
    "insertText": "SetAsyncWork(FGraphEventRef& InAsyncWork)"
  },
  {
    "label": "CheckForErrors()",
    "kind": "Method",
    "detail": "Function (AsyncWork = InAsyncWork ; } FTransform AsyncComponentToWorld ; FGraphEventRef AsyncWork ; float DeltaTimeTick ; int32 TotalActiveParticles ; uint32 NumSignificantEmitters ; uint32 TimeSinceLastTick ; public : # if WITH_EDITOR void)",
    "insertText": "CheckForErrors()"
  },
  {
    "label": "IsReadyForOwnerToAutoDestroy()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsReadyForOwnerToAutoDestroy()"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "AdditionalStatObject()",
    "kind": "Method",
    "detail": "Function (UObject const*)",
    "insertText": "AdditionalStatObject()"
  },
  {
    "label": "IsComponentTickEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComponentTickEnabled()"
  },
  {
    "label": "OnAttachmentChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAttachmentChanged()"
  },
  {
    "label": "OnChildAttached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChildAttached(USceneComponent* ChildComponent)"
  },
  {
    "label": "OnChildDetached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChildDetached(USceneComponent* ChildComponent)"
  },
  {
    "label": "OnEndOfFrameUpdateDuringTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndOfFrameUpdateDuringTick()"
  },
  {
    "label": "CreateRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "CreateRenderState_Concurrent(FRegisterComponentContext* Context)"
  },
  {
    "label": "SendRenderTransform_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderTransform_Concurrent()"
  },
  {
    "label": "DestroyRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRenderState_Concurrent()"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "SendRenderDynamicData_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderDynamicData_Concurrent()"
  },
  {
    "label": "ForceAsyncWorkCompletion()",
    "kind": "Method",
    "detail": "Function (public : enum EForceAsyncWorkCompletion { STALL,ENSURE_AND_STALL,SILENT,} ; void)",
    "insertText": "ForceAsyncWorkCompletion(EForceAsyncWorkCompletion Behavior, bool bDefinitelyGameThread, bool InSkipUpdateDynamicDataDuringTick)"
  },
  {
    "label": "WaitForAsyncAndFinalize()",
    "kind": "Method",
    "detail": "Function (const bool bSavedSkipUpdate = bSkipUpdateDynamicDataDuringTick ; bSkipUpdateDynamicDataDuringTick | = InSkipUpdateDynamicDataDuringTick ;)",
    "insertText": "WaitForAsyncAndFinalize(Behavior, bDefinitelyGameThread)"
  },
  {
    "label": "ForceAsyncWorkCompletion()",
    "kind": "Method",
    "detail": "Function (bSkipUpdateDynamicDataDuringTick = bSavedSkipUpdate ; } } void)",
    "insertText": "ForceAsyncWorkCompletion(EForceAsyncWorkCompletion Behavior, bool bDefinitelyGameThread = true)"
  },
  {
    "label": "GetCurrentDetailMode()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "GetCurrentDetailMode()"
  },
  {
    "label": "ComputeTickComponent_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeTickComponent_Concurrent()"
  },
  {
    "label": "FinalizeTickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeTickComponent()"
  },
  {
    "label": "ForceReset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceReset()"
  },
  {
    "label": "MarshalParamsForAsyncTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarshalParamsForAsyncTick()"
  },
  {
    "label": "WaitForAsyncAndFinalize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "WaitForAsyncAndFinalize(EForceAsyncWorkCompletion Behavior, bool bDefinitelyGameThread = true)"
  },
  {
    "label": "CacheViewRelevanceFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheViewRelevanceFlags(class UParticleSystem* TemplateToCache)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "PreEditChange()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PreEditChange(FProperty* PropertyThatWillChange)"
  },
  {
    "label": "PostEditChangeChainProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeChainProperty(FPropertyChangedChainEvent& PropertyChangedEvent)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "GetDetailedInfoInternal()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDetailedInfoInternal()"
  },
  {
    "label": "GetNumMaterials()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumMaterials()"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterial(int32 ElementIndex)"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterial(int32 ElementIndex, UMaterialInterface* Material)"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "GetUsedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedMaterials(TArray<UMaterialInterface*>& OutMaterials, bool bGetDebugMaterials = false)"
  },
  {
    "label": "GetStreamingRenderAssetInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStreamingRenderAssetInfo(FStreamingTextureLevelContext& LevelContext, TArray<FStreamingRenderAssetPrimitiveInfo>& OutStreamingRenderAssets)"
  },
  {
    "label": "GetBodyInstance()",
    "kind": "Method",
    "detail": "Function (FBodyInstance*)",
    "insertText": "GetBodyInstance(FName BoneName = NAME_None, bool bGetWelded = true, int32 Index = INDEX_NONE)"
  },
  {
    "label": "ShouldActivate()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ShouldActivate()"
  },
  {
    "label": "GetMaterialPropertyPath()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR bool)",
    "insertText": "GetMaterialPropertyPath(int32 ElementIndex, UObject*& OutOwner, FString& OutPropertyPath, FProperty*& OutProperty)"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Activate(bool bReset=false)"
  },
  {
    "label": "Deactivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deactivate()"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset, bool bWorldShift)"
  },
  {
    "label": "ActivateSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateSystem(bool bFlagAsJustAttached = false)"
  },
  {
    "label": "DeactivateSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateSystem()"
  },
  {
    "label": "ParticleLineCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParticleLineCheck(FHitResult& Hit, AActor* SourceActor, const FVector& End, const FVector& Start, const FVector& HalfExtent, const FCollisionObjectQueryParams& ObjectParams)"
  },
  {
    "label": "ComputeCanTickInAnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeCanTickInAnyThread()"
  },
  {
    "label": "GetMaterialByName()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterialByName(FName MaterialSlotName)"
  },
  {
    "label": "SetMaterialByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialByName(FName MaterialSlotName, class UMaterialInterface* SourceMaterial)"
  },
  {
    "label": "GetNamedMaterialIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNamedMaterialIndex(FName InName)"
  },
  {
    "label": "GetNameForMaterial()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetNameForMaterial(UMaterialInterface* InMaterial)"
  },
  {
    "label": "UpdateLODInformation()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateLODInformation()"
  },
  {
    "label": "CreateDynamicDataFromReplay()",
    "kind": "Method",
    "detail": "Function (FDynamicEmitterDataBase*)",
    "insertText": "CreateDynamicDataFromReplay(FParticleEmitterInstance* EmitterInstance, const FDynamicEmitterReplayDataBase* EmitterReplayData, bool bSelected, ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "CreateDynamicData()",
    "kind": "Method",
    "detail": "Function (FParticleDynamicData*)",
    "insertText": "CreateDynamicData(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "OrientZAxisTowardCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OrientZAxisTowardCamera()"
  },
  {
    "label": "ClearDynamicData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDynamicData()"
  },
  {
    "label": "UpdateDynamicData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDynamicData()"
  },
  {
    "label": "GetCurrentLODIndex()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "GetCurrentLODIndex()"
  },
  {
    "label": "ResetParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetParticles(bool bEmptyInstances = false)"
  },
  {
    "label": "ResetBurstLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetBurstLists()"
  },
  {
    "label": "UpdateInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInstances(bool bEmptyInstances = false)"
  },
  {
    "label": "HasCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCompleted()"
  },
  {
    "label": "InitializeSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSystem()"
  },
  {
    "label": "ConditionalCacheViewRelevanceFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalCacheViewRelevanceFlags(class UParticleSystem* NewTemplate = NULL)"
  },
  {
    "label": "AutoPopulateInstanceProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoPopulateInstanceProperties()"
  },
  {
    "label": "ReportEventSpawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportEventSpawn(const FName InEventName, const float InEmitterTime, const FVector InLocation, const FVector InVelocity, const TArray<class UParticleModuleEventSendToGame*>& InEventData)"
  },
  {
    "label": "ReportEventDeath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportEventDeath(const FName InEventName, const float InEmitterTime, const FVector InLocation, const FVector InVelocity, const TArray<class UParticleModuleEventSendToGame*>& InEventData, const float InParticleTime)"
  },
  {
    "label": "ReportEventCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportEventCollision(const FName InEventName, const float InEmitterTime, const FVector InLocation, const FVector InDirection, const FVector InVelocity, const TArray<class UParticleModuleEventSendToGame*>& InEventData, const float InParticleTime, const FVector InNormal, const float InTime, const int32 InItem, const FName InBoneName, UPhysicalMaterial* PhysMat)"
  },
  {
    "label": "ReportEventBurst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportEventBurst(const FName InEventName, const float InEmitterTime, const int32 ParticleCount, const FVector InLocation, const TArray<class UParticleModuleEventSendToGame*>& InEventData)"
  },
  {
    "label": "FindReplayClipForIDNumber()",
    "kind": "Method",
    "detail": "Function (UParticleSystemReplay*)",
    "insertText": "FindReplayClipForIDNumber(const int32 InClipIDNumber)"
  },
  {
    "label": "KillParticlesForced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KillParticlesForced()"
  },
  {
    "label": "SetVectorRandParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVectorRandParameter(FName ParameterName, const FVector& Param, const FVector& ParamLow)"
  },
  {
    "label": "SetVectorUnitRandParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVectorUnitRandParameter(FName ParameterName, const FVector& Param, const FVector& ParamLow)"
  },
  {
    "label": "SetFloatRandParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFloatRandParameter(FName ParameterName, float Param, float ParamLow)"
  },
  {
    "label": "ForceUpdateBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceUpdateBounds()"
  },
  {
    "label": "RewindEmitterInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RewindEmitterInstances()"
  },
  {
    "label": "DetermineLODLevelForLocation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DetermineLODLevelForLocation(const FVector& EffectLocation)"
  },
  {
    "label": "SetLODLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLODLevel(int32 InLODLevel)"
  },
  {
    "label": "GetLODLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLODLevel()"
  },
  {
    "label": "ResetToDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToDefaults()"
  },
  {
    "label": "ShouldComputeLODFromGameThread()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ShouldComputeLODFromGameThread()"
  },
  {
    "label": "GetPerfStatsContext()",
    "kind": "Method",
    "detail": "Function (public : FParticlePerfStatsContext)",
    "insertText": "GetPerfStatsContext()"
  },
  {
    "label": "SetAutoAttachParams()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "SetAutoAttachParams(USceneComponent* Parent, FName SocketName, EAttachLocation::Type LocationType)"
  },
  {
    "label": "ConvertAttachLocation()",
    "kind": "Method",
    "detail": "Function (AutoAttachParent = Parent ; AutoAttachSocketName = SocketName ;)",
    "insertText": "ConvertAttachLocation(LocationType, AutoAttachLocationRule, AutoAttachRotationRule, AutoAttachScaleRule)"
  }
]