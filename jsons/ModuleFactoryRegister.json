[
  {
    "label": "FModuleNetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleNetData"
  },
  {
    "label": "IFactoryModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFactoryModule"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "TSimulationModuleTypeable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSimulationModuleTypeable"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" SimulationModuleBase . h \" # include \" Templates / SharedPointer . h \" # include \" Hash / CityHash . h \" namespace Chaos { struct FModuleNetData ; class IFactoryModule ; class FModuleFactoryRegister { public : FModuleFactoryRegister&)",
    "insertText": "Get()"
  },
  {
    "label": "RegisterFactory()",
    "kind": "Method",
    "detail": "Function (FModuleFactoryRegister Instance ; return Instance ; } void)",
    "insertText": "RegisterFactory(const FName TypeName, TWeakPtr<IFactoryModule> InFactory)"
  },
  {
    "label": "RegisterFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterFactory(const uint32 TypeNameHash, TWeakPtr<IFactoryModule> InFactory)"
  },
  {
    "label": "RemoveFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFactory(TWeakPtr<IFactoryModule> InFactory)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ContainsFactory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsFactory(const FName TypeName)"
  },
  {
    "label": "ContainsFactory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsFactory(const uint32 TypeNameHash)"
  },
  {
    "label": "GenerateNetData()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<Chaos::FModuleNetData>)",
    "insertText": "GenerateNetData(const uint32 TypeNameHash, const int32 SimArrayIndex)"
  },
  {
    "label": "GetModuleHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetModuleHash(const FName TypeName)"
  },
  {
    "label": "CityHash32()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "CityHash32((const char*)TypeName.ToString().GetCharArray().GetData(), sizeof(FString::ElementType) * TypeName.GetStringLength())"
  },
  {
    "label": "RegisterFactoryHelper()",
    "kind": "Method",
    "detail": "Function (TMap<int32,TWeakPtr<IFactoryModule>> RegisteredFactoriesByName ; } ; template<_To,. . . _Rest> class TSimulationModuleTypeable ; template<T,. . . Args> bool)",
    "insertText": "RegisterFactoryHelper(Args... args)"
  },
  {
    "label": "StaticSimType()",
    "kind": "Method",
    "detail": "Function (FName SimTypeName =)",
    "insertText": "StaticSimType()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().RegisterFactory(SimTypeNameHash, SharedFactory)"
  }
]