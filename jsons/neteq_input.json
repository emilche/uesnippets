[
  {
    "label": "NetEqInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqInput"
  },
  {
    "label": "PacketData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketData"
  },
  {
    "label": "TimeLimitedNetEqInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeLimitedNetEqInput"
  },
  {
    "label": "PacketData()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_INPUT_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_INPUT_H_ # include<algorithm> # include<memory> # include<string> # include \" absl / types / optional . h \" # include \" modules / audio_coding / neteq / tools / packet . h \" # include \" modules / audio_coding / neteq / tools / packet_source . h \" # include \" rtc_base / buffer . h \" namespace webrtc { namespace test { class NetEqInput { public : struct PacketData {)",
    "insertText": "PacketData()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "NetEqInput()",
    "kind": "Method",
    "detail": "Function (RTPHeader header ; rtc::Buffer payload ; int64_t time_ms ; } ; ~)",
    "insertText": "NetEqInput()"
  },
  {
    "label": "NextPacketTime()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "NextPacketTime()"
  },
  {
    "label": "NextOutputEventTime()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "NextOutputEventTime()"
  },
  {
    "label": "NextEventTime()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "NextEventTime()"
  },
  {
    "label": "PopPacket()",
    "kind": "Method",
    "detail": "Function (} return b ? b : absl::nullopt ; } std::unique_ptr<PacketData>)",
    "insertText": "PopPacket()"
  },
  {
    "label": "AdvanceOutputEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceOutputEvent()"
  },
  {
    "label": "ended()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ended()"
  },
  {
    "label": "NextHeader()",
    "kind": "Method",
    "detail": "Function (absl::optional<RTPHeader>)",
    "insertText": "NextHeader()"
  },
  {
    "label": "TimeLimitedNetEqInput()",
    "kind": "Method",
    "detail": "Function (} ; class TimeLimitedNetEqInput : public NetEqInput { public :)",
    "insertText": "TimeLimitedNetEqInput(std::unique_ptr<NetEqInput> input, int64_t duration_ms)"
  },
  {
    "label": "TimeLimitedNetEqInput()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TimeLimitedNetEqInput()"
  },
  {
    "label": "MaybeSetEnded()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "MaybeSetEnded()"
  }
]