[
  {
    "label": "dtQuerySpecialLinkFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtQuerySpecialLinkFilter"
  },
  {
    "label": "dtQueryFilterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtQueryFilterData"
  },
  {
    "label": "dtQueryFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtQueryFilter"
  },
  {
    "label": "dtQueryResultPack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtQueryResultPack"
  },
  {
    "label": "dtQueryResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtQueryResult"
  },
  {
    "label": "dtNavMeshQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtNavMeshQuery"
  },
  {
    "label": "dtNodePool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtNodePool"
  },
  {
    "label": "dtNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtNode"
  },
  {
    "label": "dtQueryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtQueryData"
  },
  {
    "label": "dtNodeQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtNodeQueue"
  },
  {
    "label": "dtQuerySpecialLinkFilter()",
    "kind": "Method",
    "detail": "Function (# ifndef DETOURNAVMESHQUERY_H # define DETOURNAVMESHQUERY_H # include \" CoreMinimal . h \" # include \" Detour / DetourAlloc . h \" # include \" Detour / DetourCommon . h \" # include \" Detour / DetourLargeWorldCoordinates . h \" # include \" Detour / DetourNavMesh . h \" # include \" Detour / DetourStatus . h \" # include \" Misc / AssertionMacros . h \" # define WITH_FIXED_AREA_ENTERING_COST 1 # define DT_UNWALKABLE_POLY_COST FLT_MAX struct dtQuerySpecialLinkFilter { ~)",
    "insertText": "dtQuerySpecialLinkFilter()"
  },
  {
    "label": "isLinkAllowed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLinkAllowed(const unsigned long long int UserId)"
  },
  {
    "label": "dtQueryFilterData()",
    "kind": "Method",
    "detail": "Function (} } ; struct dtQueryFilterData { dtReal m_areaCost [ DT_MAX_AREAS ] ; # if WITH_FIXED_AREA_ENTERING_COST dtReal m_areaFixedCost [ DT_MAX_AREAS ] ; # endif dtReal heuristicScale ; dtReal lowestAreaCost ; unsigned short m_includeFlags ; unsigned short m_excludeFlags ; bool m_isBacktracking ; bool m_shouldIgnoreClosedNodes ;)",
    "insertText": "dtQueryFilterData()"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equals(const dtQueryFilterData* other)"
  },
  {
    "label": "copyFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyFrom(const dtQueryFilterData* source)"
  },
  {
    "label": "dtQueryFilter()",
    "kind": "Method",
    "detail": "Function (} ; class dtQueryFilter { protected : dtQueryFilterData data ; bool isVirtual ; public :)",
    "insertText": "dtQueryFilter(bool inIsVirtual = true) : isVirtual(inIsVirtual)"
  },
  {
    "label": "dtQueryFilter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "dtQueryFilter()"
  },
  {
    "label": "passInlineFilter()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "passInlineFilter(const dtPolyRef ref, const dtMeshTile* tile, const dtPoly* poly)"
  },
  {
    "label": "passVirtualFilter()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "passVirtualFilter(const dtPolyRef ref, const dtMeshTile* tile, const dtPoly* poly)"
  },
  {
    "label": "getIsVirtual()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "getIsVirtual()"
  },
  {
    "label": "getInlineCost()",
    "kind": "Method",
    "detail": "Function (} protected : dtReal)",
    "insertText": "getInlineCost(const dtReal* pa, const dtReal* pb, const dtPolyRef prevRef, const dtMeshTile* prevTile, const dtPoly* prevPoly, const dtPolyRef curRef, const dtMeshTile* curTile, const dtPoly* curPoly, const dtPolyRef nextRef, const dtMeshTile* nextTile, const dtPoly* nextPoly)"
  },
  {
    "label": "getArea()",
    "kind": "Method",
    "detail": "Function (# if WITH_FIXED_AREA_ENTERING_COST const dtReal areaChangeCost = nextPoly ! = 0&& nextPoly ->)",
    "insertText": "getArea() != curPoly->getArea() ? data.m_areaFixedCost[nextPoly->getArea()"
  },
  {
    "label": "dtVdist()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "dtVdist(pa, pb) * data.m_areaCost[curPoly->getArea()"
  },
  {
    "label": "getVirtualCost()",
    "kind": "Method",
    "detail": "Function (# endif } dtReal)",
    "insertText": "getVirtualCost(const dtReal* pa, const dtReal* pb, const dtPolyRef prevRef, const dtMeshTile* prevTile, const dtPoly* prevPoly, const dtPolyRef curRef, const dtMeshTile* curTile, const dtPoly* curPoly, const dtPolyRef nextRef, const dtMeshTile* nextTile, const dtPoly* nextPoly)"
  },
  {
    "label": "getVirtualCost()",
    "kind": "Method",
    "detail": "Function (} # if ! DT_LARGE_WORLD_COORDINATES_DISABLED float)",
    "insertText": "getVirtualCost(const float* pa, const float* pb, const dtPolyRef prevRef, const dtMeshTile* prevTile, const dtPoly* prevPoly, const dtPolyRef curRef, const dtMeshTile* curTile, const dtPoly* curPoly, const dtPolyRef nextRef, const dtMeshTile* nextTile, const dtPoly* nextPoly)"
  },
  {
    "label": "getAreaCost()",
    "kind": "Method",
    "detail": "Function (} dtReal)",
    "insertText": "getAreaCost(const int i)"
  },
  {
    "label": "dtMin()",
    "kind": "Method",
    "detail": "Function (data . m_areaCost [ i ] = cost ; data . lowestAreaCost =)",
    "insertText": "dtMin(data.lowestAreaCost, cost)"
  },
  {
    "label": "getAllAreaCosts()",
    "kind": "Method",
    "detail": "Function (} const dtReal*)",
    "insertText": "getAllAreaCosts()"
  },
  {
    "label": "getAllFixedAreaCosts()",
    "kind": "Method",
    "detail": "Function (data . m_areaFixedCost [ i ] = cost ; } const dtReal*)",
    "insertText": "getAllFixedAreaCosts()"
  },
  {
    "label": "getHeuristicScale()",
    "kind": "Method",
    "detail": "Function (} dtReal)",
    "insertText": "getHeuristicScale()"
  },
  {
    "label": "isValidLinkSide()",
    "kind": "Method",
    "detail": "Function (data . heuristicScale = newScale ; } bool)",
    "insertText": "isValidLinkSide(const unsigned char side)"
  },
  {
    "label": "setIsBacktracking()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setIsBacktracking(const bool isBacktracking)"
  },
  {
    "label": "getIsBacktracking()",
    "kind": "Method",
    "detail": "Function (data . m_isBacktracking = isBacktracking ; } bool)",
    "insertText": "getIsBacktracking()"
  },
  {
    "label": "getShouldIgnoreClosedNodes()",
    "kind": "Method",
    "detail": "Function (data . m_shouldIgnoreClosedNodes = shouldIgnore ; } bool)",
    "insertText": "getShouldIgnoreClosedNodes()"
  },
  {
    "label": "getExcludeFlags()",
    "kind": "Method",
    "detail": "Function (data . m_includeFlags = flags ; } unsigned short)",
    "insertText": "getExcludeFlags()"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (data . m_excludeFlags = flags ; } bool)",
    "insertText": "equals(const dtQueryFilter* other)"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "equals(const dtQueryFilter& other)"
  },
  {
    "label": "copyFrom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "copyFrom(const dtQueryFilter* other)"
  },
  {
    "label": "copyFrom()",
    "kind": "Method",
    "detail": "Function (data .)",
    "insertText": "copyFrom(&(other->data))"
  },
  {
    "label": "copyFrom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "copyFrom(const dtQueryFilter& other)"
  },
  {
    "label": "copyFrom()",
    "kind": "Method",
    "detail": "Function (data .)",
    "insertText": "copyFrom(&(other.data))"
  },
  {
    "label": "dtQueryResultPack()",
    "kind": "Method",
    "detail": "Function (} } ; struct dtQueryResultPack { dtPolyRef ref ; dtReal cost ; dtReal pos [ 3 ] ; unsigned int flag ;)",
    "insertText": "dtQueryResultPack() : ref(0), cost(0), flag(0)"
  },
  {
    "label": "dtQueryResultPack()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "dtQueryResultPack(dtPolyRef inRef, dtReal inCost, const dtReal* inPos, unsigned int inFlag)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (} ; struct dtQueryResult { void)",
    "insertText": "reserve(int n)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (data .)",
    "insertText": "resize(n)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (data .)",
    "insertText": "resize(0)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "size()"
  },
  {
    "label": "getRef()",
    "kind": "Method",
    "detail": "Function (} dtPolyRef)",
    "insertText": "getRef(int idx)"
  },
  {
    "label": "copyRefs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyRefs(dtPolyRef* refs, int nmax)"
  },
  {
    "label": "copyCosts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyCosts(dtReal* costs, int nmax)"
  },
  {
    "label": "copyPos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyPos(dtReal* pos, int nmax)"
  },
  {
    "label": "copyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyFlags(unsigned char* flags, int nmax)"
  },
  {
    "label": "copyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyFlags(unsigned int* flags, int nmax)"
  },
  {
    "label": "addItem()",
    "kind": "Method",
    "detail": "Function (protected : dtChunkArray<dtQueryResultPack> data ; int)",
    "insertText": "addItem(dtPolyRef ref, dtReal cost, const dtReal* pos, unsigned int flag)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (data .)",
    "insertText": "push(dtQueryResultPack(ref, cost, pos, flag))"
  },
  {
    "label": "setRef()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setRef(int idx, dtPolyRef ref)"
  },
  {
    "label": "setCost()",
    "kind": "Method",
    "detail": "Function (data [ idx ] . ref = ref ; } void)",
    "insertText": "setCost(int idx, dtReal cost)"
  },
  {
    "label": "setFlag()",
    "kind": "Method",
    "detail": "Function (data [ idx ] . cost = cost ; } void)",
    "insertText": "setFlag(int idx, unsigned int flag)"
  },
  {
    "label": "setPos()",
    "kind": "Method",
    "detail": "Function (data [ idx ] . flag = flag ; } void)",
    "insertText": "setPos(int idx, const dtReal* pos)"
  },
  {
    "label": "dtNavMeshQuery()",
    "kind": "Method",
    "detail": "Function (class dtNavMeshQuery ; } ; class dtNavMeshQuery { public :)",
    "insertText": "dtNavMeshQuery()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "init(const dtNavMesh* nav, const int maxNodes, dtQuerySpecialLinkFilter* linkFilter = 0)"
  },
  {
    "label": "updateLinkFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateLinkFilter(dtQuerySpecialLinkFilter* linkFilter)"
  },
  {
    "label": "findPath()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findPath(dtPolyRef startRef, dtPolyRef endRef, const dtReal* startPos, const dtReal* endPos, const dtReal costLimit, const dtQueryFilter* filter, dtQueryResult& result, dtReal* totalCost)"
  },
  {
    "label": "findStraightPath()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findStraightPath(const dtReal* startPos, const dtReal* endPos, const dtPolyRef* path, const int pathSize, dtQueryResult& result, const int options = 0)"
  },
  {
    "label": "initSlicedFindPath()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "initSlicedFindPath(dtPolyRef startRef, dtPolyRef endRef, const dtReal* startPos, const dtReal* endPos, const dtReal costLimit, const bool requireNavigableEndLocation, const dtQueryFilter* filter)"
  },
  {
    "label": "updateSlicedFindPath()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "updateSlicedFindPath(const int maxIter, int* doneIters)"
  },
  {
    "label": "finalizeSlicedFindPath()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "finalizeSlicedFindPath(dtPolyRef* path, int* pathCount, const int maxPath)"
  },
  {
    "label": "finalizeSlicedFindPathPartial()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "finalizeSlicedFindPathPartial(const dtPolyRef* existing, const int existingSize, dtPolyRef* path, int* pathCount, const int maxPath)"
  },
  {
    "label": "findPolysAroundCircle()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findPolysAroundCircle(dtPolyRef startRef, const dtReal* centerPos, const dtReal radius, const dtQueryFilter* filter, dtPolyRef* resultRef, dtPolyRef* resultParent, dtReal* resultCost, int* resultCount, const int maxResult)"
  },
  {
    "label": "findPolysAroundShape()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findPolysAroundShape(dtPolyRef startRef, const dtReal* verts, const int nverts, const dtQueryFilter* filter, dtPolyRef* resultRef, dtPolyRef* resultParent, dtReal* resultCost, int* resultCount, const int maxResult)"
  },
  {
    "label": "findPolysInPathDistance()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findPolysInPathDistance(dtPolyRef startRef, const dtReal* centerPos, const dtReal pathDistance, const dtQueryFilter* filter, dtPolyRef* resultRef, int* resultCount, const int maxResult)"
  },
  {
    "label": "findNearestPoly()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findNearestPoly(const dtReal* center, const dtReal* extents, const dtQueryFilter* filter, dtPolyRef* nearestRef, dtReal* nearestPt, const dtReal* referencePt = 0)"
  },
  {
    "label": "findNearestPoly2D()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findNearestPoly2D(const dtReal* center, const dtReal* extents, const dtQueryFilter* filter, dtPolyRef* outProjectedRef, dtReal* outProjectedPt, const dtReal* referencePt = 0, dtReal tolerance = 0)"
  },
  {
    "label": "findNearestContainingPoly()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findNearestContainingPoly(const dtReal* center, const dtReal* extents, const dtQueryFilter* filter, dtPolyRef* nearestRef, dtReal* nearestPt)"
  },
  {
    "label": "queryPolygons()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "queryPolygons(const dtReal* center, const dtReal* extents, const dtQueryFilter* filter, dtPolyRef* polys, int* polyCount, const int maxPolys)"
  },
  {
    "label": "findLocalNeighbourhood()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findLocalNeighbourhood(dtPolyRef startRef, const dtReal* centerPos, const dtReal radius, const dtQueryFilter* filter, dtPolyRef* resultRef, dtPolyRef* resultParent, int* resultCount, const int maxResult)"
  },
  {
    "label": "findWallsInNeighbourhood()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findWallsInNeighbourhood(dtPolyRef startRef, const dtReal* centerPos, const dtReal radius, const dtQueryFilter* filter, dtPolyRef* neiRefs, int* neiCount, const int maxNei, dtReal* resultWalls, dtPolyRef* resultRefs, int* resultCount, const int maxResult)"
  },
  {
    "label": "findWallsOverlappingShape()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findWallsOverlappingShape(dtPolyRef startRef, const dtReal* verts, const int nverts, const dtQueryFilter* filter, dtPolyRef* neiRefs, int* neiCount, const int maxNei, dtReal* resultWalls, dtPolyRef* resultRefs, int* resultCount, const int maxResult)"
  },
  {
    "label": "findWallsAroundPath()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findWallsAroundPath(const dtPolyRef* path, const int pathCount, const dtReal* searchAreaPoly, const int searchAreaPolyCount, const dtReal maxAreaEnterCost, const dtQueryFilter* filter, dtPolyRef* neiRefs, int* neiCount, const int maxNei, dtReal* resultWalls, dtPolyRef* resultRefs, int* resultCount, const int maxResult)"
  },
  {
    "label": "moveAlongSurface()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "moveAlongSurface(dtPolyRef startRef, const dtReal* startPos, const dtReal* endPos, const dtQueryFilter* filter, dtReal* resultPos, dtPolyRef* visited, int* visitedCount, const int maxVisitedSize)"
  },
  {
    "label": "raycast()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "raycast(dtPolyRef startRef, const dtReal* startPos, const dtReal* endPos, const dtQueryFilter* filter, dtReal* t, dtReal* hitNormal, dtPolyRef* path, int* pathCount, const int maxPath)"
  },
  {
    "label": "findDistanceToWall()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findDistanceToWall(dtPolyRef startRef, const dtReal* centerPos, const dtReal maxRadius, const dtQueryFilter* filter, dtReal* hitDist, dtReal* hitPos, dtReal* hitNormal)"
  },
  {
    "label": "getPolyWallSegments()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "getPolyWallSegments(dtPolyRef ref, const dtQueryFilter* filter, dtReal* segmentVerts, dtPolyRef* segmentRefs, int* segmentCount, const int maxSegments)"
  },
  {
    "label": "findRandomPoint()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findRandomPoint(const dtQueryFilter* filter, float(*frand)(), dtPolyRef* randomRef, dtReal* randomPt)"
  },
  {
    "label": "findRandomPointAroundCircle()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findRandomPointAroundCircle(dtPolyRef startRef, const dtReal* centerPos, const dtReal maxRadius, const dtQueryFilter* filter, float(*frand)(), dtPolyRef* randomRef, dtReal* randomPt)"
  },
  {
    "label": "findRandomPointInPoly()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findRandomPointInPoly(dtPolyRef ref, float(*frand)(), dtReal* randomPt)"
  },
  {
    "label": "testClusterPath()",
    "kind": "Method",
    "detail": "Function (# if WITH_NAVMESH_CLUSTER_LINKS dtStatus)",
    "insertText": "testClusterPath(dtPolyRef startRef, dtPolyRef endRef)"
  },
  {
    "label": "findRandomPointInCluster()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "findRandomPointInCluster(dtClusterRef clusterRef, float(*frand)(), dtPolyRef* randomRef, dtReal* randomPt)"
  },
  {
    "label": "getPolyCluster()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "getPolyCluster(dtPolyRef polyRef, dtClusterRef& clusterRef)"
  },
  {
    "label": "closestPointOnPoly()",
    "kind": "Method",
    "detail": "Function (# endif dtStatus)",
    "insertText": "closestPointOnPoly(dtPolyRef ref, const dtReal* pos, dtReal* closest)"
  },
  {
    "label": "closestPointOnPolyBoundary()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "closestPointOnPolyBoundary(dtPolyRef ref, const dtReal* pos, dtReal* closest)"
  },
  {
    "label": "projectedPointOnPoly()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "projectedPointOnPoly(dtPolyRef ref, const dtReal* pos, dtReal* projected)"
  },
  {
    "label": "isPointInsidePoly()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "isPointInsidePoly(dtPolyRef ref, const dtReal* pos, bool& result)"
  },
  {
    "label": "getPolyHeight()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "getPolyHeight(dtPolyRef ref, const dtReal* pos, dtReal* height)"
  },
  {
    "label": "isValidPolyRef()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValidPolyRef(dtPolyRef ref, const dtQueryFilter* filter)"
  },
  {
    "label": "isInClosedList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isInClosedList(dtPolyRef ref)"
  },
  {
    "label": "wasClusterLinkSearched()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "wasClusterLinkSearched(dtPolyRef cFrom, dtPolyRef cTo)"
  },
  {
    "label": "getNodePool()",
    "kind": "Method",
    "detail": "Function (class dtNodePool*)",
    "insertText": "getNodePool()"
  },
  {
    "label": "getQueryNodes()",
    "kind": "Method",
    "detail": "Function (bestNode = m_query . lastBestNode ; bestCost = m_query . lastBestNodeCost ; } int)",
    "insertText": "getQueryNodes()"
  },
  {
    "label": "queryPolygonsInTile()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "queryPolygonsInTile(const dtMeshTile* tile, const dtReal* qmin, const dtReal* qmax, const dtQueryFilter* filter, dtPolyRef* polys, const int maxPolys)"
  },
  {
    "label": "findNearestPolyInTile()",
    "kind": "Method",
    "detail": "Function (dtPolyRef)",
    "insertText": "findNearestPolyInTile(const dtMeshTile* tile, const dtReal* center, const dtReal* extents, const dtQueryFilter* filter, dtReal* nearestPt)"
  },
  {
    "label": "closestPointOnPolyInTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "closestPointOnPolyInTile(const dtMeshTile* tile, const dtPoly* poly, const dtReal* pos, dtReal* closest)"
  },
  {
    "label": "projectedPointOnPolyInTile()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "projectedPointOnPolyInTile(const dtMeshTile* tile, const dtPoly* poly, const dtReal* pos, dtReal* projected)"
  },
  {
    "label": "dtApplyEpsilon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtApplyEpsilon(dtReal* extents)"
  },
  {
    "label": "getPortalPoints()",
    "kind": "Method",
    "detail": "Function (public : dtStatus)",
    "insertText": "getPortalPoints(dtPolyRef from, dtPolyRef to, dtReal* left, dtReal* right, unsigned char& fromType, unsigned char& toType)"
  },
  {
    "label": "getPortalPoints()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "getPortalPoints(dtPolyRef from, const dtPoly* fromPoly, const dtMeshTile* fromTile, dtPolyRef to, const dtPoly* toPoly, const dtMeshTile* toTile, dtReal* left, dtReal* right)"
  },
  {
    "label": "getEdgeMidPoint()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "getEdgeMidPoint(dtPolyRef from, dtPolyRef to, dtReal* mid)"
  },
  {
    "label": "getEdgeMidPoint()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "getEdgeMidPoint(dtPolyRef from, const dtPoly* fromPoly, const dtMeshTile* fromTile, dtPolyRef to, const dtPoly* toPoly, const dtMeshTile* toTile, dtReal* mid)"
  },
  {
    "label": "appendVertex()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "appendVertex(const dtReal* pos, const unsigned char flags, const dtPolyRef ref, dtQueryResult& result, const bool bOverrideIdenticalPosition = true)"
  },
  {
    "label": "appendPortals()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "appendPortals(const int startIdx, const int endIdx, const dtReal* endPos, const dtPolyRef* path, dtQueryResult& result, const int options)"
  },
  {
    "label": "passLinkFilterByRef()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "passLinkFilterByRef(const dtMeshTile* tile, const dtPolyRef ref)"
  },
  {
    "label": "passLinkFilter()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "passLinkFilter(const dtMeshTile* tile, const int polyIdx)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const int linkIdx = polyIdx - tile -> header -> offMeshBase ;)",
    "insertText": "return(m_linkFilter && polyIdx >= tile->header->offMeshBase && linkIdx < tile->header->offMeshConCount && tile->offMeshCons[linkIdx].userId != 0 && m_linkFilter->isLinkAllowed(tile->offMeshCons[linkIdx].userId) == false)"
  },
  {
    "label": "setRequireNavigableEndLocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setRequireNavigableEndLocation(const bool value)"
  },
  {
    "label": "isRequiringNavigableEndLocation()",
    "kind": "Method",
    "detail": "Function (m_query . requireNavigableEndLocation = value ; } bool)",
    "insertText": "isRequiringNavigableEndLocation()"
  },
  {
    "label": "dtFreeNavMeshQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFreeNavMeshQuery(dtNavMeshQuery* query)"
  }
]