[
  {
    "label": "NeedsLazyInstance()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_LAZY_INSTANCE_HELPERS_H_ # define BASE_LAZY_INSTANCE_HELPERS_H_ # include<atomic> # include<cstdint> # include \" base / base_export . h \" # include \" base / check . h \" namespace base { namespace internal { uintptr_t kLazyInstanceStateCreating = 1 ; BASE_EXPORT bool)",
    "insertText": "NeedsLazyInstance(std::atomic<uintptr_t>& state)"
  },
  {
    "label": "CompleteLazyInstance()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "CompleteLazyInstance(std::atomic<uintptr_t>& state, uintptr_t new_instance, void (*destructor)(void*), void* destructor_arg)"
  },
  {
    "label": "GetOrCreateLazyPointer()",
    "kind": "Method",
    "detail": "Function (} namespace subtle { template<Type> Type*)",
    "insertText": "GetOrCreateLazyPointer(std::atomic<uintptr_t>& state, Type* (*creator_func)(void*), void* creator_arg, void (*destructor)(void*), void* destructor_arg)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(creator_func)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (uintptr_t kLazyInstanceCreatedMask = ~ internal::kLazyInstanceStateCreating ; uintptr_t instance = state .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (instance = reinterpret_cast<)",
    "insertText": "uintptr_t((*creator_func)(creator_arg))"
  },
  {
    "label": "CompleteLazyInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteLazyInstance(state, instance, destructor, destructor_arg)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(instance & kLazyInstanceCreatedMask)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (} } return reinterpret_cast<)",
    "insertText": "Type(instance)"
  }
]