[
  {
    "label": "FFrameNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameNumber"
  },
  {
    "label": "FMovieSceneSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSegment"
  },
  {
    "label": "TRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRange"
  },
  {
    "label": "FDefaultTrackRowSegmentBlender",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDefaultTrackRowSegmentBlender"
  },
  {
    "label": "FEvaluateNearestSegmentBlender",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEvaluateNearestSegmentBlender"
  },
  {
    "label": "FMovieSceneAdditiveCameraTrackBlender",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneAdditiveCameraTrackBlender"
  },
  {
    "label": "EvaluateNearestSegment()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Compilation / MovieSceneSegmentCompiler . h \" # include \" CoreMinimal . h \" # include \" Misc / Optional . h \" struct FFrameNumber ; struct FMovieSceneSegment ; template<ElementType> class TRange ; namespace MovieSceneSegmentCompiler { TOptional<FMovieSceneSegment>)",
    "insertText": "EvaluateNearestSegment(const TRange<FFrameNumber>& Range, const FMovieSceneSegment* PreviousSegment, const FMovieSceneSegment* NextSegment)"
  },
  {
    "label": "AlwaysEvaluateSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AlwaysEvaluateSection(const FMovieSceneSectionData& InSectionData)"
  },
  {
    "label": "FilterOutUnderlappingSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterOutUnderlappingSections(FSegmentBlendData& BlendData)"
  },
  {
    "label": "ChooseLowestRowIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChooseLowestRowIndex(FSegmentBlendData& BlendData)"
  },
  {
    "label": "BlendSegmentLegacySectionOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendSegmentLegacySectionOrder(FSegmentBlendData& BlendData)"
  },
  {
    "label": "Blend()",
    "kind": "Method",
    "detail": "Function (} struct FDefaultTrackRowSegmentBlender : FMovieSceneTrackRowSegmentBlender { void)",
    "insertText": "Blend(FSegmentBlendData& BlendData)"
  },
  {
    "label": "FilterOutUnderlappingSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterOutUnderlappingSections(BlendData)"
  },
  {
    "label": "FEvaluateNearestSegmentBlender()",
    "kind": "Method",
    "detail": "Function (} } ; struct FEvaluateNearestSegmentBlender : FMovieSceneTrackSegmentBlender {)",
    "insertText": "FEvaluateNearestSegmentBlender()"
  },
  {
    "label": "InsertEmptySpace()",
    "kind": "Method",
    "detail": "Function (bCanFillEmptySpace = true ; } TOptional<FMovieSceneSegment>)",
    "insertText": "InsertEmptySpace(const TRange<FFrameNumber>& Range, const FMovieSceneSegment* PreviousSegment, const FMovieSceneSegment* NextSegment)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (BlendData .)",
    "insertText": "Sort(SortByStartTime)"
  },
  {
    "label": "SortByStartTime()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "SortByStartTime(const FMovieSceneSectionData& A, const FMovieSceneSectionData& B)"
  }
]