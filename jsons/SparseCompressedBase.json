[
  {
    "label": "SparseCompressedBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseCompressedBase"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "InnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerIterator"
  },
  {
    "label": "ReverseInnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReverseInnerIterator"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "internal"
  },
  {
    "label": "evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator"
  },
  {
    "label": "EIGEN_SPARSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSE_COMPRESSED_BASE_H # define EIGEN_SPARSE_COMPRESSED_BASE_H namespace Eigen { template<Derived> class SparseCompressedBase ; namespace internal { template<Derived> struct traits<SparseCompressedBase<Derived>> : traits<Derived> { } ; } template<Derived> class SparseCompressedBase : public SparseMatrixBase<Derived> { public : typedef SparseMatrixBase<Derived> Base ;)",
    "insertText": "EIGEN_SPARSE_PUBLIC_INTERFACE(SparseCompressedBase)"
  },
  {
    "label": "innerNonZeros()",
    "kind": "Method",
    "detail": "Function (using Base::IsRowMajor ; class InnerIterator ; class ReverseInnerIterator ; protected : typedef Base::IndexVector IndexVector ; Eigen::Map<IndexVector>)",
    "insertText": "innerNonZeros()"
  },
  {
    "label": "nonZeros()",
    "kind": "Method",
    "detail": "Function (} public : Index)",
    "insertText": "nonZeros()"
  },
  {
    "label": "valuePtr()",
    "kind": "Method",
    "detail": "Function (} const Scalar*)",
    "insertText": "valuePtr()"
  },
  {
    "label": "innerIndexPtr()",
    "kind": "Method",
    "detail": "Function (} const StorageIndex*)",
    "insertText": "innerIndexPtr()"
  },
  {
    "label": "outerIndexPtr()",
    "kind": "Method",
    "detail": "Function (} const StorageIndex*)",
    "insertText": "outerIndexPtr()"
  },
  {
    "label": "innerNonZeroPtr()",
    "kind": "Method",
    "detail": "Function (} const StorageIndex*)",
    "insertText": "innerNonZeroPtr()"
  },
  {
    "label": "isCompressed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCompressed()"
  },
  {
    "label": "coeffs()",
    "kind": "Method",
    "detail": "Function (} const Map<const Array<Scalar,Dynamic,1>>)",
    "insertText": "coeffs()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(isCompressed())"
  },
  {
    "label": "SparseCompressedBase()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "SparseCompressedBase()"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (} internal::LowerBoundIndex)",
    "insertText": "lower_bound(Index row, Index col)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(row>=0 && row<this->rows() && col>=0 && col<this->cols())"
  },
  {
    "label": "isCompressed()",
    "kind": "Method",
    "detail": "Function (Index end = this ->)",
    "insertText": "isCompressed() ? this->outerIndexPtr()[outer+1] : this->outerIndexPtr()[outer] + this->innerNonZeroPtr()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(end>=start && \"you are using a non finalized sparse matrix or written coefficient does not exist\")"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (internal::LowerBoundIndex p ; p . value =)",
    "insertText": "lower_bound(this->innerIndexPtr()+start, this->innerIndexPtr()+end,inner) - this->innerIndexPtr()"
  },
  {
    "label": "found()",
    "kind": "Method",
    "detail": "Function (p .)",
    "insertText": "found(p.value<end) && (this->innerIndexPtr()[p.value]==inner)"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (} ; template<Derived> class SparseCompressedBase<Derived>::InnerIterator { public :)",
    "insertText": "InnerIterator() : m_values(0), m_indices(0), m_outer(0), m_id(0), m_end(0)"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InnerIterator(const InnerIterator& other) : m_values(other.m_values), m_indices(other.m_indices), m_outer(other.m_outer), m_id(other.m_id), m_end(other.m_end)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} InnerIterator&)",
    "insertText": "operator(const InnerIterator& other)"
  },
  {
    "label": "OuterType()",
    "kind": "Method",
    "detail": "Function (m_values = other . m_values ; m_indices = other . m_indices ; const_cast<)",
    "insertText": "OuterType(m_outer).setValue(other.m_outer.value())"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (m_id = other . m_id ; m_end = other . m_end ; return* this ; })",
    "insertText": "InnerIterator(const SparseCompressedBase& mat, Index outer) : m_values(mat.valuePtr()), m_indices(mat.innerIndexPtr()), m_outer(outer)"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "InnerIterator(const SparseCompressedBase& mat) : m_values(mat.valuePtr()), m_indices(mat.innerIndexPtr()), m_outer(0), m_id(0), m_end(mat.nonZeros())"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InnerIterator(const internal::CompressedStorage<Scalar,StorageIndex>& data) : m_values(data.valuePtr()), m_indices(data.indexPtr()), m_outer(0), m_id(0), m_end(data.size())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} InnerIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (m_id + + ; return* this ; } InnerIterator&)",
    "insertText": "operator(Index i)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (InnerIterator result =* this ; result + = i ; return result ; } const Scalar&)",
    "insertText": "value()"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (} StorageIndex)",
    "insertText": "index()"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "row()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "col()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (} protected : const Scalar* m_values ; const StorageIndex* m_indices ; typedef internal::variable_if_dynamic<Index,Derived::IsVectorAtCompileTime ? 0 : Dynamic> OuterType ; const OuterType m_outer ; Index m_id ; Index m_end ; private : template<T>)",
    "insertText": "InnerIterator(const SparseMatrixBase<T>&, Index outer)"
  },
  {
    "label": "ReverseInnerIterator()",
    "kind": "Method",
    "detail": "Function (} ; template<Derived> class SparseCompressedBase<Derived>::ReverseInnerIterator { public :)",
    "insertText": "ReverseInnerIterator(const SparseCompressedBase& mat, Index outer) : m_values(mat.valuePtr()), m_indices(mat.innerIndexPtr()), m_outer(outer)"
  },
  {
    "label": "ReverseInnerIterator()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "ReverseInnerIterator(const SparseCompressedBase& mat) : m_values(mat.valuePtr()), m_indices(mat.innerIndexPtr()), m_outer(0), m_start(0), m_id(mat.nonZeros())"
  },
  {
    "label": "ReverseInnerIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ReverseInnerIterator(const internal::CompressedStorage<Scalar,StorageIndex>& data) : m_values(data.valuePtr()), m_indices(data.indexPtr()), m_outer(0), m_start(0), m_id(data.size())"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (} protected : const Scalar* m_values ; const StorageIndex* m_indices ; typedef internal::variable_if_dynamic<Index,Derived::IsVectorAtCompileTime ? 0 : Dynamic> OuterType ; const OuterType m_outer ; Index m_start ; Index m_id ; } ; namespace internal { template<Derived> struct evaluator<SparseCompressedBase<Derived>> : evaluator_base<Derived> { typedef Derived::Scalar Scalar ; typedef Derived::InnerIterator InnerIterator ; enum { CoeffReadCost = NumTraits<Scalar>::ReadCost,Flags = Derived::Flags } ;)",
    "insertText": "evaluator() : m_matrix(0), m_zero(0)"
  },
  {
    "label": "EIGEN_INTERNAL_CHECK_COST_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost)"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "evaluator(const Derived &mat) : m_matrix(&mat), m_zero(0)"
  },
  {
    "label": "nonZerosEstimate()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nonZerosEstimate()"
  },
  {
    "label": "Derived()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "Derived()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (Index p =)",
    "insertText": "find(row,col)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "coeffRef(Index row, Index col)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(p!=Dynamic && \"written coefficient does not exist\")"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} protected : Index)",
    "insertText": "find(Index row, Index col)"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (internal::LowerBoundIndex p = m_matrix ->)",
    "insertText": "lower_bound(row,col)"
  }
]