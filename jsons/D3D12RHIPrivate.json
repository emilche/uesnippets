[
  {
    "label": "FD3D12UpdateTexture3DData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12UpdateTexture3DData"
  },
  {
    "label": "FD3D12RayTracingPipelineInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12RayTracingPipelineInfo"
  },
  {
    "label": "FD3D12WorkaroundFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12WorkaroundFlags"
  },
  {
    "label": "AGSContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AGSContext"
  },
  {
    "label": "INTCExtensionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "INTCExtensionContext"
  },
  {
    "label": "FD3D12DynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DynamicRHI"
  },
  {
    "label": "FD3D12CommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12CommandContext"
  },
  {
    "label": "FD3D12Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Thread"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FProcessResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcessResult"
  },
  {
    "label": "FD3D12FinalizedCommands",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12FinalizedCommands"
  },
  {
    "label": "FD3D12TimingArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12TimingArray"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FUpdateTextureRegion2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion2D"
  },
  {
    "label": "FUpdateTextureRegion3D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion3D"
  },
  {
    "label": "IRHICommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHICommandContext"
  },
  {
    "label": "FRHICommandListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListBase"
  },
  {
    "label": "FD3D12TextureLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12TextureLayout"
  },
  {
    "label": "FD3D12Device",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Device"
  },
  {
    "label": "FD3D12DynamicRHIModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DynamicRHIModule"
  },
  {
    "label": "FScopedResourceBarrier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedResourceBarrier"
  },
  {
    "label": "COMPILED_PLATFORM_HEADER()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" D3D12RHICommon . h \" # include \" ID3D12DynamicRHI . h \" # include \" CoreMinimal . h \" # include \" Misc / CommandLine . h \" # include \" Misc / App . h \" # include \" Misc / ConfigCacheIni . h \" # include \" Misc / Paths . h \" # include \" Misc / ScopeLock . h \" # include \" Misc / ScopeRWLock . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" HAL / RunnableThread . h \" # include \" HAL / ThreadManager . h \" # include \" Containers / ResourceArray . h \" # include \" Serialization / MemoryReader . h \" # include \" EngineGlobals . h \" # include \" StaticBoundShaderState . h \" # include \" DXGIUtilities . h \" # include \" GPUProfiler . h \" # include \" ShaderCore . h \" # include \" HDRHelper . h \" # include \" D3D12Submission . h \" # include \" D3D12RHIDefinitions . h \" # include)",
    "insertText": "COMPILED_PLATFORM_HEADER(D3D12PipelineState.h) #include \"D3D12DiskCache.h\" #include \"D3D12NvidiaExtensions.h\" #include \"D3D12IntelExtensions.h\" #include \"D3D12Residency.h\" #include \"D3D12Util.h\" #include \"D3D12State.h\" #include \"D3D12Resources.h\" #include \"D3D12RootSignature.h\" #include \"D3D12Shader.h\" #include \"D3D12View.h\" #include \"D3D12CommandList.h\" #include \"D3D12Texture.h\" #include \"D3D12DirectCommandListManager.h\" #include \"D3D12Viewport.h\" #include \"D3D12ConstantBuffer.h\" #include \"D3D12Query.h\" #include \"D3D12DescriptorCache.h\" #include \"D3D12StateCachePrivate.h\" #include \"D3D12Allocation.h\" #include \"D3D12TransientResourceAllocator.h\" #include \"D3D12CommandContext.h\" #include \"D3D12Stats.h\" #include \"D3D12Device.h\" #include \"D3D12Adapter.h\" template< typename t_A, typename t_B > inline t_A RoundUpToNextMultiple(const t_A& a, const t_B& b)"
  },
  {
    "label": "D3D12RHI_ShouldCreateWithWarp()",
    "kind": "Method",
    "detail": "Function (} using namespace D3D12RHI ; TAutoConsoleVariable<int32> GD3D12DebugCvar ; bool)",
    "insertText": "D3D12RHI_ShouldCreateWithWarp()"
  },
  {
    "label": "Param()",
    "kind": "Method",
    "detail": "Function (bool bCreateWithWarp =)",
    "insertText": "Param(FCommandLine::Get(), TEXT(\"warp\"))"
  },
  {
    "label": "Param()",
    "kind": "Method",
    "detail": "Function (bool bAllowSoftwareRendering =)",
    "insertText": "Param(FCommandLine::Get(), TEXT(\"AllowSoftwareRendering\"))"
  },
  {
    "label": "Param()",
    "kind": "Method",
    "detail": "Function (bool bAllowAsyncResourceCreation = !)",
    "insertText": "Param(FCommandLine::Get(), TEXT(\"nod3dasync\"))"
  },
  {
    "label": "Param()",
    "kind": "Method",
    "detail": "Function (bool bForceCompatibility =)",
    "insertText": "Param(FCommandLine::Get(), TEXT(\"d3dcompat\")) || FParse::Param(FCommandLine::Get(), TEXT(\"d3d12compat\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IID RenderDocID ;)",
    "insertText": "if(SUCCEEDED(IIDFromString(L\"{A7AA6116-9C8D-4BBA-9083-B4D816B71B78}\", &RenderDocID)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<IUnknown> RenderDoc ;)",
    "insertText": "if(SUCCEEDED(Device->QueryInterface(RenderDocID, (void**)RenderDoc.GetInitReference())))"
  },
  {
    "label": "OutputGPUCrashReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputGPUCrashReport(FTextBuilder& ErrorMessage)"
  },
  {
    "label": "TerminateOnGPUCrash()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "TerminateOnGPUCrash()"
  },
  {
    "label": "FRIEND_ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (int64 RequestedTexturePoolSize ; class FD3D12Thread ; class FD3D12Thread* SubmissionThread = nullptr ; class FD3D12Thread* InterruptThread = nullptr ; enum class EQueueStatus { None = 0,Processed = 1<<0,Pending = 1<<1 } ;)",
    "insertText": "FRIEND_ENUM_CLASS_FLAGS(EQueueStatus)"
  },
  {
    "label": "FlushBatchedPayloads()",
    "kind": "Method",
    "detail": "Function (struct FProcessResult { EQueueStatus Status = EQueueStatus::None ; uint32 WaitTimeout = INFINITE ; } ; TQueue<TArray<FD3D12Payload*>*,EQueueMode::Mpsc> PendingPayloadsForSubmission ; void)",
    "insertText": "FlushBatchedPayloads(FD3D12Queue::FPayloadArray& PayloadsToHandDown)"
  },
  {
    "label": "ProcessSubmissionQueue()",
    "kind": "Method",
    "detail": "Function (FCriticalSection SubmissionCS ; FCriticalSection InterruptCS ; FProcessResult)",
    "insertText": "ProcessSubmissionQueue()"
  },
  {
    "label": "ProcessInterruptQueue()",
    "kind": "Method",
    "detail": "Function (FProcessResult)",
    "insertText": "ProcessInterruptQueue()"
  },
  {
    "label": "GenerateBarrierCommandListAndUpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateBarrierCommandListAndUpdateState(FD3D12CommandList* SourceCommandList, TArray<FD3D12CommandList*, TInlineAllocator<2>>& OutBarrierCommandLists)"
  },
  {
    "label": "UpdateMemoryStats()",
    "kind": "Method",
    "detail": "Function (FCriticalSection ObjectsToDeleteCS ; TArray<FD3D12DeferredDeleteObject> ObjectsToDelete ; void)",
    "insertText": "UpdateMemoryStats()"
  },
  {
    "label": "DeferredDelete()",
    "kind": "Method",
    "detail": "Function (public : template<. . . Args> void)",
    "insertText": "DeferredDelete(Args&&... InArgs)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&ObjectsToDeleteCS)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (ObjectsToDelete .)",
    "insertText": "Emplace(Forward<Args>(InArgs)...)"
  },
  {
    "label": "SubmitCommands()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubmitCommands(TConstArrayView<struct FD3D12FinalizedCommands*> Commands)"
  },
  {
    "label": "SubmitPayloads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitPayloads(TArray<FD3D12Payload*>&& Payloads)"
  },
  {
    "label": "ProcessInterruptQueueUntil()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessInterruptQueueUntil(FGraphEvent* GraphEvent)"
  },
  {
    "label": "ProcessInterruptQueueOnGPUCrash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessInterruptQueueOnGPUCrash()"
  },
  {
    "label": "CreateNew()",
    "kind": "Method",
    "detail": "Function (struct FD3D12TimingArray : public TArray<TUniquePtr<FD3D12Timing>,TInlineAllocator<GD3D12MaxNumQueues>> { FD3D12Timing*)",
    "insertText": "CreateNew(FD3D12Queue& Queue)"
  },
  {
    "label": "ProcessTimestamps()",
    "kind": "Method",
    "detail": "Function (} } ; FD3D12TimingArray CurrentTimingPerQueue ; void)",
    "insertText": "ProcessTimestamps(FD3D12TimingArray const& TimingPerQueue)"
  },
  {
    "label": "InitializeSubmissionPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSubmissionPipe()"
  },
  {
    "label": "ShutdownSubmissionPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownSubmissionPipe()"
  },
  {
    "label": "EnqueueEndOfPipeTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueEndOfPipeTask(TUniqueFunction<void()> TaskFunc, TUniqueFunction<void(FD3D12Payload&)> ModifyPayloadCallback = {})"
  },
  {
    "label": "ForEachQueue()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef EopTask ; void)",
    "insertText": "ForEachQueue(TFunctionRef<void(FD3D12Queue&)> Callback)"
  },
  {
    "label": "FD3D12DynamicRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12DynamicRHI(const TArray<TSharedPtr<FD3D12Adapter>>& ChosenAdaptersIn, bool bInPixEventEnabled)"
  },
  {
    "label": "FD3D12DynamicRHI()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12DynamicRHI()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "PostInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInit()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "ResourceCast()",
    "kind": "Method",
    "detail": "Function (} template<TRHIType,TReturnType = TD3D12ResourceTraits<TRHIType>::TConcreteType> TReturnType*)",
    "insertText": "ResourceCast(TRHIType* Resource)"
  },
  {
    "label": "ResourceCast()",
    "kind": "Method",
    "detail": "Function (} template<TRHIType,TReturnType = TD3D12ResourceTraits<TRHIType>::TConcreteType> const TReturnType*)",
    "insertText": "ResourceCast(const TRHIType* Resource)"
  },
  {
    "label": "ResourceCast()",
    "kind": "Method",
    "detail": "Function (} template<TRHIType,TReturnType = TD3D12ResourceTraits<TRHIType>::TConcreteType> TReturnType*)",
    "insertText": "ResourceCast(TRHIType* Resource, uint32 GPUIndex)"
  },
  {
    "label": "TReturnType()",
    "kind": "Method",
    "detail": "Function (TReturnType* Object = ResourceCast<TRHIType,)",
    "insertText": "TReturnType(Resource)"
  },
  {
    "label": "QueueSupportsTileMapping()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "QueueSupportsTileMapping(ED3D12QueueType)"
  },
  {
    "label": "CreateCommandQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCommandQueue(FD3D12Device* Device, const D3D12_COMMAND_QUEUE_DESC& Desc, TRefCountPtr<ID3D12CommandQueue>& OutCommandQueue)"
  },
  {
    "label": "GetHardwareGPUFrameTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHardwareGPUFrameTime(double& OutGPUFrameTime)"
  },
  {
    "label": "RHIEndFrame_RenderThread()",
    "kind": "Method",
    "detail": "Function (OutGPUFrameTime = 0 . 0 ; return false ; } void)",
    "insertText": "RHIEndFrame_RenderThread(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "RHIEndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndFrame(const FRHIEndFrameArgs& Args)"
  },
  {
    "label": "RHICreateSamplerState()",
    "kind": "Method",
    "detail": "Function (FSamplerStateRHIRef)",
    "insertText": "RHICreateSamplerState(const FSamplerStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateRasterizerState()",
    "kind": "Method",
    "detail": "Function (FRasterizerStateRHIRef)",
    "insertText": "RHICreateRasterizerState(const FRasterizerStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateDepthStencilState()",
    "kind": "Method",
    "detail": "Function (FDepthStencilStateRHIRef)",
    "insertText": "RHICreateDepthStencilState(const FDepthStencilStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateBlendState()",
    "kind": "Method",
    "detail": "Function (FBlendStateRHIRef)",
    "insertText": "RHICreateBlendState(const FBlendStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (FVertexDeclarationRHIRef)",
    "insertText": "RHICreateVertexDeclaration(const FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "RHICreatePixelShader()",
    "kind": "Method",
    "detail": "Function (FPixelShaderRHIRef)",
    "insertText": "RHICreatePixelShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateVertexShader()",
    "kind": "Method",
    "detail": "Function (FVertexShaderRHIRef)",
    "insertText": "RHICreateVertexShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateMeshShader()",
    "kind": "Method",
    "detail": "Function (FMeshShaderRHIRef)",
    "insertText": "RHICreateMeshShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateAmplificationShader()",
    "kind": "Method",
    "detail": "Function (FAmplificationShaderRHIRef)",
    "insertText": "RHICreateAmplificationShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateGeometryShader()",
    "kind": "Method",
    "detail": "Function (FGeometryShaderRHIRef)",
    "insertText": "RHICreateGeometryShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateComputeShader()",
    "kind": "Method",
    "detail": "Function (FComputeShaderRHIRef)",
    "insertText": "RHICreateComputeShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateWorkGraphShader()",
    "kind": "Method",
    "detail": "Function (FWorkGraphShaderRHIRef)",
    "insertText": "RHICreateWorkGraphShader(TArrayView<const uint8> Code, const FSHAHash& Hash, EShaderFrequency ShaderFrequency)"
  },
  {
    "label": "RHICreateGPUFence()",
    "kind": "Method",
    "detail": "Function (FGPUFenceRHIRef)",
    "insertText": "RHICreateGPUFence(const FName& Name)"
  },
  {
    "label": "RHICreateStagingBuffer()",
    "kind": "Method",
    "detail": "Function (FStagingBufferRHIRef)",
    "insertText": "RHICreateStagingBuffer()"
  },
  {
    "label": "RHILockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockStagingBuffer(FRHIStagingBuffer* StagingBuffer, FRHIGPUFence* Fence, uint32 Offset, uint32 SizeRHI)"
  },
  {
    "label": "RHIUnlockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockStagingBuffer(FRHIStagingBuffer* StagingBuffer)"
  },
  {
    "label": "RHICreateBoundShaderState()",
    "kind": "Method",
    "detail": "Function (FBoundShaderStateRHIRef)",
    "insertText": "RHICreateBoundShaderState(FRHIVertexDeclaration* VertexDeclaration, FRHIVertexShader* VertexShader, FRHIPixelShader* PixelShader, FRHIGeometryShader* GeometryShader)"
  },
  {
    "label": "RHICreateGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineStateRHIRef)",
    "insertText": "RHICreateGraphicsPipelineState(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHICreateComputePipelineState()",
    "kind": "Method",
    "detail": "Function (FComputePipelineStateRHIRef)",
    "insertText": "RHICreateComputePipelineState(FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "RHICreateWorkGraphPipelineState()",
    "kind": "Method",
    "detail": "Function (FWorkGraphPipelineStateRHIRef)",
    "insertText": "RHICreateWorkGraphPipelineState(const FWorkGraphPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHICreateTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICreateTransition(FRHITransition* Transition, const FRHITransitionCreateInfo& CreateInfo)"
  },
  {
    "label": "RHIReleaseTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReleaseTransition(FRHITransition* Transition)"
  },
  {
    "label": "RHICreateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (FUniformBufferRHIRef)",
    "insertText": "RHICreateUniformBuffer(const void* Contents, const FRHIUniformBufferLayout* Layout, EUniformBufferUsage Usage, EUniformBufferValidation Validation)"
  },
  {
    "label": "RHIUpdateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateUniformBuffer(FRHICommandListBase& RHICmdList, FRHIUniformBuffer* UniformBufferRHI, const void* Contents)"
  },
  {
    "label": "RHICreateBuffer()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef)",
    "insertText": "RHICreateBuffer(FRHICommandListBase& RHICmdList, FRHIBufferDesc const& Desc, ERHIAccess ResourceState, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "RHIReplaceResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReplaceResources(FRHICommandListBase& RHICmdList, TArray<FRHIResourceReplaceInfo>&& ReplaceInfos)"
  },
  {
    "label": "RHILockBuffer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockBuffer(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, uint32 Offset, uint32 Size, EResourceLockMode LockMode)"
  },
  {
    "label": "RHILockBufferMGPU()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockBufferMGPU(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, uint32 GPUIndex, uint32 Offset, uint32 Size, EResourceLockMode LockMode)"
  },
  {
    "label": "RHIUnlockBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockBuffer(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer)"
  },
  {
    "label": "RHIUnlockBufferMGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockBufferMGPU(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, uint32 GPUIndex)"
  },
  {
    "label": "RHICreateTextureReference()",
    "kind": "Method",
    "detail": "Function (FTextureReferenceRHIRef)",
    "insertText": "RHICreateTextureReference(FRHICommandListBase& RHICmdList, FRHITexture* InReferencedTexture)"
  },
  {
    "label": "RHIUpdateTextureReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateTextureReference(FRHICommandListBase& RHICmdList, FRHITextureReference* TextureRef, FRHITexture* NewTexture)"
  },
  {
    "label": "RHICalcTexturePlatformSize()",
    "kind": "Method",
    "detail": "Function (FRHICalcTextureSizeResult)",
    "insertText": "RHICalcTexturePlatformSize(const FRHITextureDesc& Desc, uint32 FirstMipIndex)"
  },
  {
    "label": "RHIGetTextureMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIGetTextureMemoryStats(FTextureMemoryStats& OutStats)"
  },
  {
    "label": "RHIGetTextureMemoryVisualizeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIGetTextureMemoryVisualizeData(FColor* TextureData, int32 SizeX, int32 SizeY, int32 Pitch, int32 PixelSize)"
  },
  {
    "label": "RHIAsyncCreateTexture2D()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHIAsyncCreateTexture2D(uint32 SizeX, uint32 SizeY, uint8 Format, uint32 NumMips, ETextureCreateFlags Flags, ERHIAccess InResourceState, void** InitialMipData, uint32 NumInitialMips, const TCHAR* DebugName, FGraphEventRef& OutCompletionEvent)"
  },
  {
    "label": "RHICreateTexture()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateTexture(FRHICommandListBase& RHICmdList, const FRHITextureCreateDesc& CreateDesc)"
  },
  {
    "label": "RHIComputeMemorySize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RHIComputeMemorySize(FRHITexture* TextureRHI)"
  },
  {
    "label": "RHIAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHIAsyncReallocateTexture2D(FRHITexture* Texture2D, int32 NewMipCount, int32 NewSizeX, int32 NewSizeY, FThreadSafeCounter* RequestStatus)"
  },
  {
    "label": "RHIFinalizeAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "RHIFinalizeAsyncReallocateTexture2D(FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "RHICancelAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "RHICancelAsyncReallocateTexture2D(FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "RHILockTexture2D()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTexture2D(FRHITexture* Texture, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail, uint64* OutLockedByteCount = nullptr)"
  },
  {
    "label": "RHIUnlockTexture2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTexture2D(FRHITexture* Texture, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHILockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHILockTextureCubeFace_RenderThread()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTextureCubeFace_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* TextureRHI, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTextureCubeFace_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTextureCubeFace_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* TextureRHI, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUpdateTexture2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateTexture2D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion2D& UpdateRegion, uint32 SourcePitch, const uint8* SourceData)"
  },
  {
    "label": "RHIUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateTexture3D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion3D& UpdateRegion, uint32 SourceRowPitch, uint32 SourceDepthPitch, const uint8* SourceData)"
  },
  {
    "label": "RHIBeginUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (FUpdateTexture3DData)",
    "insertText": "RHIBeginUpdateTexture3D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion3D& UpdateRegion)"
  },
  {
    "label": "RHIEndUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndUpdateTexture3D(FRHICommandListBase& RHICmdList, FUpdateTexture3DData& UpdateData)"
  },
  {
    "label": "RHIEndMultiUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndMultiUpdateTexture3D(FRHICommandListBase& RHICmdList, TArray<FUpdateTexture3DData>& UpdateDataArray)"
  },
  {
    "label": "RHILockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBindDebugLabelName(FRHICommandListBase& RHICmdList, FRHITexture* Texture, const TCHAR* Name)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBindDebugLabelName(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, const TCHAR* Name)"
  },
  {
    "label": "RHIReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceData(FRHITexture* Texture, FIntRect Rect, TArray<FColor>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHIReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceData(FRHITexture* TextureRHI, FIntRect InRect, TArray<FLinearColor>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHIMapStagingSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIMapStagingSurface(FRHITexture* Texture, FRHIGPUFence* Fence, void*& OutData, int32& OutWidth, int32& OutHeight, uint32 GPUIndex = 0)"
  },
  {
    "label": "RHIUnmapStagingSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnmapStagingSurface(FRHITexture* Texture, uint32 GPUIndex = 0)"
  },
  {
    "label": "RHIReadSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceFloatData(FRHITexture* Texture, FIntRect Rect, TArray<FFloat16Color>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHIReadSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceFloatData(FRHITexture* Texture, FIntRect Rect, TArray<FFloat16Color>& OutData, ECubeFace CubeFace, int32 ArrayIndex, int32 MipIndex)"
  },
  {
    "label": "RHIRead3DSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRead3DSurfaceFloatData(FRHITexture* Texture, FIntRect Rect, FIntPoint ZMinMax, TArray<FFloat16Color>& OutData)"
  },
  {
    "label": "RHIRead3DSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRead3DSurfaceFloatData(FRHITexture* Texture, FIntRect Rect, FIntPoint ZMinMax, TArray<FFloat16Color>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHICreateRenderQuery()",
    "kind": "Method",
    "detail": "Function (FRenderQueryRHIRef)",
    "insertText": "RHICreateRenderQuery(ERenderQueryType QueryType)"
  },
  {
    "label": "RHIBeginRenderQueryBatch_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginRenderQueryBatch_TopOfPipe(FRHICommandListBase& RHICmdList, ERenderQueryType QueryType)"
  },
  {
    "label": "RHIEndRenderQueryBatch_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderQueryBatch_TopOfPipe(FRHICommandListBase& RHICmdList, ERenderQueryType QueryType)"
  },
  {
    "label": "RHIEndRenderQuery_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderQuery_TopOfPipe(FRHICommandListBase& RHICmdList, FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIGetRenderQueryResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIGetRenderQueryResult(FRHIRenderQuery* RenderQuery, uint64& OutResult, bool bWait, uint32 GPUIndex = INDEX_NONE)"
  },
  {
    "label": "RHIGetViewportNextPresentGPUIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RHIGetViewportNextPresentGPUIndex(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIGetViewportBackBuffer()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHIGetViewportBackBuffer(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIGetViewportBackBufferUAV()",
    "kind": "Method",
    "detail": "Function (# if D3D12RHI_SUPPORTS_UAV_BACKBUFFER FUnorderedAccessViewRHIRef)",
    "insertText": "RHIGetViewportBackBufferUAV(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIAliasTextureResources()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RHIAliasTextureResources(FTextureRHIRef& DestTexture, FTextureRHIRef& SrcTexture)"
  },
  {
    "label": "RHICreateAliasedTexture()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateAliasedTexture(FTextureRHIRef& SourceTexture)"
  },
  {
    "label": "RHIGetDisplaysInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIGetDisplaysInformation(FDisplayInformationArray& OutDisplayInformation)"
  },
  {
    "label": "RHIComputeStatePrecachePSOHash()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "RHIComputeStatePrecachePSOHash(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHIComputePrecachePSOHash()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "RHIComputePrecachePSOHash(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHIMatchPrecachePSOInitializers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIMatchPrecachePSOInitializers(const FGraphicsPipelineStateInitializer& LHS, const FGraphicsPipelineStateInitializer& RHS)"
  },
  {
    "label": "RHIAdvanceFrameForGetViewportBackBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIAdvanceFrameForGetViewportBackBuffer(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIFlushResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIFlushResources()"
  },
  {
    "label": "RHIGetGPUFrameCycles()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RHIGetGPUFrameCycles(uint32 GPUIndex = 0)"
  },
  {
    "label": "RHICreateViewport()",
    "kind": "Method",
    "detail": "Function (FViewportRHIRef)",
    "insertText": "RHICreateViewport(void* WindowHandle, uint32 SizeX, uint32 SizeY, bool bIsFullscreen, EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "RHIResizeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIResizeViewport(FRHIViewport* Viewport, uint32 SizeX, uint32 SizeY, bool bIsFullscreen)"
  },
  {
    "label": "RHIResizeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIResizeViewport(FRHIViewport* ViewportRHI, uint32 SizeX, uint32 SizeY, bool bIsFullscreen, EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "RHIHandleDisplayChange()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS void)",
    "insertText": "RHIHandleDisplayChange()"
  },
  {
    "label": "RHITick()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RHITick(float DeltaTime)"
  },
  {
    "label": "RHIBlockUntilGPUIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBlockUntilGPUIdle()"
  },
  {
    "label": "RHIGetAvailableResolutions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIGetAvailableResolutions(FScreenResolutionArray& Resolutions, bool bIgnoreRefreshRate)"
  },
  {
    "label": "RHIGetSupportedResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIGetSupportedResolution(uint32& Width, uint32& Height)"
  },
  {
    "label": "RHIGetNativeDevice()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHIGetNativeDevice()"
  },
  {
    "label": "RHIGetNativeGraphicsQueue()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHIGetNativeGraphicsQueue()"
  },
  {
    "label": "RHIGetNativeComputeQueue()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHIGetNativeComputeQueue()"
  },
  {
    "label": "RHIGetNativeInstance()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHIGetNativeInstance()"
  },
  {
    "label": "RHIGetDefaultContext()",
    "kind": "Method",
    "detail": "Function (class IRHICommandContext*)",
    "insertText": "RHIGetDefaultContext()"
  },
  {
    "label": "RHIGetCommandContext()",
    "kind": "Method",
    "detail": "Function (IRHIComputeContext*)",
    "insertText": "RHIGetCommandContext(ERHIPipeline Pipeline, FRHIGPUMask GPUMask)"
  },
  {
    "label": "RHIFinalizeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIFinalizeContext(FRHIFinalizeContextArgs&& Args, TRHIPipelineArray<IRHIPlatformCommandList*>& Output)"
  },
  {
    "label": "RHISubmitCommandLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISubmitCommandLists(FRHISubmitCommandListsArgs&& Args)"
  },
  {
    "label": "RHIProcessDeleteQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIProcessDeleteQueue()"
  },
  {
    "label": "RHIRunOnQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRunOnQueue(ED3D12RHIRunOnQueueType QueueType, TFunction<void(ID3D12CommandQueue*)>&& CodeToRun, bool bWaitForSubmission)"
  },
  {
    "label": "RHICreateTransientResourceAllocator()",
    "kind": "Method",
    "detail": "Function (IRHITransientResourceAllocator*)",
    "insertText": "RHICreateTransientResourceAllocator()"
  },
  {
    "label": "RHIWriteGPUFence_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIWriteGPUFence_TopOfPipe(FRHICommandListBase& RHICmdList, FRHIGPUFence* FenceRHI)"
  },
  {
    "label": "RHICreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (FShaderResourceViewRHIRef)",
    "insertText": "RHICreateShaderResourceView(class FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "RHICreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (FUnorderedAccessViewRHIRef)",
    "insertText": "RHICreateUnorderedAccessView(class FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "RHICreateResourceCollection()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_BINDLESS_RENDERING FRHIResourceCollectionRef)",
    "insertText": "RHICreateResourceCollection(FRHICommandListBase& RHICmdList, TConstArrayView<FRHIResourceCollectionMember> InMembers)"
  },
  {
    "label": "RHIGetAdapterDescs()",
    "kind": "Method",
    "detail": "Function (# endif TArray<FD3D12MinimalAdapterDesc>)",
    "insertText": "RHIGetAdapterDescs()"
  },
  {
    "label": "RHIIsPixEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIIsPixEnabled()"
  },
  {
    "label": "RHIGetCommandQueue()",
    "kind": "Method",
    "detail": "Function (ID3D12CommandQueue*)",
    "insertText": "RHIGetCommandQueue()"
  },
  {
    "label": "RHIGetDevice()",
    "kind": "Method",
    "detail": "Function (ID3D12Device*)",
    "insertText": "RHIGetDevice(uint32 InIndex)"
  },
  {
    "label": "RHIGetDeviceNodeMask()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RHIGetDeviceNodeMask(uint32 InIndex)"
  },
  {
    "label": "RHIGetGraphicsCommandList()",
    "kind": "Method",
    "detail": "Function (ID3D12GraphicsCommandList*)",
    "insertText": "RHIGetGraphicsCommandList(FRHICommandListBase& ExecutingCmdList, uint32 InDeviceIndex)"
  },
  {
    "label": "RHIGetSwapChainFormat()",
    "kind": "Method",
    "detail": "Function (DXGI_FORMAT)",
    "insertText": "RHIGetSwapChainFormat(EPixelFormat InFormat)"
  },
  {
    "label": "RHICreateTexture2DFromResource()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateTexture2DFromResource(EPixelFormat Format, ETextureCreateFlags TexCreateFlags, const FClearValueBinding& ClearValueBinding, ID3D12Resource* Resource)"
  },
  {
    "label": "RHICreateTexture2DArrayFromResource()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateTexture2DArrayFromResource(EPixelFormat Format, ETextureCreateFlags TexCreateFlags, const FClearValueBinding& ClearValueBinding, ID3D12Resource* Resource)"
  },
  {
    "label": "RHICreateTextureCubeFromResource()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateTextureCubeFromResource(EPixelFormat Format, ETextureCreateFlags TexCreateFlags, const FClearValueBinding& ClearValueBinding, ID3D12Resource* Resource)"
  },
  {
    "label": "RHIGetResource()",
    "kind": "Method",
    "detail": "Function (ID3D12Resource*)",
    "insertText": "RHIGetResource(FRHIBuffer* InBuffer)"
  },
  {
    "label": "RHIGetResourceDeviceIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RHIGetResourceDeviceIndex(FRHIBuffer* InBuffer)"
  },
  {
    "label": "RHIGetResourceMemorySize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "RHIGetResourceMemorySize(FRHIBuffer* InBuffer)"
  },
  {
    "label": "RHIIsResourcePlaced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIIsResourcePlaced(FRHIBuffer* InBuffer)"
  },
  {
    "label": "RHIGetResource()",
    "kind": "Method",
    "detail": "Function (ID3D12Resource*)",
    "insertText": "RHIGetResource(FRHITexture* InTexture)"
  },
  {
    "label": "RHIGetResourceDeviceIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RHIGetResourceDeviceIndex(FRHITexture* InTexture)"
  },
  {
    "label": "RHIGetResourceMemorySize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "RHIGetResourceMemorySize(FRHITexture* InTexture)"
  },
  {
    "label": "RHIIsResourcePlaced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIIsResourcePlaced(FRHITexture* InTexture)"
  },
  {
    "label": "RHIGetRenderTargetView()",
    "kind": "Method",
    "detail": "Function (D3D12_CPU_DESCRIPTOR_HANDLE)",
    "insertText": "RHIGetRenderTargetView(FRHITexture* InTexture, int32 InMipIndex = 0, int32 InArraySliceIndex = 0)"
  },
  {
    "label": "RHIFinishExternalComputeWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIFinishExternalComputeWork(FRHICommandListBase& ExecutingCmdList, uint32 InDeviceIndex, ID3D12GraphicsCommandList* InCommandList)"
  },
  {
    "label": "RHITransitionResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHITransitionResource(FRHICommandList& RHICmdList, FRHITexture* InTexture, D3D12_RESOURCE_STATES InState, uint32 InSubResource)"
  },
  {
    "label": "RHISignalManualFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISignalManualFence(FRHICommandList& RHICmdList, ID3D12Fence* Fence, uint64 Value)"
  },
  {
    "label": "RHIWaitManualFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIWaitManualFence(FRHICommandList& RHICmdList, ID3D12Fence* Fence, uint64 Value)"
  },
  {
    "label": "RHIVerifyResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIVerifyResult(ID3D12Device* Device, HRESULT Result, const ANSICHAR* Code, const ANSICHAR* Filename, uint32 Line, FString Message = FString())"
  },
  {
    "label": "LockTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "LockTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail, bool bNeedsDefaultRHIFlush = true, uint64* OutLockedByteCount = nullptr)"
  },
  {
    "label": "UnlockTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 MipIndex, bool bLockWithinMiptail, bool bNeedsDefaultRHIFlush = true)"
  },
  {
    "label": "LockTexture2DArray_RenderThread()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "LockTexture2DArray_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "UnlockTexture2DArray_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockTexture2DArray_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "AsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "AsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, int32 NewMipCount, int32 NewSizeX, int32 NewSizeY, FThreadSafeCounter* RequestStatus)"
  },
  {
    "label": "FinalizeAsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "FinalizeAsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "CancelAsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (} ETextureReallocationStatus)",
    "insertText": "CancelAsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "RHICalcRayTracingSceneSize()",
    "kind": "Method",
    "detail": "Function (} # if D3D12_RHI_RAYTRACING FRayTracingAccelerationStructureSize)",
    "insertText": "RHICalcRayTracingSceneSize(const FRayTracingSceneInitializer& Initializer)"
  },
  {
    "label": "RHICalcRayTracingGeometrySize()",
    "kind": "Method",
    "detail": "Function (FRayTracingAccelerationStructureSize)",
    "insertText": "RHICalcRayTracingGeometrySize(const FRayTracingGeometryInitializer& Initializer)"
  },
  {
    "label": "RHICreateRayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (FRayTracingGeometryRHIRef)",
    "insertText": "RHICreateRayTracingGeometry(FRHICommandListBase& RHICmdList, const FRayTracingGeometryInitializer& Initializer)"
  },
  {
    "label": "RHICreateRayTracingScene()",
    "kind": "Method",
    "detail": "Function (FRayTracingSceneRHIRef)",
    "insertText": "RHICreateRayTracingScene(FRayTracingSceneInitializer Initializer)"
  },
  {
    "label": "RHICreateRayTracingShader()",
    "kind": "Method",
    "detail": "Function (FRayTracingShaderRHIRef)",
    "insertText": "RHICreateRayTracingShader(TArrayView<const uint8> Code, const FSHAHash& Hash, EShaderFrequency ShaderFrequency)"
  },
  {
    "label": "RHICreateRayTracingPipelineState()",
    "kind": "Method",
    "detail": "Function (FRayTracingPipelineStateRHIRef)",
    "insertText": "RHICreateRayTracingPipelineState(const FRayTracingPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHICreateShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (FShaderBindingTableRHIRef)",
    "insertText": "RHICreateShaderBindingTable(FRHICommandListBase& RHICmdList, const FRayTracingShaderBindingTableInitializer& Initializer)"
  },
  {
    "label": "RHICreateShaderBundle()",
    "kind": "Method",
    "detail": "Function (# endif FShaderBundleRHIRef)",
    "insertText": "RHICreateShaderBundle(const FShaderBundleCreateInfo& CreateInfo)"
  },
  {
    "label": "HandleGpuTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleGpuTimeout(FD3D12Payload* Payload, double SecondsSinceSubmission)"
  },
  {
    "label": "IsQuadBufferStereoEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsQuadBufferStereoEnabled()"
  },
  {
    "label": "DisableQuadBufferStereo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableQuadBufferStereo()"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef)",
    "insertText": "CreateBuffer(FRHICommandListBase& RHICmdList, FRHIBufferDesc const& BufferDesc, ERHIAccess ResourceState, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "LockBuffer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "LockBuffer(FRHICommandListBase& RHICmdList, FD3D12Buffer* Buffer, uint32 BufferSize, EBufferUsageFlags BufferUsage, uint32 Offset, uint32 Size, EResourceLockMode LockMode)"
  },
  {
    "label": "UnlockBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockBuffer(FRHICommandListBase& RHICmdList, FD3D12Buffer* Buffer, EBufferUsageFlags BufferUsage)"
  },
  {
    "label": "BeginUpdateTexture3D_ComputeShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginUpdateTexture3D_ComputeShader(FUpdateTexture3DData& UpdateData, FD3D12UpdateTexture3DData* UpdateDataD3D12)"
  },
  {
    "label": "BeginUpdateTexture3D_Internal()",
    "kind": "Method",
    "detail": "Function (} FUpdateTexture3DData)",
    "insertText": "BeginUpdateTexture3D_Internal(FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion3D& UpdateRegion)"
  },
  {
    "label": "EndUpdateTexture3D_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndUpdateTexture3D_Internal(FRHICommandListBase& RHICmdList, FUpdateTexture3DData& UpdateData)"
  },
  {
    "label": "CreateVirtualTexture()",
    "kind": "Method",
    "detail": "Function (public : # if PLATFORM_SUPPORTS_VIRTUAL_TEXTURES void*)",
    "insertText": "CreateVirtualTexture(ETextureCreateFlags InFlags, D3D12_RESOURCE_DESC& ResourceDesc, const struct FD3D12TextureLayout& TextureLayout, FD3D12Resource** ppResource, FPlatformMemory::FPlatformVirtualMemoryBlock& RawTextureBlock, D3D12_RESOURCE_STATES InitialUsage = D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE)"
  },
  {
    "label": "DestroyVirtualTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyVirtualTexture(ETextureCreateFlags InFlags, void* RawTextureMemory, FPlatformMemory::FPlatformVirtualMemoryBlock& RawTextureBlock, uint64 CommittedTextureSize)"
  },
  {
    "label": "HandleSpecialLock()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "HandleSpecialLock(void*& MemoryOut, uint32 MipIndex, uint32 ArrayIndex, FD3D12Texture* InTexture, EResourceLockMode LockMode, uint32& DestStride, uint64* OutLockedByteCount = nullptr)"
  },
  {
    "label": "IsPixEventEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPixEventEnabled()"
  },
  {
    "label": "GetAmdAgsContext()",
    "kind": "Method",
    "detail": "Function (AGSContext*)",
    "insertText": "GetAmdAgsContext()"
  },
  {
    "label": "GetAmdSupportedExtensionFlags()",
    "kind": "Method",
    "detail": "Function (AmdSupportedExtensionFlags = Flags ; } uint32)",
    "insertText": "GetAmdSupportedExtensionFlags()"
  },
  {
    "label": "CreateD3D12Texture()",
    "kind": "Method",
    "detail": "Function (FD3D12Texture*)",
    "insertText": "CreateD3D12Texture(const FRHITextureCreateDesc& CreateDesc, FRHICommandListBase* RHICmdList, ID3D12ResourceAllocator* ResourceAllocator = nullptr)"
  },
  {
    "label": "CreateD3D12Buffer()",
    "kind": "Method",
    "detail": "Function (FD3D12Buffer*)",
    "insertText": "CreateD3D12Buffer(class FRHICommandListBase* RHICmdList, FRHIBufferDesc const& BufferDesc, ERHIAccess ResourceState, FRHIResourceCreateInfo& CreateInfo, ID3D12ResourceAllocator* ResourceAllocator = nullptr, bool bForceKeepUnlocked = false)"
  },
  {
    "label": "CreateNewD3D12Texture()",
    "kind": "Method",
    "detail": "Function (FD3D12Texture*)",
    "insertText": "CreateNewD3D12Texture(const FRHITextureCreateDesc& CreateDesc, class FD3D12Device* Device)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (FRHIBuffer*)",
    "insertText": "CreateBuffer(const FRHIBufferCreateInfo& CreateInfo, const TCHAR* DebugName, ERHIAccess InitialState, ID3D12ResourceAllocator* ResourceAllocator)"
  },
  {
    "label": "SetupDisplayHDRMetaData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetupDisplayHDRMetaData()"
  },
  {
    "label": "CreateTextureFromResource()",
    "kind": "Method",
    "detail": "Function (protected : FD3D12Texture*)",
    "insertText": "CreateTextureFromResource(bool bTextureArray, bool bCubeTexture, EPixelFormat Format, ETextureCreateFlags TexCreateFlags, const FClearValueBinding& ClearValueBinding, ID3D12Resource* Resource)"
  },
  {
    "label": "CreateAliasedD3D12Texture2D()",
    "kind": "Method",
    "detail": "Function (FD3D12Texture*)",
    "insertText": "CreateAliasedD3D12Texture2D(FD3D12Texture* SourceTexture)"
  },
  {
    "label": "GetBestSupportedMSAASetting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBestSupportedMSAASetting(DXGI_FORMAT PlatformFormat, uint32 MSAACount, uint32& OutBestMSAACount, uint32& OutMSAAQualityLevels)"
  },
  {
    "label": "GetStagingTexture()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FD3D12Resource>)",
    "insertText": "GetStagingTexture(FRHITexture* TextureRHI, FIntRect InRect, FIntRect& OutRect, FReadSurfaceDataFlags InFlags, D3D12_PLACED_SUBRESOURCE_FOOTPRINT &readBackHeapDesc, uint32 GPUIndex)"
  },
  {
    "label": "ReadSurfaceDataNoMSAARaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadSurfaceDataNoMSAARaw(FRHITexture* TextureRHI, FIntRect Rect, TArray<uint8>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "ReadSurfaceDataMSAARaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadSurfaceDataMSAARaw(FRHITexture* TextureRHI, FIntRect Rect, TArray<uint8>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "GetRHIDevice()",
    "kind": "Method",
    "detail": "Function (FD3D12Device*)",
    "insertText": "GetRHIDevice(uint32 GPUIndex)"
  },
  {
    "label": "SetupD3D12Debug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupD3D12Debug()"
  },
  {
    "label": "ProcessDeferredDeletionQueue_Platform()",
    "kind": "Method",
    "detail": "Function (HANDLE FlipEvent ; FDisplayInformationArray DisplayList ; void)",
    "insertText": "ProcessDeferredDeletionQueue_Platform()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "ENUM_CLASS_FLAGS(FD3D12DynamicRHI::EQueueStatus)"
  },
  {
    "label": "FD3D12DynamicRHIModule()",
    "kind": "Method",
    "detail": "Function (class FD3D12DynamicRHIModule : public IDynamicRHIModule { public :)",
    "insertText": "FD3D12DynamicRHIModule()"
  },
  {
    "label": "SupportsDynamicReloading()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsDynamicReloading()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "IsSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupported()"
  },
  {
    "label": "IsSupported()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSupported(ERHIFeatureLevel::Type RequestedFeatureLevel)"
  },
  {
    "label": "CreateRHI()",
    "kind": "Method",
    "detail": "Function (FDynamicRHI*)",
    "insertText": "CreateRHI(ERHIFeatureLevel::Type RequestedFeatureLevel = ERHIFeatureLevel::Num)"
  },
  {
    "label": "FindAdapter()",
    "kind": "Method",
    "detail": "Function (private : # if D3D12RHI_SUPPORTS_WIN_PIX void* WindowsPixDllHandle = nullptr ; void* WinPixGpuCapturerHandle = nullptr ; # endif TArray<TSharedPtr<FD3D12Adapter>> ChosenAdapters ; void)",
    "insertText": "FindAdapter()"
  },
  {
    "label": "FScopedResourceBarrier()",
    "kind": "Method",
    "detail": "Function (} ; class FScopedResourceBarrier { private : FD3D12ContextCommon& Context ; FD3D12Resource* const Resource ; FD3D12ResourceLocation* const ResourceLocation ; D3D12_RESOURCE_STATES const DesiredState ; uint32 const Subresource ; bool bRestoreState = false ; public :)",
    "insertText": "FScopedResourceBarrier(FD3D12ContextCommon& Context, FD3D12Resource* Resource, FD3D12ResourceLocation* InResourceLocation, D3D12_RESOURCE_STATES DesiredState, uint32 Subresource) : Context (Context) , Resource(Resource) , ResourceLocation(InResourceLocation) , DesiredState(DesiredState) , Subresource (Subresource)"
  },
  {
    "label": "TransitionResource()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "TransitionResource(Resource, D3D12_RESOURCE_STATE_TBD, DesiredState, Subresource)"
  },
  {
    "label": "GetDefaultResourceState()",
    "kind": "Method",
    "detail": "Function (} else { D3D12_RESOURCE_STATES CurrentState = Resource ->)",
    "insertText": "GetDefaultResourceState()"
  },
  {
    "label": "AddTransitionBarrier()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "AddTransitionBarrier(Resource, CurrentState, DesiredState, Subresource)"
  },
  {
    "label": "FScopedResourceBarrier()",
    "kind": "Method",
    "detail": "Function (bRestoreState = true ; } } } ~)",
    "insertText": "FScopedResourceBarrier()"
  },
  {
    "label": "AddTransitionBarrier()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "AddTransitionBarrier(Resource, DesiredState, Resource->GetDefaultResourceState(), Subresource)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Resource->RequiresResourceStateTracking() && ResourceLocation)"
  },
  {
    "label": "ConditionalClearShaderResource()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "ConditionalClearShaderResource(ResourceLocation, EShaderParameterTypeMask::SRVMask | EShaderParameterTypeMask::UAVMask)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} } } ; const TCHAR*)",
    "insertText": "LexToString(DXGI_FORMAT Format)"
  }
]