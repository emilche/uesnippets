[
  {
    "label": "FWindowsApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindowsApplication"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FWindowsWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindowsWindow"
  },
  {
    "label": "FWindowsWindow()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" GenericPlatform / GenericWindow . h \" # include \" Templates / SharedPointer . h \" # include \" Windows / AllowWindowsPlatformTypes . h \" # include<Ole2 . h> # include<oleidl . h> # include \" Windows / HideWindowsPlatformTypes . h \" class FWindowsApplication ; enum class EWindowTransparency ; class FWindowsWindow : public FGenericWindow,public IDropTarget { public : const TCHAR AppWindowClass [ ] ; public : ~)",
    "insertText": "FWindowsWindow()"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FWindowsWindow>)",
    "insertText": "Make()"
  },
  {
    "label": "GetHWnd()",
    "kind": "Method",
    "detail": "Function (HWND)",
    "insertText": "GetHWnd()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(class FWindowsApplication* const Application, const TSharedRef<FGenericWindowDefinition>& InDefinition, HINSTANCE InHInstance, const TSharedPtr<FWindowsWindow>& InParent, const bool bShowImmediately)"
  },
  {
    "label": "IsRegularWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRegularWindow()"
  },
  {
    "label": "AdjustWindowRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustWindowRegion(int32 Width, int32 Height)"
  },
  {
    "label": "AdjustCachedSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustCachedSize(FVector2D& Size)"
  },
  {
    "label": "GetDPIScaleFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDPIScaleFactor()"
  },
  {
    "label": "IsManualManageDPIChanges()",
    "kind": "Method",
    "detail": "Function (DPIScaleFactor = Value ; } bool)",
    "insertText": "IsManualManageDPIChanges()"
  },
  {
    "label": "SetManualManageDPIChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetManualManageDPIChanges(const bool bManualDPIChanges)"
  },
  {
    "label": "OnParentWindowMinimized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnParentWindowMinimized()"
  },
  {
    "label": "OnParentWindowRestored()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnParentWindowRestored()"
  },
  {
    "label": "OnTransparencySupportChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransparencySupportChanged(EWindowTransparency NewTransparency)"
  },
  {
    "label": "GetAspectRatio()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAspectRatio()"
  },
  {
    "label": "ReshapeWindow()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ReshapeWindow(int32 X, int32 Y, int32 Width, int32 Height)"
  },
  {
    "label": "GetFullScreenInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFullScreenInfo(int32& X, int32& Y, int32& Width, int32& Height)"
  },
  {
    "label": "MoveWindowTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveWindowTo(int32 X, int32 Y)"
  },
  {
    "label": "BringToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringToFront(bool bForce = false)"
  },
  {
    "label": "HACK_ForceToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HACK_ForceToFront()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "Minimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Minimize()"
  },
  {
    "label": "Maximize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Maximize()"
  },
  {
    "label": "Restore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restore()"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Show()"
  },
  {
    "label": "Hide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Hide()"
  },
  {
    "label": "SetWindowMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowMode(EWindowMode::Type NewWindowMode)"
  },
  {
    "label": "GetWindowMode()",
    "kind": "Method",
    "detail": "Function (EWindowMode::Type)",
    "insertText": "GetWindowMode()"
  },
  {
    "label": "IsMinimized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMinimized()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "GetRestoredDimensions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRestoredDimensions(int32& X, int32& Y, int32& Width, int32& Height)"
  },
  {
    "label": "SetWindowFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowFocus()"
  },
  {
    "label": "SetOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOpacity(const float InOpacity)"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enable(bool bEnable)"
  },
  {
    "label": "IsPointInWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPointInWindow(int32 X, int32 Y)"
  },
  {
    "label": "GetWindowBorderSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWindowBorderSize()"
  },
  {
    "label": "GetWindowTitleBarSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWindowTitleBarSize()"
  },
  {
    "label": "GetOSWindowHandle()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetOSWindowHandle()"
  },
  {
    "label": "IsFullscreenSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullscreenSupported()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const TCHAR* const Text)"
  },
  {
    "label": "DrawAttention()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAttention(const FWindowDrawAttentionParameters& Parameters)"
  },
  {
    "label": "QueryInterface()",
    "kind": "Method",
    "detail": "Function (public : HRESULT STDCALL)",
    "insertText": "QueryInterface(REFIID iid, void ** ppvObject)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (ULONG STDCALL)",
    "insertText": "AddRef(void)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (ULONG STDCALL)",
    "insertText": "Release(void)"
  },
  {
    "label": "DragEnter()",
    "kind": "Method",
    "detail": "Function (public : HRESULT STDCALL)",
    "insertText": "DragEnter(__RPC__in_opt IDataObject *DataObjectPointer, ::DWORD KeyState, POINTL CursorPosition, __RPC__inout ::DWORD *CursorEffect)"
  },
  {
    "label": "DragOver()",
    "kind": "Method",
    "detail": "Function (HRESULT STDCALL)",
    "insertText": "DragOver(::DWORD KeyState, POINTL CursorPosition, __RPC__inout ::DWORD *CursorEffect)"
  },
  {
    "label": "DragLeave()",
    "kind": "Method",
    "detail": "Function (HRESULT STDCALL)",
    "insertText": "DragLeave(void)"
  },
  {
    "label": "Drop()",
    "kind": "Method",
    "detail": "Function (HRESULT STDCALL)",
    "insertText": "Drop(__RPC__in_opt IDataObject *DataObjectPointer, ::DWORD KeyState, POINTL CursorPosition, __RPC__inout ::DWORD *CursorEffect)"
  },
  {
    "label": "UpdateVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVisibility()"
  },
  {
    "label": "MakeWindowRegionObject()",
    "kind": "Method",
    "detail": "Function (HRGN)",
    "insertText": "MakeWindowRegionObject(bool bIncludeBorderWhenMaximized)"
  },
  {
    "label": "DisableTouchFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableTouchFeedback()"
  }
]