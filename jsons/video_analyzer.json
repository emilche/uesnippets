[
  {
    "label": "VideoAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoAnalyzer"
  },
  {
    "label": "FrameComparison",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameComparison"
  },
  {
    "label": "Sample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Sample"
  },
  {
    "label": "CapturedFrameForwarder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CapturedFrameForwarder"
  },
  {
    "label": "FrameWithPsnr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameWithPsnr"
  },
  {
    "label": "VideoAnalyzer()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_VIDEO_ANALYZER_H_ # define VIDEO_VIDEO_ANALYZER_H_ # include<deque> # include<map> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / numerics / samples_stats_counter . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / test / metrics / metric . h \" # include \" api / video / video_source_interface . h \" # include \" modules / rtp_rtcp / source / rtp_packet . h \" # include \" modules / rtp_rtcp / source / video_rtp_depacketizer . h \" # include \" rtc_base / event . h \" # include \" rtc_base / numerics / running_statistics . h \" # include \" rtc_base / platform_thread . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / time_utils . h \" # include \" test / layer_filtering_transport . h \" # include \" test / rtp_file_writer . h \" namespace webrtc { class VideoAnalyzer : public PacketReceiver,public Transport,public rtc::VideoSinkInterface<VideoFrame> { public :)",
    "insertText": "VideoAnalyzer(test::LayerFilteringTransport* transport, const std::string& test_label, double avg_psnr_threshold, double avg_ssim_threshold, int duration_frames, TimeDelta test_duration, FILE* graph_data_output_file, const std::string& graph_title, uint32_t ssrc_to_analyze, uint32_t rtx_ssrc_to_analyze, size_t selected_stream, int selected_sl, int selected_tl, bool is_quick_test_enabled, Clock* clock, std::string rtp_dump_name, TaskQueueBase* task_queue)"
  },
  {
    "label": "VideoAnalyzer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoAnalyzer()"
  },
  {
    "label": "SetReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceiver(PacketReceiver* receiver)"
  },
  {
    "label": "SetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSource(rtc::VideoSourceInterface<VideoFrame>* video_source, bool respect_sink_wants)"
  },
  {
    "label": "SetCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCall(Call* call)"
  },
  {
    "label": "SetSendStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendStream(VideoSendStream* stream)"
  },
  {
    "label": "SetReceiveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceiveStream(VideoReceiveStreamInterface* stream)"
  },
  {
    "label": "SetAudioReceiveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioReceiveStream(AudioReceiveStreamInterface* recv_stream)"
  },
  {
    "label": "InputInterface()",
    "kind": "Method",
    "detail": "Function (rtc::VideoSinkInterface<VideoFrame>*)",
    "insertText": "InputInterface()"
  },
  {
    "label": "OutputInterface()",
    "kind": "Method",
    "detail": "Function (rtc::VideoSourceInterface<VideoFrame>*)",
    "insertText": "OutputInterface()"
  },
  {
    "label": "DeliverPacket()",
    "kind": "Method",
    "detail": "Function (DeliveryStatus)",
    "insertText": "DeliverPacket(MediaType media_type, rtc::CopyOnWriteBuffer packet, int64_t packet_time_us)"
  },
  {
    "label": "PreEncodeOnFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEncodeOnFrame(const VideoFrame& video_frame)"
  },
  {
    "label": "PostEncodeOnFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEncodeOnFrame(size_t stream_id, uint32_t timestamp)"
  },
  {
    "label": "SendRtp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtp(const uint8_t* packet, size_t length, const PacketOptions& options)"
  },
  {
    "label": "SendRtcp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtcp(const uint8_t* packet, size_t length)"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrame(const VideoFrame& video_frame)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait()"
  },
  {
    "label": "StartMeasuringCpuProcessTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartMeasuringCpuProcessTime()"
  },
  {
    "label": "StopMeasuringCpuProcessTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopMeasuringCpuProcessTime()"
  },
  {
    "label": "StartExcludingCpuThreadTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartExcludingCpuThreadTime() RTC_LOCKS_EXCLUDED(cpu_measurement_lock_)"
  },
  {
    "label": "StopExcludingCpuThreadTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopExcludingCpuThreadTime() RTC_LOCKS_EXCLUDED(cpu_measurement_lock_)"
  },
  {
    "label": "FrameComparison()",
    "kind": "Method",
    "detail": "Function (test::LayerFilteringTransport* const transport_ ; PacketReceiver* receiver_ ; private : struct FrameComparison {)",
    "insertText": "FrameComparison()"
  },
  {
    "label": "FrameComparison()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameComparison(const VideoFrame& reference, const VideoFrame& render, bool dropped, int64_t input_time_ms, int64_t send_time_ms, int64_t recv_time_ms, int64_t render_time_ms, size_t encoded_frame_size)"
  },
  {
    "label": "FrameComparison()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameComparison(bool dropped, int64_t input_time_ms, int64_t send_time_ms, int64_t recv_time_ms, int64_t render_time_ms, size_t encoded_frame_size)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (absl::optional<VideoFrame> reference ; absl::optional<VideoFrame> render ; bool dropped ; int64_t input_time_ms ; int64_t send_time_ms ; int64_t recv_time_ms ; int64_t render_time_ms ; size_t encoded_frame_size ; } ; struct Sample {)",
    "insertText": "Sample(int dropped, int64_t input_time_ms, int64_t send_time_ms, int64_t recv_time_ms, int64_t render_time_ms, size_t encoded_frame_size, double psnr, double ssim)"
  },
  {
    "label": "CapturedFrameForwarder()",
    "kind": "Method",
    "detail": "Function (int dropped ; int64_t input_time_ms ; int64_t send_time_ms ; int64_t recv_time_ms ; int64_t render_time_ms ; size_t encoded_frame_size ; double psnr ; double ssim ; } ; class CapturedFrameForwarder : public rtc::VideoSinkInterface<VideoFrame>,public rtc::VideoSourceInterface<VideoFrame> { public :)",
    "insertText": "CapturedFrameForwarder(VideoAnalyzer* analyzer, Clock* clock, int frames_to_capture, TimeDelta test_duration)"
  },
  {
    "label": "SetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSource(rtc::VideoSourceInterface<VideoFrame>* video_source)"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnFrame(const VideoFrame& video_frame) RTC_LOCKS_EXCLUDED(lock_)"
  },
  {
    "label": "AddOrUpdateSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateSink(rtc::VideoSinkInterface<VideoFrame>* sink, const rtc::VideoSinkWants& wants) RTC_LOCKS_EXCLUDED(lock_)"
  },
  {
    "label": "RemoveSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSink(rtc::VideoSinkInterface<VideoFrame>* sink) RTC_LOCKS_EXCLUDED(lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (VideoAnalyzer* const analyzer_ ; Mutex lock_ ; rtc::VideoSinkInterface<VideoFrame>* send_stream_input_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  },
  {
    "label": "IsInSelectedSpatialAndTemporalLayer()",
    "kind": "Method",
    "detail": "Function (const int frames_to_capture_ ; const Timestamp test_end_ ; } ; struct FrameWithPsnr { double psnr ; VideoFrame frame ; } ; bool)",
    "insertText": "IsInSelectedSpatialAndTemporalLayer(const RtpPacket& rtp_packet)"
  },
  {
    "label": "AddFrameComparison()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFrameComparison(const VideoFrame& reference, const VideoFrame& render, bool dropped, int64_t render_time_ms) RTC_EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "PollStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollStats() RTC_LOCKS_EXCLUDED(comparison_lock_)"
  },
  {
    "label": "FrameComparisonThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameComparisonThread(void* obj)"
  },
  {
    "label": "CompareFrames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareFrames()"
  },
  {
    "label": "PopComparison()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopComparison(FrameComparison* comparison)"
  },
  {
    "label": "FrameRecorded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameRecorded() RTC_EXCLUSIVE_LOCKS_REQUIRED(comparison_lock_)"
  },
  {
    "label": "AllFramesRecorded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllFramesRecorded() RTC_LOCKS_EXCLUDED(comparison_lock_)"
  },
  {
    "label": "AllFramesRecordedLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllFramesRecordedLocked() RTC_EXCLUSIVE_LOCKS_REQUIRED(comparison_lock_)"
  },
  {
    "label": "FrameProcessed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FrameProcessed() RTC_LOCKS_EXCLUDED(comparison_lock_)"
  },
  {
    "label": "PrintResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintResults() RTC_LOCKS_EXCLUDED(lock_, comparison_lock_)"
  },
  {
    "label": "PerformFrameComparison()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformFrameComparison(const FrameComparison& comparison) RTC_LOCKS_EXCLUDED(comparison_lock_)"
  },
  {
    "label": "PrintResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintResult(absl::string_view result_type, const SamplesStatsCounter& stats, webrtc::test::Unit unit, webrtc::test::ImprovementDirection improvement_direction)"
  },
  {
    "label": "PrintResultWithExternalMean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintResultWithExternalMean(absl::string_view result_type, double mean, const SamplesStatsCounter& stats, webrtc::test::Unit unit, webrtc::test::ImprovementDirection improvement_direction)"
  },
  {
    "label": "PrintSamplesToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintSamplesToFile(void) RTC_LOCKS_EXCLUDED(comparison_lock_)"
  },
  {
    "label": "AddCapturedFrameForComparison()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCapturedFrameForComparison(const VideoFrame& video_frame) RTC_LOCKS_EXCLUDED(lock_, comparison_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Call* call_ ; VideoSendStream* send_stream_ ; VideoReceiveStreamInterface* receive_stream_ ; AudioReceiveStreamInterface* audio_receive_stream_ ; CapturedFrameForwarder captured_frame_forwarder_ ; const std::string test_label_ ; FILE* const graph_data_output_file_ ; const std::string graph_title_ ; const uint32_t ssrc_to_analyze_ ; const uint32_t rtx_ssrc_to_analyze_ ; const size_t selected_stream_ ; const int selected_sl_ ; const int selected_tl_ ; Mutex comparison_lock_ ; std::vector<Sample> samples_)",
    "insertText": "RTC_GUARDED_BY(comparison_lock_)"
  },
  {
    "label": "RTC_ACQUIRED_BEFORE()",
    "kind": "Method",
    "detail": "Function (size_t last_fec_bytes_ ; Mutex lock_)",
    "insertText": "RTC_ACQUIRED_BEFORE(comparison_lock_) RTC_ACQUIRED_BEFORE(cpu_measurement_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Mutex cpu_measurement_lock_ ; int64_t cpu_time_)",
    "insertText": "RTC_GUARDED_BY(cpu_measurement_lock_)"
  }
]