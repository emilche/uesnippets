[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FParameterStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParameterStore"
  },
  {
    "label": "TStoreKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStoreKey"
  },
  {
    "label": "DIRECTLINK_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIRECTLINK_API"
  },
  {
    "label": "FParameterDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParameterDetails"
  },
  {
    "label": "TStoreKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / Transform . h \" # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" DirectLinkCommon . h \" # include \" DirectLinkSceneGraphNode . h \" # include \" DirectLinkSerialMethods . h \" # include \" HAL / Platform . h \" # include \" Logging / LogMacros . h \" # include \" Misc / AssertionMacros . h \" # include \" Serialization / MemoryReader . h \" # include \" UObject / NameTypes . h \" class FArchive ; namespace DirectLink { class FParameterStore ; template<T,S = T> class TStoreKey { public :)",
    "insertText": "TStoreKey(const T& InitialValue = {}) : NativeValue(InitialValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const T&)",
    "insertText": "Get()"
  },
  {
    "label": "SerializeAll()",
    "kind": "Method",
    "detail": "Function (NativeValue = InValue ; return NativeValue ; } private : FParameterStore ; T NativeValue ; } ; class FParameterStoreSnapshot { public : void)",
    "insertText": "SerializeAll(FArchive& Ar)"
  },
  {
    "label": "GetValueAs()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "GetValueAs(int32 I, T& Out)"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function (FMemoryReader)",
    "insertText": "Ar(Parameters[I].Buffer)"
  },
  {
    "label": "GetValueAs()",
    "kind": "Method",
    "detail": "Function (} } return false ; } template<T> bool)",
    "insertText": "GetValueAs(FName Name, T& Out)"
  },
  {
    "label": "GetParameterIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetParameterIndex(FName ParameterName)"
  },
  {
    "label": "AddParam()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddParam(FName Name, Reflect::ESerialMethod StorageMethod, void* StorageLocation)"
  },
  {
    "label": "ReserveParamCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveParamCount(uint32 PropCount)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Parameters .)",
    "insertText": "Reserve(PropCount)"
  },
  {
    "label": "Hash()",
    "kind": "Method",
    "detail": "Function (} FElementHash)",
    "insertText": "Hash()"
  },
  {
    "label": "FParameterStore()",
    "kind": "Method",
    "detail": "Function (private : class FParameterStore ; struct FParameterDetails { FName Name ; Reflect::ESerialMethod StorageMethod ; TArray<uint8> Buffer ; } ; TArray<FParameterDetails> Parameters ; } ; class FParameterStore { public :)",
    "insertText": "FParameterStore()"
  },
  {
    "label": "FParameterStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FParameterStore(const FParameterStore&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FParameterStore&)",
    "insertText": "operator(const FParameterStore&)"
  },
  {
    "label": "FParameterStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FParameterStore(FParameterStore&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FParameterStore&)",
    "insertText": "operator(FParameterStore&&)"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (template<T,S> TStoreKey<T,S>&)",
    "insertText": "RegisterParameter(TStoreKey<T, S>& Key, FName Name)"
  },
  {
    "label": "AddDefaulted_GetRef()",
    "kind": "Method",
    "detail": "Function (FParameterDetails& NewParameter = Parameters .)",
    "insertText": "AddDefaulted_GetRef()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (NewParameter . Name = Name ; NewParameter . StorageLocation =& Key . NativeValue ;)",
    "insertText": "static_assert(Reflect::TDefaultSerialMethod<S>::Value != Reflect::ESerialMethod::_NotImplementedYet, \"Key type not exposed to serialization\")"
  },
  {
    "label": "GetParameterCount()",
    "kind": "Method",
    "detail": "Function (NewParameter . StorageMethod = Reflect::TDefaultSerialMethod<S>::Value ; return Key ; } uint32)",
    "insertText": "GetParameterCount()"
  },
  {
    "label": "GetParameterIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetParameterIndex(FName Name)"
  },
  {
    "label": "HasParameterNamed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasParameterNamed(FName Name)"
  },
  {
    "label": "GetParameterName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetParameterName(int32 Index)"
  },
  {
    "label": "GetValueAs()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "GetValueAs(FName ParameterName, T& Out)"
  },
  {
    "label": "GetParameterIndex()",
    "kind": "Method",
    "detail": "Function (int32 I =)",
    "insertText": "GetParameterIndex(ParameterName)"
  },
  {
    "label": "Out()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Out(T*)(Parameters[I].StorageLocation)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const FParameterStoreSnapshot& NewValues)"
  },
  {
    "label": "FSnapshotProxy()",
    "kind": "Method",
    "detail": "Function (private : struct FParameterDetails { FName Name ; void* StorageLocation ; Reflect::ESerialMethod StorageMethod ; } ; TArray<FParameterDetails> Parameters ; } ; class FSnapshotProxy { public :)",
    "insertText": "FSnapshotProxy(FParameterStoreSnapshot& Storage, bool bIsSaving) : Storage(Storage) , bIsSaving(bIsSaving)"
  },
  {
    "label": "IsSaving()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSaving()"
  },
  {
    "label": "AddParam()",
    "kind": "Method",
    "detail": "Function (Storage .)",
    "insertText": "AddParam(SerialTag, Reflect::TDefaultSerialMethod<T>::Value, &Item)"
  }
]