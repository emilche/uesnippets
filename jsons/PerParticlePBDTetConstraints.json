[
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FPerParticlePBDTetConstraints()",
    "kind": "Method",
    "detail": "Function (typedef Softs::FPBDTetConstraintsBase Base ; using Base::Constraints ; public :)",
    "insertText": "FPerParticlePBDTetConstraints(const FSolverParticles& InParticles, TArray<TVec4<int32>>&& InConstraints, const FSolverReal InStiffness = (FSolverReal)1.) : Base(InParticles, MoveTemp(InConstraints), InStiffness)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TVec4<int32>& Constraint = Constraints [ i ] ; int32 i1 = Constraint [ 0 ] ; int32 i2 = Constraint [ 1 ] ; int32 i3 = Constraint [ 2 ] ; int32 i4 = Constraint [ 3 ] ;)",
    "insertText": "if(i1 >= ParticleToConstraints.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ParticleToConstraints .)",
    "insertText": "SetNum(i1 + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(i2 >= ParticleToConstraints.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ParticleToConstraints .)",
    "insertText": "SetNum(i2 + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(i3 >= ParticleToConstraints.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ParticleToConstraints .)",
    "insertText": "SetNum(i3 + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(i4 >= ParticleToConstraints.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ParticleToConstraints .)",
    "insertText": "SetNum(i4 + 1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ParticleToConstraints [ i1 ] .)",
    "insertText": "Add(i)"
  },
  {
    "label": "FPerParticlePBDTetConstraints()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FPerParticlePBDTetConstraints()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FSolverParticles& InParticles, const FSolverReal Dt, const int32 Index)"
  },
  {
    "label": "GetGradients()",
    "kind": "Method",
    "detail": "Function (int32 CIndex = ParticleToConstraints [ Index ] [ i ] ; const TVec4<int32>& Constraint = Constraints [ CIndex ] ; int32 i1 = Constraint [ 0 ] ; int32 i2 = Constraint [ 1 ] ; int32 i3 = Constraint [ 2 ] ; int32 i4 = Constraint [ 3 ] ; const TVec4<FSolverVec3> Grads =)",
    "insertText": "GetGradients(InParticles, CIndex)"
  },
  {
    "label": "GetScalingFactor()",
    "kind": "Method",
    "detail": "Function (const FSolverReal S =)",
    "insertText": "GetScalingFactor(InParticles, CIndex, Grads)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "P(i1) -= S * InParticles.InvM(i1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Index == i2)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "P(i2) -= S * InParticles.InvM(i2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Index == i3)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "P(i3) -= S * InParticles.InvM(i3)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(Index == i4)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "P(i4) -= S * InParticles.InvM(i4)"
  }
]