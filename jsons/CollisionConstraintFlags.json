[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FIgnoreCollisionManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIgnoreCollisionManager"
  },
  {
    "label": "FStorageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStorageData"
  },
  {
    "label": "FIgnoreEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIgnoreEntry"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (using FPendingMap = TMap<FHandleID,TArray<FHandleID>> ; struct FStorageData { FPendingMap PendingActivations ; FDeactivationSet PendingDeactivations ; int32 ExternalTimestamp = INDEX_NONE ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "FIgnoreCollisionManager()",
    "kind": "Method",
    "detail": "Function (ExternalTimestamp = INDEX_NONE ; } } ;)",
    "insertText": "FIgnoreCollisionManager() : StorageDataProducer(nullptr)"
  },
  {
    "label": "GetNewStorageData()",
    "kind": "Method",
    "detail": "Function (StorageDataProducer =)",
    "insertText": "GetNewStorageData()"
  },
  {
    "label": "ContainsHandle()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsHandle(FHandleID Body0)"
  },
  {
    "label": "IgnoresCollision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IgnoresCollision(FHandleID Body0, FHandleID Body1)"
  },
  {
    "label": "NumIgnoredCollision()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumIgnoredCollision(FHandleID Body0)"
  },
  {
    "label": "IgnoresCollision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IgnoresCollision(const FGeometryParticleHandle* Particle0, const FGeometryParticleHandle* Particle1)"
  },
  {
    "label": "AddIgnoreCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIgnoreCollisions(FGeometryParticleHandle* Particle0, FGeometryParticleHandle* Particle1)"
  },
  {
    "label": "RemoveIgnoreCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveIgnoreCollisions(FGeometryParticleHandle* Particle0, FGeometryParticleHandle* Particle1)"
  },
  {
    "label": "GetPendingActivationsForGameThread()",
    "kind": "Method",
    "detail": "Function (FPendingMap&)",
    "insertText": "GetPendingActivationsForGameThread(int32 ExternalTimestamp)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (StorageDataProducer -> ExternalTimestamp = ExternalTimestamp ; } else {)",
    "insertText": "ensure(StorageDataProducer->ExternalTimestamp == ExternalTimestamp)"
  },
  {
    "label": "GetPendingDeactivationsForGameThread()",
    "kind": "Method",
    "detail": "Function (} return StorageDataProducer -> PendingActivations ; } FDeactivationSet&)",
    "insertText": "GetPendingDeactivationsForGameThread(int32 ExternalTimestamp)"
  },
  {
    "label": "PushProducerStorageData_External()",
    "kind": "Method",
    "detail": "Function (} return StorageDataProducer -> PendingDeactivations ; } void)",
    "insertText": "PushProducerStorageData_External(int32 ExternalTimestamp)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (StorageDataQueue .)",
    "insertText": "Enqueue(StorageDataProducer)"
  },
  {
    "label": "ProcessPendingQueues()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ProcessPendingQueues(FPBDRigidsSolver& Solver)"
  },
  {
    "label": "PopStorageData_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopStorageData_Internal(int32 ExternalTimestamp)"
  },
  {
    "label": "SetIgnoreCollisionFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIgnoreCollisionFlag(FPBDRigidParticleHandle* Rigid, const bool bUsesIgnoreCollisionManager)"
  },
  {
    "label": "AddIgnoreCollisionsImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIgnoreCollisionsImpl(FHandleID Body0, FHandleID Body1)"
  },
  {
    "label": "RemoveIgnoreCollisionsImpl()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveIgnoreCollisionsImpl(FHandleID Body0, FHandleID Body1)"
  },
  {
    "label": "FIgnoreEntry()",
    "kind": "Method",
    "detail": "Function (struct FIgnoreEntry {)",
    "insertText": "FIgnoreEntry()"
  },
  {
    "label": "FIgnoreEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIgnoreEntry(FHandleID InId) : Id(InId) , Count(1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FStorageData* StorageData ;)",
    "insertText": "if(StorageDataFreePool.Dequeue(StorageData))"
  },
  {
    "label": "ReleaseStorageData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseStorageData(FStorageData *InStorageData)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (StorageDataFreePool .)",
    "insertText": "Enqueue(InStorageData)"
  }
]