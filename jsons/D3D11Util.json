[
  {
    "label": "FRHIBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBuffer"
  },
  {
    "label": "FRHITexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITexture"
  },
  {
    "label": "FRHIShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIShader"
  },
  {
    "label": "FD3D11ResizeViewportState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D11ResizeViewportState"
  },
  {
    "label": "FD3D11LockedKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11LockedKey"
  },
  {
    "label": "FD3D11LockedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D11LockedData"
  },
  {
    "label": "FD3D11BoundRenderTargets",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11BoundRenderTargets"
  },
  {
    "label": "FD3D11RHIGenericCommandString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D11RHIGenericCommandString"
  },
  {
    "label": "TD3D11RHIGenericCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TD3D11RHIGenericCommand"
  },
  {
    "label": "FScopedD3D11RHIThreadStaller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedD3D11RHIThreadStaller"
  },
  {
    "label": "D3D11RHI_IMMEDIATE_CONTEXT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHICommandList . h \" # include \" RHIDefinitions . h \" # include \" Templates / RefCounting . h \" # include \" Windows / D3D11ThirdParty . h \" class FRHIBuffer ; class FRHITexture ; # define)",
    "insertText": "D3D11RHI_IMMEDIATE_CONTEXT(GD3D11RHI->GetDeviceContext()) #define D3D11RHI_DEVICE (GD3D11RHI->GetDevice()) extern D3D11RHI_API void VerifyD3D11ResultNoExit(HRESULT Result, const ANSICHAR* Code, const ANSICHAR* Filename, uint32 Line, ID3D11Device* Device)"
  },
  {
    "label": "VerifyD3D11Result()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API void)",
    "insertText": "VerifyD3D11Result(HRESULT Result,const ANSICHAR* Code,const ANSICHAR* Filename,uint32 Line, ID3D11Device* Device)"
  },
  {
    "label": "VerifyD3D11ShaderResult()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API void)",
    "insertText": "VerifyD3D11ShaderResult(class FRHIShader* Shader, HRESULT Result, const ANSICHAR* Code, const ANSICHAR* Filename, uint32 Line, ID3D11Device* Device)"
  },
  {
    "label": "VerifyD3D11CreateTextureResult()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API void)",
    "insertText": "VerifyD3D11CreateTextureResult(HRESULT D3DResult, int32 UEFormat,const ANSICHAR* Code,const ANSICHAR* Filename,uint32 Line, uint32 SizeX,uint32 SizeY,uint32 SizeZ,uint8 D3DFormat,uint32 NumMips,uint32 Flags, D3D11_USAGE Usage, uint32 CPUAccessFlags, uint32 MiscFlags, uint32 SampleCount, uint32 SampleQuality, const void* SubResPtr, uint32 SubResPitch, uint32 SubResSlicePitch, ID3D11Device* Device, const TCHAR* DebugName)"
  },
  {
    "label": "VerifyD3D11ResizeViewportResult()",
    "kind": "Method",
    "detail": "Function (struct FD3D11ResizeViewportState { uint32 SizeX ; uint32 SizeY ; DXGI_FORMAT Format ; bool bIsFullscreen ; } ; D3D11RHI_API void)",
    "insertText": "VerifyD3D11ResizeViewportResult(HRESULT D3DResult, const ANSICHAR* Code, const ANSICHAR* Filename, uint32 Line, const FD3D11ResizeViewportState& OldState, const FD3D11ResizeViewportState& NewState, ID3D11Device* Device)"
  },
  {
    "label": "VerifyD3D11CreateViewResult()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API void)",
    "insertText": "VerifyD3D11CreateViewResult(HRESULT D3DResult, const ANSICHAR* Code, const ANSICHAR* Filename, uint32 Line, ID3D11Device* Device, FRHITexture* Texture, const D3D11_UNORDERED_ACCESS_VIEW_DESC& Desc)"
  },
  {
    "label": "VerifyD3D11CreateViewResult()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API void)",
    "insertText": "VerifyD3D11CreateViewResult(HRESULT D3DResult, const ANSICHAR* Code, const ANSICHAR* Filename, uint32 Line, ID3D11Device* Device, FRHIBuffer* Buffer, const D3D11_UNORDERED_ACCESS_VIEW_DESC& Desc)"
  },
  {
    "label": "VERIFYD3D11RESULT_EX()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "VERIFYD3D11RESULT_EX(x, Device)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = x ;)",
    "insertText": "if(FAILED(hr))"
  },
  {
    "label": "VERIFYD3D11RESULT()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VERIFYD3D11RESULT(x)"
  },
  {
    "label": "VERIFYD3D11RESULT_NOEXIT()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VERIFYD3D11RESULT_NOEXIT(x)"
  },
  {
    "label": "VERIFYD3D11SHADERRESULT()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VERIFYD3D11SHADERRESULT(Result, Shader, Device)"
  },
  {
    "label": "hr()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "hr(Result)"
  },
  {
    "label": "VERIFYD3D11CREATETEXTURERESULT()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VERIFYD3D11CREATETEXTURERESULT(x,UEFormat,SizeX,SizeY,SizeZ,Format,NumMips,Flags,Usage,CPUAccessFlags,MiscFlags,SampleCount,SampleQuality,SubResPtr,SubResPitch,SubResSlicePitch,Device,DebugName)"
  },
  {
    "label": "VERIFYD3D11RESIZEVIEWPORTRESULT()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VERIFYD3D11RESIZEVIEWPORTRESULT(x, OldState, NewState, Device)"
  },
  {
    "label": "VERIFYD3D11CREATEVIEWRESULT()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VERIFYD3D11CREATEVIEWRESULT(x, Device, Resource, Desc)"
  },
  {
    "label": "VerifyComRefCount()",
    "kind": "Method",
    "detail": "Function (} } D3D11RHI_API void)",
    "insertText": "VerifyComRefCount(IUnknown* Object,int32 ExpectedRefs,const TCHAR* Code,const TCHAR* Filename,int32 Line)"
  },
  {
    "label": "checkComRefCount()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "checkComRefCount(Obj,ExpectedRefs) VerifyComRefCount(Obj,ExpectedRefs,TEXT(#Obj),TEXT(__FILE__),__LINE__) FString GetD3D11ErrorString(HRESULT ErrorCode, ID3D11Device* Device)"
  },
  {
    "label": "FD3D11LockedKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D11LockedKey(ID3D11Resource* InSource, uint32 InSubresource = 0) : SourceObject(InSource) , Subresource (InSubresource)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FD3D11LockedKey& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FD3D11LockedKey& K)"
  },
  {
    "label": "FD3D11LockedData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FD3D11LockedData { TRefCountPtr<ID3D11Resource> StagingResource ; uint32 Pitch ; uint32 DepthPitch ;)",
    "insertText": "FD3D11LockedData() : bAllocDataWasUsed(false) , bLockDeferred(false)"
  },
  {
    "label": "AllocData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocData(uint32 Size)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Data(uint8*)FMemory::Malloc(Size, 16)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (bAllocDataWasUsed = true ; } void)",
    "insertText": "SetData(void* InData)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Data(uint8*)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetData()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Data)"
  },
  {
    "label": "FD3D11BoundRenderTargets()",
    "kind": "Method",
    "detail": "Function (Data = 0 ; } private : uint8* Data ; bool bAllocDataWasUsed ; public : bool bLockDeferred ; } ; class FD3D11BoundRenderTargets { public :)",
    "insertText": "FD3D11BoundRenderTargets(ID3D11DeviceContext* InDeviceContext)"
  },
  {
    "label": "FD3D11BoundRenderTargets()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D11BoundRenderTargets()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; template<JobType,= TEnableIf<std::is_same_v<JobType,TFunction<)",
    "insertText": "void()>> || std::is_same_v<JobType, TFunction<void()"
  },
  {
    "label": "TD3D11RHIGenericCommand()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TD3D11RHIGenericCommand(JobType&& InRHIJob) : RHIJob(Forward<JobType>(InRHIJob))"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Execute(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "RHIJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIJob()"
  },
  {
    "label": "RunOnRHIThread()",
    "kind": "Method",
    "detail": "Function (} private : JobType RHIJob ; } ; template<JobType> void)",
    "insertText": "RunOnRHIThread(JobType&& InRHIJob)"
  },
  {
    "label": "GetImmediateCommandList()",
    "kind": "Method",
    "detail": "Function (typedef TD3D11RHIGenericCommand<JobType> CmdType ; FRHICommandListImmediate& RHICmdList =)",
    "insertText": "GetImmediateCommandList()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(RHICmdList.AllocCommand<CmdType>()) CmdType(Forward<JobType>(InRHIJob))"
  },
  {
    "label": "ShouldNotEnqueueRHICommand()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldNotEnqueueRHICommand()"
  },
  {
    "label": "FScopedD3D11RHIThreadStaller()",
    "kind": "Method",
    "detail": "Function (} struct FScopedD3D11RHIThreadStaller : public FScopedRHIThreadStaller {)",
    "insertText": "FScopedD3D11RHIThreadStaller(bool bDoStall = true) : FScopedRHIThreadStaller(FRHICommandListExecutor::GetImmediateCommandList(), bDoStall && IsInRenderingThread() && GRHICommandList.AreRHITasksActive())"
  }
]