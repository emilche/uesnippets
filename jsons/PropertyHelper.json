[
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "UField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UField"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "FDeltaIndexHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeltaIndexHelper"
  },
  {
    "label": "FSerializedPropertyPathScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSerializedPropertyPathScope"
  },
  {
    "label": "SkipWhitespace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SkipWhitespace(const TCHAR*& Str)"
  },
  {
    "label": "AreInstancedObjectsIdentical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreInstancedObjectsIdentical( UObject* ObjectA, UObject* ObjectB, uint32 PortFlags )"
  },
  {
    "label": "SerializeNext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeNext(FArchive &Ar, int32& Index)"
  },
  {
    "label": "SerializeNext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeNext(FArchive &OutBunch, FArchive &OutFull, int32 Index)"
  },
  {
    "label": "SerializeEarlyEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeEarlyEnd(FArchive &Ar)"
  },
  {
    "label": "FindOriginalType()",
    "kind": "Method",
    "detail": "Function (FPropertyTypeName)",
    "insertText": "FindOriginalType(const UField* Field)"
  },
  {
    "label": "FindOriginalType()",
    "kind": "Method",
    "detail": "Function (FPropertyTypeName)",
    "insertText": "FindOriginalType(const FProperty* Property)"
  },
  {
    "label": "ApplyRedirectsToPropertyType()",
    "kind": "Method",
    "detail": "Function (FPropertyTypeName)",
    "insertText": "ApplyRedirectsToPropertyType(FPropertyTypeName OldTypeName, const FProperty* Property = nullptr)"
  }
]