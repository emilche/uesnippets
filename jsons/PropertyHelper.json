[
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "UField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UField"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDeltaIndexHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeltaIndexHelper"
  },
  {
    "label": "FSerializedPropertyPathScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSerializedPropertyPathScope"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Logging / LogMacros . h \" # include \" UObject / NameTypes . h \" # include \" UObject / PropertyPathName . h \" # include \" UObject / PropertyTypeName . h \" # include \" UObject / ScriptDelegateFwd . h \" # include \" UObject / UObjectThreadContext . h \" # include \" UObject / WeakObjectPtrFwd . h \" # include \" PropertyHelper . generated . h \" class FProperty ; class UField ; class UFunction ; class UObject ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogEnum, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogProperty, Log, All)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "SkipWhitespace()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SkipWhitespace(const TCHAR*& Str)"
  },
  {
    "label": "AreInstancedObjectsIdentical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreInstancedObjectsIdentical(UObject* ObjectA, UObject* ObjectB, uint32 PortFlags)"
  },
  {
    "label": "FDeltaIndexHelper()",
    "kind": "Method",
    "detail": "Function (struct FDeltaIndexHelper {)",
    "insertText": "FDeltaIndexHelper()"
  },
  {
    "label": "SerializeNext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeNext(FArchive &Ar, int32& Index)"
  },
  {
    "label": "SerializeNext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeNext(FArchive &OutBunch, FArchive &OutFull, int32 Index)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Increment(int32 NewIndex)"
  },
  {
    "label": "SerializeEarlyEnd()",
    "kind": "Method",
    "detail": "Function (LastIndex = NewIndex ; } void)",
    "insertText": "SerializeEarlyEnd(FArchive &Ar)"
  },
  {
    "label": "ImportDelegateFromText()",
    "kind": "Method",
    "detail": "Function (int32 LastIndex = - 1 ; int32 LastIndexFull = - 1 ; } ; namespace DelegatePropertyTools { const TCHAR*)",
    "insertText": "ImportDelegateFromText(FScriptDelegate& Delegate, const UFunction* SignatureFunction, const TCHAR* Buffer, UObject* Parent, FOutputDevice* ErrorText)"
  },
  {
    "label": "NAME_OriginalType()",
    "kind": "Method",
    "detail": "Function (} namespace UE { # if WITH_EDITORONLY_DATA const FName)",
    "insertText": "NAME_OriginalType(ANSITEXTVIEW(\"OriginalType\"))"
  },
  {
    "label": "FindOriginalTypeName()",
    "kind": "Method",
    "detail": "Function (const FString*)",
    "insertText": "FindOriginalTypeName(const UField* Field)"
  },
  {
    "label": "FindOriginalTypeName()",
    "kind": "Method",
    "detail": "Function (const FString*)",
    "insertText": "FindOriginalTypeName(const FProperty* Property)"
  },
  {
    "label": "FindOriginalType()",
    "kind": "Method",
    "detail": "Function (FPropertyTypeName)",
    "insertText": "FindOriginalType(const UField* Field)"
  },
  {
    "label": "FindOriginalType()",
    "kind": "Method",
    "detail": "Function (FPropertyTypeName)",
    "insertText": "FindOriginalType(const FProperty* Property)"
  },
  {
    "label": "ApplyRedirectsToPropertyType()",
    "kind": "Method",
    "detail": "Function (# endif FPropertyTypeName)",
    "insertText": "ApplyRedirectsToPropertyType(FPropertyTypeName OldTypeName, const FProperty* Property = nullptr)"
  },
  {
    "label": "FSerializedPropertyPathScope()",
    "kind": "Method",
    "detail": "Function (class FSerializedPropertyPathScope { public : [ [ nodiscard ] ])",
    "insertText": "FSerializedPropertyPathScope(FUObjectSerializeContext* InContext, const FPropertyPathNameSegment& InSegment)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "if(InContext->bTrackSerializedPropertyPath)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Context = InContext ; Context -> SerializedPropertyPath .)",
    "insertText": "Push(InSegment)"
  },
  {
    "label": "FSerializedPropertyPathScope()",
    "kind": "Method",
    "detail": "Function (} # endif } ~)",
    "insertText": "FSerializedPropertyPathScope()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "if(Context)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Context -> SerializedPropertyPath .)",
    "insertText": "Pop()"
  },
  {
    "label": "FSerializedPropertyPathScope()",
    "kind": "Method",
    "detail": "Function (} # endif })",
    "insertText": "FSerializedPropertyPathScope(const FSerializedPropertyPathScope&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSerializedPropertyPathScope&)",
    "insertText": "operator(const FSerializedPropertyPathScope&)"
  }
]