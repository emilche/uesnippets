[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "UCameraComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraComponent"
  },
  {
    "label": "UMovieSceneEntitySystemLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystemLinker"
  },
  {
    "label": "FMovieSceneCameraCutParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneCameraCutParams"
  },
  {
    "label": "FCameraCutViewportPreviewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCameraCutViewportPreviewer"
  },
  {
    "label": "FCameraCutPlaybackCapability",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCameraCutPlaybackCapability"
  },
  {
    "label": "FPreAnimatedCameraCutEditorStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreAnimatedCameraCutEditorStorage"
  },
  {
    "label": "FSequenceInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequenceInstance"
  },
  {
    "label": "FPreAnimatedCameraCutEditorState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreAnimatedCameraCutEditorState"
  },
  {
    "label": "FPreAnimatedCameraCutEditorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreAnimatedCameraCutEditorTraits"
  },
  {
    "label": "THasAddReferencedObjectForComponent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "THasAddReferencedObjectForComponent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCameraCutEditorHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCameraCutEditorHandler"
  },
  {
    "label": "ShouldHandleViewportCameraCuts()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" CoreMinimal . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedStateStorage . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedStateTypes . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedStorageID . inl \" class AActor ; class FLevelEditorViewportClient ; class UCameraComponent ; class UMovieSceneEntitySystemLinker ; struct FMovieSceneCameraCutParams ; namespace UE::MovieScene { class FCameraCutViewportPreviewer ; struct FCameraCutPlaybackCapability ; struct FPreAnimatedCameraCutEditorStorage ; struct FSequenceInstance ; struct FPreAnimatedCameraCutEditorState { FVector ViewportLocation ; FRotator ViewportRotation ; float ViewportFOV = 0 . f ; } ; struct FPreAnimatedCameraCutEditorTraits : FPreAnimatedStateTraits { using KeyType = FLevelEditorViewportClient* ; using StorageType = FPreAnimatedCameraCutEditorState ; bool)",
    "insertText": "ShouldHandleViewportCameraCuts(UWorld* ViewportWorld)"
  },
  {
    "label": "CachePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (StorageType)",
    "insertText": "CachePreAnimatedValue(KeyType InKey)"
  },
  {
    "label": "RestorePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestorePreAnimatedValue(KeyType InKey, const StorageType& CachedValue, const FRestoreStateParams& Params)"
  },
  {
    "label": "FCameraCutEditorHandler()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct THasAddReferencedObjectForComponent<FLevelEditorViewportClient*> { bool Value = false ; } ; struct FPreAnimatedCameraCutEditorStorage : TPreAnimatedStateStorage<FPreAnimatedCameraCutEditorTraits> { TAutoRegisterPreAnimatedStorageID<FPreAnimatedCameraCutEditorStorage> StorageID ; } ; enum class EForcedCameraCutPreAnimatedStorageOperation { Cache,Restore,Discard } ; struct FCameraCutEditorHandler {)",
    "insertText": "FCameraCutEditorHandler(UMovieSceneEntitySystemLinker* InLinker, const FSequenceInstance& InSequenceInstance, FCameraCutViewportPreviewer& InViewportPreviewer)"
  },
  {
    "label": "SetCameraCut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraCut(UObject* CameraObject, const FMovieSceneCameraCutParams& CameraCutParams)"
  },
  {
    "label": "CachePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachePreAnimatedValue(UMovieSceneEntitySystemLinker* Linker, const FSequenceInstance& SequenceInstance)"
  },
  {
    "label": "ForcePreAnimatedValueOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForcePreAnimatedValueOperation(UMovieSceneEntitySystemLinker* Linker, const FSequenceInstance& SequenceInstance, EForcedCameraCutPreAnimatedStorageOperation Operation)"
  },
  {
    "label": "SetCameraCutForViewport()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetCameraCutForViewport(FLevelEditorViewportClient& ViewportClient, AActor* CameraActor, UCameraComponent* CameraComponent, const FMovieSceneCameraCutParams& CameraCutParams)"
  },
  {
    "label": "ReleaseCameraCutForViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseCameraCutForViewport(FLevelEditorViewportClient& ViewportClient)"
  }
]