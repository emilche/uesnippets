[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "CompletionListener()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_TYPED_MACROS_EMBEDDER_SUPPORT_H_ # define BASE_TRACE_EVENT_TYPED_MACROS_EMBEDDER_SUPPORT_H_ # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" # include \" base / trace_event / trace_event . h \" # include \" third_party / perfetto / include / perfetto / tracing / internal / track_event_internal . h \" # include \" third_party / perfetto / protos / perfetto / trace / track_event / track_event . pbzero . h \" namespace base { namespace trace_event { class BASE_EXPORT TrackEventHandle { public : using TrackEvent = perfetto::protos::pbzero::TrackEvent ; using IncrementalState = perfetto::internal::TrackEventIncrementalState ; class BASE_EXPORT CompletionListener { public : ~)",
    "insertText": "CompletionListener()"
  },
  {
    "label": "OnTrackEventCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTrackEventCompleted()"
  },
  {
    "label": "TrackEventHandle()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "TrackEventHandle(TrackEvent*, IncrementalState*, CompletionListener*, bool filter_debug_annotations)"
  },
  {
    "label": "TrackEventHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackEventHandle()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "OnTracePacketCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTracePacketCompleted()"
  },
  {
    "label": "TracePacketHandle()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "TracePacketHandle(PerfettoPacketHandle, CompletionListener*)"
  },
  {
    "label": "TracePacketHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TracePacketHandle()"
  },
  {
    "label": "TracePacketHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TracePacketHandle(TracePacketHandle&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TracePacketHandle&)",
    "insertText": "operator(TracePacketHandle&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TracePacket&)",
    "insertText": "operator()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} TracePacket*)",
    "insertText": "get()"
  },
  {
    "label": "TakePerfettoHandle()",
    "kind": "Method",
    "detail": "Function (} PerfettoPacketHandle)",
    "insertText": "TakePerfettoHandle()"
  },
  {
    "label": "TrackEventHandle()",
    "kind": "Method",
    "detail": "Function (} private : PerfettoPacketHandle packet_ ; raw_ptr<CompletionListener> listener_ ; } ; using PrepareTrackEventFunction =)",
    "insertText": "TrackEventHandle(*)(TraceEvent*)"
  },
  {
    "label": "TracePacketHandle()",
    "kind": "Method",
    "detail": "Function (using PrepareTracePacketFunction =)",
    "insertText": "TracePacketHandle(*)()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using EmitEmptyTracePacketFunction =)",
    "insertText": "void(*)()"
  },
  {
    "label": "EnableTypedTraceEvents()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "EnableTypedTraceEvents(PrepareTrackEventFunction typed_event_callback, PrepareTracePacketFunction trace_packet_callback, EmitEmptyTracePacketFunction empty_packet_callback)"
  },
  {
    "label": "ResetTypedTraceEventsForTesting()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "ResetTypedTraceEventsForTesting()"
  }
]