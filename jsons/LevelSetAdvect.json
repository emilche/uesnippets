[
  {
    "label": "LevelSetAdvection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LevelSetAdvection"
  },
  {
    "label": "Advect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Advect"
  },
  {
    "label": "LevelSetAdvection()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_LEVEL_SET_ADVECT_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_LEVEL_SET_ADVECT_HAS_BEEN_INCLUDED # include<tbb / parallel_for . h> # include<tbb / parallel_reduce . h> # include<openvdb / Platform . h> # include \" LevelSetTracker . h \" # include \" VelocityFields . h \" # include<openvdb / math / FiniteDifference . h> # include<functional> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<GridT,FieldT = EnrightField<GridT::ValueType>,InterruptT = util::NullInterrupter> class LevelSetAdvection { public : using GridType = GridT ; using TrackerT = LevelSetTracker<GridT,InterruptT> ; using LeafRange = TrackerT::LeafRange ; using LeafType = TrackerT::LeafType ; using BufferType = TrackerT::BufferType ; using ValueType = TrackerT::ValueType ; using VectorType = FieldT::VectorType ;)",
    "insertText": "LevelSetAdvection(GridT& grid, const FieldT& field, InterruptT* interrupt = nullptr): mTracker(grid, interrupt), mField(field), mSpatialScheme(math::HJWENO5_BIAS), mTemporalScheme(math::TVD_RK2)"
  },
  {
    "label": "LevelSetAdvection()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "LevelSetAdvection()"
  },
  {
    "label": "getSpatialScheme()",
    "kind": "Method",
    "detail": "Function (} math::BiasedGradientScheme)",
    "insertText": "getSpatialScheme()"
  },
  {
    "label": "getTemporalScheme()",
    "kind": "Method",
    "detail": "Function (mSpatialScheme = scheme ; } math::TemporalIntegrationScheme)",
    "insertText": "getTemporalScheme()"
  },
  {
    "label": "getTrackerSpatialScheme()",
    "kind": "Method",
    "detail": "Function (mTemporalScheme = scheme ; } math::BiasedGradientScheme)",
    "insertText": "getTrackerSpatialScheme()"
  },
  {
    "label": "setTrackerSpatialScheme()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setTrackerSpatialScheme(math::BiasedGradientScheme scheme)"
  },
  {
    "label": "setSpatialScheme()",
    "kind": "Method",
    "detail": "Function (mTracker .)",
    "insertText": "setSpatialScheme(scheme)"
  },
  {
    "label": "getTrackerTemporalScheme()",
    "kind": "Method",
    "detail": "Function (} math::TemporalIntegrationScheme)",
    "insertText": "getTrackerTemporalScheme()"
  },
  {
    "label": "setTrackerTemporalScheme()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setTrackerTemporalScheme(math::TemporalIntegrationScheme scheme)"
  },
  {
    "label": "setTemporalScheme()",
    "kind": "Method",
    "detail": "Function (mTracker .)",
    "insertText": "setTemporalScheme(scheme)"
  },
  {
    "label": "getNormCount()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getNormCount()"
  },
  {
    "label": "setNormCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setNormCount(int n)"
  },
  {
    "label": "setNormCount()",
    "kind": "Method",
    "detail": "Function (mTracker .)",
    "insertText": "setNormCount(n)"
  },
  {
    "label": "getGrainSize()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getGrainSize()"
  },
  {
    "label": "setGrainSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setGrainSize(int grainsize)"
  },
  {
    "label": "setGrainSize()",
    "kind": "Method",
    "detail": "Function (mTracker .)",
    "insertText": "setGrainSize(grainsize)"
  },
  {
    "label": "advect()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "advect(ValueType time0, ValueType time1)"
  },
  {
    "label": "LevelSetAdvection()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LevelSetAdvection(const LevelSetAdvection&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LevelSetAdvection&)",
    "insertText": "operator(const LevelSetAdvection&)"
  },
  {
    "label": "Advect()",
    "kind": "Method",
    "detail": "Function (template<MapT,math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme> struct Advect {)",
    "insertText": "Advect(LevelSetAdvection& parent)"
  },
  {
    "label": "Advect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advect(const Advect& other)"
  },
  {
    "label": "Advect()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Advect()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()(const LeafRange& r)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "cook(const char* msg, size_t swapBuffer = 0)"
  },
  {
    "label": "sampleField()",
    "kind": "Method",
    "detail": "Function (GridT::ValueType)",
    "insertText": "sampleField(ValueType time0, ValueType time1)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (template<bool Aligned> void)",
    "insertText": "sample(const LeafRange& r, ValueType t0, ValueType t1)"
  },
  {
    "label": "sampleXformed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sampleXformed(const LeafRange& r, ValueType t0, ValueType t1)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (this -> sample<)",
    "insertText": "false(r, t0, t1)"
  },
  {
    "label": "sampleAligned()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "sampleAligned(const LeafRange& r, ValueType t0, ValueType t1)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (this -> sample<)",
    "insertText": "true(r, t0, t1)"
  },
  {
    "label": "clearField()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearField()"
  },
  {
    "label": "euler()",
    "kind": "Method",
    "detail": "Function (template<int Nominator,int Denominator> void)",
    "insertText": "euler(const LeafRange&, ValueType, Index, Index)"
  },
  {
    "label": "euler01()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "euler01(const LeafRange& r, ValueType t)"
  },
  {
    "label": "euler()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "euler(r, t, 0, 1)"
  },
  {
    "label": "euler12()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "euler12(const LeafRange& r, ValueType t)"
  },
  {
    "label": "euler()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "euler(r, t, 1, 1)"
  },
  {
    "label": "euler34()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "euler34(const LeafRange& r, ValueType t)"
  },
  {
    "label": "euler()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "euler(r, t, 1, 2)"
  },
  {
    "label": "euler13()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "euler13(const LeafRange& r, ValueType t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} LevelSetAdvection& mParent ; VectorType* mVelocity ; size_t* mOffsets ; const MapT* mMap ; std::function<)",
    "insertText": "void(Advect*, const LeafRange&)"
  },
  {
    "label": "advect1()",
    "kind": "Method",
    "detail": "Function (const bool mIsMaster ; } ; template<math::BiasedGradientScheme SpatialScheme> size_t)",
    "insertText": "advect1(ValueType time0, ValueType time1)"
  },
  {
    "label": "advect2()",
    "kind": "Method",
    "detail": "Function (template<math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme> size_t)",
    "insertText": "advect2(ValueType time0, ValueType time1)"
  },
  {
    "label": "advect3()",
    "kind": "Method",
    "detail": "Function (template<math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme,MapType> size_t)",
    "insertText": "advect3(ValueType time0, ValueType time1)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "OPENVDB_THROW(ValueError, \"Spatial difference scheme not supported!\")"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "OPENVDB_THROW(ValueError, \"Temporal integration scheme not supported!\")"
  },
  {
    "label": "grid()",
    "kind": "Method",
    "detail": "Function (const math::Transform& trans = mTracker .)",
    "insertText": "grid().transform()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(trans.mapType() == math::UniformScaleTranslateMap::mapType())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(trans.mapType() == math::UnitaryMap::mapType())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(trans.mapType() == math::TranslationMap::mapType())"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "OPENVDB_THROW(ValueError, \"MapType not supported!\")"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (Advect<MapT,SpatialScheme,TemporalScheme>)",
    "insertText": "tmp(*this)"
  },
  {
    "label": "Advect()",
    "kind": "Method",
    "detail": "Function (} template<GridT,FieldT,InterruptT> template<MapT,math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme> LevelSetAdvection<GridT,FieldT,InterruptT>::Advect<MapT,SpatialScheme,TemporalScheme)",
    "insertText": "Advect(LevelSetAdvection& parent) : mParent(parent) , mVelocity(nullptr) , mOffsets(nullptr) , mMap(parent.mTracker.grid().transform().template constMap<MapT>().get()) , mTask(0) , mIsMaster(true)"
  },
  {
    "label": "Advect()",
    "kind": "Method",
    "detail": "Function (} template<GridT,FieldT,InterruptT> template<MapT,math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme> LevelSetAdvection<GridT,FieldT,InterruptT>::Advect<MapT,SpatialScheme,TemporalScheme)",
    "insertText": "Advect(const Advect& other) : mParent(other.mParent) , mVelocity(other.mVelocity) , mOffsets(other.mOffsets) , mMap(other.mMap) , mTask(other.mTask) , mIsMaster(false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (namespace ph = std::placeholders ; size_t countCFL = 0 ;)",
    "insertText": "if(math::isZero(time0 - time1))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const bool isForward = time0<time1 ;)",
    "insertText": "while((isForward ? time0<time1 : time0>time1) && mParent.mTracker.checkInterrupter())"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (mParent . mTracker .)",
    "insertText": "leafs().rebuildAuxBuffers(TemporalScheme == math::TVD_RK3 ? 2 : 1)"
  },
  {
    "label": "sampleField()",
    "kind": "Method",
    "detail": "Function (const ValueType dt = this ->)",
    "insertText": "sampleField(time0, time1)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_UNREACHABLE_CODE_WARNING_BEGIN)",
    "insertText": "switch(TemporalScheme)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(\"Advecting level set using TVD_RK1\", 1)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (break ; case math::TVD_RK2 : mTask =)",
    "insertText": "bind(&Advect::euler01, ph::_1, ph::_2, dt)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(\"Advecting level set using TVD_RK1 (step 1 of 2)\", 1)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Advect::euler12, ph::_1, ph::_2, dt)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(\"Advecting level set using TVD_RK1 (step 2 of 2)\", 1)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(\"Advecting level set using TVD_RK3 (step 1 of 3)\", 1)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Advect::euler34, ph::_1, ph::_2, dt)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(\"Advecting level set using TVD_RK3 (step 2 of 3)\", 2)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Advect::euler13, ph::_1, ph::_2, dt)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(\"Advecting level set using TVD_RK3 (step 3 of 3)\", 2)"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (} OPENVDB_NO_UNREACHABLE_CODE_WARNING_END time0 + = isForward ? dt : - dt ; + + countCFL ; mParent . mTracker .)",
    "insertText": "leafs().removeAuxBuffers()"
  },
  {
    "label": "track()",
    "kind": "Method",
    "detail": "Function (mParent . mTracker .)",
    "insertText": "track()"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (const size_t leafCount = mParent . mTracker .)",
    "insertText": "leafs().leafCount()"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (size_t size = 0,voxelCount = mParent . mTracker .)",
    "insertText": "leafs().getPrefixSum(mOffsets, size, grainSize)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Advect::sampleAligned, ph::_1, ph::_2, time0, time1)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (} else { mTask =)",
    "insertText": "bind(&Advect::sampleXformed, ph::_1, ph::_2, time0, time1)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "assert(voxelCount == mParent.mTracker.grid().activeVoxelCount())"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (mVelocity = new VectorType [ voxelCount ] ; this ->)",
    "insertText": "cook(\"Sampling advection field\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ValueType maxAbsV = 0 ; VectorType* v = mVelocity ;)",
    "insertText": "for(size_t i = 0; i < voxelCount; ++i, ++v)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (maxAbsV =)",
    "insertText": "Max(maxAbsV, ValueType(v->lengthSqr()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(math::isApproxZero(maxAbsV, math::Delta<ValueType>::value())) return ValueType(0)"
  },
  {
    "label": "CFL()",
    "kind": "Method",
    "detail": "Function (const ValueType)",
    "insertText": "CFL(TemporalScheme == math::TVD_RK1 ? ValueType(0.3) : TemporalScheme == math::TVD_RK2 ? ValueType(0.9) : ValueType(1.0))/math::Sqrt(ValueType(3.0))"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (const ValueType dt =)",
    "insertText": "Abs(time1 - time0), dx = mParent.mTracker.voxelSize()"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (} template<GridT,FieldT,InterruptT> template<MapT,math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme> template<bool Aligned> void LevelSetAdvection<GridT,FieldT,InterruptT>::Advect<MapT,SpatialScheme,TemporalScheme)",
    "insertText": "sample(const LeafRange& range, ValueType time0, ValueType time1)"
  },
  {
    "label": "field()",
    "kind": "Method",
    "detail": "Function (const bool isForward = time0<time1 ; using VoxelIterT = LeafType::ValueOnCIter ; const MapT& map =* mMap ; const FieldT)",
    "insertText": "field(mParent.mField)"
  },
  {
    "label": "checkInterrupter()",
    "kind": "Method",
    "detail": "Function (mParent . mTracker .)",
    "insertText": "checkInterrupter()"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (VectorType* vel = mVelocity + mOffsets [ leafIter .)",
    "insertText": "pos()"
  },
  {
    "label": "field()",
    "kind": "Method",
    "detail": "Function (const VectorType v = Aligned ?)",
    "insertText": "field(iter.getCoord(), time0) : field(map.applyMap(iter.getCoord().asVec3d()), time0)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (delete [ ] mOffsets ; delete [ ] mVelocity ; mOffsets = nullptr ; mVelocity = nullptr ; } template<GridT,FieldT,InterruptT> template<MapT,math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme> void LevelSetAdvection<GridT,FieldT,InterruptT>::Advect<MapT,SpatialScheme,TemporalScheme)",
    "insertText": "cook(const char* msg, size_t swapBuffer)"
  },
  {
    "label": "startInterrupter()",
    "kind": "Method",
    "detail": "Function (mParent . mTracker .)",
    "insertText": "startInterrupter(msg)"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (const LeafRange range = mParent . mTracker .)",
    "insertText": "leafs().leafRange(grainSize)"
  },
  {
    "label": "grainSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "grainSize(*this)(range) : tbb::parallel_for(range, *this)"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (mParent . mTracker .)",
    "insertText": "leafs().swapLeafBuffer(swapBuffer, grainSize == 0)"
  },
  {
    "label": "endInterrupter()",
    "kind": "Method",
    "detail": "Function (mParent . mTracker .)",
    "insertText": "endInterrupter()"
  },
  {
    "label": "euler()",
    "kind": "Method",
    "detail": "Function (} template<GridT,FieldT,InterruptT> template<MapT,math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme> template<int Nominator,int Denominator> void LevelSetAdvection<GridT,FieldT,InterruptT>::Advect<MapT,SpatialScheme,TemporalScheme)",
    "insertText": "euler(const LeafRange& range, ValueType dt, Index phiBuffer, Index resultBuffer)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (using SchemeT = math::BIAS_SCHEME<SpatialScheme> ; using StencilT = SchemeT::template ISStencil<GridType>::StencilType ; using VoxelIterT = LeafType::ValueOnCIter ; using GradT = math::GradientBiased<MapT,SpatialScheme> ; const ValueType Alpha =)",
    "insertText": "ValueType(Nominator)/ValueType(Denominator)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (const ValueType Beta =)",
    "insertText": "ValueType(1)"
  },
  {
    "label": "stencil()",
    "kind": "Method",
    "detail": "Function (const MapT& map =* mMap ; StencilT)",
    "insertText": "stencil(mParent.mTracker.grid())"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (const ValueType* phi = leafIter .)",
    "insertText": "buffer(phiBuffer).data()"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (ValueType* result = leafIter .)",
    "insertText": "buffer(resultBuffer).data()"
  },
  {
    "label": "moveTo()",
    "kind": "Method",
    "detail": "Function (stencil .)",
    "insertText": "moveTo(voxelIter)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (const ValueType a = stencil .)",
    "insertText": "getValue() - dt * vel->dot(GradT::result(map, stencil, *vel))"
  }
]