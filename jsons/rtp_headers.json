[
  {
    "label": "FeedbackRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FeedbackRequest"
  },
  {
    "label": "AbsoluteCaptureTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AbsoluteCaptureTime"
  },
  {
    "label": "RTPHeaderExtension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTPHeaderExtension"
  },
  {
    "label": "RTPHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTPHeader"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "NetworkState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NetworkState"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef API_RTP_HEADERS_H_ # define API_RTP_HEADERS_H_ # include<stddef . h> # include<stdint . h> # include<string> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / units / timestamp . h \" # include \" api / video / color_space . h \" # include \" api / video / video_content_type . h \" # include \" api / video / video_rotation . h \" # include \" api / video / video_timing . h \" namespace webrtc { struct FeedbackRequest { bool include_timestamps ; int sequence_count ; } ; struct AbsoluteCaptureTime { uint64_t absolute_capture_timestamp ; absl::optional<int64_t> estimated_capture_clock_offset ; } ; bool)",
    "insertText": "operator(const AbsoluteCaptureTime& lhs, const AbsoluteCaptureTime& rhs)"
  },
  {
    "label": "RTPHeaderExtension()",
    "kind": "Method",
    "detail": "Function (} struct RTPHeaderExtension {)",
    "insertText": "RTPHeaderExtension()"
  },
  {
    "label": "RTPHeaderExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTPHeaderExtension(const RTPHeaderExtension& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RTPHeaderExtension&)",
    "insertText": "operator(const RTPHeaderExtension& other)"
  },
  {
    "label": "GetAbsoluteSendTimestamp()",
    "kind": "Method",
    "detail": "Function (int kAbsSendTimeFraction = 1 8 ; Timestamp)",
    "insertText": "GetAbsoluteSendTimestamp()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(hasAbsoluteSendTime)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(absoluteSendTime < (1ul << 24))"
  },
  {
    "label": "RTPHeader()",
    "kind": "Method",
    "detail": "Function (} bool hasTransmissionTimeOffset ; int32_t transmissionTimeOffset ; bool hasAbsoluteSendTime ; uint32_t absoluteSendTime ; absl::optional<AbsoluteCaptureTime> absolute_capture_time ; bool hasTransportSequenceNumber ; uint16_t transportSequenceNumber ; absl::optional<FeedbackRequest> feedback_request ; bool hasAudioLevel ; bool voiceActivity ; uint8_t audioLevel ; bool hasVideoRotation ; VideoRotation videoRotation ; bool hasVideoContentType ; VideoContentType videoContentType ; bool has_video_timing ; VideoSendTiming video_timing ; VideoPlayoutDelay playout_delay ; std::string stream_id ; std::string repaired_stream_id ; std::string mid ; absl::optional<ColorSpace> color_space ; } ; enum { kRtpCsrcSize = 1 5 } ; struct RTPHeader {)",
    "insertText": "RTPHeader()"
  },
  {
    "label": "RTPHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTPHeader(const RTPHeader& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RTPHeader&)",
    "insertText": "operator(const RTPHeader& other)"
  }
]