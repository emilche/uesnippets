[
  {
    "label": "FTwoVectors",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTwoVectors"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "FTwoVectors()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Math / UnrealMathUtility . h \" # include \" Containers / UnrealString . h \" # include \" Math / Vector . h \" struct FTwoVectors { public : FVector v1 ; FVector v2 ; public :)",
    "insertText": "FTwoVectors()"
  },
  {
    "label": "FTwoVectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTwoVectors(EForceInit)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : FTwoVectors)",
    "insertText": "operator(const FTwoVectors& V)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTwoVectors)",
    "insertText": "operator(float Scale)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const FTwoVectors& V, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTwoVectors)",
    "insertText": "operator(float V)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVector::FReal&)",
    "insertText": "operator(int32 i)"
  },
  {
    "label": "GetMax()",
    "kind": "Method",
    "detail": "Function (public : FVector::FReal)",
    "insertText": "GetMax()"
  },
  {
    "label": "GetMin()",
    "kind": "Method",
    "detail": "Function (FVector::FReal)",
    "insertText": "GetMin()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : FArchive&)",
    "insertText": "operator(FArchive& Ar, FTwoVectors& TwoVectors)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<* this ; return true ; } } ; FTwoVectors)",
    "insertText": "operator(float Scale, const FTwoVectors& V)"
  },
  {
    "label": "FTwoVectors()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTwoVectors() : v1(0.0f), v2(0.0f)"
  },
  {
    "label": "FTwoVectors()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTwoVectors(FVector In1, FVector In2 ) : v1(In1) , v2(In2)"
  },
  {
    "label": "FTwoVectors()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTwoVectors(EForceInit ) : v1(ForceInit) , v2(ForceInit)"
  },
  {
    "label": "FTwoVectors()",
    "kind": "Method",
    "detail": "Function (const float RScale = 1 . f / Scale ; return)",
    "insertText": "FTwoVectors(FVector(v1 * RScale), FVector(v2 * RScale))"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const FTwoVectors& V, float Tolerance)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FTwoVectors)",
    "insertText": "operator()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal MaxMax =)",
    "insertText": "Max(FMath::Max(v1.X, v1.Y), v1.Z)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal MaxMin =)",
    "insertText": "Max(FMath::Max(v2.X, v2.Y), v2.Z)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal MinMax =)",
    "insertText": "Min(FMath::Min(v1.X, v1.Y), v1.Z)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal MinMin =)",
    "insertText": "Min(FMath::Min(v2.X, v2.Y), v2.Z)"
  }
]