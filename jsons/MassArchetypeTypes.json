[
  {
    "label": "FMassEntityManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassEntityManager"
  },
  {
    "label": "FMassArchetypeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeData"
  },
  {
    "label": "FMassExecutionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassExecutionContext"
  },
  {
    "label": "FMassFragment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassFragment"
  },
  {
    "label": "FMassArchetypeChunkIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeChunkIterator"
  },
  {
    "label": "FMassEntityQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassEntityQuery"
  },
  {
    "label": "FMassArchetypeEntityCollection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeEntityCollection"
  },
  {
    "label": "FMassEntityView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassEntityView"
  },
  {
    "label": "FMassDebugger",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassDebugger"
  },
  {
    "label": "FMassArchetypeHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeHelper"
  },
  {
    "label": "FMassArchetypeHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeHandle"
  },
  {
    "label": "MASSENTITY_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MASSENTITY_API"
  },
  {
    "label": "FArchetypeEntityRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArchetypeEntityRange"
  },
  {
    "label": "EDuplicatesHandling",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDuplicatesHandling"
  },
  {
    "label": "EInitializationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInitializationType"
  },
  {
    "label": "FMassArchetypeEntityCollectionWithPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeEntityCollectionWithPayload"
  },
  {
    "label": "FMassRawEntityInChunkData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassRawEntityInChunkData"
  },
  {
    "label": "FMassQueryRequirementIndicesMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassQueryRequirementIndicesMapping"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / Class . h \" # include \" Containers / ArrayView . h \" # include \" Containers / StridedView . h \" # include \" Containers / UnrealString . h \" # include \" MassEntityTypes . h \" struct FMassEntityManager ; struct FMassArchetypeData ; struct FMassExecutionContext ; struct FMassFragment ; struct FMassArchetypeChunkIterator ; struct FMassEntityQuery ; struct FMassArchetypeEntityCollection ; struct FMassEntityView ; struct FMassDebugger ; struct FMassArchetypeHelper ; typedef TFunction<)",
    "insertText": "void(FMassExecutionContext&)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "bool(const FMassExecutionContext&)"
  },
  {
    "label": "FMassArchetypeHandle()",
    "kind": "Method",
    "detail": "Function (struct FMassArchetypeHandle final {)",
    "insertText": "FMassArchetypeHandle()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMassArchetypeHandle& Other)"
  },
  {
    "label": "FMassArchetypeHandle()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FMassArchetypeHandle(const TSharedPtr<FMassArchetypeData>& InDataPtr) : DataPtr(InDataPtr)"
  },
  {
    "label": "FArchetypeEntityRange()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FMassArchetypeData> DataPtr ; FMassArchetypeHelper ; FMassEntityManager ; } ; struct FMassArchetypeEntityCollection { public : struct FArchetypeEntityRange { int32 ChunkIndex = INDEX_NONE ; int32 SubchunkStart = 0 ; int32 Length = 0 ;)",
    "insertText": "FArchetypeEntityRange()"
  },
  {
    "label": "FArchetypeEntityRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FArchetypeEntityRange(const int32 InChunkIndex, const int32 InSubchunkStart = 0, const int32 InLength = 0) : ChunkIndex(InChunkIndex), SubchunkStart(InSubchunkStart), Length(InLength)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "FMassArchetypeEntityCollection()",
    "kind": "Method",
    "detail": "Function (} } ; enum EDuplicatesHandling { NoDuplicates,FoldDuplicates,} ; enum EInitializationType { GatherAll,DoNothing,} ; using FEntityRangeArray = TArray<FArchetypeEntityRange> ; using FConstEntityRangeArrayView = TConstArrayView<FArchetypeEntityRange> ; private : FEntityRangeArray Ranges ; FMassArchetypeHandle Archetype ; public :)",
    "insertText": "FMassArchetypeEntityCollection()"
  },
  {
    "label": "FMassArchetypeEntityCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassArchetypeEntityCollection(const FMassArchetypeHandle& InArchetype, TConstArrayView<FMassEntityHandle> InEntities, EDuplicatesHandling DuplicatesHandling)"
  },
  {
    "label": "FMassArchetypeEntityCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassArchetypeEntityCollection(const FMassArchetypeHandle& InArchetypeHandle, const EInitializationType Initialization = EInitializationType::GatherAll)"
  },
  {
    "label": "FMassArchetypeEntityCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassArchetypeEntityCollection(TSharedPtr<FMassArchetypeData>& InArchetype, const EInitializationType Initialization = EInitializationType::GatherAll)"
  },
  {
    "label": "FMassArchetypeEntityCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassArchetypeEntityCollection(const FMassArchetypeHandle& InArchetypeHandle, FEntityRangeArray&& InEntityRanges) : Ranges(MoveTemp(InEntityRanges)) , Archetype(InArchetypeHandle)"
  },
  {
    "label": "GetRanges()",
    "kind": "Method",
    "detail": "Function (} FConstEntityRangeArrayView)",
    "insertText": "GetRanges()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsSame()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSame(const FMassArchetypeEntityCollection& Other)"
  },
  {
    "label": "BuildEntityRanges()",
    "kind": "Method",
    "detail": "Function (protected : struct FMassArchetypeEntityCollectionWithPayload ; void)",
    "insertText": "BuildEntityRanges(TStridedView<const int32> TrueIndices)"
  },
  {
    "label": "GatherChunksFromArchetype()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "GatherChunksFromArchetype()"
  },
  {
    "label": "FMassArchetypeEntityCollectionWithPayload()",
    "kind": "Method",
    "detail": "Function (} ; struct FMassArchetypeEntityCollectionWithPayload {)",
    "insertText": "FMassArchetypeEntityCollectionWithPayload(const FMassArchetypeEntityCollection& InEntityCollection) : Entities(InEntityCollection)"
  },
  {
    "label": "CreateEntityRangesWithPayload()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateEntityRangesWithPayload(const FMassEntityManager& EntitySubsystem, const TConstArrayView<FMassEntityHandle> Entities , const FMassArchetypeEntityCollection::EDuplicatesHandling DuplicatesHandling, FMassGenericPayloadView Payload , TArray<FMassArchetypeEntityCollectionWithPayload>& OutEntityCollections)"
  },
  {
    "label": "GetEntityCollection()",
    "kind": "Method",
    "detail": "Function (const FMassArchetypeEntityCollection&)",
    "insertText": "GetEntityCollection()"
  },
  {
    "label": "FMassArchetypeChunkIterator()",
    "kind": "Method",
    "detail": "Function (FMassArchetypeEntityCollection Entities ; FMassGenericPayloadViewSlice PayloadSlice ; } ; struct FMassArchetypeChunkIterator { private : FMassArchetypeEntityCollection::FConstEntityRangeArrayView EntityRanges ; int32 CurrentChunkIndex = 0 ; public :)",
    "insertText": "FMassArchetypeChunkIterator(const FMassArchetypeEntityCollection::FConstEntityRangeArrayView& InEntityRanges) : EntityRanges(InEntityRanges), CurrentChunkIndex(0)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMassArchetypeChunkIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "FMassRawEntityInChunkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassRawEntityInChunkData(uint8* InChunkRawMemory, const int32 InIndexWithinChunk) : ChunkRawMemory(InChunkRawMemory), IndexWithinChunk(InIndexWithinChunk)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (FMassFragmentIndicesMapping EntityFragments ; FMassFragmentIndicesMapping ChunkFragments ; FMassFragmentIndicesMapping ConstSharedFragments ; FMassFragmentIndicesMapping SharedFragments ; bool)",
    "insertText": "IsEmpty()"
  }
]