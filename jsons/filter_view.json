[
  {
    "label": "filter_view",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "filter_view"
  },
  {
    "label": "__iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__iterator"
  },
  {
    "label": "__sentinel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__sentinel"
  },
  {
    "label": "_Vp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Vp"
  },
  {
    "label": "_Range",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Range"
  },
  {
    "label": "_Pred",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Pred"
  },
  {
    "label": "_View",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_View"
  },
  {
    "label": "__filter_iterator_category",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__filter_iterator_category"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANGES_FILTER_VIEW_H # define _LIBCPP___RANGES_FILTER_VIEW_H # include<__algorithm / ranges_find_if . h> # include<__config> # include<__debug> # include<__functional / bind_back . h> # include<__functional / invoke . h> # include<__functional / reference_wrapper . h> # include<__iterator / concepts . h> # include<__iterator / iter_move . h> # include<__iterator / iter_swap . h> # include<__iterator / iterator_traits . h> # include<__memory / addressof . h> # include<__ranges / access . h> # include<__ranges / all . h> # include<__ranges / concepts . h> # include<__ranges / copyable_box . h> # include<__ranges / non_propagating_cache . h> # include<__ranges / range_adaptor . h> # include<__ranges / view_interface . h> # include<__utility / forward . h> # include<__utility / in_place . h> # include<__utility / move . h> # include<concepts> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "_View()",
    "kind": "Method",
    "detail": "Function (template<input_range _View,indirect_unary_predicate<iterator_t<_View>> _Pred> requires view<_View>&& is_object_v<_Pred> class filter_view : public view_interface<filter_view<_View,_Pred>> { _LIBCPP_NO_UNIQUE_ADDRESS _View __base_ =)",
    "insertText": "_View()"
  },
  {
    "label": "_Cache()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_NO_UNIQUE_ADDRESS __copyable_box<_Pred> __pred_ ; bool _UseCache = forward_range<_View> ; using _Cache = _If<_UseCache,__non_propagating_cache<iterator_t<_View>>,__empty_cache> ; _LIBCPP_NO_UNIQUE_ADDRESS _Cache __cached_begin_ =)",
    "insertText": "_Cache()"
  },
  {
    "label": "filter_view()",
    "kind": "Method",
    "detail": "Function (class __iterator ; class __sentinel ; public : _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "filter_view()"
  },
  {
    "label": "filter_view()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "filter_view(_View __base, _Pred __pred) : __base_(std::move(__base)), __pred_(in_place, std::move(__pred))"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (} template<class _Vp = _View> _LIBCPP_HIDE_FROM_ABI _View)",
    "insertText": "base()"
  },
  {
    "label": "pred()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _Pred const&)",
    "insertText": "pred()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__pred_.__has_value(), \"Trying to call begin() on a filter_view that does not have a valid predicate.\")"
  },
  {
    "label": "__emplace()",
    "kind": "Method",
    "detail": "Function (__cached_begin_ .)",
    "insertText": "__emplace(ranges::find_if(__base_, std::ref(*__pred_)))"
  },
  {
    "label": "find_if()",
    "kind": "Method",
    "detail": "Function (} return {* this,* __cached_begin_ } ; } else { return {* this,)",
    "insertText": "find_if(__base_, std::ref(*__pred_))"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} } _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "end()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (* this,)",
    "insertText": "end(__base_)"
  },
  {
    "label": "__iterator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_NO_UNIQUE_ADDRESS filter_view* __parent_ = nullptr ; using iterator_concept = _If<bidirectional_range<_View>,bidirectional_iterator_tag,_If<forward_range<_View>,forward_iterator_tag,input_iterator_tag>> ; using value_type = range_value_t<_View> ; using difference_type = range_difference_t<_View> ; _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__iterator()"
  },
  {
    "label": "__iterator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__iterator(filter_view& __parent, iterator_t<_View> __current) : __current_(std::move(__current)), __parent_(std::addressof(__parent))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI range_reference_t<_View>)",
    "insertText": "operator()"
  },
  {
    "label": "find_if()",
    "kind": "Method",
    "detail": "Function (__current_ =)",
    "insertText": "find_if(std::move(++__current_), ranges::end(__parent_->__base_), std::ref(*__parent_->__pred_))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ +* this ; } _LIBCPP_HIDE_FROM_ABI __iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (auto tmp =* this ; - -* this ; return tmp ; } _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator(__iterator const& __x, __iterator const& __y)"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "iter_swap(__iterator const& __x, __iterator const& __y) noexcept(noexcept(ranges::iter_swap(__x.__current_, __y.__current_)))"
  },
  {
    "label": "__sentinel()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__sentinel()"
  },
  {
    "label": "__sentinel()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__sentinel(filter_view& __parent) : __end_(ranges::end(__parent.__base_))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Pred> requires constructible_from<decay_t<_Pred>,_Pred> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Pred&& __pred) const noexcept(is_nothrow_constructible_v<decay_t<_Pred>, _Pred>)"
  }
]