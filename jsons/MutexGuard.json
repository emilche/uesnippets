[
  {
    "label": "MutexGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MutexGuard"
  },
  {
    "label": "MutexGuard()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_MUTEXGUARD_H # define LLVM_SUPPORT_MUTEXGUARD_H # include \" llvm / Support / Mutex . h \" namespace llvm { class MutexGuard { sys::Mutex& M ;)",
    "insertText": "MutexGuard(const MutexGuard &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const MutexGuard &)"
  },
  {
    "label": "MutexGuard()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "MutexGuard(sys::Mutex &m) : M(m)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "lock()"
  },
  {
    "label": "MutexGuard()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MutexGuard()"
  },
  {
    "label": "unlock()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "unlock()"
  },
  {
    "label": "holds()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "holds(const sys::Mutex& lock)"
  }
]