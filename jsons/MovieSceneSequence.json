[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FObjectPreSaveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectPreSaveContext"
  },
  {
    "label": "IMovieScenePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieScenePlayer"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "UMovieSceneCompiledData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCompiledData"
  },
  {
    "label": "UMovieSceneEntitySystemLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystemLinker"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FMovieSceneObjectCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneObjectCache"
  },
  {
    "label": "FMovieScenePossessable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScenePossessable"
  },
  {
    "label": "FMovieSceneTimecodeSource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimecodeSource"
  },
  {
    "label": "FUniversalObjectLocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniversalObjectLocator"
  },
  {
    "label": "FMovieSceneBindingReferences",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneBindingReferences"
  },
  {
    "label": "FMovieSceneDynamicBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneDynamicBinding"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FSharedPlaybackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPlaybackState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" UniversalObjectLocatorFwd . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Evaluation / MovieSceneCompletionMode . h \" # include \" Internationalization / Text . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Guid . h \" # include \" MovieSceneFwd . h \" # include \" MovieSceneObjectBindingID . h \" # include \" MovieSceneSection . h \" # include \" MovieSceneSequenceID . h \" # include \" MovieSceneSignedObject . h \" # include \" UniversalObjectLocatorResolveParams . h \" # include \" MovieSceneTrack . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / UObjectGlobals . h \" # include \" MovieSceneSequence . generated . h \" class FArchive ; class FObjectPreSaveContext ; class IMovieScenePlayer ; class ITargetPlatform ; class UMovieScene ; class UMovieSceneCompiledData ; class UMovieSceneEntitySystemLinker ; class UMovieSceneTrack ; class UObject ; struct FFrame ; struct FMovieSceneObjectCache ; struct FMovieScenePossessable ; struct FMovieSceneTimecodeSource ; struct FUniversalObjectLocator ; struct FMovieSceneBindingReferences ; struct FMovieSceneDynamicBinding ; # if WITH_EDITOR struct FSlateBrush ; # endif namespace UE::MovieScene { struct FSharedPlaybackState ; } enum class ETrackSupport { NotSupported,Supported,Default } ;)",
    "insertText": "UCLASS(abstract, MinimalAPI, Config = Engine, BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public : using FSharedPlaybackState = UE::MovieScene::FSharedPlaybackState ;)",
    "insertText": "GENERATED_BODY() MOVIESCENE_API UMovieSceneSequence(const FObjectInitializer& Init)"
  },
  {
    "label": "MakeLocatorForObject()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "MakeLocatorForObject(UObject* Object, UObject* Context, FUniversalObjectLocator& OutLocator)"
  },
  {
    "label": "GetBindingReferences()",
    "kind": "Method",
    "detail": "Function (FMovieSceneBindingReferences*)",
    "insertText": "GetBindingReferences()"
  },
  {
    "label": "BindPossessableObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindPossessableObject(const FGuid& ObjectId, UObject& PossessedObject, UObject* Context) PURE_VIRTUAL(UMovieSceneSequence::BindPossessableObject,)"
  },
  {
    "label": "CanPossessObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPossessObject(UObject& Object, UObject* InPlaybackContext) const PURE_VIRTUAL(UMovieSceneSequence::CanPossessObject, return false;)"
  },
  {
    "label": "LocateBoundObjects()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*,TInlineAllocator<1>> OutObjects ; PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "LocateBoundObjects(ObjectId, Context, OutObjects)"
  },
  {
    "label": "LocateBoundObjects()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS return OutObjects ; } void)",
    "insertText": "LocateBoundObjects(const FGuid& ObjectId, const UE::UniversalObjectLocator::FResolveParams& ResolveParams, TSharedPtr<const FSharedPlaybackState> SharedPlaybackState, TArray<UObject*, TInlineAllocator<1>>& OutObjects)"
  },
  {
    "label": "FindPossessableObjectId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindPossessableObjectId(UObject& Object, UObject* Context)"
  },
  {
    "label": "FindBindingFromObject()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindBindingFromObject(UObject* InObject, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "GatherExpiredObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GatherExpiredObjects(const FMovieSceneObjectCache& InObjectCache, TArray<FGuid>& OutInvalidIDs)"
  },
  {
    "label": "GetMovieScene()",
    "kind": "Method",
    "detail": "Function (} UMovieScene*)",
    "insertText": "GetMovieScene() const PURE_VIRTUAL(UMovieSceneSequence::GetMovieScene(), return nullptr;)"
  },
  {
    "label": "GetParentObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetParentObject(UObject* Object) const PURE_VIRTUAL(UMovieSceneSequence::GetParentObject(), return nullptr;)"
  },
  {
    "label": "AllowsSpawnableObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowsSpawnableObjects()"
  },
  {
    "label": "UnbindObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindObjects(const FGuid& ObjectId, const TArray<UObject*>& InObjects, UObject* Context) PURE_VIRTUAL(UMovieSceneSequence::UnbindObjects,)"
  },
  {
    "label": "UnbindInvalidObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindInvalidObjects(const FGuid& ObjectId, UObject* Context) PURE_VIRTUAL(UMovieSceneSequence::UnbindInvalidObjects,)"
  },
  {
    "label": "MakeSpawnableTemplateFromInstance()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "MakeSpawnableTemplateFromInstance(UObject& InSourceObject, FName ObjectName)"
  },
  {
    "label": "CreateSpawnable()",
    "kind": "Method",
    "detail": "Function (} FGuid)",
    "insertText": "CreateSpawnable(UObject* ObjectToSpawn)"
  },
  {
    "label": "CreateDirectorInstance()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "CreateDirectorInstance(TSharedRef<const FSharedPlaybackState> SharedPlaybackState, FMovieSceneSequenceID SequenceID)"
  },
  {
    "label": "OverrideNetworkMask()",
    "kind": "Method",
    "detail": "Function (EMovieSceneServerClientMask)",
    "insertText": "OverrideNetworkMask(EMovieSceneServerClientMask InDefaultMask)"
  },
  {
    "label": "IterateDynamicBindings()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "IterateDynamicBindings(TFunction<void(const FGuid&, FMovieSceneDynamicBinding&)> InCallback)"
  },
  {
    "label": "GetCustomBrushForBinding()",
    "kind": "Method",
    "detail": "Function (} const FSlateBrush*)",
    "insertText": "GetCustomBrushForBinding(FGuid BindingID)"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSave(FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "AreParentContextsSignificant()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "AreParentContextsSignificant()"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Modify()"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (bPlayableDirectly = bInPlayableDirectly ; } EMovieSceneSequenceFlags)",
    "insertText": "GetFlags()"
  },
  {
    "label": "GetCompiledData()",
    "kind": "Method",
    "detail": "Function (SequenceFlags = InFlags ; } UMovieSceneCompiledData*)",
    "insertText": "GetCompiledData()"
  },
  {
    "label": "GetOrCreateCompiledData()",
    "kind": "Method",
    "detail": "Function (UMovieSceneCompiledData*)",
    "insertText": "GetOrCreateCompiledData()"
  },
  {
    "label": "OptimizeForCook()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_EDITOR void)",
    "insertText": "OptimizeForCook()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "IsTrackSupported()",
    "kind": "Method",
    "detail": "Function (} ETrackSupport)",
    "insertText": "IsTrackSupported(TSubclassOf<UMovieSceneTrack> InTrackClass)"
  },
  {
    "label": "IsTrackSupportedImpl()",
    "kind": "Method",
    "detail": "Function (ETrackSupport)",
    "insertText": "IsTrackSupportedImpl(TSubclassOf<UMovieSceneTrack> InTrackClass)"
  }
]