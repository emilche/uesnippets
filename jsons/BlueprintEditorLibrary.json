[
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "BLUEPRINTEDITORLIBRARY_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BLUEPRINTEDITORLIBRARY_API"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "generated",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "generated"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "reference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "reference"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "ReplaceVariableReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceVariableReferences(UBlueprint* Blueprint, const FName OldVarName, const FName NewVarName)"
  },
  {
    "label": "UpgradeOperatorNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpgradeOperatorNodes(UBlueprint* Blueprint)"
  },
  {
    "label": "CompileBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileBlueprint(UBlueprint* Blueprint)"
  },
  {
    "label": "RemoveFunctionGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFunctionGraph(UBlueprint* Blueprint, FName FuncName)"
  },
  {
    "label": "RemoveUnusedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUnusedNodes(UBlueprint* Blueprint)"
  },
  {
    "label": "RemoveGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGraph(UBlueprint* Blueprint, UEdGraph* Graph)"
  },
  {
    "label": "RefreshOpenEditorsForBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshOpenEditorsForBlueprint(const UBlueprint* BP)"
  },
  {
    "label": "RefreshAllOpenBlueprintEditors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshAllOpenBlueprintEditors()"
  },
  {
    "label": "ReparentBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReparentBlueprint(UBlueprint* Blueprint, UClass* NewParentClass)"
  },
  {
    "label": "GatherUnusedVariables()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GatherUnusedVariables(const UBlueprint* Blueprint, TArray<FProperty*>& OutProperties)"
  },
  {
    "label": "RemoveUnusedVariables()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveUnusedVariables(UBlueprint* Blueprint)"
  },
  {
    "label": "SetBlueprintVariableExposeOnSpawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlueprintVariableExposeOnSpawn(UBlueprint* Blueprint, const FName& VariableName, bool bExposeOnSpawn)"
  },
  {
    "label": "SetBlueprintVariableExposeToCinematics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlueprintVariableExposeToCinematics(UBlueprint* Blueprint, const FName& VariableName, bool bExposeToCinematics)"
  },
  {
    "label": "SetBlueprintVariableInstanceEditable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlueprintVariableInstanceEditable(UBlueprint* Blueprint, const FName& VariableName, bool bInstanceEditable)"
  },
  {
    "label": "AddMemberVariableWithValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddMemberVariableWithValue(UBlueprint* Blueprint, FName MemberName, const int32& DefaultValue)"
  },
  {
    "label": "Generic_AddMemberVariableWithValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Generic_AddMemberVariableWithValue(UBlueprint* Blueprint, FName MemberName, const uint8* DefaultValuePtr, const FProperty* DefaultValueProp)"
  },
  {
    "label": "AddMemberVariable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddMemberVariable(UBlueprint* Blueprint, FName MemberName, const FEdGraphPinType& VariableType)"
  },
  {
    "label": "GetBasicTypeByName()",
    "kind": "Method",
    "detail": "Function (FEdGraphPinType)",
    "insertText": "GetBasicTypeByName(FName TypeName)"
  },
  {
    "label": "GetStructType()",
    "kind": "Method",
    "detail": "Function (FEdGraphPinType)",
    "insertText": "GetStructType(const UScriptStruct* StructType)"
  },
  {
    "label": "GetClassReferenceType()",
    "kind": "Method",
    "detail": "Function (FEdGraphPinType)",
    "insertText": "GetClassReferenceType(const UClass* ClassType)"
  },
  {
    "label": "GetObjectReferenceType()",
    "kind": "Method",
    "detail": "Function (FEdGraphPinType)",
    "insertText": "GetObjectReferenceType(const UClass* ObjectType)"
  },
  {
    "label": "GetArrayType()",
    "kind": "Method",
    "detail": "Function (FEdGraphPinType)",
    "insertText": "GetArrayType(const FEdGraphPinType& ContainedType)"
  },
  {
    "label": "GetSetType()",
    "kind": "Method",
    "detail": "Function (FEdGraphPinType)",
    "insertText": "GetSetType(const FEdGraphPinType& ContainedType)"
  },
  {
    "label": "GetMapType()",
    "kind": "Method",
    "detail": "Function (FEdGraphPinType)",
    "insertText": "GetMapType(const FEdGraphPinType& KeyType,const FEdGraphPinType& ValueType)"
  }
]