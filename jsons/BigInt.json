[
  {
    "label": "TBigInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBigInt"
  },
  {
    "label": "TEncryptionKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEncryptionKey"
  },
  {
    "label": "InDataType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InDataType"
  },
  {
    "label": "FSignatureBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSignatureBase"
  },
  {
    "label": "FEncryptedSignature",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEncryptedSignature"
  },
  {
    "label": "FDecryptedSignature",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecryptedSignature"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" Containers / UnrealString . h \" template<int32 NumBits,bool bSigned = true> class TBigInt { public : typedef TBigInt<NumBits,bSigned> BigInt ; BigInt One ; private : enum { BitsPerWord = 3 2,NumWords = NumBits / BitsPerWord } ;)",
    "insertText": "static_assert(NumBits >= 64, \"TBigInt must have at least 64 bits.\")"
  },
  {
    "label": "MakePositiveFactors()",
    "kind": "Method",
    "detail": "Function (uint32 Bits [ NumWords ] ; void)",
    "insertText": "MakePositiveFactors(BigInt& FactorA, int32& SignA, BigInt& FactorB, int32& SignB)"
  },
  {
    "label": "Sign()",
    "kind": "Method",
    "detail": "Function (SignA = FactorA .)",
    "insertText": "Sign()"
  },
  {
    "label": "Negate()",
    "kind": "Method",
    "detail": "Function (FactorA .)",
    "insertText": "Negate()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SignB < 0)"
  },
  {
    "label": "RestoreSign()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "RestoreSign(BigInt& Result, int32 SignA, int32 SignB)"
  },
  {
    "label": "GetBits()",
    "kind": "Method",
    "detail": "Function (} } public : uint32*)",
    "insertText": "GetBits()"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(Bits, 0, sizeof(Bits))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(int64 Value)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Zero()"
  },
  {
    "label": "Bits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bits(Value & 0xffffffff)"
  },
  {
    "label": "Bits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bits(Value >> BitsPerWord)"
  },
  {
    "label": "TBigInt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBigInt()"
  },
  {
    "label": "TBigInt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBigInt(int64 Other)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Other)"
  },
  {
    "label": "TBigInt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBigInt(const uint32* InBits)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Bits, InBits, sizeof(Bits))"
  },
  {
    "label": "TBigInt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBigInt(const uint8* InData, uint32 InNumBytes)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Memcpy(Bits, InData, InNumBytes)"
  },
  {
    "label": "TBigInt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBigInt(const FString& Value)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(Value)"
  },
  {
    "label": "ShiftLeftInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShiftLeftInternal(const int32 BitCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BigInt Result ;)",
    "insertText": "if(BitCount & (BitsPerWord - 1))"
  },
  {
    "label": "LoWordOffset()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "LoWordOffset(BitCount - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 HiWordOffset = LoWordOffset + 1 ; const int32 LoWordShift = BitCount - LoWordOffset* BitsPerWord ; const int32 HiWordShift = BitsPerWord - LoWordShift ; Result . Bits [ NumWords - 1 ] | = Bits [ NumWords - HiWordOffset ]<<LoWordShift ;)",
    "insertText": "for(int32 WordIndex = (NumWords - 1) - HiWordOffset; WordIndex >= 0; --WordIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 Value = Bits [ WordIndex ] ; Result . Bits [ WordIndex + LoWordOffset ] | = Value<<LoWordShift ; Result . Bits [ WordIndex + HiWordOffset ] | = Value>> HiWordShift ; } } else { const int32 ShiftWords = BitCount / BitsPerWord ;)",
    "insertText": "for(int32 WordIndex = NumWords - 1; WordIndex >= ShiftWords; --WordIndex)"
  },
  {
    "label": "ShiftLeftByOneInternal()",
    "kind": "Method",
    "detail": "Function (Result . Bits [ WordIndex ] = Bits [ WordIndex - ShiftWords ] ; } }* this = Result ; } void)",
    "insertText": "ShiftLeftByOneInternal()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 HiWordShift = BitsPerWord - 1 ; Bits [ NumWords - 1 ] = Bits [ NumWords - 1 ]<<1 ;)",
    "insertText": "for(int32 WordIndex = NumWords - 2; WordIndex >= 0; --WordIndex)"
  },
  {
    "label": "ShiftRightInternal()",
    "kind": "Method",
    "detail": "Function (const uint32 Value = Bits [ WordIndex ] ; Bits [ WordIndex + 0 ] = Value<<1 ; Bits [ WordIndex + 1 ] | = Value>> HiWordShift ; } } void)",
    "insertText": "ShiftRightInternal(const int32 BitCount)"
  },
  {
    "label": "HiWordOffset()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "HiWordOffset(BitCount - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 LoWordOffset = HiWordOffset + 1 ; const int32 HiWordShift = BitCount - HiWordOffset* BitsPerWord ; const int32 LoWordShift = BitsPerWord - HiWordShift ; Result . Bits [ 0 ] | = Bits [ HiWordOffset ]>> HiWordShift ;)",
    "insertText": "for(int32 WordIndex = LoWordOffset; WordIndex < NumWords; ++WordIndex)"
  },
  {
    "label": "ShiftRightByOneInternal()",
    "kind": "Method",
    "detail": "Function (Result . Bits [ WordIndex - ShiftWords ] = Bits [ WordIndex ] ; } }* this = Result ; } void)",
    "insertText": "ShiftRightByOneInternal()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 LoWordShift = BitsPerWord - 1 ; Bits [ 0 ] = Bits [ 0 ]>> 1 ;)",
    "insertText": "for(int32 WordIndex = 1; WordIndex < NumWords; ++WordIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const uint32 Value = Bits [ WordIndex ] ; Bits [ WordIndex - 0 ] = Value>> 1 ; Bits [ WordIndex - 1 ] | = Value<<LoWordShift ; } } void)",
    "insertText": "Add(const BigInt& Other)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int64 CarryOver = 0 ;)",
    "insertText": "for(int32 WordIndex = 0; WordIndex < NumWords; ++WordIndex)"
  },
  {
    "label": "WordSum()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "WordSum(int64)Other.Bits[WordIndex] + (int64)"
  },
  {
    "label": "WordIndex()",
    "kind": "Method",
    "detail": "Function (CarryOver = WordSum>> BitsPerWord ; WordSum& = 0 xffffffff ; Bits [)",
    "insertText": "WordIndex(uint32)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Subtract(const BigInt& Other)"
  },
  {
    "label": "NegativeOther()",
    "kind": "Method",
    "detail": "Function (BigInt)",
    "insertText": "NegativeOther(Other)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(NegativeOther)"
  },
  {
    "label": "IsNegative()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNegative()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Bits [ WordIndex ] = ~ Bits [ WordIndex ] ; })",
    "insertText": "Add(One)"
  },
  {
    "label": "GetHighestNonZeroWord()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetHighestNonZeroWord()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 WordIndex ;)",
    "insertText": "for(WordIndex = NumWords - 1; WordIndex >= 0 && Bits[WordIndex] == 0; --WordIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const uint64 A = Temp . Bits [ WordIndexA ] ; uint64 Carry = 0 ;)",
    "insertText": "for(int32 WordIndexB = 0; WordIndexB < NumWordsB; ++WordIndexB)"
  },
  {
    "label": "WordIndexB()",
    "kind": "Method",
    "detail": "Function (const uint64 B = Factor . Bits [ WordIndexB ] ; const uint64 Product = ResultBits [ WordIndexA + WordIndexB ] + Carry + A* B ; Carry = Product>> BitsPerWord ; ResultBits [ WordIndexA +)",
    "insertText": "WordIndexB(uint32)(Product & (Base - 1))"
  },
  {
    "label": "NumWordsB()",
    "kind": "Method",
    "detail": "Function (} ResultBits [ WordIndexA +)",
    "insertText": "NumWordsB(uint32)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (Bits [ WordIndex ] = ResultBits [ WordIndex ] ; } } void)",
    "insertText": "Multiply(const BigInt& Factor)"
  },
  {
    "label": "MakePositiveFactors()",
    "kind": "Method",
    "detail": "Function (BigInt Result =* this ; BigInt Other = Factor ; int32 ResultSign ; int32 OtherSign ;)",
    "insertText": "MakePositiveFactors(Result, ResultSign, Other, OtherSign)"
  },
  {
    "label": "MultiplyFast()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "MultiplyFast(Other)"
  },
  {
    "label": "RestoreSign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreSign(Result, OtherSign, ResultSign)"
  },
  {
    "label": "DivideWithRemainder()",
    "kind": "Method",
    "detail": "Function (* this = Result ; } void)",
    "insertText": "DivideWithRemainder(const BigInt& Divisor, BigInt& Remainder)"
  },
  {
    "label": "Denominator()",
    "kind": "Method",
    "detail": "Function (BigInt)",
    "insertText": "Denominator(Divisor)"
  },
  {
    "label": "Dividend()",
    "kind": "Method",
    "detail": "Function (BigInt)",
    "insertText": "Dividend(*this)"
  },
  {
    "label": "MakePositiveFactors()",
    "kind": "Method",
    "detail": "Function (int32 DenominatorSign ; int32 DividendSign ;)",
    "insertText": "MakePositiveFactors(Denominator, DenominatorSign, Dividend, DividendSign)"
  },
  {
    "label": "RestoreSign()",
    "kind": "Method",
    "detail": "Function (* this = One ;)",
    "insertText": "RestoreSign(*this, DenominatorSign, DividendSign)"
  },
  {
    "label": "GetHighestNonZeroBit()",
    "kind": "Method",
    "detail": "Function (BigInt Quotient ; int32 ShiftCount = Dividend .)",
    "insertText": "GetHighestNonZeroBit() - Denominator.GetHighestNonZeroBit()"
  },
  {
    "label": "ShiftLeftInternal()",
    "kind": "Method",
    "detail": "Function (Denominator .)",
    "insertText": "ShiftLeftInternal(ShiftCount)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(Denominator <= Dividend)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ShiftCount - - ;)",
    "insertText": "if(ShiftCount)"
  },
  {
    "label": "GetHighestNonZeroBit()",
    "kind": "Method",
    "detail": "Function (} ShiftCount = 0 ; const int32 NumLoops = Current .)",
    "insertText": "GetHighestNonZeroBit()"
  },
  {
    "label": "ShiftRightInternal()",
    "kind": "Method",
    "detail": "Function (Current .)",
    "insertText": "ShiftRightInternal(ShiftCount)"
  },
  {
    "label": "RestoreSign()",
    "kind": "Method",
    "detail": "Function (ShiftCount + + ; })",
    "insertText": "RestoreSign(Quotient, DenominatorSign, DividendSign)"
  },
  {
    "label": "Divide()",
    "kind": "Method",
    "detail": "Function (Remainder = Dividend ;* this = Quotient ; } void)",
    "insertText": "Divide(const BigInt& Divisor)"
  },
  {
    "label": "DivideWithRemainder()",
    "kind": "Method",
    "detail": "Function (BigInt Remainder ;)",
    "insertText": "DivideWithRemainder(Divisor, Remainder)"
  },
  {
    "label": "Modulo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Modulo(const BigInt& Modulus)"
  },
  {
    "label": "DivideWithRemainder()",
    "kind": "Method",
    "detail": "Function (BigInt Temp ; Dividend .)",
    "insertText": "DivideWithRemainder(Modulus, Temp)"
  },
  {
    "label": "MultiplyFast()",
    "kind": "Method",
    "detail": "Function (Dividend .)",
    "insertText": "MultiplyFast(Modulus)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(Dividend)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Sqrt()"
  },
  {
    "label": "Number()",
    "kind": "Method",
    "detail": "Function (BigInt)",
    "insertText": "Number(*this)"
  },
  {
    "label": "Bit()",
    "kind": "Method",
    "detail": "Function (BigInt Result ; BigInt)",
    "insertText": "Bit(1)"
  },
  {
    "label": "ShiftLeftInternal()",
    "kind": "Method",
    "detail": "Function (Bit .)",
    "insertText": "ShiftLeftInternal(NumBits - 2)"
  },
  {
    "label": "ShiftRightInternal()",
    "kind": "Method",
    "detail": "Function (Bit .)",
    "insertText": "ShiftRightInternal(2)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} BigInt Temp ;)",
    "insertText": "while(!Bit.IsZero())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Temp = Result ; Temp .)",
    "insertText": "Add(Bit)"
  },
  {
    "label": "ShiftRightInternal()",
    "kind": "Method",
    "detail": "Function (Number - = Temp ; Result .)",
    "insertText": "ShiftRightInternal(1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (}* this = Result ; } TBigInt&)",
    "insertText": "operator(int64 Other)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 BitIndex ;)",
    "insertText": "for(BitIndex = BitsPerWord - 1; BitIndex >= 0 && !(Bits[WordIndex] & (1 << BitIndex)); --BitIndex)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const int32 WordIndex = BitIndex / BitsPerWord ; BitIndex - = WordIndex* BitsPerWord ;)",
    "insertText": "return(Bits[WordIndex] & (1 << BitIndex))"
  },
  {
    "label": "SetBit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBit(int32 BitIndex, int32 Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 WordIndex = BitIndex / BitsPerWord ; BitIndex - = WordIndex* BitsPerWord ;)",
    "insertText": "if(!!Value)"
  },
  {
    "label": "WordIndex()",
    "kind": "Method",
    "detail": "Function (Bits [)",
    "insertText": "WordIndex(1 << BitIndex)"
  },
  {
    "label": "ShiftLeft()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ShiftLeft(const int32 BitCount)"
  },
  {
    "label": "ShiftRight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShiftRight(-BitCount)"
  },
  {
    "label": "ShiftRight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShiftRight(const int32 BitCount)"
  },
  {
    "label": "ShiftLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShiftLeft(-BitCount)"
  },
  {
    "label": "BitwiseOr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BitwiseOr(const BigInt& Other)"
  },
  {
    "label": "BitwiseAnd()",
    "kind": "Method",
    "detail": "Function (Bits [ WordIndex ] | = Other . Bits [ WordIndex ] ; } } void)",
    "insertText": "BitwiseAnd(const BigInt& Other)"
  },
  {
    "label": "BitwiseNot()",
    "kind": "Method",
    "detail": "Function (Bits [ WordIndex ]& = Other . Bits [ WordIndex ] ; } } void)",
    "insertText": "BitwiseNot()"
  },
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (Bits [ WordIndex ] = ~ Bits [ WordIndex ] ; } } bool)",
    "insertText": "IsEqual(const BigInt& Other)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } int32 WordIndex ;)",
    "insertText": "for(WordIndex = NumWords - 1; WordIndex >= 0 && Other.Bits[WordIndex] == Bits[WordIndex]; --WordIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 WordIndex ;)",
    "insertText": "for(WordIndex = NumWords - 1; WordIndex >= 0 && !Bits[WordIndex]; --WordIndex)"
  },
  {
    "label": "IsLessThanZero()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLessThanZero()"
  },
  {
    "label": "IsFirstBitSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFirstBitSet()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(int32 BitIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BigInt)",
    "insertText": "operator(int32 Count)"
  },
  {
    "label": "ShiftRight()",
    "kind": "Method",
    "detail": "Function (BigInt Result =* this ; Result .)",
    "insertText": "ShiftRight(Count)"
  },
  {
    "label": "ShiftLeft()",
    "kind": "Method",
    "detail": "Function (BigInt Result =* this ; Result .)",
    "insertText": "ShiftLeft(Count)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (BigInt)",
    "insertText": "Result(*this)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(Other)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Subtract(Other)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Subtract(One)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Multiply(Other)"
  },
  {
    "label": "Divide()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Divide(Divider)"
  },
  {
    "label": "Modulo()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Modulo(Modulus)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const BigInt& Other)"
  },
  {
    "label": "BitwiseAnd()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "BitwiseAnd(Other)"
  },
  {
    "label": "BitwiseOr()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "BitwiseOr(Other)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "Text()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Text(TEXT(\"0x\"))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 WordIndex ;)",
    "insertText": "for(WordIndex = NumWords - 1; WordIndex > 0; --WordIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "for(; WordIndex >= 0; --WordIndex)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (Text + =)",
    "insertText": "Printf(TEXT(\"%08x\"), Bits[WordIndex])"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} return Text ; } void)",
    "insertText": "Parse(const FString& Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 ValueStartIndex = 0 ;)",
    "insertText": "if(Value.Len() >= 2 && Value[0] == '0' && FChar::ToUpper(Value[1]) == 'X')"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (ValueStartIndex = 2 ; })",
    "insertText": "check((Value.Len() - ValueStartIndex) <= (NumBits / 4))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 NybblesPerWord = BitsPerWord / 4 ;)",
    "insertText": "for(int32 CharIndex = Value.Len() - 1; CharIndex >= ValueStartIndex; --CharIndex)"
  },
  {
    "label": "ByteIndex()",
    "kind": "Method",
    "detail": "Function (const TCHAR ByteChar = Value [ CharIndex ] ; const int32)",
    "insertText": "ByteIndex(Value.Len() - CharIndex - 1)"
  },
  {
    "label": "ByteChar()",
    "kind": "Method",
    "detail": "Function (const int32 WordIndex = ByteIndex / NybblesPerWord ; const int32 ByteValue =)",
    "insertText": "ByteChar(FChar::ToUpper(ByteChar) - 'A' + 10) : (ByteChar - '0')"
  },
  {
    "label": "WordIndex()",
    "kind": "Method",
    "detail": "Function (Bits [)",
    "insertText": "WordIndex(ByteValue << (ByteIndex % NybblesPerWord) * 4)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FArchive&)",
    "insertText": "operator(FArchive& Ar, BigInt& Value)"
  },
  {
    "label": "One()",
    "kind": "Method",
    "detail": "Function (Ar<<Value . Bits [ Index ] ; } return Ar ; } } ; template<int32 NumBits,bool bSigned> TBigInt<NumBits,bSigned> TBigInt<NumBits,bSigned)",
    "insertText": "One(1LL)"
  },
  {
    "label": "CalculateGCD()",
    "kind": "Method",
    "detail": "Function (typedef TBigInt<2 5 6> int256 ; typedef TBigInt<5 1 2> int512 ; typedef TBigInt<5 1 2> TEncryptionInt ; template<IntType> struct TEncryptionKey { IntType Exponent ; IntType Modulus ; } ; typedef TEncryptionKey<TEncryptionInt> FEncryptionKey ; namespace FEncryption { template<IntType> IntType)",
    "insertText": "CalculateGCD(IntType ValueA, IntType ValueB)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (ValueA>> = 1 ; ValueB>> = 1 ; })",
    "insertText": "while((ValueA & 1) == 0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (ValueA>> = 1 ; } do {)",
    "insertText": "while((ValueB & 1) == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ValueB>> = 1 ; })",
    "insertText": "if(ValueA > ValueB)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(ValueA, ValueB)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} ValueB = ValueB - ValueA ; })",
    "insertText": "while(ValueB != 0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (IntType x0 = 1 ; IntType y0 = 0 ; IntType x1 = 0 ; IntType y1 = 1 ; IntType a0 = Exponent ; IntType b0 = Totient ;)",
    "insertText": "while(b0 != 0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (IntType Quotient = a0 / b0 ; IntType b1 = a0 % b0 ; a0 = b0 ; b0 = b1 ; IntType x2 = x0 - Quotient* x1 ; x0 = x1 ; x1 = x2 ; IntType y2 = y0 - Quotient* y1 ; y0 = y1 ; y1 = y2 ; })",
    "insertText": "while(x0 < 0)"
  },
  {
    "label": "GenerateKeyPair()",
    "kind": "Method",
    "detail": "Function (x0 + = Totient ; } return x0 ; } template<IntType> void)",
    "insertText": "GenerateKeyPair(const IntType& P, const IntType& Q, FEncryptionKey& PublicKey, FEncryptionKey& PrivateKey)"
  },
  {
    "label": "Fi()",
    "kind": "Method",
    "detail": "Function (const IntType Modulus = P* Q ; const IntType)",
    "insertText": "Fi(P - 1) * (Q - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (IntType EncodeExponent = Fi ; IntType DecodeExponent = 0 ; do {)",
    "insertText": "for(--EncodeExponent; EncodeExponent > 1 && CalculateGCD(EncodeExponent, Fi) > 1; --EncodeExponent)"
  },
  {
    "label": "CalculateMultiplicativeInverseOfExponent()",
    "kind": "Method",
    "detail": "Function (DecodeExponent =)",
    "insertText": "CalculateMultiplicativeInverseOfExponent(EncodeExponent, Fi)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(DecodeExponent == EncodeExponent)"
  },
  {
    "label": "ModularPow()",
    "kind": "Method",
    "detail": "Function (PublicKey . Exponent = DecodeExponent ; PublicKey . Modulus = Modulus ; PrivateKey . Exponent = EncodeExponent ; PrivateKey . Modulus = Modulus ; } template<IntType> IntType)",
    "insertText": "ModularPow(IntType Base, IntType Exponent, IntType Modulus)"
  },
  {
    "label": "One()",
    "kind": "Method",
    "detail": "Function (const IntType)",
    "insertText": "One(1)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (IntType)",
    "insertText": "Result(1)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Result(Result * Base)"
  },
  {
    "label": "Base()",
    "kind": "Method",
    "detail": "Function (} Exponent>> = 1 ;)",
    "insertText": "Base(Base * Base)"
  },
  {
    "label": "EncryptBytes()",
    "kind": "Method",
    "detail": "Function (} return Result ; } template<IntType> void)",
    "insertText": "EncryptBytes(IntType* EncryptedData, const uint8* Data, const int64 DataLength, const FEncryptionKey& EncryptionKey)"
  },
  {
    "label": "ModularPow()",
    "kind": "Method",
    "detail": "Function (EncryptedData [ Index ] =)",
    "insertText": "ModularPow(IntType(Data[Index]), EncryptionKey.Exponent, EncryptionKey.Modulus)"
  },
  {
    "label": "DecryptBytes()",
    "kind": "Method",
    "detail": "Function (} } template<IntType> void)",
    "insertText": "DecryptBytes(uint8* DecryptedData, const IntType* Data, const int64 DataLength, const FEncryptionKey& DecryptionKey)"
  },
  {
    "label": "ModularPow()",
    "kind": "Method",
    "detail": "Function (IntType DecryptedByte =)",
    "insertText": "ModularPow(Data[Index], DecryptionKey.Exponent, DecryptionKey.Modulus)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (DecryptedData [)",
    "insertText": "Index(uint8)DecryptedByte.ToInt()"
  },
  {
    "label": "ModularPow()",
    "kind": "Method",
    "detail": "Function (} } } template<> TEncryptionInt)",
    "insertText": "ModularPow(TEncryptionInt Base, TEncryptionInt Exponent, TEncryptionInt Modulus)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (TEncryptionInt)",
    "insertText": "Result(1LL)"
  },
  {
    "label": "MultiplyFast()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "MultiplyFast(Base)"
  },
  {
    "label": "FSignatureBase()",
    "kind": "Method",
    "detail": "Function (} return Result ; } template<class InDataType> struct FSignatureBase { typedef InDataType DataType ; DataType Data ;)",
    "insertText": "FSignatureBase()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Data = 0 ; } void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (Ar<<Data ; } int64)",
    "insertText": "Size()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "ModularPow()",
    "kind": "Method",
    "detail": "Function (OutEncryptedSignature . Data =)",
    "insertText": "ModularPow(TEncryptionInt(InUnencryptedSignature.Data), EncryptionKey.Exponent, EncryptionKey.Modulus)"
  },
  {
    "label": "DecryptSignature()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecryptSignature(const FEncryptedSignature& InEncryptedSignature, FDecryptedSignature& OutUnencryptedSignature, const FEncryptionKey& EncryptionKey)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (OutUnencryptedSignature .)",
    "insertText": "Data(FDecryptedSignature::DataType)FEncryption::ModularPow(TEncryptionInt(InEncryptedSignature.Data), EncryptionKey.Exponent, EncryptionKey.Modulus).ToInt()"
  }
]