[
  {
    "label": "Context",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Context"
  },
  {
    "label": "Stanza",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Stanza"
  },
  {
    "label": "Connection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Connection"
  },
  {
    "label": "Context()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "Context()"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(void *p)"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "log(const xmpp_log_level_t level,\n                         const char * const area,\n                         const char * const msg)"
  },
  {
    "label": "callFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "callFree(void *p, void * const userdata)"
  },
  {
    "label": "callLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "callLog(void * const userdata,\n                            const xmpp_log_level_t level,\n                            const char * const area,\n                            const char * const msg)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "new(size_t size, Context *ctx)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "delete(void *p)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "release()"
  },
  {
    "label": "toText()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "toText(const char ** const buf, size_t * const buflen)"
  },
  {
    "label": "addChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addChild(Stanza *child)"
  },
  {
    "label": "setNamespace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNamespace(const char * const ns)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(const char * const key, const char * const value)"
  },
  {
    "label": "setName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setName(const char * const name)"
  },
  {
    "label": "setText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setText(const char * const text)"
  },
  {
    "label": "setText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setText(const char * const text, const size_t size)"
  },
  {
    "label": "setType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setType(const char * const type)"
  },
  {
    "label": "setId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setId(const char * const id)"
  },
  {
    "label": "setTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTo(const char * const to)"
  },
  {
    "label": "setFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFrom(const char * const from)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "new(size_t size, Context *ctx)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "delete(void *p)"
  },
  {
    "label": "setJID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setJID(const char * const jid)"
  },
  {
    "label": "setPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPass(const char * const pass)"
  },
  {
    "label": "connectClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "connectClient(const char * const domain,\n                           xmpp_conn_handler callback,\n                           void * const userdata)"
  },
  {
    "label": "disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "disconnect()"
  },
  {
    "label": "send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "send(Stanza *stanza)"
  },
  {
    "label": "addTimedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTimedHandler(xmpp_timed_handler handler,\n                             const unsigned long perdio,\n                             void * const userdata)"
  },
  {
    "label": "deleteTimedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteTimedHandler(xmpp_timed_handler handler)"
  },
  {
    "label": "addHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addHandler(xmpp_handler handler,\n                        const char * const ns,\n                        const char * const name,\n                        const char * const type,\n                        void * const userdata)"
  },
  {
    "label": "deleteHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteHandler(xmpp_handler handler)"
  },
  {
    "label": "addIdHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addIdHandler(xmpp_handler handler,\n                          const char * const id,\n                          void * const userdata)"
  },
  {
    "label": "deleteIdHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteIdHandler(xmpp_handler handler)"
  }
]