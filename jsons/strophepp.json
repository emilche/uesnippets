[
  {
    "label": "Context",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Context"
  },
  {
    "label": "Stanza",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Stanza"
  },
  {
    "label": "Connection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Connection"
  },
  {
    "label": "Context()",
    "kind": "Method",
    "detail": "Function (# ifndef __LIBSTROPHE_STROPHEPP_H__ # define __LIBSTROPHE_STROPHEPP_H__ # include \" strophe . h \" namespace XMPP { class Context { private : xmpp_mem_t m_mem ; xmpp_log_t m_log ; xmpp_ctx_t* m_ctx ; public :)",
    "insertText": "Context()"
  },
  {
    "label": "alloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "alloc(const size_t size)"
  },
  {
    "label": "realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "realloc(void *p, const size_t size)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(void *p)"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "log(const xmpp_log_level_t level, const char * const area, const char * const msg)"
  },
  {
    "label": "getContext()",
    "kind": "Method",
    "detail": "Function (xmpp_ctx_t*)",
    "insertText": "getContext()"
  },
  {
    "label": "callAlloc()",
    "kind": "Method",
    "detail": "Function (private : void*)",
    "insertText": "callAlloc(const size_t size, void * const userdata)"
  },
  {
    "label": "callRealloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "callRealloc(void *p, const size_t size, void * const userdata)"
  },
  {
    "label": "callFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "callFree(void *p, void * const userdata)"
  },
  {
    "label": "callLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "callLog(void * const userdata, const xmpp_log_level_t level, const char * const area, const char * const msg)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} ; class Stanza { private : Context* m_ctx ; xmpp_stanza_t* m_stanza ; void* operator)",
    "insertText": "new(size_t size, Context *ctx)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void operator)",
    "insertText": "delete(void *p)"
  },
  {
    "label": "Stanza()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stanza(Context *ctx)"
  },
  {
    "label": "Stanza()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Stanza()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (public : Stanza*)",
    "insertText": "create(Context *ctx)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "release()"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Stanza*)",
    "insertText": "clone()"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (Stanza*)",
    "insertText": "copy()"
  },
  {
    "label": "toText()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "toText(const char ** const buf, size_t * const buflen)"
  },
  {
    "label": "getChildren()",
    "kind": "Method",
    "detail": "Function (Stanza*)",
    "insertText": "getChildren()"
  },
  {
    "label": "getChildByName()",
    "kind": "Method",
    "detail": "Function (Stanza*)",
    "insertText": "getChildByName(const char * const name)"
  },
  {
    "label": "getNext()",
    "kind": "Method",
    "detail": "Function (Stanza*)",
    "insertText": "getNext()"
  },
  {
    "label": "getAttribute()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "getAttribute(const char * const name)"
  },
  {
    "label": "getNamespace()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "getNamespace()"
  },
  {
    "label": "getText()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "getText()"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "getName()"
  },
  {
    "label": "addChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addChild(Stanza *child)"
  },
  {
    "label": "setNamespace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNamespace(const char * const ns)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(const char * const key, const char * const value)"
  },
  {
    "label": "setName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setName(const char * const name)"
  },
  {
    "label": "setText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setText(const char * const text)"
  },
  {
    "label": "setText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setText(const char * const text, const size_t size)"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "getType()"
  },
  {
    "label": "getId()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "getId()"
  },
  {
    "label": "getTo()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "getTo()"
  },
  {
    "label": "getFrom()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "getFrom()"
  },
  {
    "label": "setType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setType(const char * const type)"
  },
  {
    "label": "setId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setId(const char * const id)"
  },
  {
    "label": "setTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTo(const char * const to)"
  },
  {
    "label": "setFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFrom(const char * const from)"
  },
  {
    "label": "Connection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Connection(Context *ctx)"
  },
  {
    "label": "Connection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Connection()"
  },
  {
    "label": "getJID()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getJID()"
  },
  {
    "label": "setJID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setJID(const char * const jid)"
  },
  {
    "label": "getPass()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getPass()"
  },
  {
    "label": "setPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPass(const char * const pass)"
  },
  {
    "label": "connectClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "connectClient(const char * const domain, xmpp_conn_handler callback, void * const userdata)"
  },
  {
    "label": "disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "disconnect()"
  },
  {
    "label": "send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "send(Stanza *stanza)"
  },
  {
    "label": "addTimedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTimedHandler(xmpp_timed_handler handler, const unsigned long perdio, void * const userdata)"
  },
  {
    "label": "deleteTimedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteTimedHandler(xmpp_timed_handler handler)"
  },
  {
    "label": "addHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addHandler(xmpp_handler handler, const char * const ns, const char * const name, const char * const type, void * const userdata)"
  },
  {
    "label": "deleteHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteHandler(xmpp_handler handler)"
  },
  {
    "label": "addIdHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addIdHandler(xmpp_handler handler, const char * const id, void * const userdata)"
  },
  {
    "label": "deleteIdHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteIdHandler(xmpp_handler handler)"
  }
]