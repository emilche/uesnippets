[
  {
    "label": "FChunkSourceEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkSourceEvent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInstallationFileAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallationFileAction"
  },
  {
    "label": "FChunkUriRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkUriRequest"
  },
  {
    "label": "FChunkUriResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkUriResponse"
  },
  {
    "label": "FMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageHandler"
  },
  {
    "label": "FDefaultMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultMessageHandler"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" Templates / Function . h \" namespace BuildPatchServices { struct FChunkSourceEvent { enum class EType : uint32 { AccessLost = 0,AccessRegained,Retired } ; EType Event ; FString Location ; } ; struct FInstallationFileAction { enum class EType : uint32 { Removed = 0,Added,Updated,} ; EType Action ; FString Filename ; } ; struct FChunkUriRequest { FString CloudDirectory ; FString RelativePath ; } ; struct FChunkUriResponse { FString Uri ; } ; enum class EMessageRequests : uint32 { None = 0,ChunkUriRequest = 0 x1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EMessageRequests)"
  },
  {
    "label": "FMessageHandler()",
    "kind": "Method",
    "detail": "Function (class FMessageHandler { public :)",
    "insertText": "FMessageHandler(EMessageRequests InMessageRequests) : MessageRequests(InMessageRequests)"
  },
  {
    "label": "FMessageHandler()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMessageHandler()"
  },
  {
    "label": "HandleMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMessage(const FChunkSourceEvent& Message)"
  },
  {
    "label": "HandleMessage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleMessage(const FInstallationFileAction& Message)"
  },
  {
    "label": "HandleRequest()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HandleRequest(const FChunkUriRequest& Request, TFunction<void(FChunkUriResponse)> OnResponse)"
  },
  {
    "label": "OnResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResponse({ Request.CloudDirectory / Request.RelativePath })"
  }
]