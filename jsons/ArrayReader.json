[
  {
    "label": "FArrayReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrayReader"
  },
  {
    "label": "FArrayReader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" Serialization / MemoryArchive . h \" class FArrayReader final : public FMemoryArchive,public TArray<uint8> { public :)",
    "insertText": "FArrayReader(bool bIsPersistent=false)"
  },
  {
    "label": "SetIsLoading()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetIsLoading(true)"
  },
  {
    "label": "SetIsPersistent()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetIsPersistent(bIsPersistent)"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(void* Data, int64 Count)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Data, &((*this)[(int32)Offset]), Count)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (Offset + = Count ; } else {)",
    "insertText": "SetError()"
  }
]