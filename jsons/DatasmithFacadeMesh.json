[
  {
    "label": "FDatasmithFacadeMaterialID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithFacadeMaterialID"
  },
  {
    "label": "IDatasmithMeshElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithMeshElement"
  },
  {
    "label": "DATASMITHFACADE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DATASMITHFACADE_API"
  },
  {
    "label": "FDatasmithFacadeMesh()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DatasmithFacadeElement . h \" # include \" DatasmithMesh . h \" class FDatasmithFacadeMaterialID ; class IDatasmithMeshElement ; class FDatasmithFacadeMesh { public :)",
    "insertText": "FDatasmithFacadeMesh() : RootOwnerMesh(MakeShared<FDatasmithMesh>()) , InternalMesh(RootOwnerMesh.Get())"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetName(const TCHAR* InName)"
  },
  {
    "label": "GetDatasmithMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDatasmithMesh().SetName(InName)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "CalculateHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CalculateHash(TCHAR OutBuffer[33], size_t BufferSize)"
  },
  {
    "label": "SetFacesCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFacesCount(int32 NumFaces)"
  },
  {
    "label": "GetDatasmithMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDatasmithMesh().SetFacesCount(NumFaces)"
  },
  {
    "label": "GetFacesCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetFacesCount()"
  },
  {
    "label": "SetFace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFace(int32 Index, int32 Vertex1, int32 Vertex2, int32 Vertex3, int32 MaterialId = 0)"
  },
  {
    "label": "GetDatasmithMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDatasmithMesh().SetFace(Index, Vertex1, Vertex2, Vertex3, MaterialId)"
  },
  {
    "label": "GetFace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetFace(int32 Index, int32& OutVertex1, int32& OutVertex2, int32& OutVertex3, int32& OutMaterialId)"
  },
  {
    "label": "GetDatasmithMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDatasmithMesh().GetFace(Index, OutVertex1, OutVertex2, OutVertex3, OutMaterialId)"
  },
  {
    "label": "SetFaceSmoothingMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFaceSmoothingMask(int32 Index, uint32 SmoothingMask)"
  },
  {
    "label": "GetDatasmithMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDatasmithMesh().SetFaceSmoothingMask(Index, SmoothingMask)"
  },
  {
    "label": "GetFaceSmoothingMask()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetFaceSmoothingMask(int32 Index)"
  },
  {
    "label": "GetMaterialsCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMaterialsCount()"
  },
  {
    "label": "IsMaterialIdUsed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMaterialIdUsed(int32 MaterialId)"
  },
  {
    "label": "SetVerticesCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVerticesCount(int32 NumVerts)"
  },
  {
    "label": "GetDatasmithMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDatasmithMesh().SetVerticesCount(NumVerts)"
  },
  {
    "label": "GetVerticesCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetVerticesCount()"
  },
  {
    "label": "SetVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVertex(int32 Index, float X, float Y, float Z)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVertex(int32 Index, float& OutX, float& OutY, float& OutZ)"
  },
  {
    "label": "SetNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNormal(int32 Index, float X, float Y, float Z)"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNormal(int32 Index, float& OutX, float& OutY, float& OutZ)"
  },
  {
    "label": "SetUVChannelsCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUVChannelsCount(int32 ChannelCount)"
  },
  {
    "label": "GetDatasmithMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDatasmithMesh().SetUVChannelsCount(ChannelCount)"
  },
  {
    "label": "AddUVChannel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddUVChannel()"
  },
  {
    "label": "GetDatasmithMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDatasmithMesh().AddUVChannel()"
  },
  {
    "label": "RemoveUVChannel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveUVChannel()"
  },
  {
    "label": "GetDatasmithMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDatasmithMesh().RemoveUVChannel()"
  },
  {
    "label": "GetUVChannelsCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetUVChannelsCount()"
  },
  {
    "label": "SetUVCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUVCount(int32 Channel, int32 NumVerts)"
  },
  {
    "label": "GetUVCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetUVCount(int32 Channel)"
  },
  {
    "label": "SetUV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUV(int32 Channel, int32 Index, double U, double V)"
  },
  {
    "label": "GetHashForUVChannel()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetHashForUVChannel(int32 Channel)"
  },
  {
    "label": "GetUV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetUV(int32 Channel, int32 Index, double& OutU, double& OutV)"
  },
  {
    "label": "UV()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "UV(GetDatasmithMesh().GetUV(Channel, Index))"
  },
  {
    "label": "SetFaceUV()",
    "kind": "Method",
    "detail": "Function (OutU = UV . X ; OutV = UV . Y ; } void)",
    "insertText": "SetFaceUV(int32 Index, int32 Channel, int32 Vertex1, int32 Vertex2, int32 Vertex3)"
  },
  {
    "label": "GetFaceUV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetFaceUV(int32 Index, int32 Channel, int32& OutVertex1, int32& OutVertex2, int32& OutVertex3)"
  },
  {
    "label": "GetDatasmithMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDatasmithMesh().GetFaceUV(Index, Channel, OutVertex1, OutVertex2, OutVertex3)"
  },
  {
    "label": "GetVertexColorCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetVertexColorCount()"
  },
  {
    "label": "SetVertexColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVertexColor(int32 Index, uint8 R, uint8 G, uint8 B, uint8 A)"
  },
  {
    "label": "GetVertexColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetVertexColor(int32 Index, uint8& OutR, uint8 OutG, uint8& OutB, uint8& OutA)"
  },
  {
    "label": "VertexColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "VertexColor(GetDatasmithMesh().GetVertexColor(Index))"
  },
  {
    "label": "SetLightmapSourceUVChannel()",
    "kind": "Method",
    "detail": "Function (OutR = VertexColor . R ; OutG = VertexColor . G ; OutB = VertexColor . B ; OutA = VertexColor . A ; } void)",
    "insertText": "SetLightmapSourceUVChannel(int32 Channel)"
  },
  {
    "label": "GetLightmapSourceUVChannel()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetLightmapSourceUVChannel()"
  },
  {
    "label": "AddLOD()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddLOD(const FDatasmithFacadeMesh& InLODMesh)"
  },
  {
    "label": "GetDatasmithMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDatasmithMesh().AddLOD(InLODMesh.GetDatasmithMesh())"
  },
  {
    "label": "GetLODsCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetLODsCount()"
  },
  {
    "label": "GetNewLOD()",
    "kind": "Method",
    "detail": "Function (} FDatasmithFacadeMesh*)",
    "insertText": "GetNewLOD(int32 Index)"
  },
  {
    "label": "ComputeArea()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } float)",
    "insertText": "ComputeArea()"
  },
  {
    "label": "FDatasmithFacadeMesh()",
    "kind": "Method",
    "detail": "Function (} # ifdef SWIG_FACADE protected : # endif)",
    "insertText": "FDatasmithFacadeMesh(const TSharedRef<FDatasmithMesh>& InRootOwnerMesh, FDatasmithMesh& InReferencedMesh ) : RootOwnerMesh(InRootOwnerMesh) , InternalMesh(InReferencedMesh)"
  },
  {
    "label": "GetDatasmithMesh()",
    "kind": "Method",
    "detail": "Function (} FDatasmithMesh&)",
    "insertText": "GetDatasmithMesh()"
  },
  {
    "label": "GetFile()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetFile()"
  },
  {
    "label": "SetFile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFile(const TCHAR* InFile)"
  },
  {
    "label": "GetDatasmithMeshElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDatasmithMeshElement()->SetFile(InFile)"
  },
  {
    "label": "GetFileHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetFileHash(TCHAR OutBuffer[33], size_t BufferSize)"
  },
  {
    "label": "SetFileHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFileHash(const TCHAR* Hash)"
  },
  {
    "label": "SetDimensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDimensions(float InArea, float InWidth, float InHeight, float InDepth)"
  },
  {
    "label": "GetDatasmithMeshElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDatasmithMeshElement()->SetDimensions(InArea, InWidth, InHeight, InDepth)"
  },
  {
    "label": "GetArea()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetArea()"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetWidth()"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetHeight()"
  },
  {
    "label": "GetDepth()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetDepth()"
  },
  {
    "label": "GetLightmapCoordinateIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetLightmapCoordinateIndex()"
  },
  {
    "label": "SetLightmapCoordinateIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLightmapCoordinateIndex(int32 UVChannel)"
  },
  {
    "label": "GetDatasmithMeshElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDatasmithMeshElement()->SetLightmapCoordinateIndex(UVChannel)"
  },
  {
    "label": "GetLightmapSourceUV()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetLightmapSourceUV()"
  },
  {
    "label": "SetLightmapSourceUV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLightmapSourceUV(int32 UVChannel)"
  },
  {
    "label": "GetDatasmithMeshElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDatasmithMeshElement()->SetLightmapSourceUV(UVChannel)"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaterial(const TCHAR* MaterialPathName, int32 SlotId)"
  },
  {
    "label": "GetDatasmithMeshElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDatasmithMeshElement()->SetMaterial(MaterialPathName, SlotId)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetMaterial(int32 SlotId)"
  },
  {
    "label": "GetMaterialSlotCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMaterialSlotCount()"
  },
  {
    "label": "GetMaterialSlotAt()",
    "kind": "Method",
    "detail": "Function (} FDatasmithFacadeMaterialID*)",
    "insertText": "GetMaterialSlotAt(int32 Index)"
  },
  {
    "label": "FDatasmithFacadeMeshElement()",
    "kind": "Method",
    "detail": "Function (# ifdef SWIG_FACADE protected : # endif)",
    "insertText": "FDatasmithFacadeMeshElement(const TSharedRef<IDatasmithMeshElement>& InMeshElement)"
  },
  {
    "label": "GetDatasmithMeshElement()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IDatasmithMeshElement>)",
    "insertText": "GetDatasmithMeshElement()"
  }
]