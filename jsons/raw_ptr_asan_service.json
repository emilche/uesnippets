[
  {
    "label": "EnableDereferenceCheckTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EnableDereferenceCheckTag"
  },
  {
    "label": "EnableExtractionCheckTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EnableExtractionCheckTag"
  },
  {
    "label": "EnableInstantiationCheckTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EnableInstantiationCheckTag"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "PendingReport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PendingReport"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_RAW_PTR_ASAN_SERVICE_H_ # define BASE_MEMORY_RAW_PTR_ASAN_SERVICE_H_ # include \" base / allocator / buildflags . h \" # if)",
    "insertText": "BUILDFLAG(USE_ASAN_BACKUP_REF_PTR)"
  },
  {
    "label": "Configure()",
    "kind": "Method",
    "detail": "Function (using EnableDereferenceCheck = base::StrongAlias<class EnableDereferenceCheckTag,bool> ; using EnableExtractionCheck = base::StrongAlias<class EnableExtractionCheckTag,bool> ; using EnableInstantiationCheck = base::StrongAlias<class EnableInstantiationCheckTag,bool> ; class BASE_EXPORT RawPtrAsanService { public : enum class ReportType { kDereference,kExtraction,kInstantiation,} ; void)",
    "insertText": "Configure(EnableDereferenceCheck, EnableExtractionCheck, EnableInstantiationCheck)"
  },
  {
    "label": "IsSupportedAllocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedAllocation(void*)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(const char* format, ...)"
  },
  {
    "label": "GetPendingReport()",
    "kind": "Method",
    "detail": "Function (private : enum class Mode { kUninitialized,kDisabled,kEnabled,} ; struct PendingReport { ReportType type ; uintptr_t allocation_base ; size_t allocation_size ; } ; PendingReport&)",
    "insertText": "GetPendingReport()"
  },
  {
    "label": "GetShadow()",
    "kind": "Method",
    "detail": "Function (uint8_t*)",
    "insertText": "GetShadow(void* ptr)"
  },
  {
    "label": "MallocHook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MallocHook(const volatile void*, size_t)"
  },
  {
    "label": "FreeHook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeHook(const volatile void*)"
  },
  {
    "label": "ErrorReportCallback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ErrorReportCallback(const char* report)"
  }
]