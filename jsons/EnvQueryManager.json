[
  {
    "label": "UEnvQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnvQuery"
  },
  {
    "label": "UEnvQueryManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnvQueryManager"
  },
  {
    "label": "UEnvQueryOption",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnvQueryOption"
  },
  {
    "label": "UEnvQueryTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnvQueryTest"
  },
  {
    "label": "FEnvQueryManagerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvQueryManagerConfig"
  },
  {
    "label": "FEnvQueryRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvQueryRequest"
  },
  {
    "label": "UserClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UserClass"
  },
  {
    "label": "FEnvQueryInstanceCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvQueryInstanceCache"
  },
  {
    "label": "FEQSDebugger",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEQSDebugger"
  },
  {
    "label": "FEnvQueryInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvQueryInfo"
  },
  {
    "label": "FStatsInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatsInfo"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Templates / SubclassOf . h \" # include \" EnvironmentQuery / Items / EnvQueryItemType . h \" # include \" EnvironmentQuery / EnvQueryContext . h \" # include \" EnvironmentQuery / EnvQueryTypes . h \" # include \" AISubsystem . h \" # include \" EnvironmentQuery / EnvQueryInstanceBlueprintWrapper . h \" # include \" EnvQueryManager . generated . h \" class UEnvQuery ; class UEnvQueryManager ; class UEnvQueryOption ; class UEnvQueryTest ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(config)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (public : FString)",
    "insertText": "ToString()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FEnvQueryRequest() : QueryTemplate(NULL), Owner(NULL), World(NULL)"
  },
  {
    "label": "FEnvQueryRequest()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEnvQueryRequest(const UEnvQuery* Query) : QueryTemplate(Query), Owner(NULL), World(NULL)"
  },
  {
    "label": "FEnvQueryRequest()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEnvQueryRequest(const UEnvQuery* Query, UObject* RequestOwner) : QueryTemplate(Query), Owner(RequestOwner), World(NULL)"
  },
  {
    "label": "SetDynamicParam()",
    "kind": "Method",
    "detail": "Function (} FEnvQueryRequest&)",
    "insertText": "SetDynamicParam(const FAIDynamicParam& Param, const UBlackboardComponent* BlackboardComponent = nullptr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NamedParams .)",
    "insertText": "Add(ParamName, Value)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NamedParams .)",
    "insertText": "Add(ParamName, *((float*)&Value))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NamedParams .)",
    "insertText": "Add(ParamName, Value ? 1.0f : -1.0f)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NamedParams .)",
    "insertText": "Add(ParamData.ParamName, ParamData.Value)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (World = InWorld ; return* this ; } template<class UserClass> int32)",
    "insertText": "Execute(EEnvQueryRunMode::Type Mode, UserClass* InObj, typename FQueryFinishedSignature::TMethodPtr< UserClass > InMethod)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> int32)",
    "insertText": "Execute(EEnvQueryRunMode::Type Mode, UserClass* InObj, typename FQueryFinishedSignature::TConstMethodPtr< UserClass > InMethod)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Execute(EEnvQueryRunMode::Type RunMode, FQueryFinishedSignature const& FinishDelegate)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FStatsInfo()",
    "kind": "Method",
    "detail": "Function (FEnvQueryInstance Instance ; FName AssetName ; } ; # if USE_EQS_DEBUGGER struct FEQSDebugger { struct FEnvQueryInfo { TSharedPtr<FEnvQueryInstance> Instance ; double Timestamp ; } ; struct FStatsInfo { FEnvQueryDebugProfileData MostExpensive ; double MostExpensiveDuration ; FEnvQueryDebugProfileData TotalAvgData ; double TotalAvgDuration ; int32 TotalAvgCount ; TArray<uint8> TickPct ; double LastTickTime ; uint64 LastTickFrame ; uint16 FirstTickEntry ; uint16 LastTickEntry ;)",
    "insertText": "FStatsInfo() : MostExpensiveDuration(0.0f), TotalAvgDuration(0.0f), TotalAvgCount(0), LastTickTime(0.0f), LastTickFrame(0), FirstTickEntry(MAX_uint16), LastTickEntry(0)"
  },
  {
    "label": "StoreStats()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "StoreStats(const FEnvQueryInstance& QueryInstance)"
  },
  {
    "label": "StoreTickTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreTickTime(const FEnvQueryInstance& QueryInstance, double TickTime, double MaxTickTime)"
  },
  {
    "label": "StoreQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreQuery(const TSharedPtr<FEnvQueryInstance>& QueryInstance)"
  },
  {
    "label": "SaveStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveStats(const FString& FileName)"
  },
  {
    "label": "LoadStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadStats(const FString& FileName)"
  },
  {
    "label": "GetAllQueriesForOwner()",
    "kind": "Method",
    "detail": "Function (const TArray<FEnvQueryInfo>&)",
    "insertText": "GetAllQueriesForOwner(const UObject* Owner)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FStatsInfo> StoredStats ; protected : TMap<const UObject*,TArray<FEnvQueryInfo>> StoredQueries ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FEQSDebugger::FStatsInfo& Data)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() AIMODULE_API virtual void PostLoad()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "IsTickableInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickableInEditor()"
  },
  {
    "label": "RunQuery()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RunQuery(const TSharedPtr<FEnvQueryInstance>& QueryInstance, FQueryFinishedSignature const& FinishDelegate)"
  },
  {
    "label": "SilentlyRemoveAllQueriesByQuerier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SilentlyRemoveAllQueriesByQuerier(const UObject& Querier)"
  },
  {
    "label": "RemoveAllQueriesByQuerier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllQueriesByQuerier(Querier, false)"
  },
  {
    "label": "RemoveAllQueriesByQuerier()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAllQueriesByQuerier(const UObject& Querier, bool bExecuteFinishDelegate)"
  },
  {
    "label": "RunInstantQuery()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FEnvQueryResult>)",
    "insertText": "RunInstantQuery(const FEnvQueryRequest& Request, EEnvQueryRunMode::Type RunMode)"
  },
  {
    "label": "RunInstantQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunInstantQuery(const TSharedPtr<FEnvQueryInstance>& QueryInstance)"
  },
  {
    "label": "PrepareQueryInstance()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FEnvQueryInstance>)",
    "insertText": "PrepareQueryInstance(const FEnvQueryRequest& Request, EEnvQueryRunMode::Type RunMode)"
  },
  {
    "label": "FindQueryTemplate()",
    "kind": "Method",
    "detail": "Function (UEnvQuery*)",
    "insertText": "FindQueryTemplate(const FString& QueryName)"
  },
  {
    "label": "PrepareLocalContext()",
    "kind": "Method",
    "detail": "Function (UEnvQueryContext*)",
    "insertText": "PrepareLocalContext(TSubclassOf<UEnvQueryContext> ContextClass)"
  },
  {
    "label": "FindNamedParam()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FindNamedParam(int32 QueryId, FName ParamName)"
  },
  {
    "label": "AbortQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbortQuery(int32 RequestID)"
  },
  {
    "label": "PrintActiveQueryInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintActiveQueryInfo()"
  },
  {
    "label": "OnWorldCleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldCleanup()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "RegisterExternalQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExternalQuery(const TSharedPtr<FEnvQueryInstance>& QueryInstance)"
  },
  {
    "label": "UnregisterExternalQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterExternalQuery(const TSharedPtr<FEnvQueryInstance>& QueryInstance)"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (TArray<TSubclassOf<UEnvQueryItemType>> RegisteredItemTypes ; UEnvQueryManager*)",
    "insertText": "GetCurrent(UWorld* World)"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (UEnvQueryManager*)",
    "insertText": "GetCurrent(const UObject* WorldContextObject)"
  },
  {
    "label": "RegisterActiveWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterActiveWrapper(UEnvQueryInstanceBlueprintWrapper& Wrapper)"
  },
  {
    "label": "UnregisterActiveWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterActiveWrapper(UEnvQueryInstanceBlueprintWrapper& Wrapper)"
  },
  {
    "label": "SetAllowTimeSlicing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowTimeSlicing(bool bAllowTimeSlicing)"
  },
  {
    "label": "Configure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Configure(const FEnvQueryManagerConfig& NewConfig)"
  },
  {
    "label": "Exec_Dev()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Exec_Dev(UWorld* Inworld,const TCHAR* Cmd,FOutputDevice& Ar)"
  },
  {
    "label": "FindQueryInstance()",
    "kind": "Method",
    "detail": "Function (UEnvQueryInstanceBlueprintWrapper ; TSharedPtr<FEnvQueryInstance>)",
    "insertText": "FindQueryInstance(const int32 QueryID)"
  },
  {
    "label": "NotifyAssetUpdate()",
    "kind": "Method",
    "detail": "Function (# if USE_EQS_DEBUGGER public : void)",
    "insertText": "NotifyAssetUpdate(UEnvQuery* Query)"
  },
  {
    "label": "GetDebugger()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FEQSDebugger::FStatsInfo> DebuggerStats ; FEQSDebugger&)",
    "insertText": "GetDebugger()"
  },
  {
    "label": "CreateQueryInstance()",
    "kind": "Method",
    "detail": "Function (TMap<FName,UEnvQueryContext*> LocalContextMap ; int32 NextQueryID ; TSharedPtr<FEnvQueryInstance>)",
    "insertText": "CreateQueryInstance(const UEnvQuery* Template, EEnvQueryRunMode::Type RunMode)"
  },
  {
    "label": "CreateOptionInstance()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateOptionInstance(UEnvQueryOption* OptionTemplate, int32 SourceOptionIndex, const TArray<UEnvQueryTest*>& SortedTests, FEnvQueryInstance& Instance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif #)",
    "insertText": "if(UE_BUILD_SHIPPING)"
  },
  {
    "label": "CheckQueryCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckQueryCount()"
  },
  {
    "label": "LogQueryInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogQueryInfo(bool bDisplayThresholdWarning)"
  },
  {
    "label": "OnBlueprintCompiled()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR FDelegateHandle OnBlueprintCompiledHandle ; void)",
    "insertText": "OnBlueprintCompiled()"
  }
]