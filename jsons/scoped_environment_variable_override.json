[
  {
    "label": "Environment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Environment"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedEnvironmentVariableOverride()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SCOPED_ENVIRONMENT_VARIABLE_OVERRIDE_H_ # define BASE_SCOPED_ENVIRONMENT_VARIABLE_OVERRIDE_H_ # include<memory> # include<string> # include \" base / base_export . h \" namespace base { class Environment ; class BASE_EXPORT ScopedEnvironmentVariableOverride final { public :)",
    "insertText": "ScopedEnvironmentVariableOverride(const std::string& variable_name, const std::string& value)"
  },
  {
    "label": "ScopedEnvironmentVariableOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedEnvironmentVariableOverride(const std::string& variable_name)"
  },
  {
    "label": "ScopedEnvironmentVariableOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedEnvironmentVariableOverride(ScopedEnvironmentVariableOverride&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedEnvironmentVariableOverride&)",
    "insertText": "operator(ScopedEnvironmentVariableOverride&&)"
  },
  {
    "label": "ScopedEnvironmentVariableOverride()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedEnvironmentVariableOverride()"
  },
  {
    "label": "GetEnv()",
    "kind": "Method",
    "detail": "Function (base::Environment*)",
    "insertText": "GetEnv()"
  },
  {
    "label": "IsOverridden()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOverridden()"
  }
]