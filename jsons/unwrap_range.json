[
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "__unwrap_range_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__unwrap_range_impl"
  },
  {
    "label": "_Unwrapped",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Unwrapped"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_UNWRAP_RANGE_H # define _LIBCPP___ALGORITHM_UNWRAP_RANGE_H # include<__algorithm / unwrap_iter . h> # include<__concepts / constructible . h> # include<__config> # include<__iterator / concepts . h> # include<__iterator / next . h> # include<__utility / declval . h> # include<__utility / move . h> # include<__utility / pair . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__unwrap()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__unwrap(_Iter __first, _Sent __sent)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (auto __last =)",
    "insertText": "next(__first, __sent)"
  },
  {
    "label": "__unwrap()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__unwrap(_Iter __first, _Sent __last)"
  },
  {
    "label": "__rewrap()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__rewrap(_Iter __orig_iter, decltype(std::__unwrap_iter(__orig_iter)) __iter)"
  },
  {
    "label": "__rewrap()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__rewrap(const _Iter&, _Iter __iter) requires (!(random_access_iterator<_Iter> && sized_sentinel_for<_Sent, _Iter>))"
  },
  {
    "label": "__unwrap_range()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _Iter,class _Sent> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__unwrap_range(_Iter __first, _Sent __last)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<class _Sent,class _Iter,class _Unwrapped =)",
    "insertText": "decltype(std::__unwrap_range(std::declval<_Iter>(), std::declval<_Sent>()))> _LIBCPP_HIDE_FROM_ABI constexpr _Iter __rewrap_range(_Iter __orig_iter, _Unwrapped __iter)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} # else template<class _Iter,class _Unwrapped =)",
    "insertText": "decltype(std::__unwrap_iter(std::declval<_Iter>()))> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR pair<_Unwrapped, _Unwrapped> __unwrap_range(_Iter __first, _Iter __last)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<class _Iter,class _Unwrapped =)",
    "insertText": "decltype(std::__unwrap_iter(std::declval<_Iter>()))> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Iter __rewrap_range(_Iter __orig_iter, _Unwrapped __iter)"
  }
]