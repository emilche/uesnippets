[
  {
    "label": "FRunnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnable"
  },
  {
    "label": "FTlsAutoCleanup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTlsAutoCleanup"
  },
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FThreadSingletonInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadSingletonInitializer"
  },
  {
    "label": "FThreadManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadManager"
  },
  {
    "label": "FForkableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FForkableThread"
  },
  {
    "label": "FForkProcessHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FForkProcessHelper"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GetTlsSlot()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" HAL / PlatformTLS . h \" # include \" HAL / PlatformAffinity . h \" class FRunnable ; class FTlsAutoCleanup ; class FRunnableThread { class FThreadSingletonInitializer ; class FTlsAutoCleanup ; class FThreadManager ; class FForkableThread ; class FForkProcessHelper ; uint32 RunnableTlsSlot ; public : uint32)",
    "insertText": "GetTlsSlot()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FRunnableThread*)",
    "insertText": "Create(class FRunnable* InRunnable, const TCHAR* ThreadName, uint32 InStackSize = 0, EThreadPriority InThreadPri = TPri_Normal, uint64 InThreadAffinityMask = FPlatformAffinity::GetNoAffinityMask(), EThreadCreateFlags InCreateFlags = EThreadCreateFlags::None)"
  },
  {
    "label": "SetThreadPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadPriority(EThreadPriority NewPriority)"
  },
  {
    "label": "SetThreadAffinity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetThreadAffinity(const FThreadAffinity& Affinity)"
  },
  {
    "label": "Kill()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Kill(bool bShouldWait = true)"
  },
  {
    "label": "WaitForCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForCompletion()"
  },
  {
    "label": "GetThreadType()",
    "kind": "Method",
    "detail": "Function (enum class ThreadType { Real,Fake,Forkable,} ; FRunnableThread::ThreadType)",
    "insertText": "GetThreadType()"
  },
  {
    "label": "FRunnableThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRunnableThread()"
  },
  {
    "label": "GetRunnableThread()",
    "kind": "Method",
    "detail": "Function (FRunnableThread*)",
    "insertText": "GetRunnableThread()"
  },
  {
    "label": "RunnableThread()",
    "kind": "Method",
    "detail": "Function (FRunnableThread*)",
    "insertText": "RunnableThread(FRunnableThread*)FPlatformTLS::GetTlsValue(RunnableTlsSlot)"
  },
  {
    "label": "SetTls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTls()"
  },
  {
    "label": "FreeTls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeTls()"
  },
  {
    "label": "SetupCreatedThread()",
    "kind": "Method",
    "detail": "Function (FString ThreadName ; FRunnable* Runnable ; FEvent* ThreadInitSyncEvent ; uint64 ThreadAffinityMask ; EThreadPriority ThreadPriority ; uint32 ThreadID ; private : void)",
    "insertText": "SetupCreatedThread(FRunnableThread*& NewThread, class FRunnable* InRunnable, const TCHAR* ThreadName, uint32 InStackSize, EThreadPriority InThreadPri, uint64 InThreadAffinityMask, EThreadCreateFlags InCreateFlags)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "OnPreFork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPreFork()"
  },
  {
    "label": "OnPostFork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPostFork()"
  },
  {
    "label": "PostCreate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostCreate(EThreadPriority ThreadPriority)"
  }
]