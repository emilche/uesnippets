[
  {
    "label": "FRunnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnable"
  },
  {
    "label": "FTlsAutoCleanup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTlsAutoCleanup"
  },
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FThreadSingletonInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadSingletonInitializer"
  },
  {
    "label": "FTlsAutoCleanup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTlsAutoCleanup"
  },
  {
    "label": "FThreadManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadManager"
  },
  {
    "label": "FForkableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FForkableThread"
  },
  {
    "label": "FForkProcessHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FForkProcessHelper"
  },
  {
    "label": "FRunnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnable"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRunnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnable"
  },
  {
    "label": "GetTlsSlot()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTlsSlot()"
  },
  {
    "label": "FRunnableThread()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FRunnableThread()"
  },
  {
    "label": "SetTls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTls()"
  },
  {
    "label": "FreeTls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeTls()"
  },
  {
    "label": "SetupCreatedThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupCreatedThread(FRunnableThread*& NewThread, class FRunnable* InRunnable, const TCHAR* ThreadName, uint32 InStackSize, EThreadPriority InThreadPri, uint64 InThreadAffinityMask, EThreadCreateFlags InCreateFlags)"
  },
  {
    "label": "PostCreate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostCreate(EThreadPriority ThreadPriority)"
  }
]