[
  {
    "label": "FFPSAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFPSAnalyzer"
  },
  {
    "label": "FProfilerGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfilerGroup"
  },
  {
    "label": "IDataProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDataProvider"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FProfilerStat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfilerStat"
  },
  {
    "label": "FProfilerStatMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfilerStatMetaData"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "FProfilerSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfilerSession"
  },
  {
    "label": "FRawProfilerSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRawProfilerSession"
  },
  {
    "label": "FProfilerAggregatedStat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfilerAggregatedStat"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FProfilerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfilerManager"
  },
  {
    "label": "FProfilerActionManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfilerActionManager"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if STATS # include \" Containers / LockFreeList . h \" # include \" Misc / Guid . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" ProfilerCommon . h \" # include \" ProfilerSample . h \" # include \" ProfilerDataSource . h \" # include \" ISessionInstanceInfo . h \" # include \" Containers / Ticker . h \" # include \" IProfilerServiceManager . h \" # include \" Stats / StatsData . h \" # include \" ProfilerStream . h \" class FFPSAnalyzer ; class FProfilerGroup ; class IDataProvider ; enum class EProfilerSessionTypes { Live,LiveRaw,StatsFile,StatsFileRaw,Combined,Summary,InvalidOrMax,} ; namespace ProfilerSessionTypes { FString)",
    "insertText": "ToString(EProfilerSessionTypes ProfilerSessionType)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "FString(\"InvalidOrMax\")"
  },
  {
    "label": "FProfilerStat()",
    "kind": "Method",
    "detail": "Function (} } } enum class ELoadingProgressStates { Started,InProgress,Loaded,Failed,Cancelled,InvalidOrMax,} ; enum class EProfilerNotificationTypes { LoadingOfflineCapture,SendingServiceSideCapture,} ; class FProfilerGroup ; class FProfilerStat : public FNoncopyable { class FProfilerStatMetaData ; public :)",
    "insertText": "FProfilerStat(const uint32 InStatID = 0)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Initialize(const FString& InName, FProfilerGroup* InOwningGroupPtr, const EStatType InType)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 Index = 0 ;)",
    "insertText": "while(FChar::IsWhitespace(InName[Index]))"
  },
  {
    "label": "ConvertStatTypeToProfilerSampleType()",
    "kind": "Method",
    "detail": "Function (Index + + ; } const FString CleanedName =* InName + Index ; _Name =* CleanedName ; _OwningGroupPtr = InOwningGroupPtr ; _Type =)",
    "insertText": "ConvertStatTypeToProfilerSampleType(InType)"
  },
  {
    "label": "ConvertStatTypeToProfilerSampleType()",
    "kind": "Method",
    "detail": "Function (} const EProfilerSampleTypes::Type)",
    "insertText": "ConvertStatTypeToProfilerSampleType(const EStatType StatType)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (EProfilerSampleTypes::Type ProfilerUnit = EProfilerSampleTypes::InvalidOrMax ;)",
    "insertText": "switch(StatType)"
  },
  {
    "label": "GetDefaultPtr()",
    "kind": "Method",
    "detail": "Function (} FProfilerStat*)",
    "insertText": "GetDefaultPtr()"
  },
  {
    "label": "FProfilerGroup()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FProfilerGroup(const uint32 InID) : _Name(*FString::Printf(TEXT(\"(Group-%04u)\"), InID)) , _ID(InID)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(const FString& InName)"
  },
  {
    "label": "AddStat()",
    "kind": "Method",
    "detail": "Function (_Name =* InName ; } void)",
    "insertText": "AddStat(FProfilerStat* ProfilerStat)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OwnedStats .)",
    "insertText": "Add(ProfilerStat)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (} public : const TArray<FProfilerStat*>&)",
    "insertText": "GetStats()"
  },
  {
    "label": "FProfilerStatMetaData()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "FProfilerStatMetaData()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (delete It .)",
    "insertText": "Value()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} StatDescriptions .)",
    "insertText": "Empty()"
  },
  {
    "label": "GetMemoryUsage()",
    "kind": "Method",
    "detail": "Function (} const SIZE_T)",
    "insertText": "GetMemoryUsage()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SIZE_T MemorySize = 0 ; MemorySize + =)",
    "insertText": "sizeof(*this)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (MemorySize + = StatDescriptions .)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (MemorySize + = It .)",
    "insertText": "Value()->GetMemoryUsage()"
  },
  {
    "label": "GetThreadDescriptions()",
    "kind": "Method",
    "detail": "Function (} MemorySize + =)",
    "insertText": "GetThreadDescriptions().GetAllocatedSize()"
  },
  {
    "label": "UpdateFromStatsState()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "UpdateFromStatsState(const FStatsThreadState& StatsThreadStats)"
  },
  {
    "label": "InitializeGroup()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitializeGroup(const uint32 GroupID, const FString& GroupName)"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (FProfilerGroup* GroupPtr = GroupDescriptions .)",
    "insertText": "FindRef(GroupID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (GroupPtr = GroupDescriptions .)",
    "insertText": "Add(GroupID, new FProfilerGroup(GroupID))"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} GroupPtr ->)",
    "insertText": "Initialize(GroupName)"
  },
  {
    "label": "InitializeStat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeStat(const uint32 StatID, const uint32 GroupID, const FString& StatName, const EStatType InType, FName StatFName = NAME_None)"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (FProfilerStat* StatPtr = StatDescriptions .)",
    "insertText": "FindRef(StatID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (StatPtr = StatDescriptions .)",
    "insertText": "Add(StatID, new FProfilerStat(StatID))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (StatFNameDescriptions .)",
    "insertText": "Add(StatFName, StatPtr)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (StatPtr ->)",
    "insertText": "Initialize(StatName, GroupPtr, InType)"
  },
  {
    "label": "NAME_Threads()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "NAME_Threads(TEXT(\"Threads\"))"
  },
  {
    "label": "ParseThreadID()",
    "kind": "Method",
    "detail": "Function (const uint32 ThreadID =)",
    "insertText": "ParseThreadID(StatPtr->Name().ToString())"
  },
  {
    "label": "GetThreadDescriptions()",
    "kind": "Method",
    "detail": "Function (const FString* ThreadDesc =)",
    "insertText": "GetThreadDescriptions().Find(ThreadID)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (const FString UniqueThreadName =)",
    "insertText": "Printf(TEXT(\"%s [0x%x]\"), **ThreadDesc, ThreadID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (StatPtr -> _Name =* UniqueThreadName ; ThreadIDtoStatID .)",
    "insertText": "Add(ThreadID, StatID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (GameThreadID = ThreadID ; } else)",
    "insertText": "if(ThreadDesc->Contains(FName(NAME_RenderThread).GetPlainNameString()))"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (RenderThreadIDs .)",
    "insertText": "AddUnique(ThreadID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ThreadDesc->Contains(TEXT(\"RenderingThread\")))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "if(GroupPtr != FProfilerGroup::GetDefaultPtr())"
  },
  {
    "label": "AddStat()",
    "kind": "Method",
    "detail": "Function (GroupPtr ->)",
    "insertText": "AddStat(StatPtr)"
  },
  {
    "label": "GetStatByID()",
    "kind": "Method",
    "detail": "Function (} } } public : const FProfilerStat&)",
    "insertText": "GetStatByID(const uint32 StatID)"
  },
  {
    "label": "GetStatByFName()",
    "kind": "Method",
    "detail": "Function (} const FProfilerStat&)",
    "insertText": "GetStatByFName(FName StatName)"
  },
  {
    "label": "GetStatIterator()",
    "kind": "Method",
    "detail": "Function (} const TMap<uint32,FProfilerStat*>::TConstIterator)",
    "insertText": "GetStatIterator()"
  },
  {
    "label": "GetGroup()",
    "kind": "Method",
    "detail": "Function (} const FProfilerGroup&)",
    "insertText": "GetGroup(const uint32 GroupID)"
  },
  {
    "label": "GetGroupIterator()",
    "kind": "Method",
    "detail": "Function (} const TMap<uint32,FProfilerGroup*>::TConstIterator)",
    "insertText": "GetGroupIterator()"
  },
  {
    "label": "GetThreadDescriptions()",
    "kind": "Method",
    "detail": "Function (} const TMap<uint32,FString>&)",
    "insertText": "GetThreadDescriptions()"
  },
  {
    "label": "IsStatInitialized()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "IsStatInitialized(const uint32 StatID)"
  },
  {
    "label": "GetGameThreadID()",
    "kind": "Method",
    "detail": "Function (} const uint32)",
    "insertText": "GetGameThreadID()"
  },
  {
    "label": "FProfilerAggregatedStat()",
    "kind": "Method",
    "detail": "Function (} protected : TMap<uint32,FProfilerStat*> StatDescriptions ; TMap<FName,FProfilerStat*> StatFNameDescriptions ; TMap<uint32,FProfilerGroup*> GroupDescriptions ; TMap<uint32,FString> ThreadDescriptions ; TMap<uint32,uint32> ThreadIDtoStatID ; double SecondsPerCycle ; uint32 GameThreadID ; TArray<uint32> RenderThreadIDs ; } ; class FProfilerAggregatedStat { class FProfilerSession ; public : enum Type { EAvgValue,EMinValue,EMaxValue,EAvgNumCalls,EMinNumCalls,EMaxNumCalls,EFramesWithCallPct,EInvalidOrMax } ;)",
    "insertText": "FProfilerAggregatedStat(const FName& InStatName, const FName& InGroupName, EProfilerSampleTypes::Type InStatType)"
  },
  {
    "label": "AvgValue()",
    "kind": "Method",
    "detail": "Function (public : const double)",
    "insertText": "AvgValue()"
  },
  {
    "label": "MinValue()",
    "kind": "Method",
    "detail": "Function (} const double)",
    "insertText": "MinValue()"
  },
  {
    "label": "MinNumCalls()",
    "kind": "Method",
    "detail": "Function (} const float)",
    "insertText": "MinNumCalls()"
  },
  {
    "label": "MaxNumCalls()",
    "kind": "Method",
    "detail": "Function (} const float)",
    "insertText": "MaxNumCalls()"
  },
  {
    "label": "FramesWithCallPct()",
    "kind": "Method",
    "detail": "Function (} const float)",
    "insertText": "FramesWithCallPct()"
  },
  {
    "label": "HasCalls()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "HasCalls()"
  },
  {
    "label": "GetFormattedValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFormattedValue(const Type ValueType)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Advance()"
  },
  {
    "label": "Aggregate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Aggregate(const FProfilerSample& Sample, const TSharedRef<FProfilerStatMetaData>& Metadata)"
  },
  {
    "label": "FProfilerSession()",
    "kind": "Method",
    "detail": "Function (protected : FName _StatName ; FName _GroupName ; double _ValueOneFrame ; double _ValueAllFrames ; double _MinValueAllFrames ; double _MaxValueAllFrames ; uint64 _NumCallsAllFrames ; uint32 _NumCallsOneFrame ; uint32 _MinNumCallsAllFrames ; uint32 _MaxNumCallsAllFrames ; uint32 _NumFrames ; uint32 _NumFramesWithCall ; const EProfilerSampleTypes::Type StatType ; } ; class FProfilerSession : public TSharedFromThis<FProfilerSession> { class FProfilerManager ; class FProfilerActionManager ; protected :)",
    "insertText": "FProfilerSession(EProfilerSessionTypes InSessionType, const TSharedPtr<ISessionInstanceInfo>& InSessionInstanceInfo, FGuid InSessionInstanceID, FString InDataFilepath)"
  },
  {
    "label": "FProfilerSession()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FProfilerSession(const FString& InDataFilepath)"
  },
  {
    "label": "FProfilerSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FProfilerSession(const TSharedPtr<ISessionInstanceInfo>& InSessionInstanceInfo)"
  },
  {
    "label": "FProfilerSession()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FProfilerSession()"
  },
  {
    "label": "HandleTicker()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "HandleTicker(float DeltaTime)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (public : typedef TMap<uint32,float> FThreadTimesMap ; typedef TSharedRef<FProfilerStatMetaData> FProfilerStatMetaDataRef ;)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FAddThreadTimeDelegate, int32 , const FThreadTimesMap& , const FProfilerStatMetaDataRef&)"
  },
  {
    "label": "SetOnAddThreadTime()",
    "kind": "Method",
    "detail": "Function (FProfilerSession&)",
    "insertText": "SetOnAddThreadTime(const FAddThreadTimeDelegate& InOnAddThreadTime)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (OnAddThreadTime = InOnAddThreadTime ; return* this ; } protected : FAddThreadTimeDelegate OnAddThreadTime ; public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FCaptureFileProcessedDelegate, const FGuid)"
  },
  {
    "label": "SetOnCaptureFileProcessed()",
    "kind": "Method",
    "detail": "Function (FProfilerSession&)",
    "insertText": "SetOnCaptureFileProcessed(const FCaptureFileProcessedDelegate& InOnCaptureFileProcessed)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (OnCaptureFileProcessed = InOnCaptureFileProcessed ; return* this ; } protected : FCaptureFileProcessedDelegate OnCaptureFileProcessed ; public : const FString)",
    "insertText": "GetName()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString SessionName ;)",
    "insertText": "if(SessionType == EProfilerSessionTypes::Live)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (SessionName =)",
    "insertText": "Printf(TEXT(\"%s\"), *SessionInstanceInfo->GetInstanceName())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SessionType == EProfilerSessionTypes::StatsFile)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (SessionName =)",
    "insertText": "Printf(TEXT(\"%s\"), *DataFilepath)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SessionType == EProfilerSessionTypes::StatsFileRaw)"
  },
  {
    "label": "GetShortName()",
    "kind": "Method",
    "detail": "Function (} return SessionName ; } const FString)",
    "insertText": "GetShortName()"
  },
  {
    "label": "GetSessionType()",
    "kind": "Method",
    "detail": "Function (} const EProfilerSessionTypes)",
    "insertText": "GetSessionType()"
  },
  {
    "label": "GetInclusiveAggregateStackStats()",
    "kind": "Method",
    "detail": "Function (} const TMap<uint32,FInclusiveTime>&)",
    "insertText": "GetInclusiveAggregateStackStats(const uint32 FrameIndex)"
  },
  {
    "label": "GetEventGraphDataMaximum()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FEventGraphData,ESPMode::ThreadSafe>)",
    "insertText": "GetEventGraphDataMaximum()"
  },
  {
    "label": "GetEventGraphDataAverage()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FEventGraphData,ESPMode::ThreadSafe>)",
    "insertText": "GetEventGraphDataAverage()"
  },
  {
    "label": "CreateGraphDataSource()",
    "kind": "Method",
    "detail": "Function (TSharedRef<const FGraphDataSource>)",
    "insertText": "CreateGraphDataSource(const uint32 InStatID)"
  },
  {
    "label": "CreateEventGraphData()",
    "kind": "Method",
    "detail": "Function (FEventGraphContainer)",
    "insertText": "CreateEventGraphData(const uint32 FrameStartIndex, const uint32 FrameEndIndex)"
  },
  {
    "label": "CombineEventGraphs()",
    "kind": "Method",
    "detail": "Function (FEventGraphData*)",
    "insertText": "CombineEventGraphs(const uint32 FrameStartIndex, const uint32 FrameEndIndex)"
  },
  {
    "label": "CombineEventGraphsTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombineEventGraphsTask(const uint32 FrameStartIndex, const uint32 FrameEndIndex)"
  },
  {
    "label": "PopulateHierarchy_Recurrent()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PopulateHierarchy_Recurrent(const uint32 StatThreadID, const FProfilerCycleGraph& ParentGraph, const uint32 ParentDurationCycles, const uint32 ParentSampleIndex, TMap<uint32, FInclusiveTime>& StatIDToInclusiveTime)"
  },
  {
    "label": "UpdateProfilerData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProfilerData(const FProfilerDataFrame& Content)"
  },
  {
    "label": "UpdateMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMetadata(const FStatMetaData& InClientStatMetaData)"
  },
  {
    "label": "UpdateAggregatedStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAggregatedStats(const uint32 FrameIndex)"
  },
  {
    "label": "UpdateAggregatedEventGraphData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAggregatedEventGraphData(const uint32 FrameIndex)"
  },
  {
    "label": "CompletionSyncAggregatedEventGraphData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompletionSyncAggregatedEventGraphData()"
  },
  {
    "label": "EventGraphCombine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventGraphCombine(const FEventGraphData* Current, const uint32 InNumFrames)"
  },
  {
    "label": "UpdateAllEventGraphs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllEventGraphs(const uint32 InNumFrames)"
  },
  {
    "label": "LoadComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadComplete()"
  },
  {
    "label": "SetNumberOfFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumberOfFrames(int32 InNumFrames)"
  },
  {
    "label": "GetProgress()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetProgress()"
  }
]