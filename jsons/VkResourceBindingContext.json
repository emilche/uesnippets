[
  {
    "label": "VkResourceBindingContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VkResourceBindingContext"
  },
  {
    "label": "MX_GENGLSL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_GENGLSL_API"
  },
  {
    "label": "VkResourceBindingContext()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_VKRESOURCEBINDING_H # define MATERIALX_VKRESOURCEBINDING_H # include<MaterialXGenGlsl / Export . h> # include<MaterialXGenShader / HwShaderGenerator . h> MATERIALX_NAMESPACE_BEGIN using VkResourceBindingContextPtr = shared_ptr<class VkResourceBindingContext> ; class VkResourceBindingContext : public HwResourceBindingContext { public :)",
    "insertText": "VkResourceBindingContext(size_t uniformBindingLocation)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (VkResourceBindingContextPtr)",
    "insertText": "create(size_t uniformBindingLocation = 0)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "initialize()"
  },
  {
    "label": "emitDirectives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitDirectives(GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitResourceBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitResourceBindings(GenContext& context, const VariableBlock& uniforms, ShaderStage& stage)"
  },
  {
    "label": "emitStructuredResourceBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitStructuredResourceBindings(GenContext& context, const VariableBlock& uniforms, ShaderStage& stage, const std::string& structInstanceName, const std::string& arraySuffix)"
  }
]