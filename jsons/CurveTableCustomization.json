[
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FRealCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRealCurve"
  },
  {
    "label": "DETAILCUSTOMIZATIONS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DETAILCUSTOMIZATIONS_API"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "IDetailChildrenBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailChildrenBuilder"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" DetailWidgetRow . h \" # include \" DetailWidgetRow . h \" # include \" Engine / CurveTable . h \" # include \" Fonts / SlateFontInfo . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" IDetailChildrenBuilder . h \" # include \" IPropertyTypeCustomization . h \" # include \" IPropertyUtilities . h \" # include \" IPropertyUtilities . h \" # include \" Internationalization / Internationalization . h \" # include \" Internationalization / Text . h \" # include \" Layout / Margin . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" PropertyEditorModule . h \" # include \" PropertyHandle . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SComboButton . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" class ITableRow ; class STableViewBase ; class SWidget ; class UObject ; struct FRealCurve ; class FCurveTableCustomizationLayout : public IPropertyTypeCustomization { public : TSharedRef<IPropertyTypeCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "CustomizeHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomizeHeader(TSharedRef<class IPropertyHandle> InStructPropertyHandle, class FDetailWidgetRow& HeaderRow, IPropertyTypeCustomizationUtils& StructCustomizationUtils)"
  },
  {
    "label": "NameContent()",
    "kind": "Method",
    "detail": "Function (this -> StructPropertyHandle = InStructPropertyHandle ; HeaderRow .)",
    "insertText": "NameContent() [ InStructPropertyHandle->CreatePropertyNameWidget( FText::GetEmpty(), FText::GetEmpty())"
  },
  {
    "label": "CustomizeChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomizeChildren(TSharedRef<class IPropertyHandle> InStructPropertyHandle, class IDetailChildrenBuilder& StructBuilder, IPropertyTypeCustomizationUtils& StructCustomizationUtils)"
  },
  {
    "label": "GetChildHandle()",
    "kind": "Method",
    "detail": "Function (CurveTablePropertyHandle = InStructPropertyHandle ->)",
    "insertText": "GetChildHandle(\"CurveTable\")"
  },
  {
    "label": "GetChildHandle()",
    "kind": "Method",
    "detail": "Function (RowNamePropertyHandle = InStructPropertyHandle ->)",
    "insertText": "GetChildHandle(\"RowName\")"
  },
  {
    "label": "GetPropertyUtilities()",
    "kind": "Method",
    "detail": "Function (StructCustomizationUtils .)",
    "insertText": "GetPropertyUtilities()->EnqueueDeferredAction(FSimpleDelegate::CreateSP(this, &FCurveTableCustomizationLayout::OnInitialRefresh))"
  },
  {
    "label": "CreateCurveTableChildProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCurveTableChildProperty(StructBuilder)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (FSimpleDelegate OnCurveTableChangedDelegate =)",
    "insertText": "CreateSP(this, &FCurveTableCustomizationLayout::OnCurveTableChanged)"
  },
  {
    "label": "SetOnPropertyValueChanged()",
    "kind": "Method",
    "detail": "Function (CurveTablePropertyHandle ->)",
    "insertText": "SetOnPropertyValueChanged(OnCurveTableChangedDelegate)"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function (StructBuilder .)",
    "insertText": "AddCustomRow(NSLOCTEXT(\"CurveTable\", \"RowNameLabel\", \"Row Name\" ) ) .NameContent() [ SNew( STextBlock ) .Text( NSLOCTEXT(\"CurveTable\", \"RowNameLabel\", \"Row Name\" ) ) .Font( StructCustomizationUtils.GetRegularFont() ) ] .ValueContent() [ SAssignNew( RowNameComboButton, SComboButton ) .OnGetMenuContent( this, &FCurveTableCustomizationLayout::GetListContent ) .ContentPadding( FMargin( 2.0f, 2.0f ) ) .ButtonContent() [ SNew( STextBlock ) .Text( this, &FCurveTableCustomizationLayout::GetRowNameComboBoxContentText ) .ToolTipText( this, &FCurveTableCustomizationLayout::GetRowNameComboBoxContentText)"
  },
  {
    "label": "CreateCurveTableChildProperty()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CreateCurveTableChildProperty(IDetailChildrenBuilder& StructBuilder)"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (StructBuilder .)",
    "insertText": "AddProperty(CurveTablePropertyHandle.ToSharedRef())"
  },
  {
    "label": "InitWidgetContent()",
    "kind": "Method",
    "detail": "Function (} protected : TSharedPtr<FString>)",
    "insertText": "InitWidgetContent(bool bShouldModifyData)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FString> InitialValue ; FName RowName ; const FPropertyAccess::Result RowResult = RowNamePropertyHandle ->)",
    "insertText": "GetValue(RowName)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (RowNames .)",
    "insertText": "Empty()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (UCurveTable* CurveTable = nullptr ; CurveTablePropertyHandle ->)",
    "insertText": "GetValue((UObject*&)CurveTable)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FString> RowNameItem =)",
    "insertText": "MakeShareable(new FString(Iterator.Key().ToString()))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RowNames .)",
    "insertText": "Add(RowNameItem)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InitialValue = RowNameItem ; } } })",
    "insertText": "if(!InitialValue.IsValid() && RowResult != FPropertyAccess::MultipleValues)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (InitialValue =)",
    "insertText": "MakeShareable(new FString(TEXT(\"None\")))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InitialValue.IsValid() && bShouldModifyData)"
  },
  {
    "label": "AccessRawData()",
    "kind": "Method",
    "detail": "Function (TArray<void*> RawData ; RowNamePropertyHandle ->)",
    "insertText": "AccessRawData(RawData)"
  },
  {
    "label": "RawFName()",
    "kind": "Method",
    "detail": "Function (FName*)",
    "insertText": "RawFName(FName*)"
  },
  {
    "label": "GetListContent()",
    "kind": "Method",
    "detail": "Function (* RawFName =** InitialValue ; } } } return InitialValue ; } TSharedRef<SWidget>)",
    "insertText": "GetListContent()"
  },
  {
    "label": "OnInitialRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitialRefresh()"
  },
  {
    "label": "InitWidgetContent()",
    "kind": "Method",
    "detail": "Function (CurrentSelectedItem =)",
    "insertText": "InitWidgetContent(false)"
  },
  {
    "label": "SetSelection()",
    "kind": "Method",
    "detail": "Function (RowNameComboListView ->)",
    "insertText": "SetSelection(CurrentSelectedItem)"
  },
  {
    "label": "RequestListRefresh()",
    "kind": "Method",
    "detail": "Function (RowNameComboListView ->)",
    "insertText": "RequestListRefresh()"
  },
  {
    "label": "OnCurveTableChanged()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnCurveTableChanged()"
  },
  {
    "label": "InitWidgetContent()",
    "kind": "Method",
    "detail": "Function (CurrentSelectedItem =)",
    "insertText": "InitWidgetContent(true)"
  },
  {
    "label": "HandleRowNameComboBoxGenarateWidget()",
    "kind": "Method",
    "detail": "Function (} } TSharedRef<ITableRow>)",
    "insertText": "HandleRowNameComboBoxGenarateWidget(TSharedPtr<FString> InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetRowNameComboBoxContentText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetRowNameComboBoxContentText()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FName RowNameValue ; const FPropertyAccess::Result RowResult = RowNamePropertyHandle ->)",
    "insertText": "GetValue(RowNameValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FString> SelectedRowName = CurrentSelectedItem ;)",
    "insertText": "if(SelectedRowName.IsValid())"
  },
  {
    "label": "NSLOCTEXT()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "NSLOCTEXT(\"CurveTableCustomization\", \"None\", \"None\")"
  },
  {
    "label": "NSLOCTEXT()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "NSLOCTEXT(\"CurveTableCustomization\", \"MultipleValues\", \"Multiple Values\")"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSelectionChanged(TSharedPtr<FString> SelectedItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (CurrentSelectedItem = SelectedItem ; FName NewValue =)",
    "insertText": "FName(**SelectedItem)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (RowNamePropertyHandle ->)",
    "insertText": "SetValue(NewValue)"
  },
  {
    "label": "SetIsOpen()",
    "kind": "Method",
    "detail": "Function (RowNameComboButton ->)",
    "insertText": "SetIsOpen(false)"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnFilterTextChanged(const FText& InFilterText)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString CurrentFilterText = InFilterText .)",
    "insertText": "ToString()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (UCurveTable* CurveTable = nullptr ; CurveTablePropertyHandle ->)",
    "insertText": "GetValue(( UObject*& )CurveTable)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (FString RowString = Iterator .)",
    "insertText": "Key().ToString()"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FString> RowNameItem =)",
    "insertText": "MakeShareable(new FString( RowString ))"
  }
]