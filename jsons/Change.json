[
  {
    "label": "FFeedbackContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFeedbackContext"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FChange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChange"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSwapChange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSwapChange"
  },
  {
    "label": "FCommandChange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCommandChange"
  },
  {
    "label": "FCompoundChangeInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompoundChangeInput"
  },
  {
    "label": "FCompoundChange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompoundChange"
  },
  {
    "label": "GetChangeType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" class FFeedbackContext ; class FReferenceCollector ; class UObject ; class FChange { public : enum class EChangeStyle { InPlaceSwap,CommandPattern } ; EChangeStyle)",
    "insertText": "GetChangeType()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FChange>)",
    "insertText": "Execute(UObject* Object)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(UObject* Object)"
  },
  {
    "label": "Revert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Revert(UObject* Object)"
  },
  {
    "label": "HasExpired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExpired(UObject* Object)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "PrintToLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintToLog(FFeedbackContext& FeedbackContext, const int32 IndentLevel = 0)"
  },
  {
    "label": "FChange()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FChange()"
  },
  {
    "label": "FChange()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FChange(const FChange&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FChange&)",
    "insertText": "operator(const FChange&)"
  },
  {
    "label": "FCompoundChangeInput()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCompoundChangeInput(FCompoundChangeInput&& RHS ) : Subchanges( MoveTemp( RHS.Subchanges ))"
  },
  {
    "label": "FCompoundChangeInput()",
    "kind": "Method",
    "detail": "Function (} TArray<TUniquePtr<FChange>> Subchanges ; private :)",
    "insertText": "FCompoundChangeInput(const FCompoundChangeInput&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCompoundChangeInput&)",
    "insertText": "operator(const FCompoundChangeInput&)"
  },
  {
    "label": "FCompoundChange()",
    "kind": "Method",
    "detail": "Function (} ; class FCompoundChange : public FSwapChange { public :)",
    "insertText": "FCompoundChange(FCompoundChangeInput&& InitInput ) : Input( MoveTemp( InitInput ))"
  },
  {
    "label": "PrintToLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintToLog(class FFeedbackContext& FeedbackContext, const int32 IndentLevel = 0)"
  },
  {
    "label": "FCompoundChange()",
    "kind": "Method",
    "detail": "Function (private : FCompoundChangeInput Input ; private :)",
    "insertText": "FCompoundChange(const FCompoundChange&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCompoundChange&)",
    "insertText": "operator(const FCompoundChange&)"
  }
]