[
  {
    "label": "UBTCompositeNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTCompositeNode"
  },
  {
    "label": "UBTDecorator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTDecorator"
  },
  {
    "label": "UBTService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTService"
  },
  {
    "label": "UBTTaskNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTTaskNode"
  },
  {
    "label": "FBTCompositeMemory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTCompositeMemory"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FBTDecoratorLogic",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTDecoratorLogic"
  },
  {
    "label": "FBTCompositeChild",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTCompositeChild"
  },
  {
    "label": "FBehaviorTreeSearchData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBehaviorTreeSearchData"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BehaviorTree / BTNode . h \" # include \" BTCompositeNode . generated . h \" class UBTCompositeNode ; class UBTDecorator ; class UBTService ; class UBTTaskNode ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_ThreeParams(int32, FGetNextChildDelegate, FBehaviorTreeSearchData& , int32 , EBTNodeResult::Type)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (struct FBTCompositeMemory { int8 CurrentChild ; int8 OverrideChild ; } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Invalid,Test,And,Or,Not,} ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FBTDecoratorLogic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBTDecoratorLogic() : Operation(EBTDecoratorLogic::Invalid), Number(0)"
  },
  {
    "label": "FBTDecoratorLogic()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBTDecoratorLogic(uint8 InOperation, uint16 InNumber) : Operation(InOperation), Number(InNumber)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY()"
  },
  {
    "label": "UBTCompositeNode()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UBTCompositeNode()"
  },
  {
    "label": "InitializeComposite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeComposite(uint16 InLastExecutionIndex)"
  },
  {
    "label": "FindChildToExecute()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindChildToExecute(FBehaviorTreeSearchData& SearchData, EBTNodeResult::Type& LastResult)"
  },
  {
    "label": "GetChildIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChildIndex(FBehaviorTreeSearchData& SearchData, const UBTNode& ChildNode)"
  },
  {
    "label": "GetChildIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChildIndex(const UBTNode& ChildNode)"
  },
  {
    "label": "OnChildActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChildActivation(FBehaviorTreeSearchData& SearchData, const UBTNode& ChildNode)"
  },
  {
    "label": "OnChildActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChildActivation(FBehaviorTreeSearchData& SearchData, int32 ChildIndex)"
  },
  {
    "label": "OnChildDeactivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChildDeactivation(FBehaviorTreeSearchData& SearchData, const UBTNode& ChildNode, EBTNodeResult::Type& NodeResult, const bool bRequestedFromValidInstance)"
  },
  {
    "label": "OnChildDeactivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChildDeactivation(FBehaviorTreeSearchData& SearchData, int32 ChildIndex, EBTNodeResult::Type& NodeResult, const bool bRequestedFromValidInstance)"
  },
  {
    "label": "OnNodeActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeActivation(FBehaviorTreeSearchData& SearchData)"
  },
  {
    "label": "OnNodeDeactivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeDeactivation(FBehaviorTreeSearchData& SearchData, EBTNodeResult::Type& NodeResult)"
  },
  {
    "label": "OnNodeRestart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeRestart(FBehaviorTreeSearchData& SearchData)"
  },
  {
    "label": "ConditionalNotifyChildExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalNotifyChildExecution(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, const UBTNode& ChildNode, EBTNodeResult::Type& NodeResult)"
  },
  {
    "label": "GetInstanceMemorySize()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetInstanceMemorySize()"
  },
  {
    "label": "InitializeMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeMemory(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTMemoryInit::Type InitType)"
  },
  {
    "label": "CleanupMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupMemory(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTMemoryClear::Type CleanupType)"
  },
  {
    "label": "GetChildNode()",
    "kind": "Method",
    "detail": "Function (UBTNode*)",
    "insertText": "GetChildNode(int32 Index)"
  },
  {
    "label": "GetChildrenNum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChildrenNum()"
  },
  {
    "label": "GetChildExecutionIndex()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetChildExecutionIndex(int32 Index, EBTChildIndex ChildMode = EBTChildIndex::TaskNode)"
  },
  {
    "label": "GetLastExecutionIndex()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetLastExecutionIndex()"
  },
  {
    "label": "SetChildOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChildOverride(FBehaviorTreeSearchData& SearchData, int8 Index)"
  },
  {
    "label": "DescribeRuntimeValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DescribeRuntimeValues(const UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTDescriptionVerbosity::Type Verbosity, TArray<FString>& Values)"
  },
  {
    "label": "CanPushSubtree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPushSubtree(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, int32 ChildIdx)"
  },
  {
    "label": "CanAbortLowerPriority()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "CanAbortLowerPriority()"
  },
  {
    "label": "CanAbortSelf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAbortSelf()"
  },
  {
    "label": "GetMatchingChildIndex()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "GetMatchingChildIndex(int32 ActiveInstanceIdx, FBTNodeIndex& NodeIdx)"
  },
  {
    "label": "GetBranchExecutionIndex()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetBranchExecutionIndex(uint16 NodeInBranchIdx)"
  },
  {
    "label": "DoDecoratorsAllowExecution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoDecoratorsAllowExecution(UBehaviorTreeComponent& OwnerComp, const int32 InstanceIdx, const int32 ChildIdx)"
  },
  {
    "label": "IsApplyingDecoratorScope()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsApplyingDecoratorScope()"
  },
  {
    "label": "OnChildDeactivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChildDeactivation(SearchData, ChildNode, NodeResult, true)"
  },
  {
    "label": "OnChildDeactivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChildDeactivation(SearchData, ChildIndex, NodeResult, true)"
  },
  {
    "label": "NotifyChildExecution()",
    "kind": "Method",
    "detail": "Function (uint32 bUseChildExecutionNotify : 1 ; uint32 bUseNodeActivationNotify : 1 ; uint32 bUseNodeDeactivationNotify : 1 ; uint32 bUseDecoratorsActivationCheck : 1 ; uint32 bUseDecoratorsDeactivationCheck : 1 ; uint32 bUseDecoratorsFailedActivationCheck : 1 ; uint16 LastExecutionIndex ; void)",
    "insertText": "NotifyChildExecution(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, int32 ChildIdx, EBTNodeResult::Type& NodeResult)"
  },
  {
    "label": "NotifyNodeActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyNodeActivation(FBehaviorTreeSearchData& SearchData)"
  },
  {
    "label": "NotifyNodeDeactivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyNodeDeactivation(FBehaviorTreeSearchData& SearchData, EBTNodeResult::Type& NodeResult)"
  },
  {
    "label": "CanNotifyDecoratorsOnActivation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanNotifyDecoratorsOnActivation(FBehaviorTreeSearchData& SearchData, int32 ChildIdx)"
  },
  {
    "label": "CanNotifyDecoratorsOnDeactivation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanNotifyDecoratorsOnDeactivation(FBehaviorTreeSearchData& SearchData, int32 ChildIdx, EBTNodeResult::Type& NodeResult)"
  },
  {
    "label": "CanNotifyDecoratorsOnFailedActivation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanNotifyDecoratorsOnFailedActivation(FBehaviorTreeSearchData& SearchData, int32 ChildIdx, EBTNodeResult::Type& NodeResult)"
  },
  {
    "label": "NotifyDecoratorsOnActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDecoratorsOnActivation(FBehaviorTreeSearchData& SearchData, int32 ChildIdx)"
  },
  {
    "label": "NotifyDecoratorsOnDeactivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDecoratorsOnDeactivation(FBehaviorTreeSearchData& SearchData, int32 ChildIdx, EBTNodeResult::Type& NodeResult, const bool bIsInSameActiveInstance)"
  },
  {
    "label": "NotifyDecoratorsOnFailedActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDecoratorsOnFailedActivation(FBehaviorTreeSearchData& SearchData, int32 ChildIdx, EBTNodeResult::Type& NodeResult)"
  },
  {
    "label": "GetNextChild()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNextChild(FBehaviorTreeSearchData& SearchData, int32 LastChildIdx, EBTNodeResult::Type LastResult)"
  },
  {
    "label": "RequestDelayedExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestDelayedExecution(UBehaviorTreeComponent& OwnerComp, EBTNodeResult::Type LastResult)"
  },
  {
    "label": "GetNextChildHandler()",
    "kind": "Method",
    "detail": "Function (protected : int32)",
    "insertText": "GetNextChildHandler(struct FBehaviorTreeSearchData& SearchData, int32 PrevChild, EBTNodeResult::Type LastResult)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bUseChildExecutionNotify = ! std::is_same_v<)",
    "insertText": "decltype(&UBTCompositeNode::NotifyChildExecution)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bUseNodeActivationNotify = ! std::is_same_v<)",
    "insertText": "decltype(&UBTCompositeNode::NotifyNodeActivation)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bUseNodeDeactivationNotify = ! std::is_same_v<)",
    "insertText": "decltype(&UBTCompositeNode::NotifyNodeDeactivation)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bUseDecoratorsActivationCheck = ! std::is_same_v<)",
    "insertText": "decltype(&UBTCompositeNode::CanNotifyDecoratorsOnActivation)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bUseDecoratorsDeactivationCheck = ! std::is_same_v<)",
    "insertText": "decltype(&UBTCompositeNode::CanNotifyDecoratorsOnDeactivation)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bUseDecoratorsFailedActivationCheck = ! std::is_same_v<)",
    "insertText": "decltype(&UBTCompositeNode::CanNotifyDecoratorsOnFailedActivation)"
  },
  {
    "label": "INIT_COMPOSITE_NODE_NOTIFY_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "INIT_COMPOSITE_NODE_NOTIFY_FLAGS()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (\\ using NodeType = TRemovePointer<)",
    "insertText": "decltype(this)"
  },
  {
    "label": "InitNotifyFlags()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "InitNotifyFlags(&NodeType::NotifyChildExecution,\\ &NodeType::NotifyNodeActivation,\\ &NodeType::NotifyNodeDeactivation, \\ &NodeType::CanNotifyDecoratorsOnActivation,\\ &NodeType::CanNotifyDecoratorsOnDeactivation,\\ &NodeType::CanNotifyDecoratorsOnFailedActivation)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(false) FORCEINLINE UBTNode* UBTCompositeNode::GetChildNode(int32 Index)"
  }
]