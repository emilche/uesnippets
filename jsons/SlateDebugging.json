[
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FSlateDrawElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateDrawElement"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FWeakWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWeakWidgetPath"
  },
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "FNavigationReply",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavigationReply"
  },
  {
    "label": "FSlateInvalidationRoot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInvalidationRoot"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSlateDebuggingInputEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDebuggingInputEventArgs"
  },
  {
    "label": "FSlateDebuggingCursorQueryEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDebuggingCursorQueryEventArgs"
  },
  {
    "label": "FSlateDebuggingElementTypeAddedEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDebuggingElementTypeAddedEventArgs"
  },
  {
    "label": "FSlateDebuggingFocusEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDebuggingFocusEventArgs"
  },
  {
    "label": "FSlateDebuggingNavigationEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDebuggingNavigationEventArgs"
  },
  {
    "label": "FSlateDebuggingExecuteNavigationEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDebuggingExecuteNavigationEventArgs"
  },
  {
    "label": "FSlateDebuggingWarningEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDebuggingWarningEventArgs"
  },
  {
    "label": "FSlateDebuggingMouseCaptureEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDebuggingMouseCaptureEventArgs"
  },
  {
    "label": "FSlateDebuggingInvalidateArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDebuggingInvalidateArgs"
  },
  {
    "label": "FSlateDebuggingWidgetUpdatedEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDebuggingWidgetUpdatedEventArgs"
  },
  {
    "label": "FSlateDebugging",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateDebugging"
  },
  {
    "label": "FScopeProcessInputEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeProcessInputEvent"
  },
  {
    "label": "FScopeRouteInputEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeRouteInputEvent"
  },
  {
    "label": "IWidgetInputRoutingEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IWidgetInputRoutingEvent"
  },
  {
    "label": "FLastCursorQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLastCursorQuery"
  },
  {
    "label": "WITH_SLATE_DEBUGGING()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" FastUpdate / WidgetUpdateFlags . h \" # include \" Input / Reply . h \" # include \" ProfilingDebugging / CsvProfiler . h \" # include \" Types / SlateAttribute . h \" # include \" Widgets / InvalidateWidgetReason . h \" # include \" SlateDebugging . generated . h \" # ifndef WITH_SLATE_DEBUGGING # define)",
    "insertText": "WITH_SLATE_DEBUGGING(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (class SWidget ; struct FGeometry ; class FPaintArgs ; class FSlateWindowElementList ; class FSlateDrawElement ; class FSlateRect ; class FWeakWidgetPath ; class FWidgetPath ; class FNavigationReply ; class FSlateInvalidationRoot ; enum class EElementType : uint8 ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FSlateDebuggingInputEventArgs()",
    "kind": "Method",
    "detail": "Function (Unknown,,CustomDelegateBound,CustomDelegateUnbound,NextOrPrevious,HitTestGrid } ; struct FSlateDebuggingInputEventArgs { public :)",
    "insertText": "FSlateDebuggingInputEventArgs(ESlateDebuggingInputEvent InInputEventType, const FInputEvent* InInputEvent, const FReply& InReply, const TSharedPtr<SWidget>& InHandlerWidget, const FString& InAdditionalContent)"
  },
  {
    "label": "ToText()",
    "kind": "Method",
    "detail": "Function (const ESlateDebuggingInputEvent InputEventType ; const FInputEvent* InputEvent ; const FReply& Reply ; const TSharedPtr<SWidget>& HandlerWidget ; const FString& AdditionalContent ; FText)",
    "insertText": "ToText()"
  },
  {
    "label": "FSlateDebuggingCursorQueryEventArgs()",
    "kind": "Method",
    "detail": "Function (} ; struct FSlateDebuggingCursorQueryEventArgs { public :)",
    "insertText": "FSlateDebuggingCursorQueryEventArgs(const TSharedPtr<const SWidget>& InWidgetOverridingCursor, const FCursorReply& InReply)"
  },
  {
    "label": "FSlateDebuggingElementTypeAddedEventArgs()",
    "kind": "Method",
    "detail": "Function (} ; struct FSlateDebuggingElementTypeAddedEventArgs { public :)",
    "insertText": "FSlateDebuggingElementTypeAddedEventArgs(const FSlateWindowElementList& InElementList, int32 InElementIndex, EElementType InElementType)"
  },
  {
    "label": "FSlateDebuggingFocusEventArgs()",
    "kind": "Method",
    "detail": "Function (FocusChanging = 0,FocusLost,FocusReceived,MAX } ; # if WITH_SLATE_DEBUGGING struct FSlateDebuggingFocusEventArgs { public :)",
    "insertText": "FSlateDebuggingFocusEventArgs(ESlateDebuggingFocusEvent InFocusEventType, const FFocusEvent& InFocusEvent, const FWeakWidgetPath& InOldFocusedWidgetPath, const TSharedPtr<SWidget>& InOldFocusedWidget, const FWidgetPath& InNewFocusedWidgetPath, const TSharedPtr<SWidget>& InNewFocusedWidget)"
  },
  {
    "label": "FSlateDebuggingNavigationEventArgs()",
    "kind": "Method",
    "detail": "Function (} ; struct FSlateDebuggingNavigationEventArgs { public :)",
    "insertText": "FSlateDebuggingNavigationEventArgs(const FNavigationEvent& InNavigationEvent, const FNavigationReply& InNavigationReply, const FWidgetPath& InNavigationSource, const TSharedPtr<SWidget>& InDestinationWidget, const ESlateDebuggingNavigationMethod InNavigationMethod)"
  },
  {
    "label": "FSlateDebuggingWarningEventArgs()",
    "kind": "Method",
    "detail": "Function (} ; struct FSlateDebuggingExecuteNavigationEventArgs { public : } ; struct FSlateDebuggingWarningEventArgs { public :)",
    "insertText": "FSlateDebuggingWarningEventArgs(const FText& InWarning, const TSharedPtr<SWidget>& InOptionalContextWidget)"
  },
  {
    "label": "FSlateDebuggingMouseCaptureEventArgs()",
    "kind": "Method",
    "detail": "Function (} ; struct FSlateDebuggingMouseCaptureEventArgs { public :)",
    "insertText": "FSlateDebuggingMouseCaptureEventArgs(bool InCaptured, uint32 InUserIndex, uint32 InPointerIndex, const TSharedPtr<const SWidget>& InCapturingWidget)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; enum class ESlateDebuggingInvalidateRootReason { None = 0,ChildOrder = 1<<0,Root = 1<<1,ScreenPosition = 1<<2,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESlateDebuggingInvalidateRootReason) SLATECORE_API FString LexToString(ESlateDebuggingInvalidateRootReason Reason)"
  },
  {
    "label": "LexTryParseString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LexTryParseString(ESlateDebuggingInvalidateRootReason& OutMode, const TCHAR* InBuffer)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(ESlateDebuggingInvalidateRootReason& OutMode, const TCHAR* InBuffer)"
  },
  {
    "label": "FSlateDebuggingInvalidateArgs()",
    "kind": "Method",
    "detail": "Function (struct FSlateDebuggingInvalidateArgs {)",
    "insertText": "FSlateDebuggingInvalidateArgs(const SWidget* WidgetInvalidated, const SWidget* WidgetInvalidateInvestigator, EInvalidateWidgetReason InvalidateReason)"
  },
  {
    "label": "FSlateDebuggingInvalidateArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateDebuggingInvalidateArgs(const SWidget* WidgetInvalidated, const SWidget* WidgetInvalidateInvestigator, ESlateDebuggingInvalidateRootReason InvalidateReason)"
  },
  {
    "label": "FSlateDebuggingWidgetUpdatedEventArgs()",
    "kind": "Method",
    "detail": "Function (const SWidget* WidgetInvalidated ; const SWidget* WidgetInvalidateInvestigator ; EInvalidateWidgetReason InvalidateWidgetReason ; ESlateDebuggingInvalidateRootReason InvalidateInvalidationRootReason ; } ; struct FSlateDebuggingWidgetUpdatedEventArgs { public :)",
    "insertText": "FSlateDebuggingWidgetUpdatedEventArgs(const SWidget* Widget, EWidgetUpdateFlags UpdateFlags, bool bFromPaint)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} ; class FSlateDebugging { public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FBeginWindow, const FSlateWindowElementList&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FBeginWindow BeginWindow ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FEndWindow, const FSlateWindowElementList&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_SixParams()",
    "kind": "Method",
    "detail": "Function (FEndWindow EndWindow ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_SixParams(FBeginWidgetPaint, const SWidget* , const FPaintArgs& , const FGeometry& , const FSlateRect& , const FSlateWindowElementList& , int32)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (FBeginWidgetPaint BeginWidgetPaint ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FEndWidgetPaint, const SWidget* , const FSlateWindowElementList& , int32)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (FEndWidgetPaint EndWidgetPaint ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_FourParams(FPaintDebugElements, const FPaintArgs& , const FGeometry& , FSlateWindowElementList& , int32&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS FDrawElement ElementAdded ; PRAGMA_ENABLE_DEPRECATION_WARNINGS)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FDrawElementType, const FSlateDebuggingElementTypeAddedEventArgs&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FDrawElementType ElementTypeAdded ; public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FWidgetWarningEvent, const FSlateDebuggingWarningEventArgs&)"
  },
  {
    "label": "BroadcastWarning()",
    "kind": "Method",
    "detail": "Function (FWidgetWarningEvent Warning ; void)",
    "insertText": "BroadcastWarning(const FText& WarningText, const TSharedPtr<SWidget>& OptionalContextWidget)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FWidgetInputEvent, const FSlateDebuggingInputEventArgs&)"
  },
  {
    "label": "BroadcastInputEvent()",
    "kind": "Method",
    "detail": "Function (FWidgetInputEvent InputEvent ; void)",
    "insertText": "BroadcastInputEvent(ESlateDebuggingInputEvent InputEventType, const FInputEvent* InInputEvent, const FReply& InReply)"
  },
  {
    "label": "BroadcastInputEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastInputEvent(ESlateDebuggingInputEvent InputEventType, const FInputEvent* InInputEvent, const TSharedPtr<SWidget>& HandlerWidget)"
  },
  {
    "label": "BroadcastInputEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastInputEvent(ESlateDebuggingInputEvent InputEventType, const FInputEvent* InInputEvent, const FReply& InReply, const TSharedPtr<SWidget>& HandlerWidget)"
  },
  {
    "label": "BroadcastInputEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastInputEvent(ESlateDebuggingInputEvent InputEventType, const FInputEvent* InInputEvent, const FReply& InReply, const TSharedPtr<SWidget>& HandlerWidget, const FString& AdditionalContent)"
  },
  {
    "label": "BroadcastInputEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastInputEvent(ESlateDebuggingInputEvent InputEventType, const FInputEvent* InInputEvent, const FReply& InReply, const TSharedPtr<SWidget>& HandlerWidget, const FName& AdditionalContent)"
  },
  {
    "label": "BroadcastInputEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastInputEvent(ESlateDebuggingInputEvent InputEventType, const FInputEvent* InInputEvent, const FReply& InReply, const TSharedPtr<SWidget>& HandlerWidget, const TCHAR AdditionalContent)"
  },
  {
    "label": "BroadcastNoReplyInputEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastNoReplyInputEvent(ESlateDebuggingInputEvent InputEventType, const FInputEvent* InInputEvent, const TSharedPtr<SWidget>& HandlerWidget)"
  },
  {
    "label": "FScopeProcessInputEvent()",
    "kind": "Method",
    "detail": "Function (public : struct FScopeProcessInputEvent { ESlateDebuggingInputEvent InputEvent ;)",
    "insertText": "FScopeProcessInputEvent(ESlateDebuggingInputEvent InputEvent, const FInputEvent& Event)"
  },
  {
    "label": "FScopeProcessInputEvent()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopeProcessInputEvent()"
  },
  {
    "label": "FScopeRouteInputEvent()",
    "kind": "Method",
    "detail": "Function (} ; struct FScopeRouteInputEvent { ESlateDebuggingInputEvent InputEvent ;)",
    "insertText": "FScopeRouteInputEvent(ESlateDebuggingInputEvent InputEvent, const FName& RoutingType)"
  },
  {
    "label": "FScopeRouteInputEvent()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopeRouteInputEvent()"
  },
  {
    "label": "BroadcastPreProcessInputEvent()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "BroadcastPreProcessInputEvent(ESlateDebuggingInputEvent InputEventType, const TCHAR* InputPrecessorName, bool bHandled)"
  },
  {
    "label": "OnProcessInput()",
    "kind": "Method",
    "detail": "Function (struct IWidgetInputRoutingEvent { void)",
    "insertText": "OnProcessInput(ESlateDebuggingInputEvent InputEventType, const FInputEvent& Event)"
  },
  {
    "label": "OnPreProcessInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreProcessInput(ESlateDebuggingInputEvent InputEventType, const TCHAR* InputPrecessorName, bool bHandled)"
  },
  {
    "label": "OnRouteInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRouteInput(ESlateDebuggingInputEvent InputEventType, const FName& RoutedType)"
  },
  {
    "label": "OnInputEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInputEvent(ESlateDebuggingInputEvent InputEventType, const FReply& InReply, const TSharedPtr<SWidget>& HandlerWidget)"
  },
  {
    "label": "OnInputRouted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInputRouted(ESlateDebuggingInputEvent InputEventType)"
  },
  {
    "label": "OnInputProcessed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInputProcessed(ESlateDebuggingInputEvent InputEventType)"
  },
  {
    "label": "RegisterWidgetInputRoutingEvent()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "RegisterWidgetInputRoutingEvent(IWidgetInputRoutingEvent* Event)"
  },
  {
    "label": "UnregisterWidgetInputRoutingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterWidgetInputRoutingEvent(IWidgetInputRoutingEvent* Event)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FWidgetFocusEvent, const FSlateDebuggingFocusEventArgs&)"
  },
  {
    "label": "BroadcastFocusChanging()",
    "kind": "Method",
    "detail": "Function (FWidgetFocusEvent FocusEvent ; void)",
    "insertText": "BroadcastFocusChanging(const FFocusEvent& InFocusEvent, const FWeakWidgetPath& InOldFocusedWidgetPath, const TSharedPtr<SWidget>& InOldFocusedWidget, const FWidgetPath& InNewFocusedWidgetPath, const TSharedPtr<SWidget>& InNewFocusedWidget)"
  },
  {
    "label": "BroadcastFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastFocusLost(const FFocusEvent& InFocusEvent, const FWeakWidgetPath& InOldFocusedWidgetPath, const TSharedPtr<SWidget>& InOldFocusedWidget, const FWidgetPath& InNewFocusedWidgetPath, const TSharedPtr<SWidget>& InNewFocusedWidget)"
  },
  {
    "label": "BroadcastFocusReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastFocusReceived(const FFocusEvent& InFocusEvent, const FWeakWidgetPath& InOldFocusedWidgetPath, const TSharedPtr<SWidget>& InOldFocusedWidget, const FWidgetPath& InNewFocusedWidgetPath, const TSharedPtr<SWidget>& InNewFocusedWidget)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FWidgetAttemptNavigationEvent, const FSlateDebuggingNavigationEventArgs&)"
  },
  {
    "label": "BroadcastAttemptNavigation()",
    "kind": "Method",
    "detail": "Function (FWidgetAttemptNavigationEvent AttemptNavigationEvent ; void)",
    "insertText": "BroadcastAttemptNavigation(const FNavigationEvent& InNavigationEvent, const FNavigationReply& InNavigationReply, const FWidgetPath& InNavigationSource, const TSharedPtr<SWidget>& InDestinationWidget, ESlateDebuggingNavigationMethod InNavigationMethod)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FWidgetExecuteNavigationEvent, const FSlateDebuggingExecuteNavigationEventArgs&)"
  },
  {
    "label": "BroadcastExecuteNavigation()",
    "kind": "Method",
    "detail": "Function (FWidgetExecuteNavigationEvent ExecuteNavigationEvent ; void)",
    "insertText": "BroadcastExecuteNavigation()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FWidgetMouseCaptureEvent, const FSlateDebuggingMouseCaptureEventArgs&)"
  },
  {
    "label": "BroadcastMouseCapture()",
    "kind": "Method",
    "detail": "Function (FWidgetMouseCaptureEvent MouseCaptureEvent ; void)",
    "insertText": "BroadcastMouseCapture(uint32 UserIndex, uint32 PointerIndex, TSharedPtr<const SWidget> InCapturingWidget)"
  },
  {
    "label": "BroadcastMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastMouseCaptureLost(uint32 UserIndex, uint32 PointerIndex, TSharedPtr<const SWidget> InWidgetLostCapture)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FWidgetCursorQuery, const FSlateDebuggingCursorQueryEventArgs&)"
  },
  {
    "label": "BroadcastCursorQuery()",
    "kind": "Method",
    "detail": "Function (FWidgetCursorQuery CursorChangedEvent ; void)",
    "insertText": "BroadcastCursorQuery(TSharedPtr<const SWidget> InWidgetOverridingCursor, const FCursorReply& InReply)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FWidgetInvalidate, const FSlateDebuggingInvalidateArgs&)"
  },
  {
    "label": "BroadcastWidgetInvalidate()",
    "kind": "Method",
    "detail": "Function (FWidgetInvalidate WidgetInvalidateEvent ; void)",
    "insertText": "BroadcastWidgetInvalidate(const SWidget* WidgetInvalidated, const SWidget* WidgetInvalidateInvestigator, EInvalidateWidgetReason InvalidateReason)"
  },
  {
    "label": "BroadcastInvalidationRootInvalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastInvalidationRootInvalidate(const SWidget* WidgetInvalidated, const SWidget* WidgetInvalidateInvestigator, ESlateDebuggingInvalidateRootReason InvalidateReason)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FWidgetUpdatedEvent, const FSlateDebuggingWidgetUpdatedEventArgs&)"
  },
  {
    "label": "BroadcastWidgetUpdated()",
    "kind": "Method",
    "detail": "Function (FWidgetUpdatedEvent WidgetUpdatedEvent ; void)",
    "insertText": "BroadcastWidgetUpdated(const SWidget* Invalidated, EWidgetUpdateFlags UpdateFlags)"
  },
  {
    "label": "BroadcastWidgetUpdatedByPaint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastWidgetUpdatedByPaint(const SWidget* Invalidated, EWidgetUpdateFlags UpdateFlags)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FUICommandRun, const FName& , const FText&)"
  },
  {
    "label": "GetAllWidgets()",
    "kind": "Method",
    "detail": "Function (FUICommandRun CommandRun ; const TArray<const SWidget*>&)",
    "insertText": "GetAllWidgets()"
  },
  {
    "label": "ExportWidgetList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportWidgetList(FStringView Filename)"
  },
  {
    "label": "FSlateDebugging()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FSlateDebugging()"
  }
]