[
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "DEFINE_INTERPCURVE_WRAPPER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Geo / Curves / Curve . h \" # include \" Math / Point . h \" # include \" Math / InterpCurve . h \")",
    "insertText": "DEFINE_INTERPCURVE_WRAPPER_STRUCT(FInterpCurveDouble, double) DEFINE_INTERPCURVE_WRAPPER_STRUCT(FInterpCurveFPoint, UE::CADKernel::FPoint)"
  },
  {
    "label": "FSplineCurve()",
    "kind": "Method",
    "detail": "Function (class FSplineCurve : public FCurve { class FEntity ; protected : FInterpCurveFPoint Position ; FInterpCurveDouble ReparamTable ; bool bClosedLoop ;)",
    "insertText": "FSplineCurve(const TArray<FPoint>& InPoles)"
  },
  {
    "label": "SetSplinePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSplinePoints(InPoles)"
  },
  {
    "label": "FSplineCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSplineCurve(const TArray<FPoint>& InPoles, const TArray<FPoint>& InTangents)"
  },
  {
    "label": "SetSplinePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSplinePoints(InPoles, InTangents)"
  },
  {
    "label": "FSplineCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSplineCurve(const TArray<FPoint>& InPoles, const TArray<FPoint>& InArriveTangents, const TArray<FPoint>& InLeaveTangents)"
  },
  {
    "label": "SetSplinePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSplinePoints(InPoles, InArriveTangents, InLeaveTangents)"
  },
  {
    "label": "FSplineCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSplineCurve()"
  },
  {
    "label": "GetLocationAtSplineInputKey()",
    "kind": "Method",
    "detail": "Function (FPoint)",
    "insertText": "GetLocationAtSplineInputKey(double InCoordinate)"
  },
  {
    "label": "GetTangentAtSplineInputKey()",
    "kind": "Method",
    "detail": "Function (FPoint)",
    "insertText": "GetTangentAtSplineInputKey(double InCoordinate)"
  },
  {
    "label": "GetDirectionAtSplineInputKey()",
    "kind": "Method",
    "detail": "Function (FPoint)",
    "insertText": "GetDirectionAtSplineInputKey(double InCoordinate)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (Ar<<Position ; Ar<<ReparamTable ; Ar<<bClosedLoop ; } # ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetCurveType()",
    "kind": "Method",
    "detail": "Function (# endif ECurve)",
    "insertText": "GetCurveType()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(const FPoint& OffsetDirection)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(double Coordinate, FCurvePoint& OutPoint, int32 DerivativeOrder = 0)"
  },
  {
    "label": "ExtendTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendTo(const FPoint& Point)"
  },
  {
    "label": "UpdateSpline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSpline(bool bClosedLoop = false, bool bStationaryEndpoints = false, int32 ReparamStepsPerSegment = 10)"
  },
  {
    "label": "SetSplinePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSplinePoints(const TArray<FPoint>& InPoints)"
  },
  {
    "label": "SetSplinePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSplinePoints(const TArray<FPoint>& InPoints, const TArray<FPoint>& InTangents)"
  },
  {
    "label": "SetSplinePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSplinePoints(const TArray<FPoint>& InPoints, const TArray<FPoint>& InArriveTangents, const TArray<FPoint>& InLeaveTangents)"
  },
  {
    "label": "GetSplinePointsPosition()",
    "kind": "Method",
    "detail": "Function (const FInterpCurveFPoint&)",
    "insertText": "GetSplinePointsPosition()"
  }
]