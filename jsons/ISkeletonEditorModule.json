[
  {
    "label": "IEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableSkeleton"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "ISkeletonEditorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonEditorModule"
  },
  {
    "label": "FWorkflowTabFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkflowTabFactory"
  },
  {
    "label": "FWorkflowCentricApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkflowCentricApplication"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / SWidget . h \" # include \" Modules / ModuleInterface . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Framework / MultiBox / MultiBoxExtender . h \" # include \" Toolkits / AssetEditorToolkit . h \" # include \" ISkeletonEditor . h \" # include \" ISkeletonTree . h \" # include \" BlendProfilePicker . h \" class IEditableSkeleton ; class USkeleton ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogSkeletonEditor, Log, All)"
  },
  {
    "label": "CreateSkeletonEditor()",
    "kind": "Method",
    "detail": "Function (class ISkeletonEditorModule : public IModuleInterface,public IHasMenuExtensibility,public IHasToolBarExtensibility { public : TSharedRef<ISkeletonEditor>)",
    "insertText": "CreateSkeletonEditor(const EToolkitMode::Type Mode, const TSharedPtr<IToolkitHost>& InitToolkitHost, class USkeleton* InSkeleton)"
  },
  {
    "label": "CreateSkeletonTree()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISkeletonTree>)",
    "insertText": "CreateSkeletonTree(USkeleton* InSkeleton, const FSkeletonTreeArgs& InSkeletonTreeArgs)"
  },
  {
    "label": "CreateSkeletonTree()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISkeletonTree>)",
    "insertText": "CreateSkeletonTree(const TSharedRef<IEditableSkeleton>& InEditableSkeleton, const FSkeletonTreeArgs& InSkeletonTreeArgs)"
  },
  {
    "label": "CreateSkeletonTreeTabFactory()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class FWorkflowTabFactory>)",
    "insertText": "CreateSkeletonTreeTabFactory(const TSharedRef<class FWorkflowCentricApplication>& InHostingApp, const TSharedRef<ISkeletonTree>& InSkeletonTree)"
  },
  {
    "label": "CreateEditableSkeleton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IEditableSkeleton>)",
    "insertText": "CreateEditableSkeleton(USkeleton* InSkeleton)"
  },
  {
    "label": "CreateBlendProfilePicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateBlendProfilePicker(USkeleton* InSkeleton, const FBlendProfilePickerArgs& InArgs = FBlendProfilePickerArgs())"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(TSharedRef<FExtender>, FSkeletonEditorToolbarExtender, const TSharedRef<FUICommandList> , TSharedRef<ISkeletonEditor>)"
  },
  {
    "label": "GetAllSkeletonEditorToolbarExtenders()",
    "kind": "Method",
    "detail": "Function (TArray<FSkeletonEditorToolbarExtender>&)",
    "insertText": "GetAllSkeletonEditorToolbarExtenders()"
  }
]