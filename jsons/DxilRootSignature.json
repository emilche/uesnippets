[
  {
    "label": "IDxcBlob",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IDxcBlob"
  },
  {
    "label": "IDxcBlobEncoding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IDxcBlobEncoding"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "DxilDescriptorRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilDescriptorRange"
  },
  {
    "label": "DxilDescriptorRange1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilDescriptorRange1"
  },
  {
    "label": "DxilRootConstants",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilRootConstants"
  },
  {
    "label": "DxilRootDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilRootDescriptor"
  },
  {
    "label": "DxilRootDescriptor1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilRootDescriptor1"
  },
  {
    "label": "DxilRootDescriptorTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilRootDescriptorTable"
  },
  {
    "label": "DxilRootDescriptorTable1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilRootDescriptorTable1"
  },
  {
    "label": "DxilRootParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilRootParameter"
  },
  {
    "label": "DxilRootParameter1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilRootParameter1"
  },
  {
    "label": "DxilRootSignatureDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilRootSignatureDesc"
  },
  {
    "label": "DxilRootSignatureDesc1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilRootSignatureDesc1"
  },
  {
    "label": "DxilStaticSamplerDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilStaticSamplerDesc"
  },
  {
    "label": "DxilVersionedRootSignatureDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilVersionedRootSignatureDesc"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DxilContainerRootDescriptor1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilContainerRootDescriptor1"
  },
  {
    "label": "DxilContainerDescriptorRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilContainerDescriptorRange"
  },
  {
    "label": "DxilContainerDescriptorRange1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilContainerDescriptorRange1"
  },
  {
    "label": "DxilContainerRootDescriptorTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilContainerRootDescriptorTable"
  },
  {
    "label": "DxilContainerRootParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilContainerRootParameter"
  },
  {
    "label": "DxilContainerRootSignatureDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilContainerRootSignatureDesc"
  },
  {
    "label": "RootSignatureHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RootSignatureHandle"
  },
  {
    "label": "DxilVersionedRootSignature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilVersionedRootSignature"
  },
  {
    "label": "DxilMipLodBiaxMax()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef __DXC_ROOTSIGNATURE__ # define __DXC_ROOTSIGNATURE__ # include<stdint . h> # include \" dxc / DXIL / DxilConstants . h \" # include \" dxc / WinAdapter . h \" struct IDxcBlob ; struct IDxcBlobEncoding ; namespace llvm { class raw_ostream ; } namespace hlsl { struct DxilDescriptorRange ; struct DxilDescriptorRange1 ; struct DxilRootConstants ; struct DxilRootDescriptor ; struct DxilRootDescriptor1 ; struct DxilRootDescriptorTable ; struct DxilRootDescriptorTable1 ; struct DxilRootParameter ; struct DxilRootParameter1 ; struct DxilRootSignatureDesc ; struct DxilRootSignatureDesc1 ; struct DxilStaticSamplerDesc ; struct DxilVersionedRootSignatureDesc ; const uint32_t DxilDescriptorRangeOffsetAppend = 0 xffffffff ; const uint32_t DxilSystemReservedRegisterSpaceValuesStart = 0 xfffffff0 ; const uint32_t DxilSystemReservedRegisterSpaceValuesEnd = 0 xffffffff ; # define)",
    "insertText": "DxilMipLodBiaxMax(15.99f) #define DxilMipLodBiaxMin (-16.0f) #define DxilFloat32Max (3.402823466e+38f)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (const uint32_t DxilMapAnisotropy = 1 6 ; enum class DxilComparisonFunc : unsigned { Never = 1,Less = 2,Equal = 3,LessEqual = 4,Greater = 5,NotEqual = 6,GreaterEqual = 7,Always = 8 } ; enum class DxilDescriptorRangeFlags : unsigned { None = 0,DescriptorsVolatile = 0 x1,DataVolatile = 0 x2,DataStaticWhileSetAtExecute = 0 x4,DataStatic = 0 x8,DescriptorsStaticKeepingBufferBoundsChecks = 0 x10000,ValidFlags = 0 x1000f,ValidSamplerFlags = DescriptorsVolatile } ; enum class DxilDescriptorRangeType : unsigned { SRV = 0,UAV = 1,CBV = 2,Sampler = 3,MaxValue = 3 } ; enum class DxilRootDescriptorFlags : unsigned { None = 0,DataVolatile = 0 x2,DataStaticWhileSetAtExecute = 0 x4,DataStatic = 0 x8,ValidFlags = 0 xe } ; enum class DxilRootSignatureVersion { Version_1 = 1,Version_1_0 = 1,Version_1_1 = 2 } ; enum class DxilRootSignatureCompilationFlags { None = 0 x0,LocalRootSignature = 0 x1,GlobalRootSignature = 0 x2,} ; enum class DxilRootSignatureFlags : uint32_t { None = 0,AllowInputAssemblerInputLayout = 0 x1,DenyVertexShaderRootAccess = 0 x2,DenyHullShaderRootAccess = 0 x4,DenyDomainShaderRootAccess = 0 x8,DenyGeometryShaderRootAccess = 0 x10,DenyPixelShaderRootAccess = 0 x20,AllowStreamOutput = 0 x40,LocalRootSignature = 0 x80,DenyAmplificationShaderRootAccess = 0 x100,DenyMeshShaderRootAccess = 0 x200,CBVSRVUAVHeapDirectlyIndexed = 0 x400,SamplerHeapDirectlyIndexed = 0 x800,AllowLowTierReservedHwCbLimit = 0 x80000000,ValidFlags = 0 x80000fff } ; enum class DxilRootParameterType { DescriptorTable = 0,Constants32Bit = 1,CBV = 2,SRV = 3,UAV = 4,MaxValue = 4 } ; enum class DxilFilter { MIN_MAG_MIP_POINT = 0,MIN_MAG_POINT_MIP_LINEAR = 0 x1,MIN_POINT_MAG_LINEAR_MIP_POINT = 0 x4,MIN_POINT_MAG_MIP_LINEAR = 0 x5,MIN_LINEAR_MAG_MIP_POINT = 0 x10,MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0 x11,MIN_MAG_LINEAR_MIP_POINT = 0 x14,MIN_MAG_MIP_LINEAR = 0 x15,ANISOTROPIC = 0 x55,COMPARISON_MIN_MAG_MIP_POINT = 0 x80,COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0 x81,COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0 x84,COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0 x85,COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0 x90,COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0 x91,COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0 x94,COMPARISON_MIN_MAG_MIP_LINEAR = 0 x95,COMPARISON_ANISOTROPIC = 0 xd5,MINIMUM_MIN_MAG_MIP_POINT = 0 x100,MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0 x101,MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0 x104,MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0 x105,MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0 x110,MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0 x111,MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0 x114,MINIMUM_MIN_MAG_MIP_LINEAR = 0 x115,MINIMUM_ANISOTROPIC = 0 x155,MAXIMUM_MIN_MAG_MIP_POINT = 0 x180,MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0 x181,MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0 x184,MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0 x185,MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0 x190,MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0 x191,MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0 x194,MAXIMUM_MIN_MAG_MIP_LINEAR = 0 x195,MAXIMUM_ANISOTROPIC = 0 x1d5 } ; enum class DxilShaderVisibility { All = 0,Vertex = 1,Hull = 2,Domain = 3,Geometry = 4,Pixel = 5,Amplification = 6,Mesh = 7,MaxValue = 7 } ; enum class DxilStaticBorderColor { TransparentBlack = 0,OpaqueBlack = 1,OpaqueWhite = 2,OpaqueBlackUint = 3,OpaqueWhiteUint = 4 } ; enum class DxilTextureAddressMode { Wrap = 1,Mirror = 2,Clamp = 3,Border = 4,MirrorOnce = 5 } ; # pragma)",
    "insertText": "pack(push, 1)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (uint32_t ShaderRegister ; uint32_t RegisterSpace ; uint32_t Flags ; } ; struct DxilContainerDescriptorRange { uint32_t RangeType ; uint32_t NumDescriptors ; uint32_t BaseShaderRegister ; uint32_t RegisterSpace ; uint32_t OffsetInDescriptorsFromTableStart ; } ; struct DxilContainerDescriptorRange1 { uint32_t RangeType ; uint32_t NumDescriptors ; uint32_t BaseShaderRegister ; uint32_t RegisterSpace ; uint32_t Flags ; uint32_t OffsetInDescriptorsFromTableStart ; } ; struct DxilContainerRootDescriptorTable { uint32_t NumDescriptorRanges ; uint32_t DescriptorRangesOffset ; } ; struct DxilContainerRootParameter { uint32_t ParameterType ; uint32_t ShaderVisibility ; uint32_t PayloadOffset ; } ; struct DxilContainerRootSignatureDesc { uint32_t Version ; uint32_t NumParameters ; uint32_t RootParametersOffset ; uint32_t NumStaticSamplers ; uint32_t StaticSamplersOffset ; uint32_t Flags ; } ; # pragma)",
    "insertText": "pack(pop)"
  },
  {
    "label": "printRootSignature()",
    "kind": "Method",
    "detail": "Function (DxilDescriptorRangeType RangeType ; uint32_t NumDescriptors ; uint32_t BaseShaderRegister ; uint32_t RegisterSpace ; uint32_t OffsetInDescriptorsFromTableStart ; } ; struct DxilRootDescriptorTable { uint32_t NumDescriptorRanges ; DxilDescriptorRange* pDescriptorRanges ; } ; struct DxilRootConstants { uint32_t ShaderRegister ; uint32_t RegisterSpace ; uint32_t Num32BitValues ; } ; struct DxilRootDescriptor { uint32_t ShaderRegister ; uint32_t RegisterSpace ; } ; struct DxilRootDescriptor1 { uint32_t ShaderRegister ; uint32_t RegisterSpace ; DxilRootDescriptorFlags Flags ; } ; struct DxilRootParameter { DxilRootParameterType ParameterType ; union { DxilRootDescriptorTable DescriptorTable ; DxilRootConstants Constants ; DxilRootDescriptor Descriptor ; } ; DxilShaderVisibility ShaderVisibility ; } ; struct DxilDescriptorRange1 { DxilDescriptorRangeType RangeType ; uint32_t NumDescriptors ; uint32_t BaseShaderRegister ; uint32_t RegisterSpace ; DxilDescriptorRangeFlags Flags ; uint32_t OffsetInDescriptorsFromTableStart ; } ; struct DxilRootDescriptorTable1 { uint32_t NumDescriptorRanges ; DxilDescriptorRange1* pDescriptorRanges ; } ; struct DxilRootParameter1 { DxilRootParameterType ParameterType ; union { DxilRootDescriptorTable1 DescriptorTable ; DxilRootConstants Constants ; DxilRootDescriptor1 Descriptor ; } ; DxilShaderVisibility ShaderVisibility ; } ; struct DxilRootSignatureDesc { uint32_t NumParameters ; DxilRootParameter* pParameters ; uint32_t NumStaticSamplers ; DxilStaticSamplerDesc* pStaticSamplers ; DxilRootSignatureFlags Flags ; } ; struct DxilStaticSamplerDesc { DxilFilter Filter ; DxilTextureAddressMode AddressU ; DxilTextureAddressMode AddressV ; DxilTextureAddressMode AddressW ; float MipLODBias ; uint32_t MaxAnisotropy ; DxilComparisonFunc ComparisonFunc ; DxilStaticBorderColor BorderColor ; float MinLOD ; float MaxLOD ; uint32_t ShaderRegister ; uint32_t RegisterSpace ; DxilShaderVisibility ShaderVisibility ; } ; struct DxilRootSignatureDesc1 { uint32_t NumParameters ; DxilRootParameter1* pParameters ; uint32_t NumStaticSamplers ; DxilStaticSamplerDesc* pStaticSamplers ; DxilRootSignatureFlags Flags ; } ; struct DxilVersionedRootSignatureDesc { DxilRootSignatureVersion Version ; union { DxilRootSignatureDesc Desc_1_0 ; DxilRootSignatureDesc1 Desc_1_1 ; } ; } ; void)",
    "insertText": "printRootSignature(const DxilVersionedRootSignatureDesc &RS, llvm::raw_ostream &os)"
  },
  {
    "label": "RootSignatureHandle()",
    "kind": "Method",
    "detail": "Function (class RootSignatureHandle { private : const DxilVersionedRootSignatureDesc* m_pDesc ; IDxcBlob* m_pSerialized ; public :)",
    "insertText": "RootSignatureHandle() : m_pDesc(nullptr), m_pSerialized(nullptr)"
  },
  {
    "label": "RootSignatureHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RootSignatureHandle(const RootSignatureHandle &)"
  },
  {
    "label": "RootSignatureHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RootSignatureHandle(RootSignatureHandle &&other)"
  },
  {
    "label": "RootSignatureHandle()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RootSignatureHandle()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetSerializedSize()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetSerializedSize()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(const DxilVersionedRootSignatureDesc *pDesc, IDxcBlob *pSerialized)"
  },
  {
    "label": "LoadSerialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSerialized(const uint8_t *pData, uint32_t length)"
  },
  {
    "label": "EnsureSerializedAvailable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureSerializedAvailable()"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deserialize()"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (const DxilVersionedRootSignatureDesc*)",
    "insertText": "GetDesc()"
  },
  {
    "label": "ConvertRootSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertRootSignature(const DxilVersionedRootSignatureDesc *pRootSignatureIn, DxilRootSignatureVersion RootSignatureVersionOut, const DxilVersionedRootSignatureDesc **ppRootSignatureOut)"
  },
  {
    "label": "SerializeRootSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeRootSignature(const DxilVersionedRootSignatureDesc *pRootSignature, IDxcBlob **ppBlob, IDxcBlobEncoding **ppErrorBlob, bool bAllowReservedRegisterSpace)"
  },
  {
    "label": "DeserializeRootSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeRootSignature(const void *pSrcData, uint32_t SrcDataSizeInBytes, const DxilVersionedRootSignatureDesc **ppRootSignature)"
  },
  {
    "label": "VerifyRootSignatureWithShaderPSV()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyRootSignatureWithShaderPSV(const DxilVersionedRootSignatureDesc *pDesc, DXIL::ShaderKind ShaderKind, const void *pPSVData, uint32_t PSVSize, llvm::raw_ostream &DiagStream)"
  },
  {
    "label": "VerifyRootSignature()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyRootSignature(const DxilVersionedRootSignatureDesc *pDesc, llvm::raw_ostream &DiagStream, bool bAllowReservedRegisterSpace)"
  },
  {
    "label": "DxilVersionedRootSignature()",
    "kind": "Method",
    "detail": "Function (class DxilVersionedRootSignature { DxilVersionedRootSignatureDesc* m_pRootSignature ; public :)",
    "insertText": "DxilVersionedRootSignature(DxilVersionedRootSignature const &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DxilVersionedRootSignature const&)",
    "insertText": "operator(DxilVersionedRootSignature const &)"
  },
  {
    "label": "DxilVersionedRootSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DxilVersionedRootSignature(DxilVersionedRootSignature &&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DxilVersionedRootSignature&)",
    "insertText": "operator(DxilVersionedRootSignature &&)"
  },
  {
    "label": "DxilVersionedRootSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DxilVersionedRootSignature() : m_pRootSignature(nullptr)"
  },
  {
    "label": "DxilVersionedRootSignature()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DxilVersionedRootSignature(const DxilVersionedRootSignatureDesc *pRootSignature) : m_pRootSignature( const_cast<DxilVersionedRootSignatureDesc *>(pRootSignature))"
  },
  {
    "label": "DxilVersionedRootSignature()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DxilVersionedRootSignature()"
  },
  {
    "label": "DeleteRootSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteRootSignature(m_pRootSignature)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const DxilVersionedRootSignatureDesc*)",
    "insertText": "operator()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} const DxilVersionedRootSignatureDesc*)",
    "insertText": "get()"
  }
]