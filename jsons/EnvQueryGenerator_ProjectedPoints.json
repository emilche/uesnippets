[
  {
    "label": "UEnvQueryGenerator_ProjectedPoints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnvQueryGenerator_ProjectedPoints"
  },
  {
    "label": "FSortByHeight",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSortByHeight"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" AI / Navigation / NavigationTypes . h \" # include \" EnvironmentQuery / EnvQueryTypes . h \" # include \" EnvironmentQuery / EnvQueryGenerator . h \" # include \" EnvQueryGenerator_ProjectedPoints . generated . h \")",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditDefaultsOnly, Category = Generator)"
  },
  {
    "label": "FSortByHeight()",
    "kind": "Method",
    "detail": "Function (struct FSortByHeight { FVector::FReal OriginalZ ;)",
    "insertText": "FSortByHeight(const FVector& OriginalPt) : OriginalZ(OriginalPt.Z)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const FNavLocation& A, const FNavLocation& B)"
  },
  {
    "label": "ProjectAndFilterNavPoints()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "ProjectAndFilterNavPoints(TArray<FNavLocation>& Points, FEnvQueryInstance& QueryInstance)"
  },
  {
    "label": "StoreNavPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreNavPoints(const TArray<FNavLocation>& Points, FEnvQueryInstance& QueryInstance)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  }
]