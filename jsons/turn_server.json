[
  {
    "label": "ByteBufferWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ByteBufferWriter"
  },
  {
    "label": "PacketSocketFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketSocketFactory"
  },
  {
    "label": "StunMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StunMessage"
  },
  {
    "label": "TurnMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnMessage"
  },
  {
    "label": "TurnServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnServer"
  },
  {
    "label": "TurnServerConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnServerConnection"
  },
  {
    "label": "TurnServerAllocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnServerAllocation"
  },
  {
    "label": "Channel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Channel"
  },
  {
    "label": "Permission",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Permission"
  },
  {
    "label": "TurnAuthInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnAuthInterface"
  },
  {
    "label": "TurnRedirectInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnRedirectInterface"
  },
  {
    "label": "StunMessageObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StunMessageObserver"
  },
  {
    "label": "ServerSocketInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ServerSocketInfo"
  },
  {
    "label": "TurnServerConnection()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_TURN_SERVER_H_ # define P2P_BASE_TURN_SERVER_H_ # include<list> # include<map> # include<memory> # include<set> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / units / time_delta . h \" # include \" p2p / base / port_interface . h \" # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / ssl_adapter . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" namespace rtc { class ByteBufferWriter ; class PacketSocketFactory ; } namespace cricket { class StunMessage ; class TurnMessage ; class TurnServer ; const int TURN_SERVER_PORT = 3 4 7 8 ; class TurnServerConnection { public :)",
    "insertText": "TurnServerConnection() : proto_(PROTO_UDP), socket_(NULL)"
  },
  {
    "label": "TurnServerConnection()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TurnServerConnection(const rtc::SocketAddress& src, ProtocolType proto, rtc::AsyncPacketSocket* socket)"
  },
  {
    "label": "src()",
    "kind": "Method",
    "detail": "Function (const rtc::SocketAddress&)",
    "insertText": "src()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const TurnServerConnection& t)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "TurnServerAllocation()",
    "kind": "Method",
    "detail": "Function (private : rtc::SocketAddress src_ ; rtc::SocketAddress dst_ ; cricket::ProtocolType proto_ ; rtc::AsyncPacketSocket* socket_ ; } ; class TurnServerAllocation : public sigslot::has_slots<> { public :)",
    "insertText": "TurnServerAllocation(TurnServer* server_, webrtc::TaskQueueBase* thread, const TurnServerConnection& conn, rtc::AsyncPacketSocket* server_socket, absl::string_view key)"
  },
  {
    "label": "TurnServerAllocation()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TurnServerAllocation()"
  },
  {
    "label": "conn()",
    "kind": "Method",
    "detail": "Function (TurnServerConnection*)",
    "insertText": "conn()"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (last_nonce_ =)",
    "insertText": "string(nonce)"
  },
  {
    "label": "HandleTurnMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTurnMessage(const TurnMessage* msg)"
  },
  {
    "label": "HandleChannelData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleChannelData(const char* data, size_t size)"
  },
  {
    "label": "PostDeleteSelf()",
    "kind": "Method",
    "detail": "Function (private : struct Channel { webrtc::ScopedTaskSafety pending_delete ; int id ; rtc::SocketAddress peer ; } ; struct Permission { webrtc::ScopedTaskSafety pending_delete ; rtc::IPAddress peer ; } ; using PermissionList = std::list<Permission> ; using ChannelList = std::list<Channel> ; void)",
    "insertText": "PostDeleteSelf(webrtc::TimeDelta delay)"
  },
  {
    "label": "HandleAllocateRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAllocateRequest(const TurnMessage* msg)"
  },
  {
    "label": "HandleRefreshRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRefreshRequest(const TurnMessage* msg)"
  },
  {
    "label": "HandleSendIndication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSendIndication(const TurnMessage* msg)"
  },
  {
    "label": "HandleCreatePermissionRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCreatePermissionRequest(const TurnMessage* msg)"
  },
  {
    "label": "HandleChannelBindRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleChannelBindRequest(const TurnMessage* msg)"
  },
  {
    "label": "OnExternalPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExternalPacket(rtc::AsyncPacketSocket* socket, const char* data, size_t size, const rtc::SocketAddress& addr, const int64_t& packet_time_us)"
  },
  {
    "label": "ComputeLifetime()",
    "kind": "Method",
    "detail": "Function (webrtc::TimeDelta)",
    "insertText": "ComputeLifetime(const TurnMessage& msg)"
  },
  {
    "label": "HasPermission()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPermission(const rtc::IPAddress& addr)"
  },
  {
    "label": "AddPermission()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPermission(const rtc::IPAddress& addr)"
  },
  {
    "label": "FindPermission()",
    "kind": "Method",
    "detail": "Function (PermissionList::iterator)",
    "insertText": "FindPermission(const rtc::IPAddress& addr)"
  },
  {
    "label": "FindChannel()",
    "kind": "Method",
    "detail": "Function (ChannelList::iterator)",
    "insertText": "FindChannel(int channel_id)"
  },
  {
    "label": "FindChannel()",
    "kind": "Method",
    "detail": "Function (ChannelList::iterator)",
    "insertText": "FindChannel(const rtc::SocketAddress& addr)"
  },
  {
    "label": "SendResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendResponse(TurnMessage* msg)"
  },
  {
    "label": "SendBadRequestResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendBadRequestResponse(const TurnMessage* req)"
  },
  {
    "label": "SendErrorResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendErrorResponse(const TurnMessage* req, int code, absl::string_view reason)"
  },
  {
    "label": "SendExternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendExternal(const void* data, size_t size, const rtc::SocketAddress& peer)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (TurnServer* const server_ ; webrtc::TaskQueueBase* const thread_ ; TurnServerConnection conn_ ; std::unique_ptr<rtc::AsyncPacketSocket> external_socket_ ; std::string key_ ; std::string transaction_id_ ; std::string username_ ; std::string last_nonce_ ; PermissionList perms_ ; ChannelList channels_ ; webrtc::ScopedTaskSafety safety_ ; } ; class TurnAuthInterface { public : bool)",
    "insertText": "GetKey(absl::string_view username, absl::string_view realm, std::string* key)"
  },
  {
    "label": "TurnAuthInterface()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TurnAuthInterface()"
  },
  {
    "label": "ShouldRedirect()",
    "kind": "Method",
    "detail": "Function (} ; class TurnRedirectInterface { public : bool)",
    "insertText": "ShouldRedirect(const rtc::SocketAddress& address, rtc::SocketAddress* out)"
  },
  {
    "label": "TurnRedirectInterface()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TurnRedirectInterface()"
  },
  {
    "label": "ReceivedMessage()",
    "kind": "Method",
    "detail": "Function (} } ; class StunMessageObserver { public : void)",
    "insertText": "ReceivedMessage(const TurnMessage* msg)"
  },
  {
    "label": "ReceivedChannelData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedChannelData(const char* data, size_t size)"
  },
  {
    "label": "StunMessageObserver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StunMessageObserver()"
  },
  {
    "label": "TurnServer()",
    "kind": "Method",
    "detail": "Function (} } ; class TurnServer : public sigslot::has_slots<> { public : typedef std::map<TurnServerConnection,std::unique_ptr<TurnServerAllocation>> AllocationMap ;)",
    "insertText": "TurnServer(webrtc::TaskQueueBase* thread)"
  },
  {
    "label": "TurnServer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TurnServer()"
  },
  {
    "label": "realm()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "realm()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(thread_)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (realm_ =)",
    "insertText": "string(realm)"
  },
  {
    "label": "software()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "software()"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (software_ =)",
    "insertText": "string(software)"
  },
  {
    "label": "allocations()",
    "kind": "Method",
    "detail": "Function (} const AllocationMap&)",
    "insertText": "allocations()"
  },
  {
    "label": "set_redirect_hook()",
    "kind": "Method",
    "detail": "Function (auth_hook_ = auth_hook ; } void)",
    "insertText": "set_redirect_hook(TurnRedirectInterface* redirect_hook)"
  },
  {
    "label": "set_enable_otu_nonce()",
    "kind": "Method",
    "detail": "Function (redirect_hook_ = redirect_hook ; } void)",
    "insertText": "set_enable_otu_nonce(bool enable)"
  },
  {
    "label": "set_reject_private_addresses()",
    "kind": "Method",
    "detail": "Function (enable_otu_nonce_ = enable ; } void)",
    "insertText": "set_reject_private_addresses(bool filter)"
  },
  {
    "label": "set_enable_permission_checks()",
    "kind": "Method",
    "detail": "Function (reject_private_addresses_ = filter ; } void)",
    "insertText": "set_enable_permission_checks(bool enable)"
  },
  {
    "label": "AddInternalSocket()",
    "kind": "Method",
    "detail": "Function (enable_permission_checks_ = enable ; } void)",
    "insertText": "AddInternalSocket(rtc::AsyncPacketSocket* socket, ProtocolType proto)"
  },
  {
    "label": "AddInternalServerSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInternalServerSocket(rtc::Socket* socket, ProtocolType proto, std::unique_ptr<rtc::SSLAdapterFactory> ssl_adapter_factory = nullptr)"
  },
  {
    "label": "SetExternalSocketFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExternalSocketFactory(rtc::PacketSocketFactory* factory, const rtc::SocketAddress& address)"
  },
  {
    "label": "SetTimestampForNextNonce()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "SetTimestampForNextNonce(int64_t timestamp)"
  },
  {
    "label": "GenerateNonce()",
    "kind": "Method",
    "detail": "Function (ts_for_next_nonce_ = timestamp ; return)",
    "insertText": "GenerateNonce(timestamp)"
  },
  {
    "label": "SetStunMessageObserver()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStunMessageObserver(std::unique_ptr<StunMessageObserver> observer)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (stun_message_observer_ =)",
    "insertText": "move(observer)"
  },
  {
    "label": "GenerateNonce()",
    "kind": "Method",
    "detail": "Function (} private : std::string)",
    "insertText": "GenerateNonce(int64_t now) const RTC_RUN_ON(thread_)"
  },
  {
    "label": "OnInternalPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInternalPacket(rtc::AsyncPacketSocket* socket, const char* data, size_t size, const rtc::SocketAddress& address, const int64_t& packet_time_us)"
  },
  {
    "label": "OnNewInternalConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewInternalConnection(rtc::Socket* socket)"
  },
  {
    "label": "AcceptConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcceptConnection(rtc::Socket* server_socket) RTC_RUN_ON(thread_)"
  },
  {
    "label": "OnInternalSocketClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInternalSocketClose(rtc::AsyncPacketSocket* socket, int err)"
  },
  {
    "label": "HandleStunMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleStunMessage(TurnServerConnection* conn, const char* data, size_t size) RTC_RUN_ON(thread_)"
  },
  {
    "label": "HandleBindingRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleBindingRequest(TurnServerConnection* conn, const StunMessage* msg) RTC_RUN_ON(thread_)"
  },
  {
    "label": "HandleAllocateRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAllocateRequest(TurnServerConnection* conn, const TurnMessage* msg, absl::string_view key) RTC_RUN_ON(thread_)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetKey(const StunMessage* msg, std::string* key) RTC_RUN_ON(thread_)"
  },
  {
    "label": "CheckAuthorization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckAuthorization(TurnServerConnection* conn, StunMessage* msg, const char* data, size_t size, absl::string_view key) RTC_RUN_ON(thread_)"
  },
  {
    "label": "ValidateNonce()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateNonce(absl::string_view nonce) const RTC_RUN_ON(thread_)"
  },
  {
    "label": "FindAllocation()",
    "kind": "Method",
    "detail": "Function (TurnServerAllocation*)",
    "insertText": "FindAllocation(TurnServerConnection* conn) RTC_RUN_ON(thread_)"
  },
  {
    "label": "CreateAllocation()",
    "kind": "Method",
    "detail": "Function (TurnServerAllocation*)",
    "insertText": "CreateAllocation(TurnServerConnection* conn, int proto, absl::string_view key) RTC_RUN_ON(thread_)"
  },
  {
    "label": "SendErrorResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendErrorResponse(TurnServerConnection* conn, const StunMessage* req, int code, absl::string_view reason)"
  },
  {
    "label": "SendErrorResponseWithRealmAndNonce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendErrorResponseWithRealmAndNonce(TurnServerConnection* conn, const StunMessage* req, int code, absl::string_view reason) RTC_RUN_ON(thread_)"
  },
  {
    "label": "SendErrorResponseWithAlternateServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendErrorResponseWithAlternateServer(TurnServerConnection* conn, const StunMessage* req, const rtc::SocketAddress& addr) RTC_RUN_ON(thread_)"
  },
  {
    "label": "SendStun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendStun(TurnServerConnection* conn, StunMessage* msg)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(TurnServerConnection* conn, const rtc::ByteBufferWriter& buf)"
  },
  {
    "label": "DestroyAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAllocation(TurnServerAllocation* allocation) RTC_RUN_ON(thread_)"
  },
  {
    "label": "DestroyInternalSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyInternalSocket(rtc::AsyncPacketSocket* socket) RTC_RUN_ON(thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (typedef std::map<rtc::AsyncPacketSocket*,ProtocolType> InternalSocketMap ; struct ServerSocketInfo { ProtocolType proto ; std::unique_ptr<rtc::SSLAdapterFactory> ssl_adapter_factory ; } ; typedef std::map<rtc::Socket*,ServerSocketInfo> ServerSocketMap ; webrtc::TaskQueueBase* const thread_ ; const std::string nonce_key_ ; std::string realm_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  }
]