[
  {
    "label": "ByteBufferWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ByteBufferWriter"
  },
  {
    "label": "PacketSocketFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketSocketFactory"
  },
  {
    "label": "StunMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StunMessage"
  },
  {
    "label": "TurnMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnMessage"
  },
  {
    "label": "TurnServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnServer"
  },
  {
    "label": "TurnServerConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnServerConnection"
  },
  {
    "label": "TurnServerAllocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnServerAllocation"
  },
  {
    "label": "Channel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Channel"
  },
  {
    "label": "Permission",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Permission"
  },
  {
    "label": "TurnAuthInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnAuthInterface"
  },
  {
    "label": "TurnRedirectInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnRedirectInterface"
  },
  {
    "label": "StunMessageObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StunMessageObserver"
  },
  {
    "label": "TurnServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnServer"
  },
  {
    "label": "ServerSocketInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ServerSocketInfo"
  },
  {
    "label": "TurnServerAllocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnServerAllocation"
  },
  {
    "label": "TurnServerAllocation()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "TurnServerAllocation(TurnServer* server_,\n                       webrtc::TaskQueueBase* thread,\n                       const TurnServerConnection& conn,\n                       rtc::AsyncPacketSocket* server_socket,\n                       absl::string_view key)"
  },
  {
    "label": "HandleTurnMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTurnMessage(const TurnMessage* msg)"
  },
  {
    "label": "HandleChannelData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleChannelData(const char* data, size_t size)"
  },
  {
    "label": "PostDeleteSelf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDeleteSelf(webrtc::TimeDelta delay)"
  },
  {
    "label": "HandleAllocateRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAllocateRequest(const TurnMessage* msg)"
  },
  {
    "label": "HandleRefreshRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRefreshRequest(const TurnMessage* msg)"
  },
  {
    "label": "HandleSendIndication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSendIndication(const TurnMessage* msg)"
  },
  {
    "label": "HandleCreatePermissionRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCreatePermissionRequest(const TurnMessage* msg)"
  },
  {
    "label": "HandleChannelBindRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleChannelBindRequest(const TurnMessage* msg)"
  },
  {
    "label": "OnExternalPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExternalPacket(rtc::AsyncPacketSocket* socket,\n                        const char* data,\n                        size_t size,\n                        const rtc::SocketAddress& addr,\n                        const int64_t& packet_time_us)"
  },
  {
    "label": "ComputeLifetime()",
    "kind": "Method",
    "detail": "Function (webrtc::TimeDelta)",
    "insertText": "ComputeLifetime(const TurnMessage& msg)"
  },
  {
    "label": "HasPermission()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPermission(const rtc::IPAddress& addr)"
  },
  {
    "label": "AddPermission()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPermission(const rtc::IPAddress& addr)"
  },
  {
    "label": "FindPermission()",
    "kind": "Method",
    "detail": "Function (PermissionList::iterator)",
    "insertText": "FindPermission(const rtc::IPAddress& addr)"
  },
  {
    "label": "FindChannel()",
    "kind": "Method",
    "detail": "Function (ChannelList::iterator)",
    "insertText": "FindChannel(int channel_id)"
  },
  {
    "label": "FindChannel()",
    "kind": "Method",
    "detail": "Function (ChannelList::iterator)",
    "insertText": "FindChannel(const rtc::SocketAddress& addr)"
  },
  {
    "label": "SendResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendResponse(TurnMessage* msg)"
  },
  {
    "label": "SendBadRequestResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendBadRequestResponse(const TurnMessage* req)"
  },
  {
    "label": "SendErrorResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendErrorResponse(const TurnMessage* req,\n                         int code,\n                         absl::string_view reason)"
  },
  {
    "label": "SendExternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendExternal(const void* data,\n                    size_t size,\n                    const rtc::SocketAddress& peer)"
  },
  {
    "label": "TurnServer()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "TurnServer(webrtc::TaskQueueBase* thread)"
  },
  {
    "label": "AddInternalSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInternalSocket(rtc::AsyncPacketSocket* socket, ProtocolType proto)"
  },
  {
    "label": "AddInternalServerSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInternalServerSocket(\n      rtc::Socket* socket,\n      ProtocolType proto,\n      std::unique_ptr<rtc::SSLAdapterFactory> ssl_adapter_factory = nullptr)"
  },
  {
    "label": "SetExternalSocketFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExternalSocketFactory(rtc::PacketSocketFactory* factory,\n                                const rtc::SocketAddress& address)"
  },
  {
    "label": "GenerateNonce()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GenerateNonce(timestamp)"
  },
  {
    "label": "RTC_RUN_ON()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_RUN_ON(thread_)"
  },
  {
    "label": "OnInternalPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInternalPacket(rtc::AsyncPacketSocket* socket,\n                        const char* data,\n                        size_t size,\n                        const rtc::SocketAddress& address,\n                        const int64_t& packet_time_us)"
  },
  {
    "label": "OnNewInternalConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewInternalConnection(rtc::Socket* socket)"
  },
  {
    "label": "OnInternalSocketClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInternalSocketClose(rtc::AsyncPacketSocket* socket, int err)"
  },
  {
    "label": "RTC_RUN_ON()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_RUN_ON(thread_)"
  },
  {
    "label": "SendErrorResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendErrorResponse(TurnServerConnection* conn,\n                         const StunMessage* req,\n                         int code,\n                         absl::string_view reason)"
  },
  {
    "label": "SendStun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendStun(TurnServerConnection* conn, StunMessage* msg)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(TurnServerConnection* conn, const rtc::ByteBufferWriter& buf)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (realm_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (software_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (auth_hook_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (redirect_hook_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (enable_otu_nonce_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (server_sockets_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (server_listen_sockets_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (external_socket_factory_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (external_addr_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (allocations_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (stun_message_observer_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  }
]