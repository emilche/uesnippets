[
  {
    "label": "_Duration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Duration"
  },
  {
    "label": "hh_mm_ss",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "hh_mm_ss"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___CHRONO_HH_MM_SS_H # define _LIBCPP___CHRONO_HH_MM_SS_H # include<__chrono / duration . h> # include<__chrono / time_point . h> # include<__config> # include<ratio> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (template<class _Duration> class hh_mm_ss { private :)",
    "insertText": "static_assert(__is_duration<_Duration>::value, \"template parameter of hh_mm_ss must be a std::chrono::duration\")"
  },
  {
    "label": "__pow10()",
    "kind": "Method",
    "detail": "Function (using __CommonType = common_type_t<_Duration,chrono::seconds> ; _LIBCPP_HIDE_FROM_ABI uint64_t)",
    "insertText": "__pow10(unsigned __exp)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint64_t __ret = 1 ;)",
    "insertText": "for(unsigned __i = 0; __i < __exp; ++__i)"
  },
  {
    "label": "__pow10()",
    "kind": "Method",
    "detail": "Function (using precision = duration<__CommonType::rep,ratio<1,)",
    "insertText": "__pow10(fractional_width)"
  },
  {
    "label": "hh_mm_ss()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "hh_mm_ss()"
  },
  {
    "label": "zero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zero()"
  },
  {
    "label": "hh_mm_ss()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "hh_mm_ss(_Duration __d) noexcept : __is_neg(__d < _Duration(0)), __h(duration_cast<chrono::hours> (abs(__d))), __m(duration_cast<chrono::minutes>(abs(__d) - hours())), __s(duration_cast<chrono::seconds>(abs(__d) - hours() - minutes())), __f(duration_cast<precision> (abs(__d) - hours() - minutes() - seconds()))"
  },
  {
    "label": "is_negative()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "is_negative()"
  },
  {
    "label": "precision()",
    "kind": "Method",
    "detail": "Function (auto __dur = __h + __m + __s + __f ; return __is_neg ? - __dur : __dur ; } _LIBCPP_HIDE_FROM_ABI operator)",
    "insertText": "precision()"
  },
  {
    "label": "is_am()",
    "kind": "Method",
    "detail": "Function (} private : bool __is_neg ; chrono::hours __h ; chrono::minutes __m ; chrono::seconds __s ; precision __f ; } ; _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "is_am(const hours& __h)"
  },
  {
    "label": "is_pm()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "is_pm(const hours& __h)"
  },
  {
    "label": "make12()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI hours)",
    "insertText": "make12(const hours& __h)"
  },
  {
    "label": "make24()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI hours)",
    "insertText": "make24(const hours& __h, bool __is_pm)"
  }
]