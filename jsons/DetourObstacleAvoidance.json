[
  {
    "label": "dtObstacleCircle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtObstacleCircle"
  },
  {
    "label": "dtObstacleSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtObstacleSegment"
  },
  {
    "label": "dtObstacleAvoidanceDebugData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtObstacleAvoidanceDebugData"
  },
  {
    "label": "dtObstacleAvoidanceParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtObstacleAvoidanceParams"
  },
  {
    "label": "dtObstacleAvoidancePattern",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtObstacleAvoidancePattern"
  },
  {
    "label": "dtObstacleAvoidanceQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtObstacleAvoidanceQuery"
  },
  {
    "label": "dtObstacleAvoidanceDebugData()",
    "kind": "Method",
    "detail": "Function (# ifndef DETOUROBSTACLEAVOIDANCE_H # define DETOUROBSTACLEAVOIDANCE_H # include \" CoreMinimal . h \" # include \" Detour / DetourLargeWorldCoordinates . h \" struct dtObstacleCircle { dtReal p [ 3 ] ; dtReal vel [ 3 ] ; dtReal dvel [ 3 ] ; dtReal rad ; dtReal dp [ 3 ],np [ 3 ] ; } ; struct dtObstacleSegment { dtReal p [ 3 ],q [ 3 ] ; unsigned char touch : 1 ; unsigned char canIgnore : 1 ; } ; class dtObstacleAvoidanceDebugData { public :)",
    "insertText": "dtObstacleAvoidanceDebugData()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "init(const int maxSamples)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "addSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addSample(const dtReal* vel, const dtReal ssize, const dtReal pen, const dtReal vpen, const dtReal vcpen, const dtReal spen, const dtReal tpen)"
  },
  {
    "label": "normalizeSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "normalizeSamples()"
  },
  {
    "label": "getSampleCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getSampleCount()"
  },
  {
    "label": "dtFreeObstacleAvoidanceDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFreeObstacleAvoidanceDebugData(dtObstacleAvoidanceDebugData* ptr)"
  },
  {
    "label": "dtObstacleAvoidanceQuery()",
    "kind": "Method",
    "detail": "Function (const int DT_MAX_PATTERN_DIVS = 3 2 ; const int DT_MAX_PATTERN_RINGS = 4 ; const int DT_MAX_CUSTOM_SAMPLES = 1 6 ; struct dtObstacleAvoidanceParams { dtReal velBias ; dtReal weightDesVel ; dtReal weightCurVel ; dtReal weightSide ; dtReal weightToi ; dtReal horizTime ; unsigned char patternIdx ; unsigned char adaptiveDivs ; unsigned char adaptiveRings ; unsigned char adaptiveDepth ; } ; struct dtObstacleAvoidancePattern { dtReal angles [ DT_MAX_CUSTOM_SAMPLES ] ; dtReal radii [ DT_MAX_CUSTOM_SAMPLES ] ; int nsamples ; } ; class dtObstacleAvoidanceQuery { public :)",
    "insertText": "dtObstacleAvoidanceQuery()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "init(const int maxCircles, const int maxSegments, const int maxCustomPatterns)"
  },
  {
    "label": "addCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addCircle(const dtReal* pos, const dtReal rad, const dtReal* vel, const dtReal* dvel)"
  },
  {
    "label": "addSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addSegment(const dtReal* p, const dtReal* q, int flags = 0)"
  },
  {
    "label": "setCustomSamplingPattern()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "setCustomSamplingPattern(int idx, const dtReal* angles, const dtReal* radii, int nsamples)"
  },
  {
    "label": "getCustomSamplingPattern()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getCustomSamplingPattern(int idx, dtReal* angles, dtReal* radii, int* nsamples)"
  },
  {
    "label": "sampleVelocityCustom()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "sampleVelocityCustom(const dtReal* pos, const dtReal rad, const dtReal vmax, const dtReal vmult, const dtReal* vel, const dtReal* dvel, dtReal* nvel, const dtObstacleAvoidanceParams* params, dtObstacleAvoidanceDebugData* debug = 0)"
  },
  {
    "label": "sampleVelocityAdaptive()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "sampleVelocityAdaptive(const dtReal* pos, const dtReal rad, const dtReal vmax, const dtReal vmult, const dtReal* vel, const dtReal* dvel, dtReal* nvel, const dtObstacleAvoidanceParams* params, dtObstacleAvoidanceDebugData* debug = 0)"
  },
  {
    "label": "sampleVelocity()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "sampleVelocity(const dtReal* pos, const dtReal rad, const dtReal vmax, const dtReal vmult, const dtReal* vel, const dtReal* dvel, dtReal* nvel, const dtObstacleAvoidanceParams* params, dtObstacleAvoidanceDebugData* debug = 0)"
  },
  {
    "label": "getObstacleCircleCount()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getObstacleCircleCount()"
  },
  {
    "label": "processSample()",
    "kind": "Method",
    "detail": "Function (dtReal)",
    "insertText": "processSample(const dtReal* vcand, const dtReal cs, const dtReal* pos, const dtReal rad, const dtReal* vel, const dtReal* dvel, dtObstacleAvoidanceDebugData* debug)"
  },
  {
    "label": "insertCircle()",
    "kind": "Method",
    "detail": "Function (dtObstacleCircle*)",
    "insertText": "insertCircle(const dtReal dist)"
  },
  {
    "label": "insertSegment()",
    "kind": "Method",
    "detail": "Function (dtObstacleSegment*)",
    "insertText": "insertSegment(const dtReal dist)"
  },
  {
    "label": "dtAllocObstacleAvoidanceQuery()",
    "kind": "Method",
    "detail": "Function (dtObstacleAvoidanceParams m_params ; dtReal m_invHorizTime ; dtReal m_vmax ; dtReal m_invVmax ; dtObstacleAvoidancePattern* m_customPatterns ; dtObstacleCircle* m_circles ; dtObstacleSegment* m_segments ; int m_maxPatterns ; int m_maxCircles ; int m_ncircles ; int m_maxSegments ; int m_nsegments ; } ; dtObstacleAvoidanceQuery*)",
    "insertText": "dtAllocObstacleAvoidanceQuery()"
  },
  {
    "label": "dtFreeObstacleAvoidanceQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFreeObstacleAvoidanceQuery(dtObstacleAvoidanceQuery* ptr)"
  }
]