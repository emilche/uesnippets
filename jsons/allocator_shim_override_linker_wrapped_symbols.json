[
  {
    "label": "__wrap_calloc()",
    "kind": "Method",
    "detail": "Function (# ifdef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_LINKER_WRAPPED_SYMBOLS_H_ # error This header is meant to be included only once by allocator_shim . cc # endif # ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_LINKER_WRAPPED_SYMBOLS_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_LINKER_WRAPPED_SYMBOLS_H_ # include<algorithm> # include<cstring> # include \" base / allocator / partition_allocator / shim / allocator_shim_internals . h \" \" C \" { SHIM_ALWAYS_EXPORT void*)",
    "insertText": "__wrap_calloc(size_t n, size_t size)"
  },
  {
    "label": "__wrap_free()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void)",
    "insertText": "__wrap_free(void* ptr)"
  },
  {
    "label": "ShimFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShimFree(ptr, nullptr)"
  },
  {
    "label": "__wrap_malloc()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void*)",
    "insertText": "__wrap_malloc(size_t size)"
  },
  {
    "label": "__wrap_memalign()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void*)",
    "insertText": "__wrap_memalign(size_t align, size_t size)"
  },
  {
    "label": "__wrap_posix_memalign()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT int)",
    "insertText": "__wrap_posix_memalign(void** res, size_t align, size_t size)"
  },
  {
    "label": "__wrap_pvalloc()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void*)",
    "insertText": "__wrap_pvalloc(size_t size)"
  },
  {
    "label": "__wrap_realloc()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void*)",
    "insertText": "__wrap_realloc(void* address, size_t size)"
  },
  {
    "label": "__wrap_valloc()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void*)",
    "insertText": "__wrap_valloc(size_t size)"
  },
  {
    "label": "__wrap_malloc_usable_size()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT size_t)",
    "insertText": "__wrap_malloc_usable_size(void* address)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} const size_t kPathMaxSize = 8 1 9 2 ;)",
    "insertText": "static_assert(kPathMaxSize >= PATH_MAX, \"\")"
  },
  {
    "label": "__wrap_strdup()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "__wrap_strdup(const char* str)"
  },
  {
    "label": "__real_realpath()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "__real_realpath(const char* path, char* resolved_path)"
  },
  {
    "label": "__wrap_realpath()",
    "kind": "Method",
    "detail": "Function (SHIM_ALWAYS_EXPORT char*)",
    "insertText": "__wrap_realpath(const char* path, char* resolved_path)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (char buffer [ kPathMaxSize ] ;)",
    "insertText": "if(!__real_realpath(path, buffer))"
  },
  {
    "label": "strlen()",
    "kind": "Method",
    "detail": "Function (std::size_t length =)",
    "insertText": "strlen(str)"
  },
  {
    "label": "ShimMalloc()",
    "kind": "Method",
    "detail": "Function (void* buffer =)",
    "insertText": "ShimMalloc(length, nullptr)"
  },
  {
    "label": "__wrap_strndup()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT char*)",
    "insertText": "__wrap_strndup(const char* str, size_t n)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (std::size_t length =)",
    "insertText": "min(std::strlen(str), n)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (char* buffer = reinterpret_cast<)",
    "insertText": "char(ShimMalloc(length + 1, nullptr))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(buffer, str, length)"
  },
  {
    "label": "__real_getcwd()",
    "kind": "Method",
    "detail": "Function (buffer [ length ] = ' \\ 0 ' ; return buffer ; } char*)",
    "insertText": "__real_getcwd(char* buffer, size_t size)"
  },
  {
    "label": "__wrap_getcwd()",
    "kind": "Method",
    "detail": "Function (SHIM_ALWAYS_EXPORT char*)",
    "insertText": "__wrap_getcwd(char* buffer, size_t size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (char local_buffer [ size ] ;)",
    "insertText": "if(!__real_getcwd(local_buffer, size))"
  },
  {
    "label": "__wrap_vasprintf()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT int)",
    "insertText": "__wrap_vasprintf(char** strp, const char* fmt, va_list va_args)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (int kInitialSize = 1 2 8 ;* strp = static_cast<)",
    "insertText": "char(malloc(kInitialSize))"
  },
  {
    "label": "vsnprintf()",
    "kind": "Method",
    "detail": "Function (int actual_size =)",
    "insertText": "vsnprintf(*strp, kInitialSize, fmt, va_args)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (* strp = static_cast<)",
    "insertText": "char(realloc(*strp, static_cast<size_t>(actual_size + 1)))"
  },
  {
    "label": "va_start()",
    "kind": "Method",
    "detail": "Function (va_list va_args ;)",
    "insertText": "va_start(va_args, fmt)"
  },
  {
    "label": "vasprintf()",
    "kind": "Method",
    "detail": "Function (int retval =)",
    "insertText": "vasprintf(strp, fmt, va_args)"
  },
  {
    "label": "va_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "va_end(va_args)"
  }
]