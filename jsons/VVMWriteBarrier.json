[
  {
    "label": "TWriteBarrier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWriteBarrier"
  },
  {
    "label": "VCellType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCellType"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "TWriteBarrier()",
    "kind": "Method",
    "detail": "Function (template<T> struct TWriteBarrier { bool bIsVValue = std::is_same_v<T,VValue> | | std::is_same_v<T,VInt> ; bool bIsAux = IsTAux<T> ; using TValue = std::conditional_t<bIsVValue | | bIsAux,T,T*> ; using TEncodedValue = std::conditional<bIsVValue,uint64,T*>::type ;)",
    "insertText": "TWriteBarrier()"
  },
  {
    "label": "TWriteBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TWriteBarrier(const TWriteBarrier& Other)"
  },
  {
    "label": "RunBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunBarrier(FAccessContextPromise(), Other.Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Value = Other . Value ; } TWriteBarrier&)",
    "insertText": "operator(const TWriteBarrier& Other)"
  },
  {
    "label": "TWriteBarrier()",
    "kind": "Method",
    "detail": "Function (Value = Other . Value ; return* this ; })",
    "insertText": "TWriteBarrier(TWriteBarrier&& Other)"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Move(Value, Other.Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TWriteBarrier&)",
    "insertText": "operator(TWriteBarrier&& Other)"
  },
  {
    "label": "TWriteBarrier()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TWriteBarrier(FAccessContext Context, TValue Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Context, Value)"
  },
  {
    "label": "TWriteBarrier()",
    "kind": "Method",
    "detail": "Function (} template<U = T,std::enable_if_t<! bIsVValue&& std::is_convertible_v<U*,T*>>* = nullptr>)",
    "insertText": "TWriteBarrier(FAccessContext Context, std::enable_if_t<!bIsVValue, U>& Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Context, &Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<TResult = void> std::enable_if_t<! bIsVValue,TResult>)",
    "insertText": "Set(FAccessContext Context, T& NewValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Context, &NewValue)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value = { } ; } else { Value = nullptr ; } } void)",
    "insertText": "Set(FAccessContext Context, TValue NewValue)"
  },
  {
    "label": "RunBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunBarrier(Context, NewValue)"
  },
  {
    "label": "SetTransactionally()",
    "kind": "Method",
    "detail": "Function (Value = NewValue ; } template<TResult = void> std::enable_if_t<bIsVValue | | bIsAux,TResult>)",
    "insertText": "SetTransactionally(FAccessContext Context, VCell* Owner, TValue NewValue)"
  },
  {
    "label": "SetTransactionally()",
    "kind": "Method",
    "detail": "Function (template<TResult = void> std::enable_if_t<bIsVValue,TResult>)",
    "insertText": "SetTransactionally(FAccessContext Context, UObject* Owner, TValue NewValue)"
  },
  {
    "label": "SetTransactionally()",
    "kind": "Method",
    "detail": "Function (template<U,TResult = void> std::enable_if_t<bIsVValue,TResult>)",
    "insertText": "SetTransactionally(FAccessContext Context, TAux<U> Owner, TValue NewValue)"
  },
  {
    "label": "SetNonCellNorPlaceholder()",
    "kind": "Method",
    "detail": "Function (template<TResult = void> std::enable_if_t<bIsVValue,TResult>)",
    "insertText": "SetNonCellNorPlaceholder(VValue NewValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Value = NewValue ; } TValue)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<TResult = TValue> std::enable_if_t<! bIsVValue&& ! bIsAux,TResult>)",
    "insertText": "operator()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(WriteBarrier)"
  },
  {
    "label": "RunBarrier()",
    "kind": "Method",
    "detail": "Function (} else { return 0 ; } } private : TValue Value { } ; template<ContextType> void)",
    "insertText": "RunBarrier(ContextType Context, TValue Value)"
  },
  {
    "label": "FAccessContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAccessContext(Context).RunAuxWriteBarrierNonNullDuringMarking(Value.GetPtr())"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} } else if)",
    "insertText": "constexpr(bIsVValue)"
  },
  {
    "label": "FAccessContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAccessContext(Context).RunWriteBarrierNonNullDuringMarking(Cell)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Value.IsUObject())"
  },
  {
    "label": "AsUObject()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "AsUObject()->VerseMarkAsReachable()"
  },
  {
    "label": "VCell()",
    "kind": "Method",
    "detail": "Function (} } } else { VCell* Cell = reinterpret_cast<)",
    "insertText": "VCell(Value)"
  },
  {
    "label": "AddReferencedVerseValue()",
    "kind": "Method",
    "detail": "Function (} } } } ; } template<class VCellType> void)",
    "insertText": "AddReferencedVerseValue(Verse::TWriteBarrier<VCellType>& InValue, const UObject* ReferencingObject, const FProperty* ReferencingProperty)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(Verse::TWriteBarrier<VCellType>::bIsVValue)"
  },
  {
    "label": "HandleVCellReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleVCellReference(Cell, ReferencingObject, ReferencingProperty)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(UObject* Object = Value.ExtractUObject())"
  },
  {
    "label": "HandleObjectReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectReference(Object, ReferencingObject, ReferencingProperty)"
  }
]