[
  {
    "label": "MockCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockCallback"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_MOCK_CALLBACK_H_ # define BASE_TEST_MOCK_CALLBACK_H_ # include \" base / bind . h \" # include \" base / callback . h \" # include \" testing / gmock / include / gmock / gmock . h \" namespace base { template<F> class MockCallback ; template<Signature> using MockOnceCallback = MockCallback<OnceCallback<Signature>> ; template<Signature> using MockRepeatingCallback = MockCallback<RepeatingCallback<Signature>> ; using MockOnceClosure = MockCallback<OnceClosure> ; using MockRepeatingClosure = MockCallback<RepeatingClosure> ; template<R> class MockCallback<RepeatingCallback<)",
    "insertText": "R()"
  },
  {
    "label": "MockCallback()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "MockCallback()"
  },
  {
    "label": "MockCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MockCallback(const MockCallback&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MockCallback&)",
    "insertText": "operator(const MockCallback&)"
  },
  {
    "label": "MOCK_METHOD0_T()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD0_T(Run, R())"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (RepeatingCallback<)",
    "insertText": "R()> Get()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1> class MockCallback<RepeatingCallback<)",
    "insertText": "R(A1)"
  },
  {
    "label": "MOCK_METHOD1_T()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD1_T(Run, R(A1))"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (RepeatingCallback<)",
    "insertText": "R(A1)> Get()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2> class MockCallback<RepeatingCallback<)",
    "insertText": "R(A1, A2)"
  },
  {
    "label": "MOCK_METHOD2_T()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD2_T(Run, R(A1, A2))"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (RepeatingCallback<)",
    "insertText": "R(A1, A2)> Get()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2,A3> class MockCallback<RepeatingCallback<)",
    "insertText": "R(A1, A2, A3)"
  },
  {
    "label": "MOCK_METHOD3_T()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD3_T(Run, R(A1, A2, A3))"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (RepeatingCallback<)",
    "insertText": "R(A1, A2, A3)> Get()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2,A3,A4> class MockCallback<RepeatingCallback<)",
    "insertText": "R(A1, A2, A3, A4)"
  },
  {
    "label": "MOCK_METHOD4_T()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD4_T(Run, R(A1, A2, A3, A4))"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (RepeatingCallback<)",
    "insertText": "R(A1, A2, A3, A4)> Get()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2,A3,A4,A5> class MockCallback<RepeatingCallback<)",
    "insertText": "R(A1, A2, A3, A4, A5)"
  },
  {
    "label": "MOCK_METHOD5_T()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD5_T(Run, R(A1, A2, A3, A4, A5))"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (RepeatingCallback<)",
    "insertText": "R(A1, A2, A3, A4, A5)> Get()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2,A3,A4,A5,A6> class MockCallback<RepeatingCallback<)",
    "insertText": "R(A1, A2, A3, A4, A5, A6)"
  },
  {
    "label": "MOCK_METHOD6_T()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD6_T(Run, R(A1, A2, A3, A4, A5, A6))"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (RepeatingCallback<)",
    "insertText": "R(A1, A2, A3, A4, A5, A6)> Get()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2,A3,A4,A5,A6,A7> class MockCallback<RepeatingCallback<)",
    "insertText": "R(A1, A2, A3, A4, A5, A6, A7)"
  },
  {
    "label": "MOCK_METHOD7_T()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD7_T(Run, R(A1, A2, A3, A4, A5, A6, A7))"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (RepeatingCallback<)",
    "insertText": "R(A1, A2, A3, A4, A5, A6, A7)> Get()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2,A3,A4,A5,A6,A7,A8> class MockCallback<RepeatingCallback<)",
    "insertText": "R(A1, A2, A3, A4, A5, A6, A7, A8)"
  },
  {
    "label": "MOCK_METHOD8_T()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD8_T(Run, R(A1, A2, A3, A4, A5, A6, A7, A8))"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (RepeatingCallback<)",
    "insertText": "R(A1, A2, A3, A4, A5, A6, A7, A8)> Get()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2,A3,A4,A5,A6,A7,A8,A9> class MockCallback<RepeatingCallback<)",
    "insertText": "R(A1, A2, A3, A4, A5, A6, A7, A8, A9)"
  },
  {
    "label": "MOCK_METHOD9_T()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD9_T(Run, R(A1, A2, A3, A4, A5, A6, A7, A8, A9))"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (RepeatingCallback<)",
    "insertText": "R(A1, A2, A3, A4, A5, A6, A7, A8, A9)> Get()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10> class MockCallback<RepeatingCallback<)",
    "insertText": "R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)"
  },
  {
    "label": "MOCK_METHOD10_T()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD10_T(Run, R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (RepeatingCallback<)",
    "insertText": "R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)> Get()"
  }
]