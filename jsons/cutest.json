[
  {
    "label": "test__",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "test__"
  },
  {
    "label": "TEST_CHECK_()",
    "kind": "Method",
    "detail": "Function (# ifndef CUTEST_H__ # define CUTEST_H__ # define TEST_LIST const struct test__ test_list__ [ ] # define)",
    "insertText": "TEST_CHECK_(cond, ...) \\ test_check__((cond), __FILE__, __LINE__, __VA_ARGS__) #define TEST_CHECK(cond) test_check__((cond), __FILE__, __LINE__, \"%s\", #cond) #include <stdarg.h> #include <stdio.h> #include <stdlib.h> #include <string.h> #if defined(unix) || defined(__unix__) || defined(__unix) || defined(__APPLE__) #define CUTEST_UNIX__ 1 #include <errno.h> #include <unistd.h> #include <sys/types.h> #include <sys/wait.h> #include <signal.h> #endif #if defined(_WIN32) || defined(__WIN32__) || defined(__WINDOWS__)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif struct test__ { const char* name ;)",
    "insertText": "void(*func)(void)"
  },
  {
    "label": "test_check__()",
    "kind": "Method",
    "detail": "Function (} ; const struct test__ test_list__ [ ] ; int)",
    "insertText": "test_check__(int cond, const char *file, int line, const char *fmt, ...)"
  },
  {
    "label": "test_print_in_color__()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_NO_MAIN char* test_argv0__ = NULL ; int test_count__ = 0 ; int test_no_exec__ = 0 ; int test_no_summary__ = 0 ; int test_skip_mode__ = 0 ; int test_stat_failed_units__ = 0 ; int test_stat_run_units__ = 0 ; const struct test__* test_current_unit__ = NULL ; int test_current_already_logged__ = 0 ; int test_verbose_level__ = 2 ; int test_current_failures__ = 0 ; int test_colorize__ = 0 ; # define CUTEST_COLOR_DEFAULT__ 0 # define CUTEST_COLOR_GREEN__ 1 # define CUTEST_COLOR_RED__ 2 # define CUTEST_COLOR_DEFAULT_INTENSIVE__ 3 # define CUTEST_COLOR_GREEN_INTENSIVE__ 4 # define CUTEST_COLOR_RED_INTENSIVE__ 5 size_t)",
    "insertText": "test_print_in_color__(int color, const char *fmt, ...)"
  },
  {
    "label": "va_start()",
    "kind": "Method",
    "detail": "Function (va_list args ; char buffer [ 2 5 6 ] ; size_t n ;)",
    "insertText": "va_start(args, fmt)"
  },
  {
    "label": "vsnprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vsnprintf(buffer, sizeof(buffer), fmt, args)"
  },
  {
    "label": "va_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "va_end(args)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (buffer [)",
    "insertText": "sizeof(buffer)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (} # if defined CUTEST_UNIX__ { const char* col_str ;)",
    "insertText": "switch(color)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (n =)",
    "insertText": "printf(\"%s\", buffer)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"\\033[0m\")"
  },
  {
    "label": "GetConsoleScreenBufferInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConsoleScreenBufferInfo(h, &info)"
  },
  {
    "label": "SetConsoleTextAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConsoleTextAttribute(h, info.wAttributes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const char* result_str ; int result_color ; int verbose_level ;)",
    "insertText": "if(cond)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (result_str = \" ok \" ; result_color = CUTEST_COLOR_GREEN__ ; verbose_level = 3 ; } else {)",
    "insertText": "if(!test_current_already_logged__ && test_current_unit__ != NULL)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"[ \")"
  },
  {
    "label": "test_print_in_color__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "test_print_in_color__(CUTEST_COLOR_RED_INTENSIVE__, \"FAILED\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" ]\\n\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} result_str = \" failed \" ; result_color = CUTEST_COLOR_RED__ ; verbose_level = 2 ; test_current_failures__ + + ; test_current_already_logged__ + + ; })",
    "insertText": "if(test_verbose_level__ >= verbose_level)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (size_t n = 0 ; va_list args ;)",
    "insertText": "printf(\" \")"
  },
  {
    "label": "vprintf()",
    "kind": "Method",
    "detail": "Function (n + =)",
    "insertText": "vprintf(fmt, args)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"... \")"
  },
  {
    "label": "test_print_in_color__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "test_print_in_color__(result_color, result_str)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"\\n\")"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (test_current_already_logged__ + + ; })",
    "insertText": "return(cond != 0)"
  },
  {
    "label": "test_list_names__()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "test_list_names__(void)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (const struct test__* test ;)",
    "insertText": "printf(\"Unit tests:\\n\")"
  },
  {
    "label": "test_by_name__()",
    "kind": "Method",
    "detail": "Function (} const struct test__*)",
    "insertText": "test_by_name__(const char *name)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const struct test__* test ;)",
    "insertText": "for(test = &test_list__[0]; test->func != NULL; test++)"
  },
  {
    "label": "test_do_run__()",
    "kind": "Method",
    "detail": "Function (} return NULL ; } int)",
    "insertText": "test_do_run__(const struct test__ *test)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (test_current_unit__ = test ; test_current_failures__ = 0 ; test_current_already_logged__ = 0 ;)",
    "insertText": "if(test_verbose_level__ >= 3)"
  },
  {
    "label": "test_print_in_color__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "test_print_in_color__(CUTEST_COLOR_DEFAULT_INTENSIVE__, \"Test %s:\\n\", test->name)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (test_current_already_logged__ + + ; } else)",
    "insertText": "if(test_verbose_level__ >= 1)"
  },
  {
    "label": "test_print_in_color__()",
    "kind": "Method",
    "detail": "Function (size_t n ; char spaces [ 3 2 ] ; n =)",
    "insertText": "test_print_in_color__(CUTEST_COLOR_DEFAULT_INTENSIVE__, \"Test %s... \", test->name)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(spaces, ' ', sizeof(spaces))"
  },
  {
    "label": "fflush()",
    "kind": "Method",
    "detail": "Function (} else { test_current_already_logged__ = 1 ; } # ifdef __cplusplus try { # endif)",
    "insertText": "fflush(stdout)"
  },
  {
    "label": "fflush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fflush(stderr)"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (test ->)",
    "insertText": "func()"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (# ifdef __cplusplus })",
    "insertText": "catch(std::exception &e)"
  },
  {
    "label": "what()",
    "kind": "Method",
    "detail": "Function (const char* what = e .)",
    "insertText": "what()"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "catch(...)"
  },
  {
    "label": "test_check__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "test_check__(0, NULL, 0, \"Threw an exception\")"
  },
  {
    "label": "test_print_in_color__()",
    "kind": "Method",
    "detail": "Function (break ; case 1 :)",
    "insertText": "test_print_in_color__(CUTEST_COLOR_RED_INTENSIVE__, \" One condition has FAILED.\\n\\n\")"
  },
  {
    "label": "test_print_in_color__()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "test_print_in_color__(CUTEST_COLOR_RED_INTENSIVE__, \" %d conditions have FAILED.\\n\\n\", test_current_failures__)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } } else)",
    "insertText": "if(test_verbose_level__ >= 1 && test_current_failures__ == 0)"
  },
  {
    "label": "test_print_in_color__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "test_print_in_color__(CUTEST_COLOR_GREEN_INTENSIVE__, \"OK\")"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} test_current_unit__ = NULL ;)",
    "insertText": "return(test_current_failures__ == 0)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(CUTEST_UNIX__) || defined(CUTEST_WIN__) static void test_error__(const char *fmt, ...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (va_list args ;)",
    "insertText": "if(test_verbose_level__ == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(test_verbose_level__ >= 2)"
  },
  {
    "label": "test_print_in_color__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "test_print_in_color__(CUTEST_COLOR_RED_INTENSIVE__, \" Error: \")"
  },
  {
    "label": "test_run__()",
    "kind": "Method",
    "detail": "Function (} } # endif void)",
    "insertText": "test_run__(const struct test__ *test)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int failed = 1 ; test_current_unit__ = test ; test_current_already_logged__ = 0 ;)",
    "insertText": "if(!test_no_exec__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(CUTEST_UNIX__)"
  },
  {
    "label": "fork()",
    "kind": "Method",
    "detail": "Function (int exit_code ; pid =)",
    "insertText": "fork()"
  },
  {
    "label": "test_error__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "test_error__(\"Cannot fork. %s [%d]\", strerror(errno), errno)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (failed = 1 ; } else)",
    "insertText": "if(pid == 0)"
  },
  {
    "label": "failed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "failed(test_do_run__(test) != 0)"
  },
  {
    "label": "exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exit(failed ? 1 : 0)"
  },
  {
    "label": "waitpid()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "waitpid(pid, &exit_code, 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(WIFSIGNALED(exit_code))"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (char tmp [ 3 2 ] ; const char* signame ;)",
    "insertText": "switch(WTERMSIG(exit_code))"
  },
  {
    "label": "test_error__()",
    "kind": "Method",
    "detail": "Function (signame = tmp ; break ; })",
    "insertText": "test_error__(\"Test interrupted by %s\", signame)"
  },
  {
    "label": "test_error__()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "test_error__(\"Test ended in an unexpected way [%d]\", exit_code)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } # elif)",
    "insertText": "defined(CUTEST_WIN__)"
  },
  {
    "label": "_snprintf()",
    "kind": "Method",
    "detail": "Function (0 } ; STARTUPINFOA startupInfo = { 0 } ; PROCESS_INFORMATION processInfo ; DWORD exitCode ;)",
    "insertText": "_snprintf(buffer, sizeof(buffer) - 1, \"%s --no-exec --no-summary --verbose=%d --color=%s -- \\\"%s\\\"\", test_argv0__, test_verbose_level__, test_colorize__ ? \"always\" : \"never\", test->name)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (startupInfo . cb =)",
    "insertText": "sizeof(STARTUPINFO)"
  },
  {
    "label": "WaitForSingleObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForSingleObject(processInfo.hProcess, INFINITE)"
  },
  {
    "label": "GetExitCodeProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExitCodeProcess(processInfo.hProcess, &exitCode)"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHandle(processInfo.hThread)"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHandle(processInfo.hProcess)"
  },
  {
    "label": "failed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "failed(exitCode != 0)"
  },
  {
    "label": "test_error__()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "test_error__(\"Cannot create unit test subprocess [%ld].\", GetLastError())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} test_current_unit__ = NULL ; test_stat_run_units__ + + ;)",
    "insertText": "if(failed)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(CUTEST_WIN__) static LONG CALLBACK test_exception_filter__(EXCEPTION_POINTERS *ptrs)"
  },
  {
    "label": "test_error__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "test_error__(\"Unhandled SEH exception %08lx at %p.\", ptrs->ExceptionRecord->ExceptionCode, ptrs->ExceptionRecord->ExceptionAddress)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"Usage: %s [options] [test...]\\n\", test_argv0__)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"Run the specified unit tests; or if the option '--skip' is used, \" \"run all\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"tests in the suite but those listed. By default, if no tests are \" \"specified\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"on the command line, all unit tests in the suite are run.\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"Options:\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" -s, --skip Execute all unit tests but the listed ones\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" --no-exec Do not execute unit tests as child \" \"processes\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" --no-summary Suppress printing of test results summary\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" -l, --list List unit tests in the suite and exit\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" -v, --verbose Enable more verbose output\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" --verbose=LEVEL Set verbose level to LEVEL:\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" 0 ... Be silent\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" 1 ... Output one line per test (and \" \"summary)\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" 2 ... As 1 and failed conditions (this \" \"is default)\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" 3 ... As 1 and all conditions (and \" \"extended summary)\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" --color=WHEN Enable colorized output (WHEN is one of \" \"'auto', 'always', 'never')\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" -h, --help Display this help and exit\\n\")"
  },
  {
    "label": "test_list_names__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "test_list_names__()"
  },
  {
    "label": "main()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "main(int argc, char **argv)"
  },
  {
    "label": "isatty()",
    "kind": "Method",
    "detail": "Function (const struct test__** tests = NULL ; int i,j,n = 0 ; int seen_double_dash = 0 ; test_argv0__ = argv [ 0 ] ; # if defined CUTEST_UNIX__ test_colorize__ =)",
    "insertText": "isatty(STDOUT_FILENO)"
  },
  {
    "label": "_isatty()",
    "kind": "Method",
    "detail": "Function (# elif defined CUTEST_WIN__ test_colorize__ =)",
    "insertText": "_isatty(_fileno(stdout))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# else test_colorize__ = 0 ; # endif)",
    "insertText": "for(i = 1; i < argc; i++)"
  },
  {
    "label": "tests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tests(const struct test__ **)realloc( (void *)tests, (n + 1) * sizeof(const struct test__ *))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"Out of memory.\\n\")"
  },
  {
    "label": "exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exit(2)"
  },
  {
    "label": "test_by_name__()",
    "kind": "Method",
    "detail": "Function (} tests [ n ] =)",
    "insertText": "test_by_name__(argv[i])"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"%s: Unrecognized unit test '%s'\\n\", argv[0], argv[i])"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"Try '%s --list' for list of unit tests.\\n\", argv[0])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} n + + ; } else)",
    "insertText": "if(strcmp(argv[i], \"--\") == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (seen_double_dash = 1 ; } else)",
    "insertText": "if(strcmp(argv[i], \"--help\") == 0 || strcmp(argv[i], \"-h\") == 0)"
  },
  {
    "label": "test_help__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "test_help__()"
  },
  {
    "label": "exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exit(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(strcmp(argv[i], \"--verbose\") == 0 || strcmp(argv[i], \"-v\") == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (test_verbose_level__ + + ; } else)",
    "insertText": "if(strncmp(argv[i], \"--verbose=\", 10) == 0)"
  },
  {
    "label": "atoi()",
    "kind": "Method",
    "detail": "Function (test_verbose_level__ =)",
    "insertText": "atoi(argv[i] + 10)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(strcmp(argv[i], \"--color=auto\") == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(strcmp(argv[i], \"--color=always\") == 0 || strcmp(argv[i], \"--color\") == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (test_colorize__ = 1 ; } else)",
    "insertText": "if(strcmp(argv[i], \"--color=never\") == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (test_colorize__ = 0 ; } else)",
    "insertText": "if(strcmp(argv[i], \"--skip\") == 0 || strcmp(argv[i], \"-s\") == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (test_skip_mode__ = 1 ; } else)",
    "insertText": "if(strcmp(argv[i], \"--no-exec\") == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (test_no_exec__ = 1 ; } else)",
    "insertText": "if(strcmp(argv[i], \"--no-summary\") == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (test_no_summary__ = 1 ; } else)",
    "insertText": "if(strcmp(argv[i], \"--list\") == 0 || strcmp(argv[i], \"-l\") == 0)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "fprintf(stderr, \"%s: Unrecognized option '%s'\\n\", argv[0], argv[i])"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"Try '%s --help' for more information.\\n\", argv[0])"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } # if)",
    "insertText": "defined(CUTEST_WIN__) SetUnhandledExceptionFilter(test_exception_filter__)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# endif test_count__ = 0 ;)",
    "insertText": "for(i = 0; test_list__[i].func != NULL; i++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!test_skip_mode__)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int want_skip = 0 ;)",
    "insertText": "for(j = 0; j < n; j++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (want_skip = 1 ; break ; } })",
    "insertText": "if(!want_skip) test_run__(&test_list__[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(!test_no_summary__ && test_verbose_level__ >= 1)"
  },
  {
    "label": "test_print_in_color__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "test_print_in_color__(CUTEST_COLOR_DEFAULT_INTENSIVE__, \"\\nSummary:\\n\")"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" Count of all unit tests: %4d\\n\", test_count__)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" Count of run unit tests: %4d\\n\", test_stat_run_units__)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" Count of failed unit tests: %4d\\n\", test_stat_failed_units__)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" Count of skipped unit tests: %4d\\n\", test_count__ - test_stat_run_units__)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(test_stat_failed_units__ == 0)"
  },
  {
    "label": "test_print_in_color__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "test_print_in_color__(CUTEST_COLOR_GREEN_INTENSIVE__, \" SUCCESS: All unit tests have passed.\\n\")"
  },
  {
    "label": "test_print_in_color__()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "test_print_in_color__(CUTEST_COLOR_RED_INTENSIVE__, \" FAILED: %d of %d unit tests have failed.\\n\", test_stat_failed_units__, test_stat_run_units__)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(tests != NULL) free((void *)tests)"
  }
]