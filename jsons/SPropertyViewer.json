[
  {
    "label": "IFieldIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFieldIterator"
  },
  {
    "label": "IFieldExpander",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFieldExpander"
  },
  {
    "label": "INotifyHook",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INotifyHook"
  },
  {
    "label": "FPropertyViewerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyViewerImpl"
  },
  {
    "label": "SPropertyViewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyViewer"
  },
  {
    "label": "FHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHandle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSelectedItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedItem"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Framework / Views / ITypedTableView . h \" # include \" Templates / TypeHash . h \" # include \" Widgets / SCompoundWidget . h \" # include \" UObject / Class . h \" # include \" UObject / Field . h \" # include \" UObject / StructOnScope . h \" namespace UE::PropertyViewer { class IFieldIterator ; class IFieldExpander ; class INotifyHook ; namespace Private { class FPropertyViewerImpl ; } class SPropertyViewer : public SCompoundWidget { private : using Super = SCompoundWidget ; public : class FHandle { private : SPropertyViewer ; int32 Id = 0 ; public : bool)",
    "insertText": "operator(FHandle Other)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EPropertyVisibility { Hidden,Visible,Editable,} ; struct FSelectedItem { FHandle Handle ; TArray<TArray<FFieldVariant>> Fields ; bool bIsContainerSelected = false ; } ; public :)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(TSharedPtr<SWidget>, FGetFieldWidget, FHandle, TArrayView<const FFieldVariant>)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(TSharedPtr<SWidget>, FOnContextMenuOpening, FHandle, TArrayView<const FFieldVariant>)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnSelectionChanged, FHandle, TArrayView<const FFieldVariant>, ESelectInfo::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnDoubleClicked, FHandle, TArrayView<const FFieldVariant>)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_FourParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_FourParams(FReply, FOnDragDetected, const FGeometry&, const FPointerEvent&, FHandle, TArrayView<const FFieldVariant>)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(TSharedRef<SWidget>, FOnGenerateContainer, FHandle, TOptional<FText> DisplayName)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SPropertyViewer)"
  },
  {
    "label": "SLATE_ARGUMENT_DEFAULT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT_DEFAULT(EPropertyVisibility, PropertyVisibility)"
  },
  {
    "label": "SLATE_ARGUMENT_DEFAULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT_DEFAULT(bool, bSanitizeName)"
  },
  {
    "label": "SLATE_ARGUMENT_DEFAULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT_DEFAULT(bool, bShowFieldIcon)"
  },
  {
    "label": "SLATE_ARGUMENT_DEFAULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT_DEFAULT(bool, bSortChildNode)"
  },
  {
    "label": "SLATE_ARGUMENT_DEFAULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT_DEFAULT(bool, bShowSearchBox)"
  },
  {
    "label": "SLATE_ARGUMENT_DEFAULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT_DEFAULT(ESelectionMode::Type, SelectionMode)"
  },
  {
    "label": "SLATE_ARGUMENT_DEFAULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT_DEFAULT(IFieldIterator*, FieldIterator)"
  },
  {
    "label": "SLATE_ARGUMENT_DEFAULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT_DEFAULT(IFieldExpander*, FieldExpander)"
  },
  {
    "label": "SLATE_ARGUMENT_DEFAULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT_DEFAULT(INotifyHook*, NotifyHook)"
  },
  {
    "label": "SLATE_NAMED_SLOT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_NAMED_SLOT(FArguments, SearchBoxPreSlot) SLATE_NAMED_SLOT(FArguments, SearchBoxPostSlot) SLATE_EVENT(FGetFieldWidget, OnGetPreSlot) SLATE_EVENT(FGetFieldWidget, OnGetPostSlot) SLATE_EVENT(FOnContextMenuOpening, OnContextMenuOpening) SLATE_EVENT(FOnSelectionChanged, OnSelectionChanged) SLATE_EVENT(FOnDoubleClicked, OnDoubleClicked)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_EVENT(FOnGenerateContainer, OnGenerateContainer) SLATE_EVENT(FOnDragDetected, OnDragDetected)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_END_ARGS() ADVANCEDWIDGETS_API void Construct(const FArguments& InArgs)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const UScriptStruct* Struct)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const UScriptStruct* Struct, void* Data)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const UClass* Class)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, UObject* ObjectInstance)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const UFunction* Function)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "AddContainer()",
    "kind": "Method",
    "detail": "Function (public : FHandle)",
    "insertText": "AddContainer(const UScriptStruct* Struct, TOptional<FText> DisplayName = TOptional<FText>())"
  },
  {
    "label": "AddContainer()",
    "kind": "Method",
    "detail": "Function (FHandle)",
    "insertText": "AddContainer(const UClass* Class, TOptional<FText> DisplayName = TOptional<FText>())"
  },
  {
    "label": "AddContainer()",
    "kind": "Method",
    "detail": "Function (FHandle)",
    "insertText": "AddContainer(const UFunction* Function, TOptional<FText> DisplayName = TOptional<FText>())"
  },
  {
    "label": "AddInstance()",
    "kind": "Method",
    "detail": "Function (FHandle)",
    "insertText": "AddInstance(const UScriptStruct* Struct, void* Data, TOptional<FText> DisplayName = TOptional<FText>())"
  },
  {
    "label": "AddInstance()",
    "kind": "Method",
    "detail": "Function (FHandle)",
    "insertText": "AddInstance(UObject* ObjectInstance, TOptional<FText> DisplayName = TOptional<FText>())"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(FHandle Identifier)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAll()"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (TArray<FSelectedItem>)",
    "insertText": "GetSelectedItems()"
  },
  {
    "label": "SetRawFilterText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRawFilterText(const FText& InFilterText)"
  },
  {
    "label": "SetSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelection(FHandle Container, TArrayView<const FFieldVariant> FieldPath)"
  },
  {
    "label": "ConstructInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ConstructInternal(const FArguments& InArgs)"
  },
  {
    "label": "MakeContainerIdentifier()",
    "kind": "Method",
    "detail": "Function (FHandle)",
    "insertText": "MakeContainerIdentifier()"
  }
]