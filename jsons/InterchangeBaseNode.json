[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FAssetRegistryTagsContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryTagsContext"
  },
  {
    "label": "UInterchangeBaseNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangeBaseNode"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "access",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "access"
  },
  {
    "label": "so",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "so"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "used"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "FBaseNodeStaticData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBaseNodeStaticData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "UInterchangeBaseNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangeBaseNode"
  },
  {
    "label": "UInterchangeBaseNode()",
    "kind": "Method",
    "detail": "Function (INTERCHANGECORE_API)",
    "insertText": "UInterchangeBaseNode()"
  },
  {
    "label": "InitializeNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeNode(const FString& UniqueID, const FString& DisplayLabel, const EInterchangeNodeContainerType NodeContainerType)"
  },
  {
    "label": "RemoveAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveAttribute(const FString& NodeAttributeKey)"
  },
  {
    "label": "AddBooleanAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddBooleanAttribute(const FString& NodeAttributeKey, const bool& Value)"
  },
  {
    "label": "AddInt32Attribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddInt32Attribute(const FString& NodeAttributeKey, const int32& Value)"
  },
  {
    "label": "AddFloatAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFloatAttribute(const FString& NodeAttributeKey, const float& Value)"
  },
  {
    "label": "AddDoubleAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddDoubleAttribute(const FString& NodeAttributeKey, const double& Value)"
  },
  {
    "label": "AddStringAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddStringAttribute(const FString& NodeAttributeKey, const FString& Value)"
  },
  {
    "label": "AddGuidAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddGuidAttribute(const FString& NodeAttributeKey, const FGuid& Value)"
  },
  {
    "label": "AddLinearColorAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddLinearColorAttribute(const FString& NodeAttributeKey, const FLinearColor& Value)"
  },
  {
    "label": "AddVector2Attribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddVector2Attribute(const FString& NodeAttributeKey, const FVector2f& Value)"
  },
  {
    "label": "SetDisplayLabel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDisplayLabel(const FString& DisplayName)"
  },
  {
    "label": "SetParentUid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetParentUid(const FString& ParentUid)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetEnabled(const bool bIsEnabled)"
  },
  {
    "label": "SetAssetName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAssetName(const FString& AssetName)"
  },
  {
    "label": "InvalidNodeUid()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "InvalidNodeUid()"
  },
  {
    "label": "CompareNodeStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompareNodeStorage(const UInterchangeBaseNode* NodeA, const UInterchangeBaseNode* NodeB, TArray<UE::Interchange::FAttributeKey>& RemovedAttributes, TArray<UE::Interchange::FAttributeKey>& AddedAttributes, TArray<UE::Interchange::FAttributeKey>& ModifiedAttributes)"
  },
  {
    "label": "CopyStorageAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyStorageAttributes(const UInterchangeBaseNode* SourceNode, UInterchangeBaseNode* DestinationNode, TArray<UE::Interchange::FAttributeKey>& AttributeKeys)"
  },
  {
    "label": "CopyStorageAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyStorageAttributes(const UInterchangeBaseNode* SourceNode, UE::Interchange::FAttributeStorage& DestinationStorage, TArray<UE::Interchange::FAttributeKey>& AttributeKeys)"
  },
  {
    "label": "CopyStorageAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyStorageAttributes(const UE::Interchange::FAttributeStorage& SourceStorage, UInterchangeBaseNode* DestinationNode, TArray<UE::Interchange::FAttributeKey>& AttributeKeys)"
  },
  {
    "label": "CopyStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyStorage(const UInterchangeBaseNode* SourceNode, UInterchangeBaseNode* DestinationNode)"
  }
]