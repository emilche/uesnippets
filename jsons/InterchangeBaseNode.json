[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FAssetRegistryTagsContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryTagsContext"
  },
  {
    "label": "UInterchangeBaseNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangeBaseNode"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FBaseNodeStaticData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBaseNodeStaticData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GetCustomAttribute()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / Color . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Guid . h \" # include \" Misc / TVariant . h \" # include \" Nodes / InterchangeBaseNodeUtilities . h \" # include \" Templates / SharedPointer . h \" # include \" Types / AttributeStorage . h \" # include \" UObject / AssetRegistryTagsContext . h \" # include \" UObject / Class . h \" # include \" UObject / Field . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / UnrealType . h \" # include \" InterchangeBaseNode . generated . h \" class FArchive ; class FAssetRegistryTagsContext ; class UInterchangeBaseNode ; struct FFrame ; namespace InterchangePrivateNodeBase { template<ValueType> bool)",
    "insertText": "GetCustomAttribute(const UE::Interchange::FAttributeStorage& Attributes, const UE::Interchange::FAttributeKey& AttributeKey, const FString& OperationName, ValueType& OutAttributeValue)"
  },
  {
    "label": "LogAttributeStorageErrors()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "LogAttributeStorageErrors(Result, OperationName, AttributeKey)"
  },
  {
    "label": "RegisterAttribute()",
    "kind": "Method",
    "detail": "Function (UE::Interchange::EAttributeStorageResult Result = Attributes .)",
    "insertText": "RegisterAttribute(AttributeKey, AttributeValue)"
  },
  {
    "label": "IMPLEMENT_NODE_ATTRIBUTE_KEY()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "IMPLEMENT_NODE_ATTRIBUTE_KEY(AttributeName) \\ const UE::Interchange::FAttributeKey Macro_Custom##AttributeName##Key = UE::Interchange::FAttributeKey(TEXT(#AttributeName))"
  },
  {
    "label": "IMPLEMENT_NODE_ATTRIBUTE_GETTER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "IMPLEMENT_NODE_ATTRIBUTE_GETTER(AttributeName, AttributeType) \\ FString OperationName = GetTypeName() + TEXT(\".Get\" #AttributeName)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (\\ return InterchangePrivateNodeBase::GetCustomAttribute<)",
    "insertText": "AttributeType(*Attributes, Macro_Custom##AttributeName##Key, OperationName, AttributeValue)"
  },
  {
    "label": "IMPLEMENT_NODE_ATTRIBUTE_SETTER_NODELEGATE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "IMPLEMENT_NODE_ATTRIBUTE_SETTER_NODELEGATE(AttributeName, AttributeType) \\ FString OperationName = GetTypeName() + TEXT(\".Set\" #AttributeName)"
  },
  {
    "label": "INTERCHANGE_BASE_NODE_ADD_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "INTERCHANGE_BASE_NODE_ADD_ATTRIBUTE(ValueType) \\ UE::Interchange::FAttributeStorage::TAttributeHandle<ValueType> Handle = RegisterAttribute<ValueType>(UE::Interchange::FAttributeKey(NodeAttributeKey), Value)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (\\ return Handle .)",
    "insertText": "IsValid()"
  },
  {
    "label": "INTERCHANGE_BASE_NODE_GET_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "INTERCHANGE_BASE_NODE_GET_ATTRIBUTE(ValueType) \\ if(HasAttribute(UE::Interchange::FAttributeKey(NodeAttributeKey)))"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (\\ UE::Interchange::FAttributeStorage::TAttributeHandle<ValueType> Handle = GetAttributeHandle<)",
    "insertText": "ValueType(UE::Interchange::FAttributeKey(NodeAttributeKey))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(Handle.IsValid())"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(Handle.Get(OutValue) == UE::Interchange::EAttributeStorageResult::Operation_Success)"
  },
  {
    "label": "UniqueIDKey()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ return false ; namespace UE::Interchange { struct FBaseNodeStaticData { const FAttributeKey&)",
    "insertText": "UniqueIDKey()"
  },
  {
    "label": "DisplayLabelKey()",
    "kind": "Method",
    "detail": "Function (const FAttributeKey&)",
    "insertText": "DisplayLabelKey()"
  },
  {
    "label": "ParentIDKey()",
    "kind": "Method",
    "detail": "Function (const FAttributeKey&)",
    "insertText": "ParentIDKey()"
  },
  {
    "label": "IsEnabledKey()",
    "kind": "Method",
    "detail": "Function (const FAttributeKey&)",
    "insertText": "IsEnabledKey()"
  },
  {
    "label": "TargetAssetIDsKey()",
    "kind": "Method",
    "detail": "Function (const FAttributeKey&)",
    "insertText": "TargetAssetIDsKey()"
  },
  {
    "label": "ClassTypeAttributeKey()",
    "kind": "Method",
    "detail": "Function (const FAttributeKey&)",
    "insertText": "ClassTypeAttributeKey()"
  },
  {
    "label": "AssetNameKey()",
    "kind": "Method",
    "detail": "Function (const FAttributeKey&)",
    "insertText": "AssetNameKey()"
  },
  {
    "label": "NodeContainerTypeKey()",
    "kind": "Method",
    "detail": "Function (const FAttributeKey&)",
    "insertText": "NodeContainerTypeKey()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ; })",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (None,Preview } ;)",
    "insertText": "UCLASS(BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: static constexpr const TCHAR* HierarchySeparator = TEXT(\"\\\\\")"
  },
  {
    "label": "UInterchangeBaseNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UInterchangeBaseNode()"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "GetIconName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetIconName()"
  },
  {
    "label": "GetKeyDisplayName()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FString)",
    "insertText": "GetKeyDisplayName(const UE::Interchange::FAttributeKey& NodeAttributeKey)"
  },
  {
    "label": "ShouldHideAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldHideAttribute(const UE::Interchange::FAttributeKey& NodeAttributeKey)"
  },
  {
    "label": "GetAttributeCategory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAttributeCategory(const UE::Interchange::FAttributeKey& NodeAttributeKey)"
  },
  {
    "label": "RegisterAttribute()",
    "kind": "Method",
    "detail": "Function (# endif template<T> UE::Interchange::FAttributeStorage::TAttributeHandle<T>)",
    "insertText": "RegisterAttribute(const UE::Interchange::FAttributeKey& NodeAttributeKey, const T& Value)"
  },
  {
    "label": "RegisterAttribute()",
    "kind": "Method",
    "detail": "Function (const UE::Interchange::EAttributeStorageResult Result = Attributes ->)",
    "insertText": "RegisterAttribute(NodeAttributeKey, Value)"
  },
  {
    "label": "LogAttributeStorageErrors()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LogAttributeStorageErrors(Result, TEXT(\"RegisterAttribute\"), NodeAttributeKey)"
  },
  {
    "label": "HasAttribute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAttribute(const UE::Interchange::FAttributeKey& NodeAttributeKey)"
  },
  {
    "label": "GetAttributeType()",
    "kind": "Method",
    "detail": "Function (UE::Interchange::EAttributeTypes)",
    "insertText": "GetAttributeType(const UE::Interchange::FAttributeKey& NodeAttributeKey)"
  },
  {
    "label": "GetAttributeHandle()",
    "kind": "Method",
    "detail": "Function (template<T> UE::Interchange::FAttributeStorage::TAttributeHandle<T>)",
    "insertText": "GetAttributeHandle(const UE::Interchange::FAttributeKey& NodeAttributeKey)"
  },
  {
    "label": "GetAttributeKeys()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAttributeKeys(TArray<UE::Interchange::FAttributeKey>& AttributeKeys)"
  },
  {
    "label": "GetAttributeChecked()",
    "kind": "Method",
    "detail": "Function (template<AttributeType> AttributeType)",
    "insertText": "GetAttributeChecked(const FString& NodeAttributeKey)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (AttributeType Value =)",
    "insertText": "AttributeType()"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (UE::Interchange::FAttributeStorage::TAttributeHandle<AttributeType> Handle = GetAttributeHandle<)",
    "insertText": "AttributeType(UE::Interchange::FAttributeKey(NodeAttributeKey))"
  },
  {
    "label": "INTERCHANGE_BASE_NODE_GET_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERCHANGE_BASE_NODE_GET_ATTRIBUTE(AttributeType)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} template<AttributeType> bool)",
    "insertText": "SetAttribute(const FString& NodeAttributeKey, const AttributeType& Value)"
  },
  {
    "label": "INTERCHANGE_BASE_NODE_ADD_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERCHANGE_BASE_NODE_ADD_ATTRIBUTE(AttributeType)"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetHash()"
  },
  {
    "label": "InvalidNodeUid()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "InvalidNodeUid()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "CompareNodeStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompareNodeStorage(const UInterchangeBaseNode* NodeA, const UInterchangeBaseNode* NodeB, TArray<UE::Interchange::FAttributeKey>& RemovedAttributes, TArray<UE::Interchange::FAttributeKey>& AddedAttributes, TArray<UE::Interchange::FAttributeKey>& ModifiedAttributes)"
  },
  {
    "label": "CopyStorageAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyStorageAttributes(const UInterchangeBaseNode* SourceNode, UInterchangeBaseNode* DestinationNode, TArray<UE::Interchange::FAttributeKey>& AttributeKeys)"
  },
  {
    "label": "CopyStorageAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyStorageAttributes(const UInterchangeBaseNode* SourceNode, UE::Interchange::FAttributeStorage& DestinationStorage, TArray<UE::Interchange::FAttributeKey>& AttributeKeys)"
  },
  {
    "label": "CopyStorageAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyStorageAttributes(const UE::Interchange::FAttributeStorage& SourceStorage, UInterchangeBaseNode* DestinationNode, TArray<UE::Interchange::FAttributeKey>& AttributeKeys)"
  },
  {
    "label": "CopyStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyStorage(const UInterchangeBaseNode* SourceNode, UInterchangeBaseNode* DestinationNode)"
  },
  {
    "label": "AppendAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAssetRegistryTags(FAssetRegistryTagsContext Context)"
  }
]