[
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "FBatchedElements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBatchedElements"
  },
  {
    "label": "FWorldPartitionCanvasItems",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionCanvasItems"
  },
  {
    "label": "FWorldPartitionCanvasMultiLineTextItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionCanvasMultiLineTextItem"
  },
  {
    "label": "FWorldPartitionLineCanvasItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionLineCanvasItem"
  },
  {
    "label": "FWorldPartitionCanvasBoxItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionCanvasBoxItem"
  },
  {
    "label": "FWorldPartitionDraw2DCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionDraw2DCanvas"
  },
  {
    "label": "FWorldPartitionDraw2DContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionDraw2DContext"
  },
  {
    "label": "WorldToScreenFunc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorldToScreenFunc"
  },
  {
    "label": "FWorldPartitionCanvasMultiLineTextItem()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class UCanvas ; class FBatchedElements ; class FWorldPartitionCanvasItems ; using FWorldPartitionCanvasText = TPair<FString,FLinearColor> ; using FWorldPartitionCanvasMultiLineText = TArray<FWorldPartitionCanvasText> ; class FWorldPartitionCanvasMultiLineTextItem { public :)",
    "insertText": "FWorldPartitionCanvasMultiLineTextItem(const FVector2D& InPosition, const FWorldPartitionCanvasMultiLineText& InMultiLineText) : Position(InPosition) , MultiLineText(InMultiLineText)"
  },
  {
    "label": "FWorldPartitionLineCanvasItem()",
    "kind": "Method",
    "detail": "Function (} FVector2D Position ; FWorldPartitionCanvasMultiLineText MultiLineText ; } ; class FWorldPartitionLineCanvasItem { public :)",
    "insertText": "FWorldPartitionLineCanvasItem(const FVector2D& InStart, const FVector2D& InEnd, const FLinearColor& InColor = FLinearColor::White, float InThickness = 1) : Color(InColor) , Start(InStart, 0) , End(InEnd, 0) , Thickness(InThickness)"
  },
  {
    "label": "FWorldPartitionCanvasBoxItem()",
    "kind": "Method",
    "detail": "Function (} FLinearColor Color ; FVector Start ; FVector End ; float Thickness ; } ; class FWorldPartitionCanvasBoxItem { public :)",
    "insertText": "FWorldPartitionCanvasBoxItem(const FVector2D& InPointA, const FVector2D& InPointB, const FVector2D& InPointC, const FVector2D& InPointD, const FLinearColor& InColor = FLinearColor::White) : Color(InColor)"
  },
  {
    "label": "FWorldPartitionDraw2DCanvas()",
    "kind": "Method",
    "detail": "Function (Points [ 0 ] = InPointA ; Points [ 1 ] = InPointB ; Points [ 2 ] = InPointC ; Points [ 3 ] = InPointD ; } ; FLinearColor Color ; FVector2D Points [ 4 ] ; } ; class FWorldPartitionDraw2DCanvas { public :)",
    "insertText": "FWorldPartitionDraw2DCanvas(UCanvas* InCanvas)"
  },
  {
    "label": "PrepareDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareDraw(int32 InLineCount, int32 InBoxCount)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const FWorldPartitionCanvasItems& Items)"
  },
  {
    "label": "FWorldPartitionCanvasItems()",
    "kind": "Method",
    "detail": "Function (private : UCanvas* Canvas ; FBatchedElements* CanvasLineBatchedElements ; FBatchedElements* CanvasTriangleBatchedElements ; } ; class FWorldPartitionCanvasItems { public :)",
    "insertText": "FWorldPartitionCanvasItems()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Lines .)",
    "insertText": "Reserve(1024)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (MultiLineTexts .)",
    "insertText": "Reserve(128)"
  },
  {
    "label": "AddLine()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddLine(FWorldPartitionLineCanvasItem& InLine)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Lines .)",
    "insertText": "Add(MoveTemp(InLine))"
  },
  {
    "label": "AddBox()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddBox(FWorldPartitionCanvasBoxItem& InBox)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Boxes .)",
    "insertText": "Add(MoveTemp(InBox))"
  },
  {
    "label": "AddText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddText(FWorldPartitionCanvasMultiLineTextItem& InMultiLineText)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MultiLineTexts .)",
    "insertText": "Add(MoveTemp(InMultiLineText))"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetLineCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetLineCount()"
  },
  {
    "label": "GetBoxCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetBoxCount()"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Draw(FWorldPartitionDraw2DCanvas& InCanvas)"
  },
  {
    "label": "FWorldPartitionDraw2DContext()",
    "kind": "Method",
    "detail": "Function (private : TArray<FWorldPartitionLineCanvasItem> Lines ; TArray<FWorldPartitionCanvasBoxItem> Boxes ; TArray<FWorldPartitionCanvasMultiLineTextItem> MultiLineTexts ; class FWorldPartitionDraw2DCanvas ; } ; class FWorldPartitionDraw2DContext { public :)",
    "insertText": "FWorldPartitionDraw2DContext()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FBox2D(ForceInit), FBox2D(ForceInit))"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(const FBox2D& InCanvasRegion, const FBox2D& InWorldRegion)"
  },
  {
    "label": "FBox2D()",
    "kind": "Method",
    "detail": "Function (CanvasRegion = InCanvasRegion ; WorldRegion = InWorldRegion ; bDrawGridBounds = false ; bDrawGridAxis = false ; bIsDetailedMode = false ; UsedCanvasBounds =)",
    "insertText": "FBox2D(ForceInit)"
  },
  {
    "label": "SetIsDetailedMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsDetailedMode(bool bValue)"
  },
  {
    "label": "IsDetailedMode()",
    "kind": "Method",
    "detail": "Function (bIsDetailedMode = bValue ; } bool)",
    "insertText": "IsDetailedMode()"
  },
  {
    "label": "GetDrawGridBounds()",
    "kind": "Method",
    "detail": "Function (bDrawGridBounds = bValue ; } bool)",
    "insertText": "GetDrawGridBounds()"
  },
  {
    "label": "GetDrawGridAxis()",
    "kind": "Method",
    "detail": "Function (bDrawGridAxis = bValue ; } bool)",
    "insertText": "GetDrawGridAxis()"
  },
  {
    "label": "GetUsedCanvasBounds()",
    "kind": "Method",
    "detail": "Function (UsedCanvasBounds = InUsedCanvasBounds ; } const FBox2D&)",
    "insertText": "GetUsedCanvasBounds()"
  },
  {
    "label": "GetDesiredWorldBounds()",
    "kind": "Method",
    "detail": "Function (DesiredWorldBounds = InDesiredWorldBounds ; } const FBox2D&)",
    "insertText": "GetDesiredWorldBounds()"
  },
  {
    "label": "PushDrawSegment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PushDrawSegment(const FBox2D& InBounds, const FVector2D& A, const FVector2D& B, const FLinearColor& InColor, float InLineThickness)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<FVector2D> Intersections ;)",
    "insertText": "if(BoxSegmentIntersect(InBounds, A, B, Intersections))"
  },
  {
    "label": "Line()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionLineCanvasItem)",
    "insertText": "Line(Intersections[0], Intersections[1], InColor, InLineThickness)"
  },
  {
    "label": "AddLine()",
    "kind": "Method",
    "detail": "Function (CanvasItems .)",
    "insertText": "AddLine(Line)"
  },
  {
    "label": "PushDrawSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDrawSegment(InBounds, A, B, InColor, InLineThickness)"
  },
  {
    "label": "PushDrawSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDrawSegment(InBounds, B, C, InColor, InLineThickness)"
  },
  {
    "label": "PushDrawSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDrawSegment(InBounds, C, D, InColor, InLineThickness)"
  },
  {
    "label": "PushDrawSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDrawSegment(InBounds, A, D, InColor, InLineThickness)"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (const FBox2D ClipBox = InBounds .)",
    "insertText": "Overlap(FBox2D({ A, B, C, D}))"
  },
  {
    "label": "Box()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionCanvasBoxItem)",
    "insertText": "Box(ClipBox.Min, FVector2D(ClipBox.Max.X, ClipBox.Min.Y), ClipBox.Max, FVector2D(ClipBox.Min.X, ClipBox.Max.Y), InColor)"
  },
  {
    "label": "AddBox()",
    "kind": "Method",
    "detail": "Function (CanvasItems .)",
    "insertText": "AddBox(Box)"
  },
  {
    "label": "AddText()",
    "kind": "Method",
    "detail": "Function (CanvasItems .)",
    "insertText": "AddText(InMultiLineText)"
  },
  {
    "label": "WorldToScreen()",
    "kind": "Method",
    "detail": "Function (FVector2D A =)",
    "insertText": "WorldToScreen(Min)"
  },
  {
    "label": "WorldToScreen()",
    "kind": "Method",
    "detail": "Function (FVector2D B =)",
    "insertText": "WorldToScreen(Min + FVector2D(Size.X, 0))"
  },
  {
    "label": "WorldToScreen()",
    "kind": "Method",
    "detail": "Function (FVector2D C =)",
    "insertText": "WorldToScreen(Min + Size)"
  },
  {
    "label": "WorldToScreen()",
    "kind": "Method",
    "detail": "Function (FVector2D D =)",
    "insertText": "WorldToScreen(Min + FVector2D(0, Size.Y))"
  },
  {
    "label": "PushDrawTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDrawTile(GridScreenBounds, A, B, C, D, Color)"
  },
  {
    "label": "LocalDrawBox()",
    "kind": "Method",
    "detail": "Function (} ; template<class WorldToScreenFunc> void)",
    "insertText": "LocalDrawBox(const FBox2D& GridScreenBounds, const FVector2D& Min, const FVector2D& Size, const FLinearColor& Color, float LineThickness, WorldToScreenFunc WorldToScreen)"
  },
  {
    "label": "PushDrawBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDrawBox(GridScreenBounds, A, B, C, D, Color, LineThickness)"
  },
  {
    "label": "LocalDrawSegment()",
    "kind": "Method",
    "detail": "Function (} ; template<class WorldToScreenFunc> void)",
    "insertText": "LocalDrawSegment(const FBox2D& GridScreenBounds, const FVector2D& Start, const FVector2D& End, const FLinearColor& Color, float LineThickness, WorldToScreenFunc WorldToScreen)"
  },
  {
    "label": "WorldToScreen()",
    "kind": "Method",
    "detail": "Function (FVector2D A =)",
    "insertText": "WorldToScreen(Start)"
  },
  {
    "label": "WorldToScreen()",
    "kind": "Method",
    "detail": "Function (FVector2D B =)",
    "insertText": "WorldToScreen(End)"
  },
  {
    "label": "PushDrawSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDrawSegment(GridScreenBounds, A, B, Color, LineThickness)"
  },
  {
    "label": "GetCanvasItems()",
    "kind": "Method",
    "detail": "Function (} ; const FWorldPartitionCanvasItems&)",
    "insertText": "GetCanvasItems()"
  }
]