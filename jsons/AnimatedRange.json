[
  {
    "label": "FAnimatedRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimatedRange"
  },
  {
    "label": "FAnimatedRange()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Range . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" struct FAnimatedRange : public TRange<double> {)",
    "insertText": "FAnimatedRange() : TRange()"
  },
  {
    "label": "FAnimatedRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAnimatedRange(double LowerBound, double UpperBound) : TRange(LowerBound, UpperBound)"
  },
  {
    "label": "FAnimatedRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAnimatedRange(const TRange<double>& InRange) : TRange(InRange)"
  },
  {
    "label": "WrapAttribute()",
    "kind": "Method",
    "detail": "Function (} TAttribute<TRange<double>>)",
    "insertText": "WrapAttribute(const TAttribute<FAnimatedRange>& InAttribute)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (typedef TAttribute<TRange<double>> Attr ; return)",
    "insertText": "Create(Attr::FGetter::CreateLambda([=]() { return InAttribute.Get(); }))"
  },
  {
    "label": "WrapAttribute()",
    "kind": "Method",
    "detail": "Function (} TAttribute<FAnimatedRange>)",
    "insertText": "WrapAttribute(const TAttribute<TRange<double>>& InAttribute)"
  },
  {
    "label": "GetAnimationTarget()",
    "kind": "Method",
    "detail": "Function (} const TRange<double>&)",
    "insertText": "GetAnimationTarget()"
  }
]