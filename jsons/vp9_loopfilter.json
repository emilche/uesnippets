[
  {
    "label": "lf_path",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "lf_path"
  },
  {
    "label": "loopfilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "loopfilter"
  },
  {
    "label": "VP9Common",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP9Common"
  },
  {
    "label": "macroblockd",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "macroblockd"
  },
  {
    "label": "VP9LfSyncData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP9LfSyncData"
  },
  {
    "label": "macroblockd_plane",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "macroblockd_plane"
  },
  {
    "label": "LoopFilterWorkerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LoopFilterWorkerData"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_COMMON_VP9_LOOPFILTER_H_ # define VPX_VP9_COMMON_VP9_LOOPFILTER_H_ # include \" vpx_ports / mem . h \" # include \" . / vpx_config . h \" # include \" vp9 / common / vp9_blockd . h \" # include \" vp9 / common / vp9_seg_common . h \" # ifdef __cplusplus \" C \" { # endif # define MAX_LOOP_FILTER 6 3 # define MAX_SHARPNESS 7 # define SIMD_WIDTH 1 6 # define MAX_REF_LF_DELTAS 4 # define MAX_MODE_LF_DELTAS 2 enum lf_path { LF_PATH_420,LF_PATH_444,LF_PATH_SLOW,} ; typedef struct {)",
    "insertText": "DECLARE_ALIGNED(SIMD_WIDTH, uint8_t, mblim[SIMD_WIDTH])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(SIMD_WIDTH, uint8_t, lim[SIMD_WIDTH])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(SIMD_WIDTH, uint8_t, hev_thr[SIMD_WIDTH])"
  },
  {
    "label": "vp9_setup_mask()",
    "kind": "Method",
    "detail": "Function (} loop_filter_thresh ; typedef struct { loop_filter_thresh lfthr [ MAX_LOOP_FILTER + 1 ] ; uint8_t lvl [ MAX_SEGMENTS ] [ MAX_REF_FRAMES ] [ MAX_MODE_LF_DELTAS ] ; } loop_filter_info_n ; typedef struct { uint64_t left_y [ TX_SIZES ] ; uint64_t above_y [ TX_SIZES ] ; uint64_t int_4x4_y ; uint16_t left_uv [ TX_SIZES ] ; uint16_t above_uv [ TX_SIZES ] ; uint16_t int_4x4_uv ; uint8_t lfl_y [ 6 4 ] ; } LOOP_FILTER_MASK ; struct loopfilter { int filter_level ; int last_filt_level ; int sharpness_level ; int last_sharpness_level ; uint8_t mode_ref_delta_enabled ; uint8_t mode_ref_delta_update ; signed char ref_deltas [ MAX_REF_LF_DELTAS ] ; signed char last_ref_deltas [ MAX_REF_LF_DELTAS ] ; signed char mode_deltas [ MAX_MODE_LF_DELTAS ] ; signed char last_mode_deltas [ MAX_MODE_LF_DELTAS ] ; LOOP_FILTER_MASK* lfm ; int lfm_stride ; } ; struct VP9Common ; struct macroblockd ; struct VP9LfSyncData ; void)",
    "insertText": "vp9_setup_mask(struct VP9Common *const cm, const int mi_row, const int mi_col, MODE_INFO **mi8x8, const int mode_info_stride, LOOP_FILTER_MASK *lfm)"
  },
  {
    "label": "vp9_filter_block_plane_ss00()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_filter_block_plane_ss00(struct VP9Common *const cm, struct macroblockd_plane *const plane, int mi_row, LOOP_FILTER_MASK *lfm)"
  },
  {
    "label": "vp9_filter_block_plane_ss11()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_filter_block_plane_ss11(struct VP9Common *const cm, struct macroblockd_plane *const plane, int mi_row, LOOP_FILTER_MASK *lfm)"
  },
  {
    "label": "vp9_filter_block_plane_non420()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_filter_block_plane_non420(struct VP9Common *cm, struct macroblockd_plane *plane, MODE_INFO **mi_8x8, int mi_row, int mi_col)"
  },
  {
    "label": "vp9_loop_filter_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_loop_filter_init(struct VP9Common *cm)"
  },
  {
    "label": "vp9_loop_filter_frame_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_loop_filter_frame_init(struct VP9Common *cm, int default_filt_lvl)"
  },
  {
    "label": "vp9_loop_filter_frame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_loop_filter_frame(YV12_BUFFER_CONFIG *frame, struct VP9Common *cm, struct macroblockd *xd, int frame_filter_level, int y_only, int partial_frame)"
  },
  {
    "label": "get_lfm()",
    "kind": "Method",
    "detail": "Function (LOOP_FILTER_MASK*)",
    "insertText": "get_lfm(const struct loopfilter *lf, const int mi_row, const int mi_col)"
  },
  {
    "label": "vp9_build_mask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "vp9_build_mask(struct VP9Common *cm, const MODE_INFO *mi, int mi_row, int mi_col, int bw, int bh)"
  },
  {
    "label": "vp9_adjust_mask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_adjust_mask(struct VP9Common *const cm, const int mi_row, const int mi_col, LOOP_FILTER_MASK *lfm)"
  },
  {
    "label": "vp9_build_mask_frame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_build_mask_frame(struct VP9Common *cm, int frame_filter_level, int partial_frame)"
  },
  {
    "label": "vp9_reset_lfm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_reset_lfm(struct VP9Common *const cm)"
  },
  {
    "label": "vp9_loop_filter_data_reset()",
    "kind": "Method",
    "detail": "Function (typedef struct LoopFilterWorkerData { YV12_BUFFER_CONFIG* frame_buffer ; struct VP9Common* cm ; struct macroblockd_plane planes [ MAX_MB_PLANE ] ; int start ; int stop ; int y_only ; } LFWorkerData ; void)",
    "insertText": "vp9_loop_filter_data_reset(LFWorkerData *lf_data, YV12_BUFFER_CONFIG *frame_buffer, struct VP9Common *cm, const struct macroblockd_plane planes[MAX_MB_PLANE])"
  },
  {
    "label": "vp9_loop_filter_worker()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_loop_filter_worker(void *arg1, void *unused)"
  }
]