[
  {
    "label": "TOrientedBox3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOrientedBox3"
  },
  {
    "label": "TOrientedBox2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOrientedBox2"
  },
  {
    "label": "TOrientedBox3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" BoxTypes . h \" # include \" FrameTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> struct TOrientedBox3 { TFrame3<RealType> Frame ; TVector<RealType> Extents ;)",
    "insertText": "TOrientedBox3() : Extents(1,1,1)"
  },
  {
    "label": "TOrientedBox3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TOrientedBox3(const TVector<RealType>& Origin, const TVector<RealType> & ExtentsIn) : Frame(Origin), Extents(ExtentsIn)"
  },
  {
    "label": "TOrientedBox3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TOrientedBox3(const TFrame3<RealType>& FrameIn, const TVector<RealType> & ExtentsIn) : Frame(FrameIn), Extents(ExtentsIn)"
  },
  {
    "label": "TOrientedBox3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TOrientedBox3(const TAxisAlignedBox3<RealType>& AxisBox) : Frame(AxisBox.Center()), Extents((RealType)0.5 * AxisBox.Diagonal())"
  },
  {
    "label": "UnitZeroCentered()",
    "kind": "Method",
    "detail": "Function (} TOrientedBox3<RealType>)",
    "insertText": "UnitZeroCentered()"
  },
  {
    "label": "UnitPositive()",
    "kind": "Method",
    "detail": "Function (} TOrientedBox3<RealType>)",
    "insertText": "UnitPositive()"
  },
  {
    "label": "Center()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "Center()"
  },
  {
    "label": "AxisY()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "AxisY()"
  },
  {
    "label": "AxisZ()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "AxisZ()"
  },
  {
    "label": "GetAxis()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "GetAxis(int AxisIndex)"
  },
  {
    "label": "Diagonal()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "Diagonal()"
  },
  {
    "label": "Volume()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "Volume()"
  },
  {
    "label": "SurfaceArea()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "SurfaceArea()"
  },
  {
    "label": "ClampExtents()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "ClampExtents(FMath::Max(0, Extents.X), FMath::Max(0, Extents.Y), FMath::Max(0, Extents.Z))"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const TVector<RealType>& Point)"
  },
  {
    "label": "ToFramePoint()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> InFramePoint = Frame .)",
    "insertText": "ToFramePoint(Point)"
  },
  {
    "label": "GetCorner()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "GetCorner(int Index)"
  },
  {
    "label": "dx()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "dx(((Index & 1) != 0) ^ ((Index & 2) != 0)) ? (Extents.X) : (-Extents.X)"
  },
  {
    "label": "dy()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "dy((Index / 2) % 2 == 0) ? (-Extents.Y) : (Extents.Y)"
  },
  {
    "label": "dz()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "dz(Index < 4) ? (-Extents.Z) : (Extents.Z)"
  },
  {
    "label": "EnumerateCorners()",
    "kind": "Method",
    "detail": "Function (} template<PointFuncType> void)",
    "insertText": "EnumerateCorners(PointFuncType CornerPointFunc)"
  },
  {
    "label": "ToRotationMatrix()",
    "kind": "Method",
    "detail": "Function (TMatrix3<RealType> RotMatrix = Frame . Rotation .)",
    "insertText": "ToRotationMatrix()"
  },
  {
    "label": "CornerPointFunc()",
    "kind": "Method",
    "detail": "Function (RealType X = Extents . X,Y = Extents . Y,Z = Extents . Z ;)",
    "insertText": "CornerPointFunc(RotMatrix*TVector<RealType>(-X,-Y,-Z) + Frame.Origin)"
  },
  {
    "label": "CornerPointFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CornerPointFunc(RotMatrix*TVector<RealType>( X,-Y,-Z) + Frame.Origin)"
  },
  {
    "label": "CornerPointFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CornerPointFunc(RotMatrix*TVector<RealType>( X, Y,-Z) + Frame.Origin)"
  },
  {
    "label": "CornerPointFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CornerPointFunc(RotMatrix*TVector<RealType>(-X, Y,-Z) + Frame.Origin)"
  },
  {
    "label": "CornerPointFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CornerPointFunc(RotMatrix*TVector<RealType>(-X,-Y, Z) + Frame.Origin)"
  },
  {
    "label": "CornerPointFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CornerPointFunc(RotMatrix*TVector<RealType>( X,-Y, Z) + Frame.Origin)"
  },
  {
    "label": "CornerPointFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CornerPointFunc(RotMatrix*TVector<RealType>( X, Y, Z) + Frame.Origin)"
  },
  {
    "label": "CornerPointFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CornerPointFunc(RotMatrix*TVector<RealType>(-X, Y, Z) + Frame.Origin)"
  },
  {
    "label": "TestCorners()",
    "kind": "Method",
    "detail": "Function (} template<PointPredicateType> bool)",
    "insertText": "TestCorners(PointPredicateType CornerPointPredicate)"
  },
  {
    "label": "CornerPointPredicate()",
    "kind": "Method",
    "detail": "Function (RealType X = Extents . X,Y = Extents . Y,Z = Extents . Z ; return)",
    "insertText": "CornerPointPredicate(RotMatrix * TVector<RealType>(-X, -Y, -Z) + Frame.Origin) && CornerPointPredicate(RotMatrix * TVector<RealType>(X, -Y, -Z) + Frame.Origin) && CornerPointPredicate(RotMatrix * TVector<RealType>(X, Y, -Z) + Frame.Origin) && CornerPointPredicate(RotMatrix * TVector<RealType>(-X, Y, -Z) + Frame.Origin) && CornerPointPredicate(RotMatrix * TVector<RealType>(-X, -Y, Z) + Frame.Origin) && CornerPointPredicate(RotMatrix * TVector<RealType>(X, -Y, Z) + Frame.Origin) && CornerPointPredicate(RotMatrix * TVector<RealType>(X, Y, Z) + Frame.Origin) && CornerPointPredicate(RotMatrix * TVector<RealType>(-X, Y, Z) + Frame.Origin)"
  },
  {
    "label": "GetCornerSide()",
    "kind": "Method",
    "detail": "Function (} FIndex3i)",
    "insertText": "GetCornerSide(int Index)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "DistanceSquared(TVector<RealType> Point)"
  },
  {
    "label": "GetAbs()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> BeyondExtents = Local .)",
    "insertText": "GetAbs()"
  },
  {
    "label": "ClampedBeyond()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "ClampedBeyond(FMath::Max((RealType)0, BeyondExtents.X), FMath::Max((RealType)0, BeyondExtents.Y), FMath::Max((RealType)0, BeyondExtents.Z))"
  },
  {
    "label": "SignedDistance()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "SignedDistance(TVector<RealType> Point)"
  },
  {
    "label": "GetMax()",
    "kind": "Method",
    "detail": "Function (RealType MaxComponent = VsExtents .)",
    "insertText": "GetMax()"
  },
  {
    "label": "ClosestPoint()",
    "kind": "Method",
    "detail": "Function (} } TVector<RealType>)",
    "insertText": "ClosestPoint(const TVector<RealType>& Point)"
  },
  {
    "label": "Local()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> FromOrigin = Point - Frame . Origin ; TVector<RealType>)",
    "insertText": "Local(RotMatrix.TransformByTranspose(FromOrigin))"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Local . X =)",
    "insertText": "Clamp(Local.X, -Extents.X, Extents.X)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Local . Y =)",
    "insertText": "Clamp(Local.Y, -Extents.Y, Extents.Y)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Local . Z =)",
    "insertText": "Clamp(Local.Z, -Extents.Z, Extents.Z)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (TQuaternion<RealType> RotInv = Frame . Rotation .)",
    "insertText": "Inverse()"
  },
  {
    "label": "InverseMultiply()",
    "kind": "Method",
    "detail": "Function (TQuaternion<RealType> RotInvOtherRot = RotInv* Other . Frame . Rotation ; TVector<RealType> O2mO1 = Other . Frame . Origin - Frame . Origin ; TVector<RealType> TranslateIntoFrame1 = RotInv* O2mO1 ; TVector<RealType> TranslateIntoFrame2 = Other . Frame . Rotation .)",
    "insertText": "InverseMultiply(-O2mO1)"
  },
  {
    "label": "LocalBox1()",
    "kind": "Method",
    "detail": "Function (TAxisAlignedBox3<RealType>)",
    "insertText": "LocalBox1(-Extents, Extents)"
  },
  {
    "label": "LocalBox2()",
    "kind": "Method",
    "detail": "Function (TAxisAlignedBox3<RealType>)",
    "insertText": "LocalBox2(-Other.Extents, Other.Extents)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> Corners1 [ 8 ] { LocalBox1 . Min,LocalBox1 . Max,TVector<)",
    "insertText": "RealType(LocalBox1.Min.X, LocalBox1.Min.Y, LocalBox1.Max.Z), TVector<RealType>(LocalBox1.Min.X, LocalBox1.Max.Y, LocalBox1.Min.Z), TVector<RealType>(LocalBox1.Max.X, LocalBox1.Min.Y, LocalBox1.Min.Z), TVector<RealType>(LocalBox1.Min.X, LocalBox1.Max.Y, LocalBox1.Max.Z), TVector<RealType>(LocalBox1.Max.X, LocalBox1.Min.Y, LocalBox1.Max.Z), TVector<RealType>(LocalBox1.Max.X, LocalBox1.Max.Y, LocalBox1.Min.Z)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> Corners2 [ 8 ] { LocalBox2 . Min,LocalBox2 . Max,TVector<)",
    "insertText": "RealType(LocalBox2.Min.X, LocalBox2.Min.Y, LocalBox2.Max.Z), TVector<RealType>(LocalBox2.Min.X, LocalBox2.Max.Y, LocalBox2.Min.Z), TVector<RealType>(LocalBox2.Max.X, LocalBox2.Min.Y, LocalBox2.Min.Z), TVector<RealType>(LocalBox2.Min.X, LocalBox2.Max.Y, LocalBox2.Max.Z), TVector<RealType>(LocalBox2.Max.X, LocalBox2.Min.Y, LocalBox2.Max.Z), TVector<RealType>(LocalBox2.Max.X, LocalBox2.Max.Y, LocalBox2.Min.Z)"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (LocalBox1 .)",
    "insertText": "Contain(TranslateIntoFrame1 + RotInvOtherRot * Corners2[Idx])"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (LocalBox2 .)",
    "insertText": "Contain(TranslateIntoFrame2 + RotInvOtherRot.InverseMultiply(Corners1[Idx]))"
  },
  {
    "label": "Volume()",
    "kind": "Method",
    "detail": "Function (} RealType CandidateVolumes [ 3 ] { LocalBox1 .)",
    "insertText": "Volume(), LocalBox2.Volume()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> Axes1 [ 3 ],Axes2 [ 3 ],FoundAxes [ 3 ] ; TAxisAlignedBox3<RealType> FoundBounds ;)",
    "insertText": "if(!bOnlyConsiderExistingAxes)"
  },
  {
    "label": "GetAxes()",
    "kind": "Method",
    "detail": "Function (Frame . Rotation .)",
    "insertText": "GetAxes(Axes1[0], Axes1[1], Axes1[2])"
  },
  {
    "label": "GetAxes()",
    "kind": "Method",
    "detail": "Function (Other . Frame . Rotation .)",
    "insertText": "GetAxes(Axes2[0], Axes2[1], Axes2[2])"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (RealType MaxExtentsSizeSq =)",
    "insertText": "Max(Extents.SizeSquared(), Other.Extents.SizeSquared())"
  },
  {
    "label": "SizeSquared()",
    "kind": "Method",
    "detail": "Function (RealType CenterDiffSizeSq = O2mO1 .)",
    "insertText": "SizeSquared()"
  },
  {
    "label": "GetSafeNormal()",
    "kind": "Method",
    "detail": "Function (FoundAxes [ 0 ] = O2mO1 .)",
    "insertText": "GetSafeNormal(0.0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> MostPerpendicular ; RealType SmallestDot = TMathUtil<RealType>::MaxReal ;)",
    "insertText": "for(int32 AxisIdx = 0; AxisIdx < 3; ++AxisIdx)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (RealType Dot1 =)",
    "insertText": "Abs(Axes1[AxisIdx].Dot(FoundAxes[0]))"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (RealType Dot2 =)",
    "insertText": "Abs(Axes2[AxisIdx].Dot(FoundAxes[0]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SmallestDot = Dot1 ; MostPerpendicular = Axes1 [ AxisIdx ] ; } } else)",
    "insertText": "if(Dot2 < SmallestDot)"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (SmallestDot = Dot2 ; MostPerpendicular = Axes2 [ AxisIdx ] ; } } FoundAxes [ 2 ] = FoundAxes [ 0 ] .)",
    "insertText": "Cross(MostPerpendicular).GetSafeNormal(0)"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (FoundAxes [ 1 ] = FoundAxes [ 2 ] .)",
    "insertText": "Cross(FoundAxes[0])"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (} else { int32 Axis1X_IdxInAxis2 = 0 ; int32 Axis1Y_IdxInAxis2 = 0 ; RealType BestXAlignment =)",
    "insertText": "Abs(Axes1[0].Dot(Axes2[0]))"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (RealType BestYAlignment =)",
    "insertText": "Abs(Axes1[1].Dot(Axes2[0]))"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (RealType XAlignment =)",
    "insertText": "Abs(Axes1[0].Dot(Axes2[Axis2Idx]))"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (RealType YAlignment =)",
    "insertText": "Abs(Axes1[1].Dot(Axes2[Axis2Idx]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Axis1X_IdxInAxis2 = Axis2Idx ; BestXAlignment = XAlignment ; })",
    "insertText": "if(YAlignment > BestYAlignment)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Axis1Y_IdxInAxis2 = Axis2Idx ; BestYAlignment = YAlignment ; } })",
    "insertText": "if(Axis1X_IdxInAxis2 == Axis1Y_IdxInAxis2)"
  },
  {
    "label": "Axis1Y_IdxInAxis2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Axis1Y_IdxInAxis2(1 + Axis1Y_IdxInAxis2)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (} RealType SignX = Axes1 [ 0 ] .)",
    "insertText": "Dot(Axes2[Axis1X_IdxInAxis2])"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType SignY = Axes1 [ 1 ] .)",
    "insertText": "Dot(Axes2[Axis1Y_IdxInAxis2])"
  },
  {
    "label": "FoundAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FoundAxes(Axes1[0] + SignX * Axes2[Axis1X_IdxInAxis2]).GetSafeNormal()"
  },
  {
    "label": "FoundAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FoundAxes(Axes1[1] + SignY * Axes2[Axis1Y_IdxInAxis2])"
  },
  {
    "label": "FoundAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FoundAxes(FoundAxes[0].Cross(FoundAxes[1])).GetSafeNormal()"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (FoundAxes [ 1 ] = FoundAxes [ 2 ] .)",
    "insertText": "Cross(FoundAxes[0]).GetSafeNormal()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 CornerIdx = 0; CornerIdx < 8; ++CornerIdx)"
  },
  {
    "label": "FromFramePoint()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> WorldCorner1 = Frame .)",
    "insertText": "FromFramePoint(Corners1[CornerIdx])"
  },
  {
    "label": "AxesCorner1()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "AxesCorner1(WorldCorner1.Dot(FoundAxes[0]), WorldCorner1.Dot(FoundAxes[1]), WorldCorner1.Dot(FoundAxes[2]))"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (FoundBounds .)",
    "insertText": "Contain(AxesCorner1)"
  },
  {
    "label": "FromFramePoint()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> WorldCorner2 = Other . Frame .)",
    "insertText": "FromFramePoint(Corners2[CornerIdx])"
  },
  {
    "label": "AxesCorner2()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "AxesCorner2(WorldCorner2.Dot(FoundAxes[0]), WorldCorner2.Dot(FoundAxes[1]), WorldCorner2.Dot(FoundAxes[2]))"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (FoundBounds .)",
    "insertText": "Contain(AxesCorner2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} int BestIdx = 0 ; RealType BestVolume = CandidateVolumes [ 0 ] ; int AxesToConsider = bOnlyConsiderExistingAxes ? 2 : 3 ;)",
    "insertText": "for(int Idx = 1; Idx < AxesToConsider; ++Idx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BestIdx = Idx ; BestVolume = CandidateVolumes [ Idx ] ; } } TOrientedBox3<RealType> Result ;)",
    "insertText": "if(BestIdx == 2)"
  },
  {
    "label": "SetFromRotationMatrix()",
    "kind": "Method",
    "detail": "Function (Result . Frame . Rotation .)",
    "insertText": "SetFromRotationMatrix(TMatrix3<RealType>(FoundAxes[0], FoundAxes[1], FoundAxes[2], false))"
  },
  {
    "label": "Extents()",
    "kind": "Method",
    "detail": "Function (Result . Frame . Origin = FoundAxes [ 0 ]* FoundCenter . X + FoundAxes [ 1 ]* FoundCenter . Y + FoundAxes [ 2 ]* FoundCenter . Z ; Result . Extents = FoundBounds .)",
    "insertText": "Extents()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(BestIdx == 0)"
  },
  {
    "label": "FromFramePoint()",
    "kind": "Method",
    "detail": "Function (Result . Frame . Rotation = Frame . Rotation ; Result . Frame . Origin = Frame .)",
    "insertText": "FromFramePoint(LocalBox1.Center())"
  },
  {
    "label": "FromFramePoint()",
    "kind": "Method",
    "detail": "Function (} else { Result . Frame . Rotation = Other . Frame . Rotation ; Result . Frame . Origin = Other . Frame .)",
    "insertText": "FromFramePoint(LocalBox2.Center())"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (} Result . Extents + =)",
    "insertText": "FVector3d(FMathd::ZeroTolerance, FMathd::ZeroTolerance, FMathd::ZeroTolerance)"
  },
  {
    "label": "TOrientedBox2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TOrientedBox2(const TVector2<RealType>& OriginIn, const TVector2<RealType>& ExtentsIn) : Origin(OriginIn), UnitAxisX(1, 0), Extents(ExtentsIn)"
  },
  {
    "label": "TOrientedBox2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TOrientedBox2(const TVector2<RealType>& OriginIn, const TVector2<RealType>& XAxisIn, const TVector2<RealType>& ExtentsIn) : Origin(OriginIn), UnitAxisX(XAxisIn), Extents(ExtentsIn)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (UnitAxisX = TVector2<)",
    "insertText": "RealType(1, 0)"
  },
  {
    "label": "TOrientedBox2()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TOrientedBox2(const TVector2<RealType>& OriginIn, RealType AngleRad, const TVector2<RealType>& ExtentsIn) : Origin(OriginIn), UnitAxisX(FMath::Cos(AngleRad), FMath::Sin(AngleRad)), Extents(ExtentsIn)"
  },
  {
    "label": "TOrientedBox2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TOrientedBox2(const TAxisAlignedBox2<RealType>& AxisBox) : Origin(AxisBox.Center()), UnitAxisX(1,0), Extents(AxisBox.Extents())"
  },
  {
    "label": "SetAngleRadians()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAngleRadians(RealType AngleRad)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (UnitAxisX = TVector2<)",
    "insertText": "RealType(FMath::Cos(AngleRad), FMath::Sin(AngleRad))"
  },
  {
    "label": "Area()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "Area()"
  },
  {
    "label": "Perimeter()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "Perimeter()"
  },
  {
    "label": "ToLocalSpace()",
    "kind": "Method",
    "detail": "Function (} TVector2<RealType>)",
    "insertText": "ToLocalSpace(const TVector2<RealType>& Point)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType> FromOrigin = Point - Origin ; return TVector2<)",
    "insertText": "RealType(UnitAxisX.Dot(FromOrigin), AxisY().Dot(FromOrigin))"
  },
  {
    "label": "FromLocalSpace()",
    "kind": "Method",
    "detail": "Function (} TVector2<RealType>)",
    "insertText": "FromLocalSpace(const TVector2<RealType>& Point)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const TVector2<RealType>& Point)"
  },
  {
    "label": "ToLocalSpace()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType> LocalPoint =)",
    "insertText": "ToLocalSpace(Point)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (RealType DX =)",
    "insertText": "RealType(int((Index == 1) | (Index == 2)) * 2 - 1)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (RealType DY =)",
    "insertText": "RealType((Index & 2) - 1)"
  },
  {
    "label": "AxisX()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType> X =)",
    "insertText": "AxisX() * Extents.X, Y = AxisY()"
  },
  {
    "label": "CornerPointFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CornerPointFunc(Origin - X - Y)"
  },
  {
    "label": "CornerPointFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CornerPointFunc(Origin + X - Y)"
  },
  {
    "label": "CornerPointFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CornerPointFunc(Origin + X + Y)"
  },
  {
    "label": "CornerPointFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CornerPointFunc(Origin - X + Y)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "DistanceSquared(const TVector2<RealType>& Point)"
  },
  {
    "label": "ToLocalSpace()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType> BeyondExtents =)",
    "insertText": "ToLocalSpace(Point).GetAbs()"
  },
  {
    "label": "ClampedBeyond()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType>)",
    "insertText": "ClampedBeyond(FMath::Max((RealType)0, BeyondExtents.X), FMath::Max((RealType)0, BeyondExtents.Y))"
  },
  {
    "label": "ClosestPoint()",
    "kind": "Method",
    "detail": "Function (} TVector2<RealType>)",
    "insertText": "ClosestPoint(const TVector2<RealType>& Point)"
  }
]