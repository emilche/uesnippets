[
  {
    "label": "ConvertableToTraceFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConvertableToTraceFormat"
  },
  {
    "label": "SequenceManagerForTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceManagerForTest"
  },
  {
    "label": "TaskQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskQueue"
  },
  {
    "label": "TaskTimeObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskTimeObserver"
  },
  {
    "label": "TimeDomain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeDomain"
  },
  {
    "label": "TaskQueueImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskQueueImpl"
  },
  {
    "label": "DefaultWakeUpQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultWakeUpQueue"
  },
  {
    "label": "ThreadControllerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadControllerImpl"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "was",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "was"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "NativeWorkHandleImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NativeWorkHandleImpl"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "keeps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "keeps"
  },
  {
    "label": "ExecutingTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExecutingTask"
  },
  {
    "label": "MainThreadOnly",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MainThreadOnly"
  },
  {
    "label": "was",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "was"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "CreateUnbound()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SequenceManagerImpl>)",
    "insertText": "CreateUnbound(\n      SequenceManager::Settings settings)"
  },
  {
    "label": "InitializeFeatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFeatures()"
  },
  {
    "label": "ApplyNoWakeUpsForCanceledTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyNoWakeUpsForCanceledTasks()"
  },
  {
    "label": "ResetNoWakeUpsForCanceledTasksForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetNoWakeUpsForCanceledTasksForTesting()"
  },
  {
    "label": "MaybeEmitTaskDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeEmitTaskDetails(\n      perfetto::EventContext& ctx,\n      const SequencedTaskSource::SelectedTask& selected_task)"
  },
  {
    "label": "AddDestructionObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDestructionObserver(\n      CurrentThread::DestructionObserver* destruction_observer)"
  },
  {
    "label": "RemoveDestructionObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDestructionObserver(\n      CurrentThread::DestructionObserver* destruction_observer)"
  },
  {
    "label": "RegisterOnNextIdleCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnNextIdleCallback(OnceClosure on_next_idle_callback)"
  },
  {
    "label": "SetTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTaskRunner(scoped_refptr<SingleThreadTaskRunner> task_runner)"
  },
  {
    "label": "GetTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<SingleThreadTaskRunner>)",
    "insertText": "GetTaskRunner()"
  },
  {
    "label": "SetAddQueueTimeToTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAddQueueTimeToTasks(bool enable)"
  },
  {
    "label": "SetTaskExecutionAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTaskExecutionAllowed(bool allowed)"
  },
  {
    "label": "AttachToMessagePump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachToMessagePump()"
  },
  {
    "label": "EnableMessagePumpTimeKeeperMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMessagePumpTimeKeeperMetrics(const char* thread_name)"
  },
  {
    "label": "ScheduleWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleWork()"
  },
  {
    "label": "UnregisterTaskQueueImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTaskQueueImpl(\n      std::unique_ptr<internal::TaskQueueImpl> task_queue)"
  },
  {
    "label": "ShutdownTaskQueueGracefully()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownTaskQueueGracefully(\n      std::unique_ptr<internal::TaskQueueImpl> task_queue)"
  },
  {
    "label": "GetWeakPtr()",
    "kind": "Method",
    "detail": "Function (WeakPtr<SequenceManagerImpl>)",
    "insertText": "GetWeakPtr()"
  },
  {
    "label": "CreateThreadControllerImplForCurrentThread()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ThreadControllerImpl>)",
    "insertText": "CreateThreadControllerImplForCurrentThread(const TickClock* clock)"
  },
  {
    "label": "MainThreadOnly()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "MainThreadOnly(\n        SequenceManagerImpl* sequence_manager,\n        const scoped_refptr<AssociatedThreadId>& associated_thread,\n        const SequenceManager::Settings& settings,\n        const base::TickClock* clock)"
  },
  {
    "label": "CompleteInitializationOnBoundThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteInitializationOnBoundThread()"
  },
  {
    "label": "SetNextWakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNextWakeUp(LazyNow* lazy_now, absl::optional<WakeUp> wake_up)"
  },
  {
    "label": "WillQueueTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WillQueueTask(Task* pending_task)"
  },
  {
    "label": "MoveReadyDelayedTasksToWorkQueues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveReadyDelayedTasksToWorkQueues(LazyNow* lazy_now)"
  },
  {
    "label": "NotifyWillProcessTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyWillProcessTask(ExecutingTask* task, LazyNow* time_before_task)"
  },
  {
    "label": "NotifyDidProcessTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDidProcessTask(ExecutingTask* task, LazyNow* time_after_task)"
  },
  {
    "label": "GetNextSequenceNumber()",
    "kind": "Method",
    "detail": "Function (EnqueueOrder)",
    "insertText": "GetNextSequenceNumber()"
  },
  {
    "label": "GetAddQueueTimeToTasks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAddQueueTimeToTasks()"
  },
  {
    "label": "GetFlagToRequestReloadForEmptyQueue()",
    "kind": "Method",
    "detail": "Function (AtomicFlagSet::AtomicFlag)",
    "insertText": "GetFlagToRequestReloadForEmptyQueue(\n      TaskQueueImpl* task_queue)"
  },
  {
    "label": "MaybeReclaimMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeReclaimMemory()"
  },
  {
    "label": "CleanUpQueues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpQueues()"
  },
  {
    "label": "RemoveAllCanceledTasksFromFrontOfWorkQueues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllCanceledTasksFromFrontOfWorkQueues()"
  },
  {
    "label": "ShouldRecordTaskTiming()",
    "kind": "Method",
    "detail": "Function (TaskQueue::TaskTiming::TimeRecordingPolicy)",
    "insertText": "ShouldRecordTaskTiming(\n      const internal::TaskQueueImpl* task_queue)"
  },
  {
    "label": "ShouldRecordCPUTimeForTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRecordCPUTimeForTask()"
  },
  {
    "label": "RecordCrashKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordCrashKeys(const PendingTask&)"
  },
  {
    "label": "SelectNextTaskImpl()",
    "kind": "Method",
    "detail": "Function (absl::optional<SelectedTask>)",
    "insertText": "SelectNextTaskImpl(LazyNow& lazy_now,\n                                                  SelectTaskOption option)"
  },
  {
    "label": "InitializeTaskTiming()",
    "kind": "Method",
    "detail": "Function (TaskQueue::TaskTiming)",
    "insertText": "InitializeTaskTiming(\n      internal::TaskQueueImpl* task_queue)"
  }
]