[
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FViewportDisplayDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportDisplayDelegate"
  },
  {
    "label": "UViewportStatsSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportStatsSubsystem"
  },
  {
    "label": "FUniqueDisplayData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniqueDisplayData"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Subsystems / WorldSubsystem . h \" # include \" Tickable . h \" # include \" Stats / Stats . h \" # include \" Engine / EngineTypes . h \" # include \" ViewportStatsSubsystem . generated . h \" class UWorld ; class FViewport ; class UCanvas ; class FCanvas ;)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_RetVal_TwoParams(bool, FViewportDisplayCallback, FText&, OutText, FLinearColor&, OutColor)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "bool(FText& OutTest, FLinearColor& OutColor)"
  },
  {
    "label": "FViewportDisplayDelegate()",
    "kind": "Method",
    "detail": "Function (struct FViewportDisplayDelegate {)",
    "insertText": "FViewportDisplayDelegate()"
  },
  {
    "label": "FViewportDisplayDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FViewportDisplayDelegate(FViewportDisplayCallback const& D) : FuncDynDelegate(D)"
  },
  {
    "label": "FViewportDisplayDelegate()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FViewportDisplayDelegate(FShouldDisplayFunc&& Callback) : FuncCallback(MoveTemp(Callback))"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} ; FViewportDisplayCallback FuncDynDelegate ; FShouldDisplayFunc FuncCallback ; bool)",
    "insertText": "Execute(FText& OutText, FLinearColor& OutColor)"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBound()"
  },
  {
    "label": "Unbind()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Unbind()"
  },
  {
    "label": "FViewportDisplayDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FViewportDisplayDelegate(FViewportDisplayDelegate&&)"
  },
  {
    "label": "FViewportDisplayDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FViewportDisplayDelegate(const FViewportDisplayDelegate&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FViewportDisplayDelegate&)",
    "insertText": "operator(FViewportDisplayDelegate&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FViewportDisplayDelegate&)",
    "insertText": "operator(const FViewportDisplayDelegate&)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(Category = \"Viewport Stats Subsystem\", MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API void Draw(FViewport* Viewport, FCanvas* Canvas, UCanvas* CanvasObject, float MessageStartY)"
  },
  {
    "label": "AddDisplayDelegate()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddDisplayDelegate(FShouldDisplayFunc&& Callback)"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "FUniqueDisplayData()",
    "kind": "Method",
    "detail": "Function (struct FUniqueDisplayData {)",
    "insertText": "FUniqueDisplayData()"
  },
  {
    "label": "FUniqueDisplayData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUniqueDisplayData(const FText& Text, const FLinearColor& Col, const FVector2D& Offset = FVector2D::ZeroVector) : DisplayText(Text) , DisplayColor(Col) , DisplayOffset(Offset)"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (} ; FText DisplayText =)",
    "insertText": "GetEmpty()"
  }
]