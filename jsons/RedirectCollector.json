[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRedirectCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRedirectCollector"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "FSoftObjectPathProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPathProperty"
  },
  {
    "label": "FSoftObjectPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPath"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRedirectCollectorReverseLookupTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRedirectCollectorReverseLookupTest"
  },
  {
    "label": "OnSoftObjectPathLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSoftObjectPathLoaded(const struct FSoftObjectPath& InPath, FArchive* InArchive)"
  },
  {
    "label": "CollectSavedSoftPackageReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectSavedSoftPackageReferences(FName ReferencingPackage, const TSet<FName>& PackageNames, bool bEditorOnlyReferences)"
  },
  {
    "label": "ResolveAllSoftObjectPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveAllSoftObjectPaths(FName FilterPackage = NAME_None)"
  },
  {
    "label": "ProcessSoftObjectPathPackageList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSoftObjectPathPackageList(FName FilterPackage, bool bGetEditorOnly, TSet<FName>& OutReferencedPackages)"
  },
  {
    "label": "AddAssetPathRedirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAssetPathRedirection(FName OriginalPath, FName RedirectedPath)"
  },
  {
    "label": "AddAssetPathRedirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAssetPathRedirection(const FSoftObjectPath& OriginalPath, const FSoftObjectPath& RedirectedPath)"
  },
  {
    "label": "RemoveAssetPathRedirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAssetPathRedirection(FName OriginalPath)"
  },
  {
    "label": "RemoveAssetPathRedirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAssetPathRedirection(const FSoftObjectPath& OriginalPath)"
  },
  {
    "label": "GetAssetPathRedirection()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetAssetPathRedirection(FName OriginalPath)"
  },
  {
    "label": "GetAssetPathRedirection()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "GetAssetPathRedirection(const FSoftObjectPath& OriginalPath)"
  },
  {
    "label": "RemoveAndCopySoftObjectPathExclusions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveAndCopySoftObjectPathExclusions(FName PackageName, TSet<FName>& OutExcludedReferences)"
  },
  {
    "label": "OnStartupPackageLoadComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartupPackageLoadComplete()"
  },
  {
    "label": "AddObjectPathRedirectionInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObjectPathRedirectionInternal(const FSoftObjectPath& Source, const FSoftObjectPath& Destination)"
  },
  {
    "label": "TryRemoveObjectPathRedirectionInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRemoveObjectPathRedirectionInternal(const FSoftObjectPath& Source)"
  },
  {
    "label": "ShouldTrackPackageReferenceTypes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldTrackPackageReferenceTypes()"
  }
]