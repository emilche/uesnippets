[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRedirectCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRedirectCollector"
  },
  {
    "label": "FSoftObjectPathProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPathProperty"
  },
  {
    "label": "FSoftObjectPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPath"
  },
  {
    "label": "FRedirectCollectorReverseLookupTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRedirectCollectorReverseLookupTest"
  },
  {
    "label": "FSoftObjectPathProperty()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / UniqueLock . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" CoreMinimal . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" Misc / ScopeLock . h \" # include \" Templates / TypeHash . h \" # include \" UObject / NameTypes . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / UnrealNames . h \" class FArchive ; # if WITH_EDITOR enum class ESoftObjectPathCollectType : uint8 ; class FRedirectCollector { private : struct FSoftObjectPathProperty {)",
    "insertText": "FSoftObjectPathProperty(FSoftObjectPath InObjectPath, FName InProperty, bool bInReferencedByEditorOnlyProperty) : ObjectPath(MoveTemp(InObjectPath)) , PropertyName(InProperty) , bReferencedByEditorOnlyProperty(bInReferencedByEditorOnlyProperty)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSoftObjectPathProperty& Other)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (uint32 Hash = 0 ; Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Key.ObjectPath))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Key.PropertyName))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, (uint32)Key.bReferencedByEditorOnlyProperty)"
  },
  {
    "label": "CollectSavedSoftPackageReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectSavedSoftPackageReferences(FName ReferencingPackage, const TSet<FName>& PackageNames, bool bEditorOnlyReferences)"
  },
  {
    "label": "ResolveAllSoftObjectPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveAllSoftObjectPaths(FName FilterPackage = NAME_None)"
  },
  {
    "label": "ProcessSoftObjectPathPackageList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSoftObjectPathPackageList(FName FilterPackage, bool bGetEditorOnly, TSet<FName>& OutReferencedPackages)"
  },
  {
    "label": "AddAssetPathRedirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAssetPathRedirection(const FSoftObjectPath& OriginalPath, const FSoftObjectPath& RedirectedPath)"
  },
  {
    "label": "RemoveAssetPathRedirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAssetPathRedirection(const FSoftObjectPath& OriginalPath)"
  },
  {
    "label": "GetAssetPathRedirection()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "GetAssetPathRedirection(const FSoftObjectPath& OriginalPath)"
  },
  {
    "label": "HasAnySoftObjectPathsToResolve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnySoftObjectPathsToResolve()"
  },
  {
    "label": "RemoveAndCopySoftObjectPathExclusions()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveAndCopySoftObjectPathExclusions(FName PackageName, TSet<FName>& OutExcludedReferences)"
  },
  {
    "label": "OnStartupPackageLoadComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartupPackageLoadComplete()"
  },
  {
    "label": "GetObjectPathRedirectionMapUnderLock()",
    "kind": "Method",
    "detail": "Function (const TMap<FSoftObjectPath,FSoftObjectPath>&)",
    "insertText": "GetObjectPathRedirectionMapUnderLock(const UE::TDynamicUniqueLock<FCriticalSection>& Lock)"
  },
  {
    "label": "AcquireLock()",
    "kind": "Method",
    "detail": "Function (UE::TDynamicUniqueLock<FCriticalSection>)",
    "insertText": "AcquireLock()"
  },
  {
    "label": "AddObjectPathRedirectionInternal()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "AddObjectPathRedirectionInternal(const FSoftObjectPath& Source, const FSoftObjectPath& Destination)"
  },
  {
    "label": "TryRemoveObjectPathRedirectionInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRemoveObjectPathRedirectionInternal(const FSoftObjectPath& Source)"
  },
  {
    "label": "ShouldTrackPackageReferenceTypes()",
    "kind": "Method",
    "detail": "Function (typedef TSet<FSoftObjectPathProperty> FSoftObjectPathPropertySet ; typedef TMap<FName,FSoftObjectPathPropertySet> FSoftObjectPathMap ; bool)",
    "insertText": "ShouldTrackPackageReferenceTypes()"
  }
]