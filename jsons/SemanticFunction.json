[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "CExprFunctionDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CExprFunctionDefinition"
  },
  {
    "label": "CFunction()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Semantics / Definition . h \" # include \" uLang / Semantics / Expression . h \" # include \" uLang / Semantics / Revision . h \" # include \" uLang / Semantics / Signature . h \" # include \" uLang / Semantics / ControlScope . h \" # include \" uLang / Semantics / SemanticTypes . h \" # include \" uLang / Common / Text / Named . h \" # include \" uLang / Common / Misc / Optional . h \" namespace uLang { enum class EFunctionStringFlag : uint16_t { Qualified = 1<<1,QualifiedDotted = 1<<2,NoScope_ = 0 x0,Overload_ = Qualified,OverloadDotted_ = QualifiedDotted,Scoped_ = Qualified | QualifiedDotted } ; enum class EExtensionFieldAccessorKind { Function,ExtensionDataMember,ExtensionMethod } ; class CFunction : public CDefinition,public CLogicalScope { public : const CDefinition::EKind StaticDefinitionKind = CDefinition::EKind::Function ; class CExprFunctionDefinition ; SSignature _Signature ; EExtensionFieldAccessorKind _ExtensionFieldAccessorKind = EExtensionFieldAccessorKind::Function ; const CFunctionType* _NegativeType = nullptr ;)",
    "insertText": "CFunction(int32_t Index, const CSymbol& FunctionName, CScope& EnclosingScope)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Index()"
  },
  {
    "label": "GetScopeName()",
    "kind": "Method",
    "detail": "Function (CSymbol)",
    "insertText": "GetScopeName()"
  },
  {
    "label": "ScopeAsDefinition()",
    "kind": "Method",
    "detail": "Function (} const CDefinition*)",
    "insertText": "ScopeAsDefinition()"
  },
  {
    "label": "SetOverriddenDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverriddenDefinition(OverriddenDefinition)"
  },
  {
    "label": "SetOverriddenDefinition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOverriddenDefinition(const CFunction* OverriddenDefinition)"
  },
  {
    "label": "GetOverriddenDefinition()",
    "kind": "Method",
    "detail": "Function (} const CFunction*)",
    "insertText": "GetOverriddenDefinition()"
  },
  {
    "label": "GetBaseOverriddenDefinition()",
    "kind": "Method",
    "detail": "Function (} const CFunction&)",
    "insertText": "GetBaseOverriddenDefinition()"
  },
  {
    "label": "GetBaseCoercedOverriddenFunction()",
    "kind": "Method",
    "detail": "Function (} const CFunction&)",
    "insertText": "GetBaseCoercedOverriddenFunction()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const CFunction* I = this ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "SetSignature()",
    "kind": "Method",
    "detail": "Function (break ; } I = Next ; } return* I ; } void)",
    "insertText": "SetSignature(SSignature&& Signature, SemanticRevision NextRevision)"
  },
  {
    "label": "MapSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapSignature(const CFunctionType& FuncType, SemanticRevision NextRevision)"
  },
  {
    "label": "GetBodyAst()",
    "kind": "Method",
    "detail": "Function (TSPtr<CExpressionBase>)",
    "insertText": "GetBodyAst()"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(!GetIrNode(true), \"Called AST function on when IR available\")"
  },
  {
    "label": "GetBodyClassDefinitionAst()",
    "kind": "Method",
    "detail": "Function (} TSPtr<CExprClassDefinition>)",
    "insertText": "GetBodyClassDefinitionAst()"
  },
  {
    "label": "GetBodyInterfaceDefinitionAst()",
    "kind": "Method",
    "detail": "Function (TSPtr<CExprInterfaceDefinition>)",
    "insertText": "GetBodyInterfaceDefinitionAst()"
  },
  {
    "label": "GetReturnTypeAst()",
    "kind": "Method",
    "detail": "Function (TSPtr<CExpressionBase>)",
    "insertText": "GetReturnTypeAst()"
  },
  {
    "label": "GetDefineeAst()",
    "kind": "Method",
    "detail": "Function (} TSPtr<CExpressionBase>)",
    "insertText": "GetDefineeAst()"
  },
  {
    "label": "GetBodyIr()",
    "kind": "Method",
    "detail": "Function (} CExpressionBase*)",
    "insertText": "GetBodyIr()"
  },
  {
    "label": "GetBodyClassDefinitionIr()",
    "kind": "Method",
    "detail": "Function (} CExprClassDefinition*)",
    "insertText": "GetBodyClassDefinitionIr()"
  },
  {
    "label": "GetBodyInterfaceDefinitionIr()",
    "kind": "Method",
    "detail": "Function (CExprInterfaceDefinition*)",
    "insertText": "GetBodyInterfaceDefinitionIr()"
  },
  {
    "label": "GetReturnTypeIr()",
    "kind": "Method",
    "detail": "Function (CExpressionBase*)",
    "insertText": "GetReturnTypeIr()"
  },
  {
    "label": "GetRevision()",
    "kind": "Method",
    "detail": "Function (} SemanticRevision)",
    "insertText": "GetRevision()"
  },
  {
    "label": "GetSignatureRevision()",
    "kind": "Method",
    "detail": "Function (} SemanticRevision)",
    "insertText": "GetSignatureRevision()"
  },
  {
    "label": "GetMaybeModuleScope()",
    "kind": "Method",
    "detail": "Function (TOptional<const CModule*>)",
    "insertText": "GetMaybeModuleScope()"
  },
  {
    "label": "GetMaybeContextType()",
    "kind": "Method",
    "detail": "Function (TOptional<const CNominalType*>)",
    "insertText": "GetMaybeContextType()"
  },
  {
    "label": "GetDecoratedName()",
    "kind": "Method",
    "detail": "Function (CUTF8String)",
    "insertText": "GetDecoratedName(uint16_t StrFlags = uint16_t(EFunctionStringFlag::Overload_))"
  },
  {
    "label": "MarkCoercion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkCoercion()"
  },
  {
    "label": "IsCoercion()",
    "kind": "Method",
    "detail": "Function (_bCoercion = true ; } bool)",
    "insertText": "IsCoercion()"
  },
  {
    "label": "IsCoercedOverride()",
    "kind": "Method",
    "detail": "Function (_bCoercedOverride = true ; } bool)",
    "insertText": "IsCoercedOverride()"
  },
  {
    "label": "IsNative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNative()"
  },
  {
    "label": "SetPrototypeDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrototypeDefinition(const CFunction& PrototypeDefinition)"
  },
  {
    "label": "SetPrototypeDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrototypeDefinition(PrototypeDefinition)"
  },
  {
    "label": "GetPrototypeDefinition()",
    "kind": "Method",
    "detail": "Function (} const CFunction*)",
    "insertText": "GetPrototypeDefinition()"
  },
  {
    "label": "SetAstNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAstNode(CExprFunctionDefinition* AstNode)"
  },
  {
    "label": "GetAstNode()",
    "kind": "Method",
    "detail": "Function (CExprFunctionDefinition*)",
    "insertText": "GetAstNode()"
  },
  {
    "label": "SetIrNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIrNode(CExprFunctionDefinition* AstNode)"
  },
  {
    "label": "GetIrNode()",
    "kind": "Method",
    "detail": "Function (CExprFunctionDefinition*)",
    "insertText": "GetIrNode(bool bForce = false)"
  },
  {
    "label": "DefinitionAsLogicalScopeNullable()",
    "kind": "Method",
    "detail": "Function (const CLogicalScope*)",
    "insertText": "DefinitionAsLogicalScopeNullable()"
  }
]