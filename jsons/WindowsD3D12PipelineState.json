[
  {
    "label": "FD3D12RootSignature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RootSignature"
  },
  {
    "label": "FD3D12ComputePipelineStateDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ComputePipelineStateDesc"
  },
  {
    "label": "FD3D12LowLevelGraphicsPipelineStateDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12LowLevelGraphicsPipelineStateDesc"
  },
  {
    "label": "FD3D12_GRAPHICS_PIPELINE_STATE_STREAM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12_GRAPHICS_PIPELINE_STATE_STREAM"
  },
  {
    "label": "FD3D12_MESH_PIPELINE_STATE_STREAM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12_MESH_PIPELINE_STATE_STREAM"
  },
  {
    "label": "FD3D12_COMPUTE_PIPELINE_STATE_STREAM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12_COMPUTE_PIPELINE_STATE_STREAM"
  },
  {
    "label": "ComputePipelineCreationArgs_POD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputePipelineCreationArgs_POD"
  },
  {
    "label": "GraphicsPipelineCreationArgs_POD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphicsPipelineCreationArgs_POD"
  },
  {
    "label": "ComputePipelineCreationArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputePipelineCreationArgs"
  },
  {
    "label": "GraphicsPipelineCreationArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphicsPipelineCreationArgs"
  },
  {
    "label": "FD3D12PipelineStateCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12PipelineStateCache"
  },
  {
    "label": "SaveByteCode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" D3D12RHICommon . h \" class FD3D12RootSignature ; struct FD3D12ComputePipelineStateDesc ; struct FD3D12LowLevelGraphicsPipelineStateDesc ; struct FD3D12_GRAPHICS_PIPELINE_STATE_STREAM { CD3DX12_PIPELINE_STATE_STREAM_NODE_MASK NodeMask ; CD3DX12_PIPELINE_STATE_STREAM_ROOT_SIGNATURE pRootSignature ; CD3DX12_PIPELINE_STATE_STREAM_INPUT_LAYOUT InputLayout ; CD3DX12_PIPELINE_STATE_STREAM_IB_STRIP_CUT_VALUE IBStripCutValue ; CD3DX12_PIPELINE_STATE_STREAM_PRIMITIVE_TOPOLOGY PrimitiveTopologyType ; CD3DX12_PIPELINE_STATE_STREAM_VS VS ; CD3DX12_PIPELINE_STATE_STREAM_GS GS ; CD3DX12_PIPELINE_STATE_STREAM_HS HS ; CD3DX12_PIPELINE_STATE_STREAM_DS DS ; CD3DX12_PIPELINE_STATE_STREAM_PS PS ; CD3DX12_PIPELINE_STATE_STREAM_BLEND_DESC BlendState ; CD3DX12_PIPELINE_STATE_STREAM_DEPTH_STENCIL1 DepthStencilState ; CD3DX12_PIPELINE_STATE_STREAM_DEPTH_STENCIL_FORMAT DSVFormat ; CD3DX12_PIPELINE_STATE_STREAM_RASTERIZER RasterizerState ; CD3DX12_PIPELINE_STATE_STREAM_RENDER_TARGET_FORMATS RTVFormats ; CD3DX12_PIPELINE_STATE_STREAM_SAMPLE_DESC SampleDesc ; CD3DX12_PIPELINE_STATE_STREAM_SAMPLE_MASK SampleMask ; CD3DX12_PIPELINE_STATE_STREAM_CACHED_PSO CachedPSO ; } ; # if PLATFORM_SUPPORTS_MESH_SHADERS struct FD3D12_MESH_PIPELINE_STATE_STREAM { CD3DX12_PIPELINE_STATE_STREAM_NODE_MASK NodeMask ; CD3DX12_PIPELINE_STATE_STREAM_ROOT_SIGNATURE pRootSignature ; CD3DX12_PIPELINE_STATE_STREAM_PRIMITIVE_TOPOLOGY PrimitiveTopologyType ; CD3DX12_PIPELINE_STATE_STREAM_MS MS ; CD3DX12_PIPELINE_STATE_STREAM_AS AS ; CD3DX12_PIPELINE_STATE_STREAM_PS PS ; CD3DX12_PIPELINE_STATE_STREAM_BLEND_DESC BlendState ; CD3DX12_PIPELINE_STATE_STREAM_DEPTH_STENCIL1 DepthStencilState ; CD3DX12_PIPELINE_STATE_STREAM_DEPTH_STENCIL_FORMAT DSVFormat ; CD3DX12_PIPELINE_STATE_STREAM_RASTERIZER RasterizerState ; CD3DX12_PIPELINE_STATE_STREAM_RENDER_TARGET_FORMATS RTVFormats ; CD3DX12_PIPELINE_STATE_STREAM_SAMPLE_DESC SampleDesc ; CD3DX12_PIPELINE_STATE_STREAM_SAMPLE_MASK SampleMask ; CD3DX12_PIPELINE_STATE_STREAM_CACHED_PSO CachedPSO ; } ; # endif struct FD3D12_COMPUTE_PIPELINE_STATE_STREAM { CD3DX12_PIPELINE_STATE_STREAM_NODE_MASK NodeMask ; CD3DX12_PIPELINE_STATE_STREAM_ROOT_SIGNATURE pRootSignature ; CD3DX12_PIPELINE_STATE_STREAM_CS CS ; CD3DX12_PIPELINE_STATE_STREAM_CACHED_PSO CachedPSO ; } ; struct ComputePipelineCreationArgs_POD ; struct GraphicsPipelineCreationArgs_POD ; # include \" D3D12PipelineState . h \" void)",
    "insertText": "SaveByteCode(D3D12_SHADER_BYTECODE& ByteCode)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (struct ComputePipelineCreationArgs_POD { FD3D12ComputePipelineStateDesc Desc ; ID3D12PipelineLibrary* Library ; void)",
    "insertText": "Init(const ComputePipelineCreationArgs_POD& InArgs)"
  },
  {
    "label": "SaveByteCode()",
    "kind": "Method",
    "detail": "Function (Desc = InArgs . Desc ; Library = InArgs . Library ;)",
    "insertText": "SaveByteCode(Desc.Desc.CS)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Destroy()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} ; struct GraphicsPipelineCreationArgs_POD { FD3D12LowLevelGraphicsPipelineStateDesc Desc ; ID3D12PipelineLibrary* Library ; void)",
    "insertText": "Init(const GraphicsPipelineCreationArgs_POD& InArgs)"
  },
  {
    "label": "SaveByteCode()",
    "kind": "Method",
    "detail": "Function (Desc = InArgs . Desc ; Library = InArgs . Library ;)",
    "insertText": "SaveByteCode(Desc.Desc.VS)"
  },
  {
    "label": "SaveByteCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveByteCode(Desc.Desc.MS)"
  },
  {
    "label": "SaveByteCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveByteCode(Desc.Desc.AS)"
  },
  {
    "label": "SaveByteCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveByteCode(Desc.Desc.PS)"
  },
  {
    "label": "SaveByteCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveByteCode(Desc.Desc.GS)"
  },
  {
    "label": "ComputePipelineCreationArgs()",
    "kind": "Method",
    "detail": "Function (} ; struct ComputePipelineCreationArgs {)",
    "insertText": "ComputePipelineCreationArgs(const FD3D12ComputePipelineStateDesc* InDesc, ID3D12PipelineLibrary* InLibrary)"
  },
  {
    "label": "ComputePipelineCreationArgs()",
    "kind": "Method",
    "detail": "Function (Args . Desc =* InDesc ; Args . Library = InLibrary ; })",
    "insertText": "ComputePipelineCreationArgs(const ComputePipelineCreationArgs& InArgs) : ComputePipelineCreationArgs(&InArgs.Args.Desc, InArgs.Args.Library)"
  },
  {
    "label": "GraphicsPipelineCreationArgs()",
    "kind": "Method",
    "detail": "Function (} ComputePipelineCreationArgs_POD Args ; } ; struct GraphicsPipelineCreationArgs {)",
    "insertText": "GraphicsPipelineCreationArgs(const FD3D12LowLevelGraphicsPipelineStateDesc* InDesc, ID3D12PipelineLibrary* InLibrary)"
  },
  {
    "label": "GraphicsPipelineCreationArgs()",
    "kind": "Method",
    "detail": "Function (Args . Desc =* InDesc ; Args . Library = InLibrary ; })",
    "insertText": "GraphicsPipelineCreationArgs(const GraphicsPipelineCreationArgs& InArgs) : GraphicsPipelineCreationArgs(&InArgs.Args.Desc, InArgs.Args.Library)"
  },
  {
    "label": "WriteOutShaderBlob()",
    "kind": "Method",
    "detail": "Function (} GraphicsPipelineCreationArgs_POD Args ; } ; class FD3D12PipelineStateCache : public FD3D12PipelineStateCacheBase { private : FDiskCacheInterface DiskBinaryCache ; TRefCountPtr<ID3D12PipelineLibrary> PipelineLibrary ; bool bUseAPILibaries ; void)",
    "insertText": "WriteOutShaderBlob(PSO_CACHE_TYPE Cache, ID3D12PipelineState* APIPso)"
  },
  {
    "label": "ReadBackShaderBlob()",
    "kind": "Method",
    "detail": "Function (template<PipelineStateDescType> void)",
    "insertText": "ReadBackShaderBlob(PipelineStateDescType& Desc, PSO_CACHE_TYPE Cache)"
  },
  {
    "label": "SetPointerAndAdvanceFilePosition()",
    "kind": "Method",
    "detail": "Function (SIZE_T* cachedBlobOffset = nullptr ; DiskCaches [ Cache ] .)",
    "insertText": "SetPointerAndAdvanceFilePosition((void**)&cachedBlobOffset, sizeof(SIZE_T))"
  },
  {
    "label": "SetPointerAndAdvanceFilePosition()",
    "kind": "Method",
    "detail": "Function (SIZE_T* cachedBlobSize = nullptr ; DiskCaches [ Cache ] .)",
    "insertText": "SetPointerAndAdvanceFilePosition((void**)&cachedBlobSize, sizeof(SIZE_T))"
  },
  {
    "label": "GetDataAt()",
    "kind": "Method",
    "detail": "Function (Desc . CachedPSO . CachedBlobSizeInBytes =* cachedBlobSize ; Desc . CachedPSO . pCachedBlob = DiskBinaryCache .)",
    "insertText": "GetDataAt(*cachedBlobOffset)"
  },
  {
    "label": "UsePipelineLibrary()",
    "kind": "Method",
    "detail": "Function (} else { Desc . CachedPSO . CachedBlobSizeInBytes = 0 ; Desc . CachedPSO . pCachedBlob = nullptr ; } } bool)",
    "insertText": "UsePipelineLibrary()"
  },
  {
    "label": "OnPSOCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPSOCreated(FD3D12PipelineState* PipelineState, const FD3D12ComputePipelineStateDesc& Desc)"
  },
  {
    "label": "AddToDiskCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToDiskCache(const FD3D12LowLevelGraphicsPipelineStateDesc& Desc, FD3D12PipelineState* PipelineState)"
  },
  {
    "label": "AddToDiskCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToDiskCache(const FD3D12ComputePipelineStateDesc& Desc, FD3D12PipelineState* PipelineState)"
  },
  {
    "label": "RebuildFromDiskCache()",
    "kind": "Method",
    "detail": "Function (public : # if ! D3D12RHI_USE_HIGH_LEVEL_PSO_CACHE using FD3D12PipelineStateCacheBase::FindInLoadedCache ; using FD3D12PipelineStateCacheBase::CreateAndAdd ; # endif void)",
    "insertText": "RebuildFromDiskCache()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FString &GraphicsCacheFilename, FString &ComputeCacheFilename, FString &DriverBlobFilename)"
  },
  {
    "label": "IsInErrorState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInErrorState()"
  },
  {
    "label": "FD3D12PipelineStateCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12PipelineStateCache(FD3D12Adapter* InParent)"
  },
  {
    "label": "FD3D12PipelineStateCache()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12PipelineStateCache()"
  }
]