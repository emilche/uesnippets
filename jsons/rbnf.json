[
  {
    "label": "NFRule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NFRule"
  },
  {
    "label": "NFRuleSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NFRuleSet"
  },
  {
    "label": "LocalizationInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalizationInfo"
  },
  {
    "label": "PluralFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PluralFormat"
  },
  {
    "label": "RuleBasedCollator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RuleBasedCollator"
  },
  {
    "label": "URBNFRuleSetTag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "URBNFRuleSetTag"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "NFSubstitution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NFSubstitution"
  },
  {
    "label": "FractionalPartSubstitution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FractionalPartSubstitution"
  },
  {
    "label": "RuleBasedNumberFormat()",
    "kind": "Method",
    "detail": "Function (# ifndef RBNF_H # define RBNF_H # include \" unicode / utypes . h \" # if UCONFIG_NO_FORMATTING # define U_HAVE_RBNF 0 # else # define U_HAVE_RBNF 1 # include \" unicode / dcfmtsym . h \" # include \" unicode / fmtable . h \" # include \" unicode / locid . h \" # include \" unicode / numfmt . h \" # include \" unicode / unistr . h \" # include \" unicode / strenum . h \" # include \" unicode / brkiter . h \" # include \" unicode / upluralrules . h \" U_NAMESPACE_BEGIN class NFRule ; class NFRuleSet ; class LocalizationInfo ; class PluralFormat ; class RuleBasedCollator ; enum URBNFRuleSetTag { URBNF_SPELLOUT,URBNF_ORDINAL,URBNF_DURATION,URBNF_NUMBERING_SYSTEM,# ifndef URBNF_COUNT # endif } ; class U_I18N_API RuleBasedNumberFormat : public NumberFormat { public :)",
    "insertText": "RuleBasedNumberFormat(const UnicodeString& rules, UParseError& perror, UErrorCode& status)"
  },
  {
    "label": "RuleBasedNumberFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RuleBasedNumberFormat(const UnicodeString& rules, const UnicodeString& localizations, UParseError& perror, UErrorCode& status)"
  },
  {
    "label": "RuleBasedNumberFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RuleBasedNumberFormat(const UnicodeString& rules, const Locale& locale, UParseError& perror, UErrorCode& status)"
  },
  {
    "label": "RuleBasedNumberFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RuleBasedNumberFormat(const UnicodeString& rules, const UnicodeString& localizations, const Locale& locale, UParseError& perror, UErrorCode& status)"
  },
  {
    "label": "RuleBasedNumberFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RuleBasedNumberFormat(URBNFRuleSetTag tag, const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "RuleBasedNumberFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RuleBasedNumberFormat(const RuleBasedNumberFormat& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RuleBasedNumberFormat&)",
    "insertText": "operator(const RuleBasedNumberFormat& rhs)"
  },
  {
    "label": "RuleBasedNumberFormat()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RuleBasedNumberFormat()"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Format*)",
    "insertText": "clone(void)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Format& other)"
  },
  {
    "label": "getRules()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getRules()"
  },
  {
    "label": "getNumberOfRuleSetNames()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getNumberOfRuleSetNames()"
  },
  {
    "label": "getRuleSetName()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getRuleSetName(int32_t index)"
  },
  {
    "label": "getNumberOfRuleSetDisplayNameLocales()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getNumberOfRuleSetDisplayNameLocales(void)"
  },
  {
    "label": "getRuleSetDisplayNameLocale()",
    "kind": "Method",
    "detail": "Function (Locale)",
    "insertText": "getRuleSetDisplayNameLocale(int32_t index, UErrorCode& status)"
  },
  {
    "label": "getRuleSetDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getRuleSetDisplayName(int32_t index, const Locale& locale = Locale::getDefault())"
  },
  {
    "label": "getRuleSetDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getRuleSetDisplayName(const UnicodeString& ruleSetName, const Locale& locale = Locale::getDefault())"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (using NumberFormat::format ; UnicodeString&)",
    "insertText": "format(int32_t number, UnicodeString& toAppendTo, FieldPosition& pos)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(int64_t number, UnicodeString& toAppendTo, FieldPosition& pos)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(double number, UnicodeString& toAppendTo, FieldPosition& pos)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(int32_t number, const UnicodeString& ruleSetName, UnicodeString& toAppendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(int64_t number, const UnicodeString& ruleSetName, UnicodeString& toAppendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(double number, const UnicodeString& ruleSetName, UnicodeString& toAppendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (protected : UnicodeString&)",
    "insertText": "format(const number::impl::DecimalQuantity &number, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const number::impl::DecimalQuantity &number, UnicodeString& appendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (public : using NumberFormat::parse ; void)",
    "insertText": "parse(const UnicodeString& text, Formattable& result, ParsePosition& parsePosition)"
  },
  {
    "label": "setLenient()",
    "kind": "Method",
    "detail": "Function (# if ! UCONFIG_NO_COLLATION void)",
    "insertText": "setLenient(UBool enabled)"
  },
  {
    "label": "isLenient()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isLenient(void)"
  },
  {
    "label": "setDefaultRuleSet()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "setDefaultRuleSet(const UnicodeString& ruleSetName, UErrorCode& status)"
  },
  {
    "label": "getDefaultRuleSetName()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getDefaultRuleSetName()"
  },
  {
    "label": "setContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setContext(UDisplayContext value, UErrorCode& status)"
  },
  {
    "label": "getRoundingMode()",
    "kind": "Method",
    "detail": "Function (ERoundingMode)",
    "insertText": "getRoundingMode(void)"
  },
  {
    "label": "setRoundingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRoundingMode(ERoundingMode roundingMode)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (public : UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID(void)"
  },
  {
    "label": "adoptDecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptDecimalFormatSymbols(DecimalFormatSymbols* symbolsToAdopt)"
  },
  {
    "label": "setDecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDecimalFormatSymbols(const DecimalFormatSymbols& symbols)"
  },
  {
    "label": "RuleBasedNumberFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RuleBasedNumberFormat(const UnicodeString& description, LocalizationInfo* localizations, const Locale& locale, UParseError& perror, UErrorCode& status)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(const UnicodeString& rules, LocalizationInfo* localizations, UParseError& perror, UErrorCode& status)"
  },
  {
    "label": "initCapitalizationContextInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initCapitalizationContextInfo(const Locale& thelocale)"
  },
  {
    "label": "dispose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dispose()"
  },
  {
    "label": "stripWhitespace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stripWhitespace(UnicodeString& src)"
  },
  {
    "label": "initDefaultRuleSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initDefaultRuleSet()"
  },
  {
    "label": "findRuleSet()",
    "kind": "Method",
    "detail": "Function (NFRuleSet*)",
    "insertText": "findRuleSet(const UnicodeString& name, UErrorCode& status)"
  },
  {
    "label": "getDefaultRuleSet()",
    "kind": "Method",
    "detail": "Function (class NFSubstitution ; class NFRule ; class NFRuleSet ; class FractionalPartSubstitution ; NFRuleSet*)",
    "insertText": "getDefaultRuleSet()"
  },
  {
    "label": "getCollator()",
    "kind": "Method",
    "detail": "Function (const RuleBasedCollator*)",
    "insertText": "getCollator()"
  },
  {
    "label": "initializeDecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (DecimalFormatSymbols*)",
    "insertText": "initializeDecimalFormatSymbols(UErrorCode &status)"
  },
  {
    "label": "getDecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (const DecimalFormatSymbols*)",
    "insertText": "getDecimalFormatSymbols()"
  },
  {
    "label": "initializeDefaultInfinityRule()",
    "kind": "Method",
    "detail": "Function (NFRule*)",
    "insertText": "initializeDefaultInfinityRule(UErrorCode &status)"
  },
  {
    "label": "getDefaultInfinityRule()",
    "kind": "Method",
    "detail": "Function (const NFRule*)",
    "insertText": "getDefaultInfinityRule()"
  },
  {
    "label": "initializeDefaultNaNRule()",
    "kind": "Method",
    "detail": "Function (NFRule*)",
    "insertText": "initializeDefaultNaNRule(UErrorCode &status)"
  },
  {
    "label": "getDefaultNaNRule()",
    "kind": "Method",
    "detail": "Function (const NFRule*)",
    "insertText": "getDefaultNaNRule()"
  },
  {
    "label": "createPluralFormat()",
    "kind": "Method",
    "detail": "Function (PluralFormat*)",
    "insertText": "createPluralFormat(UPluralType pluralType, const UnicodeString &pattern, UErrorCode& status)"
  },
  {
    "label": "adjustForCapitalizationContext()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "adjustForCapitalizationContext(int32_t startPos, UnicodeString& currentResult, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(int64_t number, NFRuleSet *ruleSet, UnicodeString& toAppendTo, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "format(double number, NFRuleSet& rs, UnicodeString& toAppendTo, UErrorCode& status)"
  }
]