[
  {
    "label": "NFRule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NFRule"
  },
  {
    "label": "NFRuleSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NFRuleSet"
  },
  {
    "label": "LocalizationInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalizationInfo"
  },
  {
    "label": "PluralFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PluralFormat"
  },
  {
    "label": "RuleBasedCollator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RuleBasedCollator"
  },
  {
    "label": "URBNFRuleSetTag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "URBNFRuleSetTag"
  },
  {
    "label": "formats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "formats"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "documentation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "documentation"
  },
  {
    "label": "documentation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "documentation"
  },
  {
    "label": "documentation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "documentation"
  },
  {
    "label": "documentation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "documentation"
  },
  {
    "label": "DecimalFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecimalFormat"
  },
  {
    "label": "DecimalFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecimalFormat"
  },
  {
    "label": "NFSubstitution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NFSubstitution"
  },
  {
    "label": "NFRule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NFRule"
  },
  {
    "label": "NFRuleSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NFRuleSet"
  },
  {
    "label": "FractionalPartSubstitution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FractionalPartSubstitution"
  },
  {
    "label": "words()",
    "kind": "Method",
    "detail": "Function (in)",
    "insertText": "words(123 is &quot;one hundred twenty-three&quot;)"
  },
  {
    "label": "numeral()",
    "kind": "Method",
    "detail": "Function (a)",
    "insertText": "numeral(123 is &quot;123rd&quot;)"
  },
  {
    "label": "setLenient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLenient(UBool enabled)"
  },
  {
    "label": "setDefaultRuleSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDefaultRuleSet(const UnicodeString& ruleSetName, UErrorCode& status)"
  },
  {
    "label": "setContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setContext(UDisplayContext value, UErrorCode& status)"
  },
  {
    "label": "setRoundingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRoundingMode(ERoundingMode roundingMode)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "adoptDecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptDecimalFormatSymbols(DecimalFormatSymbols* symbolsToAdopt)"
  },
  {
    "label": "setDecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDecimalFormatSymbols(const DecimalFormatSymbols& symbols)"
  },
  {
    "label": "RuleBasedNumberFormat()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "RuleBasedNumberFormat()"
  },
  {
    "label": "RuleBasedNumberFormat()",
    "kind": "Method",
    "detail": "Function (adoption)",
    "insertText": "RuleBasedNumberFormat(const UnicodeString& description, LocalizationInfo* localizations,\n              const Locale& locale, UParseError& perror, UErrorCode& status)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(const UnicodeString& rules, LocalizationInfo* localizations, UParseError& perror, UErrorCode& status)"
  },
  {
    "label": "initCapitalizationContextInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initCapitalizationContextInfo(const Locale& thelocale)"
  },
  {
    "label": "dispose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dispose()"
  },
  {
    "label": "stripWhitespace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stripWhitespace(UnicodeString& src)"
  },
  {
    "label": "initDefaultRuleSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initDefaultRuleSet()"
  }
]