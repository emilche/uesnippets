[
  {
    "label": "FMeshDrawSingleShaderBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshDrawSingleShaderBindings"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FMaterialShaderPermutationParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShaderPermutationParameters"
  },
  {
    "label": "FMeshMaterialShaderPermutationParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshMaterialShaderPermutationParameters"
  },
  {
    "label": "FEmptyPrecomputedLightingUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmptyPrecomputedLightingUniformBuffer"
  },
  {
    "label": "FIndirectLightingCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIndirectLightingCache"
  },
  {
    "label": "FIndirectLightingCacheAllocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIndirectLightingCacheAllocation"
  },
  {
    "label": "FVolumetricLightmapSceneData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricLightmapSceneData"
  },
  {
    "label": "FEmptyIndirectLightingCacheUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmptyIndirectLightingCacheUniformBuffer"
  },
  {
    "label": "FNoLightMapPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNoLightMapPolicy"
  },
  {
    "label": "ELightmapQuality",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELightmapQuality"
  },
  {
    "label": "TLightMapPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TLightMapPolicy"
  },
  {
    "label": "TDistanceFieldShadowsAndLightMapPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDistanceFieldShadowsAndLightMapPolicy"
  },
  {
    "label": "FDummyLightMapPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDummyLightMapPolicy"
  },
  {
    "label": "FSelfShadowedTranslucencyPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelfShadowedTranslucencyPolicy"
  },
  {
    "label": "VertexParametersType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VertexParametersType"
  },
  {
    "label": "PixelParametersType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PixelParametersType"
  },
  {
    "label": "ComputeParametersType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ComputeParametersType"
  },
  {
    "label": "FPrecomputedVolumetricLightmapLightingPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrecomputedVolumetricLightmapLightingPolicy"
  },
  {
    "label": "FCachedVolumeIndirectLightingPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedVolumeIndirectLightingPolicy"
  },
  {
    "label": "FCachedPointIndirectLightingPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedPointIndirectLightingPolicy"
  },
  {
    "label": "FMobileDirectionalLightAndCSMPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileDirectionalLightAndCSMPolicy"
  },
  {
    "label": "FMobileDistanceFieldShadowsAndLQLightMapPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMobileDistanceFieldShadowsAndLQLightMapPolicy"
  },
  {
    "label": "FMobileDistanceFieldShadowsLightMapAndCSMLightingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMobileDistanceFieldShadowsLightMapAndCSMLightingPolicy"
  },
  {
    "label": "FMobileDirectionalLightCSMAndLightMapPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileDirectionalLightCSMAndLightMapPolicy"
  },
  {
    "label": "FMobileDirectionalLightAndSHIndirectPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileDirectionalLightAndSHIndirectPolicy"
  },
  {
    "label": "FMobileDirectionalLightCSMAndSHIndirectPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMobileDirectionalLightCSMAndSHIndirectPolicy"
  },
  {
    "label": "ELightMapPolicyType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELightMapPolicyType"
  },
  {
    "label": "FUniformLightMapPolicyShaderParametersType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformLightMapPolicyShaderParametersType"
  },
  {
    "label": "FUniformLightMapPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformLightMapPolicy"
  },
  {
    "label": "TUniformLightMapPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUniformLightMapPolicy"
  },
  {
    "label": "FSelfShadowLightCacheElementData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelfShadowLightCacheElementData"
  },
  {
    "label": "FSelfShadowedCachedPointIndirectLightingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelfShadowedCachedPointIndirectLightingPolicy"
  },
  {
    "label": "FSelfShadowedVolumetricLightmapPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelfShadowedVolumetricLightmapPolicy"
  },
  {
    "label": "MobileUsesNoLightMapPermutation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" LightmapUniformShaderParameters . h \" # include \" Math / Vector . h \" # include \" ShaderParameterMacros . h \" # include \" UniformBuffer . h \" class FMeshDrawSingleShaderBindings ; class FPrimitiveSceneProxy ; struct FMaterialShaderPermutationParameters ; struct FMeshMaterialShaderPermutationParameters ; bool)",
    "insertText": "MobileUsesNoLightMapPermutation(const FMeshMaterialShaderPermutationParameters& Parameters)"
  },
  {
    "label": "MobileUseCSMShaderBranch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MobileUseCSMShaderBranch()"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FIndirectLightingCacheUniformParameters, ) SHADER_PARAMETER(FVector3f, IndirectLightingCachePrimitiveAdd) SHADER_PARAMETER(FVector3f, IndirectLightingCachePrimitiveScale) SHADER_PARAMETER(FVector3f, IndirectLightingCacheMinUV) SHADER_PARAMETER(FVector3f, IndirectLightingCacheMaxUV) SHADER_PARAMETER(FVector4f, PointSkyBentNormal) SHADER_PARAMETER_EX(float, DirectionalLightShadowing, EShaderPrecisionModifier::Half) SHADER_PARAMETER_ARRAY(FVector4f, IndirectLightingSHCoefficients0, [3]) SHADER_PARAMETER_ARRAY(FVector4f, IndirectLightingSHCoefficients1, [3]) SHADER_PARAMETER(FVector4f, IndirectLightingSHCoefficients2) SHADER_PARAMETER_EX(FVector4f, IndirectLightingSHSingleCoefficient, EShaderPrecisionModifier::Half) SHADER_PARAMETER_TEXTURE(Texture3D, IndirectLightingCacheTexture0) SHADER_PARAMETER_TEXTURE(Texture3D, IndirectLightingCacheTexture1) SHADER_PARAMETER_TEXTURE(Texture3D, IndirectLightingCacheTexture2) SHADER_PARAMETER_SAMPLER(SamplerState, IndirectLightingCacheTextureSampler0) SHADER_PARAMETER_SAMPLER(SamplerState, IndirectLightingCacheTextureSampler1) SHADER_PARAMETER_SAMPLER(SamplerState, IndirectLightingCacheTextureSampler2) END_GLOBAL_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (typedef TUniformBuffer<FPrecomputedLightingUniformParameters> Super ; public : void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "GetIndirectLightingCacheParameters()",
    "kind": "Method",
    "detail": "Function (} ; TGlobalResource<FEmptyPrecomputedLightingUniformBuffer> GEmptyPrecomputedLightingUniformBuffer ; void)",
    "insertText": "GetIndirectLightingCacheParameters(ERHIFeatureLevel::Type FeatureLevel, FIndirectLightingCacheUniformParameters& Parameters, const class FIndirectLightingCache* LightingCache, const class FIndirectLightingCacheAllocation* LightingAllocation, FVector VolumetricLightmapLookupPosition, uint32 SceneFrameNumber, class FVolumetricLightmapSceneData* VolumetricLightmapSceneData)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (} ; TGlobalResource<FEmptyIndirectLightingCacheUniformBuffer> GEmptyIndirectLightingCacheUniformBuffer ; struct FNoLightMapPolicy { bool)",
    "insertText": "ShouldCompilePermutation(const FMeshMaterialShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FMaterialShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} ; enum ELightmapQuality { LQ_LIGHTMAP,HQ_LIGHTMAP,} ; namespace LightMapPolicyImpl { void)",
    "insertText": "ModifyCompilationEnvironment(ELightmapQuality LightmapQuality, const FMaterialShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(ELightmapQuality LightmapQuality, const FMeshMaterialShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(LightmapQuality, Parameters, OutEnvironment)"
  },
  {
    "label": "DECLARE_INLINE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class FSelfShadowedTranslucencyPolicy { public : typedef FRHIUniformBuffer* ElementDataType ; class VertexParametersType {)",
    "insertText": "DECLARE_INLINE_TYPE_LAYOUT(VertexParametersType, NonVirtual)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Bind(const FShaderParameterMap& ParameterMap)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "DECLARE_INLINE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} } ; class PixelParametersType {)",
    "insertText": "DECLARE_INLINE_TYPE_LAYOUT(PixelParametersType, NonVirtual)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (TranslucentSelfShadowBufferParameter .)",
    "insertText": "Bind(ParameterMap, TEXT(\"TranslucentSelfShadow\"))"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (Ar<<TranslucentSelfShadowBufferParameter ; })",
    "insertText": "LAYOUT_FIELD(FShaderUniformBufferParameter, TranslucentSelfShadowBufferParameter)"
  },
  {
    "label": "DECLARE_INLINE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class ComputeParametersType {)",
    "insertText": "DECLARE_INLINE_TYPE_LAYOUT(ComputeParametersType, NonVirtual)"
  },
  {
    "label": "FSelfShadowedTranslucencyPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSelfShadowedTranslucencyPolicy()"
  },
  {
    "label": "GetVertexShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVertexShaderBindings(const FPrimitiveSceneProxy* PrimitiveSceneProxy, const ElementDataType& ShaderElementData, const VertexParametersType* VertexShaderParameters, FMeshDrawSingleShaderBindings& ShaderBindings)"
  },
  {
    "label": "GetPixelShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPixelShaderBindings(const FPrimitiveSceneProxy* PrimitiveSceneProxy, const ElementDataType& ShaderElementData, const PixelParametersType* PixelShaderParameters, FMeshDrawSingleShaderBindings& ShaderBindings)"
  },
  {
    "label": "GetComputeShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeShaderBindings(const FPrimitiveSceneProxy* PrimitiveSceneProxy, const ElementDataType& ShaderElementData, const ComputeParametersType* ComputeShaderParameters, FMeshDrawSingleShaderBindings& ShaderBindings)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSelfShadowedTranslucencyPolicy A,const FSelfShadowedTranslucencyPolicy B)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; enum ELightMapPolicyType { LMP_NO_LIGHTMAP,LMP_PRECOMPUTED_IRRADIANCE_VOLUME_INDIRECT_LIGHTING,LMP_CACHED_VOLUME_INDIRECT_LIGHTING,LMP_CACHED_POINT_INDIRECT_LIGHTING,LMP_LQ_LIGHTMAP,LMP_HQ_LIGHTMAP,LMP_DISTANCE_FIELD_SHADOWS_AND_HQ_LIGHTMAP,LMP_MOBILE_DISTANCE_FIELD_SHADOWS_AND_LQ_LIGHTMAP,LMP_MOBILE_DISTANCE_FIELD_SHADOWS_LIGHTMAP_AND_CSM,LMP_MOBILE_DIRECTIONAL_LIGHT_CSM_AND_LIGHTMAP,LMP_MOBILE_DIRECTIONAL_LIGHT_AND_SH_INDIRECT,LMP_MOBILE_DIRECTIONAL_LIGHT_CSM_AND_SH_INDIRECT,LMP_MOBILE_DIRECTIONAL_LIGHT_CSM,LMP_DUMMY } ; class FUniformLightMapPolicyShaderParametersType {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FUniformLightMapPolicyShaderParametersType, NonVirtual)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (PrecomputedLightingBufferParameter .)",
    "insertText": "Bind(ParameterMap, TEXT(\"PrecomputedLightingBuffer\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (IndirectLightingCacheParameter .)",
    "insertText": "Bind(ParameterMap, TEXT(\"IndirectLightingCache\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (LightmapResourceCluster .)",
    "insertText": "Bind(ParameterMap, TEXT(\"LightmapResourceCluster\"))"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (Ar<<PrecomputedLightingBufferParameter ; Ar<<IndirectLightingCacheParameter ; Ar<<LightmapResourceCluster ; })",
    "insertText": "LAYOUT_FIELD(FShaderUniformBufferParameter, PrecomputedLightingBufferParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderUniformBufferParameter, IndirectLightingCacheParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderUniformBufferParameter, LightmapResourceCluster)"
  },
  {
    "label": "FUniformLightMapPolicy()",
    "kind": "Method",
    "detail": "Function (} ; class FUniformLightMapPolicy { public : typedef const FLightCacheInterface* ElementDataType ; typedef FUniformLightMapPolicyShaderParametersType PixelParametersType ; typedef FUniformLightMapPolicyShaderParametersType VertexParametersType ; # if RHI_RAYTRACING typedef FUniformLightMapPolicyShaderParametersType RayHitGroupParametersType ; # endif typedef FUniformLightMapPolicyShaderParametersType ComputeParametersType ;)",
    "insertText": "FUniformLightMapPolicy(ELightMapPolicyType InIndirectPolicy) : IndirectPolicy(InIndirectPolicy)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCompilePermutation(ELightMapPolicyType Policy, const FMeshMaterialShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(ELightMapPolicyType Policy, const FMaterialShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "GetRayHitGroupShaderBindings()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING void)",
    "insertText": "GetRayHitGroupShaderBindings(const FPrimitiveSceneProxy* PrimitiveSceneProxy, const FLightCacheInterface* ElementData, const RayHitGroupParametersType* RayHitGroupShaderParameters, FMeshDrawSingleShaderBindings& RayHitGroupBindings)"
  },
  {
    "label": "GetComputeShaderBindings()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetComputeShaderBindings(const FPrimitiveSceneProxy* PrimitiveSceneProxy, const ElementDataType& ShaderElementData, const ComputeParametersType* PixelShaderParameters, FMeshDrawSingleShaderBindings& ShaderBindings)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FUniformLightMapPolicy A,const FUniformLightMapPolicy B)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Policy, Parameters, OutEnvironment)"
  },
  {
    "label": "DECLARE_INLINE_TYPE_LAYOUT_EXPLICIT_BASES()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSelfShadowLightCacheElementData { const FLightCacheInterface* LCI ; FRHIUniformBuffer* SelfShadowTranslucencyUniformBuffer ; } ; class FSelfShadowedCachedPointIndirectLightingPolicy : public FSelfShadowedTranslucencyPolicy { public : typedef const FSelfShadowLightCacheElementData ElementDataType ; class PixelParametersType : public FUniformLightMapPolicyShaderParametersType,public FSelfShadowedTranslucencyPolicy::PixelParametersType {)",
    "insertText": "DECLARE_INLINE_TYPE_LAYOUT_EXPLICIT_BASES(PixelParametersType, NonVirtual, FUniformLightMapPolicyShaderParametersType, FSelfShadowedTranslucencyPolicy::PixelParametersType)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bind(ParameterMap)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "DECLARE_INLINE_TYPE_LAYOUT_EXPLICIT_BASES()",
    "kind": "Method",
    "detail": "Function (} } ; class ComputeParametersType : public FUniformLightMapPolicyShaderParametersType,public FSelfShadowedTranslucencyPolicy::ComputeParametersType {)",
    "insertText": "DECLARE_INLINE_TYPE_LAYOUT_EXPLICIT_BASES(ComputeParametersType, NonVirtual, FUniformLightMapPolicyShaderParametersType, FSelfShadowedTranslucencyPolicy::ComputeParametersType)"
  },
  {
    "label": "FSelfShadowedCachedPointIndirectLightingPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSelfShadowedCachedPointIndirectLightingPolicy()"
  },
  {
    "label": "FSelfShadowedVolumetricLightmapPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSelfShadowedVolumetricLightmapPolicy()"
  }
]