[
  {
    "label": "Location",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Location"
  },
  {
    "label": "SingleThreadTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SingleThreadTaskRunner"
  },
  {
    "label": "TimeDelta",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeDelta"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "TaskInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TaskInfo"
  },
  {
    "label": "OneShotEvent()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ONE_SHOT_EVENT_H_ # define BASE_ONE_SHOT_EVENT_H_ # include<vector> # include \" base / base_export . h \" # include \" base / callback_forward . h \" # include \" base / check . h \" # include \" base / memory / weak_ptr . h \" # include \" base / threading / thread_checker . h \" # include \" base / threading / thread_task_runner_handle . h \" namespace base { class Location ; class SingleThreadTaskRunner ; class TimeDelta ; class BASE_EXPORT OneShotEvent { public :)",
    "insertText": "OneShotEvent()"
  },
  {
    "label": "OneShotEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OneShotEvent(bool signaled)"
  },
  {
    "label": "is_signaled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_signaled()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(thread_checker_.CalledOnValidThread())"
  },
  {
    "label": "Post()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Post(const Location& from_here, OnceClosure task, scoped_refptr<SingleThreadTaskRunner> runner = ThreadTaskRunnerHandle::Get())"
  },
  {
    "label": "PostDelayed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDelayed(const Location& from_here, OnceClosure task, const TimeDelta& delay)"
  },
  {
    "label": "PostImpl()",
    "kind": "Method",
    "detail": "Function (private : struct TaskInfo ; void)",
    "insertText": "PostImpl(const Location& from_here, OnceClosure task, scoped_refptr<SingleThreadTaskRunner> runner, const TimeDelta& delay)"
  }
]