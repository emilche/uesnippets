[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "AsBool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Internationalization / Internationalization . h \" # include \" Internationalization / Text . h \" # include \" Misc / CString . h \" # include \" Templates / SharedPointer . h \" namespace UE::Insights { enum class ETableCellDataType : uint32 { Unknown,Bool,Int64,Float,Double,CString,Custom,Text,InvalidOrMax,} ; class ICustomTableCellValue { public : bool)",
    "insertText": "AsBool()"
  },
  {
    "label": "AsInt64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "AsInt64()"
  },
  {
    "label": "AsDouble()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "AsDouble()"
  },
  {
    "label": "AsText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsText()"
  },
  {
    "label": "FTextCustomTableCellValue()",
    "kind": "Method",
    "detail": "Function (} ; class FTextCustomTableCellValue : public ICustomTableCellValue { public :)",
    "insertText": "FTextCustomTableCellValue(const FText& InText) : Text(InText)"
  },
  {
    "label": "FTextCustomTableCellValue()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTextCustomTableCellValue()"
  },
  {
    "label": "FTableCellValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTableCellValue(bool Value) : DataType(ETableCellDataType::Bool), Bool(Value)"
  },
  {
    "label": "FTableCellValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTableCellValue(int64 Value) : DataType(ETableCellDataType::Int64), Int64(Value)"
  },
  {
    "label": "FTableCellValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTableCellValue(float Value) : DataType(ETableCellDataType::Float), Float(Value)"
  },
  {
    "label": "FTableCellValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTableCellValue(double Value) : DataType(ETableCellDataType::Double), Double(Value)"
  },
  {
    "label": "FTableCellValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTableCellValue(const TCHAR* Value) : DataType(ETableCellDataType::CString), CString(Value)"
  },
  {
    "label": "FTableCellValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTableCellValue(TSharedPtr<ICustomTableCellValue> Value, uint64 Id = 0) : DataType(ETableCellDataType::Custom), ValueId(Id), Custom(Value)"
  },
  {
    "label": "FTableCellValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTableCellValue(const FText& Value, uint64 Id = 0) : DataType(ETableCellDataType::Text), ValueId(Id), Custom(MakeShared<FTextCustomTableCellValue>(Value))"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (default : return Custom .)",
    "insertText": "IsValid() ? Custom->AsInt64()"
  },
  {
    "label": "AsFloat()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "AsFloat()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (default : return Custom .)",
    "insertText": "IsValid() ? static_cast<float>(Custom->AsDouble())"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (default : return Custom .)",
    "insertText": "IsValid() ? Custom->AsDouble()"
  },
  {
    "label": "AsString()",
    "kind": "Method",
    "detail": "Function (} } FString)",
    "insertText": "AsString()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (default : return Custom .)",
    "insertText": "IsValid() ? Custom->AsText().ToString() : FString()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (default : return Custom .)",
    "insertText": "IsValid() ? Custom->AsText() : FText::GetEmpty()"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (} } const FText&)",
    "insertText": "GetText()"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "GetValueId()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetValueId()"
  }
]