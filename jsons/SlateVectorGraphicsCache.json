[
  {
    "label": "ISlateTextureAtlasFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateTextureAtlasFactory"
  },
  {
    "label": "FSlateTextureAtlas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTextureAtlas"
  },
  {
    "label": "FSlateVectorGraphicsCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateVectorGraphicsCache"
  },
  {
    "label": "FVectorCacheKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorCacheKey"
  },
  {
    "label": "FRasterRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRasterRequest"
  },
  {
    "label": "FSlateVectorGraphicsCache()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Styling / SlateBrush . h \" # include \" Textures / TextureAtlas . h \" # include \" Types / SlateVector2 . h \" class ISlateTextureAtlasFactory ; class FSlateTextureAtlas ; class FSlateVectorGraphicsCache : public FSlateFlushableAtlasCache { public :)",
    "insertText": "FSlateVectorGraphicsCache(TSharedPtr<ISlateTextureAtlasFactory> InAtlasFactory)"
  },
  {
    "label": "GetShaderResource()",
    "kind": "Method",
    "detail": "Function (FSlateShaderResourceProxy*)",
    "insertText": "GetShaderResource(const FSlateBrush& Brush, FVector2f LocalSize, float DrawScale)"
  },
  {
    "label": "UpdateCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCache()"
  },
  {
    "label": "ConditionalFlushCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalFlushCache()"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources(bool bWaitForRelease = false)"
  },
  {
    "label": "DeleteResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteResources()"
  },
  {
    "label": "RequestFlushCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestFlushCache(const FString& Reason)"
  },
  {
    "label": "GetNumAtlasPages()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumAtlasPages()"
  },
  {
    "label": "GetAtlasPageResource()",
    "kind": "Method",
    "detail": "Function (} FSlateShaderResource*)",
    "insertText": "GetAtlasPageResource(const int32 InIndex)"
  },
  {
    "label": "IsAtlasPageResourceAlphaOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAtlasPageResourceAlphaOnly(const int32 InIndex)"
  },
  {
    "label": "GetAtlasDebugData()",
    "kind": "Method",
    "detail": "Function (} # if WITH_ATLAS_DEBUGGING FName)",
    "insertText": "GetAtlasDebugData(const FAtlasedTextureSlot* InSlot)"
  },
  {
    "label": "FlushCache()",
    "kind": "Method",
    "detail": "Function (} # endif private : void)",
    "insertText": "FlushCache()"
  },
  {
    "label": "FVectorCacheKey()",
    "kind": "Method",
    "detail": "Function (private : struct FVectorCacheKey { FName BrushName ; FIntPoint PixelSize ;)",
    "insertText": "FVectorCacheKey(FName InBrushName, FVector2f LocalSize, float DrawScale) : BrushName(InBrushName) , PixelSize((LocalSize*DrawScale).IntPoint())"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (KeyHash =)",
    "insertText": "HashCombine(GetTypeHash(BrushName), GetTypeHash(PixelSize))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FVectorCacheKey& Other)"
  }
]