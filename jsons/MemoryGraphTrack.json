[
  {
    "label": "FSlateFontMeasure",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateFontMeasure"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FMemorySharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemorySharedState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMemoryGraphSeries",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryGraphSeries"
  },
  {
    "label": "FMemoryGraphTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryGraphTrack"
  },
  {
    "label": "TDrawHorizontalAxisLabelParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDrawHorizontalAxisLabelParams"
  },
  {
    "label": "FormatValue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Color . h \" # include \" Insights / MemoryProfiler / ViewModels / MemoryTag . h \" # include \" Insights / MemoryProfiler / ViewModels / MemoryTracker . h \" # include \" Insights / ViewModels / GraphSeries . h \" # include \" Insights / ViewModels / GraphTrack . h \" class FSlateFontMeasure ; struct FSlateBrush ; namespace UE::Insights::MemoryProfiler { class FMemorySharedState ; enum class EGraphTrackLabelUnit { Auto,Byte,KiB,MiB,GiB,TiB,PiB,EiB,AutoCount,Count,} ; class FMemoryGraphSeries : public FGraphSeries { public : enum class ETimelineType { MemTag,MinTotalMem,MaxTotalMem,MinLiveAllocs,MaxLiveAllocs,MinSwapMem,MaxSwapMem,MinCompressedSwapMem,MaxCompressedSwapMem,AllocEvents,FreeEvents,PageInEvents,PageOutEvents,SwapFreeEvents } ; public : FString)",
    "insertText": "FormatValue(double Value)"
  },
  {
    "label": "GetTrackerId()",
    "kind": "Method",
    "detail": "Function (FMemoryTrackerId)",
    "insertText": "GetTrackerId()"
  },
  {
    "label": "GetTagId()",
    "kind": "Method",
    "detail": "Function (TrackerId = InTrackerId ; } FMemoryTagId)",
    "insertText": "GetTagId()"
  },
  {
    "label": "GetTimelineType()",
    "kind": "Method",
    "detail": "Function (TagId = InTagId ; } ETimelineType)",
    "insertText": "GetTimelineType()"
  },
  {
    "label": "GetMinValue()",
    "kind": "Method",
    "detail": "Function (TimelineType = InTimelineType ; } double)",
    "insertText": "GetMinValue()"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (MinValue = Min ; MaxValue = Max ; } private : FMemoryTrackerId TrackerId = FMemoryTracker::InvalidTrackerId ; FMemoryTagId TagId = FMemoryTag::InvalidTagId ; double MinValue = 0 . 0 ; double MaxValue = 0 . 0 ; ETimelineType TimelineType = ETimelineType::MemTag ; } ; enum class EMemoryTrackHeightMode { Small = 0,Medium,Large,Count } ; class FMemoryGraphTrack : public FGraphTrack {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FMemoryGraphTrack, FGraphTrack) public: FMemoryGraphTrack(FMemorySharedState& InSharedState)"
  },
  {
    "label": "FMemoryGraphTrack()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMemoryGraphTrack()"
  },
  {
    "label": "SetLabelUnit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLabelUnit(EGraphTrackLabelUnit InLabelUnit, int32 InLabelDecimalDigitCount)"
  },
  {
    "label": "IsAutoZoomEnabled()",
    "kind": "Method",
    "detail": "Function (LabelUnit = InLabelUnit ; LabelDecimalDigitCount = InLabelDecimalDigitCount ; } bool)",
    "insertText": "IsAutoZoomEnabled()"
  },
  {
    "label": "DisableAutoZoom()",
    "kind": "Method",
    "detail": "Function (bAutoZoom = true ; } void)",
    "insertText": "DisableAutoZoom()"
  },
  {
    "label": "SetAutoZoom()",
    "kind": "Method",
    "detail": "Function (bAutoZoom = false ; } void)",
    "insertText": "SetAutoZoom(bool bOnOff)"
  },
  {
    "label": "SetDefaultValueRange()",
    "kind": "Method",
    "detail": "Function (bAutoZoom = bOnOff ; } void)",
    "insertText": "SetDefaultValueRange(double InDefaultMinValue, double InDefaultMaxValue)"
  },
  {
    "label": "ResetDefaultValueRange()",
    "kind": "Method",
    "detail": "Function (DefaultMinValue = InDefaultMinValue ; DefaultMaxValue = InDefaultMaxValue ; } void)",
    "insertText": "ResetDefaultValueRange()"
  },
  {
    "label": "IsStacked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStacked()"
  },
  {
    "label": "GetMainSeries()",
    "kind": "Method",
    "detail": "Function (bIsStacked = bOnOff ; } TSharedPtr<FMemoryGraphSeries>)",
    "insertText": "GetMainSeries()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (MainSeries = InMainSeries ; } void)",
    "insertText": "Update(const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "InitTooltip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTooltip(FTooltipDrawState& InOutTooltip, const ITimingEvent& InTooltipEvent)"
  },
  {
    "label": "GetMemTagSeries()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMemoryGraphSeries>)",
    "insertText": "GetMemTagSeries(FMemoryTrackerId InMemTrackerId, FMemoryTagId InMemTagId)"
  },
  {
    "label": "AddMemTagSeries()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMemoryGraphSeries>)",
    "insertText": "AddMemTagSeries(FMemoryTrackerId InMemTrackerId, FMemoryTagId InMemTagId)"
  },
  {
    "label": "RemoveMemTagSeries()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveMemTagSeries(FMemoryTrackerId InMemTrackerId, FMemoryTagId InMemTagId)"
  },
  {
    "label": "RemoveAllMemTagSeries()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveAllMemTagSeries()"
  },
  {
    "label": "GetTimelineSeries()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMemoryGraphSeries>)",
    "insertText": "GetTimelineSeries(FMemoryGraphSeries::ETimelineType InTimelineType)"
  },
  {
    "label": "AddTimelineSeries()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMemoryGraphSeries>)",
    "insertText": "AddTimelineSeries(FMemoryGraphSeries::ETimelineType InTimelineType)"
  },
  {
    "label": "SetAvailableTrackHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAvailableTrackHeight(EMemoryTrackHeightMode InMode, float InTrackHeight)"
  },
  {
    "label": "SetCurrentTrackHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentTrackHeight(EMemoryTrackHeightMode InMode)"
  },
  {
    "label": "GetUnit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUnit(const EGraphTrackLabelUnit InLabelUnit, const double InPrecision, double& OutUnitValue, const TCHAR*& OutUnitText)"
  },
  {
    "label": "FormatValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FormatValue(const double InValue, const double InUnitValue, const TCHAR* InUnitText, const int32 InDecimalDigitCount)"
  },
  {
    "label": "PreUpdateMemTagSeries()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PreUpdateMemTagSeries(FMemoryGraphSeries& Series, const FTimingTrackViewport& Viewport)"
  },
  {
    "label": "UpdateMemTagSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMemTagSeries(FMemoryGraphSeries& Series, const FTimingTrackViewport& Viewport)"
  },
  {
    "label": "PreUpdateAllocationsTimelineSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreUpdateAllocationsTimelineSeries(FMemoryGraphSeries& Series, const FTimingTrackViewport& Viewport)"
  },
  {
    "label": "UpdateAllocationsTimelineSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllocationsTimelineSeries(FMemoryGraphSeries& Series, const FTimingTrackViewport& Viewport)"
  },
  {
    "label": "DrawVerticalAxisGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawVerticalAxisGrid(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "TDrawHorizontalAxisLabelParams()",
    "kind": "Method",
    "detail": "Function (struct TDrawHorizontalAxisLabelParams {)",
    "insertText": "TDrawHorizontalAxisLabelParams(FDrawContext& InDrawContext, const FSlateBrush* InBrush, const TSharedRef<FSlateFontMeasure>& InFontMeasureService) : DrawContext(InDrawContext), Brush(InBrush), FontMeasureService(InFontMeasureService)"
  },
  {
    "label": "DrawHorizontalAxisLabel()",
    "kind": "Method",
    "detail": "Function (} FDrawContext& DrawContext ; const FSlateBrush* Brush ; const TSharedRef<FSlateFontMeasure>& FontMeasureService ; FLinearColor TextBgColor ; FLinearColor TextColor ; float X ; float Y ; double Value ; double Precision ; bool bShowTextDetail ; FString Prefix ; } ; void)",
    "insertText": "DrawHorizontalAxisLabel(const TDrawHorizontalAxisLabelParams& Params)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (protected : FMemorySharedState& SharedState ; EGraphTrackLabelUnit LabelUnit ; int32 LabelDecimalDigitCount ; double DefaultMinValue ; double DefaultMaxValue ; double AllSeriesMinValue ; double AllSeriesMaxValue ; bool bAutoZoom ; float AvailableTrackHeights [ static_cast<)",
    "insertText": "uint32(EMemoryTrackHeightMode::Count)"
  }
]