[
  {
    "label": "from",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "from"
  },
  {
    "label": "saveBytesToFile()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<jni . h> # include<cstdio> # include<fstream> # include<sstream> # include<string> # include \" Log . h \" # ifndef ANDROIDGAMESDK_NO_BINARY_DEX_LINKAGE const char _binary_classes_dex_start ; const char _binary_classes_dex_end ; # endif namespace gamesdk { # ifndef ANDROIDGAMESDK_NO_BINARY_DEX_LINKAGE bool)",
    "insertText": "saveBytesToFile(std::string fileName, const char* bytes, size_t size)"
  },
  {
    "label": "save_file()",
    "kind": "Method",
    "detail": "Function (std::ofstream)",
    "insertText": "save_file(fileName, std::ios::binary)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (save_file .)",
    "insertText": "write(bytes, size)"
  },
  {
    "label": "GetObjectClass()",
    "kind": "Method",
    "detail": "Function (bool result = false ; jclass activityClass = env ->)",
    "insertText": "GetObjectClass(activity)"
  },
  {
    "label": "GetMethodID()",
    "kind": "Method",
    "detail": "Function (jmethodID getCacheDir = env ->)",
    "insertText": "GetMethodID(activityClass, \"getCacheDir\", \"()Ljava/io/File;\")"
  },
  {
    "label": "CallObjectMethod()",
    "kind": "Method",
    "detail": "Function (jobject cacheDir = env ->)",
    "insertText": "CallObjectMethod(activity, getCacheDir)"
  },
  {
    "label": "ExceptionDescribe()",
    "kind": "Method",
    "detail": "Function (env ->)",
    "insertText": "ExceptionDescribe()"
  },
  {
    "label": "ExceptionClear()",
    "kind": "Method",
    "detail": "Function (env ->)",
    "insertText": "ExceptionClear()"
  },
  {
    "label": "FindClass()",
    "kind": "Method",
    "detail": "Function (} else { jclass fileClass = env ->)",
    "insertText": "FindClass(\"java/io/File\")"
  },
  {
    "label": "GetStaticMethodID()",
    "kind": "Method",
    "detail": "Function (jmethodID createTempFile = env ->)",
    "insertText": "GetStaticMethodID(fileClass, \"createTempFile\", \"(Ljava/lang/String;Ljava/lang/String;Ljava/\" \"io/File;)Ljava/io/File;\")"
  },
  {
    "label": "NewStringUTF()",
    "kind": "Method",
    "detail": "Function (jstring prefix = env ->)",
    "insertText": "NewStringUTF(\"ags\")"
  },
  {
    "label": "NewStringUTF()",
    "kind": "Method",
    "detail": "Function (jstring suffix = env ->)",
    "insertText": "NewStringUTF(ext)"
  },
  {
    "label": "CallStaticObjectMethod()",
    "kind": "Method",
    "detail": "Function (jobject tempFile = env ->)",
    "insertText": "CallStaticObjectMethod(fileClass, createTempFile, prefix, suffix, cacheDir)"
  },
  {
    "label": "GetMethodID()",
    "kind": "Method",
    "detail": "Function (} else { jmethodID getPath = env ->)",
    "insertText": "GetMethodID(fileClass, \"getPath\", \"()Ljava/lang/String;\")"
  },
  {
    "label": "pathString()",
    "kind": "Method",
    "detail": "Function (jstring)",
    "insertText": "pathString(jstring)env->CallObjectMethod(tempFile, getPath)"
  },
  {
    "label": "GetStringUTFChars()",
    "kind": "Method",
    "detail": "Function (} else { const char* path = env ->)",
    "insertText": "GetStringUTFChars(pathString, NULL)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (tempFileName .)",
    "insertText": "assign(path)"
  },
  {
    "label": "ReleaseStringUTFChars()",
    "kind": "Method",
    "detail": "Function (env ->)",
    "insertText": "ReleaseStringUTFChars(pathString, path)"
  },
  {
    "label": "DeleteLocalRef()",
    "kind": "Method",
    "detail": "Function (result = true ; } } env ->)",
    "insertText": "DeleteLocalRef(prefix)"
  },
  {
    "label": "DeleteLocalRef()",
    "kind": "Method",
    "detail": "Function (env ->)",
    "insertText": "DeleteLocalRef(suffix)"
  },
  {
    "label": "loadClass()",
    "kind": "Method",
    "detail": "Function (} return result ; } # endif jclass)",
    "insertText": "loadClass(JNIEnv* env, jobject activity, const char* name, JNINativeMethod* nativeMethods, size_t nativeMethodsSize)"
  },
  {
    "label": "FindClass()",
    "kind": "Method",
    "detail": "Function (jclass classLoaderClass = env ->)",
    "insertText": "FindClass(\"java/lang/ClassLoader\")"
  },
  {
    "label": "GetMethodID()",
    "kind": "Method",
    "detail": "Function (jmethodID getClassLoader = env ->)",
    "insertText": "GetMethodID(activityClass, \"getClassLoader\", \"()Ljava/lang/ClassLoader;\")"
  },
  {
    "label": "CallObjectMethod()",
    "kind": "Method",
    "detail": "Function (jobject classLoaderObj = env ->)",
    "insertText": "CallObjectMethod(activity, getClassLoader)"
  },
  {
    "label": "GetMethodID()",
    "kind": "Method",
    "detail": "Function (jmethodID loadClass = env ->)",
    "insertText": "GetMethodID(classLoaderClass, \"loadClass\", \"(Ljava/lang/String;)Ljava/lang/Class;\")"
  },
  {
    "label": "NewStringUTF()",
    "kind": "Method",
    "detail": "Function (jstring className = env ->)",
    "insertText": "NewStringUTF(name)"
  },
  {
    "label": "jclass()",
    "kind": "Method",
    "detail": "Function (jclass targetClass = static_cast<)",
    "insertText": "jclass(env->CallObjectMethod(classLoaderObj, loadClass, className))"
  },
  {
    "label": "ALOGE()",
    "kind": "Method",
    "detail": "Function (# ifdef ANDROIDGAMESDK_NO_BINARY_DEX_LINKAGE)",
    "insertText": "ALOGE(\"Couldn't find class %s and ANDROIDGAMESDK_NO_BINARY_DEX_LINKAGE \" \"is defined\", name)"
  },
  {
    "label": "NewStringUTF()",
    "kind": "Method",
    "detail": "Function (# else jstring dexLoaderClassName = env ->)",
    "insertText": "NewStringUTF(\"dalvik/system/InMemoryDexClassLoader\")"
  },
  {
    "label": "jclass()",
    "kind": "Method",
    "detail": "Function (jclass imclassloaderClass = static_cast<)",
    "insertText": "jclass(env->CallObjectMethod( classLoaderObj, loadClass, dexLoaderClassName))"
  },
  {
    "label": "DeleteLocalRef()",
    "kind": "Method",
    "detail": "Function (env ->)",
    "insertText": "DeleteLocalRef(dexLoaderClassName)"
  },
  {
    "label": "NewStringUTF()",
    "kind": "Method",
    "detail": "Function (dexLoaderClassName = env ->)",
    "insertText": "NewStringUTF(\"dalvik/system/PathClassLoader\")"
  },
  {
    "label": "ALOGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALOGE(\"Unable to find dalvik/system/PathClassLoader.\")"
  },
  {
    "label": "GetMethodID()",
    "kind": "Method",
    "detail": "Function (targetClass = nullptr ; } else { jmethodID constructor = env ->)",
    "insertText": "GetMethodID(imclassloaderClass, \"<init>\", \"(Ljava/lang/String;Ljava/lang/ClassLoader;)V\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::string tempPath ;)",
    "insertText": "if(!createTempFile(env, activity, \".dex\", tempPath))"
  },
  {
    "label": "ALOGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALOGE(\"Unable to create a temporary file to store DEX with \" \"Java classes.\")"
  },
  {
    "label": "dex_file_size()",
    "kind": "Method",
    "detail": "Function (} else { size_t)",
    "insertText": "dex_file_size(size_t)(&_binary_classes_dex_end - &_binary_classes_dex_start)"
  },
  {
    "label": "ALOGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALOGE(\"Unable to write to %s file.\", tempPath.c_str())"
  },
  {
    "label": "NewStringUTF()",
    "kind": "Method",
    "detail": "Function (} else { jstring dexPathString = env ->)",
    "insertText": "NewStringUTF(tempPath.c_str())"
  },
  {
    "label": "NewObject()",
    "kind": "Method",
    "detail": "Function (jobject imclassloaderObj = env ->)",
    "insertText": "NewObject(imclassloaderClass, constructor, dexPathString, classLoaderObj)"
  },
  {
    "label": "DeleteLocalRef()",
    "kind": "Method",
    "detail": "Function (env ->)",
    "insertText": "DeleteLocalRef(dexPathString)"
  },
  {
    "label": "jclass()",
    "kind": "Method",
    "detail": "Function (targetClass = static_cast<)",
    "insertText": "jclass(env->CallObjectMethod( imclassloaderObj, loadClass, className))"
  },
  {
    "label": "ALOGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALOGE(\"Unable to find %s class\", name)"
  },
  {
    "label": "RegisterNatives()",
    "kind": "Method",
    "detail": "Function (} else { env ->)",
    "insertText": "RegisterNatives(targetClass, nativeMethods, nativeMethodsSize)"
  },
  {
    "label": "ALOGI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALOGI(\"Using internal %s class from dex bytes.\", name)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(imclassloaderObj)"
  },
  {
    "label": "DeleteLocalRef()",
    "kind": "Method",
    "detail": "Function (env ->)",
    "insertText": "DeleteLocalRef(imclassloaderObj)"
  },
  {
    "label": "deleteFile()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "deleteFile(tempPath)"
  },
  {
    "label": "GetMethodID()",
    "kind": "Method",
    "detail": "Function (} } } else { jmethodID constructor = env ->)",
    "insertText": "GetMethodID(imclassloaderClass, \"<init>\", \"(Ljava/nio/ByteBuffer;Ljava/lang/ClassLoader;)V\")"
  },
  {
    "label": "NewDirectByteBuffer()",
    "kind": "Method",
    "detail": "Function (auto byteBuffer = env ->)",
    "insertText": "NewDirectByteBuffer((void*)&_binary_classes_dex_start, dex_file_size)"
  },
  {
    "label": "NewObject()",
    "kind": "Method",
    "detail": "Function (jobject imclassloaderObj = env ->)",
    "insertText": "NewObject(imclassloaderClass, constructor, byteBuffer, classLoaderObj)"
  },
  {
    "label": "jclass()",
    "kind": "Method",
    "detail": "Function (targetClass = static_cast<)",
    "insertText": "jclass(env->CallObjectMethod(imclassloaderObj, loadClass, className))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(imclassloaderClass)"
  },
  {
    "label": "DeleteLocalRef()",
    "kind": "Method",
    "detail": "Function (env ->)",
    "insertText": "DeleteLocalRef(imclassloaderClass)"
  },
  {
    "label": "DeleteLocalRef()",
    "kind": "Method",
    "detail": "Function (} # endif } env ->)",
    "insertText": "DeleteLocalRef(className)"
  }
]