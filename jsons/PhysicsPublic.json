[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "ULineBatchComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULineBatchComponent"
  },
  {
    "label": "UPhysicalMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterial"
  },
  {
    "label": "UPhysicsAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsAsset"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FConstraintInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintInstance"
  },
  {
    "label": "FBodyInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyInstance"
  },
  {
    "label": "FStaticMeshVertexBuffers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshVertexBuffers"
  },
  {
    "label": "FPhysScene_PhysX",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysScene_PhysX"
  },
  {
    "label": "FLocalVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalVertexFactory"
  },
  {
    "label": "FDynamicMeshIndexBuffer32",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshIndexBuffer32"
  },
  {
    "label": "FPhysCommandHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysCommandHandler"
  },
  {
    "label": "FRigidBodyCollisionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRigidBodyCollisionInfo"
  },
  {
    "label": "FCollisionNotifyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionNotifyInfo"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FPhysPendingCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysPendingCommand"
  },
  {
    "label": "FKCachedConvexDataElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FKCachedConvexDataElement"
  },
  {
    "label": "FKCachedConvexData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FKCachedConvexData"
  },
  {
    "label": "FKCachedPerTriData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKCachedPerTriData"
  },
  {
    "label": "FKConvexGeomRenderInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FKConvexGeomRenderInfo"
  },
  {
    "label": "FPhysicsDelegates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsDelegates"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" Engine / EngineTypes . h \" # include \" Misc / CoreMisc . h \" # include \" Misc / App . h \" # include \" EngineDefines . h \" # include \" PhysicsInterfaceDeclaresCore . h \" # include \" PhysicsPublicCore . h \" class AActor ; class ULineBatchComponent ; class UPhysicalMaterial ; class UPhysicsAsset ; class UPrimitiveComponent ; class USkeletalMeshComponent ; struct FConstraintInstance ; struct FBodyInstance ; struct FStaticMeshVertexBuffers ; class FPhysScene_PhysX ; class FLocalVertexFactory ; class FDynamicMeshIndexBuffer32 ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FCalculateCustomPhysics, float, FBodyInstance*)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FCalculateCustomProjection, const FBodyInstance*, FTransform&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FRecalculatedMassProperties, FBodyInstance*)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"FetchAndStart Time (all)\"), STAT_TotalPhysicsTime, STATGROUP_Physics,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Cloth Actor Count\"), STAT_NumCloths, STATGROUP_Physics, ENGINE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Simulated Cloth Verts\"), STAT_NumClothVerts, STATGROUP_Physics, ENGINE_API)"
  },
  {
    "label": "FRigidBodyCollisionInfo()",
    "kind": "Method",
    "detail": "Function (class FPhysCommandHandler* GPhysCommandHandler ; struct FRigidBodyCollisionInfo { TWeakObjectPtr<AActor> Actor ; TWeakObjectPtr<UPrimitiveComponent> Component ; int32 BodyIndex ; FName BoneName ; FVector DeltaVelocity ;)",
    "insertText": "FRigidBodyCollisionInfo() : BodyIndex(INDEX_NONE), BoneName(NAME_None)"
  },
  {
    "label": "SetFrom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFrom(const FBodyInstance* BodyInst, const FVector& InDeltaVelocity = FVector::ZeroVector)"
  },
  {
    "label": "GetBodyInstance()",
    "kind": "Method",
    "detail": "Function (FBodyInstance*)",
    "insertText": "GetBodyInstance()"
  },
  {
    "label": "FCollisionNotifyInfo()",
    "kind": "Method",
    "detail": "Function (} ; struct FCollisionNotifyInfo { bool bCallEvent0 ; bool bCallEvent1 ; FRigidBodyCollisionInfo Info0 ; FRigidBodyCollisionInfo Info1 ; FCollisionImpactData RigidCollisionData ; Chaos::FReal SolverTime ;)",
    "insertText": "FCollisionNotifyInfo() : bCallEvent0(false), bCallEvent1(false), SolverTime((Chaos::FReal)0.0)"
  },
  {
    "label": "IsValidForNotify()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidForNotify()"
  },
  {
    "label": "FPhysCommandHandler()",
    "kind": "Method",
    "detail": "Function (} ; namespace PhysCommand { enum Type { Release,ReleasePScene,DeleteCPUDispatcher,DeleteSimEventCallback,DeleteContactModifyCallback,DeleteCCDContactModifyCallback,DeleteMbpBroadphaseCallback,Max } ; } class FPhysCommandHandler { public : ~)",
    "insertText": "FPhysCommandHandler()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "HasPendingCommands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingCommands()"
  },
  {
    "label": "ExecuteCommands()",
    "kind": "Method",
    "detail": "Function (private : struct FPhysPendingCommand { PhysCommand::Type CommandType ; } ; void)",
    "insertText": "ExecuteCommands()"
  },
  {
    "label": "EnqueueCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueCommand(const FPhysPendingCommand& Command)"
  },
  {
    "label": "ClearForces_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (TArray<FPhysPendingCommand> PendingCommands ; } ; void)",
    "insertText": "ClearForces_AssumesLocked(FBodyInstance* BodyInstance, bool bAllowSubstepping)"
  },
  {
    "label": "ClearTorques_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTorques_AssumesLocked(FBodyInstance* BodyInstance, bool bAllowSubstepping)"
  },
  {
    "label": "BulkSerialize()",
    "kind": "Method",
    "detail": "Function (S . ConvexElementData .)",
    "insertText": "BulkSerialize(Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<S . CachedConvexElements ; return Ar ; } } ; struct FKCachedPerTriData { TArray<uint8> CachedPerTriData ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FKCachedPerTriData& S)"
  },
  {
    "label": "HasValidGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidGeometry()"
  },
  {
    "label": "InitGamePhys()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "InitGamePhys()"
  },
  {
    "label": "TermGamePhys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TermGamePhys()"
  },
  {
    "label": "DeferredPhysResourceCleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferredPhysResourceCleanup()"
  },
  {
    "label": "FindBodyTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "FindBodyTransform(AActor* Actor, FName BoneName)"
  },
  {
    "label": "FindBodyBox()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "FindBodyBox(AActor* Actor, FName BoneName)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (class FPhysicsDelegates : public FPhysicsDelegatesCore { public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnPhysicsAssetChanged, const UPhysicsAsset*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnPhysicsAssetChanged OnPhysicsAssetChanged ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnPhysSceneInit, FPhysScene*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnPhysSceneInit OnPhysSceneInit ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnPhysSceneTerm, FPhysScene*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnPhysSceneTerm OnPhysSceneTerm ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnPhysDispatchNotifications, FPhysScene*)"
  }
]