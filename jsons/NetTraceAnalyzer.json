[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "IFrameProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFrameProvider"
  },
  {
    "label": "FNetTraceAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTraceAnalyzer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBunchInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBunchInfo"
  },
  {
    "label": "FNetTraceConnectionState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetTraceConnectionState"
  },
  {
    "label": "FNetTraceActiveObjectState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetTraceActiveObjectState"
  },
  {
    "label": "FNetTraceGameInstanceState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetTraceGameInstanceState"
  },
  {
    "label": "FNetTraceAnalyzer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" Templates / SharedPointer . h \" # include \" Model / NetProfilerProvider . h \" # include \" Trace / Analyzer . h \" namespace TraceServices { class IAnalysisSession ; class IFrameProvider ; class FNetTraceAnalyzer : public UE::Trace::IAnalyzer { public :)",
    "insertText": "FNetTraceAnalyzer(IAnalysisSession& Session, FNetProfilerProvider& NetProfilerProvider)"
  },
  {
    "label": "OnAnalysisBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisBegin(const FOnAnalysisContext& Context)"
  },
  {
    "label": "OnEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnEvent(uint16 RouteId, EStyle Style, const FOnEventContext& Context)"
  },
  {
    "label": "OnAnalysisEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisEnd()"
  },
  {
    "label": "GetTracedEventTypeIndex()",
    "kind": "Method",
    "detail": "Function (private : enum : uint16 { RouteId_InitEvent,RouteId_InstanceDestroyedEvent,RouteId_NameEvent,RouteId_PacketContentEvent,RouteId_PacketEvent,RouteId_PacketDroppedEvent,RouteId_ConnectionCreatedEvent,RouteId_ConnectionUpdatedEvent,RouteId_ConnectionClosedEvent,RouteId_PacketStatsCounterEvent,RouteId_FrameStatsCounterEvent,RouteId_ObjectCreatedEvent,RouteId_ObjectDestroyedEvent,RouteId_ConnectionStateUpdatedEvent,RouteId_InstanceUpdatedEvent,} ; enum class EContentEventType : uint8 { Object = 0,NameId = 1,BunchEvent = 2,BunchHeaderEvent = 3,} ; IAnalysisSession& Session ; FNetProfilerProvider& NetProfilerProvider ; const IFrameProvider& FrameProvider ; uint32 NetTraceVersion ; uint32 NetTraceReporterVersion ; uint32 BunchHeaderNameIndex ; uint32 PendingNameIndex ; TMap<uint16,uint32> TracedNameIdToNetProfilerNameIdMap ; TMap<uint32,uint32> TraceEventTypeToNetProfilerEventTypeIndexMap ; TMap<uint16,uint32> TraceNetStatsCounterIdToNetProfilerStatsCounterTypeIndexMap ; struct FBunchInfo { FNetProfilerBunchInfo BunchInfo ; uint32 BunchBits ; uint32 HeaderBits ; int32 FirstBunchEventIndex ; uint32 EventCount ; uint16 NameIndex ; } ; struct FNetTraceConnectionState { uint32 ConnectionIndex ; uint32 CurrentPacketStartIndex [ ENetProfilerConnectionMode::Count ] ; uint32 CurrentPacketBitOffset [ ENetProfilerConnectionMode::Count ] ; uint32 CurrentPacketStatsStartIndex [ ENetProfilerConnectionMode::Count ] ; TArray<FNetProfilerStats> PacketStats ; TArray<FNetProfilerContentEvent> BunchEvents [ ENetProfilerConnectionMode::Count ] ; TArray<FBunchInfo> BunchInfos [ ENetProfilerConnectionMode::Count ] ; ENetProfilerConnectionState ConnectionState ; } ; struct FNetTraceActiveObjectState { uint32 ObjectIndex ; uint32 NameIndex ; } ; struct FNetTraceGameInstanceState { TMap<uint32,TSharedRef<FNetTraceConnectionState>> ActiveConnections ; TMap<uint64,FNetTraceActiveObjectState> ActiveObjects ; TMap<int32,uint32> ChannelNames ; TArray<FNetProfilerStats> FrameStatsCounters ; uint32 CurrentEngineFrameIndex = 0 ; uint32 CurrentNetProfilerFrameIndex = 0 ; uint32 GameInstanceIndex ; } ; private : uint32)",
    "insertText": "GetTracedEventTypeIndex(uint16 NameIndex, uint8 Level)"
  },
  {
    "label": "GetOrCreateNetProfilerStatsCounterTypeIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetOrCreateNetProfilerStatsCounterTypeIndex(uint32 NameId, ENetProfilerStatsCounterType StatsType)"
  },
  {
    "label": "GetOrCreateActiveGameInstanceState()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FNetTraceGameInstanceState>)",
    "insertText": "GetOrCreateActiveGameInstanceState(uint32 GameInstanceId)"
  },
  {
    "label": "DestroyActiveGameInstanceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyActiveGameInstanceState(uint32 GameInstanceId)"
  },
  {
    "label": "GetActiveConnectionState()",
    "kind": "Method",
    "detail": "Function (FNetTraceConnectionState*)",
    "insertText": "GetActiveConnectionState(uint32 GameInstanceId, uint32 ConnectionId)"
  },
  {
    "label": "GetLastTimestamp()",
    "kind": "Method",
    "detail": "Function (FNetProfilerTimeStamp)",
    "insertText": "GetLastTimestamp()"
  },
  {
    "label": "FlushFrameStatsCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushFrameStatsCounters(FNetTraceGameInstanceState& GameInstanceState)"
  },
  {
    "label": "GetCurrentNetProfilerFrameIndexAndFlushFrameStatsCountersIfNeeded()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCurrentNetProfilerFrameIndexAndFlushFrameStatsCountersIfNeeded(uint32 GameInstanceId, uint32 EngineFrameIndex)"
  },
  {
    "label": "HandlePacketEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePacketEvent(const FOnEventContext& Context, const FEventData& EventData)"
  },
  {
    "label": "HandlePacketContentEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePacketContentEvent(const FOnEventContext& Context, const FEventData& EventData)"
  },
  {
    "label": "HandlePacketDroppedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePacketDroppedEvent(const FOnEventContext& Context, const FEventData& EventData)"
  },
  {
    "label": "HandleConnectionStateUpdatedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConnectionStateUpdatedEvent(const FOnEventContext& Context, const FEventData& EventData)"
  },
  {
    "label": "HandleConnectionCreatedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConnectionCreatedEvent(const FOnEventContext& Context, const FEventData& EventData)"
  },
  {
    "label": "HandleConnectionUpdatedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConnectionUpdatedEvent(const FOnEventContext& Context, const FEventData& EventData)"
  },
  {
    "label": "HandleConnectionClosedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConnectionClosedEvent(const FOnEventContext& Context, const FEventData& EventData)"
  },
  {
    "label": "HandleFrameStatsCounterEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFrameStatsCounterEvent(const FOnEventContext& Context, const FEventData& EventData)"
  },
  {
    "label": "HandlePacketStatsCounterEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePacketStatsCounterEvent(const FOnEventContext& Context, const FEventData& EventData)"
  },
  {
    "label": "HandleObjectCreatedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectCreatedEvent(const FOnEventContext& Context, const FEventData& EventData)"
  },
  {
    "label": "HandleObjectDestroyedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectDestroyedEvent(const FOnEventContext& Context, const FEventData& EventData)"
  },
  {
    "label": "HandleGameInstanceUpdatedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleGameInstanceUpdatedEvent(const FOnEventContext& Context, const FEventData& EventData)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(TPagedArray<FNetProfilerContentEvent>& Events, const FNetProfilerContentEvent& Event, uint32 Offset, uint32 LevelOffset)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(TPagedArray<FNetProfilerContentEvent>& Events, uint32 StartPos, uint32 EndPos, uint32 Level, uint32 NameIndex, FNetProfilerBunchInfo Info)"
  }
]