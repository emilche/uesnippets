[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SVirtualKeyboardEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVirtualKeyboardEntry"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Styling / SlateColor . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SLeafWidget . h \" # include \" Styling / CoreStyle . h \" # include \" Framework / SlateDelegates . h \" # include \" Widgets / Input / IVirtualKeyboardEntry . h \" # include \" Framework / Layout / SlateScrollHelper . h \" class FPaintArgs ; class FSlateWindowElementList ; class SVirtualKeyboardEntry : public SLeafWidget,public IVirtualKeyboardEntry { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SVirtualKeyboardEntry ) : _Text() , _HintText() , _Font( FCoreStyle::Get().GetFontStyle(\"NormalFont\") ) , _ColorAndOpacity( FSlateColor::UseForeground() ) , _IsReadOnly( false ) , _ClearKeyboardFocusOnCommit( true ) , _MinDesiredWidth( 0.0f ) , _KeyboardType ( EKeyboardType::Keyboard_Default ) , _VirtualKeyboardOptions ( FVirtualKeyboardOptions())"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FText, Text ) SLATE_ATTRIBUTE( FText, HintText ) SLATE_ATTRIBUTE( FSlateFontInfo, Font ) SLATE_ATTRIBUTE( FSlateColor, ColorAndOpacity ) SLATE_ATTRIBUTE( bool, IsReadOnly ) SLATE_ATTRIBUTE( bool, ClearKeyboardFocusOnCommit ) SLATE_EVENT( FOnTextChanged, OnTextChanged ) SLATE_EVENT( FOnTextCommitted, OnTextCommitted ) SLATE_ATTRIBUTE( float, MinDesiredWidth ) SLATE_ATTRIBUTE( EKeyboardType, KeyboardType ) SLATE_ARGUMENT( FVirtualKeyboardOptions, VirtualKeyboardOptions ) SLATE_END_ARGS() SLATE_API SVirtualKeyboardEntry()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "RestoreOriginalText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreOriginalText()"
  },
  {
    "label": "HasTextChangedFromOriginal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTextChangedFromOriginal()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const TAttribute< FText >& InNewText)"
  },
  {
    "label": "SetFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFont(const TAttribute< FSlateFontInfo >& InNewFont)"
  },
  {
    "label": "GetIsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsReadOnly()"
  },
  {
    "label": "SetTextFromVirtualKeyboard()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetTextFromVirtualKeyboard(const FText& InNewText, ETextEntryType TextEntryType)"
  },
  {
    "label": "SetSelectionFromVirtualKeyboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionFromVirtualKeyboard(int InSelStart, int InSelEnd)"
  },
  {
    "label": "GetSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSelection(int& OutSelStart, int& OutSelEnd)"
  },
  {
    "label": "GetHintText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetHintText()"
  },
  {
    "label": "GetVirtualKeyboardType()",
    "kind": "Method",
    "detail": "Function (} EKeyboardType)",
    "insertText": "GetVirtualKeyboardType()"
  },
  {
    "label": "GetVirtualKeyboardOptions()",
    "kind": "Method",
    "detail": "Function (} FVirtualKeyboardOptions)",
    "insertText": "GetVirtualKeyboardOptions()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "GetStringToRender()",
    "kind": "Method",
    "detail": "Function (private : FString)",
    "insertText": "GetStringToRender()"
  }
]