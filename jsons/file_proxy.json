[
  {
    "label": "TaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskRunner"
  },
  {
    "label": "Time",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Time"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FileHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileHelper"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FILES_FILE_PROXY_H_ # define BASE_FILES_FILE_PROXY_H_ # include<stdint . h> # include \" base / base_export . h \" # include \" base / callback_forward . h \" # include \" base / files / file . h \" # include \" base / files / file_path . h \" # include \" base / memory / weak_ptr . h \" namespace base { class TaskRunner ; class Time ; class BASE_EXPORT FileProxy : public SupportsWeakPtr<FileProxy> { public : using StatusCallback = OnceCallback<)",
    "insertText": "void(File::Error)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using CreateTemporaryCallback = OnceCallback<)",
    "insertText": "void(File::Error, const FilePath&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using GetFileInfoCallback = OnceCallback<)",
    "insertText": "void(File::Error, const File::Info&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using ReadCallback = OnceCallback<)",
    "insertText": "void(File::Error, const char* data, int bytes_read)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using WriteCallback = OnceCallback<)",
    "insertText": "void(File::Error, int bytes_written)"
  },
  {
    "label": "FileProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileProxy(TaskRunner* task_runner)"
  },
  {
    "label": "FileProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileProxy(const FileProxy&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FileProxy&)",
    "insertText": "operator(const FileProxy&)"
  },
  {
    "label": "FileProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FileProxy()"
  },
  {
    "label": "CreateOrOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateOrOpen(const FilePath& file_path, uint32_t file_flags, StatusCallback callback)"
  },
  {
    "label": "CreateTemporary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateTemporary(uint32_t additional_file_flags, CreateTemporaryCallback callback)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "created()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "created()"
  },
  {
    "label": "SetFile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFile(File file)"
  },
  {
    "label": "TakeFile()",
    "kind": "Method",
    "detail": "Function (File)",
    "insertText": "TakeFile()"
  },
  {
    "label": "DuplicateFile()",
    "kind": "Method",
    "detail": "Function (File)",
    "insertText": "DuplicateFile()"
  },
  {
    "label": "GetPlatformFile()",
    "kind": "Method",
    "detail": "Function (PlatformFile)",
    "insertText": "GetPlatformFile()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Close(StatusCallback callback)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInfo(GetFileInfoCallback callback)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(int64_t offset, int bytes_to_read, ReadCallback callback)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(int64_t offset, const char* buffer, int bytes_to_write, WriteCallback callback)"
  },
  {
    "label": "SetTimes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetTimes(Time last_access_time, Time last_modified_time, StatusCallback callback)"
  },
  {
    "label": "SetLength()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLength(int64_t length, StatusCallback callback)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Flush(StatusCallback callback)"
  },
  {
    "label": "task_runner()",
    "kind": "Method",
    "detail": "Function (private : class FileHelper ; TaskRunner*)",
    "insertText": "task_runner()"
  }
]