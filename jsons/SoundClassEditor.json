[
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "USoundClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundClass"
  },
  {
    "label": "FAudioDebugger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDebugger"
  },
  {
    "label": "FSoundClassEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundClassEditor"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioDefines . h \" # include \" CoreMinimal . h \" # include \" UObject / GCObject . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Toolkits / IToolkitHost . h \" # include \" EditorUndoClient . h \" # include \" GraphEditor . h \" # include \" ISoundClassEditor . h \" class IDetailsView ; class UEdGraph ; class USoundClass ; namespace Audio { class FAudioDebugger ; } class FSoundClassEditor : public ISoundClassEditor,public FGCObject,public FEditorUndoClient { public :)",
    "insertText": "SLATE_BEGIN_ARGS(FSoundClassEditor)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() virtual void RegisterTabSpawners(const TSharedRef<class FTabManager>& TabManager)"
  },
  {
    "label": "UnregisterTabSpawners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTabSpawners(const TSharedRef<class FTabManager>& TabManager)"
  },
  {
    "label": "InitSoundClassEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSoundClassEditor(const EToolkitMode::Type Mode, const TSharedPtr< class IToolkitHost >& InitToolkitHost, UObject* ObjectToEdit)"
  },
  {
    "label": "FSoundClassEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoundClassEditor()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "GetToolkitFName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetToolkitFName()"
  },
  {
    "label": "GetBaseToolkitName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBaseToolkitName()"
  },
  {
    "label": "GetWorldCentricTabPrefix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorldCentricTabPrefix()"
  },
  {
    "label": "GetWorldCentricTabColorScale()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetWorldCentricTabColorScale()"
  },
  {
    "label": "CreateSoundClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSoundClass(class UEdGraphPin* FromPin, const FVector2D& Location, const FString& Name)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bSuccess)"
  },
  {
    "label": "SpawnTab_GraphCanvas()",
    "kind": "Method",
    "detail": "Function (} private : TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_GraphCanvas(const FSpawnTabArgs& Args)"
  },
  {
    "label": "SpawnTab_Properties()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_Properties(const FSpawnTabArgs& Args)"
  },
  {
    "label": "CreateInternalWidgets()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateInternalWidgets()"
  },
  {
    "label": "CreateGraphEditorWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SGraphEditor>)",
    "insertText": "CreateGraphEditorWidget()"
  },
  {
    "label": "OnSelectedNodesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedNodesChanged(const TSet<class UObject*>& NewSelection)"
  },
  {
    "label": "OnCreateGraphActionMenu()",
    "kind": "Method",
    "detail": "Function (FActionMenuContent)",
    "insertText": "OnCreateGraphActionMenu(UEdGraph* InGraph, const FVector2D& InNodePosition, const TArray<UEdGraphPin*>& InDraggedPins, bool bAutoExpand, SGraphEditor::FActionMenuClosed InOnMenuClosed)"
  },
  {
    "label": "SelectAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllNodes()"
  },
  {
    "label": "CanSelectAllNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectAllNodes()"
  },
  {
    "label": "RemoveSelectedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSelectedNodes()"
  },
  {
    "label": "CanRemoveNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRemoveNodes()"
  },
  {
    "label": "UndoGraphAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UndoGraphAction()"
  },
  {
    "label": "RedoGraphAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedoGraphAction()"
  },
  {
    "label": "ToggleSolo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSolo()"
  },
  {
    "label": "CanExcuteToggleSolo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExcuteToggleSolo()"
  },
  {
    "label": "IsSoloToggled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSoloToggled()"
  },
  {
    "label": "ToggleMute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleMute()"
  },
  {
    "label": "CanExcuteToggleMute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExcuteToggleMute()"
  },
  {
    "label": "IsMuteToggled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMuteToggled()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (private : TObjectPtr<USoundClass> SoundClass ; TSharedPtr<SGraphEditor> GraphEditor ; TSharedPtr<class IDetailsView> DetailsView ; TSharedPtr<FUICommandList> GraphEditorCommands ; # if ENABLE_AUDIO_DEBUG Audio::FAudioDebugger* Debugger ; # endif const FName GraphCanvasTabId ; const FName PropertiesTabId ; void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "ExtendToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendToolbar()"
  }
]