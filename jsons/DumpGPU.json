[
  {
    "label": "IDumpGPUUploadServiceProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDumpGPUUploadServiceProvider"
  },
  {
    "label": "FDumpParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDumpParameters"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / Build . h \" # include \" Misc / WildcardString . h \" # include \" UObject / NameTypes . h \" class IDumpGPUUploadServiceProvider { public : struct FDumpParameters { const TCHAR* kServiceFileName =)",
    "insertText": "TEXT(\"Base/DumpService.json\")"
  },
  {
    "label": "DumpServiceParametersFileContent()",
    "kind": "Method",
    "detail": "Function (FString Type ; FString LocalPath ; FString Time ; FName CompressionName ; FWildcardString CompressionFiles ; FString)",
    "insertText": "DumpServiceParametersFileContent()"
  },
  {
    "label": "DumpServiceParametersFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DumpServiceParametersFile()"
  },
  {
    "label": "UploadDump()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "UploadDump(const FDumpParameters& Parameters)"
  },
  {
    "label": "IDumpGPUUploadServiceProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IDumpGPUUploadServiceProvider()"
  },
  {
    "label": "TickEndFrame()",
    "kind": "Method",
    "detail": "Function (IDumpGPUUploadServiceProvider* GProvider ; } ; # if WITH_DUMPGPU namespace UE::RenderCore::DumpGPU { void)",
    "insertText": "TickEndFrame()"
  },
  {
    "label": "IsDumpingFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDumpingFrame()"
  },
  {
    "label": "ShouldCameraCut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCameraCut()"
  }
]