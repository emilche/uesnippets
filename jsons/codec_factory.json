[
  {
    "label": "CodecFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CodecFactory"
  },
  {
    "label": "T1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T1"
  },
  {
    "label": "CodecTestWithParam",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CodecTestWithParam"
  },
  {
    "label": "T2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T2"
  },
  {
    "label": "CodecTestWith2Params",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CodecTestWith2Params"
  },
  {
    "label": "T3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T3"
  },
  {
    "label": "CodecTestWith3Params",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CodecTestWith3Params"
  },
  {
    "label": "T4",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T4"
  },
  {
    "label": "CodecTestWith4Params",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CodecTestWith4Params"
  },
  {
    "label": "VP8Decoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VP8Decoder"
  },
  {
    "label": "VP8Encoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VP8Encoder"
  },
  {
    "label": "VP8CodecFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VP8CodecFactory"
  },
  {
    "label": "VP9Decoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VP9Decoder"
  },
  {
    "label": "VP9Encoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VP9Encoder"
  },
  {
    "label": "VP9CodecFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VP9CodecFactory"
  },
  {
    "label": "CodecFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_TEST_CODEC_FACTORY_H_ # define VPX_TEST_CODEC_FACTORY_H_ # include<tuple> # include \" . / vpx_config . h \" # include \" vpx / vpx_decoder . h \" # include \" vpx / vpx_encoder . h \" # if CONFIG_VP8_ENCODER | | CONFIG_VP9_ENCODER # include \" vpx / vp8cx . h \" # endif # if CONFIG_VP8_DECODER | | CONFIG_VP9_DECODER # include \" vpx / vp8dx . h \" # endif # include \" test / decode_test_driver . h \" # include \" test / encode_test_driver . h \" namespace libvpx_test { const int kCodecFactoryParam = 0 ; class CodecFactory { public :)",
    "insertText": "CodecFactory()"
  },
  {
    "label": "CreateDecoder()",
    "kind": "Method",
    "detail": "Function (} Decoder*)",
    "insertText": "CreateDecoder(vpx_codec_dec_cfg_t cfg)"
  },
  {
    "label": "CreateDecoder()",
    "kind": "Method",
    "detail": "Function (Decoder*)",
    "insertText": "CreateDecoder(vpx_codec_dec_cfg_t cfg, const vpx_codec_flags_t flags)"
  },
  {
    "label": "CreateEncoder()",
    "kind": "Method",
    "detail": "Function (Encoder*)",
    "insertText": "CreateEncoder(vpx_codec_enc_cfg_t cfg, unsigned long deadline, const unsigned long init_flags, TwopassStatsStore *stats)"
  },
  {
    "label": "DefaultEncoderConfig()",
    "kind": "Method",
    "detail": "Function (vpx_codec_err_t)",
    "insertText": "DefaultEncoderConfig(vpx_codec_enc_cfg_t *cfg, int usage)"
  },
  {
    "label": "VP8Decoder()",
    "kind": "Method",
    "detail": "Function (} ; template<class T1> class CodecTestWithParam : public::testing::TestWithParam<std::tuple<const libvpx_test::CodecFactory*,T1>> { } ; template<class T1,class T2> class CodecTestWith2Params : public::testing::TestWithParam<std::tuple<const libvpx_test::CodecFactory*,T1,T2>> { } ; template<class T1,class T2,class T3> class CodecTestWith3Params : public::testing::TestWithParam<std::tuple<const libvpx_test::CodecFactory*,T1,T2,T3>> { } ; template<class T1,class T2,class T3,class T4> class CodecTestWith4Params : public::testing::TestWithParam<std::tuple<const libvpx_test::CodecFactory*,T1,T2,T3,T4>> { } ; # if CONFIG_VP8 class VP8Decoder : public Decoder { public :)",
    "insertText": "VP8Decoder(vpx_codec_dec_cfg_t cfg) : Decoder(cfg)"
  },
  {
    "label": "VP8Decoder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VP8Decoder(vpx_codec_dec_cfg_t cfg, const vpx_codec_flags_t flag) : Decoder(cfg, flag)"
  },
  {
    "label": "CodecInterface()",
    "kind": "Method",
    "detail": "Function (} protected : vpx_codec_iface_t*)",
    "insertText": "CodecInterface()"
  },
  {
    "label": "VP8Encoder()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP8_DECODER return& vpx_codec_vp8_dx_algo ; # else return nullptr ; # endif } } ; class VP8Encoder : public Encoder { public :)",
    "insertText": "VP8Encoder(vpx_codec_enc_cfg_t cfg, unsigned long deadline, const unsigned long init_flags, TwopassStatsStore *stats) : Encoder(cfg, deadline, init_flags, stats)"
  },
  {
    "label": "VP8CodecFactory()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP8_ENCODER return& vpx_codec_vp8_cx_algo ; # else return nullptr ; # endif } } ; class VP8CodecFactory : public CodecFactory { public :)",
    "insertText": "VP8CodecFactory() : CodecFactory()"
  },
  {
    "label": "VP8Decoder()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP8_DECODER return new)",
    "insertText": "VP8Decoder(cfg, flags)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "else(void)"
  },
  {
    "label": "VP8Encoder()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP8_ENCODER return new)",
    "insertText": "VP8Encoder(cfg, deadline, init_flags, stats)"
  },
  {
    "label": "vpx_codec_enc_config_default()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP8_ENCODER return)",
    "insertText": "vpx_codec_enc_config_default(&vpx_codec_vp8_cx_algo, cfg, usage)"
  },
  {
    "label": "VP9Decoder()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "VP9Decoder(vpx_codec_dec_cfg_t cfg) : Decoder(cfg)"
  },
  {
    "label": "VP9Decoder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VP9Decoder(vpx_codec_dec_cfg_t cfg, const vpx_codec_flags_t flag) : Decoder(cfg, flag)"
  },
  {
    "label": "VP9Encoder()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_DECODER return& vpx_codec_vp9_dx_algo ; # else return nullptr ; # endif } } ; class VP9Encoder : public Encoder { public :)",
    "insertText": "VP9Encoder(vpx_codec_enc_cfg_t cfg, unsigned long deadline, const unsigned long init_flags, TwopassStatsStore *stats) : Encoder(cfg, deadline, init_flags, stats)"
  },
  {
    "label": "VP9CodecFactory()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_ENCODER return& vpx_codec_vp9_cx_algo ; # else return nullptr ; # endif } } ; class VP9CodecFactory : public CodecFactory { public :)",
    "insertText": "VP9CodecFactory() : CodecFactory()"
  },
  {
    "label": "VP9Decoder()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_DECODER return new)",
    "insertText": "VP9Decoder(cfg, flags)"
  },
  {
    "label": "VP9Encoder()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_ENCODER return new)",
    "insertText": "VP9Encoder(cfg, deadline, init_flags, stats)"
  },
  {
    "label": "vpx_codec_enc_config_default()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_ENCODER return)",
    "insertText": "vpx_codec_enc_config_default(&vpx_codec_vp9_cx_algo, cfg, usage)"
  }
]