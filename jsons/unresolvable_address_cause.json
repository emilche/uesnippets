[
  {
    "label": "UnresolvableAddressCauseConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnresolvableAddressCauseConfig"
  },
  {
    "label": "UnresolvableAddressCause",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnresolvableAddressCause"
  },
  {
    "label": "UnresolvableAddressCause()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PACKET_ERROR_CAUSE_UNRESOLVABLE_ADDRESS_CAUSE_H_ # define NET_DCSCTP_PACKET_ERROR_CAUSE_UNRESOLVABLE_ADDRESS_CAUSE_H_ # include<stddef . h> # include<stdint . h> # include<cstdint> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" net / dcsctp / packet / error_cause / error_cause . h \" # include \" net / dcsctp / packet / tlv_trait . h \" namespace dcsctp { struct UnresolvableAddressCauseConfig : public ParameterConfig { int kType = 5 ; size_t kHeaderSize = 4 ; size_t kVariableLengthAlignment = 1 ; } ; class UnresolvableAddressCause : public Parameter,public TLVTrait<UnresolvableAddressCauseConfig> { public : int kType = UnresolvableAddressCauseConfig::kType ;)",
    "insertText": "UnresolvableAddressCause(rtc::ArrayView<const uint8_t> unresolvable_address) : unresolvable_address_(unresolvable_address.begin(), unresolvable_address.end())"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} absl::optional<UnresolvableAddressCause>)",
    "insertText": "Parse(rtc::ArrayView<const uint8_t> data)"
  },
  {
    "label": "SerializeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeTo(std::vector<uint8_t>& out)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "unresolvable_address()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const uint8_t>)",
    "insertText": "unresolvable_address()"
  }
]