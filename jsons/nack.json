[
  {
    "label": "CommonHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommonHeader"
  },
  {
    "label": "Nack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Nack"
  },
  {
    "label": "PackedNack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PackedNack"
  },
  {
    "label": "Nack()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_NACK_H_ # define MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_NACK_H_ # include<vector> # include \" modules / rtp_rtcp / source / rtcp_packet / rtpfb . h \" namespace webrtc { namespace rtcp { class CommonHeader ; class Nack : public Rtpfb { public : uint8_t kFeedbackMessageType = 1 ;)",
    "insertText": "Nack()"
  },
  {
    "label": "Nack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Nack(const Nack&)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(const CommonHeader& packet)"
  },
  {
    "label": "SetPacketIds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPacketIds(const uint16_t* nack_list, size_t length)"
  },
  {
    "label": "SetPacketIds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPacketIds(std::vector<uint16_t> nack_list)"
  },
  {
    "label": "packet_ids()",
    "kind": "Method",
    "detail": "Function (const std::vector<uint16_t>&)",
    "insertText": "packet_ids()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(uint8_t* packet, size_t* index, size_t max_length, PacketReadyCallback callback)"
  },
  {
    "label": "Pack()",
    "kind": "Method",
    "detail": "Function (private : size_t kNackItemLength = 4 ; struct PackedNack { uint16_t first_pid ; uint16_t bitmask ; } ; void)",
    "insertText": "Pack()"
  },
  {
    "label": "Unpack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unpack()"
  }
]