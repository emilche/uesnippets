[
  {
    "label": "FMeshDescriptionTriangleMeshAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescriptionTriangleMeshAdapter"
  },
  {
    "label": "FMeshDescriptionEditableTriangleMeshAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescriptionEditableTriangleMeshAdapter"
  },
  {
    "label": "FMeshDescriptionMeshAdapterd",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescriptionMeshAdapterd"
  },
  {
    "label": "One()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" MeshDescription . h \" # include \" StaticMeshAttributes . h \" # include \" Spatial / MeshAABBTree3 . h \" # include \" MeshAdapter . h \" struct FMeshDescriptionTriangleMeshAdapter { using FIndex3i = UE::Geometry::FIndex3i ; protected : const FMeshDescription* Mesh ; TVertexAttributesConstRef<FVector3f> VertexPositions ; TVertexInstanceAttributesConstRef<FVector3f> VertexInstanceNormals ; TVertexInstanceAttributesConstRef<FVector2f> VertexInstanceUVs ; TArrayView<const FVertexInstanceID> TriangleVertexInstanceIndices ; FVector3d BuildScale =)",
    "insertText": "One()"
  },
  {
    "label": "FMeshDescriptionTriangleMeshAdapter()",
    "kind": "Method",
    "detail": "Function (bool bScaleNormals = false ; public :)",
    "insertText": "FMeshDescriptionTriangleMeshAdapter(const FMeshDescription* MeshIn) : Mesh(MeshIn)"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (FStaticMeshConstAttributes)",
    "insertText": "Attributes(*MeshIn)"
  },
  {
    "label": "GetVertexPositions()",
    "kind": "Method",
    "detail": "Function (VertexPositions = Attributes .)",
    "insertText": "GetVertexPositions()"
  },
  {
    "label": "GetVertexInstanceNormals()",
    "kind": "Method",
    "detail": "Function (VertexInstanceNormals = Attributes .)",
    "insertText": "GetVertexInstanceNormals()"
  },
  {
    "label": "GetVertexInstanceUVs()",
    "kind": "Method",
    "detail": "Function (VertexInstanceUVs = Attributes .)",
    "insertText": "GetVertexInstanceUVs()"
  },
  {
    "label": "GetTriangleVertexInstanceIndices()",
    "kind": "Method",
    "detail": "Function (TriangleVertexInstanceIndices = Attributes .)",
    "insertText": "GetTriangleVertexInstanceIndices().GetRawArray()"
  },
  {
    "label": "SetBuildScale()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBuildScale(const FVector3d& BuildScaleIn, bool bScaleNormalsIn)"
  },
  {
    "label": "IsTriangle()",
    "kind": "Method",
    "detail": "Function (BuildScale = BuildScaleIn ; bScaleNormals = bScaleNormalsIn ; } bool)",
    "insertText": "IsTriangle(int32 TID)"
  },
  {
    "label": "IsVertex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVertex(int32 VID)"
  },
  {
    "label": "MaxTriangleID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "MaxTriangleID()"
  },
  {
    "label": "TriangleCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "TriangleCount()"
  },
  {
    "label": "MaxVertexID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "MaxVertexID()"
  },
  {
    "label": "VertexCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "VertexCount()"
  },
  {
    "label": "GetChangeStamp()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetChangeStamp()"
  },
  {
    "label": "GetTriangleVertices()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FVertexID> TriVertIDs = Mesh ->)",
    "insertText": "GetTriangleVertices(FTriangleID(IDValue))"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (} FVector3d)",
    "insertText": "GetVertex(int32 IDValue)"
  },
  {
    "label": "FVertexID()",
    "kind": "Method",
    "detail": "Function (const FVector3f& Position = VertexPositions [)",
    "insertText": "FVertexID(IDValue)"
  },
  {
    "label": "GetTriVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTriVertices(int32 IDValue, FVector3d& V0, FVector3d& V1, FVector3d& V2)"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (const FVector3f& A = VertexPositions [ TriVertIDs [ 0 ] ] ; V0 =)",
    "insertText": "FVector3d(BuildScale.X * (double)A.X, BuildScale.Y * (double)A.Y, BuildScale.Z * (double)A.Z)"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (const FVector3f& B = VertexPositions [ TriVertIDs [ 1 ] ] ; V1 =)",
    "insertText": "FVector3d(BuildScale.X * (double)B.X, BuildScale.Y * (double)B.Y, BuildScale.Z * (double)B.Z)"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (const FVector3f& C = VertexPositions [ TriVertIDs [ 2 ] ] ; V2 =)",
    "insertText": "FVector3d(BuildScale.X * (double)C.X, BuildScale.Y * (double)C.Y, BuildScale.Z * (double)C.Z)"
  },
  {
    "label": "GetTriVertices()",
    "kind": "Method",
    "detail": "Function (} template<VectorType> void)",
    "insertText": "GetTriVertices(int32 IDValue, VectorType& V0, VectorType& V1, VectorType& V2)"
  },
  {
    "label": "VectorType()",
    "kind": "Method",
    "detail": "Function (const FVector3f& A = VertexPositions [ TriVertIDs [ 0 ] ] ; V0 =)",
    "insertText": "VectorType(BuildScale.X * (double)A.X, BuildScale.Y * (double)A.Y, BuildScale.Z * (double)A.Z)"
  },
  {
    "label": "VectorType()",
    "kind": "Method",
    "detail": "Function (const FVector3f& B = VertexPositions [ TriVertIDs [ 1 ] ] ; V1 =)",
    "insertText": "VectorType(BuildScale.X * (double)B.X, BuildScale.Y * (double)B.Y, BuildScale.Z * (double)B.Z)"
  },
  {
    "label": "VectorType()",
    "kind": "Method",
    "detail": "Function (const FVector3f& C = VertexPositions [ TriVertIDs [ 2 ] ] ; V2 =)",
    "insertText": "VectorType(BuildScale.X * (double)C.X, BuildScale.Y * (double)C.Y, BuildScale.Z * (double)C.Z)"
  },
  {
    "label": "HasNormals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasNormals()"
  },
  {
    "label": "IsNormal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNormal(int32 NID)"
  },
  {
    "label": "MaxNormalID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "MaxNormalID()"
  },
  {
    "label": "NormalCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NormalCount()"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (} FVector3f)",
    "insertText": "GetNormal(int32 IDValue)"
  },
  {
    "label": "FVertexInstanceID()",
    "kind": "Method",
    "detail": "Function (const FVector3f& InstanceNormal = VertexInstanceNormals [)",
    "insertText": "FVertexInstanceID(IDValue)"
  },
  {
    "label": "GetTriNormals()",
    "kind": "Method",
    "detail": "Function (} template<VectorType> void)",
    "insertText": "GetTriNormals(int32 TriId, VectorType& N0, VectorType& N1, VectorType& N2)"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (N0 =)",
    "insertText": "GetNormal(TriangleVertexInstanceIndices[TriId*3])"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (N1 =)",
    "insertText": "GetNormal(TriangleVertexInstanceIndices[TriId*3+1])"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (N2 =)",
    "insertText": "GetNormal(TriangleVertexInstanceIndices[TriId*3+2])"
  },
  {
    "label": "HasUVs()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasUVs(const int32 UVLayer=0)"
  },
  {
    "label": "IsUV()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUV(const int32 UVId)"
  },
  {
    "label": "MaxUVID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "MaxUVID()"
  },
  {
    "label": "UVCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "UVCount()"
  },
  {
    "label": "GetUV()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetUV(const int32 IDValue, const int32 UVLayer)"
  },
  {
    "label": "GetTriUVs()",
    "kind": "Method",
    "detail": "Function (} template<VectorType> void)",
    "insertText": "GetTriUVs(const int32 TriId, const int32 UVLayer, VectorType& UV0, VectorType& UV1, VectorType& UV2)"
  },
  {
    "label": "GetUV()",
    "kind": "Method",
    "detail": "Function (UV0 =)",
    "insertText": "GetUV(TriangleVertexInstanceIndices[TriId*3], UVLayer)"
  },
  {
    "label": "GetUV()",
    "kind": "Method",
    "detail": "Function (UV1 =)",
    "insertText": "GetUV(TriangleVertexInstanceIndices[TriId*3+1], UVLayer)"
  },
  {
    "label": "GetUV()",
    "kind": "Method",
    "detail": "Function (UV2 =)",
    "insertText": "GetUV(TriangleVertexInstanceIndices[TriId*3+2], UVLayer)"
  },
  {
    "label": "FMeshDescriptionEditableTriangleMeshAdapter()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMeshDescriptionEditableTriangleMeshAdapter { using FIndex3i = UE::Geometry::FIndex3i ; protected : FMeshDescription* Mesh ; TVertexAttributesRef<FVector3f> VertexPositions ; TVertexInstanceAttributesRef<FVector3f> VertexInstanceNormals ; public :)",
    "insertText": "FMeshDescriptionEditableTriangleMeshAdapter(FMeshDescription* MeshIn) : Mesh(MeshIn)"
  },
  {
    "label": "SetVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVertex(int32 IDValue, const FVector3d& NewPos)"
  },
  {
    "label": "FVertexID()",
    "kind": "Method",
    "detail": "Function (VertexPositions [)",
    "insertText": "FVertexID(IDValue)] = (FVector3f)"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (V0 =)",
    "insertText": "FVector3d(VertexPositions[TriVertIDs[0]])"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (V1 =)",
    "insertText": "FVector3d(VertexPositions[TriVertIDs[1]])"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (V2 =)",
    "insertText": "FVector3d(VertexPositions[TriVertIDs[2]])"
  },
  {
    "label": "SetNormal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNormal(int32 IDValue, const FVector3f& Normal)"
  },
  {
    "label": "FMeshDescriptionMeshAdapterd()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMeshDescriptionMeshAdapterd : public UE::Geometry::TTriangleMeshAdapter<double> { FMeshDescriptionTriangleMeshAdapter ParentAdapter ;)",
    "insertText": "FMeshDescriptionMeshAdapterd(const FMeshDescription* MeshIn) : ParentAdapter(MeshIn)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (IsTriangle = [)",
    "insertText": "this(int index)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (} ; MaxTriangleID = [)",
    "insertText": "this()"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (} ; GetTriangle = [)",
    "insertText": "this(int32 TriangleID)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (} ; GetVertex = [)",
    "insertText": "this(int32 VertexID)"
  },
  {
    "label": "FMeshDescriptionMeshAdapterd()",
    "kind": "Method",
    "detail": "Function (} ; })",
    "insertText": "FMeshDescriptionMeshAdapterd(FMeshDescriptionTriangleMeshAdapter ParentAdapterIn) : ParentAdapter(ParentAdapterIn)"
  }
]