[
  {
    "label": "TCapsuleShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCapsuleShape"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "TCapsuleShape()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Vector . h \" namespace UE { namespace Math { template<T> struct TCapsuleShape { using FReal = T ; TVector<T> Center ; T Radius ; TVector<T> Orientation ; T Length ; public :)",
    "insertText": "TCapsuleShape()"
  },
  {
    "label": "TCapsuleShape()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TCapsuleShape(TVector<T> InCenter, T InRadius, TVector<T> InOrientation, T InLength) : Center(InCenter) , Radius(InRadius) , Orientation(InOrientation) , Length(InLength)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg>)> explicit TCapsuleShape(const TCapsuleShape<FArg>& From) : TCapsuleShape<T>(TVector<T>(From.Center), (T)From.Radius, TVector<T>(From.Orientation), (T)From.Length)"
  },
  {
    "label": "UE_DECLARE_LWC_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; } })",
    "insertText": "UE_DECLARE_LWC_TYPE(CapsuleShape, 3)"
  }
]