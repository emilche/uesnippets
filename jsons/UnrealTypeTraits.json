[
  {
    "label": "TIsDerivedFrom",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsDerivedFrom"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "TNthTypeFromParameterPack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TNthTypeFromParameterPack"
  },
  {
    "label": "TFormatSpecifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFormatSpecifier"
  },
  {
    "label": "TIsReferenceType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsReferenceType"
  },
  {
    "label": "TIsLValueReferenceType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsLValueReferenceType"
  },
  {
    "label": "TIsRValueReferenceType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsRValueReferenceType"
  },
  {
    "label": "TIsFundamentalType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsFundamentalType"
  },
  {
    "label": "TIsFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsFunction"
  },
  {
    "label": "TIsZeroConstructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsZeroConstructType"
  },
  {
    "label": "TIsWeakPointerType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsWeakPointerType"
  },
  {
    "label": "TNameOf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TNameOf"
  },
  {
    "label": "TCallTraitsParamTypeHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCallTraitsParamTypeHelper"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TCallTraitsBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCallTraitsBase"
  },
  {
    "label": "TCallTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCallTraits"
  },
  {
    "label": "TTypeTraitsBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypeTraitsBase"
  },
  {
    "label": "TTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypeTraits"
  },
  {
    "label": "FVirtualDestructor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualDestructor"
  },
  {
    "label": "TMoveSupportTraitsBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMoveSupportTraitsBase"
  },
  {
    "label": "TMoveSupportTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMoveSupportTraits"
  },
  {
    "label": "TIsBitwiseConstructible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsBitwiseConstructible"
  },
  {
    "label": "THasMemberFunction_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THasMemberFunction_"
  },
  {
    "label": "Check",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Check"
  },
  {
    "label": "HAS_TRIVIAL_CONSTRUCTOR()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / IsPointer . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / AndOrNot . h \" # include \" Templates / EnableIf . h \" # include \" Templates / IsArithmetic . h \" # include \" Templates / IsEnum . h \" # include \" Templates / Models . h \" # include \" Templates / IsPODType . h \" # include \" Templates / IsUECoreType . h \" # include \" Templates / IsTriviallyCopyConstructible . h \" # define)",
    "insertText": "HAS_TRIVIAL_CONSTRUCTOR(T) __has_trivial_constructor(T) #define IS_POD(T) __is_pod(T) #define IS_EMPTY(T) __is_empty(T)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (typedef char No [ 1 ] ; typedef char Yes [ 2 ] ; Yes&)",
    "insertText": "Test(BaseType*)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (Yes&)",
    "insertText": "Test(const BaseType*)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (No&)",
    "insertText": "Test(...)"
  },
  {
    "label": "DerivedTypePtr()",
    "kind": "Method",
    "detail": "Function (DerivedType*)",
    "insertText": "DerivedTypePtr()"
  },
  {
    "label": "GetFormatSpecifier()",
    "kind": "Method",
    "detail": "Function (enum { Value = std::is_same_v<A,B> } ; } ; template<int32 N,. . . Types> struct TNthTypeFromParameterPack ; template<int32 N,T,. . . OtherTypes> struct TNthTypeFromParameterPack<N,T,OtherTypes . . .> { using Type = TNthTypeFromParameterPack<N - 1,OtherTypes . . .>::Type ; } ; template<T,. . . OtherTypes> struct TNthTypeFromParameterPack<0,T,OtherTypes . . .> { using Type = T ; } ; template<T> struct TFormatSpecifier { template<CharType = TCHAR> TCHAR const*)",
    "insertText": "GetFormatSpecifier()"
  },
  {
    "label": "Expose_TFormatSpecifier()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "Expose_TFormatSpecifier(type, format)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (\\ template<CharType = TCHAR> \\)",
    "insertText": "decltype(auto) GetFormatSpecifier()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (\\ if)",
    "insertText": "constexpr(std::is_same_v<CharType, WIDECHAR>)"
  },
  {
    "label": "WIDETEXT()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "WIDETEXT(format)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (\\ } \\ else if)",
    "insertText": "constexpr(std::is_same_v<CharType, UTF8CHAR>)"
  },
  {
    "label": "UTF8TEXT()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "UTF8TEXT(format)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (\\ } \\ else if)",
    "insertText": "constexpr(std::is_same_v<CharType, ANSICHAR>)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\ return format ; \\ } \\ else \\ { \\)",
    "insertText": "static_assert(sizeof(CharType) == 0, \"Unsupported char type\")"
  },
  {
    "label": "Expose_TFormatSpecifier()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } ;)",
    "insertText": "Expose_TFormatSpecifier(bool, \"%i\") Expose_TFormatSpecifier(uint8, \"%u\") Expose_TFormatSpecifier(uint16, \"%u\") Expose_TFormatSpecifier(uint32, \"%u\") Expose_TFormatSpecifier(uint64, \"%llu\") Expose_TFormatSpecifier(int8, \"%d\") Expose_TFormatSpecifier(int16, \"%d\") Expose_TFormatSpecifier(int32, \"%d\") Expose_TFormatSpecifier(int64, \"%lld\") Expose_TFormatSpecifier(float, \"%f\") Expose_TFormatSpecifier(double, \"%f\") Expose_TFormatSpecifier(long double, \"%f\") Expose_TFormatSpecifier(long, \"%ld\") Expose_TFormatSpecifier(unsigned long, \"%lu\")"
  },
  {
    "label": "RetType()",
    "kind": "Method",
    "detail": "Function (enum { Value = false } ; } ; template<T> struct TIsReferenceType<T&> { enum { Value = true } ; } ; template<T> struct TIsReferenceType<T&&> { enum { Value = true } ; } ; template<T> struct TIsLValueReferenceType { enum { Value = false } ; } ; template<T> struct TIsLValueReferenceType<T&> { enum { Value = true } ; } ; template<T> struct TIsRValueReferenceType { enum { Value = false } ; } ; template<T> struct TIsRValueReferenceType<T&&> { enum { Value = true } ; } ; template<T> struct TIsFundamentalType { enum { Value = TIsArithmetic<T>::Value | | std::is_void_v<T> } ; } ; template<T> struct TIsFunction { enum { Value = false } ; } ; template<RetType,. . . Params> struct TIsFunction<)",
    "insertText": "RetType(Params...)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (enum { Value = true } ; } ; template<T> struct TIsZeroConstructType { enum { Value = TOr<TIsEnum<T>,TIsArithmetic<T>,TIsPointer<T>>::Value } ; } ; template<T> struct TIsWeakPointerType { enum { Value = false } ; } ; template<T> struct TNameOf { TCHAR const*)",
    "insertText": "GetName()"
  },
  {
    "label": "Expose_TNameOf()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "Expose_TNameOf(type)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "TEXT(#type)"
  },
  {
    "label": "Expose_TNameOf()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ;)",
    "insertText": "Expose_TNameOf(uint8) Expose_TNameOf(uint16) Expose_TNameOf(uint32) Expose_TNameOf(uint64) Expose_TNameOf(int8) Expose_TNameOf(int16) Expose_TNameOf(int32) Expose_TNameOf(int64) Expose_TNameOf(float) Expose_TNameOf(double)"
  },
  {
    "label": "TAndValue()",
    "kind": "Method",
    "detail": "Function (using Type = std::remove_const_t<T> ; } ; template<T> struct TCallTraitsBase { private : enum { PassByValue = TOr<)",
    "insertText": "TAndValue(sizeof(T) <= sizeof(void*))"
  },
  {
    "label": "FVirtualDestructor()",
    "kind": "Method",
    "detail": "Function (public : typedef T ValueType ; typedef T& Reference ; typedef const T& ConstReference ; typedef TCallTraitsParamTypeHelper<T,PassByValue>::ParamType ParamType ; typedef TCallTraitsParamTypeHelper<T,PassByValue>::ConstParamType ConstPointerType ; } ; template<T> struct TCallTraits : public TCallTraitsBase<T> { } ; template<T> struct TCallTraits<T&> { typedef T& ValueType ; typedef T& Reference ; typedef const T& ConstReference ; typedef T& ParamType ; typedef T& ConstPointerType ; } ; template<T,size_t N> struct TCallTraits<T [ N ]> { private : typedef T ArrayType [ N ] ; public : typedef const T* ValueType ; typedef ArrayType& Reference ; typedef const ArrayType& ConstReference ; typedef const T* const ParamType ; typedef const T* const ConstPointerType ; } ; template<T,size_t N> struct TCallTraits<const T [ N ]> { private : typedef const T ArrayType [ N ] ; public : typedef const T* ValueType ; typedef ArrayType& Reference ; typedef const ArrayType& ConstReference ; typedef const T* const ParamType ; typedef const T* const ConstPointerType ; } ; template<T> struct TTypeTraitsBase { typedef TCallTraits<T>::ParamType ConstInitType ; typedef TCallTraits<T>::ConstPointerType ConstPointerType ; enum { IsBytewiseComparable = TOr<TIsEnum<T>,TIsArithmetic<T>,TIsPointer<T>>::Value } ; } ; template<T> struct TTypeTraits : public TTypeTraitsBase<T> { } ; struct FVirtualDestructor { ~)",
    "insertText": "FVirtualDestructor()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,U> struct TMoveSupportTraitsBase { typedef U Copy ; } ; template<T> struct TMoveSupportTraitsBase<T,const T&> { typedef const T& Copy ; typedef T&& Move ; } ; template<T> struct TMoveSupportTraits : TMoveSupportTraitsBase<T,TCallTraits<T>::ParamType> { } ; template<T,Arg> struct TIsBitwiseConstructible {)",
    "insertText": "static_assert(!TIsReferenceType<T >::Value && !TIsReferenceType<Arg>::Value, \"TIsBitwiseConstructible is not designed to accept reference types\")"
  },
  {
    "label": "GENERATE_MEMBER_FUNCTION_CHECK()",
    "kind": "Method",
    "detail": "Function (enum { Value = false } ; } ; template<T> struct TIsBitwiseConstructible<T,T> { enum { Value = TIsTriviallyCopyConstructible<T>::Value } ; } ; template<T,U> struct TIsBitwiseConstructible<const T,U> : TIsBitwiseConstructible<T,U> { } ; template<T> struct TIsBitwiseConstructible<const T*,T*> { enum { Value = true } ; } ; template<> struct TIsBitwiseConstructible<uint8,int8> { enum { Value = true } ; } ; template<> struct TIsBitwiseConstructible<int8,uint8> { enum { Value = true } ; } ; template<> struct TIsBitwiseConstructible<uint16,int16> { enum { Value = true } ; } ; template<> struct TIsBitwiseConstructible<int16,uint16> { enum { Value = true } ; } ; template<> struct TIsBitwiseConstructible<uint32,int32> { enum { Value = true } ; } ; template<> struct TIsBitwiseConstructible<int32,uint32> { enum { Value = true } ; } ; template<> struct TIsBitwiseConstructible<uint64,int64> { enum { Value = true } ; } ; template<> struct TIsBitwiseConstructible<int64,uint64> { enum { Value = true } ; } ; # define)",
    "insertText": "GENERATE_MEMBER_FUNCTION_CHECK(MemberName, Result, ConstModifier, ...)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (\\ template<U,)",
    "insertText": "Result(U::*)(__VA_ARGS__)"
  },
  {
    "label": "MemberTest()",
    "kind": "Method",
    "detail": "Function (\\ template<U> char)",
    "insertText": "MemberTest(Check<U, &U::MemberName> *)"
  },
  {
    "label": "MemberTest()",
    "kind": "Method",
    "detail": "Function (\\ template<U> int)",
    "insertText": "MemberTest(...)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ enum { Value =)",
    "insertText": "sizeof(MemberTest<T>(nullptr)) == sizeof(char)"
  }
]