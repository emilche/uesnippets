[
  {
    "label": "VideoQualityAnalyzerInjectionHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoQualityAnalyzerInjectionHelper"
  },
  {
    "label": "AnalyzingVideoSink2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalyzingVideoSink2"
  },
  {
    "label": "ReceiverStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReceiverStream"
  },
  {
    "label": "VideoQualityAnalyzerInjectionHelper()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ANALYZER_VIDEO_VIDEO_QUALITY_ANALYZER_INJECTION_HELPER_H_ # define TEST_PC_E2E_ANALYZER_VIDEO_VIDEO_QUALITY_ANALYZER_INJECTION_HELPER_H_ # include<stdio . h> # include<map> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" api / test / pclf / media_configuration . h \" # include \" api / test / stats_observer_interface . h \" # include \" api / test / video_quality_analyzer_interface . h \" # include \" api / video / video_frame . h \" # include \" api / video / video_sink_interface . h \" # include \" api / video_codecs / video_decoder_factory . h \" # include \" api / video_codecs / video_encoder_factory . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" system_wrappers / include / clock . h \" # include \" test / pc / e2e / analyzer / video / analyzing_video_sink . h \" # include \" test / pc / e2e / analyzer / video / analyzing_video_sinks_helper . h \" # include \" test / pc / e2e / analyzer / video / encoded_image_data_injector . h \" # include \" test / pc / e2e / analyzer / video / quality_analyzing_video_encoder . h \" # include \" test / test_video_capturer . h \" # include \" test / testsupport / video_frame_writer . h \" namespace webrtc { namespace webrtc_pc_e2e { class VideoQualityAnalyzerInjectionHelper : public StatsObserverInterface { public : using VideoConfig =::webrtc::webrtc_pc_e2e::VideoConfig ;)",
    "insertText": "VideoQualityAnalyzerInjectionHelper(Clock* clock, std::unique_ptr<VideoQualityAnalyzerInterface> analyzer, EncodedImageDataInjector* injector, EncodedImageDataExtractor* extractor)"
  },
  {
    "label": "VideoQualityAnalyzerInjectionHelper()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoQualityAnalyzerInjectionHelper()"
  },
  {
    "label": "WrapVideoEncoderFactory()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<VideoEncoderFactory>)",
    "insertText": "WrapVideoEncoderFactory(absl::string_view peer_name, std::unique_ptr<VideoEncoderFactory> delegate, double bitrate_multiplier, QualityAnalyzingVideoEncoder::EmulatedSFUConfigMap stream_to_sfu_config)"
  },
  {
    "label": "WrapVideoDecoderFactory()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<VideoDecoderFactory>)",
    "insertText": "WrapVideoDecoderFactory(absl::string_view peer_name, std::unique_ptr<VideoDecoderFactory> delegate)"
  },
  {
    "label": "CreateFramePreprocessor()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<test::TestVideoCapturer::FramePreprocessor>)",
    "insertText": "CreateFramePreprocessor(absl::string_view peer_name, const VideoConfig& config)"
  },
  {
    "label": "CreateVideoSink()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<rtc::VideoSinkInterface<VideoFrame>>)",
    "insertText": "CreateVideoSink(absl::string_view peer_name)"
  },
  {
    "label": "CreateVideoSink()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<AnalyzingVideoSink>)",
    "insertText": "CreateVideoSink(absl::string_view peer_name, const VideoSubscription& subscription, bool report_infra_metrics = false)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(std::string test_case_name, rtc::ArrayView<const std::string> peer_names, int max_threads_count = 1)"
  },
  {
    "label": "RegisterParticipantInCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterParticipantInCall(absl::string_view peer_name)"
  },
  {
    "label": "UnregisterParticipantInCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterParticipantInCall(absl::string_view peer_name)"
  },
  {
    "label": "OnStatsReports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStatsReports(absl::string_view pc_label, const rtc::scoped_refptr<const RTCStatsReport>& report)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "AnalyzingVideoSink2()",
    "kind": "Method",
    "detail": "Function (private : class AnalyzingVideoSink2 final : public rtc::VideoSinkInterface<VideoFrame> { public :)",
    "insertText": "AnalyzingVideoSink2(absl::string_view peer_name, VideoQualityAnalyzerInjectionHelper* helper) : peer_name_(peer_name), helper_(helper)"
  },
  {
    "label": "AnalyzingVideoSink2()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "AnalyzingVideoSink2()"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrame(const VideoFrame& frame)"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (helper_ ->)",
    "insertText": "OnFrame(peer_name_, frame)"
  },
  {
    "label": "ReceiverStream()",
    "kind": "Method",
    "detail": "Function (} private : const std::string peer_name_ ; VideoQualityAnalyzerInjectionHelper* const helper_ ; } ; struct ReceiverStream {)",
    "insertText": "ReceiverStream(absl::string_view peer_name, absl::string_view stream_label) : peer_name(peer_name), stream_label(stream_label)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} std::string peer_name ; std::string stream_label ; bool)",
    "insertText": "operator(const ReceiverStream& o)"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "OnFrame(absl::string_view peer_name, const VideoFrame& frame)"
  },
  {
    "label": "PopulateSinks()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<rtc::VideoSinkInterface<VideoFrame>>>*)",
    "insertText": "PopulateSinks(const ReceiverStream& receiver_stream)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; std::unique_ptr<VideoQualityAnalyzerInterface> analyzer_ ; EncodedImageDataInjector* injector_ ; EncodedImageDataExtractor* extractor_ ; std::vector<std::unique_ptr<test::VideoFrameWriter>> video_writers_ ; AnalyzingVideoSinksHelper sinks_helper_ ; Mutex mutex_ ; int peers_count_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]