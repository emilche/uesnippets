[
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "FMixerDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerDevice"
  },
  {
    "label": "FMixerSourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceManager"
  },
  {
    "label": "UAudioSubsystemCollectionRoot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioSubsystemCollectionRoot"
  },
  {
    "label": "UAudioEngineSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioEngineSubsystem"
  },
  {
    "label": "FAudioSubsystemCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioSubsystemCollection"
  },
  {
    "label": "InterfaceToCastTo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InterfaceToCastTo"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioDeviceManager . h \" # include \" Subsystem . h \" # include \" SubsystemCollection . h \" # include \" AudioEngineSubsystem . generated . h \" class FAudioDevice ; namespace Audio { class FMixerDevice ; class FMixerSourceManager ; })",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: void FORCEINLINE SetAudioDeviceID(Audio::FDeviceId DeviceID)"
  },
  {
    "label": "GetAudioDeviceID()",
    "kind": "Method",
    "detail": "Function (OwningDeviceID = DeviceID ; } Audio::FDeviceId)",
    "insertText": "GetAudioDeviceID()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API UAudioEngineSubsystem()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "GetAudioDeviceId()",
    "kind": "Method",
    "detail": "Function (} Audio::FDeviceId)",
    "insertText": "GetAudioDeviceId()"
  },
  {
    "label": "GetAudioDeviceHandle()",
    "kind": "Method",
    "detail": "Function (FAudioDeviceHandle)",
    "insertText": "GetAudioDeviceHandle()"
  },
  {
    "label": "GetMutableSourceManager()",
    "kind": "Method",
    "detail": "Function (Audio::FMixerSourceManager*)",
    "insertText": "GetMutableSourceManager()"
  },
  {
    "label": "GetSourceManager()",
    "kind": "Method",
    "detail": "Function (const Audio::FMixerSourceManager*)",
    "insertText": "GetSourceManager()"
  },
  {
    "label": "GetMutableMixerDevice()",
    "kind": "Method",
    "detail": "Function (Audio::FMixerDevice*)",
    "insertText": "GetMutableMixerDevice()"
  },
  {
    "label": "GetMixerDevice()",
    "kind": "Method",
    "detail": "Function (const Audio::FMixerDevice*)",
    "insertText": "GetMixerDevice()"
  },
  {
    "label": "ForEachSubsystem()",
    "kind": "Method",
    "detail": "Function (} ; class FAudioSubsystemCollection : public FSubsystemCollection<UAudioEngineSubsystem> { public : template<class InterfaceToCastTo> void)",
    "insertText": "ForEachSubsystem(TFunctionRef<bool(InterfaceToCastTo*)> InFunction)"
  },
  {
    "label": "ForEachSubsystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSubsystem([Function=MoveTemp(InFunction)](USubsystem* Subsystem) { if (InterfaceToCastTo* CastedSystem = Cast<InterfaceToCastTo>(Subsystem)) { Function(CastedSystem); } })"
  }
]