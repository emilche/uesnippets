[
  {
    "label": "TimerIDTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimerIDTag"
  },
  {
    "label": "TimerGenerationTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimerGenerationTag"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TimerOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimerOptions"
  },
  {
    "label": "Timer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Timer"
  },
  {
    "label": "TimerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimerManager"
  },
  {
    "label": "TimerOptions()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_TIMER_TIMER_H_ # define NET_DCSCTP_TIMER_TIMER_H_ # include<stdint . h> # include<algorithm> # include<functional> # include<map> # include<memory> # include<string> # include<utility> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / task_queue / task_queue_base . h \" # include \" net / dcsctp / public / timeout . h \" # include \" rtc_base / strong_alias . h \" namespace dcsctp { using TimerID = webrtc::StrongAlias<class TimerIDTag,uint32_t> ; using TimerGeneration = webrtc::StrongAlias<class TimerGenerationTag,uint32_t> ; enum class TimerBackoffAlgorithm { kFixed,kExponential,} ; struct TimerOptions {)",
    "insertText": "TimerOptions(DurationMs duration) : TimerOptions(duration, TimerBackoffAlgorithm::kExponential)"
  },
  {
    "label": "TimerOptions()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TimerOptions(DurationMs duration, TimerBackoffAlgorithm backoff_algorithm) : TimerOptions(duration, backoff_algorithm, absl::nullopt)"
  },
  {
    "label": "TimerOptions()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TimerOptions(DurationMs duration, TimerBackoffAlgorithm backoff_algorithm, absl::optional<int> max_restarts) : TimerOptions(duration, backoff_algorithm, max_restarts, absl::nullopt)"
  },
  {
    "label": "TimerOptions()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TimerOptions(DurationMs duration, TimerBackoffAlgorithm backoff_algorithm, absl::optional<int> max_restarts, absl::optional<DurationMs> max_backoff_duration) : TimerOptions(duration, backoff_algorithm, max_restarts, max_backoff_duration, webrtc::TaskQueueBase::DelayPrecision::kLow)"
  },
  {
    "label": "TimerOptions()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TimerOptions(DurationMs duration, TimerBackoffAlgorithm backoff_algorithm, absl::optional<int> max_restarts, absl::optional<DurationMs> max_backoff_duration, webrtc::TaskQueueBase::DelayPrecision precision) : duration(duration), backoff_algorithm(backoff_algorithm), max_restarts(max_restarts), max_backoff_duration(max_backoff_duration), precision(precision)"
  },
  {
    "label": "DurationMs()",
    "kind": "Method",
    "detail": "Function (} const DurationMs duration ; const TimerBackoffAlgorithm backoff_algorithm ; const absl::optional<int> max_restarts ; const absl::optional<DurationMs> max_backoff_duration ; const webrtc::TaskQueueBase::DelayPrecision precision ; } ; class Timer { public : DurationMs kMaxTimerDuration =)",
    "insertText": "DurationMs(24 * 3600 * 1000)"
  },
  {
    "label": "DurationMs()",
    "kind": "Method",
    "detail": "Function (using OnExpired = std::function<absl::optional<)",
    "insertText": "DurationMs()"
  },
  {
    "label": "Timer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Timer(const Timer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Timer&)",
    "insertText": "operator(const Timer&)"
  },
  {
    "label": "Timer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Timer()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "set_duration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_duration(DurationMs duration)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (duration_ =)",
    "insertText": "min(duration, kMaxTimerDuration)"
  },
  {
    "label": "duration()",
    "kind": "Method",
    "detail": "Function (} DurationMs)",
    "insertText": "duration()"
  },
  {
    "label": "Timer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Timer(TimerID id, absl::string_view name, OnExpired on_expired, UnregisterHandler unregister, std::unique_ptr<Timeout> timeout, const TimerOptions& options)"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Trigger(TimerGeneration generation)"
  },
  {
    "label": "TimerGeneration()",
    "kind": "Method",
    "detail": "Function (const TimerID id_ ; const std::string name_ ; const TimerOptions options_ ; const OnExpired on_expired_ ; const UnregisterHandler unregister_handler_ ; const std::unique_ptr<Timeout> timeout_ ; DurationMs duration_ ; TimerGeneration generation_ =)",
    "insertText": "TimerGeneration(0)"
  },
  {
    "label": "TimerManager()",
    "kind": "Method",
    "detail": "Function (bool is_running_ = false ; int expiration_count_ = 0 ; } ; class TimerManager { public :)",
    "insertText": "TimerManager(std::function<std::unique_ptr<Timeout>( webrtc::TaskQueueBase::DelayPrecision)> create_timeout) : create_timeout_(std::move(create_timeout))"
  },
  {
    "label": "CreateTimer()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<Timer>)",
    "insertText": "CreateTimer(absl::string_view name, Timer::OnExpired on_expired, const TimerOptions& options)"
  },
  {
    "label": "HandleTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTimeout(TimeoutID timeout_id)"
  },
  {
    "label": "Timeout()",
    "kind": "Method",
    "detail": "Function (private : const std::function<std::unique_ptr<)",
    "insertText": "Timeout(webrtc::TaskQueueBase::DelayPrecision)"
  },
  {
    "label": "TimerID()",
    "kind": "Method",
    "detail": "Function (std::map<TimerID,Timer*> timers_ ; TimerID next_id_ =)",
    "insertText": "TimerID(0)"
  }
]