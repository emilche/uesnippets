[
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "LOCALIZATIONCOMMANDLETEXECUTION_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LOCALIZATIONCOMMANDLETEXECUTION_API"
  },
  {
    "label": "FTask()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / PlatformProcess . h \" class SWindow ; namespace LocalizationCommandletExecution { struct FTask {)",
    "insertText": "FTask()"
  },
  {
    "label": "FTask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTask(const FText& InName, const FString& InScriptPath, const bool InShouldUseProjectFile) : Name(InName) , ScriptPath(InScriptPath) , ShouldUseProjectFile(InShouldUseProjectFile)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} FText Name ; FString ScriptPath ; bool ShouldUseProjectFile ; } ; bool)",
    "insertText": "Execute(const TSharedRef<SWindow>& ParentWindow, const FText& Title, const TArray<FTask>& Tasks)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} ; class FLocalizationCommandletProcess : public TSharedFromThis<FLocalizationCommandletProcess> { public : TSharedPtr<FLocalizationCommandletProcess>)",
    "insertText": "Execute(const FString& ConfigFilePath, const bool UseProjectFile = true)"
  },
  {
    "label": "FLocalizationCommandletProcess()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FLocalizationCommandletProcess(void* const InReadPipe, void* const InWritePipe, const FProcHandle InProcessHandle, const FString& InProcessArguments) : ReadPipe(InReadPipe) , WritePipe(InWritePipe) , ProcessHandle(InProcessHandle) , ProcessArguments(InProcessArguments)"
  },
  {
    "label": "FLocalizationCommandletProcess()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "FLocalizationCommandletProcess()"
  },
  {
    "label": "GetReadPipe()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetReadPipe()"
  }
]