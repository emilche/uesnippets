[
  {
    "label": "FPBDJointContainerSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointContainerSolver"
  },
  {
    "label": "FPBDJointConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointConstraintHandle"
  },
  {
    "label": "FPBDJointState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointState"
  },
  {
    "label": "FPBDJointConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointConstraints"
  },
  {
    "label": "FPBDJointConstraintHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / ConstraintHandle . h \" # include \" Chaos / Collision / CollisionApplyType . h \" # include \" Chaos / Evolution / IndexedConstraintContainer . h \" # include \" Chaos / Island / IslandManagerFwd . h \" # include \" Chaos / ParticleHandleFwd . h \" # include \" Chaos / PBDJointConstraintTypes . h \" # include \" Chaos / PBDJointConstraintData . h \" # include \" Chaos / GeometryParticles . h \" namespace Chaos { namespace Private { class FPBDJointContainerSolver ; } class FPBDJointConstraintHandle final : public TIndexedContainerConstraintHandle<FPBDJointConstraints> { public : using Base = TIndexedContainerConstraintHandle<FPBDJointConstraints> ; using FConstraintContainer = FPBDJointConstraints ;)",
    "insertText": "FPBDJointConstraintHandle()"
  },
  {
    "label": "FPBDJointConstraintHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPBDJointConstraintHandle(FConstraintContainer* InConstraintContainer, int32 InConstraintIndex)"
  },
  {
    "label": "SetConstraintEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintEnabled(bool bEnabled)"
  },
  {
    "label": "CalculateConstraintSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateConstraintSpace(FVec3& OutXa, FMatrix33& OutRa, FVec3& OutXb, FMatrix33& OutRb)"
  },
  {
    "label": "IsConstraintEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstraintEnabled()"
  },
  {
    "label": "IsConstraintBroken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstraintBroken()"
  },
  {
    "label": "IsConstraintBreaking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstraintBreaking()"
  },
  {
    "label": "ClearConstraintBreaking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearConstraintBreaking()"
  },
  {
    "label": "IsConstraintViolating()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstraintViolating()"
  },
  {
    "label": "ClearConstraintViolating()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearConstraintViolating()"
  },
  {
    "label": "IsDriveTargetChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDriveTargetChanged()"
  },
  {
    "label": "ClearDriveTargetChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDriveTargetChanged()"
  },
  {
    "label": "GetLinearImpulse()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetLinearImpulse()"
  },
  {
    "label": "GetAngularImpulse()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetAngularImpulse()"
  },
  {
    "label": "GetLinearViolation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLinearViolation()"
  },
  {
    "label": "GetAngularViolation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAngularViolation()"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (const FPBDJointSettings&)",
    "insertText": "GetSettings()"
  },
  {
    "label": "GetJointSettings()",
    "kind": "Method",
    "detail": "Function (const FPBDJointSettings&)",
    "insertText": "GetJointSettings()"
  },
  {
    "label": "SetSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSettings(const FPBDJointSettings& Settings)"
  },
  {
    "label": "SetParentConnectorLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentConnectorLocation(const FVec3 Location)"
  },
  {
    "label": "SetParentConnectorRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentConnectorRotation(const FQuat Rotation)"
  },
  {
    "label": "SetChildConnectorLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChildConnectorLocation(const FVec3 Location)"
  },
  {
    "label": "SetChildConnectorRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChildConnectorRotation(const FQuat Rotation)"
  },
  {
    "label": "SetLinearDrivePositionTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDrivePositionTarget(const FVec3 Target)"
  },
  {
    "label": "SetAngularDrivePositionTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDrivePositionTarget(const FQuat Target)"
  },
  {
    "label": "SetLinearDriveVelocityTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveVelocityTarget(const FVec3 Target)"
  },
  {
    "label": "SetAngularDriveVelocityTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveVelocityTarget(const FVec3 Target)"
  },
  {
    "label": "SetLinearDriveStiffness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveStiffness(const FVec3 Stiffness)"
  },
  {
    "label": "SetLinearDriveDamping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveDamping(const FVec3 Damping)"
  },
  {
    "label": "SetLinearDriveMaxForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveMaxForce(const FVec3 MaxForce)"
  },
  {
    "label": "SetLinearDriveForceMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveForceMode(EJointForceMode ForceMode)"
  },
  {
    "label": "SetAngularDriveStiffness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveStiffness(const FVec3 Stiffness)"
  },
  {
    "label": "SetAngularDriveDamping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveDamping(const FVec3 Damping)"
  },
  {
    "label": "SetAngularDriveMaxTorque()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveMaxTorque(const FVec3 MaxTorque)"
  },
  {
    "label": "SetAngularDriveForceMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveForceMode(EJointForceMode ForceMode)"
  },
  {
    "label": "SetCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionEnabled(const bool bCollisionEnabled)"
  },
  {
    "label": "SetParentInvMassScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentInvMassScale(const FReal ParentInvMassScale)"
  },
  {
    "label": "SetDriveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDriveParams(const FVec3 LinearStiffness, const FVec3 LinearDamping, const FVec3 MaxForce, const FVec3 AngularStiffness, const FVec3 AngularDamping, const FVec3 MaxTorque)"
  },
  {
    "label": "GetConstrainedParticles()",
    "kind": "Method",
    "detail": "Function (TVec2<FGeometryParticleHandle*>)",
    "insertText": "GetConstrainedParticles()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (const FConstraintHandleTypeID&)",
    "insertText": "StaticType()"
  },
  {
    "label": "STypeID()",
    "kind": "Method",
    "detail": "Function (FConstraintHandleTypeID)",
    "insertText": "STypeID(TEXT(\"FJointConstraintHandle\"), &FIndexedConstraintHandle::StaticType())"
  },
  {
    "label": "SetSyncState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSyncState(ESyncState SyncState)"
  },
  {
    "label": "SetEnabledDuringResim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabledDuringResim(bool bEnabled)"
  },
  {
    "label": "IsEnabledDuringResim()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabledDuringResim()"
  },
  {
    "label": "ResimType()",
    "kind": "Method",
    "detail": "Function (EResimType)",
    "insertText": "ResimType()"
  },
  {
    "label": "GetConstraintSettingsInternal()",
    "kind": "Method",
    "detail": "Function (protected : using Base::ConstraintIndex ; using Base::ConcreteContainer ; private : FPBDJointSettings&)",
    "insertText": "GetConstraintSettingsInternal()"
  },
  {
    "label": "FPBDJointState()",
    "kind": "Method",
    "detail": "Function (bool bLinearPlasticityInitialized ; bool bAngularPlasticityInitialized ; } ; class FPBDJointState { public :)",
    "insertText": "FPBDJointState()"
  },
  {
    "label": "FPBDJointConstraints()",
    "kind": "Method",
    "detail": "Function (int32 Island ; int32 Level ; int32 Color ; int32 IslandSize ; bool bDisabled ; bool bBroken ; bool bBreaking ; bool bViolating ; bool bDriveTargetChanged ; FVec3 LinearImpulse ; FVec3 AngularImpulse ; float LinearViolation ; float AngularViolation ; EResimType ResimType = EResimType::FullResim ; ESyncState SyncState = ESyncState::InSync ; bool bEnabledDuringResim = true ; } ; class FPBDJointConstraints : public FPBDConstraintContainer { public : using Base = FPBDConstraintContainer ; using FConstraintContainerHandle = FPBDJointConstraintHandle ; using FConstraintHandleAllocator = TConstraintHandleAllocator<FPBDJointConstraints> ; using FHandles = TArray<FConstraintContainerHandle*> ;)",
    "insertText": "FPBDJointConstraints()"
  },
  {
    "label": "SetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSettings(const FPBDJointSolverSettings& InSettings)"
  },
  {
    "label": "SetUseLinearJointSolver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseLinearJointSolver(const bool bInEnable)"
  },
  {
    "label": "SetUseSimd()",
    "kind": "Method",
    "detail": "Function (Settings . bUseLinearSolver = bInEnable ; } void)",
    "insertText": "SetUseSimd(const bool bInEnable)"
  },
  {
    "label": "SetSortEnabled()",
    "kind": "Method",
    "detail": "Function (Settings . bUseSimd = bInEnable ; } void)",
    "insertText": "SetSortEnabled(const bool bInEnable)"
  },
  {
    "label": "NumConstraints()",
    "kind": "Method",
    "detail": "Function (Settings . bSortEnabled = bInEnable ; } int32)",
    "insertText": "NumConstraints()"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (FConstraintContainerHandle*)",
    "insertText": "AddConstraint(const FParticlePair& InConstrainedParticles, const FRigidTransform3& WorldConstraintFrame)"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (FConstraintContainerHandle*)",
    "insertText": "AddConstraint(const FParticlePair& InConstrainedParticles, const FTransformPair& ConnectorTransforms)"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (FConstraintContainerHandle*)",
    "insertText": "AddConstraint(const FParticlePair& InConstrainedParticles, const FPBDJointSettings& InConstraintSettings)"
  },
  {
    "label": "RemoveConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConstraint(int ConstraintIndex)"
  },
  {
    "label": "RemoveConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConstraints(const TSet<TGeometryParticleHandle<FReal, 3>*>& RemovedParticles)"
  },
  {
    "label": "DisconnectConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DisconnectConstraints(const TSet<TGeometryParticleHandle<FReal, 3>*>& RemovedParticles)"
  },
  {
    "label": "IsConstraintEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstraintEnabled(int32 ConstraintIndex)"
  },
  {
    "label": "IsConstraintBroken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstraintBroken(int32 ConstraintIndex)"
  },
  {
    "label": "IsConstraintBreaking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstraintBreaking(int32 ConstraintIndex)"
  },
  {
    "label": "ClearConstraintBreaking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearConstraintBreaking(int32 ConstraintIndex)"
  },
  {
    "label": "IsConstraintViolating()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstraintViolating(int32 ConstraintIndex)"
  },
  {
    "label": "ClearConstraintViolating()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearConstraintViolating(int32 ConstraintIndex)"
  },
  {
    "label": "IsDriveTargetChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDriveTargetChanged(int32 ConstraintIndex)"
  },
  {
    "label": "ClearDriveTargetChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDriveTargetChanged(int32 ConstraintIndex)"
  },
  {
    "label": "SetConstraintEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintEnabled(int32 ConstraintIndex, bool bEnabled)"
  },
  {
    "label": "SetDriveTargetChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDriveTargetChanged(int32 ConstraintIndex, bool bTargetChanged)"
  },
  {
    "label": "BreakConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakConstraint(int32 ConstraintIndex)"
  },
  {
    "label": "FixConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixConstraint(int32 ConstraintIndex)"
  },
  {
    "label": "SetBreakCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBreakCallback(const FJointBreakCallback& Callback)"
  },
  {
    "label": "ClearBreakCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBreakCallback()"
  },
  {
    "label": "GetConstraintHandles()",
    "kind": "Method",
    "detail": "Function (FHandles&)",
    "insertText": "GetConstraintHandles()"
  },
  {
    "label": "GetConstraintHandle()",
    "kind": "Method",
    "detail": "Function (FConstraintContainerHandle*)",
    "insertText": "GetConstraintHandle(int32 ConstraintIndex)"
  },
  {
    "label": "GetConstrainedParticles()",
    "kind": "Method",
    "detail": "Function (const FParticlePair&)",
    "insertText": "GetConstrainedParticles(int32 ConstraintIndex)"
  },
  {
    "label": "GetConstraintSettings()",
    "kind": "Method",
    "detail": "Function (const FPBDJointSettings&)",
    "insertText": "GetConstraintSettings(int32 ConstraintIndex)"
  },
  {
    "label": "SetConstraintSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintSettings(int32 ConstraintIndex, const FPBDJointSettings& InConstraintSettings)"
  },
  {
    "label": "SetLinearDrivePositionTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDrivePositionTarget(int32 ConstraintIndex, FVec3 InLinearDrivePositionTarget)"
  },
  {
    "label": "SetAngularDrivePositionTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDrivePositionTarget(int32 ConstraintIndex, FRotation3 InAngularDrivePositionTarget)"
  },
  {
    "label": "GetConstraintLinearImpulse()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetConstraintLinearImpulse(int32 ConstraintIndex)"
  },
  {
    "label": "GetConstraintAngularImpulse()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetConstraintAngularImpulse(int32 ConstraintIndex)"
  },
  {
    "label": "GetConstraintLinearViolation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetConstraintLinearViolation(int32 ConstraintIndex)"
  },
  {
    "label": "GetConstraintAngularViolation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetConstraintAngularViolation(int32 ConstraintIndex)"
  },
  {
    "label": "GetConstraintSyncState()",
    "kind": "Method",
    "detail": "Function (ESyncState)",
    "insertText": "GetConstraintSyncState(int32 ConstraintIndex)"
  },
  {
    "label": "SetConstraintSyncState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintSyncState(int32 ConstraintIndex, ESyncState SyncState)"
  },
  {
    "label": "SetConstraintEnabledDuringResim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintEnabledDuringResim(int32 ConstraintIndex, bool bEnabled)"
  },
  {
    "label": "IsConstraintEnabledDuringResim()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstraintEnabledDuringResim(int32 ConstraintIndex)"
  },
  {
    "label": "GetConstraintResimType()",
    "kind": "Method",
    "detail": "Function (EResimType)",
    "insertText": "GetConstraintResimType(int32 ConstraintIndex)"
  },
  {
    "label": "CreateSceneSolver()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FConstraintContainerSolver>)",
    "insertText": "CreateSceneSolver(const int32 Priority)"
  },
  {
    "label": "CreateGroupSolver()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FConstraintContainerSolver>)",
    "insertText": "CreateGroupSolver(const int32 Priority)"
  },
  {
    "label": "GetNumConstraints()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumConstraints()"
  },
  {
    "label": "ResetConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetConstraints()"
  },
  {
    "label": "AddConstraintsToGraph()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddConstraintsToGraph(Private::FPBDIslandManager& IslandManager)"
  },
  {
    "label": "PrepareTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareTick()"
  },
  {
    "label": "UnprepareTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnprepareTick()"
  },
  {
    "label": "SetSolverResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSolverResults(const int32 ConstraintIndex, const FVec3& LinearImpulse, const FVec3& AngularImpulse, const float LinearViolation, const float AngularViolation, const bool bIsBroken, const bool bIsViolating, const FSolverBody* SolverBody0, const FSolverBody* SolverBody1)"
  },
  {
    "label": "GetConstraintIsland()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConstraintIsland(int32 ConstraintIndex)"
  },
  {
    "label": "GetConstraintLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConstraintLevel(int32 ConstraintIndex)"
  },
  {
    "label": "GetConstraintColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConstraintColor(int32 ConstraintIndex)"
  },
  {
    "label": "GetConstrainedParticleIndices()",
    "kind": "Method",
    "detail": "Function (} private : class FPBDJointConstraintHandle ; void)",
    "insertText": "GetConstrainedParticleIndices(const int32 ConstraintIndex, int32& Index0, int32& Index1)"
  },
  {
    "label": "CalculateConstraintSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateConstraintSpace(int32 ConstraintIndex, FVec3& OutX0, FMatrix33& OutR0, FVec3& OutX1, FMatrix33& OutR1)"
  },
  {
    "label": "ColorConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ColorConstraints()"
  },
  {
    "label": "SortConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortConstraints()"
  },
  {
    "label": "ShouldBeInGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBeInGraph(const int32 ConstraintIndex)"
  },
  {
    "label": "ApplyPlasticityLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPlasticityLimits(const int32 ConstraintIndex, const FSolverBody& SolverBody0, const FSolverBody& SolverBody1)"
  },
  {
    "label": "SetConstraintBroken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintBroken(int32 ConstraintIndex, bool bBroken)"
  },
  {
    "label": "SetConstraintBreaking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintBreaking(int32 ConstraintIndex, bool bBreaking)"
  }
]