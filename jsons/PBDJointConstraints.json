[
  {
    "label": "FPBDJointContainerSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointContainerSolver"
  },
  {
    "label": "FPBDJointConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointConstraintHandle"
  },
  {
    "label": "FPBDJointState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointState"
  },
  {
    "label": "FPBDJointConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointConstraints"
  },
  {
    "label": "FPBDJointConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointConstraintHandle"
  },
  {
    "label": "SetConstraintEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintEnabled(bool bEnabled)"
  },
  {
    "label": "ClearConstraintBreaking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearConstraintBreaking()"
  },
  {
    "label": "ClearConstraintViolating()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearConstraintViolating()"
  },
  {
    "label": "ClearDriveTargetChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDriveTargetChanged()"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetSettings()"
  },
  {
    "label": "SetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSettings(const FPBDJointSettings& Settings)"
  },
  {
    "label": "SetParentConnectorLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentConnectorLocation(const FVec3 Location)"
  },
  {
    "label": "SetParentConnectorRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentConnectorRotation(const FQuat Rotation)"
  },
  {
    "label": "SetChildConnectorLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChildConnectorLocation(const FVec3 Location)"
  },
  {
    "label": "SetChildConnectorRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChildConnectorRotation(const FQuat Rotation)"
  },
  {
    "label": "SetLinearDrivePositionTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDrivePositionTarget(const FVec3 Target)"
  },
  {
    "label": "SetAngularDrivePositionTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDrivePositionTarget(const FQuat Target)"
  },
  {
    "label": "SetLinearDriveVelocityTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveVelocityTarget(const FVec3 Target)"
  },
  {
    "label": "SetAngularDriveVelocityTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveVelocityTarget(const FVec3 Target)"
  },
  {
    "label": "SetLinearDriveStiffness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveStiffness(const FVec3 Stiffness)"
  },
  {
    "label": "SetLinearDriveDamping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveDamping(const FVec3 Damping)"
  },
  {
    "label": "SetLinearDriveMaxForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveMaxForce(const FVec3 MaxForce)"
  },
  {
    "label": "SetLinearDriveForceMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveForceMode(EJointForceMode ForceMode)"
  },
  {
    "label": "SetAngularDriveStiffness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveStiffness(const FVec3 Stiffness)"
  },
  {
    "label": "SetAngularDriveDamping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveDamping(const FVec3 Damping)"
  },
  {
    "label": "SetAngularDriveMaxTorque()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveMaxTorque(const FVec3 MaxTorque)"
  },
  {
    "label": "SetAngularDriveForceMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveForceMode(EJointForceMode ForceMode)"
  },
  {
    "label": "SetCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionEnabled(const bool bCollisionEnabled)"
  },
  {
    "label": "SetParentInvMassScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentInvMassScale(const FReal ParentInvMassScale)"
  },
  {
    "label": "SetDriveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDriveParams(\n\t\t\tconst FVec3 LinearStiffness, const FVec3 LinearDamping, const FVec3 MaxForce,\n\t\t\tconst FVec3 AngularStiffness, const FVec3 AngularDamping, const FVec3 MaxTorque)"
  },
  {
    "label": "SetSyncState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSyncState(ESyncState SyncState)"
  },
  {
    "label": "SetEnabledDuringResim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabledDuringResim(bool bEnabled)"
  },
  {
    "label": "FPBDJointState()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "FPBDJointState()"
  },
  {
    "label": "FPBDJointConstraints()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "FPBDJointConstraints()"
  },
  {
    "label": "SetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSettings(const FPBDJointSolverSettings& InSettings)"
  },
  {
    "label": "RemoveConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConstraint(int ConstraintIndex)"
  },
  {
    "label": "DisconnectConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectConstraints(const TSet<TGeometryParticleHandle<FReal, 3>*>& RemovedParticles)"
  },
  {
    "label": "ClearConstraintBreaking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearConstraintBreaking(int32 ConstraintIndex)"
  },
  {
    "label": "ClearConstraintViolating()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearConstraintViolating(int32 ConstraintIndex)"
  },
  {
    "label": "ClearDriveTargetChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDriveTargetChanged(int32 ConstraintIndex)"
  },
  {
    "label": "SetConstraintEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintEnabled(int32 ConstraintIndex, bool bEnabled)"
  },
  {
    "label": "SetDriveTargetChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDriveTargetChanged(int32 ConstraintIndex, bool bTargetChanged)"
  },
  {
    "label": "BreakConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakConstraint(int32 ConstraintIndex)"
  },
  {
    "label": "FixConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixConstraint(int32 ConstraintIndex)"
  },
  {
    "label": "SetBreakCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBreakCallback(const FJointBreakCallback& Callback)"
  },
  {
    "label": "ClearBreakCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBreakCallback()"
  },
  {
    "label": "SetConstraintSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintSettings(int32 ConstraintIndex, const FPBDJointSettings& InConstraintSettings)"
  },
  {
    "label": "SetLinearDrivePositionTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDrivePositionTarget(int32 ConstraintIndex, FVec3 InLinearDrivePositionTarget)"
  },
  {
    "label": "SetAngularDrivePositionTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDrivePositionTarget(int32 ConstraintIndex, FRotation3 InAngularDrivePositionTarget)"
  },
  {
    "label": "SetConstraintSyncState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintSyncState(int32 ConstraintIndex, ESyncState SyncState)"
  },
  {
    "label": "SetConstraintEnabledDuringResim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintEnabledDuringResim(int32 ConstraintIndex, bool bEnabled)"
  },
  {
    "label": "NumConstraints()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "NumConstraints()"
  },
  {
    "label": "SetSolverResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSolverResults(const int32 ConstraintIndex, const FVec3& LinearImpulse, const FVec3& AngularImpulse, const float LinearViolation, const float AngularViolation, const bool bIsBroken, const bool bIsViolating, const FSolverBody* SolverBody0, const FSolverBody* SolverBody1)"
  },
  {
    "label": "ColorConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ColorConstraints()"
  },
  {
    "label": "SortConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortConstraints()"
  },
  {
    "label": "ApplyPlasticityLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPlasticityLimits(const int32 ConstraintIndex, const FSolverBody& SolverBody0, const FSolverBody& SolverBody1)"
  },
  {
    "label": "SetConstraintBroken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintBroken(int32 ConstraintIndex, bool bBroken)"
  },
  {
    "label": "SetConstraintBreaking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintBreaking(int32 ConstraintIndex, bool bBreaking)"
  }
]