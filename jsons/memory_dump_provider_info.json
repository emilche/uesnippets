[
  {
    "label": "SequencedTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequencedTaskRunner"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Comparator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Comparator"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_MEMORY_DUMP_PROVIDER_INFO_H_ # define BASE_TRACE_EVENT_MEMORY_DUMP_PROVIDER_INFO_H_ # include<memory> # include<set> # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / ref_counted . h \" # include \" base / trace_event / memory_dump_provider . h \" namespace base { class SequencedTaskRunner ; namespace trace_event { struct BASE_EXPORT MemoryDumpProviderInfo : public RefCountedThreadSafe<MemoryDumpProviderInfo> { public : struct Comparator { bool)",
    "insertText": "operator()(const scoped_refptr<MemoryDumpProviderInfo>& a, const scoped_refptr<MemoryDumpProviderInfo>& b)"
  },
  {
    "label": "MemoryDumpProviderInfo()",
    "kind": "Method",
    "detail": "Function (} ; using OrderedSet = std::set<scoped_refptr<MemoryDumpProviderInfo>,Comparator> ;)",
    "insertText": "MemoryDumpProviderInfo(MemoryDumpProvider* dump_provider, const char* name, scoped_refptr<SequencedTaskRunner> task_runner, const MemoryDumpProvider::Options& options, bool allowed_in_background_mode)"
  },
  {
    "label": "MemoryDumpProviderInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryDumpProviderInfo(const MemoryDumpProviderInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MemoryDumpProviderInfo&)",
    "insertText": "operator(const MemoryDumpProviderInfo&)"
  },
  {
    "label": "MemoryDumpProviderInfo()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<MemoryDumpProvider> owned_dump_provider ; const raw_ptr<MemoryDumpProvider,DanglingUntriaged> dump_provider ; const MemoryDumpProvider::Options options ; const char* const name ; const scoped_refptr<SequencedTaskRunner> task_runner ; const bool allowed_in_background_mode ; int consecutive_failures ; bool disabled ; private : class base::RefCountedThreadSafe<MemoryDumpProviderInfo> ; ~)",
    "insertText": "MemoryDumpProviderInfo()"
  }
]