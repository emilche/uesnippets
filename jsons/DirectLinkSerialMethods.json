[
  {
    "label": "EStoreType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EStoreType"
  },
  {
    "label": "ESerialModifier",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESerialModifier"
  },
  {
    "label": "overlap",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "overlap"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TDefaultSerialMethod",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDefaultSerialMethod"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreTypes . h \" # include \" Math / Quat . h \" # include \" Math / Transform . h \" # include \" Math / Vector . h \" # include \" Misc / SecureHash . h \" # include \" Serialization / Archive . h \" namespace Reflect { enum EStoreType : uint8 { _bool = 1,_i8,_i16,_i32,_i64,_u8,_u16,_u32,_u64,_f32,_f64,_str,_vector,_vector4,_quat,_linearcolor,_md5hash,_transform,_storeTypeLast } ; enum ESerialModifier : uint8 { _default = 0<<5,_array = 1<<5,_alt1 = 2<<5,} ; uint8 _storeTypeMask = 0 b0001 ' 1 1 1 1 u ; uint8 _modifierMask = 0 b1110 ' 0 0 0 0 u ;)",
    "insertText": "static_assert((_storeTypeLast & _modifierMask) == 0, \"enum overlap\")"
  },
  {
    "label": "GetStoreType()",
    "kind": "Method",
    "detail": "Function (enum class ESerialMethod : uint8 { None = 0,Bool_Default = _bool | _default,Uint8_Default = _u8 | _default,Int32_Default = _i32 | _default,Int32_Array = _i32 | _array,Uint32_Default = _u32 | _default,Uint64_Default = _u64 | _default,Uint32_Packed = _u32 | _alt1,String_Default = _str | _default,String_Array = _str | _array,Float_Default = _f32 | _default,Float_Array = _f32 | _array,Double_Default = _f64 | _default,Vector_f32 = _vector | _default,Vector_f64 = _vector | _alt1,Quat_f32 = _quat | _default,Quat_f64 = _quat | _alt1,LinearColor_Default = _linearcolor | _default,MD5Hash_Default = _md5hash | _default,Transform_Default = _transform | _default,Transform_Array = _transform | _array,_NotImplementedYet = 0 xff } ; EStoreType)",
    "insertText": "GetStoreType(ESerialMethod Method)"
  },
  {
    "label": "GetStoreTypeForType()",
    "kind": "Method",
    "detail": "Function (} template<T> struct TDefaultSerialMethod { ESerialMethod Value = ESerialMethod::_NotImplementedYet ; } ; template<> struct TDefaultSerialMethod<bool> { ESerialMethod Value = ESerialMethod::Uint8_Default ; } ; template<> struct TDefaultSerialMethod<uint8> { ESerialMethod Value = ESerialMethod::Uint8_Default ; } ; template<> struct TDefaultSerialMethod<int32> { ESerialMethod Value = ESerialMethod::Int32_Default ; } ; template<> struct TDefaultSerialMethod<uint32> { ESerialMethod Value = ESerialMethod::Uint32_Default ; } ; template<> struct TDefaultSerialMethod<uint64> { ESerialMethod Value = ESerialMethod::Uint64_Default ; } ; template<> struct TDefaultSerialMethod<FString> { ESerialMethod Value = ESerialMethod::String_Default ; } ; template<> struct TDefaultSerialMethod<float> { ESerialMethod Value = ESerialMethod::Float_Default ; } ; template<> struct TDefaultSerialMethod<double> { ESerialMethod Value = ESerialMethod::Double_Default ; } ; template<> struct TDefaultSerialMethod<TArray<int32>> { ESerialMethod Value = ESerialMethod::Int32_Array ; } ; template<> struct TDefaultSerialMethod<TArray<FString>> { ESerialMethod Value = ESerialMethod::String_Array ; } ; template<> struct TDefaultSerialMethod<TArray<float>> { ESerialMethod Value = ESerialMethod::Float_Array ; } ; template<> struct TDefaultSerialMethod<FLinearColor> { ESerialMethod Value = ESerialMethod::LinearColor_Default ; } ; template<> struct TDefaultSerialMethod<FMD5Hash> { ESerialMethod Value = ESerialMethod::MD5Hash_Default ; } ; template<> struct TDefaultSerialMethod<FTransform> { ESerialMethod Value = ESerialMethod::Transform_Default ; } ; template<> struct TDefaultSerialMethod<TArray<FTransform>> { ESerialMethod Value = ESerialMethod::Transform_Array ; } ; template<> struct TDefaultSerialMethod<FVector> { ESerialMethod Value = ESerialMethod::Vector_f64 ; } ; template<> struct TDefaultSerialMethod<FQuat> { ESerialMethod Value = ESerialMethod::Quat_f64 ; } ; template<T> EStoreType)",
    "insertText": "GetStoreTypeForType()"
  },
  {
    "label": "CanSerializeWithMethod()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "CanSerializeWithMethod(ESerialMethod Method)"
  },
  {
    "label": "Serial()",
    "kind": "Method",
    "detail": "Function (} template<ESerialMethod Code,T> void)",
    "insertText": "Serial(FArchive& Ar, T* Param)"
  },
  {
    "label": "Uint32_Packed()",
    "kind": "Method",
    "detail": "Function (Ar<<* Param ; } template<> void Serial<)",
    "insertText": "Uint32_Packed(FArchive& Ar, uint32* ValuePtr)"
  },
  {
    "label": "SerializeIntPacked()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "SerializeIntPacked(*ValuePtr)"
  },
  {
    "label": "Vector_f32()",
    "kind": "Method",
    "detail": "Function (} template<> void Serial<)",
    "insertText": "Vector_f32(FArchive& Ar, FVector* ValuePtr)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (FVector3f Tmp ; Ar<<Tmp ;* ValuePtr =)",
    "insertText": "FVector(Tmp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Ar.IsSaving())"
  },
  {
    "label": "Tmp()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "Tmp(*ValuePtr)"
  },
  {
    "label": "Quat_f32()",
    "kind": "Method",
    "detail": "Function (Ar<<Tmp ; } } template<> void Serial<)",
    "insertText": "Quat_f32(FArchive& Ar, FQuat* ValuePtr)"
  },
  {
    "label": "FQuat()",
    "kind": "Method",
    "detail": "Function (FQuat4f Tmp ; Ar<<Tmp ;* ValuePtr =)",
    "insertText": "FQuat(Tmp)"
  },
  {
    "label": "SerialAny()",
    "kind": "Method",
    "detail": "Function (Ar<<Tmp ; } } bool)",
    "insertText": "SerialAny(FArchive& Ar, void* data, ESerialMethod Method)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SerialAny_Case(enumvalue, casttype) case enumvalue: Serial<enumvalue>(Ar, (casttype*)data)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::Bool_Default , bool)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::Uint8_Default , uint8)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::Int32_Default , int32)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::Uint32_Default , uint32)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::Uint64_Default , uint64)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::Uint32_Packed , uint32)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::String_Default , FString)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::Double_Default , double)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::Float_Default , float)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::Int32_Array , TArray<int32>)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::String_Array , TArray<FString>)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::Float_Array , TArray<float>)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::Vector_f32 , FVector)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::Vector_f64 , FVector)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::Quat_f32 , FQuat)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::Quat_f64 , FQuat)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::LinearColor_Default, FLinearColor)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::MD5Hash_Default , FMD5Hash)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::Transform_Default , FTransform)"
  },
  {
    "label": "SerialAny_Case()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialAny_Case(ESerialMethod::Transform_Array , TArray<FTransform>)"
  }
]