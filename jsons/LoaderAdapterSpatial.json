[
  {
    "label": "UWorldPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartition"
  },
  {
    "label": "ILoaderAdapterSpatial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILoaderAdapterSpatial"
  },
  {
    "label": "ILoaderAdapterSpatial()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" WorldPartition / WorldPartitionActorLoaderInterface . h \" # if WITH_EDITOR class UWorldPartition ; class ILoaderAdapterSpatial : public IWorldPartitionActorLoaderInterface::ILoaderAdapter { public :)",
    "insertText": "ILoaderAdapterSpatial(UWorld* InWorld)"
  },
  {
    "label": "ILoaderAdapterSpatial()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ILoaderAdapterSpatial()"
  },
  {
    "label": "ForEachActor()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "ForEachActor(TFunctionRef<void(const FWorldPartitionHandle&)> InOperation)"
  },
  {
    "label": "Intersect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Intersect(const FBox& Box)"
  },
  {
    "label": "HandleIntersectingContainer()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleIntersectingContainer(UWorldPartition* InWorldPartition, const FBox& InBoundingBox, TFunctionRef<void(const FWorldPartitionHandle&)> InOperation)"
  }
]