[
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "FAsyncIODelete",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncIODelete"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDeleteRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeleteRequest"
  },
  {
    "label": "FAsyncIODelete()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Async / Future . h \" # include \" Containers / Array . h \" # include \" Containers / StringView . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # ifndef WITH_ASYNCIODELETE_DEBUG # if DO_CHECK # define WITH_ASYNCIODELETE_DEBUG 1 # else # define WITH_ASYNCIODELETE_DEBUG 0 # endif # endif class FEvent ; class FAsyncIODelete { public :)",
    "insertText": "FAsyncIODelete(const FStringView& InOwnedTempRoot=FStringView())"
  },
  {
    "label": "FAsyncIODelete()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAsyncIODelete()"
  },
  {
    "label": "SetTempRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTempRoot(FStringView InSharedRoot)"
  },
  {
    "label": "GetTempRoot()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetTempRoot()"
  },
  {
    "label": "GetDeletesPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDeletesPaused()"
  },
  {
    "label": "Teardown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Teardown()"
  },
  {
    "label": "DeleteDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDirectory(const FStringView& PathToDelete)"
  },
  {
    "label": "DeleteFile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeleteFile(const FStringView& PathToDelete)"
  },
  {
    "label": "WaitForAllTasks()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WaitForAllTasks(float TimeLimitSeconds = 0.0f)"
  },
  {
    "label": "AsyncEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AsyncEnabled()"
  },
  {
    "label": "GetLockSuffix()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetLockSuffix()"
  },
  {
    "label": "SetMaxWaitSecondsForLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxWaitSecondsForLock(float WaitSeconds = -1.f)"
  },
  {
    "label": "OnTaskComplete()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnTaskComplete()"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (enum class EPathType { File,Directory } ; struct FDeleteRequest { FString Path ; EPathType PathType ; } ; bool)",
    "insertText": "Delete(const FStringView& PathToDelete, EPathType ExpectedType)"
  },
  {
    "label": "CreateDeleteTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDeleteTask(const FStringView& InDeletePath, EPathType PathType)"
  },
  {
    "label": "SynchronousDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SynchronousDelete(const TCHAR* InDeletePath, EPathType PathType)"
  },
  {
    "label": "TryPurgeOldAndCreateRoot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryPurgeOldAndCreateRoot(bool bCreateRoot, TArray<FDeleteRequest>& OutHangingRootsToDelete)"
  },
  {
    "label": "AddTempRoot()",
    "kind": "Method",
    "detail": "Function (FString SharedTempRoot ; FString TempRoot ; TUniquePtr<FArchive> TempRootLockFile ; TArray<FString> PausedDeletes ; FCriticalSection CriticalSection ; FEvent* TasksComplete = nullptr ; uint32 ActiveTaskCount = 0 ; uint32 DeleteCounter = 0 ; bool bInitialized = false ; bool bAsyncInitialized = false ; bool bPaused = false ; # if WITH_ASYNCIODELETE_DEBUG TArray<FString> AllTempRoots ; void)",
    "insertText": "AddTempRoot(const FStringView& InTempRoot)"
  },
  {
    "label": "RemoveTempRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTempRoot(const FStringView& InTempRoot)"
  }
]