[
  {
    "label": "BaseTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseTest"
  },
  {
    "label": "CallTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallTest"
  },
  {
    "label": "classPayloadTypes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "classPayloadTypes"
  },
  {
    "label": "BaseTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseTest"
  },
  {
    "label": "SendTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SendTest"
  },
  {
    "label": "EndToEndTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EndToEndTest"
  },
  {
    "label": "CallTest()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CallTest()"
  },
  {
    "label": "RegisterRtpExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterRtpExtension(const RtpExtension& extension)"
  },
  {
    "label": "RunBaseTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunBaseTest(BaseTest* test)"
  },
  {
    "label": "CreateCalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCalls()"
  },
  {
    "label": "CreateCalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCalls(const Call::Config& sender_config,\n                   const Call::Config& receiver_config)"
  },
  {
    "label": "CreateSenderCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSenderCall()"
  },
  {
    "label": "CreateSenderCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSenderCall(const Call::Config& config)"
  },
  {
    "label": "CreateReceiverCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateReceiverCall(const Call::Config& config)"
  },
  {
    "label": "DestroyCalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyCalls()"
  },
  {
    "label": "CreateVideoSendConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVideoSendConfig(VideoSendStream::Config* video_config,\n                             size_t num_video_streams,\n                             size_t num_used_ssrcs,\n                             Transport* send_transport)"
  },
  {
    "label": "CreateAudioAndFecSendConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAudioAndFecSendConfigs(size_t num_audio_streams,\n                                    size_t num_flexfec_streams,\n                                    Transport* send_transport)"
  },
  {
    "label": "SetAudioConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioConfig(const AudioSendStream::Config& config)"
  },
  {
    "label": "SetSendFecConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendFecConfig(std::vector<uint32_t> video_send_ssrcs)"
  },
  {
    "label": "SetSendUlpFecConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendUlpFecConfig(VideoSendStream::Config* send_config)"
  },
  {
    "label": "SetReceiveUlpFecConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceiveUlpFecConfig(\n      VideoReceiveStreamInterface::Config* receive_config)"
  },
  {
    "label": "CreateSendConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSendConfig(size_t num_video_streams,\n                        size_t num_audio_streams,\n                        size_t num_flexfec_streams,\n                        Transport* send_transport)"
  },
  {
    "label": "CreateMatchingVideoReceiveConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMatchingVideoReceiveConfigs(\n      const VideoSendStream::Config& video_send_config,\n      Transport* rtcp_send_transport)"
  },
  {
    "label": "CreateMatchingVideoReceiveConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMatchingVideoReceiveConfigs(\n      const VideoSendStream::Config& video_send_config,\n      Transport* rtcp_send_transport,\n      bool send_side_bwe,\n      VideoDecoderFactory* decoder_factory,\n      absl::optional<size_t> decode_sub_stream,\n      bool receiver_reference_time_report,\n      int rtp_history_ms)"
  },
  {
    "label": "AddMatchingVideoReceiveConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMatchingVideoReceiveConfigs(\n      std::vector<VideoReceiveStreamInterface::Config>* receive_configs,\n      const VideoSendStream::Config& video_send_config,\n      Transport* rtcp_send_transport,\n      bool send_side_bwe,\n      VideoDecoderFactory* decoder_factory,\n      absl::optional<size_t> decode_sub_stream,\n      bool receiver_reference_time_report,\n      int rtp_history_ms)"
  },
  {
    "label": "CreateMatchingAudioAndFecConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMatchingAudioAndFecConfigs(Transport* rtcp_send_transport)"
  },
  {
    "label": "CreateMatchingAudioConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMatchingAudioConfigs(Transport* transport, std::string sync_group)"
  },
  {
    "label": "CreateMatchingAudioConfig()",
    "kind": "Method",
    "detail": "Function (AudioReceiveStreamInterface::Config)",
    "insertText": "CreateMatchingAudioConfig(\n      const AudioSendStream::Config& send_config,\n      rtc::scoped_refptr<AudioDecoderFactory> audio_decoder_factory,\n      Transport* transport,\n      std::string sync_group)"
  },
  {
    "label": "CreateMatchingFecConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMatchingFecConfig(\n      Transport* transport,\n      const VideoSendStream::Config& video_send_config)"
  },
  {
    "label": "CreateMatchingReceiveConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMatchingReceiveConfigs(Transport* rtcp_send_transport)"
  },
  {
    "label": "CreateFrameGeneratorCapturerWithDrift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFrameGeneratorCapturerWithDrift(Clock* drift_clock,\n                                             float speed,\n                                             int framerate,\n                                             int width,\n                                             int height)"
  },
  {
    "label": "CreateFrameGeneratorCapturer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFrameGeneratorCapturer(int framerate, int width, int height)"
  },
  {
    "label": "CreateFakeAudioDevices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFakeAudioDevices(\n      std::unique_ptr<TestAudioDeviceModule::Capturer> capturer,\n      std::unique_ptr<TestAudioDeviceModule::Renderer> renderer)"
  },
  {
    "label": "CreateVideoStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVideoStreams()"
  },
  {
    "label": "CreateVideoSendStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVideoSendStreams()"
  },
  {
    "label": "CreateVideoSendStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVideoSendStream(const VideoEncoderConfig& encoder_config)"
  },
  {
    "label": "CreateAudioStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAudioStreams()"
  },
  {
    "label": "CreateFlexfecStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFlexfecStreams()"
  },
  {
    "label": "ConnectVideoSourcesToStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConnectVideoSourcesToStreams()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "StartVideoStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartVideoStreams()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "StopVideoStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopVideoStreams()"
  },
  {
    "label": "DestroyStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyStreams()"
  },
  {
    "label": "DestroyVideoSendStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyVideoSendStreams()"
  },
  {
    "label": "SetFakeVideoCaptureRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFakeVideoCaptureRotation(VideoRotation rotation)"
  },
  {
    "label": "SetVideoDegradation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoDegradation(DegradationPreference preference)"
  },
  {
    "label": "SetVideoSendConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoSendConfig(const VideoSendStream::Config& config)"
  },
  {
    "label": "SetVideoEncoderConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoEncoderConfig(const VideoEncoderConfig& config)"
  },
  {
    "label": "BaseTest()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "BaseTest()"
  },
  {
    "label": "BaseTest()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "BaseTest(TimeDelta timeout)"
  },
  {
    "label": "CreateCapturer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<TestAudioDeviceModule::Capturer>)",
    "insertText": "CreateCapturer()"
  },
  {
    "label": "CreateRenderer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<TestAudioDeviceModule::Renderer>)",
    "insertText": "CreateRenderer()"
  },
  {
    "label": "OnFakeAudioDevicesCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFakeAudioDevicesCreated(\n      TestAudioDeviceModule* send_audio_device,\n      TestAudioDeviceModule* recv_audio_device)"
  },
  {
    "label": "ModifySenderBitrateConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifySenderBitrateConfig(BitrateConstraints* bitrate_config)"
  },
  {
    "label": "ModifyReceiverBitrateConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyReceiverBitrateConfig(BitrateConstraints* bitrate_config)"
  },
  {
    "label": "OnCallsCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCallsCreated(Call* sender_call, Call* receiver_call)"
  },
  {
    "label": "CreateSendTransport()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<test::PacketTransport>)",
    "insertText": "CreateSendTransport(\n      TaskQueueBase* task_queue,\n      Call* sender_call)"
  },
  {
    "label": "CreateReceiveTransport()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<test::PacketTransport>)",
    "insertText": "CreateReceiveTransport(\n      TaskQueueBase* task_queue)"
  },
  {
    "label": "ModifyVideoConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyVideoConfigs(\n      VideoSendStream::Config* send_config,\n      std::vector<VideoReceiveStreamInterface::Config>* receive_configs,\n      VideoEncoderConfig* encoder_config)"
  },
  {
    "label": "ModifyVideoCaptureStartResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyVideoCaptureStartResolution(int* width,\n                                                 int* heigt,\n                                                 int* frame_rate)"
  },
  {
    "label": "ModifyVideoDegradationPreference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyVideoDegradationPreference(\n      DegradationPreference* degradation_preference)"
  },
  {
    "label": "OnVideoStreamsCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVideoStreamsCreated(\n      VideoSendStream* send_stream,\n      const std::vector<VideoReceiveStreamInterface*>& receive_streams)"
  },
  {
    "label": "ModifyAudioConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyAudioConfigs(\n      AudioSendStream::Config* send_config,\n      std::vector<AudioReceiveStreamInterface::Config>* receive_configs)"
  },
  {
    "label": "OnAudioStreamsCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAudioStreamsCreated(\n      AudioSendStream* send_stream,\n      const std::vector<AudioReceiveStreamInterface*>& receive_streams)"
  },
  {
    "label": "ModifyFlexfecConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyFlexfecConfigs(\n      std::vector<FlexfecReceiveStream::Config>* receive_configs)"
  },
  {
    "label": "OnFlexfecStreamsCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFlexfecStreamsCreated(\n      const std::vector<FlexfecReceiveStream*>& receive_streams)"
  },
  {
    "label": "OnFrameGeneratorCapturerCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameGeneratorCapturerCreated(\n      FrameGeneratorCapturer* frame_generator_capturer)"
  },
  {
    "label": "OnStreamsStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamsStopped()"
  },
  {
    "label": "SendTest()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "SendTest(TimeDelta timeout)"
  },
  {
    "label": "EndToEndTest()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "EndToEndTest()"
  },
  {
    "label": "EndToEndTest()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "EndToEndTest(TimeDelta timeout)"
  }
]