[
  {
    "label": "BaseTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseTest"
  },
  {
    "label": "CallTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallTest"
  },
  {
    "label": "classPayloadTypes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "classPayloadTypes"
  },
  {
    "label": "SendTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SendTest"
  },
  {
    "label": "EndToEndTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EndToEndTest"
  },
  {
    "label": "CallTest()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_CALL_TEST_H_ # define TEST_CALL_TEST_H_ # include<map> # include<memory> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / rtc_event_log / rtc_event_log . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / test / video / function_video_decoder_factory . h \" # include \" api / test / video / function_video_encoder_factory . h \" # include \" api / units / time_delta . h \" # include \" api / video / video_bitrate_allocator_factory . h \" # include \" call / call . h \" # include \" modules / audio_device / include / test_audio_device . h \" # include \" test / encoder_settings . h \" # include \" test / fake_decoder . h \" # include \" test / fake_videorenderer . h \" # include \" test / fake_vp8_encoder . h \" # include \" test / frame_generator_capturer . h \" # include \" test / rtp_rtcp_observer . h \" # include \" test / run_loop . h \" # include \" test / scoped_key_value_config . h \" namespace webrtc { namespace test { class BaseTest ; class CallTest : public::testing::Test,public RtpPacketSinkInterface { public :)",
    "insertText": "CallTest()"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (size_t kNumSsrcs = 6 ; const int kNumSimulcastStreams = 3 ; const int kDefaultWidth = 3 2 0 ; const int kDefaultHeight = 1 8 0 ; const int kDefaultFramerate = 3 0 ; TimeDelta kDefaultTimeout =)",
    "insertText": "Seconds(30)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (TimeDelta kLongTimeout =)",
    "insertText": "Seconds(120)"
  },
  {
    "label": "RegisterRtpExtension()",
    "kind": "Method",
    "detail": "Function (enum classPayloadTypes : uint8_t { kSendRtxPayloadType = 9 8,kRtxRedPayloadType = 9 9,kVideoSendPayloadType = 1 0 0,kAudioSendPayloadType = 1 0 3,kRedPayloadType = 1 1 8,kUlpfecPayloadType = 1 1 9,kFlexfecPayloadType = 1 2 0,kPayloadTypeH264 = 1 2 2,kPayloadTypeVP8 = 1 2 3,kPayloadTypeVP9 = 1 2 4,kPayloadTypeGeneric = 1 2 5,kFakeVideoSendPayloadType = 1 2 6,} ; const uint32_t kSendRtxSsrcs [ kNumSsrcs ] ; const uint32_t kVideoSendSsrcs [ kNumSsrcs ] ; const uint32_t kAudioSendSsrc ; const uint32_t kFlexfecSendSsrc ; const uint32_t kReceiverLocalVideoSsrc ; const uint32_t kReceiverLocalAudioSsrc ; const int kNackRtpHistoryMs ; const std::map<uint8_t,MediaType> payload_type_map_ ; protected : void)",
    "insertText": "RegisterRtpExtension(const RtpExtension& extension)"
  },
  {
    "label": "RunBaseTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunBaseTest(BaseTest* test)"
  },
  {
    "label": "CreateCalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCalls()"
  },
  {
    "label": "CreateCalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCalls(const Call::Config& sender_config, const Call::Config& receiver_config)"
  },
  {
    "label": "CreateSenderCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSenderCall()"
  },
  {
    "label": "CreateSenderCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSenderCall(const Call::Config& config)"
  },
  {
    "label": "CreateReceiverCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateReceiverCall(const Call::Config& config)"
  },
  {
    "label": "DestroyCalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyCalls()"
  },
  {
    "label": "CreateVideoSendConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVideoSendConfig(VideoSendStream::Config* video_config, size_t num_video_streams, size_t num_used_ssrcs, Transport* send_transport)"
  },
  {
    "label": "CreateAudioAndFecSendConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAudioAndFecSendConfigs(size_t num_audio_streams, size_t num_flexfec_streams, Transport* send_transport)"
  },
  {
    "label": "SetAudioConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioConfig(const AudioSendStream::Config& config)"
  },
  {
    "label": "SetSendFecConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendFecConfig(std::vector<uint32_t> video_send_ssrcs)"
  },
  {
    "label": "SetSendUlpFecConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendUlpFecConfig(VideoSendStream::Config* send_config)"
  },
  {
    "label": "SetReceiveUlpFecConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceiveUlpFecConfig(VideoReceiveStreamInterface::Config* receive_config)"
  },
  {
    "label": "CreateSendConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSendConfig(size_t num_video_streams, size_t num_audio_streams, size_t num_flexfec_streams, Transport* send_transport)"
  },
  {
    "label": "CreateMatchingVideoReceiveConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMatchingVideoReceiveConfigs(const VideoSendStream::Config& video_send_config, Transport* rtcp_send_transport)"
  },
  {
    "label": "CreateMatchingVideoReceiveConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMatchingVideoReceiveConfigs(const VideoSendStream::Config& video_send_config, Transport* rtcp_send_transport, bool send_side_bwe, VideoDecoderFactory* decoder_factory, absl::optional<size_t> decode_sub_stream, bool receiver_reference_time_report, int rtp_history_ms)"
  },
  {
    "label": "AddMatchingVideoReceiveConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMatchingVideoReceiveConfigs(std::vector<VideoReceiveStreamInterface::Config>* receive_configs, const VideoSendStream::Config& video_send_config, Transport* rtcp_send_transport, bool send_side_bwe, VideoDecoderFactory* decoder_factory, absl::optional<size_t> decode_sub_stream, bool receiver_reference_time_report, int rtp_history_ms)"
  },
  {
    "label": "CreateMatchingAudioAndFecConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMatchingAudioAndFecConfigs(Transport* rtcp_send_transport)"
  },
  {
    "label": "CreateMatchingAudioConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMatchingAudioConfigs(Transport* transport, std::string sync_group)"
  },
  {
    "label": "CreateMatchingAudioConfig()",
    "kind": "Method",
    "detail": "Function (AudioReceiveStreamInterface::Config)",
    "insertText": "CreateMatchingAudioConfig(const AudioSendStream::Config& send_config, rtc::scoped_refptr<AudioDecoderFactory> audio_decoder_factory, Transport* transport, std::string sync_group)"
  },
  {
    "label": "CreateMatchingFecConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMatchingFecConfig(Transport* transport, const VideoSendStream::Config& video_send_config)"
  },
  {
    "label": "CreateMatchingReceiveConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMatchingReceiveConfigs(Transport* rtcp_send_transport)"
  },
  {
    "label": "CreateFrameGeneratorCapturerWithDrift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFrameGeneratorCapturerWithDrift(Clock* drift_clock, float speed, int framerate, int width, int height)"
  },
  {
    "label": "CreateFrameGeneratorCapturer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFrameGeneratorCapturer(int framerate, int width, int height)"
  },
  {
    "label": "CreateFakeAudioDevices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFakeAudioDevices(std::unique_ptr<TestAudioDeviceModule::Capturer> capturer, std::unique_ptr<TestAudioDeviceModule::Renderer> renderer)"
  },
  {
    "label": "CreateVideoStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVideoStreams()"
  },
  {
    "label": "CreateVideoSendStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVideoSendStreams()"
  },
  {
    "label": "CreateVideoSendStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVideoSendStream(const VideoEncoderConfig& encoder_config)"
  },
  {
    "label": "CreateAudioStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAudioStreams()"
  },
  {
    "label": "CreateFlexfecStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFlexfecStreams()"
  },
  {
    "label": "ConnectVideoSourcesToStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConnectVideoSourcesToStreams()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "StartVideoStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartVideoStreams()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "StopVideoStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopVideoStreams()"
  },
  {
    "label": "DestroyStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyStreams()"
  },
  {
    "label": "DestroyVideoSendStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyVideoSendStreams()"
  },
  {
    "label": "SetFakeVideoCaptureRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFakeVideoCaptureRotation(VideoRotation rotation)"
  },
  {
    "label": "SetVideoDegradation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoDegradation(DegradationPreference preference)"
  },
  {
    "label": "GetVideoSendConfig()",
    "kind": "Method",
    "detail": "Function (VideoSendStream::Config*)",
    "insertText": "GetVideoSendConfig()"
  },
  {
    "label": "SetVideoSendConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoSendConfig(const VideoSendStream::Config& config)"
  },
  {
    "label": "GetVideoEncoderConfig()",
    "kind": "Method",
    "detail": "Function (VideoEncoderConfig*)",
    "insertText": "GetVideoEncoderConfig()"
  },
  {
    "label": "SetVideoEncoderConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoEncoderConfig(const VideoEncoderConfig& config)"
  },
  {
    "label": "GetVideoSendStream()",
    "kind": "Method",
    "detail": "Function (VideoSendStream*)",
    "insertText": "GetVideoSendStream()"
  },
  {
    "label": "GetFlexFecConfig()",
    "kind": "Method",
    "detail": "Function (FlexfecReceiveStream::Config*)",
    "insertText": "GetFlexFecConfig()"
  },
  {
    "label": "task_queue()",
    "kind": "Method",
    "detail": "Function (TaskQueueBase*)",
    "insertText": "task_queue()"
  },
  {
    "label": "OnRtpPacket()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRtpPacket(const RtpPacketReceived& packet)"
  },
  {
    "label": "GetRtpExtensionByUri()",
    "kind": "Method",
    "detail": "Function (test::RunLoop loop_ ; Clock* const clock_ ; test::ScopedKeyValueConfig field_trials_ ; std::unique_ptr<TaskQueueFactory> task_queue_factory_ ; std::unique_ptr<webrtc::RtcEventLog> send_event_log_ ; std::unique_ptr<webrtc::RtcEventLog> recv_event_log_ ; std::unique_ptr<Call> sender_call_ ; std::unique_ptr<PacketTransport> send_transport_ ; std::vector<VideoSendStream::Config> video_send_configs_ ; std::vector<VideoEncoderConfig> video_encoder_configs_ ; std::vector<VideoSendStream*> video_send_streams_ ; AudioSendStream::Config audio_send_config_ ; AudioSendStream* audio_send_stream_ ; std::unique_ptr<Call> receiver_call_ ; std::unique_ptr<PacketTransport> receive_transport_ ; std::vector<VideoReceiveStreamInterface::Config> video_receive_configs_ ; std::vector<VideoReceiveStreamInterface*> video_receive_streams_ ; std::vector<AudioReceiveStreamInterface::Config> audio_receive_configs_ ; std::vector<AudioReceiveStreamInterface*> audio_receive_streams_ ; std::vector<FlexfecReceiveStream::Config> flexfec_receive_configs_ ; std::vector<FlexfecReceiveStream*> flexfec_receive_streams_ ; test::FrameGeneratorCapturer* frame_generator_capturer_ ; std::vector<std::unique_ptr<rtc::VideoSourceInterface<VideoFrame>>> video_sources_ ; DegradationPreference degradation_preference_ = DegradationPreference::MAINTAIN_FRAMERATE ; std::unique_ptr<FecControllerFactoryInterface> fec_controller_factory_ ; std::unique_ptr<NetworkStatePredictorFactoryInterface> network_state_predictor_factory_ ; std::unique_ptr<NetworkControllerFactoryInterface> network_controller_factory_ ; test::FunctionVideoEncoderFactory fake_encoder_factory_ ; int fake_encoder_max_bitrate_ = - 1 ; test::FunctionVideoDecoderFactory fake_decoder_factory_ ; std::unique_ptr<VideoBitrateAllocatorFactory> bitrate_allocator_factory_ ; size_t num_video_streams_ ; size_t num_audio_streams_ ; size_t num_flexfec_streams_ ; rtc::scoped_refptr<AudioDecoderFactory> audio_decoder_factory_ ; rtc::scoped_refptr<AudioEncoderFactory> audio_encoder_factory_ ; test::FakeVideoRenderer fake_renderer_ ; private : absl::optional<RtpExtension>)",
    "insertText": "GetRtpExtensionByUri(const std::string& uri)"
  },
  {
    "label": "AddRtpExtensionByUri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRtpExtensionByUri(const std::string& uri, std::vector<RtpExtension>* extensions)"
  },
  {
    "label": "BaseTest()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<TaskQueueBase,TaskQueueDeleter> task_queue_ ; std::vector<RtpExtension> rtp_extensions_ ; rtc::scoped_refptr<AudioProcessing> apm_send_ ; rtc::scoped_refptr<AudioProcessing> apm_recv_ ; rtc::scoped_refptr<TestAudioDeviceModule> fake_send_audio_device_ ; rtc::scoped_refptr<TestAudioDeviceModule> fake_recv_audio_device_ ; } ; class BaseTest : public RtpRtcpObserver { public :)",
    "insertText": "BaseTest()"
  },
  {
    "label": "BaseTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BaseTest(TimeDelta timeout)"
  },
  {
    "label": "PerformTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformTest()"
  },
  {
    "label": "ShouldCreateReceivers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreateReceivers()"
  },
  {
    "label": "GetNumVideoStreams()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNumVideoStreams()"
  },
  {
    "label": "GetNumAudioStreams()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNumAudioStreams()"
  },
  {
    "label": "GetNumFlexfecStreams()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNumFlexfecStreams()"
  },
  {
    "label": "CreateCapturer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<TestAudioDeviceModule::Capturer>)",
    "insertText": "CreateCapturer()"
  },
  {
    "label": "CreateRenderer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<TestAudioDeviceModule::Renderer>)",
    "insertText": "CreateRenderer()"
  },
  {
    "label": "OnFakeAudioDevicesCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFakeAudioDevicesCreated(TestAudioDeviceModule* send_audio_device, TestAudioDeviceModule* recv_audio_device)"
  },
  {
    "label": "ModifySenderBitrateConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifySenderBitrateConfig(BitrateConstraints* bitrate_config)"
  },
  {
    "label": "ModifyReceiverBitrateConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyReceiverBitrateConfig(BitrateConstraints* bitrate_config)"
  },
  {
    "label": "OnCallsCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCallsCreated(Call* sender_call, Call* receiver_call)"
  },
  {
    "label": "CreateSendTransport()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<test::PacketTransport>)",
    "insertText": "CreateSendTransport(TaskQueueBase* task_queue, Call* sender_call)"
  },
  {
    "label": "CreateReceiveTransport()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<test::PacketTransport>)",
    "insertText": "CreateReceiveTransport(TaskQueueBase* task_queue)"
  },
  {
    "label": "ModifyVideoConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyVideoConfigs(VideoSendStream::Config* send_config, std::vector<VideoReceiveStreamInterface::Config>* receive_configs, VideoEncoderConfig* encoder_config)"
  },
  {
    "label": "ModifyVideoCaptureStartResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyVideoCaptureStartResolution(int* width, int* heigt, int* frame_rate)"
  },
  {
    "label": "ModifyVideoDegradationPreference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyVideoDegradationPreference(DegradationPreference* degradation_preference)"
  },
  {
    "label": "OnVideoStreamsCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVideoStreamsCreated(VideoSendStream* send_stream, const std::vector<VideoReceiveStreamInterface*>& receive_streams)"
  },
  {
    "label": "ModifyAudioConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyAudioConfigs(AudioSendStream::Config* send_config, std::vector<AudioReceiveStreamInterface::Config>* receive_configs)"
  },
  {
    "label": "OnAudioStreamsCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAudioStreamsCreated(AudioSendStream* send_stream, const std::vector<AudioReceiveStreamInterface*>& receive_streams)"
  },
  {
    "label": "ModifyFlexfecConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyFlexfecConfigs(std::vector<FlexfecReceiveStream::Config>* receive_configs)"
  },
  {
    "label": "OnFlexfecStreamsCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFlexfecStreamsCreated(const std::vector<FlexfecReceiveStream*>& receive_streams)"
  },
  {
    "label": "OnFrameGeneratorCapturerCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameGeneratorCapturerCreated(FrameGeneratorCapturer* frame_generator_capturer)"
  },
  {
    "label": "OnStreamsStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamsStopped()"
  },
  {
    "label": "SendTest()",
    "kind": "Method",
    "detail": "Function (} ; class SendTest : public BaseTest { public :)",
    "insertText": "SendTest(TimeDelta timeout)"
  },
  {
    "label": "EndToEndTest()",
    "kind": "Method",
    "detail": "Function (} ; class EndToEndTest : public BaseTest { public :)",
    "insertText": "EndToEndTest()"
  },
  {
    "label": "EndToEndTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndToEndTest(TimeDelta timeout)"
  }
]