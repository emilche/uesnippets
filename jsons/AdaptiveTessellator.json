[
  {
    "label": "FLerpVert",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLerpVert"
  },
  {
    "label": "FAdaptiveTessellator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAdaptiveTessellator"
  },
  {
    "label": "FTriangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriangle"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" Templates / Function . h \" # include<atomic> struct FLerpVert ; namespace Nanite { class FAdaptiveTessellator { using FDispFunc = TFunctionRef<)",
    "insertText": "FVector3f(const FVector3f&, const FLerpVert&, const FLerpVert&, const FLerpVert&, int32)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (using FBoundsFunc = TFunctionRef<)",
    "insertText": "FVector2f(const FVector3f[3], const FLerpVert&, const FLerpVert&, const FLerpVert&, const FVector3f&, const FVector3f&, const FVector3f&, int32)"
  },
  {
    "label": "FAdaptiveTessellator()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAdaptiveTessellator(TArray< FLerpVert >& InVerts, TArray< uint32 >& InIndexes, TArray< int32 >& InMaterialIndexes, float InTargetError, float InSampleRate, bool bCrackFree, FDispFunc InGetDisplacement, FBoundsFunc InGetErrorBounds)"
  },
  {
    "label": "AddFindRequest()",
    "kind": "Method",
    "detail": "Function (protected : FDispFunc GetDisplacement ; FBoundsFunc GetErrorBounds ; float TargetError ; float SampleRate ; TArray<FLerpVert>& Verts ; TArray<uint32>& Indexes ; TArray<int32>& MaterialIndexes ; TArray<FVector3f> Displacements ; TArray<int32> AdjEdges ; struct FTriangle { FVector3f SplitBarycentrics ; int32 RequestIndex = - 1 ; } ; TArray<FTriangle> Triangles ; TArray<uint32> FindRequests ; TArray<uint32> SplitRequests ; std::atomic<uint32> NumSplits ; void)",
    "insertText": "AddFindRequest(uint32 TriIndex)"
  },
  {
    "label": "RemoveSplitRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSplitRequest(uint32 TriIndex)"
  },
  {
    "label": "LinkEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkEdge(int32 EdgeIndex0, int32 EdgeIndex1)"
  },
  {
    "label": "GetTriNormal()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "GetTriNormal(uint32 TriIndex)"
  },
  {
    "label": "CouldFlipEdge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CouldFlipEdge(uint32 EdgeIndex)"
  },
  {
    "label": "TryDelaunayFlip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryDelaunayFlip(uint32 EdgeIndex)"
  },
  {
    "label": "FindSplit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindSplit(uint32 TriIndex)"
  },
  {
    "label": "FindSplitBVH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindSplitBVH(uint32 TriIndex)"
  },
  {
    "label": "SplitTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitTriangle(uint32 TriIndex)"
  }
]