[
  {
    "label": "VideoStreamEncoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoStreamEncoder"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CadenceCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CadenceCallback"
  },
  {
    "label": "VideoFrameInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoFrameInfo"
  },
  {
    "label": "EncoderRateSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EncoderRateSettings"
  },
  {
    "label": "DegradationPreferenceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DegradationPreferenceManager"
  },
  {
    "label": "AutomaticAnimationDetectionExperiment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AutomaticAnimationDetectionExperiment"
  },
  {
    "label": "VideoStreamEncoder()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_VIDEO_STREAM_ENCODER_H_ # define VIDEO_VIDEO_STREAM_ENCODER_H_ # include<atomic> # include<map> # include<memory> # include<string> # include<vector> # include \" api / adaptation / resource . h \" # include \" api / field_trials_view . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / units / data_rate . h \" # include \" api / video / encoded_image . h \" # include \" api / video / video_bitrate_allocator . h \" # include \" api / video / video_rotation . h \" # include \" api / video / video_sink_interface . h \" # include \" api / video / video_stream_encoder_settings . h \" # include \" api / video_codecs / video_codec . h \" # include \" api / video_codecs / video_encoder . h \" # include \" call / adaptation / adaptation_constraint . h \" # include \" call / adaptation / resource_adaptation_processor . h \" # include \" call / adaptation / resource_adaptation_processor_interface . h \" # include \" call / adaptation / video_source_restrictions . h \" # include \" call / adaptation / video_stream_input_state_provider . h \" # include \" modules / video_coding / utility / frame_dropper . h \" # include \" modules / video_coding / utility / qp_parser . h \" # include \" rtc_base / experiments / rate_control_settings . h \" # include \" rtc_base / numerics / exp_filter . h \" # include \" rtc_base / race_checker . h \" # include \" rtc_base / rate_statistics . h \" # include \" rtc_base / task_queue . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" # include \" video / adaptation / video_stream_encoder_resource_manager . h \" # include \" video / encoder_bitrate_adjuster . h \" # include \" video / frame_cadence_adapter . h \" # include \" video / frame_encode_metadata_writer . h \" # include \" video / video_source_sink_controller . h \" # include \" video / video_stream_encoder_interface . h \" # include \" video / video_stream_encoder_observer . h \" namespace webrtc { class VideoStreamEncoder : public VideoStreamEncoderInterface,private EncodedImageCallback,public VideoSourceRestrictionsListener { public : enum class BitrateAllocationCallbackType { kVideoBitrateAllocation,kVideoBitrateAllocationWhenScreenSharing,kVideoLayersAllocation } ;)",
    "insertText": "VideoStreamEncoder(Clock* clock, uint32_t number_of_cores, VideoStreamEncoderObserver* encoder_stats_observer, const VideoStreamEncoderSettings& settings, std::unique_ptr<OveruseFrameDetector> overuse_detector, std::unique_ptr<FrameCadenceAdapterInterface> frame_cadence_adapter, std::unique_ptr<webrtc::TaskQueueBase, webrtc::TaskQueueDeleter> encoder_queue, BitrateAllocationCallbackType allocation_cb_type, const FieldTrialsView& field_trials, webrtc::VideoEncoderFactory::EncoderSelectorInterface* encoder_selector = nullptr)"
  },
  {
    "label": "VideoStreamEncoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoStreamEncoder()"
  },
  {
    "label": "VideoStreamEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoStreamEncoder(const VideoStreamEncoder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VideoStreamEncoder&)",
    "insertText": "operator(const VideoStreamEncoder&)"
  },
  {
    "label": "AddAdaptationResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAdaptationResource(rtc::scoped_refptr<Resource> resource)"
  },
  {
    "label": "GetAdaptationResources()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<Resource>>)",
    "insertText": "GetAdaptationResources()"
  },
  {
    "label": "SetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSource(rtc::VideoSourceInterface<VideoFrame>* source, const DegradationPreference& degradation_preference)"
  },
  {
    "label": "SetSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSink(EncoderSink* sink, bool rotation_applied)"
  },
  {
    "label": "SetStartBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartBitrate(int start_bitrate_bps)"
  },
  {
    "label": "SetFecControllerOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFecControllerOverride(FecControllerOverride* fec_controller_override)"
  },
  {
    "label": "ConfigureEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureEncoder(VideoEncoderConfig config, size_t max_data_payload_length)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "SendKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendKeyFrame(const std::vector<VideoFrameType>& layers = {})"
  },
  {
    "label": "OnLossNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLossNotification(const VideoEncoder::LossNotification& loss_notification)"
  },
  {
    "label": "OnBitrateUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBitrateUpdated(DataRate target_bitrate, DataRate stable_target_bitrate, DataRate target_headroom, uint8_t fraction_lost, int64_t round_trip_time_ms, double cwnd_reduce_ratio)"
  },
  {
    "label": "UpdateTargetBitrate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "UpdateTargetBitrate(DataRate target_bitrate, double cwnd_reduce_ratio)"
  },
  {
    "label": "encoder_queue()",
    "kind": "Method",
    "detail": "Function (protected : TaskQueueBase*)",
    "insertText": "encoder_queue()"
  },
  {
    "label": "OnVideoSourceRestrictionsUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnVideoSourceRestrictionsUpdated(VideoSourceRestrictions restrictions, const VideoAdaptationCounters& adaptation_counters, rtc::scoped_refptr<Resource> reason, const VideoSourceRestrictions& unfiltered_restrictions)"
  },
  {
    "label": "InjectAdaptationResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InjectAdaptationResource(rtc::scoped_refptr<Resource> resource, VideoAdaptationReason reason)"
  },
  {
    "label": "InjectAdaptationConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InjectAdaptationConstraint(AdaptationConstraint* adaptation_constraint)"
  },
  {
    "label": "AddRestrictionsListenerForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRestrictionsListenerForTesting(VideoSourceRestrictionsListener* restrictions_listener)"
  },
  {
    "label": "RemoveRestrictionsListenerForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRestrictionsListenerForTesting(VideoSourceRestrictionsListener* restrictions_listener)"
  },
  {
    "label": "CadenceCallback()",
    "kind": "Method",
    "detail": "Function (private : class CadenceCallback : public FrameCadenceAdapterInterface::Callback { public :)",
    "insertText": "CadenceCallback(VideoStreamEncoder& video_stream_encoder) : video_stream_encoder_(video_stream_encoder)"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFrame(Timestamp post_time, int frames_scheduled_for_processing, const VideoFrame& frame)"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (video_stream_encoder_ .)",
    "insertText": "OnFrame(post_time, frames_scheduled_for_processing, frame)"
  },
  {
    "label": "OnDiscardedFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDiscardedFrame()"
  },
  {
    "label": "RequestRefreshFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestRefreshFrame()"
  },
  {
    "label": "VideoFrameInfo()",
    "kind": "Method",
    "detail": "Function (} private : VideoStreamEncoder& video_stream_encoder_ ; } ; class VideoFrameInfo { public :)",
    "insertText": "VideoFrameInfo(int width, int height, bool is_texture) : width(width), height(height), is_texture(is_texture)"
  },
  {
    "label": "pixel_count()",
    "kind": "Method",
    "detail": "Function (} int width ; int height ; bool is_texture ; int)",
    "insertText": "pixel_count()"
  },
  {
    "label": "EncoderRateSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncoderRateSettings(const VideoBitrateAllocation& bitrate, double framerate_fps, DataRate bandwidth_allocation, DataRate encoder_target, DataRate stable_encoder_target)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const EncoderRateSettings& rhs)"
  },
  {
    "label": "ReconfigureEncoder()",
    "kind": "Method",
    "detail": "Function (VideoEncoder::RateControlParameters rate_control ; DataRate encoder_target ; DataRate stable_encoder_target ; } ; class DegradationPreferenceManager ; void)",
    "insertText": "ReconfigureEncoder() RTC_RUN_ON(&encoder_queue_)"
  },
  {
    "label": "OnEncoderSettingsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncoderSettingsChanged() RTC_RUN_ON(&encoder_queue_)"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrame(Timestamp post_time, int frames_scheduled_for_processing, const VideoFrame& video_frame)"
  },
  {
    "label": "MaybeEncodeVideoFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeEncodeVideoFrame(const VideoFrame& frame, int64_t time_when_posted_in_ms)"
  },
  {
    "label": "EncodeVideoFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeVideoFrame(const VideoFrame& frame, int64_t time_when_posted_in_ms)"
  },
  {
    "label": "DropDueToSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropDueToSize(uint32_t pixel_count) const RTC_RUN_ON(&encoder_queue_)"
  },
  {
    "label": "OnEncodedImage()",
    "kind": "Method",
    "detail": "Function (EncodedImageCallback::Result)",
    "insertText": "OnEncodedImage(const EncodedImage& encoded_image, const CodecSpecificInfo* codec_specific_info)"
  },
  {
    "label": "OnDroppedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDroppedFrame(EncodedImageCallback::DropReason reason)"
  },
  {
    "label": "EncoderPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EncoderPaused()"
  },
  {
    "label": "TraceFrameDropStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceFrameDropStart()"
  },
  {
    "label": "TraceFrameDropEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceFrameDropEnd()"
  },
  {
    "label": "UpdateBitrateAllocation()",
    "kind": "Method",
    "detail": "Function (EncoderRateSettings)",
    "insertText": "UpdateBitrateAllocation(const EncoderRateSettings& rate_settings) RTC_RUN_ON(&encoder_queue_)"
  },
  {
    "label": "GetInputFramerateFps()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetInputFramerateFps() RTC_RUN_ON(&encoder_queue_)"
  },
  {
    "label": "SetEncoderRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderRates(const EncoderRateSettings& rate_settings) RTC_RUN_ON(&encoder_queue_)"
  },
  {
    "label": "RunPostEncode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPostEncode(const EncodedImage& encoded_image, int64_t time_sent_us, int temporal_index, DataSize frame_size)"
  },
  {
    "label": "ReleaseEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseEncoder() RTC_RUN_ON(&encoder_queue_)"
  },
  {
    "label": "ShutdownResourceAdaptationQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownResourceAdaptationQueue()"
  },
  {
    "label": "CheckForAnimatedContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForAnimatedContent(const VideoFrame& frame, int64_t time_when_posted_in_ms) RTC_RUN_ON(&encoder_queue_)"
  },
  {
    "label": "RequestEncoderSwitch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEncoderSwitch() RTC_RUN_ON(&encoder_queue_)"
  },
  {
    "label": "AugmentEncodedImage()",
    "kind": "Method",
    "detail": "Function (EncodedImage)",
    "insertText": "AugmentEncodedImage(const EncodedImage& encoded_image, const CodecSpecificInfo* codec_specific_info)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const FieldTrialsView& field_trials_ ; TaskQueueBase* const worker_queue_ ; const int number_of_cores_ ; EncoderSink* sink_ ; const VideoStreamEncoderSettings settings_ ; const BitrateAllocationCallbackType allocation_cb_type_ ; const RateControlSettings rate_control_settings_ ; webrtc::VideoEncoderFactory::EncoderSelectorInterface* const encoder_selector_from_constructor_ ; std::unique_ptr<VideoEncoderFactory::EncoderSelectorInterface> const encoder_selector_from_factory_ ; VideoEncoderFactory::EncoderSelectorInterface* const encoder_selector_ ; VideoStreamEncoderObserver* const encoder_stats_observer_ ; CadenceCallback cadence_callback_ ; std::unique_ptr<FrameCadenceAdapterInterface> frame_cadence_adapter_)",
    "insertText": "RTC_GUARDED_BY(&encoder_queue_) RTC_PT_GUARDED_BY(&encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (VideoEncoderConfig encoder_config_)",
    "insertText": "RTC_GUARDED_BY(&encoder_queue_)"
  },
  {
    "label": "Parser()",
    "kind": "Method",
    "detail": "Function (FrameEncodeMetadataWriter frame_encode_metadata_writer_ ; const std::array<uint8_t,2> experiment_groups_ ; struct AutomaticAnimationDetectionExperiment { bool enabled = false ; int min_duration_ms = 2 0 0 0 ; double min_area_ratio = 0 . 8 ; int min_fps = 1 0 ; std::unique_ptr<StructParametersParser>)",
    "insertText": "Parser()"
  },
  {
    "label": "ParseAutomatincAnimationDetectionFieldTrial()",
    "kind": "Method",
    "detail": "Function (} } ; AutomaticAnimationDetectionExperiment)",
    "insertText": "ParseAutomatincAnimationDetectionFieldTrial()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (VideoSourceSinkController video_source_sink_controller_)",
    "insertText": "RTC_GUARDED_BY(worker_queue_)"
  }
]