[
  {
    "label": "exponential_distribution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "exponential_distribution"
  },
  {
    "label": "param_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "param_type"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_EXPONENTIAL_DISTRIBUTION_H_ # define ABSL_RANDOM_EXPONENTIAL_DISTRIBUTION_H_ # include<cassert> # include<cmath> # include<istream> # include<limits> # include<type_traits> # include \" absl / meta / type_traits . h \" # include \" absl / random / internal / fast_uniform_bits . h \" # include \" absl / random / internal / generate_real . h \" # include \" absl / random / internal / iostream_state_saver . h \" namespace absl { ABSL_NAMESPACE_BEGIN template<RealType = double> class exponential_distribution { public : using result_type = RealType ; class param_type { public : using distribution_type = exponential_distribution ;)",
    "insertText": "param_type(result_type lambda = 1) : lambda_(lambda)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(lambda > 0)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (neg_inv_lambda_ = -)",
    "insertText": "result_type(1)"
  },
  {
    "label": "lambda()",
    "kind": "Method",
    "detail": "Function (} result_type)",
    "insertText": "lambda()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} private : class exponential_distribution ; result_type lambda_ ; result_type neg_inv_lambda_ ;)",
    "insertText": "static_assert(std::is_floating_point<RealType>::value, \"Class-template absl::exponential_distribution<> must be parameterized \" \"using a floating-point type.\")"
  },
  {
    "label": "exponential_distribution()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "exponential_distribution() : exponential_distribution(1)"
  },
  {
    "label": "exponential_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "exponential_distribution(result_type lambda) : param_(lambda)"
  },
  {
    "label": "exponential_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "exponential_distribution(const param_type& p) : param_(p)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()(URBG& g)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()(URBG& g, const param_type& p)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (param_type)",
    "insertText": "param()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (param_ = p ; })",
    "insertText": "result_type(min)()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const exponential_distribution& a, const exponential_distribution& b)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (using random_internal::GenerateNegativeTag ; using random_internal::GenerateRealFromBits ; using real_type = absl::conditional_t<std::is_same<RealType,float>::value,float,double> ; const result_type u = GenerateRealFromBits<real_type,GenerateNegativeTag,)",
    "insertText": "false(fast_u64_(g))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<CharT,Traits,RealType> std::basic_ostream<CharT,Traits>&)",
    "insertText": "operator(std::basic_ostream<CharT, Traits>& os, const exponential_distribution<RealType>& x)"
  },
  {
    "label": "make_ostream_state_saver()",
    "kind": "Method",
    "detail": "Function (auto saver =)",
    "insertText": "make_ostream_state_saver(os)"
  },
  {
    "label": "precision()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "precision(random_internal::stream_precision_helper<RealType>::kPrecision)"
  },
  {
    "label": "make_istream_state_saver()",
    "kind": "Method",
    "detail": "Function (using result_type = exponential_distribution<RealType>::result_type ; using param_type = exponential_distribution<RealType>::param_type ; result_type lambda ; auto saver =)",
    "insertText": "make_istream_state_saver(is)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (lambda = random_internal::read_floating_point<)",
    "insertText": "result_type(is)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "param(param_type(lambda))"
  }
]