[
  {
    "label": "map_params",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "map_params"
  },
  {
    "label": "btree_map",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree_map"
  },
  {
    "label": "btree_multimap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree_multimap"
  },
  {
    "label": "btree_map()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_BTREE_MAP_H_ # define ABSL_CONTAINER_BTREE_MAP_H_ # include \" absl / container / internal / btree . h \" # include \" absl / container / internal / btree_container . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<Key,Data,Compare,Alloc,int TargetNodeSize,bool IsMulti> struct map_params ; } template<Key,Value,Compare = std::less<Key>,Alloc = std::allocator<std::pair<const Key,Value>>> class btree_map : public container_internal::btree_map_container<container_internal::btree<container_internal::map_params<Key,Value,Compare,Alloc,2 5 6,false>>> { using Base = btree_map::btree_map_container ; public :)",
    "insertText": "btree_map()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} using Base::Base ; using Base::begin ; using Base::cbegin ; using Base::end ; using Base::cend ; using Base::empty ; using Base::max_size ; using Base::size ; using Base::clear ; using Base::erase ; using Base::insert ; using Base::insert_or_assign ; using Base::emplace ; using Base::emplace_hint ; using Base::try_emplace ; using Base::extract ; using Base::merge ; using Base::swap ; using Base::at ; using Base::contains ; using Base::count ; using Base::equal_range ; using Base::find ; using Base::lower_bound ; using Base::upper_bound ; using Base::operator [ ] ; using Base::get_allocator ; using Base::key_comp ; using Base::value_comp ; } ; template<K,V,C,A> void)",
    "insertText": "swap(btree_map<K, V, C, A> &x, btree_map<K, V, C, A> &y)"
  },
  {
    "label": "erase_if()",
    "kind": "Method",
    "detail": "Function (} template<K,V,C,A,Pred> btree_map<K,V,C,A>::size_type)",
    "insertText": "erase_if(btree_map<K, V, C, A> &map, Pred pred)"
  },
  {
    "label": "btree_multimap()",
    "kind": "Method",
    "detail": "Function (} template<Key,Value,Compare = std::less<Key>,Alloc = std::allocator<std::pair<const Key,Value>>> class btree_multimap : public container_internal::btree_multimap_container<container_internal::btree<container_internal::map_params<Key,Value,Compare,Alloc,2 5 6,true>>> { using Base = btree_multimap::btree_multimap_container ; public :)",
    "insertText": "btree_multimap()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} using Base::Base ; using Base::begin ; using Base::cbegin ; using Base::end ; using Base::cend ; using Base::empty ; using Base::max_size ; using Base::size ; using Base::clear ; using Base::erase ; using Base::insert ; using Base::emplace ; using Base::emplace_hint ; using Base::extract ; using Base::merge ; using Base::swap ; using Base::contains ; using Base::count ; using Base::equal_range ; using Base::find ; using Base::lower_bound ; using Base::upper_bound ; using Base::get_allocator ; using Base::key_comp ; using Base::value_comp ; } ; template<K,V,C,A> void)",
    "insertText": "swap(btree_multimap<K, V, C, A> &x, btree_multimap<K, V, C, A> &y)"
  },
  {
    "label": "erase_if()",
    "kind": "Method",
    "detail": "Function (} template<K,V,C,A,Pred> btree_multimap<K,V,C,A>::size_type)",
    "insertText": "erase_if(btree_multimap<K, V, C, A> &map, Pred pred)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (} namespace container_internal { template<Key,Data,Compare,Alloc,int TargetNodeSize,bool IsMulti> struct map_params : common_params<Key,Compare,Alloc,TargetNodeSize,IsMulti,true,map_slot_policy<Key,Data>> { using super_type = map_params::common_params ; using mapped_type = Data ; using slot_policy = super_type::slot_policy ; using slot_type = super_type::slot_type ; using value_type = super_type::value_type ; using init_type = super_type::init_type ; template<V> auto)",
    "insertText": "key(const V &value) -> decltype(value.first)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (} const Key&)",
    "insertText": "key(slot_type *s)"
  },
  {
    "label": "mutable_key()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "mutable_key(slot_type *s) -> decltype(slot_policy::mutable_key(s))"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} mapped_type&)",
    "insertText": "value(value_type *value)"
  }
]