[
  {
    "label": "Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tp"
  },
  {
    "label": "coroutine_traits_sfinae",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "coroutine_traits_sfinae"
  },
  {
    "label": "coroutine_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "coroutine_traits"
  },
  {
    "label": "coroutine_handle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "coroutine_handle"
  },
  {
    "label": "PromiseT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PromiseT"
  },
  {
    "label": "suspend_never",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "suspend_never"
  },
  {
    "label": "suspend_always",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "suspend_always"
  },
  {
    "label": "hash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hash"
  },
  {
    "label": "__has_include()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef WITH_CPP_COROUTINES # define WITH_CPP_COROUTINES 0 # endif # if WITH_CPP_COROUTINES # if)",
    "insertText": "__has_include(<coroutine>) #include <coroutine> #elif __has_include(<experimental/coroutine>)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (namespace experimental { template<class . . .> using Void_t = void ; typedef)",
    "insertText": "decltype(nullptr)"
  },
  {
    "label": "coroutine_handle()",
    "kind": "Method",
    "detail": "Function (template<class Tp,class = void> struct coroutine_traits_sfinae { } ; template<class Tp> struct coroutine_traits_sfinae<Tp,Void_t<Tp::promise_type>> { using promise_type = Tp::promise_type ; } ; template<Ret,. . . Args> struct coroutine_traits : public coroutine_traits_sfinae<Ret> { } ; template<Promise = void> class coroutine_handle ; template<> class coroutine_handle<void> { public :)",
    "insertText": "coroutine_handle() noexcept : handle(nullptr)"
  },
  {
    "label": "coroutine_handle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "coroutine_handle(Nullptr_t) noexcept : handle(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} coroutine_handle&)",
    "insertText": "operator(Nullptr_t)"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (handle = nullptr ; return* this ; } void*)",
    "insertText": "address()"
  },
  {
    "label": "resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resume()"
  },
  {
    "label": "__builtin_coro_resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__builtin_coro_resume(handle)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "destroy()"
  },
  {
    "label": "__builtin_coro_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__builtin_coro_destroy(handle)"
  },
  {
    "label": "done()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "done()"
  },
  {
    "label": "from_address()",
    "kind": "Method",
    "detail": "Function (} public : coroutine_handle)",
    "insertText": "from_address(void* addr)"
  },
  {
    "label": "from_address()",
    "kind": "Method",
    "detail": "Function (coroutine_handle tmp ; tmp . handle = addr ; return tmp ; } coroutine_handle)",
    "insertText": "from_address(Nullptr_t)"
  },
  {
    "label": "from_address()",
    "kind": "Method",
    "detail": "Function (} template<class Tp,bool CallIsValid = false> coroutine_handle)",
    "insertText": "from_address(Tp*)"
  },
  {
    "label": "is_suspended()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "is_suspended()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(coroutine_handle<> x, coroutine_handle<> y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(nullptr)"
  },
  {
    "label": "from_address()",
    "kind": "Method",
    "detail": "Function (} template<bool CallIsValid = false> coroutine_handle)",
    "insertText": "from_address(Promise*)"
  },
  {
    "label": "from_promise()",
    "kind": "Method",
    "detail": "Function (} coroutine_handle)",
    "insertText": "from_promise(Promise& promise)"
  },
  {
    "label": "__builtin_coro_promise()",
    "kind": "Method",
    "detail": "Function (typedef std::remove_cv<Promise>::type RawPromise ; coroutine_handle tmp ; tmp . handle =)",
    "insertText": "__builtin_coro_promise(std::addressof(const_cast<RawPromise&>(promise)), alignof(Promise), true)"
  },
  {
    "label": "await_resume()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "await_resume()"
  },
  {
    "label": "await_ready()",
    "kind": "Method",
    "detail": "Function (} } ; struct suspend_always { bool)",
    "insertText": "await_ready()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; } template<class Tp> struct hash<experimental::coroutine_handle<Tp>> { using arg_type = experimental::coroutine_handle<Tp> ; size_t)",
    "insertText": "operator()(arg_type const& v)"
  }
]