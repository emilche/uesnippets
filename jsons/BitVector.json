[
  {
    "label": "BitVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitVector"
  },
  {
    "label": "reference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "reference"
  },
  {
    "label": "BITWORD_SIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_BITVECTOR_H # define LLVM_ADT_BITVECTOR_H # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / ErrorHandling . h \" # include \" llvm / Support / MathExtras . h \" # include<algorithm> # include<cassert> # include<climits> # include<cstdlib> namespace llvm { class BitVector { typedef unsigned long BitWord ; enum {)",
    "insertText": "BITWORD_SIZE(unsigned)sizeof(BitWord)"
  },
  {
    "label": "reference()",
    "kind": "Method",
    "detail": "Function (BitWord* Bits ; unsigned Size ; unsigned Capacity ; public : typedef unsigned size_type ; class reference { class BitVector ; BitWord* WordRef ; unsigned BitPos ;)",
    "insertText": "reference()"
  },
  {
    "label": "reference()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "reference(BitVector &b, unsigned Idx)"
  },
  {
    "label": "reference()",
    "kind": "Method",
    "detail": "Function (WordRef =& b . Bits [ Idx / BITWORD_SIZE ] ; BitPos = Idx % BITWORD_SIZE ; })",
    "insertText": "reference(const reference&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (reference&)",
    "insertText": "operator(reference t)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "bool(t)"
  },
  {
    "label": "BitVector()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "BitVector() : Size(0), Capacity(0)"
  },
  {
    "label": "BitVector()",
    "kind": "Method",
    "detail": "Function (Bits = nullptr ; })",
    "insertText": "BitVector(unsigned s, bool t = false) : Size(s)"
  },
  {
    "label": "NumBitWords()",
    "kind": "Method",
    "detail": "Function (Capacity =)",
    "insertText": "NumBitWords(s)"
  },
  {
    "label": "init_words()",
    "kind": "Method",
    "detail": "Function (Bits = new BitWord [ Capacity ] ;)",
    "insertText": "init_words(Bits, Capacity, t)"
  },
  {
    "label": "BitVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BitVector(const BitVector &RHS) : Size(RHS.size())"
  },
  {
    "label": "NumBitWords()",
    "kind": "Method",
    "detail": "Function (Bits = nullptr ; Capacity = 0 ; return ; } Capacity =)",
    "insertText": "NumBitWords(RHS.size())"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (Bits = new BitWord [ Capacity ] ;)",
    "insertText": "memcpy(Bits, RHS.Bits, Capacity * sizeof(BitWord))"
  },
  {
    "label": "BitVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BitVector(BitVector &&RHS) : Bits(RHS.Bits), Size(RHS.Size), Capacity(RHS.Capacity)"
  },
  {
    "label": "BitVector()",
    "kind": "Method",
    "detail": "Function (RHS . Bits = nullptr ; } ~)",
    "insertText": "BitVector()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (delete [ ] Bits ; } bool)",
    "insertText": "empty()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned NumBits = 0 ;)",
    "insertText": "for(unsigned i = 0; i < NumBitWords(size()); ++i) NumBits += countPopulation(Bits[i])"
  },
  {
    "label": "find_first()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "find_first()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + Prev ;)",
    "insertText": "if(Prev >= Size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned WordPos = Prev / BITWORD_SIZE ; unsigned BitPos = Prev % BITWORD_SIZE ; BitWord Copy = Bits [ WordPos ] ; Copy& = ~ 0 UL<<BitPos ;)",
    "insertText": "if(Copy != 0) return WordPos * BITWORD_SIZE + countTrailingZeros(Copy)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (Size = 0 ; } void)",
    "insertText": "resize(unsigned N, bool t = false)"
  },
  {
    "label": "grow()",
    "kind": "Method",
    "detail": "Function (unsigned OldCapacity = Capacity ;)",
    "insertText": "grow(N)"
  },
  {
    "label": "init_words()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init_words(&Bits[OldCapacity], (Capacity-OldCapacity), t)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(N > Size) set_unused_bits(t)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned OldSize = Size ; Size = N ;)",
    "insertText": "if(t || N < OldSize) clear_unused_bits()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reserve(unsigned N)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} BitVector&)",
    "insertText": "set()"
  },
  {
    "label": "init_words()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init_words(Bits, Capacity, true)"
  },
  {
    "label": "clear_unused_bits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear_unused_bits()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Bits && \"Bits never allocated\")"
  },
  {
    "label": "BitWord()",
    "kind": "Method",
    "detail": "Function (Bits [ Idx / BITWORD_SIZE ] | =)",
    "insertText": "BitWord(1) << (Idx % BITWORD_SIZE)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I <= E && \"Attempted to set backwards range!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(E <= size() && \"Attempted to set out-of-bounds range!\")"
  },
  {
    "label": "UL()",
    "kind": "Method",
    "detail": "Function (BitWord EMask = 1)",
    "insertText": "UL(E % BITWORD_SIZE)"
  },
  {
    "label": "UL()",
    "kind": "Method",
    "detail": "Function (BitWord IMask = 1)",
    "insertText": "UL(I % BITWORD_SIZE)"
  },
  {
    "label": "RoundUpToAlignment()",
    "kind": "Method",
    "detail": "Function (Bits [ I / BITWORD_SIZE ] | = PrefixMask ; I =)",
    "insertText": "RoundUpToAlignment(I, BITWORD_SIZE)"
  },
  {
    "label": "PostfixMask()",
    "kind": "Method",
    "detail": "Function (BitWord)",
    "insertText": "PostfixMask(1UL << (E % BITWORD_SIZE))"
  },
  {
    "label": "init_words()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init_words(Bits, Capacity, false)"
  },
  {
    "label": "BITWORD_SIZE()",
    "kind": "Method",
    "detail": "Function (Bits [ Idx /)",
    "insertText": "BITWORD_SIZE(BitWord(1) << (Idx % BITWORD_SIZE))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I <= E && \"Attempted to reset backwards range!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(E <= size() && \"Attempted to reset out-of-bounds range!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Idx < Size && \"Out-of-bounds Bit access.\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(unsigned Idx)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "test(unsigned Idx)"
  },
  {
    "label": "anyCommon()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "anyCommon(const BitVector &RHS)"
  },
  {
    "label": "NumBitWords()",
    "kind": "Method",
    "detail": "Function (unsigned ThisWords =)",
    "insertText": "NumBitWords(size())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned i ;)",
    "insertText": "for(i = 0; i != std::min(ThisWords, RHSWords); ++i) if (Bits[i] != RHS.Bits[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(i != RHSWords)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "operator(const BitVector &RHS)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned i ;)",
    "insertText": "for(i = 0; i != std::min(ThisWords, RHSWords); ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned i ;)",
    "insertText": "for(i = 0; i != std::min(ThisWords, RHSWords); ++i) if ((Bits[i] & ~RHS.Bits[i]) != 0)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (Size = RHS .)",
    "insertText": "size()"
  },
  {
    "label": "NumBitWords()",
    "kind": "Method",
    "detail": "Function (unsigned RHSWords =)",
    "insertText": "NumBitWords(Size)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (BitWord* NewBits = new BitWord [ Capacity ] ;)",
    "insertText": "memcpy(NewBits, RHS.Bits, Capacity * sizeof(BitWord))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (delete [ ] Bits ; Bits = NewBits ; return* this ; } const BitVector&)",
    "insertText": "operator(BitVector &&RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (delete [ ] Bits ; Bits = RHS . Bits ; Size = RHS . Size ; Capacity = RHS . Capacity ; RHS . Bits = nullptr ; return* this ; } void)",
    "insertText": "swap(BitVector &RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(Bits, RHS.Bits)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(Size, RHS.Size)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(Capacity, RHS.Capacity)"
  },
  {
    "label": "setBitsInMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setBitsInMask(const uint32_t *Mask, unsigned MaskWords = ~0u)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (applyMask<true,)",
    "insertText": "false(Mask, MaskWords)"
  },
  {
    "label": "clearBitsInMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearBitsInMask(const uint32_t *Mask, unsigned MaskWords = ~0u)"
  },
  {
    "label": "setBitsNotInMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setBitsNotInMask(const uint32_t *Mask, unsigned MaskWords = ~0u)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (applyMask<true,)",
    "insertText": "true(Mask, MaskWords)"
  },
  {
    "label": "clearBitsNotInMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearBitsNotInMask(const uint32_t *Mask, unsigned MaskWords = ~0u)"
  },
  {
    "label": "NumBitWords()",
    "kind": "Method",
    "detail": "Function (} private : unsigned)",
    "insertText": "NumBitWords(unsigned S)"
  },
  {
    "label": "set_unused_bits()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_unused_bits(bool t = true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned ExtraBits = Size % BITWORD_SIZE ;)",
    "insertText": "if(ExtraBits)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BitWord ExtraBitMask = ~ 0 UL<<ExtraBits ;)",
    "insertText": "if(t)"
  },
  {
    "label": "set_unused_bits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_unused_bits(false)"
  },
  {
    "label": "grow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "grow(unsigned NewSize)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (Capacity =)",
    "insertText": "max(NumBitWords(NewSize), Capacity * 2)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Capacity > 0 && \"realloc-ing zero space\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BitWord* newBits = new BitWord [ Capacity ] ;)",
    "insertText": "if(Bits != nullptr)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(newBits, Bits, NumBitWords(Size) * sizeof(BitWord))"
  },
  {
    "label": "init_words()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "init_words(BitWord *B, unsigned NumWords, bool t)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(B, 0 - (int)t, NumWords*sizeof(BitWord))"
  },
  {
    "label": "applyMask()",
    "kind": "Method",
    "detail": "Function (} template<bool AddBits,bool InvertMask> void)",
    "insertText": "applyMask(const uint32_t *Mask, unsigned MaskWords)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (MaskWords =)",
    "insertText": "min(MaskWords, (size() + 31) / 32)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const unsigned Scale = BITWORD_SIZE / 3 2 ; unsigned i ;)",
    "insertText": "for(i = 0; MaskWords >= Scale; ++i, MaskWords -= Scale)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (BitWord BW = Bits [ i ] ;)",
    "insertText": "for(unsigned b = 0; b != BITWORD_SIZE; b += 32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32_t M =* Mask + + ;)",
    "insertText": "if(InvertMask)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} Bits [ i ] = BW ; })",
    "insertText": "for(unsigned b = 0; MaskWords; b += 32, --MaskWords)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(AddBits) clear_unused_bits()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace std { void)",
    "insertText": "swap(llvm::BitVector &LHS, llvm::BitVector &RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (LHS .)",
    "insertText": "swap(RHS)"
  }
]