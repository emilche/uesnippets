[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSuspensionConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSuspensionConstraint"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSuspensionConstraintTypes . h \" # include \" Chaos / ParticleDirtyFlags . h \" # include \" Chaos / Framework / PhysicsProxyBase . h \" # include \" Chaos / Framework / PhysicsSolverBase . h \" # include \" Chaos / PBDConstraintBaseData . h \" namespace Chaos { enum class ESuspensionConstraintFlags : uint64_t { Location = 0,Enabled = static_cast<)",
    "insertText": "uint64_t(1) << 1, Target = static_cast<uint64_t>(1) << 2, HardstopStiffness = static_cast<uint64_t>(1) << 3, HardstopVelocityCompensation = static_cast<uint64_t>(1) << 4, SpringPreload = static_cast<uint64_t>(1) << 5, SpringStiffness = static_cast<uint64_t>(1) << 6, SpringDamping = static_cast<uint64_t>(1) << 7, MinLength = static_cast<uint64_t>(1) << 8, MaxLength = static_cast<uint64_t>(1) << 9, Axis = static_cast<uint64_t>(1) << 10, Normal = static_cast<uint64_t>(1)"
  },
  {
    "label": "FSuspensionConstraint()",
    "kind": "Method",
    "detail": "Function (using FSuspensionConstraintDirtyFlags = TDirtyFlags<ESuspensionConstraintFlags> ; class FSuspensionConstraint : public FConstraintBase { public :)",
    "insertText": "FSuspensionConstraint()"
  },
  {
    "label": "SetParticleProxy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParticleProxy(IPhysicsProxyBase* InParticleProxy)"
  },
  {
    "label": "SetPhysicsBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysicsBody(FPhysicsObjectHandle& InBody)"
  },
  {
    "label": "GetSuspensionSettings()",
    "kind": "Method",
    "detail": "Function (const FPBDSuspensionSettings&)",
    "insertText": "GetSuspensionSettings()"
  },
  {
    "label": "CHAOS_INNER_SUSP_PROPERTY()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "CHAOS_INNER_SUSP_PROPERTY(OuterProp, Name, InnerType)\\ void Set##Name(InnerType Val)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (OuterProp .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&Val](auto& Data) { Data.Name = Val; })"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (} \\ InnerType Get # #)",
    "insertText": "Name()"
  },
  {
    "label": "SyncRemoteDataImp()",
    "kind": "Method",
    "detail": "Function (} \\ # include \" SuspensionProperties . inl \" protected : TChaosProperty<FPBDSuspensionSettings,EChaosProperty::SuspensionSettings> SuspensionSettings ; TChaosProperty<FSuspensionLocation,EChaosProperty::SuspensionLocation> SuspensionLocation ; TChaosProperty<FProxyBaseProperty,EChaosProperty::SuspensionParticleProxy> SuspensionProxy ; TChaosProperty<FPhysicsObjectProperty,EChaosProperty::SuspensionPhysicsObject> SuspensionBody ; void)",
    "insertText": "SyncRemoteDataImp(FDirtyPropertiesManager& Manager, int32 DataIdx, FDirtyChaosProperties& RemoteData)"
  },
  {
    "label": "SyncRemote()",
    "kind": "Method",
    "detail": "Function (SuspensionSettings .)",
    "insertText": "SyncRemote(Manager, DataIdx, RemoteData)"
  }
]