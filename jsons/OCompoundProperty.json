[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "OCompoundProperty()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Abc_OCompoundProperty_h # define Alembic_Abc_OCompoundProperty_h # include<Alembic / Util / Export . h> # include<Alembic / Abc / Foundation . h> # include<Alembic / Abc / Argument . h> # include<Alembic / Abc / Base . h> # include<Alembic / Abc / OBaseProperty . h> namespace Alembic { namespace Abc { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT OCompoundProperty : public OBasePropertyT<AbcA::CompoundPropertyWriterPtr> { public : typedef OCompoundProperty this_type ;)",
    "insertText": "OCompoundProperty() : OBasePropertyT<AbcA::CompoundPropertyWriterPtr>()"
  },
  {
    "label": "OCompoundProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OCompoundProperty(AbcA::CompoundPropertyWriterPtr iParent, const std::string &iName, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument())"
  },
  {
    "label": "OCompoundProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OCompoundProperty(OCompoundProperty iParent, const std::string &iName, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument())"
  },
  {
    "label": "OCompoundProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OCompoundProperty(AbcA::CompoundPropertyWriterPtr iProp, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument())"
  },
  {
    "label": "OCompoundProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OCompoundProperty(AbcA::CompoundPropertyWriterPtr iProp, WrapExistingFlag iWrapFlag = kWrapExisting, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument())"
  },
  {
    "label": "OCompoundProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OCompoundProperty(OObject iObject, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument())"
  },
  {
    "label": "OCompoundProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OCompoundProperty(OObject iObject, TopFlag iTopFlag = kTop, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument())"
  },
  {
    "label": "OCompoundProperty()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "OCompoundProperty()"
  },
  {
    "label": "getNumProperties()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "getNumProperties()"
  },
  {
    "label": "getPropertyHeader()",
    "kind": "Method",
    "detail": "Function (const AbcA::PropertyHeader&)",
    "insertText": "getPropertyHeader(size_t i)"
  },
  {
    "label": "getPropertyHeader()",
    "kind": "Method",
    "detail": "Function (const AbcA::PropertyHeader*)",
    "insertText": "getPropertyHeader(const std::string &iName)"
  },
  {
    "label": "getProperty()",
    "kind": "Method",
    "detail": "Function (OBaseProperty)",
    "insertText": "getProperty(size_t i)"
  },
  {
    "label": "getProperty()",
    "kind": "Method",
    "detail": "Function (OBaseProperty)",
    "insertText": "getProperty(const std::string &iName)"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (OCompoundProperty)",
    "insertText": "getParent()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "init(OObject iObject, const Argument &iArg0, const Argument &iArg1)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(AbcA::CompoundPropertyWriterPtr iParentObject, const std::string &iName, const Argument &iArg0, const Argument &iArg1, const Argument &iArg2 = Argument())"
  },
  {
    "label": "GetCompoundPropertyWriterPtr()",
    "kind": "Method",
    "detail": "Function (} ; AbcA::CompoundPropertyWriterPtr)",
    "insertText": "GetCompoundPropertyWriterPtr(OCompoundProperty iPrp)"
  }
]