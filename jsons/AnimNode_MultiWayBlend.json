[
  {
    "label": "FAnimNode_MultiWayBlend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_MultiWayBlend"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / AnimNodeBase . h \" # include \" Animation / InputScaleBias . h \" # include \" AnimNode_MultiWayBlend . generated . h \")",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Links, meta = (BlueprintCompilerGeneratedDefaults))"
  },
  {
    "label": "FAnimNode_MultiWayBlend()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAnimNode_MultiWayBlend() : bAdditiveNode(false) , bNormalizeAlpha(true)"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "CacheBones_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones_AnyThread(const FAnimationCacheBonesContext& Context)"
  },
  {
    "label": "Update_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_AnyThread(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "Evaluate_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate_AnyThread(FPoseContext& Output)"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "AddPose()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddPose()"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (Poses .)",
    "insertText": "AddDefaulted()"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (DesiredAlphas .)",
    "insertText": "AddZeroed()"
  },
  {
    "label": "UpdateCachedAlphas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedAlphas()"
  },
  {
    "label": "RemovePose()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemovePose(int32 PoseIndex)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Poses .)",
    "insertText": "RemoveAt(PoseIndex)"
  },
  {
    "label": "ResetPoses()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetPoses()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Poses .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetTotalAlpha()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetTotalAlpha()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float TotalAlpha = 0 . f ;)",
    "insertText": "for(float Alpha : DesiredAlphas)"
  }
]