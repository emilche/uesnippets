[
  {
    "label": "FSocketSubsystemBSD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocketSubsystemBSD"
  },
  {
    "label": "FInternetAddrBSD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddrBSD"
  },
  {
    "label": "FSocketBSD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocketBSD"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BSDSockets / SocketSubsystemBSDPrivate . h \" # include \" IPAddress . h \" # include \" SocketTypes . h \" # include \" SocketSubsystemPackage . h \" # if PLATFORM_HAS_BSD_SOCKETS | | PLATFORM_HAS_BSD_IPV6_SOCKETS class FSocketSubsystemBSD ; class FInternetAddrBSD : public FInternetAddr { sockaddr_storage Addr ; protected : FSocketSubsystemBSD* SocketSubsystem ; void)",
    "insertText": "Clear()"
  },
  {
    "label": "ResetScopeId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetScopeId()"
  },
  {
    "label": "SetIp()",
    "kind": "Method",
    "detail": "Function (PACKAGE_SCOPE : void)",
    "insertText": "SetIp(const in_addr& IPv4Addr)"
  },
  {
    "label": "SetIp()",
    "kind": "Method",
    "detail": "Function (Addr . ss_family = AF_INET ; } # if PLATFORM_HAS_BSD_IPV6_SOCKETS void)",
    "insertText": "SetIp(const in6_addr& IPv6Addr)"
  },
  {
    "label": "FInternetAddrBSD()",
    "kind": "Method",
    "detail": "Function (Addr . ss_family = AF_INET6 ; } # endif public :)",
    "insertText": "FInternetAddrBSD()"
  },
  {
    "label": "FInternetAddrBSD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInternetAddrBSD(FSocketSubsystemBSD* InSocketSubsystem, FName RequestedProtocol=NAME_None)"
  },
  {
    "label": "CompareEndpoints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareEndpoints(const FInternetAddr& InAddr)"
  },
  {
    "label": "SetRawIp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRawIp(const TArray<uint8>& RawAddr)"
  },
  {
    "label": "GetRawIp()",
    "kind": "Method",
    "detail": "Function (TArray<uint8>)",
    "insertText": "GetRawIp()"
  },
  {
    "label": "SetIp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIp(uint32 InAddr)"
  },
  {
    "label": "SetIp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIp(const TCHAR* InAddr, bool& bIsValid)"
  },
  {
    "label": "SetIp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIp(const sockaddr_storage& IpAddr)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const sockaddr_storage& AddrData)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const sockaddr_storage& AddrData, SOCKLEN AddrSize)"
  },
  {
    "label": "GetIp()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_HAS_BSD_IPV6_SOCKETS void)",
    "insertText": "GetIp(in6_addr& OutAddr)"
  },
  {
    "label": "GetIp()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "GetIp(in_addr& OutAddr)"
  },
  {
    "label": "GetIp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetIp(uint32& OutAddr)"
  },
  {
    "label": "GetRawAddr()",
    "kind": "Method",
    "detail": "Function (sockaddr_storage*)",
    "insertText": "GetRawAddr()"
  },
  {
    "label": "IsPortValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPortValid(int32 InPort)"
  },
  {
    "label": "GetPort()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPort()"
  },
  {
    "label": "SetAnyAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnyAddress()"
  },
  {
    "label": "SetAnyIPv4Address()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnyIPv4Address()"
  },
  {
    "label": "SetAnyIPv6Address()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnyIPv6Address()"
  },
  {
    "label": "SetBroadcastAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBroadcastAddress()"
  },
  {
    "label": "SetIPv4BroadcastAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIPv4BroadcastAddress()"
  },
  {
    "label": "SetIPv6BroadcastAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIPv6BroadcastAddress()"
  },
  {
    "label": "SetLoopbackAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoopbackAddress()"
  },
  {
    "label": "SetIPv4LoopbackAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIPv4LoopbackAddress()"
  },
  {
    "label": "SetIPv6LoopbackAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIPv6LoopbackAddress()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(bool bAppendPort)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FInternetAddr& Other)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FInternetAddr>)",
    "insertText": "Clone()"
  },
  {
    "label": "GetProtocolType()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetProtocolType()"
  },
  {
    "label": "GetStorageSize()",
    "kind": "Method",
    "detail": "Function (SOCKLEN)",
    "insertText": "GetStorageSize()"
  },
  {
    "label": "SetScopeId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScopeId(uint32 NewScopeId)"
  },
  {
    "label": "GetScopeId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetScopeId()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash()"
  }
]