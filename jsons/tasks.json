[
  {
    "label": "TaskOrder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskOrder"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "WakeUp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WakeUp"
  },
  {
    "label": "WorkDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WorkDetails"
  },
  {
    "label": "PostedTask()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_TASKS_H_ # define BASE_TASK_SEQUENCE_MANAGER_TASKS_H_ # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / containers / intrusive_heap . h \" # include \" base / dcheck_is_on . h \" # include \" base / pending_task . h \" # include \" base / task / delay_policy . h \" # include \" base / task / sequence_manager / delayed_task_handle_delegate . h \" # include \" base / task / sequence_manager / enqueue_order . h \" # include \" base / task / sequenced_task_runner . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" # include \" third_party / abseil - cpp / absl / types / variant . h \" namespace base { namespace sequence_manager { using TaskType = uint8_t ; TaskType kTaskTypeNone = 0 ; class TaskOrder ; namespace internal { struct BASE_EXPORT PostedTask {)",
    "insertText": "PostedTask(scoped_refptr<SequencedTaskRunner> task_runner, OnceClosure callback, Location location, TimeDelta delay = base::TimeDelta(), Nestable nestable = Nestable::kNestable, TaskType task_type = kTaskTypeNone, WeakPtr<DelayedTaskHandleDelegate> delayed_task_handle_delegate = nullptr)"
  },
  {
    "label": "PostedTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostedTask(scoped_refptr<SequencedTaskRunner> task_runner, OnceClosure callback, Location location, TimeTicks delayed_run_time, subtle::DelayPolicy delay_policy, Nestable nestable = Nestable::kNestable, TaskType task_type = kTaskTypeNone, WeakPtr<DelayedTaskHandleDelegate> delayed_task_handle_delegate = nullptr)"
  },
  {
    "label": "PostedTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostedTask(PostedTask&& move_from)"
  },
  {
    "label": "PostedTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostedTask(const PostedTask&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PostedTask&)",
    "insertText": "operator(const PostedTask&)"
  },
  {
    "label": "PostedTask()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PostedTask()"
  },
  {
    "label": "is_delayed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_delayed()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} OnceClosure callback ; Location location ; Nestable nestable = Nestable::kNestable ; TaskType task_type = kTaskTypeNone ; absl::variant<TimeDelta,TimeTicks> delay_or_delayed_run_time ; subtle::DelayPolicy delay_policy = subtle::DelayPolicy::kFlexibleNoSooner ; scoped_refptr<SequencedTaskRunner> task_runner ; WeakPtr<DelayedTaskHandleDelegate> delayed_task_handle_delegate ; } ; } enum class WakeUpResolution { kLow,kHigh } ; struct WakeUp { TimeTicks time ; TimeDelta leeway ; WakeUpResolution resolution = WakeUpResolution::kLow ; subtle::DelayPolicy delay_policy = subtle::DelayPolicy::kFlexibleNoSooner ; bool)",
    "insertText": "operator(const WakeUp& other)"
  },
  {
    "label": "is_immediate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_immediate()"
  },
  {
    "label": "earliest_time()",
    "kind": "Method",
    "detail": "Function (} TimeTicks)",
    "insertText": "earliest_time()"
  },
  {
    "label": "latest_time()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "latest_time()"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (} ; struct WorkDetails { absl::optional<WakeUp> next_wake_up ; TimeDelta work_interval ; } ; struct BASE_EXPORT Task : public PendingTask {)",
    "insertText": "Task(internal::PostedTask posted_task, EnqueueOrder sequence_order, EnqueueOrder enqueue_order = EnqueueOrder(), TimeTicks queue_time = TimeTicks(), WakeUpResolution wake_up_resolution = WakeUpResolution::kLow, TimeDelta leeway = TimeDelta())"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Task(Task&& move_from)"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Task()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Task&)",
    "insertText": "operator(Task&& other)"
  },
  {
    "label": "enqueue_order()",
    "kind": "Method",
    "detail": "Function (EnqueueOrder)",
    "insertText": "enqueue_order()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(enqueue_order_)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!enqueue_order_)"
  },
  {
    "label": "enqueue_order_set()",
    "kind": "Method",
    "detail": "Function (enqueue_order_ = enqueue_order ; } bool)",
    "insertText": "enqueue_order_set()"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (Nestable nestable = Nestable::kNonNestable ; bool is_high_res = false ; TaskType task_type ; scoped_refptr<SequencedTaskRunner> task_runner ; # if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "SetHeapHandle()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetHeapHandle(HeapHandle heap_handle)"
  },
  {
    "label": "ClearHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearHeapHandle()"
  },
  {
    "label": "GetHeapHandle()",
    "kind": "Method",
    "detail": "Function (HeapHandle)",
    "insertText": "GetHeapHandle()"
  },
  {
    "label": "IsCanceled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCanceled()"
  },
  {
    "label": "WillRunTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WillRunTask()"
  }
]