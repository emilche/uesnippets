[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "DoInitialize()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_DISPATCHER_INITIALIZER_H_ # define BASE_ALLOCATOR_DISPATCHER_INITIALIZER_H_ # include \" base / allocator / dispatcher / configuration . h \" # include \" base / allocator / dispatcher / dispatcher . h \" # include \" base / allocator / dispatcher / internal / tools . h \" # include<tuple> # include<utility> namespace base::allocator::dispatcher { namespace internal { template<size_t CurrentIndex,DispatcherType,CheckObserverPredicate,VerifiedObservers,UnverifiedObservers,size_t . . . IndicesToSelect> void)",
    "insertText": "DoInitialize(DispatcherType& dispatcher, CheckObserverPredicate check_observer, const VerifiedObservers& verified_observers, const UnverifiedObservers& unverified_observers, std::index_sequence<IndicesToSelect...> indices)"
  },
  {
    "label": "CurrentIndex()",
    "kind": "Method",
    "detail": "Function (} else { DoInitialize<)",
    "insertText": "CurrentIndex(dispatcher, check_observer, verified_observers, unverified_observers, indices)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} } else if)",
    "insertText": "constexpr(CurrentIndex == std::tuple_size<UnverifiedObservers>::value)"
  },
  {
    "label": "tuple_cat()",
    "kind": "Method",
    "detail": "Function (auto observers =)",
    "insertText": "tuple_cat(verified_observers, std::make_tuple(std::get<IndicesToSelect>(unverified_observers)...))"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (dispatcher .)",
    "insertText": "Initialize(std::move(observers))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } } template<. . . tuples> using TupleCat =)",
    "insertText": "decltype(std::tuple_cat(std::declval<tuples>()...))"
  },
  {
    "label": "Initializer()",
    "kind": "Method",
    "detail": "Function (template<MandatoryObservers = std::tuple<>,OptionalObservers = std::tuple<>> struct BASE_EXPORT Initializer {)",
    "insertText": "Initializer()"
  },
  {
    "label": "Initializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initializer(MandatoryObservers mandatory_observers, OptionalObservers optional_observers) : mandatory_observers_(std::move(mandatory_observers)), optional_observers_(std::move(optional_observers))"
  },
  {
    "label": "LessEqual()",
    "kind": "Method",
    "detail": "Function (} template<. . . NewMandatoryObservers,std::enable_if_t<)",
    "insertText": "LessEqual((sizeof...(NewMandatoryObservers) + std::tuple_size<OptionalObservers>::value), configuration::kMaximumNumberOfObservers), bool> = true> Initializer<std::tuple<NewMandatoryObservers*...>, OptionalObservers> SetMandatoryObservers(NewMandatoryObservers*... mandatory_observers)"
  },
  {
    "label": "LessEqual()",
    "kind": "Method",
    "detail": "Function (} template<. . . AdditionalMandatoryObservers,std::enable_if_t<)",
    "insertText": "LessEqual(std::tuple_size<MandatoryObservers>::value + sizeof...(AdditionalMandatoryObservers) + std::tuple_size<OptionalObservers>::value, configuration::kMaximumNumberOfObservers), bool> = true> Initializer<TupleCat<MandatoryObservers, std::tuple<AdditionalMandatoryObservers*...>>, OptionalObservers> AddMandatoryObservers( AdditionalMandatoryObservers*... additional_mandatory_observers)"
  },
  {
    "label": "LessEqual()",
    "kind": "Method",
    "detail": "Function (} template<. . . NewOptionalObservers,std::enable_if_t<)",
    "insertText": "LessEqual(sizeof...(NewOptionalObservers), configuration::kMaximumNumberOfOptionalObservers) && internal::LessEqual((sizeof...(NewOptionalObservers) + std::tuple_size<MandatoryObservers>::value), configuration::kMaximumNumberOfObservers), bool> = true> Initializer<MandatoryObservers, std::tuple<NewOptionalObservers*...>> SetOptionalObservers(NewOptionalObservers*... optional_observers)"
  },
  {
    "label": "LessEqual()",
    "kind": "Method",
    "detail": "Function (} template<. . . AdditionalOptionalObservers,std::enable_if_t<)",
    "insertText": "LessEqual(std::tuple_size<OptionalObservers>::value + sizeof...(AdditionalOptionalObservers), configuration::kMaximumNumberOfOptionalObservers) && internal::LessEqual((std::tuple_size<OptionalObservers>::value + sizeof...(AdditionalOptionalObservers) + std::tuple_size<MandatoryObservers>::value), configuration::kMaximumNumberOfObservers), bool> = true> Initializer< MandatoryObservers, TupleCat<OptionalObservers, std::tuple<AdditionalOptionalObservers*...>>> AddOptionalObservers( AdditionalOptionalObservers*... additional_optional_observers)"
  },
  {
    "label": "DoInitialize()",
    "kind": "Method",
    "detail": "Function (} template<DispatcherType> void)",
    "insertText": "DoInitialize(DispatcherType& dispatcher)"
  },
  {
    "label": "DoInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoInitialize(dispatcher, internal::IsValidObserver{}, GetMandatoryObservers(), GetOptionalObservers(), {})"
  },
  {
    "label": "GetMandatoryObservers()",
    "kind": "Method",
    "detail": "Function (} const MandatoryObservers&)",
    "insertText": "GetMandatoryObservers()"
  }
]