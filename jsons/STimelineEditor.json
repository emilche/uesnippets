[
  {
    "label": "FBlueprintEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintEditor"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SCheckBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCheckBox"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SInlineEditableTextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SInlineEditableTextBlock"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "UCurveBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveBase"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FRichCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRichCurve"
  },
  {
    "label": "FTimelineEdTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimelineEdTrack"
  },
  {
    "label": "STimelineEdTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimelineEdTrack"
  },
  {
    "label": "STimelineEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimelineEditor"
  },
  {
    "label": "SCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditor"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" Engine / TimelineTemplate . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Math / Vector2D . h \" # include \" Misc / Optional . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / SListView . h \" class FBlueprintEditor ; class FUICommandList ; class ITableRow ; class SCheckBox ; class SEditableTextBox ; class SInlineEditableTextBlock ; class STableViewBase ; class SWidget ; class SWindow ; class UCurveBase ; class UObject ; struct FAssetData ; struct FGeometry ; struct FKeyEvent ; struct FRichCurve ; class FTimelineEdTrack { public : public : int32 DisplayIndex ; FSimpleDelegate OnRenameRequest ; public : TSharedRef<FTimelineEdTrack>)",
    "insertText": "Make(int32 DisplayIndex)"
  },
  {
    "label": "FTimelineEdTrack()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FTimelineEdTrack(int32 InDisplayIndex) : DisplayIndex(InDisplayIndex)"
  },
  {
    "label": "FTimelineEdTrack()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimelineEdTrack()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } ; class STimelineEdTrack : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(STimelineEdTrack)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, TSharedPtr<FTimelineEdTrack> InTrack, TSharedPtr<class STimelineEditor> InTimelineEd)"
  },
  {
    "label": "OnCloseCreateCurveWindow()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<FTimelineEdTrack> Track ; TWeakPtr<class STimelineEditor> TimelineEdPtr ; TSharedPtr<class SCurveEditor> TrackWidget ; TSharedPtr<SWindow> AssetCreationWindow ; UCurveBase* CurveBasePtr ; FString ExternalCurvePath ; float LocalInputMin ; float LocalInputMax ; float LocalOutputMin ; float LocalOutputMax ; void)",
    "insertText": "OnCloseCreateCurveWindow()"
  },
  {
    "label": "CreateCurveAsset()",
    "kind": "Method",
    "detail": "Function (UCurveBase*)",
    "insertText": "CreateCurveAsset()"
  },
  {
    "label": "OnCreateExternalCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateExternalCurve()"
  },
  {
    "label": "CreateUniqueCurveAssetPathName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CreateUniqueCurveAssetPathName()"
  },
  {
    "label": "GetExternalCurvePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetExternalCurvePath()"
  },
  {
    "label": "SwitchToExternalCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwitchToExternalCurve(UCurveBase* AssetCurvePtr)"
  },
  {
    "label": "UseExternalCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseExternalCurve(UObject* AssetObj)"
  },
  {
    "label": "UseInternalCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseInternalCurve()"
  },
  {
    "label": "OnClickClear()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnClickClear()"
  },
  {
    "label": "ResetExternalCurveInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetExternalCurveInfo()"
  },
  {
    "label": "CopyCurveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCurveData(const FRichCurve* SrcCurve, FRichCurve* DestCurve)"
  },
  {
    "label": "GetIsExpandedState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetIsExpandedState()"
  },
  {
    "label": "OnIsExpandedStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIsExpandedStateChanged(ECheckBoxState IsExpandedState)"
  },
  {
    "label": "GetContentVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetContentVisibility()"
  },
  {
    "label": "GetIsCurveViewSynchronizedState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetIsCurveViewSynchronizedState()"
  },
  {
    "label": "OnIsCurveViewSynchronizedStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIsCurveViewSynchronizedStateChanged(ECheckBoxState IsCurveViewSynchronized)"
  },
  {
    "label": "OnMoveUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMoveUp()"
  },
  {
    "label": "CanMoveUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMoveUp()"
  },
  {
    "label": "OnMoveDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMoveDown()"
  },
  {
    "label": "CanMoveDown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMoveDown()"
  },
  {
    "label": "MoveTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveTrack(int32 DirectionDelta)"
  },
  {
    "label": "GetMinInput()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinInput()"
  },
  {
    "label": "GetMaxInput()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxInput()"
  },
  {
    "label": "GetMinOutput()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinOutput()"
  },
  {
    "label": "GetMaxOutput()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxOutput()"
  },
  {
    "label": "OnSetInputViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetInputViewRange(float Min, float Max)"
  },
  {
    "label": "OnSetOutputViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetOutputViewRange(float Min, float Max)"
  },
  {
    "label": "OnChooseCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChooseCurve(const FAssetData& InObject)"
  },
  {
    "label": "GetTrackBase()",
    "kind": "Method",
    "detail": "Function (FTTTrackBase*)",
    "insertText": "GetTrackBase()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public : TSharedPtr<SInlineEditableTextBlock> InlineNameBlock ; } ; typedef SListView<TSharedPtr<FTimelineEdTrack>> STimelineEdTrackListType ; class STimelineEditor : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(STimelineEditor)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS()"
  },
  {
    "label": "GetTimeline()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FTimelineEdTrack>> TrackList ; TWeakPtr<FBlueprintEditor> Kismet2Ptr ; TSharedPtr<SEditableTextBox> TimelineLengthEdit ; TSharedPtr<SCheckBox> LoopCheckBox ; TSharedPtr<SCheckBox> ReplicatedCheckBox ; TSharedPtr<SCheckBox> PlayCheckBox ; TSharedPtr<SCheckBox> UseLastKeyframeCheckBox ; TSharedPtr<SCheckBox> IgnoreTimeDilationCheckBox ; UTimelineTemplate* TimelineObj ; float ViewMinInput ; float ViewMaxInput ; float ViewMinOutput ; float ViewMaxOutput ; FName NewTrackPendingRename ; TSharedPtr<FUICommandList> CommandList ; FVector2f TimelineDesiredSize ; float NominalTimelineDesiredHeight ; public : UTimelineTemplate*)",
    "insertText": "GetTimeline()"
  },
  {
    "label": "OnTimelineChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimelineChanged()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, TSharedPtr<FBlueprintEditor> InKismet2, UTimelineTemplate* InTimelineObj)"
  },
  {
    "label": "GetViewMinInput()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetViewMinInput()"
  },
  {
    "label": "GetViewMaxInput()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetViewMaxInput()"
  },
  {
    "label": "GetViewMinOutput()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetViewMinOutput()"
  },
  {
    "label": "GetViewMaxOutput()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetViewMaxOutput()"
  },
  {
    "label": "GetTimelineLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTimelineLength()"
  },
  {
    "label": "SetInputViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputViewRange(float InViewMinInput, float InViewMaxInput)"
  },
  {
    "label": "SetOutputViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputViewRange(float InViewMinOutput, float InViewMaxOutput)"
  },
  {
    "label": "OnVerifyTrackNameCommit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVerifyTrackNameCommit(const FText& TrackName, FText& OutErrorMessage, FTTTrackBase* TrackBase, STimelineEdTrack* Track)"
  },
  {
    "label": "OnTrackNameCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTrackNameCommitted(const FText& Name, ETextCommit::Type CommitInfo, FTTTrackBase* TrackBase, STimelineEdTrack* Track)"
  },
  {
    "label": "CreateNewCurve()",
    "kind": "Method",
    "detail": "Function (UCurveBase*)",
    "insertText": "CreateNewCurve(FTTTrackBase::ETrackType Type)"
  },
  {
    "label": "OnReorderTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReorderTracks(int32 DisplayIndex, int32 DirectionDelta)"
  },
  {
    "label": "GetTimelineDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetTimelineDesiredSize()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "MakeTrackWidget()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<ITableRow>)",
    "insertText": "MakeTrackWidget(TSharedPtr<FTimelineEdTrack> Track, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "CreateNewTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewTrack(FTTTrackBase::ETrackType Type)"
  },
  {
    "label": "CanDeleteSelectedTracks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteSelectedTracks()"
  },
  {
    "label": "OnDeleteSelectedTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeleteSelectedTracks()"
  },
  {
    "label": "GetTimelineName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTimelineName()"
  },
  {
    "label": "IsAutoPlayChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsAutoPlayChecked()"
  },
  {
    "label": "OnAutoPlayChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAutoPlayChanged(ECheckBoxState NewType)"
  },
  {
    "label": "IsLoopChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsLoopChecked()"
  },
  {
    "label": "OnLoopChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoopChanged(ECheckBoxState NewType)"
  },
  {
    "label": "IsReplicatedChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsReplicatedChecked()"
  },
  {
    "label": "OnReplicatedChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReplicatedChanged(ECheckBoxState NewType)"
  },
  {
    "label": "IsUseLastKeyframeChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsUseLastKeyframeChecked()"
  },
  {
    "label": "OnUseLastKeyframeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUseLastKeyframeChanged(ECheckBoxState NewType)"
  },
  {
    "label": "IsIgnoreTimeDilationChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsIgnoreTimeDilationChecked()"
  },
  {
    "label": "OnIgnoreTimeDilationChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIgnoreTimeDilationChanged(ECheckBoxState NewType)"
  },
  {
    "label": "GetLengthString()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLengthString()"
  },
  {
    "label": "OnLengthStringChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLengthStringChanged(const FText& NewString, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "IsCurveAssetSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurveAssetSelected()"
  },
  {
    "label": "CreateNewTrackFromAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewTrackFromAsset()"
  },
  {
    "label": "OnItemScrolledIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemScrolledIntoView(TSharedPtr<FTimelineEdTrack> InTrackNode, const TSharedPtr<ITableRow>& InWidget)"
  },
  {
    "label": "OnTimelineTickGroupChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimelineTickGroupChanged(TSharedPtr<FString> NewValue, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "CanRenameSelectedTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRenameSelectedTrack()"
  },
  {
    "label": "OnRequestTrackRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRequestTrackRename()"
  },
  {
    "label": "MakeContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "MakeContextMenu()"
  },
  {
    "label": "SetSizeScaleValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizeScaleValue(float NewValue)"
  },
  {
    "label": "GetSizeScaleValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSizeScaleValue()"
  },
  {
    "label": "MakeAddButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAddButton()"
  }
]