[
  {
    "label": "Sample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Sample"
  },
  {
    "label": "SampleRecorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SampleRecorder"
  },
  {
    "label": "ABSL_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_PROFILING_INTERNAL_SAMPLE_RECORDER_H_ # define ABSL_PROFILING_INTERNAL_SAMPLE_RECORDER_H_ # include<atomic> # include<cstddef> # include<functional> # include \" absl / base / config . h \" # include \" absl / base / thread_annotations . h \" # include \" absl / synchronization / mutex . h \" # include \" absl / time / time . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace profiling_internal { template<T> struct Sample { absl::Mutex init_mu ; T* next = nullptr ; T* dead)",
    "insertText": "ABSL_GUARDED_BY(init_mu)"
  },
  {
    "label": "SampleRecorder()",
    "kind": "Method",
    "detail": "Function (int64_t weight ; } ; template<T> class SampleRecorder { public :)",
    "insertText": "SampleRecorder()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (template<. . . Targs> T*)",
    "insertText": "Register(Targs&&... args)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(T* sample)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using DisposeCallback =)",
    "insertText": "void(*)(const T&)"
  },
  {
    "label": "SetDisposeCallback()",
    "kind": "Method",
    "detail": "Function (DisposeCallback)",
    "insertText": "SetDisposeCallback(DisposeCallback f)"
  },
  {
    "label": "Iterate()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "Iterate(const std::function<void(const T& stack)>& f)"
  },
  {
    "label": "GetMaxSamples()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetMaxSamples()"
  },
  {
    "label": "SetMaxSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxSamples(size_t max)"
  },
  {
    "label": "PushNew()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PushNew(T* sample)"
  },
  {
    "label": "PushDead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDead(T* sample)"
  },
  {
    "label": "PopDead()",
    "kind": "Method",
    "detail": "Function (template<. . . Targs> T*)",
    "insertText": "PopDead(Targs... args)"
  },
  {
    "label": "SampleRecorder()",
    "kind": "Method",
    "detail": "Function (} template<T> SampleRecorder<T)",
    "insertText": "SampleRecorder() : dropped_samples_(0), size_estimate_(0), all_(nullptr), dispose_(nullptr)"
  },
  {
    "label": "l()",
    "kind": "Method",
    "detail": "Function (absl::MutexLock)",
    "insertText": "l(&graveyard_.init_mu)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (T* s = all_ .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (sample -> next = all_ .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "dispose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dispose(*sample)"
  },
  {
    "label": "graveyard_lock()",
    "kind": "Method",
    "detail": "Function (} absl::MutexLock)",
    "insertText": "graveyard_lock(&graveyard_.init_mu)"
  },
  {
    "label": "sample_lock()",
    "kind": "Method",
    "detail": "Function (absl::MutexLock)",
    "insertText": "sample_lock(&sample->init_mu)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T* sample = graveyard_ . dead ;)",
    "insertText": "if(sample == &graveyard_)"
  },
  {
    "label": "PrepareForSampling()",
    "kind": "Method",
    "detail": "Function (graveyard_ . dead = sample -> dead ; sample -> dead = nullptr ; sample ->)",
    "insertText": "PrepareForSampling(std::forward<Targs>(args)...)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (size_t size = size_estimate_ .)",
    "insertText": "fetch_add(1, std::memory_order_relaxed)"
  },
  {
    "label": "fetch_sub()",
    "kind": "Method",
    "detail": "Function (size_estimate_ .)",
    "insertText": "fetch_sub(1, std::memory_order_relaxed)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (sample = new)",
    "insertText": "T()"
  },
  {
    "label": "PushNew()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PushNew(sample)"
  },
  {
    "label": "PushDead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDead(sample)"
  },
  {
    "label": "l()",
    "kind": "Method",
    "detail": "Function (absl::MutexLock)",
    "insertText": "l(&s->init_mu)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "f(*s)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (max_samples_ .)",
    "insertText": "store(max, std::memory_order_release)"
  }
]