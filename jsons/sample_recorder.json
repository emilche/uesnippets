[
  {
    "label": "Sample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Sample"
  },
  {
    "label": "SampleRecorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SampleRecorder"
  },
  {
    "label": "SampleRecorder()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "SampleRecorder()"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(T* sample)"
  },
  {
    "label": "SetDisposeCallback()",
    "kind": "Method",
    "detail": "Function (DisposeCallback)",
    "insertText": "SetDisposeCallback(DisposeCallback f)"
  },
  {
    "label": "SetMaxSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxSamples(size_t max)"
  },
  {
    "label": "PushNew()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushNew(T* sample)"
  },
  {
    "label": "PushDead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDead(T* sample)"
  },
  {
    "label": "l()",
    "kind": "Method",
    "detail": "Function (absl::MutexLock)",
    "insertText": "l(&graveyard_.init_mu)"
  },
  {
    "label": "graveyard_lock()",
    "kind": "Method",
    "detail": "Function (absl::MutexLock)",
    "insertText": "graveyard_lock(&graveyard_.init_mu)"
  },
  {
    "label": "sample_lock()",
    "kind": "Method",
    "detail": "Function (absl::MutexLock)",
    "insertText": "sample_lock(&sample->init_mu)"
  },
  {
    "label": "graveyard_lock()",
    "kind": "Method",
    "detail": "Function (absl::MutexLock)",
    "insertText": "graveyard_lock(&graveyard_.init_mu)"
  },
  {
    "label": "sample_lock()",
    "kind": "Method",
    "detail": "Function (absl::MutexLock)",
    "insertText": "sample_lock(&sample->init_mu)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "T()"
  },
  {
    "label": "sample_lock()",
    "kind": "Method",
    "detail": "Function (absl::MutexLock)",
    "insertText": "sample_lock(&sample->init_mu)"
  },
  {
    "label": "l()",
    "kind": "Method",
    "detail": "Function (absl::MutexLock)",
    "insertText": "l(&s->init_mu)"
  }
]