[
  {
    "label": "FBuildDataVerifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildDataVerifier"
  },
  {
    "label": "FBuildDataVerifier()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / BlockRange . h \" # include \" Core / BlockStructure . h \" # include \" Common / FileSystem . h \" # include \" Generation / ChunkSearch . h \" # include \" Generation / ChunkWriter . h \" # include \" Generation / DeltaEnumeration . h \" # include \" Generation / DataScanner . h \" # include \" BuildPatchUtil . h \" namespace BuildPatchServices { class FBuildDataVerifier { public :)",
    "insertText": "FBuildDataVerifier(IFileSystem* InFileSystem, IChunkDataSerialization* InChunkDataSerialization, const FString& InBuildLocation, const FString& InOtherBuildLocation, const FString& InCloudDir, const FBuildPatchAppManifest& InManifest, const FBuildPatchAppManifest& InOtherManifest) : FileSystem(InFileSystem) , ChunkDataSerialization(InChunkDataSerialization) , BuildLocation(InBuildLocation) , OtherBuildLocation(InOtherBuildLocation) , CloudDir(InCloudDir) , Manifest(InManifest) , OtherManifest(InOtherManifest) , BuildFiles(ListHelpers::GetFileList(Manifest)) , OtherBuildFiles(ListHelpers::GetFileList(OtherManifest))"
  },
  {
    "label": "LoadFile()",
    "kind": "Method",
    "detail": "Function (} FArchive*)",
    "insertText": "LoadFile(const FString& BuildFile, bool bUseOther)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (const FString FullFilename = bUseOther ? OtherBuildLocation / BuildFile : BuildLocation / BuildFile ; TUniquePtr<FArchive>& LoadedFile = LoadedFiles .)",
    "insertText": "FindOrAdd(FullFilename)"
  },
  {
    "label": "CreateFileReader()",
    "kind": "Method",
    "detail": "Function (LoadedFile = FileSystem ->)",
    "insertText": "CreateFileReader(*FullFilename)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(LoadedFile.IsValid())"
  },
  {
    "label": "GetChunkData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetChunkData(const FChunkPart& ChunkPart, TArray<uint8>& OutData, FParallelChunkWriterSummaries* ChunkWriterSummaries = nullptr)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "AddUninitialized(ChunkPart.Size)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (uint8* DataStart = OutData .)",
    "insertText": "GetData() + (OutData.Num() - ChunkPart.Size)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(DataStart, ChunkPart.GetPaddingByte(), ChunkPart.Size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EChunkLoadResult ChunkLoadResult ; FString DataFilename ;)",
    "insertText": "if(ChunkWriterSummaries && ChunkWriterSummaries->ChunkOutputHashes.Contains(ChunkPart.Guid))"
  },
  {
    "label": "GetChunkNewFilename()",
    "kind": "Method",
    "detail": "Function (DataFilename =)",
    "insertText": "GetChunkNewFilename(ChunkWriterSummaries->FeatureLevel, CloudDir, ChunkPart.Guid, ChunkWriterSummaries->ChunkOutputHashes[ChunkPart.Guid])"
  },
  {
    "label": "GetChunkInfo()",
    "kind": "Method",
    "detail": "Function (} else { const FBuildPatchAppManifest* ManifestRequired = Manifest .)",
    "insertText": "GetChunkInfo(ChunkPart.Guid)"
  },
  {
    "label": "GetDataFilename()",
    "kind": "Method",
    "detail": "Function (DataFilename =)",
    "insertText": "GetDataFilename(*ManifestRequired, CloudDir, ChunkPart.Guid)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} LoadedChunks .)",
    "insertText": "Emplace(ChunkPart.Guid, ChunkDataSerialization->LoadFromFile(DataFilename, ChunkLoadResult))"
  },
  {
    "label": "ChunkDataAccess()",
    "kind": "Method",
    "detail": "Function (} FScopeLockedChunkData)",
    "insertText": "ChunkDataAccess(LoadedChunks[ChunkPart.Guid].Get())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "Append(ChunkDataAccess.GetData() + ChunkPart.Offset, ChunkPart.Size)"
  },
  {
    "label": "GetFileData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetFileData(const FString& BuildFilename, const FBlockRange& BlockRange, TArray<uint8>& OutData, bool bUseOther = false)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (TestBuffer .)",
    "insertText": "SetNumUninitialized(BlockRange.GetSize(), EAllowShrinking::No)"
  },
  {
    "label": "LoadFile()",
    "kind": "Method",
    "detail": "Function (FArchive* BuildFile =)",
    "insertText": "LoadFile(BuildFilename, bUseOther)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (BuildFile ->)",
    "insertText": "Seek(BlockRange.GetFirst())"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (BuildFile ->)",
    "insertText": "Serialize(TestBuffer.GetData(), BlockRange.GetSize())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "Append(TestBuffer.GetData(), BlockRange.GetSize())"
  },
  {
    "label": "GetBuildData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetBuildData(const FBlockRange& BlockRange, TArray<uint8>& OutData, bool bUseOther = false)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint64 BuildFileFirst = 0 ; uint64 ChunkPartFirst = 0 ;)",
    "insertText": "for(const FString& BuildFilename : (bUseOther ? OtherBuildFiles : BuildFiles))"
  },
  {
    "label": "FileManifest()",
    "kind": "Method",
    "detail": "Function (const FFileManifest*)",
    "insertText": "FileManifest(bUseOther ? OtherManifest : Manifest).GetFileManifest(BuildFilename)"
  },
  {
    "label": "FromFirstAndSize()",
    "kind": "Method",
    "detail": "Function (const FBlockRange FileRange =)",
    "insertText": "FromFirstAndSize(BuildFileFirst, FileManifest->FileSize)"
  },
  {
    "label": "GetFirst()",
    "kind": "Method",
    "detail": "Function (ChunkPartFirst = FileRange .)",
    "insertText": "GetFirst()"
  },
  {
    "label": "FromFirstAndSize()",
    "kind": "Method",
    "detail": "Function (const FBlockRange ChunkPartRange =)",
    "insertText": "FromFirstAndSize(ChunkPartFirst, ChunkPart.Size)"
  },
  {
    "label": "FromIntersection()",
    "kind": "Method",
    "detail": "Function (const FBlockRange BuildBytesRange =)",
    "insertText": "FromIntersection(BlockRange, ChunkPartRange)"
  },
  {
    "label": "GetFirst()",
    "kind": "Method",
    "detail": "Function (const int64 FileSeek = BuildBytesRange .)",
    "insertText": "GetFirst() - FileRange.GetFirst()"
  },
  {
    "label": "GetFirst()",
    "kind": "Method",
    "detail": "Function (const int64 DataIndex = BuildBytesRange .)",
    "insertText": "GetFirst() - BlockRange.GetFirst()"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (TestBuffer .)",
    "insertText": "SetNumUninitialized(BuildBytesRange.GetSize(), EAllowShrinking::No)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (BuildFile ->)",
    "insertText": "Seek(FileSeek)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (BuildFile ->)",
    "insertText": "Serialize(TestBuffer.GetData(), BuildBytesRange.GetSize())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "Append(TestBuffer.GetData(), BuildBytesRange.GetSize())"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} ChunkPartFirst + = ChunkPartRange .)",
    "insertText": "GetSize()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(ChunkPartFirst == (BuildFileFirst + FileRange.GetSize()))"
  },
  {
    "label": "GetBuildData()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetBuildData(const FBlockStructure& BlockStructure, TArray<uint8>& OutData, bool bUseOther = false)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint64 ExpectedSize = OutData .)",
    "insertText": "Num()"
  },
  {
    "label": "GetHead()",
    "kind": "Method",
    "detail": "Function (const FBlockEntry* BlockEntry = BlockStructure .)",
    "insertText": "GetHead()"
  },
  {
    "label": "GetBuildData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBuildData(BlockEntry->AsRange(), OutData, bUseOther)"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (BlockEntry = BlockEntry ->)",
    "insertText": "GetNext()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(OutData.Num() == ExpectedSize)"
  },
  {
    "label": "CheckDataAndAssert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckDataAndAssert(const FBlockStructure& BlockStructure, const uint8* Data)"
  },
  {
    "label": "CheckDataAndAssert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckDataAndAssert(const FBlockStructure& BlockStructure, const FSHAHash& SHAHash)"
  },
  {
    "label": "CheckDataAndAssert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckDataAndAssert(const IDeltaChunkEnumeration* DeltaChunkEnumeration, const FChunkBuildReference& ChunkBuildReference)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FFilenameId& FilenameId = ChunkBuildReference .)",
    "insertText": "Get()"
  },
  {
    "label": "GetFilename()",
    "kind": "Method",
    "detail": "Function (const FString& Filename = DeltaChunkEnumeration ->)",
    "insertText": "GetFilename(FilenameId)"
  },
  {
    "label": "GetChunkData()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> ChunkData ;)",
    "insertText": "GetChunkData(FirstChunkPart, ChunkData)"
  },
  {
    "label": "GetFileData()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> FileData ;)",
    "insertText": "GetFileData(Filename, FBlockRange::FromFirstAndSize(FileOffset, FirstChunkPart.Size), FileData)"
  },
  {
    "label": "CheckDataAndAssert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckDataAndAssert(const FBlockStructure& BlockStructure, const FBlockStructure& OtherBlockStructure)"
  },
  {
    "label": "GetBuildData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBuildData(OtherBlockStructure, OtherBuildData, true)"
  },
  {
    "label": "CheckDataAndAssert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckDataAndAssert(const FFileManifestList& FileManifestList, FParallelChunkWriterSummaries* ChunkWriterSummaries = nullptr)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (BuildBuffer .)",
    "insertText": "SetNumUninitialized(0, EAllowShrinking::No)"
  },
  {
    "label": "FromFirstAndSize()",
    "kind": "Method",
    "detail": "Function (FBlockRange ChunkPartRange =)",
    "insertText": "FromFirstAndSize(ChunkPartStart, ChunkPart.Size)"
  },
  {
    "label": "GetBuildData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBuildData(ChunkPartRange, BuildBuffer)"
  },
  {
    "label": "GetChunkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChunkData(ChunkPart, ChunkBuffer, ChunkWriterSummaries)"
  },
  {
    "label": "CheckDataAndAssert()",
    "kind": "Method",
    "detail": "Function (} ChunkPartStart + = ChunkPart . Size ; } } } void)",
    "insertText": "CheckDataAndAssert(const FBlockStructure& BlockStructure, const FChunkPart& ChunkPart, bool bUseOther = false)"
  },
  {
    "label": "GetChunkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChunkData(ChunkPart, ChunkData)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(BuildData.Num() == ChunkPart.Size)"
  },
  {
    "label": "CheckDataAndAssert()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CheckDataAndAssert(FChunkSearcher::FChunkDList& ChunkDList, bool bUseOther = false)"
  },
  {
    "label": "GetBuildData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBuildData(ChunkNode->GetValue().BuildRange, BuildData, bUseOther)"
  },
  {
    "label": "GetChunkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChunkData(ChunkNode->GetValue().ChunkPart, ChunkData)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(BuildData.Num() == ChunkNode->GetValue().ChunkPart.Size)"
  },
  {
    "label": "GetNextNode()",
    "kind": "Method",
    "detail": "Function (} ChunkNode = ChunkNode ->)",
    "insertText": "GetNextNode()"
  },
  {
    "label": "CheckDataAndAssert()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CheckDataAndAssert(const FScannerFilesList& ChunkDList, const IDeltaChunkEnumeration* DeltaChunkEnumeration, const TArray<uint8>& ScannerData, bool bUseOther = false)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (const FScannerFileElement& Element = Node ->)",
    "insertText": "GetValue()"
  },
  {
    "label": "GetFileData()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> FileData ;)",
    "insertText": "GetFileData(Filename, FBlockRange::FromFirstAndSize(FileOffset, ScanDataRange.GetSize()), FileData)"
  },
  {
    "label": "FindDifferences()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FindDifferences(const FFileManifestList& FileManifestList, FChunkSearcher::FFileDListNode* FileHead)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FChunkSearcher::FFileDListNode* FileNode = FileHead ; uint64 BuildFileFirst = 0 ; uint64 ChunkPartFirst = 0 ;)",
    "insertText": "for(const FFileManifest& FileManifest : FileManifestList.FileList)"
  },
  {
    "label": "FromFirstAndSize()",
    "kind": "Method",
    "detail": "Function (const FBlockRange FileRange =)",
    "insertText": "FromFirstAndSize(BuildFileFirst, FileManifest.FileSize)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FChunkSearcher::FChunkDListNode* ChunkNode = FileNode ->)",
    "insertText": "GetValue().ChunkParts.GetHead()"
  },
  {
    "label": "FindDifferences()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FindDifferences(const FFileManifestList& FileManifestListA, const FFileManifestList& FileManifestListB)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (uint64 BuildFileFirst = 0 ; uint64 ChunkPartFirst = 0 ;)",
    "insertText": "check(FileManifestListA.FileList.Num() == FileManifestListB.FileList.Num())"
  },
  {
    "label": "FromFirstAndSize()",
    "kind": "Method",
    "detail": "Function (const FFileManifest& FileManifestA = FileManifestListA . FileList [ FileManifestIdx ] ; const FFileManifest& FileManifestB = FileManifestListB . FileList [ FileManifestIdx ] ; const FBlockRange FileRangeA =)",
    "insertText": "FromFirstAndSize(BuildFileFirst, FileManifestA.FileSize)"
  },
  {
    "label": "FromFirstAndSize()",
    "kind": "Method",
    "detail": "Function (const FBlockRange FileRangeB =)",
    "insertText": "FromFirstAndSize(BuildFileFirst, FileManifestB.FileSize)"
  },
  {
    "label": "FromFirstAndSize()",
    "kind": "Method",
    "detail": "Function (const FChunkPart& ChunkPartA = FileManifestA . ChunkParts [ ChunkPartIdx ] ; const FChunkPart& ChunkPartB = FileManifestB . ChunkParts [ ChunkPartIdx ] ; const FBlockRange ChunkPartRangeA =)",
    "insertText": "FromFirstAndSize(ChunkPartFirst, ChunkPartA.Size)"
  },
  {
    "label": "FromFirstAndSize()",
    "kind": "Method",
    "detail": "Function (const FBlockRange ChunkPartRangeB =)",
    "insertText": "FromFirstAndSize(ChunkPartFirst, ChunkPartB.Size)"
  }
]