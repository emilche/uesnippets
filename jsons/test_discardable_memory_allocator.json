[
  {
    "label": "TestDiscardableMemoryAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestDiscardableMemoryAllocator"
  },
  {
    "label": "TestDiscardableMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_TEST_DISCARDABLE_MEMORY_ALLOCATOR_H_ # define BASE_TEST_TEST_DISCARDABLE_MEMORY_ALLOCATOR_H_ # include<stddef . h> # include \" base / memory / discardable_memory_allocator . h \" namespace base { class TestDiscardableMemoryAllocator : public DiscardableMemoryAllocator { public :)",
    "insertText": "TestDiscardableMemoryAllocator()"
  },
  {
    "label": "TestDiscardableMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestDiscardableMemoryAllocator(const TestDiscardableMemoryAllocator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestDiscardableMemoryAllocator&)",
    "insertText": "operator(const TestDiscardableMemoryAllocator&)"
  },
  {
    "label": "AllocateLockedDiscardableMemory()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<DiscardableMemory>)",
    "insertText": "AllocateLockedDiscardableMemory(size_t size)"
  },
  {
    "label": "GetBytesAllocated()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetBytesAllocated()"
  },
  {
    "label": "ReleaseFreeMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseFreeMemory()"
  }
]