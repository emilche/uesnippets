[
  {
    "label": "client",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "client"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "client()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<future> # include<memory> # include \" nonstd / optional . hpp \" # include \" rpc / config . h \" # include \" rpc / detail / log . h \" # include \" rpc / detail / pimpl . h \" # include \" rpc / msgpack . hpp \" namespace rpc { class client { public :)",
    "insertText": "client(std::string const &addr, uint16_t port)"
  },
  {
    "label": "client()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "client(client const &)"
  },
  {
    "label": "client()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "client()"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (template<. . . Args> RPCLIB_MSGPACK::object_handle)",
    "insertText": "call(std::string const &func_name, Args... args)"
  },
  {
    "label": "async_call()",
    "kind": "Method",
    "detail": "Function (template<. . . Args> std::future<RPCLIB_MSGPACK::object_handle>)",
    "insertText": "async_call(std::string const &func_name, Args... args)"
  },
  {
    "label": "send()",
    "kind": "Method",
    "detail": "Function (template<. . . Args> void)",
    "insertText": "send(std::string const &func_name, Args... args)"
  },
  {
    "label": "get_timeout()",
    "kind": "Method",
    "detail": "Function (nonstd::optional<int64_t>)",
    "insertText": "get_timeout()"
  },
  {
    "label": "set_timeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_timeout(int64_t value)"
  },
  {
    "label": "clear_timeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear_timeout()"
  },
  {
    "label": "get_connection_state()",
    "kind": "Method",
    "detail": "Function (enum class connection_state { initial,connected,disconnected,reset } ; connection_state)",
    "insertText": "get_connection_state()"
  },
  {
    "label": "wait_all_responses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wait_all_responses()"
  },
  {
    "label": "wait_conn()",
    "kind": "Method",
    "detail": "Function (private : using rsp_promise = std::promise<RPCLIB_MSGPACK::object_handle> ; enum class request_type { call = 0,notification = 2 } ; void)",
    "insertText": "wait_conn()"
  },
  {
    "label": "post()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "post(std::shared_ptr<RPCLIB_MSGPACK::sbuffer> buffer, int idx, std::string const& func_name, std::shared_ptr<rsp_promise> p)"
  },
  {
    "label": "post()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "post(RPCLIB_MSGPACK::sbuffer *buffer)"
  },
  {
    "label": "get_next_call_idx()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "get_next_call_idx()"
  },
  {
    "label": "throw_timeout()",
    "kind": "Method",
    "detail": "Function (RPCLIB_NORETURN void)",
    "insertText": "throw_timeout(std::string const& func_name)"
  },
  {
    "label": "RPCLIB_DECLARE_PIMPL()",
    "kind": "Method",
    "detail": "Function (private : double buffer_grow_factor = 1 . 8 ;)",
    "insertText": "RPCLIB_DECLARE_PIMPL()"
  }
]