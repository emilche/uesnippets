[
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "supports",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "supports"
  },
  {
    "label": "client",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "client"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (RPCLIB_MSGPACK::object_handle)",
    "insertText": "call(std::string const &func_name, Args... args)"
  },
  {
    "label": "async_call()",
    "kind": "Method",
    "detail": "Function (std::future<RPCLIB_MSGPACK::object_handle>)",
    "insertText": "async_call(std::string const &func_name,\n                                                   Args... args)"
  },
  {
    "label": "send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "send(std::string const &func_name, Args... args)"
  },
  {
    "label": "set_timeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_timeout(int64_t value)"
  },
  {
    "label": "clear_timeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear_timeout()"
  },
  {
    "label": "wait_all_responses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wait_all_responses()"
  },
  {
    "label": "wait_conn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wait_conn()"
  },
  {
    "label": "post()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "post(std::shared_ptr<RPCLIB_MSGPACK::sbuffer> buffer, int idx,\n              std::string const& func_name,\n              std::shared_ptr<rsp_promise> p)"
  },
  {
    "label": "post()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "post(RPCLIB_MSGPACK::sbuffer *buffer)"
  },
  {
    "label": "get_next_call_idx()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "get_next_call_idx()"
  },
  {
    "label": "throw_timeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "throw_timeout(std::string const& func_name)"
  }
]