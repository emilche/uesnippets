[
  {
    "label": "InstrStage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InstrStage"
  },
  {
    "label": "ReservationKinds",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ReservationKinds"
  },
  {
    "label": "InstrItinerary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InstrItinerary"
  },
  {
    "label": "InstrItineraryData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InstrItineraryData"
  },
  {
    "label": "getCycles()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCINSTRITINERARIES_H # define LLVM_MC_MCINSTRITINERARIES_H # include \" llvm / MC / MCSchedule . h \" # include<algorithm> namespace llvm { struct InstrStage { enum ReservationKinds { Required = 0,Reserved = 1 } ; unsigned Cycles_ ; unsigned Units_ ; int NextCycles_ ; ReservationKinds Kind_ ; unsigned)",
    "insertText": "getCycles()"
  },
  {
    "label": "InstrItineraryData()",
    "kind": "Method",
    "detail": "Function (} } ; struct InstrItinerary { int NumMicroOps ; unsigned FirstStage ; unsigned LastStage ; unsigned FirstOperandCycle ; unsigned LastOperandCycle ; } ; class InstrItineraryData { public : MCSchedModel SchedModel ; const InstrStage* Stages ; const unsigned* OperandCycles ; const unsigned* Forwardings ; const InstrItinerary* Itineraries ;)",
    "insertText": "InstrItineraryData() : SchedModel(MCSchedModel::GetDefaultSchedModel()), Stages(nullptr), OperandCycles(nullptr), Forwardings(nullptr), Itineraries(nullptr)"
  },
  {
    "label": "InstrItineraryData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InstrItineraryData(const MCSchedModel &SM, const InstrStage *S, const unsigned *OS, const unsigned *F) : SchedModel(SM), Stages(S), OperandCycles(OS), Forwardings(F), Itineraries(SchedModel.InstrItineraries)"
  },
  {
    "label": "isEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEmpty()"
  },
  {
    "label": "beginStage()",
    "kind": "Method",
    "detail": "Function (} const InstrStage*)",
    "insertText": "beginStage(unsigned ItinClassIndx)"
  },
  {
    "label": "endStage()",
    "kind": "Method",
    "detail": "Function (unsigned StageIdx = Itineraries [ ItinClassIndx ] . FirstStage ; return Stages + StageIdx ; } const InstrStage*)",
    "insertText": "endStage(unsigned ItinClassIndx)"
  },
  {
    "label": "getStageLatency()",
    "kind": "Method",
    "detail": "Function (unsigned StageIdx = Itineraries [ ItinClassIndx ] . LastStage ; return Stages + StageIdx ; } unsigned)",
    "insertText": "getStageLatency(unsigned ItinClassIndx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned Latency = 0,StartCycle = 0 ;)",
    "insertText": "for(const InstrStage *IS = beginStage(ItinClassIndx), *E = endStage(ItinClassIndx); IS != E; ++IS)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (Latency =)",
    "insertText": "max(Latency, StartCycle + IS->getCycles())"
  },
  {
    "label": "getNextCycles()",
    "kind": "Method",
    "detail": "Function (StartCycle + = IS ->)",
    "insertText": "getNextCycles()"
  },
  {
    "label": "getOperandCycle()",
    "kind": "Method",
    "detail": "Function (} return Latency ; } int)",
    "insertText": "getOperandCycle(unsigned ItinClassIndx, unsigned OperandIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned FirstIdx = Itineraries [ ItinClassIndx ] . FirstOperandCycle ; unsigned LastIdx = Itineraries [ ItinClassIndx ] . LastOperandCycle ;)",
    "insertText": "if((FirstIdx + OperandIdx) >= LastIdx)"
  },
  {
    "label": "hasPipelineForwarding()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasPipelineForwarding(unsigned DefClass, unsigned DefIdx, unsigned UseClass, unsigned UseIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned FirstDefIdx = Itineraries [ DefClass ] . FirstOperandCycle ; unsigned LastDefIdx = Itineraries [ DefClass ] . LastOperandCycle ;)",
    "insertText": "if((FirstDefIdx + DefIdx) >= LastDefIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned FirstUseIdx = Itineraries [ UseClass ] . FirstOperandCycle ; unsigned LastUseIdx = Itineraries [ UseClass ] . LastOperandCycle ;)",
    "insertText": "if((FirstUseIdx + UseIdx) >= LastUseIdx)"
  },
  {
    "label": "getOperandCycle()",
    "kind": "Method",
    "detail": "Function (int DefCycle =)",
    "insertText": "getOperandCycle(DefClass, DefIdx)"
  },
  {
    "label": "getOperandCycle()",
    "kind": "Method",
    "detail": "Function (int UseCycle =)",
    "insertText": "getOperandCycle(UseClass, UseIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UseCycle = DefCycle - UseCycle + 1 ;)",
    "insertText": "if(UseCycle > 0 && hasPipelineForwarding(DefClass, DefIdx, UseClass, UseIdx))"
  }
]