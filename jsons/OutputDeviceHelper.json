[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "FOutputDeviceHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutputDeviceHelper"
  },
  {
    "label": "AppendFormatLogLine()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / StringFwd . h \" # include \" Logging / LogVerbosity . h \" # include \" Misc / OutputDevice . h \" class FArchive ; class FName ; class FString ; struct FOutputDeviceHelper { void)",
    "insertText": "AppendFormatLogLine(FWideStringBuilderBase& Output, ELogVerbosity::Type Verbosity, const FName& Category, const TCHAR* Message = nullptr, ELogTimes::Type LogTime = ELogTimes::None, double Time = -1.0, int32* OutCategoryIndex = nullptr)"
  },
  {
    "label": "AppendFormatLogLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendFormatLogLine(FUtf8StringBuilderBase& Output, ELogVerbosity::Type Verbosity, const FName& Category, const TCHAR* Message = nullptr, ELogTimes::Type LogTime = ELogTimes::None, double Time = -1.0, int32* OutCategoryIndex = nullptr)"
  },
  {
    "label": "FormatLogLine()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FormatLogLine(ELogVerbosity::Type Verbosity, const FName& Category, const TCHAR* Message = nullptr, ELogTimes::Type LogTime = ELogTimes::None, double Time = -1.0, int32* OutCategoryIndex = nullptr)"
  },
  {
    "label": "FormatCastAndSerializeLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FormatCastAndSerializeLine(FArchive& Output, const TCHAR* Message, ELogVerbosity::Type Verbosity, const FName& Category, double Time, bool bSuppressEventTag, bool bAutoEmitLineTerminator)"
  }
]