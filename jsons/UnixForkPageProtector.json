[
  {
    "label": "UnixLowLevelDynamicArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnixLowLevelDynamicArray"
  },
  {
    "label": "FBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlock"
  },
  {
    "label": "FMallocLinked",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocLinked"
  },
  {
    "label": "FForkPageProtector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FForkPageProtector"
  },
  {
    "label": "ProtectedMemoryRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProtectedMemoryRange"
  },
  {
    "label": "CallstackHashData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallstackHashData"
  },
  {
    "label": "UnixLowLevelDynamicArray()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / PlatformMemory . h \" # if COMPILE_FORK_PAGE_PROTECTOR # include \" Containers / Map . h \" # include<sys / mman . h> namespace UE { template<T> class UnixLowLevelDynamicArray { public :)",
    "insertText": "UnixLowLevelDynamicArray()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Elements = static_cast<)",
    "insertText": "T(mmap(nullptr, Capacity * sizeof(T), PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0))"
  },
  {
    "label": "munmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "munmap(Elements, Capacity)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Emplace(T&& Elem)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T* OldElements = Elements ;)",
    "insertText": "if(NewElements == nullptr)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Elements =)",
    "insertText": "MoveTemp(NewElements)"
  },
  {
    "label": "munmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "munmap(OldElements, OldCapacity)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} Elements [ Size ] =)",
    "insertText": "MoveTemp(Elem)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (Size + + ; } T*)",
    "insertText": "begin()"
  },
  {
    "label": "FMallocLinked()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMallocLinked()"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Malloc(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Realloc(void* Ptr, SIZE_T NewSize, uint32 Alignment)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* Ptr)"
  },
  {
    "label": "GetDescriptiveName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetDescriptiveName()"
  },
  {
    "label": "IsInternallyThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInternallyThreadSafe()"
  },
  {
    "label": "DebugVisualize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugVisualize()"
  },
  {
    "label": "OwnsPointer()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "OwnsPointer(void* Ptr)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FMalloc* PreviousMalloc = nullptr ; FBlock* Blocks = nullptr ; FCriticalSection AllocatorMutex ; } ; class FForkPageProtector { public : FForkPageProtector&)",
    "insertText": "Get()"
  },
  {
    "label": "AddMemoryRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMemoryRegion(void* Address, uint64 Size)"
  },
  {
    "label": "FreeMemoryRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeMemoryRegion(void* Address)"
  },
  {
    "label": "ProtectMemoryRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProtectMemoryRegions()"
  },
  {
    "label": "UnProtectMemoryRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnProtectMemoryRegions()"
  },
  {
    "label": "HandleNewCrashAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleNewCrashAddress(void* CrashAddress)"
  },
  {
    "label": "OverrideGMalloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideGMalloc()"
  },
  {
    "label": "FForkPageProtector()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FForkPageProtector()"
  },
  {
    "label": "SetupOutputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupOutputFile()"
  },
  {
    "label": "DumpCallstackInfoToFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DumpCallstackInfoToFile()"
  },
  {
    "label": "SetupSignalHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupSignalHandler()"
  },
  {
    "label": "GetOutputFileLocation()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetOutputFileLocation()"
  }
]