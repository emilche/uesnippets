[
  {
    "label": "RR_STRING_JOIN3()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDE_RADAUDIO_ENCODER_H # define INCLUDE_RADAUDIO_ENCODER_H # include \" egttypes . h \" # include<stddef . h> const int approximate_data_rate_for_quality_setting_in_kilobits [ 2 ] [ 1 0 ] = { { 3 0,3 6,3 9,4 3,4 8,5 5,6 5,8 5,1 2 5,2 0 5 },{ 5 5,6 4,7 2,8 0,9 0,1 0 0,1 2 0,1 6 0,2 4 0,4 0 0 },} ; typedef struct { RAD_U64 dummy [ 2 0 0 ] ; U8 buffer [ 5 0 0 0 ] ; } radaudio_encoder ; # define RADAUDIOENC_AT_EOF 0 # define RADAUDIOENC_INSUFFICIENT_BUFFER - 1 # define RADAUDIOENC_INTERNAL_ERROR - 2 # define RADAUDIOENC_MAX_OUTPUT_SAMPLES_PER_CHANNEL_PER_CHUNK 1 0 2 4 RADDEFSTART # define RADAUDIO_ENC_LIBRARY_VERSION 1 # ifndef RR_STRING_JOIN3 # define)",
    "insertText": "RR_STRING_JOIN3(arg1, arg2, arg3) RR_STRING_JOIN_DELAY3(arg1, arg2, arg3) #define RR_STRING_JOIN_DELAY3(arg1, arg2, arg3) RR_STRING_JOIN_IMMEDIATE3(arg1, arg2, arg3) #define RR_STRING_JOIN_IMMEDIATE3(arg1, arg2, arg3) arg1 ## arg2 ## arg3 #endif #ifdef RADAUDIO_WRAP #define RADAUDIO_ENC_NAME(name) RR_STRING_JOIN3(RADAUDIO_WRAP, name##_, RADAUDIO_ENC_LIBRARY_VERSION ) #else #define RADAUDIO_ENC_NAME(name) RR_STRING_JOIN( name##_, RADAUDIO_ENC_LIBRARY_VERSION ) #endif #define radaudio_encode_create RADAUDIO_ENC_NAME(radaudio_encode_create) #define radaudio_encode_block RADAUDIO_ENC_NAME(radaudio_encode_block) #define radaudio_encode_create_internal RADAUDIO_ENC_NAME(radaudio_encode_create_internal) #define RadAudioCompressGetProfileData RADAUDIO_ENC_NAME(RadAudioCompressGetProfileData) #define radaudio_determine_preferred_next_block_length RADAUDIO_ENC_NAME(radaudio_determine_preferred_next_block_length) #define radaudio_determine_preferred_first_block_length RADAUDIO_ENC_NAME(radaudio_determine_preferred_first_block_length) #define radaudio_encode_block_ext RADAUDIO_ENC_NAME(radaudio_encode_block_ext) #define RADAUDIO_STREAM_HEADER_MAX 128 RADDEFFUNC size_t radaudio_encode_create( radaudio_encoder *rae, U8 header[RADAUDIO_STREAM_HEADER_MAX], int num_channels, int sample_rate, int quality, U32 flags)"
  },
  {
    "label": "radaudio_encode_block()",
    "kind": "Method",
    "detail": "Function (# define RADAUDIO_ENC_FLAG_improve_seamless_loop 1 RADDEFFUNC int)",
    "insertText": "radaudio_encode_block(radaudio_encoder *es, float *input, size_t input_len, size_t *offset , unsigned char *encode_buffer, size_t encode_buffer_size)"
  },
  {
    "label": "radaudio_encode_block_ext()",
    "kind": "Method",
    "detail": "Function (# define MAX_ENCODED_BLOCK_SIZE 5 0 0 0 typedef enum { RADAUDIO_BLOCKTYPE_short = 1,RADAUDIO_BLOCKTYPE_long = 2,RADAUDIO_BLOCKTYPE_default = 0 } radaudio_blocktype ; typedef struct { radaudio_blocktype force_first_blocktype ; radaudio_blocktype force_next_blocktype ; F32* padding ; size_t padding_len ; } radaudio_encode_info ; RADDEFFUNC int)",
    "insertText": "radaudio_encode_block_ext(radaudio_encoder *es, float *input, size_t input_len, size_t *offset , unsigned char *encode_buffer, size_t encode_buffer_size, radaudio_encode_info *info)"
  },
  {
    "label": "radaudio_determine_preferred_first_block_length()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC radaudio_blocktype)",
    "insertText": "radaudio_determine_preferred_first_block_length(radaudio_encoder *rae, F32 *input, size_t input_len)"
  },
  {
    "label": "radaudio_determine_preferred_next_block_length()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC int)",
    "insertText": "radaudio_determine_preferred_next_block_length(radaudio_encoder *rae, radaudio_blocktype firsttype, F32 *input, size_t input_len, size_t offset)"
  }
]