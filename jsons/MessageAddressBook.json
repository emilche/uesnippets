[
  {
    "label": "FMessageAddressBook",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageAddressBook"
  },
  {
    "label": "FMessageAddressBook()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" IMessageContext . h \" # include \" Misc / ScopeLock . h \" class FMessageAddressBook { public :)",
    "insertText": "FMessageAddressBook()"
  },
  {
    "label": "FCriticalSection()",
    "kind": "Method",
    "detail": "Function (CriticalSection = new)",
    "insertText": "FCriticalSection()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (delete CriticalSection ; } public : void)",
    "insertText": "Add(const FMessageAddress& Address, const FGuid& NodeId)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(CriticalSection)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (Entries .)",
    "insertText": "FindOrAdd(Address)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Entries .)",
    "insertText": "Reset()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const FMessageAddress& Address)"
  },
  {
    "label": "GetNodesFor()",
    "kind": "Method",
    "detail": "Function (} TArray<FGuid>)",
    "insertText": "GetNodesFor(const TArray<FMessageAddress>& Addresses)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FGuid* NodeId = Entries .)",
    "insertText": "Find(Address)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (FoundNodes .)",
    "insertText": "AddUnique(*NodeId)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (} } return FoundNodes ; } void)",
    "insertText": "RemoveAll(TArray<FMessageAddress>& OutRemovedAddresses)"
  },
  {
    "label": "GenerateKeyArray()",
    "kind": "Method",
    "detail": "Function (Entries .)",
    "insertText": "GenerateKeyArray(OutRemovedAddresses)"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveNode(const FGuid& NodeId, TArray<FMessageAddress>& OutRemovedAddresses)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutRemovedAddresses .)",
    "insertText": "Add(EntryPair.Key)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(const auto& Address : OutRemovedAddresses)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Entries .)",
    "insertText": "Remove(Address)"
  }
]