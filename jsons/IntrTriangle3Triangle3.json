[
  {
    "label": "TIntrTriangle3Triangle3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntrTriangle3Triangle3"
  },
  {
    "label": "TIntrTriangle3Triangle3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" PlaneTypes . h \" # include \" TriangleTypes . h \" # include \" VectorUtil . h \" # include \" IndexTypes . h \" # include \" Intersection / IntrSegment2Triangle2 . h \" # include \" Intersection / IntrTriangle2Triangle2 . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<Real> class TIntrTriangle3Triangle3 { protected : TTriangle3<Real> Triangle0,Triangle1 ; Real Tolerance = TMathUtil<Real>::ZeroTolerance ; bool bReportCoplanarIntersection = false ; public : EIntersectionResult Result = EIntersectionResult::NotComputed ; EIntersectionType Type = EIntersectionType::Empty ; int Quantity = 0 ; TVector<Real> Points [ 6 ] ;)",
    "insertText": "TIntrTriangle3Triangle3()"
  },
  {
    "label": "TIntrTriangle3Triangle3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIntrTriangle3Triangle3(const TTriangle3<Real>& T0, const TTriangle3<Real>& T1)"
  },
  {
    "label": "SetResult()",
    "kind": "Method",
    "detail": "Function (Triangle0 = T0 ; Triangle1 = T1 ; } void)",
    "insertText": "SetResult(const TVector<Real>& A, const TVector<Real>& B)"
  },
  {
    "label": "SetResultNone()",
    "kind": "Method",
    "detail": "Function (Result = EIntersectionResult::Intersects ; Type = EIntersectionType::Segment ; Points [ 0 ] = A ; Points [ 1 ] = B ; Quantity = 2 ; } void)",
    "insertText": "SetResultNone()"
  },
  {
    "label": "SetResult()",
    "kind": "Method",
    "detail": "Function (Result = EIntersectionResult::NoIntersection ; Type = EIntersectionType::Empty ; Quantity = 0 ; } void)",
    "insertText": "SetResult(bool IsIntersecting)"
  },
  {
    "label": "GetTriangle0()",
    "kind": "Method",
    "detail": "Function (Result = IsIntersecting ? EIntersectionResult::Intersects : EIntersectionResult::NoIntersection ; Type = IsIntersecting ? EIntersectionType::Unknown : EIntersectionType::Empty ; Quantity = 0 ; } TTriangle3<Real>)",
    "insertText": "GetTriangle0()"
  },
  {
    "label": "SetTriangle1()",
    "kind": "Method",
    "detail": "Function (Result = EIntersectionResult::NotComputed ; Triangle0 = Triangle0In ; } void)",
    "insertText": "SetTriangle1(const TTriangle3<Real>& Triangle1In)"
  },
  {
    "label": "SetReportCoplanarIntersection()",
    "kind": "Method",
    "detail": "Function (Result = EIntersectionResult::NotComputed ; Triangle1 = Triangle1In ; } void)",
    "insertText": "SetReportCoplanarIntersection(bool bReportCoplanarIntersectionIn)"
  },
  {
    "label": "SetTolerance()",
    "kind": "Method",
    "detail": "Function (Result = EIntersectionResult::NotComputed ; bReportCoplanarIntersection = bReportCoplanarIntersectionIn ; } void)",
    "insertText": "SetTolerance(Real ToleranceIn)"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (Result = EIntersectionResult::NotComputed ; Tolerance = ToleranceIn ; } TIntrTriangle3Triangle3*)",
    "insertText": "Compute()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Find()"
  },
  {
    "label": "Plane0()",
    "kind": "Method",
    "detail": "Function (} Result = EIntersectionResult::NoIntersection ; int i,iM,iP ; TPlane3<Real>)",
    "insertText": "Plane0(Triangle0.V[0], Triangle0.V[1], Triangle0.V[2])"
  },
  {
    "label": "Plane1()",
    "kind": "Method",
    "detail": "Function (TPlane3<Real>)",
    "insertText": "Plane1(Triangle1.V[0], Triangle1.V[1], Triangle1.V[2])"
  },
  {
    "label": "SwappedTrisIntr()",
    "kind": "Method",
    "detail": "Function (TIntrTriangle3Triangle3<Real>)",
    "insertText": "SwappedTrisIntr(Triangle1, Triangle0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Result = SwappedTrisIntr . Result ; Type = SwappedTrisIntr . Type ; Quantity = SwappedTrisIntr . Quantity ;)",
    "insertText": "for(int PtIdx = 0; PtIdx < 6; PtIdx++)"
  },
  {
    "label": "TrianglePlaneRelations()",
    "kind": "Method",
    "detail": "Function (Points [ PtIdx ] = SwappedTrisIntr . Points [ PtIdx ] ; } return bRes ; } else { return false ; } } int pos1,neg1,zero1 ; FIndex3i sign1 ; TVector<Real> dist1 ;)",
    "insertText": "TrianglePlaneRelations(Triangle1, Plane0, dist1, sign1, pos1, neg1, zero1, Tolerance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return false ; })",
    "insertText": "if(pos1 == 0 || neg1 == 0)"
  },
  {
    "label": "iM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iM(i + 2)"
  },
  {
    "label": "iP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iP(i + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "for(i = 0; i < 3; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } Real t ; TVector<Real> intr0,intr1 ;)",
    "insertText": "if(zero1 == 0)"
  },
  {
    "label": "iSign()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "iSign(pos1 == 1 ? +1 : -1)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (t = dist1 [)",
    "insertText": "i(dist1[i] - dist1[iM])"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (intr0 = Triangle1 . V [ i ] +)",
    "insertText": "t(Triangle1.V[iM] - Triangle1.V[i])"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (t = dist1 [)",
    "insertText": "i(dist1[i] - dist1[iP])"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (intr1 = Triangle1 . V [ i ] +)",
    "insertText": "t(Triangle1.V[iP] - Triangle1.V[i])"
  },
  {
    "label": "iM()",
    "kind": "Method",
    "detail": "Function (t = dist1 [)",
    "insertText": "iM(dist1[iM] - dist1[iP])"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (intr0 = Triangle1 . V [ iM ] +)",
    "insertText": "t(Triangle1.V[iP] - Triangle1.V[iM])"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "ensure(false)"
  },
  {
    "label": "UnitCross()",
    "kind": "Method",
    "detail": "Function (TVector<Real> E0 [ 3 ] ; E0 [ 0 ] = Triangle0 . V [ 1 ] - Triangle0 . V [ 0 ] ; E0 [ 1 ] = Triangle0 . V [ 2 ] - Triangle0 . V [ 1 ] ; E0 [ 2 ] = Triangle0 . V [ 0 ] - Triangle0 . V [ 2 ] ; TVector<Real> N0 =)",
    "insertText": "UnitCross(E0[0], E0[1])"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real N0dT0V0 = N0 .)",
    "insertText": "Dot(Triangle0.V[0])"
  },
  {
    "label": "ProjectOntoAxis()",
    "kind": "Method",
    "detail": "Function (Real min1,max1 ;)",
    "insertText": "ProjectOntoAxis(Triangle1, N0, min1, max1)"
  },
  {
    "label": "UnitCross()",
    "kind": "Method",
    "detail": "Function (TVector<Real> dir ; Real min0,max0 ; int i0,i1 ; TVector<Real> N0xN1 =)",
    "insertText": "UnitCross(N0, N1)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real N1dT1V0 = N1 .)",
    "insertText": "Dot(Triangle1.V[0])"
  },
  {
    "label": "ProjectOntoAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProjectOntoAxis(Triangle0, N1, min0, max0)"
  },
  {
    "label": "UnitCross()",
    "kind": "Method",
    "detail": "Function (dir =)",
    "insertText": "UnitCross(E0[i0], E1[i1])"
  },
  {
    "label": "ProjectOntoAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProjectOntoAxis(Triangle0, dir, min0, max0)"
  },
  {
    "label": "ProjectOntoAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProjectOntoAxis(Triangle1, dir, min1, max1)"
  },
  {
    "label": "UnitCross()",
    "kind": "Method",
    "detail": "Function (dir =)",
    "insertText": "UnitCross(N0, E0[i0])"
  },
  {
    "label": "UnitCross()",
    "kind": "Method",
    "detail": "Function (dir =)",
    "insertText": "UnitCross(N1, E1[i1])"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real dot0 = axis .)",
    "insertText": "Dot(triangle.V[0])"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real dot1 = axis .)",
    "insertText": "Dot(triangle.V[1])"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real dot2 = axis .)",
    "insertText": "Dot(triangle.V[2])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fmin = dot0 ; fmax = fmin ;)",
    "insertText": "if(dot1 < fmin)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fmin = dot1 ; } else)",
    "insertText": "if(dot1 > fmax)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fmax = dot1 ; })",
    "insertText": "if(dot2 < fmin)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fmin = dot2 ; } else)",
    "insertText": "if(dot2 > fmax)"
  },
  {
    "label": "TrianglePlaneRelations()",
    "kind": "Method",
    "detail": "Function (fmax = dot2 ; } } void)",
    "insertText": "TrianglePlaneRelations(const TTriangle3<Real>& triangle, const TPlane3<Real>& plane, TVector<Real>& distance, FIndex3i& sign, int& positive, int& negative, int& zero, Real Tolerance)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (positive = 0 ; negative = 0 ; zero = 0 ;)",
    "insertText": "for(int i = 0; i < 3; ++i)"
  },
  {
    "label": "DistanceTo()",
    "kind": "Method",
    "detail": "Function (distance [ i ] = plane .)",
    "insertText": "DistanceTo(triangle.V[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (sign [ i ] = 1 ; positive + + ; } else)",
    "insertText": "if(distance[i] < -Tolerance)"
  },
  {
    "label": "IntersectTriangleWithCoplanarSegment()",
    "kind": "Method",
    "detail": "Function (sign [ i ] = - 1 ; negative + + ; } else { sign [ i ] = 0 ; zero + + ; } } } int)",
    "insertText": "IntersectTriangleWithCoplanarSegment(const TPlane3<Real>& plane, const TTriangle3<Real>& triangle, const TVector<Real>& end0, const TVector<Real>& end1, TVector<Real>& OutA, TVector<Real>& OutB, Real Tolerance)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (int maxNormal = 0 ; Real fmax =)",
    "insertText": "Abs(plane.Normal.X)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (Real absMax =)",
    "insertText": "Abs(plane.Normal.Y)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (maxNormal = 1 ; fmax = absMax ; } absMax =)",
    "insertText": "Abs(plane.Normal.Z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (maxNormal = 2 ; } TTriangle2<Real> projTri ; TVector2<Real> projEnd0,projEnd1 ; int i ;)",
    "insertText": "if(maxNormal == 0)"
  },
  {
    "label": "GetYZ()",
    "kind": "Method",
    "detail": "Function (projTri . V [ i ] =)",
    "insertText": "GetYZ(triangle.V[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} projEnd0 . X = end0 . Y ; projEnd0 . Y = end0 . Z ; projEnd1 . X = end1 . Y ; projEnd1 . Y = end1 . Z ; } else)",
    "insertText": "if(maxNormal == 1)"
  },
  {
    "label": "GetXZ()",
    "kind": "Method",
    "detail": "Function (projTri . V [ i ] =)",
    "insertText": "GetXZ(triangle.V[i])"
  },
  {
    "label": "GetXY()",
    "kind": "Method",
    "detail": "Function (projTri . V [ i ] =)",
    "insertText": "GetXY(triangle.V[i])"
  },
  {
    "label": "projSeg()",
    "kind": "Method",
    "detail": "Function (} projEnd0 . X = end0 . X ; projEnd0 . Y = end0 . Y ; projEnd1 . X = end1 . X ; projEnd1 . Y = end1 . Y ; } TSegment2<Real>)",
    "insertText": "projSeg(projEnd0, projEnd1)"
  },
  {
    "label": "calc()",
    "kind": "Method",
    "detail": "Function (TIntrSegment2Triangle2<Real>)",
    "insertText": "calc(projSeg, projTri)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (Quantity = 2 ; intr [ 0 ] = calc . Point0 ; intr [ 1 ] = calc . Point1 ; } else {)",
    "insertText": "checkSlow(calc.Type == EIntersectionType::Point)"
  },
  {
    "label": "invNX()",
    "kind": "Method",
    "detail": "Function (Real)",
    "insertText": "invNX((Real)1)"
  },
  {
    "label": "invNX()",
    "kind": "Method",
    "detail": "Function (Real y = intr [ i ] . X ; Real z = intr [ i ] . Y ; Real x =)",
    "insertText": "invNX(plane.Constant - plane.Normal.Y * y - plane.Normal.Z * z)"
  },
  {
    "label": "Real()",
    "kind": "Method",
    "detail": "Function (* OutPts [ i ] = TVector<)",
    "insertText": "Real(x, y, z)"
  },
  {
    "label": "invNY()",
    "kind": "Method",
    "detail": "Function (Real)",
    "insertText": "invNY((Real)1)"
  },
  {
    "label": "invNY()",
    "kind": "Method",
    "detail": "Function (Real x = intr [ i ] . X ; Real z = intr [ i ] . Y ; Real y =)",
    "insertText": "invNY(plane.Constant - plane.Normal.X * x - plane.Normal.Z * z)"
  },
  {
    "label": "invNZ()",
    "kind": "Method",
    "detail": "Function (} } else { Real)",
    "insertText": "invNZ((Real)1)"
  },
  {
    "label": "invNZ()",
    "kind": "Method",
    "detail": "Function (Real x = intr [ i ] . X ; Real y = intr [ i ] . Y ; Real z =)",
    "insertText": "invNZ(plane.Constant - plane.Normal.X * x - plane.Normal.Y * y)"
  },
  {
    "label": "ContainsPoint()",
    "kind": "Method",
    "detail": "Function (} } return Quantity ; } protected : bool)",
    "insertText": "ContainsPoint(const TTriangle3<Real>& triangle, const TPlane3<Real>& plane, const TVector<Real>& point)"
  },
  {
    "label": "MakePerpVectors()",
    "kind": "Method",
    "detail": "Function (TVector<Real> U0,U1 ;)",
    "insertText": "MakePerpVectors(plane.Normal, U0, U1)"
  },
  {
    "label": "ProjP()",
    "kind": "Method",
    "detail": "Function (TVector<Real> PmV0 = point - triangle . V [ 0 ] ; TVector<Real> V1mV0 = triangle . V [ 1 ] - triangle . V [ 0 ] ; TVector<Real> V2mV0 = triangle . V [ 2 ] - triangle . V [ 0 ] ; TVector2<Real>)",
    "insertText": "ProjP(U0.Dot(PmV0), U1.Dot(PmV0))"
  },
  {
    "label": "ProjT()",
    "kind": "Method",
    "detail": "Function (TTriangle2<Real>)",
    "insertText": "ProjT(TVector2<Real>::Zero(), TVector2<Real>(U0.Dot(V1mV0), U1.Dot(V1mV0)), TVector2<Real>(U0.Dot(V2mV0), U1.Dot(V2mV0)))"
  },
  {
    "label": "IntersectsSegment()",
    "kind": "Method",
    "detail": "Function (Result = EIntersectionResult::Intersects ; Type = EIntersectionType::Point ; Quantity = 1 ; Points [ 0 ] = point ; return true ; } return false ; } bool)",
    "insertText": "IntersectsSegment(const TPlane3<Real>& plane, const TTriangle3<Real>& triangle, const TVector<Real>& end0, const TVector<Real>& end1)"
  },
  {
    "label": "IntersectTriangleWithCoplanarSegment()",
    "kind": "Method",
    "detail": "Function (Quantity =)",
    "insertText": "IntersectTriangleWithCoplanarSegment(plane, triangle, end0, end1, Points[0], Points[1], Tolerance)"
  },
  {
    "label": "GetCoplanarIntersection()",
    "kind": "Method",
    "detail": "Function (Result = EIntersectionResult::Intersects ; Type = Quantity = = 2 ? EIntersectionType::Segment : EIntersectionType::Point ; return true ; } else { Result = EIntersectionResult::NoIntersection ; Type = EIntersectionType::Empty ; return false ; } } bool)",
    "insertText": "GetCoplanarIntersection(const TPlane3<Real>& plane, const TTriangle3<Real>& tri0, const TTriangle3<Real>& tri1)"
  },
  {
    "label": "GetYZ()",
    "kind": "Method",
    "detail": "Function (projTri0 . V [ i ] =)",
    "insertText": "GetYZ(tri0.V[i])"
  },
  {
    "label": "GetYZ()",
    "kind": "Method",
    "detail": "Function (projTri1 . V [ i ] =)",
    "insertText": "GetYZ(tri1.V[i])"
  },
  {
    "label": "GetXZ()",
    "kind": "Method",
    "detail": "Function (projTri0 . V [ i ] =)",
    "insertText": "GetXZ(tri0.V[i])"
  },
  {
    "label": "GetXZ()",
    "kind": "Method",
    "detail": "Function (projTri1 . V [ i ] =)",
    "insertText": "GetXZ(tri1.V[i])"
  },
  {
    "label": "GetXY()",
    "kind": "Method",
    "detail": "Function (projTri0 . V [ i ] =)",
    "insertText": "GetXY(tri0.V[i])"
  },
  {
    "label": "GetXY()",
    "kind": "Method",
    "detail": "Function (projTri1 . V [ i ] =)",
    "insertText": "GetXY(tri1.V[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } TVector2<Real> save ; TVector2<Real> edge0 = projTri0 . V [ 1 ] - projTri0 . V [ 0 ] ; TVector2<Real> edge1 = projTri0 . V [ 2 ] - projTri0 . V [ 0 ] ;)",
    "insertText": "if(DotPerp(edge0, edge1) < (Real)0)"
  },
  {
    "label": "intr()",
    "kind": "Method",
    "detail": "Function (save = projTri1 . V [ 1 ] ; projTri1 . V [ 1 ] = projTri1 . V [ 2 ] ; projTri1 . V [ 2 ] = save ; } TIntrTriangle2Triangle2<Real>)",
    "insertText": "intr(projTri0, projTri1)"
  }
]