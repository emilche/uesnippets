[
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Context . h \" # include \" TransactionInlines . h \" namespace AutoRTFM { UE_AUTORTFM_FORCEINLINE FContext*)",
    "insertText": "Get()"
  },
  {
    "label": "RecordWrite()",
    "kind": "Method",
    "detail": "Function (CurrentTransaction ->)",
    "insertText": "RecordWrite(LogicalAddress, Size)"
  },
  {
    "label": "RecordWrite()",
    "kind": "Method",
    "detail": "Function (} template<unsigned SIZE> AUTORTFM_NO_ASAN UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "RecordWrite(void* LogicalAddress)"
  },
  {
    "label": "SIZE()",
    "kind": "Method",
    "detail": "Function (CurrentTransaction -> RecordWrite<)",
    "insertText": "SIZE(LogicalAddress)"
  },
  {
    "label": "DidAllocate()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "DidAllocate(void* LogicalAddress, size_t Size)"
  },
  {
    "label": "DidAllocate()",
    "kind": "Method",
    "detail": "Function (CurrentTransaction ->)",
    "insertText": "DidAllocate(LogicalAddress, Size)"
  },
  {
    "label": "DidFree()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "DidFree(void* LogicalAddress)"
  },
  {
    "label": "AttemptToCommitTransaction()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE bool)",
    "insertText": "AttemptToCommitTransaction(FTransaction* const Transaction)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(EContextStatus::OnTrack == Status)"
  },
  {
    "label": "AttemptToCommit()",
    "kind": "Method",
    "detail": "Function (Status = EContextStatus::Committing ; const bool bResult = Transaction ->)",
    "insertText": "AttemptToCommit()"
  }
]