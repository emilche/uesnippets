[
  {
    "label": "FMemoryReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryReader"
  },
  {
    "label": "FMemoryReaderView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryReaderView"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / UnrealMathUtility . h \" # include \" Memory / MemoryView . h \" # include \" Containers / UnrealString . h \" # include \" Serialization / MemoryArchive . h \" # include \" Containers / ArrayView . h \" class FMemoryReader : public FMemoryArchive { public : FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(void* Data, int64 Num)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Data, &Bytes[(int32)Offset], Num)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (Offset + = Num ; } else {)",
    "insertText": "SetError()"
  },
  {
    "label": "FMemoryReader()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "FMemoryReader(const TArray<uint8>& InBytes, bool bIsPersistent = false ) : Bytes (InBytes) , LimitSize(INT64_MAX)"
  },
  {
    "label": "SetIsLoading()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetIsLoading(true)"
  },
  {
    "label": "SetIsPersistent()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetIsPersistent(bIsPersistent)"
  },
  {
    "label": "SetLimitSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLimitSize(int64 NewLimitSize)"
  },
  {
    "label": "FMutableMemoryView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMutableMemoryView(Data, static_cast<uint64>(Num)).CopyFrom(Bytes.Mid(Offset, Num))"
  },
  {
    "label": "FMemoryReaderView()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "FMemoryReaderView(TArrayView<const uint8> InBytes, bool bIsPersistent = false) : FMemoryReaderView(MakeMemoryView(InBytes), bIsPersistent)"
  },
  {
    "label": "FMemoryReaderView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMemoryReaderView(FMemoryView InBytes, bool bIsPersistent = false) : Bytes(InBytes) , LimitSize(INT64_MAX)"
  }
]