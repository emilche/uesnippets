[
  {
    "label": "FSpatialIndexProfile2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpatialIndexProfile2D"
  },
  {
    "label": "FSpatialIndexProfile3D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpatialIndexProfile3D"
  },
  {
    "label": "FSphere",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSphere"
  },
  {
    "label": "FCone",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCone"
  },
  {
    "label": "TStaticSpatialIndexDataInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStaticSpatialIndexDataInterface"
  },
  {
    "label": "SpatialIndexType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SpatialIndexType"
  },
  {
    "label": "ElementsSorter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ElementsSorter"
  },
  {
    "label": "TStaticSpatialIndex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStaticSpatialIndex"
  },
  {
    "label": "Func",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Func"
  },
  {
    "label": "TImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TImpl"
  },
  {
    "label": "TListImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TListImpl"
  },
  {
    "label": "TRTreeImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRTreeImpl"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNode"
  },
  {
    "label": "FLeafType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLeafType"
  },
  {
    "label": "TIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIterator"
  },
  {
    "label": "TNodeSorterNoSort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TNodeSorterNoSort"
  },
  {
    "label": "TNodeSorterMinX",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TNodeSorterMinX"
  },
  {
    "label": "TNodeSorterMorton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TNodeSorterMorton"
  },
  {
    "label": "TNodeSorterHilbert",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TNodeSorterHilbert"
  },
  {
    "label": "TStaticSpatialIndexList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStaticSpatialIndexList"
  },
  {
    "label": "TStaticSpatialIndexRTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStaticSpatialIndexRTree"
  },
  {
    "label": "FastSphereAABBIntersection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Algo / ForEach . h \" # include \" Algo / Transform . h \" # include \" Misc / TVariant . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / UObjectGlobals . h \" # include \" OverrideVoidReturnInvoker . h \" namespace FStaticSpatialIndex { struct FSpatialIndexProfile2D { enum { Is3D = 0 } ; using FReal = FVector2D::FReal ; using FVector = FVector2D ; using FIntPoint = FIntVector2 ; using FBox = FBox2D ; } ; struct FSpatialIndexProfile3D { enum { Is3D = 1 } ; using FReal = FVector::FReal ; using FVector = FVector ; using FIntPoint = FIntVector ; using FBox = FBox ; } ; template<Profile> bool)",
    "insertText": "FastSphereAABBIntersection(const typename Profile::FVector& InCenter, const typename Profile::FReal InRadiusSquared, const typename Profile::FBox& InBox)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const Profile::FVector ClosestPoint = Profile::)",
    "insertText": "Max(InBox.Min, Profile::FVector::Min(InCenter, InBox.Max))"
  },
  {
    "label": "FSphere()",
    "kind": "Method",
    "detail": "Function (} struct FSphere {)",
    "insertText": "FSphere(const FVector& InCenter, const FVector::FReal InRadius) : Center(InCenter) , Radius(InRadius)"
  },
  {
    "label": "FCone()",
    "kind": "Method",
    "detail": "Function (} FVector Center ; FVector::FReal Radius ; } ; struct FCone : FSphere {)",
    "insertText": "FCone(const FVector& InCenter, const FVector& InAxis, const FVector::FReal InRadius, const FVector::FReal InAngle) : FSphere(InCenter, InRadius) , Axis(InAxis) , Angle(InAngle)"
  },
  {
    "label": "FastConeAABBIntersection()",
    "kind": "Method",
    "detail": "Function (} FVector Axis ; FVector::FReal Angle ; } ; template<Profile> bool)",
    "insertText": "FastConeAABBIntersection(const typename Profile::FVector& InCenter, const typename Profile::FReal InRadiusSquared, const typename Profile::FVector& InAxis, const typename Profile::FReal InAngle, const typename Profile::FReal InSinHalfAngle, const typename Profile::FReal InCosHalfAngle, const typename Profile::FBox& InBox)"
  },
  {
    "label": "GetExtent()",
    "kind": "Method",
    "detail": "Function (const Profile::FVector BoxExtent = InBox .)",
    "insertText": "GetExtent()"
  },
  {
    "label": "SizeSquared()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal BoxExtentSizeSqr = BoxExtent .)",
    "insertText": "SizeSquared()"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal BoxExtentSize =)",
    "insertText": "Sqrt(BoxExtentSizeSqr)"
  },
  {
    "label": "InCenter()",
    "kind": "Method",
    "detail": "Function (const Profile::FVector U =)",
    "insertText": "InCenter(BoxExtentSize / InSinHalfAngle)"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (Profile::FVector D = InBox .)",
    "insertText": "GetCenter()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Profile::FReal DSqr = D | D ; Profile::FReal E = InAxis | D ;)",
    "insertText": "if(E > 0.0f && E * E >= DSqr * FMath::Square(InCosHalfAngle))"
  },
  {
    "label": "E()",
    "kind": "Method",
    "detail": "Function (DSqr = D | D ;)",
    "insertText": "E(InAxis | D)"
  },
  {
    "label": "CenterToMaxXMinY()",
    "kind": "Method",
    "detail": "Function (const FVector2D)",
    "insertText": "CenterToMaxXMinY((FVector2D(InBox.Max.X, InBox.Min.Y) - InCenter).GetSafeNormal())"
  },
  {
    "label": "CenterToMaxXMaxY()",
    "kind": "Method",
    "detail": "Function (const FVector2D)",
    "insertText": "CenterToMaxXMaxY((FVector2D(InBox.Max.X, InBox.Max.Y) - InCenter).GetSafeNormal())"
  },
  {
    "label": "CenterToMinXMaxY()",
    "kind": "Method",
    "detail": "Function (const FVector2D)",
    "insertText": "CenterToMinXMaxY((FVector2D(InBox.Min.X, InBox.Max.Y) - InCenter).GetSafeNormal())"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal SinAngleMinXMinY =)",
    "insertText": "CrossProduct(InAxis, CenterToMinXMinY)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal SinAngleMaxXMinY =)",
    "insertText": "CrossProduct(InAxis, CenterToMaxXMinY)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal SinAngleMaxXMaxY =)",
    "insertText": "CrossProduct(InAxis, CenterToMaxXMaxY)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal SinAngleMinXMaxY =)",
    "insertText": "CrossProduct(InAxis, CenterToMinXMaxY)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal CosAngleMaxXMinY =)",
    "insertText": "DotProduct(InAxis, CenterToMaxXMinY)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal CosAngleMaxXMaxY =)",
    "insertText": "DotProduct(InAxis, CenterToMaxXMaxY)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal CosAngleMinXMaxY =)",
    "insertText": "DotProduct(InAxis, CenterToMinXMaxY)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal CosAngleMaxXMinY =)",
    "insertText": "DotProduct(InAxis,CenterToMaxXMinY)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal CosAngleMaxXMaxY =)",
    "insertText": "DotProduct(InAxis,CenterToMaxXMaxY)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal CosAngleMinXMaxY =)",
    "insertText": "DotProduct(InAxis,CenterToMinXMaxY)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal InvSinAngleMinXMinY =)",
    "insertText": "CrossProduct(-InAxis, CenterToMinXMinY)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal InvSinAngleMaxXMinY =)",
    "insertText": "CrossProduct(-InAxis, CenterToMaxXMinY)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal InvSinAngleMaxXMaxY =)",
    "insertText": "CrossProduct(-InAxis, CenterToMaxXMaxY)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal InvSinAngleMinXMaxY =)",
    "insertText": "CrossProduct(-InAxis, CenterToMinXMaxY)"
  },
  {
    "label": "GetNumBox()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumBox()"
  },
  {
    "label": "GetBox()",
    "kind": "Method",
    "detail": "Function (const Profile::FBox&)",
    "insertText": "GetBox(uint32 InIndex)"
  },
  {
    "label": "GetBoxes()",
    "kind": "Method",
    "detail": "Function (const Profile::FBox*)",
    "insertText": "GetBoxes(uint32 InIndex, uint32& OutStride)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "TStaticSpatialIndex()",
    "kind": "Method",
    "detail": "Function (} ; template<ValueType,Profile,class SpatialIndexType,class ElementsSorter> class TStaticSpatialIndex : public TStaticSpatialIndexDataInterface<Profile> { using FBox = Profile::FBox ; public :)",
    "insertText": "TStaticSpatialIndex() : SpatialIndex(*this)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const TArray<TPair<FBox, ValueType>>& InElements)"
  },
  {
    "label": "InitSpatialIndex()",
    "kind": "Method",
    "detail": "Function (Elements = InElements ;)",
    "insertText": "InitSpatialIndex()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(TArray<TPair<FBox, ValueType>>&& InElements)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Elements =)",
    "insertText": "MoveTemp(InElements)"
  },
  {
    "label": "ForEachElement()",
    "kind": "Method",
    "detail": "Function (} template<class Func> void)",
    "insertText": "ForEachElement(Func InFunc)"
  },
  {
    "label": "Invoker()",
    "kind": "Method",
    "detail": "Function (TOverrideVoidReturnInvoker)",
    "insertText": "Invoker(true, InFunc)"
  },
  {
    "label": "ForEachElement()",
    "kind": "Method",
    "detail": "Function (SpatialIndex .)",
    "insertText": "ForEachElement([this, &Invoker](uint32 ValueIndex) { return Invoker(Elements[ValueIndex].Value); })"
  },
  {
    "label": "ForEachIntersectingElement()",
    "kind": "Method",
    "detail": "Function (} template<class Func> void)",
    "insertText": "ForEachIntersectingElement(const FBox& InBox, Func InFunc)"
  },
  {
    "label": "ForEachIntersectingElement()",
    "kind": "Method",
    "detail": "Function (SpatialIndex .)",
    "insertText": "ForEachIntersectingElement(InBox, [this, &Invoker](uint32 ValueIndex) { return Invoker(Elements[ValueIndex].Value); })"
  },
  {
    "label": "ForEachIntersectingElement()",
    "kind": "Method",
    "detail": "Function (} template<class Func> void)",
    "insertText": "ForEachIntersectingElement(const FStaticSpatialIndex::FSphere& InSphere, Func InFunc)"
  },
  {
    "label": "ForEachIntersectingElement()",
    "kind": "Method",
    "detail": "Function (SpatialIndex .)",
    "insertText": "ForEachIntersectingElement(InSphere, [this, &Invoker](uint32 ValueIndex) { return Invoker(Elements[ValueIndex].Value); })"
  },
  {
    "label": "ForEachIntersectingElement()",
    "kind": "Method",
    "detail": "Function (} template<class Func> void)",
    "insertText": "ForEachIntersectingElement(const FStaticSpatialIndex::FCone& InCone, Func InFunc)"
  },
  {
    "label": "ForEachIntersectingElement()",
    "kind": "Method",
    "detail": "Function (SpatialIndex .)",
    "insertText": "ForEachIntersectingElement(InCone, [this, &Invoker](uint32 ValueIndex) { return Invoker(Elements[ValueIndex].Value); })"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObject(Element.Value)"
  },
  {
    "label": "GetTypeSize()",
    "kind": "Method",
    "detail": "Function (OutStride = Elements .)",
    "insertText": "GetTypeSize()"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (FBox ElementsBox ;)",
    "insertText": "ForEach(Elements, [&ElementsBox](const TPair<FBox, ValueType>& Element) { ElementsBox += Element.Key; })"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (ElementsSorter Sorter ; Sorter .)",
    "insertText": "Init(ElementsBox)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Sort([&Sorter](const TPair<FBox, ValueType>& A, const TPair<FBox, ValueType>B) { return Sorter.Sort(A.Key, B.Key); })"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} SpatialIndex .)",
    "insertText": "Init()"
  },
  {
    "label": "TImpl()",
    "kind": "Method",
    "detail": "Function (} TArray<TPair<FBox,ValueType>> Elements ; SpatialIndexType SpatialIndex ; } ; namespace FStaticSpatialIndex { template<Profile> class TImpl { public :)",
    "insertText": "TImpl(const TStaticSpatialIndexDataInterface<Profile>& InDataInterface) : DataInterface(InDataInterface)"
  },
  {
    "label": "TListImpl()",
    "kind": "Method",
    "detail": "Function (} protected : const TStaticSpatialIndexDataInterface<Profile>& DataInterface ; } ; template<Profile> class TListImpl : public TImpl<Profile> { using FVector = Profile::FVector ; using FBox = Profile::FBox ; public :)",
    "insertText": "TListImpl(const TStaticSpatialIndexDataInterface<Profile>& InDataInterface) : TImpl<Profile>(InDataInterface)"
  },
  {
    "label": "ForEachElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ForEachElement(TFunctionRef<bool(uint32 InValueIndex)> InFunc)"
  },
  {
    "label": "GetBoxes()",
    "kind": "Method",
    "detail": "Function (uint32 BoxStride ; const FBox* Box = this -> DataInterface .)",
    "insertText": "GetBoxes(0, BoxStride)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal RadiusSquared =)",
    "insertText": "Square(InSphere.Radius)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal RadiusSquared =)",
    "insertText": "Square(InCone.Radius)"
  },
  {
    "label": "Sin()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal HalfSinAngle =)",
    "insertText": "Sin(InCone.Angle * 0.5 * UE_PI / 180.0)"
  },
  {
    "label": "Cos()",
    "kind": "Method",
    "detail": "Function (const Profile::FReal HalfCosAngle =)",
    "insertText": "Cos(InCone.Angle * 0.5 * UE_PI / 180.0)"
  },
  {
    "label": "TRTreeImpl()",
    "kind": "Method",
    "detail": "Function (} } ; template<Profile,int32 MaxNumElementsPerNode = 1 6,int32 MaxNumElementsPerLeaf = 6 4> class TRTreeImpl : public TImpl<Profile> { using FVector = Profile::FVector ; using FBox = Profile::FBox ; public :)",
    "insertText": "TRTreeImpl(const TStaticSpatialIndexDataInterface<Profile>& InDataInterface) : TImpl<Profile>(InDataInterface)"
  },
  {
    "label": "CurrentNodeBox()",
    "kind": "Method",
    "detail": "Function (FNode* CurrentNode = nullptr ; FBox)",
    "insertText": "CurrentNodeBox(ForceInit)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<FNode> Nodes ;)",
    "insertText": "for(int32 ElementIndex = 0; ElementIndex < this->DataInterface.GetNumBox(); ElementIndex++)"
  },
  {
    "label": "GetBox()",
    "kind": "Method",
    "detail": "Function (const FBox& Element = this -> DataInterface .)",
    "insertText": "GetBox(ElementIndex)"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (} CurrentNode =& Nodes .)",
    "insertText": "Emplace_GetRef()"
  },
  {
    "label": "FLeafType()",
    "kind": "Method",
    "detail": "Function (CurrentNode -> Content . template Emplace<)",
    "insertText": "FLeafType()"
  },
  {
    "label": "FLeafType()",
    "kind": "Method",
    "detail": "Function (} CurrentNodeBox + = Element ; CurrentNode -> Content . template Get<)",
    "insertText": "FLeafType().Add(ElementIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(CurrentNode)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (CurrentNode = nullptr ; TArray<FNode> TopNodes ;)",
    "insertText": "for(FNode& Node : Nodes)"
  },
  {
    "label": "FNodeType()",
    "kind": "Method",
    "detail": "Function (CurrentNode -> BoxMin = CurrentNodeBox . Min ; CurrentNode -> BoxMax = CurrentNodeBox . Max ; CurrentNode -> Content . template Get<)",
    "insertText": "FNodeType().Shrink()"
  },
  {
    "label": "FNodeType()",
    "kind": "Method",
    "detail": "Function (CurrentNode -> Content . template Emplace<)",
    "insertText": "FNodeType()"
  },
  {
    "label": "GetBox()",
    "kind": "Method",
    "detail": "Function (} CurrentNodeBox + = Node .)",
    "insertText": "GetBox()"
  },
  {
    "label": "FNodeType()",
    "kind": "Method",
    "detail": "Function (CurrentNode -> Content . template Get<)",
    "insertText": "FNodeType().Add(MoveTemp(Node))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Nodes =)",
    "insertText": "MoveTemp(TopNodes)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(Nodes.Num() == 1)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (RootNode =)",
    "insertText": "MoveTemp(Nodes[0])"
  },
  {
    "label": "ForEachIntersectingElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ForEachIntersectingElement(const FBox& InBox, TFunctionRef<bool(uint32 InValueIndex)> InFunc)"
  },
  {
    "label": "ForEachIntersectingElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ForEachIntersectingElement(const FStaticSpatialIndex::FSphere& InSphere, TFunctionRef<bool(uint32 InValueIndex)> InFunc)"
  },
  {
    "label": "ForEachIntersectingElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ForEachIntersectingElement(const FStaticSpatialIndex::FCone& InCone, TFunctionRef<bool(uint32 InValueIndex)> InFunc)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "uint32(const FNode*, uint32)> GetAllocatedSizeRecursive = [this, &GetAllocatedSizeRecursive](const FNode* Node, uint32 BaseSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 AllocatedSize = BaseSize ;)",
    "insertText": "if(Node->Content.template IsType<typename FNode::FNodeType>())"
  },
  {
    "label": "FNodeType()",
    "kind": "Method",
    "detail": "Function (AllocatedSize + = Node -> Content . template Get<)",
    "insertText": "FNodeType().GetAllocatedSize()"
  },
  {
    "label": "GetAllocatedSizeRecursive()",
    "kind": "Method",
    "detail": "Function (AllocatedSize + =)",
    "insertText": "GetAllocatedSizeRecursive(&ChildNode, sizeof(FNode))"
  },
  {
    "label": "FLeafType()",
    "kind": "Method",
    "detail": "Function (} } else { AllocatedSize + = Node -> Content . template Get<)",
    "insertText": "FLeafType().GetAllocatedSize()"
  },
  {
    "label": "GetAllocatedSizeRecursive()",
    "kind": "Method",
    "detail": "Function (} return AllocatedSize ; } ; return)",
    "insertText": "GetAllocatedSizeRecursive(&RootNode, sizeof(*this))"
  },
  {
    "label": "FLeafType()",
    "kind": "Method",
    "detail": "Function (} protected : struct FNode { using FNodeType = TArray<FNode> ; struct FLeafType { uint32 StartIndex ; uint32 NumElements ;)",
    "insertText": "FLeafType() : StartIndex(0) , NumElements(0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(uint32 InIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (StartIndex = InIndex ; })",
    "insertText": "check((StartIndex + NumElements) == InIndex)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (NumElements + + ; } uint32)",
    "insertText": "Num()"
  },
  {
    "label": "TIterator()",
    "kind": "Method",
    "detail": "Function (} struct TIterator {)",
    "insertText": "TIterator(uint32 InValue) : Value(InValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "operator()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} TIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TIterator)",
    "insertText": "end()"
  },
  {
    "label": "ForEachElementRecursive()",
    "kind": "Method",
    "detail": "Function (} FVectorType BoxMin ; FVectorType BoxMax ; TVariant<FNodeType,FLeafType> Content ; } ; bool)",
    "insertText": "ForEachElementRecursive(const FNode* InNode, TFunctionRef<bool(uint32 InValueIndex)> InFunc)"
  },
  {
    "label": "ForEachIntersectingElementRecursive()",
    "kind": "Method",
    "detail": "Function (} } return true ; } bool)",
    "insertText": "ForEachIntersectingElementRecursive(const FNode* InNode, const FVector& InSphereCenter, typename Profile::FReal InRadiusSquared, TFunctionRef<bool(uint32 InValueIndex)> InFunc)"
  },
  {
    "label": "ForEachIntersectingElementRecursive()",
    "kind": "Method",
    "detail": "Function (} } return true ; } bool)",
    "insertText": "ForEachIntersectingElementRecursive(const FNode* InNode, const FVector& InConeCenter, typename Profile::FReal InRadiusSquared, const FVector& InAxis, float InAngle, float InSinHalfAngle, float InCosHalfAngle, TFunctionRef<bool(uint32 InValueIndex)> InFunc)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} } return true ; } FNode RootNode ; } ; template<Profile> class TNodeSorterNoSort { public : enum { NeedSort = 0 } ; using FBox = Profile::FBox ; void)",
    "insertText": "Init(const FBox& SortBox)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Sort(const FBox& A, const FBox& B)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (FIntPoint CellPosA ; CellPosA . X =)",
    "insertText": "int32(A.GetCenter().X / (FReal)BucketSize)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (CellPosA . Y =)",
    "insertText": "int32(A.GetCenter().Y / (FReal)BucketSize)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (CellPosA . Z =)",
    "insertText": "int32(A.GetCenter().Z / (FReal)BucketSize)"
  },
  {
    "label": "MortonEncode()",
    "kind": "Method",
    "detail": "Function (} const uint32 MortonCodeA =)",
    "insertText": "MortonEncode(CellPosA)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (FIntPoint CellPosB ; CellPosB . X =)",
    "insertText": "int32(B.GetCenter().X / (FReal)BucketSize)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (CellPosB . Y =)",
    "insertText": "int32(B.GetCenter().Y / (FReal)BucketSize)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (CellPosB . Z =)",
    "insertText": "int32(B.GetCenter().Z / (FReal)BucketSize)"
  },
  {
    "label": "MortonEncode()",
    "kind": "Method",
    "detail": "Function (} const uint32 MortonCodeB =)",
    "insertText": "MortonEncode(CellPosB)"
  },
  {
    "label": "MortonCode2()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "MortonCode2(Point.X) | (FMath::MortonCode2(Point.Y) << 1)"
  },
  {
    "label": "GetExtent()",
    "kind": "Method",
    "detail": "Function (const FReal MaxExtent = SortBox .)",
    "insertText": "GetExtent().GetMax()"
  },
  {
    "label": "CeilToInt32()",
    "kind": "Method",
    "detail": "Function (const uint32 NumBuckets =)",
    "insertText": "CeilToInt32(MaxExtent / (FReal)BucketSize)"
  },
  {
    "label": "CeilLogTwo()",
    "kind": "Method",
    "detail": "Function (HilbertOrder = 1 +)",
    "insertText": "CeilLogTwo(NumBuckets)"
  },
  {
    "label": "HilbertEncode()",
    "kind": "Method",
    "detail": "Function (const int32 HilbertCodeA =)",
    "insertText": "HilbertEncode({ int32(A.GetCenter().X / (FReal)BucketSize), int32(A.GetCenter().Y / (FReal)BucketSize) }, HilbertOrder)"
  },
  {
    "label": "HilbertEncode()",
    "kind": "Method",
    "detail": "Function (const int32 HilbertCodeB =)",
    "insertText": "HilbertEncode({ int32(B.GetCenter().X / (FReal)BucketSize), int32(B.GetCenter().Y / (FReal)BucketSize) }, HilbertOrder)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 Result = 0 ; uint32 State = 0 ;)",
    "insertText": "for(int32 i = Order - 1; i >= 0; i--)"
  },
  {
    "label": "State()",
    "kind": "Method",
    "detail": "Function (uint32 Row = 4*)",
    "insertText": "State((Point.X >> i) & 1) | ((Point.Y >> i) & 1)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Result(Result << 2) | ((0x361e9cb4 >> 2 * Row) & 3)"
  },
  {
    "label": "State()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "State(0x8fe65831 >> 2 * Row)"
  }
]