[
  {
    "label": "TIsArrayOrRefOfType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsArrayOrRefOfType"
  },
  {
    "label": "ArrType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" template<T,ArrType> struct TIsArrayOrRefOfType { enum { Value = false } ; } ; template<ArrType> struct TIsArrayOrRefOfType<ArrType [ ],ArrType> { enum { Value = true } ; } ; template<ArrType> struct TIsArrayOrRefOfType<const ArrType [ ],ArrType> { enum { Value = true } ; } ; template<ArrType> struct TIsArrayOrRefOfType<volatile ArrType [ ],ArrType> { enum { Value = true } ; } ; template<ArrType> struct TIsArrayOrRefOfType<const volatile ArrType [ ],ArrType> { enum { Value = true } ; } ; template<ArrType,unsigned int N> struct TIsArrayOrRefOfType<ArrType [ N ],ArrType> { enum { Value = true } ; } ; template<ArrType,unsigned int N> struct TIsArrayOrRefOfType<const ArrType [ N ],ArrType> { enum { Value = true } ; } ; template<ArrType,unsigned int N> struct TIsArrayOrRefOfType<volatile ArrType [ N ],ArrType> { enum { Value = true } ; } ; template<ArrType,unsigned int N> struct TIsArrayOrRefOfType<const volatile ArrType [ N ],ArrType> { enum { Value = true } ; } ; template<ArrType,unsigned int N> struct TIsArrayOrRefOfType<)",
    "insertText": "ArrType(&)"
  }
]