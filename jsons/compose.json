[
  {
    "label": "__compose_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__compose_op"
  },
  {
    "label": "_Fn1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Fn1"
  },
  {
    "label": "_Fn2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Fn2"
  },
  {
    "label": "__compose_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__compose_t"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FUNCTIONAL_COMPOSE_H # define _LIBCPP___FUNCTIONAL_COMPOSE_H # include<__config> # include<__functional / invoke . h> # include<__functional / perfect_forward . h> # include<__utility / forward . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _Fn1,class _Fn2,class . . . _Args> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Fn1&& __f1, _Fn2&& __f2, _Args&&... __args) const noexcept(noexcept(_VSTD::invoke(_VSTD::forward<_Fn1>(__f1), _VSTD::invoke(_VSTD::forward<_Fn2>(__f2), _VSTD::forward<_Args>(__args)...)))) -> decltype( _VSTD::invoke(_VSTD::forward<_Fn1>(__f1), _VSTD::invoke(_VSTD::forward<_Fn2>(__f2), _VSTD::forward<_Args>(__args)...)))"
  },
  {
    "label": "__compose()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _Fn1,class _Fn2> struct __compose_t : __perfect_forward<__compose_op,_Fn1,_Fn2> { using __perfect_forward<__compose_op,_Fn1,_Fn2>::__perfect_forward ; } ; template<class _Fn1,class _Fn2> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__compose(_Fn1&& __f1, _Fn2&& __f2) noexcept(noexcept(__compose_t<decay_t<_Fn1>, decay_t<_Fn2>>(_VSTD::forward<_Fn1>(__f1), _VSTD::forward<_Fn2>(__f2)))) -> decltype( __compose_t<decay_t<_Fn1>, decay_t<_Fn2>>(_VSTD::forward<_Fn1>(__f1), _VSTD::forward<_Fn2>(__f2)))"
  }
]