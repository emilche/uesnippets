[
  {
    "label": "TDynamicVerticesOctree3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicVerticesOctree3"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Spatial / MeshAABBTree3 . h \" # include \" Spatial / SparseDynamicPointOctree3 . h \" # include \" MeshQueries . h \" # include \" Intersection / IntersectionUtil . h \" # include \" DynamicMesh / DynamicMesh3 . h \" namespace UE { namespace Geometry { template<SourceType> class TDynamicVerticesOctree3 : public FSparseDynamicPointOctree3 { public : const SourceType* VertexSource ; FAxisAlignedBox3d ModifiedBounds ; double HitSphereRadius = 1 . 0 f ; void)",
    "insertText": "Initialize(const SourceType* VertexSourceIn, bool bDynamicExpand)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (this -> VertexSource = VertexSourceIn ; HitSphereRadius = VertexSourceIn ->)",
    "insertText": "GetBounds().Diagonal().Length()"
  },
  {
    "label": "MaxVertexID()",
    "kind": "Method",
    "detail": "Function (int MaxVertexID = VertexSource ->)",
    "insertText": "MaxVertexID()"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (ModifiedBounds .)",
    "insertText": "Contain(VertexSource->GetVertex(VertexID))"
  },
  {
    "label": "InsertPoint_DynamicExpand()",
    "kind": "Method",
    "detail": "Function (const SourceType* VtxSource = VertexSource ;)",
    "insertText": "InsertPoint_DynamicExpand(VertexID, [VtxSource](int k) { return VtxSource->GetVertex(k); })"
  },
  {
    "label": "InsertVertex()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "InsertVertex(VertexID)"
  },
  {
    "label": "ResetModifiedBounds()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "ResetModifiedBounds()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ModifiedBounds =)",
    "insertText": "Empty()"
  },
  {
    "label": "InsertVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertVertex(int32 VertexID)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (FVector3d Point = VertexSource ->)",
    "insertText": "GetVertex(VertexID)"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (ModifiedBounds .)",
    "insertText": "Contain(Point)"
  },
  {
    "label": "InsertPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertPoint(VertexID, Point)"
  },
  {
    "label": "InsertVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertVertices(const TArray<int>& Vertices)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int N = Vertices .)",
    "insertText": "Num()"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (FVector3d Point = VertexSource ->)",
    "insertText": "GetVertex(Vertices[i])"
  },
  {
    "label": "InsertPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertPoint(Vertices[i], Point)"
  },
  {
    "label": "InsertVertices()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InsertVertices(const TSet<int>& Vertices)"
  },
  {
    "label": "RemovePoint()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "RemovePoint(int32 VertexID)"
  },
  {
    "label": "RemoveVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveVertices(const TArray<int>& Vertices)"
  },
  {
    "label": "RemovePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePoint(Vertices[i])"
  },
  {
    "label": "RemoveVertices()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveVertices(const TSet<int>& Vertices)"
  },
  {
    "label": "RemovePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePoint(VertexID)"
  },
  {
    "label": "ReinsertVertices()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReinsertVertices(const TSet<int>& Vertices)"
  },
  {
    "label": "ReinsertPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReinsertPoint(VertexID, Point)"
  },
  {
    "label": "NotifyPendingModification()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "NotifyPendingModification(int VertexID)"
  },
  {
    "label": "NotifyPendingModification()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyPendingModification(const TSet<int>& Vertices)"
  },
  {
    "label": "FindNearestHitVertex()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "FindNearestHitVertex(const FRay3d& Ray, double MaxDistance = TNumericLimits<double>::Max())"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckValidity(EValidityCheckFailMode FailMode = EValidityCheckFailMode::Check, bool bVerbose = false, bool bFailOnMissingPoints = false)"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckValidity([&](int vid) { return VertexSource->IsVertex(vid); }, [this](int vid) { return VertexSource->GetVertex(vid); }, FailMode, bVerbose, bFailOnMissingPoints)"
  }
]