[
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "MCSubtargetInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSubtargetInfo"
  },
  {
    "label": "MCSubtargetInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCSUBTARGETINFO_H # define LLVM_MC_MCSUBTARGETINFO_H # include \" llvm / MC / MCInstrItineraries . h \" # include \" llvm / MC / SubtargetFeature . h \" # include<string> namespace llvm { class StringRef ; class MCSubtargetInfo { Triple TargetTriple ; std::string CPU ; ArrayRef<SubtargetFeatureKV> ProcFeatures ; ArrayRef<SubtargetFeatureKV> ProcDesc ; const SubtargetInfoKV* ProcSchedModels ; const MCWriteProcResEntry* WriteProcResTable ; const MCWriteLatencyEntry* WriteLatencyTable ; const MCReadAdvanceEntry* ReadAdvanceTable ; const MCSchedModel* CPUSchedModel ; const InstrStage* Stages ; const unsigned* OperandCycles ; const unsigned* ForwardingPaths ; FeatureBitset FeatureBits ;)",
    "insertText": "MCSubtargetInfo()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MCSubtargetInfo&)",
    "insertText": "operator(MCSubtargetInfo &&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MCSubtargetInfo&)",
    "insertText": "operator(const MCSubtargetInfo &)"
  },
  {
    "label": "MCSubtargetInfo()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "MCSubtargetInfo(const MCSubtargetInfo &)"
  },
  {
    "label": "MCSubtargetInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MCSubtargetInfo(const Triple &TT, StringRef CPU, StringRef FS, ArrayRef<SubtargetFeatureKV> PF, ArrayRef<SubtargetFeatureKV> PD, const SubtargetInfoKV *ProcSched, const MCWriteProcResEntry *WPR, const MCWriteLatencyEntry *WL, const MCReadAdvanceEntry *RA, const InstrStage *IS, const unsigned *OC, const unsigned *FP)"
  },
  {
    "label": "getTargetTriple()",
    "kind": "Method",
    "detail": "Function (const Triple&)",
    "insertText": "getTargetTriple()"
  },
  {
    "label": "InitMCProcessorInfo()",
    "kind": "Method",
    "detail": "Function (FeatureBits = FeatureBits_ ; } protected : void)",
    "insertText": "InitMCProcessorInfo(StringRef CPU, StringRef FS)"
  },
  {
    "label": "setDefaultFeatures()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "setDefaultFeatures(StringRef CPU)"
  },
  {
    "label": "ToggleFeature()",
    "kind": "Method",
    "detail": "Function (FeatureBitset)",
    "insertText": "ToggleFeature(uint64_t FB)"
  },
  {
    "label": "ToggleFeature()",
    "kind": "Method",
    "detail": "Function (FeatureBitset)",
    "insertText": "ToggleFeature(const FeatureBitset& FB)"
  },
  {
    "label": "ToggleFeature()",
    "kind": "Method",
    "detail": "Function (FeatureBitset)",
    "insertText": "ToggleFeature(StringRef FS)"
  },
  {
    "label": "ApplyFeatureFlag()",
    "kind": "Method",
    "detail": "Function (FeatureBitset)",
    "insertText": "ApplyFeatureFlag(StringRef FS)"
  },
  {
    "label": "getSchedModelForCPU()",
    "kind": "Method",
    "detail": "Function (const MCSchedModel&)",
    "insertText": "getSchedModelForCPU(StringRef CPU)"
  },
  {
    "label": "getSchedModel()",
    "kind": "Method",
    "detail": "Function (const MCSchedModel&)",
    "insertText": "getSchedModel()"
  },
  {
    "label": "getWriteLatencyEntry()",
    "kind": "Method",
    "detail": "Function (} const MCWriteLatencyEntry*)",
    "insertText": "getWriteLatencyEntry(const MCSchedClassDesc *SC, unsigned DefIdx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(DefIdx < SC->NumWriteLatencyEntries && \"MachineModel does not specify a WriteResource for DefIdx\")"
  },
  {
    "label": "initInstrItins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initInstrItins(InstrItineraryData &InstrItins)"
  },
  {
    "label": "isCPUStringValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isCPUStringValid(StringRef CPU)"
  },
  {
    "label": "find_if()",
    "kind": "Method",
    "detail": "Function (auto Found =)",
    "insertText": "find_if(ProcDesc.begin(), ProcDesc.end(), [=](const SubtargetFeatureKV &KV) { return CPU == KV.Key; })"
  }
]