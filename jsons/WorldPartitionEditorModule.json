[
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "FLayoutExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLayoutExtender"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "FSpawnTabArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpawnTabArgs"
  },
  {
    "label": "SContentBundleBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SContentBundleBrowser"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FWorldPartitionEditorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionEditorModule"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "CreateWorldPartitionEditor()",
    "kind": "Method",
    "detail": "Function (SWidget>)",
    "insertText": "CreateWorldPartitionEditor()"
  },
  {
    "label": "CreateContentBundleBrowser()",
    "kind": "Method",
    "detail": "Function (SWidget>)",
    "insertText": "CreateContentBundleBrowser()"
  },
  {
    "label": "GetActiveLevelViewportCameraInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetActiveLevelViewportCameraInfo(FVector& CameraLocation, FRotator& CameraRotation)"
  },
  {
    "label": "RegisterMenus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMenus()"
  },
  {
    "label": "RegisterWorldPartitionTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWorldPartitionTabs(TSharedPtr<FTabManager> InTabManager)"
  },
  {
    "label": "RegisterWorldPartitionLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWorldPartitionLayout(FLayoutExtender& Extender)"
  },
  {
    "label": "SpawnWorldPartitionTab()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnWorldPartitionTab(const FSpawnTabArgs& Args)"
  },
  {
    "label": "SpawnContentBundleTab()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnContentBundleTab(const FSpawnTabArgs& Args)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Build(const FRunBuilderParams& InParams)"
  },
  {
    "label": "BuildMinimap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildMinimap(const FRunBuilderParams& InParams)"
  },
  {
    "label": "BuildHLODs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildHLODs(const FRunBuilderParams& InParams)"
  },
  {
    "label": "BuildLandscapeSplineMeshes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildLandscapeSplineMeshes(UWorld* InWorld)"
  },
  {
    "label": "RunCommandletAsExternalProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunCommandletAsExternalProcess(const FString& InCommandletArgs, const FText& InOperationDescription, int32& OutResult, bool& bOutCancelled)"
  },
  {
    "label": "OnConvertMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConvertMap()"
  },
  {
    "label": "OnIsCrossPluginReferenceAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnIsCrossPluginReferenceAllowed(const FAssetData& ReferencingAssetData, const FAssetData& ReferencedAssetData)"
  }
]