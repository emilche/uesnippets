[
  {
    "label": "pitch_downsample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pitch_downsample(celt_sig * OPUS_RESTRICT x[], opus_val16 * OPUS_RESTRICT x_lp,\n      int len, int C, int arch)"
  },
  {
    "label": "pitch_search()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pitch_search(const opus_val16 * OPUS_RESTRICT x_lp, opus_val16 * OPUS_RESTRICT y,\n                  int len, int max_pitch, int *pitch, int arch)"
  },
  {
    "label": "remove_doubling()",
    "kind": "Method",
    "detail": "Function (opus_val16)",
    "insertText": "remove_doubling(opus_val16 *x, int maxperiod, int minperiod,\n      int N, int *T0, int prev_period, opus_val16 prev_gain, int arch)"
  },
  {
    "label": "comb_filter_const_c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "comb_filter_const_c(opus_val32 *y, opus_val32 *x, int T, int N,\n     opus_val16 g10, opus_val16 g11, opus_val16 g12)"
  },
  {
    "label": "celt_pitch_xcorr_c()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "celt_pitch_xcorr_c(const opus_val16 *_x, const opus_val16 *_y,\n      opus_val32 *xcorr, int len, int max_pitch, int arch)"
  }
]