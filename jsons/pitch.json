[
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef PITCH_H # define PITCH_H # include \" modes . h \" # include \" cpu_support . h \" #)",
    "insertText": "if(defined(OPUS_X86_MAY_HAVE_SSE) && !defined(FIXED_POINT)) \\ || ((defined(OPUS_X86_MAY_HAVE_SSE4_1) || defined(OPUS_X86_MAY_HAVE_SSE2)) && defined(FIXED_POINT)) #include \"x86/pitch_sse.h\" #endif #if defined(MIPSr1_ASM) #include \"mips/pitch_mipsr1.h\" #endif #if (defined(OPUS_ARM_ASM) || defined(OPUS_ARM_MAY_HAVE_NEON_INTR)) # include \"arm/pitch_arm.h\" #endif void pitch_downsample(celt_sig * OPUS_RESTRICT x[], opus_val16 * OPUS_RESTRICT x_lp, int len, int C, int arch)"
  },
  {
    "label": "pitch_search()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pitch_search(const opus_val16 * OPUS_RESTRICT x_lp, opus_val16 * OPUS_RESTRICT y, int len, int max_pitch, int *pitch, int arch)"
  },
  {
    "label": "remove_doubling()",
    "kind": "Method",
    "detail": "Function (opus_val16)",
    "insertText": "remove_doubling(opus_val16 *x, int maxperiod, int minperiod, int N, int *T0, int prev_period, opus_val16 prev_gain, int arch)"
  },
  {
    "label": "xcorr_kernel_c()",
    "kind": "Method",
    "detail": "Function (OPUS_INLINE void)",
    "insertText": "xcorr_kernel_c(const opus_val16 * x, const opus_val16 * y, opus_val32 sum[4], int len)"
  },
  {
    "label": "celt_assert()",
    "kind": "Method",
    "detail": "Function (int j ; opus_val16 y_0,y_1,y_2,y_3 ;)",
    "insertText": "celt_assert(len>=3)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (y_3 = 0 ; y_0 =* y + + ; y_1 =* y + + ; y_2 =* y + + ;)",
    "insertText": "for(j=0;j<len-3;j+=4)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (opus_val16 tmp ; tmp =* x + + ; y_3 =* y + + ; sum [ 0 ] =)",
    "insertText": "MAC16_16(sum[0],tmp,y_0)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (sum [ 1 ] =)",
    "insertText": "MAC16_16(sum[1],tmp,y_1)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (sum [ 2 ] =)",
    "insertText": "MAC16_16(sum[2],tmp,y_2)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (sum [ 3 ] =)",
    "insertText": "MAC16_16(sum[3],tmp,y_3)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (tmp =* x + + ; y_0 =* y + + ; sum [ 0 ] =)",
    "insertText": "MAC16_16(sum[0],tmp,y_1)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (sum [ 1 ] =)",
    "insertText": "MAC16_16(sum[1],tmp,y_2)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (sum [ 2 ] =)",
    "insertText": "MAC16_16(sum[2],tmp,y_3)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (sum [ 3 ] =)",
    "insertText": "MAC16_16(sum[3],tmp,y_0)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (tmp =* x + + ; y_1 =* y + + ; sum [ 0 ] =)",
    "insertText": "MAC16_16(sum[0],tmp,y_2)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (sum [ 1 ] =)",
    "insertText": "MAC16_16(sum[1],tmp,y_3)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (sum [ 2 ] =)",
    "insertText": "MAC16_16(sum[2],tmp,y_0)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (sum [ 3 ] =)",
    "insertText": "MAC16_16(sum[3],tmp,y_1)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (tmp =* x + + ; y_2 =* y + + ; sum [ 0 ] =)",
    "insertText": "MAC16_16(sum[0],tmp,y_3)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (sum [ 1 ] =)",
    "insertText": "MAC16_16(sum[1],tmp,y_0)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (sum [ 2 ] =)",
    "insertText": "MAC16_16(sum[2],tmp,y_1)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (sum [ 3 ] =)",
    "insertText": "MAC16_16(sum[3],tmp,y_2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(j++<len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(j<len)"
  },
  {
    "label": "xcorr_kernel()",
    "kind": "Method",
    "detail": "Function (} } # ifndef OVERRIDE_XCORR_KERNEL # define)",
    "insertText": "xcorr_kernel(x, y, sum, len, arch) \\ ((void)(arch),xcorr_kernel_c(x, y, sum, len)) #endif static OPUS_INLINE void dual_inner_prod_c(const opus_val16 *x, const opus_val16 *y01, const opus_val16 *y02, int N, opus_val32 *xy1, opus_val32 *xy2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ; opus_val32 xy01 = 0 ; opus_val32 xy02 = 0 ;)",
    "insertText": "for(i=0;i<N;i++)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (xy01 =)",
    "insertText": "MAC16_16(xy01, x[i], y01[i])"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (xy02 =)",
    "insertText": "MAC16_16(xy02, x[i], y02[i])"
  },
  {
    "label": "dual_inner_prod()",
    "kind": "Method",
    "detail": "Function (}* xy1 = xy01 ;* xy2 = xy02 ; } # ifndef OVERRIDE_DUAL_INNER_PROD # define)",
    "insertText": "dual_inner_prod(x, y01, y02, N, xy1, xy2, arch) \\ ((void)(arch),dual_inner_prod_c(x, y01, y02, N, xy1, xy2)) #endif static OPUS_INLINE opus_val32 celt_inner_prod_c(const opus_val16 *x, const opus_val16 *y, int N)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ; opus_val32 xy = 0 ;)",
    "insertText": "for(i=0;i<N;i++) xy = MAC16_16(xy, x[i], y[i])"
  },
  {
    "label": "celt_pitch_xcorr_c()",
    "kind": "Method",
    "detail": "Function (# endif # ifdef FIXED_POINT opus_val32 # else void # endif)",
    "insertText": "celt_pitch_xcorr_c(const opus_val16 *_x, const opus_val16 *_y, opus_val32 *xcorr, int len, int max_pitch, int arch)"
  }
]