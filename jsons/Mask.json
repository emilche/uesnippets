[
  {
    "label": "Traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Traits"
  },
  {
    "label": "interiorMask()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_MASK_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_MASK_HAS_BEEN_INCLUDED # include<openvdb / Grid . h> # include \" LevelSetUtil . h \" # include<type_traits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<GridType> GridType::template ValueConverter<bool>::Type::Ptr)",
    "insertText": "interiorMask(const GridType& grid, const double isovalue = 0.0)"
  },
  {
    "label": "doLevelSetInteriorMask()",
    "kind": "Method",
    "detail": "Function (namespace mask_internal { template<GridType> struct Traits { const bool isBool = std::is_same<GridType::ValueType,bool>::value ; using BoolGridType = GridType::template ValueConverter<bool>::Type ; using BoolGridPtrType = BoolGridType::Ptr ; } ; template<GridType> std::enable_if<std::is_floating_point<GridType::ValueType>::value,mask_internal::Traits<GridType>::BoolGridPtrType>::type)",
    "insertText": "doLevelSetInteriorMask(const GridType& grid, const double isovalue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using GridValueT = GridType::ValueType ; using MaskGridPtrT = mask_internal::Traits<GridType>::BoolGridPtrType ;)",
    "insertText": "if(grid.getGridClass() == GRID_LEVEL_SET)"
  },
  {
    "label": "doLevelSetInteriorMask()",
    "kind": "Method",
    "detail": "Function (} return MaskGridPtrT { } ; } template<GridType> std::enable_if<! std::is_floating_point<GridType::ValueType>::value,mask_internal::Traits<GridType>::BoolGridPtrType>::type)",
    "insertText": "doLevelSetInteriorMask(const GridType&, const double)"
  },
  {
    "label": "doInteriorMask()",
    "kind": "Method",
    "detail": "Function (using MaskGridPtrT = mask_internal::Traits<GridType>::BoolGridPtrType ; return MaskGridPtrT { } ; } template<GridType> std::enable_if<mask_internal::Traits<GridType>::isBool,mask_internal::Traits<GridType>::BoolGridPtrType>::type)",
    "insertText": "doInteriorMask(const GridType& grid, const double)"
  },
  {
    "label": "enable_if()",
    "kind": "Method",
    "detail": "Function (} template<GridType>)",
    "insertText": "enable_if(mask_internal::Traits<GridType>::isBool), typename mask_internal::Traits<GridType>::BoolGridPtrType>::type doInteriorMask(const GridType& grid, const double isovalue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using MaskGridT = mask_internal::Traits<GridType>::BoolGridType ;)",
    "insertText": "if(auto maskGridPtr = doLevelSetInteriorMask(grid, isovalue))"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (maskGridPtr ->)",
    "insertText": "setTransform(grid.transform().copy())"
  },
  {
    "label": "topologyUnion()",
    "kind": "Method",
    "detail": "Function (maskGridPtr ->)",
    "insertText": "topologyUnion(grid)"
  }
]