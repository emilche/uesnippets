[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "JitterEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JitterEstimator"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "ParseAndValidate()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_TIMING_JITTER_ESTIMATOR_H_ # define MODULES_VIDEO_CODING_TIMING_JITTER_ESTIMATOR_H_ # include<algorithm> # include<memory> # include<queue> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / units / data_size . h \" # include \" api / units / frequency . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" modules / video_coding / timing / frame_delay_variation_kalman_filter . h \" # include \" modules / video_coding / timing / rtt_filter . h \" # include \" rtc_base / experiments / struct_parameters_parser . h \" # include \" rtc_base / numerics / moving_percentile_filter . h \" # include \" rtc_base / rolling_accumulator . h \" namespace webrtc { class Clock ; class JitterEstimator { public : struct Config { char kFieldTrialsKey [ ] = \" WebRTC - JitterEstimatorConfig \" ; Config)",
    "insertText": "ParseAndValidate(absl::string_view field_trial)"
  },
  {
    "label": "Parser()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<StructParametersParser>)",
    "insertText": "Parser()"
  },
  {
    "label": "MaxFrameSizePercentileEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MaxFrameSizePercentileEnabled()"
  },
  {
    "label": "JitterEstimator()",
    "kind": "Method",
    "detail": "Function (} bool avg_frame_size_median = false ; absl::optional<double> max_frame_size_percentile = absl::nullopt ; absl::optional<int> frame_size_window = absl::nullopt ; absl::optional<double> num_stddev_delay_clamp = absl::nullopt ; absl::optional<double> num_stddev_delay_outlier = absl::nullopt ; absl::optional<double> num_stddev_size_outlier = absl::nullopt ; absl::optional<double> congestion_rejection_factor = absl::nullopt ; bool estimate_noise_when_congested = true ; } ;)",
    "insertText": "JitterEstimator(Clock* clock, const FieldTrialsView& field_trials)"
  },
  {
    "label": "JitterEstimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JitterEstimator(const JitterEstimator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JitterEstimator&)",
    "insertText": "operator(const JitterEstimator&)"
  },
  {
    "label": "JitterEstimator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "JitterEstimator()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "UpdateEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEstimate(TimeDelta frame_delay, DataSize frame_size)"
  },
  {
    "label": "GetJitterEstimate()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetJitterEstimate(double rtt_multiplier, absl::optional<TimeDelta> rtt_mult_add_cap)"
  },
  {
    "label": "FrameNacked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameNacked()"
  },
  {
    "label": "UpdateRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRtt(TimeDelta rtt)"
  },
  {
    "label": "GetConfigForTest()",
    "kind": "Method",
    "detail": "Function (Config)",
    "insertText": "GetConfigForTest()"
  },
  {
    "label": "EstimateRandomJitter()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "EstimateRandomJitter(double d_dT)"
  },
  {
    "label": "CalculateEstimate()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "CalculateEstimate()"
  },
  {
    "label": "PostProcessEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostProcessEstimate()"
  },
  {
    "label": "GetFrameRate()",
    "kind": "Method",
    "detail": "Function (Frequency)",
    "insertText": "GetFrameRate()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (const Config config_ ; FrameDelayVariationKalmanFilter kalman_filter_ ; double avg_frame_size_bytes_ ; double var_frame_size_bytes2_ ; double max_frame_size_bytes_ ; MovingMedianFilter<int64_t> avg_frame_size_median_bytes_ ; MovingPercentileFilter<int64_t> max_frame_size_bytes_percentile_ ; double startup_frame_size_sum_bytes_ ; size_t startup_frame_size_count_ ; absl::optional<Timestamp> last_update_time_ ; absl::optional<TimeDelta> prev_estimate_ ; absl::optional<DataSize> prev_frame_size_ ; double avg_noise_ms_ ; double var_noise_ms2_ ; size_t alpha_count_ ; TimeDelta filter_jitter_estimate_ =)",
    "insertText": "Zero()"
  }
]