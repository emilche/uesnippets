[
  {
    "label": "MASSENTITY_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MASSENTITY_API"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "type"
  },
  {
    "label": "COMMAND_PUSHING_CHECK()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MassEntityTypes . h \" # include \" MassEntityManager . h \" # include \" Misc / MTAccessDetector . h \" # include \" MassEntityUtils . h \" # include \" MassCommands . h \" # define)",
    "insertText": "COMMAND_PUSHING_CHECK() \\ checkf(IsFlushing() == false, TEXT(\"Trying to push commands is not supported while the given buffer is being flushed\"))"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "checkf(OwnerThreadId == FPlatformTLS::GetCurrentThreadId(), TEXT(\"Commands can be pushed only in the same thread where the command buffer was created.\"))"
  },
  {
    "label": "FMassCommandBuffer()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMassCommandBuffer()"
  },
  {
    "label": "PushCommand()",
    "kind": "Method",
    "detail": "Function (template<template<. . . TArgs> TCommand,. . . TArgs> void)",
    "insertText": "PushCommand(const FMassEntityHandle Entity, TArgs&&... InArgs)"
  },
  {
    "label": "COMMAND_PUSHING_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COMMAND_PUSHING_CHECK()"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"Mass/PushCommand\"))"
  },
  {
    "label": "TArgs()",
    "kind": "Method",
    "detail": "Function (TCommand<TArgs . . .>& Instance = CreateOrAddCommand<TCommand<)",
    "insertText": "TArgs()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Instance .)",
    "insertText": "Add(Entity, Forward<TArgs>(InArgs)...)"
  },
  {
    "label": "PushCommand()",
    "kind": "Method",
    "detail": "Function (+ + ActiveCommandsCounter ; } template<TCommand,. . . TArgs> void)",
    "insertText": "PushCommand(TArgs&&... InArgs)"
  },
  {
    "label": "TCommand()",
    "kind": "Method",
    "detail": "Function (TCommand& Instance = CreateOrAddCommand<)",
    "insertText": "TCommand()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Instance .)",
    "insertText": "Add(Forward<TArgs>(InArgs)...)"
  },
  {
    "label": "PushCommand()",
    "kind": "Method",
    "detail": "Function (+ + ActiveCommandsCounter ; } template<TCommand> void)",
    "insertText": "PushCommand(const FMassEntityHandle Entity)"
  },
  {
    "label": "TCommand()",
    "kind": "Method",
    "detail": "Function (CreateOrAddCommand<)",
    "insertText": "TCommand().Add(Entity)"
  },
  {
    "label": "PushCommand()",
    "kind": "Method",
    "detail": "Function (+ + ActiveCommandsCounter ; } template<TCommand> void)",
    "insertText": "PushCommand(TConstArrayView<FMassEntityHandle> Entities)"
  },
  {
    "label": "TCommand()",
    "kind": "Method",
    "detail": "Function (CreateOrAddCommand<)",
    "insertText": "TCommand().Add(Entities)"
  },
  {
    "label": "AddFragment()",
    "kind": "Method",
    "detail": "Function (+ + ActiveCommandsCounter ; } template<T> void)",
    "insertText": "AddFragment(FMassEntityHandle Entity)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (PushCommand<FMassCommandAddFragmentsInternal<EMassCommandCheckTime::CompileTimeCheck,)",
    "insertText": "T(Entity)"
  },
  {
    "label": "AddFragment_RuntimeCheck()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "AddFragment_RuntimeCheck(FMassEntityHandle Entity)"
  },
  {
    "label": "RemoveFragment()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "RemoveFragment(FMassEntityHandle Entity)"
  },
  {
    "label": "RemoveFragment_RuntimeCheck()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "RemoveFragment_RuntimeCheck(FMassEntityHandle Entity)"
  },
  {
    "label": "AddTag()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "AddTag(FMassEntityHandle Entity)"
  },
  {
    "label": "AddTag_RuntimeCheck()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "AddTag_RuntimeCheck(FMassEntityHandle Entity)"
  },
  {
    "label": "RemoveTag()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "RemoveTag(FMassEntityHandle Entity)"
  },
  {
    "label": "RemoveTag_RuntimeCheck()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "RemoveTag_RuntimeCheck(FMassEntityHandle Entity)"
  },
  {
    "label": "SwapTags()",
    "kind": "Method",
    "detail": "Function (} template<TOld,TNew> void)",
    "insertText": "SwapTags(FMassEntityHandle Entity)"
  },
  {
    "label": "TNew()",
    "kind": "Method",
    "detail": "Function (PushCommand<FMassCommandSwapTagsInternal<EMassCommandCheckTime::CompileTimeCheck,TOld,)",
    "insertText": "TNew(Entity)"
  },
  {
    "label": "SwapTags_RuntimeCheck()",
    "kind": "Method",
    "detail": "Function (} template<TOld,TNew> void)",
    "insertText": "SwapTags_RuntimeCheck(FMassEntityHandle Entity)"
  },
  {
    "label": "DestroyEntity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroyEntity(FMassEntityHandle Entity)"
  },
  {
    "label": "FMassCommandDestroyEntities()",
    "kind": "Method",
    "detail": "Function (PushCommand<)",
    "insertText": "FMassCommandDestroyEntities(Entity)"
  },
  {
    "label": "DestroyEntities()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroyEntities(TConstArrayView<FMassEntityHandle> InEntitiesToDestroy)"
  },
  {
    "label": "FMassCommandDestroyEntities()",
    "kind": "Method",
    "detail": "Function (PushCommand<)",
    "insertText": "FMassCommandDestroyEntities(InEntitiesToDestroy)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "MoveAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveAppend(FMassCommandBuffer& InOutOther)"
  },
  {
    "label": "HasPendingCommands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingCommands()"
  },
  {
    "label": "CreateOrAddCommand()",
    "kind": "Method",
    "detail": "Function (template<T> T&)",
    "insertText": "CreateOrAddCommand()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const int32 Index = FMassBatchedCommand::GetCommandIndex<)",
    "insertText": "T()"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (CommandInstances .)",
    "insertText": "AddZeroed(Index - CommandInstances.Num() + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(CommandInstances[Index])"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Flush(FMassEntityManager& EntityManager)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp()"
  },
  {
    "label": "UE_MT_DECLARE_RW_ACCESS_DETECTOR()",
    "kind": "Method",
    "detail": "Function (FCriticalSection AppendingCommandsCS ;)",
    "insertText": "UE_MT_DECLARE_RW_ACCESS_DETECTOR(PendingBatchCommandsDetector)"
  }
]