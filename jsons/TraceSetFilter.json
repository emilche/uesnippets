[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "TTraceSetFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTraceSetFilter"
  },
  {
    "label": "STraceStoreWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STraceStoreWindow"
  },
  {
    "label": "FTraceFilterByStringSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterByStringSet"
  },
  {
    "label": "FTraceFilterByPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterByPlatform"
  },
  {
    "label": "FTraceFilterByAppName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterByAppName"
  },
  {
    "label": "FTraceFilterByBuildConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterByBuildConfig"
  },
  {
    "label": "FTraceFilterByBuildTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterByBuildTarget"
  },
  {
    "label": "FTraceFilterByBranch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterByBranch"
  },
  {
    "label": "FTraceFilterBySize",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterBySize"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTraceFilterByStatus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterByStatus"
  },
  {
    "label": "FTraceFilterByVersion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterByVersion"
  },
  {
    "label": "TTraceSetFilter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" Internationalization / Text . h \" # include \" Misc / IFilter . h \" # include \" Templates / SharedPointer . h \" # include \" InsightsFrontend / ViewModels / TraceViewModel . h \" class FMenuBuilder ; namespace UE::Insights { template<TSetType> class TTraceSetFilter : public IFilter<const FTraceViewModel&>,public TSharedFromThis<TTraceSetFilter<TSetType>> { public :)",
    "insertText": "TTraceSetFilter()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (} ; typedef const FTraceViewModel& ItemType ;)",
    "insertText": "DECLARE_DERIVED_EVENT(TTraceSetFilter, IFilter<ItemType>::FChangedEvent, FChangedEvent)"
  },
  {
    "label": "OnChanged()",
    "kind": "Method",
    "detail": "Function (FChangedEvent&)",
    "insertText": "OnChanged()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "BuildMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildMenu(FMenuBuilder& InMenuBuilder, class STraceStoreWindow& InWindow)"
  },
  {
    "label": "AddDefaultValues()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AddDefaultValues(TArray<TSetType>& InOutDefaultValues)"
  },
  {
    "label": "GetFilterValueForTrace()",
    "kind": "Method",
    "detail": "Function (} TSetType)",
    "insertText": "GetFilterValueForTrace(const FTraceViewModel& InTrace)"
  },
  {
    "label": "ValueToText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ValueToText(const TSetType Value)"
  },
  {
    "label": "ValueToText()",
    "kind": "Method",
    "detail": "Function (protected : FChangedEvent ChangedEvent ; TSet<TSetType> FilterSet ; FText ToggleAllActionLabel ; FText ToggleAllActionTooltip ; FText UndefinedValueLabel ; } ; class FTraceFilterByStringSet : public TTraceSetFilter<FString> { protected : FText)",
    "insertText": "ValueToText(const FString InValue)"
  },
  {
    "label": "FTraceFilterByPlatform()",
    "kind": "Method",
    "detail": "Function (} } ; class FTraceFilterByPlatform : public FTraceFilterByStringSet { public :)",
    "insertText": "FTraceFilterByPlatform()"
  },
  {
    "label": "FTraceFilterByAppName()",
    "kind": "Method",
    "detail": "Function (} } ; class FTraceFilterByAppName : public FTraceFilterByStringSet { public :)",
    "insertText": "FTraceFilterByAppName()"
  },
  {
    "label": "FTraceFilterByBuildConfig()",
    "kind": "Method",
    "detail": "Function (} } ; class FTraceFilterByBuildConfig : public TTraceSetFilter<uint8> { public :)",
    "insertText": "FTraceFilterByBuildConfig()"
  },
  {
    "label": "ValueToText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "ValueToText(const uint8 InValue)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR* Str =)",
    "insertText": "LexToString((EBuildConfiguration)InValue)"
  },
  {
    "label": "FTraceFilterByBuildTarget()",
    "kind": "Method",
    "detail": "Function (} } ; class FTraceFilterByBuildTarget : public TTraceSetFilter<uint8> { public :)",
    "insertText": "FTraceFilterByBuildTarget()"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR* Str =)",
    "insertText": "LexToString((EBuildTargetType)InValue)"
  },
  {
    "label": "FTraceFilterByBranch()",
    "kind": "Method",
    "detail": "Function (} } ; class FTraceFilterByBranch : public FTraceFilterByStringSet { public :)",
    "insertText": "FTraceFilterByBranch()"
  },
  {
    "label": "FTraceFilterBySize()",
    "kind": "Method",
    "detail": "Function (} } ; class FTraceFilterBySize : public TTraceSetFilter<uint8> { public : enum class ESizeCategory : uint8 { Empty,Small,Medium,Large,InvalidOrMax } ; public :)",
    "insertText": "FTraceFilterBySize()"
  },
  {
    "label": "AddDefaultValues()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AddDefaultValues(TArray<uint8>& InOutDefaultValues)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InTrace.Size < 1024ull * 1024ull)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InTrace.Size < 1024ull * 1024ull * 1024ull)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(uint8)"
  },
  {
    "label": "FTraceFilterByStatus()",
    "kind": "Method",
    "detail": "Function (} ; class FTraceFilterByStatus : public TTraceSetFilter<bool> { public :)",
    "insertText": "FTraceFilterByStatus()"
  },
  {
    "label": "AddDefaultValues()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AddDefaultValues(TArray<bool>& InOutDefaultValues)"
  },
  {
    "label": "FTraceFilterByVersion()",
    "kind": "Method",
    "detail": "Function (} ; class FTraceFilterByVersion : public FTraceFilterByStringSet { public :)",
    "insertText": "FTraceFilterByVersion()"
  }
]