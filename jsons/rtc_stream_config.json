[
  {
    "label": "StreamConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StreamConfig"
  },
  {
    "label": "Codec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Codec"
  },
  {
    "label": "StreamConfig()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_RTC_STREAM_CONFIG_H_ # define LOGGING_RTC_EVENT_LOG_RTC_STREAM_CONFIG_H_ # include<stdint . h> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / rtp_headers . h \" # include \" api / rtp_parameters . h \" namespace webrtc { namespace rtclog { struct StreamConfig {)",
    "insertText": "StreamConfig()"
  },
  {
    "label": "StreamConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StreamConfig(const StreamConfig& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const StreamConfig& other)"
  },
  {
    "label": "Codec()",
    "kind": "Method",
    "detail": "Function (uint32_t local_ssrc = 0 ; uint32_t remote_ssrc = 0 ; uint32_t rtx_ssrc = 0 ; std::string rsid ; bool remb = false ; std::vector<RtpExtension> rtp_extensions ; RtcpMode rtcp_mode = RtcpMode::kReducedSize ; struct Codec {)",
    "insertText": "Codec(absl::string_view payload_name, int payload_type, int rtx_payload_type)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Codec& other)"
  }
]