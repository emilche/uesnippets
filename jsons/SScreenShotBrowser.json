[
  {
    "label": "SScreenShotBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScreenShotBrowser"
  },
  {
    "label": "FFileChangeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileChangeData"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Interfaces / IScreenShotManager . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Images / SThrobber . h \" # include \" Models / ScreenComparisonModel . h \" class SScreenShotBrowser : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SScreenShotBrowser)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() public: void Construct( const FArguments& InArgs, IScreenShotManagerRef InScreenShotManager)"
  },
  {
    "label": "SScreenShotBrowser()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SScreenShotBrowser()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnGenerateWidgetForScreenResults()",
    "kind": "Method",
    "detail": "Function (public : TSharedRef<ITableRow>)",
    "insertText": "OnGenerateWidgetForScreenResults(TSharedPtr<FScreenComparisonModel> InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "DisplaySuccess_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySuccess_OnCheckStateChanged(ECheckBoxState NewRadioState)"
  },
  {
    "label": "DisplayError_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayError_OnCheckStateChanged(ECheckBoxState NewRadioState)"
  },
  {
    "label": "DisplayNew_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayNew_OnCheckStateChanged(ECheckBoxState NewRadioState)"
  },
  {
    "label": "OnReportFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReportFilterTextChanged(const FText& InText)"
  },
  {
    "label": "OnDirectoryChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnDirectoryChanged(const FString& Directory)"
  },
  {
    "label": "RefreshDirectoryWatcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshDirectoryWatcher()"
  },
  {
    "label": "OnReportsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReportsChanged(const TArray<struct FFileChangeData>&)"
  },
  {
    "label": "RequestRebuildTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRebuildTree()"
  },
  {
    "label": "ContinueRebuildTreeIfReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContinueRebuildTreeIfReady()"
  },
  {
    "label": "FinishRebuildTreeIfReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishRebuildTreeIfReady()"
  },
  {
    "label": "GetReportsVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetReportsVisibility()"
  },
  {
    "label": "GetReportsUpdatingThrobberVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetReportsUpdatingThrobberVisibility()"
  },
  {
    "label": "CanAddNewReportResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddNewReportResult(const FImageComparisonResult& Comparison)"
  },
  {
    "label": "MatchesReportFilterCriteria()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesReportFilterCriteria(const FString& ComparisonName, const FImageComparisonResult& ComparisonResult)"
  },
  {
    "label": "ApplyReportFilterToWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyReportFilterToWidgets()"
  }
]