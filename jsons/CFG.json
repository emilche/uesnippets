[
  {
    "label": "Ptr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Ptr"
  },
  {
    "label": "USE_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USE_iterator"
  },
  {
    "label": "PredIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PredIterator"
  },
  {
    "label": "Term_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Term_"
  },
  {
    "label": "BB_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BB_"
  },
  {
    "label": "SuccIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SuccIterator"
  },
  {
    "label": "SuccessorProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SuccessorProxy"
  },
  {
    "label": "isPodLike",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isPodLike"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "advancePastNonTerminators()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_CFG_H # define LLVM_IR_CFG_H # include \" llvm / ADT / GraphTraits . h \" # include \" llvm / ADT / iterator_range . h \" # include \" llvm / IR / Function . h \" # include \" llvm / IR / InstrTypes . h \" namespace llvm { template<class Ptr,class USE_iterator> class PredIterator { public : using iterator_category = std::forward_iterator_tag ; using value_type = Ptr ; using difference_type = std::ptrdiff_t ; using pointer = Ptr* ; using reference = Ptr* ; private : typedef PredIterator<Ptr,USE_iterator> Self ; USE_iterator It ; void)",
    "insertText": "advancePastNonTerminators()"
  },
  {
    "label": "PredIterator()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "PredIterator()"
  },
  {
    "label": "PredIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PredIterator(Ptr *bb) : It(bb->user_begin())"
  },
  {
    "label": "PredIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PredIterator(Ptr *bb, bool) : It(bb->user_end())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Self& x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "operator()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!It.atEnd() && \"pred_iterator out of range!\")"
  },
  {
    "label": "getOperandNo()",
    "kind": "Method",
    "detail": "Function (Self tmp =* this ; + +* this ; return tmp ; } unsigned)",
    "insertText": "getOperandNo()"
  },
  {
    "label": "getUse()",
    "kind": "Method",
    "detail": "Function (} Use&)",
    "insertText": "getUse()"
  },
  {
    "label": "pred_begin()",
    "kind": "Method",
    "detail": "Function (} } ; typedef PredIterator<BasicBlock,Value::user_iterator> pred_iterator ; typedef PredIterator<const BasicBlock,Value::const_user_iterator> const_pred_iterator ; typedef llvm::iterator_range<pred_iterator> pred_range ; typedef llvm::iterator_range<const_pred_iterator> pred_const_range ; pred_iterator)",
    "insertText": "pred_begin(BasicBlock *BB)"
  },
  {
    "label": "pred_begin()",
    "kind": "Method",
    "detail": "Function (} const_pred_iterator)",
    "insertText": "pred_begin(const BasicBlock *BB)"
  },
  {
    "label": "pred_end()",
    "kind": "Method",
    "detail": "Function (} pred_iterator)",
    "insertText": "pred_end(BasicBlock *BB)"
  },
  {
    "label": "pred_end()",
    "kind": "Method",
    "detail": "Function (} const_pred_iterator)",
    "insertText": "pred_end(const BasicBlock *BB)"
  },
  {
    "label": "pred_empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "pred_empty(const BasicBlock *BB)"
  },
  {
    "label": "predecessors()",
    "kind": "Method",
    "detail": "Function (} pred_range)",
    "insertText": "predecessors(BasicBlock *BB)"
  },
  {
    "label": "predecessors()",
    "kind": "Method",
    "detail": "Function (} pred_const_range)",
    "insertText": "predecessors(const BasicBlock *BB)"
  },
  {
    "label": "index_is_valid()",
    "kind": "Method",
    "detail": "Function (} template<class Term_,class BB_> class SuccIterator { public : using iterator_category = std::random_access_iterator_tag ; using value_type = BB_ ; using difference_type = int ; using pointer = BB_* ; using reference = BB_* ; private : Term_ Term ; unsigned idx ; typedef SuccIterator<Term_,BB_> Self ; bool)",
    "insertText": "index_is_valid(int idx)"
  },
  {
    "label": "SuccessorProxy()",
    "kind": "Method",
    "detail": "Function (} class SuccessorProxy { Self it ; public :)",
    "insertText": "SuccessorProxy(const Self &it) : it(it)"
  },
  {
    "label": "SuccessorProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SuccessorProxy(const SuccessorProxy&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SuccessorProxy&)",
    "insertText": "operator(SuccessorProxy r)"
  },
  {
    "label": "reference()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "reference(r)"
  },
  {
    "label": "setSuccessor()",
    "kind": "Method",
    "detail": "Function (it . Term ->)",
    "insertText": "setSuccessor(it.idx, r)"
  },
  {
    "label": "SuccIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SuccIterator(Term_ T, bool) : Term(T)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + idx ; return* this ; } Self)",
    "insertText": "operator(int)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Term == x.Term && \"Cannot compare iterators of different blocks!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (unsigned new_idx = idx + Right ;)",
    "insertText": "assert(index_is_valid(new_idx) && \"Iterator index out of bound\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (idx = new_idx ; return* this ; } Self)",
    "insertText": "operator(int Right)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Term == x.Term && \"Cannot work on iterators of different blocks!\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (int distance = idx - x . idx ; return distance ; } SuccessorProxy)",
    "insertText": "operator(int offset)"
  },
  {
    "label": "SuccessorProxy()",
    "kind": "Method",
    "detail": "Function (Self tmp =* this ; tmp + = offset ; return)",
    "insertText": "SuccessorProxy(tmp)"
  },
  {
    "label": "getSource()",
    "kind": "Method",
    "detail": "Function (} BB_*)",
    "insertText": "getSource()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Term && \"Source not available, if basic block was malformed\")"
  },
  {
    "label": "succ_begin()",
    "kind": "Method",
    "detail": "Function (} } ; typedef SuccIterator<TerminatorInst*,BasicBlock> succ_iterator ; typedef SuccIterator<const TerminatorInst*,const BasicBlock> succ_const_iterator ; typedef llvm::iterator_range<succ_iterator> succ_range ; typedef llvm::iterator_range<succ_const_iterator> succ_const_range ; succ_iterator)",
    "insertText": "succ_begin(BasicBlock *BB)"
  },
  {
    "label": "succ_begin()",
    "kind": "Method",
    "detail": "Function (} succ_const_iterator)",
    "insertText": "succ_begin(const BasicBlock *BB)"
  },
  {
    "label": "succ_end()",
    "kind": "Method",
    "detail": "Function (} succ_iterator)",
    "insertText": "succ_end(BasicBlock *BB)"
  },
  {
    "label": "succ_end()",
    "kind": "Method",
    "detail": "Function (} succ_const_iterator)",
    "insertText": "succ_end(const BasicBlock *BB)"
  },
  {
    "label": "succ_empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "succ_empty(const BasicBlock *BB)"
  },
  {
    "label": "successors()",
    "kind": "Method",
    "detail": "Function (} succ_range)",
    "insertText": "successors(BasicBlock *BB)"
  },
  {
    "label": "successors()",
    "kind": "Method",
    "detail": "Function (} succ_const_range)",
    "insertText": "successors(const BasicBlock *BB)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} template<T,U> struct isPodLike<SuccIterator<T,U>> { const bool value = isPodLike<T>::value ; } ; template<> struct GraphTraits<BasicBlock*> { typedef BasicBlock NodeType ; typedef succ_iterator ChildIteratorType ; NodeType*)",
    "insertText": "getEntryNode(BasicBlock *BB)"
  },
  {
    "label": "child_end()",
    "kind": "Method",
    "detail": "Function (} ChildIteratorType)",
    "insertText": "child_end(NodeType *N)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<const BasicBlock*> { typedef const BasicBlock NodeType ; typedef succ_const_iterator ChildIteratorType ; NodeType*)",
    "insertText": "getEntryNode(const BasicBlock *BB)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<Inverse<BasicBlock*>> { typedef BasicBlock NodeType ; typedef pred_iterator ChildIteratorType ; NodeType*)",
    "insertText": "getEntryNode(Inverse<BasicBlock *> G)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<Inverse<const BasicBlock*>> { typedef const BasicBlock NodeType ; typedef const_pred_iterator ChildIteratorType ; NodeType*)",
    "insertText": "getEntryNode(Inverse<const BasicBlock*> G)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<Function*> : public GraphTraits<BasicBlock*> { NodeType*)",
    "insertText": "getEntryNode(Function *F)"
  },
  {
    "label": "nodes_begin()",
    "kind": "Method",
    "detail": "Function (} typedef Function::iterator nodes_iterator ; nodes_iterator)",
    "insertText": "nodes_begin(Function *F)"
  },
  {
    "label": "nodes_end()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_end(Function *F)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size(Function *F)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<const Function*> : public GraphTraits<const BasicBlock*> { NodeType*)",
    "insertText": "getEntryNode(const Function *F)"
  },
  {
    "label": "nodes_begin()",
    "kind": "Method",
    "detail": "Function (} typedef Function::const_iterator nodes_iterator ; nodes_iterator)",
    "insertText": "nodes_begin(const Function *F)"
  },
  {
    "label": "nodes_end()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_end(const Function *F)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size(const Function *F)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<Inverse<Function*>> : public GraphTraits<Inverse<BasicBlock*>> { NodeType*)",
    "insertText": "getEntryNode(Inverse<Function*> G)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<Inverse<const Function*>> : public GraphTraits<Inverse<const BasicBlock*>> { NodeType*)",
    "insertText": "getEntryNode(Inverse<const Function *> G)"
  }
]