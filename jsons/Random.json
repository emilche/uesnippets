[
  {
    "label": "Random",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Random"
  },
  {
    "label": "Random()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_RANDOM_H_ # define RTC_BASE_RANDOM_H_ # include<stdint . h> # include<limits> # include \" rtc_base / checks . h \" namespace webrtc { class Random { public :)",
    "insertText": "Random(uint64_t seed)"
  },
  {
    "label": "Random()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Random()"
  },
  {
    "label": "Random()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Random(const Random&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Random&)",
    "insertText": "operator(const Random&)"
  },
  {
    "label": "Rand()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "Rand()"
  },
  {
    "label": "Rand()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "Rand(uint32_t t)"
  },
  {
    "label": "Rand()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "Rand(uint32_t low, uint32_t high)"
  },
  {
    "label": "Rand()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Rand(int32_t low, int32_t high)"
  },
  {
    "label": "NextOutput()",
    "kind": "Method",
    "detail": "Function (private : uint64_t)",
    "insertText": "NextOutput()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (state_ ^ = state_>> 1 2 ; state_ ^ = state_<<2 5 ; state_ ^ = state_>> 2 7 ;)",
    "insertText": "RTC_DCHECK(state_ != 0x0ULL)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (template<> double Random::Rand<)",
    "insertText": "double()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (template<> bool Random::Rand<)",
    "insertText": "bool()"
  }
]