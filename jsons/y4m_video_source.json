[
  {
    "label": "Y4mVideoSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Y4mVideoSource"
  },
  {
    "label": "Y4mVideoSource()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_TEST_Y4M_VIDEO_SOURCE_H_ # define VPX_TEST_Y4M_VIDEO_SOURCE_H_ # include<algorithm> # include<memory> # include<string> # include \" test / video_source . h \" # include \" . / y4minput . h \" namespace libvpx_test { class Y4mVideoSource : public VideoSource { public :)",
    "insertText": "Y4mVideoSource(const std::string &file_name, unsigned int start, int limit) : file_name_(file_name), input_file_(nullptr), img_(new vpx_image_t()), start_(start), limit_(limit), frame_(0), framerate_numerator_(0), framerate_denominator_(0), y4m_()"
  },
  {
    "label": "Y4mVideoSource()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Y4mVideoSource()"
  },
  {
    "label": "vpx_img_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_img_free(img_.get())"
  },
  {
    "label": "CloseSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseSource()"
  },
  {
    "label": "OpenSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OpenSource()"
  },
  {
    "label": "OpenTestDataFile()",
    "kind": "Method",
    "detail": "Function (input_file_ =)",
    "insertText": "OpenTestDataFile(file_name_)"
  },
  {
    "label": "ASSERT_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_NE(input_file_, nullptr)"
  },
  {
    "label": "ReadSourceToStart()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReadSourceToStart()"
  },
  {
    "label": "ASSERT_FALSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_FALSE(y4m_input_open(&y4m_, input_file_, nullptr, 0, 0))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (framerate_numerator_ = y4m_ . fps_n ; framerate_denominator_ = y4m_ . fps_d ; frame_ = 0 ;)",
    "insertText": "for(unsigned int i = 0; i < start_; i++)"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Next()"
  },
  {
    "label": "FillFrame()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FillFrame()"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Begin()"
  },
  {
    "label": "img()",
    "kind": "Method",
    "detail": "Function (} vpx_image_t*)",
    "insertText": "img()"
  },
  {
    "label": "pts()",
    "kind": "Method",
    "detail": "Function (} vpx_codec_pts_t)",
    "insertText": "pts()"
  },
  {
    "label": "frame()",
    "kind": "Method",
    "detail": "Function (const vpx_rational_t t = { framerate_denominator_,framerate_numerator_ } ; return t ; } unsigned int)",
    "insertText": "frame()"
  },
  {
    "label": "y4m_input_fetch_frame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "y4m_input_fetch_frame(&y4m_, input_file_, img_.get())"
  },
  {
    "label": "SwapBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SwapBuffers(Y4mVideoSource *other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(other->y4m_.dst_buf, y4m_.dst_buf)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (vpx_image_t* tmp ; tmp = other -> img_ .)",
    "insertText": "release()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (other -> img_ .)",
    "insertText": "reset(img_.release())"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (img_ .)",
    "insertText": "reset(tmp)"
  },
  {
    "label": "y4m_input_close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "y4m_input_close(&y4m_)"
  },
  {
    "label": "y4m_input()",
    "kind": "Method",
    "detail": "Function (y4m_ =)",
    "insertText": "y4m_input()"
  },
  {
    "label": "fclose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fclose(input_file_)"
  }
]