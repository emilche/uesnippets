[
  {
    "label": "FPolygonEdgeMeshGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPolygonEdgeMeshGenerator"
  },
  {
    "label": "UnitZ()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" FrameTypes . h \" # include \" Math / MathFwd . h \" # include \" Math / Vector . h \" # include \" MeshShapeGenerator . h \" namespace UE { namespace Geometry { class FPolygonEdgeMeshGenerator : public FMeshShapeGenerator { private : TArray<FFrame3d> Polygon ; bool bClosed ; TArray<double> OffsetScaleFactors ; double Width = 1 . 0 ; FVector3d Normal =)",
    "insertText": "UnitZ()"
  },
  {
    "label": "FPolygonEdgeMeshGenerator()",
    "kind": "Method",
    "detail": "Function (public : double UVWidth = 1 . 0 ; double UVHeight = 1 . 0 ; bool bScaleUVByAspectRatio = true ; bool bSinglePolyGroup = false ; bool bRoundedCorners = false ; double CornerRadius = 0 . 0 ; bool bLimitCornerRadius = false ; int NumArcVertices ;)",
    "insertText": "FPolygonEdgeMeshGenerator(const TArray<FFrame3d>& InPolygon, bool bInClosed, const TArray<double>& InOffsetScaleFactors, double InWidth = 1.0, FVector3d InNormal = FVector3d::UnitZ(), bool bInRoundedCorners = false, double InCornerRadius = 0.0, bool bInLimitCornerRadius = false, int InNumArcVertices = 3)"
  },
  {
    "label": "FPolygonEdgeMeshGenerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPolygonEdgeMeshGenerator()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (FMeshShapeGenerator&)",
    "insertText": "Generate()"
  },
  {
    "label": "CurvePath()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CurvePath(const TArray<FVector3d>& InPath, const TArray<bool>& InteriorAngleFlag, const TArray<double>& MaxCornerRadii, const TArray<double>& OtherSideMaxCornerRadii, const FFrame3d& PolygonFrame, TArray<FVector3d>& OutPath)"
  }
]