[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FEditorModeTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeTools"
  },
  {
    "label": "FEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdMode"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "ULegacyEdModeWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULegacyEdModeWrapper"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Tools / UEdMode . h \" # include \" Tools / Modes . h \" # include \" Engine / EngineBaseTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Tools / LegacyEdModeInterfaces . h \" # include \" GizmoEdModeInterface . h \" # include \" LegacyEdMode . generated . h \" class AActor ; class FEditorModeTools ; class FEdMode ; class UTexture2D ; class FEditorViewportClient ; class FViewport ; class UPrimitiveComponent ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ULegacyEdModeWrapper()"
  },
  {
    "label": "CreateLegacyMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateLegacyMode(FEditorModeID ModeID, FEditorModeTools& ModeManager)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "IsSelectionAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectionAllowed(AActor* InActor, bool bInSelected)"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Select(AActor* InActor, bool bInSelected)"
  },
  {
    "label": "ProcessEditDuplicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditDuplicate()"
  },
  {
    "label": "ProcessEditDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditDelete()"
  },
  {
    "label": "ProcessEditCut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditCut()"
  },
  {
    "label": "ProcessEditCopy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditCopy()"
  },
  {
    "label": "ProcessEditPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditPaste()"
  },
  {
    "label": "GetActionEditDuplicate()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditDuplicate()"
  },
  {
    "label": "GetActionEditDelete()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditDelete()"
  },
  {
    "label": "GetActionEditCut()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditCut()"
  },
  {
    "label": "GetActionEditCopy()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditCopy()"
  },
  {
    "label": "GetActionEditPaste()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditPaste()"
  },
  {
    "label": "IsSnapRotationEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSnapRotationEnabled()"
  },
  {
    "label": "SnapRotatorToGridOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SnapRotatorToGridOverride(FRotator& Rotation)"
  },
  {
    "label": "ActorsDuplicatedNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorsDuplicatedNotify(TArray<AActor*>& PreDuplicateSelection, TArray<AActor*>& PostDuplicateSelection, bool bOffsetLocations)"
  },
  {
    "label": "ActorMoveNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorMoveNotify()"
  },
  {
    "label": "ActorSelectionChangeNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorSelectionChangeNotify()"
  },
  {
    "label": "ActorPropChangeNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorPropChangeNotify()"
  },
  {
    "label": "UpdateInternalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInternalData()"
  },
  {
    "label": "MapChangeNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapChangeNotify()"
  },
  {
    "label": "SelectNone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNone()"
  },
  {
    "label": "GetPivotForOrbit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPivotForOrbit(FVector& OutPivot)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo()"
  },
  {
    "label": "DisallowMouseDeltaTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DisallowMouseDeltaTracking()"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCursor(EMouseCursor::Type& OutCursor)"
  },
  {
    "label": "GetOverrideCursorVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOverrideCursorVisibility(bool& bWantsOverride, bool& bHardwareCursorVisible, bool bSoftwareCursorVisible)"
  },
  {
    "label": "CanAutoSave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAutoSave()"
  },
  {
    "label": "IsCompatibleWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleWith(FEditorModeID OtherModeID)"
  },
  {
    "label": "ComputeBoundingBoxForViewportFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeBoundingBoxForViewportFocus(AActor* Actor, UPrimitiveComponent* PrimitiveComponent, FBox& InOutBox)"
  },
  {
    "label": "AllowsViewportDragTool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowsViewportDragTool()"
  },
  {
    "label": "UsesToolkits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesToolkits()"
  },
  {
    "label": "ProcessCapturedMouseMoves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessCapturedMouseMoves(FEditorViewportClient* InViewportClient, FViewport* InViewport, const TArrayView<FIntPoint>& CapturedMouseMoves)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(FEditorViewportClient* ViewportClient, FViewport* Viewport, FKey Key, EInputEvent Event)"
  },
  {
    "label": "InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputAxis(FEditorViewportClient* InViewportClient, FViewport* Viewport, int32 ControllerId, FKey Key, float Delta, float DeltaTime)"
  },
  {
    "label": "InputDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputDelta(FEditorViewportClient* InViewportClient, FViewport* InViewport, FVector& InDrag, FRotator& InRot, FVector& InScale)"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy* HitProxy, const FViewportClick& Click)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FEditorViewportClient* ViewportClient, float DeltaTime)"
  },
  {
    "label": "CapturedMouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CapturedMouseMove(FEditorViewportClient* InViewportClient, FViewport* InViewport, int32 InMouseX, int32 InMouseY)"
  },
  {
    "label": "MouseEnter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseEnter(FEditorViewportClient* ViewportClient, FViewport* Viewport, int32 x, int32 y)"
  },
  {
    "label": "MouseLeave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseLeave(FEditorViewportClient* ViewportClient, FViewport* Viewport)"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseMove(FEditorViewportClient* ViewportClient, FViewport* Viewport, int32 x, int32 y)"
  },
  {
    "label": "ReceivedFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReceivedFocus(FEditorViewportClient* ViewportClient, FViewport* Viewport)"
  },
  {
    "label": "LostFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LostFocus(FEditorViewportClient* ViewportClient, FViewport* Viewport)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD(FEditorViewportClient* ViewportClient, FViewport* Viewport, const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "PreConvertMouseMovement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreConvertMouseMovement(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "PostConvertMouseMovement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostConvertMouseMovement(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "ShouldDrawBrushWireframe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawBrushWireframe(AActor* InActor)"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enter()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "AsLegacyMode()",
    "kind": "Method",
    "detail": "Function (FEdMode*)",
    "insertText": "AsLegacyMode()"
  },
  {
    "label": "GetVertexTexture()",
    "kind": "Method",
    "detail": "Function (UTexture2D*)",
    "insertText": "GetVertexTexture()"
  },
  {
    "label": "AllowWidgetMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowWidgetMove()"
  },
  {
    "label": "CanCycleWidgetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCycleWidgetMode()"
  },
  {
    "label": "ShowModeWidgets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowModeWidgets()"
  },
  {
    "label": "GetWidgetAxisToDraw()",
    "kind": "Method",
    "detail": "Function (EAxisList::Type)",
    "insertText": "GetWidgetAxisToDraw(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "ShouldDrawWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawWidget()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget(UE::Widget::EWidgetMode CheckMode)"
  },
  {
    "label": "GetWidgetNormalFromCurrentAxis()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetNormalFromCurrentAxis(void* InData)"
  },
  {
    "label": "BoxSelect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BoxSelect(FBox& InBox, bool InSelect = true)"
  },
  {
    "label": "FrustumSelect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FrustumSelect(const FConvexVolume& InFrustum, FEditorViewportClient* InViewportClient, bool InSelect = true)"
  },
  {
    "label": "SetCurrentWidgetAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentWidgetAxis(EAxisList::Type InAxis)"
  },
  {
    "label": "GetCurrentWidgetAxis()",
    "kind": "Method",
    "detail": "Function (EAxisList::Type)",
    "insertText": "GetCurrentWidgetAxis()"
  },
  {
    "label": "UsesPropertyWidgets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesPropertyWidgets()"
  },
  {
    "label": "GetCustomDrawingCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomDrawingCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "GetCustomInputCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomInputCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "SetCurrentTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentTool(EModeTools InID)"
  },
  {
    "label": "SetCurrentTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentTool(FModeTool* InModeTool)"
  },
  {
    "label": "FindTool()",
    "kind": "Method",
    "detail": "Function (FModeTool*)",
    "insertText": "FindTool(EModeTools InID)"
  },
  {
    "label": "GetTools()",
    "kind": "Method",
    "detail": "Function (const TArray<FModeTool*>&)",
    "insertText": "GetTools()"
  },
  {
    "label": "GetCurrentTool()",
    "kind": "Method",
    "detail": "Function (FModeTool*)",
    "insertText": "GetCurrentTool()"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const FSceneView* View, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "BeginTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginTransform(const FGizmoState& InState)"
  },
  {
    "label": "EndTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTransform(const FGizmoState& InState)"
  }
]