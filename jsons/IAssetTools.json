[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "IAssetTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetTools"
  },
  {
    "label": "IAssetTypeActions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetTypeActions"
  },
  {
    "label": "IClassTypeActions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IClassTypeActions"
  },
  {
    "label": "ILocalizedAssetTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILocalizedAssetTools"
  },
  {
    "label": "UFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFactory"
  },
  {
    "label": "UAssetImportTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetImportTask"
  },
  {
    "label": "UAdvancedCopyCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAdvancedCopyCustomization"
  },
  {
    "label": "FNamePermissionList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNamePermissionList"
  },
  {
    "label": "FPathPermissionList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPathPermissionList"
  },
  {
    "label": "FPackageMigrationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageMigrationContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAssetRenameData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRenameData"
  },
  {
    "label": "FAdvancedAssetCategory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdvancedAssetCategory"
  },
  {
    "label": "FAdvancedCopyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdvancedCopyParams"
  },
  {
    "label": "FMigrationOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMigrationOptions"
  },
  {
    "label": "UAssetTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetTools"
  },
  {
    "label": "FRevisionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRevisionInfo"
  },
  {
    "label": "UAssetToolsHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetToolsHelpers"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / Package . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Class . h \" # include \" UObject / Interface . h \" # include \" UObject / SoftObjectPath . h \" # include \" AssetTypeCategories . h \" # include \" IAssetTypeActions . h \" # include \" AutomatedAssetImportData . h \" # include \" AssetRegistry / ARFilter . h \" # include \" Engine / Blueprint . h \" # include \" Logging / TokenizedMessage . h \" # include \" IAssetTools . generated . h \" struct FAssetData ; class IAssetTools ; class IAssetTypeActions ; class IClassTypeActions ; class ILocalizedAssetTools ; class UFactory ; class UAssetImportTask ; class UAdvancedCopyCustomization ; class FNamePermissionList ; class FPathPermissionList ; namespace UE::AssetTools { struct FPackageMigrationContext ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnPackageMigration, FPackageMigrationContext&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FCanMigrateAsset, FName)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FCanAssetBePublic, FStringView)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FShouldCreateAssetsAsExternallyReferenceableForPath, FStringView , TOptional<bool>&)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (DeleteFixedUpRedirectors,LeaveFixedUpRedirectors,PromptForDeletingRedirectors,} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(BlueprintReadWrite, Category=AssetRenameData)"
  },
  {
    "label": "FAssetRenameData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetRenameData() : bOnlyFixSoftReferences(false) , bAlsoRenameLocalizedVariants(false)"
  },
  {
    "label": "FAssetRenameData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAssetRenameData(const TWeakObjectPtr<UObject>& InAsset, const FString& InNewPackagePath, const FString& InNewName) : Asset(InAsset) , NewPackagePath(InNewPackagePath) , NewName(InNewName) , bOnlyFixSoftReferences(false) , bAlsoRenameLocalizedVariants(false)"
  },
  {
    "label": "FAssetRenameData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAssetRenameData(const TWeakObjectPtr<UObject>& InAsset, const FString& InNewPackagePath, const FString& InNewName, bool bInOnlyFixSoftReferences, bool bInAlsoRenameLocalizedVariants) : Asset(InAsset) , NewPackagePath(InNewPackagePath) , NewName(InNewName) , bOnlyFixSoftReferences(bInOnlyFixSoftReferences) , bAlsoRenameLocalizedVariants(bInAlsoRenameLocalizedVariants)"
  },
  {
    "label": "FAssetRenameData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAssetRenameData(const FSoftObjectPath& InOldObjectPath, const FSoftObjectPath& InNewObjectPath, bool bInOnlyFixSoftReferences = false, bool bInAlsoRenameLocalizedVariants = false) : OldObjectPath(InOldObjectPath) , NewObjectPath(InNewObjectPath) , bOnlyFixSoftReferences(bInOnlyFixSoftReferences) , bAlsoRenameLocalizedVariants(bInAlsoRenameLocalizedVariants)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_TwoParams(FAdvancedCopyCompletedEvent, bool, bSuccess, const TArray<FAssetRenameData>&, AllCopiedAssets)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FAssetPostRenameEvent, const TArray<FAssetRenameData>&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(bool, FIsNameAllowed, const FString& , FText*)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FSanitizeName, FString&)"
  },
  {
    "label": "FAdvancedAssetCategory()",
    "kind": "Method",
    "detail": "Function (struct FAdvancedAssetCategory { EAssetTypeCategories::Type CategoryType ; FText CategoryName ;)",
    "insertText": "FAdvancedAssetCategory(EAssetTypeCategories::Type InCategoryType, FText InCategoryName) : CategoryType(InCategoryType) , CategoryName(InCategoryName)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CustomizationsToUse .)",
    "insertText": "Add(InCustomization)"
  },
  {
    "label": "FAdvancedCopyParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAdvancedCopyParams(TArray<FName> InSelectedPackageOrFolderNames, FString InDropLocationForAdvancedCopy) : bShouldForceSave(false) , bCopyOverAllDestinationOverlaps(true) , bShouldSuppressUI(false) , bShouldCheckForDependencies(true) , SelectedPackageOrFolderNames(InSelectedPackageOrFolderNames) , DropLocationForAdvancedCopy(InDropLocationForAdvancedCopy)"
  },
  {
    "label": "FAdvancedCopyParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAdvancedCopyParams()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(BlueprintReadWrite, Category = MigrationOptions)"
  },
  {
    "label": "FMigrationOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMigrationOptions() : bPrompt(false) , bIgnoreDependencies(false) , AssetConflict(EAssetMigrationConflict::Skip)"
  },
  {
    "label": "UINTERFACE()",
    "kind": "Method",
    "detail": "Function (} } ; using FDuplicatedObjects = TArray<TMap<TSoftObjectPtr<UObject>,TSoftObjectPtr<UObject>>> ;)",
    "insertText": "UINTERFACE(MinimalApi, BlueprintType, meta = (CannotImplementInterfaceInBlueprint))"
  },
  {
    "label": "GENERATED_UINTERFACE_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UINTERFACE_BODY()"
  },
  {
    "label": "GENERATED_IINTERFACE_BODY()",
    "kind": "Method",
    "detail": "Function (class IAssetTools {)",
    "insertText": "GENERATED_IINTERFACE_BODY() public: ASSETTOOLS_API static IAssetTools& Get()"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnAssetsDiscovered)"
  },
  {
    "label": "RegisterAssetTypeActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAssetTypeActions(const TSharedRef<IAssetTypeActions>& NewActions)"
  },
  {
    "label": "UnregisterAssetTypeActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAssetTypeActions(const TSharedRef<IAssetTypeActions>& ActionsToRemove)"
  },
  {
    "label": "GetAssetTypeActionsList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetTypeActionsList(TArray<TWeakPtr<IAssetTypeActions>>& OutAssetTypeActionsList)"
  },
  {
    "label": "GetAssetTypeActionsForClass()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<IAssetTypeActions>)",
    "insertText": "GetAssetTypeActionsForClass(const UClass* Class)"
  },
  {
    "label": "GetLocalizedAssetTools()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ILocalizedAssetTools>)",
    "insertText": "GetLocalizedAssetTools()"
  },
  {
    "label": "CanLocalize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanLocalize(const UClass* Class)"
  },
  {
    "label": "GetTypeColor()",
    "kind": "Method",
    "detail": "Function (TOptional<FLinearColor>)",
    "insertText": "GetTypeColor(const UClass* Class)"
  },
  {
    "label": "GetAssetTypeActionsListForClass()",
    "kind": "Method",
    "detail": "Function (TArray<TWeakPtr<IAssetTypeActions>>)",
    "insertText": "GetAssetTypeActionsListForClass(const UClass* Class)"
  },
  {
    "label": "RegisterAdvancedAssetCategory()",
    "kind": "Method",
    "detail": "Function (EAssetTypeCategories::Type)",
    "insertText": "RegisterAdvancedAssetCategory(FName CategoryKey, FText CategoryDisplayName)"
  },
  {
    "label": "FindAdvancedAssetCategory()",
    "kind": "Method",
    "detail": "Function (EAssetTypeCategories::Type)",
    "insertText": "FindAdvancedAssetCategory(FName CategoryKey)"
  },
  {
    "label": "GetAllAdvancedAssetCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllAdvancedAssetCategories(TArray<FAdvancedAssetCategory>& OutCategoryList)"
  },
  {
    "label": "RegisterClassTypeActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterClassTypeActions(const TSharedRef<IClassTypeActions>& NewActions)"
  },
  {
    "label": "UnregisterClassTypeActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterClassTypeActions(const TSharedRef<IClassTypeActions>& ActionsToRemove)"
  },
  {
    "label": "GetClassTypeActionsList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetClassTypeActionsList(TArray<TWeakPtr<IClassTypeActions>>& OutClassTypeActionsList)"
  },
  {
    "label": "GetClassTypeActionsForClass()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<IClassTypeActions>)",
    "insertText": "GetClassTypeActionsForClass(UClass* Class)"
  },
  {
    "label": "CreateAssetsFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAssetsFrom(TConstArrayView<UObject*> SourceObjects, UClass* CreateAssetType, const FString& DefaultSuffix, TFunctionRef<UFactory*(UObject*)> FactoryConstructor, FName CallingContext = NAME_None)"
  },
  {
    "label": "CreateAssetsFrom()",
    "kind": "Method",
    "detail": "Function (template<SourceObjectType,= TEnableIf<TIsDerivedFrom<SourceObjectType,UObject>::Value>::Type> void)",
    "insertText": "CreateAssetsFrom(TConstArrayView<SourceObjectType*> SourceObjects, UClass* CreateAssetType, const FString& DefaultSuffix, TFunctionRef<UFactory*(SourceObjectType*)> FactoryConstructor, FName CallingContext = NAME_None)"
  },
  {
    "label": "CreateAssetsFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAssetsFrom(TConstArrayView<UObject*>(reinterpret_cast<UObject* const*>(SourceObjects.GetData()), SourceObjects.Num()), CreateAssetType, DefaultSuffix, [FactoryConstructor](UObject* SourceObject){ return FactoryConstructor(Cast<SourceObjectType>(SourceObject)); }, CallingContext)"
  },
  {
    "label": "CreateAssetWithDialog()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "CreateAssetWithDialog(UClass* AssetClass, UFactory* Factory, FName CallingContext = NAME_None)"
  },
  {
    "label": "SetCreateAssetsAsExternallyReferenceable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCreateAssetsAsExternallyReferenceable(bool bValue)"
  },
  {
    "label": "GetCreateAssetsAsExternallyReferenceable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCreateAssetsAsExternallyReferenceable()"
  },
  {
    "label": "ShouldCreateAssetsAsExternallyReferenceableForPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreateAssetsAsExternallyReferenceableForPath(const FStringView AssetPath)"
  },
  {
    "label": "GetOnShouldCreateAssetsAsExternallyReferenceableForPath()",
    "kind": "Method",
    "detail": "Function (UE::AssetTools::FShouldCreateAssetsAsExternallyReferenceableForPath&)",
    "insertText": "GetOnShouldCreateAssetsAsExternallyReferenceableForPath()"
  },
  {
    "label": "IsDiscoveringAssetsInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDiscoveringAssetsInProgress()"
  },
  {
    "label": "OpenDiscoveringAssetsDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenDiscoveringAssetsDialog(const FOnAssetsDiscovered& InOnAssetsDiscovered)"
  },
  {
    "label": "FindSoftReferencesToObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindSoftReferencesToObjects(const TArray<FSoftObjectPath>& TargetObjects, TMap<FSoftObjectPath, TArray<UObject*>>& ReferencingObjects)"
  },
  {
    "label": "OnAssetPostRename()",
    "kind": "Method",
    "detail": "Function (FAssetPostRenameEvent&)",
    "insertText": "OnAssetPostRename()"
  },
  {
    "label": "ImportAssetsWithDialogAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportAssetsWithDialogAsync(const FString& DestinationPath)"
  },
  {
    "label": "ImportAssets()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*>)",
    "insertText": "ImportAssets(const TArray<FString>& Files, const FString& DestinationPath, UFactory* ChosenFactory = NULL, bool bSyncToBrowser = true, TArray<TPair<FString, FString>>* FilesAndDestinations = nullptr, bool bAllowAsyncImport = false, bool bSceneImport = false)"
  },
  {
    "label": "ExportAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportAssets(const TArray<UObject*>& AssetsToExport, const FString& ExportPath)"
  },
  {
    "label": "ExportAssetsWithCleanFilename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportAssetsWithCleanFilename(const TArray<UObject*>& AssetsToExport, const FString& ExportPath)"
  },
  {
    "label": "ExportAssetsWithDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportAssetsWithDialog(const TArray<UObject*>& AssetsToExport, bool bPromptForIndividualFilenames)"
  },
  {
    "label": "CanExportAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExportAssets(const TArray<FAssetData>& AssetsToExport)"
  },
  {
    "label": "AssetUsesGenericThumbnail()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssetUsesGenericThumbnail(const FAssetData& AssetData)"
  },
  {
    "label": "DumpAssetToTempFile()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DumpAssetToTempFile(UObject* Asset)"
  },
  {
    "label": "CreateDiffProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDiffProcess(const FString& DiffCommand, const FString& OldTextFilename, const FString& NewTextFilename, const FString& DiffArgs = FString(\"\"))"
  },
  {
    "label": "MigratePackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MigratePackages(const TArray<FName>& PackageNamesToMigrate)"
  },
  {
    "label": "GetOnPackageMigration()",
    "kind": "Method",
    "detail": "Function (UE::AssetTools::FOnPackageMigration&)",
    "insertText": "GetOnPackageMigration()"
  },
  {
    "label": "BeginAdvancedCopyPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginAdvancedCopyPackages(const TArray<FName>& InputNamesToCopy, const FString& TargetPath)"
  },
  {
    "label": "FixupReferencers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupReferencers(const TArray<UObjectRedirector*>& Objects, bool bCheckoutDialogPrompt = true, ERedirectFixupMode FixupMode = ERedirectFixupMode::DeleteFixedUpRedirectors)"
  },
  {
    "label": "IsFixupReferencersInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFixupReferencersInProgress()"
  },
  {
    "label": "ExpandDirectories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandDirectories(const TArray<FString>& Files, const FString& DestinationPath, TArray<TPair<FString, FString>>& FilesAndDestinations)"
  },
  {
    "label": "AdvancedCopyPackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AdvancedCopyPackages(const FAdvancedCopyParams& CopyParams, const TArray<TMap<FString, FString>>& PackagesAndDestinations)"
  },
  {
    "label": "AdvancedCopyPackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AdvancedCopyPackages(const TMap<FString, FString>& SourceAndDestPackages, const bool bForceAutosave = false, const bool bCopyOverAllDestinationOverlaps = true, FDuplicatedObjects* OutDuplicatedObjects = nullptr, EMessageSeverity::Type NotificationSeverityFilter = EMessageSeverity::Info)"
  },
  {
    "label": "GenerateAdvancedCopyDestinations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateAdvancedCopyDestinations(FAdvancedCopyParams& InParams, const TArray<FName>& InPackageNamesToCopy, const UAdvancedCopyCustomization* CopyCustomization, TMap<FString, FString>& OutPackagesAndDestinations)"
  },
  {
    "label": "FlattenAdvancedCopyDestinations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FlattenAdvancedCopyDestinations(const TArray<TMap<FString, FString>>& PackagesAndDestinations, TMap<FString, FString>& FlattenedPackagesAndDestinations)"
  },
  {
    "label": "ValidateFlattenedAdvancedCopyDestinations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateFlattenedAdvancedCopyDestinations(const TMap<FString, FString>& FlattenedPackagesAndDestinations)"
  },
  {
    "label": "GetAllAdvancedCopySources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllAdvancedCopySources(FName SelectedPackage, FAdvancedCopyParams& CopyParams, TArray<FName>& OutPackageNamesToCopy, TMap<FName, FName>& DependencyMap, const class UAdvancedCopyCustomization* CopyCustomization)"
  },
  {
    "label": "InitAdvancedCopyFromCopyParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAdvancedCopyFromCopyParams(FAdvancedCopyParams CopyParams)"
  },
  {
    "label": "ConvertVirtualTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertVirtualTextures(const TArray<UTexture2D*>& Textures, bool bConvertBackToNonVirtual, const TArray<UMaterial*>* RelatedMaterials = nullptr)"
  },
  {
    "label": "IsAssetClassSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetClassSupported(const UClass* AssetClass)"
  },
  {
    "label": "GetNewAssetFactories()",
    "kind": "Method",
    "detail": "Function (TArray<UFactory*>)",
    "insertText": "GetNewAssetFactories()"
  },
  {
    "label": "GetAssetClassPathPermissionList()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FPathPermissionList>&)",
    "insertText": "GetAssetClassPathPermissionList(EAssetClassAction AssetClassAction)"
  },
  {
    "label": "GetImportExtensionPermissionList()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FNamePermissionList>&)",
    "insertText": "GetImportExtensionPermissionList()"
  },
  {
    "label": "IsImportExtensionAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImportExtensionAllowed(const FStringView& Extension)"
  },
  {
    "label": "GetAllowedBlueprintTypes()",
    "kind": "Method",
    "detail": "Function (TSet<EBlueprintType>&)",
    "insertText": "GetAllowedBlueprintTypes()"
  },
  {
    "label": "GetFolderPermissionList()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FPathPermissionList>&)",
    "insertText": "GetFolderPermissionList()"
  },
  {
    "label": "GetWritableFolderPermissionList()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FPathPermissionList>&)",
    "insertText": "GetWritableFolderPermissionList()"
  },
  {
    "label": "IsAssetVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetVisible(const FAssetData& AssetData, bool bCheckAliases = true)"
  },
  {
    "label": "AllPassWritableFolderFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllPassWritableFolderFilter(const TArray<FString>& InPaths)"
  },
  {
    "label": "IsNameAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNameAllowed(const FString& Name, FText* OutErrorMessage = nullptr)"
  },
  {
    "label": "RegisterIsNameAllowedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterIsNameAllowedDelegate(const FName OwnerName, FIsNameAllowed Delegate)"
  },
  {
    "label": "UnregisterIsNameAllowedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterIsNameAllowedDelegate(const FName OwnerName)"
  },
  {
    "label": "SanitizeName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SanitizeName(FString& NameToSanitize)"
  },
  {
    "label": "RegisterSanitizeNameDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSanitizeNameDelegate(const FName OwnerName, FSanitizeName Delegate)"
  },
  {
    "label": "UnregisterSanitizeNameDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSanitizeNameDelegate(const FName OwnerName)"
  },
  {
    "label": "NotifyBlockedByWritableFolderFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyBlockedByWritableFolderFilter()"
  },
  {
    "label": "RegisterCanMigrateAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCanMigrateAsset(const FName OwnerName, UE::AssetTools::FCanMigrateAsset Delegate)"
  },
  {
    "label": "UnregisterCanMigrateAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCanMigrateAsset(const FName OwnerName)"
  },
  {
    "label": "CanAssetBePublic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAssetBePublic(FStringView AssetPath)"
  },
  {
    "label": "RegisterCanAssetBePublic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCanAssetBePublic(const FName OwnerName, UE::AssetTools::FCanAssetBePublic Delegate)"
  },
  {
    "label": "UnregisterCanAssetBePublic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCanAssetBePublic(const FName OwnerName)"
  },
  {
    "label": "SyncBrowserToAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToAssets(const TArray<UObject*>& AssetsToSync)"
  },
  {
    "label": "SyncBrowserToAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToAssets(const TArray<FAssetData>& AssetsToSync)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(transient)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UFUNCTION(BlueprintCallable, Category = \"Editor Scripting | Asset Tools\") static TScriptInterface<IAssetTools> GetAssetTools()"
  }
]