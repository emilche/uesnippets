[
  {
    "label": "SignalDependentErleEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SignalDependentErleEstimator"
  },
  {
    "label": "SignalDependentErleEstimator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_SIGNAL_DEPENDENT_ERLE_ESTIMATOR_H_ # define MODULES_AUDIO_PROCESSING_AEC3_SIGNAL_DEPENDENT_ERLE_ESTIMATOR_H_ # include<memory> # include<vector> # include \" api / array_view . h \" # include \" api / audio / echo_canceller3_config . h \" # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" modules / audio_processing / aec3 / render_buffer . h \" # include \" modules / audio_processing / logging / apm_data_dumper . h \" namespace webrtc { class SignalDependentErleEstimator { public :)",
    "insertText": "SignalDependentErleEstimator(const EchoCanceller3Config& config, size_t num_capture_channels)"
  },
  {
    "label": "SignalDependentErleEstimator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SignalDependentErleEstimator()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Erle()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const std::array<float,kFftLengthBy2Plus1>>)",
    "insertText": "Erle(bool onset_compensated)"
  },
  {
    "label": "Dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dump(const std::unique_ptr<ApmDataDumper>& data_dumper)"
  },
  {
    "label": "ComputeNumberOfActiveFilterSections()",
    "kind": "Method",
    "detail": "Function (size_t kSubbands = 6 ; private : void)",
    "insertText": "ComputeNumberOfActiveFilterSections(const RenderBuffer& render_buffer, rtc::ArrayView<const std::vector<std::array<float, kFftLengthBy2Plus1>>> filter_frequency_responses)"
  },
  {
    "label": "UpdateCorrectionFactors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCorrectionFactors(rtc::ArrayView<const float, kFftLengthBy2Plus1> X2, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> Y2, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> E2, const std::vector<bool>& converged_filters)"
  },
  {
    "label": "ComputeEchoEstimatePerFilterSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeEchoEstimatePerFilterSection(const RenderBuffer& render_buffer, rtc::ArrayView<const std::vector<std::array<float, kFftLengthBy2Plus1>>> filter_frequency_responses)"
  },
  {
    "label": "ComputeActiveFilterSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeActiveFilterSections()"
  }
]