[
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "FMovieSceneAnimTypeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneAnimTypeID"
  },
  {
    "label": "TMovieSceneAnimTypeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneAnimTypeID"
  },
  {
    "label": "TMovieSceneAnimTypeIDContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneAnimTypeIDContainer"
  },
  {
    "label": "FTypeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypeID"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Templates / TypeHash . h \" class FString ; struct FMovieSceneAnimTypeID ; struct FMovieSceneAnimTypeID { bool)",
    "insertText": "operator(FMovieSceneAnimTypeID A, FMovieSceneAnimTypeID B)"
  },
  {
    "label": "Unique()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneAnimTypeID)",
    "insertText": "Unique()"
  },
  {
    "label": "Combine()",
    "kind": "Method",
    "detail": "Function (FMovieSceneAnimTypeID)",
    "insertText": "Combine(FMovieSceneAnimTypeID A, FMovieSceneAnimTypeID B)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (protected : FString)",
    "insertText": "LexToString(const FMovieSceneAnimTypeID&)"
  },
  {
    "label": "FMovieSceneAnimTypeID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneAnimTypeID(uint64* StaticPtr, uint32 Seed = 0) : ID(*StaticPtr ? *StaticPtr : Initialize(StaticPtr, Seed))"
  },
  {
    "label": "FMovieSceneAnimTypeID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneAnimTypeID() : ID(0)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "Initialize(uint64* StaticPtr, uint32 Seed)"
  },
  {
    "label": "GenerateHash()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GenerateHash(void* StaticPtr, uint32 Seed)"
  },
  {
    "label": "TMovieSceneAnimTypeID()",
    "kind": "Method",
    "detail": "Function (uint64 ID ; } ; template<T,uint8 Seed = 0> struct TMovieSceneAnimTypeID : FMovieSceneAnimTypeID { private : T ;)",
    "insertText": "TMovieSceneAnimTypeID() : FMovieSceneAnimTypeID(&CachedID, Seed)"
  },
  {
    "label": "GetAnimTypeID()",
    "kind": "Method",
    "detail": "Function (} uint64 CachedID ; } ; template<T,uint8 Seed> uint64 TMovieSceneAnimTypeID<T,Seed>::CachedID = 0 ; template<DataType> struct TMovieSceneAnimTypeIDContainer { FMovieSceneAnimTypeID)",
    "insertText": "GetAnimTypeID(const DataType& InPredicate)"
  },
  {
    "label": "IndexOfByKey()",
    "kind": "Method",
    "detail": "Function (int32 Index = Data .)",
    "insertText": "IndexOfByKey(InPredicate)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (FMovieSceneAnimTypeID Value = TypeIDs [ Index ] ; Lock .)",
    "insertText": "Set(0)"
  },
  {
    "label": "NewID()",
    "kind": "Method",
    "detail": "Function (FTypeID)",
    "insertText": "NewID(this, TypeIDs.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TypeIDs .)",
    "insertText": "Add(NewID)"
  },
  {
    "label": "GenerateHash()",
    "kind": "Method",
    "detail": "Function (ID =)",
    "insertText": "GenerateHash(Base, InIndex)"
  }
]