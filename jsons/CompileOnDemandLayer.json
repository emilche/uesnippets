[
  {
    "label": "CompileOnDemandLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompileOnDemandLayer"
  },
  {
    "label": "GlobalDeclMaterializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalDeclMaterializer"
  },
  {
    "label": "LogicalModuleResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LogicalModuleResources"
  },
  {
    "label": "LogicalDylibResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LogicalDylibResources"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_EXECUTIONENGINE_ORC_COMPILEONDEMANDLAYER_H # define LLVM_EXECUTIONENGINE_ORC_COMPILEONDEMANDLAYER_H # include \" IndirectionUtils . h \" # include \" LambdaResolver . h \" # include \" LogicalDylib . h \" # include \" llvm / ADT / STLExtras . h \" # include \" llvm / ExecutionEngine / SectionMemoryManager . h \" # include \" llvm / Transforms / Utils / Cloning . h \" # include<list> # include<set> # include \" llvm / Support / Debug . h \" namespace llvm { namespace orc { template<BaseLayerT,CompileCallbackMgrT,PartitioningFtor = std::function<std::set<)",
    "insertText": "Function(Function&)"
  },
  {
    "label": "GlobalDeclMaterializer()",
    "kind": "Method",
    "detail": "Function (private : class GlobalDeclMaterializer : public ValueMaterializer { public : typedef std::set<const Function*> StubSet ;)",
    "insertText": "GlobalDeclMaterializer(Module &Dst, const StubSet *StubsToClone = nullptr) : Dst(Dst), StubsToClone(StubsToClone)"
  },
  {
    "label": "materializeValueFor()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "materializeValueFor(Value *V)"
  },
  {
    "label": "cloneFunctionDecl()",
    "kind": "Method",
    "detail": "Function (auto* ClonedF =)",
    "insertText": "cloneFunctionDecl(Dst, *F)"
  },
  {
    "label": "createImplPointer()",
    "kind": "Method",
    "detail": "Function (GlobalVariable* FnBodyPtr =)",
    "insertText": "createImplPointer(*ClonedF->getType(), *ClonedF->getParent(), ClonedF->getName() + \"$orc_addr\", nullptr)"
  },
  {
    "label": "makeStub()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeStub(*ClonedF, *FnBodyPtr)"
  },
  {
    "label": "setLinkage()",
    "kind": "Method",
    "detail": "Function (ClonedF ->)",
    "insertText": "setLinkage(GlobalValue::AvailableExternallyLinkage)"
  },
  {
    "label": "addFnAttr()",
    "kind": "Method",
    "detail": "Function (ClonedF ->)",
    "insertText": "addFnAttr(Attribute::AlwaysInline)"
  },
  {
    "label": "SymbolInfo()",
    "kind": "Method",
    "detail": "Function (} return ClonedF ; } return nullptr ; } private : Module& Dst ; const StubSet* StubsToClone ; } ; typedef BaseLayerT::ModuleSetHandleT BaseLayerModuleSetHandleT ; struct LogicalModuleResources { std::shared_ptr<Module> SourceModule ; std::set<const Function*> StubsToClone ; } ; struct LogicalDylibResources { typedef std::function<)",
    "insertText": "SymbolInfo(const std::string&)"
  },
  {
    "label": "CompileOnDemandLayer()",
    "kind": "Method",
    "detail": "Function (SymbolResolverFtor ExternalSymbolResolver ; PartitioningFtor Partitioner ; } ; typedef LogicalDylib<BaseLayerT,LogicalModuleResources,LogicalDylibResources> CODLogicalDylib ; typedef CODLogicalDylib::LogicalModuleHandle LogicalModuleHandle ; typedef std::list<CODLogicalDylib> LogicalDylibList ; public : typedef LogicalDylibList::iterator ModuleSetHandleT ;)",
    "insertText": "CompileOnDemandLayer(BaseLayerT &BaseLayer, CompileCallbackMgrT &CallbackMgr, bool CloneStubsIntoPartitions) : BaseLayer(BaseLayer), CompileCallbackMgr(CallbackMgr), CloneStubsIntoPartitions(CloneStubsIntoPartitions)"
  },
  {
    "label": "addModuleSet()",
    "kind": "Method",
    "detail": "Function (} template<ModuleSetT,MemoryManagerPtrT,SymbolResolverPtrT> ModuleSetHandleT)",
    "insertText": "addModuleSet(ModuleSetT Ms, MemoryManagerPtrT MemMgr, SymbolResolverPtrT Resolver)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(MemMgr == nullptr && \"User supplied memory managers not supported with COD yet.\")"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (LogicalDylibs .)",
    "insertText": "push_back(CODLogicalDylib(BaseLayer))"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (auto& LDResources = LogicalDylibs .)",
    "insertText": "back().getDylibResources()"
  },
  {
    "label": "Resolver()",
    "kind": "Method",
    "detail": "Function (LDResources . ExternalSymbolResolver = [)",
    "insertText": "Resolver(const std::string &Name)"
  },
  {
    "label": "Partitioner()",
    "kind": "Method",
    "detail": "Function (} ; LDResources .)",
    "insertText": "Partitioner(Function &F)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (std::set<Function*> Partition ; Partition .)",
    "insertText": "insert(&F)"
  },
  {
    "label": "removeModuleSet()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeModuleSet(ModuleSetHandleT H)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (LogicalDylibs .)",
    "insertText": "erase(H)"
  },
  {
    "label": "findSymbol()",
    "kind": "Method",
    "detail": "Function (} JITSymbol)",
    "insertText": "findSymbol(StringRef Name, bool ExportedSymbolsOnly)"
  },
  {
    "label": "findSymbolIn()",
    "kind": "Method",
    "detail": "Function (} JITSymbol)",
    "insertText": "findSymbolIn(ModuleSetHandleT H, const std::string &Name, bool ExportedSymbolsOnly)"
  },
  {
    "label": "addLogicalModule()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "addLogicalModule(CODLogicalDylib &LD, std::shared_ptr<Module> SrcM)"
  },
  {
    "label": "makeAllSymbolsExternallyAccessible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeAllSymbolsExternallyAccessible(*SrcM)"
  },
  {
    "label": "createLogicalModule()",
    "kind": "Method",
    "detail": "Function (auto LMH = LD .)",
    "insertText": "createLogicalModule()"
  },
  {
    "label": "getLogicalModuleResources()",
    "kind": "Method",
    "detail": "Function (auto& LMResources = LD .)",
    "insertText": "getLogicalModuleResources(LMH)"
  },
  {
    "label": "Module()",
    "kind": "Method",
    "detail": "Function (LMResources . SourceModule = SrcM ; auto GVsAndStubsM = llvm::make_unique<)",
    "insertText": "Module((SrcM->getName() + \".globals_and_stubs\").str(), SrcM->getContext())"
  },
  {
    "label": "setDataLayout()",
    "kind": "Method",
    "detail": "Function (GVsAndStubsM ->)",
    "insertText": "setDataLayout(SrcM->getDataLayout())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ValueToValueMapTy VMap ;)",
    "insertText": "for(auto &F : *SrcM)"
  },
  {
    "label": "getCompileCallback()",
    "kind": "Method",
    "detail": "Function (auto CCInfo = CompileCallbackMgr .)",
    "insertText": "getCompileCallback(SrcM->getContext())"
  },
  {
    "label": "cloneFunctionDecl()",
    "kind": "Method",
    "detail": "Function (Function* StubF =)",
    "insertText": "cloneFunctionDecl(*GVsAndStubsM, F, &VMap)"
  },
  {
    "label": "createImplPointer()",
    "kind": "Method",
    "detail": "Function (GlobalVariable* FnBodyPtr =)",
    "insertText": "createImplPointer(*StubF->getType(), *StubF->getParent(), StubF->getName() + \"$orc_addr\", createIRTypedAddress(*StubF->getFunctionType(), CCInfo.getAddress()))"
  },
  {
    "label": "makeStub()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeStub(*StubF, *FnBodyPtr)"
  },
  {
    "label": "setCompileAction()",
    "kind": "Method",
    "detail": "Function (CCInfo .)",
    "insertText": "setCompileAction([this, &LD, LMH, &F]() { return this->extractAndCompile(LD, LMH, F); })"
  },
  {
    "label": "GDMat()",
    "kind": "Method",
    "detail": "Function (} GlobalDeclMaterializer)",
    "insertText": "GDMat(*GVsAndStubsM)"
  },
  {
    "label": "createLambdaResolver()",
    "kind": "Method",
    "detail": "Function (auto GVsAndStubsResolver =)",
    "insertText": "createLambdaResolver([&LD](const std::string &Name) { return LD.getDylibResources().ExternalSymbolResolver(Name); }, [](const std::string &Name) { return RuntimeDyld::SymbolInfo(nullptr); })"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<Module>> GVsAndStubsMSet ; GVsAndStubsMSet .)",
    "insertText": "push_back(std::move(GVsAndStubsM))"
  },
  {
    "label": "addModuleSet()",
    "kind": "Method",
    "detail": "Function (auto GVsAndStubsH = BaseLayer .)",
    "insertText": "addModuleSet(std::move(GVsAndStubsMSet), llvm::make_unique<SectionMemoryManager>(), std::move(GVsAndStubsResolver))"
  },
  {
    "label": "addToLogicalModule()",
    "kind": "Method",
    "detail": "Function (LD .)",
    "insertText": "addToLogicalModule(LMH, GVsAndStubsH)"
  },
  {
    "label": "Mangle()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "Mangle(StringRef Name, const DataLayout &DL)"
  },
  {
    "label": "MangledNameStream()",
    "kind": "Method",
    "detail": "Function (std::string MangledName ; { raw_string_ostream)",
    "insertText": "MangledNameStream(MangledName)"
  },
  {
    "label": "getNameWithPrefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getNameWithPrefix(MangledNameStream, Name, DL)"
  },
  {
    "label": "extractAndCompile()",
    "kind": "Method",
    "detail": "Function (} return MangledName ; } TargetAddress)",
    "insertText": "extractAndCompile(CODLogicalDylib &LD, LogicalModuleHandle LMH, Function &F)"
  },
  {
    "label": "Mangle()",
    "kind": "Method",
    "detail": "Function (std::string CalledFnName =)",
    "insertText": "Mangle(F.getName(), SrcM.getDataLayout())"
  },
  {
    "label": "getDylibResources()",
    "kind": "Method",
    "detail": "Function (auto Partition = LD .)",
    "insertText": "getDylibResources().Partitioner(F)"
  },
  {
    "label": "emitPartition()",
    "kind": "Method",
    "detail": "Function (auto PartitionH =)",
    "insertText": "emitPartition(LD, LMH, Partition)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TargetAddress CalledAddr = 0 ;)",
    "insertText": "for(auto *SubF : Partition)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (std::string FName = SubF ->)",
    "insertText": "getName()"
  },
  {
    "label": "findSymbolIn()",
    "kind": "Method",
    "detail": "Function (auto FnBodySym = BaseLayer .)",
    "insertText": "findSymbolIn(PartitionH, Mangle(FName, SrcM.getDataLayout()), false)"
  },
  {
    "label": "findSymbolIn()",
    "kind": "Method",
    "detail": "Function (auto FnPtrSym = BaseLayer .)",
    "insertText": "findSymbolIn(*LD.moduleHandlesBegin(LMH), Mangle(FName + \"$orc_addr\", SrcM.getDataLayout()), false)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(FnBodySym && \"Couldn't find function body.\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(FnPtrSym && \"Couldn't find function body pointer.\")"
  },
  {
    "label": "getAddress()",
    "kind": "Method",
    "detail": "Function (TargetAddress FnBodyAddr = FnBodySym .)",
    "insertText": "getAddress()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void* FnPtrAddr = reinterpret_cast<)",
    "insertText": "void(static_cast<uintptr_t>(FnPtrSym.getAddress()))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(FnPtrAddr, &FnBodyAddr, sizeof(uintptr_t))"
  },
  {
    "label": "emitPartition()",
    "kind": "Method",
    "detail": "Function (} return CalledAddr ; } template<PartitionT> BaseLayerModuleSetHandleT)",
    "insertText": "emitPartition(CODLogicalDylib &LD, LogicalModuleHandle LMH, const PartitionT &Partition)"
  },
  {
    "label": "Module()",
    "kind": "Method",
    "detail": "Function (} auto M = llvm::make_unique<)",
    "insertText": "Module(NewName, SrcM.getContext())"
  },
  {
    "label": "setDataLayout()",
    "kind": "Method",
    "detail": "Function (M ->)",
    "insertText": "setDataLayout(SrcM.getDataLayout())"
  },
  {
    "label": "GDM()",
    "kind": "Method",
    "detail": "Function (ValueToValueMapTy VMap ; GlobalDeclMaterializer)",
    "insertText": "GDM(*M, &LMResources.StubsToClone)"
  },
  {
    "label": "SectionMemoryManager()",
    "kind": "Method",
    "detail": "Function (auto MemMgr = llvm::make_unique<)",
    "insertText": "SectionMemoryManager()"
  },
  {
    "label": "createLambdaResolver()",
    "kind": "Method",
    "detail": "Function (auto Resolver =)",
    "insertText": "createLambdaResolver([this, &LD, LMH](const std::string &Name) { if (auto Symbol = LD.findSymbolInternally(LMH, Name)) return RuntimeDyld::SymbolInfo(Symbol.getAddress(), Symbol.getFlags()); return LD.getDylibResources().ExternalSymbolResolver(Name); }, [this, &LD, LMH](const std::string &Name) { if (auto Symbol = LD.findSymbolInternally(LMH, Name)) return RuntimeDyld::SymbolInfo(Symbol.getAddress(), Symbol.getFlags()); return RuntimeDyld::SymbolInfo(nullptr); })"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<Module>> PartMSet ; PartMSet .)",
    "insertText": "push_back(std::move(M))"
  }
]