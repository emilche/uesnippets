[
  {
    "label": "State",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "State"
  },
  {
    "label": "SendConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SendConfig"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_CEFTESTS_TEST_REQUEST_H_ # define CEF_TESTS_CEFTESTS_TEST_REQUEST_H_ # pragma once # include<string> # include \" include / base / cef_callback . h \" # include \" include / cef_cookie . h \" # include \" include / cef_frame . h \" # include \" include / cef_request . h \" # include \" include / cef_request_context . h \" # include \" include / cef_resource_handler . h \" # include \" include / cef_response . h \" namespace test_request { struct State { public : int upload_progress_ct_ = 0 ; int download_progress_ct_ = 0 ; int download_data_ct_ = 0 ; int auth_credentials_ct_ = 0 ; int request_complete_ct_ = 0 ; int64 upload_total_ = 0 ; int64 download_total_ = 0 ; std::string download_data_ ; CefRefPtr<CefRequest> request_ ; cef_urlrequest_status_t status_ = UR_UNKNOWN ; cef_errorcode_t error_code_ = ERR_NONE ; CefRefPtr<CefResponse> response_ ; bool response_was_cached_ = false ; } ; using RequestDoneCallback = base::OnceCallback<)",
    "insertText": "void(const State& state)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (struct SendConfig { CefRefPtr<CefFrame> frame_ ; CefRefPtr<CefRequestContext> request_context_ ; CefRefPtr<CefRequest> request_ ; bool has_credentials_ = false ; std::string username_ ; std::string password_ ; } ; void)",
    "insertText": "Send(const SendConfig& config, RequestDoneCallback callback)"
  },
  {
    "label": "GetPathURL()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetPathURL(const std::string& url)"
  },
  {
    "label": "CreateResourceHandler()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefResourceHandler>)",
    "insertText": "CreateResourceHandler(CefRefPtr<CefResponse> response, const std::string& response_data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using CookieVector = std::vector<CefCookie> ; using CookieDoneCallback = base::OnceCallback<)",
    "insertText": "void(const CookieVector& cookies)"
  },
  {
    "label": "GetAllCookies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllCookies(CefRefPtr<CefCookieManager> manager, bool deleteCookies, CookieDoneCallback callback)"
  },
  {
    "label": "GetUrlCookies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUrlCookies(CefRefPtr<CefCookieManager> manager, const CefString& url, bool includeHttpOnly, bool deleteCookies, CookieDoneCallback callback)"
  }
]