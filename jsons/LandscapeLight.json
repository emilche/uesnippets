[
  {
    "label": "FLightmassExporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmassExporter"
  },
  {
    "label": "FShadowMapData2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMapData2D"
  },
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "FQuantizedLightmapData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedLightmapData"
  },
  {
    "label": "FLandscapeStaticLightingTextureMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeStaticLightingTextureMapping"
  },
  {
    "label": "FLandscapeStaticLightingGlobalVolumeMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeStaticLightingGlobalVolumeMapping"
  },
  {
    "label": "FLandscapeStaticLightingMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeStaticLightingMesh"
  },
  {
    "label": "FLandscapeStaticLightingTextureMapping()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" PixelFormat . h \" # include \" StaticLighting . h \" # include \" RenderUtils . h \" class FLightmassExporter ; class FShadowMapData2D ; class ULandscapeComponent ; class ULevel ; class ULightComponent ; struct FQuantizedLightmapData ; class FLandscapeStaticLightingTextureMapping : public FStaticLightingTextureMapping { public :)",
    "insertText": "FLandscapeStaticLightingTextureMapping(ULandscapeComponent* InPrimitive,FStaticLightingMesh* InMesh,int32 InLightMapWidth,int32 InLightMapHeight,bool bPerformFullQualityRebuild)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(FQuantizedLightmapData* QuantizedData, const TMap<ULightComponent*,FShadowMapData2D*>& ShadowMapData, const FStaticLightingBuildContext* LightingContext)"
  },
  {
    "label": "ExportMapping()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "ExportMapping(FLightmassExporter* Exporter)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "FLandscapeStaticLightingTextureMapping()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FLandscapeStaticLightingTextureMapping(const FArchive& Ar)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDescription()"
  },
  {
    "label": "FLandscapeStaticLightingGlobalVolumeMapping()",
    "kind": "Method",
    "detail": "Function (} private : ULandscapeComponent* LandscapeComponent ; } ; class FLandscapeStaticLightingGlobalVolumeMapping : public FLandscapeStaticLightingTextureMapping { public :)",
    "insertText": "FLandscapeStaticLightingGlobalVolumeMapping(ULandscapeComponent* InPrimitive,FStaticLightingMesh* InMesh,int32 InLightMapWidth,int32 InLightMapHeight,bool bPerformFullQualityRebuild)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(struct FQuantizedLightmapData* QuantizedData, const TMap<ULightComponent*,class FShadowMapData2D*>& ShadowMapData, const FStaticLightingBuildContext* LightingContext)"
  },
  {
    "label": "DebugThisMapping()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR bool)",
    "insertText": "DebugThisMapping()"
  },
  {
    "label": "IsValidMapping()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsValidMapping()"
  },
  {
    "label": "FLandscapeStaticLightingMesh()",
    "kind": "Method",
    "detail": "Function (} } ; class FLandscapeStaticLightingMesh : public FStaticLightingMesh { public :)",
    "insertText": "FLandscapeStaticLightingMesh(ULandscapeComponent* InComponent, const TArray<ULightComponent*>& InRelevantLights, int32 InExpandQuadsX, int32 InExpandQuadsY, float LightMapRatio, int32 InLOD)"
  },
  {
    "label": "FLandscapeStaticLightingMesh()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLandscapeStaticLightingMesh()"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTriangle(int32 TriangleIndex,FStaticLightingVertex& OutV0,FStaticLightingVertex& OutV1,FStaticLightingVertex& OutV2)"
  },
  {
    "label": "GetTriangleIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTriangleIndices(int32 TriangleIndex,int32& OutI0,int32& OutI1,int32& OutI2)"
  },
  {
    "label": "IntersectLightRay()",
    "kind": "Method",
    "detail": "Function (FLightRayIntersection)",
    "insertText": "IntersectLightRay(const FVector& Start,const FVector& End,bool bFindNearestIntersection)"
  },
  {
    "label": "IsInstancedMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInstancedMesh()"
  },
  {
    "label": "GetHeightmapData()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "GetHeightmapData(int32 InLOD, int32 GeometryLOD)"
  },
  {
    "label": "GetStaticLightingVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStaticLightingVertex(int32 VertexIndex, FStaticLightingVertex& OutVertex)"
  },
  {
    "label": "GetTerrainExpandPatchCount()",
    "kind": "Method",
    "detail": "Function (ULandscapeComponent* LandscapeComponent ; FTransform LocalToWorld ; int32 ComponentSizeQuads ; float LightMapRatio ; int32 ExpandQuadsX ; int32 ExpandQuadsY ; TArray<FColor> HeightData ; int32 NumVertices ; int32 NumQuads ; float UVFactor ; bool bReverseWinding ; class FLightmassExporter ; # if WITH_EDITOR public : TMap<FIntPoint,FColor> LandscapeUpscaleHeightDataCache ; TMap<FIntPoint,FColor> LandscapeUpscaleXYOffsetDataCache ; # endif } ; namespace { float)",
    "insertText": "GetTerrainExpandPatchCount(float LightMapRes, int32& X, int32& Y, int32 ComponentSize, int32 LightmapSize, int32& DesiredSize, uint32 LightingLOD)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 PixelPaddingX = GPixelFormats [ PF_DXT1 ] . BlockSizeX ; const int32 PixelPaddingY = GPixelFormats [ PF_DXT1 ] . BlockSizeY ; const int32 PatchExpandCountX = static_cast<)",
    "insertText": "int32(LightMapRes >= 1.f ? PixelPaddingX / LightMapRes : PixelPaddingX)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 PatchExpandCountY = static_cast<)",
    "insertText": "int32(LightMapRes >= 1.f ? PixelPaddingY / LightMapRes : PixelPaddingY)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (X = FMath::Max<)",
    "insertText": "int32(1, PatchExpandCountX >> LightingLOD)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (Y = FMath::Max<)",
    "insertText": "int32(1, PatchExpandCountY >> LightingLOD)"
  },
  {
    "label": "DesiredSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DesiredSize(LightMapRes >= 1.f) ? FMath::Min<int32>((int32)((ComponentSize + 1) * LightMapRes), 4096) : FMath::Min<int32>((int32)((LightmapSize)* LightMapRes), 4096)"
  },
  {
    "label": "CurrentSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CurrentSize(LightMapRes >= 1.f) ? FMath::Min<int32>((int32)((2 * (X << LightingLOD) + ComponentSize + 1) * LightMapRes), 4096) : FMath::Min<int32>((int32)((2 * (X << LightingLOD) + LightmapSize) * LightMapRes), 4096)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 PriorSize = DesiredSize ;)",
    "insertText": "while(DesiredSize > 0)"
  },
  {
    "label": "DesiredSize()",
    "kind": "Method",
    "detail": "Function (PriorSize = DesiredSize ; DesiredSize =)",
    "insertText": "DesiredSize(DesiredSize & ~(DesiredSize - 1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} DesiredSize = PriorSize<<1 ;)",
    "insertText": "if(CurrentSize * CurrentSize <= ((PriorSize * PriorSize) << 1))"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (DesiredSize = PriorSize ; } } const float DestSize =)",
    "insertText": "Floor(static_cast<float>(DesiredSize) / CurrentSize * (ComponentSize*LightMapRes))"
  },
  {
    "label": "DestSize()",
    "kind": "Method",
    "detail": "Function (const float LightMapRatio =)",
    "insertText": "DestSize(ComponentSize*LightMapRes)"
  }
]