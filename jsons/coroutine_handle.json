[
  {
    "label": "_Promise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Promise"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "hash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hash"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___COROUTINE_COROUTINE_HANDLE_H # define _LIBCPP___COROUTINE_COROUTINE_HANDLE_H # include<__assert> # include<__config> # include<__functional / hash . h> # include<__memory / addressof . h> # include<compare> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_CXX20_COROUTINES)"
  },
  {
    "label": "coroutine_handle()",
    "kind": "Method",
    "detail": "Function (template<> struct _LIBCPP_TEMPLATE_VIS coroutine_handle<void> { public : _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "coroutine_handle()"
  },
  {
    "label": "coroutine_handle()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "coroutine_handle(nullptr_t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI coroutine_handle&)",
    "insertText": "operator(nullptr_t)"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (__handle_ = nullptr ; return* this ; } _LIBCPP_HIDE_FROM_ABI void*)",
    "insertText": "address()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (coroutine_handle __tmp ; __tmp . __handle_ = __addr ; return __tmp ; } _LIBCPP_HIDE_FROM_ABI operator)",
    "insertText": "bool()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__is_suspended(), \"done() can be called only on suspended coroutines\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "operator()()"
  },
  {
    "label": "resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resume()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__is_suspended(), \"resume() can be called only on suspended coroutines\")"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(!done(), \"resume() has undefined behavior when the coroutine is done\")"
  },
  {
    "label": "__builtin_coro_resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__builtin_coro_resume(__handle_)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "destroy()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__is_suspended(), \"destroy() can be called only on suspended coroutines\")"
  },
  {
    "label": "__builtin_coro_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__builtin_coro_destroy(__handle_)"
  },
  {
    "label": "__is_suspended()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "__is_suspended()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI strong_ordering)",
    "insertText": "operator(coroutine_handle<> __x, coroutine_handle<> __y)"
  },
  {
    "label": "from_promise()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI coroutine_handle)",
    "insertText": "from_promise(_Promise& __promise)"
  },
  {
    "label": "__builtin_coro_promise()",
    "kind": "Method",
    "detail": "Function (using _RawPromise = remove_cv<_Promise>::type ; coroutine_handle __tmp ; __tmp . __handle_ =)",
    "insertText": "__builtin_coro_promise(_VSTD::addressof(const_cast<_RawPromise&>(__promise)), alignof(_Promise), true)"
  },
  {
    "label": "promise()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _Promise&)",
    "insertText": "promise()"
  }
]