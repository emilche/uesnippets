[
  {
    "label": "GJKContactPoint2()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / CastingUtilities . h \" # include \" Chaos / Core . h \" # include \" Chaos / ImplicitFwd . h \" # include \" Chaos / Collision / ContactPoint . h \" # include \" Chaos / GJK . h \" namespace Chaos { template<GeometryA,GeometryB> FContactPoint)",
    "insertText": "GJKContactPoint2(const GeometryA& A, const GeometryB& B, const FRigidTransform3& ATM, const FRigidTransform3& BToATM, const FVec3& InitialDir)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FContactPoint Contact ; FReal Penetration ; FVec3 ClosestA,ClosestBInA,Normal ; int32 ClosestVertexIndexA,ClosestVertexIndexB ; const FReal Epsilon = 3 . e - 3 f ;)",
    "insertText": "if(GJKPenetration<true>(A, B, BToATM, Penetration, ClosestA, ClosestBInA, Normal, ClosestVertexIndexA, ClosestVertexIndexB, FReal(0), FReal(0), InitialDir, Epsilon))"
  },
  {
    "label": "InverseTransformPosition()",
    "kind": "Method",
    "detail": "Function (Contact . ShapeContactPoints [ 0 ] = ClosestA ; Contact . ShapeContactPoints [ 1 ] = BToATM .)",
    "insertText": "InverseTransformPosition(ClosestBInA)"
  },
  {
    "label": "InverseTransformVector()",
    "kind": "Method",
    "detail": "Function (Contact . ShapeContactNormal = - BToATM .)",
    "insertText": "InverseTransformVector(Normal)"
  },
  {
    "label": "GJKContactPoint()",
    "kind": "Method",
    "detail": "Function (Contact . Phi = - Penetration ; } return Contact ; } template<GeometryA,GeometryB> FContactPoint)",
    "insertText": "GJKContactPoint(const GeometryA& A, const FRigidTransform3& ATM, const GeometryB& B, const FRigidTransform3& BTM, const FVec3& InitialDir)"
  },
  {
    "label": "GetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (const FRigidTransform3 BToATM = BTM .)",
    "insertText": "GetRelativeTransform(ATM)"
  }
]