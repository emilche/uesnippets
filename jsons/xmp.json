[
  {
    "label": "xmp_channel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "xmp_channel"
  },
  {
    "label": "xmp_pattern",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "xmp_pattern"
  },
  {
    "label": "xmp_event",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "xmp_event"
  },
  {
    "label": "xmp_track",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "xmp_track"
  },
  {
    "label": "xmp_envelope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "xmp_envelope"
  },
  {
    "label": "xmp_instrument",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "xmp_instrument"
  },
  {
    "label": "xmp_subinstrument",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "xmp_subinstrument"
  },
  {
    "label": "xmp_sample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "xmp_sample"
  },
  {
    "label": "xmp_sequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "xmp_sequence"
  },
  {
    "label": "xmp_module",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "xmp_module"
  },
  {
    "label": "xmp_test_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "xmp_test_info"
  },
  {
    "label": "xmp_module_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "xmp_module_info"
  },
  {
    "label": "xmp_frame_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "xmp_frame_info"
  },
  {
    "label": "xmp_channel_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "xmp_channel_info"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef XMP_H # define XMP_H # ifdef __cplusplus \" C \" { # endif # define XMP_VERSION \" 4 . 2 . 6 \" # define XMP_VERCODE 0 x040206 # define XMP_VER_MAJOR 4 # define XMP_VER_MINOR 2 # define XMP_VER_RELEASE 6 # if)",
    "insertText": "defined(_WIN32) && !defined(__CYGWIN__) # if defined(BUILDING_STATIC) # define EXPORT # elif defined(BUILDING_DLL) # define EXPORT __declspec(dllexport) # else # define EXPORT __declspec(dllimport) # endif #elif __GNUC__ >= 4 || defined(__HP_cc) # define EXPORT __attribute__((visibility (\"default\"))) #elif defined(__SUNPRO_C) # define EXPORT __global #else # define EXPORT #endif #define XMP_NAME_SIZE 64 #define XMP_KEY_OFF 0x81 #define XMP_KEY_CUT 0x82 #define XMP_KEY_FADE 0x83 #define XMP_FORMAT_8BIT (1 << 0) #define XMP_FORMAT_UNSIGNED (1 << 1) #define XMP_FORMAT_MONO (1 << 2) #define XMP_PLAYER_AMP 0 #define XMP_PLAYER_MIX 1 #define XMP_PLAYER_INTERP 2 #define XMP_PLAYER_DSP 3 #define XMP_PLAYER_FLAGS 4 #define XMP_PLAYER_CFLAGS 5 #define XMP_PLAYER_SMPCTL 6 #define XMP_PLAYER_VOLUME 7 #define XMP_PLAYER_STATE 8 #define XMP_PLAYER_SMIX_VOLUME 9 #define XMP_INTERP_NEAREST 0 #define XMP_INTERP_LINEAR 1 #define XMP_INTERP_SPLINE 2 #define XMP_DSP_LOWPASS (1 << 0) #define XMP_DSP_ALL (XMP_DSP_LOWPASS) #define XMP_STATE_UNLOADED 0 #define XMP_STATE_LOADED 1 #define XMP_STATE_PLAYING 2 #define XMP_FLAGS_VBLANK (1 << 0) #define XMP_FLAGS_FX9BUG (1 << 1) #define XMP_FLAGS_FIXLOOP (1 << 2) #define XMP_SMPCTL_SKIP (1 << 0) #define XMP_MAX_KEYS 121 #define XMP_MAX_ENV_POINTS 32 #define XMP_MAX_MOD_LENGTH 256 #define XMP_MAX_CHANNELS 64 #define XMP_MAX_SRATE 49170 #define XMP_MIN_SRATE 4000 #define XMP_MIN_BPM 20 #define XMP_MAX_FRAMESIZE (5 * XMP_MAX_SRATE * 2 / XMP_MIN_BPM)"
  },
  {
    "label": "XMP_CHANNEL_SYNTH()",
    "kind": "Method",
    "detail": "Function (int pan ; int vol ; # define)",
    "insertText": "XMP_CHANNEL_SYNTH(1 << 0) #define XMP_CHANNEL_MUTE (1 << 1)"
  },
  {
    "label": "XMP_ENVELOPE_ON()",
    "kind": "Method",
    "detail": "Function (} ; struct xmp_pattern { int rows ; int index [ 1 ] ; } ; struct xmp_event { unsigned char note ; unsigned char ins ; unsigned char vol ; unsigned char fxt ; unsigned char fxp ; unsigned char f2t ; unsigned char f2p ; unsigned char _flag ; } ; struct xmp_track { int rows ; struct xmp_event event [ 1 ] ; } ; struct xmp_envelope { # define)",
    "insertText": "XMP_ENVELOPE_ON(1 << 0) #define XMP_ENVELOPE_SUS (1 << 1) #define XMP_ENVELOPE_LOOP (1 << 2) #define XMP_ENVELOPE_FLT (1 << 3) #define XMP_ENVELOPE_SLOOP (1 << 4) #define XMP_ENVELOPE_CARRY (1 << 5)"
  },
  {
    "label": "XMP_SAMPLE_16BIT()",
    "kind": "Method",
    "detail": "Function (int npt ; int scl ; int sus ; int sue ; int lps ; int lpe ; short data [ XMP_MAX_ENV_POINTS* 2 ] ; } ; struct xmp_instrument { char name [ 3 2 ] ; int vol ; int nsm ; int rls ; struct xmp_envelope aei ; struct xmp_envelope pei ; struct xmp_envelope fei ; struct { unsigned char ins ; signed char xpo ; } map [ XMP_MAX_KEYS ] ; struct xmp_subinstrument { int vol ; int gvl ; int pan ; int xpo ; int fin ; int vwf ; int vde ; int vra ; int vsw ; int rvv ; int sid ; # define XMP_INST_NNA_CUT 0 x00 # define XMP_INST_NNA_CONT 0 x01 # define XMP_INST_NNA_OFF 0 x02 # define XMP_INST_NNA_FADE 0 x03 int nna ; # define XMP_INST_DCT_OFF 0 x00 # define XMP_INST_DCT_NOTE 0 x01 # define XMP_INST_DCT_SMP 0 x02 # define XMP_INST_DCT_INST 0 x03 int dct ; # define XMP_INST_DCA_CUT XMP_INST_NNA_CUT # define XMP_INST_DCA_OFF XMP_INST_NNA_OFF # define XMP_INST_DCA_FADE XMP_INST_NNA_FADE int dca ; int ifc ; int ifr ; }* sub ; void* extra ; } ; struct xmp_sample { char name [ 3 2 ] ; int len ; int lps ; int lpe ; # define)",
    "insertText": "XMP_SAMPLE_16BIT(1 << 0) #define XMP_SAMPLE_LOOP (1 << 1) #define XMP_SAMPLE_LOOP_BIDIR (1 << 2) #define XMP_SAMPLE_LOOP_REVERSE (1 << 3) #define XMP_SAMPLE_LOOP_FULL (1 << 4) #define XMP_SAMPLE_SYNTH (1 << 15)"
  },
  {
    "label": "xmp_create_context()",
    "kind": "Method",
    "detail": "Function (unsigned char* data ; } ; struct xmp_sequence { int entry_point ; int duration ; } ; struct xmp_module { char name [ XMP_NAME_SIZE ] ; char type [ XMP_NAME_SIZE ] ; int pat ; int trk ; int chn ; int ins ; int smp ; int spd ; int bpm ; int len ; int rst ; int gvl ; struct xmp_pattern** xxp ; struct xmp_track** xxt ; struct xmp_instrument* xxi ; struct xmp_sample* xxs ; struct xmp_channel xxc [ 6 4 ] ; unsigned char xxo [ XMP_MAX_MOD_LENGTH ] ; } ; struct xmp_test_info { char name [ XMP_NAME_SIZE ] ; char type [ XMP_NAME_SIZE ] ; } ; # define XMP_PERIOD_BASE 6 8 4 7 struct xmp_module_info { unsigned char md5 [ 1 6 ] ; int vol_base ; struct xmp_module* mod ; char* comment ; int num_sequences ; struct xmp_sequence* seq_data ; } ; struct xmp_frame_info { int pos ; int pattern ; int row ; int num_rows ; int frame ; int speed ; int bpm ; int time ; int total_time ; int frame_time ; void* buffer ; int buffer_size ; int total_size ; int volume ; int loop_count ; int virt_channels ; int virt_used ; int sequence ; struct xmp_channel_info { unsigned int period ; unsigned int position ; short pitchbend ; unsigned char note ; unsigned char instrument ; unsigned char sample ; unsigned char volume ; unsigned char pan ; unsigned char reserved ; struct xmp_event event ; } channel_info [ XMP_MAX_CHANNELS ] ; } ; typedef char* xmp_context ; EXPORT const char* xmp_version ; EXPORT const unsigned int xmp_vercode ; EXPORT xmp_context)",
    "insertText": "xmp_create_context(void)"
  },
  {
    "label": "xmp_free_context()",
    "kind": "Method",
    "detail": "Function (EXPORT void)",
    "insertText": "xmp_free_context(xmp_context)"
  },
  {
    "label": "xmp_test_module()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_test_module(char *, struct xmp_test_info *)"
  },
  {
    "label": "xmp_load_module()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_load_module(xmp_context, char *)"
  },
  {
    "label": "xmp_scan_module()",
    "kind": "Method",
    "detail": "Function (EXPORT void)",
    "insertText": "xmp_scan_module(xmp_context)"
  },
  {
    "label": "xmp_release_module()",
    "kind": "Method",
    "detail": "Function (EXPORT void)",
    "insertText": "xmp_release_module(xmp_context)"
  },
  {
    "label": "xmp_start_player()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_start_player(xmp_context, int, int)"
  },
  {
    "label": "xmp_play_frame()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_play_frame(xmp_context)"
  },
  {
    "label": "xmp_play_buffer()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_play_buffer(xmp_context, void *, int, int)"
  },
  {
    "label": "xmp_get_frame_info()",
    "kind": "Method",
    "detail": "Function (EXPORT void)",
    "insertText": "xmp_get_frame_info(xmp_context, struct xmp_frame_info *)"
  },
  {
    "label": "xmp_end_player()",
    "kind": "Method",
    "detail": "Function (EXPORT void)",
    "insertText": "xmp_end_player(xmp_context)"
  },
  {
    "label": "xmp_inject_event()",
    "kind": "Method",
    "detail": "Function (EXPORT void)",
    "insertText": "xmp_inject_event(xmp_context, int, struct xmp_event *)"
  },
  {
    "label": "xmp_get_module_info()",
    "kind": "Method",
    "detail": "Function (EXPORT void)",
    "insertText": "xmp_get_module_info(xmp_context, struct xmp_module_info *)"
  },
  {
    "label": "xmp_get_format_list()",
    "kind": "Method",
    "detail": "Function (EXPORT char**)",
    "insertText": "xmp_get_format_list(void)"
  },
  {
    "label": "xmp_next_position()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_next_position(xmp_context)"
  },
  {
    "label": "xmp_prev_position()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_prev_position(xmp_context)"
  },
  {
    "label": "xmp_set_position()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_set_position(xmp_context, int)"
  },
  {
    "label": "xmp_stop_module()",
    "kind": "Method",
    "detail": "Function (EXPORT void)",
    "insertText": "xmp_stop_module(xmp_context)"
  },
  {
    "label": "xmp_restart_module()",
    "kind": "Method",
    "detail": "Function (EXPORT void)",
    "insertText": "xmp_restart_module(xmp_context)"
  },
  {
    "label": "xmp_seek_time()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_seek_time(xmp_context, int)"
  },
  {
    "label": "xmp_channel_mute()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_channel_mute(xmp_context, int, int)"
  },
  {
    "label": "xmp_channel_vol()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_channel_vol(xmp_context, int, int)"
  },
  {
    "label": "xmp_set_player()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_set_player(xmp_context, int, int)"
  },
  {
    "label": "xmp_get_player()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_get_player(xmp_context, int)"
  },
  {
    "label": "xmp_set_instrument_path()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_set_instrument_path(xmp_context, char *)"
  },
  {
    "label": "xmp_load_module_from_memory()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_load_module_from_memory(xmp_context, void *, long)"
  },
  {
    "label": "xmp_start_smix()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_start_smix(xmp_context, int, int)"
  },
  {
    "label": "xmp_end_smix()",
    "kind": "Method",
    "detail": "Function (EXPORT void)",
    "insertText": "xmp_end_smix(xmp_context)"
  },
  {
    "label": "xmp_smix_play_instrument()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_smix_play_instrument(xmp_context, int, int, int, int)"
  },
  {
    "label": "xmp_smix_play_sample()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_smix_play_sample(xmp_context, int, int, int, int)"
  },
  {
    "label": "xmp_smix_channel_pan()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_smix_channel_pan(xmp_context, int, int)"
  },
  {
    "label": "xmp_smix_load_sample()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_smix_load_sample(xmp_context, int, char *)"
  },
  {
    "label": "xmp_smix_release_sample()",
    "kind": "Method",
    "detail": "Function (EXPORT int)",
    "insertText": "xmp_smix_release_sample(xmp_context, int)"
  }
]