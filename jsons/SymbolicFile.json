[
  {
    "label": "content_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "content_type"
  },
  {
    "label": "content_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "content_iterator"
  },
  {
    "label": "SymbolicFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SymbolicFile"
  },
  {
    "label": "BasicSymbolRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicSymbolRef"
  },
  {
    "label": "Flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flags"
  },
  {
    "label": "DataRefImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_OBJECT_SYMBOLICFILE_H # define LLVM_OBJECT_SYMBOLICFILE_H # include \" llvm / Object / Binary . h \" namespace llvm { namespace object { union DataRefImpl { struct { uint32_t a,b ; } d ; uintptr_t p ;)",
    "insertText": "DataRefImpl()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(this, 0, sizeof(DataRefImpl))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "operator(const DataRefImpl &a, const DataRefImpl &b)"
  },
  {
    "label": "content_iterator()",
    "kind": "Method",
    "detail": "Function (} template<class content_type> class content_iterator { content_type Current ; public : using iterator_category = std::forward_iterator_tag ; using value_type = content_type ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ;)",
    "insertText": "content_iterator(content_type symb) : Current(symb)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const content_type*)",
    "insertText": "operator()"
  },
  {
    "label": "moveNext()",
    "kind": "Method",
    "detail": "Function (Current .)",
    "insertText": "moveNext()"
  },
  {
    "label": "BasicSymbolRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BasicSymbolRef(DataRefImpl SymbolP, const SymbolicFile *Owner)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const BasicSymbolRef &Other)"
  },
  {
    "label": "printName()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "printName(raw_ostream &OS)"
  },
  {
    "label": "getFlags()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getFlags()"
  },
  {
    "label": "getRawDataRefImpl()",
    "kind": "Method",
    "detail": "Function (DataRefImpl)",
    "insertText": "getRawDataRefImpl()"
  },
  {
    "label": "getObject()",
    "kind": "Method",
    "detail": "Function (const SymbolicFile*)",
    "insertText": "getObject()"
  },
  {
    "label": "SymbolicFile()",
    "kind": "Method",
    "detail": "Function (} ; typedef content_iterator<BasicSymbolRef> basic_symbol_iterator ; class SymbolicFile : public Binary { public : ~)",
    "insertText": "SymbolicFile()"
  },
  {
    "label": "SymbolicFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SymbolicFile(unsigned int Type, MemoryBufferRef Source)"
  },
  {
    "label": "moveSymbolNext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveSymbolNext(DataRefImpl &Symb)"
  },
  {
    "label": "printSymbolName()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "printSymbolName(raw_ostream &OS, DataRefImpl Symb)"
  },
  {
    "label": "getSymbolFlags()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getSymbolFlags(DataRefImpl Symb)"
  },
  {
    "label": "symbol_begin_impl()",
    "kind": "Method",
    "detail": "Function (basic_symbol_iterator)",
    "insertText": "symbol_begin_impl()"
  },
  {
    "label": "symbol_end_impl()",
    "kind": "Method",
    "detail": "Function (basic_symbol_iterator)",
    "insertText": "symbol_end_impl()"
  },
  {
    "label": "symbol_begin()",
    "kind": "Method",
    "detail": "Function (basic_symbol_iterator)",
    "insertText": "symbol_begin()"
  },
  {
    "label": "symbol_end()",
    "kind": "Method",
    "detail": "Function (} basic_symbol_iterator)",
    "insertText": "symbol_end()"
  },
  {
    "label": "symbols()",
    "kind": "Method",
    "detail": "Function (} typedef iterator_range<basic_symbol_iterator> basic_symbol_iterator_range ; basic_symbol_iterator_range)",
    "insertText": "symbols()"
  },
  {
    "label": "createSymbolicFile()",
    "kind": "Method",
    "detail": "Function (} ErrorOr<std::unique_ptr<SymbolicFile>>)",
    "insertText": "createSymbolicFile(MemoryBufferRef Object, sys::fs::file_magic Type, LLVMContext *Context)"
  },
  {
    "label": "createSymbolicFile()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<SymbolicFile>>)",
    "insertText": "createSymbolicFile(MemoryBufferRef Object)"
  },
  {
    "label": "createSymbolicFile()",
    "kind": "Method",
    "detail": "Function (} ErrorOr<OwningBinary<SymbolicFile>>)",
    "insertText": "createSymbolicFile(StringRef ObjectPath)"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "classof(const Binary *v)"
  },
  {
    "label": "BasicSymbolRef()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "BasicSymbolRef(DataRefImpl SymbolP, const SymbolicFile *Owner) : SymbolPimpl(SymbolP), OwningObject(Owner)"
  }
]