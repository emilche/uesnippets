[
  {
    "label": "Context",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Context"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Module"
  },
  {
    "label": "Environment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Environment"
  },
  {
    "label": "SpawnFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SpawnFlags"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" LC_FilesystemTypes . h \" # include \" LC_StrongTypedef . h \" namespace Process { struct Context ; struct Module { Filesystem::Path fullPath ; void* baseAddress ; uint32_t sizeOfImage ; } ; struct Environment { size_t size ; void* data ; } ; struct SpawnFlags { enum Enum : uint32_t { NONE = 0 u,REDIRECT_STDOUT = 1 u<<0 u,NO_WINDOW = 1 u<<1 u,SUSPENDED = 1 u<<2 u } ; } ; typedef StrongTypedef<HANDLE> Handle ; typedef StrongTypedef<DWORD> Id ; const Handle INVALID_HANDLE =)",
    "insertText": "Handle(INVALID_HANDLE_VALUE)"
  }
]