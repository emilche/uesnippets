[
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BuildPatchServicesPrivate . h \" # include \" HAL / PlatformTime . h \" # include \" HAL / PlatformProcess . h \" # include \" Misc / AutomationTest . h \" namespace BuildPatchTestHelpers { template<T1,T2> bool)",
    "insertText": "TestEqual(const FString& Description, T1 Expression, T2 Expected, FAutomationSpecBase* This)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (This ->)",
    "insertText": "TestEqual(Description, Expression, Expected)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (This ->)",
    "insertText": "TestNotEqual(Description, Expression, Expected)"
  },
  {
    "label": "TestNull()",
    "kind": "Method",
    "detail": "Function (This ->)",
    "insertText": "TestNull(Description, Expression)"
  },
  {
    "label": "TestNotNull()",
    "kind": "Method",
    "detail": "Function (This ->)",
    "insertText": "TestNotNull(Description, Expression)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (const double TimeoutEnd =)",
    "insertText": "Seconds()"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(0)"
  },
  {
    "label": "TestResult()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TestResult()"
  },
  {
    "label": "_TEST_EQUAL()",
    "kind": "Method",
    "detail": "Function (} } # if WITH_DEV_AUTOMATION_TESTS # define)",
    "insertText": "_TEST_EQUAL(text, expression, expected) \\ BuildPatchTestHelpers::TestEqual(text, expression, expected, this) #define _TEST_NOT_EQUAL(text, expression, expected) \\ BuildPatchTestHelpers::TestNotEqual(text, expression, expected, this) #define _TEST_NULL(text, expression) \\ BuildPatchTestHelpers::TestNull(text, expression, this) #define _TEST_NOT_NULL(text, expression) \\ BuildPatchTestHelpers::TestNotNull(text, expression, this) #define TEST_EQUAL(expression, expected) \\ _TEST_EQUAL(TEXT(#expression), expression, expected) #define TEST_NOT_EQUAL(expression, expected) \\ _TEST_NOT_EQUAL(TEXT(#expression), expression, expected) #define TEST_TRUE(expression) \\ TEST_EQUAL(expression, true) #define TEST_FALSE(expression) \\ TEST_EQUAL(expression, false) #define TEST_NULL(expression) \\ _TEST_NULL(TEXT(#expression), expression) #define TEST_NOT_NULL(expression) \\ _TEST_NOT_NULL(TEXT(#expression), expression) #define TEST_BECOMES_TRUE(expression, timeout) \\ BuildPatchTestHelpers::WaitUntilTrue([this](){ return expression; }, [this](){ return TEST_EQUAL(expression, true); }, timeout) #define MOCK_FUNC_NOT_IMPLEMENTED(funcname) \\ UE_LOG(LogBuildPatchServices, Error, TEXT(funcname) TEXT(\": Called but there is no implementation.\")) #define ARRAY(Type, ...) TArray<Type>({ __VA_ARGS__ }) #define ARRAYU64(...) ARRAY(uint64, __VA_ARGS__) template<typename ElementType> bool operator==(const TSet<ElementType>& LHS, const TSet<ElementType>& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<ElementType> bool)",
    "insertText": "operator(const TSet<ElementType>& LHS, const TSet<ElementType>& RHS)"
  }
]