[
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" Math / Transform . h \" # include \" Math / Vector . h \" # include \" UObject / NameTypes . h \" namespace CQTestCondition { template<TValue,TOtherValue> bool)",
    "insertText": "IsEqual(const TValue& A, const TOtherValue& B)"
  },
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEqual(const TCHAR* A, const FString& B)"
  },
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEqual(const FString& A, const TCHAR* B)"
  },
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEqual(const FString& A, const FString& B)"
  },
  {
    "label": "IsEqualIgnoreCase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEqualIgnoreCase(const TCHAR* A, const TCHAR* B)"
  },
  {
    "label": "IsEqualIgnoreCase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEqualIgnoreCase(const TCHAR* A, const FString& B)"
  },
  {
    "label": "IsEqualIgnoreCase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEqualIgnoreCase(const FString& A, const TCHAR* B)"
  },
  {
    "label": "IsEqualIgnoreCase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEqualIgnoreCase(const FString& A, const FString& B)"
  },
  {
    "label": "IsNotEqual()",
    "kind": "Method",
    "detail": "Function (} template<TValue,TOtherValue> bool)",
    "insertText": "IsNotEqual(const TValue& A, const TOtherValue& B)"
  },
  {
    "label": "IsNotEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNotEqual(const TCHAR* A, const FString& B)"
  },
  {
    "label": "IsNotEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNotEqual(const FString& A, const TCHAR* B)"
  },
  {
    "label": "IsNotEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNotEqual(const FString& A, const FString& B)"
  },
  {
    "label": "IsNotEqualIgnoreCase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNotEqualIgnoreCase(const TCHAR* A, const TCHAR* B)"
  },
  {
    "label": "IsNotEqualIgnoreCase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNotEqualIgnoreCase(const TCHAR* A, const FString& B)"
  },
  {
    "label": "IsNotEqualIgnoreCase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNotEqualIgnoreCase(const FString& A, const TCHAR* B)"
  },
  {
    "label": "IsNotEqualIgnoreCase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNotEqualIgnoreCase(const FString& A, const FString& B)"
  },
  {
    "label": "IsNearlyEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNearlyEqual(const float A, const float B, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "IsNearlyEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNearlyEqual(const double A, const double B, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "IsNearlyEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNearlyEqual(const FVector A, const FVector B, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "IsNearlyEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNearlyEqual(const FTransform A, const FTransform B, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "IsNearlyEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNearlyEqual(const FRotator A, const FRotator B, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "IsNotNearlyEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNotNearlyEqual(const float A, const float B, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "IsNotNearlyEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNotNearlyEqual(const double A, const double B, double Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "IsNotNearlyEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNotNearlyEqual(const FVector A, const FVector B, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "IsNotNearlyEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNotNearlyEqual(const FTransform A, const FTransform B, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "IsNotNearlyEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNotNearlyEqual(const FRotator A, const FRotator B, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  }
]