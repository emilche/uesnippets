[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "SHeaderRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHeaderRow"
  },
  {
    "label": "FColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColumn"
  },
  {
    "label": "STableColumnHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableColumnHeader"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / IndirectArray . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Widgets / Layout / SSplitter . h \" # include \" Framework / SlateDelegates . h \" class FMenuBuilder ; class SScrollBar ; enum class ECheckBoxState : uint8 ; namespace EColumnSortPriority { enum Type { None,Primary = 0,Secondary = 1,Max,} ; } ; namespace EColumnSortMode { enum Type { None = 0,Ascending = 1,Descending = 2,} ; } ; namespace EColumnSizeMode { enum Type { Fill = 0,Fixed = 1,Manual = 2,FillSized = 3,} ; } ; enum class EHeaderComboVisibility { Always,Ghosted,OnHover,Never } ;)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnSortModeChanged, EColumnSortPriority::Type, const FName&, EColumnSortMode::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnWidthChanged, float)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(FVector2D, FOnGetMaxRowSizeForColumn, const FName&, EOrientation)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SHeaderRow : public SBorder { public : class FColumn { public :)",
    "insertText": "SLATE_BEGIN_ARGS(FColumn) : _ColumnId() , _DefaultLabel() , _DefaultTooltip() , _ToolTip() , _FillWidth( 1.0f ) , _FixedWidth() , _ManualWidth() , _OnWidthChanged() , _HeaderContent() , _HAlignHeader( HAlign_Fill ) , _VAlignHeader( VAlign_Fill ) , _HeaderContentPadding() , _HeaderComboVisibility(EHeaderComboVisibility::OnHover) , _MenuContent() , _HAlignCell( HAlign_Fill ) , _VAlignCell( VAlign_Fill ) , _InitialSortMode( EColumnSortMode::Ascending ) , _SortMode( EColumnSortMode::None ) , _OnSort() , _OverflowPolicy( ETextOverflowPolicy::Clip)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FName, ColumnId ) SLATE_ATTRIBUTE( FText, DefaultLabel ) SLATE_ATTRIBUTE( FText, DefaultTooltip ) SLATE_ATTRIBUTE( TSharedPtr< IToolTip >, ToolTip ) SLATE_ATTRIBUTE( float, FillWidth ) SLATE_ARGUMENT( TOptional< float >, FixedWidth ) SLATE_ATTRIBUTE( float, ManualWidth ) SLATE_ARGUMENT(TOptional< float >, FillSized) SLATE_EVENT( FOnWidthChanged, OnWidthChanged ) SLATE_DEFAULT_SLOT( FArguments, HeaderContent ) SLATE_ARGUMENT( EHorizontalAlignment, HAlignHeader ) SLATE_ARGUMENT( EVerticalAlignment, VAlignHeader ) SLATE_ARGUMENT( TOptional< FMargin >, HeaderContentPadding ) SLATE_ARGUMENT( EHeaderComboVisibility, HeaderComboVisibility ) SLATE_NAMED_SLOT( FArguments, MenuContent ) SLATE_EVENT( FOnGetContent, OnGetMenuContent ) SLATE_ARGUMENT( EHorizontalAlignment, HAlignCell ) SLATE_ARGUMENT( EVerticalAlignment, VAlignCell ) SLATE_ATTRIBUTE( EColumnSortMode::Type, InitialSortMode ) SLATE_ATTRIBUTE( EColumnSortMode::Type, SortMode ) SLATE_ATTRIBUTE( EColumnSortPriority::Type, SortPriority ) SLATE_EVENT( FOnSortModeChanged, OnSort ) SLATE_ATTRIBUTE(bool, ShouldGenerateWidget) SLATE_ARGUMENT(ETextOverflowPolicy, OverflowPolicy) SLATE_END_ARGS() FColumn( const FArguments& InArgs ) : ColumnId( InArgs._ColumnId ) , DefaultText( InArgs._DefaultLabel ) , DefaultTooltip( InArgs._DefaultTooltip ) , ToolTip(InArgs._ToolTip) , Width( 1.0f ) , DefaultWidth( 1.0f ) , OnWidthChanged( InArgs._OnWidthChanged) , SizeRule( EColumnSizeMode::Fill ) , HeaderContent( InArgs._HeaderContent ) , HeaderMenuContent( InArgs._MenuContent ) , OnGetMenuContent( InArgs._OnGetMenuContent ) , HeaderHAlignment( InArgs._HAlignHeader ) , HeaderVAlignment( InArgs._VAlignHeader ) , HeaderContentPadding( InArgs._HeaderContentPadding ) , HeaderComboVisibility (InArgs._HeaderComboVisibility ) , CellHAlignment( InArgs._HAlignCell ) , CellVAlignment( InArgs._VAlignCell ) , OverflowPolicy(InArgs._OverflowPolicy) , InitialSortMode( InArgs._InitialSortMode ) , SortMode( InArgs._SortMode ) , SortPriority( InArgs._SortPriority ) , OnSortModeChanged( InArgs._OnSort ) , ShouldGenerateWidget(InArgs._ShouldGenerateWidget) , bIsVisible(true)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Width = InArgs . _FixedWidth .)",
    "insertText": "GetValue()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SizeRule = EColumnSizeMode::Fixed ; } else)",
    "insertText": "if(InArgs._ManualWidth.IsSet())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Width = InArgs . _ManualWidth ; SizeRule = EColumnSizeMode::Manual ; } else)",
    "insertText": "if(InArgs._FillSized.IsSet())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (SizeRule = EColumnSizeMode::FillSized ; } else { Width = InArgs . _FillWidth ; SizeRule = EColumnSizeMode::Fill ; } DefaultWidth = Width .)",
    "insertText": "Get()"
  },
  {
    "label": "SetWidth()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetWidth(float NewWidth)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (OnWidthChanged .)",
    "insertText": "Execute(NewWidth)"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (} else { Width = NewWidth ; } } float)",
    "insertText": "GetWidth()"
  },
  {
    "label": "Column()",
    "kind": "Method",
    "detail": "Function (} FName ColumnId ; TAttribute<FText> DefaultText ; TAttribute<FText> DefaultTooltip ; TAttribute<TSharedPtr<IToolTip>> ToolTip ; TAttribute<float> Width ; float DefaultWidth ; FOnWidthChanged OnWidthChanged ; EColumnSizeMode::Type SizeRule ; TAlwaysValidWidget HeaderContent ; TAlwaysValidWidget HeaderMenuContent ; FOnGetContent OnGetMenuContent ; EHorizontalAlignment HeaderHAlignment ; EVerticalAlignment HeaderVAlignment ; TOptional<FMargin> HeaderContentPadding ; EHeaderComboVisibility HeaderComboVisibility ; EHorizontalAlignment CellHAlignment ; EVerticalAlignment CellVAlignment ; ETextOverflowPolicy OverflowPolicy ; TAttribute<EColumnSortMode::Type> InitialSortMode ; TAttribute<EColumnSortMode::Type> SortMode ; TAttribute<EColumnSortPriority::Type> SortPriority ; FOnSortModeChanged OnSortModeChanged ; TAttribute<bool> ShouldGenerateWidget ; bool bIsVisible ; } ; FColumn::FArguments)",
    "insertText": "Column(const FName& InColumnId)"
  },
  {
    "label": "ColumnId()",
    "kind": "Method",
    "detail": "Function (FColumn::FArguments NewArgs ; NewArgs .)",
    "insertText": "ColumnId(InColumnId)"
  },
  {
    "label": "OnColumnsChanged()",
    "kind": "Method",
    "detail": "Function (FColumnsChanged*)",
    "insertText": "OnColumnsChanged()"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FHeaderRowStyle, Style ) SLATE_SUPPORTS_SLOT_WITH_ARGS( FColumn ) SLATE_EVENT( FColumnsChanged::FDelegate, OnColumnsChanged ) SLATE_EVENT( FOnGetMaxRowSizeForColumn, OnGetMaxRowSizeForColumn ) SLATE_ARGUMENT( ESplitterResizeMode::Type, ResizeMode ) SLATE_ARGUMENT( TOptional<float>, SplitterHandleSize ) SLATE_ARGUMENT( bool, CanSelectGeneratedColumn ) SLATE_ARGUMENT( TArray<FName>, HiddenColumnsList ) SLATE_EVENT( FSimpleDelegate, OnHiddenColumnsListChanged ) SLATE_END_ARGS() SLATE_API void Construct( const FArguments& InArgs)"
  },
  {
    "label": "ResetColumnWidths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetColumnWidths()"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (const TIndirectArray<FColumn>&)",
    "insertText": "GetColumns()"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumn(const FColumn::FArguments& NewColumnArgs)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumn(FColumn& NewColumn)"
  },
  {
    "label": "InsertColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertColumn(const FColumn::FArguments& NewColumnArgs, int32 InsertIdx)"
  },
  {
    "label": "InsertColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertColumn(FColumn& NewColumn, int32 InsertIdx)"
  },
  {
    "label": "RemoveColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumn(const FName& InColumnId)"
  },
  {
    "label": "RefreshColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshColumns()"
  },
  {
    "label": "ClearColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearColumns()"
  },
  {
    "label": "SetAssociatedVerticalScrollBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAssociatedVerticalScrollBar(const TSharedRef< SScrollBar >& ScrollBar, const float ScrollBarSize)"
  },
  {
    "label": "SetColumnWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColumnWidth(const FName& InColumnId, float InWidth)"
  },
  {
    "label": "GetRowSizeForSlotIndex()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetRowSizeForSlotIndex(int32 SlotIndex)"
  },
  {
    "label": "SetOnGetMaxRowSizeForColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnGetMaxRowSizeForColumn(const FOnGetMaxRowSizeForColumn& Delegate)"
  },
  {
    "label": "GetHiddenColumnIds()",
    "kind": "Method",
    "detail": "Function (OnGetMaxRowSizeForColumn = Delegate ; } TArray<FName>)",
    "insertText": "GetHiddenColumnIds()"
  },
  {
    "label": "ShouldGeneratedColumn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldGeneratedColumn(const FName& InColumnId)"
  },
  {
    "label": "IsColumnGenerated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsColumnGenerated(const FName& InColumnId)"
  },
  {
    "label": "IsColumnVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsColumnVisible(const FName& InColumnId)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "SetShowGeneratedColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowGeneratedColumn(const FName& InColumnIdm, bool InShow = true)"
  },
  {
    "label": "RegenerateWidgets()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RegenerateWidgets()"
  },
  {
    "label": "ToggleAllColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleAllColumns()"
  },
  {
    "label": "CanToggleAllColumns()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanToggleAllColumns()"
  },
  {
    "label": "GetSelectAllColumnsCheckState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetSelectAllColumnsCheckState()"
  },
  {
    "label": "GetToggleAllColumnsText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToggleAllColumnsText()"
  },
  {
    "label": "OnGenerateSelectColumnsSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGenerateSelectColumnsSubMenu(FMenuBuilder& InSubMenuBuilder)"
  },
  {
    "label": "ToggleGeneratedColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleGeneratedColumn(FName ColumnId)"
  },
  {
    "label": "GetGeneratedColumnCheckedState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetGeneratedColumnCheckedState(FName ColumnId)"
  }
]