[
  {
    "label": "EConstructTextureFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EConstructTextureFlags"
  },
  {
    "label": "UTextureRenderTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureRenderTarget"
  },
  {
    "label": "FTextureRenderTargetResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureRenderTargetResource"
  },
  {
    "label": "FTextureResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureResource"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / Texture . h \" # include \" RenderUtils . h \" # include \" TextureRenderTarget . generated . h \" enum EConstructTextureFlags : uint32 ;)",
    "insertText": "UCLASS(abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=TextureRenderTarget)"
  },
  {
    "label": "GetRenderTargetResource()",
    "kind": "Method",
    "detail": "Function (uint32 bNeedsTwoCopies : 1 ; uint32 bCanCreateUAV : 1 ; uint32 bTargetArraySlicesIndependently : 1 ; class FTextureRenderTargetResource*)",
    "insertText": "GetRenderTargetResource()"
  },
  {
    "label": "GameThread_GetRenderTargetResource()",
    "kind": "Method",
    "detail": "Function (class FTextureRenderTargetResource*)",
    "insertText": "GameThread_GetRenderTargetResource()"
  },
  {
    "label": "GetTextureClass()",
    "kind": "Method",
    "detail": "Function (ETextureClass)",
    "insertText": "GetTextureClass()"
  },
  {
    "label": "GetMaterialType()",
    "kind": "Method",
    "detail": "Function (EMaterialValueType)",
    "insertText": "GetMaterialType()"
  },
  {
    "label": "CanConvertToTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanConvertToTexture(ETextureSourceFormat& OutTextureSourceFormat, EPixelFormat& OutPixelFormat, FText* OutErrorMessage = nullptr) const PURE_VIRTUAL(UTextureRenderTarget, return false;)"
  },
  {
    "label": "CanConvertToTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanConvertToTexture(FText* OutErrorMessage = nullptr)"
  },
  {
    "label": "GetTextureUClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UTexture>)",
    "insertText": "GetTextureUClass() const PURE_VIRTUAL(GetTextureUClass, return nullptr;) ENGINE_API virtual ETextureClass GetRenderTargetTextureClass() const PURE_VIRTUAL(GetRenderTargetTextureClass, return ETextureClass::Invalid;) ENGINE_API virtual EPixelFormat GetFormat() const PURE_VIRTUAL(GetFormat,return PF_Unknown;) ENGINE_API virtual bool IsSRGB() const PURE_VIRTUAL(IsSRGB,return false;) ENGINE_API virtual float GetDisplayGamma() const PURE_VIRTUAL(GetDisplayGamma,return 0.f;) static float GetDefaultDisplayGamma()"
  },
  {
    "label": "GetReadPixelsFormat()",
    "kind": "Method",
    "detail": "Function (ERawImageFormat::Type)",
    "insertText": "GetReadPixelsFormat(EPixelFormat PF,bool bIsVolume)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR using FOnTextureChangingDelegate = TFunctionRef<)",
    "insertText": "void(UTexture*)"
  },
  {
    "label": "UpdateTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateTexture(UTexture* InTexture, EConstructTextureFlags InFlags = CTF_Default, const TArray<uint8>* InAlphaOverride = nullptr, FOnTextureChangingDelegate InOnTextureChangingDelegate = [](UTexture*){}, FText* OutErrorMessage = nullptr)"
  },
  {
    "label": "ConstructTexture()",
    "kind": "Method",
    "detail": "Function (UTexture*)",
    "insertText": "ConstructTexture(UObject* InOuter, const FString& InNewTextureName, EObjectFlags InObjectFlags = RF_NoFlags, EConstructTextureFlags InFlags = CTF_Default, const TArray<uint8>* InAlphaOverride = nullptr, FText* OutErrorMessage = nullptr)"
  },
  {
    "label": "ValidateTextureFormatForConversionToTextureInternal()",
    "kind": "Method",
    "detail": "Function (# endif protected : ETextureSourceFormat)",
    "insertText": "ValidateTextureFormatForConversionToTextureInternal(EPixelFormat InFormat, const TArrayView<const EPixelFormat>& InCompatibleFormats, FText* OutErrorMessage)"
  }
]