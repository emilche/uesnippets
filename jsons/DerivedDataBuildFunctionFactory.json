[
  {
    "label": "IBuildFunctionFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBuildFunctionFactory"
  },
  {
    "label": "TBuildFunctionFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBuildFunctionFactory"
  },
  {
    "label": "GetFunction()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DerivedDataBuildFunction . h \" # include \" Features / IModularFeatures . h \" # include \" UObject / NameTypes . h \" namespace UE::DerivedData { class IBuildFunctionFactory : public IModularFeature { public : const FLazyName FeatureName { \" BuildFunctionFactory \" } ; const IBuildFunction&)",
    "insertText": "GetFunction()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; template<FunctionType> class TBuildFunctionFactory final : public IBuildFunctionFactory {)",
    "insertText": "static_assert(sizeof(FunctionType) == sizeof(IBuildFunction), \"Derivations of IBuildFunction must be pure and maintain no state.\")"
  },
  {
    "label": "TBuildFunctionFactory()",
    "kind": "Method",
    "detail": "Function (public : template<. . . ArgTypes>)",
    "insertText": "TBuildFunctionFactory(ArgTypes&&... Args) : Function(Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().RegisterModularFeature(FeatureName, this)"
  },
  {
    "label": "TBuildFunctionFactory()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TBuildFunctionFactory()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().UnregisterModularFeature(FeatureName, this)"
  }
]