[
  {
    "label": "FSettingsMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSettingsMenu"
  },
  {
    "label": "MakeMenu()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Modules / ModuleManager . h \" # include \" Textures / SlateIcon . h \" # include \" Framework / Commands / UIAction . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" # include \" ISettingsModule . h \" # include \" ISettingsCategory . h \" # include \" ISettingsContainer . h \" # include \" ISettingsSection . h \" # include \" ToolMenus . h \" # define LOCTEXT_NAMESPACE \" FSettingsMenu \" class FSettingsMenu { public : void)",
    "insertText": "MakeMenu(UToolMenu* MenuBuilder, FName SettingsContainerName)"
  },
  {
    "label": "ISettingsModule()",
    "kind": "Method",
    "detail": "Function (ISettingsModule* SettingsModule = FModuleManager::GetModulePtr<)",
    "insertText": "ISettingsModule(\"Settings\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ISettingsCategoryPtr SettingsCategory = SettingsCategories [ CategoryIndex ] ; TArray<ISettingsSectionPtr> SettingsSections ;)",
    "insertText": "if(SettingsCategory->GetSections(SettingsSections) > 0)"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (FToolMenuSection& Section = MenuBuilder ->)",
    "insertText": "AddSection(SettingsCategory->GetName(), SettingsCategory->GetDisplayName())"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (SettingsSections .)",
    "insertText": "Sort([](const ISettingsSectionPtr& First, const ISettingsSectionPtr& Second) { return First->GetDisplayName().ToString() < Second->GetDisplayName().ToString(); })"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (ISettingsSectionPtr SettingsSection = SettingsSections [ SectionIndex ] ; Section .)",
    "insertText": "AddMenuEntry(SettingsSection->GetName(), SettingsSection->GetDisplayName(), SettingsSection->GetDescription(), FSlateIcon(), FUIAction(FExecuteAction::CreateStatic(&FSettingsMenu::OpenSettings, SettingsContainerName, SettingsCategory->GetName(), SettingsSection->GetName())))"
  },
  {
    "label": "OpenSettings()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "OpenSettings(FName ContainerName, FName CategoryName, FName SectionName)"
  },
  {
    "label": "ISettingsModule()",
    "kind": "Method",
    "detail": "Function (FModuleManager::LoadModuleChecked<)",
    "insertText": "ISettingsModule(\"Settings\").ShowViewer(ContainerName, CategoryName, SectionName)"
  }
]