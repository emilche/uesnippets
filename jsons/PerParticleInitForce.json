[
  {
    "label": "FPerParticleInitForce",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerParticleInitForce"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPerParticleInitForce()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ParticleHandle . h \" # include \" Chaos / PerParticleRule . h \" namespace Chaos { class FPerParticleInitForce : public FPerParticleRule { public :)",
    "insertText": "FPerParticleInitForce()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FDynamicParticles& InParticles, const FReal Dt, const int Index)"
  },
  {
    "label": "Acceleration()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "Acceleration(Index) = FVec3(0)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(TRigidParticles<FReal, 3>& InParticles, const FReal Dt, const int Index)"
  },
  {
    "label": "AngularAcceleration()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "AngularAcceleration(Index) = FVec3(0)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(TTransientPBDRigidParticleHandle<FReal, 3>& Particle, const FReal Dt)"
  },
  {
    "label": "Acceleration()",
    "kind": "Method",
    "detail": "Function (Particle .)",
    "insertText": "Acceleration() = FVec3(0)"
  },
  {
    "label": "AngularAcceleration()",
    "kind": "Method",
    "detail": "Function (Particle .)",
    "insertText": "AngularAcceleration() = FVec3(0)"
  }
]