[
  {
    "label": "FLogMessagesMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLogMessagesMessageHandler"
  },
  {
    "label": "FMPCollectorClientMessageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMPCollectorClientMessageContext"
  },
  {
    "label": "IMPCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMPCollector"
  },
  {
    "label": "FAbortPackagesMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAbortPackagesMessage"
  },
  {
    "label": "FAssignPackagesMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssignPackagesMessage"
  },
  {
    "label": "FDirectorConnectionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirectorConnectionInfo"
  },
  {
    "label": "FDiscoveredPackageReplication",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiscoveredPackageReplication"
  },
  {
    "label": "FHeartbeatMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeartbeatMessage"
  },
  {
    "label": "FInitialConfigMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitialConfigMessage"
  },
  {
    "label": "FGenerationHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenerationHelper"
  },
  {
    "label": "FGeneratorEventMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeneratorEventMessage"
  },
  {
    "label": "FPackageRemoteResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageRemoteResult"
  },
  {
    "label": "FRetractionRequestMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRetractionRequestMessage"
  },
  {
    "label": "FCookWorkerClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookWorkerClient"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPendingResultNeedingAsyncWork",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingResultNeedingAsyncWork"
  },
  {
    "label": "FCookWorkerClient()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FCookWorkerClient(UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "TryConnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConnect(FDirectorConnectionInfo&& ConnectInfo)"
  },
  {
    "label": "TickFromSchedulerThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickFromSchedulerThread(FTickStackData& StackData)"
  },
  {
    "label": "GetCookInitializationFlags()",
    "kind": "Method",
    "detail": "Function (ECookInitializationFlags)",
    "insertText": "GetCookInitializationFlags()"
  },
  {
    "label": "GetInitializationIsZenStore()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInitializationIsZenStore()"
  },
  {
    "label": "DoneWithInitialSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoneWithInitialSettings()"
  },
  {
    "label": "ReportDemoteToIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportDemoteToIdle(const FPackageData& PackageData, ESuppressCookReason Reason)"
  },
  {
    "label": "ReportPromoteToSaveComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportPromoteToSaveComplete(FPackageData& PackageData)"
  },
  {
    "label": "ReportDiscoveredPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportDiscoveredPackage(const FPackageData& PackageData, const FInstigator& Instigator,\n\t\tFDiscoveredPlatformSet&& ReachablePlatforms, FGenerationHelper* ParentGenerationHelper, EUrgency Urgency)"
  },
  {
    "label": "ReportGeneratorQueuedGeneratedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportGeneratorQueuedGeneratedPackages(FGenerationHelper& GenerationHelper)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(IMPCollector* Collector)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(IMPCollector* Collector)"
  },
  {
    "label": "FlushLogs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushLogs()"
  },
  {
    "label": "PollTryConnect()",
    "kind": "Method",
    "detail": "Function (EPollStatus)",
    "insertText": "PollTryConnect(const FDirectorConnectionInfo& ConnectInfo)"
  },
  {
    "label": "CreateServerSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateServerSocket(const FDirectorConnectionInfo& ConnectInfo)"
  },
  {
    "label": "PollWriteConnectMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollWriteConnectMessage()"
  },
  {
    "label": "PollReceiveConfigMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollReceiveConfigMessage()"
  },
  {
    "label": "LogConnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogConnected()"
  },
  {
    "label": "PumpSendMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpSendMessages()"
  },
  {
    "label": "SendPendingResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPendingResults()"
  },
  {
    "label": "PumpReceiveMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpReceiveMessages()"
  },
  {
    "label": "HandleReceiveMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceiveMessages(TArray<UE::CompactBinaryTCP::FMarshalledMessage>&& Messages, FName OptionalPackageName = NAME_None)"
  },
  {
    "label": "PumpDisconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpDisconnect(FTickStackData& StackData)"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendMessage(const IMPCollectorMessage& Message)"
  },
  {
    "label": "SendToState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendToState(EConnectStatus TargetStatus)"
  },
  {
    "label": "LogInvalidMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogInvalidMessage(const TCHAR* MessageTypeName)"
  },
  {
    "label": "AssignPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignPackages(FAssignPackagesMessage& Message)"
  },
  {
    "label": "TickCollectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickCollectors(FTickStackData& StackData, bool bFlush, IMPCollector* SingleCollector = nullptr)"
  },
  {
    "label": "ReportPackageMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportPackageMessage(FName PackageName, TUniquePtr<FPackageRemoteResult>&& ResultOwner)"
  },
  {
    "label": "HandleAbortPackagesMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAbortPackagesMessage(FMPCollectorClientMessageContext& Context, bool bReadSuccessful,\n\t\tFAbortPackagesMessage&& Message)"
  },
  {
    "label": "HandleRetractionMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRetractionMessage(FMPCollectorClientMessageContext& Context, bool bReadSuccessful,\n\t\tFRetractionRequestMessage&& Message)"
  },
  {
    "label": "HandleHeartbeatMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHeartbeatMessage(FMPCollectorClientMessageContext& Context, bool bReadSuccessful,\n\t\tFHeartbeatMessage&& Message)"
  },
  {
    "label": "HandleGeneratorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleGeneratorMessage(FGeneratorEventMessage&& GeneratorMessage)"
  }
]