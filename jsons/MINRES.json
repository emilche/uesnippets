[
  {
    "label": "MINRES",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MINRES"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "minres()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_MINRES_H_ # define EIGEN_MINRES_H_ namespace Eigen { namespace internal { template<MatrixType,Rhs,Dest,Preconditioner> EIGEN_DONT_INLINE void)",
    "insertText": "minres(const MatrixType& mat, const Rhs& rhs, Dest& x, const Preconditioner& precond, Index& iters, typename Dest::RealScalar& tol_error)"
  },
  {
    "label": "rhsNorm2()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ; typedef Dest::RealScalar RealScalar ; typedef Dest::Scalar Scalar ; typedef Matrix<Scalar,Dynamic,1> VectorType ; const RealScalar)",
    "insertText": "rhsNorm2(rhs.squaredNorm())"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "setZero()"
  },
  {
    "label": "maxIters()",
    "kind": "Method",
    "detail": "Function (iters = 0 ; tol_error = 0 ; return ; } const Index)",
    "insertText": "maxIters(iters)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "N(mat.cols())"
  },
  {
    "label": "threshold2()",
    "kind": "Method",
    "detail": "Function (const RealScalar)",
    "insertText": "threshold2(tol_error*tol_error*rhsNorm2)"
  },
  {
    "label": "v_old()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "v_old(N)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "v(VectorType::Zero(N))"
  },
  {
    "label": "v_new()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "v_new(rhs-mat*x)"
  },
  {
    "label": "residualNorm2()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "residualNorm2(v_new.squaredNorm())"
  },
  {
    "label": "w()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "w(N)"
  },
  {
    "label": "w_new()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "w_new(precond.solve(v_new))"
  },
  {
    "label": "beta_new2()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "beta_new2(v_new.dot(w_new))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(beta_new2 >= 0.0 && \"PRECONDITIONER IS NOT POSITIVE DEFINITE\")"
  },
  {
    "label": "beta_new()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "beta_new(sqrt(beta_new2))"
  },
  {
    "label": "beta_one()",
    "kind": "Method",
    "detail": "Function (const RealScalar)",
    "insertText": "beta_one(beta_new)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "c(1.0)"
  },
  {
    "label": "c_old()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "c_old(1.0)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "s(0.0)"
  },
  {
    "label": "s_old()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "s_old(0.0)"
  },
  {
    "label": "p_oold()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "p_oold(N)"
  },
  {
    "label": "p_old()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "p_old(VectorType::Zero(N))"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "p(p_old)"
  },
  {
    "label": "eta()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "eta(1.0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (iters = 0 ;)",
    "insertText": "while(iters < maxIters)"
  },
  {
    "label": "beta()",
    "kind": "Method",
    "detail": "Function (const RealScalar)",
    "insertText": "beta(beta_new)"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (v_old = v ; v_new / = beta_new ; w_new / = beta_new ; v = v_new ; w = w_new ; v_new .)",
    "insertText": "noalias()"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (const RealScalar alpha = v_new .)",
    "insertText": "dot(w)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (v_new - = alpha* v ; w_new = precond .)",
    "insertText": "solve(v_new)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (beta_new2 = v_new .)",
    "insertText": "dot(w_new)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (beta_new =)",
    "insertText": "sqrt(beta_new2)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (const RealScalar r2 = s* alpha + c* c_old* beta ; const RealScalar r3 = s_old* beta ; const RealScalar r1_hat = c* alpha - c_old* s* beta ; const RealScalar r1 =)",
    "insertText": "sqrt(std::pow(r1_hat,2) + std::pow(beta_new,2))"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (c_old = c ; s_old = s ; c = r1_hat / r1 ; s = beta_new / r1 ; p_oold = p_old ; p_old = p ; p .)",
    "insertText": "noalias()=(w-r2*p_old-r3*p_oold)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (x + = beta_one* c* eta* p ; residualNorm2* = s* s ;)",
    "insertText": "if(residualNorm2 < threshold2)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (break ; } eta = - s* eta ; iters + + ; } tol_error =)",
    "insertText": "sqrt(residualNorm2 / rhsNorm2)"
  },
  {
    "label": "MINRES()",
    "kind": "Method",
    "detail": "Function (} } template<_MatrixType,int _UpLo = Lower,_Preconditioner = IdentityPreconditioner> class MINRES ; namespace internal { template<_MatrixType,int _UpLo,_Preconditioner> struct traits<MINRES<_MatrixType,_UpLo,_Preconditioner>> { typedef _MatrixType MatrixType ; typedef _Preconditioner Preconditioner ; } ; } template<_MatrixType,int _UpLo,_Preconditioner> class MINRES : public IterativeSolverBase<MINRES<_MatrixType,_UpLo,_Preconditioner>> { typedef IterativeSolverBase<MINRES> Base ; using Base::matrix ; using Base::m_error ; using Base::m_iterations ; using Base::m_info ; using Base::m_isInitialized ; public : using Base::_solve_impl ; typedef _MatrixType MatrixType ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef _Preconditioner Preconditioner ; enum { UpLo = _UpLo } ; public :)",
    "insertText": "MINRES() : Base()"
  },
  {
    "label": "MINRES()",
    "kind": "Method",
    "detail": "Function (} template<MatrixDerived>)",
    "insertText": "MINRES(const EigenBase<MatrixDerived>& A) : Base(A.derived())"
  },
  {
    "label": "MINRES()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MINRES()"
  },
  {
    "label": "_solve_vector_with_guess_impl()",
    "kind": "Method",
    "detail": "Function (} template<Rhs,Dest> void)",
    "insertText": "_solve_vector_with_guess_impl(const Rhs& b, Dest& x)"
  },
  {
    "label": "TransposeInput()",
    "kind": "Method",
    "detail": "Function (typedef Base::MatrixWrapper MatrixWrapper ; typedef Base::ActualMatrixType ActualMatrixType ; enum {)",
    "insertText": "TransposeInput(!MatrixWrapper::MatrixFree) && (UpLo==(Lower|Upper)) && (!MatrixType::IsRowMajor) && (!NumTraits<Scalar>::IsComplex)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<TransposeInput,Transpose<const ActualMatrixType>,ActualMatrixType const&>::type RowMajorWrapper ;)",
    "insertText": "EIGEN_STATIC_ASSERT(EIGEN_IMPLIES(MatrixWrapper::MatrixFree,UpLo==(Lower|Upper)),MATRIX_FREE_CONJUGATE_GRADIENT_IS_COMPATIBLE_WITH_UPPER_UNION_LOWER_MODE_ONLY)"
  },
  {
    "label": "UpLo()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<)",
    "insertText": "UpLo(Lower|Upper)"
  },
  {
    "label": "maxIterations()",
    "kind": "Method",
    "detail": "Function (m_iterations =)",
    "insertText": "maxIterations()"
  },
  {
    "label": "row_mat()",
    "kind": "Method",
    "detail": "Function (m_error = Base::m_tolerance ; RowMajorWrapper)",
    "insertText": "row_mat(matrix())"
  },
  {
    "label": "minres()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "minres(SelfAdjointWrapper(row_mat), b, x, Base::m_preconditioner, m_iterations, m_error)"
  }
]