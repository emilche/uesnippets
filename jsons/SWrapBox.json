[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "SWrapBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWrapBox"
  },
  {
    "label": "FSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlot"
  },
  {
    "label": "FChildArranger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChildArranger"
  },
  {
    "label": "SLATE_DECLARE_WIDGET_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" SlotBase . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Children . h \" # include \" Widgets / SPanel . h \" class FArrangedChildren ; class SWrapBox : public SPanel {)",
    "insertText": "SLATE_DECLARE_WIDGET_API(SWrapBox, SPanel, SLATE_API)"
  },
  {
    "label": "FSlot()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSlot() : TBasicLayoutWidgetSlot<FSlot>(HAlign_Fill, VAlign_Fill) , SlotFillLineWhenSizeLessThan() , bSlotFillEmptySpace(false) , bSlotForceNewLine(false)"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_SLOT_BEGIN_ARGS(FSlot, TBasicLayoutWidgetSlot<FSlot>) SLATE_ARGUMENT(TOptional<float>, FillLineWhenSizeLessThan) SLATE_ARGUMENT(TOptional<bool>, FillEmptySpace) SLATE_ARGUMENT(TOptional<bool>, ForceNewLine) SLATE_SLOT_END_ARGS() void Construct(const FChildren& SlotOwner, FSlotArguments&& InArgs)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (TBasicLayoutWidgetSlot<FSlot)",
    "insertText": "Construct(SlotOwner, MoveTemp(InArgs))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (SlotFillLineWhenSizeLessThan = InArgs . _FillLineWhenSizeLessThan ; } bSlotFillEmptySpace = InArgs . _FillEmptySpace .)",
    "insertText": "Get(bSlotFillEmptySpace)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (bSlotForceNewLine = InArgs . _ForceNewLine .)",
    "insertText": "Get(bSlotForceNewLine)"
  },
  {
    "label": "SetFillLineWhenSizeLessThan()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFillLineWhenSizeLessThan(TOptional<float> InFillLineWhenSizeLessThan)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (SlotFillLineWhenSizeLessThan = InFillLineWhenSizeLessThan ;)",
    "insertText": "Invalidate(EInvalidateWidgetReason::Layout)"
  },
  {
    "label": "GetFillLineWhenSizeLessThan()",
    "kind": "Method",
    "detail": "Function (} } TOptional<float>)",
    "insertText": "GetFillLineWhenSizeLessThan()"
  },
  {
    "label": "GetFillEmptySpace()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "GetFillEmptySpace()"
  },
  {
    "label": "GetForceNewLine()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "GetForceNewLine()"
  },
  {
    "label": "SLATE_SLOT_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; })",
    "insertText": "SLATE_SLOT_ARGUMENT(FSlot, Slots ) SLATE_ATTRIBUTE( float, PreferredSize ) SLATE_ATTRIBUTE(EHorizontalAlignment, HAlign) SLATE_ARGUMENT( FVector2D, InnerSlotPadding ) SLATE_ARGUMENT( bool, UseAllottedSize ) SLATE_ARGUMENT(EOrientation, Orientation)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_END_ARGS() SLATE_API SWrapBox()"
  },
  {
    "label": "SWrapBox()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SWrapBox()"
  },
  {
    "label": "Slot()",
    "kind": "Method",
    "detail": "Function (FSlot::FSlotArguments)",
    "insertText": "Slot()"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (} using FScopedWidgetSlotArguments = TPanelChildren<FSlot>::FScopedWidgetSlotArguments ; FScopedWidgetSlotArguments)",
    "insertText": "AddSlot()"
  },
  {
    "label": "RemoveSlot()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveSlot(const TSharedRef<SWidget>& SlotWidget)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearChildren()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "SetInnerSlotPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInnerSlotPadding(FVector2D InInnerSlotPadding)"
  },
  {
    "label": "SetWrapSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrapSize(TAttribute<float> InWrapSize)"
  },
  {
    "label": "SetUseAllottedSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseAllottedSize(bool bInUseAllottedSize)"
  },
  {
    "label": "SetOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrientation(EOrientation InOrientation)"
  },
  {
    "label": "SetHorizontalAlignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHorizontalAlignment(TAttribute<EHorizontalAlignment> InHAlignment)"
  }
]