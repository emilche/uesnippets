[
  {
    "label": "FakeNetworkSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeNetworkSocket"
  },
  {
    "label": "FakeNetworkSocketServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeNetworkSocketServer"
  },
  {
    "label": "FakeNetworkSocketServer()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_NETWORK_FAKE_NETWORK_SOCKET_SERVER_H_ # define TEST_NETWORK_FAKE_NETWORK_SOCKET_SERVER_H_ # include<set> # include<vector> # include \" api / units / timestamp . h \" # include \" rtc_base / event . h \" # include \" rtc_base / socket . h \" # include \" rtc_base / socket_server . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" system_wrappers / include / clock . h \" # include \" test / network / network_emulation . h \" namespace webrtc { namespace test { class FakeNetworkSocket ; class FakeNetworkSocketServer : public rtc::SocketServer { public :)",
    "insertText": "FakeNetworkSocketServer(EndpointsContainer* endpoints_controller)"
  },
  {
    "label": "FakeNetworkSocketServer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FakeNetworkSocketServer()"
  },
  {
    "label": "CreateSocket()",
    "kind": "Method",
    "detail": "Function (rtc::Socket*)",
    "insertText": "CreateSocket(int family, int type)"
  },
  {
    "label": "SetMessageQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMessageQueue(rtc::Thread* thread)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Wait(webrtc::TimeDelta max_wait_duration, bool process_io)"
  },
  {
    "label": "WakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeUp()"
  },
  {
    "label": "GetEndpointNode()",
    "kind": "Method",
    "detail": "Function (protected : class FakeNetworkSocket ; EmulatedEndpointImpl*)",
    "insertText": "GetEndpointNode(const rtc::IPAddress& ip)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(FakeNetworkSocket* socket)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : const EndpointsContainer* endpoints_container_ ; rtc::Event wakeup_ ; rtc::Thread* thread_ = nullptr ; Mutex lock_ ; std::vector<FakeNetworkSocket*> sockets_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  }
]