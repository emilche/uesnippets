[
  {
    "label": "dtNavLinkAction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "dtNavLinkAction"
  },
  {
    "label": "dtLinkBuilderConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtLinkBuilderConfig"
  },
  {
    "label": "rcHeightfield",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcHeightfield"
  },
  {
    "label": "rcCompactHeightfield",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcCompactHeightfield"
  },
  {
    "label": "NAVMESH_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NAVMESH_API"
  },
  {
    "label": "rcContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rcContext"
  },
  {
    "label": "rcConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcConfig"
  },
  {
    "label": "dtNavLinkBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtNavLinkBuilder"
  },
  {
    "label": "Edge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Edge"
  },
  {
    "label": "TrajectorySample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TrajectorySample"
  },
  {
    "label": "Trajectory2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Trajectory2D"
  },
  {
    "label": "GroundSampleFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "GroundSampleFlag"
  },
  {
    "label": "GroundSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GroundSample"
  },
  {
    "label": "PotentialSeg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PotentialSeg"
  },
  {
    "label": "GroundSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GroundSegment"
  },
  {
    "label": "NAVMESH_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NAVMESH_API"
  },
  {
    "label": "JumpLinkFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "JumpLinkFlag"
  },
  {
    "label": "JumpLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "JumpLink"
  },
  {
    "label": "duDebugDraw",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "duDebugDraw"
  },
  {
    "label": "dtTileCacheContourSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheContourSet"
  },
  {
    "label": "duDebugDrawNavLinkBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "duDebugDrawNavLinkBuilder(struct duDebugDraw* dd, const dtNavLinkBuilder& linkBuilder, unsigned int drawFlags, const EdgeSampler* es)"
  },
  {
    "label": "findEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "findEdges(rcContext& ctx, const rcConfig& cfg, const dtLinkBuilderConfig& builderConfig,\n\t\t\t\t\t\t\t   const struct dtTileCacheContourSet& lcset, const dtReal* orig,\n\t\t\t\t\t\t\t   const rcHeightfield* solidHF, const rcCompactHeightfield* compactHF)"
  },
  {
    "label": "buildForAllEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "buildForAllEdges(rcContext& ctx, const dtLinkBuilderConfig& acfg, dtNavLinkAction action)"
  },
  {
    "label": "debugBuildEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "debugBuildEdge(const dtLinkBuilderConfig& acfg, dtNavLinkAction action, int edgeIndex, EdgeSampler& sampler)"
  },
  {
    "label": "initJumpOverRig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initJumpOverRig(EdgeSampler* es, const dtReal* sp, const dtReal* sq,\n\t\t\t\t\t\t const float jumpStartDist, const float jumpEndDist,\n\t\t\t\t\t\t const float jumpHeight, const float groundRange)"
  },
  {
    "label": "filterOverlappingLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "filterOverlappingLinks(const float edgeDistanceThreshold)"
  },
  {
    "label": "addEdgeLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addEdgeLinks(const dtLinkBuilderConfig& builderConfig, const EdgeSampler* es, const int edgeIndex)"
  }
]