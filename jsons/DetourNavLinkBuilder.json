[
  {
    "label": "dtNavLinkAction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "dtNavLinkAction"
  },
  {
    "label": "dtLinkBuilderConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtLinkBuilderConfig"
  },
  {
    "label": "rcHeightfield",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcHeightfield"
  },
  {
    "label": "rcCompactHeightfield",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcCompactHeightfield"
  },
  {
    "label": "NAVMESH_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NAVMESH_API"
  },
  {
    "label": "rcContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rcContext"
  },
  {
    "label": "rcConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcConfig"
  },
  {
    "label": "dtNavLinkBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtNavLinkBuilder"
  },
  {
    "label": "Edge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Edge"
  },
  {
    "label": "TrajectorySample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TrajectorySample"
  },
  {
    "label": "Trajectory2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Trajectory2D"
  },
  {
    "label": "GroundSampleFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "GroundSampleFlag"
  },
  {
    "label": "GroundSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GroundSample"
  },
  {
    "label": "PotentialSeg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PotentialSeg"
  },
  {
    "label": "GroundSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GroundSegment"
  },
  {
    "label": "JumpLinkFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "JumpLinkFlag"
  },
  {
    "label": "JumpLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "JumpLink"
  },
  {
    "label": "duDebugDraw",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "duDebugDraw"
  },
  {
    "label": "dtTileCacheContourSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheContourSet"
  },
  {
    "label": "getEdgeCount()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" DetourAlloc . h \" # include \" Detour / DetourLargeWorldCoordinates . h \" # include \" Detour / DetourNavLinkBuilderConfig . h \" enum dtNavLinkAction { DT_LINK_ACTION_UNSET,DT_LINK_ACTION_JUMP_DOWN,DT_LINK_ACTION_JUMP_OVER,} ; struct dtLinkBuilderConfig { dtNavLinkBuilderJumpDownConfig jumpDownConfig ; dtNavLinkBuilderJumpOverConfig jumpOverConfig ; dtReal agentRadius = 0 ; dtReal agentHeight = 0 ; dtReal agentClimb = 0 ; dtReal cellSize = 0 ; dtReal cellHeight = 0 ; } ; struct rcHeightfield ; struct rcCompactHeightfield ; struct dtLinkBuilderData { bool generatingLinks = false ; } ; class rcContext ; struct rcConfig ; class dtNavLinkBuilder { dtLinkBuilderConfig m_linkBuilderConfig ; dtReal m_cs = 0 ; dtReal m_csSquared = 0 ; dtReal m_ch = 0 ; dtReal m_invCs = 0 ; const rcHeightfield* m_solid = nullptr ; const rcCompactHeightfield* m_chf = nullptr ; struct Edge { dtReal sp [ 3 ],sq [ 3 ] ; } ; TArray<Edge,TInlineAllocator<3 2>> m_edges ; public : int MAX_SPINE = 8 ; int)",
    "insertText": "getEdgeCount()"
  },
  {
    "label": "GroundSegment()",
    "kind": "Method",
    "detail": "Function (} struct TrajectorySample { float ymin = 0 . f ; float ymax = 0 . f ; bool floorStart = false ; bool floorEnd = false ; } ; struct Trajectory2D { float spine [ 2* MAX_SPINE ] ; float radiusOverflow = 0 . f ; TArray<TrajectorySample,TInlineAllocator<8>> samples ; unsigned char nspine = 0 ; } ; private : enum GroundSampleFlag : unsigned char { UNSET = 0,HAS_GROUND = 1,UNRESTRICTED = 4,} ; struct GroundSample { dtReal height ; GroundSampleFlag flags ; } ; struct PotentialSeg { unsigned char mark ; int idx ; float umin,umax ; float dmin,dmax ; float sp [ 3 ],sq [ 3 ] ; } ; struct GroundSegment {)",
    "insertText": "GroundSegment() : ngsamples(0)"
  },
  {
    "label": "GroundSegment()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "GroundSegment()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (dtReal p [ 3 ],q [ 3 ] ; TArray<GroundSample,TInlineAllocator<1 6>> gsamples ; unsigned short ngsamples ; unsigned short npass ; } ; public : struct EdgeSampler { Trajectory2D trajectory ; GroundSegment start ; GroundSegment end ; dtReal rigp [ 3 ],rigq [ 3 ] ; dtReal ax [ 3 ],ay [ 3 ],az [ 3 ] ; float groundRange ; dtNavLinkAction action = DT_LINK_ACTION_UNSET ; } ; enum JumpLinkFlag : unsigned char { FILTERED = 0,VALID = 1,} ; struct JumpLink { dtReal spine0 [ MAX_SPINE* 3 ] ; dtReal spine1 [ MAX_SPINE* 3 ] ; int nspine = 0 ; JumpLinkFlag flags = VALID ; dtNavLinkAction action = DT_LINK_ACTION_UNSET ; #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "duDebugDrawNavLinkBuilder()",
    "kind": "Method",
    "detail": "Function (# endif } ; TArray<JumpLink,TInlineAllocator<1 6>> m_links ; private : int m_debugSelectedEdge = - 1 ; void)",
    "insertText": "duDebugDrawNavLinkBuilder(struct duDebugDraw* dd, const dtNavLinkBuilder& linkBuilder, unsigned int drawFlags, const EdgeSampler* es)"
  },
  {
    "label": "findEdges()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "findEdges(rcContext& ctx, const rcConfig& cfg, const dtLinkBuilderConfig& builderConfig, const struct dtTileCacheContourSet& lcset, const dtReal* orig, const rcHeightfield* solidHF, const rcCompactHeightfield* compactHF)"
  },
  {
    "label": "buildForAllEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "buildForAllEdges(rcContext& ctx, const dtLinkBuilderConfig& acfg, dtNavLinkAction action)"
  },
  {
    "label": "debugBuildEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "debugBuildEdge(const dtLinkBuilderConfig& acfg, dtNavLinkAction action, int edgeIndex, EdgeSampler& sampler)"
  },
  {
    "label": "initTrajectorySamples()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "initTrajectorySamples(Trajectory2D* trajectory)"
  },
  {
    "label": "isTrajectoryClear()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isTrajectoryClear(const dtReal* pa, const dtReal* pb, const Trajectory2D* trajectory, const dtReal* trajectoryDir)"
  },
  {
    "label": "findPotentialJumpOverEdges()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "findPotentialJumpOverEdges(const dtReal* sp, const dtReal* sq, const float depthRange, const float heightRange, dtReal* outSegs, const int maxOutSegs)"
  },
  {
    "label": "initJumpDownRig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initJumpDownRig(EdgeSampler* es, const dtReal* sp, const dtReal* sq, const dtNavLinkBuilderJumpDownConfig& config)"
  },
  {
    "label": "initJumpOverRig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initJumpOverRig(EdgeSampler* es, const dtReal* sp, const dtReal* sq, const float jumpStartDist, const float jumpEndDist, const float jumpHeight, const float groundRange)"
  },
  {
    "label": "getCompactHeightfieldHeight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getCompactHeightfieldHeight(const dtReal* pt, const dtReal hrange, dtReal* height)"
  },
  {
    "label": "checkHeightfieldCollision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "checkHeightfieldCollision(const dtReal x, const dtReal ymin, const dtReal ymax, const dtReal z)"
  },
  {
    "label": "sampleGroundSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sampleGroundSegment(GroundSegment* seg, const int nsamples, const float groundRange)"
  },
  {
    "label": "updateTrajectorySamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateTrajectorySamples(EdgeSampler* es)"
  },
  {
    "label": "sampleAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sampleAction(EdgeSampler* es)"
  },
  {
    "label": "filterOverlappingLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "filterOverlappingLinks(const float edgeDistanceThreshold)"
  },
  {
    "label": "sampleEdge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "sampleEdge(const dtLinkBuilderConfig& builderConfig, dtNavLinkAction desiredAction, const dtReal* sp, const dtReal* sq, dtNavLinkBuilder::EdgeSampler* sampler)"
  },
  {
    "label": "addEdgeLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addEdgeLinks(const dtLinkBuilderConfig& builderConfig, const EdgeSampler* es, const int edgeIndex)"
  }
]