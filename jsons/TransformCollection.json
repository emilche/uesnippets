[
  {
    "label": "FTransformCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransformCollection"
  },
  {
    "label": "FTransformCollection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GeometryCollection / ManagedArrayCollection . h \" # include \" Misc / Crc . h \" class FTransformCollection : public FManagedArrayCollection { public : typedef FManagedArrayCollection Super ;)",
    "insertText": "FTransformCollection()"
  },
  {
    "label": "FTransformCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTransformCollection(FTransformCollection &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTransformCollection&)",
    "insertText": "operator(const FTransformCollection&)"
  },
  {
    "label": "FTransformCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTransformCollection(FTransformCollection&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTransformCollection&)",
    "insertText": "operator(FTransformCollection&&)"
  },
  {
    "label": "MANAGED_ARRAY_COLLECTION_INTERNAL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MANAGED_ARRAY_COLLECTION_INTERNAL(FTransformCollection)"
  },
  {
    "label": "DefineTransformSchema()",
    "kind": "Method",
    "detail": "Function (const FName TransformGroup ; const FName TransformAttribute ; const FName ParentAttribute ; const FName ChildrenAttribute ; const FName ParticlesAttribute ; const FName LevelAttribute ; const FName ConvexGroup ; const FName ConvexHullAttribute ; void)",
    "insertText": "DefineTransformSchema(FManagedArrayCollection&)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Chaos::FChaosArchive& Ar)"
  },
  {
    "label": "SingleTransform()",
    "kind": "Method",
    "detail": "Function (FTransformCollection)",
    "insertText": "SingleTransform(const FTransform& TransformRoot = FTransform::Identity)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const FManagedArrayCollection& Collection)"
  },
  {
    "label": "AppendCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendCollection(const FTransformCollection& Collection)"
  },
  {
    "label": "AppendTransform()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AppendTransform(const FTransformCollection & GeometryCollection, const FTransform& TransformRoot = FTransform::Identity)"
  },
  {
    "label": "ParentTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParentTransforms(const int32 TransformIndex, const int32 ChildIndex)"
  },
  {
    "label": "ParentTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParentTransforms(const int32 TransformIndex, const TArray<int32>& SelectedBones)"
  },
  {
    "label": "UnparentTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnparentTransform(const int32 ChildIndex)"
  },
  {
    "label": "RelativeTransformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RelativeTransformation(const int32& Index, const FTransform& LocalOffset)"
  },
  {
    "label": "RemoveElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveElements(const FName & Group, const TArray<int32> & SortedDeletionList, FProcessingParameters Params = FProcessingParameters())"
  },
  {
    "label": "MergeElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeElements(const FName& Group, const TArray<int32>& SortedMergeList, const TArray<int32>& MergeRemapIndex, FProcessingParameters Params = FProcessingParameters())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (TManagedArray<FTransform3f> Transform ; TManagedArray<FString> BoneName ; TManagedArray<FLinearColor> BoneColor ; TManagedArray<int32> Parent ; TManagedArray<TSet<int32>> Children ; protected : void)",
    "insertText": "Construct()"
  }
]