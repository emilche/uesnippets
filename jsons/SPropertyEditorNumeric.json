[
  {
    "label": "SPropertyEditorNumeric",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyEditorNumeric"
  },
  {
    "label": "TTypeToProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypeToProperty"
  },
  {
    "label": "FBitmaskFlagInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBitmaskFlagInfo"
  },
  {
    "label": "TBitmaskValueHelpers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBitmaskValueHelpers"
  },
  {
    "label": "FPropertyEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyEditor"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Class . h \" # include \" Misc / Attribute . h \" # include \" UObject / UnrealType . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Margin . h \" # include \" Styling / AppStyle . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / SCompoundWidget . h \" # include \" PropertyNode . h \" # include \" Textures / SlateIcon . h \" # include \" PropertyHandle . h \" # include \" Presentation / PropertyEditor / PropertyEditor . h \" # include \" PropertyEditorHelpers . h \" # include \" NumericPropertyParams . h \" # include \" UserInterface / PropertyEditor / PropertyEditorConstants . h \" # include \" Framework / Commands / UIAction . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" # include \" Editor . h \" # include \" Widgets / Input / NumericTypeInterface . h \" # include \" Widgets / Input / SNumericEntryBox . h \" # include \" Widgets / Input / SComboButton . h \" # include \" ObjectPropertyNode . h \" # include \" PropertyEditorConstants . h \" # include \" Math / UnitConversion . h \" # include \" Widgets / Input / NumericUnitTypeInterface . inl \" # define LOCTEXT_NAMESPACE \" PropertyEditor \" template<NumericType> class SPropertyEditorNumeric : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPropertyEditorNumeric<NumericType> ) : _Font( FAppStyle::GetFontStyle( PropertyEditorConstants::PropertyFontStyle ))"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FSlateFontInfo, Font ) SLATE_END_ARGS() void Construct( const FArguments& InArgs, const TSharedRef<FPropertyEditor>& InPropertyEditor)"
  },
  {
    "label": "GetPropertyNode()",
    "kind": "Method",
    "detail": "Function (bIsUsingSlider = false ; PropertyEditor = InPropertyEditor ; const TSharedRef<FPropertyNode> PropertyNode = InPropertyEditor ->)",
    "insertText": "GetPropertyNode()"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (const FProperty* Property = InPropertyEditor ->)",
    "insertText": "GetProperty()"
  },
  {
    "label": "GetPropertyHandle()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPropertyHandle> PropertyHandle = InPropertyEditor ->)",
    "insertText": "GetPropertyHandle()"
  },
  {
    "label": "PropertyHandle()",
    "kind": "Method",
    "detail": "Function (auto CreateBitmaskFlagsArray = [)",
    "insertText": "PropertyHandle()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (int32 BitmaskBitCount =)",
    "insertText": "sizeof(NumericType)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (TArray<FBitmaskFlagInfo> Result ; Result .)",
    "insertText": "Empty(BitmaskBitCount)"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (const UEnum* BitmaskEnum = nullptr ; const FString& BitmaskEnumName = PropertyHandle ->)",
    "insertText": "GetMetaData(PropertyEditorConstants::MD_BitmaskEnum)"
  },
  {
    "label": "UEnum()",
    "kind": "Method",
    "detail": "Function (BitmaskEnum = UClass::TryFindTypeSlow<)",
    "insertText": "UEnum(BitmaskEnumName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(BitmaskEnum)"
  },
  {
    "label": "GetEnumValueDisplayNamesFromPropertyOverride()",
    "kind": "Method",
    "detail": "Function (const TMap<FName,FText> EnumValueDisplayNameOverrides =)",
    "insertText": "GetEnumValueDisplayNamesFromPropertyOverride(PropertyHandle->GetProperty(), BitmaskEnum)"
  },
  {
    "label": "GetBoolMetaData()",
    "kind": "Method",
    "detail": "Function (const bool bUseEnumValuesAsMaskValues = BitmaskEnum ->)",
    "insertText": "GetBoolMetaData(PropertyEditorConstants::MD_UseEnumValuesAsMaskValuesInEditor)"
  },
  {
    "label": "EnumValueDisplayNameOverrides()",
    "kind": "Method",
    "detail": "Function (auto AddNewBitmaskFlagLambda = [ BitmaskEnum,& Result,&)",
    "insertText": "EnumValueDisplayNameOverrides(int32 InEnumIndex, NumericType InFlagValue)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Emplace()"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (FBitmaskFlagInfo* BitmaskFlag =& Result .)",
    "insertText": "Last()"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (BitmaskFlag -> Value = InFlagValue ; BitmaskFlag -> DisplayName = EnumValueDisplayNameOverrides .)",
    "insertText": "FindRef(BitmaskEnum->GetNameByIndex(InEnumIndex))"
  },
  {
    "label": "GetDisplayNameTextByIndex()",
    "kind": "Method",
    "detail": "Function (BitmaskFlag -> DisplayName = BitmaskEnum ->)",
    "insertText": "GetDisplayNameTextByIndex(InEnumIndex)"
  },
  {
    "label": "GetToolTipTextByIndex()",
    "kind": "Method",
    "detail": "Function (} BitmaskFlag -> ToolTipText = BitmaskEnum ->)",
    "insertText": "GetToolTipTextByIndex(InEnumIndex)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (BitmaskFlag -> ToolTipText =)",
    "insertText": "Format(LOCTEXT(\"BitmaskDefaultFlagToolTipText\", \"Toggle {0} on/off\"), BitmaskFlag->DisplayName)"
  },
  {
    "label": "GetValidEnumsFromPropertyOverride()",
    "kind": "Method",
    "detail": "Function (} } ; const TArray<FName> AllowedPropertyEnums =)",
    "insertText": "GetValidEnumsFromPropertyOverride(PropertyHandle->GetProperty(), BitmaskEnum)"
  },
  {
    "label": "GetInvalidEnumsFromPropertyOverride()",
    "kind": "Method",
    "detail": "Function (const TArray<FName> DisallowedPropertyEnums =)",
    "insertText": "GetInvalidEnumsFromPropertyOverride(PropertyHandle->GetProperty(), BitmaskEnum)"
  },
  {
    "label": "HasMetaData()",
    "kind": "Method",
    "detail": "Function (bool bShouldBeHidden = BitmaskEnum ->)",
    "insertText": "HasMetaData(TEXT(\"Hidden\"), BitmaskEnumIndex)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (bShouldBeHidden = AllowedPropertyEnums .)",
    "insertText": "Find(BitmaskEnum->GetNameByIndex(BitmaskEnumIndex))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(DisallowedPropertyEnums.Num() > 0)"
  },
  {
    "label": "GetValueByIndex()",
    "kind": "Method",
    "detail": "Function (} } const int64 EnumValue64 = BitmaskEnum ->)",
    "insertText": "GetValueByIndex(BitmaskEnumIndex)"
  },
  {
    "label": "NumericType()",
    "kind": "Method",
    "detail": "Function (const NumericType EnumValue = static_cast<)",
    "insertText": "NumericType(EnumValue64)"
  },
  {
    "label": "AddNewBitmaskFlagLambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewBitmaskFlagLambda(BitmaskEnumIndex, EnumValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(EnumValue < BitmaskBitCount)"
  },
  {
    "label": "AddNewBitmaskFlagLambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewBitmaskFlagLambda(BitmaskEnumIndex, TBitmaskValueHelpers<NumericType>::LeftShift(static_cast<NumericType>(1), EnumValue))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } } else {)",
    "insertText": "for(int32 BitmaskFlagIndex = 0; BitmaskFlagIndex < BitmaskBitCount; ++BitmaskFlagIndex)"
  },
  {
    "label": "LeftShift()",
    "kind": "Method",
    "detail": "Function (BitmaskFlag -> Value = TBitmaskValueHelpers<NumericType)",
    "insertText": "LeftShift(static_cast<NumericType>(1), BitmaskFlagIndex)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (BitmaskFlag -> DisplayName =)",
    "insertText": "Format(LOCTEXT(\"BitmaskDefaultFlagDisplayName\", \"Flag {0}\"), FText::AsNumber(BitmaskFlagIndex + 1))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } ; const FComboBoxStyle& ComboBoxStyle =)",
    "insertText": "Get().GetWidgetStyle< FComboBoxStyle >(\"ComboBox\")"
  },
  {
    "label": "CreateBitmaskFlagsArray()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "CreateBitmaskFlagsArray()"
  },
  {
    "label": "OnGetValue()",
    "kind": "Method",
    "detail": "Function (TOptional<NumericType> Value =)",
    "insertText": "OnGetValue()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (NumericType BitmaskValue = Value .)",
    "insertText": "GetValue()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<FText> SetFlags ; SetFlags .)",
    "insertText": "Reserve(BitmaskFlags.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SetFlags .)",
    "insertText": "Add(FlagInfo.DisplayName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(SetFlags.Num() > 3)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (SetFlags .)",
    "insertText": "SetNum(3)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SetFlags .)",
    "insertText": "Add(FText::FromString(\"...\"))"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Join(FText::FromString(\" | \"), SetFlags)"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "LOCTEXT(\"BitmaskButtonContentNoFlagsSet\", \"(No Flags Set)\")"
  },
  {
    "label": "SAssignNew()",
    "kind": "Method",
    "detail": "Function (} else { return PropertyEditorConstants::DefaultUndeterminedText ; } } ;)",
    "insertText": "SAssignNew(PrimaryWidget, SComboButton) .ComboButtonStyle(&ComboBoxStyle.ComboButtonStyle) .ToolTipText_Lambda([this, CreateBitmaskFlagsArray] { TOptional<NumericType> Value = OnGetValue(); if (Value.IsSet()) { TArray<FBitmaskFlagInfo> BitmaskFlags = CreateBitmaskFlagsArray(); TArray<FText> SetFlags; SetFlags.Reserve(BitmaskFlags.Num()); for (const FBitmaskFlagInfo& FlagInfo : BitmaskFlags) { if (TBitmaskValueHelpers<NumericType>::BitwiseAND(Value.GetValue(), FlagInfo.Value)) { SetFlags.Add(FlagInfo.DisplayName); } } return FText::Join(FText::FromString(\" | \"), SetFlags); } return FText::GetEmpty(); }) .ButtonContent() [ SNew(STextBlock) .Font(InArgs._Font) .Text_Lambda(GetComboButtonText) ] .OnGetMenuContent_Lambda([this, CreateBitmaskFlagsArray]() { FMenuBuilder MenuBuilder(false, nullptr); TArray<FBitmaskFlagInfo> BitmaskFlags = CreateBitmaskFlagsArray(); for (int i = 0; i < BitmaskFlags.Num(); ++i) { MenuBuilder.AddMenuEntry( BitmaskFlags[i].DisplayName, BitmaskFlags[i].ToolTipText, FSlateIcon(), FUIAction ( FExecuteAction::CreateLambda([this, i, BitmaskFlags]() { TOptional<NumericType> Value = OnGetValue(); if (Value.IsSet()) { OnValueCommitted(TBitmaskValueHelpers<NumericType>::BitwiseXOR(Value.GetValue(), BitmaskFlags[i].Value), ETextCommit::Default); } }), FCanExecuteAction(), FIsActionChecked::CreateLambda([this, i, BitmaskFlags]() -> bool { TOptional<NumericType> Value = OnGetValue(); if (Value.IsSet()) { return TBitmaskValueHelpers<NumericType>::BitwiseAND(Value.GetValue(), BitmaskFlags[i].Value) != static_cast<NumericType>(0); } return false; }) ), NAME_None, EUserInterfaceActionType::Check); } return MenuBuilder.MakeWidget(); })"
  },
  {
    "label": "AttachWidget()",
    "kind": "Method",
    "detail": "Function (ChildSlot .)",
    "insertText": "AttachWidget(PrimaryWidget.ToSharedRef())"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (} else { const TNumericPropertyParams<NumericType>::FMetaDataGetter MetaDataGetter = TNumericPropertyParams<NumericType>::)",
    "insertText": "CreateLambda([&](const FName& Key) { const FString* InstanceValue = PropertyHandle->GetInstanceMetaData(Key); return (InstanceValue != nullptr) ? *InstanceValue : PropertyHandle->GetMetaData(Key); })"
  },
  {
    "label": "NumericPropertyParams()",
    "kind": "Method",
    "detail": "Function (TNumericPropertyParams<NumericType>)",
    "insertText": "NumericPropertyParams(Property, MetaDataGetter)"
  },
  {
    "label": "FindObjectItemParent()",
    "kind": "Method",
    "detail": "Function (FObjectPropertyNode* ObjectPropertyNode = PropertyNode ->)",
    "insertText": "FindObjectItemParent()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (const FString& ForcedUnits = MetaDataGetter .)",
    "insertText": "Execute(\"ForceUnits\")"
  },
  {
    "label": "UnitFromString()",
    "kind": "Method",
    "detail": "Function (TOptional<EUnit> PropertyUnits =)",
    "insertText": "UnitFromString(*ForcedUnits)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TypeInterface =)",
    "insertText": "MakeShareable(new TNumericUnitTypeInterface<NumericType>(PropertyUnits.GetValue()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(FUnitConversion::Settings().ShouldDisplayUnits())"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (const FString& DynamicUnits = PropertyHandle ->)",
    "insertText": "GetMetaData(TEXT(\"Units\"))"
  },
  {
    "label": "UnitFromString()",
    "kind": "Method",
    "detail": "Function (PropertyUnits =)",
    "insertText": "UnitFromString(*DynamicUnits)"
  },
  {
    "label": "UnitFromString()",
    "kind": "Method",
    "detail": "Function (} else { PropertyUnits =)",
    "insertText": "UnitFromString(*MetaDataGetter.Execute(\"Units\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(!PropertyUnits.IsSet())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (const FString& MaxFractionalDigitsString = MetaDataGetter .)",
    "insertText": "Execute(\"MaxFractionalDigits\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 MaxFractionalDigits = 0 ;)",
    "insertText": "if(LexTryParseString(MaxFractionalDigits, *MaxFractionalDigitsString) && MaxFractionalDigits > 0)"
  },
  {
    "label": "SetMaxFractionalDigits()",
    "kind": "Method",
    "detail": "Function (TypeInterface ->)",
    "insertText": "SetMaxFractionalDigits(MaxFractionalDigits)"
  },
  {
    "label": "SetupFixedDisplay()",
    "kind": "Method",
    "detail": "Function (TypeInterface ->)",
    "insertText": "SetupFixedDisplay(Value.GetValue())"
  },
  {
    "label": "bAllowSpin()",
    "kind": "Method",
    "detail": "Function (} } const bool)",
    "insertText": "bAllowSpin(!ObjectPropertyNode || (1 == ObjectPropertyNode->GetNumObjects())) && !PropertyHandle->GetBoolMetaData(\"NoSpinbox\")"
  },
  {
    "label": "SAssignNew()",
    "kind": "Method",
    "detail": "Function (ChildSlot [)",
    "insertText": "SAssignNew(PrimaryWidget, SNumericEntryBox<NumericType>) .AllowSpin(bAllowSpin) .Value(this, &SPropertyEditorNumeric<NumericType>::OnGetValue) .Font(InArgs._Font) .MinValue(NumericPropertyParams.MinValue) .MaxValue(NumericPropertyParams.MaxValue) .MinSliderValue(NumericPropertyParams.MinSliderValue) .MaxSliderValue(NumericPropertyParams.MaxSliderValue) .SliderExponent(NumericPropertyParams.SliderExponent) .Delta(NumericPropertyParams.Delta) .LinearDeltaSensitivity(NumericPropertyParams.GetLinearDeltaSensitivityAttribute()) .AllowWheel(bAllowSpin) .WheelStep(NumericPropertyParams.WheelStep) .UndeterminedString(PropertyEditorConstants::DefaultUndeterminedText) .OnValueChanged(this, &SPropertyEditorNumeric<NumericType>::OnValueChanged) .OnValueCommitted(this, &SPropertyEditorNumeric<NumericType>::OnValueCommitted) .OnUndeterminedValueCommitted(this, &SPropertyEditorNumeric<NumericType>::OnUndeterminedValueCommitted) .OnBeginSliderMovement(this, &SPropertyEditorNumeric<NumericType>::OnBeginSliderMovement) .OnEndSliderMovement(this, &SPropertyEditorNumeric<NumericType>::OnEndSliderMovement) .TypeInterface(TypeInterface)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetEnabled(TAttribute<bool>(this, &SPropertyEditorNumeric<NumericType>::CanEdit))"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "GetDesiredWidth()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDesiredWidth(float& OutMinDesiredWidth, float& OutMaxDesiredWidth)"
  },
  {
    "label": "bIsBitmask()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsBitmask(!Property->IsA(FFloatProperty::StaticClass()) && Property->HasMetaData(PropertyEditorConstants::MD_Bitmask))"
  },
  {
    "label": "bIsNonEnumByte()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsNonEnumByte(Property->IsA(FByteProperty::StaticClass()) && CastField<const FByteProperty>(Property)->Enum == NULL)"
  },
  {
    "label": "Supports()",
    "kind": "Method",
    "detail": "Function (OutMinDesiredWidth = 7 5 . 0 f ; OutMaxDesiredWidth = 7 5 . 0 f ; } else { OutMinDesiredWidth = 1 2 5 . 0 f ; OutMaxDesiredWidth = bIsBitmask ? 4 0 0 . 0 f : 1 2 5 . 0 f ; } } bool)",
    "insertText": "Supports(const TSharedRef< FPropertyEditor >& PropertyEditor)"
  },
  {
    "label": "Match()",
    "kind": "Method",
    "detail": "Function (} return false ; } private : template<T,U = void> struct TTypeToProperty { bool)",
    "insertText": "Match(const FProperty* InProperty)"
  },
  {
    "label": "OnValueChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnValueChanged(NumericType NewValue)"
  },
  {
    "label": "OrgValue()",
    "kind": "Method",
    "detail": "Function (NumericType)",
    "insertText": "OrgValue(0)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (PropertyHandle ->)",
    "insertText": "SetValue(NewValue, Flags)"
  },
  {
    "label": "SetupFixedDisplay()",
    "kind": "Method",
    "detail": "Function (TypeInterface ->)",
    "insertText": "SetupFixedDisplay(NewValue)"
  },
  {
    "label": "OnValueCommitted()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "OnValueCommitted(NumericType NewValue, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (PropertyHandle ->)",
    "insertText": "SetValue(NewValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LastSliderCommittedValue = NewValue ; })",
    "insertText": "if(TypeInterface.IsValid())"
  },
  {
    "label": "OnUndeterminedValueCommitted()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "OnUndeterminedValueCommitted(FText NewValue, ETextCommit::Type CommitType)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (const FString NewValueString = NewValue .)",
    "insertText": "ToString()"
  },
  {
    "label": "GetPerObjectValues()",
    "kind": "Method",
    "detail": "Function (TArray<FString> PerObjectValues ; PropertyHandle ->)",
    "insertText": "GetPerObjectValues(PerObjectValues)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (NumericType OldNumericValue ; TTypeFromString<NumericType)",
    "insertText": "FromString(OldNumericValue, *Value)"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (const FString ReplacedNewValueString = NewValueString .)",
    "insertText": "Replace(*PropertyEditorConstants::DefaultUndeterminedText.ToString(), *Value)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (TOptional<NumericType> NewNumericValue = TypeInterface ->)",
    "insertText": "FromString(ReplacedNewValueString, OldNumericValue)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (Value = TTypeToString<NumericType)",
    "insertText": "ToString(NewNumericValue.GetValue())"
  },
  {
    "label": "SetPerObjectValues()",
    "kind": "Method",
    "detail": "Function (} } PropertyHandle ->)",
    "insertText": "SetPerObjectValues(PerObjectValues)"
  },
  {
    "label": "OnBeginSliderMovement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBeginSliderMovement()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (PropertyHandle ->)",
    "insertText": "GetValue(LastSliderCommittedValue)"
  },
  {
    "label": "BeginTransaction()",
    "kind": "Method",
    "detail": "Function (GEditor ->)",
    "insertText": "BeginTransaction(TEXT(\"PropertyEditor\"), FText::Format(NSLOCTEXT(\"PropertyEditor\", \"SetNumericPropertyTransaction\", \"Edit {0}\"), PropertyEditor->GetDisplayName()), nullptr)"
  },
  {
    "label": "OnEndSliderMovement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEndSliderMovement(NumericType NewValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsUsingSlider = false ;)",
    "insertText": "if(LastSliderCommittedValue != NewValue)"
  },
  {
    "label": "EndTransaction()",
    "kind": "Method",
    "detail": "Function (} else { GEditor ->)",
    "insertText": "EndTransaction()"
  },
  {
    "label": "CanEdit()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "CanEdit()"
  },
  {
    "label": "BitwiseAND()",
    "kind": "Method",
    "detail": "Function (} struct FBitmaskFlagInfo { NumericType Value ; FText DisplayName ; FText ToolTipText ; } ; template<T> struct TBitmaskValueHelpers { T)",
    "insertText": "BitwiseAND(T Base, T Mask)"
  }
]