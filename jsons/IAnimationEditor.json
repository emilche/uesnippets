[
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "IAnimationSequenceBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimationSequenceBrowser"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "FRichCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRichCurve"
  },
  {
    "label": "ITimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimeSliderController"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IAnimationEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimationEditor"
  },
  {
    "label": "FCurveEditInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditInfo"
  },
  {
    "label": "SetAnimationAsset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" PersonaAssetEditorToolkit . h \" # include \" IHasPersonaToolkit . h \" # include \" Animation / SmartName . h \" class UAnimationAsset ; class IAnimationSequenceBrowser ; class UAnimSequenceBase ; struct FRichCurve ; class ITimeSliderController ; enum class ERawCurveTrackTypes : uint8 ; class IAnimationEditor : public FPersonaAssetEditorToolkit,public IHasPersonaToolkit { public : void)",
    "insertText": "SetAnimationAsset(UAnimationAsset* AnimAsset)"
  },
  {
    "label": "GetAssetBrowser()",
    "kind": "Method",
    "detail": "Function (IAnimationSequenceBrowser*)",
    "insertText": "GetAssetBrowser()"
  },
  {
    "label": "FCurveEditInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCurveEditInfo(const FText& InCurveDisplayName, const FLinearColor& InCurveColor, const FName& InName, ERawCurveTrackTypes InType, int32 InCurveIndex, FSimpleDelegate OnCurveModified = FSimpleDelegate()) : CurveDisplayName(InCurveDisplayName) , CurveColor(InCurveColor) , CurveName(InName) , Type(InType) , CurveIndex(InCurveIndex) , OnCurveModified(OnCurveModified)"
  },
  {
    "label": "FCurveEditInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCurveEditInfo(const FName& InName, ERawCurveTrackTypes InType, int32 InCurveIndex) : CurveName(InName) , Type(InType) , CurveIndex(InCurveIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FCurveEditInfo& InCurveEditInfo)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCurveEditInfo&)",
    "insertText": "operator(const FCurveEditInfo&)"
  },
  {
    "label": "EditCurves()",
    "kind": "Method",
    "detail": "Function (FName CurveName ; ERawCurveTrackTypes Type ; int32 CurveIndex ; FSimpleDelegate OnCurveModified ; } ; void)",
    "insertText": "EditCurves(UAnimSequenceBase* InAnimSequence, const TArray<FCurveEditInfo>& InCurveInfo, const TSharedPtr<ITimeSliderController>& InExternalTimeSliderController)"
  },
  {
    "label": "StopEditingCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopEditingCurves(const TArray<FCurveEditInfo>& InCurveInfo)"
  }
]