[
  {
    "label": "FD3D12TransientHeapCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12TransientHeapCache"
  },
  {
    "label": "IRHITransientMemoryCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHITransientMemoryCache"
  },
  {
    "label": "FD3D12DeviceBasicInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12DeviceBasicInfo"
  },
  {
    "label": "FD3D12AdapterDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12AdapterDesc"
  },
  {
    "label": "FD3D12MemoryInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12MemoryInfo"
  },
  {
    "label": "FTransientUniformBufferAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransientUniformBufferAllocator"
  },
  {
    "label": "FD3D12Adapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Adapter"
  },
  {
    "label": "FD3D12ComputeShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ComputeShader"
  },
  {
    "label": "FD3D12WorkGraphShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12WorkGraphShader"
  },
  {
    "label": "FD3D12RayTracingShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RayTracingShader"
  },
  {
    "label": "FAllocatedResourceResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocatedResourceResult"
  },
  {
    "label": "FReleasedAllocationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReleasedAllocationData"
  },
  {
    "label": "FTrackedAllocationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackedAllocationData"
  },
  {
    "label": "FD3D12AdapterDesc()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" D3D12ThirdParty . h \" # include \" D3D12CommandContext . h \" # include \" D3D12RootSignature . h \" # include \" D3D12BindlessDescriptors . h \" class FD3D12TransientHeapCache ; class IRHITransientMemoryCache ; struct FD3D12DeviceBasicInfo { D3D_FEATURE_LEVEL MaxFeatureLevel ; D3D_SHADER_MODEL MaxShaderModel ; D3D12_RESOURCE_BINDING_TIER ResourceBindingTier ; D3D12_RESOURCE_HEAP_TIER ResourceHeapTier ; uint32 NumDeviceNodes ; bool bSupportsWaveOps ; bool bSupportsAtomic64 ; ERHIFeatureLevel::Type MaxRHIFeatureLevel ; } ; struct FD3D12AdapterDesc {)",
    "insertText": "FD3D12AdapterDesc()"
  },
  {
    "label": "FD3D12AdapterDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12AdapterDesc(const DXGI_ADAPTER_DESC& InDesc, int32 InAdapterIndex, const FD3D12DeviceBasicInfo& DeviceInfo)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "EnumAdapters()",
    "kind": "Method",
    "detail": "Function (# if DXGI_MAX_FACTORY_INTERFACE> = 6 HRESULT)",
    "insertText": "EnumAdapters(int32 AdapterIndex, DXGI_GPU_PREFERENCE GpuPreference, IDXGIFactory2* DxgiFactory2, IDXGIFactory6* DxgiFactory6, IDXGIAdapter** TempAdapter)"
  },
  {
    "label": "EnumAdapters()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "EnumAdapters(IDXGIFactory2* DxgiFactory2, IDXGIFactory6* DxgiFactory6, IDXGIAdapter** TempAdapter)"
  },
  {
    "label": "MaxSupportedFeatureLevel()",
    "kind": "Method",
    "detail": "Function (# endif DXGI_ADAPTER_DESC Desc { } ; int32 AdapterIndex = - 1 ; D3D_FEATURE_LEVEL)",
    "insertText": "MaxSupportedFeatureLevel(D3D_FEATURE_LEVEL)"
  },
  {
    "label": "MaxSupportedShaderModel()",
    "kind": "Method",
    "detail": "Function (D3D_SHADER_MODEL)",
    "insertText": "MaxSupportedShaderModel(D3D_SHADER_MODEL)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (D3D12_RESOURCE_BINDING_TIER ResourceBindingTier = D3D12_RESOURCE_BINDING_TIER_1 ; D3D12_RESOURCE_HEAP_TIER ResourceHeapTier = D3D12_RESOURCE_HEAP_TIER_1 ; ERHIFeatureLevel::Type MaxRHIFeatureLevel = ERHIFeatureLevel::Num ; uint32 NumDeviceNodes = 1 ; bool bIsIntegrated = false ; bool bSupportsWaveOps = false ; bool bSupportsAtomic64 = false ; # if DXGI_MAX_FACTORY_INTERFACE> = 6 DXGI_GPU_PREFERENCE GpuPreference = DXGI_GPU_PREFERENCE_UNSPECIFIED ; # endif } ; struct FD3D12MemoryInfo { DXGI_QUERY_VIDEO_MEMORY_INFO LocalMemoryInfo { } ; DXGI_QUERY_VIDEO_MEMORY_INFO NonLocalMemoryInfo { } ; uint32 UpdateFrameNumber = ~)",
    "insertText": "uint32(0)"
  },
  {
    "label": "IsOverBudget()",
    "kind": "Method",
    "detail": "Function (uint64 AvailableLocalMemory = 0 ; uint64 DemotedLocalMemory = 0 ; bool)",
    "insertText": "IsOverBudget()"
  },
  {
    "label": "FTransientUniformBufferAllocator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTransientUniformBufferAllocator()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "FD3D12Adapter()",
    "kind": "Method",
    "detail": "Function (private : FD3D12Adapter* Adapter = nullptr ; } ; class FD3D12Adapter : public FNoncopyable { public :)",
    "insertText": "FD3D12Adapter(FD3D12AdapterDesc& DescIn)"
  },
  {
    "label": "FD3D12Adapter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12Adapter()"
  },
  {
    "label": "CleanupResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupResources()"
  },
  {
    "label": "InitializeDevices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeDevices()"
  },
  {
    "label": "InitializeExplicitDescriptorHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeExplicitDescriptorHeap()"
  },
  {
    "label": "InitializeRayTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeRayTracing()"
  },
  {
    "label": "GetRootSignature()",
    "kind": "Method",
    "detail": "Function (const FD3D12RootSignature*)",
    "insertText": "GetRootSignature(const class FD3D12ComputeShader* Shader)"
  },
  {
    "label": "GetRootSignature()",
    "kind": "Method",
    "detail": "Function (const FD3D12RootSignature*)",
    "insertText": "GetRootSignature(const class FD3D12WorkGraphShader* Shader)"
  },
  {
    "label": "GetLocalRootSignature()",
    "kind": "Method",
    "detail": "Function (const FD3D12RootSignature*)",
    "insertText": "GetLocalRootSignature(const class FD3D12RayTracingShader* Shader)"
  },
  {
    "label": "GetGlobalRayTracingRootSignature()",
    "kind": "Method",
    "detail": "Function (const FD3D12RootSignature*)",
    "insertText": "GetGlobalRayTracingRootSignature(const FRHIShaderBindingLayout& ShaderBindingLayout)"
  },
  {
    "label": "GetStaticGraphicsWithConstantsRootSignature()",
    "kind": "Method",
    "detail": "Function (# if USE_STATIC_ROOT_SIGNATURE const FD3D12RootSignature*)",
    "insertText": "GetStaticGraphicsWithConstantsRootSignature()"
  },
  {
    "label": "GetVRSTileSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetVRSTileSize()"
  },
  {
    "label": "CreateDXGIFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDXGIFactory(TRefCountPtr<IDXGIFactory2>& DxgiFactory2, bool bWithDebug, HMODULE DxgiDllHandle)"
  },
  {
    "label": "InitDXGIFactoryVariants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDXGIFactoryVariants(IDXGIFactory2* InDxgiFactory2)"
  },
  {
    "label": "EnumAdapters()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "EnumAdapters(IDXGIAdapter** TempAdapter)"
  },
  {
    "label": "GetDebugFlags()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetDebugFlags()"
  },
  {
    "label": "CreateCommittedResource()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CreateCommittedResource(const FD3D12ResourceDesc& InDesc, FRHIGPUMask CreationNode, const D3D12_HEAP_PROPERTIES& HeapProps, D3D12_RESOURCE_STATES InInitialState, const D3D12_CLEAR_VALUE* ClearValue, FD3D12Resource** ppOutResource, const TCHAR* Name, bool bVerifyHResult = true)"
  },
  {
    "label": "CreateCommittedResource()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "CreateCommittedResource(const FD3D12ResourceDesc& Desc, FRHIGPUMask CreationNode, const D3D12_HEAP_PROPERTIES& HeapProps, D3D12_RESOURCE_STATES InInitialState, ED3D12ResourceStateMode InResourceStateMode, D3D12_RESOURCE_STATES InDefaultState, const D3D12_CLEAR_VALUE* ClearValue, FD3D12Resource** ppOutResource, const TCHAR* Name, bool bVerifyHResult = true)"
  },
  {
    "label": "CreatePlacedResource()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CreatePlacedResource(const FD3D12ResourceDesc& InDesc, FD3D12Heap* BackingHeap, uint64 HeapOffset, D3D12_RESOURCE_STATES InInitialState, const D3D12_CLEAR_VALUE* ClearValue, FD3D12Resource** ppOutResource, const TCHAR* Name, bool bVerifyHResult = true)"
  },
  {
    "label": "CreatePlacedResource()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "CreatePlacedResource(const FD3D12ResourceDesc& Desc, FD3D12Heap* BackingHeap, uint64 HeapOffset, D3D12_RESOURCE_STATES InInitialState, ED3D12ResourceStateMode InResourceStateMode, D3D12_RESOURCE_STATES InDefaultState, const D3D12_CLEAR_VALUE* ClearValue, FD3D12Resource** ppOutResource, const TCHAR* Name, bool bVerifyHResult = true)"
  },
  {
    "label": "CreateReservedResource()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CreateReservedResource(const FD3D12ResourceDesc& Desc, FRHIGPUMask CreationNode, D3D12_RESOURCE_STATES InInitialState, ED3D12ResourceStateMode InResourceStateMode, D3D12_RESOURCE_STATES InDefaultState, const D3D12_CLEAR_VALUE* ClearValue, FD3D12Resource** ppOutResource, const TCHAR* Name, bool bVerifyHResult = true)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CreateBuffer(D3D12_HEAP_TYPE HeapType, FRHIGPUMask CreationNode, FRHIGPUMask VisibleNodes, uint64 HeapSize, FD3D12Resource** ppOutResource, const TCHAR* Name, D3D12_RESOURCE_FLAGS Flags = D3D12_RESOURCE_FLAG_NONE)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CreateBuffer(D3D12_HEAP_TYPE HeapType, FRHIGPUMask CreationNode, FRHIGPUMask VisibleNodes, D3D12_RESOURCE_STATES InitialState, ED3D12ResourceStateMode InResourceStateMode, uint64 HeapSize, FD3D12Resource** ppOutResource, const TCHAR* Name, D3D12_RESOURCE_FLAGS Flags = D3D12_RESOURCE_FLAG_NONE)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CreateBuffer(const D3D12_HEAP_PROPERTIES& HeapProps, FRHIGPUMask CreationNode, D3D12_RESOURCE_STATES InInitialState, ED3D12ResourceStateMode InResourceStateMode, D3D12_RESOURCE_STATES InDefaultState, uint64 HeapSize, FD3D12Resource** ppOutResource, const TCHAR* Name, D3D12_RESOURCE_FLAGS Flags = D3D12_RESOURCE_FLAG_NONE)"
  },
  {
    "label": "CreateRHIBuffer()",
    "kind": "Method",
    "detail": "Function (FD3D12Buffer*)",
    "insertText": "CreateRHIBuffer(const D3D12_RESOURCE_DESC& Desc, uint32 Alignment, FRHIBufferDesc const& BufferDesc, ED3D12ResourceStateMode InResourceStateMode, D3D12_RESOURCE_STATES InCreateState, bool bHasInitialData, const FRHIGPUMask& InGPUMask, ID3D12ResourceAllocator* ResourceAllocator, const TCHAR* InDebugName, const FName& InOwnerName = NAME_None, const FName& InClassName = NAME_None)"
  },
  {
    "label": "CreateUAVAliasResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateUAVAliasResource(D3D12_CLEAR_VALUE* ClearValuePtr, const TCHAR* DebugName, FD3D12ResourceLocation& Location)"
  },
  {
    "label": "CreateLinkedObject()",
    "kind": "Method",
    "detail": "Function (template<ObjectType,CreationCoreFunction> ObjectType*)",
    "insertText": "CreateLinkedObject(FRHIGPUMask GPUMask, const CreationCoreFunction& pfnCreationCore)"
  },
  {
    "label": "GetDefaultContextRedirector()",
    "kind": "Method",
    "detail": "Function (} FD3D12CommandContextRedirector&)",
    "insertText": "GetDefaultContextRedirector()"
  },
  {
    "label": "GetTransientUniformBufferAllocator()",
    "kind": "Method",
    "detail": "Function (FD3D12FastConstantAllocator&)",
    "insertText": "GetTransientUniformBufferAllocator()"
  },
  {
    "label": "ReleaseTransientUniformBufferAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseTransientUniformBufferAllocator(FTransientUniformBufferAllocator* InAllocator)"
  },
  {
    "label": "BlockUntilIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockUntilIdle()"
  },
  {
    "label": "CollectMemoryStats()",
    "kind": "Method",
    "detail": "Function (const FD3DMemoryStats&)",
    "insertText": "CollectMemoryStats()"
  },
  {
    "label": "ReleaseTrackedAllocationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseTrackedAllocationData(FD3D12ResourceLocation* InAllocation, bool bDefragFree)"
  },
  {
    "label": "TrackHeapAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackHeapAllocation(FD3D12Heap* InHeap)"
  },
  {
    "label": "ReleaseTrackedHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseTrackedHeap(FD3D12Heap* InHeap)"
  },
  {
    "label": "DumpTrackedAllocationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpTrackedAllocationData(FOutputDevice& OutputDevice, bool bResidentOnly, bool bWithCallstack)"
  },
  {
    "label": "FindResourcesNearGPUAddress()",
    "kind": "Method",
    "detail": "Function (struct FAllocatedResourceResult { FD3D12ResourceLocation* Allocation = nullptr ; uint64 Distance = 0 ; } ; void)",
    "insertText": "FindResourcesNearGPUAddress(D3D12_GPU_VIRTUAL_ADDRESS InGPUVirtualAddress, uint64 InRange, TArray<FAllocatedResourceResult>& OutResources)"
  },
  {
    "label": "FindHeapsContainingGPUAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindHeapsContainingGPUAddress(D3D12_GPU_VIRTUAL_ADDRESS InGPUVirtualAddress, TArray<FD3D12Heap*>& OutHeaps)"
  },
  {
    "label": "FindReleasedAllocationData()",
    "kind": "Method",
    "detail": "Function (struct FReleasedAllocationData { D3D12_GPU_VIRTUAL_ADDRESS GPUVirtualAddress = 0 ; uint64 AllocationSize = 0 ; FName ResourceName ; D3D12_RESOURCE_DESC ResourceDesc = { } ; uint64 ReleasedFrameID = 0 ; bool bDefragFree = false ; bool bBackBuffer = false ; bool bTransient = false ; bool bHeap = false ; } ; void)",
    "insertText": "FindReleasedAllocationData(D3D12_GPU_VIRTUAL_ADDRESS InGPUVirtualAddress, TArray<FReleasedAllocationData>& OutAllocationData)"
  },
  {
    "label": "SetResidencyPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResidencyPriority(ID3D12Pageable* Pageable, D3D12_RESIDENCY_PRIORITY HeapPriority, uint32 GPUIndex)"
  },
  {
    "label": "GetDxgiDllHandle()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS HMODULE)",
    "insertText": "GetDxgiDllHandle()"
  },
  {
    "label": "AllocateBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateBuffer(FD3D12Device* Device, const D3D12_RESOURCE_DESC& Desc, uint32 Size, EBufferUsageFlags InUsage, ED3D12ResourceStateMode InResourceStateMode, D3D12_RESOURCE_STATES InCreateState, uint32 Alignment, FD3D12Buffer* Buffer, FD3D12ResourceLocation& ResourceLocation, ID3D12ResourceAllocator* ResourceAllocator, const TCHAR* InDebugName)"
  },
  {
    "label": "CreateCommandSignatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCommandSignatures()"
  },
  {
    "label": "TraceMemoryAllocation()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<ID3D12Device> RootDevice ; # if D3D12_MAX_DEVICE_INTERFACE> = 1 TRefCountPtr<ID3D12Device1> RootDevice1 ; # endif # if D3D12_MAX_DEVICE_INTERFACE> = 2 TRefCountPtr<ID3D12Device2> RootDevice2 ; # endif # if D3D12_MAX_DEVICE_INTERFACE> = 3 TRefCountPtr<ID3D12Device3> RootDevice3 ; # endif # if D3D12_MAX_DEVICE_INTERFACE> = 4 TRefCountPtr<ID3D12Device4> RootDevice4 ; # endif # if D3D12_MAX_DEVICE_INTERFACE> = 5 TRefCountPtr<ID3D12Device5> RootDevice5 ; # endif # if D3D12_MAX_DEVICE_INTERFACE> = 6 TRefCountPtr<ID3D12Device6> RootDevice6 ; # endif # if D3D12_MAX_DEVICE_INTERFACE> = 7 TRefCountPtr<ID3D12Device7> RootDevice7 ; # endif # if D3D12_MAX_DEVICE_INTERFACE> = 8 TRefCountPtr<ID3D12Device8> RootDevice8 ; # endif # if D3D12_MAX_DEVICE_INTERFACE> = 9 TRefCountPtr<ID3D12Device9> RootDevice9 ; # endif # if D3D12_MAX_DEVICE_INTERFACE> = 1 0 TRefCountPtr<ID3D12Device10> RootDevice10 ; # endif # if D3D12_MAX_DEVICE_INTERFACE> = 1 1 TRefCountPtr<ID3D12Device11> RootDevice11 ; # endif # if D3D12_MAX_DEVICE_INTERFACE> = 1 2 TRefCountPtr<ID3D12Device12> RootDevice12 ; # endif TRefCountPtr<IDXGIFactory2> DxgiFactory2 ; # if DXGI_MAX_FACTORY_INTERFACE> = 3 TRefCountPtr<IDXGIFactory3> DxgiFactory3 ; # endif # if DXGI_MAX_FACTORY_INTERFACE> = 4 TRefCountPtr<IDXGIFactory4> DxgiFactory4 ; # endif # if DXGI_MAX_FACTORY_INTERFACE> = 5 TRefCountPtr<IDXGIFactory5> DxgiFactory5 ; # endif # if DXGI_MAX_FACTORY_INTERFACE> = 6 TRefCountPtr<IDXGIFactory6> DxgiFactory6 ; # endif # if DXGI_MAX_FACTORY_INTERFACE> = 7 TRefCountPtr<IDXGIFactory7> DxgiFactory7 ; # endif # if D3D12_SUPPORTS_DXGI_DEBUG HMODULE DxgiDebugDllHandle { } ; TRefCountPtr<IDXGIDebug> DXGIDebug ; HANDLE ExceptionHandlerHandle = INVALID_HANDLE_VALUE ; # endif # if PLATFORM_WINDOWS HMODULE DxgiDllHandle { } ; # endif D3D_ROOT_SIGNATURE_VERSION RootSignatureVersion ; bool bDepthBoundsTestSupported = false ; bool bCopyQueueTimestampQueriesSupported = false ; bool bHeapNotZeroedSupported = false ; int32 MaxNonSamplerDescriptors = 0 ; int32 MaxSamplerDescriptors = 0 ; uint32 VRSTileSize = 0 ; bool bDebugDevice = false ; FD3D12AdapterDesc Desc ; TRefCountPtr<IDXGIAdapter> DxgiAdapter ; FD3D12RootSignatureManager RootSignatureManager ; FD3D12PipelineStateCache PipelineStateCache ; TRefCountPtr<ID3D12CommandSignature> DrawIndirectCommandSignature ; TRefCountPtr<ID3D12CommandSignature> DrawIndexedIndirectCommandSignature ; TRefCountPtr<ID3D12CommandSignature> DispatchIndirectGraphicsCommandSignature ; TRefCountPtr<ID3D12CommandSignature> DispatchIndirectComputeCommandSignature ; # if PLATFORM_SUPPORTS_MESH_SHADERS TRefCountPtr<ID3D12CommandSignature> DispatchIndirectMeshCommandSignature ; # endif TRefCountPtr<ID3D12CommandSignature> DispatchRaysIndirectCommandSignature ; FD3D12UploadHeapAllocator* UploadHeapAllocator [ MAX_NUM_GPUS ] ; TArray<FD3D12Viewport*> Viewports ; TRefCountPtr<FD3D12Viewport> DrawingViewport ; TUniquePtr<FD3D12ManualFence> FrameFence ; FD3D12CommandContextRedirector DefaultContextRedirector ; bool bTrackAllAllocation = false ; struct FTrackedAllocationData { const int32 MaxStackDepth = 3 0 ; FD3D12ResourceLocation* ResourceAllocation ; uint64 AllocationSize ; uint32 StackDepth ; uint64 Stack [ MaxStackDepth ] ; } ; TMap<FD3D12ResourceLocation*,FTrackedAllocationData> TrackedAllocationData ; TArray<FD3D12Heap*> TrackedHeaps ; TArray<FReleasedAllocationData> ReleasedAllocationData ; FCriticalSection TrackedAllocationDataCS ; FD3DMemoryStats MemoryStats ; uint64 MemoryStatsUpdateFrame ; TArray<FTransientUniformBufferAllocator*> TransientUniformBufferAllocators ; FCriticalSection TransientUniformBufferAllocatorsCS ; TUniquePtr<IRHITransientMemoryCache> TransientMemoryCache ; TStaticArray<FD3D12Device*,MAX_NUM_GPUS> Devices ; uint32 DebugFlags = 0 ; # if USE_STATIC_ROOT_SIGNATURE FD3D12RootSignature StaticGraphicsRootSignature ; FD3D12RootSignature StaticGraphicsWithConstantsRootSignature ; FD3D12RootSignature StaticComputeRootSignature ; FD3D12RootSignature StaticComputeWithConstantsRootSignature ; FD3D12RootSignature StaticRayTracingGlobalRootSignature ; FD3D12RootSignature StaticRayTracingLocalRootSignature ; # endif # if PLATFORM_SUPPORTS_BINDLESS_RENDERING FD3D12BindlessDescriptorAllocator BindlessDescriptorAllocator ; # endif private : void)",
    "insertText": "TraceMemoryAllocation(FD3D12Resource* Resource)"
  }
]