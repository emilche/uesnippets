[
  {
    "label": "FPBDStiffness",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDStiffness"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDWeightMap . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainersFwd . h \" # include \" ChaosStats . h \")",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Chaos PBD Stiffness Apply Values\"), STAT_PBD_StiffnessApplyValues, STATGROUP_Chaos)"
  },
  {
    "label": "ParameterFrequency()",
    "kind": "Method",
    "detail": "Function (namespace Chaos::Softs { class FPBDStiffness final : public FPBDWeightMap { public : FSolverReal)",
    "insertText": "ParameterFrequency(FSolverReal)"
  },
  {
    "label": "DefaultPBDMaxStiffness()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "DefaultPBDMaxStiffness(FSolverReal)"
  },
  {
    "label": "DefaultParameterFitBase()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "DefaultParameterFitBase(FSolverReal)"
  },
  {
    "label": "FPBDStiffness()",
    "kind": "Method",
    "detail": "Function (int32 DefaultTableSize = 1 6 ;)",
    "insertText": "FPBDStiffness(const FSolverVec2& InWeightedValue, const TConstArrayView<FRealSingle>& Multipliers = TConstArrayView<FRealSingle>(), int32 ParticleCount = 0, int32 TableSize = DefaultTableSize, FSolverReal InParameterFitBase = DefaultParameterFitBase, FSolverReal InMaxStiffness = DefaultPBDMaxStiffness)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<int32 Valence)",
    "insertText": "UE_REQUIRES(Valence >= 2 && Valence <= 4)> inline FPBDStiffness( const FSolverVec2& InWeightedValue, const TConstArrayView<FRealSingle>& Multipliers = TConstArrayView<FRealSingle>(), const TConstArrayView<TVector<int32, Valence>>& Constraints = TConstArrayView<TVector<int32, Valence>>(), int32 ParticleOffset = INDEX_NONE, int32 ParticleCount = 0, int32 TableSize = DefaultTableSize, FSolverReal InParameterFitBase = DefaultParameterFitBase, FSolverReal MaxStiffness = DefaultPBDMaxStiffness)"
  },
  {
    "label": "FPBDStiffness()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPBDStiffness()"
  },
  {
    "label": "FPBDStiffness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPBDStiffness(const FPBDStiffness&)"
  },
  {
    "label": "FPBDStiffness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPBDStiffness(FPBDStiffness&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPBDStiffness&)",
    "insertText": "operator(const FPBDStiffness&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPBDStiffness&)",
    "insertText": "operator(FPBDStiffness&&)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWeightedValue(const FSolverVec2& InWeightedValue, FSolverReal MaxStiffness = DefaultPBDMaxStiffness)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWeightedValue(InWeightedValue.ClampAxes((FSolverReal)0., MaxStiffness))"
  },
  {
    "label": "ApplyPBDValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyPBDValues(const FSolverReal Dt, const int32 NumIterations)"
  },
  {
    "label": "ApplyXPBDValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyXPBDValues(const FSolverReal MaxStiffnesss)"
  },
  {
    "label": "PrevDtOrMaxStiffness()",
    "kind": "Method",
    "detail": "Function (private : FSolverReal ParameterFitBase ; FSolverReal ParameterFitLogBase ; FSolverReal)",
    "insertText": "PrevDtOrMaxStiffness(FSolverReal)"
  },
  {
    "label": "FPBDStiffness()",
    "kind": "Method",
    "detail": "Function (int32 PrevNumIterations = 0 ; using FPBDWeightMap::bIsDirty ; } ;)",
    "insertText": "FPBDStiffness(const FSolverVec2& InWeightedValue, const TConstArrayView<FRealSingle>& Multipliers, int32 ParticleCount, int32 TableSize, FSolverReal InParameterFitBase, FSolverReal MaxStiffness) : FPBDWeightMap(FSolverVec2::ZeroVector, Multipliers, ParticleCount, TableSize) , ParameterFitBase(InParameterFitBase) , ParameterFitLogBase(FMath::Loge(InParameterFitBase))"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWeightedValue(InWeightedValue, MaxStiffness)"
  },
  {
    "label": "UE_REQUIRES_DEFINITION()",
    "kind": "Method",
    "detail": "Function (} template<int32 Valence)",
    "insertText": "UE_REQUIRES_DEFINITION(Valence >= 2 && Valence <= 4)> FPBDStiffness::FPBDStiffness( const FSolverVec2& InWeightedValue, const TConstArrayView<FRealSingle>& Multipliers, const TConstArrayView<TVector<int32, Valence>>& Constraints, int32 ParticleOffset, int32 ParticleCount, int32 TableSize, FSolverReal InParameterFitBase, FSolverReal MaxStiffness) : FPBDWeightMap(FSolverVec2::ZeroVector, Multipliers, Constraints, ParticleOffset, ParticleCount, TableSize) , ParameterFitBase(InParameterFitBase) , ParameterFitLogBase(FMath::Loge(InParameterFitBase))"
  },
  {
    "label": "CalcExponentialParameterFit()",
    "kind": "Method",
    "detail": "Function (} FSolverReal)",
    "insertText": "CalcExponentialParameterFit(const FSolverReal ParameterFitBase, const FSolverReal ParameterFitLogBase, const FSolverReal InValue)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_PBD_StiffnessApplyValues)"
  },
  {
    "label": "Exponent()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "Exponent(const FSolverReal InValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InValue >= (FSolverReal)(1. - UE_DOUBLE_SMALL_NUMBER))"
  },
  {
    "label": "CalcExponentialParameterFit()",
    "kind": "Method",
    "detail": "Function (} const FSolverReal ParameterFit =)",
    "insertText": "CalcExponentialParameterFit(ParameterFitBase, ParameterFitLogBase, InValue)"
  },
  {
    "label": "Loge()",
    "kind": "Method",
    "detail": "Function (const FSolverReal LogValue =)",
    "insertText": "Loge((FSolverReal)1. - ParameterFit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(Dt != PrevDtOrMaxStiffness || NumIterations != PrevNumIterations)"
  },
  {
    "label": "ApplyValues()",
    "kind": "Method",
    "detail": "Function (PrevDtOrMaxStiffness = Dt ; PrevNumIterations = NumIterations ; bIsDirty = true ; })",
    "insertText": "ApplyValues(SimulationValue)"
  },
  {
    "label": "ApplyXPBDValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyXPBDValues(const FSolverReal MaxStiffness)"
  },
  {
    "label": "MaxStiffness()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxStiffness(const FSolverReal InValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(MaxStiffness != PrevDtOrMaxStiffness)"
  }
]