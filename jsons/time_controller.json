[
  {
    "label": "TimeController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeController"
  },
  {
    "label": "ControlledAlarmClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ControlledAlarmClock"
  },
  {
    "label": "TimeController()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TEST_TIME_CONTROLLER_H_ # define API_TEST_TIME_CONTROLLER_H_ # include<functional> # include<memory> # include<string> # include \" api / task_queue / task_queue_factory . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / synchronization / yield_policy . h \" # include \" rtc_base / thread . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class TimeController { public : ~)",
    "insertText": "TimeController()"
  },
  {
    "label": "GetClock()",
    "kind": "Method",
    "detail": "Function (Clock*)",
    "insertText": "GetClock()"
  },
  {
    "label": "GetTaskQueueFactory()",
    "kind": "Method",
    "detail": "Function (TaskQueueFactory*)",
    "insertText": "GetTaskQueueFactory()"
  },
  {
    "label": "CreateTaskQueueFactory()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<TaskQueueFactory>)",
    "insertText": "CreateTaskQueueFactory()"
  },
  {
    "label": "CreateThread()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<rtc::Thread>)",
    "insertText": "CreateThread(const std::string& name, std::unique_ptr<rtc::SocketServer> socket_server = nullptr)"
  },
  {
    "label": "GetMainThread()",
    "kind": "Method",
    "detail": "Function (rtc::Thread*)",
    "insertText": "GetMainThread()"
  },
  {
    "label": "AdvanceTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceTime(TimeDelta duration)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Wait(const std::function<bool()>& condition, TimeDelta max_duration = TimeDelta::Seconds(5))"
  },
  {
    "label": "ControlledAlarmClock()",
    "kind": "Method",
    "detail": "Function (} ; class ControlledAlarmClock { public : ~)",
    "insertText": "ControlledAlarmClock()"
  },
  {
    "label": "ScheduleAlarmAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScheduleAlarmAt(Timestamp deadline)"
  },
  {
    "label": "SetCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCallback(std::function<void()> callback)"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(TimeDelta duration)"
  }
]