[
  {
    "label": "FRHICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList"
  },
  {
    "label": "UTextureRenderTarget2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureRenderTarget2D"
  },
  {
    "label": "FGraphicsPipelineStateInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphicsPipelineStateInitializer"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FMeshPaintShaderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshPaintShaderParameters"
  },
  {
    "label": "FMeshPaintDilateShaderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshPaintDilateShaderParameters"
  },
  {
    "label": "SetMeshPaintShaders()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" RHIDefinitions . h \" # endif class FRHICommandList ; class UTextureRenderTarget2D ; class FGraphicsPipelineStateInitializer ; namespace ERHIFeatureLevel { enum Type : int ; } namespace MeshPaintRendering { struct FMeshPaintShaderParameters { public : UTextureRenderTarget2D* CloneTexture ; UTextureRenderTarget2D* PaintBrushTexture ; FMatrix WorldToBrushMatrix ; FVector2f PaintBrushDirectionVector ; float BrushRadius ; float BrushRadialFalloffRange ; float BrushDepth ; float BrushDepthFalloffRange ; float BrushStrength ; float PaintBrushRotationOffset ; FLinearColor BrushColor ; bool RedChannelFlag ; bool BlueChannelFlag ; bool GreenChannelFlag ; bool AlphaChannelFlag ; bool GenerateMaskFlag ; bool bRotateBrushTowardsDirection ; bool bUseFillBucket = false ; } ; struct FMeshPaintDilateShaderParameters { public : UTextureRenderTarget2D* Texture0 ; UTextureRenderTarget2D* Texture1 ; UTextureRenderTarget2D* Texture2 ; float WidthPixelOffset ; float HeightPixelOffset ; } ; void)",
    "insertText": "SetMeshPaintShaders(FRHICommandList& RHICmdList, FGraphicsPipelineStateInitializer& GraphicsPSOInit, ERHIFeatureLevel::Type InFeatureLevel, const FMatrix& InTransform, const float InGamma, const FMeshPaintShaderParameters& InShaderParams)"
  },
  {
    "label": "SetMeshPaintDilateShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMeshPaintDilateShaders(FRHICommandList& RHICmdList, FGraphicsPipelineStateInitializer& GraphicsPSOInit, ERHIFeatureLevel::Type InFeatureLevel, const FMatrix& InTransform, const float InGamma, const FMeshPaintDilateShaderParameters& InShaderParams)"
  }
]