[
  {
    "label": "FAnimNode_LinkedAnimGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LinkedAnimGraph"
  },
  {
    "label": "FLinkedAnimGraphReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinkedAnimGraphReference"
  },
  {
    "label": "ULinkedAnimGraphLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULinkedAnimGraphLibrary"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" Animation / AnimNodeReference . h \" # include \" LinkedAnimGraphLibrary . generated . h \" struct FAnimNode_LinkedAnimGraph ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UFUNCTION(BlueprintCallable, Category = \"Animation|Linked Anim Graphs\", meta=(BlueprintThreadSafe, ExpandEnumAsExecs = \"Result\")) static ANIMGRAPHRUNTIME_API FLinkedAnimGraphReference ConvertToLinkedAnimGraph(const FAnimNodeReference& Node, EAnimNodeReferenceConversionResult& Result)"
  },
  {
    "label": "ConvertToLinkedAnimGraph()",
    "kind": "Method",
    "detail": "Function (EAnimNodeReferenceConversionResult ConversionResult ; LinkedAnimGraph =)",
    "insertText": "ConvertToLinkedAnimGraph(Node, ConversionResult)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Result(ConversionResult == EAnimNodeReferenceConversionResult::Succeeded)"
  }
]