[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorIndexTupleOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorIndexTupleOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "TensorTupleReducerOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorTupleReducerOp"
  },
  {
    "label": "TensorIndexTupleOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_ARG_MAX_H # define EIGEN_CXX11_TENSOR_TENSOR_ARG_MAX_H namespace Eigen { namespace internal { template<XprType> struct traits<TensorIndexTupleOp<XprType>> : public traits<XprType> { typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef Tuple<Index,XprTraits::Scalar> Scalar ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = XprTraits::NumDimensions ; const int Layout = XprTraits::Layout ; } ; template<XprType> struct eval<TensorIndexTupleOp<XprType>,Eigen::Dense> { typedef const TensorIndexTupleOp<XprType> EIGEN_DEVICE_REF type ; } ; template<XprType> struct nested<TensorIndexTupleOp<XprType>,1,eval<TensorIndexTupleOp<XprType>>::type> { typedef TensorIndexTupleOp<XprType> type ; } ; } template<XprType> class TensorIndexTupleOp : public TensorBase<TensorIndexTupleOp<XprType>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorIndexTupleOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef Eigen::internal::nested<TensorIndexTupleOp>::type Nested ; typedef Eigen::internal::traits<TensorIndexTupleOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorIndexTupleOp>::Index Index ; typedef Tuple<Index,XprType::CoeffReturnType> CoeffReturnType ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorIndexTupleOp(const XprType& expr) : m_xpr(expr)"
  },
  {
    "label": "expression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const internal::remove_all<XprType::Nested>::type&)",
    "insertText": "expression()"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Dimensions&)",
    "insertText": "dimensions()"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE bool)",
    "insertText": "evalSubExprsIfNeeded(EvaluatorPointerType)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "costPerCoeff(bool vectorized)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EvaluatorPointerType)",
    "insertText": "data()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "TensorTupleReducerOp()",
    "kind": "Method",
    "detail": "Function (} # endif protected : TensorEvaluator<ArgType,Device> m_impl ; } ; namespace internal { template<ReduceOp,Dims,XprType> struct traits<TensorTupleReducerOp<ReduceOp,Dims,XprType>> : public traits<XprType> { typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef Index Scalar ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = XprTraits::NumDimensions - array_size<Dims>::value ; const int Layout = XprTraits::Layout ; } ; template<ReduceOp,Dims,XprType> struct eval<TensorTupleReducerOp<ReduceOp,Dims,XprType>,Eigen::Dense> { typedef const TensorTupleReducerOp<ReduceOp,Dims,XprType> EIGEN_DEVICE_REF type ; } ; template<ReduceOp,Dims,XprType> struct nested<TensorTupleReducerOp<ReduceOp,Dims,XprType>,1,eval<TensorTupleReducerOp<ReduceOp,Dims,XprType>>::type> { typedef TensorTupleReducerOp<ReduceOp,Dims,XprType> type ; } ; } template<ReduceOp,Dims,XprType> class TensorTupleReducerOp : public TensorBase<TensorTupleReducerOp<ReduceOp,Dims,XprType>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorTupleReducerOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef Eigen::internal::nested<TensorTupleReducerOp>::type Nested ; typedef Eigen::internal::traits<TensorTupleReducerOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorTupleReducerOp>::Index Index ; typedef Index CoeffReturnType ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorTupleReducerOp(const XprType& expr, const ReduceOp& reduce_op, const Index return_dim, const Dims& reduce_dims) : m_xpr(expr), m_reduce_op(reduce_op), m_return_dim(return_dim), m_reduce_dims(reduce_dims)"
  },
  {
    "label": "gen_strides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gen_strides(m_orig_impl.dimensions(), m_strides)"
  },
  {
    "label": "array_prod()",
    "kind": "Method",
    "detail": "Function (const Index total_size =)",
    "insertText": "array_prod(m_orig_impl.dimensions())"
  },
  {
    "label": "m_stride_mod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_stride_mod(m_return_dim < NumDims - 1)"
  },
  {
    "label": "m_stride_mod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_stride_mod(m_return_dim > 0)"
  },
  {
    "label": "m_stride_div()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "m_stride_div((m_return_dim >= 0) && (m_return_dim < static_cast<Index>(m_strides.size())))"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (const TupleType v = m_impl .)",
    "insertText": "coeff(index)"
  },
  {
    "label": "compute_cost()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "compute_cost(m_return_dim < 0 ? 0.0 : (TensorOpCost::ModCost<Index>() + TensorOpCost::DivCost<Index>()))"
  },
  {
    "label": "gen_strides()",
    "kind": "Method",
    "detail": "Function (} private : EIGEN_DEVICE_FUNC void)",
    "insertText": "gen_strides(const InputDimensions& dims, StrideDims& strides)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (strides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 1; i < NumDims; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (strides [ i ] = strides [ i - 1 ]* dims [ i - 1 ] ; } } else { strides [ NumDims - 1 ] = 1 ;)",
    "insertText": "for(int i = NumDims - 2; i >= 0; --i)"
  }
]