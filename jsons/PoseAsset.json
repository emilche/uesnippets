[
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FLiveLinkCurveElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiveLinkCurveElement"
  },
  {
    "label": "FReferenceSkeleton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeleton"
  },
  {
    "label": "FPoseAssetDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPoseAssetDetails"
  },
  {
    "label": "FPoseData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoseData"
  },
  {
    "label": "FPoseAssetInfluence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoseAssetInfluence"
  },
  {
    "label": "FPoseAssetInfluences",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoseAssetInfluences"
  },
  {
    "label": "FPoseDataContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoseDataContainer"
  },
  {
    "label": "UPoseAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPoseAsset"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FCompactPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPose"
  },
  {
    "label": "FAnimationPoseData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationPoseData"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Animation / SmartName . h \" # include \" Animation / AnimationAsset . h \" # include \" Animation / AnimCurveTypes . h \" # include \" PoseAsset . generated . h \" class UAnimSequence ; class USkeletalMeshComponent ; struct FLiveLinkCurveElement ; struct FReferenceSkeleton ; class FPoseAssetDetails ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() #if WITH_EDITORONLY_DATA UPROPERTY()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: ENGINE_API bool Serialize(FArchive& Ar)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FindPoseData()",
    "kind": "Method",
    "detail": "Function (FPoseData*)",
    "insertText": "FindPoseData(FName PoseName)"
  },
  {
    "label": "FindOrAddPoseData()",
    "kind": "Method",
    "detail": "Function (FPoseData*)",
    "insertText": "FindOrAddPoseData(FName PoseName)"
  },
  {
    "label": "GetNumPoses()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPoses()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(FName PoseName)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetPoseCurve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetPoseCurve(const FPoseData* PoseData, FBlendedCurve& OutCurve)"
  },
  {
    "label": "BlendPoseCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPoseCurve(const FPoseData* PoseData, FBlendedCurve& OutCurve, float Weight)"
  },
  {
    "label": "DeleteTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteTrack(int32 TrackIndex)"
  },
  {
    "label": "GetDefaultTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetDefaultTransform(const FName& InTrackName, USkeleton* InSkeleton, const TArray<FTransform>& RefPose)"
  },
  {
    "label": "GetDefaultTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetDefaultTransform(int32 SkeletonIndex, const TArray<FTransform>& RefPose)"
  },
  {
    "label": "AddOrUpdatePose()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "AddOrUpdatePose(const FName& InPoseName, const TArray<FTransform>& InlocalSpacePose, const TArray<float>& InCurveData)"
  },
  {
    "label": "RenamePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenamePose(FName OldPoseName, FName NewPoseName)"
  },
  {
    "label": "DeletePose()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DeletePose(FName PoseName)"
  },
  {
    "label": "DeleteCurve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteCurve(FName CurveName)"
  },
  {
    "label": "InsertTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertTrack(const FName& InTrackName, USkeleton* InSkeleton, const TArray<FTransform>& RefPose)"
  },
  {
    "label": "FillUpSkeletonPose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FillUpSkeletonPose(FPoseData* PoseData, const USkeleton* InSkeleton)"
  },
  {
    "label": "RetrieveSourcePoseFromExistingPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetrieveSourcePoseFromExistingPose(bool bAdditive, int32 InBasePoseIndex, const TArray<FTransform>& InBasePose, const TArray<float>& InBaseCurve)"
  },
  {
    "label": "ConvertToFullPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToFullPose(USkeleton* InSkeleton, const TArray<FTransform>& RefPose)"
  },
  {
    "label": "ConvertToAdditivePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToAdditivePose(const TArray<FTransform>& InBasePose, const TArray<float>& InBaseCurve)"
  },
  {
    "label": "RebuildCurveIndexTable()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RebuildCurveIndexTable()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (class UPoseAsset ; } ; template<> struct TStructOpsTypeTraits<FPoseDataContainer> : public TStructOpsTypeTraitsBase2<FPoseDataContainer> { enum { WithSerializer = true,WithPostSerialize = true,} ; } ;)",
    "insertText": "UCLASS(MinimalAPI, BlueprintType)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() private: UPROPERTY()"
  },
  {
    "label": "GetAnimationPose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAnimationPose(struct FAnimationPoseData& OutAnimationPoseData, const FAnimExtractContext& ExtractionContext)"
  },
  {
    "label": "GetBaseAnimationPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBaseAnimationPose(struct FAnimationPoseData& OutAnimationPoseData)"
  },
  {
    "label": "HasRootMotion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRootMotion()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "IsPostLoadThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPostLoadThreadSafe()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "PreSave(FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "GetNumCurves()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumCurves()"
  },
  {
    "label": "GetNumTracks()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumTracks()"
  },
  {
    "label": "GetPoseFNames()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>&)",
    "insertText": "GetPoseFNames()"
  },
  {
    "label": "GetTrackNames()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>&)",
    "insertText": "GetTrackNames()"
  },
  {
    "label": "GetCurveFNames()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>)",
    "insertText": "GetCurveFNames()"
  },
  {
    "label": "GetCurveData()",
    "kind": "Method",
    "detail": "Function (const TArray<FAnimCurveBase>&)",
    "insertText": "GetCurveData()"
  },
  {
    "label": "GetCurveValues()",
    "kind": "Method",
    "detail": "Function (const TArray<float>)",
    "insertText": "GetCurveValues(const int32 PoseIndex)"
  },
  {
    "label": "GetTrackIndexByName()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "GetTrackIndexByName(const FName& InTrackName)"
  },
  {
    "label": "GetCurveValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCurveValue(const int32 PoseIndex, const int32 CurveIndex, float& OutValue)"
  },
  {
    "label": "ContainsPose()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsPose(const FName& InPoseName)"
  },
  {
    "label": "AddOrUpdatePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdatePose(PoseName.DisplayName, MeshComponent, bUpdateCurves)"
  },
  {
    "label": "AddOrUpdatePose()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddOrUpdatePose(const FName& PoseName, const USkeletalMeshComponent* MeshComponent, bool bUpdateCurves = true)"
  },
  {
    "label": "AddReferencePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencePose(const FName& PoseName, const FReferenceSkeleton& ReferenceSkeleton)"
  },
  {
    "label": "CreatePoseFromAnimation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreatePoseFromAnimation(class UAnimSequence* AnimSequence, const TArray<FName>* InPoseNames = nullptr)"
  },
  {
    "label": "GetAllAnimationSequencesReferred()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllAnimationSequencesReferred(TArray<UAnimationAsset*>& AnimationAssets, bool bRecursive = true)"
  },
  {
    "label": "ReplaceReferredAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceReferredAnimations(const TMap<UAnimationAsset*, UAnimationAsset*>& ReplacementMap)"
  },
  {
    "label": "ModifyPoseName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ModifyPoseName(FName OldPoseName, FName NewPoseName)"
  },
  {
    "label": "RenamePoseOrCurveName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenamePoseOrCurveName(const FName& InOriginalName, const FName& InNewName)"
  },
  {
    "label": "RemovePoseOrCurveNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePoseOrCurveNames(const TArray<FName>& InNamesToRemove)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GetFullPose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFullPose(int32 PoseIndex, TArray<FTransform>& OutTransforms)"
  },
  {
    "label": "GetComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetComponentSpaceTransform(FName BoneName, const TArray<FTransform>& LocalTransforms)"
  },
  {
    "label": "DeletePoses()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DeletePoses(TArray<FName> PoseNamesToDelete)"
  },
  {
    "label": "DeleteCurves()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DeleteCurves(TArray<FName> CurveNamesToDelete)"
  },
  {
    "label": "ConvertSpace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertSpace(bool bNewAdditivePose, int32 NewBasePoseInde)"
  },
  {
    "label": "GetPoseNameByIndex()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetPoseNameByIndex(int32 InBasePoseIndex)"
  },
  {
    "label": "GetBasePoseIndex()",
    "kind": "Method",
    "detail": "Function (} # endif int32)",
    "insertText": "GetBasePoseIndex()"
  },
  {
    "label": "GetCurveIndexByName()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "GetCurveIndexByName(const FName& InCurveName)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR private :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnPoseListChangedMulticaster)"
  },
  {
    "label": "RegisterOnPoseListChanged()",
    "kind": "Method",
    "detail": "Function (public : typedef FOnPoseListChangedMulticaster::FDelegate FOnPoseListChanged ; FDelegateHandle)",
    "insertText": "RegisterOnPoseListChanged(const FOnPoseListChanged& Delegate)"
  },
  {
    "label": "UnregisterOnPoseListChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnPoseListChanged(FDelegateHandle Handle)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (OnPoseListChanged .)",
    "insertText": "Remove(Handle)"
  },
  {
    "label": "GetUniquePoseName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetUniquePoseName(UPoseAsset* PoseAsset)"
  },
  {
    "label": "RemapTracksToNewSkeleton()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "RemapTracksToNewSkeleton(USkeleton* NewSkeleton, bool bConvertSpaces)"
  },
  {
    "label": "CombineTracks()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CombineTracks(const TArray<FName>& NewTracks)"
  },
  {
    "label": "ConvertToFullPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToFullPose()"
  },
  {
    "label": "ConvertToAdditivePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToAdditivePose(int32 NewBasePoseIndex)"
  },
  {
    "label": "GetBasePoseTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBasePoseTransform(TArray<FTransform>& OutBasePose, TArray<float>& OutCurve)"
  },
  {
    "label": "Reinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reinitialize()"
  },
  {
    "label": "AddOrUpdatePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdatePose(const FName& PoseName, const TArray<FName>& TrackNames, const TArray<FTransform>& LocalTransform, const TArray<float>& CurveValues)"
  },
  {
    "label": "PostProcessData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostProcessData()"
  },
  {
    "label": "BreakAnimationSequenceGUIDComparison()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakAnimationSequenceGUIDComparison()"
  },
  {
    "label": "UpdateTrackBoneIndices()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "UpdateTrackBoneIndices()"
  },
  {
    "label": "RemoveInvalidTracks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveInvalidTracks()"
  },
  {
    "label": "GetRetargetTransforms()",
    "kind": "Method",
    "detail": "Function (# endif private : const TArray<FTransform>&)",
    "insertText": "GetRetargetTransforms()"
  },
  {
    "label": "GetRetargetTransformsSourceName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetRetargetTransformsSourceName()"
  }
]