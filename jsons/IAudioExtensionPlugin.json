[
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "FSoundEffectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundEffectBase"
  },
  {
    "label": "FSoundEffectSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundEffectSource"
  },
  {
    "label": "FSoundEffectSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundEffectSubmix"
  },
  {
    "label": "FWaveInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveInstance"
  },
  {
    "label": "IAudioModulationManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioModulationManager"
  },
  {
    "label": "IAudioOcclusion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioOcclusion"
  },
  {
    "label": "IAudioPluginListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioPluginListener"
  },
  {
    "label": "IAudioReverb",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioReverb"
  },
  {
    "label": "IAudioSourceDataOverride",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioSourceDataOverride"
  },
  {
    "label": "IAudioSpatialization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioSpatialization"
  },
  {
    "label": "USoundSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmix"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSpatializationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpatializationParams"
  },
  {
    "label": "FAudioPluginInitializationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioPluginInitializationParams"
  },
  {
    "label": "FAudioPluginSourceInputData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioPluginSourceInputData"
  },
  {
    "label": "FAudioPluginSourceOutputData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioPluginSourceOutputData"
  },
  {
    "label": "USpatializationPluginSourceSettingsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USpatializationPluginSourceSettingsBase"
  },
  {
    "label": "IAudioPluginFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioPluginFactory"
  },
  {
    "label": "IAudioSpatializationFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioSpatializationFactory"
  },
  {
    "label": "USourceDataOverridePluginSourceSettingsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USourceDataOverridePluginSourceSettingsBase"
  },
  {
    "label": "IAudioSourceDataOverrideFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioSourceDataOverrideFactory"
  },
  {
    "label": "UOcclusionPluginSourceSettingsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UOcclusionPluginSourceSettingsBase"
  },
  {
    "label": "IAudioOcclusionFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioOcclusionFactory"
  },
  {
    "label": "IAudioModulationFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioModulationFactory"
  },
  {
    "label": "UReverbPluginSourceSettingsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReverbPluginSourceSettingsBase"
  },
  {
    "label": "IAudioReverbFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioReverbFactory"
  },
  {
    "label": "LLM_DECLARE_TAG_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Features / IModularFeature . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" ISoundfieldFormat . h \" # include \" Math / Interval . h \" # include \" Modules / ModuleInterface . h \" # include \" Modules / ModuleManager . h \" # include \" UObject / ObjectMacros . h \" # include \" AudioDefines . h \" # include \" IAudioProxyInitializer . h \" # include \" IAudioExtensionPlugin . generated . h \" class FAudioDevice ; class FSoundEffectBase ; class FSoundEffectSource ; class FSoundEffectSubmix ; struct FWaveInstance ; class IAudioModulationManager ; class IAudioOcclusion ; class IAudioPluginListener ; class IAudioReverb ; class IAudioSourceDataOverride ; class IAudioSpatialization ; class USoundSubmix ;)",
    "insertText": "LLM_DECLARE_TAG_API(Audio_SpatializationPlugins, AUDIOEXTENSIONS_API)"
  },
  {
    "label": "LLM_SCOPE_BYTAG()",
    "kind": "Method",
    "detail": "Function (# define AUDIO_SPATIALIZATION_PLUGIN_LLM_SCOPE)",
    "insertText": "LLM_SCOPE_BYTAG(Audio_SpatializationPlugins)"
  },
  {
    "label": "FSpatializationParams()",
    "kind": "Method",
    "detail": "Function (enum class EAudioPlugin : uint8 { SPATIALIZATION = 0,REVERB = 1,OCCLUSION = 2,MODULATION = 3,SOURCEDATAOVERRIDE = 4,COUNT = 5 } ; using FSoundEffectSubmixPtr = TSharedPtr<FSoundEffectSubmix,ESPMode::ThreadSafe> ; using TSoundEffectPtr = TSharedPtr<FSoundEffectBase,ESPMode::ThreadSafe> ; using TSoundEffectSourcePtr = TSharedPtr<FSoundEffectSource,ESPMode::ThreadSafe> ; using TSoundEffectSubmixPtr = TSharedPtr<FSoundEffectSubmix,ESPMode::ThreadSafe> ; using TAudioSpatializationPtr = TSharedPtr<IAudioSpatialization,ESPMode::ThreadSafe> ; using TAudioSourceDataOverridePtr = TSharedPtr<IAudioSourceDataOverride,ESPMode::ThreadSafe> ; using TAudioModulationPtr = TSharedPtr<IAudioModulationManager,ESPMode::ThreadSafe> ; using TAudioOcclusionPtr = TSharedPtr<IAudioOcclusion,ESPMode::ThreadSafe> ; using TAudioReverbPtr = TSharedPtr<IAudioReverb,ESPMode::ThreadSafe> ; using TAudioPluginListenerPtr = TSharedPtr<IAudioPluginListener,ESPMode::ThreadSafe> ; struct FSpatializationParams { FVector ListenerPosition ; FQuat ListenerOrientation ; FVector EmitterPosition ; FVector EmitterWorldPosition ; FQuat EmitterWorldRotation ; FQuat LastEmitterWorldRotation ; FVector LeftChannelPosition ; FVector RightChannelPosition ; float Distance ; float AttenuationDistance ; float NormalizedOmniRadius ; float NonSpatializedAmount ; double AudioClock ;)",
    "insertText": "FSpatializationParams() : ListenerPosition(FVector::ZeroVector) , ListenerOrientation(FQuat::Identity) , EmitterPosition(FVector::ZeroVector) , EmitterWorldPosition(FVector::ZeroVector) , EmitterWorldRotation(FQuat::Identity) , LastEmitterWorldRotation(FQuat::Identity) , LeftChannelPosition(FVector::ZeroVector) , RightChannelPosition(FVector::ZeroVector) , Distance(0.0f) , AttenuationDistance(0.0f) , NormalizedOmniRadius(0.0f) , NonSpatializedAmount(0.0f) , AudioClock(0.0)"
  },
  {
    "label": "FAudioPluginInitializationParams()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAudioPluginInitializationParams { uint32 NumSources ; uint32 NumOutputChannels ; uint32 SampleRate ; uint32 BufferLength ; FAudioDevice* AudioDevicePtr ;)",
    "insertText": "FAudioPluginInitializationParams() : NumSources(0) , NumOutputChannels(0) , SampleRate(0) , BufferLength(0) , AudioDevicePtr(nullptr)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAudioPluginSourceInputData { int32 SourceId ; uint64 AudioComponentId ; Audio::FAlignedFloatBuffer* AudioBuffer ; int32 NumChannels ; FQuat ListenerOrientation ; const FSpatializationParams* SpatializationParams ; } ; struct FAudioPluginSourceOutputData { Audio::FAlignedFloatBuffer AudioBuffer ; } ;)",
    "insertText": "UCLASS(config = Engine, abstract, editinlinenew, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (class IAudioPluginFactory { public : FString)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (FString DisplayName =)",
    "insertText": "FString(TEXT(\"Generic Audio Plugin\"))"
  },
  {
    "label": "IsExternalSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalSend()"
  },
  {
    "label": "GetModularFeatureName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetModularFeatureName()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName AudioExtFeatureName =)",
    "insertText": "FName(TEXT(\"AudioSpatializationPlugin\"))"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (FString DisplayName =)",
    "insertText": "FString(TEXT(\"Generic Audio Spatialization Plugin\"))"
  },
  {
    "label": "GetCustomSpatializationSettingsClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetCustomSpatializationSettingsClass()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "OnDeviceShutdown()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDeviceShutdown(FAudioDevice* AudioDevice)"
  },
  {
    "label": "SetSpatializationParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSpatializationParameters(uint32 SourceId, const FSpatializationParams& Params)"
  },
  {
    "label": "GetSpatializationParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetSpatializationParameters(uint32 SourceId, FSpatializationParams& OutParams)"
  },
  {
    "label": "InitializeSpatializationEffect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeSpatializationEffect(uint32 BufferLength)"
  },
  {
    "label": "ProcessSpatializationForVoice()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessSpatializationForVoice(uint32 SourceId, float* InSamples, float* OutSamples, const FVector& Position)"
  },
  {
    "label": "ProcessSpatializationForVoice()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessSpatializationForVoice(uint32 SourceId, float* InSamples, float* OutSamples)"
  },
  {
    "label": "OnInitSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnInitSource(const uint32 SourceId, const FName& AudioComponentUserId, USpatializationPluginSourceSettingsBase* InSettings)"
  },
  {
    "label": "OnInitSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnInitSource(const uint32 SourceId, const FName& AudioComponentUserId, const uint32 NumChannels, USpatializationPluginSourceSettingsBase* InSettings)"
  },
  {
    "label": "OnInitSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitSource(SourceId, AudioComponentUserId, InSettings)"
  },
  {
    "label": "OnReleaseSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnReleaseSource(const uint32 SourceId)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessAudio(const FAudioPluginSourceInputData& InputData, FAudioPluginSourceOutputData& OutputData)"
  },
  {
    "label": "OnAllSourcesProcessed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnAllSourcesProcessed()"
  },
  {
    "label": "IsSpatializationEffectInitialized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSpatializationEffectInitialized()"
  },
  {
    "label": "CreateSpatializationEffect()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CreateSpatializationEffect(uint32 SourceId)"
  },
  {
    "label": "IAudioSourceDataOverrideFactory()",
    "kind": "Method",
    "detail": "Function (class IAudioSourceDataOverrideFactory : public IAudioPluginFactory,public IModularFeature { public : ~)",
    "insertText": "IAudioSourceDataOverrideFactory()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName AudioExtFeatureName =)",
    "insertText": "FName(TEXT(\"AudioSourceDataOverridePlugin\"))"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (FString DisplayName =)",
    "insertText": "FString(TEXT(\"Generic Audio Source Data Override Plugin\"))"
  },
  {
    "label": "IAudioSourceDataOverride()",
    "kind": "Method",
    "detail": "Function (} ; class IAudioSourceDataOverride { public : ~)",
    "insertText": "IAudioSourceDataOverride()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(const FAudioPluginInitializationParams InitializationParams)"
  },
  {
    "label": "OnInitSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnInitSource(const uint32 SourceId, const FName& AudioComponentUserId, USourceDataOverridePluginSourceSettingsBase* InSettings)"
  },
  {
    "label": "GetSourceDataOverrides()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetSourceDataOverrides(const uint32 SourceId, const FTransform& InListenerTransform, FWaveInstance* InOutWaveInstance)"
  },
  {
    "label": "IAudioOcclusionFactory()",
    "kind": "Method",
    "detail": "Function (class IAudioOcclusionFactory : public IAudioPluginFactory,public IModularFeature { public : ~)",
    "insertText": "IAudioOcclusionFactory()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName AudioExtFeatureName =)",
    "insertText": "FName(TEXT(\"AudioOcclusionPlugin\"))"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (FString DisplayName =)",
    "insertText": "FString(TEXT(\"Generic Audio Occlusion Plugin\"))"
  },
  {
    "label": "GetCustomOcclusionSettingsClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetCustomOcclusionSettingsClass()"
  },
  {
    "label": "OnInitSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnInitSource(const uint32 SourceId, const FName& AudioComponentUserId, const uint32 NumChannels, UOcclusionPluginSourceSettingsBase* InSettings)"
  },
  {
    "label": "IAudioModulationFactory()",
    "kind": "Method",
    "detail": "Function (} } ; class IAudioModulationFactory : public IModularFeature { public : ~)",
    "insertText": "IAudioModulationFactory()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName AudioExtFeatureName =)",
    "insertText": "FName(TEXT(\"AudioModulationPlugin\"))"
  },
  {
    "label": "CreateNewModulationPlugin()",
    "kind": "Method",
    "detail": "Function (TAudioModulationPtr)",
    "insertText": "CreateNewModulationPlugin(FAudioDevice* OwningDevice)"
  },
  {
    "label": "GetCustomModulationSettingsClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetCustomModulationSettingsClass()"
  },
  {
    "label": "IAudioReverbFactory()",
    "kind": "Method",
    "detail": "Function (class IAudioReverbFactory : public IAudioPluginFactory,public IModularFeature { public : ~)",
    "insertText": "IAudioReverbFactory()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName AudioExtFeatureName =)",
    "insertText": "FName(TEXT(\"AudioReverbPlugin\"))"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (FString DisplayName =)",
    "insertText": "FString(TEXT(\"Generic Audio Reverb Plugin\"))"
  },
  {
    "label": "GetCustomReverbSettingsClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetCustomReverbSettingsClass()"
  },
  {
    "label": "OnInitSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnInitSource(const uint32 SourceId, const FName& AudioComponentUserId, const uint32 NumChannels, UReverbPluginSourceSettingsBase* InSettings)"
  },
  {
    "label": "GetEffectSubmix()",
    "kind": "Method",
    "detail": "Function (FSoundEffectSubmixPtr)",
    "insertText": "GetEffectSubmix()"
  },
  {
    "label": "LoadSubmix()",
    "kind": "Method",
    "detail": "Function (USoundSubmix*)",
    "insertText": "LoadSubmix()"
  },
  {
    "label": "GetSubmix()",
    "kind": "Method",
    "detail": "Function (} USoundSubmix*)",
    "insertText": "GetSubmix()"
  },
  {
    "label": "ProcessSourceAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSourceAudio(const FAudioPluginSourceInputData& InputData, FAudioPluginSourceOutputData& OutputData)"
  },
  {
    "label": "IAudioPluginListener()",
    "kind": "Method",
    "detail": "Function (} } ; class IAudioPluginListener { public : ~)",
    "insertText": "IAudioPluginListener()"
  },
  {
    "label": "OnListenerInitialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnListenerInitialize(FAudioDevice* AudioDevice, UWorld* ListenerWorld)"
  },
  {
    "label": "OnTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTick(UWorld* InWorld, const int32 ViewportIndex, const FTransform& ListenerTransform, const float InDeltaSeconds)"
  },
  {
    "label": "OnWorldChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnWorldChanged(FAudioDevice* AudioDevice, UWorld* InWorld)"
  },
  {
    "label": "OnListenerUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnListenerUpdated(FAudioDevice* AudioDevice, const int32 ViewportIndex, const FTransform& ListenerTransform, const float InDeltaSeconds)"
  },
  {
    "label": "OnListenerShutdown()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnListenerShutdown(FAudioDevice* AudioDevice)"
  }
]