[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVideoRecordingParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVideoRecordingParameters"
  },
  {
    "label": "IVideoRecordingSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVideoRecordingSystem"
  },
  {
    "label": "FGenericVideoRecordingSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericVideoRecordingSystem"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \")",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FVideoRecordingFinalized, bool , const FString&)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"VideoRecordingSystem\"), STATGROUP_VideoRecordingSystem, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"EnableRecording\"), STAT_VideoRecordingSystem_EnableRecording, STATGROUP_VideoRecordingSystem,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"NewRecording\"), STAT_VideoRecordingSystem_NewRecording, STATGROUP_VideoRecordingSystem,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"StartRecording\"), STAT_VideoRecordingSystem_StartRecording, STATGROUP_VideoRecordingSystem,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"PauseRecording\"), STAT_VideoRecordingSystem_PauseRecording, STATGROUP_VideoRecordingSystem,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"FinalizeRecording\"), STAT_VideoRecordingSystem_FinalizeRecording, STATGROUP_VideoRecordingSystem,)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (# define DEFINE_VIDEOSYSTEMRECORDING_STATS \\)",
    "insertText": "DEFINE_STAT(STAT_VideoRecordingSystem_EnableRecording)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_STAT(STAT_VideoRecordingSystem_NewRecording)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_STAT(STAT_VideoRecordingSystem_StartRecording)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_STAT(STAT_VideoRecordingSystem_PauseRecording)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_STAT(STAT_VideoRecordingSystem_FinalizeRecording)"
  },
  {
    "label": "FVideoRecordingParameters()",
    "kind": "Method",
    "detail": "Function (class Error ; enum class EVideoRecordingState { None,Starting,Recording,Pausing,Paused,Finalizing,Error } ; struct FVideoRecordingParameters { uint64 RecordingLengthSeconds ; bool bAutoStart ; bool bAutoContinue ; bool bExportToLibrary ; FPlatformUserId UserId ;)",
    "insertText": "FVideoRecordingParameters() : RecordingLengthSeconds(0) , bAutoStart(false) , bAutoContinue(false) , bExportToLibrary(true) , UserId(PLATFORMUSERID_NONE)"
  },
  {
    "label": "FVideoRecordingParameters()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVideoRecordingParameters(uint64 InRecordingLengthSeconds, bool bInAutoStart, bool bInAutoContinue, bool bInExportToLibrary, FPlatformUserId InUserId) : RecordingLengthSeconds(InRecordingLengthSeconds) , bAutoStart(bInAutoStart) , bAutoContinue(bInAutoContinue) , bExportToLibrary(bInExportToLibrary) , UserId(InUserId)"
  },
  {
    "label": "IVideoRecordingSystem()",
    "kind": "Method",
    "detail": "Function (} } ; class IVideoRecordingSystem { public : ~)",
    "insertText": "IVideoRecordingSystem()"
  },
  {
    "label": "EnableRecording()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableRecording(const bool bEnableRecording)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "NewRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NewRecording(const TCHAR* DestinationFileName, FVideoRecordingParameters Parameters = FVideoRecordingParameters())"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecording()"
  },
  {
    "label": "PauseRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseRecording()"
  },
  {
    "label": "GetMinimumRecordingSeconds()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetMinimumRecordingSeconds()"
  },
  {
    "label": "GetMaximumRecordingSeconds()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetMaximumRecordingSeconds()"
  },
  {
    "label": "GetCurrentRecordingSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentRecordingSeconds()"
  },
  {
    "label": "FinalizeRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeRecording(const bool bSaveRecording, const FText& Title, const FText& Comment, const bool bStopAutoContinue = true)"
  },
  {
    "label": "GetRecordingState()",
    "kind": "Method",
    "detail": "Function (EVideoRecordingState)",
    "insertText": "GetRecordingState()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (OnVideoRecordingFinalized .)",
    "insertText": "Remove(Handle)"
  },
  {
    "label": "GetOnVideoRecordingFinalizedDelegate()",
    "kind": "Method",
    "detail": "Function (} ; FVideoRecordingFinalized&)",
    "insertText": "GetOnVideoRecordingFinalizedDelegate()"
  }
]