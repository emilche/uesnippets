[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FFieldMulticastDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFieldMulticastDelegate"
  },
  {
    "label": "FInvocationKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInvocationKey"
  },
  {
    "label": "FInvocationElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInvocationElement"
  },
  {
    "label": "FRemoveResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRemoveResult"
  },
  {
    "label": "FRemoveFromResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRemoveFromResult"
  },
  {
    "label": "FRemoveAllResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRemoveAllResult"
  },
  {
    "label": "FDelegateView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelegateView"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / BinarySearch . h \" # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" FieldNotificationId . h \" # include \" INotifyFieldValueChanged . h \" # include \" Templates / IdentityFunctor . h \" # include \" Templates / Less . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" UObject / WeakObjectPtr . h \" # include<limits> class UObject ; namespace UE::FieldNotification { class FFieldMulticastDelegate { public : using FDelegate = INotifyFieldValueChanged::FFieldValueChangedDelegate ; using FDynamicDelegate = FFieldValueChangedDynamicDelegate ; private : struct FInvocationKey { TWeakObjectPtr<const UObject> Object ; FFieldId Id ; FName DynamicName ; bool)",
    "insertText": "operator(const FInvocationKey& Element)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FInvocationElement { FInvocationKey Key ; FDelegate Delegate ; bool)",
    "insertText": "operator(const FInvocationElement& InElement)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FFieldId& A, const FInvocationElement& B)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} using InvocationListType = TArray<FInvocationElement> ; public : FDelegateHandle)",
    "insertText": "Add(const UObject* InObject, FFieldId InFieldId, FDelegate InNewDelegate)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "Add(const UObject* InObject, FFieldId InFieldId, const FDynamicDelegate& InDynamicDelegate)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (struct FRemoveResult { bool bRemoved = false ; bool bHasOtherBoundDelegates = false ; const UObject* Object = nullptr ; FFieldId FieldId ; } ; FRemoveResult)",
    "insertText": "Remove(FDelegateHandle InDelegate)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (FRemoveResult)",
    "insertText": "Remove(const FDynamicDelegate& InDynamicDelegate)"
  },
  {
    "label": "RemoveFrom()",
    "kind": "Method",
    "detail": "Function (struct FRemoveFromResult { bool bRemoved = false ; bool bHasOtherBoundDelegates = false ; } ; FRemoveFromResult)",
    "insertText": "RemoveFrom(const UObject* InObject, FFieldId InFieldId, FDelegateHandle InDelegate)"
  },
  {
    "label": "RemoveFrom()",
    "kind": "Method",
    "detail": "Function (FRemoveFromResult)",
    "insertText": "RemoveFrom(const UObject* InObject, FFieldId InFieldId, const FDynamicDelegate& InDynamicDelegate)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (struct FRemoveAllResult { int32 RemoveCount = 0 ; TBitArray<> HasFields ; } ; FRemoveAllResult)",
    "insertText": "RemoveAll(const UObject* InObject, const void* InUserObject)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (FRemoveAllResult)",
    "insertText": "RemoveAll(const UObject* InObject, FFieldId InFieldId, const void* InUserObject)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Broadcast(UObject* InObject, FFieldId InFieldId)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FDelegateView()",
    "kind": "Method",
    "detail": "Function (struct FDelegateView {)",
    "insertText": "FDelegateView(const UObject* InKeyObj, FFieldId InKeyId, const UObject* InObj, FName InFunction) : KeyObject(InKeyObj), KeyField(InKeyId), BindingObject(InObj), BindingFunctionName(InFunction)"
  },
  {
    "label": "GetView()",
    "kind": "Method",
    "detail": "Function (} const UObject* KeyObject ; FFieldId KeyField ; const UObject* BindingObject ; FName BindingFunctionName ; } ; TArray<FDelegateView>)",
    "insertText": "GetView()"
  },
  {
    "label": "LowerBound()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "LowerBound(FFieldId InFieldId)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (int32 Num = AddedEmplaceAt>)",
    "insertText": "GetNum(Delegates) ? GetNum(Delegates)"
  },
  {
    "label": "LowerBound()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "LowerBound(const FInvocationKey& InKey)"
  },
  {
    "label": "UpperBound()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "UpperBound(FFieldId InFieldId)"
  },
  {
    "label": "UpperBound()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "UpperBound(const FInvocationKey& InKey)"
  },
  {
    "label": "ExecuteLockOperations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExecuteLockOperations()"
  },
  {
    "label": "RemoveElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveElement(FInvocationElement& Element, int32 Index, FRemoveResult& Result)"
  },
  {
    "label": "CompleteRemove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteRemove(FRemoveResult& Result)"
  },
  {
    "label": "RemoveFrom()",
    "kind": "Method",
    "detail": "Function (template<TRemoveOrUnbind> void)",
    "insertText": "RemoveFrom(TRemoveOrUnbind& RemoveOrUnbind, FFieldId FieldId, bool& bFieldPresent)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (private : InvocationListType Delegates ; int16 DelegateLockCount = 0 ; int16 CompactionCount = 0 ; uint16 AddedEmplaceAt = std::numeric_limits<uint16)",
    "insertText": "max()"
  }
]