[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_TASK_H_ # define BASE_TASK_THREAD_POOL_TASK_H_ # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / containers / intrusive_heap . h \" # include \" base / location . h \" # include \" base / pending_task . h \" # include \" base / task / sequenced_task_runner . h \" # include \" base / task / single_thread_task_runner . h \" # include \" base / time / time . h \" namespace base { namespace internal { struct BASE_EXPORT Task : public PendingTask {)",
    "insertText": "Task()"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Task(const Location& posted_from, OnceClosure task, TimeTicks queue_time, TimeDelta delay, TimeDelta leeway = TimeDelta())"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Task(const Location& posted_from, OnceClosure task, TimeTicks queue_time, TimeTicks delayed_run_time, TimeDelta leeway = TimeDelta(), subtle::DelayPolicy delay_policy = subtle::DelayPolicy::kFlexibleNoSooner)"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Task(Task&& other)"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Task(const Task&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Task&)",
    "insertText": "operator(const Task&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Task&)",
    "insertText": "operator(Task&& other)"
  },
  {
    "label": "SetHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeapHandle(const HeapHandle& handle)"
  },
  {
    "label": "ClearHeapHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearHeapHandle()"
  },
  {
    "label": "GetHeapHandle()",
    "kind": "Method",
    "detail": "Function (} HeapHandle)",
    "insertText": "GetHeapHandle()"
  }
]