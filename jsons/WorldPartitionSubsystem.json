[
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "ULevelStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreaming"
  },
  {
    "label": "UWorldPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartition"
  },
  {
    "label": "UActorDescContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorDescContainer"
  },
  {
    "label": "UWorldPartitionLevelStreamingDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionLevelStreamingDynamic"
  },
  {
    "label": "FWorldPartitionActorDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionActorDesc"
  },
  {
    "label": "FWorldPartitionDraw2DContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionDraw2DContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStreamingSourceVelocity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingSourceVelocity"
  },
  {
    "label": "UWorldPartitionSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionSubsystem"
  },
  {
    "label": "FAutoConsoleCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleCommand"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UWorldPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartition"
  },
  {
    "label": "UWorldPartitionStreamingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionStreamingPolicy"
  },
  {
    "label": "GetAverageVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetAverageVelocity(const FVector& NewPosition, double CurrentTime)"
  },
  {
    "label": "UWorldPartitionSubsystem()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "UWorldPartitionSubsystem()"
  },
  {
    "label": "IsAllStreamingCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllStreamingCompleted()"
  },
  {
    "label": "RegisterStreamingSourceProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterStreamingSourceProvider(IWorldPartitionStreamingSourceProvider* StreamingSource)"
  },
  {
    "label": "UnregisterStreamingSourceProvider()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterStreamingSourceProvider(IWorldPartitionStreamingSourceProvider* StreamingSource)"
  },
  {
    "label": "SetOverrideLoadingRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverrideLoadingRange(FName Name, int32 LoadingRange)"
  },
  {
    "label": "GetOverrideLoadingRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOverrideLoadingRange(FName Name, int32& LoadingRange)"
  },
  {
    "label": "GetOverriddenLoadingRangesEpoch()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetOverriddenLoadingRangesEpoch()"
  },
  {
    "label": "GetFilteredActorsPerContainer()",
    "kind": "Method",
    "detail": "Function (TSet<FGuid>>)",
    "insertText": "GetFilteredActorsPerContainer(const FActorContainerID& InContainerID, const FString& InWorldPackage, const FWorldPartitionActorFilter& InActorFilter, EWorldPartitionActorFilterType InFilterTypes = EWorldPartitionActorFilterType::Loading)"
  },
  {
    "label": "IsRunningConvertWorldPartitionCommandlet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunningConvertWorldPartitionCommandlet()"
  },
  {
    "label": "FBox()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FBox()"
  },
  {
    "label": "UpdateStreamingSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStreamingSources()"
  },
  {
    "label": "OnWorldPartitionInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldPartitionInitialized(UWorldPartition* InWorldPartition)"
  },
  {
    "label": "OnWorldPartitionUninitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldPartitionUninitialized(UWorldPartition* InWorldPartition)"
  },
  {
    "label": "OnLevelStreamingStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelStreamingStateChanged(UWorld* InWorld, const ULevelStreaming* InStreamingLevel, ULevel* LevelIfLoaded, ELevelStreamingState PreviousState, ELevelStreamingState NewState)"
  },
  {
    "label": "OnLevelStreamingTargetStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelStreamingTargetStateChanged(UWorld* InWorld, const ULevelStreaming* InStreamingLevel, ULevel* InLevelIfLoaded, ELevelStreamingState InCurrentState, ELevelStreamingTargetState InPrevTarget, ELevelStreamingTargetState InNewTarget)"
  },
  {
    "label": "OnLevelBeginMakingVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelBeginMakingVisible(UWorld* InWorld, const ULevelStreaming* InStreamingLevel, ULevel* InLoadedLevel)"
  },
  {
    "label": "OnLevelBeginMakingInvisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelBeginMakingInvisible(UWorld* InWorld, const ULevelStreaming* InStreamingLevel, ULevel* InLoadedLevel)"
  },
  {
    "label": "UpdateLoadingAndPendingLoadStreamingLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLoadingAndPendingLoadStreamingLevels(const ULevelStreaming* InStreamingLevel)"
  },
  {
    "label": "IncrementalUpdateStreamingState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IncrementalUpdateStreamingState()"
  },
  {
    "label": "UpdateServerClientsVisibleLevelNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateServerClientsVisibleLevelNames()"
  },
  {
    "label": "UpdateStreamingStateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStreamingStateInternal(const UWorld* InWorld, UWorldPartition* InWorldPartition = nullptr)"
  },
  {
    "label": "IsServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsServer(const UWorld* InWorld)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(class UCanvas* Canvas, class APlayerController* PC)"
  },
  {
    "label": "DrawStreamingStatusLegend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawStreamingStatusLegend(class UCanvas* Canvas, FVector2D& Offset, const UWorldPartition* InWorldPartition)"
  }
]