[
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "ULevelStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreaming"
  },
  {
    "label": "UWorldPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartition"
  },
  {
    "label": "UActorDescContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorDescContainer"
  },
  {
    "label": "UWorldPartitionLevelStreamingDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionLevelStreamingDynamic"
  },
  {
    "label": "FWorldPartitionActorDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionActorDesc"
  },
  {
    "label": "FWorldPartitionDraw2DContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionDraw2DContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStreamingSourceVelocity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingSourceVelocity"
  },
  {
    "label": "UWorldPartitionSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionSubsystem"
  },
  {
    "label": "FAutoConsoleCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleCommand"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "UWorldPartitionStreamingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionStreamingPolicy"
  },
  {
    "label": "FStreamingSourceVelocity()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" WorldPartitionStreamingSource . h \" # include \" Subsystems / WorldSubsystem . h \" # include \" WorldPartition / Filter / WorldPartitionActorFilter . h \" # include \" WorldPartition / WorldPartitionActorContainerID . h \" # include \" WorldPartition / WorldPartitionHandle . h \" # include \" Streaming / StreamingWorldSubsystemInterface . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Misc / Guid . h \" # include \" WorldPartitionSubsystem . generated . h \" class ULevel ; class ULevelStreaming ; class UWorldPartition ; class UActorDescContainer ; class UWorldPartitionLevelStreamingDynamic ; class FWorldPartitionActorDesc ; class FWorldPartitionDraw2DContext ; enum class EWorldPartitionRuntimeCellState : uint8 ; enum class ELevelStreamingState : uint8 ; enum class ELevelStreamingTargetState : uint8 ; struct FStreamingSourceVelocity {)",
    "insertText": "FStreamingSourceVelocity(const FName& InSourceName)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bIsValid = false ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (private : bool bIsValid ; FName SourceName ; double LastUpdateTime ; FVector LastPosition ; FVector AvgVelocity ; } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API UWorldPartitionSubsystem()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FSubsystemCollectionBase& Collection)"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "OnWorldBeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldBeginPlay(UWorld& InWorld)"
  },
  {
    "label": "OnWorldComponentsUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldComponentsUpdated(UWorld& World)"
  },
  {
    "label": "OnUpdateStreamingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateStreamingState()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "IsTickableInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickableInEditor()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "IsStreamingCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreamingCompleted(const IWorldPartitionStreamingSourceProvider* InStreamingSourceProvider = nullptr)"
  },
  {
    "label": "DumpStreamingSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStreamingSources(FOutputDevice& OutputDevice)"
  },
  {
    "label": "DumpWorldPartitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpWorldPartitions(FOutputDevice& OutputDevice)"
  },
  {
    "label": "GetStreamingSourceProviders()",
    "kind": "Method",
    "detail": "Function (TSet<IWorldPartitionStreamingSourceProvider*>)",
    "insertText": "GetStreamingSourceProviders()"
  },
  {
    "label": "RegisterStreamingSourceProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterStreamingSourceProvider(IWorldPartitionStreamingSourceProvider* StreamingSource)"
  },
  {
    "label": "IsStreamingSourceProviderRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreamingSourceProviderRegistered(IWorldPartitionStreamingSourceProvider* StreamingSource)"
  },
  {
    "label": "UnregisterStreamingSourceProvider()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterStreamingSourceProvider(IWorldPartitionStreamingSourceProvider* StreamingSource)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FWorldPartitionStreamingSourceProviderFilter, const IWorldPartitionStreamingSourceProvider*)"
  },
  {
    "label": "OnIsStreamingSourceProviderFiltered()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionStreamingSourceProviderFilter&)",
    "insertText": "OnIsStreamingSourceProviderFiltered()"
  },
  {
    "label": "OnStreamingStateUpdated()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionStreamingStateUpdated&)",
    "insertText": "OnStreamingStateUpdated()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TMulticastDelegate<)",
    "insertText": "void(UWorldPartitionSubsystem*, UWorld*)"
  },
  {
    "label": "ForEachWorldPartition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachWorldPartition(TFunctionRef<bool(UWorldPartition*)> Func)"
  },
  {
    "label": "SetOverrideLoadingRange()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING void)",
    "insertText": "SetOverrideLoadingRange(FName Name, int32 LoadingRange)"
  },
  {
    "label": "GetOverrideLoadingRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOverrideLoadingRange(FName Name, int32& LoadingRange)"
  },
  {
    "label": "GetOverriddenLoadingRangesEpoch()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetOverriddenLoadingRangesEpoch()"
  },
  {
    "label": "GetWorldPartitionActorFilter()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR FWorldPartitionActorFilter)",
    "insertText": "GetWorldPartitionActorFilter(const FString& InWorldPackage, EWorldPartitionActorFilterType InFilterTypes = EWorldPartitionActorFilterType::Loading)"
  },
  {
    "label": "GetFilteredActorsPerContainer()",
    "kind": "Method",
    "detail": "Function (TMap<FActorContainerID,TSet<FGuid>>)",
    "insertText": "GetFilteredActorsPerContainer(const FActorContainerID& InContainerID, const FString& InWorldPackage, const FWorldPartitionActorFilter& InActorFilter, EWorldPartitionActorFilterType InFilterTypes = EWorldPartitionActorFilterType::Loading)"
  },
  {
    "label": "IsRunningConvertWorldPartitionCommandlet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunningConvertWorldPartitionCommandlet()"
  },
  {
    "label": "GetWorldPartitionActorFilterInternal()",
    "kind": "Method",
    "detail": "Function (} TSet<FWorldPartitionHandle> SelectedActorHandles ; private : FWorldPartitionActorFilter)",
    "insertText": "GetWorldPartitionActorFilterInternal(const FString& InWorldPackage, EWorldPartitionActorFilterType InFilterTypes, TSet<FString>& InOutVisitedPackageStack)"
  },
  {
    "label": "DoesSupportWorldType()",
    "kind": "Method",
    "detail": "Function (# endif protected : bool)",
    "insertText": "DoesSupportWorldType(const EWorldType::Type WorldType)"
  },
  {
    "label": "UpdateStreamingSources()",
    "kind": "Method",
    "detail": "Function (private : # if ! UE_BUILD_SHIPPING TMap<FName,int32> OverriddenLoadingRanges ; uint32 OverriddenLoadingRangesEpoch ; class FAutoConsoleCommand OverrideLoadingRangeCommand ; # endif void)",
    "insertText": "UpdateStreamingSources()"
  },
  {
    "label": "GetStreamingSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStreamingSources(const UWorldPartition* InWorldPartition, TArray<FWorldPartitionStreamingSource>& OutStreamingSources)"
  },
  {
    "label": "GetStreamingSourcesHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetStreamingSourcesHash()"
  },
  {
    "label": "OnWorldPartitionUninitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldPartitionUninitialized(UWorldPartition* InWorldPartition)"
  },
  {
    "label": "OnLevelStreamingStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelStreamingStateChanged(UWorld* InWorld, const ULevelStreaming* InStreamingLevel, ULevel* LevelIfLoaded, ELevelStreamingState PreviousState, ELevelStreamingState NewState)"
  },
  {
    "label": "OnLevelStreamingTargetStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelStreamingTargetStateChanged(UWorld* InWorld, const ULevelStreaming* InStreamingLevel, ULevel* InLevelIfLoaded, ELevelStreamingState InCurrentState, ELevelStreamingTargetState InPrevTarget, ELevelStreamingTargetState InNewTarget)"
  },
  {
    "label": "OnLevelBeginMakingVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelBeginMakingVisible(UWorld* InWorld, const ULevelStreaming* InStreamingLevel, ULevel* InLoadedLevel)"
  },
  {
    "label": "OnLevelBeginMakingInvisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelBeginMakingInvisible(UWorld* InWorld, const ULevelStreaming* InStreamingLevel, ULevel* InLoadedLevel)"
  },
  {
    "label": "UpdateLoadingAndPendingLoadStreamingLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLoadingAndPendingLoadStreamingLevels(const ULevelStreaming* InStreamingLevel)"
  },
  {
    "label": "IncrementalUpdateStreamingState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IncrementalUpdateStreamingState()"
  },
  {
    "label": "GetServerClientsVisibleLevelsHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetServerClientsVisibleLevelsHash()"
  },
  {
    "label": "UpdateStreamingStateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStreamingStateInternal(const UWorld* InWorld, UWorldPartition* InWorldPartition = nullptr)"
  },
  {
    "label": "IsServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsServer(const UWorld* InWorld)"
  },
  {
    "label": "HasAnyWorldPartitionServerStreamingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyWorldPartitionServerStreamingEnabled()"
  },
  {
    "label": "HasUninitializationPendingStreamingLevels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasUninitializationPendingStreamingLevels(const UWorldPartition* InWorldPartition)"
  },
  {
    "label": "GetWorldPartition()",
    "kind": "Method",
    "detail": "Function (UWorldPartition*)",
    "insertText": "GetWorldPartition()"
  },
  {
    "label": "CanDebugDraw()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDebugDraw()"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(class UCanvas* Canvas, class APlayerController* PC)"
  },
  {
    "label": "DrawStreamingStatusLegend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawStreamingStatusLegend(class UCanvas* Canvas, FVector2D& Offset, const UWorldPartition* InWorldPartition)"
  }
]