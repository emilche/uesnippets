[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FBitSetContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBitSetContainer"
  },
  {
    "label": "COREUOBJECT_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "COREUOBJECT_API"
  },
  {
    "label": "TStructTypeBitSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructTypeBitSet"
  },
  {
    "label": "FIndexIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndexIterator"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "type"
  },
  {
    "label": "ContainerTypeName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContainerTypeName"
  },
  {
    "label": "FBitSetContainer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / BitArray . h \" # include \" StructUtils / StructUtilsTypes . h \" # include \" StructUtils / InstancedStruct . h \" # include \" Templates / FunctionFwd . h \" class FArchive ; namespace FStructTypeBitSet { struct FBitSetContainer : TBitArray<> {)",
    "insertText": "FBitSetContainer()"
  },
  {
    "label": "FBitSetContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBitSetContainer(const TBitArray<>& Source) : TBitArray<>(Source)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FBitSetContainer&)",
    "insertText": "operator(const TBitArray<>& Other)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(bValue, Count)"
  },
  {
    "label": "HasAll()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAll(const TBitArray<>& Other)"
  },
  {
    "label": "ThisIterator()",
    "kind": "Method",
    "detail": "Function (FConstWordIterator)",
    "insertText": "ThisIterator(*this)"
  },
  {
    "label": "OtherIterator()",
    "kind": "Method",
    "detail": "Function (FConstWordIterator)",
    "insertText": "OtherIterator(Other)"
  },
  {
    "label": "GetWord()",
    "kind": "Method",
    "detail": "Function (const uint32 A = ThisIterator ? ThisIterator .)",
    "insertText": "GetWord()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (FConstWordIterator)",
    "insertText": "Iterator(*this)"
  },
  {
    "label": "SetWord()",
    "kind": "Method",
    "detail": "Function (ThisIterator .)",
    "insertText": "SetWord(ThisIterator.GetWord() & ~OtherIterator.GetWord())"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (+ + ThisIterator ; + + OtherIterator ; } } uint32)",
    "insertText": "GetTypeHash(const FBitSetContainer& Instance)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (FConstWordIterator)",
    "insertText": "Iterator(Instance)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32 Hash = 0 ; uint32 TrailingZeroHash = 0 ;)",
    "insertText": "while(Iterator)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(TrailingZeroHash ? TrailingZeroHash : Hash, Word)"
  },
  {
    "label": "AddAtIndex()",
    "kind": "Method",
    "detail": "Function (} + + Iterator ; } return Hash ; } void)",
    "insertText": "AddAtIndex(const int32 Index)"
  },
  {
    "label": "PadToNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PadToNum(Index + 1, false)"
  },
  {
    "label": "SetBitNoCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBitNoCheck(Index, true)"
  },
  {
    "label": "RemoveAtIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAtIndex(const int32 Index)"
  },
  {
    "label": "SetBitNoCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBitNoCheck(Index, false)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "Contains(const int32 Index)"
  },
  {
    "label": "SetBitNoCheck()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "SetBitNoCheck(const int32 Index, const bool Value)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (uint32& Word =)",
    "insertText": "GetData()"
  },
  {
    "label": "BitOffset()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "BitOffset(Index % NumBitsPerDWORD)"
  },
  {
    "label": "Word()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Word(Word & ~(1 << BitOffset)) | (((uint32)Value) << BitOffset)"
  },
  {
    "label": "UStruct()",
    "kind": "Method",
    "detail": "Function (} } ; } struct FStructTracker { using FBaseStructGetter = TFunction<)",
    "insertText": "UStruct()"
  },
  {
    "label": "FStructTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStructTracker(const FBaseStructGetter& InBaseStructGetter)"
  },
  {
    "label": "FStructTracker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStructTracker()"
  },
  {
    "label": "FindOrAddStructTypeIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindOrAddStructTypeIndex(const UStruct& InStructType)"
  },
  {
    "label": "GetStructType()",
    "kind": "Method",
    "detail": "Function (const UStruct*)",
    "insertText": "GetStructType(const int32 StructTypeIndex)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar, FStructTypeBitSet::FBitSetContainer& StructTypesBitArray)"
  },
  {
    "label": "DebugGetStructTypeName()",
    "kind": "Method",
    "detail": "Function (# if WITH_STRUCTUTILS_DEBUG FName)",
    "insertText": "DebugGetStructTypeName(const int32 StructTypeIndex)"
  },
  {
    "label": "DebugGetAllStructTypes()",
    "kind": "Method",
    "detail": "Function (} template<T> TConstArrayView<TWeakObjectPtr<const T>>)",
    "insertText": "DebugGetAllStructTypes()"
  },
  {
    "label": "DebugResetStructTypeMappingInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DebugResetStructTypeMappingInfo()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (StructTypeToIndexSet .)",
    "insertText": "Reset()"
  },
  {
    "label": "TStructTypeBitSet()",
    "kind": "Method",
    "detail": "Function (} TArray<FName,TInlineAllocator<6 4>> DebugStructTypeNamesList ; # endif TSet<uint32> StructTypeToIndexSet ; TArray<TWeakObjectPtr<const UStruct>,TInlineAllocator<6 4>> StructTypesList ; uint32 SerializationHash = 0 ; const FBaseStructGetter BaseStructGetter ; } ; template<TBaseStruct,TStructTrackerWrapper,TUStructType = UScriptStruct> struct TStructTypeBitSet { using FStructTrackerWrapper = TStructTrackerWrapper ;)",
    "insertText": "TStructTypeBitSet()"
  },
  {
    "label": "TStructTypeBitSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TStructTypeBitSet(const TUStructType& StructType)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(StructType)"
  },
  {
    "label": "TStructTypeBitSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TStructTypeBitSet(std::initializer_list<const TUStructType*> InitList)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(*StructType)"
  },
  {
    "label": "TStructTypeBitSet()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "TStructTypeBitSet(TConstArrayView<const TUStructType*> InitList)"
  },
  {
    "label": "TStructTypeBitSet()",
    "kind": "Method",
    "detail": "Function (} } } template<T = TBaseStruct,= TEnableIf<! TIsDerivedFrom<T,UObject>::IsDerived>::Type>)",
    "insertText": "TStructTypeBitSet(TConstArrayView<FInstancedStruct> InitList)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(*StructInstance.GetScriptStruct())"
  },
  {
    "label": "FIndexIterator()",
    "kind": "Method",
    "detail": "Function (} } } struct FIndexIterator { public :)",
    "insertText": "FIndexIterator(const FStructTypeBitSet::FBitSetContainer& BitArray, const bool bInValueToCheck = true) : It(BitArray), bValueToCheck(bInValueToCheck)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} } operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FIndexIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "TStructTypeBitSet()",
    "kind": "Method",
    "detail": "Function (} private : TBitArray<>::FConstIterator It ; const bool bValueToCheck ; } ; private :)",
    "insertText": "TStructTypeBitSet(const TBitArray<>& Source) : StructTypesBitArray(Source)"
  },
  {
    "label": "TStructTypeBitSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TStructTypeBitSet(const int32 BitToSet)"
  },
  {
    "label": "AddAtIndex()",
    "kind": "Method",
    "detail": "Function (StructTypesBitArray .)",
    "insertText": "AddAtIndex(BitToSet)"
  },
  {
    "label": "GetBaseUStruct()",
    "kind": "Method",
    "detail": "Function (} const UStruct*)",
    "insertText": "GetBaseUStruct()"
  },
  {
    "label": "TBaseStruct()",
    "kind": "Method",
    "detail": "Function (const UStruct* Instance = UE::StructUtils::GetAsUStruct<)",
    "insertText": "TBaseStruct()"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (# if WITH_STRUCTUTILS_DEBUG)",
    "insertText": "ensureMsgf(InStructType.IsChildOf(GetBaseUStruct()) , TEXT(\"Creating index for '%s' while it doesn't derive from the expected struct type %s\") , *InStructType.GetPathName(), *GetBaseUStruct()->GetName())"
  },
  {
    "label": "FindOrAddStructTypeIndex()",
    "kind": "Method",
    "detail": "Function (# endif return TStructTrackerWrapper::StructTracker .)",
    "insertText": "FindOrAddStructTypeIndex(InStructType)"
  },
  {
    "label": "GetTypeIndex()",
    "kind": "Method",
    "detail": "Function (} template<T> int32)",
    "insertText": "GetTypeIndex()"
  },
  {
    "label": "GetTypeIndex()",
    "kind": "Method",
    "detail": "Function (const int32 TypeIndex =)",
    "insertText": "GetTypeIndex(*UE::StructUtils::GetAsUStruct<T>())"
  },
  {
    "label": "TypeBitSet()",
    "kind": "Method",
    "detail": "Function (const TStructTypeBitSet)",
    "insertText": "TypeBitSet(GetTypeIndex<T>())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "Add()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const int32 StructTypeIndex = GetTypeIndex<)",
    "insertText": "T()"
  },
  {
    "label": "AddAtIndex()",
    "kind": "Method",
    "detail": "Function (StructTypesBitArray .)",
    "insertText": "AddAtIndex(StructTypeIndex)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "Remove()"
  },
  {
    "label": "RemoveAtIndex()",
    "kind": "Method",
    "detail": "Function (StructTypesBitArray .)",
    "insertText": "RemoveAtIndex(StructTypeIndex)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(const TStructTypeBitSet& Other)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (StructTypesBitArray - = Other . StructTypesBitArray ; } template<T> bool)",
    "insertText": "Contains()"
  },
  {
    "label": "SetAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAll(const bool bValue = true)"
  },
  {
    "label": "SetAll()",
    "kind": "Method",
    "detail": "Function (StructTypesBitArray .)",
    "insertText": "SetAll(bValue, TStructTrackerWrapper::StructTracker.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const TUStructType& InStructType)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (# if WITH_STRUCTUTILS_DEBUG)",
    "insertText": "ensureMsgf(InStructType.IsChildOf(GetBaseUStruct()) , TEXT(\"Registering '%s' with FStructTracker while it doesn't derive from the expected struct type %s\") , *InStructType.GetPathName(), *GetBaseUStruct()->GetName())"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(const TUStructType& InStructType)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const TUStructType& InStructType)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TStructTypeBitSet)",
    "insertText": "operator(const TStructTypeBitSet& Other)"
  },
  {
    "label": "BitwiseOR()",
    "kind": "Method",
    "detail": "Function (TStructTypeBitSet Result ; Result . StructTypesBitArray = TBitArray<)",
    "insertText": "BitwiseOR(StructTypesBitArray, Other.StructTypesBitArray, EBitwiseOperatorFlags::MaxSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StructTypesBitArray - = Other . StructTypesBitArray ; } TStructTypeBitSet)",
    "insertText": "operator(const TUStructType& NewElement)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TStructTypeBitSet Result =* this ; Result .)",
    "insertText": "Add(NewElement)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (TStructTypeBitSet Result =* this ; Result .)",
    "insertText": "Remove(NewElement)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TStructTypeBitSet Result =* this ; Result - = Other ; return)",
    "insertText": "MoveTemp(Result)"
  },
  {
    "label": "GetOverlap()",
    "kind": "Method",
    "detail": "Function (} TStructTypeBitSet)",
    "insertText": "GetOverlap(const TStructTypeBitSet& Other)"
  },
  {
    "label": "HasAll()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAll(const TStructTypeBitSet& Other)"
  },
  {
    "label": "HasAny()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAny(const TStructTypeBitSet& Other)"
  },
  {
    "label": "HasNone()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasNone(const TStructTypeBitSet& Other)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "IsBitSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBitSet(const int32 BitIndex)"
  },
  {
    "label": "GetIndexIterator()",
    "kind": "Method",
    "detail": "Function (} FIndexIterator)",
    "insertText": "GetIndexIterator(const bool bValueToCheck = true)"
  },
  {
    "label": "CountStoredTypes()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CountStoredTypes()"
  },
  {
    "label": "GetMaxNum()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMaxNum()"
  },
  {
    "label": "ExportTypes()",
    "kind": "Method",
    "detail": "Function (} template<TOutStructType,Allocator> void)",
    "insertText": "ExportTypes(TArray<const TOutStructType*, Allocator>& OutTypes)"
  },
  {
    "label": "It()",
    "kind": "Method",
    "detail": "Function (TBitArray<>::FConstIterator)",
    "insertText": "It(StructTypesBitArray)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutTypes .)",
    "insertText": "Add(Cast<TOutStructType>(TStructTrackerWrapper::StructTracker.GetStructType(It.GetIndex())))"
  },
  {
    "label": "ExportTypes()",
    "kind": "Method",
    "detail": "Function (} + + It ; } } void)",
    "insertText": "ExportTypes(TFunctionRef<bool(const TUStructType*)> Callback)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (bool bKeepGoing = true ;)",
    "insertText": "while(bKeepGoing && It)"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (bKeepGoing =)",
    "insertText": "Callback(GetTypeAtIndex(It.GetIndex()))"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} + + It ; } } SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "DebugGetStringDesc()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "DebugGetStringDesc()"
  },
  {
    "label": "DebugGetStringDesc()",
    "kind": "Method",
    "detail": "Function (# if WITH_STRUCTUTILS_DEBUG FStringOutputDevice Ar ;)",
    "insertText": "DebugGetStringDesc(Ar)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "TEXT(\"DEBUG INFO COMPILED OUT\")"
  },
  {
    "label": "DebugGetStringDesc()",
    "kind": "Method",
    "detail": "Function (# endif } # if WITH_STRUCTUTILS_DEBUG void)",
    "insertText": "DebugGetStringDesc(FOutputDevice& Ar)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Logf(TEXT(\"%s, \"), *TStructTrackerWrapper::StructTracker.DebugGetStructTypeName(Index).ToString())"
  },
  {
    "label": "DebugGetIndividualNames()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "DebugGetIndividualNames(TArray<FName>& OutFNames)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutFNames .)",
    "insertText": "Add(TStructTrackerWrapper::StructTracker.DebugGetStructTypeName(Index))"
  },
  {
    "label": "DebugGetStructTypesBitArray()",
    "kind": "Method",
    "detail": "Function (} protected : const TBitArray<>&)",
    "insertText": "DebugGetStructTypesBitArray()"
  },
  {
    "label": "PointerHash()",
    "kind": "Method",
    "detail": "Function (const uint32 StoredTypeHash =)",
    "insertText": "PointerHash(GetBaseUStruct())"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const uint32 BitArrayHash =)",
    "insertText": "GetTypeHash(Instance.StructTypesBitArray)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (TStructTrackerWrapper::StructTracker .)",
    "insertText": "Serialize(Ar, StructTypesBitArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, TStructTypeBitSet& Instance)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Instance .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "DECLARE_STRUCTTYPEBITSET_EXPORTED()",
    "kind": "Method",
    "detail": "Function (\\ using FBaseStructType = BaseType ; \\ FStructTracker StructTracker ; \\ } ; \\ using ContainerTypeName = TStructTypeBitSet<BaseType,ContainerTypeName # # StructTrackerWrapper,BaseUStructType> # define)",
    "insertText": "DECLARE_STRUCTTYPEBITSET_EXPORTED(EXPORTED_API, ContainerTypeName, BaseStructType) _DECLARE_TYPEBITSET_IMPL(EXPORTED_API, ContainerTypeName, BaseStructType, UScriptStruct) #define DECLARE_STRUCTTYPEBITSET(ContainerTypeName, BaseStructType) _DECLARE_TYPEBITSET_IMPL(, ContainerTypeName, BaseStructType, UScriptStruct) #define DECLARE_CLASSTYPEBITSET_EXPORTED(EXPORTED_API, ContainerTypeName, BaseStructType) _DECLARE_TYPEBITSET_IMPL(EXPORTED_API, ContainerTypeName, BaseStructType, UClass) #define DECLARE_CLASSTYPEBITSET(ContainerTypeName, BaseStructType) _DECLARE_TYPEBITSET_IMPL(, ContainerTypeName, BaseStructType, UClass) #define DEFINE_TYPEBITSET(ContainerTypeName) \\ FStructTracker ContainerTypeName##StructTrackerWrapper::StructTracker([](){ return UE::StructUtils::GetAsUStruct<ContainerTypeName##StructTrackerWrapper::FBaseStructType>();})"
  }
]