[
  {
    "label": "WrappingActiveIceController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WrappingActiveIceController"
  },
  {
    "label": "WrappingActiveIceController()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_WRAPPING_ACTIVE_ICE_CONTROLLER_H_ # define P2P_BASE_WRAPPING_ACTIVE_ICE_CONTROLLER_H_ # include<memory> # include \" absl / types / optional . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" p2p / base / active_ice_controller_interface . h \" # include \" p2p / base / connection . h \" # include \" p2p / base / ice_agent_interface . h \" # include \" p2p / base / ice_controller_factory_interface . h \" # include \" p2p / base / ice_controller_interface . h \" # include \" p2p / base / ice_switch_reason . h \" # include \" p2p / base / ice_transport_internal . h \" # include \" p2p / base / transport_description . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" namespace cricket { class WrappingActiveIceController : public ActiveIceControllerInterface { public :)",
    "insertText": "WrappingActiveIceController(IceAgentInterface* ice_agent, std::unique_ptr<IceControllerInterface> wrapped)"
  },
  {
    "label": "WrappingActiveIceController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WrappingActiveIceController(IceAgentInterface* ice_agent, IceControllerFactoryInterface* wrapped_factory, const IceControllerFactoryArgs& wrapped_factory_args)"
  },
  {
    "label": "WrappingActiveIceController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WrappingActiveIceController()"
  },
  {
    "label": "SetIceConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceConfig(const IceConfig& config)"
  },
  {
    "label": "GetUseCandidateAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseCandidateAttribute(const Connection* connection, NominationMode mode, IceMode remote_ice_mode)"
  },
  {
    "label": "OnConnectionAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionAdded(const Connection* connection)"
  },
  {
    "label": "OnConnectionPinged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionPinged(const Connection* connection)"
  },
  {
    "label": "OnConnectionUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionUpdated(const Connection* connection)"
  },
  {
    "label": "OnConnectionSwitched()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionSwitched(const Connection* connection)"
  },
  {
    "label": "OnConnectionDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionDestroyed(const Connection* connection)"
  },
  {
    "label": "OnSortAndSwitchRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSortAndSwitchRequest(IceSwitchReason reason)"
  },
  {
    "label": "OnImmediateSortAndSwitchRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnImmediateSortAndSwitchRequest(IceSwitchReason reason)"
  },
  {
    "label": "OnImmediateSwitchRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnImmediateSwitchRequest(IceSwitchReason reason, const Connection* selected)"
  },
  {
    "label": "FindNextPingableConnection()",
    "kind": "Method",
    "detail": "Function (const Connection*)",
    "insertText": "FindNextPingableConnection()"
  },
  {
    "label": "MaybeStartPinging()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "MaybeStartPinging()"
  },
  {
    "label": "SelectAndPingConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAndPingConnection()"
  },
  {
    "label": "HandlePingResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePingResult(IceControllerInterface::PingResult result)"
  },
  {
    "label": "SortAndSwitchToBestConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortAndSwitchToBestConnection(IceSwitchReason reason)"
  },
  {
    "label": "HandleSwitchResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSwitchResult(IceSwitchReason reason_for_switch, IceControllerInterface::SwitchResult result)"
  },
  {
    "label": "UpdateStateOnConnectionsResorted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStateOnConnectionsResorted()"
  },
  {
    "label": "PruneConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneConnections()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (rtc::Thread* const network_thread_ ; webrtc::ScopedTaskSafety task_safety_ ; bool started_pinging_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  }
]