[
  {
    "label": "IMovieScenePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieScenePlayer"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FMovieSceneEvaluationOperand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationOperand"
  },
  {
    "label": "FMovieSceneEvaluationScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationScope"
  },
  {
    "label": "FMovieSceneInterrogationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneInterrogationData"
  },
  {
    "label": "FPersistentEvaluationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPersistentEvaluationData"
  },
  {
    "label": "FMovieSceneBlendingAccumulator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneBlendingAccumulator"
  },
  {
    "label": "BlendToken()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Evaluation / Blending / BlendableToken . h \" # include \" Evaluation / Blending / BlendableTokenStack . h \" # include \" Evaluation / Blending / MovieSceneAccumulatedBlendState . h \" # include \" Evaluation / Blending / MovieSceneBlendType . h \" # include \" Evaluation / Blending / MovieSceneBlendingActuator . h \" # include \" Evaluation / Blending / MovieSceneBlendingActuatorID . h \" # include \" Evaluation / MovieSceneEvaluationScope . h \" # include \" Evaluation / MovieScenePlayback . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" class IMovieScenePlayer ; class UObject ; struct FMovieSceneEvaluationOperand ; struct FMovieSceneEvaluationScope ; struct FMovieSceneInterrogationData ; struct FPersistentEvaluationData ; struct FMovieSceneBlendingAccumulator { template<ActuatorDataType> void)",
    "insertText": "BlendToken(FMovieSceneBlendingActuatorID InActuatorTypeID, const FMovieSceneEvaluationScope& InScope, const FMovieSceneContext& InContext, TBlendableToken<ActuatorDataType>&& InToken)"
  },
  {
    "label": "GetHierarchicalBias()",
    "kind": "Method",
    "detail": "Function (InToken . AnimatingScope = InScope ; InToken . HierarchicalBias = InContext .)",
    "insertText": "GetHierarchicalBias()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UnboundBlendState .)",
    "insertText": "Add(InActuatorTypeID, MoveTemp(InToken))"
  },
  {
    "label": "BlendToken()",
    "kind": "Method",
    "detail": "Function (} template<ActuatorDataType> void)",
    "insertText": "BlendToken(FMovieSceneBlendingActuatorID InActuatorTypeID, const FMovieSceneEvaluationScope& InScope, const FMovieSceneContext& InContext, ActuatorDataType&& InInputValue, EMovieSceneBlendType InBlendType, float InWeight = 1.f, int32 InBlendingPriority = INDEX_NONE)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UnboundBlendState .)",
    "insertText": "Add(InActuatorTypeID, TBlendableToken<ActuatorDataType>(Forward<ActuatorDataType>(InInputValue), InScope, InContext, InBlendType, InWeight, InBlendingPriority))"
  },
  {
    "label": "BlendToken()",
    "kind": "Method",
    "detail": "Function (} template<ActuatorDataType> void)",
    "insertText": "BlendToken(const FMovieSceneEvaluationOperand& InOperand, FMovieSceneBlendingActuatorID InActuatorTypeID, const FMovieSceneEvaluationScope& InScope, const FMovieSceneContext& InContext, TBlendableToken<ActuatorDataType>&& InToken)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (OperandToBlendState .)",
    "insertText": "FindOrAdd(InOperand).Add(InActuatorTypeID, MoveTemp(InToken))"
  },
  {
    "label": "BlendToken()",
    "kind": "Method",
    "detail": "Function (} template<ActuatorDataType> void)",
    "insertText": "BlendToken(const FMovieSceneEvaluationOperand& InOperand, FMovieSceneBlendingActuatorID InActuatorTypeID, const FMovieSceneEvaluationScope& InScope, const FMovieSceneContext& InContext, ActuatorDataType&& InInputValue, EMovieSceneBlendType InBlendType, float InWeight = 1.f, int32 InBlendingPriority = INDEX_NONE)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (OperandToBlendState .)",
    "insertText": "FindOrAdd(InOperand).Add(InScope, InActuatorTypeID, TBlendableToken<ActuatorDataType>(Forward<ActuatorDataType>(InInputValue), InScope, InContext, InBlendType, InWeight, InBlendingPriority))"
  },
  {
    "label": "FindActuator()",
    "kind": "Method",
    "detail": "Function (} template<DataType> TMovieSceneBlendingActuator<DataType>*)",
    "insertText": "FindActuator(FMovieSceneBlendingActuatorID InActuatorTypeID)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<IMovieSceneBlendingActuator>* Actuator = Actuators .)",
    "insertText": "Find(InActuatorTypeID)"
  },
  {
    "label": "DefineActuator()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } void)",
    "insertText": "DefineActuator(FMovieSceneBlendingActuatorID InActuatorTypeID, TSharedRef<IMovieSceneBlendingActuator> InActuator)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Actuators .)",
    "insertText": "Add(InActuatorTypeID, InActuator)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(const FMovieSceneContext& Context, FPersistentEvaluationData& PersistentData, IMovieScenePlayer& Player)"
  },
  {
    "label": "Interrogate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Interrogate(const FMovieSceneContext& Context, FMovieSceneInterrogationData& InterrogationData, UObject* AnimatedObject)"
  }
]