[
  {
    "label": "FSegmentTree3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSegmentTree3"
  },
  {
    "label": "FSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSegment"
  },
  {
    "label": "FRayNearestSegmentInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayNearestSegmentInfo"
  },
  {
    "label": "FTreeBox",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTreeBox"
  },
  {
    "label": "FBoxesSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoxesSet"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Spatial / SpatialInterfaces . h \" # include \" Util / DynamicVector . h \" # include \" SegmentTypes . h \" # include \" BoxTypes . h \" # include \" Intersection / IntrRay3AxisAlignedBox3 . h \" # include \" Intersection / IntersectionUtil . h \" # include \" Distance / DistRay3Segment3 . h \" namespace UE { namespace Geometry { class FSegmentTree3 { public : using GetSplitAxisFunc = TUniqueFunction<)",
    "insertText": "int(int Depth, const FAxisAlignedBox3d& Box)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (public : struct FSegment { int32 ID ; FSegment3d Segment ; } ; template<SegmentIDEnumerable,GetSegmentFunc> void)",
    "insertText": "Build(SegmentIDEnumerable Enumerable, GetSegmentFunc GetSegmentForID, int32 NumSegmentsHint = 0)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (SegmentList .)",
    "insertText": "Reserve(NumSegmentsHint)"
  },
  {
    "label": "GetSegmentForID()",
    "kind": "Method",
    "detail": "Function (FSegment3d Segment =)",
    "insertText": "GetSegmentForID(SegmentID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SegmentList .)",
    "insertText": "Add(FSegment{SegmentID, Segment})"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} TArray<int> SegmentIndices ; SegmentIndices .)",
    "insertText": "Reserve(SegmentList.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SegmentIndices .)",
    "insertText": "Add(k)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Centers .)",
    "insertText": "Add(SegmentList[k].Segment.Center)"
  },
  {
    "label": "BuildTopDown()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BuildTopDown(SegmentIndices, Centers, SegmentList.Num())"
  },
  {
    "label": "FindNearestSegment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindNearestSegment(const FVector3d& P, FSegment& NearestSegmentOut, const IMeshSpatial::FQueryOptions& Options = IMeshSpatial::FQueryOptions())"
  },
  {
    "label": "FindNearestSegmentInternal()",
    "kind": "Method",
    "detail": "Function (int NearestSegmentIdx = IndexConstants::InvalidID ;)",
    "insertText": "FindNearestSegmentInternal(RootBoxIndex, P, NearestDistSqr, NearestSegmentIdx, Options)"
  },
  {
    "label": "FindNearestVisibleSegmentHitByRay()",
    "kind": "Method",
    "detail": "Function (NearestSegmentOut = SegmentList [ NearestSegmentIdx ] ; return true ; } return false ; } struct FRayNearestSegmentInfo { double RayParam ; double SegmentParam ; double SegmentDist ; double Metric ; } ; bool)",
    "insertText": "FindNearestVisibleSegmentHitByRay(const FRay3d& Ray, TFunctionRef<bool(int32, const FVector3d&, const FVector3d&)> WithinToleranceCheck, FSegment& NearestHitSegmentOut, FRayNearestSegmentInfo& NearestInfo, const IMeshSpatial::FQueryOptions& Options = IMeshSpatial::FQueryOptions())"
  },
  {
    "label": "FRayNearestSegmentInfo()",
    "kind": "Method",
    "detail": "Function (NearestInfo =)",
    "insertText": "FRayNearestSegmentInfo()"
  },
  {
    "label": "RayParam()",
    "kind": "Method",
    "detail": "Function (NearestInfo .)",
    "insertText": "RayParam(Options.MaxDistance < TNumericLimits<float>::Max()) ? Options.MaxDistance : TNumericLimits<float>::Max()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (NearestInfo . SegmentParam = 0 . 5 ; NearestInfo . SegmentDist = TNumericLimits<double)",
    "insertText": "Max()"
  },
  {
    "label": "FindNearestVisibleSegmentHitByRayInternal()",
    "kind": "Method",
    "detail": "Function (int NearestHitSegmentIdx = IndexConstants::InvalidID ;)",
    "insertText": "FindNearestVisibleSegmentHitByRayInternal(RootBoxIndex, Ray, WithinToleranceCheck, NearestHitSegmentIdx, NearestInfo, Options)"
  },
  {
    "label": "MakeDefaultSplitAxisFunc()",
    "kind": "Method",
    "detail": "Function (NearestHitSegmentOut = SegmentList [ NearestHitSegmentIdx ] ; return true ; } return false ; } protected : int TopDownLeafMaxSegmentCount = 8 ; GetSplitAxisFunc)",
    "insertText": "MakeDefaultSplitAxisFunc()"
  },
  {
    "label": "FBoxesSet()",
    "kind": "Method",
    "detail": "Function (TArray<FSegment> SegmentList ; struct FTreeBox { int BoxToIndex ; FVector3d Center ; FVector3d Extents ; } ; TArray<FTreeBox> TreeBoxes ; TArray<int> IndexList ; int SegmentsEnd = - 1 ; int RootBoxIndex = - 1 ; struct FBoxesSet { TDynamicVector<FTreeBox> Boxes ; TDynamicVector<int> IndexList ; int IBoxCur ; int IIndicesCur ;)",
    "insertText": "FBoxesSet()"
  },
  {
    "label": "BuildTopDown()",
    "kind": "Method",
    "detail": "Function (IBoxCur = 0 ; IIndicesCur = 0 ; } } ; void)",
    "insertText": "BuildTopDown(TArray<int>& SegmentIndices, TArray<FVector3d>& SegmentCenters, int32 NumSegments)"
  },
  {
    "label": "SplitSegmentSetMidpoints()",
    "kind": "Method",
    "detail": "Function (FBoxesSet Tris ; FBoxesSet Nodes ; FAxisAlignedBox3d RootBox ; int SplitsRootNode =)",
    "insertText": "SplitSegmentSetMidpoints(SegmentIndices, SegmentCenters, 0, NumSegments, 0, TopDownLeafMaxSegmentCount, Tris, Nodes, RootBox)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (SegmentsEnd = Tris . IIndicesCur ; int IndexShift = SegmentsEnd ; int BoxShift = Tris . IBoxCur ; TDynamicVector<FTreeBox>& UseBoxes = Tris . Boxes ;)",
    "insertText": "for(int32 i = 0; i < Nodes.IBoxCur; ++i)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (FVector3d NodeBoxCenter = Nodes . Boxes [ i ] . Center ; FVector3d NodeBoxExtents = Nodes . Boxes [ i ] . Extents ; int NodeBoxIndex = Nodes . Boxes [ i ] . BoxToIndex ; UseBoxes .)",
    "insertText": "InsertAt(FTreeBox{ IndexShift + NodeBoxIndex, NodeBoxCenter, NodeBoxExtents }, BoxShift + i)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32 NumBoxes = UseBoxes .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TreeBoxes .)",
    "insertText": "SetNum(NumBoxes)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TreeBoxes [ k ] = UseBoxes [ k ] ; } TDynamicVector<int>& UseIndexList = Tris . IndexList ;)",
    "insertText": "for(int32 i = 0; i < Nodes.IIndicesCur; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int ChildBox = Nodes . IndexList [ i ] ;)",
    "insertText": "if(ChildBox < 0)"
  },
  {
    "label": "ChildBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChildBox(-ChildBox)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (} else { ChildBox + = BoxShift ; } ChildBox = ChildBox + 1 ; UseIndexList .)",
    "insertText": "InsertAt(ChildBox, IndexShift + i)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (IndexList .)",
    "insertText": "SetNum(NumIndices)"
  },
  {
    "label": "SplitSegmentSetMidpoints()",
    "kind": "Method",
    "detail": "Function (IndexList [ k ] = UseIndexList [ k ] ; } RootBoxIndex = SplitsRootNode + BoxShift ; } int)",
    "insertText": "SplitSegmentSetMidpoints(TArray<int>& SegmentIndices, TArray<FVector3d>& SegmentCenters, int StartIdx, int Count, int Depth, int MinSegmentCount, FBoxesSet& SegmentBoxes, FBoxesSet& Nodes, FAxisAlignedBox3d& Box)"
  },
  {
    "label": "Box()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Box(SegmentIndices.Num() > 0) ? FAxisAlignedBox3d::Empty() : FAxisAlignedBox3d(FVector3d::Zero(), 0.0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int BoxIndex = - 1 ;)",
    "insertText": "if(Count <= MinSegmentCount)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (BoxIndex = SegmentBoxes . IBoxCur + + ; int32 IndexCur = SegmentBoxes . IIndicesCur ; SegmentBoxes . IndexList .)",
    "insertText": "InsertAt(Count, SegmentBoxes.IIndicesCur++)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (int32 SegmentIdx = SegmentIndices [ StartIdx + i ] ; SegmentBoxes . IndexList .)",
    "insertText": "InsertAt(SegmentIdx, SegmentBoxes.IIndicesCur++)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (FAxisAlignedBox3d SegmentBounds = SegmentList [ SegmentIdx ] . Segment .)",
    "insertText": "GetBounds()"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (Box .)",
    "insertText": "Contain(SegmentBounds)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (} SegmentBoxes . Boxes .)",
    "insertText": "InsertAt(FTreeBox{IndexCur, Box.Center(), Box.Extents()}, BoxIndex)"
  },
  {
    "label": "GetSplitAxis()",
    "kind": "Method",
    "detail": "Function (} int SplitAxis =)",
    "insertText": "GetSplitAxis(Depth, Box)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (FInterval1d Interval =)",
    "insertText": "Empty()"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (Interval .)",
    "insertText": "Contain(SegmentCenters[StartIdx + i][SplitAxis])"
  },
  {
    "label": "Center()",
    "kind": "Method",
    "detail": "Function (} double Midpoint = Interval .)",
    "insertText": "Center()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int Count0,Count1 ;)",
    "insertText": "if(Interval.Length() > FMathd::ZeroTolerance)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int Left = 0 ; int Right = Count - 1 ;)",
    "insertText": "while(Left < Right)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Left + + ; })",
    "insertText": "while(SegmentCenters[StartIdx + Right][SplitAxis] > Midpoint)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Right - - ; })",
    "insertText": "if(Left >= Right)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "Swap(SegmentCenters[StartIdx + Left], SegmentCenters[StartIdx + Right])"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(SegmentIndices[StartIdx + Left], SegmentIndices[StartIdx + Right])"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (} Count0 = Left ; Count1 = Count - Count0 ;)",
    "insertText": "checkSlow(Count0 >= 1 && Count1 >= 1)"
  },
  {
    "label": "SplitSegmentSetMidpoints()",
    "kind": "Method",
    "detail": "Function (} else { Count0 = Count / 2 ; Count1 = Count - Count0 ; } FAxisAlignedBox3d Child1Box ; int Child0 =)",
    "insertText": "SplitSegmentSetMidpoints(SegmentIndices, SegmentCenters, StartIdx, Count0, Depth + 1, MinSegmentCount, SegmentBoxes, Nodes, Box)"
  },
  {
    "label": "SplitSegmentSetMidpoints()",
    "kind": "Method",
    "detail": "Function (int Child1 =)",
    "insertText": "SplitSegmentSetMidpoints(SegmentIndices, SegmentCenters, StartIdx + Count0, Count1, Depth + 1, MinSegmentCount, SegmentBoxes, Nodes, Child1Box)"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (Box .)",
    "insertText": "Contain(Child1Box)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (BoxIndex = Nodes . IBoxCur + + ; Nodes . Boxes .)",
    "insertText": "InsertAt(FTreeBox{Nodes.IIndicesCur, Box.Center(), Box.Extents()}, BoxIndex)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (Nodes . IndexList .)",
    "insertText": "InsertAt(Child0, Nodes.IIndicesCur++)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (Nodes . IndexList .)",
    "insertText": "InsertAt(Child1, Nodes.IIndicesCur++)"
  },
  {
    "label": "GetBoxDistanceSqr()",
    "kind": "Method",
    "detail": "Function (BoxEps = Tolerance ; } protected : double BoxEps = FMathd::ZeroTolerance ; double)",
    "insertText": "GetBoxDistanceSqr(int BoxIndex, const FVector3d& V)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const FTreeBox& Box = TreeBoxes [ BoxIndex ] ; double dx =)",
    "insertText": "Max(FMathd::Abs(V.X - Box.Center.X) - Box.Extents.X, 0.0)"
  },
  {
    "label": "Extents()",
    "kind": "Method",
    "detail": "Function (const FTreeBox& TreeBox = TreeBoxes [ BoxIndex ] ; FVector3d Extents = TreeBox .)",
    "insertText": "Extents(Radius + BoxEps)"
  },
  {
    "label": "Box()",
    "kind": "Method",
    "detail": "Function (FAxisAlignedBox3d)",
    "insertText": "Box(TreeBox.Center - Extents, TreeBox.Center + Extents)"
  },
  {
    "label": "FindNearestSegmentInternal()",
    "kind": "Method",
    "detail": "Function (} } protected : void)",
    "insertText": "FindNearestSegmentInternal(int BoxIndex, const FVector3d& P, double& NearestDistSqr, int& NearSegmentIdx, const IMeshSpatial::FQueryOptions& Options)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FTreeBox& TreeBox = TreeBoxes [ BoxIndex ] ;)",
    "insertText": "if(TreeBox.BoxToIndex < SegmentsEnd)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int NumSegments = IndexList [ TreeBox . BoxToIndex ] ;)",
    "insertText": "for(int i = 1; i <= NumSegments; ++i)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (int SegmentIdx = IndexList [ TreeBox . BoxToIndex + i ] ; double SegmentDistSqr = SegmentList [ SegmentIdx ] . Segment .)",
    "insertText": "DistanceSquared(P)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NearestDistSqr = SegmentDistSqr ; NearSegmentIdx = SegmentIdx ; } } } else { int iChild1 = IndexList [ TreeBox . BoxToIndex ] ;)",
    "insertText": "if(iChild1 < 0)"
  },
  {
    "label": "iChild1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iChild1(-iChild1)"
  },
  {
    "label": "FindNearestSegmentInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNearestSegmentInternal(iChild1, P, NearestDistSqr, NearSegmentIdx, Options)"
  },
  {
    "label": "GetBoxDistanceSqr()",
    "kind": "Method",
    "detail": "Function (} } else { iChild1 = iChild1 - 1 ; int iChild2 = IndexList [ TreeBox . BoxToIndex + 1 ] - 1 ; double fChild1DistSqr =)",
    "insertText": "GetBoxDistanceSqr(iChild1, P)"
  },
  {
    "label": "FindNearestSegmentInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNearestSegmentInternal(iChild2, P, NearestDistSqr, NearSegmentIdx, Options)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "if(fChild2DistSqr < NearestDistSqr)"
  },
  {
    "label": "FindNearestVisibleSegmentHitByRayInternal()",
    "kind": "Method",
    "detail": "Function (} } } } } } void)",
    "insertText": "FindNearestVisibleSegmentHitByRayInternal(int BoxIndex, const FRay3d& Ray, TFunctionRef<bool(int32, const FVector3d&, const FVector3d&)> WithinToleranceCheck, int& NearSegmentIdx, FRayNearestSegmentInfo& NearestInfo, const IMeshSpatial::FQueryOptions& Options)"
  },
  {
    "label": "SquaredDistance()",
    "kind": "Method",
    "detail": "Function (int SegmentIdx = IndexList [ TreeBox . BoxToIndex + i ] ; const FSegment3d& Segment = SegmentList [ SegmentIdx ] . Segment ; double SegRayParam ; double SegSegParam ; double SegDistSqr =)",
    "insertText": "SquaredDistance(Ray, Segment, SegRayParam, SegSegParam)"
  },
  {
    "label": "PointAt()",
    "kind": "Method",
    "detail": "Function (FVector3d RayPoint = Ray .)",
    "insertText": "PointAt(SegRayParam), SegPoint = Segment.PointAt(SegSegParam)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (NearSegmentIdx = SegmentIdx ; NearestInfo . RayParam = SegRayParam ; NearestInfo . SegmentParam = SegSegParam ; NearestInfo . SegmentDist =)",
    "insertText": "Sqrt(SegDistSqr)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (NearestInfo . Metric = DistanceMetric ; } } } } else { double UseBoxRadius =)",
    "insertText": "Min(2*NearestInfo.SegmentDist, (double)TNumericLimits<float>::Max())"
  },
  {
    "label": "FindNearestVisibleSegmentHitByRayInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNearestVisibleSegmentHitByRayInternal(iChild1, Ray, WithinToleranceCheck, NearSegmentIdx, NearestInfo, Options)"
  },
  {
    "label": "GetRayBoxIntersectionParam()",
    "kind": "Method",
    "detail": "Function (} } else { iChild1 = iChild1 - 1 ; int iChild2 = IndexList [ TreeBox . BoxToIndex + 1 ] - 1 ; double fChild1T =)",
    "insertText": "GetRayBoxIntersectionParam(iChild1, Ray, UseBoxRadius)"
  },
  {
    "label": "GetRayBoxIntersectionParam()",
    "kind": "Method",
    "detail": "Function (} double fChild2T =)",
    "insertText": "GetRayBoxIntersectionParam(iChild2, Ray, UseBoxRadius)"
  },
  {
    "label": "FindNearestVisibleSegmentHitByRayInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNearestVisibleSegmentHitByRayInternal(iChild2, Ray, WithinToleranceCheck, NearSegmentIdx, NearestInfo, Options)"
  }
]