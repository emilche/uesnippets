[
  {
    "label": "MyDeformer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MyDeformer"
  },
  {
    "label": "TestPointMove",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestPointMove"
  },
  {
    "label": "Advect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Advect"
  },
  {
    "label": "CachedDeformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CachedDeformer"
  },
  {
    "label": "Cache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Cache"
  },
  {
    "label": "Leaf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Leaf"
  },
  {
    "label": "Leaf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Leaf"
  },
  {
    "label": "Cache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Cache"
  },
  {
    "label": "CachedDeformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CachedDeformer"
  },
  {
    "label": "BuildMoveMapsOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BuildMoveMapsOp"
  },
  {
    "label": "BuildMoveMapsOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BuildMoveMapsOp"
  },
  {
    "label": "GlobalMovePointsOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GlobalMovePointsOp"
  },
  {
    "label": "CopyIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyIterator"
  },
  {
    "label": "CopyIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyIterator"
  },
  {
    "label": "GlobalMovePointsOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GlobalMovePointsOp"
  },
  {
    "label": "LocalMovePointsOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LocalMovePointsOp"
  },
  {
    "label": "CopyIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyIterator"
  },
  {
    "label": "CopyIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyIterator"
  },
  {
    "label": "LocalMovePointsOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LocalMovePointsOp"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset(LeafNoteType& leaf, size_t idx)"
  },
  {
    "label": "CachedDeformer()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "CachedDeformer(Cache& cache)"
  },
  {
    "label": "evaluate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evaluate(PointDataGridT& grid, DeformerT& deformer, const FilterT& filter,\n        bool threaded = true)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset(const LeafT& leaf, size_t idx)"
  },
  {
    "label": "deformer()",
    "kind": "Method",
    "detail": "Function (DeformerT)",
    "insertText": "deformer(mDeformer)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "bool(mIt)"
  },
  {
    "label": "copyIterator()",
    "kind": "Method",
    "detail": "Function (CopyIterator)",
    "insertText": "copyIterator(leaf, sortedIndices, moveIndices, offsets)"
  },
  {
    "label": "indexOffsetFromVoxel()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "indexOffsetFromVoxel(mIndices[mIndex].first, mLeaf, mOffsets)"
  },
  {
    "label": "sourceLeafOffset()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "sourceLeafOffset(mSourceIndices[idx])"
  },
  {
    "label": "copyIterator()",
    "kind": "Method",
    "detail": "Function (CopyIterator)",
    "insertText": "copyIterator(leaf, moveIndices, offsets)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (only)",
    "insertText": "assert(!objectNotInUse)"
  },
  {
    "label": "sourceLeafManager()",
    "kind": "Method",
    "detail": "Function (LeafManagerT)",
    "insertText": "sourceLeafManager(tree)"
  },
  {
    "label": "targetLeafManager()",
    "kind": "Method",
    "detail": "Function (LeafManagerT)",
    "insertText": "targetLeafManager(newTree)"
  },
  {
    "label": "globalMoveOp()",
    "kind": "Method",
    "detail": "Function (GlobalMovePointsOp<PointDataTreeT>)",
    "insertText": "globalMoveOp(offsetMap,\n            sourceLeafManager, attributeIndex, globalMoveLeafMap, globalMoveLeafIndices)"
  },
  {
    "label": "localMoveOp()",
    "kind": "Method",
    "detail": "Function (LocalMovePointsOp<PointDataTreeT>)",
    "insertText": "localMoveOp(offsetMap,\n            sourceIndices, sourceLeafManager, attributeIndex, localMoveLeafMap)"
  },
  {
    "label": "newDeformer()",
    "kind": "Method",
    "detail": "Function (DeformerT)",
    "insertText": "newDeformer(deformer)"
  },
  {
    "label": "IndexError()",
    "kind": "Method",
    "detail": "Function (throw)",
    "insertText": "IndexError(\"No leafs in cache, perhaps CachedDeformer has not been evaluated?\")"
  },
  {
    "label": "IndexError()",
    "kind": "Method",
    "detail": "Function (throw)",
    "insertText": "IndexError(\"Leaf index is out-of-range of cache leafs.\")"
  }
]