[
  {
    "label": "TestPointMove",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestPointMove"
  },
  {
    "label": "Advect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Advect"
  },
  {
    "label": "CachedDeformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CachedDeformer"
  },
  {
    "label": "Cache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Cache"
  },
  {
    "label": "Leaf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Leaf"
  },
  {
    "label": "BuildMoveMapsOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BuildMoveMapsOp"
  },
  {
    "label": "GlobalMovePointsOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GlobalMovePointsOp"
  },
  {
    "label": "CopyIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyIterator"
  },
  {
    "label": "LocalMovePointsOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LocalMovePointsOp"
  },
  {
    "label": "movePoints()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_POINTS_POINT_MOVE_HAS_BEEN_INCLUDED # define OPENVDB_POINTS_POINT_MOVE_HAS_BEEN_INCLUDED # include<openvdb / openvdb . h> # include<openvdb / points / PointDataGrid . h> # include<openvdb / points / PointMask . h> # include<tbb / concurrent_vector . h> # include<algorithm> # include<iterator> # include<map> # include<numeric> # include<tuple> # include<unordered_map> # include<vector> class TestPointMove ; namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace points { namespace future { struct Advect { } ; } template<PointDataGridT,DeformerT,FilterT = NullFilter> void)",
    "insertText": "movePoints(PointDataGridT& points, DeformerT& deformer, const FilterT& filter = NullFilter(), future::Advect* objectNotInUse = nullptr, bool threaded = true)"
  },
  {
    "label": "movePoints()",
    "kind": "Method",
    "detail": "Function (template<PointDataGridT,DeformerT,FilterT = NullFilter> void)",
    "insertText": "movePoints(PointDataGridT& points, const math::Transform& transform, DeformerT& deformer, const FilterT& filter = NullFilter(), future::Advect* objectNotInUse = nullptr, bool threaded = true)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (namespace point_move_internal { using LeafIndex = Index32 ; } template<T> class CachedDeformer { public : using LeafIndex = point_move_internal::LeafIndex ; using Vec3T = math::Vec3<T> ; using LeafVecT = std::vector<Vec3T> ; using LeafMapT = std::unordered_map<LeafIndex,Vec3T> ; struct Cache { struct Leaf { void)",
    "insertText": "clear()"
  },
  {
    "label": "CachedDeformer()",
    "kind": "Method",
    "detail": "Function (totalSize = 0 ; } LeafVecT vecData ; LeafMapT mapData ; Index totalSize = 0 ; } ; std::vector<Leaf> leafs ; } ;)",
    "insertText": "CachedDeformer(Cache& cache)"
  },
  {
    "label": "evaluate()",
    "kind": "Method",
    "detail": "Function (template<PointDataGridT,DeformerT,FilterT> void)",
    "insertText": "evaluate(PointDataGridT& grid, DeformerT& deformer, const FilterT& filter, bool threaded = true)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (template<LeafT> void)",
    "insertText": "reset(const LeafT& leaf, size_t idx)"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (template<IndexIterT> void)",
    "insertText": "apply(Vec3d& position, const IndexIterT& iter)"
  },
  {
    "label": "BuildMoveMapsOp()",
    "kind": "Method",
    "detail": "Function (private : class::TestPointMove ; Cache& mCache ; const LeafVecT* mLeafVec = nullptr ; const LeafMapT* mLeafMap = nullptr ; } ; namespace point_move_internal { using IndexArray = std::vector<Index> ; using IndexTriple = std::tuple<LeafIndex,Index,Index> ; using IndexTripleArray = tbb::concurrent_vector<IndexTriple> ; using GlobalPointIndexMap = std::vector<IndexTripleArray> ; using GlobalPointIndexIndices = std::vector<IndexArray> ; using IndexPair = std::pair<Index,Index> ; using IndexPairArray = std::vector<IndexPair> ; using LocalPointIndexMap = std::vector<IndexPairArray> ; using LeafIndexArray = std::vector<LeafIndex> ; using LeafOffsetArray = std::vector<LeafIndexArray> ; using LeafMap = std::unordered_map<Coord,LeafIndex> ; template<DeformerT,TreeT,FilterT> struct BuildMoveMapsOp { using LeafT = TreeT::LeafNodeType ; using LeafArrayT = std::vector<LeafT*> ; using LeafManagerT = tree::LeafManager<TreeT> ;)",
    "insertText": "BuildMoveMapsOp(const DeformerT& deformer, GlobalPointIndexMap& globalMoveLeafMap, LocalPointIndexMap& localMoveLeafMap, const LeafMap& targetLeafMap, const math::Transform& targetTransform, const math::Transform& sourceTransform, const FilterT& filter) : mDeformer(deformer) , mGlobalMoveLeafMap(globalMoveLeafMap) , mLocalMoveLeafMap(localMoveLeafMap) , mTargetLeafMap(targetLeafMap) , mTargetTransform(targetTransform) , mSourceTransform(sourceTransform) , mFilter(filter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(LeafT& leaf, size_t idx)"
  },
  {
    "label": "deformer()",
    "kind": "Method",
    "detail": "Function (DeformerT)",
    "insertText": "deformer(mDeformer)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (deformer .)",
    "insertText": "reset(leaf, idx)"
  },
  {
    "label": "origin()",
    "kind": "Method",
    "detail": "Function (Coord sourceLeafOrigin = leaf .)",
    "insertText": "origin()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (auto sourceHandle = AttributeWriteHandle<Vec3f)",
    "insertText": "create(leaf.attributeArray(\"P\"))"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (const bool useIndexSpace = DeformerTraits<DeformerT>::IndexSpace ; Vec3d positionIS = sourceHandle ->)",
    "insertText": "get(*iter) + iter.getCoord().asVec3d()"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (deformer .)",
    "insertText": "apply(positionIS, iter)"
  },
  {
    "label": "indexToWorld()",
    "kind": "Method",
    "detail": "Function (} Vec3d positionWS = mSourceTransform .)",
    "insertText": "indexToWorld(positionIS)"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (deformer .)",
    "insertText": "apply(positionWS, iter)"
  },
  {
    "label": "worldToIndex()",
    "kind": "Method",
    "detail": "Function (} positionIS = mTargetTransform .)",
    "insertText": "worldToIndex(positionWS)"
  },
  {
    "label": "round()",
    "kind": "Method",
    "detail": "Function (Coord targetVoxel =)",
    "insertText": "round(positionIS)"
  },
  {
    "label": "coordToOffset()",
    "kind": "Method",
    "detail": "Function (Index targetOffset =)",
    "insertText": "coordToOffset(targetVoxel)"
  },
  {
    "label": "voxelPosition()",
    "kind": "Method",
    "detail": "Function (Vec3d)",
    "insertText": "voxelPosition(positionIS - targetVoxel.asVec3d())"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (sourceHandle ->)",
    "insertText": "set(*iter, voxelPosition)"
  },
  {
    "label": "targetVoxel()",
    "kind": "Method",
    "detail": "Function (Coord targetLeafOrigin =)",
    "insertText": "targetVoxel(LeafT::DIM - 1)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mTargetLeafMap.find(targetLeafOrigin) != mTargetLeafMap.end())"
  },
  {
    "label": "targetLeafOffset()",
    "kind": "Method",
    "detail": "Function (const LeafIndex)",
    "insertText": "targetLeafOffset(mTargetLeafMap.at(targetLeafOrigin))"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (mLocalMoveLeafMap [ targetLeafOffset ] .)",
    "insertText": "emplace_back(targetOffset, *iter)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} else { mGlobalMoveLeafMap [ targetLeafOffset ] .)",
    "insertText": "push_back(IndexTriple( LeafIndex(static_cast<LeafIndex>(idx)), targetOffset, *iter))"
  },
  {
    "label": "indexOffsetFromVoxel()",
    "kind": "Method",
    "detail": "Function (} } } private : const DeformerT& mDeformer ; GlobalPointIndexMap& mGlobalMoveLeafMap ; LocalPointIndexMap& mLocalMoveLeafMap ; const LeafMap& mTargetLeafMap ; const math::Transform& mTargetTransform ; const math::Transform& mSourceTransform ; const FilterT& mFilter ; } ; template<LeafT> Index)",
    "insertText": "indexOffsetFromVoxel(const Index voxelOffset, const LeafT& leaf, IndexArray& offsets)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index targetOffset = offsets [ voxelOffset ] + + ;)",
    "insertText": "if(voxelOffset > 0)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (targetOffset + = static_cast<)",
    "insertText": "Index(leaf.getValue(voxelOffset - 1))"
  },
  {
    "label": "GlobalMovePointsOp()",
    "kind": "Method",
    "detail": "Function (} return targetOffset ; } template<TreeT> struct GlobalMovePointsOp { using LeafT = TreeT::LeafNodeType ; using LeafArrayT = std::vector<LeafT*> ; using LeafManagerT = tree::LeafManager<TreeT> ; using AttributeArrays = std::vector<AttributeArray*> ;)",
    "insertText": "GlobalMovePointsOp(LeafOffsetArray& offsetMap, LeafManagerT& sourceLeafManager, const Index attributeIndex, const GlobalPointIndexMap& moveLeafMap, const GlobalPointIndexIndices& moveLeafIndices) : mOffsetMap(offsetMap) , mSourceLeafManager(sourceLeafManager) , mAttributeIndex(attributeIndex) , mMoveLeafMap(moveLeafMap) , mMoveLeafIndices(moveLeafIndices)"
  },
  {
    "label": "CopyIterator()",
    "kind": "Method",
    "detail": "Function (} struct CopyIterator {)",
    "insertText": "CopyIterator(const LeafT& leaf, const IndexArray& sortedIndices, const IndexTripleArray& moveIndices, IndexArray& offsets) : mLeaf(leaf) , mSortedIndices(sortedIndices) , mMoveIndices(moveIndices) , mOffsets(offsets)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset(Index startIndex, Index endIndex)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (mIndex = startIndex ; mEndIndex = endIndex ; this ->)",
    "insertText": "advance()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CopyIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} return std::numeric_limits<Index)",
    "insertText": "max()"
  },
  {
    "label": "sourceIndex()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "sourceIndex()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mIt)"
  },
  {
    "label": "targetIndex()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "targetIndex()"
  },
  {
    "label": "leafIndexTriple()",
    "kind": "Method",
    "detail": "Function (mIt = nullptr ; } else { mIt =& this ->)",
    "insertText": "leafIndexTriple(mIndex)"
  },
  {
    "label": "leafIndexTriple()",
    "kind": "Method",
    "detail": "Function (} + + mIndex ; } const IndexTriple&)",
    "insertText": "leafIndexTriple(Index i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const IndexTripleArray& moveIndices = mMoveLeafMap [ idx ] ;)",
    "insertText": "if(moveIndices.empty())"
  },
  {
    "label": "attributeArray()",
    "kind": "Method",
    "detail": "Function (const IndexArray& sortedIndices = mMoveLeafIndices [ idx ] ; LeafIndexArray& offsets = mOffsetMap [ idx ] ; auto& targetArray = leaf .)",
    "insertText": "attributeArray(mAttributeIndex)"
  },
  {
    "label": "loadData()",
    "kind": "Method",
    "detail": "Function (targetArray .)",
    "insertText": "loadData()"
  },
  {
    "label": "expand()",
    "kind": "Method",
    "detail": "Function (targetArray .)",
    "insertText": "expand()"
  },
  {
    "label": "copyIterator()",
    "kind": "Method",
    "detail": "Function (CopyIterator)",
    "insertText": "copyIterator(leaf, sortedIndices, moveIndices, offsets)"
  },
  {
    "label": "leafIndex()",
    "kind": "Method",
    "detail": "Function (Index sourceLeafIndex = copyIterator .)",
    "insertText": "leafIndex(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index startIndex = 0 ;)",
    "insertText": "for(size_t i = 1; i <= sortedIndices.size(); i++)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index endIndex = static_cast<)",
    "insertText": "Index(i)"
  },
  {
    "label": "leafIndex()",
    "kind": "Method",
    "detail": "Function (Index newSourceLeafIndex = copyIterator .)",
    "insertText": "leafIndex(endIndex)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (copyIterator .)",
    "insertText": "reset(startIndex, endIndex)"
  },
  {
    "label": "leaf()",
    "kind": "Method",
    "detail": "Function (const LeafT& sourceLeaf = mSourceLeafManager .)",
    "insertText": "leaf(sourceLeafIndex)"
  },
  {
    "label": "constAttributeArray()",
    "kind": "Method",
    "detail": "Function (const auto& sourceArray = sourceLeaf .)",
    "insertText": "constAttributeArray(mAttributeIndex)"
  },
  {
    "label": "copyValuesUnsafe()",
    "kind": "Method",
    "detail": "Function (targetArray .)",
    "insertText": "copyValuesUnsafe(sourceArray, copyIterator)"
  },
  {
    "label": "LocalMovePointsOp()",
    "kind": "Method",
    "detail": "Function (sourceLeafIndex = newSourceLeafIndex ; startIndex = endIndex ; } } } private : LeafOffsetArray& mOffsetMap ; LeafManagerT& mSourceLeafManager ; const Index mAttributeIndex ; const GlobalPointIndexMap& mMoveLeafMap ; const GlobalPointIndexIndices& mMoveLeafIndices ; } ; template<TreeT> struct LocalMovePointsOp { using LeafT = TreeT::LeafNodeType ; using LeafArrayT = std::vector<LeafT*> ; using LeafManagerT = tree::LeafManager<TreeT> ; using AttributeArrays = std::vector<AttributeArray*> ;)",
    "insertText": "LocalMovePointsOp(LeafOffsetArray& offsetMap, const LeafIndexArray& sourceIndices, LeafManagerT& sourceLeafManager, const Index attributeIndex, const LocalPointIndexMap& moveLeafMap) : mOffsetMap(offsetMap) , mSourceIndices(sourceIndices) , mSourceLeafManager(sourceLeafManager) , mAttributeIndex(attributeIndex) , mMoveLeafMap(moveLeafMap)"
  },
  {
    "label": "CopyIterator()",
    "kind": "Method",
    "detail": "Function (} struct CopyIterator {)",
    "insertText": "CopyIterator(const LeafT& leaf, const IndexPairArray& indices, IndexArray& offsets) : mLeaf(leaf) , mIndices(indices) , mOffsets(offsets)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (LeafIndexArray& offsets = mOffsetMap [ idx ] ;)",
    "insertText": "assert(idx < mSourceIndices.size())"
  },
  {
    "label": "sourceLeafOffset()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "sourceLeafOffset(mSourceIndices[idx])"
  },
  {
    "label": "leaf()",
    "kind": "Method",
    "detail": "Function (LeafT& sourceLeaf = mSourceLeafManager .)",
    "insertText": "leaf(sourceLeafOffset)"
  },
  {
    "label": "copyIterator()",
    "kind": "Method",
    "detail": "Function (CopyIterator)",
    "insertText": "copyIterator(leaf, moveIndices, offsets)"
  },
  {
    "label": "movePoints()",
    "kind": "Method",
    "detail": "Function (} private : LeafOffsetArray& mOffsetMap ; const LeafIndexArray& mSourceIndices ; LeafManagerT& mSourceLeafManager ; const Index mAttributeIndex ; const LocalPointIndexMap& mMoveLeafMap ; } ; } template<PointDataGridT,DeformerT,FilterT> void)",
    "insertText": "movePoints(PointDataGridT& points, const math::Transform& transform, DeformerT& deformer, const FilterT& filter, future::Advect* objectNotInUse, bool threaded)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (using LeafIndex = point_move_internal::LeafIndex ; using PointDataTreeT = PointDataGridT::TreeType ; using LeafT = PointDataTreeT::LeafNodeType ; using LeafManagerT = tree::LeafManager<PointDataTreeT> ; using namespace point_move_internal ;)",
    "insertText": "assert(!objectNotInUse)"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (PointDataTreeT& tree = points .)",
    "insertText": "tree()"
  },
  {
    "label": "cbeginLeaf()",
    "kind": "Method",
    "detail": "Function (auto iter = tree .)",
    "insertText": "cbeginLeaf()"
  },
  {
    "label": "PointDataGridT()",
    "kind": "Method",
    "detail": "Function (auto newPoints = point_mask_internal::convertPointsToScalar<)",
    "insertText": "PointDataGridT(points, transform, filter, deformer, threaded)"
  },
  {
    "label": "sourceLeafManager()",
    "kind": "Method",
    "detail": "Function (LeafManagerT)",
    "insertText": "sourceLeafManager(tree)"
  },
  {
    "label": "targetLeafManager()",
    "kind": "Method",
    "detail": "Function (LeafManagerT)",
    "insertText": "targetLeafManager(newTree)"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (const auto& existingAttributeSet = points .)",
    "insertText": "tree().cbeginLeaf()->attributeSet()"
  },
  {
    "label": "sourceIndices()",
    "kind": "Method",
    "detail": "Function (LeafMap targetLeafMap ; LeafIndexArray)",
    "insertText": "sourceIndices(targetLeafManager.leafCount(), std::numeric_limits<LeafIndex>::max())"
  },
  {
    "label": "offsetMap()",
    "kind": "Method",
    "detail": "Function (LeafOffsetArray)",
    "insertText": "offsetMap(targetLeafManager.leafCount())"
  },
  {
    "label": "leafRange()",
    "kind": "Method",
    "detail": "Function ({ LeafMap sourceLeafMap ; auto sourceRange = sourceLeafManager .)",
    "insertText": "leafRange()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (sourceLeafMap .)",
    "insertText": "insert({leaf->origin(), LeafIndex(static_cast<LeafIndex>(leaf.pos()))})"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (} AttributeArray::ScopedRegistryLock lock ; targetLeafManager .)",
    "insertText": "foreach([&](LeafT& leaf, size_t idx) { auto* buffer = leaf.buffer().data(); for (Index i = 1; i < leaf.buffer().size(); i++) { buffer[i] = buffer[i-1] + buffer[i]; } leaf.replaceAttributeSet( new AttributeSet(existingAttributeSet, leaf.getLastValue(), &lock), true); const auto it = sourceLeafMap.find(leaf.origin()); if (it != sourceLeafMap.end()) { sourceIndices[idx] = it->second; } offsetMap[idx].resize(LeafT::SIZE); }, threaded)"
  },
  {
    "label": "globalMoveLeafMap()",
    "kind": "Method",
    "detail": "Function (} GlobalPointIndexMap)",
    "insertText": "globalMoveLeafMap(targetLeafManager.leafCount())"
  },
  {
    "label": "localMoveLeafMap()",
    "kind": "Method",
    "detail": "Function (LocalPointIndexMap)",
    "insertText": "localMoveLeafMap(targetLeafManager.leafCount())"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (NullFilter nullFilter ; BuildMoveMapsOp<DeformerT,PointDataTreeT,NullFilter>)",
    "insertText": "op(deformer, globalMoveLeafMap, localMoveLeafMap, targetLeafMap, transform, points.transform(), nullFilter)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (sourceLeafManager .)",
    "insertText": "foreach(op, threaded)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (} else { BuildMoveMapsOp<DeformerT,PointDataTreeT,FilterT>)",
    "insertText": "op(deformer, globalMoveLeafMap, localMoveLeafMap, targetLeafMap, transform, points.transform(), filter)"
  },
  {
    "label": "globalMoveLeafIndices()",
    "kind": "Method",
    "detail": "Function (} GlobalPointIndexIndices)",
    "insertText": "globalMoveLeafIndices(globalMoveLeafMap.size())"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (targetLeafManager .)",
    "insertText": "foreach([&](LeafT& , size_t idx) { const IndexTripleArray& moveIndices = globalMoveLeafMap[idx]; if (moveIndices.empty()) return; IndexArray& sortedIndices = globalMoveLeafIndices[idx]; sortedIndices.resize(moveIndices.size()); std::iota(std::begin(sortedIndices), std::end(sortedIndices), 0); std::sort(std::begin(sortedIndices), std::end(sortedIndices), [&](int i, int j) { const Index& indexI0(std::get<0>(moveIndices[i])); const Index& indexJ0(std::get<0>(moveIndices[j])); if (indexI0 < indexJ0) return true; if (indexI0 > indexJ0) return false; return std::get<2>(moveIndices[i]) < std::get<2>(moveIndices[j]); } ); }, threaded)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const Index attributeIndex = static_cast<)",
    "insertText": "Index(it.second)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (targetLeafManager .)",
    "insertText": "foreach([&offsetMap](const LeafT& , size_t idx) { std::fill(offsetMap[idx].begin(), offsetMap[idx].end(), 0); }, threaded)"
  },
  {
    "label": "globalMoveOp()",
    "kind": "Method",
    "detail": "Function (GlobalMovePointsOp<PointDataTreeT>)",
    "insertText": "globalMoveOp(offsetMap, sourceLeafManager, attributeIndex, globalMoveLeafMap, globalMoveLeafIndices)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (targetLeafManager .)",
    "insertText": "foreach(globalMoveOp, threaded)"
  },
  {
    "label": "localMoveOp()",
    "kind": "Method",
    "detail": "Function (LocalMovePointsOp<PointDataTreeT>)",
    "insertText": "localMoveOp(offsetMap, sourceIndices, sourceLeafManager, attributeIndex, localMoveLeafMap)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (targetLeafManager .)",
    "insertText": "foreach(localMoveOp, threaded)"
  },
  {
    "label": "setTree()",
    "kind": "Method",
    "detail": "Function (} points .)",
    "insertText": "setTree(newPoints->treePtr())"
  },
  {
    "label": "movePoints()",
    "kind": "Method",
    "detail": "Function (} template<PointDataGridT,DeformerT,FilterT> void)",
    "insertText": "movePoints(PointDataGridT& points, DeformerT& deformer, const FilterT& filter, future::Advect* objectNotInUse, bool threaded)"
  },
  {
    "label": "movePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "movePoints(points, points.transform(), deformer, filter, objectNotInUse, threaded)"
  },
  {
    "label": "CachedDeformer()",
    "kind": "Method",
    "detail": "Function (} template<T> CachedDeformer<T)",
    "insertText": "CachedDeformer(Cache& cache) : mCache(cache)"
  },
  {
    "label": "evaluate()",
    "kind": "Method",
    "detail": "Function (} template<T> template<PointDataGridT,DeformerT,FilterT> void CachedDeformer<T)",
    "insertText": "evaluate(PointDataGridT& grid, DeformerT& deformer, const FilterT& filter, bool threaded)"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (using TreeT = PointDataGridT::TreeType ; using LeafT = TreeT::LeafNodeType ; using LeafManagerT = tree::LeafManager<TreeT> ; LeafManagerT)",
    "insertText": "leafManager(grid.tree())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (auto& leafs = mCache . leafs ; leafs .)",
    "insertText": "resize(leafManager.leafCount())"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (const auto& transform = grid .)",
    "insertText": "transform()"
  },
  {
    "label": "cachePositionsOp()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "cachePositionsOp(const LeafT& leaf, size_t idx)"
  },
  {
    "label": "pointCount()",
    "kind": "Method",
    "detail": "Function (const Index64 totalPointCount = leaf .)",
    "insertText": "pointCount()"
  },
  {
    "label": "newDeformer()",
    "kind": "Method",
    "detail": "Function (DeformerT)",
    "insertText": "newDeformer(deformer)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (auto handle = AttributeHandle<Vec3f)",
    "insertText": "create(leaf.constAttributeArray(\"P\"))"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (const bool useVector = filter .)",
    "insertText": "state() == index::ALL && (leaf.isDense() || (leaf.onPointCount() == leaf.pointCount()))"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (cache . vecData .)",
    "insertText": "resize(totalPointCount)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(auto iter = leaf.beginIndexOn(filter); iter; iter++)"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (newDeformer .)",
    "insertText": "apply(position, iter)"
  },
  {
    "label": "indexToWorld()",
    "kind": "Method",
    "detail": "Function (position = transform .)",
    "insertText": "indexToWorld(position)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(useVector)"
  },
  {
    "label": "Vec3T()",
    "kind": "Method",
    "detail": "Function (cache . vecData [* iter ] = static_cast<)",
    "insertText": "Vec3T(position)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} else { cache . mapData .)",
    "insertText": "insert({*iter, static_cast<Vec3T>(position)})"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(!cache.mapData.empty())"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (cache . totalSize = static_cast<)",
    "insertText": "Index(totalPointCount)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (} } ; leafManager .)",
    "insertText": "foreach(cachePositionsOp, threaded)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} template<T> template<LeafT> void CachedDeformer<T)",
    "insertText": "reset(const LeafT& , size_t idx)"
  },
  {
    "label": "IndexError()",
    "kind": "Method",
    "detail": "Function (throw)",
    "insertText": "IndexError(\"No leafs in cache, perhaps CachedDeformer has not been evaluated?\")"
  },
  {
    "label": "IndexError()",
    "kind": "Method",
    "detail": "Function (} else { throw)",
    "insertText": "IndexError(\"Leaf index is out-of-range of cache leafs.\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(*iter >= 0)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = mLeafMap ->)",
    "insertText": "find(*iter)"
  },
  {
    "label": "Vec3d()",
    "kind": "Method",
    "detail": "Function (position = static_cast<)",
    "insertText": "Vec3d(it->second)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "assert(mLeafVec)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(*iter < mLeafVec->size())"
  },
  {
    "label": "Vec3d()",
    "kind": "Method",
    "detail": "Function (position = static_cast<)",
    "insertText": "Vec3d((*mLeafVec)[*iter])"
  }
]