[
  {
    "label": "FContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContext"
  },
  {
    "label": "FFunctionEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFunctionEntry"
  },
  {
    "label": "FFunctionMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFunctionMap"
  },
  {
    "label": "FunctionPtrHash()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" GlobalData . h \" namespace AutoRTFM { class FContext ; uintptr_t)",
    "insertText": "FunctionPtrHash(void* functionPtr)"
  },
  {
    "label": "FFunctionEntry()",
    "kind": "Method",
    "detail": "Function (} struct FFunctionEntry {)",
    "insertText": "FFunctionEntry()"
  },
  {
    "label": "FFunctionEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFunctionEntry(void* OldFunction, void* NewFunction) : OldFunction(OldFunction), NewFunction(NewFunction)"
  },
  {
    "label": "FunctionMapAdd()",
    "kind": "Method",
    "detail": "Function (} void* OldFunction { nullptr } ; void* NewFunction { nullptr } ; } ; struct FFunctionMap { size_t KeyCount ; size_t Size ; size_t IndexMask ; FFunctionEntry Entries [ 1 ] ; } ; void)",
    "insertText": "FunctionMapAdd(void* OldFunction, void* NewFuncton)"
  },
  {
    "label": "FunctionMapReportError()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "FunctionMapReportError(void* OldFunction, const char* Where)"
  },
  {
    "label": "FunctionMapTryLookup()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "FunctionMapTryLookup(void* OldFunction)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FFunctionMap* Map = GlobalData -> FunctionMap ;)",
    "insertText": "if(!Map)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t Index = Hash& Map -> IndexMask ; FFunctionEntry* Entry = Map -> Entries + Index ;)",
    "insertText": "if(Entry->OldFunction == OldFunction)"
  }
]