[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SHeaderRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHeaderRow"
  },
  {
    "label": "SListPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SListPanel"
  },
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FScrollBarStyle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScrollBarStyle"
  },
  {
    "label": "dictates",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "dictates"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTableViewDimensions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTableViewDimensions"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FReGenerateResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReGenerateResults"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTableViewDimensions()",
    "kind": "Method",
    "detail": "Function (SLATE_API)",
    "insertText": "FTableViewDimensions(EOrientation InOrientation)"
  },
  {
    "label": "FTableViewDimensions()",
    "kind": "Method",
    "detail": "Function (SLATE_API)",
    "insertText": "FTableViewDimensions(EOrientation InOrientation, float X, float Y)"
  },
  {
    "label": "FTableViewDimensions()",
    "kind": "Method",
    "detail": "Function (SLATE_API)",
    "insertText": "FTableViewDimensions(EOrientation InOrientation, const UE::Slate::FDeprecateVector2DParameter& Size)"
  },
  {
    "label": "ConstructChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructChildren( const TAttribute<float>& InItemWidth, const TAttribute<float>& InItemHeight, const TAttribute<EListItemAlignment>& InItemAlignment, const TSharedPtr<SHeaderRow>& InHeaderRow, const TSharedPtr<SScrollBar>& InScrollBar, EOrientation InScrollOrientation, const FOnTableViewScrolled& InOnTableViewScrolled, const FScrollBarStyle* InScrollBarStyle = nullptr, const bool bInPreventThrottling = false )"
  },
  {
    "label": "SetItemHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemHeight(TAttribute<float> Height)"
  },
  {
    "label": "SetItemWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemWidth(TAttribute<float> Width)"
  },
  {
    "label": "ScrollBar_OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollBar_OnUserScrolled( float InScrollOffsetFraction )"
  },
  {
    "label": "RequestListRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestListRefresh()"
  },
  {
    "label": "ScrollToTop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollToTop()"
  },
  {
    "label": "ScrollToBottom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollToBottom()"
  },
  {
    "label": "SetScrollOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollOffset( const float InScrollOffset )"
  },
  {
    "label": "EndInertialScrolling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndInertialScrolling()"
  },
  {
    "label": "AddScrollOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddScrollOffset(const float InScrollOffsetDelta, bool RefreshList = false)"
  },
  {
    "label": "SetScrollbarVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollbarVisibility(const EVisibility InVisibility)"
  },
  {
    "label": "SetScrollbarPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollbarPadding(const FMargin& InScrollbarPadding)"
  },
  {
    "label": "SetFixedLineScrollOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFixedLineScrollOffset(TOptional<double> InFixedLineScrollOffset)"
  },
  {
    "label": "SetIsScrollAnimationEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsScrollAnimationEnabled(bool bInEnableScrollAnimation)"
  },
  {
    "label": "SetScrollingAnimationInterpolationSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollingAnimationInterpolationSpeed(float InScrollingAnimationInterpolationSpeed)"
  },
  {
    "label": "SetEnableTouchAnimatedScrolling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnableTouchAnimatedScrolling(bool bInEnableTouchAnimatedScrolling)"
  },
  {
    "label": "SetAllowOverscroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowOverscroll(EAllowOverscroll InAllowOverscroll)"
  },
  {
    "label": "SetIsRightClickScrollingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsRightClickScrollingEnabled(const bool bInEnableRightClickScrolling)"
  },
  {
    "label": "SetIsTouchScrollingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsTouchScrollingEnabled(const bool bInEnableTouchScrolling)"
  },
  {
    "label": "SetWheelScrollMultiplier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWheelScrollMultiplier(float NewWheelScrollMultiplier)"
  },
  {
    "label": "SetIsPointerScrollingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsPointerScrollingEnabled(bool bInIsPointerScrollingEnabled)"
  },
  {
    "label": "SetIsGamepadScrollingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsGamepadScrollingEnabled(bool bInIsGamepadScrollingEnabled)"
  },
  {
    "label": "SetBackgroundBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackgroundBrush(const TAttribute<const FSlateBrush*>& InBackgroundBrush)"
  },
  {
    "label": "STableViewBase()",
    "kind": "Method",
    "detail": "Function (SLATE_API)",
    "insertText": "STableViewBase( ETableViewMode::Type InTableViewMode )"
  },
  {
    "label": "ScrollBy()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ScrollBy( const FGeometry& MyGeometry, float ScrollByAmount, EAllowOverscroll InAllowOverscroll )"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ScrollTo( float InScrollOffset)"
  },
  {
    "label": "InsertWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertWidget( const TSharedRef<ITableRow> & WidgetToInset )"
  },
  {
    "label": "AppendWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendWidget( const TSharedRef<ITableRow>& WidgetToAppend )"
  },
  {
    "label": "ClearWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearWidgets()"
  },
  {
    "label": "InsertPinnedWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertPinnedWidget(const TSharedRef<SWidget>& WidgetToInset)"
  },
  {
    "label": "AppendPinnedWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendPinnedWidget(const TSharedRef<SWidget>& WidgetToAppend)"
  },
  {
    "label": "ClearPinnedWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPinnedWidgets()"
  },
  {
    "label": "OnRightMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRightMouseButtonUp(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "RequestLayoutRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestLayoutRefresh()"
  },
  {
    "label": "UpdateInertialScroll()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "UpdateInertialScroll(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "EnsureTickToRefresh()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "EnsureTickToRefresh(double InCurrentTime, float InDeltaTime)"
  }
]