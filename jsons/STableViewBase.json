[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SHeaderRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHeaderRow"
  },
  {
    "label": "SListPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SListPanel"
  },
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FScrollBarStyle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScrollBarStyle"
  },
  {
    "label": "FTableViewDimensions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTableViewDimensions"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FReGenerateResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReGenerateResults"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Geometry . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Framework / SlateDelegates . h \" # include \" Framework / Layout / IScrollableWidget . h \" # include \" Framework / Views / ITypedTableView . h \" # include \" Framework / Layout / InertialScrollManager . h \" # include \" Framework / Layout / Overscroll . h \" # include \" Styling / SlateTypes . h \" # include \" Widgets / SBoxPanel . h \" # include \" STableViewBase . generated . h \" class FPaintArgs ; class FSlateWindowElementList ; class ITableRow ; class SHeaderRow ; class SListPanel ; class SScrollBar ; enum class EConsumeMouseWheel : uint8 ; enum class ESlateVisibility : uint8 ; struct FScrollBarStyle ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (EvenlyDistributed)",
    "insertText": "UMETA(DisplayName = \"Evenly (Padding)\"), EvenlySize UMETA(DisplayName = \"Evenly (Size)\"), EvenlyWide UMETA(DisplayName = \"Evenly (Wide)\")"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (IntoView,TopOrLeft,CenterAligned,BottomOrRight } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnTableViewScrolled, double)"
  },
  {
    "label": "FTableViewDimensions()",
    "kind": "Method",
    "detail": "Function (struct FTableViewDimensions {)",
    "insertText": "FTableViewDimensions(EOrientation InOrientation)"
  },
  {
    "label": "FTableViewDimensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTableViewDimensions(EOrientation InOrientation, float X, float Y)"
  },
  {
    "label": "FTableViewDimensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTableViewDimensions(EOrientation InOrientation, const UE::Slate::FDeprecateVector2DParameter& Size)"
  },
  {
    "label": "ToVector2D()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "ToVector2D()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FTableViewDimensions)",
    "insertText": "operator(const FTableViewDimensions& Other)"
  },
  {
    "label": "ConstructChildren()",
    "kind": "Method",
    "detail": "Function (} EOrientation Orientation = Orient_Vertical ; float ScrollAxis = 0 . f ; float LineAxis = 0 . f ; } ; class STableViewBase : public SCompoundWidget,public IScrollableWidget { public : void)",
    "insertText": "ConstructChildren(const TAttribute<float>& InItemWidth, const TAttribute<float>& InItemHeight, const TAttribute<EListItemAlignment>& InItemAlignment, const TSharedPtr<SHeaderRow>& InHeaderRow, const TSharedPtr<SScrollBar>& InScrollBar, EOrientation InScrollOrientation, const FOnTableViewScrolled& InOnTableViewScrolled, const FScrollBarStyle* InScrollBarStyle = nullptr, const bool bInPreventThrottling = false)"
  },
  {
    "label": "SetItemHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemHeight(TAttribute<float> Height)"
  },
  {
    "label": "SetItemWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemWidth(TAttribute<float> Width)"
  },
  {
    "label": "ScrollBar_OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollBar_OnUserScrolled(float InScrollOffsetFraction)"
  },
  {
    "label": "GetNumGeneratedChildren()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumGeneratedChildren()"
  },
  {
    "label": "GetGeneratedChildAt()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetGeneratedChildAt(int32 Index)"
  },
  {
    "label": "GetHeaderRow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SHeaderRow>)",
    "insertText": "GetHeaderRow()"
  },
  {
    "label": "IsRightClickScrolling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRightClickScrolling()"
  },
  {
    "label": "IsUserScrolling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUserScrolling()"
  },
  {
    "label": "RequestListRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestListRefresh()"
  },
  {
    "label": "RebuildList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildList()"
  },
  {
    "label": "IsPendingRefresh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPendingRefresh()"
  },
  {
    "label": "ScrollToTop()",
    "kind": "Method",
    "detail": "Function (const ETableViewMode::Type TableViewMode ; void)",
    "insertText": "ScrollToTop()"
  },
  {
    "label": "ScrollToBottom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollToBottom()"
  },
  {
    "label": "IsScrolling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScrolling()"
  },
  {
    "label": "GetScrollOffset()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetScrollOffset()"
  },
  {
    "label": "SetScrollOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollOffset(const float InScrollOffset)"
  },
  {
    "label": "EndInertialScrolling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndInertialScrolling()"
  },
  {
    "label": "AddScrollOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddScrollOffset(const float InScrollOffsetDelta, bool RefreshList = false)"
  },
  {
    "label": "GetScrollbarVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetScrollbarVisibility()"
  },
  {
    "label": "SetScrollbarVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollbarVisibility(const EVisibility InVisibility)"
  },
  {
    "label": "SetScrollbarPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollbarPadding(const FMargin& InScrollbarPadding)"
  },
  {
    "label": "IsScrollbarNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScrollbarNeeded()"
  },
  {
    "label": "SetFixedLineScrollOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFixedLineScrollOffset(TOptional<double> InFixedLineScrollOffset)"
  },
  {
    "label": "SetIsScrollAnimationEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsScrollAnimationEnabled(bool bInEnableScrollAnimation)"
  },
  {
    "label": "SetScrollingAnimationInterpolationSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollingAnimationInterpolationSpeed(float InScrollingAnimationInterpolationSpeed)"
  },
  {
    "label": "SetEnableTouchAnimatedScrolling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnableTouchAnimatedScrolling(bool bInEnableTouchAnimatedScrolling)"
  },
  {
    "label": "SetAllowOverscroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowOverscroll(EAllowOverscroll InAllowOverscroll)"
  },
  {
    "label": "SetIsRightClickScrollingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsRightClickScrollingEnabled(const bool bInEnableRightClickScrolling)"
  },
  {
    "label": "SetIsTouchScrollingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsTouchScrollingEnabled(const bool bInEnableTouchScrolling)"
  },
  {
    "label": "SetWheelScrollMultiplier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWheelScrollMultiplier(float NewWheelScrollMultiplier)"
  },
  {
    "label": "SetIsPointerScrollingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsPointerScrollingEnabled(bool bInIsPointerScrollingEnabled)"
  },
  {
    "label": "SetIsGamepadScrollingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsGamepadScrollingEnabled(bool bInIsGamepadScrollingEnabled)"
  },
  {
    "label": "SetBackgroundBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackgroundBrush(const TAttribute<const FSlateBrush*>& InBackgroundBrush)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseCaptureLost(const FCaptureLostEvent& CaptureLostEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPreviewMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPreviewMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeVolatility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeVolatility()"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchStarted(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchMoved()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchMoved(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchEnded(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "GetScrollDistance()",
    "kind": "Method",
    "detail": "Function (public : FVector2D)",
    "insertText": "GetScrollDistance()"
  },
  {
    "label": "GetScrollDistanceRemaining()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetScrollDistanceRemaining()"
  },
  {
    "label": "GetScrollWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class SWidget>)",
    "insertText": "GetScrollWidget()"
  },
  {
    "label": "STableViewBase()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "STableViewBase(ETableViewMode::Type InTableViewMode)"
  },
  {
    "label": "STableViewBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "STableViewBase()"
  },
  {
    "label": "GetTargetScrollOffset()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetTargetScrollOffset()"
  },
  {
    "label": "ScrollBy()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ScrollBy(const FGeometry& MyGeometry, float ScrollByAmount, EAllowOverscroll InAllowOverscroll)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ScrollTo(float InScrollOffset)"
  },
  {
    "label": "InsertWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertWidget(const TSharedRef<ITableRow> & WidgetToInset)"
  },
  {
    "label": "AppendWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendWidget(const TSharedRef<ITableRow>& WidgetToAppend)"
  },
  {
    "label": "GetConstructedTableItems()",
    "kind": "Method",
    "detail": "Function (const FChildren*)",
    "insertText": "GetConstructedTableItems()"
  },
  {
    "label": "ClearWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearWidgets()"
  },
  {
    "label": "InsertPinnedWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertPinnedWidget(const TSharedRef<SWidget>& WidgetToInset)"
  },
  {
    "label": "AppendPinnedWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendPinnedWidget(const TSharedRef<SWidget>& WidgetToAppend)"
  },
  {
    "label": "ClearPinnedWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPinnedWidgets()"
  },
  {
    "label": "GetItemWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetItemWidth()"
  },
  {
    "label": "GetItemHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetItemHeight()"
  },
  {
    "label": "GetItemSize()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetItemSize()"
  },
  {
    "label": "GetNumLiveWidgets()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNumLiveWidgets()"
  },
  {
    "label": "GetNumItemsPerLine()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumItemsPerLine()"
  },
  {
    "label": "GetFirstLineScrollOffset()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFirstLineScrollOffset()"
  },
  {
    "label": "OnRightMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRightMouseButtonDown(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnRightMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRightMouseButtonUp(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetScrollRateInItems()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetScrollRateInItems()"
  },
  {
    "label": "UpdateSelectionSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSelectionSet()"
  },
  {
    "label": "RequestLayoutRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestLayoutRefresh()"
  },
  {
    "label": "FReGenerateResults()",
    "kind": "Method",
    "detail": "Function (struct FReGenerateResults {)",
    "insertText": "FReGenerateResults(double InNewScrollOffset, double InLengthGenerated, double InItemsOnScreen, bool AtEndOfList) : NewScrollOffset(InNewScrollOffset) , LengthOfGeneratedItems(InLengthGenerated) , ExactNumLinesOnScreen(InItemsOnScreen) , bGeneratedPastLastItem(AtEndOfList)"
  },
  {
    "label": "ReGenerateItems()",
    "kind": "Method",
    "detail": "Function (} double NewScrollOffset = 0 . ; double LengthOfGeneratedItems = 0 . ; double ExactNumLinesOnScreen = 0 . ; bool bGeneratedPastLastItem = false ; } ; FReGenerateResults)",
    "insertText": "ReGenerateItems(const FGeometry& MyGeometry)"
  },
  {
    "label": "GetNumItemsBeingObserved()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumItemsBeingObserved()"
  },
  {
    "label": "GetNumPinnedItems()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPinnedItems()"
  },
  {
    "label": "ScrollIntoView()",
    "kind": "Method",
    "detail": "Function (enum class EScrollIntoViewResult { Success,Deferred,Failure } ; EScrollIntoViewResult)",
    "insertText": "ScrollIntoView(const FGeometry& ListViewGeometry)"
  },
  {
    "label": "NotifyItemScrolledIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyItemScrolledIntoView()"
  },
  {
    "label": "NotifyFinishedScrolling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyFinishedScrolling()"
  },
  {
    "label": "NavigateToWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NavigateToWidget(const uint32 UserIndex, const TSharedPtr<SWidget>& NavigationDestination, ENavigationSource NavigationSource = ENavigationSource::FocusedWidget)"
  },
  {
    "label": "FindChildUnderPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindChildUnderPosition(FArrangedChildren& ArrangedChildren, const FVector2D& ArrangedSpacePosition)"
  },
  {
    "label": "OnClippingChanged()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SListPanel> ItemsPanel ; TSharedPtr<SListPanel> PinnedItemsPanel ; TSharedPtr<SScrollBar> ScrollBar ; FMargin ScrollBarSlotPadding ; FOnTableViewScrolled OnTableViewScrolled ; TOptional<double> FixedLineScrollOffset ; bool bEnableAnimatedScrolling = false ; float ScrollingAnimationInterpolationSpeed = 1 2 . f ; bool bEnableTouchAnimatedScrolling = false ; bool bEnableRightClickScrolling = true ; bool bEnableTouchScrolling = true ; double CurrentScrollOffset = 0 . ; double DesiredScrollOffset = 0 . ; bool bStartedTouchInteraction ; float AmountScrolledWhileRightMouseDown ; FVector2f PressedScreenSpacePosition ; float TickScrollDelta ; FReGenerateResults LastGenerateResults ; bool bWasAtEndOfList ; FGeometry PanelGeometryLastTick ; FOnContextMenuOpening OnContextMenuOpening ; FSimpleDelegate OnItemsRebuilt ; TAttribute<ESelectionMode::Type> SelectionMode ; TSharedPtr<SHeaderRow> HeaderRow ; FInertialScrollManager InertialScrollManager ; FVector2f SoftwareCursorPosition ; bool bShowSoftwareCursor ; float WheelScrollMultiplier ; bool bIsPointerScrollingEnabled = true ; bool bIsGamepadScrollingEnabled = true ; EOrientation Orientation = Orient_Vertical ; void)",
    "insertText": "OnClippingChanged()"
  },
  {
    "label": "CanUseInertialScroll()",
    "kind": "Method",
    "detail": "Function (FInvalidatableBrushAttribute BackgroundBrush ; protected : bool)",
    "insertText": "CanUseInertialScroll(float ScrollAmount)"
  },
  {
    "label": "UpdateInertialScroll()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "UpdateInertialScroll(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "EnsureTickToRefresh()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "EnsureTickToRefresh(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "GetEmptyBitArray()",
    "kind": "Method",
    "detail": "Function (bool bIsScrollingActiveTimerRegistered ; protected : FOverscroll Overscroll ; EAllowOverscroll AllowOverscroll ; EConsumeMouseWheel ConsumeMouseWheel ; private : bool bItemsNeedRefresh = false ; union { SHorizontalBox::FSlot* VerticalScrollBarSlot ; SVerticalBox::FSlot* HorizontalScrollBarSlot ; } ; } ; namespace TableViewHelpers { const TBitArray<>&)",
    "insertText": "GetEmptyBitArray()"
  }
]