[
  {
    "label": "SolveCubic()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Curves / RichCurve . h \" namespace UE { namespace Curves { int32)",
    "insertText": "SolveCubic(double Coeff[4], double Solution[3])"
  },
  {
    "label": "BezierInterp()",
    "kind": "Method",
    "detail": "Function (template<CurveValueType> CurveValueType)",
    "insertText": "BezierInterp(CurveValueType P0, CurveValueType P1, CurveValueType P2, CurveValueType P3, float Alpha)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (const CurveValueType P01 =)",
    "insertText": "Lerp(P0, P1, Alpha)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (const CurveValueType P12 =)",
    "insertText": "Lerp(P1, P2, Alpha)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (const CurveValueType P23 =)",
    "insertText": "Lerp(P2, P3, Alpha)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (const CurveValueType P012 =)",
    "insertText": "Lerp(P01, P12, Alpha)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (const CurveValueType P123 =)",
    "insertText": "Lerp(P12, P23, Alpha)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (const CurveValueType P0123 =)",
    "insertText": "Lerp(P012, P123, Alpha)"
  },
  {
    "label": "WeightedEvalForTwoKeys()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "WeightedEvalForTwoKeys(float Key1Value, float Key1Time, float Key1LeaveTangent, float Key1LeaveTangentWeight, ERichCurveTangentWeightMode Key1TangentWeightMode, float Key2Value, float Key2Time, float Key2ArriveTangent, float Key2ArriveTangentWeight, ERichCurveTangentWeightMode Key2TangentWeightMode, float InTime)"
  },
  {
    "label": "IsItNotWeighted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsItNotWeighted(const FRichCurveKey& Key1, const FRichCurveKey& Key2)"
  },
  {
    "label": "IsWeighted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWeighted(const FRichCurveKey& Key1, const FRichCurveKey& Key2)"
  },
  {
    "label": "EvalForTwoKeys()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EvalForTwoKeys(const FRichCurveKey& Key1, const FRichCurveKey& Key2, const float InTime)"
  }
]