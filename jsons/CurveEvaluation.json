[
  {
    "label": "SolveCubic()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SolveCubic(double Coeff[4], double Solution[3])"
  },
  {
    "label": "BezierToPower()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BezierToPower(double A1, double B1, double C1, double D1, double* A2, double* B2, double* C2, double* D2)"
  },
  {
    "label": "WeightedEvalForTwoKeys()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "WeightedEvalForTwoKeys(float Key1Value, float Key1Time, float Key1LeaveTangent, float Key1LeaveTangentWeight, ERichCurveTangentWeightMode Key1TangentWeightMode, float Key2Value, float Key2Time, float Key2ArriveTangent, float Key2ArriveTangentWeight,  ERichCurveTangentWeightMode Key2TangentWeightMode, float InTime)"
  },
  {
    "label": "IsItNotWeighted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsItNotWeighted(const FRichCurveKey& Key1, const FRichCurveKey& Key2)"
  },
  {
    "label": "IsWeighted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWeighted(const FRichCurveKey& Key1, const FRichCurveKey& Key2)"
  },
  {
    "label": "EvalForTwoKeys()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EvalForTwoKeys(const FRichCurveKey& Key1, const FRichCurveKey& Key2, const float InTime)"
  }
]