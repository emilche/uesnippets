[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdMode"
  },
  {
    "label": "FEditorModeTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeTools"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportClient"
  },
  {
    "label": "ILevelEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILevelEditor"
  },
  {
    "label": "IToolsContextQueriesAPI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolsContextQueriesAPI"
  },
  {
    "label": "IToolsContextRenderAPI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolsContextRenderAPI"
  },
  {
    "label": "IToolsContextTransactionsAPI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolsContextTransactionsAPI"
  },
  {
    "label": "UEdModeInteractiveToolsContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdModeInteractiveToolsContext"
  },
  {
    "label": "UGizmoViewContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoViewContext"
  },
  {
    "label": "UInputRouter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputRouter"
  },
  {
    "label": "UInteractiveToolBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInteractiveToolBuilder"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "USelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USelection"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "FToolBuilderState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolBuilderState"
  },
  {
    "label": "EDITORINTERACTIVETOOLSFRAMEWORK_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EDITORINTERACTIVETOOLSFRAMEWORK_API"
  },
  {
    "label": "UModeManagerInteractiveToolsContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModeManagerInteractiveToolsContext"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" Engine / EngineBaseTypes . h \" # include \" Engine / World . h \" # include \" HAL / Platform . h \" # include \" InputCoreTypes . h \" # include \" InputState . h \" # include \" InteractiveTool . h \" # include \" InteractiveToolManager . h \" # include \" InteractiveToolsContext . h \" # include \" Math / Ray . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / UObjectGlobals . h \" # include \" EdModeInteractiveToolsContext . generated . h \" class FCanvas ; class FEdMode ; class FEditorModeTools ; class FEditorViewportClient ; class FPrimitiveDrawInterface ; class FSceneView ; class FViewport ; class FViewportClient ; class ILevelEditor ; class IToolsContextQueriesAPI ; class IToolsContextRenderAPI ; class IToolsContextTransactionsAPI ; class UEdModeInteractiveToolsContext ; class UGizmoViewContext ; class UInputRouter ; class UInteractiveToolBuilder ; class UMaterialInterface ; class UObject ; class USelection ; class UTypedElementSelectionSet ; struct FToolBuilderState ;)",
    "insertText": "UCLASS(Transient)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UEditorInteractiveToolsContext()"
  },
  {
    "label": "InitializeContextWithEditorModeManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeContextWithEditorModeManager(FEditorModeTools* InEditorModeManager, UInputRouter* UseInputRouter = nullptr)"
  },
  {
    "label": "ShutdownContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownContext()"
  },
  {
    "label": "TerminateActiveToolsOnPIEStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TerminateActiveToolsOnPIEStart()"
  },
  {
    "label": "TerminateActiveToolsOnSaveWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TerminateActiveToolsOnSaveWorld()"
  },
  {
    "label": "TerminateActiveToolsOnWorldTearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TerminateActiveToolsOnWorldTearDown()"
  },
  {
    "label": "TerminateActiveToolsOnLevelChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TerminateActiveToolsOnLevelChange()"
  },
  {
    "label": "GetParentEditorModeManager()",
    "kind": "Method",
    "detail": "Function (FEditorModeTools*)",
    "insertText": "GetParentEditorModeManager()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FEditorViewportClient* ViewportClient, float DeltaTime)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD(FViewportClient* ViewportClient,FViewport* Viewport,const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnRender, IToolsContextRenderAPI* RenderAPI)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FOnRender OnRender ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnDrawHUD, FCanvas* Canvas, IToolsContextRenderAPI* RenderAPI)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnDrawHUD OnDrawHUD ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnTick, float DeltaTime)"
  },
  {
    "label": "ProcessEditDelete()",
    "kind": "Method",
    "detail": "Function (FOnTick OnTick ; bool)",
    "insertText": "ProcessEditDelete()"
  },
  {
    "label": "CanStartTool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStartTool(const FString ToolTypeIdentifier)"
  },
  {
    "label": "HasActiveTool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveTool()"
  },
  {
    "label": "GetActiveToolName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetActiveToolName()"
  },
  {
    "label": "ActiveToolHasAccept()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ActiveToolHasAccept()"
  },
  {
    "label": "CanAcceptActiveTool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAcceptActiveTool()"
  },
  {
    "label": "CanCancelActiveTool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCancelActiveTool()"
  },
  {
    "label": "CanCompleteActiveTool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCompleteActiveTool()"
  },
  {
    "label": "StartTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTool(const FString ToolTypeIdentifier)"
  },
  {
    "label": "EndTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTool(EToolShutdownType ShutdownType)"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Activate()"
  },
  {
    "label": "Deactivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deactivate()"
  },
  {
    "label": "GetLastWorldRay()",
    "kind": "Method",
    "detail": "Function (FRay)",
    "insertText": "GetLastWorldRay()"
  },
  {
    "label": "SetEnableRenderingDuringHitProxyPass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEnableRenderingDuringHitProxyPass(bool bEnabled)"
  },
  {
    "label": "GetEnableRenderingDuringHitProxyPass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnableRenderingDuringHitProxyPass()"
  },
  {
    "label": "GetForceCombinedGizmoModeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetForceCombinedGizmoModeEnabled()"
  },
  {
    "label": "GetAbsoluteWorldSnappingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAbsoluteWorldSnappingEnabled()"
  },
  {
    "label": "GetDeactivateToolsOnPIEStart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDeactivateToolsOnPIEStart()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "DeactivateActiveTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateActiveTool(EToolSide WhichSide, EToolShutdownType ShutdownType)"
  },
  {
    "label": "DeactivateAllActiveTools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateAllActiveTools(EToolShutdownType ShutdownType)"
  },
  {
    "label": "GetRayFromMousePos()",
    "kind": "Method",
    "detail": "Function (protected : IToolsContextQueriesAPI* QueriesAPI ; IToolsContextTransactionsAPI* TransactionAPI ; TMap<FViewportClient*,int32> InvalidationMap ; int32 InvalidationTimestamp = 0 ; UGizmoViewContext* GizmoViewContext = nullptr ; FRay)",
    "insertText": "GetRayFromMousePos(FEditorViewportClient* ViewportClient, FViewport* Viewport, int MouseX, int MouseY)"
  },
  {
    "label": "SetEditorStateForTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditorStateForTool()"
  },
  {
    "label": "RestoreEditorState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreEditorState()"
  },
  {
    "label": "OnToolEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToolEnded(UInteractiveToolManager* InToolManager, UInteractiveTool* InEndedTool)"
  },
  {
    "label": "OnToolPostBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToolPostBuild(UInteractiveToolManager* InToolManager, EToolSide InSide, UInteractiveTool* InBuiltTool, UInteractiveToolBuilder* InToolBuilder, const FToolBuilderState& ToolState)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: virtual void Tick(FEditorViewportClient* ViewportClient, float DeltaTime)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "InputKey(FEditorViewportClient* ViewportClient, FViewport* Viewport, FKey Key, EInputEvent Event)"
  },
  {
    "label": "UpdateStateWithoutRoutingInputKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStateWithoutRoutingInputKey(FEditorViewportClient* ViewportClient, FViewport* Viewport, FKey Key, EInputEvent Event)"
  },
  {
    "label": "MouseEnter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseEnter(FEditorViewportClient* ViewportClient, FViewport* Viewport, int32 x, int32 y)"
  },
  {
    "label": "MouseLeave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseLeave(FEditorViewportClient* ViewportClient, FViewport* Viewport)"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseMove(FEditorViewportClient* ViewportClient, FViewport* Viewport, int32 x, int32 y)"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "CapturedMouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CapturedMouseMove(FEditorViewportClient* InViewportClient, FViewport* InViewport, int32 InMouseX, int32 InMouseY)"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCursor(EMouseCursor::Type& OutCursor)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(IToolsContextQueriesAPI* QueriesAPIIn, IToolsContextTransactionsAPI* TransactionsAPIIn)"
  },
  {
    "label": "CreateNewChildEdModeToolsContext()",
    "kind": "Method",
    "detail": "Function (public : UEdModeInteractiveToolsContext*)",
    "insertText": "CreateNewChildEdModeToolsContext()"
  },
  {
    "label": "OnChildEdModeActivated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnChildEdModeActivated(UEdModeInteractiveToolsContext* ChildToolsContext)"
  },
  {
    "label": "OnChildEdModeDeactivated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnChildEdModeDeactivated(UEdModeInteractiveToolsContext* ChildToolsContext)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class UModeManagerInteractiveToolsContext ;)",
    "insertText": "GENERATED_BODY() public: void InitializeContextFromModeManagerContext(UModeManagerInteractiveToolsContext* ModeManagerToolsContext)"
  }
]