[
  {
    "label": "FFileManagerGeneric",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileManagerGeneric"
  },
  {
    "label": "FArchiveFileReaderGeneric",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveFileReaderGeneric"
  },
  {
    "label": "FArchiveFileReaderGenericTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveFileReaderGenericTest"
  },
  {
    "label": "FArchiveFileWriterGeneric",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveFileWriterGeneric"
  },
  {
    "label": "GetLowLevel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" GenericPlatform / GenericPlatformFile . h \" # include \" HAL / FileManager . h \" # include \" HAL / PlatformFileManager . h \" # include \" Misc / DateTime . h \" # include \" Serialization / Archive . h \" # include \" Templates / UniquePtr . h \" # ifndef PLATFORM_FILE_READER_BUFFER_SIZE # define PLATFORM_FILE_READER_BUFFER_SIZE 1 0 2 4 # endif # ifndef PLATFORM_FILE_WRITER_BUFFER_SIZE # define PLATFORM_FILE_WRITER_BUFFER_SIZE 4 0 9 6 # endif # ifndef PLATFORM_DEBUG_FILE_WRITER_BUFFER_SIZE # define PLATFORM_DEBUG_FILE_WRITER_BUFFER_SIZE 4 0 9 6 # endif class FFileManagerGeneric : public IFileManager { IPlatformFile&)",
    "insertText": "GetLowLevel()"
  },
  {
    "label": "FFileManagerGeneric()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FFileManagerGeneric()"
  },
  {
    "label": "ProcessCommandLineOptions()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "ProcessCommandLineOptions()"
  },
  {
    "label": "SetSandboxEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSandboxEnabled(bool bInEnabled)"
  },
  {
    "label": "GetLowLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLowLevel().SetSandboxEnabled(bInEnabled)"
  },
  {
    "label": "IsSandboxEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSandboxEnabled()"
  },
  {
    "label": "CreateFileReader()",
    "kind": "Method",
    "detail": "Function (} FArchive*)",
    "insertText": "CreateFileReader(const TCHAR* Filename, uint32 ReadFlags=0)"
  },
  {
    "label": "CreateFileWriter()",
    "kind": "Method",
    "detail": "Function (} FArchive*)",
    "insertText": "CreateFileWriter(const TCHAR* Filename, uint32 WriteFlags=0)"
  },
  {
    "label": "CreateDebugFileWriter()",
    "kind": "Method",
    "detail": "Function (} # if ALLOW_DEBUG_FILES FArchive*)",
    "insertText": "CreateDebugFileWriter(const TCHAR* Filename, uint32 WriteFlags=0)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "Delete(const TCHAR* Filename, bool RequireExists=0, bool EvenReadOnly=0, bool Quiet=0)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly(const TCHAR* Filename)"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Move(const TCHAR* Dest, const TCHAR* Src, bool Replace=1, bool EvenIfReadOnly=0, bool Attributes=0, bool bDoNotRetryOrError=0)"
  },
  {
    "label": "FileExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileExists(const TCHAR* Filename)"
  },
  {
    "label": "DirectoryExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DirectoryExists(const TCHAR* InDirectory)"
  },
  {
    "label": "FindFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFiles(TArray<FString>& Result, const TCHAR* Filename, bool Files, bool Directories)"
  },
  {
    "label": "FindFilesRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFilesRecursive(TArray<FString>& FileNames, const TCHAR* StartDirectory, const TCHAR* Filename, bool Files, bool Directories, bool bClearFileNames=true)"
  },
  {
    "label": "GetFileAgeSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetFileAgeSeconds(const TCHAR* Filename)"
  },
  {
    "label": "GetTimeStamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "GetAccessTimeStamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetAccessTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "GetTimeStampPair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTimeStampPair(const TCHAR* PathA, const TCHAR* PathB, FDateTime& OutTimeStampA, FDateTime& OutTimeStampB)"
  },
  {
    "label": "SetTimeStamp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetTimeStamp(const TCHAR* Filename, FDateTime Timestamp)"
  },
  {
    "label": "GetFilenameOnDisk()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFilenameOnDisk(const TCHAR* Filename)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Copy(const TCHAR* Dest, const TCHAR* Src, bool Replace = 1, bool EvenIfReadOnly = 0, bool Attributes = 0, FCopyProgress* Progress = nullptr, EFileRead ReadFlags = FILEREAD_None, EFileWrite WriteFlags = FILEWRITE_None)"
  },
  {
    "label": "MakeDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MakeDirectory(const TCHAR* Path, bool Tree=0)"
  },
  {
    "label": "DeleteDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDirectory(const TCHAR* Path, bool RequireExists=0, bool Tree=0)"
  },
  {
    "label": "GetStatData()",
    "kind": "Method",
    "detail": "Function (FFileStatData)",
    "insertText": "GetStatData(const TCHAR* FilenameOrDirectory)"
  },
  {
    "label": "FindFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFiles(TArray<FString>& FoundFiles, const TCHAR* Directory, const TCHAR* FileExtension = nullptr)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectory(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectory(const TCHAR* Directory, IPlatformFile::FDirectoryVisitorFunc Visitor)"
  },
  {
    "label": "IterateDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryVisitorFunc Visitor)"
  },
  {
    "label": "IterateDirectoryStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStat(const TCHAR* Directory, IPlatformFile::FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStat(const TCHAR* Directory, IPlatformFile::FDirectoryStatVisitorFunc Visitor)"
  },
  {
    "label": "IterateDirectoryStatRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStatRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStatRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStatRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryStatVisitorFunc Visitor)"
  },
  {
    "label": "DefaultConvertToRelativePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DefaultConvertToRelativePath(const TCHAR* Filename)"
  },
  {
    "label": "ConvertToRelativePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToRelativePath(const TCHAR* Filename)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForRead()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForRead(const TCHAR* Filename)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForWrite()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForWrite(const TCHAR* Filename)"
  },
  {
    "label": "FileSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "FileSize(const TCHAR* Filename)"
  },
  {
    "label": "SendMessageToServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendMessageToServer(const TCHAR* Message, IPlatformFile::IFileServerMessageHandler* Handler)"
  },
  {
    "label": "CreateFileReaderInternal()",
    "kind": "Method",
    "detail": "Function (} private : FArchive*)",
    "insertText": "CreateFileReaderInternal(const TCHAR* Filename, uint32 ReadFlags, uint32 BufferSize)"
  },
  {
    "label": "CreateFileWriterInternal()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "CreateFileWriterInternal(const TCHAR* Filename, uint32 WriteFlags, uint32 BufferSize)"
  },
  {
    "label": "CopyWithProgress()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CopyWithProgress(const TCHAR* InDestFile, const TCHAR* InSrcFile, bool ReplaceExisting, bool EvenIfReadOnly, bool Attributes, FCopyProgress* Progress, EFileRead ReadFlags, EFileWrite WriteFlags)"
  },
  {
    "label": "FindFilesRecursiveInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFilesRecursiveInternal(TArray<FString>& FileNames, const TCHAR* StartDirectory, const TCHAR* Filename, bool Files, bool Directories)"
  },
  {
    "label": "FArchiveFileReaderGeneric()",
    "kind": "Method",
    "detail": "Function (} ; class FArchiveFileReaderGeneric : public FArchive { public :)",
    "insertText": "FArchiveFileReaderGeneric(IFileHandle* InHandle, const TCHAR* InFilename, int64 InSize, uint32 InBufferSize = PLATFORM_FILE_READER_BUFFER_SIZE, uint32 InFlags = FILEREAD_None)"
  },
  {
    "label": "FArchiveFileReaderGeneric()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FArchiveFileReaderGeneric()"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seek(int64 InPos)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Tell()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(void* V, int64 Length)"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "Precache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Precache(int64 PrecacheOffset, int64 PrecacheSize)"
  },
  {
    "label": "InternalPrecache()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "InternalPrecache(int64 PrecacheOffset, int64 PrecacheSize)"
  },
  {
    "label": "SeekLowLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SeekLowLevel(int64 InPos)"
  },
  {
    "label": "CloseLowLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseLowLevel()"
  },
  {
    "label": "ReadLowLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadLowLevel(uint8* Dest, int64 CountToRead, int64& OutBytesRead)"
  },
  {
    "label": "IsSilent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSilent()"
  },
  {
    "label": "FArchiveFileWriterGeneric()",
    "kind": "Method",
    "detail": "Function (} FString Filename ; int64 Size ; int64 Pos ; int64 BufferBase ; TUniquePtr<IFileHandle> Handle ; TArray64<uint8> BufferArray ; int64 BufferSize ; uint32 Flags ; bool bFirstReadAfterSeek ; enum { bPrecacheAsSoonAsPossible = 0 } ; class FArchiveFileReaderGenericTest ; } ; class FArchiveFileWriterGeneric : public FArchive { public :)",
    "insertText": "FArchiveFileWriterGeneric(IFileHandle* InHandle, const TCHAR* InFilename, int64 InPos, uint32 InBufferSize = PLATFORM_FILE_WRITER_BUFFER_SIZE, uint32 InFlags = FILEWRITE_None)"
  },
  {
    "label": "FArchiveFileWriterGeneric()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FArchiveFileWriterGeneric()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Close()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "WriteLowLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteLowLevel(const uint8* Src, int64 CountToWrite)"
  },
  {
    "label": "LogWriteError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogWriteError(const TCHAR* Message)"
  }
]