[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "ICollectionsSchema()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcCollections_ICollections_h # define Alembic_AbcCollections_ICollections_h # include<Alembic / Abc / All . h> # include<Alembic / Util / Export . h> # include<Alembic / AbcCollection / SchemaInfoDeclarations . h> namespace Alembic { namespace AbcCollection { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT ICollectionsSchema : public Abc::ISchema<CollectionsSchemaInfo> { public : typedef ICollectionsSchema this_type ;)",
    "insertText": "ICollectionsSchema()"
  },
  {
    "label": "ICollectionsSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ICollectionsSchema(const ICompoundProperty &iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument()) : Abc::ISchema<CollectionsSchemaInfo>( iParent, iName, iArg0, iArg1)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(iArg0, iArg1)"
  },
  {
    "label": "ICollectionsSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ICollectionsSchema(const ICompoundProperty &iProp, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument() ) : Abc::ISchema<CollectionsSchemaInfo>( iProp, iArg0, iArg1)"
  },
  {
    "label": "getNumCollections()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getNumCollections()"
  },
  {
    "label": "getCollection()",
    "kind": "Method",
    "detail": "Function (} Abc::IStringArrayProperty)",
    "insertText": "getCollection(size_t i)"
  },
  {
    "label": "getCollection()",
    "kind": "Method",
    "detail": "Function (Abc::IStringArrayProperty)",
    "insertText": "getCollection(const std::string & iName)"
  },
  {
    "label": "getCollectionName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "getCollectionName(size_t i)"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "valid()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "init(const Abc::Argument &iArg0, const Abc::Argument &iArg1)"
  }
]