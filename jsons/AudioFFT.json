[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindow"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "GenerateHammingWindow()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / CoreMiscDefines . h \" # include \" DSP / BufferVectorOperations . h \" # include \" DSP / Dsp . h \" # include \" DSP / FFTAlgorithm . h \" namespace Audio { enum class ESpectrumType : uint8 { MagnitudeSpectrum,PowerSpectrum } ; enum class EWindowType : uint8 { None,Hamming,Hann,Blackman } ; void)",
    "insertText": "GenerateHammingWindow(float* WindowBuffer, int32 NumFrames, int32 NumChannels, bool bIsPeriodic)"
  },
  {
    "label": "GenerateHannWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateHannWindow(float* WindowBuffer, int32 NumFrames, int32 NumChannels, bool bIsPeriodic)"
  },
  {
    "label": "GenerateBlackmanWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateBlackmanWindow(float* WindowBuffer, int32 NumFrames, int32 NumChannels, bool bIsPeriodic)"
  },
  {
    "label": "GetCOLAHopSizeForWindow()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCOLAHopSizeForWindow(EWindowType InType, uint32 WindowLength)"
  },
  {
    "label": "FWindow()",
    "kind": "Method",
    "detail": "Function (class FWindow { public :)",
    "insertText": "FWindow()"
  },
  {
    "label": "FWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWindow(EWindowType InType, int32 InNumFrames, int32 InNumChannels, bool bIsPeriodic)"
  },
  {
    "label": "ApplyToBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyToBuffer(float* InBuffer)"
  },
  {
    "label": "GetWindowType()",
    "kind": "Method",
    "detail": "Function (EWindowType)",
    "insertText": "GetWindowType()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (private : EWindowType WindowType ; FAlignedFloatBuffer WindowBuffer ; int32 NumSamples ; void)",
    "insertText": "Generate(int32 NumFrames, int32 NumChannels, bool bIsPeriodic)"
  },
  {
    "label": "InitZeroed()",
    "kind": "Method",
    "detail": "Function (FAlignedFloatBuffer Real ; FAlignedFloatBuffer Imag ; void)",
    "insertText": "InitZeroed(int32 Num)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Real .)",
    "insertText": "Reset()"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (Real .)",
    "insertText": "AddZeroed(Num)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyFrom(const float* InReal, const float* InImag, int32 Num)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Real.GetData(), InReal, Num * sizeof(float))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Imag.GetData(), InImag, Num * sizeof(float))"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyFrom(const FrequencyBuffer& Other)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Real.GetData(), Other.Real.GetData(), Other.Real.Num() * sizeof(float))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Imag.GetData(), Other.Imag.GetData(), Other.Imag.Num() * sizeof(float))"
  },
  {
    "label": "CeilLog2()",
    "kind": "Method",
    "detail": "Function (} } ; int32)",
    "insertText": "CeilLog2(int32 InNum)"
  },
  {
    "label": "GetPowerSpectrumScaling()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPowerSpectrumScaling(int32 FFTSize, EFFTScaling InCurrentScaling, EFFTScaling InTargetScaling)"
  },
  {
    "label": "ScalePowerSpectrumInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScalePowerSpectrumInPlace(int32 FFTSize, EFFTScaling InCurrentScaling, EFFTScaling InTargetScaling, TArrayView<float> InPowerSpectrum)"
  }
]