[
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FConsoleSlateDebuggerInvalidate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConsoleSlateDebuggerInvalidate"
  },
  {
    "label": "FInvalidationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInvalidationInfo"
  },
  {
    "label": "FConsoleSlateDebuggerInvalidate()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FConsoleSlateDebuggerInvalidate()"
  },
  {
    "label": "StartDebugging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartDebugging()"
  },
  {
    "label": "StopDebugging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopDebugging()"
  },
  {
    "label": "LoadConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadConfig()"
  },
  {
    "label": "SaveConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveConfig()"
  },
  {
    "label": "ReplaceInvalidated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceInvalidated(const FSlateDebuggingInvalidateArgs& Args, int32 InvalidationPriority, bool bBuildWidgetName, bool bUseWidgetPathAsName)"
  },
  {
    "label": "ReplaceInvalidator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceInvalidator(const FSlateDebuggingInvalidateArgs& Args, int32 InvalidationPriority, bool bBuildWidgetName, bool bUseWidgetPathAsName)"
  },
  {
    "label": "UpdateInvalidationReason()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInvalidationReason(const FSlateDebuggingInvalidateArgs& Args, int32 InInvalidationPriority)"
  },
  {
    "label": "HandleEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEnabled(IConsoleVariable* Variable)"
  },
  {
    "label": "HandledConfigChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandledConfigChanged(IConsoleVariable* Variable)"
  },
  {
    "label": "HandleSetInvalidateWidgetReasonFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSetInvalidateWidgetReasonFilter(const TArray<FString>& Params)"
  },
  {
    "label": "HandleSetInvalidateRootReasonFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSetInvalidateRootReasonFilter(const TArray<FString>& Params)"
  },
  {
    "label": "HandleEndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEndFrame()"
  },
  {
    "label": "HandleWidgetInvalidated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWidgetInvalidated(const FSlateDebuggingInvalidateArgs& Args)"
  },
  {
    "label": "HandlePaintDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePaintDebugInfo(const FPaintArgs& InArgs, const FGeometry& InAllottedGeometry, FSlateWindowElementList& InOutDrawElements, int32& InOutLayerId)"
  },
  {
    "label": "CleanFrameList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanFrameList()"
  },
  {
    "label": "ProcessFrameList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessFrameList()"
  }
]