[
  {
    "label": "LegacyEncodedAudioFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LegacyEncodedAudioFrame"
  },
  {
    "label": "LegacyEncodedAudioFrame()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_CODECS_LEGACY_ENCODED_AUDIO_FRAME_H_ # define MODULES_AUDIO_CODING_CODECS_LEGACY_ENCODED_AUDIO_FRAME_H_ # include<stddef . h> # include<stdint . h> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / audio_codecs / audio_decoder . h \" # include \" rtc_base / buffer . h \" namespace webrtc { class LegacyEncodedAudioFrame final : public AudioDecoder::EncodedAudioFrame { public :)",
    "insertText": "LegacyEncodedAudioFrame(AudioDecoder* decoder, rtc::Buffer&& payload)"
  },
  {
    "label": "LegacyEncodedAudioFrame()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LegacyEncodedAudioFrame()"
  },
  {
    "label": "SplitBySamples()",
    "kind": "Method",
    "detail": "Function (std::vector<AudioDecoder::ParseResult>)",
    "insertText": "SplitBySamples(AudioDecoder* decoder, rtc::Buffer&& payload, uint32_t timestamp, size_t bytes_per_ms, uint32_t timestamps_per_ms)"
  },
  {
    "label": "Duration()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Duration()"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (absl::optional<DecodeResult>)",
    "insertText": "Decode(rtc::ArrayView<int16_t> decoded)"
  },
  {
    "label": "payload()",
    "kind": "Method",
    "detail": "Function (const rtc::Buffer&)",
    "insertText": "payload()"
  }
]