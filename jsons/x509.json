[
  {
    "label": "X509_algor_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X509_algor_st"
  },
  {
    "label": "X509_val_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X509_val_st"
  },
  {
    "label": "X509_sig_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X509_sig_st"
  },
  {
    "label": "X509_name_entry_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X509_name_entry_st"
  },
  {
    "label": "X509_extension_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X509_extension_st"
  },
  {
    "label": "x509_attributes_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "x509_attributes_st"
  },
  {
    "label": "X509_req_info_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X509_req_info_st"
  },
  {
    "label": "X509_req_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X509_req_st"
  },
  {
    "label": "x509_cert_aux_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "x509_cert_aux_st"
  },
  {
    "label": "x509_cinf_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "x509_cinf_st"
  },
  {
    "label": "x509_trust_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "x509_trust_st"
  },
  {
    "label": "X509_crl_info_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X509_crl_info_st"
  },
  {
    "label": "private_key_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "private_key_st"
  },
  {
    "label": "X509_info_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X509_info_st"
  },
  {
    "label": "Netscape_spkac_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Netscape_spkac_st"
  },
  {
    "label": "Netscape_spki_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Netscape_spki_st"
  },
  {
    "label": "Netscape_certificate_sequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Netscape_certificate_sequence"
  },
  {
    "label": "PBEPARAM_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PBEPARAM_st"
  },
  {
    "label": "PBE2PARAM_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PBE2PARAM_st"
  },
  {
    "label": "PBKDF2PARAM_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PBKDF2PARAM_st"
  },
  {
    "label": "SCRYPT_PARAMS_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SCRYPT_PARAMS_st"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (# ifndef HEADER_X509_H # define HEADER_X509_H # include<openssl / e_os2 . h> # include<openssl / ossl_typ . h> # include<openssl / symhacks . h> # include<openssl / buffer . h> # include<openssl / evp . h> # include<openssl / bio . h> # include<openssl / asn1 . h> # include<openssl / safestack . h> # include<openssl / ec . h> # if OPENSSL_API_COMPAT<0 x10100000L # include<openssl / rsa . h> # include<openssl / dsa . h> # include<openssl / dh . h> # endif # include<openssl / sha . h> # include<openssl / x509err . h> # ifdef __cplusplus \" C \" { # endif # define X509_SIG_INFO_VALID 0 x1 # define X509_SIG_INFO_TLS 0 x2 # define X509_FILETYPE_PEM 1 # define X509_FILETYPE_ASN1 2 # define X509_FILETYPE_DEFAULT 3 # define X509v3_KU_DIGITAL_SIGNATURE 0 x0080 # define X509v3_KU_NON_REPUDIATION 0 x0040 # define X509v3_KU_KEY_ENCIPHERMENT 0 x0020 # define X509v3_KU_DATA_ENCIPHERMENT 0 x0010 # define X509v3_KU_KEY_AGREEMENT 0 x0008 # define X509v3_KU_KEY_CERT_SIGN 0 x0004 # define X509v3_KU_CRL_SIGN 0 x0002 # define X509v3_KU_ENCIPHER_ONLY 0 x0001 # define X509v3_KU_DECIPHER_ONLY 0 x8000 # define X509v3_KU_UNDEF 0 xffff struct X509_algor_st { ASN1_OBJECT* algorithm ; ASN1_TYPE* parameter ; } ; typedef)",
    "insertText": "STACK_OF(X509_ALGOR)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (typedef struct X509_val_st { ASN1_TIME* notBefore ; ASN1_TIME* notAfter ; } X509_VAL ; typedef struct X509_sig_st X509_SIG ; typedef struct X509_name_entry_st X509_NAME_ENTRY ;)",
    "insertText": "DEFINE_STACK_OF(X509_NAME_ENTRY) DEFINE_STACK_OF(X509_NAME)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "STACK_OF(X509_EXTENSION)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_STACK_OF(X509_EXTENSION)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_STACK_OF(X509_ATTRIBUTE)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (typedef struct X509_req_st X509_REQ ; typedef struct x509_cert_aux_st X509_CERT_AUX ; typedef struct x509_cinf_st X509_CINF ;)",
    "insertText": "DEFINE_STACK_OF(X509)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int trust ; int flags ;)",
    "insertText": "int(*check_trust) (struct x509_trust_st *, X509 *, int)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (char* name ; int arg1 ; void* arg2 ; } X509_TRUST ;)",
    "insertText": "DEFINE_STACK_OF(X509_TRUST) # define X509_TRUST_DEFAULT 0 # define X509_TRUST_COMPAT 1 # define X509_TRUST_SSL_CLIENT 2 # define X509_TRUST_SSL_SERVER 3 # define X509_TRUST_EMAIL 4 # define X509_TRUST_OBJECT_SIGN 5 # define X509_TRUST_OCSP_SIGN 6 # define X509_TRUST_OCSP_REQUEST 7 # define X509_TRUST_TSA 8 # define X509_TRUST_MIN 1 # define X509_TRUST_MAX 8 # define X509_TRUST_DYNAMIC (1U << 0) # define X509_TRUST_DYNAMIC_NAME (1U << 1) # define X509_TRUST_NO_SS_COMPAT (1U << 2) # define X509_TRUST_DO_SS_COMPAT (1U << 3) # define X509_TRUST_OK_ANY_EKU (1U << 4) # define X509_TRUST_TRUSTED 1 # define X509_TRUST_REJECTED 2 # define X509_TRUST_UNTRUSTED 3 # define X509_FLAG_COMPAT 0 # define X509_FLAG_NO_HEADER 1L # define X509_FLAG_NO_VERSION (1L << 1) # define X509_FLAG_NO_SERIAL (1L << 2) # define X509_FLAG_NO_SIGNAME (1L << 3) # define X509_FLAG_NO_ISSUER (1L << 4) # define X509_FLAG_NO_VALIDITY (1L << 5) # define X509_FLAG_NO_SUBJECT (1L << 6) # define X509_FLAG_NO_PUBKEY (1L << 7) # define X509_FLAG_NO_EXTENSIONS (1L << 8) # define X509_FLAG_NO_SIGDUMP (1L << 9) # define X509_FLAG_NO_AUX (1L << 10) # define X509_FLAG_NO_ATTRIBUTES (1L << 11) # define X509_FLAG_NO_IDS (1L << 12) # define XN_FLAG_SEP_MASK (0xf << 16) # define XN_FLAG_COMPAT 0 # define XN_FLAG_SEP_COMMA_PLUS (1 << 16) # define XN_FLAG_SEP_CPLUS_SPC (2 << 16) # define XN_FLAG_SEP_SPLUS_SPC (3 << 16) # define XN_FLAG_SEP_MULTILINE (4 << 16) # define XN_FLAG_DN_REV (1 << 20) # define XN_FLAG_FN_MASK (0x3 << 21) # define XN_FLAG_FN_SN 0 # define XN_FLAG_FN_LN (1 << 21) # define XN_FLAG_FN_OID (2 << 21) # define XN_FLAG_FN_NONE (3 << 21) # define XN_FLAG_SPC_EQ (1 << 23) # define XN_FLAG_DUMP_UNKNOWN_FIELDS (1 << 24) # define XN_FLAG_FN_ALIGN (1 << 25) # define XN_FLAG_RFC2253 (ASN1_STRFLGS_RFC2253 | \\ XN_FLAG_SEP_COMMA_PLUS | \\ XN_FLAG_DN_REV | \\ XN_FLAG_FN_SN | \\ XN_FLAG_DUMP_UNKNOWN_FIELDS) # define XN_FLAG_ONELINE (ASN1_STRFLGS_RFC2253 | \\ ASN1_STRFLGS_ESC_QUOTE | \\ XN_FLAG_SEP_CPLUS_SPC | \\ XN_FLAG_SPC_EQ | \\ XN_FLAG_FN_SN) # define XN_FLAG_MULTILINE (ASN1_STRFLGS_ESC_CTRL | \\ ASN1_STRFLGS_ESC_MSB | \\ XN_FLAG_SEP_MULTILINE | \\ XN_FLAG_SPC_EQ | \\ XN_FLAG_FN_LN | \\ XN_FLAG_FN_ALIGN) DEFINE_STACK_OF(X509_REVOKED)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_STACK_OF(X509_CRL)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (int version ; X509_ALGOR* enc_algor ; ASN1_OCTET_STRING* enc_pkey ; EVP_PKEY* dec_pkey ; int key_length ; char* key_data ; int key_free ; EVP_CIPHER_INFO cipher ; } X509_PKEY ; typedef struct X509_info_st { X509* x509 ; X509_CRL* crl ; X509_PKEY* x_pkey ; EVP_CIPHER_INFO enc_cipher ; int enc_len ; char* enc_data ; } X509_INFO ;)",
    "insertText": "DEFINE_STACK_OF(X509_INFO)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (X509_PUBKEY* pubkey ; ASN1_IA5STRING* challenge ; } NETSCAPE_SPKAC ; typedef struct Netscape_spki_st { NETSCAPE_SPKAC* spkac ; X509_ALGOR sig_algor ; ASN1_BIT_STRING* signature ; } NETSCAPE_SPKI ; typedef struct Netscape_certificate_sequence { ASN1_OBJECT* type ;)",
    "insertText": "STACK_OF(X509)"
  },
  {
    "label": "X509_extract_key()",
    "kind": "Method",
    "detail": "Function (} NETSCAPE_CERT_SEQUENCE ; typedef struct PBEPARAM_st { ASN1_OCTET_STRING* salt ; ASN1_INTEGER* iter ; } PBEPARAM ; typedef struct PBE2PARAM_st { X509_ALGOR* keyfunc ; X509_ALGOR* encryption ; } PBE2PARAM ; typedef struct PBKDF2PARAM_st { ASN1_TYPE* salt ; ASN1_INTEGER* iter ; ASN1_INTEGER* keylength ; X509_ALGOR* prf ; } PBKDF2PARAM ; # ifndef OPENSSL_NO_SCRYPT typedef struct SCRYPT_PARAMS_st { ASN1_OCTET_STRING* salt ; ASN1_INTEGER* costParameter ; ASN1_INTEGER* blockSize ; ASN1_INTEGER* parallelizationParameter ; ASN1_INTEGER* keyLength ; } SCRYPT_PARAMS ; # endif # ifdef __cplusplus } # endif # include<openssl / x509_vfy . h> # include<openssl / pkcs7 . h> # ifdef __cplusplus \" C \" { # endif # define X509_EXT_PACK_UNKNOWN 1 # define X509_EXT_PACK_STRING 2 # define)",
    "insertText": "X509_extract_key(x) X509_get_pubkey(x) # define X509_REQ_extract_key(a) X509_REQ_get_pubkey(a) # define X509_name_cmp(a,b) X509_NAME_cmp((a),(b)) void X509_CRL_set_default_method(const X509_CRL_METHOD *meth)"
  },
  {
    "label": "X509_CRL_METHOD_new()",
    "kind": "Method",
    "detail": "Function (X509_CRL_METHOD*)",
    "insertText": "X509_CRL_METHOD_new(int (*crl_init) (X509_CRL *crl), int (*crl_free) (X509_CRL *crl), int (*crl_lookup) (X509_CRL *crl, X509_REVOKED **ret, ASN1_INTEGER *ser, X509_NAME *issuer), int (*crl_verify) (X509_CRL *crl, EVP_PKEY *pk))"
  },
  {
    "label": "X509_CRL_METHOD_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_CRL_METHOD_free(X509_CRL_METHOD *m)"
  },
  {
    "label": "X509_CRL_set_meth_data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_CRL_set_meth_data(X509_CRL *crl, void *dat)"
  },
  {
    "label": "X509_CRL_get_meth_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "X509_CRL_get_meth_data(X509_CRL *crl)"
  },
  {
    "label": "X509_verify_cert_error_string()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "X509_verify_cert_error_string(long n)"
  },
  {
    "label": "X509_verify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_verify(X509 *a, EVP_PKEY *r)"
  },
  {
    "label": "X509_REQ_verify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_verify(X509_REQ *a, EVP_PKEY *r)"
  },
  {
    "label": "X509_CRL_verify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_verify(X509_CRL *a, EVP_PKEY *r)"
  },
  {
    "label": "NETSCAPE_SPKI_verify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NETSCAPE_SPKI_verify(NETSCAPE_SPKI *a, EVP_PKEY *r)"
  },
  {
    "label": "NETSCAPE_SPKI_b64_decode()",
    "kind": "Method",
    "detail": "Function (NETSCAPE_SPKI*)",
    "insertText": "NETSCAPE_SPKI_b64_decode(const char *str, int len)"
  },
  {
    "label": "NETSCAPE_SPKI_b64_encode()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI *x)"
  },
  {
    "label": "NETSCAPE_SPKI_get_pubkey()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI *x)"
  },
  {
    "label": "NETSCAPE_SPKI_set_pubkey()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI *x, EVP_PKEY *pkey)"
  },
  {
    "label": "NETSCAPE_SPKI_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NETSCAPE_SPKI_print(BIO *out, NETSCAPE_SPKI *spki)"
  },
  {
    "label": "X509_signature_dump()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_signature_dump(BIO *bp, const ASN1_STRING *sig, int indent)"
  },
  {
    "label": "X509_signature_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_signature_print(BIO *bp, const X509_ALGOR *alg, const ASN1_STRING *sig)"
  },
  {
    "label": "X509_sign()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)"
  },
  {
    "label": "X509_sign_ctx()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx)"
  },
  {
    "label": "X509_http_nbio()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_OCSP int)",
    "insertText": "X509_http_nbio(OCSP_REQ_CTX *rctx, X509 **pcert)"
  },
  {
    "label": "X509_REQ_sign()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "X509_REQ_sign(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md)"
  },
  {
    "label": "X509_REQ_sign_ctx()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_sign_ctx(X509_REQ *x, EVP_MD_CTX *ctx)"
  },
  {
    "label": "X509_CRL_sign()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_sign(X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md)"
  },
  {
    "label": "X509_CRL_sign_ctx()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_sign_ctx(X509_CRL *x, EVP_MD_CTX *ctx)"
  },
  {
    "label": "X509_CRL_http_nbio()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_OCSP int)",
    "insertText": "X509_CRL_http_nbio(OCSP_REQ_CTX *rctx, X509_CRL **pcrl)"
  },
  {
    "label": "NETSCAPE_SPKI_sign()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "NETSCAPE_SPKI_sign(NETSCAPE_SPKI *x, EVP_PKEY *pkey, const EVP_MD *md)"
  },
  {
    "label": "X509_pubkey_digest()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_pubkey_digest(const X509 *data, const EVP_MD *type, unsigned char *md, unsigned int *len)"
  },
  {
    "label": "X509_digest()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_digest(const X509 *data, const EVP_MD *type, unsigned char *md, unsigned int *len)"
  },
  {
    "label": "X509_CRL_digest()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_digest(const X509_CRL *data, const EVP_MD *type, unsigned char *md, unsigned int *len)"
  },
  {
    "label": "X509_REQ_digest()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_digest(const X509_REQ *data, const EVP_MD *type, unsigned char *md, unsigned int *len)"
  },
  {
    "label": "X509_NAME_digest()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_digest(const X509_NAME *data, const EVP_MD *type, unsigned char *md, unsigned int *len)"
  },
  {
    "label": "d2i_X509_fp()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_STDIO X509*)",
    "insertText": "d2i_X509_fp(FILE *fp, X509 **x509)"
  },
  {
    "label": "i2d_X509_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_X509_fp(FILE *fp, X509 *x509)"
  },
  {
    "label": "d2i_X509_CRL_fp()",
    "kind": "Method",
    "detail": "Function (X509_CRL*)",
    "insertText": "d2i_X509_CRL_fp(FILE *fp, X509_CRL **crl)"
  },
  {
    "label": "i2d_X509_CRL_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_X509_CRL_fp(FILE *fp, X509_CRL *crl)"
  },
  {
    "label": "d2i_X509_REQ_fp()",
    "kind": "Method",
    "detail": "Function (X509_REQ*)",
    "insertText": "d2i_X509_REQ_fp(FILE *fp, X509_REQ **req)"
  },
  {
    "label": "i2d_X509_REQ_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_X509_REQ_fp(FILE *fp, X509_REQ *req)"
  },
  {
    "label": "d2i_RSAPrivateKey_fp()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_RSA RSA*)",
    "insertText": "d2i_RSAPrivateKey_fp(FILE *fp, RSA **rsa)"
  },
  {
    "label": "i2d_RSAPrivateKey_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_RSAPrivateKey_fp(FILE *fp, RSA *rsa)"
  },
  {
    "label": "d2i_RSAPublicKey_fp()",
    "kind": "Method",
    "detail": "Function (RSA*)",
    "insertText": "d2i_RSAPublicKey_fp(FILE *fp, RSA **rsa)"
  },
  {
    "label": "i2d_RSAPublicKey_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_RSAPublicKey_fp(FILE *fp, RSA *rsa)"
  },
  {
    "label": "d2i_RSA_PUBKEY_fp()",
    "kind": "Method",
    "detail": "Function (RSA*)",
    "insertText": "d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa)"
  },
  {
    "label": "i2d_RSA_PUBKEY_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_RSA_PUBKEY_fp(FILE *fp, RSA *rsa)"
  },
  {
    "label": "d2i_DSA_PUBKEY_fp()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_DSA DSA*)",
    "insertText": "d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa)"
  },
  {
    "label": "i2d_DSA_PUBKEY_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_DSA_PUBKEY_fp(FILE *fp, DSA *dsa)"
  },
  {
    "label": "d2i_DSAPrivateKey_fp()",
    "kind": "Method",
    "detail": "Function (DSA*)",
    "insertText": "d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa)"
  },
  {
    "label": "i2d_DSAPrivateKey_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_DSAPrivateKey_fp(FILE *fp, DSA *dsa)"
  },
  {
    "label": "d2i_EC_PUBKEY_fp()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_EC EC_KEY*)",
    "insertText": "d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey)"
  },
  {
    "label": "i2d_EC_PUBKEY_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_EC_PUBKEY_fp(FILE *fp, EC_KEY *eckey)"
  },
  {
    "label": "d2i_ECPrivateKey_fp()",
    "kind": "Method",
    "detail": "Function (EC_KEY*)",
    "insertText": "d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey)"
  },
  {
    "label": "i2d_ECPrivateKey_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_ECPrivateKey_fp(FILE *fp, EC_KEY *eckey)"
  },
  {
    "label": "d2i_PKCS8_fp()",
    "kind": "Method",
    "detail": "Function (# endif X509_SIG*)",
    "insertText": "d2i_PKCS8_fp(FILE *fp, X509_SIG **p8)"
  },
  {
    "label": "i2d_PKCS8_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PKCS8_fp(FILE *fp, X509_SIG *p8)"
  },
  {
    "label": "d2i_PKCS8_PRIV_KEY_INFO_fp()",
    "kind": "Method",
    "detail": "Function (PKCS8_PRIV_KEY_INFO*)",
    "insertText": "d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO **p8inf)"
  },
  {
    "label": "i2d_PKCS8_PRIV_KEY_INFO_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO *p8inf)"
  },
  {
    "label": "i2d_PKCS8PrivateKeyInfo_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PKCS8PrivateKeyInfo_fp(FILE *fp, EVP_PKEY *key)"
  },
  {
    "label": "i2d_PrivateKey_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PrivateKey_fp(FILE *fp, EVP_PKEY *pkey)"
  },
  {
    "label": "d2i_PrivateKey_fp()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a)"
  },
  {
    "label": "i2d_PUBKEY_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PUBKEY_fp(FILE *fp, EVP_PKEY *pkey)"
  },
  {
    "label": "d2i_PUBKEY_fp()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a)"
  },
  {
    "label": "d2i_X509_bio()",
    "kind": "Method",
    "detail": "Function (# endif X509*)",
    "insertText": "d2i_X509_bio(BIO *bp, X509 **x509)"
  },
  {
    "label": "i2d_X509_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_X509_bio(BIO *bp, X509 *x509)"
  },
  {
    "label": "d2i_X509_CRL_bio()",
    "kind": "Method",
    "detail": "Function (X509_CRL*)",
    "insertText": "d2i_X509_CRL_bio(BIO *bp, X509_CRL **crl)"
  },
  {
    "label": "i2d_X509_CRL_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_X509_CRL_bio(BIO *bp, X509_CRL *crl)"
  },
  {
    "label": "d2i_X509_REQ_bio()",
    "kind": "Method",
    "detail": "Function (X509_REQ*)",
    "insertText": "d2i_X509_REQ_bio(BIO *bp, X509_REQ **req)"
  },
  {
    "label": "i2d_X509_REQ_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_X509_REQ_bio(BIO *bp, X509_REQ *req)"
  },
  {
    "label": "d2i_RSAPrivateKey_bio()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_RSA RSA*)",
    "insertText": "d2i_RSAPrivateKey_bio(BIO *bp, RSA **rsa)"
  },
  {
    "label": "i2d_RSAPrivateKey_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_RSAPrivateKey_bio(BIO *bp, RSA *rsa)"
  },
  {
    "label": "d2i_RSAPublicKey_bio()",
    "kind": "Method",
    "detail": "Function (RSA*)",
    "insertText": "d2i_RSAPublicKey_bio(BIO *bp, RSA **rsa)"
  },
  {
    "label": "i2d_RSAPublicKey_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_RSAPublicKey_bio(BIO *bp, RSA *rsa)"
  },
  {
    "label": "d2i_RSA_PUBKEY_bio()",
    "kind": "Method",
    "detail": "Function (RSA*)",
    "insertText": "d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa)"
  },
  {
    "label": "i2d_RSA_PUBKEY_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_RSA_PUBKEY_bio(BIO *bp, RSA *rsa)"
  },
  {
    "label": "d2i_DSA_PUBKEY_bio()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_DSA DSA*)",
    "insertText": "d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa)"
  },
  {
    "label": "i2d_DSA_PUBKEY_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_DSA_PUBKEY_bio(BIO *bp, DSA *dsa)"
  },
  {
    "label": "d2i_DSAPrivateKey_bio()",
    "kind": "Method",
    "detail": "Function (DSA*)",
    "insertText": "d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa)"
  },
  {
    "label": "i2d_DSAPrivateKey_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_DSAPrivateKey_bio(BIO *bp, DSA *dsa)"
  },
  {
    "label": "d2i_EC_PUBKEY_bio()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_EC EC_KEY*)",
    "insertText": "d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey)"
  },
  {
    "label": "i2d_EC_PUBKEY_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_EC_PUBKEY_bio(BIO *bp, EC_KEY *eckey)"
  },
  {
    "label": "d2i_ECPrivateKey_bio()",
    "kind": "Method",
    "detail": "Function (EC_KEY*)",
    "insertText": "d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey)"
  },
  {
    "label": "i2d_ECPrivateKey_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_ECPrivateKey_bio(BIO *bp, EC_KEY *eckey)"
  },
  {
    "label": "d2i_PKCS8_bio()",
    "kind": "Method",
    "detail": "Function (# endif X509_SIG*)",
    "insertText": "d2i_PKCS8_bio(BIO *bp, X509_SIG **p8)"
  },
  {
    "label": "i2d_PKCS8_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PKCS8_bio(BIO *bp, X509_SIG *p8)"
  },
  {
    "label": "d2i_PKCS8_PRIV_KEY_INFO_bio()",
    "kind": "Method",
    "detail": "Function (PKCS8_PRIV_KEY_INFO*)",
    "insertText": "d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO **p8inf)"
  },
  {
    "label": "i2d_PKCS8_PRIV_KEY_INFO_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO *p8inf)"
  },
  {
    "label": "i2d_PKCS8PrivateKeyInfo_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PKCS8PrivateKeyInfo_bio(BIO *bp, EVP_PKEY *key)"
  },
  {
    "label": "i2d_PrivateKey_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PrivateKey_bio(BIO *bp, EVP_PKEY *pkey)"
  },
  {
    "label": "d2i_PrivateKey_bio()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a)"
  },
  {
    "label": "i2d_PUBKEY_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PUBKEY_bio(BIO *bp, EVP_PKEY *pkey)"
  },
  {
    "label": "d2i_PUBKEY_bio()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a)"
  },
  {
    "label": "X509_dup()",
    "kind": "Method",
    "detail": "Function (X509*)",
    "insertText": "X509_dup(X509 *x509)"
  },
  {
    "label": "X509_ATTRIBUTE_dup()",
    "kind": "Method",
    "detail": "Function (X509_ATTRIBUTE*)",
    "insertText": "X509_ATTRIBUTE_dup(X509_ATTRIBUTE *xa)"
  },
  {
    "label": "X509_EXTENSION_dup()",
    "kind": "Method",
    "detail": "Function (X509_EXTENSION*)",
    "insertText": "X509_EXTENSION_dup(X509_EXTENSION *ex)"
  },
  {
    "label": "X509_CRL_dup()",
    "kind": "Method",
    "detail": "Function (X509_CRL*)",
    "insertText": "X509_CRL_dup(X509_CRL *crl)"
  },
  {
    "label": "X509_REVOKED_dup()",
    "kind": "Method",
    "detail": "Function (X509_REVOKED*)",
    "insertText": "X509_REVOKED_dup(X509_REVOKED *rev)"
  },
  {
    "label": "X509_REQ_dup()",
    "kind": "Method",
    "detail": "Function (X509_REQ*)",
    "insertText": "X509_REQ_dup(X509_REQ *req)"
  },
  {
    "label": "X509_ALGOR_dup()",
    "kind": "Method",
    "detail": "Function (X509_ALGOR*)",
    "insertText": "X509_ALGOR_dup(X509_ALGOR *xn)"
  },
  {
    "label": "X509_ALGOR_set0()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_ALGOR_set0(X509_ALGOR *alg, ASN1_OBJECT *aobj, int ptype, void *pval)"
  },
  {
    "label": "X509_ALGOR_get0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_ALGOR_get0(const ASN1_OBJECT **paobj, int *pptype, const void **ppval, const X509_ALGOR *algor)"
  },
  {
    "label": "X509_ALGOR_set_md()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_ALGOR_set_md(X509_ALGOR *alg, const EVP_MD *md)"
  },
  {
    "label": "X509_ALGOR_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_ALGOR_cmp(const X509_ALGOR *a, const X509_ALGOR *b)"
  },
  {
    "label": "X509_ALGOR_copy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_ALGOR_copy(X509_ALGOR *dest, const X509_ALGOR *src)"
  },
  {
    "label": "X509_NAME_dup()",
    "kind": "Method",
    "detail": "Function (X509_NAME*)",
    "insertText": "X509_NAME_dup(X509_NAME *xn)"
  },
  {
    "label": "X509_NAME_ENTRY_dup()",
    "kind": "Method",
    "detail": "Function (X509_NAME_ENTRY*)",
    "insertText": "X509_NAME_ENTRY_dup(X509_NAME_ENTRY *ne)"
  },
  {
    "label": "X509_cmp_time()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_cmp_time(const ASN1_TIME *s, time_t *t)"
  },
  {
    "label": "X509_cmp_current_time()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_cmp_current_time(const ASN1_TIME *s)"
  },
  {
    "label": "X509_time_adj()",
    "kind": "Method",
    "detail": "Function (ASN1_TIME*)",
    "insertText": "X509_time_adj(ASN1_TIME *s, long adj, time_t *t)"
  },
  {
    "label": "X509_time_adj_ex()",
    "kind": "Method",
    "detail": "Function (ASN1_TIME*)",
    "insertText": "X509_time_adj_ex(ASN1_TIME *s, int offset_day, long offset_sec, time_t *t)"
  },
  {
    "label": "X509_gmtime_adj()",
    "kind": "Method",
    "detail": "Function (ASN1_TIME*)",
    "insertText": "X509_gmtime_adj(ASN1_TIME *s, long adj)"
  },
  {
    "label": "X509_get_default_cert_area()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "X509_get_default_cert_area(void)"
  },
  {
    "label": "X509_get_default_cert_dir()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "X509_get_default_cert_dir(void)"
  },
  {
    "label": "X509_get_default_cert_file()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "X509_get_default_cert_file(void)"
  },
  {
    "label": "X509_get_default_cert_dir_env()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "X509_get_default_cert_dir_env(void)"
  },
  {
    "label": "X509_get_default_cert_file_env()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "X509_get_default_cert_file_env(void)"
  },
  {
    "label": "X509_get_default_private_dir()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "X509_get_default_private_dir(void)"
  },
  {
    "label": "X509_to_X509_REQ()",
    "kind": "Method",
    "detail": "Function (X509_REQ*)",
    "insertText": "X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)"
  },
  {
    "label": "X509_REQ_to_X509()",
    "kind": "Method",
    "detail": "Function (X509*)",
    "insertText": "X509_REQ_to_X509(X509_REQ *r, int days, EVP_PKEY *pkey)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(X509_ALGOR) DECLARE_ASN1_ENCODE_FUNCTIONS(X509_ALGORS, X509_ALGORS, X509_ALGORS) DECLARE_ASN1_FUNCTIONS(X509_VAL) DECLARE_ASN1_FUNCTIONS(X509_PUBKEY) int X509_PUBKEY_set(X509_PUBKEY **x, EVP_PKEY *pkey)"
  },
  {
    "label": "X509_PUBKEY_get0()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "X509_PUBKEY_get0(X509_PUBKEY *key)"
  },
  {
    "label": "X509_PUBKEY_get()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "X509_PUBKEY_get(X509_PUBKEY *key)"
  },
  {
    "label": "X509_get_pubkey_parameters()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_get_pubkey_parameters(EVP_PKEY *pkey, STACK_OF(X509) *chain)"
  },
  {
    "label": "X509_get_pathlen()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "X509_get_pathlen(X509 *x)"
  },
  {
    "label": "i2d_PUBKEY()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp)"
  },
  {
    "label": "d2i_PUBKEY()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp, long length)"
  },
  {
    "label": "i2d_RSA_PUBKEY()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_RSA int)",
    "insertText": "i2d_RSA_PUBKEY(RSA *a, unsigned char **pp)"
  },
  {
    "label": "d2i_RSA_PUBKEY()",
    "kind": "Method",
    "detail": "Function (RSA*)",
    "insertText": "d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length)"
  },
  {
    "label": "i2d_DSA_PUBKEY()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_DSA int)",
    "insertText": "i2d_DSA_PUBKEY(DSA *a, unsigned char **pp)"
  },
  {
    "label": "d2i_DSA_PUBKEY()",
    "kind": "Method",
    "detail": "Function (DSA*)",
    "insertText": "d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length)"
  },
  {
    "label": "i2d_EC_PUBKEY()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_EC int)",
    "insertText": "i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp)"
  },
  {
    "label": "d2i_EC_PUBKEY()",
    "kind": "Method",
    "detail": "Function (EC_KEY*)",
    "insertText": "d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(X509_SIG) void X509_SIG_get0(const X509_SIG *sig, const X509_ALGOR **palg, const ASN1_OCTET_STRING **pdigest)"
  },
  {
    "label": "X509_SIG_getm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_SIG_getm(X509_SIG *sig, X509_ALGOR **palg, ASN1_OCTET_STRING **pdigest)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(X509_REQ_INFO) DECLARE_ASN1_FUNCTIONS(X509_REQ) DECLARE_ASN1_FUNCTIONS(X509_ATTRIBUTE) X509_ATTRIBUTE *X509_ATTRIBUTE_create(int nid, int atrtype, void *value)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(X509_EXTENSION) DECLARE_ASN1_ENCODE_FUNCTIONS(X509_EXTENSIONS, X509_EXTENSIONS, X509_EXTENSIONS) DECLARE_ASN1_FUNCTIONS(X509_NAME_ENTRY) DECLARE_ASN1_FUNCTIONS(X509_NAME) int X509_NAME_set(X509_NAME **xn, X509_NAME *name)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(X509_CINF) DECLARE_ASN1_FUNCTIONS(X509) DECLARE_ASN1_FUNCTIONS(X509_CERT_AUX) #define X509_get_ex_new_index(l, p, newf, dupf, freef) \\ CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509, l, p, newf, dupf, freef) int X509_set_ex_data(X509 *r, int idx, void *arg)"
  },
  {
    "label": "X509_get_ex_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "X509_get_ex_data(X509 *r, int idx)"
  },
  {
    "label": "i2d_X509_AUX()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_X509_AUX(X509 *a, unsigned char **pp)"
  },
  {
    "label": "d2i_X509_AUX()",
    "kind": "Method",
    "detail": "Function (X509*)",
    "insertText": "d2i_X509_AUX(X509 **a, const unsigned char **pp, long length)"
  },
  {
    "label": "i2d_re_X509_tbs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_re_X509_tbs(X509 *x, unsigned char **pp)"
  },
  {
    "label": "X509_SIG_INFO_get()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_SIG_INFO_get(const X509_SIG_INFO *siginf, int *mdnid, int *pknid, int *secbits, uint32_t *flags)"
  },
  {
    "label": "X509_SIG_INFO_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_SIG_INFO_set(X509_SIG_INFO *siginf, int mdnid, int pknid, int secbits, uint32_t flags)"
  },
  {
    "label": "X509_get_signature_info()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_get_signature_info(X509 *x, int *mdnid, int *pknid, int *secbits, uint32_t *flags)"
  },
  {
    "label": "X509_get0_signature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_get0_signature(const ASN1_BIT_STRING **psig, const X509_ALGOR **palg, const X509 *x)"
  },
  {
    "label": "X509_get_signature_nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_get_signature_nid(const X509 *x)"
  },
  {
    "label": "X509_trusted()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_trusted(const X509 *x)"
  },
  {
    "label": "X509_alias_set1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_alias_set1(X509 *x, const unsigned char *name, int len)"
  },
  {
    "label": "X509_keyid_set1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_keyid_set1(X509 *x, const unsigned char *id, int len)"
  },
  {
    "label": "X509_alias_get0()",
    "kind": "Method",
    "detail": "Function (unsigned char*)",
    "insertText": "X509_alias_get0(X509 *x, int *len)"
  },
  {
    "label": "X509_keyid_get0()",
    "kind": "Method",
    "detail": "Function (unsigned char*)",
    "insertText": "X509_keyid_get0(X509 *x, int *len)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*X509_TRUST_set_default(int (*trust) (int, X509 *, int))) (int, X509 *, int)"
  },
  {
    "label": "X509_TRUST_set()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_TRUST_set(int *t, int trust)"
  },
  {
    "label": "X509_add1_trust_object()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_add1_trust_object(X509 *x, const ASN1_OBJECT *obj)"
  },
  {
    "label": "X509_add1_reject_object()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_add1_reject_object(X509 *x, const ASN1_OBJECT *obj)"
  },
  {
    "label": "X509_trust_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_trust_clear(X509 *x)"
  },
  {
    "label": "X509_reject_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_reject_clear(X509 *x)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(ASN1_OBJECT) *X509_get0_trust_objects(X509 *x)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(ASN1_OBJECT) *X509_get0_reject_objects(X509 *x)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(X509_REVOKED) DECLARE_ASN1_FUNCTIONS(X509_CRL_INFO) DECLARE_ASN1_FUNCTIONS(X509_CRL) int X509_CRL_add0_revoked(X509_CRL *crl, X509_REVOKED *rev)"
  },
  {
    "label": "X509_CRL_get0_by_serial()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_get0_by_serial(X509_CRL *crl, X509_REVOKED **ret, ASN1_INTEGER *serial)"
  },
  {
    "label": "X509_CRL_get0_by_cert()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_get0_by_cert(X509_CRL *crl, X509_REVOKED **ret, X509 *x)"
  },
  {
    "label": "X509_PKEY_new()",
    "kind": "Method",
    "detail": "Function (X509_PKEY*)",
    "insertText": "X509_PKEY_new(void)"
  },
  {
    "label": "X509_PKEY_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_PKEY_free(X509_PKEY *a)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(NETSCAPE_SPKI) DECLARE_ASN1_FUNCTIONS(NETSCAPE_SPKAC) DECLARE_ASN1_FUNCTIONS(NETSCAPE_CERT_SEQUENCE) X509_INFO *X509_INFO_new(void)"
  },
  {
    "label": "X509_INFO_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_INFO_free(X509_INFO *a)"
  },
  {
    "label": "X509_NAME_oneline()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "X509_NAME_oneline(const X509_NAME *a, char *buf, int size)"
  },
  {
    "label": "ASN1_verify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ASN1_verify(i2d_of_void *i2d, X509_ALGOR *algor1, ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey)"
  },
  {
    "label": "ASN1_digest()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ASN1_digest(i2d_of_void *i2d, const EVP_MD *type, char *data, unsigned char *md, unsigned int *len)"
  },
  {
    "label": "ASN1_sign()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ASN1_sign(i2d_of_void *i2d, X509_ALGOR *algor1, X509_ALGOR *algor2, ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey, const EVP_MD *type)"
  },
  {
    "label": "ASN1_item_digest()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ASN1_item_digest(const ASN1_ITEM *it, const EVP_MD *type, void *data, unsigned char *md, unsigned int *len)"
  },
  {
    "label": "ASN1_item_verify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ASN1_item_verify(const ASN1_ITEM *it, X509_ALGOR *algor1, ASN1_BIT_STRING *signature, void *data, EVP_PKEY *pkey)"
  },
  {
    "label": "ASN1_item_sign()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ASN1_item_sign(const ASN1_ITEM *it, X509_ALGOR *algor1, X509_ALGOR *algor2, ASN1_BIT_STRING *signature, void *data, EVP_PKEY *pkey, const EVP_MD *type)"
  },
  {
    "label": "ASN1_item_sign_ctx()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ASN1_item_sign_ctx(const ASN1_ITEM *it, X509_ALGOR *algor1, X509_ALGOR *algor2, ASN1_BIT_STRING *signature, void *asn, EVP_MD_CTX *ctx)"
  },
  {
    "label": "X509_get_version()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "X509_get_version(const X509 *x)"
  },
  {
    "label": "X509_set_version()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_set_version(X509 *x, long version)"
  },
  {
    "label": "X509_set_serialNumber()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_set_serialNumber(X509 *x, ASN1_INTEGER *serial)"
  },
  {
    "label": "X509_get_serialNumber()",
    "kind": "Method",
    "detail": "Function (ASN1_INTEGER*)",
    "insertText": "X509_get_serialNumber(X509 *x)"
  },
  {
    "label": "X509_get0_serialNumber()",
    "kind": "Method",
    "detail": "Function (const ASN1_INTEGER*)",
    "insertText": "X509_get0_serialNumber(const X509 *x)"
  },
  {
    "label": "X509_set_issuer_name()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_set_issuer_name(X509 *x, X509_NAME *name)"
  },
  {
    "label": "X509_get_issuer_name()",
    "kind": "Method",
    "detail": "Function (X509_NAME*)",
    "insertText": "X509_get_issuer_name(const X509 *a)"
  },
  {
    "label": "X509_set_subject_name()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_set_subject_name(X509 *x, X509_NAME *name)"
  },
  {
    "label": "X509_get_subject_name()",
    "kind": "Method",
    "detail": "Function (X509_NAME*)",
    "insertText": "X509_get_subject_name(const X509 *a)"
  },
  {
    "label": "X509_get0_notBefore()",
    "kind": "Method",
    "detail": "Function (const ASN1_TIME*)",
    "insertText": "X509_get0_notBefore(const X509 *x)"
  },
  {
    "label": "X509_getm_notBefore()",
    "kind": "Method",
    "detail": "Function (ASN1_TIME*)",
    "insertText": "X509_getm_notBefore(const X509 *x)"
  },
  {
    "label": "X509_set1_notBefore()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_set1_notBefore(X509 *x, const ASN1_TIME *tm)"
  },
  {
    "label": "X509_get0_notAfter()",
    "kind": "Method",
    "detail": "Function (const ASN1_TIME*)",
    "insertText": "X509_get0_notAfter(const X509 *x)"
  },
  {
    "label": "X509_getm_notAfter()",
    "kind": "Method",
    "detail": "Function (ASN1_TIME*)",
    "insertText": "X509_getm_notAfter(const X509 *x)"
  },
  {
    "label": "X509_set1_notAfter()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_set1_notAfter(X509 *x, const ASN1_TIME *tm)"
  },
  {
    "label": "X509_set_pubkey()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_set_pubkey(X509 *x, EVP_PKEY *pkey)"
  },
  {
    "label": "X509_up_ref()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_up_ref(X509 *x)"
  },
  {
    "label": "X509_get_signature_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_get_signature_type(const X509 *x)"
  },
  {
    "label": "X509_get_X509_PUBKEY()",
    "kind": "Method",
    "detail": "Function (# if OPENSSL_API_COMPAT<0 x10100000L # define X509_get_notBefore X509_getm_notBefore # define X509_get_notAfter X509_getm_notAfter # define X509_set_notBefore X509_set1_notBefore # define X509_set_notAfter X509_set1_notAfter # endif X509_PUBKEY*)",
    "insertText": "X509_get_X509_PUBKEY(const X509 *x)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STACK_OF(X509_EXTENSION) *X509_get0_extensions(const X509 *x)"
  },
  {
    "label": "X509_get0_uids()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_get0_uids(const X509 *x, const ASN1_BIT_STRING **piuid, const ASN1_BIT_STRING **psuid)"
  },
  {
    "label": "X509_get0_tbs_sigalg()",
    "kind": "Method",
    "detail": "Function (const X509_ALGOR*)",
    "insertText": "X509_get0_tbs_sigalg(const X509 *x)"
  },
  {
    "label": "X509_get0_pubkey()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "X509_get0_pubkey(const X509 *x)"
  },
  {
    "label": "X509_get_pubkey()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "X509_get_pubkey(X509 *x)"
  },
  {
    "label": "X509_get0_pubkey_bitstr()",
    "kind": "Method",
    "detail": "Function (ASN1_BIT_STRING*)",
    "insertText": "X509_get0_pubkey_bitstr(const X509 *x)"
  },
  {
    "label": "X509_certificate_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_certificate_type(const X509 *x, const EVP_PKEY *pubkey)"
  },
  {
    "label": "X509_REQ_get_version()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "X509_REQ_get_version(const X509_REQ *req)"
  },
  {
    "label": "X509_REQ_set_version()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_set_version(X509_REQ *x, long version)"
  },
  {
    "label": "X509_REQ_get_subject_name()",
    "kind": "Method",
    "detail": "Function (X509_NAME*)",
    "insertText": "X509_REQ_get_subject_name(const X509_REQ *req)"
  },
  {
    "label": "X509_REQ_set_subject_name()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_set_subject_name(X509_REQ *req, X509_NAME *name)"
  },
  {
    "label": "X509_REQ_get0_signature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_REQ_get0_signature(const X509_REQ *req, const ASN1_BIT_STRING **psig, const X509_ALGOR **palg)"
  },
  {
    "label": "X509_REQ_set0_signature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_REQ_set0_signature(X509_REQ *req, ASN1_BIT_STRING *psig)"
  },
  {
    "label": "X509_REQ_set1_signature_algo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_set1_signature_algo(X509_REQ *req, X509_ALGOR *palg)"
  },
  {
    "label": "X509_REQ_get_signature_nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_get_signature_nid(const X509_REQ *req)"
  },
  {
    "label": "i2d_re_X509_REQ_tbs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_re_X509_REQ_tbs(X509_REQ *req, unsigned char **pp)"
  },
  {
    "label": "X509_REQ_set_pubkey()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_set_pubkey(X509_REQ *x, EVP_PKEY *pkey)"
  },
  {
    "label": "X509_REQ_get_pubkey()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "X509_REQ_get_pubkey(X509_REQ *req)"
  },
  {
    "label": "X509_REQ_get0_pubkey()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "X509_REQ_get0_pubkey(X509_REQ *req)"
  },
  {
    "label": "X509_REQ_get_X509_PUBKEY()",
    "kind": "Method",
    "detail": "Function (X509_PUBKEY*)",
    "insertText": "X509_REQ_get_X509_PUBKEY(X509_REQ *req)"
  },
  {
    "label": "X509_REQ_extension_nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_extension_nid(int nid)"
  },
  {
    "label": "X509_REQ_get_extension_nids()",
    "kind": "Method",
    "detail": "Function (int*)",
    "insertText": "X509_REQ_get_extension_nids(void)"
  },
  {
    "label": "X509_REQ_set_extension_nids()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_REQ_set_extension_nids(int *nids)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509_EXTENSION) *X509_REQ_get_extensions(X509_REQ *req)"
  },
  {
    "label": "X509_REQ_add_extensions_nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_add_extensions_nid(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts, int nid)"
  },
  {
    "label": "X509_REQ_add_extensions()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_add_extensions(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts)"
  },
  {
    "label": "X509_REQ_get_attr_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_get_attr_count(const X509_REQ *req)"
  },
  {
    "label": "X509_REQ_get_attr_by_NID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_get_attr_by_NID(const X509_REQ *req, int nid, int lastpos)"
  },
  {
    "label": "X509_REQ_get_attr_by_OBJ()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_get_attr_by_OBJ(const X509_REQ *req, const ASN1_OBJECT *obj, int lastpos)"
  },
  {
    "label": "X509_REQ_get_attr()",
    "kind": "Method",
    "detail": "Function (X509_ATTRIBUTE*)",
    "insertText": "X509_REQ_get_attr(const X509_REQ *req, int loc)"
  },
  {
    "label": "X509_REQ_delete_attr()",
    "kind": "Method",
    "detail": "Function (X509_ATTRIBUTE*)",
    "insertText": "X509_REQ_delete_attr(X509_REQ *req, int loc)"
  },
  {
    "label": "X509_REQ_add1_attr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_add1_attr(X509_REQ *req, X509_ATTRIBUTE *attr)"
  },
  {
    "label": "X509_REQ_add1_attr_by_OBJ()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_add1_attr_by_OBJ(X509_REQ *req, const ASN1_OBJECT *obj, int type, const unsigned char *bytes, int len)"
  },
  {
    "label": "X509_REQ_add1_attr_by_NID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_add1_attr_by_NID(X509_REQ *req, int nid, int type, const unsigned char *bytes, int len)"
  },
  {
    "label": "X509_REQ_add1_attr_by_txt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_add1_attr_by_txt(X509_REQ *req, const char *attrname, int type, const unsigned char *bytes, int len)"
  },
  {
    "label": "X509_CRL_set_version()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_set_version(X509_CRL *x, long version)"
  },
  {
    "label": "X509_CRL_set_issuer_name()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_set_issuer_name(X509_CRL *x, X509_NAME *name)"
  },
  {
    "label": "X509_CRL_set1_lastUpdate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_set1_lastUpdate(X509_CRL *x, const ASN1_TIME *tm)"
  },
  {
    "label": "X509_CRL_set1_nextUpdate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_set1_nextUpdate(X509_CRL *x, const ASN1_TIME *tm)"
  },
  {
    "label": "X509_CRL_sort()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_sort(X509_CRL *crl)"
  },
  {
    "label": "X509_CRL_up_ref()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_up_ref(X509_CRL *crl)"
  },
  {
    "label": "X509_CRL_get_version()",
    "kind": "Method",
    "detail": "Function (# if OPENSSL_API_COMPAT<0 x10100000L # define X509_CRL_set_lastUpdate X509_CRL_set1_lastUpdate # define X509_CRL_set_nextUpdate X509_CRL_set1_nextUpdate # endif long)",
    "insertText": "X509_CRL_get_version(const X509_CRL *crl)"
  },
  {
    "label": "X509_CRL_get0_lastUpdate()",
    "kind": "Method",
    "detail": "Function (const ASN1_TIME*)",
    "insertText": "X509_CRL_get0_lastUpdate(const X509_CRL *crl)"
  },
  {
    "label": "X509_CRL_get0_nextUpdate()",
    "kind": "Method",
    "detail": "Function (const ASN1_TIME*)",
    "insertText": "X509_CRL_get0_nextUpdate(const X509_CRL *crl)"
  },
  {
    "label": "DEPRECATEDIN_1_1_0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATEDIN_1_1_0(ASN1_TIME *X509_CRL_get_lastUpdate(X509_CRL *crl)) DEPRECATEDIN_1_1_0(ASN1_TIME *X509_CRL_get_nextUpdate(X509_CRL *crl)) X509_NAME *X509_CRL_get_issuer(const X509_CRL *crl)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STACK_OF(X509_EXTENSION) *X509_CRL_get0_extensions(const X509_CRL *crl)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509_REVOKED) *X509_CRL_get_REVOKED(X509_CRL *crl)"
  },
  {
    "label": "X509_CRL_get0_signature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_CRL_get0_signature(const X509_CRL *crl, const ASN1_BIT_STRING **psig, const X509_ALGOR **palg)"
  },
  {
    "label": "X509_CRL_get_signature_nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_get_signature_nid(const X509_CRL *crl)"
  },
  {
    "label": "i2d_re_X509_CRL_tbs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_re_X509_CRL_tbs(X509_CRL *req, unsigned char **pp)"
  },
  {
    "label": "X509_REVOKED_get0_serialNumber()",
    "kind": "Method",
    "detail": "Function (const ASN1_INTEGER*)",
    "insertText": "X509_REVOKED_get0_serialNumber(const X509_REVOKED *x)"
  },
  {
    "label": "X509_REVOKED_set_serialNumber()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REVOKED_set_serialNumber(X509_REVOKED *x, ASN1_INTEGER *serial)"
  },
  {
    "label": "X509_REVOKED_get0_revocationDate()",
    "kind": "Method",
    "detail": "Function (const ASN1_TIME*)",
    "insertText": "X509_REVOKED_get0_revocationDate(const X509_REVOKED *x)"
  },
  {
    "label": "X509_REVOKED_set_revocationDate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REVOKED_set_revocationDate(X509_REVOKED *r, ASN1_TIME *tm)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STACK_OF(X509_EXTENSION) * X509_REVOKED_get0_extensions(const X509_REVOKED *r)"
  },
  {
    "label": "X509_CRL_diff()",
    "kind": "Method",
    "detail": "Function (X509_CRL*)",
    "insertText": "X509_CRL_diff(X509_CRL *base, X509_CRL *newer, EVP_PKEY *skey, const EVP_MD *md, unsigned int flags)"
  },
  {
    "label": "X509_REQ_check_private_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_check_private_key(X509_REQ *x509, EVP_PKEY *pkey)"
  },
  {
    "label": "X509_check_private_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_private_key(const X509 *x509, const EVP_PKEY *pkey)"
  },
  {
    "label": "X509_chain_check_suiteb()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_chain_check_suiteb(int *perror_depth, X509 *x, STACK_OF(X509) *chain, unsigned long flags)"
  },
  {
    "label": "X509_CRL_check_suiteb()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_check_suiteb(X509_CRL *crl, EVP_PKEY *pk, unsigned long flags)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509) *X509_chain_up_ref(STACK_OF(X509) *chain)"
  },
  {
    "label": "X509_issuer_and_serial_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_issuer_and_serial_cmp(const X509 *a, const X509 *b)"
  },
  {
    "label": "X509_issuer_and_serial_hash()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "X509_issuer_and_serial_hash(X509 *a)"
  },
  {
    "label": "X509_issuer_name_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_issuer_name_cmp(const X509 *a, const X509 *b)"
  },
  {
    "label": "X509_issuer_name_hash()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "X509_issuer_name_hash(X509 *a)"
  },
  {
    "label": "X509_subject_name_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_subject_name_cmp(const X509 *a, const X509 *b)"
  },
  {
    "label": "X509_subject_name_hash()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "X509_subject_name_hash(X509 *x)"
  },
  {
    "label": "X509_issuer_name_hash_old()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_MD5 unsigned long)",
    "insertText": "X509_issuer_name_hash_old(X509 *a)"
  },
  {
    "label": "X509_subject_name_hash_old()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "X509_subject_name_hash_old(X509 *x)"
  },
  {
    "label": "X509_cmp()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "X509_cmp(const X509 *a, const X509 *b)"
  },
  {
    "label": "X509_NAME_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b)"
  },
  {
    "label": "X509_NAME_hash()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "X509_NAME_hash(X509_NAME *x)"
  },
  {
    "label": "X509_NAME_hash_old()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "X509_NAME_hash_old(X509_NAME *x)"
  },
  {
    "label": "X509_CRL_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b)"
  },
  {
    "label": "X509_CRL_match()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_match(const X509_CRL *a, const X509_CRL *b)"
  },
  {
    "label": "X509_aux_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_aux_print(BIO *out, X509 *x, int indent)"
  },
  {
    "label": "X509_print_ex_fp()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_STDIO int)",
    "insertText": "X509_print_ex_fp(FILE *bp, X509 *x, unsigned long nmflag, unsigned long cflag)"
  },
  {
    "label": "X509_print_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_print_fp(FILE *bp, X509 *x)"
  },
  {
    "label": "X509_CRL_print_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_print_fp(FILE *bp, X509_CRL *x)"
  },
  {
    "label": "X509_REQ_print_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_print_fp(FILE *bp, X509_REQ *req)"
  },
  {
    "label": "X509_NAME_print_ex_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_print_ex_fp(FILE *fp, const X509_NAME *nm, int indent, unsigned long flags)"
  },
  {
    "label": "X509_NAME_print()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "X509_NAME_print(BIO *bp, const X509_NAME *name, int obase)"
  },
  {
    "label": "X509_NAME_print_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_print_ex(BIO *out, const X509_NAME *nm, int indent, unsigned long flags)"
  },
  {
    "label": "X509_print_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_print_ex(BIO *bp, X509 *x, unsigned long nmflag, unsigned long cflag)"
  },
  {
    "label": "X509_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_print(BIO *bp, X509 *x)"
  },
  {
    "label": "X509_ocspid_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_ocspid_print(BIO *bp, X509 *x)"
  },
  {
    "label": "X509_CRL_print_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_print_ex(BIO *out, X509_CRL *x, unsigned long nmflag)"
  },
  {
    "label": "X509_CRL_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_print(BIO *bp, X509_CRL *x)"
  },
  {
    "label": "X509_REQ_print_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_print_ex(BIO *bp, X509_REQ *x, unsigned long nmflag, unsigned long cflag)"
  },
  {
    "label": "X509_REQ_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REQ_print(BIO *bp, X509_REQ *req)"
  },
  {
    "label": "X509_NAME_entry_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_entry_count(const X509_NAME *name)"
  },
  {
    "label": "X509_NAME_get_text_by_NID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_get_text_by_NID(X509_NAME *name, int nid, char *buf, int len)"
  },
  {
    "label": "X509_NAME_get_text_by_OBJ()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_get_text_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj, char *buf, int len)"
  },
  {
    "label": "X509_NAME_get_index_by_NID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_get_index_by_NID(X509_NAME *name, int nid, int lastpos)"
  },
  {
    "label": "X509_NAME_get_index_by_OBJ()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_get_index_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj, int lastpos)"
  },
  {
    "label": "X509_NAME_get_entry()",
    "kind": "Method",
    "detail": "Function (X509_NAME_ENTRY*)",
    "insertText": "X509_NAME_get_entry(const X509_NAME *name, int loc)"
  },
  {
    "label": "X509_NAME_delete_entry()",
    "kind": "Method",
    "detail": "Function (X509_NAME_ENTRY*)",
    "insertText": "X509_NAME_delete_entry(X509_NAME *name, int loc)"
  },
  {
    "label": "X509_NAME_add_entry()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_add_entry(X509_NAME *name, const X509_NAME_ENTRY *ne, int loc, int set)"
  },
  {
    "label": "X509_NAME_add_entry_by_OBJ()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_add_entry_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj, int type, const unsigned char *bytes, int len, int loc, int set)"
  },
  {
    "label": "X509_NAME_add_entry_by_NID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_add_entry_by_NID(X509_NAME *name, int nid, int type, const unsigned char *bytes, int len, int loc, int set)"
  },
  {
    "label": "X509_NAME_ENTRY_create_by_txt()",
    "kind": "Method",
    "detail": "Function (X509_NAME_ENTRY*)",
    "insertText": "X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY **ne, const char *field, int type, const unsigned char *bytes, int len)"
  },
  {
    "label": "X509_NAME_ENTRY_create_by_NID()",
    "kind": "Method",
    "detail": "Function (X509_NAME_ENTRY*)",
    "insertText": "X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY **ne, int nid, int type, const unsigned char *bytes, int len)"
  },
  {
    "label": "X509_NAME_add_entry_by_txt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_add_entry_by_txt(X509_NAME *name, const char *field, int type, const unsigned char *bytes, int len, int loc, int set)"
  },
  {
    "label": "X509_NAME_ENTRY_create_by_OBJ()",
    "kind": "Method",
    "detail": "Function (X509_NAME_ENTRY*)",
    "insertText": "X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY **ne, const ASN1_OBJECT *obj, int type, const unsigned char *bytes, int len)"
  },
  {
    "label": "X509_NAME_ENTRY_set_object()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_ENTRY_set_object(X509_NAME_ENTRY *ne, const ASN1_OBJECT *obj)"
  },
  {
    "label": "X509_NAME_ENTRY_set_data()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_ENTRY_set_data(X509_NAME_ENTRY *ne, int type, const unsigned char *bytes, int len)"
  },
  {
    "label": "X509_NAME_ENTRY_get_object()",
    "kind": "Method",
    "detail": "Function (ASN1_OBJECT*)",
    "insertText": "X509_NAME_ENTRY_get_object(const X509_NAME_ENTRY *ne)"
  },
  {
    "label": "X509_NAME_ENTRY_get_data()",
    "kind": "Method",
    "detail": "Function (ASN1_STRING*)",
    "insertText": "X509_NAME_ENTRY_get_data(const X509_NAME_ENTRY *ne)"
  },
  {
    "label": "X509_NAME_ENTRY_set()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_ENTRY_set(const X509_NAME_ENTRY *ne)"
  },
  {
    "label": "X509_NAME_get0_der()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_NAME_get0_der(X509_NAME *nm, const unsigned char **pder, size_t *pderlen)"
  },
  {
    "label": "X509v3_get_ext_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_get_ext_count(const STACK_OF(X509_EXTENSION) *x)"
  },
  {
    "label": "X509v3_get_ext_by_NID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_get_ext_by_NID(const STACK_OF(X509_EXTENSION) *x, int nid, int lastpos)"
  },
  {
    "label": "X509v3_get_ext_by_OBJ()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_get_ext_by_OBJ(const STACK_OF(X509_EXTENSION) *x, const ASN1_OBJECT *obj, int lastpos)"
  },
  {
    "label": "X509v3_get_ext_by_critical()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_get_ext_by_critical(const STACK_OF(X509_EXTENSION) *x, int crit, int lastpos)"
  },
  {
    "label": "X509v3_get_ext()",
    "kind": "Method",
    "detail": "Function (X509_EXTENSION*)",
    "insertText": "X509v3_get_ext(const STACK_OF(X509_EXTENSION) *x, int loc)"
  },
  {
    "label": "X509v3_delete_ext()",
    "kind": "Method",
    "detail": "Function (X509_EXTENSION*)",
    "insertText": "X509v3_delete_ext(STACK_OF(X509_EXTENSION) *x, int loc)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509_EXTENSION) *X509v3_add_ext(STACK_OF(X509_EXTENSION) **x, X509_EXTENSION *ex, int loc)"
  },
  {
    "label": "X509_get_ext_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_get_ext_count(const X509 *x)"
  },
  {
    "label": "X509_get_ext_by_NID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_get_ext_by_NID(const X509 *x, int nid, int lastpos)"
  },
  {
    "label": "X509_get_ext_by_OBJ()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_get_ext_by_OBJ(const X509 *x, const ASN1_OBJECT *obj, int lastpos)"
  },
  {
    "label": "X509_get_ext_by_critical()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_get_ext_by_critical(const X509 *x, int crit, int lastpos)"
  },
  {
    "label": "X509_get_ext()",
    "kind": "Method",
    "detail": "Function (X509_EXTENSION*)",
    "insertText": "X509_get_ext(const X509 *x, int loc)"
  },
  {
    "label": "X509_delete_ext()",
    "kind": "Method",
    "detail": "Function (X509_EXTENSION*)",
    "insertText": "X509_delete_ext(X509 *x, int loc)"
  },
  {
    "label": "X509_add_ext()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_add_ext(X509 *x, X509_EXTENSION *ex, int loc)"
  },
  {
    "label": "X509_get_ext_d2i()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "X509_get_ext_d2i(const X509 *x, int nid, int *crit, int *idx)"
  },
  {
    "label": "X509_add1_ext_i2d()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_add1_ext_i2d(X509 *x, int nid, void *value, int crit, unsigned long flags)"
  },
  {
    "label": "X509_CRL_get_ext_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_get_ext_count(const X509_CRL *x)"
  },
  {
    "label": "X509_CRL_get_ext_by_NID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_get_ext_by_NID(const X509_CRL *x, int nid, int lastpos)"
  },
  {
    "label": "X509_CRL_get_ext_by_OBJ()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_get_ext_by_OBJ(const X509_CRL *x, const ASN1_OBJECT *obj, int lastpos)"
  },
  {
    "label": "X509_CRL_get_ext_by_critical()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_get_ext_by_critical(const X509_CRL *x, int crit, int lastpos)"
  },
  {
    "label": "X509_CRL_get_ext()",
    "kind": "Method",
    "detail": "Function (X509_EXTENSION*)",
    "insertText": "X509_CRL_get_ext(const X509_CRL *x, int loc)"
  },
  {
    "label": "X509_CRL_delete_ext()",
    "kind": "Method",
    "detail": "Function (X509_EXTENSION*)",
    "insertText": "X509_CRL_delete_ext(X509_CRL *x, int loc)"
  },
  {
    "label": "X509_CRL_add_ext()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_add_ext(X509_CRL *x, X509_EXTENSION *ex, int loc)"
  },
  {
    "label": "X509_CRL_get_ext_d2i()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "X509_CRL_get_ext_d2i(const X509_CRL *x, int nid, int *crit, int *idx)"
  },
  {
    "label": "X509_CRL_add1_ext_i2d()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_CRL_add1_ext_i2d(X509_CRL *x, int nid, void *value, int crit, unsigned long flags)"
  },
  {
    "label": "X509_REVOKED_get_ext_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REVOKED_get_ext_count(const X509_REVOKED *x)"
  },
  {
    "label": "X509_REVOKED_get_ext_by_NID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REVOKED_get_ext_by_NID(const X509_REVOKED *x, int nid, int lastpos)"
  },
  {
    "label": "X509_REVOKED_get_ext_by_OBJ()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REVOKED_get_ext_by_OBJ(const X509_REVOKED *x, const ASN1_OBJECT *obj, int lastpos)"
  },
  {
    "label": "X509_REVOKED_get_ext_by_critical()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REVOKED_get_ext_by_critical(const X509_REVOKED *x, int crit, int lastpos)"
  },
  {
    "label": "X509_REVOKED_get_ext()",
    "kind": "Method",
    "detail": "Function (X509_EXTENSION*)",
    "insertText": "X509_REVOKED_get_ext(const X509_REVOKED *x, int loc)"
  },
  {
    "label": "X509_REVOKED_delete_ext()",
    "kind": "Method",
    "detail": "Function (X509_EXTENSION*)",
    "insertText": "X509_REVOKED_delete_ext(X509_REVOKED *x, int loc)"
  },
  {
    "label": "X509_REVOKED_add_ext()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REVOKED_add_ext(X509_REVOKED *x, X509_EXTENSION *ex, int loc)"
  },
  {
    "label": "X509_REVOKED_get_ext_d2i()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "X509_REVOKED_get_ext_d2i(const X509_REVOKED *x, int nid, int *crit, int *idx)"
  },
  {
    "label": "X509_REVOKED_add1_ext_i2d()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_REVOKED_add1_ext_i2d(X509_REVOKED *x, int nid, void *value, int crit, unsigned long flags)"
  },
  {
    "label": "X509_EXTENSION_create_by_NID()",
    "kind": "Method",
    "detail": "Function (X509_EXTENSION*)",
    "insertText": "X509_EXTENSION_create_by_NID(X509_EXTENSION **ex, int nid, int crit, ASN1_OCTET_STRING *data)"
  },
  {
    "label": "X509_EXTENSION_create_by_OBJ()",
    "kind": "Method",
    "detail": "Function (X509_EXTENSION*)",
    "insertText": "X509_EXTENSION_create_by_OBJ(X509_EXTENSION **ex, const ASN1_OBJECT *obj, int crit, ASN1_OCTET_STRING *data)"
  },
  {
    "label": "X509_EXTENSION_set_object()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_EXTENSION_set_object(X509_EXTENSION *ex, const ASN1_OBJECT *obj)"
  },
  {
    "label": "X509_EXTENSION_set_critical()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_EXTENSION_set_critical(X509_EXTENSION *ex, int crit)"
  },
  {
    "label": "X509_EXTENSION_set_data()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_EXTENSION_set_data(X509_EXTENSION *ex, ASN1_OCTET_STRING *data)"
  },
  {
    "label": "X509_EXTENSION_get_object()",
    "kind": "Method",
    "detail": "Function (ASN1_OBJECT*)",
    "insertText": "X509_EXTENSION_get_object(X509_EXTENSION *ex)"
  },
  {
    "label": "X509_EXTENSION_get_data()",
    "kind": "Method",
    "detail": "Function (ASN1_OCTET_STRING*)",
    "insertText": "X509_EXTENSION_get_data(X509_EXTENSION *ne)"
  },
  {
    "label": "X509_EXTENSION_get_critical()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_EXTENSION_get_critical(const X509_EXTENSION *ex)"
  },
  {
    "label": "X509at_get_attr_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509at_get_attr_count(const STACK_OF(X509_ATTRIBUTE) *x)"
  },
  {
    "label": "X509at_get_attr_by_NID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509at_get_attr_by_NID(const STACK_OF(X509_ATTRIBUTE) *x, int nid, int lastpos)"
  },
  {
    "label": "X509at_get_attr_by_OBJ()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509at_get_attr_by_OBJ(const STACK_OF(X509_ATTRIBUTE) *sk, const ASN1_OBJECT *obj, int lastpos)"
  },
  {
    "label": "X509at_get_attr()",
    "kind": "Method",
    "detail": "Function (X509_ATTRIBUTE*)",
    "insertText": "X509at_get_attr(const STACK_OF(X509_ATTRIBUTE) *x, int loc)"
  },
  {
    "label": "X509at_delete_attr()",
    "kind": "Method",
    "detail": "Function (X509_ATTRIBUTE*)",
    "insertText": "X509at_delete_attr(STACK_OF(X509_ATTRIBUTE) *x, int loc)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr(STACK_OF(X509_ATTRIBUTE) **x, X509_ATTRIBUTE *attr)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_OBJ(STACK_OF(X509_ATTRIBUTE) **x, const ASN1_OBJECT *obj, int type, const unsigned char *bytes, int len)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_NID(STACK_OF(X509_ATTRIBUTE) **x, int nid, int type, const unsigned char *bytes, int len)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_txt(STACK_OF(X509_ATTRIBUTE) **x, const char *attrname, int type, const unsigned char *bytes, int len)"
  },
  {
    "label": "X509at_get0_data_by_OBJ()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "X509at_get0_data_by_OBJ(const STACK_OF(X509_ATTRIBUTE) *x, const ASN1_OBJECT *obj, int lastpos, int type)"
  },
  {
    "label": "X509_ATTRIBUTE_create_by_NID()",
    "kind": "Method",
    "detail": "Function (X509_ATTRIBUTE*)",
    "insertText": "X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE **attr, int nid, int atrtype, const void *data, int len)"
  },
  {
    "label": "X509_ATTRIBUTE_create_by_OBJ()",
    "kind": "Method",
    "detail": "Function (X509_ATTRIBUTE*)",
    "insertText": "X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE **attr, const ASN1_OBJECT *obj, int atrtype, const void *data, int len)"
  },
  {
    "label": "X509_ATTRIBUTE_create_by_txt()",
    "kind": "Method",
    "detail": "Function (X509_ATTRIBUTE*)",
    "insertText": "X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE **attr, const char *atrname, int type, const unsigned char *bytes, int len)"
  },
  {
    "label": "X509_ATTRIBUTE_set1_object()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE *attr, const ASN1_OBJECT *obj)"
  },
  {
    "label": "X509_ATTRIBUTE_set1_data()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE *attr, int attrtype, const void *data, int len)"
  },
  {
    "label": "X509_ATTRIBUTE_get0_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE *attr, int idx, int atrtype, void *data)"
  },
  {
    "label": "X509_ATTRIBUTE_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_ATTRIBUTE_count(const X509_ATTRIBUTE *attr)"
  },
  {
    "label": "X509_ATTRIBUTE_get0_object()",
    "kind": "Method",
    "detail": "Function (ASN1_OBJECT*)",
    "insertText": "X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE *attr)"
  },
  {
    "label": "X509_ATTRIBUTE_get0_type()",
    "kind": "Method",
    "detail": "Function (ASN1_TYPE*)",
    "insertText": "X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE *attr, int idx)"
  },
  {
    "label": "EVP_PKEY_get_attr_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_get_attr_count(const EVP_PKEY *key)"
  },
  {
    "label": "EVP_PKEY_get_attr_by_NID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_get_attr_by_NID(const EVP_PKEY *key, int nid, int lastpos)"
  },
  {
    "label": "EVP_PKEY_get_attr_by_OBJ()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_get_attr_by_OBJ(const EVP_PKEY *key, const ASN1_OBJECT *obj, int lastpos)"
  },
  {
    "label": "EVP_PKEY_get_attr()",
    "kind": "Method",
    "detail": "Function (X509_ATTRIBUTE*)",
    "insertText": "EVP_PKEY_get_attr(const EVP_PKEY *key, int loc)"
  },
  {
    "label": "EVP_PKEY_delete_attr()",
    "kind": "Method",
    "detail": "Function (X509_ATTRIBUTE*)",
    "insertText": "EVP_PKEY_delete_attr(EVP_PKEY *key, int loc)"
  },
  {
    "label": "EVP_PKEY_add1_attr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_add1_attr(EVP_PKEY *key, X509_ATTRIBUTE *attr)"
  },
  {
    "label": "EVP_PKEY_add1_attr_by_OBJ()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY *key, const ASN1_OBJECT *obj, int type, const unsigned char *bytes, int len)"
  },
  {
    "label": "EVP_PKEY_add1_attr_by_NID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_add1_attr_by_NID(EVP_PKEY *key, int nid, int type, const unsigned char *bytes, int len)"
  },
  {
    "label": "EVP_PKEY_add1_attr_by_txt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_add1_attr_by_txt(EVP_PKEY *key, const char *attrname, int type, const unsigned char *bytes, int len)"
  },
  {
    "label": "X509_verify_cert()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_verify_cert(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_find_by_issuer_and_serial()",
    "kind": "Method",
    "detail": "Function (X509*)",
    "insertText": "X509_find_by_issuer_and_serial(STACK_OF(X509) *sk, X509_NAME *name, ASN1_INTEGER *serial)"
  },
  {
    "label": "X509_find_by_subject()",
    "kind": "Method",
    "detail": "Function (X509*)",
    "insertText": "X509_find_by_subject(STACK_OF(X509) *sk, X509_NAME *name)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(PBEPARAM) DECLARE_ASN1_FUNCTIONS(PBE2PARAM) DECLARE_ASN1_FUNCTIONS(PBKDF2PARAM) #ifndef OPENSSL_NO_SCRYPT DECLARE_ASN1_FUNCTIONS(SCRYPT_PARAMS) #endif int PKCS5_pbe_set0_algor(X509_ALGOR *algor, int alg, int iter, const unsigned char *salt, int saltlen)"
  },
  {
    "label": "PKCS5_pbe_set()",
    "kind": "Method",
    "detail": "Function (X509_ALGOR*)",
    "insertText": "PKCS5_pbe_set(int alg, int iter, const unsigned char *salt, int saltlen)"
  },
  {
    "label": "PKCS5_pbe2_set()",
    "kind": "Method",
    "detail": "Function (X509_ALGOR*)",
    "insertText": "PKCS5_pbe2_set(const EVP_CIPHER *cipher, int iter, unsigned char *salt, int saltlen)"
  },
  {
    "label": "PKCS5_pbe2_set_iv()",
    "kind": "Method",
    "detail": "Function (X509_ALGOR*)",
    "insertText": "PKCS5_pbe2_set_iv(const EVP_CIPHER *cipher, int iter, unsigned char *salt, int saltlen, unsigned char *aiv, int prf_nid)"
  },
  {
    "label": "PKCS5_pbe2_set_scrypt()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_SCRYPT X509_ALGOR*)",
    "insertText": "PKCS5_pbe2_set_scrypt(const EVP_CIPHER *cipher, const unsigned char *salt, int saltlen, unsigned char *aiv, uint64_t N, uint64_t r, uint64_t p)"
  },
  {
    "label": "PKCS5_pbkdf2_set()",
    "kind": "Method",
    "detail": "Function (# endif X509_ALGOR*)",
    "insertText": "PKCS5_pbkdf2_set(int iter, unsigned char *salt, int saltlen, int prf_nid, int keylen)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(PKCS8_PRIV_KEY_INFO) EVP_PKEY *EVP_PKCS82PKEY(const PKCS8_PRIV_KEY_INFO *p8)"
  },
  {
    "label": "EVP_PKEY2PKCS8()",
    "kind": "Method",
    "detail": "Function (PKCS8_PRIV_KEY_INFO*)",
    "insertText": "EVP_PKEY2PKCS8(EVP_PKEY *pkey)"
  },
  {
    "label": "PKCS8_pkey_set0()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS8_pkey_set0(PKCS8_PRIV_KEY_INFO *priv, ASN1_OBJECT *aobj, int version, int ptype, void *pval, unsigned char *penc, int penclen)"
  },
  {
    "label": "PKCS8_pkey_get0()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS8_pkey_get0(const ASN1_OBJECT **ppkalg, const unsigned char **pk, int *ppklen, const X509_ALGOR **pa, const PKCS8_PRIV_KEY_INFO *p8)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STACK_OF(X509_ATTRIBUTE) * PKCS8_pkey_get0_attrs(const PKCS8_PRIV_KEY_INFO *p8)"
  },
  {
    "label": "PKCS8_pkey_add1_attr_by_NID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS8_pkey_add1_attr_by_NID(PKCS8_PRIV_KEY_INFO *p8, int nid, int type, const unsigned char *bytes, int len)"
  },
  {
    "label": "X509_PUBKEY_set0_param()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_PUBKEY_set0_param(X509_PUBKEY *pub, ASN1_OBJECT *aobj, int ptype, void *pval, unsigned char *penc, int penclen)"
  },
  {
    "label": "X509_PUBKEY_get0_param()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_PUBKEY_get0_param(ASN1_OBJECT **ppkalg, const unsigned char **pk, int *ppklen, X509_ALGOR **pa, X509_PUBKEY *pub)"
  },
  {
    "label": "X509_check_trust()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_trust(X509 *x, int id, int flags)"
  },
  {
    "label": "X509_TRUST_get_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_TRUST_get_count(void)"
  },
  {
    "label": "X509_TRUST_get0()",
    "kind": "Method",
    "detail": "Function (X509_TRUST*)",
    "insertText": "X509_TRUST_get0(int idx)"
  },
  {
    "label": "X509_TRUST_get_by_id()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_TRUST_get_by_id(int id)"
  },
  {
    "label": "X509_TRUST_add()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_TRUST_add(int id, int flags, int (*ck) (X509_TRUST *, X509 *, int), const char *name, int arg1, void *arg2)"
  },
  {
    "label": "X509_TRUST_cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_TRUST_cleanup(void)"
  },
  {
    "label": "X509_TRUST_get_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_TRUST_get_flags(const X509_TRUST *xp)"
  },
  {
    "label": "X509_TRUST_get0_name()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "X509_TRUST_get0_name(const X509_TRUST *xp)"
  },
  {
    "label": "X509_TRUST_get_trust()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_TRUST_get_trust(const X509_TRUST *xp)"
  }
]