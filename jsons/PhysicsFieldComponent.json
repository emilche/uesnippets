[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPhysicsFieldInfos",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysicsFieldInfos"
  },
  {
    "label": "FPhysicsFieldResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsFieldResource"
  },
  {
    "label": "FPhysicsFieldInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsFieldInstance"
  },
  {
    "label": "UPhysicsFieldComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsFieldComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "FPhysicsFieldSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsFieldSceneProxy"
  },
  {
    "label": "UPhysicsFieldStatics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsFieldStatics"
  },
  {
    "label": "FPhysicsFieldResource()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Components / PrimitiveComponent . h \" # include \" Field / FieldSystem . h \" # include \" UObject / ObjectMacros . h \" # include \" RHI . h \" # include \" RHIUtilities . h \" # include \" RenderResource . h \" # include \" PrimitiveSceneProxy . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" PhysicsFieldComponent . generated . h \" enum class EFieldCommandBuffer : uint8 { GPUFieldBuffer = 0,CPUReadBuffer = 1,CPUWriteBuffer = 2,GPUDebugBuffer = 3,NumFieldBuffers = 4 } ; struct FPhysicsFieldInfos { using BufferOffsets = TStaticArray<int32,MAX_PHYSICS_FIELD_TARGETS,1 6> ; int32 TargetCount = 1 ; TArray<EFieldPhysicsType> TargetTypes ; BufferOffsets VectorTargets ; BufferOffsets ScalarTargets ; BufferOffsets IntegerTargets ; BufferOffsets PhysicsTargets ; BufferOffsets ValidTargets ; TStaticArray<FIntVector4,MAX_PHYSICS_FIELD_TARGETS,1 6> PhysicsBounds ; FVector ClipmapCenter = FVector::ZeroVector ; float ClipmapDistance = 1 0 0 0 0 ; int32 ValidCount = 0 ; int32 ClipmapCount = 4 ; int32 ClipmapExponent = 2 ; int32 ClipmapResolution = 6 4 ; FVector ViewOrigin = FVector::ZeroVector ; TArray<int32> CellsOffsets ; TArray<FIntVector4> CellsMin ; TArray<FIntVector4> CellsMax ; TStaticArray<int32,MAX_PHYSICS_FIELD_TARGETS,1 6> BoundsOffsets ; float TimeSeconds ; bool bBuildClipmap ; bool bShowFields ; } ; class FPhysicsFieldResource : public FRenderResource { public : FRWBuffer ClipmapBuffer ; FRWBuffer NodesParams ; FRWBuffer NodesOffsets ; FRWBuffer TargetsOffsets ; FRWBuffer CellsOffsets ; FRWBuffer CellsMin ; FRWBuffer CellsMax ; FRWBuffer BoundsMin ; FRWBuffer BoundsMax ; FPhysicsFieldInfos FieldInfos ;)",
    "insertText": "FPhysicsFieldResource(const int32 TargetCount, const TArray<EFieldPhysicsType>& TargetTypes, const FPhysicsFieldInfos::BufferOffsets& VectorTargets, const FPhysicsFieldInfos::BufferOffsets& ScalarTargets, const FPhysicsFieldInfos::BufferOffsets& IntegerTargets, const FPhysicsFieldInfos::BufferOffsets& PhysicsTargets, const TStaticArray< FIntVector4, MAX_PHYSICS_FIELD_TARGETS, 16>& PhysicsBounds, const bool bBuildClipmap)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "UpdateResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResource(FRHICommandList& RHICmdList, const TStaticArray<int32, EFieldPhysicsType::Field_PhysicsType_Max + 1>& TargetsOffsetsDatas, const TArray<int32>& NodesOffsetsDatas, const TArray<float>& NodesParamsDatas, const TArray<FVector>& TargetsMinDatas, const TArray<FVector>& TargetsMaxDatas, const float TimeSeconds, const TArray<FVector4>& BoundsMinDatas, const TArray<FVector4>& BoundsMaxDatas, const TStaticArray<int32, EFieldPhysicsType::Field_PhysicsType_Max + 1>& BoundsOffsetsDatas)"
  },
  {
    "label": "UpdateBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBounds(const TArray<FVector>& TargetsMin, const TArray<FVector>& TargetsMax, const TStaticArray<int32, EFieldPhysicsType::Field_PhysicsType_Max + 1>& TargetOffsets, const TStaticArray<int32, EFieldPhysicsType::Field_PhysicsType_Max + 1>& BoundsOffsets)"
  },
  {
    "label": "FPhysicsFieldInstance()",
    "kind": "Method",
    "detail": "Function (} ; class FPhysicsFieldInstance { public :)",
    "insertText": "FPhysicsFieldInstance() : FieldResource(nullptr)"
  },
  {
    "label": "FPhysicsFieldInstance()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPhysicsFieldInstance()"
  },
  {
    "label": "InitInstance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitInstance(const TArray<EFieldPhysicsType>& TargetTypes, const bool bBuildClipmap)"
  },
  {
    "label": "ReleaseInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseInstance()"
  },
  {
    "label": "UpdateInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInstance(const float TimeSeconds, const bool bIsDebugBuffer)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (FPhysicsFieldResource* FieldResource = nullptr ; TStaticArray<int32,EFieldPhysicsType::Field_PhysicsType_Max + 1> TargetsOffsets ; TStaticArray<int32,EFieldPhysicsType::Field_PhysicsType_Max + 1> BoundsOffsets ; TArray<int32> NodesOffsets ; TArray<float> NodesParams ; TArray<FVector4> BoundsMin ; TArray<FVector4> BoundsMax ; TArray<FFieldSystemCommand> FieldCommands ; TArray<FVector> TargetsMin ; TArray<FVector> TargetsMax ; } ;)",
    "insertText": "UCLASS(meta = (BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API UPhysicsFieldComponent()"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)"
  },
  {
    "label": "SendRenderDynamicData_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderDynamicData_Concurrent()"
  },
  {
    "label": "CreateRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRenderState_Concurrent(FRegisterComponentContext* Context)"
  },
  {
    "label": "DestroyRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRenderState_Concurrent()"
  },
  {
    "label": "AddTransientCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTransientCommand(const FFieldSystemCommand& FieldCommand, const bool bIsGPUField)"
  },
  {
    "label": "AddPersistentCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPersistentCommand(const FFieldSystemCommand& FieldCommand, const bool bIsGPUField)"
  },
  {
    "label": "AddConstructionCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstructionCommand(const FFieldSystemCommand& FieldCommand)"
  },
  {
    "label": "RemoveTransientCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTransientCommand(const FFieldSystemCommand& FieldCommand, const bool bIsGPUField)"
  },
  {
    "label": "RemovePersistentCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePersistentCommand(const FFieldSystemCommand& FieldCommand, const bool bIsGPUField)"
  },
  {
    "label": "FillTransientCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillTransientCommands(const bool bIsWorldField, const FBox& BoundingBox, const float TimeSeconds, TArray<FFieldSystemCommand>& OutputCommands)"
  },
  {
    "label": "FillPersistentCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillPersistentCommands(const bool bIsWorldField, const FBox& BoundingBox, const float TimeSeconds, TArray<FFieldSystemCommand>& OutputCommands)"
  },
  {
    "label": "BuildCommandBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildCommandBounds(FFieldSystemCommand& FieldCommand)"
  },
  {
    "label": "TransientCommands()",
    "kind": "Method",
    "detail": "Function (TArray<FFieldSystemCommand>)",
    "insertText": "TransientCommands(uint8)(EFieldCommandBuffer::NumFieldBuffers)"
  },
  {
    "label": "PersistentCommands()",
    "kind": "Method",
    "detail": "Function (TArray<FFieldSystemCommand>)",
    "insertText": "PersistentCommands(uint8)(EFieldCommandBuffer::NumFieldBuffers)"
  },
  {
    "label": "ConstructionCommands()",
    "kind": "Method",
    "detail": "Function (TArray<FFieldSystemCommand>)",
    "insertText": "ConstructionCommands(uint8)(EFieldCommandBuffer::NumFieldBuffers)"
  },
  {
    "label": "GetFieldIndex()",
    "kind": "Method",
    "detail": "Function (FPhysicsFieldInstance* FieldInstance = nullptr ; FPhysicsFieldInstance* DebugInstance = nullptr ; class FPhysicsFieldSceneProxy* FieldProxy = nullptr ; } ; void)",
    "insertText": "GetFieldIndex(const uint32 FieldType, int32& FieldIndex, EFieldOutputType& FieldOutput)"
  },
  {
    "label": "FPhysicsFieldSceneProxy()",
    "kind": "Method",
    "detail": "Function (class FPhysicsFieldSceneProxy { public :)",
    "insertText": "FPhysicsFieldSceneProxy(class UPhysicsFieldComponent* PhysicsFieldComponent)"
  },
  {
    "label": "FPhysicsFieldSceneProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPhysicsFieldSceneProxy()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (FPhysicsFieldResource* FieldResource = nullptr ; FPhysicsFieldResource* DebugResource = nullptr ; } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UFUNCTION(BlueprintCallable, Category=\"Field\", meta=(WorldContext=\"WorldContextObject\")) static ENGINE_API FVector EvalPhysicsVectorField(const UObject* WorldContextObject, const FVector& WorldPosition, const EFieldVectorType VectorType)"
  },
  {
    "label": "EvaluateFieldVectorNodes()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "EvaluateFieldVectorNodes(TArray<FFieldSystemCommand>& FieldCommands, const EFieldPhysicsType FieldType, FFieldContext& FieldContext, TArray<FVector>& ResultsArray, TArray<FVector>& MaxArray)"
  },
  {
    "label": "EvaluateFieldScalarNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateFieldScalarNodes(TArray<FFieldSystemCommand>& FieldCommands, const EFieldPhysicsType FieldType, FFieldContext& FieldContext, TArray<float>& ResultsArray, TArray<float>& MaxArray)"
  },
  {
    "label": "EvaluateFieldIntegerNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateFieldIntegerNodes(TArray<FFieldSystemCommand>& FieldCommands, const EFieldPhysicsType FieldType, FFieldContext& FieldContext, TArray<int32>& ResultsArray, TArray<int32>& MaxArray)"
  }
]