[
  {
    "label": "RenderBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RenderBuffer"
  },
  {
    "label": "RenderBuffer()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_RENDER_BUFFER_H_ # define MODULES_AUDIO_PROCESSING_AEC3_RENDER_BUFFER_H_ # include<stddef . h> # include<array> # include<vector> # include \" api / array_view . h \" # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" modules / audio_processing / aec3 / block_buffer . h \" # include \" modules / audio_processing / aec3 / fft_buffer . h \" # include \" modules / audio_processing / aec3 / fft_data . h \" # include \" modules / audio_processing / aec3 / spectrum_buffer . h \" # include \" rtc_base / checks . h \" namespace webrtc { class RenderBuffer { public :)",
    "insertText": "RenderBuffer(BlockBuffer* block_buffer, SpectrumBuffer* spectrum_buffer, FftBuffer* fft_buffer)"
  },
  {
    "label": "RenderBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderBuffer()"
  },
  {
    "label": "RenderBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderBuffer(const RenderBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RenderBuffer&)",
    "insertText": "operator(const RenderBuffer&)"
  },
  {
    "label": "GetBlock()",
    "kind": "Method",
    "detail": "Function (const Block&)",
    "insertText": "GetBlock(int buffer_offset_blocks)"
  },
  {
    "label": "OffsetIndex()",
    "kind": "Method",
    "detail": "Function (int position = block_buffer_ ->)",
    "insertText": "OffsetIndex(block_buffer_->read, buffer_offset_blocks)"
  },
  {
    "label": "OffsetIndex()",
    "kind": "Method",
    "detail": "Function (int position = spectrum_buffer_ ->)",
    "insertText": "OffsetIndex(spectrum_buffer_->read, buffer_offset_ffts)"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(spectrum_buffer_->read, fft_buffer_->read)"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(spectrum_buffer_->write, fft_buffer_->write)"
  },
  {
    "label": "SpectralSums()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpectralSums(size_t num_spectra_shorter, size_t num_spectra_longer, std::array<float, kFftLengthBy2Plus1>* X2_shorter, std::array<float, kFftLengthBy2Plus1>* X2_longer)"
  },
  {
    "label": "GetRenderActivity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRenderActivity()"
  },
  {
    "label": "Headroom()",
    "kind": "Method",
    "detail": "Function (render_activity_ = activity ; } int)",
    "insertText": "Headroom()"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (int headroom = fft_buffer_ -> write<fft_buffer_ -> read ? fft_buffer_ -> read - fft_buffer_ -> write : fft_buffer_ -> size - fft_buffer_ -> write + fft_buffer_ -> read ;)",
    "insertText": "RTC_DCHECK_LE(0, headroom)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GE(fft_buffer_->size, headroom)"
  }
]