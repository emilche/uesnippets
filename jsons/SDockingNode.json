[
  {
    "label": "SDockingArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingArea"
  },
  {
    "label": "SDockingSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingSplitter"
  },
  {
    "label": "SDockingNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingNode"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "RelativeDirection",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RelativeDirection"
  },
  {
    "label": "FOverlayManagement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlayManagement"
  },
  {
    "label": "ELayoutModification",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELayoutModification"
  },
  {
    "label": "ECleanupRetVal",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECleanupRetVal"
  },
  {
    "label": "FOverlayManagement()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Framework / Docking / TabManager . h \" # include \" Widgets / Layout / SSplitter . h \" class SDockingArea ; class SDockingSplitter ; class SDockingNode : public SCompoundWidget { public : enum Type { DockTabStack,DockSplitter,DockArea,PlaceholderNode } ; enum RelativeDirection { LeftOf,Above,RightOf,Below,Center } ; struct FOverlayManagement {)",
    "insertText": "FOverlayManagement() : bShowingCross(false)"
  },
  {
    "label": "GetNodeType()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SOverlay> ContentAreaOverlay ; bool bShowingCross ; } ; Type)",
    "insertText": "GetNodeType()"
  },
  {
    "label": "SetParentNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentNode(TSharedRef<SDockingSplitter> InParent)"
  },
  {
    "label": "GetDockArea()",
    "kind": "Method",
    "detail": "Function (ParentNodePtr = InParent ; } enum ELayoutModification { TabRemoval_DraggedOut,TabRemoval_Closed,TabRemoval_Sidebar,TabRemoval_None } ; TSharedPtr<SDockingArea>)",
    "insertText": "GetDockArea()"
  },
  {
    "label": "GetAllChildTabs()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<SDockTab>>)",
    "insertText": "GetAllChildTabs()"
  },
  {
    "label": "GetNumTabs()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumTabs()"
  },
  {
    "label": "GetSizeRule()",
    "kind": "Method",
    "detail": "Function (SSplitter::ESizeRule)",
    "insertText": "GetSizeRule()"
  },
  {
    "label": "SetSizeCoefficient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizeCoefficient(float InSizeCoefficient)"
  },
  {
    "label": "GatherPersistentLayout()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTabManager::FLayoutNode>)",
    "insertText": "GatherPersistentLayout()"
  },
  {
    "label": "CleanUpNodes()",
    "kind": "Method",
    "detail": "Function (enum ECleanupRetVal { VisibleTabsUnderNode,HistoryTabsUnderNode,NoTabsUnderNode } ; SDockingNode::ECleanupRetVal)",
    "insertText": "CleanUpNodes()"
  },
  {
    "label": "OnLiveTabAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLiveTabAdded()"
  },
  {
    "label": "OnResized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResized()"
  }
]