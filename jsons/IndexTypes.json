[
  {
    "label": "FIndex2i",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndex2i"
  },
  {
    "label": "FIndex3i",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndex3i"
  },
  {
    "label": "FIndex4i",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndex4i"
  },
  {
    "label": "TCanBulkSerialize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCanBulkSerialize"
  },
  {
    "label": "FIndex2i()",
    "kind": "Method",
    "detail": "Function (IndexConstants::InvalidID,IndexConstants::InvalidID } ; } ;)",
    "insertText": "FIndex2i()"
  },
  {
    "label": "FIndex2i()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIndex2i(int ValA, int ValB) : A(ValA), B(ValB)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (} FIndex2i)",
    "insertText": "Zero()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} FIndex2i)",
    "insertText": "Max()"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (} FIndex2i)",
    "insertText": "Invalid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} int&)",
    "insertText": "operator(int Idx)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return AB [ Idx ] ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } bool)",
    "insertText": "operator(const FIndex2i& Other)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(int Value)"
  },
  {
    "label": "OtherElement()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "OtherElement(int Value)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(A, B)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Sort()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FArchive&)",
    "insertText": "operator(FArchive& Ar, FIndex2i& I)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (I .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (Ar<<A ; Ar<<B ; } } ; uint32)",
    "insertText": "GetTypeHash(const FIndex2i& Index)"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (IndexConstants::InvalidID,IndexConstants::InvalidID,IndexConstants::InvalidID } ; } ;)",
    "insertText": "FIndex3i()"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIndex3i(int ValA, int ValB, int ValC) : A(ValA), B(ValB), C(ValC)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return ABC [ Idx ] ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } bool)",
    "insertText": "operator(const FIndex3i& Other)"
  },
  {
    "label": "GetCycled()",
    "kind": "Method",
    "detail": "Function (} FIndex3i)",
    "insertText": "GetCycled(int32 WantIndex0Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(C == WantIndex0Value)"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FIndex3i(A,B,C)"
  },
  {
    "label": "FIntVector()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FIntVector()"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIndex3i(const FIntVector& Vec)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (A = Vec . X ; B = Vec . Y ; C = Vec . Z ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FIndex3i& I)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (Ar<<A ; Ar<<B ; Ar<<C ; } } ; uint32)",
    "insertText": "GetTypeHash(const FIndex3i& Index)"
  },
  {
    "label": "FIndex4i()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FIndex4i()"
  },
  {
    "label": "FIndex4i()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIndex4i(int ValA, int ValB, int ValC, int ValD)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return ABCD [ Idx ] ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } bool)",
    "insertText": "operator(const FIndex4i& Other)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(int Idx)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (Ar<<A ; Ar<<B ; Ar<<C ; Ar<<D ; } } ; uint32)",
    "insertText": "GetTypeHash(const FIndex4i& Index)"
  }
]