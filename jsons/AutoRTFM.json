[
  {
    "label": "TFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunction"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "THasAssignFromOpenToClosedMethod",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "THasAssignFromOpenToClosedMethod"
  },
  {
    "label": "TAssignFromOpenToClosed",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAssignFromOpenToClosed"
  },
  {
    "label": "THasAssignFromOpenToClosedTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "THasAssignFromOpenToClosedTrait"
  },
  {
    "label": "FCallHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCallHelper"
  },
  {
    "label": "EAutoRTFMEnabledState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAutoRTFMEnabledState"
  },
  {
    "label": "EAutoRTFMRetryTransactionState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAutoRTFMRetryTransactionState"
  },
  {
    "label": "FRegisterOpenFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRegisterOpenFunction"
  },
  {
    "label": "FOpenHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenHelper"
  },
  {
    "label": "FOnAbortHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnAbortHelper"
  },
  {
    "label": "FOnCommitHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnCommitHelper"
  },
  {
    "label": "FTransactHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransactHelper"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once #)",
    "insertText": "if(defined(__AUTORTFM) && __AUTORTFM) #define UE_AUTORTFM 1 #else #define UE_AUTORTFM 0 #endif #if (defined(__AUTORTFM_ENABLED) && __AUTORTFM_ENABLED) #define UE_AUTORTFM_ENABLED 1 #else #define UE_AUTORTFM_ENABLED 0 #endif #if !defined(UE_AUTORTFM_ENABLED_RUNTIME_BY_DEFAULT) #define UE_AUTORTFM_ENABLED_RUNTIME_BY_DEFAULT 1 #endif #if UE_AUTORTFM #if defined(__has_feature) #if __has_feature(autostm) #define UE_AUTOSTM 1 #endif #endif #endif #if !defined(UE_AUTOSTM) #define UE_AUTOSTM 0 #endif #if !defined(UE_AUTORTFM_STATIC_VERIFIER) #define UE_AUTORTFM_STATIC_VERIFIER 0 #endif #if UE_AUTORTFM #define UE_AUTORTFM_NOAUTORTFM [[clang::noautortfm, clang::noinline]] #define UE_AUTORTFM_ALWAYS_OPEN [[clang::autortfm_always_open, clang::noinline]] #define UE_AUTORTFM_CALLSITE_FORCEINLINE [[clang::always_inline]] #else #define UE_AUTORTFM_NOAUTORTFM #define UE_AUTORTFM_ALWAYS_OPEN #define UE_AUTORTFM_CALLSITE_FORCEINLINE #endif #if UE_AUTORTFM && UE_AUTORTFM_STATIC_VERIFIER #define UE_AUTORTFM_ENSURE_SAFE [[clang::autortfm_ensure_safe]] #define UE_AUTORTFM_ASSUME_SAFE [[clang::autortfm_assume_safe]] #else #define UE_AUTORTFM_ENSURE_SAFE #define UE_AUTORTFM_ASSUME_SAFE #endif #if defined(UE_AUTORTFM_STANDALONE)"
  },
  {
    "label": "UE_AUTORTFM_UNUSED()",
    "kind": "Method",
    "detail": "Function (# endif # define)",
    "insertText": "UE_AUTORTFM_UNUSED(UNUSEDVAR) (void)"
  },
  {
    "label": "autortfm_is_closed()",
    "kind": "Method",
    "detail": "Function (# endif typedef enum { autortfm_aborted_by_request = 0,autortfm_aborted_by_language,autortfm_committed,autortfm_aborted_by_transact_in_on_commit,autortfm_aborted_by_transact_in_on_abort,autortfm_aborted_by_cascade,} autortfm_result ; typedef enum { autortfm_status_idle,autortfm_status_ontrack,autortfm_status_aborted_by_failed_lock_aquisition,autortfm_status_aborted_by_language,autortfm_status_aborted_by_request,autortfm_status_committing,autortfm_status_aborted_by_cascade } autortfm_status ; # if UE_AUTORTFM_ENABLED bool)",
    "insertText": "autortfm_is_closed(void)"
  },
  {
    "label": "autortfm_is_transactional()",
    "kind": "Method",
    "detail": "Function (# else UE_AUTORTFM_FORCEINLINE bool)",
    "insertText": "autortfm_is_transactional(void)"
  },
  {
    "label": "autortfm_is_committing_or_aborting()",
    "kind": "Method",
    "detail": "Function (# else UE_AUTORTFM_FORCEINLINE bool)",
    "insertText": "autortfm_is_committing_or_aborting(void)"
  },
  {
    "label": "autortfm_transact()",
    "kind": "Method",
    "detail": "Function (# else UE_AUTORTFM_FORCEINLINE autortfm_result)",
    "insertText": "autortfm_transact(void (*UninstrumentedWork)(void*), void (*InstrumentedWork)(void*), void* Arg)"
  },
  {
    "label": "UE_AUTORTFM_UNUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_AUTORTFM_UNUSED(InstrumentedWork)"
  },
  {
    "label": "UninstrumentedWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninstrumentedWork(Arg)"
  },
  {
    "label": "autortfm_transact_then_open()",
    "kind": "Method",
    "detail": "Function (# else UE_AUTORTFM_FORCEINLINE autortfm_result)",
    "insertText": "autortfm_transact_then_open(void (*UninstrumentedWork)(void*), void (*InstrumentedWork)(void*), void* Arg)"
  },
  {
    "label": "autortfm_commit()",
    "kind": "Method",
    "detail": "Function (# else UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "autortfm_commit(void (*UninstrumentedWork)(void*), void (*InstrumentedWork)(void*), void* Arg)"
  },
  {
    "label": "autortfm_abort_transaction()",
    "kind": "Method",
    "detail": "Function (} # endif # if UE_AUTORTFM_ENABLED autortfm_result)",
    "insertText": "autortfm_abort_transaction()"
  },
  {
    "label": "autortfm_cascading_abort_transaction()",
    "kind": "Method",
    "detail": "Function (# else UE_AUTORTFM_FORCEINLINE autortfm_result)",
    "insertText": "autortfm_cascading_abort_transaction()"
  },
  {
    "label": "autortfm_start_transaction()",
    "kind": "Method",
    "detail": "Function (# else UE_AUTORTFM_FORCEINLINE bool)",
    "insertText": "autortfm_start_transaction()"
  },
  {
    "label": "autortfm_commit_transaction()",
    "kind": "Method",
    "detail": "Function (# else UE_AUTORTFM_FORCEINLINE autortfm_result)",
    "insertText": "autortfm_commit_transaction()"
  },
  {
    "label": "autortfm_clear_transaction_status()",
    "kind": "Method",
    "detail": "Function (# else UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "autortfm_clear_transaction_status()"
  },
  {
    "label": "autortfm_abort_if_transactional()",
    "kind": "Method",
    "detail": "Function (} # endif # if UE_AUTORTFM_ENABLED UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "autortfm_abort_if_transactional(void)"
  },
  {
    "label": "autortfm_abort_if_closed()",
    "kind": "Method",
    "detail": "Function (} # endif # if UE_AUTORTFM_ENABLED UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "autortfm_abort_if_closed(void)"
  },
  {
    "label": "autortfm_open()",
    "kind": "Method",
    "detail": "Function (} # endif # if UE_AUTORTFM_ENABLED void)",
    "insertText": "autortfm_open(void (*work)(void* arg), void* arg)"
  },
  {
    "label": "work()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "work(arg)"
  },
  {
    "label": "autortfm_close()",
    "kind": "Method",
    "detail": "Function (} # endif # if UE_AUTORTFM_ENABLED [ [ nodiscard ] ] autortfm_status)",
    "insertText": "autortfm_close(void (*UninstrumentedWork)(void*), void (*InstrumentedWork)(void*), void* Arg)"
  },
  {
    "label": "UE_AUTORTFM_UNUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_AUTORTFM_UNUSED(UninstrumentedWork)"
  },
  {
    "label": "UE_AUTORTFM_UNUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_AUTORTFM_UNUSED(Arg)"
  },
  {
    "label": "abort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "abort()"
  },
  {
    "label": "autortfm_record_open_write()",
    "kind": "Method",
    "detail": "Function (# else UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "autortfm_record_open_write(void* Ptr, size_t Size)"
  },
  {
    "label": "UE_AUTORTFM_UNUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_AUTORTFM_UNUSED(Ptr)"
  },
  {
    "label": "UE_AUTORTFM_UNUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_AUTORTFM_UNUSED(Size)"
  },
  {
    "label": "autortfm_register_open_function()",
    "kind": "Method",
    "detail": "Function (} # endif # if UE_AUTORTFM_ENABLED void)",
    "insertText": "autortfm_register_open_function(void* original_function, void* new_function)"
  },
  {
    "label": "UE_AUTORTFM_UNUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_AUTORTFM_UNUSED(original_function)"
  },
  {
    "label": "UE_AUTORTFM_UNUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_AUTORTFM_UNUSED(new_function)"
  },
  {
    "label": "autortfm_is_on_current_transaction_stack()",
    "kind": "Method",
    "detail": "Function (} # endif # if UE_AUTORTFM_ENABLED bool)",
    "insertText": "autortfm_is_on_current_transaction_stack(void* Ptr)"
  },
  {
    "label": "autortfm_on_commit()",
    "kind": "Method",
    "detail": "Function (# else UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "autortfm_on_commit(void (*work)(void* arg), void* arg)"
  },
  {
    "label": "autortfm_on_abort()",
    "kind": "Method",
    "detail": "Function (} # endif # if UE_AUTORTFM_ENABLED void)",
    "insertText": "autortfm_on_abort(void (*work)(void* arg), void* arg)"
  },
  {
    "label": "UE_AUTORTFM_UNUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_AUTORTFM_UNUSED(work)"
  },
  {
    "label": "UE_AUTORTFM_UNUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_AUTORTFM_UNUSED(arg)"
  },
  {
    "label": "autortfm_push_on_abort_handler()",
    "kind": "Method",
    "detail": "Function (} # endif # if UE_AUTORTFM_ENABLED void)",
    "insertText": "autortfm_push_on_abort_handler(const void* key, void (*work)(void* arg), void* arg)"
  },
  {
    "label": "autortfm_pop_on_abort_handler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "autortfm_pop_on_abort_handler(const void* key)"
  },
  {
    "label": "UE_AUTORTFM_UNUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_AUTORTFM_UNUSED(key)"
  },
  {
    "label": "autortfm_did_allocate()",
    "kind": "Method",
    "detail": "Function (} # endif # if UE_AUTORTFM_ENABLED void*)",
    "insertText": "autortfm_did_allocate(void* ptr, size_t size)"
  },
  {
    "label": "UE_AUTORTFM_UNUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_AUTORTFM_UNUSED(size)"
  },
  {
    "label": "autortfm_did_free()",
    "kind": "Method",
    "detail": "Function (# else UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "autortfm_did_free(void* ptr)"
  },
  {
    "label": "UE_AUTORTFM_UNUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_AUTORTFM_UNUSED(ptr)"
  },
  {
    "label": "autortfm_check_consistency_assuming_no_races()",
    "kind": "Method",
    "detail": "Function (} # endif # if UE_AUTORTFM_ENABLED void)",
    "insertText": "autortfm_check_consistency_assuming_no_races(void)"
  },
  {
    "label": "autortfm_check_abi()",
    "kind": "Method",
    "detail": "Function (} # endif # if UE_AUTORTFM_ENABLED void)",
    "insertText": "autortfm_check_abi(void* ptr, size_t size)"
  },
  {
    "label": "OnCommitInternal()",
    "kind": "Method",
    "detail": "Function (} # endif # ifdef __cplusplus } # include<algorithm> # include<initializer_list> # include<tuple> namespace AutoRTFM { enum class ETransactionResult { AbortedByRequest = autortfm_aborted_by_request,AbortedByLanguage = autortfm_aborted_by_language,Committed = autortfm_committed,AbortedByTransactInOnCommit = autortfm_aborted_by_transact_in_on_commit,AbortedByTransactInOnAbort = autortfm_aborted_by_transact_in_on_abort,AbortedByCascade = autortfm_aborted_by_cascade } ; enum class EContextStatus : uint8_t { Idle = autortfm_status_idle,OnTrack = autortfm_status_ontrack,AbortedByFailedLockAcquisition = autortfm_status_aborted_by_failed_lock_aquisition,AbortedByLanguage = autortfm_status_aborted_by_language,AbortedByRequest = autortfm_status_aborted_by_request,Committing = autortfm_status_committing,AbortedByCascade = autortfm_status_aborted_by_cascade } ; # if UE_AUTORTFM namespace ForTheRuntime { void)",
    "insertText": "OnCommitInternal(TFunction<void()>&& Work)"
  },
  {
    "label": "OnAbortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAbortInternal(TFunction<void()>&& Work)"
  },
  {
    "label": "PushOnAbortHandlerInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushOnAbortHandlerInternal(const void* Key, TFunction<void()>&& Work)"
  },
  {
    "label": "PopOnAbortHandlerInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopOnAbortHandlerInternal(const void* Key)"
  },
  {
    "label": "PopAllOnAbortHandlersInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopAllOnAbortHandlersInternal(const void* Key)"
  },
  {
    "label": "AutoRTFMFunctorInvoker()",
    "kind": "Method",
    "detail": "Function (} # endif template<TFunctor> void)",
    "insertText": "AutoRTFMFunctorInvoker(void* Arg)"
  },
  {
    "label": "autortfm_lookup_function()",
    "kind": "Method",
    "detail": "Function (} # if UE_AUTORTFM \" C \" void*)",
    "insertText": "autortfm_lookup_function(void* OriginalFunction, const char* Where)"
  },
  {
    "label": "AutoRTFMLookupInstrumentedFunctorInvoker()",
    "kind": "Method",
    "detail": "Function (template<TFunctor> auto)",
    "insertText": "AutoRTFMLookupInstrumentedFunctorInvoker(const TFunctor& Functor) -> void(*)(void*)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*Result)(void*) = reinterpret_cast<void(*)(void*)>(autortfm_lookup_function(reinterpret_cast<void*>(&AutoRTFMFunctorInvoker<TFunctor>), \"AutoRTFMLookupInstrumentedFunctorInvoker\"))"
  },
  {
    "label": "IsClosed()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE bool)",
    "insertText": "IsClosed()"
  },
  {
    "label": "IsCommittingOrAborting()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE bool)",
    "insertText": "IsCommittingOrAborting()"
  },
  {
    "label": "IsOnCurrentTransactionStack()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE bool)",
    "insertText": "IsOnCurrentTransactionStack(void* Ptr)"
  },
  {
    "label": "Transact()",
    "kind": "Method",
    "detail": "Function (} template<TFunctor> UE_AUTORTFM_FORCEINLINE ETransactionResult)",
    "insertText": "Transact(const TFunctor& Functor)"
  },
  {
    "label": "ETransactionResult()",
    "kind": "Method",
    "detail": "Function (ETransactionResult Result = static_cast<)",
    "insertText": "ETransactionResult(autortfm_transact( &AutoRTFMFunctorInvoker<TFunctor>, AutoRTFMLookupInstrumentedFunctorInvoker<TFunctor>(Functor), const_cast<void*>(static_cast<const void*>(&Functor))))"
  },
  {
    "label": "ETransactionResult()",
    "kind": "Method",
    "detail": "Function (ETransactionResult Result = static_cast<)",
    "insertText": "ETransactionResult(autortfm_transact_then_open( &AutoRTFMFunctorInvoker<TFunctor>, AutoRTFMLookupInstrumentedFunctorInvoker<TFunctor>(Functor), const_cast<void*>(static_cast<const void*>(&Functor))))"
  },
  {
    "label": "autortfm_commit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "autortfm_commit(&AutoRTFMFunctorInvoker<TFunctor>, AutoRTFMLookupInstrumentedFunctorInvoker<TFunctor>(Functor), const_cast<void*>(static_cast<const void*>(&Functor)))"
  },
  {
    "label": "AbortTransaction()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE ETransactionResult)",
    "insertText": "AbortTransaction()"
  },
  {
    "label": "CascadingAbortTransaction()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE ETransactionResult)",
    "insertText": "CascadingAbortTransaction()"
  },
  {
    "label": "AbortIfTransactional()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "AbortIfTransactional()"
  },
  {
    "label": "autortfm_abort_if_transactional()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "autortfm_abort_if_transactional()"
  },
  {
    "label": "AbortIfClosed()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "AbortIfClosed()"
  },
  {
    "label": "autortfm_abort_if_closed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "autortfm_abort_if_closed()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} namespace Detail { template<T,= void> struct THasAssignFromOpenToClosedMethod : std::false_type { } ; template<T> struct THasAssignFromOpenToClosedMethod<T,std::void_t<)",
    "insertText": "decltype(T::AutoRTFMAssignFromOpenToClosed(std::declval<T&>(), std::declval<T>()))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; } template<T> bool HasAssignFromOpenToClosedMethod = Detail::THasAssignFromOpenToClosedMethod<T>::value ; template<T,= void> struct TAssignFromOpenToClosed ; namespace Detail { template<T,= void> struct THasAssignFromOpenToClosedTrait : std::false_type { } ; template<T> struct THasAssignFromOpenToClosedTrait<T,std::void_t<)",
    "insertText": "decltype(TAssignFromOpenToClosed<T>::Assign(std::declval<T&>(), std::declval<T>()))"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (} ; } template<T> bool HasAssignFromOpenToClosedTrait = Detail::THasAssignFromOpenToClosedTrait<T>::value ; template<T> struct TAssignFromOpenToClosed<T,std::enable_if_t<std::is_fundamental_v<T>>> { UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "Assign(T& Closed, T Open)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (Closed = Open ; } } ; template<T> struct TAssignFromOpenToClosed<T*,void> { UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "Assign(T*& Closed, T* Open)"
  },
  {
    "label": "enable_if_t()",
    "kind": "Method",
    "detail": "Function (Closed = Open ; } } ; template<. . . TYPES> struct TAssignFromOpenToClosed<std::tuple<TYPES . . .>,)",
    "insertText": "enable_if_t(HasAssignFromOpenToClosedTrait<TYPES> && ...)"
  },
  {
    "label": "AssignElements()",
    "kind": "Method",
    "detail": "Function (template<size_t I = 0,SRC = void> UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "AssignElements(std::tuple<TYPES...>& Closed, SRC&& Open)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (using E = std::tuple_element_t<I,std::tuple<TYPES . . .>> ; TAssignFromOpenToClosed<E)",
    "insertText": "Assign(std::get<I>(Closed), std::get<I>(std::forward<SRC>(Open)))"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (AssignElements<)",
    "insertText": "I(Closed, std::forward<SRC>(Open))"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (} } template<SRC> UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "Assign(std::tuple<TYPES...>& Closed, SRC&& Open)"
  },
  {
    "label": "AssignElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignElements(Closed, std::forward<SRC>(Open))"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TAssignFromOpenToClosed<T,std::enable_if_t<HasAssignFromOpenToClosedMethod<T>>> { template<OPEN> UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "Assign(T& Closed, OPEN&& Open)"
  },
  {
    "label": "AutoRTFMAssignFromOpenToClosed()",
    "kind": "Method",
    "detail": "Function (Closed .)",
    "insertText": "AutoRTFMAssignFromOpenToClosed(Closed, std::forward<OPEN>(Open))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TAssignFromOpenToClosed<void,void> ; template<T> bool IsSafeToReturnFromOpen = HasAssignFromOpenToClosedTrait<T> | | std::is_same_v<T,void> ; template<TFunctor,TReturn =)",
    "insertText": "decltype(std::declval<TFunctor>()())> static UE_AUTORTFM_FORCEINLINE TReturn Open(const TFunctor& Functor)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(IsSafeToReturnFromOpen<TReturn>)"
  },
  {
    "label": "Call()",
    "kind": "Method",
    "detail": "Function (struct FCallHelper { UE_AUTORTFM_NOAUTORTFM void)",
    "insertText": "Call(void* Arg)"
  },
  {
    "label": "TFunctor()",
    "kind": "Method",
    "detail": "Function (const TFunctor& Fn =* reinterpret_cast<)",
    "insertText": "TFunctor(Arg)"
  },
  {
    "label": "Fn()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_CALLSITE_FORCEINLINE)",
    "insertText": "Fn()"
  },
  {
    "label": "autortfm_open()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "autortfm_open(&FCallHelper::Call, const_cast<void*>(static_cast<const void*>(&Functor)))"
  },
  {
    "label": "FCallHelper()",
    "kind": "Method",
    "detail": "Function (FCallHelper& Self =* reinterpret_cast<)",
    "insertText": "FCallHelper(Arg)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_CALLSITE_FORCEINLINE TAssignFromOpenToClosed<TReturn)",
    "insertText": "Assign(Self.ReturnValue, std::move(Self.Functor()))"
  },
  {
    "label": "autortfm_open()",
    "kind": "Method",
    "detail": "Function (} const TFunctor& Functor ; TReturn ReturnValue { } ; } ; FCallHelper Helper { Functor } ;)",
    "insertText": "autortfm_open(&FCallHelper::Call, reinterpret_cast<void*>(&Helper))"
  },
  {
    "label": "OnCommit()",
    "kind": "Method",
    "detail": "Function (} # if UE_AUTORTFM template<TFunctor> UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "OnCommit(const TFunctor& Work)"
  },
  {
    "label": "Work()",
    "kind": "Method",
    "detail": "Function (} else { UE_AUTORTFM_CALLSITE_FORCEINLINE)",
    "insertText": "Work()"
  },
  {
    "label": "OnAbort()",
    "kind": "Method",
    "detail": "Function (} # endif # if UE_AUTORTFM template<TFunctor> UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "OnAbort(const TFunctor& Work)"
  },
  {
    "label": "PushOnAbortHandler()",
    "kind": "Method",
    "detail": "Function (} } template<TFunctor> UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "PushOnAbortHandler(const void* Key, const TFunctor& Work)"
  },
  {
    "label": "PopOnAbortHandler()",
    "kind": "Method",
    "detail": "Function (} } UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "PopOnAbortHandler(const void* Key)"
  },
  {
    "label": "PopAllOnAbortHandlers()",
    "kind": "Method",
    "detail": "Function (} } UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "PopAllOnAbortHandlers(const void* Key)"
  },
  {
    "label": "OnAbort()",
    "kind": "Method",
    "detail": "Function (} } # else template<TFunctor> UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "OnAbort(const TFunctor&)"
  },
  {
    "label": "PushOnAbortHandler()",
    "kind": "Method",
    "detail": "Function (} template<TFunctor> UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "PushOnAbortHandler(const void* Key, const TFunctor&)"
  },
  {
    "label": "DidAllocate()",
    "kind": "Method",
    "detail": "Function (} # endif UE_AUTORTFM_FORCEINLINE void*)",
    "insertText": "DidAllocate(void* Ptr, size_t Size)"
  },
  {
    "label": "DidFree()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "DidFree(void* Ptr)"
  },
  {
    "label": "autortfm_did_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "autortfm_did_free(Ptr)"
  },
  {
    "label": "RecordOpenWrite()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "RecordOpenWrite(void* Ptr, size_t Size)"
  },
  {
    "label": "autortfm_record_open_write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "autortfm_record_open_write(Ptr, Size)"
  },
  {
    "label": "RecordOpenWrite()",
    "kind": "Method",
    "detail": "Function (} template<TTYPE> UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "RecordOpenWrite(TTYPE* Ptr)"
  },
  {
    "label": "autortfm_record_open_write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "autortfm_record_open_write(Ptr, sizeof(TTYPE))"
  },
  {
    "label": "deprecated()",
    "kind": "Method",
    "detail": "Function (} namespace ForTheRuntime { enum EAutoRTFMEnabledState { AutoRTFM_Disabled = 0,AutoRTFM_Enabled,AutoRTFM_ForcedDisabled,AutoRTFM_ForcedEnabled,AutoRTFM_EnabledForAllVerse [ [)",
    "insertText": "deprecated(\"Use AutoRTFM_Enabled instead!\")"
  },
  {
    "label": "SetAutoRTFMRuntime()",
    "kind": "Method",
    "detail": "Function (enum EAutoRTFMRetryTransactionState { NoRetry = 0,RetryNonNested,RetryNestedToo,} ; bool)",
    "insertText": "SetAutoRTFMRuntime(EAutoRTFMEnabledState State)"
  },
  {
    "label": "IsAutoRTFMRuntimeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAutoRTFMRuntimeEnabled()"
  },
  {
    "label": "deprecated()",
    "kind": "Method",
    "detail": "Function ([ [)",
    "insertText": "deprecated(\"Use IsAutoRTFMRuntimeEnabled instead!\")]] UE_AUTORTFM_API bool IsAutoRTFMRuntimeEnabledForAllVerse()"
  },
  {
    "label": "SetEnsureOnAbortByLanguage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnsureOnAbortByLanguage(bool bEnabled)"
  },
  {
    "label": "IsEnsureOnAbortByLanguageEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnsureOnAbortByLanguageEnabled()"
  },
  {
    "label": "SetRetryTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRetryTransaction(EAutoRTFMRetryTransactionState State)"
  },
  {
    "label": "GetRetryTransaction()",
    "kind": "Method",
    "detail": "Function (EAutoRTFMRetryTransactionState)",
    "insertText": "GetRetryTransaction()"
  },
  {
    "label": "ShouldRetryNonNestedTransactions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRetryNonNestedTransactions()"
  },
  {
    "label": "ShouldRetryNestedTransactionsToo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRetryNestedTransactionsToo()"
  },
  {
    "label": "StartTransaction()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_FORCEINLINE bool)",
    "insertText": "StartTransaction()"
  },
  {
    "label": "CommitTransaction()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE ETransactionResult)",
    "insertText": "CommitTransaction()"
  },
  {
    "label": "ClearTransactionStatus()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "ClearTransactionStatus()"
  },
  {
    "label": "RegisterOpenFunction()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "RegisterOpenFunction(void* const OpenFunction, void* const ClosedVariant)"
  },
  {
    "label": "autortfm_register_open_function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "autortfm_register_open_function(OpenFunction, ClosedVariant)"
  },
  {
    "label": "FRegisterOpenFunction()",
    "kind": "Method",
    "detail": "Function (} struct FRegisterOpenFunction {)",
    "insertText": "FRegisterOpenFunction(void* const OriginalFunction, void* const NewFunction)"
  },
  {
    "label": "RegisterOpenFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOpenFunction(OriginalFunction, NewFunction)"
  },
  {
    "label": "RecordOpenRead()",
    "kind": "Method",
    "detail": "Function (} } ; UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "RecordOpenRead(void const*, size_t)"
  },
  {
    "label": "RecordOpenRead()",
    "kind": "Method",
    "detail": "Function (} template<TTYPE> UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "RecordOpenRead(TTYPE*)"
  },
  {
    "label": "WriteMemory()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "WriteMemory(void* DestPtr, void const* SrcPtr, size_t Size)"
  },
  {
    "label": "RecordOpenWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordOpenWrite(DestPtr, Size)"
  },
  {
    "label": "UE_AUTORTFM_MEMCPY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_AUTORTFM_MEMCPY(DestPtr, SrcPtr, Size)"
  },
  {
    "label": "WriteMemory()",
    "kind": "Method",
    "detail": "Function (} template<TTYPE> UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "WriteMemory(TTYPE* DestPtr, TTYPE const* SrcPtr)"
  },
  {
    "label": "RecordOpenWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordOpenWrite(DestPtr, sizeof(TTYPE))"
  },
  {
    "label": "WriteMemory()",
    "kind": "Method",
    "detail": "Function (* DestPtr =* SrcPtr ; } else {)",
    "insertText": "WriteMemory(DestPtr, SrcPtr, sizeof(TTYPE))"
  },
  {
    "label": "WriteMemory()",
    "kind": "Method",
    "detail": "Function (} } template<TTYPE> UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "WriteMemory(TTYPE* DestPtr, TTYPE const SrcValue)"
  },
  {
    "label": "WriteMemory()",
    "kind": "Method",
    "detail": "Function (* DestPtr = SrcValue ; } else {)",
    "insertText": "WriteMemory(DestPtr, &SrcValue, sizeof(TTYPE))"
  },
  {
    "label": "CheckConsistencyAssumingNoRaces()",
    "kind": "Method",
    "detail": "Function (} } UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "CheckConsistencyAssumingNoRaces()"
  },
  {
    "label": "autortfm_check_consistency_assuming_no_races()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "autortfm_check_consistency_assuming_no_races()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } # if UE_AUTORTFM namespace AutoRTFM::Private { struct FOpenHelper { template<FunctorType> void)",
    "insertText": "operator(FunctorType F)"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Open(UE_AUTORTFM_MOVE(F))"
  },
  {
    "label": "OnAbort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAbort(UE_AUTORTFM_MOVE(F))"
  },
  {
    "label": "OnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCommit(UE_AUTORTFM_MOVE(F))"
  },
  {
    "label": "Transact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Transact(UE_AUTORTFM_MOVE(F))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; } # if)",
    "insertText": "defined(__clang__) && __has_warning(\"-Wdeprecated-this-capture\") #define UE_AUTORTFM_BEGIN_DISABLE_WARNINGS _Pragma(\"clang diagnostic push\") _Pragma(\"clang diagnostic ignored \\\"-Wdeprecated-this-capture\\\"\") #define UE_AUTORTFM_END_DISABLE_WARNINGS _Pragma(\"clang diagnostic pop\")"
  },
  {
    "label": "__VA_ARGS__()",
    "kind": "Method",
    "detail": "Function (} + [)",
    "insertText": "__VA_ARGS__() #define UE_AUTORTFM_ONCOMMIT_IMPL(...)"
  },
  {
    "label": "__VA_ARGS__()",
    "kind": "Method",
    "detail": "Function (} + [)",
    "insertText": "__VA_ARGS__()"
  }
]