[
  {
    "label": "VCMReceiveCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMReceiveCallback"
  },
  {
    "label": "FrameInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameInfo"
  },
  {
    "label": "VCMDecodedFrameCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMDecodedFrameCallback"
  },
  {
    "label": "VCMGenericDecoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMGenericDecoder"
  },
  {
    "label": "FrameInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_GENERIC_DECODER_H_ # define MODULES_VIDEO_CODING_GENERIC_DECODER_H_ # include<cstdint> # include<deque> # include<string> # include<utility> # include \" api / field_trials_view . h \" # include \" api / sequence_checker . h \" # include \" api / video_codecs / video_decoder . h \" # include \" modules / video_coding / encoded_frame . h \" # include \" modules / video_coding / timing / timing . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { class VCMReceiveCallback ; struct FrameInfo {)",
    "insertText": "FrameInfo()"
  },
  {
    "label": "FrameInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameInfo(const FrameInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FrameInfo&)",
    "insertText": "operator(const FrameInfo&)"
  },
  {
    "label": "FrameInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameInfo(FrameInfo&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FrameInfo&)",
    "insertText": "operator(FrameInfo&&)"
  },
  {
    "label": "VCMDecodedFrameCallback()",
    "kind": "Method",
    "detail": "Function (uint32_t rtp_timestamp ; absl::optional<Timestamp> render_time ; absl::optional<Timestamp> decode_start ; VideoRotation rotation ; VideoContentType content_type ; EncodedImage::Timing timing ; int64_t ntp_time_ms ; RtpPacketInfos packet_infos ; } ; class VCMDecodedFrameCallback : public DecodedImageCallback { public :)",
    "insertText": "VCMDecodedFrameCallback(VCMTiming* timing, Clock* clock, const FieldTrialsView& field_trials)"
  },
  {
    "label": "VCMDecodedFrameCallback()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VCMDecodedFrameCallback()"
  },
  {
    "label": "SetUserReceiveCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserReceiveCallback(VCMReceiveCallback* receiveCallback)"
  },
  {
    "label": "UserReceiveCallback()",
    "kind": "Method",
    "detail": "Function (VCMReceiveCallback*)",
    "insertText": "UserReceiveCallback()"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decoded(VideoFrame& decodedImage)"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decoded(VideoFrame& decodedImage, int64_t decode_time_ms)"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decoded(VideoFrame& decodedImage, absl::optional<int32_t> decode_time_ms, absl::optional<uint8_t> qp)"
  },
  {
    "label": "OnDecoderInfoChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDecoderInfoChanged(const VideoDecoder::DecoderInfo& decoder_info)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Map(FrameInfo frameInfo)"
  },
  {
    "label": "ClearTimestampMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTimestampMap()"
  },
  {
    "label": "FindFrameInfo()",
    "kind": "Method",
    "detail": "Function (private : std::pair<absl::optional<FrameInfo>,size_t>)",
    "insertText": "FindFrameInfo(uint32_t rtp_timestamp) RTC_EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (SequenceChecker construction_thread_ ; Clock* const _clock ; VCMReceiveCallback* _receiveCallback = nullptr ; VCMTiming* _timing ; Mutex lock_ ; std::deque<FrameInfo> frame_infos_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  },
  {
    "label": "VCMGenericDecoder()",
    "kind": "Method",
    "detail": "Function (int64_t ntp_offset_ ; } ; class VCMGenericDecoder { public :)",
    "insertText": "VCMGenericDecoder(VideoDecoder* decoder)"
  },
  {
    "label": "VCMGenericDecoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VCMGenericDecoder()"
  },
  {
    "label": "Configure()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Configure(const VideoDecoder::Settings& settings)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decode(const VCMEncodedFrame& inputFrame, Timestamp now)"
  },
  {
    "label": "RegisterDecodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterDecodeCompleteCallback(VCMDecodedFrameCallback* callback)"
  },
  {
    "label": "IsSameDecoder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSameDecoder(VideoDecoder* decoder)"
  }
]