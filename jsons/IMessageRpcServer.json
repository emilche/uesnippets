[
  {
    "label": "FRpcMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRpcMessage"
  },
  {
    "label": "TFuture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFuture"
  },
  {
    "label": "IMessageRpcServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageRpcServer"
  },
  {
    "label": "TReturn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TReturn"
  },
  {
    "label": "THandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THandler"
  },
  {
    "label": "TReturn()",
    "kind": "Method",
    "detail": "Function (template<RpcType> class TReturn : public IMessageRpcReturn { public :)",
    "insertText": "TReturn(TAsyncResult<typename RpcType::FResult>&& InResult) : Result(MoveTemp(InResult))"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Cancel()"
  },
  {
    "label": "GetTask()",
    "kind": "Method",
    "detail": "Function (auto Task = Result .)",
    "insertText": "GetTask()"
  },
  {
    "label": "CreateResponseMessage()",
    "kind": "Method",
    "detail": "Function (} } FRpcMessage*)",
    "insertText": "CreateResponseMessage()"
  },
  {
    "label": "GetFuture()",
    "kind": "Method",
    "detail": "Function (const TFuture<RpcType::FResult>& Future = Result .)",
    "insertText": "GetFuture()"
  },
  {
    "label": "GetResponseTypeInfo()",
    "kind": "Method",
    "detail": "Function (} UScriptStruct*)",
    "insertText": "GetResponseTypeInfo()"
  },
  {
    "label": "IsReady()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReady()"
  },
  {
    "label": "FResult()",
    "kind": "Method",
    "detail": "Function (} TAsyncResult<RpcType::FResult> Result ; } ; template<RpcType,HandlerType> class THandler : public IMessageRpcHandler { public : typedef TAsyncResult<)",
    "insertText": "FResult(HandlerType::*FuncType)(const typename RpcType::FRequest&)"
  },
  {
    "label": "THandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "THandler(HandlerType* InHandler, FuncType InFunc ) : Handler(InHandler) , Func(InFunc)"
  },
  {
    "label": "HandleRequest()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<IMessageRpcReturn>)",
    "insertText": "HandleRequest(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "AddHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHandler(UClass::TryConvertShortTypeNameToPathName<UStruct>(RequestMessageType.ToString()), Handler)"
  },
  {
    "label": "AddHandler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddHandler(const FTopLevelAssetPath& RequestMessageType, const TSharedRef<IMessageRpcHandler>& Handler)"
  },
  {
    "label": "GetAddress()",
    "kind": "Method",
    "detail": "Function (const FMessageAddress&)",
    "insertText": "GetAddress()"
  },
  {
    "label": "OnNoHandlerWithPathName()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS FOnMessagePathNameRpcNoHandler&)",
    "insertText": "OnNoHandlerWithPathName()"
  },
  {
    "label": "SetSendProgressUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendProgressUpdate(bool InSendProgress)"
  },
  {
    "label": "RegisterHandler()",
    "kind": "Method",
    "detail": "Function (public : template<RpcType,HandlerType> void)",
    "insertText": "RegisterHandler(HandlerType* Handler, typename THandler<RpcType, HandlerType>::FuncType Func)"
  },
  {
    "label": "AddHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHandler(RpcType::FRequest::StaticStruct()->GetFName(), MakeShareable(new THandler<RpcType, HandlerType>(Handler, Func)))"
  },
  {
    "label": "IMessageRpcServer()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "IMessageRpcServer()"
  }
]