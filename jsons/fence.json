[
  {
    "label": "TimeTicks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeTicks"
  },
  {
    "label": "TaskQueueImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskQueueImpl"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Fence()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_FENCE_H_ # define BASE_TASK_SEQUENCE_MANAGER_FENCE_H_ # include \" base / base_export . h \" # include \" base / task / sequence_manager / enqueue_order . h \" # include \" base / task / sequence_manager / task_order . h \" namespace base { class TimeTicks ; namespace sequence_manager { namespace internal { class TaskQueueImpl ; class BASE_EXPORT Fence { public :)",
    "insertText": "Fence(const TaskOrder& task_order)"
  },
  {
    "label": "Fence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fence(const Fence& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Fence&)",
    "insertText": "operator(const Fence& other)"
  },
  {
    "label": "Fence()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Fence()"
  },
  {
    "label": "BlockingFence()",
    "kind": "Method",
    "detail": "Function (Fence)",
    "insertText": "BlockingFence()"
  },
  {
    "label": "task_order()",
    "kind": "Method",
    "detail": "Function (const TaskOrder&)",
    "insertText": "task_order()"
  },
  {
    "label": "Fence()",
    "kind": "Method",
    "detail": "Function (} private : class TaskQueueImpl ;)",
    "insertText": "Fence(EnqueueOrder enqueue_order, TimeTicks delayed_run_time, int sequence_num)"
  },
  {
    "label": "CreateWithEnqueueOrder()",
    "kind": "Method",
    "detail": "Function (Fence)",
    "insertText": "CreateWithEnqueueOrder(EnqueueOrder enqueue_order)"
  }
]