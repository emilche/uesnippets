[
  {
    "label": "FChaosArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosArchive"
  },
  {
    "label": "FPerShapeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerShapeData"
  },
  {
    "label": "FActorShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorShape"
  },
  {
    "label": "FQueryHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryHit"
  },
  {
    "label": "FLocationHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLocationHit"
  },
  {
    "label": "FRaycastHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRaycastHit"
  },
  {
    "label": "FOverlapHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlapHit"
  },
  {
    "label": "FSweepHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSweepHit"
  },
  {
    "label": "FPTActorShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPTActorShape"
  },
  {
    "label": "FPTQueryHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPTQueryHit"
  },
  {
    "label": "FPTLocationHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPTLocationHit"
  },
  {
    "label": "FPTRaycastHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPTRaycastHit"
  },
  {
    "label": "FPTOverlapHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPTOverlapHit"
  },
  {
    "label": "FPTSweepHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPTSweepHit"
  },
  {
    "label": "FSQHitBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSQHitBuffer"
  },
  {
    "label": "FSQSingleHitBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSQSingleHitBuffer"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Declares . h \" # include \" Chaos / Interface / PhysicsInterfaceWrapperShared . h \" # include \" Chaos / ParticleHandleFwd . h \" # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" CoreMinimal . h \" # include \" Framework / ThreadContextEnum . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include<type_traits> namespace Chaos { class FChaosArchive ; class FPerShapeData ; } namespace ChaosInterface { struct FActorShape { Chaos::FGeometryParticle* Actor ; const Chaos::FPerShapeData* Shape ; void)",
    "insertText": "Serialize(Chaos::FChaosArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; Chaos::FChaosArchive&)",
    "insertText": "operator(Chaos::FChaosArchive& Ar, FActorShape& ActorShape)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (ActorShape .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; Chaos::FChaosArchive&)",
    "insertText": "operator(Chaos::FChaosArchive& Ar, FQueryHit& QueryHit)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FLocationHit& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; Chaos::FChaosArchive&)",
    "insertText": "operator(Chaos::FChaosArchive& Ar, FRaycastHit& RaycastHit)"
  },
  {
    "label": "FinishQueryHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishQueryHelper(TArray<FOverlapHit, TInlineAllocator<CHAOS_HIT_BUFFER_SIZE>>& Hits, const FOverlapHit& BlockingHit, bool bHasBlockingHit)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Hits .)",
    "insertText": "Add(BlockingHit)"
  },
  {
    "label": "FinishQueryHelper()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FinishQueryHelper(TArray<FPTOverlapHit, TInlineAllocator<CHAOS_HIT_BUFFER_SIZE>>& Hits, const FPTOverlapHit& BlockingHit, bool bHasBlockingHit)"
  },
  {
    "label": "FinishQueryHelper()",
    "kind": "Method",
    "detail": "Function (} } template<HitType> void)",
    "insertText": "FinishQueryHelper(TArray<HitType, TInlineAllocator<CHAOS_HIT_BUFFER_SIZE>>& Hits, const HitType& BlockingHit, bool bHasBlockingHit)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (Hits .)",
    "insertText": "Sort()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 FinalNum = Hits .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (- - FinalNum ; } else { break ; } } Hits .)",
    "insertText": "SetNum(FinalNum)"
  },
  {
    "label": "FSQHitBuffer()",
    "kind": "Method",
    "detail": "Function (Hits [ FinalNum - 1 ] = BlockingHit ; } } template<HitType> class FSQHitBuffer { public :)",
    "insertText": "FSQHitBuffer(bool bSingle = false) : AcceleratorDepth(0) , bHasBlockingHit(false) , bSingleResult(bSingle)"
  },
  {
    "label": "FSQHitBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSQHitBuffer()"
  },
  {
    "label": "IncFlushCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "IncFlushCount()"
  },
  {
    "label": "DecFlushCount()",
    "kind": "Method",
    "detail": "Function (+ + AcceleratorDepth ; } void)",
    "insertText": "DecFlushCount()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - AcceleratorDepth ;)",
    "insertText": "if(AcceleratorDepth == 0)"
  },
  {
    "label": "FinishQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishQuery()"
  },
  {
    "label": "HasHit()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "HasHit()"
  },
  {
    "label": "GetNumHits()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumHits()"
  },
  {
    "label": "GetHits()",
    "kind": "Method",
    "detail": "Function (} HitType*)",
    "insertText": "GetHits()"
  },
  {
    "label": "GetBlock()",
    "kind": "Method",
    "detail": "Function (} HitType*)",
    "insertText": "GetBlock()"
  },
  {
    "label": "HasBlockingHit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasBlockingHit()"
  },
  {
    "label": "AddTouchingHit()",
    "kind": "Method",
    "detail": "Function (CurrentBlockingHit = InBlockingHit ; bHasBlockingHit = true ; } void)",
    "insertText": "AddTouchingHit(const HitType& InTouchingHit)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Hits .)",
    "insertText": "Add(InTouchingHit)"
  },
  {
    "label": "GetCurrentHit()",
    "kind": "Method",
    "detail": "Function (} const HitType*)",
    "insertText": "GetCurrentHit()"
  },
  {
    "label": "SetBlockingHit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlockingHit(Hit)"
  },
  {
    "label": "AddTouchingHit()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "AddTouchingHit(Hit)"
  },
  {
    "label": "WantsSingleResult()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "WantsSingleResult()"
  },
  {
    "label": "FinishQueryHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishQueryHelper(Hits, CurrentBlockingHit, bHasBlockingHit)"
  },
  {
    "label": "FSQSingleHitBuffer()",
    "kind": "Method",
    "detail": "Function (} HitType CurrentBlockingHit ; int32 AcceleratorDepth ; bool bHasBlockingHit ; bool bSingleResult ; TArray<HitType,TInlineAllocator<CHAOS_HIT_BUFFER_SIZE>> Hits ; } ; template<HitType> class FSQSingleHitBuffer : public FSQHitBuffer<HitType> { public :)",
    "insertText": "FSQSingleHitBuffer() : FSQHitBuffer<HitType>( true)"
  }
]