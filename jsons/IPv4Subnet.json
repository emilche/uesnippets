[
  {
    "label": "FIPv4Subnet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIPv4Subnet"
  },
  {
    "label": "FIPv4Subnet()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Interfaces / IPv4 / IPv4Address . h \" # include \" Interfaces / IPv4 / IPv4SubnetMask . h \" # include \" Internationalization / Text . h \" # include \" Serialization / Archive . h \" # include \" Templates / TypeHash . h \" struct FIPv4Subnet { FIPv4Address Address ; FIPv4SubnetMask Mask ; public :)",
    "insertText": "FIPv4Subnet()"
  },
  {
    "label": "FIPv4Subnet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIPv4Subnet(const FIPv4Address& InAddress, const FIPv4SubnetMask& InMask) : Address(InAddress) , Mask(InMask)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "operator(const FIPv4Subnet& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FIPv4Subnet& Subnet)"
  },
  {
    "label": "ContainsAddress()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsAddress(const FIPv4Address& TestAddress)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "ToText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ToText()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} public : uint32)",
    "insertText": "GetTypeHash(const FIPv4Subnet& Subnet)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "Parse(const FString& SubnetString, FIPv4Subnet& OutSubnet)"
  }
]