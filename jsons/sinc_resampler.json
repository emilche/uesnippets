[
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "SincResamplerCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SincResamplerCallback"
  },
  {
    "label": "SincResampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SincResampler"
  },
  {
    "label": "internally",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internally"
  },
  {
    "label": "Resample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resample(size_t frames, float* destination)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "SetRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRatio(double io_sample_rate_ratio)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(SincResamplerTest, Convolve)"
  },
  {
    "label": "InitializeKernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeKernel()"
  },
  {
    "label": "UpdateRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRegions(bool second_load)"
  },
  {
    "label": "InitializeCPUSpecificFeatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCPUSpecificFeatures()"
  },
  {
    "label": "Convolve_C()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Convolve_C(const float* input_ptr,\n                          const float* k1,\n                          const float* k2,\n                          double kernel_interpolation_factor)"
  },
  {
    "label": "Convolve_SSE()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Convolve_SSE(const float* input_ptr,\n                            const float* k1,\n                            const float* k2,\n                            double kernel_interpolation_factor)"
  },
  {
    "label": "Convolve_AVX2()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Convolve_AVX2(const float* input_ptr,\n                             const float* k1,\n                             const float* k2,\n                             double kernel_interpolation_factor)"
  },
  {
    "label": "Convolve_NEON()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Convolve_NEON(const float* input_ptr,\n                             const float* k1,\n                             const float* k2,\n                             double kernel_interpolation_factor)"
  }
]