[
  {
    "label": "SincResamplerCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SincResamplerCallback"
  },
  {
    "label": "SincResampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SincResampler"
  },
  {
    "label": "SincResamplerCallback()",
    "kind": "Method",
    "detail": "Function (# ifndef COMMON_AUDIO_RESAMPLER_SINC_RESAMPLER_H_ # define COMMON_AUDIO_RESAMPLER_SINC_RESAMPLER_H_ # include<stddef . h> # include<memory> # include \" rtc_base / gtest_prod_util . h \" # include \" rtc_base / memory / aligned_malloc . h \" # include \" rtc_base / system / arch . h \" namespace webrtc { class SincResamplerCallback { public : ~)",
    "insertText": "SincResamplerCallback()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Run(size_t frames, float* destination)"
  },
  {
    "label": "kKernelSize()",
    "kind": "Method",
    "detail": "Function (} ; class SincResampler { public : const size_t kKernelSize = 3 2 ; const size_t kDefaultRequestSize = 5 1 2 ; const size_t kKernelOffsetCount = 3 2 ; const size_t kKernelStorageSize =)",
    "insertText": "kKernelSize(kKernelOffsetCount + 1)"
  },
  {
    "label": "SincResampler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SincResampler(double io_sample_rate_ratio, size_t request_frames, SincResamplerCallback* read_cb)"
  },
  {
    "label": "SincResampler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SincResampler()"
  },
  {
    "label": "SincResampler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SincResampler(const SincResampler&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SincResampler&)",
    "insertText": "operator(const SincResampler&)"
  },
  {
    "label": "Resample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resample(size_t frames, float* destination)"
  },
  {
    "label": "ChunkSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ChunkSize()"
  },
  {
    "label": "request_frames()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "request_frames()"
  },
  {
    "label": "SetRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRatio(double io_sample_rate_ratio)"
  },
  {
    "label": "get_kernel_for_testing()",
    "kind": "Method",
    "detail": "Function (float*)",
    "insertText": "get_kernel_for_testing()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(SincResamplerTest, Convolve)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(SincResamplerTest, ConvolveBenchmark)"
  },
  {
    "label": "InitializeKernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeKernel()"
  },
  {
    "label": "UpdateRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRegions(bool second_load)"
  },
  {
    "label": "InitializeCPUSpecificFeatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCPUSpecificFeatures()"
  },
  {
    "label": "Convolve_C()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Convolve_C(const float* input_ptr, const float* k1, const float* k2, double kernel_interpolation_factor)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_ARCH_X86_FAMILY) static float Convolve_SSE(const float* input_ptr, const float* k1, const float* k2, double kernel_interpolation_factor)"
  },
  {
    "label": "Convolve_AVX2()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Convolve_AVX2(const float* input_ptr, const float* k1, const float* k2, double kernel_interpolation_factor)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(WEBRTC_HAS_NEON) static float Convolve_NEON(const float* input_ptr, const float* k1, const float* k2, double kernel_interpolation_factor)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (# endif double io_sample_rate_ratio_ ; double virtual_source_idx_ ; bool buffer_primed_ ; SincResamplerCallback* read_cb_ ; const size_t request_frames_ ; size_t block_size_ ; const size_t input_buffer_size_ ; std::unique_ptr<float [ ],AlignedFreeDeleter> kernel_storage_ ; std::unique_ptr<float [ ],AlignedFreeDeleter> kernel_pre_sinc_storage_ ; std::unique_ptr<float [ ],AlignedFreeDeleter> kernel_window_storage_ ; std::unique_ptr<float [ ],AlignedFreeDeleter> input_buffer_ ; typedef)",
    "insertText": "float(*ConvolveProc)(const float*, const float*, const float*, double)"
  }
]