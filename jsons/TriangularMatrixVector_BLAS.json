[
  {
    "label": "triangular_matrix_vector_product_trmv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "triangular_matrix_vector_product_trmv"
  },
  {
    "label": "triangular_matrix_vector_product",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "triangular_matrix_vector_product"
  },
  {
    "label": "EIGEN_BLAS_TRMV_SPECIALIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_TRIANGULAR_MATRIX_VECTOR_BLAS_H # define EIGEN_TRIANGULAR_MATRIX_VECTOR_BLAS_H namespace Eigen { namespace internal { template<Index,int Mode,LhsScalar,bool ConjLhs,RhsScalar,bool ConjRhs,int StorageOrder> struct triangular_matrix_vector_product_trmv : triangular_matrix_vector_product<Index,Mode,LhsScalar,ConjLhs,RhsScalar,ConjRhs,StorageOrder,BuiltIn> { } ; # define)",
    "insertText": "EIGEN_BLAS_TRMV_SPECIALIZE(Scalar)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "run(Index _rows, Index _cols, const Scalar* _lhs, Index lhsStride, \\ const Scalar* _rhs, Index rhsIncr, Scalar* _res, Index resIncr, Scalar alpha)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ triangular_matrix_vector_product_trmv<Index,Mode,Scalar,ConjLhs,Scalar,ConjRhs,ColMajor)",
    "insertText": "run(\\ _rows, _cols, _lhs, lhsStride, _rhs, rhsIncr, _res, resIncr, alpha)"
  },
  {
    "label": "EIGEN_BLAS_TRMV_SPECIALIZE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ;)",
    "insertText": "EIGEN_BLAS_TRMV_SPECIALIZE(double) EIGEN_BLAS_TRMV_SPECIALIZE(float) EIGEN_BLAS_TRMV_SPECIALIZE(dcomplex) EIGEN_BLAS_TRMV_SPECIALIZE(scomplex) #define EIGEN_BLAS_TRMV_CM(EIGTYPE, BLASTYPE, EIGPREFIX, BLASPREFIX, BLASPOSTFIX)"
  },
  {
    "label": "IsLower()",
    "kind": "Method",
    "detail": "Function (\\ enum { \\)",
    "insertText": "IsLower(Mode&Lower) == Lower, \\ SetDiag = (Mode&(ZeroDiag|UnitDiag)) ? 0 : 1, \\ IsUnitDiag = (Mode&UnitDiag) ? 1 : 0, \\ IsZeroDiag = (Mode&ZeroDiag)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "run(Index _rows, Index _cols, const EIGTYPE* _lhs, Index lhsStride, \\ const EIGTYPE* _rhs, Index rhsIncr, EIGTYPE* _res, Index resIncr, EIGTYPE alpha)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(ConjLhs || IsZeroDiag)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (\\ return ; \\ } \\ Index)",
    "insertText": "size(std::min)(_rows,_cols)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (\\ Index rows = IsLower ? _rows : size ; \\ Index cols = IsLower ? size : _cols ; \\ \\ typedef VectorX # # EIGPREFIX VectorRhs ; \\ EIGTYPE* x,* y ; \\ \\ \\ Map<const VectorRhs,0,InnerStride<>>)",
    "insertText": "rhs(_rhs,cols,InnerStride<>(rhsIncr))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ VectorRhs x_tmp ; \\)",
    "insertText": "if(ConjRhs) x_tmp = rhs.conjugate()"
  },
  {
    "label": "beta()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ \\ char trans,uplo,diag ; \\ BlasIndex m,n,lda,incx,incy ; \\ EIGTYPE const* a ; \\ EIGTYPE)",
    "insertText": "beta(1)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ n = convert_index<)",
    "insertText": "BlasIndex(size)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ lda = convert_index<)",
    "insertText": "BlasIndex(lhsStride)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ incx = 1 ; \\ incy = convert_index<)",
    "insertText": "BlasIndex(resIncr)"
  },
  {
    "label": "BLASPOSTFIX()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ trans = ' N ' ; \\ uplo = IsLower ? ' L ' : ' U ' ; \\ diag = IsUnitDiag ? ' U ' : ' N ' ; \\ \\ \\ BLASPREFIX # # trmv # #)",
    "insertText": "BLASPOSTFIX(&uplo, &trans, &diag, &n, (const BLASTYPE*)_lhs, &lda, (BLASTYPE*)x, &incx)"
  },
  {
    "label": "BLASPOSTFIX()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ BLASPREFIX # # axpy # #)",
    "insertText": "BLASPOSTFIX(&n, (const BLASTYPE*)&numext::real_ref(alpha),(const BLASTYPE*)x, &incx, (BLASTYPE*)_res, &incy)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "if(size<(std::max)(rows,cols))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(size<rows)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ y = _res + size* resIncr ; \\ a = _lhs + size ; \\ m = convert_index<)",
    "insertText": "BlasIndex(rows-size)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ n = convert_index<)",
    "insertText": "BlasIndex(cols-size)"
  },
  {
    "label": "BLASPOSTFIX()",
    "kind": "Method",
    "detail": "Function (\\ } \\ BLASPREFIX # # gemv # #)",
    "insertText": "BLASPOSTFIX(&trans, &m, &n, (const BLASTYPE*)&numext::real_ref(alpha), (const BLASTYPE*)a, &lda, (const BLASTYPE*)x, &incx, (const BLASTYPE*)&numext::real_ref(beta), (BLASTYPE*)y, &incy)"
  },
  {
    "label": "EIGEN_BLAS_TRMV_CM()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } ; # ifdef EIGEN_USE_MKL)",
    "insertText": "EIGEN_BLAS_TRMV_CM(double, double, d, d,) EIGEN_BLAS_TRMV_CM(dcomplex, MKL_Complex16, cd, z,) EIGEN_BLAS_TRMV_CM(float, float, f, s,) EIGEN_BLAS_TRMV_CM(scomplex, MKL_Complex8, cf, c,) #else EIGEN_BLAS_TRMV_CM(double, double, d, d, _) EIGEN_BLAS_TRMV_CM(dcomplex, double, cd, z, _) EIGEN_BLAS_TRMV_CM(float, float, f, s, _) EIGEN_BLAS_TRMV_CM(scomplex, float, cf, c, _) #endif #define EIGEN_BLAS_TRMV_RM(EIGTYPE, BLASTYPE, EIGPREFIX, BLASPREFIX, BLASPOSTFIX)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(IsZeroDiag)"
  },
  {
    "label": "BLASPOSTFIX()",
    "kind": "Method",
    "detail": "Function (\\ } \\ BLASPREFIX # # gemv # #)",
    "insertText": "BLASPOSTFIX(&trans, &n, &m, (const BLASTYPE*)&numext::real_ref(alpha), (const BLASTYPE*)a, &lda, (const BLASTYPE*)x, &incx, (const BLASTYPE*)&numext::real_ref(beta), (BLASTYPE*)y, &incy)"
  }
]