[
  {
    "label": "is_trivially_destructible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_trivially_destructible"
  },
  {
    "label": "is_trivially_move_assignable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_trivially_move_assignable"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IsTriviallyMoveConstructibleObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsTriviallyMoveConstructibleObject"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IsTriviallyCopyConstructibleObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsTriviallyCopyConstructibleObject"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IsTriviallyMoveAssignableReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsTriviallyMoveAssignableReference"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IsTriviallyMoveAssignableReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsTriviallyMoveAssignableReference"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IsTriviallyMoveAssignableReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsTriviallyMoveAssignableReference"
  },
  {
    "label": "VoidTImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VoidTImpl"
  },
  {
    "label": "default_alignment_of_aligned_storage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "default_alignment_of_aligned_storage"
  },
  {
    "label": "default_alignment_of_aligned_storage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "default_alignment_of_aligned_storage"
  },
  {
    "label": "Enabler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Enabler"
  },
  {
    "label": "Op",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Op"
  },
  {
    "label": "is_detected_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_detected_impl"
  },
  {
    "label": "Op",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Op"
  },
  {
    "label": "is_detected_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_detected_impl"
  },
  {
    "label": "Op",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Op"
  },
  {
    "label": "is_detected",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_detected"
  },
  {
    "label": "Enabler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Enabler"
  },
  {
    "label": "To",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "To"
  },
  {
    "label": "Op",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Op"
  },
  {
    "label": "is_detected_convertible_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_detected_convertible_impl"
  },
  {
    "label": "To",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "To"
  },
  {
    "label": "Op",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Op"
  },
  {
    "label": "is_detected_convertible_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_detected_convertible_impl"
  },
  {
    "label": "To",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "To"
  },
  {
    "label": "Op",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Op"
  },
  {
    "label": "is_detected_convertible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_detected_convertible"
  },
  {
    "label": "is_copy_assignable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_copy_assignable"
  },
  {
    "label": "is_move_assignable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_move_assignable"
  },
  {
    "label": "conjunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "conjunction"
  },
  {
    "label": "conjunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "conjunction"
  },
  {
    "label": "conjunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "conjunction"
  },
  {
    "label": "disjunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "disjunction"
  },
  {
    "label": "disjunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "disjunction"
  },
  {
    "label": "disjunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "disjunction"
  },
  {
    "label": "negation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "negation"
  },
  {
    "label": "is_function",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_function"
  },
  {
    "label": "is_trivially_destructible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_trivially_destructible"
  },
  {
    "label": "is_trivially_default_constructible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_trivially_default_constructible"
  },
  {
    "label": "is_trivially_move_constructible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_trivially_move_constructible"
  },
  {
    "label": "is_trivially_copy_constructible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_trivially_copy_constructible"
  },
  {
    "label": "is_trivially_move_assignable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_trivially_move_assignable"
  },
  {
    "label": "is_trivially_copy_assignable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_trivially_copy_assignable"
  },
  {
    "label": "remove_cvref",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "remove_cvref"
  },
  {
    "label": "is_trivially_copyable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_trivially_copyable"
  },
  {
    "label": "is_trivially_copyable_impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is_trivially_copyable_impl"
  },
  {
    "label": "is_trivially_copyable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_trivially_copyable"
  },
  {
    "label": "result_of",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "result_of"
  },
  {
    "label": "result_of",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "result_of"
  },
  {
    "label": "IsHashable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsHashable"
  },
  {
    "label": "IsHashable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsHashable"
  },
  {
    "label": "IsHashable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsHashable"
  },
  {
    "label": "AssertHashEnabledHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AssertHashEnabledHelper"
  },
  {
    "label": "NAT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NAT"
  },
  {
    "label": "Key",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Key"
  },
  {
    "label": "Key",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Key"
  },
  {
    "label": "Key",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Key"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IsNoexcept",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IsNoexcept"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IsSwappable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsSwappable"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IsNothrowSwappable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsNothrowSwappable"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is_trivially_relocatable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_trivially_relocatable"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is_trivially_relocatable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_trivially_relocatable"
  },
  {
    "label": "obj()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "obj()"
  },
  {
    "label": "GetReturnType()",
    "kind": "Method",
    "detail": "Function (NAT)",
    "insertText": "GetReturnType(...)"
  },
  {
    "label": "AssertHashEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertHashEnabled()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap()"
  }
]