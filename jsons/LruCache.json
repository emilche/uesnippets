[
  {
    "label": "DefaultKeyComparer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultKeyComparer"
  },
  {
    "label": "TLruCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLruCache"
  },
  {
    "label": "FCacheEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheEntry"
  },
  {
    "label": "FKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyFuncs"
  },
  {
    "label": "TBaseIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseIterator"
  },
  {
    "label": "TConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstIterator"
  },
  {
    "label": "TIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIterator"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Set . h \" # include \" Misc / AssertionMacros . h \" template<KeyType> struct DefaultKeyComparer { bool)",
    "insertText": "Matches(KeyType A, KeyType B)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetKeyHash(KeyType Key)"
  },
  {
    "label": "FCacheEntry()",
    "kind": "Method",
    "detail": "Function (} } ; template<KeyType,ValueType,KeyComp = DefaultKeyComparer<KeyType>> class TLruCache { struct FCacheEntry { KeyType Key ; FCacheEntry* LessRecent ; FCacheEntry* MoreRecent ; ValueType Value ;)",
    "insertText": "FCacheEntry(const KeyType& InKey, const ValueType& InValue) : Key(InKey) , LessRecent(nullptr) , MoreRecent(nullptr) , Value(InValue)"
  },
  {
    "label": "FCacheEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCacheEntry(const KeyType& InKey) : Key(InKey) , LessRecent(nullptr) , MoreRecent(nullptr)"
  },
  {
    "label": "LinkBefore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LinkBefore(FCacheEntry* Other)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LessRecent = Other ;)",
    "insertText": "if(Other != nullptr)"
  },
  {
    "label": "Unlink()",
    "kind": "Method",
    "detail": "Function (Other -> MoreRecent = this ; } } void)",
    "insertText": "Unlink()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LessRecent -> MoreRecent = MoreRecent ; })",
    "insertText": "if(MoreRecent != nullptr)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (MoreRecent -> LessRecent = LessRecent ; } LessRecent = nullptr ; MoreRecent = nullptr ; } } ; struct FKeyFuncs : public BaseKeyFuncs<FCacheEntry*,KeyType> { const KeyType&)",
    "insertText": "GetSetKey(const FCacheEntry* Entry)"
  },
  {
    "label": "TLruCache()",
    "kind": "Method",
    "detail": "Function (} } ; public :)",
    "insertText": "TLruCache() : LeastRecent(nullptr) , MostRecent(nullptr) , MaxNumElements(0)"
  },
  {
    "label": "TLruCache()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TLruCache(int32 InMaxNumElements) : LeastRecent(nullptr) , MostRecent(nullptr) , MaxNumElements(InMaxNumElements)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty(InMaxNumElements)"
  },
  {
    "label": "TLruCache()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TLruCache()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Add(const KeyType& Key, const ValueType& Value)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FCacheEntry** EntryPtr = LookupSet .)",
    "insertText": "Find(Key)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (FCacheEntry* Entry =* EntryPtr ;)",
    "insertText": "checkSlow(Entry->Key == Key)"
  },
  {
    "label": "MarkAsRecent()",
    "kind": "Method",
    "detail": "Function (Entry -> Value = Value ;)",
    "insertText": "MarkAsRecent(*Entry)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(LookupSet.Num() == MaxNumElements)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(LeastRecent)"
  },
  {
    "label": "FCacheEntry()",
    "kind": "Method",
    "detail": "Function (} FCacheEntry* NewEntry = new)",
    "insertText": "FCacheEntry(Key, Value)"
  },
  {
    "label": "LinkBefore()",
    "kind": "Method",
    "detail": "Function (NewEntry ->)",
    "insertText": "LinkBefore(MostRecent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MostRecent = NewEntry ;)",
    "insertText": "if(LeastRecent == nullptr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LeastRecent = NewEntry ; } LookupSet .)",
    "insertText": "Add(NewEntry)"
  },
  {
    "label": "AddUninitialized_GetRef()",
    "kind": "Method",
    "detail": "Function (} } ValueType&)",
    "insertText": "AddUninitialized_GetRef(const KeyType& Key)"
  },
  {
    "label": "FCacheEntry()",
    "kind": "Method",
    "detail": "Function (} FCacheEntry* NewEntry = new)",
    "insertText": "FCacheEntry(Key)"
  },
  {
    "label": "ContainsByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> bool)",
    "insertText": "ContainsByPredicate(Predicate Pred)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (delete Entry ; } MaxNumElements = InMaxNumElements ; LookupSet .)",
    "insertText": "Empty(FMath::Max(MaxNumElements, 0))"
  },
  {
    "label": "FilterByPredicate()",
    "kind": "Method",
    "detail": "Function (MostRecent = nullptr ; LeastRecent = nullptr ; } template<Predicate> TArray<ValueType>)",
    "insertText": "FilterByPredicate(Predicate Pred)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<ValueType> Result ;)",
    "insertText": "for(const FCacheEntry* Entry : LookupSet)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(Entry->Value)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } const ValueType*)",
    "insertText": "Find(const KeyType& Key)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } const ValueType&)",
    "insertText": "FindChecked(const KeyType& Key)"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "FindRef(const KeyType& Key)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "ValueType()"
  },
  {
    "label": "FindAndTouch()",
    "kind": "Method",
    "detail": "Function (} const ValueType*)",
    "insertText": "FindAndTouch(const KeyType& Key)"
  },
  {
    "label": "FindAndTouchChecked()",
    "kind": "Method",
    "detail": "Function (} const ValueType&)",
    "insertText": "FindAndTouchChecked(const KeyType& Key)"
  },
  {
    "label": "MarkAsRecent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAsRecent(**EntryPtr)"
  },
  {
    "label": "FindAndTouchRef()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "FindAndTouchRef(const KeyType& Key)"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> const ValueType*)",
    "insertText": "FindByPredicate(Predicate Pred)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutKeys .)",
    "insertText": "Add(Entry->Key)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "Max()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(const KeyType& Key)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(*EntryPtr)"
  },
  {
    "label": "RemoveByPredicate()",
    "kind": "Method",
    "detail": "Function (} } template<Predicate> int32)",
    "insertText": "RemoveByPredicate(Predicate Pred)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const_cast<FCacheEntry*>(Entry))"
  },
  {
    "label": "RemoveLeastRecent()",
    "kind": "Method",
    "detail": "Function (+ + NumRemoved ; } } return NumRemoved ; } ValueType)",
    "insertText": "RemoveLeastRecent()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ValueType LeastRecentElement =)",
    "insertText": "MoveTemp(LeastRecent->Value)"
  },
  {
    "label": "TBaseIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBaseIterator(const TLruCache& Cache) : CurrentEntry(Cache.MostRecent)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : TBaseIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Increment()"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (} public : KeyType&)",
    "insertText": "Key()"
  },
  {
    "label": "TConstIterator()",
    "kind": "Method",
    "detail": "Function (CurrentEntry = CurrentEntry -> LessRecent ; } private : FCacheEntry* CurrentEntry ; } ; class TConstIterator : public TBaseIterator<true> { public :)",
    "insertText": "TConstIterator() : TBaseIterator<true>()"
  },
  {
    "label": "TConstIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TConstIterator(const TLruCache& Cache) : TBaseIterator<true>(Cache)"
  },
  {
    "label": "TIterator()",
    "kind": "Method",
    "detail": "Function (} } ; class TIterator : public TBaseIterator<false> { public :)",
    "insertText": "TIterator() : TBaseIterator<false>() , Cache(nullptr)"
  },
  {
    "label": "TIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIterator(TLruCache& InCache) : TBaseIterator<false>(InCache) , Cache(&InCache)"
  },
  {
    "label": "RemoveCurrentAndIncrement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveCurrentAndIncrement()"
  },
  {
    "label": "GetCurrentEntry()",
    "kind": "Method",
    "detail": "Function (FCacheEntry* MoreRecentEntry = this ->)",
    "insertText": "GetCurrentEntry()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Cache ->)",
    "insertText": "Remove(MoreRecentEntry)"
  },
  {
    "label": "MarkAsRecent()",
    "kind": "Method",
    "detail": "Function (} private : TLruCache* Cache ; } ; protected : void)",
    "insertText": "MarkAsRecent(FCacheEntry& Entry)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LeastRecent = LeastRecent -> MoreRecent ; })",
    "insertText": "if(&Entry != MostRecent)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (MostRecent =& Entry ; } } void)",
    "insertText": "Remove(FCacheEntry* Entry)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LeastRecent = Entry -> MoreRecent ; })",
    "insertText": "if(Entry == MostRecent)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (delete Entry ; } public : TIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TIterator)",
    "insertText": "end()"
  }
]