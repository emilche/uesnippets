[
  {
    "label": "_Op",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Op"
  },
  {
    "label": "_Indices",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Indices"
  },
  {
    "label": "__perfect_forward_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__perfect_forward_impl"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FUNCTIONAL_PERFECT_FORWARD_H # define _LIBCPP___FUNCTIONAL_PERFECT_FORWARD_H # include<__config> # include<__utility / declval . h> # include<__utility / forward . h> # include<__utility / move . h> # include<tuple> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__perfect_forward_impl()",
    "kind": "Method",
    "detail": "Function (template<class _Op,size_t . . . _Idx,class . . . _BoundArgs> struct __perfect_forward_impl<_Op,index_sequence<_Idx . . .>,_BoundArgs . . .> { private : tuple<_BoundArgs . . .> __bound_args_ ; public : template<class . . . _Args,class = enable_if_t<is_constructible_v<tuple<_BoundArgs . . .>,_Args&& . . .>>>)",
    "insertText": "__perfect_forward_impl(_Args&&... __bound_args) : __bound_args_(_VSTD::forward<_Args>(__bound_args)...)"
  },
  {
    "label": "__perfect_forward_impl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__perfect_forward_impl(__perfect_forward_impl const&)"
  },
  {
    "label": "__perfect_forward_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__perfect_forward_impl(__perfect_forward_impl&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__perfect_forward_impl&)",
    "insertText": "operator(__perfect_forward_impl const&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__perfect_forward_impl&)",
    "insertText": "operator(__perfect_forward_impl&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class . . . _Args,class = enable_if_t<is_invocable_v<_Op,_BoundArgs& . . .,_Args . . .>>> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Args&&... __args) & noexcept(noexcept(_Op()(_VSTD::get<_Idx>(__bound_args_)..., _VSTD::forward<_Args>(__args)...))) -> decltype( _Op()(_VSTD::get<_Idx>(__bound_args_)..., _VSTD::forward<_Args>(__args)...))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class . . . _Args,class = enable_if_t<! is_invocable_v<_Op,_BoundArgs& . . .,_Args . . .>>> auto)",
    "insertText": "operator()(_Args&&...)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class . . . _Args,class = enable_if_t<is_invocable_v<_Op,_BoundArgs const& . . .,_Args . . .>>> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Args&&... __args) const& noexcept(noexcept(_Op()(_VSTD::get<_Idx>(__bound_args_)..., _VSTD::forward<_Args>(__args)...))) -> decltype( _Op()(_VSTD::get<_Idx>(__bound_args_)..., _VSTD::forward<_Args>(__args)...))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class . . . _Args,class = enable_if_t<is_invocable_v<_Op,_BoundArgs . . .,_Args . . .>>> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Args&&... __args) && noexcept(noexcept(_Op()(_VSTD::get<_Idx>(_VSTD::move(__bound_args_))..., _VSTD::forward<_Args>(__args)...))) -> decltype( _Op()(_VSTD::get<_Idx>(_VSTD::move(__bound_args_))..., _VSTD::forward<_Args>(__args)...))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class . . . _Args,class = enable_if_t<is_invocable_v<_Op,_BoundArgs const . . .,_Args . . .>>> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Args&&... __args) const&& noexcept(noexcept(_Op()(_VSTD::get<_Idx>(_VSTD::move(__bound_args_))..., _VSTD::forward<_Args>(__args)...))) -> decltype( _Op()(_VSTD::get<_Idx>(_VSTD::move(__bound_args_))..., _VSTD::forward<_Args>(__args)...))"
  }
]