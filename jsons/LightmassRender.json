[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FLightmassMaterialProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmassMaterialProxy"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "UTextureRenderTarget2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureRenderTarget2D"
  },
  {
    "label": "FLightmassMaterialExportSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightmassMaterialExportSettings"
  },
  {
    "label": "FMaterialData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialData"
  },
  {
    "label": "FMaterialExportDataEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialExportDataEntry"
  },
  {
    "label": "FLightmassMaterialRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmassMaterialRenderer"
  },
  {
    "label": "FMaterialExportDataEntry()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" PixelFormat . h \" # include \" SceneTypes . h \" class FCanvas ; class FLightmassMaterialProxy ; class UMaterialInterface ; class FSceneInterface ; class UTextureRenderTarget2D ; struct FLightmassMaterialExportSettings ; namespace Lightmass { struct FMaterialData ; } class FLightmassMaterialProxy ; struct FLightmassMaterialExportSettings ; class FMaterialExportDataEntry { public : FString ChannelName ; FLightmassMaterialProxy* DiffuseMaterialProxy ; FLightmassMaterialProxy* EmissiveMaterialProxy ; FLightmassMaterialProxy* OpacityMaterialProxy ; FLightmassMaterialProxy* NormalMaterialProxy ;)",
    "insertText": "FMaterialExportDataEntry(const FString& InChannelName) : ChannelName(InChannelName), DiffuseMaterialProxy(NULL), EmissiveMaterialProxy(NULL), OpacityMaterialProxy(NULL), NormalMaterialProxy(NULL)"
  },
  {
    "label": "FMaterialExportDataEntry()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMaterialExportDataEntry()"
  },
  {
    "label": "FLightmassMaterialRenderer()",
    "kind": "Method",
    "detail": "Function (} ; class FLightmassMaterialRenderer { public :)",
    "insertText": "FLightmassMaterialRenderer() : RenderTarget(NULL) , Canvas(NULL)"
  },
  {
    "label": "FLightmassMaterialRenderer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FLightmassMaterialRenderer()"
  },
  {
    "label": "BeginGenerateMaterialData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginGenerateMaterialData(UMaterialInterface* InMaterial, bool bInWantNormals, const FString& ChannelName, TMap<UMaterialInterface*, FMaterialExportDataEntry>& MaterialExportData)"
  },
  {
    "label": "GenerateMaterialData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateMaterialData(FSceneInterface* InSceneInterface, UMaterialInterface& InMaterial, const FLightmassMaterialExportSettings& InExportSettings, Lightmass::FMaterialData& OutMaterialData, FMaterialExportDataEntry& MaterialExportEntry, TArray<FFloat16Color>& OutMaterialDiffuse, TArray<FFloat16Color>& OutMaterialEmissive, TArray<FFloat16Color>& OutMaterialTransmission, TArray<FFloat16Color>& OutMaterialNormal)"
  },
  {
    "label": "CreateRenderTarget()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "CreateRenderTarget(EPixelFormat InFormat, int32 InSizeX, int32 InSizeY)"
  },
  {
    "label": "GenerateMaterialPropertyData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateMaterialPropertyData(FSceneInterface* InSceneInterface, UMaterialInterface& InMaterial, const FLightmassMaterialExportSettings& InExportSettings, FLightmassMaterialProxy* MaterialProxy, EMaterialProperty InMaterialProperty, int32& InOutSizeX, int32& InOutSizeY, TArray<FFloat16Color>& OutMaterialSamples)"
  }
]