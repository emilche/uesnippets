[
  {
    "label": "PrepareDispatch()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MeshPassProcessor . h \" # include \" RenderGraphUtils . h \" namespace UE::MeshPassUtils { namespace Private { template<TShaderClass> void)",
    "insertText": "PrepareDispatch(FRHIComputeCommandList& RHICmdList, const TShaderRef<TShaderClass>& ComputeShader, const FMeshDrawShaderBindings& ShaderBindings, const typename TShaderClass::FParameters& PassParameters)"
  },
  {
    "label": "GetComputeShader()",
    "kind": "Method",
    "detail": "Function (FRHIComputeShader* ShaderRHI = ComputeShader .)",
    "insertText": "GetComputeShader()"
  },
  {
    "label": "GetScratchShaderParameters()",
    "kind": "Method",
    "detail": "Function (FRHIBatchedShaderParameters& BatchedParameters = RHICmdList .)",
    "insertText": "GetScratchShaderParameters()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (ShaderBindings .)",
    "insertText": "SetParameters(BatchedParameters)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParameters(BatchedParameters, ComputeShader, PassParameters)"
  },
  {
    "label": "SetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComputePipelineState(RHICmdList, ShaderRHI)"
  },
  {
    "label": "SetBatchedShaderParameters()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SetBatchedShaderParameters(ShaderRHI, BatchedParameters)"
  },
  {
    "label": "AfterDispatch()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> void)",
    "insertText": "AfterDispatch(FRHIComputeCommandList& RHICmdList, const TShaderRef<TShaderClass>& ComputeShader)"
  },
  {
    "label": "UnsetShaderUAVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetShaderUAVs(RHICmdList, ComputeShader, ComputeShader.GetComputeShader())"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (} } template<TShaderClass> void)",
    "insertText": "Dispatch(FRHIComputeCommandList& RHICmdList, const TShaderRef<TShaderClass>& ComputeShader, const FMeshDrawShaderBindings& ShaderBindings, const typename TShaderClass::FParameters& PassParameters, FIntVector GroupCount)"
  },
  {
    "label": "ValidateGroupCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateGroupCount(GroupCount)"
  },
  {
    "label": "PrepareDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareDispatch(RHICmdList, ComputeShader, ShaderBindings, PassParameters)"
  },
  {
    "label": "DispatchComputeShader()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "DispatchComputeShader(GroupCount.X, GroupCount.Y, GroupCount.Z)"
  },
  {
    "label": "AfterDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AfterDispatch(RHICmdList, ComputeShader)"
  },
  {
    "label": "DispatchIndirect()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> void)",
    "insertText": "DispatchIndirect(FRHIComputeCommandList& RHICmdList, const TShaderRef<TShaderClass>& ComputeShader, const FMeshDrawShaderBindings& ShaderBindings, const typename TShaderClass::FParameters& PassParameters, FRHIBuffer* IndirectArgsBuffer, uint32 IndirectArgOffset)"
  },
  {
    "label": "ValidateIndirectArgsBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateIndirectArgsBuffer(IndirectArgsBuffer->GetSize(), IndirectArgOffset)"
  },
  {
    "label": "DispatchIndirectComputeShader()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "DispatchIndirectComputeShader(IndirectArgsBuffer, IndirectArgOffset)"
  },
  {
    "label": "SetupComputeBindings()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass,TShaderElementData> void)",
    "insertText": "SetupComputeBindings(const TShaderRef<TShaderClass>& Shader, const FScene* Scene, ERHIFeatureLevel::Type FeatureLevel, const FPrimitiveSceneProxy* PrimitiveSceneProxy, const FMaterialRenderProxy& MaterialRenderProxy, const FMaterial& Material, const TShaderElementData& ShaderElementData, FMeshDrawShaderBindings& ShaderBindings)"
  },
  {
    "label": "GetFrequency()",
    "kind": "Method",
    "detail": "Function (FMeshProcessorShaders MeshProcessorShaders ; EShaderFrequency Frequency = Shader ->)",
    "insertText": "GetFrequency()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MeshProcessorShaders . ComputeShader = Shader ; } else)",
    "insertText": "if(Frequency == SF_WorkGraphComputeNode)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (MeshProcessorShaders . WorkGraphShader = Shader ; } ShaderBindings .)",
    "insertText": "Initialize(MeshProcessorShaders)"
  },
  {
    "label": "GetSingleShaderBindings()",
    "kind": "Method",
    "detail": "Function (FMeshDrawSingleShaderBindings SingleShaderBindings = ShaderBindings .)",
    "insertText": "GetSingleShaderBindings(Frequency)"
  },
  {
    "label": "GetShaderBindings()",
    "kind": "Method",
    "detail": "Function (Shader ->)",
    "insertText": "GetShaderBindings(Scene, FeatureLevel, PrimitiveSceneProxy, MaterialRenderProxy, Material, ShaderElementData, SingleShaderBindings)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (} ShaderBindings .)",
    "insertText": "Finalize(&MeshProcessorShaders)"
  },
  {
    "label": "SetupComputeBindings()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> void)",
    "insertText": "SetupComputeBindings(const TShaderRef<TShaderClass>& Shader, const FScene* Scene, ERHIFeatureLevel::Type FeatureLevel, const FPrimitiveSceneProxy* PrimitiveSceneProxy, const FMaterialRenderProxy& MaterialRenderProxy, const FMaterial& Material, FMeshDrawShaderBindings& ShaderBindings)"
  },
  {
    "label": "InitializeMeshMaterialData()",
    "kind": "Method",
    "detail": "Function (FMeshMaterialShaderElementData ShaderElementData ; ShaderElementData .)",
    "insertText": "InitializeMeshMaterialData()"
  },
  {
    "label": "SetupComputeBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupComputeBindings(Shader, Scene, FeatureLevel, PrimitiveSceneProxy, MaterialRenderProxy, Material, ShaderElementData, ShaderBindings)"
  }
]