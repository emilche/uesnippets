[
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "VCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VCell"
  },
  {
    "label": "VEmergentType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VEmergentType"
  },
  {
    "label": "VInt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VInt"
  },
  {
    "label": "VRestValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VRestValue"
  },
  {
    "label": "VValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VValue"
  },
  {
    "label": "FCellFormatter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellFormatter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDefaultCellFormatter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDefaultCellFormatter"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "FCellFormatter()",
    "kind": "Method",
    "detail": "Function (namespace Verse { struct VCell ; struct VEmergentType ; struct VInt ; struct VRestValue ; struct VValue ; struct FCellFormatter { ~)",
    "insertText": "FCellFormatter()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString(FAllocationContext Context, VCell& Cell)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(FStringBuilderBase& Builder, FAllocationContext Context, VCell& Cell)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; enum class ECellFormatterMode : uint8 { EnableToString = 1<<0,EnableVisitor = 1<<1,IncludeCellNames = 1<<2,FormatAddresses = 1<<3,UniqueAddresses = 1<<4,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECellFormatterMode)"
  },
  {
    "label": "FDefaultCellFormatter()",
    "kind": "Method",
    "detail": "Function (struct FDefaultCellFormatter : FCellFormatter { ECellFormatterMode DefaultMode = ECellFormatterMode::EnableToString | ECellFormatterMode::IncludeCellNames | ECellFormatterMode::UniqueAddresses | ECellFormatterMode::FormatAddresses ;)",
    "insertText": "FDefaultCellFormatter(ECellFormatterMode InMode = DefaultMode) : Mode(InMode)"
  },
  {
    "label": "TryAppend()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "TryAppend(FStringBuilderBase& Builder, FAllocationContext Context, VCell& Cell)"
  },
  {
    "label": "BeginCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCell(FStringBuilderBase& Builder, VCell& Cell)"
  },
  {
    "label": "EndCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCell(FStringBuilderBase& Builder)"
  },
  {
    "label": "AppendAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAddress(FStringBuilderBase& Builder, const void* Address)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (ECellFormatterMode Mode ; } ; FString)",
    "insertText": "ToString(const VInt& Int)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (template<T> FString)",
    "insertText": "ToString(FAllocationContext Context, T&& Arg)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString(FAllocationContext Context, const FCellFormatter& Formatter, const VValue& Value)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(FAllocationContext Context, const FCellFormatter& Formatter, const VRestValue& Value)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "ToString(FStringBuilderBase& Builder, FAllocationContext Context, T&& Arg)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(Builder, Context, FDefaultCellFormatter{}, ::Forward<T>(Arg))"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToString(FStringBuilderBase& Builder, FAllocationContext Context, const FCellFormatter& Formatter, const VValue& Value)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(FStringBuilderBase& Builder, FAllocationContext Context, const FCellFormatter& Formatter, const VRestValue& Value)"
  }
]