[
  {
    "label": "WorkQueueAndTaskOrder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WorkQueueAndTaskOrder"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Observer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Observer"
  },
  {
    "label": "OldestTaskOrder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OldestTaskOrder"
  },
  {
    "label": "WorkQueueAndTaskOrder()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_WORK_QUEUE_SETS_H_ # define BASE_TASK_SEQUENCE_MANAGER_WORK_QUEUE_SETS_H_ # include<array> # include<functional> # include<vector> # include \" base / base_export . h \" # include \" base / containers / intrusive_heap . h \" # include \" base / dcheck_is_on . h \" # include \" base / memory / raw_ptr . h \" # include \" base / task / sequence_manager / sequence_manager . h \" # include \" base / task / sequence_manager / task_order . h \" # include \" base / task / sequence_manager / task_queue_impl . h \" # include \" base / task / sequence_manager / work_queue . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { namespace sequence_manager { namespace internal { struct WorkQueueAndTaskOrder {)",
    "insertText": "WorkQueueAndTaskOrder(WorkQueue& work_queue, const TaskOrder& task_order) : queue(&work_queue), order(task_order)"
  },
  {
    "label": "Observer()",
    "kind": "Method",
    "detail": "Function (} raw_ptr<WorkQueue> queue ; TaskOrder order ; } ; class BASE_EXPORT WorkQueueSets { public : class Observer { public : ~)",
    "insertText": "Observer()"
  },
  {
    "label": "WorkQueueSetBecameEmpty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WorkQueueSetBecameEmpty(size_t set_index)"
  },
  {
    "label": "WorkQueueSetBecameNonEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WorkQueueSetBecameNonEmpty(size_t set_index)"
  },
  {
    "label": "WorkQueueSets()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "WorkQueueSets(const char* name, Observer* observer, const SequenceManager::Settings& settings)"
  },
  {
    "label": "WorkQueueSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WorkQueueSets(const WorkQueueSets&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WorkQueueSets&)",
    "insertText": "operator(const WorkQueueSets&)"
  },
  {
    "label": "WorkQueueSets()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WorkQueueSets()"
  },
  {
    "label": "AddQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddQueue(WorkQueue* queue, size_t set_index)"
  },
  {
    "label": "RemoveQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveQueue(WorkQueue* work_queue)"
  },
  {
    "label": "ChangeSetIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeSetIndex(WorkQueue* queue, size_t set_index)"
  },
  {
    "label": "OnQueuesFrontTaskChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnQueuesFrontTaskChanged(WorkQueue* queue)"
  },
  {
    "label": "OnTaskPushedToEmptyQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTaskPushedToEmptyQueue(WorkQueue* work_queue)"
  },
  {
    "label": "OnPopMinQueueInSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPopMinQueueInSet(WorkQueue* work_queue)"
  },
  {
    "label": "OnQueueBlocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnQueueBlocked(WorkQueue* work_queue)"
  },
  {
    "label": "GetOldestQueueAndTaskOrderInSet()",
    "kind": "Method",
    "detail": "Function (absl::optional<WorkQueueAndTaskOrder>)",
    "insertText": "GetOldestQueueAndTaskOrderInSet(size_t set_index)"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "DCHECK_IS_ON() absl::optional<WorkQueueAndTaskOrder> GetRandomQueueAndTaskOrderInSet( size_t set_index)"
  },
  {
    "label": "IsSetEmpty()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsSetEmpty(size_t set_index)"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "DCHECK_IS_ON() || !defined(NDEBUG) bool ContainsWorkQueueForTest(const WorkQueue* queue)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (# endif const char*)",
    "insertText": "GetName()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : struct OldestTaskOrder { TaskOrder key ; raw_ptr<WorkQueue> value ; bool)",
    "insertText": "operator(const OldestTaskOrder& other)"
  },
  {
    "label": "set_heap_handle()",
    "kind": "Method",
    "detail": "Function (value ->)",
    "insertText": "set_heap_handle(handle)"
  },
  {
    "label": "ClearHeapHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearHeapHandle()"
  },
  {
    "label": "set_heap_handle()",
    "kind": "Method",
    "detail": "Function (value ->)",
    "insertText": "set_heap_handle(HeapHandle())"
  },
  {
    "label": "GetHeapHandle()",
    "kind": "Method",
    "detail": "Function (} HeapHandle)",
    "insertText": "GetHeapHandle()"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (} } ; const char* const name_ ; std::array<IntrusiveHeap<OldestTaskOrder,std::greater<>>,TaskQueue::kQueuePriorityCount> work_queue_heaps_ ; # if)",
    "insertText": "DCHECK_IS_ON() static inline uint64_t MurmurHash3(uint64_t value)"
  },
  {
    "label": "Random()",
    "kind": "Method",
    "detail": "Function (value ^ = value>> 3 3 ; value* = uint64_t { 0 xFF51AFD7ED558CCD } ; value ^ = value>> 3 3 ; value* = uint64_t { 0 xC4CEB9FE1A85EC53 } ; value ^ = value>> 3 3 ; return value ; } uint64_t)",
    "insertText": "Random()"
  },
  {
    "label": "MurmurHash3()",
    "kind": "Method",
    "detail": "Function (last_rand_ =)",
    "insertText": "MurmurHash3(last_rand_)"
  }
]