[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FAssetEditorToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetEditorToolkit"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FReply",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReply"
  },
  {
    "label": "SGraphPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPanel"
  },
  {
    "label": "SNotificationItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationItem"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "FDiffSingleResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffSingleResult"
  },
  {
    "label": "FInputChord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputChord"
  },
  {
    "label": "FNotificationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotificationInfo"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "Rect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rect"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FGraphAppearanceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphAppearanceInfo"
  },
  {
    "label": "FActionMenuContent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActionMenuContent"
  },
  {
    "label": "SGraphEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphEditor"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "ULevelStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreaming"
  },
  {
    "label": "FGraphEditorEvents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphEditorEvents"
  },
  {
    "label": "EPinVisibility",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPinVisibility"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FGraphNodeFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphNodeFactory"
  },
  {
    "label": "FEdGraphEditAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdGraphEditAction"
  },
  {
    "label": "FGraphEditorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphEditorModule"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BlueprintUtilities . h \" # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Engine / LevelStreaming . h \" # include \" Framework / Commands / InputChord . h \" # include \" Framework / Commands / UICommandList . h \" # include \" GameFramework / Actor . h \" # include \" HAL / PlatformMath . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Math / Vector2D . h \" # include \" Misc / Attribute . h \" # include \" Misc / Guid . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" # include \" Types / WidgetActiveTimerDelegate . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / SWidget . h \" class FActiveTimerHandle ; class FAssetEditorToolkit ; class FMenuBuilder ; class FReply ; class SGraphPanel ; class SNotificationItem ; class SWidget ; class UEdGraph ; class UEdGraphNode ; class UEdGraphPin ; struct FDiffSingleResult ; struct FInputChord ; struct FNotificationInfo ; struct FPropertyChangedEvent ; struct FSlateBrush ; struct Rect ;)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnNodeTextCommitted, const FText&, ETextCommit::Type, UEdGraphNode*)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_ThreeParams(bool, FOnNodeVerifyTextCommit, const FText&, UEdGraphNode*, FText&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnGraphContentMenuDismissed)"
  },
  {
    "label": "FGraphAppearanceInfo()",
    "kind": "Method",
    "detail": "Function (typedef TSet<class UObject*> FGraphPanelSelectionSet ; struct FGraphAppearanceInfo {)",
    "insertText": "FGraphAppearanceInfo() : CornerImage(NULL) , InstructionFade(1.f)"
  },
  {
    "label": "FActionMenuContent()",
    "kind": "Method",
    "detail": "Function (} const FSlateBrush* CornerImage ; FText CornerText ; FText PIENotifyText ; FText ReadOnlyText ; FText InstructionText ; FText WarningText ; TAttribute<float> InstructionFade ; } ; struct FActionMenuContent {)",
    "insertText": "FActionMenuContent(TSharedRef<SWidget> InContent, TSharedPtr<SWidget> InWidgetToFocus = TSharedPtr<SWidget>() ) : Content( InContent ) , WidgetToFocus( InWidgetToFocus)"
  },
  {
    "label": "FActionMenuContent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FActionMenuContent() : Content(SNullWidget::NullWidget)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget> Content ; TSharedPtr<SWidget> WidgetToFocus ; FOnGraphContentMenuDismissed OnMenuDismissed ; } ; class SGraphEditor : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSelectionChanged, const FGraphPanelSelectionSet& ) DECLARE_DELEGATE_OneParam( FOnFocused, const TSharedRef<SGraphEditor>&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnDropActor, const TArray< TWeakObjectPtr<class AActor> >&, class UEdGraph*, const FVector2D&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnDropStreamingLevel, const TArray< TWeakObjectPtr<class ULevelStreaming> >&, class UEdGraph*, const FVector2D&)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FActionMenuClosed)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_FiveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_FiveParams(FActionMenuContent, FOnCreateActionMenu, UEdGraph*, const FVector2D&, const TArray<UEdGraphPin*>&, bool, FActionMenuClosed)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_FiveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_FiveParams(FActionMenuContent, FOnCreateNodeOrPinMenu, UEdGraph*, const UEdGraphNode*, const UEdGraphPin*, FMenuBuilder*, bool)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(FReply, FOnSpawnNodeByShortcut, FInputChord, const FVector2D&)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnNodeSpawnedByKeymap)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnDisallowedPinConnection, const UEdGraphPin*, const UEdGraphPin*)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnDoubleClicked)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnNodeSingleClicked, UObject*)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(FReply, FOnMouseButtonDown, const FGeometry&, const FPointerEvent&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (struct FGraphEditorEvents { FOnSelectionChanged OnSelectionChanged ; FSingleNodeEvent OnNodeDoubleClicked ; FOnFocused OnFocused ; FOnDropActor OnDropActor ; FOnDropStreamingLevel OnDropStreamingLevel ; FOnNodeVerifyTextCommit OnVerifyTextCommit ; FOnNodeTextCommitted OnTextCommitted ; FOnCreateActionMenu OnCreateActionMenu ; FOnCreateNodeOrPinMenu OnCreateNodeOrPinMenu ; FOnSpawnNodeByShortcut OnSpawnNodeByShortcut ; FOnNodeSpawnedByKeymap OnNodeSpawnedByKeymap ; FOnDisallowedPinConnection OnDisallowedPinConnection ; FOnDoubleClicked OnDoubleClicked ; FOnMouseButtonDown OnMouseButtonDown ; FOnNodeSingleClicked OnNodeSingleClicked ; } ;)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphEditor) : _AdditionalCommands( static_cast<FUICommandList*>(NULL) ) , _IsEditable(true) , _DisplayAsReadOnly(false) , _IsEmpty(false) , _GraphToEdit(NULL) , _AutoExpandActionMenu(false) , _ShowGraphStateOverlay(true)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FUICommandList>, AdditionalCommands ) SLATE_ATTRIBUTE( bool, IsEditable ) SLATE_ATTRIBUTE( bool, DisplayAsReadOnly ) SLATE_ATTRIBUTE( bool, IsEmpty ) SLATE_ARGUMENT( TSharedPtr<SWidget>, TitleBar ) SLATE_ATTRIBUTE( FGraphAppearanceInfo, Appearance ) SLATE_EVENT( FEdGraphEvent, OnGraphModuleReloaded ) SLATE_ARGUMENT( UEdGraph*, GraphToEdit ) PRAGMA_DISABLE_DEPRECATION_WARNINGS UE_DEPRECATED(5.1, \"GraphToDiff is no longer supported. Use DiffResults instead\") SLATE_ARGUMENT( UEdGraph*, GraphToDiff ) PRAGMA_ENABLE_DEPRECATION_WARNINGS SLATE_ARGUMENT( TSharedPtr<TArray<FDiffSingleResult>>, DiffResults ) SLATE_ATTRIBUTE( int32, FocusedDiffResult ) SLATE_ARGUMENT( FGraphEditorEvents, GraphEvents) SLATE_ARGUMENT( bool, AutoExpandActionMenu ) SLATE_ARGUMENT( TWeakPtr<FAssetEditorToolkit>, AssetEditorToolkit) SLATE_EVENT(FSimpleDelegate, OnNavigateHistoryBack) SLATE_EVENT(FSimpleDelegate, OnNavigateHistoryForward) SLATE_ATTRIBUTE(bool, ShowGraphStateOverlay) SLATE_END_ARGS() UNREALED_API void Construct( const FArguments& InArgs)"
  },
  {
    "label": "GetCurrentGraph()",
    "kind": "Method",
    "detail": "Function (UEdGraph*)",
    "insertText": "GetCurrentGraph()"
  },
  {
    "label": "SetViewLocation()",
    "kind": "Method",
    "detail": "Function (} else { return FVector2D::ZeroVector ; } } void)",
    "insertText": "SetViewLocation(const FVector2D& Location, float ZoomAmount, const FGuid& BookmarkId = FGuid())"
  },
  {
    "label": "SetViewLocation()",
    "kind": "Method",
    "detail": "Function (Implementation ->)",
    "insertText": "SetViewLocation(Location, ZoomAmount, BookmarkId)"
  },
  {
    "label": "GetViewLocation()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetViewLocation(FVector2D& OutLocation, float& OutZoomAmount)"
  },
  {
    "label": "GetViewLocation()",
    "kind": "Method",
    "detail": "Function (Implementation ->)",
    "insertText": "GetViewLocation(OutLocation, OutZoomAmount)"
  },
  {
    "label": "GetViewBookmark()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetViewBookmark(FGuid& OutBookmarkId)"
  },
  {
    "label": "GetViewBookmark()",
    "kind": "Method",
    "detail": "Function (Implementation ->)",
    "insertText": "GetViewBookmark(OutBookmarkId)"
  },
  {
    "label": "IsNodeTitleVisible()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsNodeTitleVisible(const class UEdGraphNode* Node, bool bRequestRename)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bResult = false ;)",
    "insertText": "if(Implementation.IsValid())"
  },
  {
    "label": "IsNodeTitleVisible()",
    "kind": "Method",
    "detail": "Function (bResult = Implementation ->)",
    "insertText": "IsNodeTitleVisible(Node, bRequestRename)"
  },
  {
    "label": "LockToGraphEditor()",
    "kind": "Method",
    "detail": "Function (} return bResult ; } void)",
    "insertText": "LockToGraphEditor(TWeakPtr<SGraphEditor> Other)"
  },
  {
    "label": "LockToGraphEditor()",
    "kind": "Method",
    "detail": "Function (Implementation ->)",
    "insertText": "LockToGraphEditor(Other)"
  },
  {
    "label": "UnlockFromGraphEditor()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UnlockFromGraphEditor(TWeakPtr<SGraphEditor> Other)"
  },
  {
    "label": "UnlockFromGraphEditor()",
    "kind": "Method",
    "detail": "Function (Implementation ->)",
    "insertText": "UnlockFromGraphEditor(Other)"
  },
  {
    "label": "JumpToNode()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "JumpToNode(const class UEdGraphNode* JumpToMe, bool bRequestRename = false, bool bSelectNode = true)"
  },
  {
    "label": "JumpToNode()",
    "kind": "Method",
    "detail": "Function (Implementation ->)",
    "insertText": "JumpToNode(JumpToMe, bRequestRename, bSelectNode)"
  },
  {
    "label": "JumpToPin()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "JumpToPin(const class UEdGraphPin* JumpToMe)"
  },
  {
    "label": "JumpToPin()",
    "kind": "Method",
    "detail": "Function (Implementation ->)",
    "insertText": "JumpToPin(JumpToMe)"
  },
  {
    "label": "SetPinVisibility()",
    "kind": "Method",
    "detail": "Function (} } enum EPinVisibility { Pin_Show,Pin_HideNoConnection,Pin_HideNoConnectionNoDefault } ; void)",
    "insertText": "SetPinVisibility(EPinVisibility InVisibility)"
  },
  {
    "label": "SetPinVisibility()",
    "kind": "Method",
    "detail": "Function (Implementation ->)",
    "insertText": "SetPinVisibility(InVisibility)"
  },
  {
    "label": "RegisterActiveTimer()",
    "kind": "Method",
    "detail": "Function (} } TSharedRef<FActiveTimerHandle>)",
    "insertText": "RegisterActiveTimer(float TickPeriod, FWidgetActiveTimerDelegate TickFunction)"
  },
  {
    "label": "FActiveTimerHandle()",
    "kind": "Method",
    "detail": "Function (} return TSharedPtr<)",
    "insertText": "FActiveTimerHandle().ToSharedRef()"
  },
  {
    "label": "GetSelectedNodes()",
    "kind": "Method",
    "detail": "Function (} const FGraphPanelSelectionSet&)",
    "insertText": "GetSelectedNodes()"
  },
  {
    "label": "ClearSelectionSet()",
    "kind": "Method",
    "detail": "Function (} else { return NoSelection ; } } void)",
    "insertText": "ClearSelectionSet()"
  },
  {
    "label": "SetNodeSelection()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetNodeSelection(UEdGraphNode* Node, bool bSelect)"
  },
  {
    "label": "SetNodeSelection()",
    "kind": "Method",
    "detail": "Function (Implementation ->)",
    "insertText": "SetNodeSelection(Node, bSelect)"
  },
  {
    "label": "SelectAllNodes()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SelectAllNodes()"
  },
  {
    "label": "GetGraphPinForMenu()",
    "kind": "Method",
    "detail": "Function (} } class UEdGraphPin*)",
    "insertText": "GetGraphPinForMenu()"
  },
  {
    "label": "GetGraphNodeForMenu()",
    "kind": "Method",
    "detail": "Function (} else { return NULL ; } } class UEdGraphNode*)",
    "insertText": "GetGraphNodeForMenu()"
  },
  {
    "label": "ZoomToFit()",
    "kind": "Method",
    "detail": "Function (} else { return NULL ; } } void)",
    "insertText": "ZoomToFit(bool bOnlySelection)"
  },
  {
    "label": "GetBoundsForSelectedNodes()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "GetBoundsForSelectedNodes(class FSlateRect& Rect, float Padding)"
  },
  {
    "label": "GetBoundsForNode()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "GetBoundsForNode(const UEdGraphNode* InNode, class FSlateRect& Rect, float Padding)"
  },
  {
    "label": "StraightenConnections()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "StraightenConnections()"
  },
  {
    "label": "StraightenConnections()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "StraightenConnections(UEdGraphPin* SourcePin, UEdGraphPin* PinToAlign = nullptr)"
  },
  {
    "label": "RefreshNode()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RefreshNode(UEdGraphNode& Node)"
  },
  {
    "label": "OnModuleReloaded()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnModuleReloaded()"
  },
  {
    "label": "OnModuleUnloading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModuleUnloading()"
  },
  {
    "label": "NotifyPrePropertyChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPrePropertyChange(const FString& PropertyName)"
  },
  {
    "label": "NotifyPostPropertyChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPostPropertyChange(const FPropertyChangedEvent& PropertyChangeEvent, const FString& PropertyName)"
  },
  {
    "label": "NotifyGraphChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyGraphChanged()"
  },
  {
    "label": "GetTitleBar()",
    "kind": "Method",
    "detail": "Function (} } TSharedPtr<SWidget>)",
    "insertText": "GetTitleBar()"
  },
  {
    "label": "SWidget()",
    "kind": "Method",
    "detail": "Function (} return TSharedPtr<)",
    "insertText": "SWidget()"
  },
  {
    "label": "AddNotification()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddNotification(FNotificationInfo& Info, bool bSuccess)"
  },
  {
    "label": "AddNotification()",
    "kind": "Method",
    "detail": "Function (Implementation ->)",
    "insertText": "AddNotification(Info, bSuccess)"
  },
  {
    "label": "AddNotification()",
    "kind": "Method",
    "detail": "Function (} } TSharedPtr<SNotificationItem>)",
    "insertText": "AddNotification(FNotificationInfo& Info)"
  },
  {
    "label": "AddNotification()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SNotificationItem> Notification = Implementation ->)",
    "insertText": "AddNotification(Info)"
  },
  {
    "label": "CaptureKeyboard()",
    "kind": "Method",
    "detail": "Function (Implementation ->)",
    "insertText": "CaptureKeyboard()"
  },
  {
    "label": "SetNodeFactory()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetNodeFactory(const TSharedRef<class FGraphNodeFactory>& NewNodeFactory)"
  },
  {
    "label": "SetNodeFactory()",
    "kind": "Method",
    "detail": "Function (Implementation ->)",
    "insertText": "SetNodeFactory(NewNodeFactory)"
  },
  {
    "label": "ResetAllNodesUnrelatedStates()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ResetAllNodesUnrelatedStates()"
  },
  {
    "label": "FocusCommentNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusCommentNodes(TArray<UEdGraphNode*> &CommentNodes, TArray<UEdGraphNode*> &RelatedNodes)"
  },
  {
    "label": "OnCollapseNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCollapseNodes()"
  },
  {
    "label": "CanCollapseNodes()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "CanCollapseNodes()"
  },
  {
    "label": "OnExpandNodes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnExpandNodes()"
  },
  {
    "label": "CanExpandNodes()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "CanExpandNodes()"
  },
  {
    "label": "OnAlignTop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnAlignTop()"
  },
  {
    "label": "OnAlignMiddle()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnAlignMiddle()"
  },
  {
    "label": "OnAlignBottom()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnAlignBottom()"
  },
  {
    "label": "OnAlignLeft()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnAlignLeft()"
  },
  {
    "label": "OnAlignCenter()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnAlignCenter()"
  },
  {
    "label": "OnAlignRight()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnAlignRight()"
  },
  {
    "label": "OnStraightenConnections()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnStraightenConnections()"
  },
  {
    "label": "OnDistributeNodesH()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnDistributeNodesH()"
  },
  {
    "label": "OnDistributeNodesV()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnDistributeNodesV()"
  },
  {
    "label": "GetNumberOfSelectedNodes()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "GetNumberOfSelectedNodes()"
  },
  {
    "label": "GetSingleSelectedNode()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } UEdGraphNode*)",
    "insertText": "GetSingleSelectedNode()"
  },
  {
    "label": "FindGraphEditorForGraph()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } TSharedPtr<SGraphEditor>)",
    "insertText": "FindGraphEditorForGraph(const UEdGraph* Graph)"
  },
  {
    "label": "GetGraphPanel()",
    "kind": "Method",
    "detail": "Function (SGraphPanel*)",
    "insertText": "GetGraphPanel()"
  },
  {
    "label": "OnGraphChanged()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } protected : void)",
    "insertText": "OnGraphChanged(const struct FEdGraphEditAction& InAction)"
  },
  {
    "label": "OnGraphChanged()",
    "kind": "Method",
    "detail": "Function (Implementation ->)",
    "insertText": "OnGraphChanged(InAction)"
  },
  {
    "label": "RegisterGraphEditor()",
    "kind": "Method",
    "detail": "Function (} } private : void)",
    "insertText": "RegisterGraphEditor(const TSharedRef<SGraphEditor>& InGraphEditor)"
  },
  {
    "label": "ConstructImplementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructImplementation(const FArguments& InArgs)"
  }
]