[
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FBlueprintExceptionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintExceptionInfo"
  },
  {
    "label": "task",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "task"
  },
  {
    "label": "FBlueprintContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintContext"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "EFunctionFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFunctionFlags"
  },
  {
    "label": "EExprToken",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EExprToken"
  },
  {
    "label": "EAutoRtfmStopTransactMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAutoRtfmStopTransactMode"
  },
  {
    "label": "ECastToken",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECastToken"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FScriptInstrumentationSignal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScriptInstrumentationSignal"
  },
  {
    "label": "FBlueprintCoreDelegates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintCoreDelegates"
  },
  {
    "label": "COREUOBJECT_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "COREUOBJECT_API"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "FBlueprintContextTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintContextTracker"
  },
  {
    "label": "FEditorScriptExecutionGuard",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorScriptExecutionGuard"
  },
  {
    "label": "FBlueprintEventTimer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintEventTimer"
  },
  {
    "label": "FPausableScopeTimer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPausableScopeTimer"
  },
  {
    "label": "FScopedVMTimer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedVMTimer"
  },
  {
    "label": "FThreadedTimerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadedTimerManager"
  },
  {
    "label": "FScopedNativeTimer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedNativeTimer"
  },
  {
    "label": "TOTAL_OVERHEAD_SCRIPT_STATS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / ThreadSingleton . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" Internationalization / Text . h \" # endif # include \" Stats / Stats . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / CoreMisc . h \" # include \" Memory / VirtualStackAllocator . h \" struct FFrame ; struct FBlueprintExceptionInfo ; namespace verse { class task ; } # define)",
    "insertText": "TOTAL_OVERHEAD_SCRIPT_STATS(STATS && 0) #define PER_FUNCTION_SCRIPT_STATS ((STATS || ENABLE_STATNAMEDEVENTS) && 1) DECLARE_STATS_GROUP(TEXT(\"Scripting\"), STATGROUP_Script, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_FLOAT_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# if TOTAL_OVERHEAD_SCRIPT_STATS)",
    "insertText": "DECLARE_FLOAT_COUNTER_STAT_EXTERN(TEXT(\"Blueprint - (All) VM Time (ms)\"), STAT_ScriptVmTime_Total, STATGROUP_Script, COREUOBJECT_API)"
  },
  {
    "label": "DECLARE_FLOAT_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_COUNTER_STAT_EXTERN(TEXT(\"Blueprint - (All) Native Time (ms)\"), STAT_ScriptNativeTime_Total, STATGROUP_Script, COREUOBJECT_API)"
  },
  {
    "label": "GetThreadSingleton()",
    "kind": "Method",
    "detail": "Function (# endif enum { MAX_STRING_CONST_SIZE = 1 0 2 4 } ; enum { MAX_SIMPLE_RETURN_VALUE_SIZE = 6 4 } ; typedef uint16 VariableSizeType ; # define SCRIPT_LIMIT_BYTECODE_TO_64KB 0 # if SCRIPT_LIMIT_BYTECODE_TO_64KB typedef uint16 CodeSkipSizeType ; # else typedef uint32 CodeSkipSizeType ; # endif class FBlueprintContext { public : FBlueprintContext*)",
    "insertText": "GetThreadSingleton()"
  },
  {
    "label": "FBlueprintContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBlueprintContext()"
  },
  {
    "label": "GetVirtualStackAllocator()",
    "kind": "Method",
    "detail": "Function (FVirtualStackAllocator*)",
    "insertText": "GetVirtualStackAllocator()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } enum EFunctionFlags : uint32 { FUNC_None = 0 x00000000,FUNC_Final = 0 x00000001,FUNC_RequiredAPI = 0 x00000002,FUNC_BlueprintAuthorityOnly = 0 x00000004,FUNC_BlueprintCosmetic = 0 x00000008,FUNC_Net = 0 x00000040,FUNC_NetReliable = 0 x00000080,FUNC_NetRequest = 0 x00000100,FUNC_Exec = 0 x00000200,FUNC_Native = 0 x00000400,FUNC_Event = 0 x00000800,FUNC_NetResponse = 0 x00001000,FUNC_Static = 0 x00002000,FUNC_NetMulticast = 0 x00004000,FUNC_UbergraphFunction = 0 x00008000,FUNC_MulticastDelegate = 0 x00010000,FUNC_Public = 0 x00020000,FUNC_Private = 0 x00040000,FUNC_Protected = 0 x00080000,FUNC_Delegate = 0 x00100000,FUNC_NetServer = 0 x00200000,FUNC_HasOutParms = 0 x00400000,FUNC_HasDefaults = 0 x00800000,FUNC_NetClient = 0 x01000000,FUNC_DLLImport = 0 x02000000,FUNC_BlueprintCallable = 0 x04000000,FUNC_BlueprintEvent = 0 x08000000,FUNC_BlueprintPure = 0 x10000000,FUNC_EditorOnly = 0 x20000000,FUNC_Const = 0 x40000000,FUNC_NetValidate = 0 x80000000,FUNC_AllFlags = 0 xFFFFFFFF,} ; FArchive&)",
    "insertText": "operator(FArchive& Ar, EFunctionFlags& Flags)"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ar(uint32&)"
  },
  {
    "label": "FScriptInstrumentationSignal()",
    "kind": "Method",
    "detail": "Function (EX_LocalVariable = 0 x00,EX_InstanceVariable = 0 x01,EX_DefaultVariable = 0 x02,EX_Return = 0 x04,EX_Jump = 0 x06,EX_JumpIfNot = 0 x07,EX_Assert = 0 x09,EX_Nothing = 0 x0B,EX_NothingInt32 = 0 x0C,EX_Let = 0 x0F,EX_BitFieldConst = 0 x11,EX_ClassContext = 0 x12,EX_MetaCast = 0 x13,EX_LetBool = 0 x14,EX_EndParmValue = 0 x15,EX_EndFunctionParms = 0 x16,EX_Self = 0 x17,EX_Skip = 0 x18,EX_Context = 0 x19,EX_Context_FailSilent = 0 x1A,EX_VirtualFunction = 0 x1B,EX_FinalFunction = 0 x1C,EX_IntConst = 0 x1D,EX_FloatConst = 0 x1E,EX_StringConst = 0 x1F,EX_ObjectConst = 0 x20,EX_NameConst = 0 x21,EX_RotationConst = 0 x22,EX_VectorConst = 0 x23,EX_ByteConst = 0 x24,EX_IntZero = 0 x25,EX_IntOne = 0 x26,EX_True = 0 x27,EX_False = 0 x28,EX_TextConst = 0 x29,EX_NoObject = 0 x2A,EX_TransformConst = 0 x2B,EX_IntConstByte = 0 x2C,EX_NoInterface = 0 x2D,EX_DynamicCast = 0 x2E,EX_StructConst = 0 x2F,EX_EndStructConst = 0 x30,EX_SetArray = 0 x31,EX_EndArray = 0 x32,EX_PropertyConst = 0 x33,EX_UnicodeStringConst = 0 x34,EX_Int64Const = 0 x35,EX_UInt64Const = 0 x36,EX_DoubleConst = 0 x37,EX_Cast = 0 x38,EX_SetSet = 0 x39,EX_EndSet = 0 x3A,EX_SetMap = 0 x3B,EX_EndMap = 0 x3C,EX_SetConst = 0 x3D,EX_EndSetConst = 0 x3E,EX_MapConst = 0 x3F,EX_EndMapConst = 0 x40,EX_Vector3fConst = 0 x41,EX_StructMemberContext = 0 x42,EX_LetMulticastDelegate = 0 x43,EX_LetDelegate = 0 x44,EX_LocalVirtualFunction = 0 x45,EX_LocalFinalFunction = 0 x46,EX_LocalOutVariable = 0 x48,EX_DeprecatedOp4A = 0 x4A,EX_InstanceDelegate = 0 x4B,EX_PushExecutionFlow = 0 x4C,EX_PopExecutionFlow = 0 x4D,EX_ComputedJump = 0 x4E,EX_PopExecutionFlowIfNot = 0 x4F,EX_Breakpoint = 0 x50,EX_InterfaceContext = 0 x51,EX_ObjToInterfaceCast = 0 x52,EX_EndOfScript = 0 x53,EX_CrossInterfaceCast = 0 x54,EX_InterfaceToObjCast = 0 x55,EX_WireTracepoint = 0 x5A,EX_SkipOffsetConst = 0 x5B,EX_AddMulticastDelegate = 0 x5C,EX_ClearMulticastDelegate = 0 x5D,EX_Tracepoint = 0 x5E,EX_LetObj = 0 x5F,EX_LetWeakObjPtr = 0 x60,EX_BindDelegate = 0 x61,EX_RemoveMulticastDelegate = 0 x62,EX_CallMulticastDelegate = 0 x63,EX_LetValueOnPersistentFrame = 0 x64,EX_ArrayConst = 0 x65,EX_EndArrayConst = 0 x66,EX_SoftObjectConst = 0 x67,EX_CallMath = 0 x68,EX_SwitchValue = 0 x69,EX_InstrumentationEvent = 0 x6A,EX_ArrayGetByRef = 0 x6B,EX_ClassSparseDataVariable = 0 x6C,EX_FieldPathConst = 0 x6D,EX_AutoRtfmTransact = 0 x70,EX_AutoRtfmStopTransact = 0 x71,EX_AutoRtfmAbortIfNot = 0 x72,EX_Max = 0 xFF,} ; enum EAutoRtfmStopTransactMode : uint8 { GracefulExit,AbortingExit,AbortingExitAndAbortParent,} ; enum ECastToken : uint8 { CST_ObjectToInterface = 0 x00,CST_ObjectToBool = 0 x01,CST_InterfaceToBool = 0 x02,CST_DoubleToFloat = 0 x03,CST_FloatToDouble = 0 x04,CST_Max = 0 xFF,} ; enum class EBlueprintTextLiteralType : uint8 { Empty,LocalizedText,InvariantText,LiteralString,StringTableEntry,} ; namespace EScriptInstrumentation { enum Type { Class = 0,ClassScope,Instance,Event,InlineEvent,ResumeEvent,PureNodeEntry,NodeDebugSite,NodeEntry,NodeExit,PushState,RestoreState,ResetState,SuspendState,PopState,TunnelEndOfThread,Stop } ; } struct FScriptInstrumentationSignal { public :)",
    "insertText": "FScriptInstrumentationSignal(EScriptInstrumentation::Type InEventType, const UObject* InContextObject, const struct FFrame& InStackFrame, const FName EventNameIn = NAME_None)"
  },
  {
    "label": "FScriptInstrumentationSignal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScriptInstrumentationSignal(EScriptInstrumentation::Type InEventType, const UObject* InContextObject, UFunction* InFunction, const int32 LinkId = INDEX_NONE) : EventType(InEventType) , ContextObject(InContextObject) , Function(InFunction) , EventName(NAME_None) , StackFramePtr(nullptr) , LatentLinkId(LinkId)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} EScriptInstrumentation::Type)",
    "insertText": "GetType()"
  },
  {
    "label": "IsContextObjectValid()",
    "kind": "Method",
    "detail": "Function (EventType = InType ; } bool)",
    "insertText": "IsContextObjectValid()"
  },
  {
    "label": "GetFunctionClassScope()",
    "kind": "Method",
    "detail": "Function (const UClass*)",
    "insertText": "GetFunctionClassScope()"
  },
  {
    "label": "GetFunctionName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFunctionName()"
  },
  {
    "label": "GetScriptCodeOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetScriptCodeOffset()"
  },
  {
    "label": "GetLatentLinkId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLatentLinkId()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnScriptInstrumentEvent, const FScriptInstrumentationSignal&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnToggleScriptProfiler, bool)"
  },
  {
    "label": "ThrowScriptException()",
    "kind": "Method",
    "detail": "Function (public : FOnScriptDebuggingEvent OnScriptException ; FOnScriptInstrumentEvent OnScriptProfilingEvent ; FOnToggleScriptProfiler OnToggleScriptProfiler ; public : void)",
    "insertText": "ThrowScriptException(const UObject* ActiveObject, struct FFrame& StackFrame, const FBlueprintExceptionInfo& Info)"
  },
  {
    "label": "InstrumentScriptEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstrumentScriptEvent(const FScriptInstrumentationSignal& Info)"
  },
  {
    "label": "SetScriptMaximumLoopIterations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScriptMaximumLoopIterations(const int32 MaximumLoopIterations)"
  },
  {
    "label": "IsDebuggingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebuggingEnabled()"
  },
  {
    "label": "FBlueprintContextTracker()",
    "kind": "Method",
    "detail": "Function (} ; # if DO_BLUEPRINT_GUARD struct FBlueprintContextTracker : TThreadSingleton<FBlueprintContextTracker> {)",
    "insertText": "FBlueprintContextTracker() : Runaway(0) , Recurse(0) , bRanaway(false) , ScriptEntryTag(0)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FBlueprintContextTracker&)",
    "insertText": "Get()"
  },
  {
    "label": "TryGet()",
    "kind": "Method",
    "detail": "Function (const FBlueprintContextTracker*)",
    "insertText": "TryGet()"
  },
  {
    "label": "ResetRunaway()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetRunaway()"
  },
  {
    "label": "EnterScriptContext()",
    "kind": "Method",
    "detail": "Function (Runaway + + ; } void)",
    "insertText": "EnterScriptContext(const class UObject* ContextObject, const class UFunction* ContextFunction)"
  },
  {
    "label": "ExitScriptContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitScriptContext()"
  },
  {
    "label": "RecordAccessViolation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecordAccessViolation(const UObject* Object)"
  },
  {
    "label": "GetCurrentScriptStack()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FFrame* const>)",
    "insertText": "GetCurrentScriptStack()"
  },
  {
    "label": "GetCurrentScriptStackWritable()",
    "kind": "Method",
    "detail": "Function (} TArrayView<FFrame* const>)",
    "insertText": "GetCurrentScriptStackWritable()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnEnterScriptContext, const struct FBlueprintContextTracker&, const UObject*, const UFunction*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnEnterScriptContext OnEnterScriptContext ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnExitScriptContext, const struct FBlueprintContextTracker&)"
  },
  {
    "label": "ProcessLocalScriptFunction()",
    "kind": "Method",
    "detail": "Function (FOnExitScriptContext OnExitScriptContext ; private : int32 Runaway ; int32 Recurse ; bool bRanaway ; int32 ScriptEntryTag ; TArray<FFrame*> ScriptStack ; TMap<FName,int32> DisplayedWarningsMap ; FFrame ; void)",
    "insertText": "ProcessLocalScriptFunction(UObject* Context, FFrame& Stack, RESULT_DECL)"
  },
  {
    "label": "FEditorScriptExecutionGuard()",
    "kind": "Method",
    "detail": "Function (verse::task ; } ; # endif struct FEditorScriptExecutionGuard { public :)",
    "insertText": "FEditorScriptExecutionGuard()"
  },
  {
    "label": "FThreadedTimerManager()",
    "kind": "Method",
    "detail": "Function (private : bool bOldGAllowScriptExecutionInEditor ; } ; # if TOTAL_OVERHEAD_SCRIPT_STATS struct FBlueprintEventTimer { struct FPausableScopeTimer ; struct FScopedVMTimer ; class FThreadedTimerManager : public TThreadSingleton<FThreadedTimerManager> { public :)",
    "insertText": "FThreadedTimerManager() : ActiveTimer(nullptr) , ActiveVMScope(nullptr)"
  },
  {
    "label": "FPausableScopeTimer()",
    "kind": "Method",
    "detail": "Function (} FPausableScopeTimer* ActiveTimer ; FScopedVMTimer* ActiveVMScope ; } ; struct FPausableScopeTimer {)",
    "insertText": "FPausableScopeTimer() : PreviouslyActiveTimer(nullptr) , TotalTime(0.0) , StartTime(0.0)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Start()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause(double CurrentTime)"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (TotalTime + = CurrentTime - StartTime ; } void)",
    "insertText": "Resume()"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (StartTime =)",
    "insertText": "Seconds()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Stop()"
  },
  {
    "label": "FScopedVMTimer()",
    "kind": "Method",
    "detail": "Function (private : FPausableScopeTimer* PreviouslyActiveTimer ; double TotalTime ; double StartTime ; } ; struct FScopedVMTimer {)",
    "insertText": "FScopedVMTimer()"
  },
  {
    "label": "FScopedNativeTimer()",
    "kind": "Method",
    "detail": "Function (FPausableScopeTimer Timer ; FScopedVMTimer* VMParent ; } ; struct FScopedNativeTimer {)",
    "insertText": "FScopedNativeTimer()"
  },
  {
    "label": "SCOPED_SCRIPT_NATIVE_TIMER()",
    "kind": "Method",
    "detail": "Function (FPausableScopeTimer Timer ; } ; } ; # define)",
    "insertText": "SCOPED_SCRIPT_NATIVE_TIMER(VarName) \\ FBlueprintEventTimer::FScopedNativeTimer VarName #else #define SCOPED_SCRIPT_NATIVE_TIMER(VarName) #endif COREUOBJECT_API bool IsValidCPPIdentifierChar(TCHAR Char)"
  },
  {
    "label": "ToValidCPPIdentifierChars()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToValidCPPIdentifierChars(TCHAR Char)"
  },
  {
    "label": "UnicodeToCPPIdentifier()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "UnicodeToCPPIdentifier(const FString& InName, bool bDeprecated, const TCHAR* Prefix)"
  }
]