[
  {
    "label": "Port",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Port"
  },
  {
    "label": "Connection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Connection"
  },
  {
    "label": "CandidatePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CandidatePair"
  },
  {
    "label": "SentPing",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SentPing"
  },
  {
    "label": "WriteState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WriteState"
  },
  {
    "label": "ConnectionRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConnectionRequest"
  },
  {
    "label": "ProxyConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProxyConnection"
  },
  {
    "label": "CandidatePair()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_CONNECTION_H_ # define P2P_BASE_CONNECTION_H_ # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / candidate . h \" # include \" api / transport / stun . h \" # include \" logging / rtc_event_log / ice_logger . h \" # include \" p2p / base / candidate_pair_interface . h \" # include \" p2p / base / connection_info . h \" # include \" p2p / base / p2p_transport_channel_ice_field_trials . h \" # include \" p2p / base / stun_request . h \" # include \" p2p / base / transport_description . h \" # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / network . h \" # include \" rtc_base / numerics / event_based_exponential_moving_average . h \" # include \" rtc_base / rate_tracker . h \" # include \" rtc_base / weak_ptr . h \" namespace cricket { int kGoogPingVersion = 1 ; class Port ; class Connection ; struct CandidatePair final : public CandidatePairInterface { ~)",
    "insertText": "CandidatePair()"
  },
  {
    "label": "local_candidate()",
    "kind": "Method",
    "detail": "Function (const Candidate&)",
    "insertText": "local_candidate()"
  },
  {
    "label": "Connection()",
    "kind": "Method",
    "detail": "Function (} std::string id ; int64_t sent_time ; uint32_t nomination ; } ; ~)",
    "insertText": "Connection()"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "id()"
  },
  {
    "label": "remote_candidate()",
    "kind": "Method",
    "detail": "Function (const Candidate&)",
    "insertText": "remote_candidate()"
  },
  {
    "label": "network()",
    "kind": "Method",
    "detail": "Function (const rtc::Network*)",
    "insertText": "network()"
  },
  {
    "label": "generation()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "generation()"
  },
  {
    "label": "priority()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "priority()"
  },
  {
    "label": "write_state()",
    "kind": "Method",
    "detail": "Function (enum WriteState { STATE_WRITABLE = 0,STATE_WRITE_UNRELIABLE = 1,STATE_WRITE_INIT = 2,STATE_WRITE_TIMEOUT = 3,} ; WriteState)",
    "insertText": "write_state()"
  },
  {
    "label": "writable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "writable()"
  },
  {
    "label": "receiving()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "receiving()"
  },
  {
    "label": "port()",
    "kind": "Method",
    "detail": "Function (const Port*)",
    "insertText": "port()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(network_thread_)"
  },
  {
    "label": "connected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "connected()"
  },
  {
    "label": "weak()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "weak()"
  },
  {
    "label": "active()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "active()"
  },
  {
    "label": "dead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dead(int64_t now)"
  },
  {
    "label": "rtt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "rtt()"
  },
  {
    "label": "unwritable_timeout()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "unwritable_timeout()"
  },
  {
    "label": "set_unwritable_timeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_unwritable_timeout(const absl::optional<int>& value_ms)"
  },
  {
    "label": "unwritable_min_checks()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "unwritable_min_checks()"
  },
  {
    "label": "set_unwritable_min_checks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_unwritable_min_checks(const absl::optional<int>& value)"
  },
  {
    "label": "inactive_timeout()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "inactive_timeout()"
  },
  {
    "label": "set_inactive_timeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_inactive_timeout(const absl::optional<int>& value)"
  },
  {
    "label": "stats()",
    "kind": "Method",
    "detail": "Function (ConnectionInfo)",
    "insertText": "stats()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (sigslot::signal1<Connection*> SignalStateChange ; sigslot::signal1<Connection*> SignalDestroyed ; int)",
    "insertText": "Send(const void* data, size_t size, const rtc::PacketOptions& options)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "OnReadPacket()",
    "kind": "Method",
    "detail": "Function (sigslot::signal4<Connection*,const char*,size_t,int64_t> SignalReadPacket ; sigslot::signal1<Connection*> SignalReadyToSend ; void)",
    "insertText": "OnReadPacket(const char* data, size_t size, int64_t packet_time_us)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend()"
  },
  {
    "label": "pruned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "pruned()"
  },
  {
    "label": "Prune()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prune()"
  },
  {
    "label": "use_candidate_attr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "use_candidate_attr()"
  },
  {
    "label": "set_use_candidate_attr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_use_candidate_attr(bool enable)"
  },
  {
    "label": "set_nomination()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_nomination(uint32_t value)"
  },
  {
    "label": "remote_nomination()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "remote_nomination()"
  },
  {
    "label": "nominated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "nominated()"
  },
  {
    "label": "receiving_timeout()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "receiving_timeout()"
  },
  {
    "label": "set_receiving_timeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_receiving_timeout(absl::optional<int> receiving_timeout_ms)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Shutdown()"
  },
  {
    "label": "FailAndPrune()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FailAndPrune()"
  },
  {
    "label": "UpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateState(int64_t now)"
  },
  {
    "label": "UpdateLocalIceParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLocalIceParameters(int component, absl::string_view username_fragment, absl::string_view password)"
  },
  {
    "label": "last_ping_sent()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "last_ping_sent()"
  },
  {
    "label": "Ping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ping(int64_t now)"
  },
  {
    "label": "ReceivedPingResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedPingResponse(int rtt, absl::string_view request_id, const absl::optional<uint32_t>& nomination = absl::nullopt)"
  },
  {
    "label": "BuildPingRequest()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<IceMessage>)",
    "insertText": "BuildPingRequest() RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "last_ping_response_received()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "last_ping_response_received()"
  },
  {
    "label": "last_ping_id_received()",
    "kind": "Method",
    "detail": "Function (const absl::optional<std::string>&)",
    "insertText": "last_ping_id_received()"
  },
  {
    "label": "rtt_samples()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "rtt_samples()"
  },
  {
    "label": "last_ping_received()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "last_ping_received()"
  },
  {
    "label": "ReceivedPing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedPing(const absl::optional<std::string>& request_id = absl::nullopt)"
  },
  {
    "label": "HandleStunBindingOrGoogPingRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleStunBindingOrGoogPingRequest(IceMessage* msg)"
  },
  {
    "label": "HandlePiggybackCheckAcknowledgementIfAny()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePiggybackCheckAcknowledgementIfAny(StunMessage* msg)"
  },
  {
    "label": "last_send_data()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "last_send_data()"
  },
  {
    "label": "last_data_received()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "last_data_received()"
  },
  {
    "label": "ToDebugId()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToDebugId()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "ToSensitiveString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToSensitiveString()"
  },
  {
    "label": "ToLogDescription()",
    "kind": "Method",
    "detail": "Function (const webrtc::IceCandidatePairDescription&)",
    "insertText": "ToLogDescription()"
  },
  {
    "label": "set_ice_event_log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_ice_event_log(webrtc::IceEventLog* ice_event_log)"
  },
  {
    "label": "PrintPingsSinceLastResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintPingsSinceLastResponse(std::string* pings, size_t max)"
  },
  {
    "label": "selected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "selected()"
  },
  {
    "label": "set_selected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_selected(bool selected)"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (sigslot::signal1<Connection*> SignalNominated ; IceCandidatePairState)",
    "insertText": "state()"
  },
  {
    "label": "num_pings_sent()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "num_pings_sent()"
  },
  {
    "label": "ComputeNetworkCost()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "ComputeNetworkCost()"
  },
  {
    "label": "MaybeSetRemoteIceParametersAndGeneration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSetRemoteIceParametersAndGeneration(const IceParameters& params, int generation)"
  },
  {
    "label": "MaybeUpdatePeerReflexiveCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeUpdatePeerReflexiveCandidate(const Candidate& new_candidate)"
  },
  {
    "label": "last_received()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "last_received()"
  },
  {
    "label": "receiving_unchanged_since()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "receiving_unchanged_since()"
  },
  {
    "label": "prflx_priority()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "prflx_priority()"
  },
  {
    "label": "stable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "stable(int64_t now)"
  },
  {
    "label": "TooManyOutstandingPings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TooManyOutstandingPings(const absl::optional<int>& val)"
  },
  {
    "label": "SetLocalCandidateNetworkCost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalCandidateNetworkCost(uint16_t cost)"
  },
  {
    "label": "SetIceFieldTrials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceFieldTrials(const IceFieldTrials* field_trials)"
  },
  {
    "label": "GetRttEstimate()",
    "kind": "Method",
    "detail": "Function (const rtc::EventBasedExponentialMovingAverage&)",
    "insertText": "GetRttEstimate()"
  },
  {
    "label": "SendStunBindingResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendStunBindingResponse(const StunMessage* message)"
  },
  {
    "label": "SendGoogPingResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendGoogPingResponse(const StunMessage* message)"
  },
  {
    "label": "SendResponseMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendResponseMessage(const StunMessage& response)"
  },
  {
    "label": "PortForTest()",
    "kind": "Method",
    "detail": "Function (Port*)",
    "insertText": "PortForTest()"
  },
  {
    "label": "BuildPingRequestForTest()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<IceMessage>)",
    "insertText": "BuildPingRequestForTest()"
  },
  {
    "label": "acked_nomination()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "acked_nomination()"
  },
  {
    "label": "set_remote_nomination()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_remote_nomination(uint32_t remote_nomination)"
  },
  {
    "label": "remote_password_for_test()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "remote_password_for_test()"
  },
  {
    "label": "set_remote_password_for_test()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_remote_password_for_test(absl::string_view pwd)"
  },
  {
    "label": "set_password()",
    "kind": "Method",
    "detail": "Function (remote_candidate_ .)",
    "insertText": "set_password(pwd)"
  },
  {
    "label": "Connection()",
    "kind": "Method",
    "detail": "Function (} protected : class ConnectionRequest ;)",
    "insertText": "Connection(rtc::WeakPtr<Port> port, size_t index, const Candidate& candidate)"
  },
  {
    "label": "OnSendStunPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSendStunPacket(const void* data, size_t size, StunRequest* req)"
  },
  {
    "label": "OnConnectionRequestResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionRequestResponse(StunRequest* req, StunMessage* response)"
  },
  {
    "label": "OnConnectionRequestErrorResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionRequestErrorResponse(ConnectionRequest* req, StunMessage* response) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "OnConnectionRequestTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionRequestTimeout(ConnectionRequest* req) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "OnConnectionRequestSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionRequestSent(ConnectionRequest* req) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "rtt_converged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rtt_converged()"
  },
  {
    "label": "missing_responses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "missing_responses(int64_t now)"
  },
  {
    "label": "set_write_state()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_write_state(WriteState value)"
  },
  {
    "label": "UpdateReceiving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReceiving(int64_t now)"
  },
  {
    "label": "set_state()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_state(IceCandidatePairState state)"
  },
  {
    "label": "set_connected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_connected(bool value)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} webrtc::TaskQueueBase* const network_thread_ ; const uint32_t id_ ; rtc::WeakPtr<Port> port_ ; Candidate local_candidate_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "MaybeUpdateLocalCandidate()",
    "kind": "Method",
    "detail": "Function (Candidate remote_candidate_ ; ConnectionInfo stats_ ; rtc::RateTracker recv_rate_tracker_ ; rtc::RateTracker send_rate_tracker_ ; int64_t last_send_data_ = 0 ; private : void)",
    "insertText": "MaybeUpdateLocalCandidate(StunRequest* request, StunMessage* response) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "LogCandidatePairConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogCandidatePairConfig(webrtc::IceCandidatePairConfigType type) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "LogCandidatePairEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogCandidatePairEvent(webrtc::IceCandidatePairEventType type, uint32_t transaction_id) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "ShouldSendGoogPing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSendGoogPing(const StunMessage* message) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "ProxyConnection()",
    "kind": "Method",
    "detail": "Function (} ; class ProxyConnection : public Connection { public :)",
    "insertText": "ProxyConnection(rtc::WeakPtr<Port> port, size_t index, const Candidate& remote_candidate)"
  }
]