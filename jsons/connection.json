[
  {
    "label": "Port",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Port"
  },
  {
    "label": "Connection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Connection"
  },
  {
    "label": "CandidatePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CandidatePair"
  },
  {
    "label": "Connection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Connection"
  },
  {
    "label": "SentPing",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SentPing"
  },
  {
    "label": "WriteState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WriteState"
  },
  {
    "label": "ConnectionRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConnectionRequest"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "ProxyConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProxyConnection"
  },
  {
    "label": "set_unwritable_timeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_unwritable_timeout(const absl::optional<int>& value_ms)"
  },
  {
    "label": "set_unwritable_min_checks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_unwritable_min_checks(const absl::optional<int>& value)"
  },
  {
    "label": "set_inactive_timeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_inactive_timeout(const absl::optional<int>& value)"
  },
  {
    "label": "stats()",
    "kind": "Method",
    "detail": "Function (ConnectionInfo)",
    "insertText": "stats()"
  },
  {
    "label": "OnReadPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadPacket(const char* data, size_t size, int64_t packet_time_us)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend()"
  },
  {
    "label": "Prune()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prune()"
  },
  {
    "label": "set_use_candidate_attr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_use_candidate_attr(bool enable)"
  },
  {
    "label": "set_nomination()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_nomination(uint32_t value)"
  },
  {
    "label": "set_receiving_timeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_receiving_timeout(absl::optional<int> receiving_timeout_ms)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Shutdown()"
  },
  {
    "label": "FailAndPrune()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FailAndPrune()"
  },
  {
    "label": "UpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateState(int64_t now)"
  },
  {
    "label": "UpdateLocalIceParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLocalIceParameters(int component,\n                                absl::string_view username_fragment,\n                                absl::string_view password)"
  },
  {
    "label": "Ping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ping(int64_t now)"
  },
  {
    "label": "ReceivedPingResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedPingResponse(\n      int rtt,\n      absl::string_view request_id,\n      const absl::optional<uint32_t>& nomination = absl::nullopt)"
  },
  {
    "label": "ReceivedPing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedPing(\n      const absl::optional<std::string>& request_id = absl::nullopt)"
  },
  {
    "label": "HandleStunBindingOrGoogPingRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleStunBindingOrGoogPingRequest(IceMessage* msg)"
  },
  {
    "label": "HandlePiggybackCheckAcknowledgementIfAny()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePiggybackCheckAcknowledgementIfAny(StunMessage* msg)"
  },
  {
    "label": "set_ice_event_log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_ice_event_log(webrtc::IceEventLog* ice_event_log)"
  },
  {
    "label": "PrintPingsSinceLastResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintPingsSinceLastResponse(std::string* pings, size_t max)"
  },
  {
    "label": "set_selected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_selected(bool selected)"
  },
  {
    "label": "MaybeSetRemoteIceParametersAndGeneration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSetRemoteIceParametersAndGeneration(const IceParameters& params,\n                                                int generation)"
  },
  {
    "label": "MaybeUpdatePeerReflexiveCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeUpdatePeerReflexiveCandidate(const Candidate& new_candidate)"
  },
  {
    "label": "SetLocalCandidateNetworkCost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalCandidateNetworkCost(uint16_t cost)"
  },
  {
    "label": "SetIceFieldTrials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceFieldTrials(const IceFieldTrials* field_trials)"
  },
  {
    "label": "ForgetLearnedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForgetLearnedState()"
  },
  {
    "label": "SendStunBindingResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendStunBindingResponse(const StunMessage* message)"
  },
  {
    "label": "SendGoogPingResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendGoogPingResponse(const StunMessage* message)"
  },
  {
    "label": "SendResponseMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendResponseMessage(const StunMessage& response)"
  },
  {
    "label": "BuildPingRequest()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "BuildPingRequest()"
  },
  {
    "label": "set_remote_nomination()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_remote_nomination(uint32_t remote_nomination)"
  },
  {
    "label": "OnSendStunPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSendStunPacket(const void* data, size_t size, StunRequest* req)"
  },
  {
    "label": "OnConnectionRequestResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionRequestResponse(StunRequest* req,\n                                           StunMessage* response)"
  },
  {
    "label": "set_write_state()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_write_state(WriteState value)"
  },
  {
    "label": "UpdateReceiving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReceiving(int64_t now)"
  },
  {
    "label": "set_state()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_state(IceCandidatePairState state)"
  },
  {
    "label": "set_connected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_connected(bool value)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (local_candidate_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (write_state_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (receiving_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (connected_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (pruned_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (use_candidate_attr_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (requests_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (rtt_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (current_round_trip_time_ms_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_ping_sent_)",
    "insertText": "RTC_GUARDED_BY(\n      network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_ping_received_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_data_received_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_ping_response_received_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (pings_since_last_response_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_ping_id_received_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (unwritable_timeout_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (unwritable_min_checks_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (inactive_timeout_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (state_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (receiving_timeout_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (time_created_ms_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (delta_internal_unix_epoch_ms_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (log_description_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (remote_support_goog_ping_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (cached_stun_binding_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (rtt_estimate_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "ProxyConnection()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ProxyConnection(rtc::WeakPtr<Port> port,\n                  size_t index,\n                  const Candidate& remote_candidate)"
  }
]