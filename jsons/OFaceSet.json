[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "Sample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Sample"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_OFaceSet_h # define Alembic_AbcGeom_OFaceSet_h # include<Alembic / Util / Export . h> # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / AbcGeom / SchemaInfoDeclarations . h> # include<Alembic / AbcGeom / OGeomParam . h> # include<Alembic / AbcGeom / FaceSetExclusivity . h> # include<Alembic / AbcGeom / OGeomBase . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT OFaceSetSchema : public OGeomBaseSchema<FaceSetSchemaInfo> { public : class Sample { public : typedef Sample this_type ;)",
    "insertText": "Sample()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Sample(const Abc::Int32ArraySample &iFaceNums) : m_faces( iFaceNums)"
  },
  {
    "label": "getFaces()",
    "kind": "Method",
    "detail": "Function (} const Abc::Int32ArraySample&)",
    "insertText": "getFaces()"
  },
  {
    "label": "getSelfBounds()",
    "kind": "Method",
    "detail": "Function (m_faces = iFaces ; } const Abc::Box3d&)",
    "insertText": "getSelfBounds()"
  },
  {
    "label": "makeEmpty()",
    "kind": "Method",
    "detail": "Function (m_selfBounds .)",
    "insertText": "makeEmpty()"
  },
  {
    "label": "OFaceSetSchema()",
    "kind": "Method",
    "detail": "Function (} protected : Abc::Int32ArraySample m_faces ; Abc::Box3d m_selfBounds ; } ; public : typedef OFaceSetSchema this_type ;)",
    "insertText": "OFaceSetSchema()"
  },
  {
    "label": "OFaceSetSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OFaceSetSchema(AbcA::CompoundPropertyWriterPtr iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument(), const Abc::Argument &iArg2 = Abc::Argument(), const Abc::Argument &iArg3 = Abc::Argument())"
  },
  {
    "label": "OFaceSetSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OFaceSetSchema(Abc::OCompoundProperty iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument(), const Abc::Argument &iArg2 = Abc::Argument())"
  },
  {
    "label": "getNumSamples()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "getNumSamples()"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set(const Sample &iSamp)"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSampling(uint32_t iTimeSamplingID)"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSampling(AbcA::TimeSamplingPtr iTime)"
  },
  {
    "label": "setFaceExclusivity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFaceExclusivity(FaceSetExclusivity iFacesExclusive)"
  },
  {
    "label": "getFaceExclusivity()",
    "kind": "Method",
    "detail": "Function (FaceSetExclusivity)",
    "insertText": "getFaceExclusivity()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid()"
  },
  {
    "label": "ALEMBIC_OVERRIDE_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OVERRIDE_OPERATOR_BOOL(OFaceSetSchema::valid())"
  },
  {
    "label": "_recordExclusivityHint()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "_recordExclusivityHint()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(AbcA::CompoundPropertyWriterPtr iParent, const Abc::Argument &iArg0, const Abc::Argument &iArg1, const Abc::Argument &iArg2, const Abc::Argument &iArg3)"
  },
  {
    "label": "computeBoundsFromPositionsByFaces()",
    "kind": "Method",
    "detail": "Function (Abc::OInt32ArrayProperty m_facesProperty ; Abc::OUInt32Property m_facesExclusiveProperty ; FaceSetExclusivity m_facesExclusive ; } ; typedef Abc::OSchemaObject<OFaceSetSchema> OFaceSet ; typedef Util::shared_ptr<OFaceSet> OFaceSetPtr ; Abc::Box3d)",
    "insertText": "computeBoundsFromPositionsByFaces(const Int32ArraySample & faces, const Int32ArraySample & meshFaceCounts, const Int32ArraySample & vertexIndices, const P3fArraySample & meshP)"
  }
]