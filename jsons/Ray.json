[
  {
    "label": "Ray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Ray"
  },
  {
    "label": "TimeSpan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimeSpan"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_MATH_RAY_HAS_BEEN_INCLUDED # define OPENVDB_MATH_RAY_HAS_BEEN_INCLUDED # include \" Math . h \" # include \" Vec3 . h \" # include \" Transform . h \" # include<algorithm> # include<iostream> # include<limits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace math { template<RealT = double> class Ray { public :)",
    "insertText": "static_assert(std::is_floating_point<RealT>::value, \"math::Ray requires a floating-point value type\")"
  },
  {
    "label": "TimeSpan()",
    "kind": "Method",
    "detail": "Function (using RealType = RealT ; using Vec3Type = Vec3<RealT> ; using Vec3T = Vec3Type ; struct TimeSpan { RealT t0,t1 ;)",
    "insertText": "TimeSpan()"
  },
  {
    "label": "TimeSpan()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TimeSpan(RealT _t0, RealT _t1) : t0(_t0), t1(_t1)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set(RealT _t0, RealT _t1)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (t0 = _t0 ; t1 = _t1 ; } void)",
    "insertText": "get(RealT& _t0, RealT& _t1)"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (_t0 = t0 ; _t1 = t1 ; } bool)",
    "insertText": "valid(RealT eps=math::Delta<RealT>::value())"
  },
  {
    "label": "mid()",
    "kind": "Method",
    "detail": "Function (} RealT)",
    "insertText": "mid()"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "scale(RealT s)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(s>0)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (t0* = s ; t1* = s ; } bool)",
    "insertText": "test(RealT t)"
  },
  {
    "label": "Ray()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "Ray(const Vec3Type& eye = Vec3Type(0,0,0), const Vec3Type& direction = Vec3Type(1,0,0), RealT t0 = math::Delta<RealT>::value(), RealT t1 = std::numeric_limits<RealT>::max()) : mEye(eye), mDir(direction), mInvDir(1/mDir), mTimeSpan(t0, t1)"
  },
  {
    "label": "setEye()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setEye(const Vec3Type& eye)"
  },
  {
    "label": "setDir()",
    "kind": "Method",
    "detail": "Function (mEye = eye ; } void)",
    "insertText": "setDir(const Vec3Type& dir)"
  },
  {
    "label": "setMinTime()",
    "kind": "Method",
    "detail": "Function (mDir = dir ; mInvDir = 1 / mDir ; } void)",
    "insertText": "setMinTime(RealT t0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(t0>0)"
  },
  {
    "label": "setMaxTime()",
    "kind": "Method",
    "detail": "Function (mTimeSpan . t0 = t0 ; } void)",
    "insertText": "setMaxTime(RealT t1)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(t1>0)"
  },
  {
    "label": "setTimes()",
    "kind": "Method",
    "detail": "Function (mTimeSpan . t1 = t1 ; } void)",
    "insertText": "setTimes(RealT t0 = math::Delta<RealT>::value(), RealT t1 = std::numeric_limits<RealT>::max())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(t0>0 && t1>0)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (mTimeSpan .)",
    "insertText": "set(t0, t1)"
  },
  {
    "label": "scaleTimes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "scaleTimes(RealT scale)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (mTimeSpan .)",
    "insertText": "scale(scale)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset(const Vec3Type& eye, const Vec3Type& direction, RealT t0 = math::Delta<RealT>::value(), RealT t1 = std::numeric_limits<RealT>::max())"
  },
  {
    "label": "setEye()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setEye(eye)"
  },
  {
    "label": "setDir()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setDir(direction)"
  },
  {
    "label": "setTimes()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setTimes(t0, t1)"
  },
  {
    "label": "eye()",
    "kind": "Method",
    "detail": "Function (} const Vec3T&)",
    "insertText": "eye()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} Vec3R)",
    "insertText": "end()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid(RealT eps=math::Delta<float>::value())"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "test(RealT time)"
  },
  {
    "label": "applyMap()",
    "kind": "Method",
    "detail": "Function (} template<MapType> Ray)",
    "insertText": "applyMap(const MapType& map)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(map.isLinear())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(math::isRelOrApproxEqual(mDir.length(), RealT(1), Tolerance<RealT>::value(), Delta<RealT>::value()))"
  },
  {
    "label": "applyMap()",
    "kind": "Method",
    "detail": "Function (const Vec3T eye = map .)",
    "insertText": "applyMap(mEye)"
  },
  {
    "label": "applyJacobian()",
    "kind": "Method",
    "detail": "Function (const Vec3T dir = map .)",
    "insertText": "applyJacobian(mDir)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (const RealT length = dir .)",
    "insertText": "length()"
  },
  {
    "label": "applyInverseMap()",
    "kind": "Method",
    "detail": "Function (} template<MapType> Ray)",
    "insertText": "applyInverseMap(const MapType& map)"
  },
  {
    "label": "applyInverseMap()",
    "kind": "Method",
    "detail": "Function (const Vec3T eye = map .)",
    "insertText": "applyInverseMap(mEye)"
  },
  {
    "label": "applyInverseJacobian()",
    "kind": "Method",
    "detail": "Function (const Vec3T dir = map .)",
    "insertText": "applyInverseJacobian(mDir)"
  },
  {
    "label": "indexToWorld()",
    "kind": "Method",
    "detail": "Function (} template<GridType> Ray)",
    "insertText": "indexToWorld(const GridType& grid)"
  },
  {
    "label": "worldToIndex()",
    "kind": "Method",
    "detail": "Function (} template<GridType> Ray)",
    "insertText": "worldToIndex(const GridType& grid)"
  },
  {
    "label": "intersects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "intersects(const Vec3T& center, RealT radius, RealT& t0, RealT& t1)"
  },
  {
    "label": "lengthSqr()",
    "kind": "Method",
    "detail": "Function (const Vec3T origin = mEye - center ; const RealT A = mDir .)",
    "insertText": "lengthSqr()"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (const RealT B = 2* mDir .)",
    "insertText": "dot(origin)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const RealT D = B* B - 4* A* C ;)",
    "insertText": "if(D < 0)"
  },
  {
    "label": "RealT()",
    "kind": "Method",
    "detail": "Function (const RealT Q =)",
    "insertText": "RealT(-0.5)*(B<0 ? (B + Sqrt(D)) : (B - Sqrt(D)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (t0 = Q / A ; t1 = C / Q ;)",
    "insertText": "if(t0 > t1) std::swap(t0, t1)"
  },
  {
    "label": "intersects()",
    "kind": "Method",
    "detail": "Function (RealT t0,t1 ; return this ->)",
    "insertText": "intersects(center, radius, t0, t1)"
  },
  {
    "label": "clip()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "clip(const Vec3T& center, RealT radius)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (mTimeSpan .)",
    "insertText": "get(t0, t1)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (RealT)",
    "insertText": "a(bbox.min()[i] - mEye[i])"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (RealT)",
    "insertText": "b(bbox.max()[i] - mEye[i])"
  },
  {
    "label": "intersects()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<BBoxT> bool)",
    "insertText": "intersects(const BBoxT& bbox)"
  },
  {
    "label": "intersects()",
    "kind": "Method",
    "detail": "Function (RealT t0,t1 ; return this ->)",
    "insertText": "intersects(bbox, t0, t1)"
  },
  {
    "label": "clip()",
    "kind": "Method",
    "detail": "Function (} template<BBoxT> bool)",
    "insertText": "clip(const BBoxT& bbox)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (const RealT cosAngle = mDir .)",
    "insertText": "dot(normal)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "t(distance - mEye.dot(normal))"
  },
  {
    "label": "intersects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "intersects(const Vec3T& normal, const Vec3T& point, RealT& t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : Vec3T mEye,mDir,mInvDir ; TimeSpan mTimeSpan ; } ; template<RealT> std::ostream&)",
    "insertText": "operator(std::ostream& os, const Ray<RealT>& r)"
  },
  {
    "label": "eye()",
    "kind": "Method",
    "detail": "Function (os<<\" eye = \"<<r .)",
    "insertText": "eye() << \" dir=\" << r.dir() << \" 1/dir=\"<<r.invDir() << \" t0=\" << r.t0() << \" t1=\" << r.t1()"
  }
]