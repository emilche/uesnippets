[
  {
    "label": "FGameplayTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTag"
  },
  {
    "label": "FGameplayTagTokenStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayTagTokenStore"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if UE_WITH_IRIS # include \" Iris / ReplicationSystem / NameTokenStore . h \" struct FGameplayTag ; namespace UE::Net { class FGameplayTagTokenStore : public FNameTokenStore {)",
    "insertText": "UE_NONCOPYABLE(FGameplayTagTokenStore)"
  },
  {
    "label": "FGameplayTagTokenStore()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FGameplayTagTokenStore(FNetTokenStore& TokenStore)"
  },
  {
    "label": "GetOrCreateToken()",
    "kind": "Method",
    "detail": "Function (FNetToken)",
    "insertText": "GetOrCreateToken(FGameplayTag Tag)"
  },
  {
    "label": "ResolveToken()",
    "kind": "Method",
    "detail": "Function (FGameplayTag)",
    "insertText": "ResolveToken(FNetToken Token, const FNetTokenStoreState* RemoteTokenStoreState = nullptr)"
  },
  {
    "label": "GetTokenStoreName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetTokenStoreName()"
  }
]