[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBox"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "UBlendSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendSpace"
  },
  {
    "label": "SBlendSpaceGridWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBlendSpaceGridWidget"
  },
  {
    "label": "FBlendSampleDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlendSampleDetails"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBlendSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSample"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / SlateColor . h \" # include \" Layout / Visibility . h \" # include \" Layout / SlateRect . h \" # include \" Input / Reply . h \" # include \" Layout / Margin . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Widgets / SToolTip . h \" # include \" Misc / NotifyHook . h \" # include \" Animation / AnimationAsset . h \" # include \" PersonaDelegates . h \" # include \" StatusBarSubsystem . h \" class FPaintArgs ; class FSlateWindowElementList ; class SBox ; class UAnimSequence ; class UBlendSpace ;)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnSampleMoved, const int32 , const FVector& , bool)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnSampleAnimationChanged, UAnimSequence*, const FVector&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SBlendSpaceGridWidget : public SCompoundWidget,public FNotifyHook { public : class FBlendSampleDetails ; public :)",
    "insertText": "SLATE_BEGIN_ARGS(SBlendSpaceGridWidget) : _BlendSpaceBase(nullptr) , _NotifyHook(nullptr) , _ReadOnly(false) , _ShowAxisLabels(true) , _ShowSettingsButtons(true) , _StatusBarName(TEXT(\"AssetEditor.AnimationEditor.MainMenu\"))"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(const UBlendSpace*, BlendSpaceBase) SLATE_ATTRIBUTE(FVector, Position) SLATE_ATTRIBUTE(FVector, FilteredPosition) SLATE_ARGUMENT(FNotifyHook*, NotifyHook) SLATE_ARGUMENT(bool, ReadOnly) SLATE_ARGUMENT(bool, ShowAxisLabels) SLATE_ARGUMENT(bool, ShowSettingsButtons) SLATE_EVENT(FOnExtendBlendSpaceSampleTooltip, OnExtendSampleTooltip) SLATE_EVENT(FOnSampleMoved, OnSampleMoved) SLATE_EVENT(FOnBlendSpaceSampleRemoved, OnSampleRemoved) SLATE_EVENT(FOnBlendSpaceSampleAdded, OnSampleAdded) SLATE_EVENT(FOnBlendSpaceSampleDuplicated, OnSampleDuplicated) SLATE_EVENT(FOnBlendSpaceSampleReplaced, OnSampleReplaced) SLATE_EVENT(FOnBlendSpaceNavigateUp, OnNavigateUp) SLATE_EVENT(FOnBlendSpaceNavigateDown, OnNavigateDown) SLATE_EVENT(FOnBlendSpaceCanvasDoubleClicked, OnCanvasDoubleClicked) SLATE_EVENT(FOnBlendSpaceSampleDoubleClicked, OnSampleDoubleClicked) SLATE_EVENT(FOnGetBlendSpaceSampleName, OnGetBlendSpaceSampleName) SLATE_ARGUMENT(FName, StatusBarName) SLATE_END_ARGS()"
  },
  {
    "label": "SBlendSpaceGridWidget()",
    "kind": "Method",
    "detail": "Function (SingleAxis,TwoAxis } ; enum class EDragState { PreDrag,DragSample,Preview,DragDrop,DragDropOverride,InvalidDragDrop,None } ; public : ~)",
    "insertText": "SBlendSpaceGridWidget()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "GetPreviewPosition()",
    "kind": "Method",
    "detail": "Function (const FVector)",
    "insertText": "GetPreviewPosition()"
  },
  {
    "label": "SetPreviewingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewingState(const FVector& InPosition, const FVector& InFilteredPosition)"
  },
  {
    "label": "IsPreviewing()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsPreviewing()"
  },
  {
    "label": "GetSelectedSampleIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSelectedSampleIndex()"
  },
  {
    "label": "InvalidateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateState()"
  },
  {
    "label": "PaintBackgroundAndGrid()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PaintBackgroundAndGrid(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32& DrawLayerId)"
  },
  {
    "label": "PaintSampleKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintSampleKeys(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32& DrawLayerId)"
  },
  {
    "label": "PaintAxisText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintAxisText(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32& DrawLayerId)"
  },
  {
    "label": "PaintTriangulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintTriangulation(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32& DrawLayerId)"
  },
  {
    "label": "PaintAnimationNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintAnimationNames(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32& DrawLayerId)"
  },
  {
    "label": "PaintGridSampleWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintGridSampleWeights(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32& DrawLayerId)"
  },
  {
    "label": "IsValidDragDropOperation()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsValidDragDropOperation(const FDragDropEvent& DragDropEvent, FText& InvalidOperationText)"
  },
  {
    "label": "ValidateAnimationSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateAnimationSequence(const UAnimSequence* AnimationSequence, FText& InvalidOperationText)"
  },
  {
    "label": "StartPreviewing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPreviewing()"
  },
  {
    "label": "StopPreviewing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopPreviewing()"
  },
  {
    "label": "MakeViewContextMenuEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeViewContextMenuEntries(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "CreateBlendSampleContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateBlendSampleContextMenu()"
  },
  {
    "label": "CreateNewBlendSampleContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateNewBlendSampleContextMenu(const FVector2D& InMousePosition)"
  },
  {
    "label": "CreateGridEntryBox()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateGridEntryBox(const int32 BoxIndex, const bool bShowLabel)"
  },
  {
    "label": "ProcessClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ProcessClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ToggleTriangulationVisibility()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ToggleTriangulationVisibility()"
  },
  {
    "label": "GetTriangulationButtonVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetTriangulationButtonVisibility()"
  },
  {
    "label": "GetAnimationNamesButtonVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetAnimationNamesButtonVisibility()"
  },
  {
    "label": "ToggleFittingType()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ToggleFittingType()"
  },
  {
    "label": "GetFittingButtonVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetFittingButtonVisibility()"
  },
  {
    "label": "UpdateGridRatioMargin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGridRatioMargin(const FVector2D& GeometrySize)"
  },
  {
    "label": "GetFittingTypeButtonToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFittingTypeButtonToolTipText()"
  },
  {
    "label": "ToggleShowAnimationNames()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ToggleShowAnimationNames()"
  },
  {
    "label": "CalculateGridPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateGridPoints()"
  },
  {
    "label": "SnapScreenPositionToGrid()",
    "kind": "Method",
    "detail": "Function (const FVector2D)",
    "insertText": "SnapScreenPositionToGrid(const FVector2D& InPosition, bool ForceSnap)"
  },
  {
    "label": "ScreenPositionToSampleValueWithSnapping()",
    "kind": "Method",
    "detail": "Function (const FVector)",
    "insertText": "ScreenPositionToSampleValueWithSnapping(const FVector2D& InPosition, bool bForceSnap)"
  },
  {
    "label": "FindClosestGridPointIndexFromScreenPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindClosestGridPointIndexFromScreenPosition(const FVector2D& InPosition)"
  },
  {
    "label": "SampleValueToScreenPosition()",
    "kind": "Method",
    "detail": "Function (const FVector2D)",
    "insertText": "SampleValueToScreenPosition(const FVector& SampleValue)"
  },
  {
    "label": "SampleValueToNormalizedPosition()",
    "kind": "Method",
    "detail": "Function (const FVector2D)",
    "insertText": "SampleValueToNormalizedPosition(const FVector& SampleValue)"
  },
  {
    "label": "ScreenPositionToSampleValue()",
    "kind": "Method",
    "detail": "Function (const FVector)",
    "insertText": "ScreenPositionToSampleValue(const FVector2D& GridPosition, bool bClamp)"
  },
  {
    "label": "GetGridRectangleFromGeometry()",
    "kind": "Method",
    "detail": "Function (const FSlateRect)",
    "insertText": "GetGridRectangleFromGeometry(const FGeometry& MyGeometry)"
  },
  {
    "label": "IsSampleValueWithinMouseRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSampleValueWithinMouseRange(const FVector& SampleValue, float& OutDistance)"
  },
  {
    "label": "GetClosestSamplePointIndexToMouse()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetClosestSamplePointIndexToMouse()"
  },
  {
    "label": "ShowToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowToolTip()"
  },
  {
    "label": "ResetToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToolTip()"
  },
  {
    "label": "GetToolTipAnimationName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipAnimationName()"
  },
  {
    "label": "GetToolTipSampleValue()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipSampleValue()"
  },
  {
    "label": "GetToolTipSampleValidity()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipSampleValidity()"
  },
  {
    "label": "GetSampleErrorMessage()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSampleErrorMessage(const struct FBlendSample& BlendSample)"
  },
  {
    "label": "GetInputBoxVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetInputBoxVisibility(const int32 ParameterIndex)"
  },
  {
    "label": "GetInputBoxValue()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetInputBoxValue(const int32 ParameterIndex)"
  },
  {
    "label": "GetInputBoxMinValue()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetInputBoxMinValue(const int32 ParameterIndex)"
  },
  {
    "label": "GetInputBoxMaxValue()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetInputBoxMaxValue(const int32 ParameterIndex)"
  },
  {
    "label": "GetInputBoxDelta()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInputBoxDelta(const int32 ParameterIndex)"
  },
  {
    "label": "OnInputBoxValueCommited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInputBoxValueCommited(const float NewValue, ETextCommit::Type CommitType, const int32 ParameterIndex)"
  },
  {
    "label": "OnInputBoxValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInputBoxValueChanged(const float NewValue, const int32 ParameterIndex, bool bIsInteractive)"
  },
  {
    "label": "OnInputSliderBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInputSliderBegin(const int32 ParameterIndex)"
  },
  {
    "label": "OnInputSliderEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInputSliderEnd(const float NewValue, const int32 ParameterIndex)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "OnBlendSampleCut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlendSampleCut()"
  },
  {
    "label": "OnBlendSampleCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlendSampleCopy()"
  },
  {
    "label": "OnBlendSamplePaste()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlendSamplePaste()"
  },
  {
    "label": "OnBlendSampleDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlendSampleDelete()"
  },
  {
    "label": "CanBlendSampleCutCopy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBlendSampleCutCopy()"
  },
  {
    "label": "CanBlendSamplePaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBlendSamplePaste()"
  },
  {
    "label": "CanBlendSampleDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBlendSampleDelete()"
  },
  {
    "label": "GetSampleToolTipVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetSampleToolTipVisibility()"
  },
  {
    "label": "GetPreviewToolTipVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetPreviewToolTipVisibility()"
  },
  {
    "label": "UpdateCachedBlendParameterData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedBlendParameterData()"
  },
  {
    "label": "GetSampleName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSampleName(const FBlendSample& InBlendSample, int32 InSampleIndex)"
  },
  {
    "label": "EnableStatusBarMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableStatusBarMessage(bool bEnable)"
  },
  {
    "label": "GetSampleLookupWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSampleLookupWeight(int32 SampleIndex)"
  },
  {
    "label": "ArrowBrushes()",
    "kind": "Method",
    "detail": "Function (private : TAttribute<const UBlendSpace*> BlendSpaceBase ; TWeakObjectPtr<const UBlendSpace> PreviousBlendSpaceBase ; TAttribute<FVector> TargetPosition ; TAttribute<FVector> FilteredPosition ; FNotifyHook* NotifyHook ; uint32 BlendParametersToDraw ; EGridType GridType ; FVector2D LastMousePosition ; FVector2D LocalMousePosition ; FVector2D MouseDownPosition ; bool bMouseIsOverGeometry ; int32 SelectedSampleIndex ; int32 HighlightedSampleIndex ; int32 ToolTipSampleIndex ; bool bHighlightPreviewPin ; EDragState DragState ; int32 DraggedSampleIndex ; FVector LastDragPosition ; bool bSamplePreviewing ; FVector2D LastPreviewingMousePosition ; FVector PreviewPosition ; bool bAdvancedPreview ; TArray<FBlendSampleData> PreviewedSamples ; int32 CachedTriangulationIndex = - 1 ; FVector PreviewFilteredPosition ; TSharedPtr<SToolTip> ToolTip ; TSharedPtr<SBox> ToolTipExtensionContainer ; FText InvalidDragDropText ; FText InvalidSamplePositionDragDropText ; FText DragDropAnimationName ; FText HoveredAnimationName ; UAnimSequence* DragDropAnimationSequence ; float CachedInputBoxValues [ 2 ] ; bool bSliderMovement [ 2 ] = { false,false } ; FSlateRect CachedGridRectangle ; FVector2D SampleValueMin ; FVector2D SampleValueMax ; FVector2D SampleValueRange ; FVector2D SampleGridDelta ; bool bSampleSnapToGrid [ 2 ] ; FIntPoint SampleGridDivisions ; FText ParameterXName ; FText ParameterYName ; TArray<FVector2D> CachedGridPoints ; TArray<FVector> CachedSamplePoints ; TSharedPtr<class FUICommandList> UICommandList ; bool bRefreshCachedData ; FVector2D XAxisTextSize ; float MaxVerticalAxisTextWidth ; float MaxHorizontalAxisTextHeight ; float HorizontalAxisMaxTextWidth ; FVector2D YAxisTextSize ; FOnBlendSpaceSampleAdded OnSampleAdded ; FOnBlendSpaceSampleDuplicated OnSampleDuplicated ; FOnSampleMoved OnSampleMoved ; FOnBlendSpaceSampleRemoved OnSampleRemoved ; FOnBlendSpaceSampleReplaced OnSampleReplaced ; FOnBlendSpaceNavigateUp OnNavigateUp ; FOnBlendSpaceNavigateDown OnNavigateDown ; FOnBlendSpaceCanvasDoubleClicked OnCanvasDoubleClicked ; FOnBlendSpaceSampleDoubleClicked OnSampleDoubleClicked ; FOnGetBlendSpaceSampleName OnGetBlendSpaceSampleName ; FOnExtendBlendSpaceSampleTooltip OnExtendSampleTooltip ; float DragThreshold ; float ClickAndHighlightThreshold ; FVector2D KeySize ; FVector2D PreviewSize ; const FSlateBrush* KeyBrush ; const FSlateBrush* PreviewBrush ; const FSlateBrush* BackgroundImage ; const FSlateBrush* LabelBrush ; enum class EArrowDirection : uint8 { Left,Right,Up,Down,Max } ; const FSlateBrush*)",
    "insertText": "ArrowBrushes(int32)"
  }
]