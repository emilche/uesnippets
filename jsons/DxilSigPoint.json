[
  {
    "label": "VersionedSemanticInterpretation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VersionedSemanticInterpretation"
  },
  {
    "label": "SigPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SigPoint"
  },
  {
    "label": "VersionedSemanticInterpretation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DxilConstants . h \" namespace hlsl { struct VersionedSemanticInterpretation {)",
    "insertText": "VersionedSemanticInterpretation(DXIL::SemanticInterpretationKind k, unsigned MajorVersion = 0, unsigned MinorVersion = 0) : Kind(k), Major((unsigned short)MajorVersion), Minor((unsigned short)MinorVersion)"
  },
  {
    "label": "SigPoint()",
    "kind": "Method",
    "detail": "Function (} DXIL::SemanticInterpretationKind Kind ; unsigned short Major,Minor ; } ; class SigPoint { public : using Kind = DXIL::SigPointKind ;)",
    "insertText": "SigPoint(DXIL::SigPointKind spk, const char *name, DXIL::SigPointKind rspk, DXIL::ShaderKind shk, DXIL::SignatureKind sigk, DXIL::PackingKind pk)"
  },
  {
    "label": "IsInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInput()"
  },
  {
    "label": "GetPackingKind()",
    "kind": "Method",
    "detail": "Function (DXIL::PackingKind)",
    "insertText": "GetPackingKind()"
  },
  {
    "label": "GetKind()",
    "kind": "Method",
    "detail": "Function (DXIL::SigPointKind)",
    "insertText": "GetKind(DXIL::ShaderKind shaderKind, DXIL::SignatureKind sigKind, bool isPatchConstantFunction, bool isSpecialInput)"
  },
  {
    "label": "GetInterpretation()",
    "kind": "Method",
    "detail": "Function (DXIL::SemanticInterpretationKind)",
    "insertText": "GetInterpretation(DXIL::SemanticKind SK, Kind K, unsigned MajorVersion, unsigned MinorVersion)"
  },
  {
    "label": "RecoverKind()",
    "kind": "Method",
    "detail": "Function (Kind)",
    "insertText": "RecoverKind(DXIL::SemanticKind SK, Kind K)"
  },
  {
    "label": "kNumSigPointRecords()",
    "kind": "Method",
    "detail": "Function (private : const unsigned)",
    "insertText": "kNumSigPointRecords(unsigned)"
  },
  {
    "label": "ms_SemanticInterpretationTable()",
    "kind": "Method",
    "detail": "Function (const SigPoint ms_SigPoints [ kNumSigPointRecords ] ; const VersionedSemanticInterpretation)",
    "insertText": "ms_SemanticInterpretationTable(unsigned)DXIL::SemanticKind::Invalid][(unsigned)"
  }
]