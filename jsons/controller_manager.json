[
  {
    "label": "DebugDumpWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DebugDumpWriter"
  },
  {
    "label": "ControllerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ControllerManager"
  },
  {
    "label": "ControllerManagerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ControllerManagerImpl"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "ScoringPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScoringPoint"
  },
  {
    "label": "ControllerManager()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_CONTROLLER_MANAGER_H_ # define MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_CONTROLLER_MANAGER_H_ # include<map> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" modules / audio_coding / audio_network_adaptor / controller . h \" namespace webrtc { class DebugDumpWriter ; class ControllerManager { public : ~)",
    "insertText": "ControllerManager()"
  },
  {
    "label": "GetSortedControllers()",
    "kind": "Method",
    "detail": "Function (std::vector<Controller*>)",
    "insertText": "GetSortedControllers(const Controller::NetworkMetrics& metrics)"
  },
  {
    "label": "GetControllers()",
    "kind": "Method",
    "detail": "Function (std::vector<Controller*>)",
    "insertText": "GetControllers()"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (} ; class ControllerManagerImpl final : public ControllerManager { public : struct Config {)",
    "insertText": "Config(int min_reordering_time_ms, float min_reordering_squared_distance)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Config()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (int min_reordering_time_ms ; float min_reordering_squared_distance ; } ; std::unique_ptr<ControllerManager>)",
    "insertText": "Create(absl::string_view config_string, size_t num_encoder_channels, rtc::ArrayView<const int> encoder_frame_lengths_ms, int min_encoder_bitrate_bps, size_t intial_channels_to_encode, int initial_frame_length_ms, int initial_bitrate_bps, bool initial_fec_enabled, bool initial_dtx_enabled)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ControllerManager>)",
    "insertText": "Create(absl::string_view config_string, size_t num_encoder_channels, rtc::ArrayView<const int> encoder_frame_lengths_ms, int min_encoder_bitrate_bps, size_t intial_channels_to_encode, int initial_frame_length_ms, int initial_bitrate_bps, bool initial_fec_enabled, bool initial_dtx_enabled, DebugDumpWriter* debug_dump_writer)"
  },
  {
    "label": "ControllerManagerImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ControllerManagerImpl(const Config& config)"
  },
  {
    "label": "ControllerManagerImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ControllerManagerImpl(const Config& config, std::vector<std::unique_ptr<Controller>> controllers, const std::map<const Controller*, std::pair<int, float>>& chracteristic_points)"
  },
  {
    "label": "ControllerManagerImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ControllerManagerImpl()"
  },
  {
    "label": "ControllerManagerImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ControllerManagerImpl(const ControllerManagerImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ControllerManagerImpl&)",
    "insertText": "operator(const ControllerManagerImpl&)"
  },
  {
    "label": "ScoringPoint()",
    "kind": "Method",
    "detail": "Function (private : struct ScoringPoint {)",
    "insertText": "ScoringPoint(int uplink_bandwidth_bps, float uplink_packet_loss_fraction)"
  },
  {
    "label": "SquaredDistanceTo()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SquaredDistanceTo(const ScoringPoint& scoring_point)"
  }
]