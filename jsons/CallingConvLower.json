[
  {
    "label": "CCState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CCState"
  },
  {
    "label": "MVT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MVT"
  },
  {
    "label": "TargetMachine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetMachine"
  },
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "CCValAssign",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CCValAssign"
  },
  {
    "label": "LocInfo",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LocInfo"
  },
  {
    "label": "ForwardedRegister",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ForwardedRegister"
  },
  {
    "label": "ByValInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ByValInfo"
  },
  {
    "label": "getReg()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_CALLINGCONVLOWER_H # define LLVM_CODEGEN_CALLINGCONVLOWER_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / CodeGen / MachineFrameInfo . h \" # include \" llvm / CodeGen / MachineFunction . h \" # include \" llvm / IR / CallingConv . h \" # include \" llvm / MC / MCRegisterInfo . h \" # include \" llvm / Target / TargetCallingConv . h \" namespace llvm { class CCState ; class MVT ; class TargetMachine ; class TargetRegisterInfo ; class CCValAssign { public : enum LocInfo { Full,SExt,ZExt,AExt,SExtUpper,ZExtUpper,AExtUpper,BCvt,VExt,FPExt,Indirect } ; private : unsigned ValNo ; unsigned Loc ; unsigned isMem : 1 ; unsigned isCustom : 1 ; LocInfo HTP : 6 ; MVT ValVT ; MVT LocVT ; public : CCValAssign)",
    "insertText": "getReg(unsigned ValNo, MVT ValVT, unsigned RegNo, MVT LocVT, LocInfo HTP)"
  },
  {
    "label": "getCustomReg()",
    "kind": "Method",
    "detail": "Function (CCValAssign Ret ; Ret . ValNo = ValNo ; Ret . Loc = RegNo ; Ret . isMem = false ; Ret . isCustom = false ; Ret . HTP = HTP ; Ret . ValVT = ValVT ; Ret . LocVT = LocVT ; return Ret ; } CCValAssign)",
    "insertText": "getCustomReg(unsigned ValNo, MVT ValVT, unsigned RegNo, MVT LocVT, LocInfo HTP)"
  },
  {
    "label": "getReg()",
    "kind": "Method",
    "detail": "Function (CCValAssign Ret ; Ret =)",
    "insertText": "getReg(ValNo, ValVT, RegNo, LocVT, HTP)"
  },
  {
    "label": "getMem()",
    "kind": "Method",
    "detail": "Function (Ret . isCustom = true ; return Ret ; } CCValAssign)",
    "insertText": "getMem(unsigned ValNo, MVT ValVT, unsigned Offset, MVT LocVT, LocInfo HTP)"
  },
  {
    "label": "getCustomMem()",
    "kind": "Method",
    "detail": "Function (CCValAssign Ret ; Ret . ValNo = ValNo ; Ret . Loc = Offset ; Ret . isMem = true ; Ret . isCustom = false ; Ret . HTP = HTP ; Ret . ValVT = ValVT ; Ret . LocVT = LocVT ; return Ret ; } CCValAssign)",
    "insertText": "getCustomMem(unsigned ValNo, MVT ValVT, unsigned Offset, MVT LocVT, LocInfo HTP)"
  },
  {
    "label": "getMem()",
    "kind": "Method",
    "detail": "Function (CCValAssign Ret ; Ret =)",
    "insertText": "getMem(ValNo, ValVT, Offset, LocVT, HTP)"
  },
  {
    "label": "getPending()",
    "kind": "Method",
    "detail": "Function (Ret . isCustom = true ; return Ret ; } CCValAssign)",
    "insertText": "getPending(unsigned ValNo, MVT ValVT, MVT LocVT, LocInfo HTP, unsigned ExtraInfo = 0)"
  },
  {
    "label": "convertToReg()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "convertToReg(unsigned RegNo)"
  },
  {
    "label": "convertToMem()",
    "kind": "Method",
    "detail": "Function (Loc = RegNo ; isMem = false ; } void)",
    "insertText": "convertToMem(unsigned Offset)"
  },
  {
    "label": "getValNo()",
    "kind": "Method",
    "detail": "Function (Loc = Offset ; isMem = true ; } unsigned)",
    "insertText": "getValNo()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isRegLoc())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isMemLoc())"
  },
  {
    "label": "isUpperBitsInLoc()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isUpperBitsInLoc()"
  },
  {
    "label": "CCAssignFn()",
    "kind": "Method",
    "detail": "Function (} unsigned VReg ; MCPhysReg PReg ; MVT VT ; } ; typedef bool)",
    "insertText": "CCAssignFn(unsigned ValNo, MVT ValVT, MVT LocVT, CCValAssign::LocInfo LocInfo, ISD::ArgFlagsTy ArgFlags, CCState &State)"
  },
  {
    "label": "CCCustomFn()",
    "kind": "Method",
    "detail": "Function (typedef bool)",
    "insertText": "CCCustomFn(unsigned &ValNo, MVT &ValVT, MVT &LocVT, CCValAssign::LocInfo &LocInfo, ISD::ArgFlagsTy &ArgFlags, CCState &State)"
  },
  {
    "label": "ByValInfo()",
    "kind": "Method",
    "detail": "Function (typedef enum { Unknown,Prologue,Call } ParmContext ; class CCState { private : CallingConv::ID CallingConv ; bool IsVarArg ; MachineFunction& MF ; const TargetRegisterInfo& TRI ; SmallVectorImpl<CCValAssign>& Locs ; LLVMContext& Context ; unsigned StackOffset ; SmallVector<uint32_t,1 6> UsedRegs ; SmallVector<CCValAssign,4> PendingLocs ; struct ByValInfo {)",
    "insertText": "ByValInfo(unsigned B, unsigned E, bool IsWaste = false) : Begin(B), End(E), Waste(IsWaste)"
  },
  {
    "label": "CCState()",
    "kind": "Method",
    "detail": "Function (} unsigned Begin ; unsigned End ; bool Waste ; } ; SmallVector<ByValInfo,4> ByValRegs ; unsigned InRegsParamsProcessed ; protected : ParmContext CallOrPrologue ; public :)",
    "insertText": "CCState(CallingConv::ID CC, bool isVarArg, MachineFunction &MF, SmallVectorImpl<CCValAssign> &locs, LLVMContext &C)"
  },
  {
    "label": "addLoc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addLoc(const CCValAssign &V)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Locs .)",
    "insertText": "push_back(V)"
  },
  {
    "label": "getContext()",
    "kind": "Method",
    "detail": "Function (} LLVMContext&)",
    "insertText": "getContext()"
  },
  {
    "label": "AnalyzeFormalArguments()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AnalyzeFormalArguments(const SmallVectorImpl<ISD::InputArg> &Ins, CCAssignFn Fn)"
  },
  {
    "label": "AnalyzeReturn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeReturn(const SmallVectorImpl<ISD::OutputArg> &Outs, CCAssignFn Fn)"
  },
  {
    "label": "CheckReturn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckReturn(const SmallVectorImpl<ISD::OutputArg> &ArgsFlags, CCAssignFn Fn)"
  },
  {
    "label": "AnalyzeCallOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeCallOperands(const SmallVectorImpl<ISD::OutputArg> &Outs, CCAssignFn Fn)"
  },
  {
    "label": "AnalyzeCallOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeCallOperands(SmallVectorImpl<MVT> &ArgVTs, SmallVectorImpl<ISD::ArgFlagsTy> &Flags, CCAssignFn Fn)"
  },
  {
    "label": "AnalyzeCallResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeCallResult(const SmallVectorImpl<ISD::InputArg> &Ins, CCAssignFn Fn)"
  },
  {
    "label": "AnalyzeCallResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeCallResult(MVT VT, CCAssignFn Fn)"
  },
  {
    "label": "getFirstUnallocated()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getFirstUnallocated(ArrayRef<MCPhysReg> Regs)"
  },
  {
    "label": "AllocateReg()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "AllocateReg(unsigned Reg)"
  },
  {
    "label": "MarkAllocated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAllocated(Reg)"
  },
  {
    "label": "MarkAllocated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAllocated(ShadowReg)"
  },
  {
    "label": "getFirstUnallocated()",
    "kind": "Method",
    "detail": "Function (unsigned FirstUnalloc =)",
    "insertText": "getFirstUnallocated(Regs)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool BlockAvailable = true ;)",
    "insertText": "for(unsigned BlockIdx = 0; BlockIdx < RegsRequired; ++BlockIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BlockAvailable = false ; break ; } })",
    "insertText": "if(BlockAvailable)"
  },
  {
    "label": "MarkAllocated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAllocated(Regs[StartIdx + BlockIdx])"
  },
  {
    "label": "AllocateReg()",
    "kind": "Method",
    "detail": "Function (} return Regs [ StartIdx ] ; } } return 0 ; } unsigned)",
    "insertText": "AllocateReg(ArrayRef<MCPhysReg> Regs, const MCPhysReg *ShadowRegs)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Align && ((Align - 1) & Align) == 0)"
  },
  {
    "label": "StackOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StackOffset((StackOffset + Align - 1) & ~(Align - 1))"
  },
  {
    "label": "getFrameInfo()",
    "kind": "Method",
    "detail": "Function (unsigned Result = StackOffset ; StackOffset + = Size ; MF .)",
    "insertText": "getFrameInfo()->ensureMaxAlignment(Align)"
  },
  {
    "label": "AllocateStack()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "AllocateStack(unsigned Size, unsigned Align, ArrayRef<MCPhysReg> ShadowRegs)"
  },
  {
    "label": "HandleByVal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleByVal(unsigned ValNo, MVT ValVT, MVT LocVT, CCValAssign::LocInfo LocInfo, int MinSize, int MinAlign, ISD::ArgFlagsTy ArgFlags)"
  },
  {
    "label": "getInRegsParamsCount()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getInRegsParamsCount()"
  },
  {
    "label": "getInRegsParamsProcessed()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getInRegsParamsProcessed()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(InRegsParamRecordIndex < ByValRegs.size() && \"Wrong ByVal parameter index\")"
  },
  {
    "label": "addInRegsParamInfo()",
    "kind": "Method",
    "detail": "Function (const ByValInfo& info = ByValRegs [ InRegsParamRecordIndex ] ; BeginReg = info . Begin ; EndReg = info . End ; } void)",
    "insertText": "addInRegsParamInfo(unsigned RegBegin, unsigned RegEnd)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (ByValRegs .)",
    "insertText": "push_back(ByValInfo(RegBegin, RegEnd))"
  },
  {
    "label": "nextInRegsParam()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "nextInRegsParam()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (unsigned e = ByValRegs .)",
    "insertText": "size()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (InRegsParamsProcessed = 0 ; ByValRegs .)",
    "insertText": "clear()"
  },
  {
    "label": "rewindByValRegsInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "rewindByValRegsInfo()"
  },
  {
    "label": "getCallOrPrologue()",
    "kind": "Method",
    "detail": "Function (InRegsParamsProcessed = 0 ; } ParmContext)",
    "insertText": "getCallOrPrologue()"
  },
  {
    "label": "analyzeMustTailForwardedRegisters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzeMustTailForwardedRegisters(SmallVectorImpl<ForwardedRegister> &Forwards, ArrayRef<MVT> RegParmTypes, CCAssignFn Fn)"
  },
  {
    "label": "MarkAllocated()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "MarkAllocated(unsigned Reg)"
  }
]