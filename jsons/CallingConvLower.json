[
  {
    "label": "CCState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CCState"
  },
  {
    "label": "MVT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MVT"
  },
  {
    "label": "TargetMachine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetMachine"
  },
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "CCValAssign",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CCValAssign"
  },
  {
    "label": "LocInfo",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LocInfo"
  },
  {
    "label": "ForwardedRegister",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ForwardedRegister"
  },
  {
    "label": "tracks",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "tracks"
  },
  {
    "label": "holds",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "holds"
  },
  {
    "label": "CCState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CCState"
  },
  {
    "label": "ByValInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ByValInfo"
  },
  {
    "label": "getReg()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getReg(ValNo, ValVT, ExtraInfo, LocVT, HTP)"
  },
  {
    "label": "CCAssignFn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CCAssignFn(unsigned ValNo, MVT ValVT,\n                        MVT LocVT, CCValAssign::LocInfo LocInfo,\n                        ISD::ArgFlagsTy ArgFlags, CCState &State)"
  },
  {
    "label": "CCCustomFn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CCCustomFn(unsigned &ValNo, MVT &ValVT,\n                        MVT &LocVT, CCValAssign::LocInfo &LocInfo,\n                        ISD::ArgFlagsTy &ArgFlags, CCState &State)"
  },
  {
    "label": "CCState()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CCState(CallingConv::ID CC, bool isVarArg, MachineFunction &MF,\n          SmallVectorImpl<CCValAssign> &locs, LLVMContext &C)"
  },
  {
    "label": "AnalyzeFormalArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeFormalArguments(const SmallVectorImpl<ISD::InputArg> &Ins,\n                              CCAssignFn Fn)"
  },
  {
    "label": "AnalyzeReturn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeReturn(const SmallVectorImpl<ISD::OutputArg> &Outs,\n                     CCAssignFn Fn)"
  },
  {
    "label": "CheckReturn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckReturn(const SmallVectorImpl<ISD::OutputArg> &ArgsFlags,\n                   CCAssignFn Fn)"
  },
  {
    "label": "AnalyzeCallOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeCallOperands(const SmallVectorImpl<ISD::OutputArg> &Outs,\n                           CCAssignFn Fn)"
  },
  {
    "label": "AnalyzeCallOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeCallOperands(SmallVectorImpl<MVT> &ArgVTs,\n                           SmallVectorImpl<ISD::ArgFlagsTy> &Flags,\n                           CCAssignFn Fn)"
  },
  {
    "label": "AnalyzeCallResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeCallResult(const SmallVectorImpl<ISD::InputArg> &Ins,\n                         CCAssignFn Fn)"
  },
  {
    "label": "AnalyzeCallResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeCallResult(MVT VT, CCAssignFn Fn)"
  },
  {
    "label": "AllocateStack()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AllocateStack(Size, Align)"
  },
  {
    "label": "AllocateStack()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AllocateStack(Size, Align)"
  },
  {
    "label": "HandleByVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleByVal(unsigned ValNo, MVT ValVT,\n                   MVT LocVT, CCValAssign::LocInfo LocInfo,\n                   int MinSize, int MinAlign, ISD::ArgFlagsTy ArgFlags)"
  },
  {
    "label": "getRemainingRegParmsForType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getRemainingRegParmsForType(SmallVectorImpl<MCPhysReg> &Regs, MVT VT,\n                                   CCAssignFn Fn)"
  },
  {
    "label": "analyzeMustTailForwardedRegisters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzeMustTailForwardedRegisters(\n      SmallVectorImpl<ForwardedRegister> &Forwards, ArrayRef<MVT> RegParmTypes,\n      CCAssignFn Fn)"
  },
  {
    "label": "MarkAllocated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAllocated(unsigned Reg)"
  }
]