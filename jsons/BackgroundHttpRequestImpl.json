[
  {
    "label": "FBackgroundHttpRequestImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBackgroundHttpRequestImpl"
  },
  {
    "label": "FDownloadMetricsInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDownloadMetricsInfo"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BackgroundHttpNotificationObject . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" Interfaces / IBackgroundHttpRequest . h \" # include \" Logging / LogMacros . h \" # include \" Templates / SharedPointer . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogBackgroundHttpRequest, Log, All)"
  },
  {
    "label": "FBackgroundHttpRequestImpl()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FBackgroundHttpRequestImpl()"
  },
  {
    "label": "OnBackgroundDownloadComplete()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBackgroundDownloadComplete()"
  },
  {
    "label": "ProcessRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessRequest()"
  },
  {
    "label": "CancelRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelRequest()"
  },
  {
    "label": "PauseRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseRequest()"
  },
  {
    "label": "ResumeRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeRequest()"
  },
  {
    "label": "SetURLAsList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetURLAsList(const TArray<FString>& URLs, int NumRetriesToAttempt)"
  },
  {
    "label": "GetURLList()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetURLList()"
  },
  {
    "label": "SetCompleteNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompleteNotification(FBackgroundHttpNotificationObjectPtr DownloadCompleteNotificationObjectIn)"
  },
  {
    "label": "CompleteWithExistingResponseData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteWithExistingResponseData(FBackgroundHttpResponsePtr BackgroundResponse)"
  },
  {
    "label": "OnProcessRequestComplete()",
    "kind": "Method",
    "detail": "Function (FBackgroundHttpRequestCompleteDelegate&)",
    "insertText": "OnProcessRequestComplete()"
  },
  {
    "label": "OnProgressUpdated()",
    "kind": "Method",
    "detail": "Function (FBackgroundHttpProgressUpdateDelegate&)",
    "insertText": "OnProgressUpdated()"
  },
  {
    "label": "OnRequestMetrics()",
    "kind": "Method",
    "detail": "Function (FBackgroundHttpRequestMetricsDelegate&)",
    "insertText": "OnRequestMetrics()"
  },
  {
    "label": "GetResponse()",
    "kind": "Method",
    "detail": "Function (const FBackgroundHttpResponsePtr)",
    "insertText": "GetResponse()"
  },
  {
    "label": "GetRequestID()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetRequestID()"
  },
  {
    "label": "SetRequestID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequestID(const FString& NewRequestID)"
  },
  {
    "label": "HandleDelayedProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDelayedProcess()"
  },
  {
    "label": "GetRequestPriority()",
    "kind": "Method",
    "detail": "Function (EBackgroundHTTPPriority)",
    "insertText": "GetRequestPriority()"
  },
  {
    "label": "SetRequestPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequestPriority(EBackgroundHTTPPriority NewPriority)"
  },
  {
    "label": "NotifyNotificationObjectOfComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyNotificationObjectOfComplete(const bool bWasSuccess)"
  },
  {
    "label": "NotifyRequestMetricsAvailable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyRequestMetricsAvailable(const int32 TotalBytesDownloaded, const float DownloadDuration)"
  }
]