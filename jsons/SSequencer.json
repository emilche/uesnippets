[
  {
    "label": "FActorDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorDragDropOp"
  },
  {
    "label": "FFolderDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFolderDragDropOp"
  },
  {
    "label": "FAssetDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetDragDropOp"
  },
  {
    "label": "FClassDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassDragDropOp"
  },
  {
    "label": "FMovieSceneClipboard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneClipboard"
  },
  {
    "label": "FSequencerTimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTimeSliderController"
  },
  {
    "label": "FSequencerTrackFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter"
  },
  {
    "label": "FSequencerViewOptionsMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerViewOptionsMenu"
  },
  {
    "label": "ISidebarDrawerContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISidebarDrawerContent"
  },
  {
    "label": "SCurveEditorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorTree"
  },
  {
    "label": "SSequencerFilterBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerFilterBar"
  },
  {
    "label": "SSequencerTransformBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerTransformBox"
  },
  {
    "label": "SSequencerStretchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerStretchBox"
  },
  {
    "label": "SCurveEditorPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorPanel"
  },
  {
    "label": "SBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBox"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SFilterSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilterSearchBox"
  },
  {
    "label": "SGridPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGridPanel"
  },
  {
    "label": "SSidebar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSidebar"
  },
  {
    "label": "SSidebarContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSidebarContainer"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "USequencerSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequencerSettings"
  },
  {
    "label": "SSequencerGroupManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerGroupManager"
  },
  {
    "label": "SSequencerTreeFilterStatusBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerTreeFilterStatusBar"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPaintPlaybackRangeArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPaintPlaybackRangeArgs"
  },
  {
    "label": "FSequencerCustomizationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerCustomizationInfo"
  },
  {
    "label": "FSidebarDrawerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSidebarDrawerConfig"
  },
  {
    "label": "FTimeSliderArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeSliderArgs"
  },
  {
    "label": "SOutlinerView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOutlinerView"
  },
  {
    "label": "STrackAreaView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackAreaView"
  },
  {
    "label": "FVirtualTrackArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualTrackArea"
  },
  {
    "label": "IOutlinerColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerColumn"
  },
  {
    "label": "FSequencerSelectionCurveFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerSelectionCurveFilter"
  },
  {
    "label": "FSequencerBreadcrumb",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerBreadcrumb"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSequencerOutlinerColumnVisibility",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerOutlinerColumnVisibility"
  },
  {
    "label": "SSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencer"
  },
  {
    "label": "FPasteContextMenuArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPasteContextMenuArgs"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "SSequencerSplitterOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerSplitterOverlay"
  },
  {
    "label": "FSequencerBreadcrumb()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AnimatedRange . h \" # include \" Layout / Visibility . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" UObject / GCObject . h \" # include \" Misc / NotifyHook . h \" # include \" Widgets / SCompoundWidget . h \" # include \" MovieSceneSequenceID . h \" # include \" ITimeSlider . h \" # include \" ISequencerModule . h \" # include \" ToolMenu . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Widgets / Input / NumericTypeInterface . h \" # include \" Widgets / Layout / SSplitter . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Sequencer . h \" # include \" SequencerWidgetsDelegates . h \" # include \" STemporarilyFocusedSpinBox . h \" # include \" WidgetFocusUtils . h \" class FActorDragDropOp ; class FFolderDragDropOp ; class FAssetDragDropOp ; class FClassDragDropOp ; class FMovieSceneClipboard ; class FSequencerTimeSliderController ; class FSequencerTrackFilter ; class FSequencerViewOptionsMenu ; class ISidebarDrawerContent ; class SCurveEditorTree ; class SSequencerFilterBar ; class SSequencerTransformBox ; class SSequencerStretchBox ; class SCurveEditorPanel ; class SBox ; class SDockTab ; class SFilterSearchBox ; class SGridPanel ; class SSidebar ; class SSidebarContainer ; class SWindow ; class USequencerSettings ; class SSequencerGroupManager ; class SSequencerTreeFilterStatusBar ; class SFilterSearchBox ; enum class ESequencerFilterChange : uint8 ; struct FPaintPlaybackRangeArgs ; struct FSequencerCustomizationInfo ; struct FSidebarDrawerConfig ; struct FTimeSliderArgs ; namespace UE { namespace Sequencer { class SOutlinerView ; class STrackAreaView ; class FVirtualTrackArea ; class IOutlinerColumn ; struct FSequencerSelectionCurveFilter ; } } namespace SequencerLayoutConstants { const float IndentAmount = 1 2 . 0 f ; const float FolderNodeHeight = 2 0 . 0 f ; const float ObjectNodeHeight = 2 0 . 0 f ; const float SectionAreaDefaultHeight = 2 7 . 0 f ; const float KeyAreaHeight = 1 5 . 0 f ; const float CategoryNodeHeight = 1 5 . 0 f ; } struct FSequencerBreadcrumb { enum Type { ShotType,MovieSceneType,} ; FSequencerBreadcrumb::Type BreadcrumbType ; FMovieSceneSequenceID SequenceID ; FText BreadcrumbName ;)",
    "insertText": "FSequencerBreadcrumb(FMovieSceneSequenceIDRef InSequenceID, FText CrumbName) : BreadcrumbType(FSequencerBreadcrumb::MovieSceneType) , SequenceID(InSequenceID) , BreadcrumbName(CrumbName)"
  },
  {
    "label": "FSequencerBreadcrumb()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSequencerBreadcrumb(FText CrumbName) : BreadcrumbType(FSequencerBreadcrumb::ShotType) , BreadcrumbName(CrumbName)"
  },
  {
    "label": "FSequencerOutlinerColumnVisibility()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSequencerOutlinerColumnVisibility { TSharedPtr<UE::Sequencer::IOutlinerColumn> Column ; bool bIsColumnVisible = false ;)",
    "insertText": "FSequencerOutlinerColumnVisibility(TSharedPtr<UE::Sequencer::IOutlinerColumn> InColumn)"
  },
  {
    "label": "FSequencerOutlinerColumnVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSequencerOutlinerColumnVisibility(TSharedPtr<UE::Sequencer::IOutlinerColumn> InColumn, bool bInIsColumnVisible)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} ; class SSequencer : public SCompoundWidget,public FGCObject,public FNotifyHook { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnToggleBoolOption, bool ) SLATE_BEGIN_ARGS( SSequencer)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FAnimatedRange, ViewRange ) SLATE_ATTRIBUTE( FAnimatedRange, ClampRange ) SLATE_ATTRIBUTE( TRange<FFrameNumber>, PlaybackRange ) SLATE_ATTRIBUTE(TRange<FFrameNumber>, TimeBounds) SLATE_ATTRIBUTE( TRange<FFrameNumber>, SelectionRange) SLATE_ATTRIBUTE(TSet<FFrameNumber>, VerticalFrames) SLATE_ATTRIBUTE(TArray<FMovieSceneMarkedFrame>, MarkedFrames) SLATE_ATTRIBUTE(TArray<FMovieSceneMarkedFrame>, GlobalMarkedFrames) SLATE_ATTRIBUTE( TOptional<TRange<FFrameNumber>>, SubSequenceRange) SLATE_EVENT(ISequencer::FOnGetPlaybackSpeeds, OnGetPlaybackSpeeds) SLATE_ATTRIBUTE( EMovieScenePlayerStatus::Type, PlaybackStatus ) SLATE_EVENT( FOnFrameRangeChanged, OnPlaybackRangeChanged ) SLATE_EVENT( FSimpleDelegate, OnPlaybackRangeBeginDrag ) SLATE_EVENT( FSimpleDelegate, OnPlaybackRangeEndDrag ) SLATE_EVENT( FOnFrameRangeChanged, OnSelectionRangeChanged ) SLATE_EVENT( FSimpleDelegate, OnSelectionRangeBeginDrag ) SLATE_EVENT( FSimpleDelegate, OnSelectionRangeEndDrag ) SLATE_EVENT(FSimpleDelegate, OnMarkBeginDrag) SLATE_EVENT(FSimpleDelegate, OnMarkEndDrag) SLATE_ATTRIBUTE( bool, IsPlaybackRangeLocked ) SLATE_EVENT( FSimpleDelegate, OnTogglePlaybackRangeLocked ) SLATE_ATTRIBUTE( FFrameTime, ScrubPosition ) SLATE_ATTRIBUTE( FString, ScrubPositionText ) SLATE_ATTRIBUTE( FMovieSceneSequenceID, ScrubPositionParent ) SLATE_EVENT( FOnScrubPositionParentChanged, OnScrubPositionParentChanged ) SLATE_ATTRIBUTE( TArray<FMovieSceneSequenceID>, ScrubPositionParentChain ) SLATE_EVENT( FOnViewRangeChanged, OnViewRangeChanged ) SLATE_EVENT(FOnSetMarkedFrame, OnSetMarkedFrame) SLATE_EVENT(FOnAddMarkedFrame, OnAddMarkedFrame) SLATE_EVENT(FOnDeleteMarkedFrame, OnDeleteMarkedFrame) SLATE_EVENT( FSimpleDelegate, OnDeleteAllMarkedFrames) SLATE_ATTRIBUTE( bool, AreMarkedFramesLocked ) SLATE_EVENT( FSimpleDelegate, OnToggleMarkedFramesLocked ) SLATE_EVENT( FOnTimeRangeChanged, OnClampRangeChanged ) SLATE_EVENT( FOnGetNearestKey, OnGetNearestKey ) SLATE_EVENT( FSimpleDelegate, OnBeginScrubbing ) SLATE_EVENT( FSimpleDelegate, OnEndScrubbing ) SLATE_EVENT( FOnScrubPositionChanged, OnScrubPositionChanged ) SLATE_EVENT( FSimpleDelegate, OnReceivedFocus ) SLATE_EVENT(FOnInitToolMenuContext, OnInitToolMenuContext) SLATE_EVENT( FOptionalOnDragDrop, OnReceivedDragOver ) SLATE_EVENT( FOptionalOnDragDrop, OnReceivedDrop ) SLATE_EVENT( FOnAssetsDrop, OnAssetsDrop ) SLATE_EVENT( FOnClassesDrop, OnClassesDrop ) SLATE_EVENT( FOnActorsDrop, OnActorsDrop ) SLATE_EVENT(FOnFoldersDrop, OnFoldersDrop) SLATE_ARGUMENT( TSharedPtr<FExtender>, AddMenuExtender ) SLATE_ARGUMENT( TSharedPtr<FExtender>, ToolbarExtender ) SLATE_ARGUMENT( bool, ShowPlaybackRangeInTimeSlider ) SLATE_END_ARGS() void Construct(const FArguments& InArgs, TSharedRef<FSequencer> InSequencer)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands(TSharedRef<FUICommandList> SequencerCommandBindings, TSharedRef<FUICommandList> CurveEditorSharedBindings)"
  },
  {
    "label": "SSequencer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SSequencer()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "RegisterActiveTimerForPlayback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterActiveTimerForPlayback()"
  },
  {
    "label": "UpdateBreadcrumbs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBreadcrumbs()"
  },
  {
    "label": "ResetBreadcrumbs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetBreadcrumbs()"
  },
  {
    "label": "PopBreadcrumb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopBreadcrumb()"
  },
  {
    "label": "OnSaveMovieSceneClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSaveMovieSceneClicked()"
  },
  {
    "label": "OnCurveEditorVisibilityChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCurveEditorVisibilityChanged(bool bShouldBeVisible)"
  },
  {
    "label": "GetTreeView()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<UE::Sequencer::SOutlinerView>)",
    "insertText": "GetTreeView()"
  },
  {
    "label": "GetPinnedTreeView()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<UE::Sequencer::SOutlinerView>)",
    "insertText": "GetPinnedTreeView()"
  },
  {
    "label": "GetVirtualTrackArea()",
    "kind": "Method",
    "detail": "Function (UE::Sequencer::FVirtualTrackArea)",
    "insertText": "GetVirtualTrackArea(const UE::Sequencer::STrackAreaView* InTrackArea = nullptr)"
  },
  {
    "label": "GetTrackAreaWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<UE::Sequencer::STrackAreaView>)",
    "insertText": "GetTrackAreaWidget()"
  },
  {
    "label": "OpenTickResolutionOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenTickResolutionOptions()"
  },
  {
    "label": "SetPlayTimeClampedByWorkingRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayTimeClampedByWorkingRange(double Frame)"
  },
  {
    "label": "SetPlayTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayTime(double Frame)"
  },
  {
    "label": "GetSearchText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSearchText()"
  },
  {
    "label": "SetSearchText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSearchText(const FText& InSearchText)"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "NotifyPostChange(const FPropertyChangedEvent& PropertyChangedEvent, FEditPropertyChain* PropertyThatChanged)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnFocusChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusChanging(const FWeakWidgetPath& PreviousFocusPath, const FWidgetPath& NewWidgetPath, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ConstructSidebarContent()",
    "kind": "Method",
    "detail": "Function (private : float CommonPadding = 3 . f ; TSharedRef<SWidget>)",
    "insertText": "ConstructSidebarContent()"
  },
  {
    "label": "ConstructFilterBarContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructFilterBarContent()"
  },
  {
    "label": "ConstructSearchAndFilterRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructSearchAndFilterRow()"
  },
  {
    "label": "ConstructGridOverlayContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructGridOverlayContent()"
  },
  {
    "label": "ConstructTrackAreaGridPanel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SGridPanel>)",
    "insertText": "ConstructTrackAreaGridPanel(const FArguments& InArgs, const FTimeSliderArgs& InTimeSliderArgs)"
  },
  {
    "label": "RebuildForSidebar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildForSidebar()"
  },
  {
    "label": "RebuildFilterBarContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildFilterBarContent()"
  },
  {
    "label": "RebuildSearchAndFilterRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildSearchAndFilterRow()"
  },
  {
    "label": "InitializeOutlinerColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeOutlinerColumns()"
  },
  {
    "label": "HandleKeySelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleKeySelectionChanged()"
  },
  {
    "label": "HandleOutlinerNodeSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOutlinerNodeSelectionChanged()"
  },
  {
    "label": "EnsureSlateTickDuringPlayback()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "EnsureSlateTickDuringPlayback(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FSequencer>)",
    "insertText": "GetSequencer()"
  },
  {
    "label": "MakeToolBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeToolBar()"
  },
  {
    "label": "MakeAddMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAddMenu()"
  },
  {
    "label": "MakeActionsMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeActionsMenu()"
  },
  {
    "label": "MakeViewMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeViewMenu()"
  },
  {
    "label": "MakePlaybackMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakePlaybackMenu()"
  },
  {
    "label": "MakeRenderMovieMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeRenderMovieMenu()"
  },
  {
    "label": "MakeSnapMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeSnapMenu()"
  },
  {
    "label": "MakeAutoChangeMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAutoChangeMenu()"
  },
  {
    "label": "MakeAllowEditsMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAllowEditsMenu()"
  },
  {
    "label": "MakeKeyGroupMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeKeyGroupMenu()"
  },
  {
    "label": "OpenTaggedBindingManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenTaggedBindingManager()"
  },
  {
    "label": "FillAdvancedMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillAdvancedMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "FillPlaybackSpeedMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillPlaybackSpeedMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "FillViewDensityMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillViewDensityMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "FillColumnVisibilityMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillColumnVisibilityMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "GetSequencerSettings()",
    "kind": "Method",
    "detail": "Function (USequencerSettings*)",
    "insertText": "GetSequencerSettings()"
  },
  {
    "label": "FillTimeDisplayFormatMenu()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "FillTimeDisplayFormatMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "OpenNodeGroupsManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenNodeGroupsManager()"
  },
  {
    "label": "GetNodeGroupsManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SSequencerGroupManager>)",
    "insertText": "GetNodeGroupsManager()"
  },
  {
    "label": "GetTopTimeSliderWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITimeSlider>)",
    "insertText": "GetTopTimeSliderWidget()"
  },
  {
    "label": "UpdateOutlinerViewColumns()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateOutlinerViewColumns()"
  },
  {
    "label": "OnTimeSnapIntervalChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeSnapIntervalChanged(float InInterval)"
  },
  {
    "label": "OnGetValueSnapInterval()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "OnGetValueSnapInterval()"
  },
  {
    "label": "OnValueSnapIntervalChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnValueSnapIntervalChanged(float InInterval)"
  },
  {
    "label": "OnOutlinerSearchChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutlinerSearchChanged(const FText& InFilter)"
  },
  {
    "label": "OnOutlinerSearchCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutlinerSearchCommitted(const FText& InFilter, ETextCommit::Type InCommitInfo)"
  },
  {
    "label": "OnOutlinerSearchSaved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutlinerSearchSaved(const FText& InFilterText)"
  },
  {
    "label": "GetColumnFillCoefficient()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetColumnFillCoefficient(int32 ColumnIndex)"
  },
  {
    "label": "CanAddFromContentBrowser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddFromContentBrowser()"
  },
  {
    "label": "OnAssetsDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetsDropped(TSharedPtr<FAssetDragDropOp> DragDropOp)"
  },
  {
    "label": "OnClassesDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClassesDropped(TSharedPtr<FClassDragDropOp> DragDropOp)"
  },
  {
    "label": "OnActorsDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorsDropped(TSharedPtr<FActorDragDropOp> DragDropOp)"
  },
  {
    "label": "OnFolderDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFolderDropped(TSharedPtr<FFolderDragDropOp> DragDropOp)"
  },
  {
    "label": "OnCrumbClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCrumbClicked(const FSequencerBreadcrumb& Item)"
  },
  {
    "label": "GetRootAnimationName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetRootAnimationName()"
  },
  {
    "label": "GetPinnedAreaMaxHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPinnedAreaMaxHeight()"
  },
  {
    "label": "GetPinnedAreaVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetPinnedAreaVisibility()"
  },
  {
    "label": "GetBreadcrumbTextForSection()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBreadcrumbTextForSection(TWeakObjectPtr<UMovieSceneSubSection> SubSection)"
  },
  {
    "label": "GetBreadcrumbTextForSequence()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBreadcrumbTextForSequence(TWeakObjectPtr<UMovieSceneSequence> Sequence, bool bIsActive)"
  },
  {
    "label": "GetBreadcrumbTrailVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetBreadcrumbTrailVisibility()"
  },
  {
    "label": "CanNavigateBreadcrumbs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanNavigateBreadcrumbs()"
  },
  {
    "label": "GetBottomTimeSliderVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetBottomTimeSliderVisibility()"
  },
  {
    "label": "GetTimeRangeVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetTimeRangeVisibility()"
  },
  {
    "label": "GetInfoButtonVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetInfoButtonVisibility()"
  },
  {
    "label": "GetShowTickLines()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetShowTickLines()"
  },
  {
    "label": "GetShowSequencerToolbar()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetShowSequencerToolbar()"
  },
  {
    "label": "GetTimeDisplayFormat()",
    "kind": "Method",
    "detail": "Function (EFrameNumberDisplayFormats)",
    "insertText": "GetTimeDisplayFormat()"
  },
  {
    "label": "OnColumnFillCoefficientChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnColumnFillCoefficientChanged(float FillCoefficient, int32 ColumnIndex)"
  },
  {
    "label": "OnSplitterFinishedResizing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSplitterFinishedResizing()"
  },
  {
    "label": "GetSectionPlaybackRangeArgs()",
    "kind": "Method",
    "detail": "Function (FPaintPlaybackRangeArgs)",
    "insertText": "GetSectionPlaybackRangeArgs()"
  },
  {
    "label": "GetDebugVisualizerVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDebugVisualizerVisibility()"
  },
  {
    "label": "SetPlaybackSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackSpeed(float InPlaybackSpeed)"
  },
  {
    "label": "GetPlaybackSpeed()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPlaybackSpeed()"
  },
  {
    "label": "GetIsSequenceReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsSequenceReadOnly()"
  },
  {
    "label": "OnSetSequenceReadOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetSequenceReadOnly(ECheckBoxState CheckBoxState)"
  },
  {
    "label": "GetIsCurveEditorEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsCurveEditorEnabled()"
  },
  {
    "label": "OnPaste()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "OnPaste()"
  },
  {
    "label": "CanPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPaste()"
  },
  {
    "label": "DoPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoPaste()"
  },
  {
    "label": "OpenPasteMenu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenPasteMenu()"
  },
  {
    "label": "PasteFromHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteFromHistory()"
  },
  {
    "label": "GeneratePasteArgs()",
    "kind": "Method",
    "detail": "Function (struct FPasteContextMenuArgs)",
    "insertText": "GeneratePasteArgs(FFrameNumber PasteAtTime, TSharedPtr<FMovieSceneClipboard> Clipboard = nullptr)"
  },
  {
    "label": "AddAdditionalPathToSelectionSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAdditionalPathToSelectionSet(const FString& Path)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AdditionalSelectionsToAdd .)",
    "insertText": "Add(Path)"
  },
  {
    "label": "AddNewNodePathsToIsolate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddNewNodePathsToIsolate(const TSet<FString>& InPaths)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (NewNodePathsToIsolate .)",
    "insertText": "Append(InPaths)"
  },
  {
    "label": "RequestRenameNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestRenameNode(const FString& Path)"
  },
  {
    "label": "ApplySequencerCustomizations()",
    "kind": "Method",
    "detail": "Function (NodePathToRename = Path ; } void)",
    "insertText": "ApplySequencerCustomizations(const TArrayView<const FSequencerCustomizationInfo> Customizations)"
  },
  {
    "label": "RegisterDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterDrawer(FSidebarDrawerConfig&& InDrawerConfig)"
  },
  {
    "label": "UnregisterDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterDrawer(const FName InDrawerId)"
  },
  {
    "label": "RegisterDrawerSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterDrawerSection(const FName InDrawerId, const TSharedPtr<ISidebarDrawerContent>& InSection)"
  },
  {
    "label": "UnregisterDrawerSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterDrawerSection(const FName InDrawerId, const FName InSectionId)"
  },
  {
    "label": "IsSidebarVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSidebarVisible()"
  },
  {
    "label": "SetSidebarVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSidebarVisible(const bool bInVisible)"
  },
  {
    "label": "ToggleSidebarVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSidebarVisible()"
  },
  {
    "label": "ToggleSidebarSelectionDrawerOpen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSidebarSelectionDrawerOpen()"
  },
  {
    "label": "ToggleSidebarDrawerDock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSidebarDrawerDock()"
  },
  {
    "label": "EnablePendingFocusOnHovering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnablePendingFocusOnHovering(const bool InEnabled)"
  },
  {
    "label": "GetFilterBar()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSequencerFilterBar>)",
    "insertText": "GetFilterBar()"
  },
  {
    "label": "GetFilterBarWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SSequencerFilterBar>)",
    "insertText": "GetFilterBarWidget()"
  },
  {
    "label": "IsFilterBarVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilterBarVisible()"
  },
  {
    "label": "ToggleFilterBarVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleFilterBarVisibility()"
  },
  {
    "label": "GetFilterBarLayout()",
    "kind": "Method",
    "detail": "Function (EFilterBarLayout)",
    "insertText": "GetFilterBarLayout()"
  },
  {
    "label": "SetFilterBarLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilterBarLayout(const EFilterBarLayout InLayout)"
  },
  {
    "label": "EnableCurveEditorPendingFocusOnHovering()",
    "kind": "Method",
    "detail": "Function (private : FPendingWidgetFocus PendingFocus ; void)",
    "insertText": "EnableCurveEditorPendingFocusOnHovering(const bool InEnabled)"
  },
  {
    "label": "ApplySequencerCustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySequencerCustomization(const FSequencerCustomizationInfo& Customization)"
  },
  {
    "label": "OnSidebarStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSidebarStateChanged(const FSidebarState& InNewState)"
  },
  {
    "label": "OnTrackFiltersChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTrackFiltersChanged(const ESequencerFilterChange InChangeType, const TSharedRef<FSequencerTrackFilter>& InFilter)"
  }
]