[
  {
    "label": "FActorDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorDragDropOp"
  },
  {
    "label": "FFolderDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFolderDragDropOp"
  },
  {
    "label": "FAssetDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetDragDropOp"
  },
  {
    "label": "FClassDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassDragDropOp"
  },
  {
    "label": "FMovieSceneClipboard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneClipboard"
  },
  {
    "label": "FSequencerTimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTimeSliderController"
  },
  {
    "label": "FSequencerTrackFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter"
  },
  {
    "label": "FSequencerViewOptionsMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerViewOptionsMenu"
  },
  {
    "label": "ISidebarDrawerContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISidebarDrawerContent"
  },
  {
    "label": "SCurveEditorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorTree"
  },
  {
    "label": "SSequencerFilterBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerFilterBar"
  },
  {
    "label": "SSequencerTransformBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerTransformBox"
  },
  {
    "label": "SSequencerStretchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerStretchBox"
  },
  {
    "label": "SCurveEditorPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorPanel"
  },
  {
    "label": "SBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBox"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SFilterSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilterSearchBox"
  },
  {
    "label": "SGridPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGridPanel"
  },
  {
    "label": "SSidebar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSidebar"
  },
  {
    "label": "SSidebarContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSidebarContainer"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "USequencerSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequencerSettings"
  },
  {
    "label": "SSequencerGroupManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerGroupManager"
  },
  {
    "label": "SSequencerTreeFilterStatusBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerTreeFilterStatusBar"
  },
  {
    "label": "SFilterSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilterSearchBox"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPaintPlaybackRangeArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPaintPlaybackRangeArgs"
  },
  {
    "label": "FSequencerCustomizationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerCustomizationInfo"
  },
  {
    "label": "FSidebarDrawerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSidebarDrawerConfig"
  },
  {
    "label": "FTimeSliderArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeSliderArgs"
  },
  {
    "label": "SOutlinerView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOutlinerView"
  },
  {
    "label": "STrackAreaView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackAreaView"
  },
  {
    "label": "FVirtualTrackArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualTrackArea"
  },
  {
    "label": "IOutlinerColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerColumn"
  },
  {
    "label": "FSequencerSelectionCurveFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerSelectionCurveFilter"
  },
  {
    "label": "FSequencerBreadcrumb",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerBreadcrumb"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSequencerOutlinerColumnVisibility",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerOutlinerColumnVisibility"
  },
  {
    "label": "SSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencer"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPasteContextMenuArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPasteContextMenuArgs"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "SSequencerSplitterOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerSplitterOverlay"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, TSharedRef<FSequencer> InSequencer)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands(TSharedRef<FUICommandList> SequencerCommandBindings, TSharedRef<FUICommandList> CurveEditorSharedBindings)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"SSequencer\")"
  },
  {
    "label": "UpdateLayoutTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLayoutTree()"
  },
  {
    "label": "RegisterActiveTimerForPlayback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterActiveTimerForPlayback()"
  },
  {
    "label": "UpdateBreadcrumbs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBreadcrumbs()"
  },
  {
    "label": "ResetBreadcrumbs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetBreadcrumbs()"
  },
  {
    "label": "PopBreadcrumb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopBreadcrumb()"
  },
  {
    "label": "OnSaveMovieSceneClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSaveMovieSceneClicked()"
  },
  {
    "label": "OnCurveEditorVisibilityChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCurveEditorVisibilityChanged(bool bShouldBeVisible)"
  },
  {
    "label": "OpenTickResolutionOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenTickResolutionOptions()"
  },
  {
    "label": "SetPlayTimeClampedByWorkingRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayTimeClampedByWorkingRange(double Frame)"
  },
  {
    "label": "SetPlayTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayTime(double Frame)"
  },
  {
    "label": "SetSearchText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSearchText(const FText& InSearchText)"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPostChange(const FPropertyChangedEvent& PropertyChangedEvent, FEditPropertyChain* PropertyThatChanged)"
  },
  {
    "label": "ConstructSidebarContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructSidebarContent()"
  },
  {
    "label": "ConstructFilterBarContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructFilterBarContent()"
  },
  {
    "label": "ConstructSearchAndFilterRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructSearchAndFilterRow()"
  },
  {
    "label": "ConstructGridOverlayContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructGridOverlayContent()"
  },
  {
    "label": "ConstructTrackAreaGridPanel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SGridPanel>)",
    "insertText": "ConstructTrackAreaGridPanel(const FArguments& InArgs, const FTimeSliderArgs& InTimeSliderArgs)"
  },
  {
    "label": "RebuildForSidebar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildForSidebar()"
  },
  {
    "label": "RebuildFilterBarContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildFilterBarContent()"
  },
  {
    "label": "RebuildSearchAndFilterRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildSearchAndFilterRow()"
  },
  {
    "label": "InitializeOutlinerColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeOutlinerColumns()"
  },
  {
    "label": "HandleKeySelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleKeySelectionChanged()"
  },
  {
    "label": "HandleOutlinerNodeSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOutlinerNodeSelectionChanged()"
  },
  {
    "label": "EnsureSlateTickDuringPlayback()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "EnsureSlateTickDuringPlayback(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "PopulateToolBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateToolBar(UToolMenu* InMenu)"
  },
  {
    "label": "MakeToolBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeToolBar()"
  },
  {
    "label": "MakeAddMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAddMenu()"
  },
  {
    "label": "MakeActionsMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeActionsMenu()"
  },
  {
    "label": "MakeViewMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeViewMenu()"
  },
  {
    "label": "MakePlaybackMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakePlaybackMenu()"
  },
  {
    "label": "MakeRenderMovieMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeRenderMovieMenu()"
  },
  {
    "label": "MakeSnapMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeSnapMenu()"
  },
  {
    "label": "MakeAutoChangeMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAutoChangeMenu()"
  },
  {
    "label": "MakeAllowEditsMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAllowEditsMenu()"
  },
  {
    "label": "MakeKeyGroupMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeKeyGroupMenu()"
  },
  {
    "label": "OpenTaggedBindingManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenTaggedBindingManager()"
  },
  {
    "label": "FillAdvancedMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillAdvancedMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "FillPlaybackSpeedMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillPlaybackSpeedMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "FillViewDensityMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillViewDensityMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "FillColumnVisibilityMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillColumnVisibilityMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "FillTimeDisplayFormatMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillTimeDisplayFormatMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "OpenNodeGroupsManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenNodeGroupsManager()"
  },
  {
    "label": "MakeTimeRange()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeTimeRange(const TSharedRef<SWidget>& InnerContent, bool bShowWorkingRange, bool bShowViewRange, bool bShowPlaybackRange)"
  },
  {
    "label": "UpdateOutlinerViewColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOutlinerViewColumns()"
  },
  {
    "label": "OnTimeSnapIntervalChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeSnapIntervalChanged(float InInterval)"
  },
  {
    "label": "OnValueSnapIntervalChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnValueSnapIntervalChanged( float InInterval )"
  },
  {
    "label": "OnOutlinerSearchChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutlinerSearchChanged(const FText& InFilter)"
  },
  {
    "label": "OnOutlinerSearchCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutlinerSearchCommitted(const FText& InFilter, ETextCommit::Type InCommitInfo)"
  },
  {
    "label": "OnOutlinerSearchSaved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutlinerSearchSaved(const FText& InFilterText)"
  },
  {
    "label": "AddFromContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFromContentBrowser()"
  },
  {
    "label": "OnAssetsDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetsDropped(TSharedPtr<FAssetDragDropOp> DragDropOp)"
  },
  {
    "label": "OnClassesDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClassesDropped(TSharedPtr<FClassDragDropOp> DragDropOp)"
  },
  {
    "label": "OnActorsDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorsDropped(TSharedPtr<FActorDragDropOp> DragDropOp)"
  },
  {
    "label": "OnFolderDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFolderDropped(TSharedPtr<FFolderDragDropOp> DragDropOp)"
  },
  {
    "label": "OnCrumbClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCrumbClicked(const FSequencerBreadcrumb& Item)"
  },
  {
    "label": "OnColumnFillCoefficientChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnColumnFillCoefficientChanged(float FillCoefficient, int32 ColumnIndex)"
  },
  {
    "label": "OnSplitterFinishedResizing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSplitterFinishedResizing()"
  },
  {
    "label": "SetPlaybackSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackSpeed(float InPlaybackSpeed)"
  },
  {
    "label": "OnSetSequenceReadOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetSequenceReadOnly(ECheckBoxState CheckBoxState)"
  },
  {
    "label": "OnPaste()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPaste()"
  },
  {
    "label": "CanPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPaste()"
  },
  {
    "label": "DoPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoPaste()"
  },
  {
    "label": "OpenPasteMenu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenPasteMenu()"
  },
  {
    "label": "PasteFromHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteFromHistory()"
  },
  {
    "label": "GeneratePasteArgs()",
    "kind": "Method",
    "detail": "Function (FPasteContextMenuArgs)",
    "insertText": "GeneratePasteArgs(FFrameNumber PasteAtTime, TSharedPtr<FMovieSceneClipboard> Clipboard = nullptr)"
  },
  {
    "label": "ApplySequencerCustomizations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySequencerCustomizations(const TArrayView<const FSequencerCustomizationInfo> Customizations)"
  },
  {
    "label": "RegisterDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterDrawer(FSidebarDrawerConfig&& InDrawerConfig)"
  },
  {
    "label": "UnregisterDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterDrawer(const FName InDrawerId)"
  },
  {
    "label": "RegisterDrawerSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterDrawerSection(const FName InDrawerId, const TSharedPtr<ISidebarDrawerContent>& InSection)"
  },
  {
    "label": "UnregisterDrawerSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterDrawerSection(const FName InDrawerId, const FName InSectionId)"
  },
  {
    "label": "SetSidebarVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSidebarVisible(const bool bInVisible)"
  },
  {
    "label": "ToggleSidebarVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSidebarVisible()"
  },
  {
    "label": "ToggleSidebarSelectionDrawerOpen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSidebarSelectionDrawerOpen()"
  },
  {
    "label": "ToggleSidebarDrawerDock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSidebarDrawerDock()"
  },
  {
    "label": "EnablePendingFocusOnHovering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnablePendingFocusOnHovering(const bool InEnabled)"
  },
  {
    "label": "ToggleFilterBarVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleFilterBarVisibility()"
  },
  {
    "label": "SetFilterBarLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilterBarLayout(const EFilterBarLayout InLayout)"
  },
  {
    "label": "ApplySequencerCustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySequencerCustomization(const FSequencerCustomizationInfo& Customization)"
  },
  {
    "label": "OnSidebarStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSidebarStateChanged(const FSidebarState& InNewState)"
  },
  {
    "label": "OnTrackFiltersChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTrackFiltersChanged(const ESequencerFilterChange InChangeType, const TSharedRef<FSequencerTrackFilter>& InFilter)"
  }
]