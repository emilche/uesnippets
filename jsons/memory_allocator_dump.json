[
  {
    "label": "MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode"
  },
  {
    "label": "ProcessMemoryDump",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessMemoryDump"
  },
  {
    "label": "TracedValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TracedValue"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flags"
  },
  {
    "label": "EntryType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EntryType"
  },
  {
    "label": "Entry()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_MEMORY_ALLOCATOR_DUMP_H_ # define BASE_TRACE_EVENT_MEMORY_ALLOCATOR_DUMP_H_ # include<stdint . h> # include<iosfwd> # include<memory> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / trace_event / memory_allocator_dump_guid . h \" # include \" base / trace_event / memory_dump_request_args . h \" # include \" base / unguessable_token . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace perfetto { namespace protos { namespace pbzero { class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode ; } } } namespace base { namespace trace_event { class ProcessMemoryDump ; class TracedValue ; class BASE_EXPORT MemoryAllocatorDump { public : enum Flags { DEFAULT = 0,WEAK = 1<<0,} ; struct BASE_EXPORT Entry { enum EntryType { kUint64,kString,} ;)",
    "insertText": "Entry()"
  },
  {
    "label": "Entry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Entry(std::string name, std::string units, uint64_t value)"
  },
  {
    "label": "Entry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Entry(std::string name, std::string units, std::string value)"
  },
  {
    "label": "Entry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Entry(Entry&& other)"
  },
  {
    "label": "Entry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Entry(const Entry&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Entry&)",
    "insertText": "operator(const Entry&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Entry&)",
    "insertText": "operator(Entry&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Entry& rhs)"
  },
  {
    "label": "MemoryAllocatorDump()",
    "kind": "Method",
    "detail": "Function (std::string name ; std::string units ; EntryType entry_type ; uint64_t value_uint64 ; std::string value_string ; } ;)",
    "insertText": "MemoryAllocatorDump(const std::string& absolute_name, MemoryDumpLevelOfDetail, const MemoryAllocatorDumpGuid&)"
  },
  {
    "label": "MemoryAllocatorDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryAllocatorDump(const MemoryAllocatorDump&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MemoryAllocatorDump&)",
    "insertText": "operator(const MemoryAllocatorDump&)"
  },
  {
    "label": "MemoryAllocatorDump()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MemoryAllocatorDump()"
  },
  {
    "label": "AddScalar()",
    "kind": "Method",
    "detail": "Function (const char kNameSize [ ] ; const char kNameObjectCount [ ] ; const char kUnitsBytes [ ] ; const char kUnitsObjects [ ] ; const char kTypeScalar [ ] ; const char kTypeString [ ] ; void)",
    "insertText": "AddScalar(const char* name, const char* units, uint64_t value)"
  },
  {
    "label": "AddString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddString(const char* name, const char* units, const std::string& value)"
  },
  {
    "label": "absolute_name()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "absolute_name()"
  },
  {
    "label": "AsProtoInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsProtoInto(perfetto::protos::pbzero:: MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* memory_node)"
  },
  {
    "label": "GetSizeInternal()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "GetSizeInternal()"
  },
  {
    "label": "level_of_detail()",
    "kind": "Method",
    "detail": "Function (MemoryDumpLevelOfDetail)",
    "insertText": "level_of_detail()"
  },
  {
    "label": "clear_flags()",
    "kind": "Method",
    "detail": "Function (flags_ | = flags ; } void)",
    "insertText": "clear_flags(int flags)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (flags_& = ~ flags ; } int)",
    "insertText": "flags()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (cached_size_ .)",
    "insertText": "reset()"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} private : const std::string absolute_name_ ; MemoryAllocatorDumpGuid guid_ ; MemoryDumpLevelOfDetail level_of_detail_ ; int flags_ ; absl::optional<uint64_t> cached_size_ ; std::vector<Entry> entries_ ; } ; void BASE_EXPORT)",
    "insertText": "PrintTo(const MemoryAllocatorDump::Entry&, std::ostream*)"
  }
]