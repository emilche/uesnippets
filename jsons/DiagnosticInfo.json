[
  {
    "label": "DiagnosticPrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagnosticPrinter"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "LLVMContextImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContextImpl"
  },
  {
    "label": "Twine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Twine"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "DebugLoc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DebugLoc"
  },
  {
    "label": "SMDiagnostic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMDiagnostic"
  },
  {
    "label": "DiagnosticSeverity",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DiagnosticSeverity"
  },
  {
    "label": "DiagnosticKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DiagnosticKind"
  },
  {
    "label": "DiagnosticInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagnosticInfo"
  },
  {
    "label": "DiagnosticInfoInlineAsm",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagnosticInfoInlineAsm"
  },
  {
    "label": "DiagnosticInfoStackSize",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagnosticInfoStackSize"
  },
  {
    "label": "DiagnosticInfoDebugMetadataVersion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagnosticInfoDebugMetadataVersion"
  },
  {
    "label": "DiagnosticInfoSampleProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagnosticInfoSampleProfile"
  },
  {
    "label": "DiagnosticInfoOptimizationBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagnosticInfoOptimizationBase"
  },
  {
    "label": "DiagnosticInfoOptimizationRemark",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagnosticInfoOptimizationRemark"
  },
  {
    "label": "DiagnosticInfoOptimizationRemarkMissed",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagnosticInfoOptimizationRemarkMissed"
  },
  {
    "label": "DiagnosticInfoOptimizationRemarkAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagnosticInfoOptimizationRemarkAnalysis"
  },
  {
    "label": "DiagnosticInfoMIRParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagnosticInfoMIRParser"
  },
  {
    "label": "DiagnosticInfoOptimizationFailure",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagnosticInfoOptimizationFailure"
  },
  {
    "label": "DiagnosticInfoDxil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagnosticInfoDxil"
  },
  {
    "label": "getNextAvailablePluginDiagnosticKind()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_DIAGNOSTICINFO_H # define LLVM_IR_DIAGNOSTICINFO_H # include \" llvm - c / Core . h \" # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / IR / DebugLoc . h \" # include \" llvm / IR / Module . h \" # include \" llvm / Support / Casting . h \" # include<functional> namespace llvm { class DiagnosticPrinter ; class Function ; class Instruction ; class LLVMContextImpl ; class Twine ; class Value ; class DebugLoc ; class SMDiagnostic ; enum DiagnosticSeverity { DS_Error,DS_Warning,DS_Remark,DS_Note } ; enum DiagnosticKind { DK_Bitcode,DK_InlineAsm,DK_StackSize,DK_Linker,DK_DebugMetadataVersion,DK_SampleProfile,DK_OptimizationRemark,DK_OptimizationRemarkMissed,DK_OptimizationRemarkAnalysis,DK_OptimizationFailure,DK_MIRParser,DK_DXIL,DK_FirstPluginKind } ; int)",
    "insertText": "getNextAvailablePluginDiagnosticKind()"
  },
  {
    "label": "DiagnosticInfo()",
    "kind": "Method",
    "detail": "Function (class DiagnosticInfo { private : const int Kind ; const DiagnosticSeverity Severity ; public :)",
    "insertText": "DiagnosticInfo(int Kind, DiagnosticSeverity Severity) : Kind(Kind), Severity(Severity)"
  },
  {
    "label": "DiagnosticInfo()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DiagnosticInfo()"
  },
  {
    "label": "getKind()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getKind()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; typedef std::function<)",
    "insertText": "void(const DiagnosticInfo &)"
  },
  {
    "label": "DiagnosticInfoInlineAsm()",
    "kind": "Method",
    "detail": "Function (class DiagnosticInfoInlineAsm : public DiagnosticInfo { private : unsigned LocCookie ; const Twine& MsgStr ; const Instruction* Instr ; public :)",
    "insertText": "DiagnosticInfoInlineAsm(const Twine &MsgStr, DiagnosticSeverity Severity = DS_Error) : DiagnosticInfo(DK_InlineAsm, Severity), LocCookie(0), MsgStr(MsgStr), Instr(nullptr)"
  },
  {
    "label": "DiagnosticInfoInlineAsm()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DiagnosticInfoInlineAsm(unsigned LocCookie, const Twine &MsgStr, DiagnosticSeverity Severity = DS_Error) : DiagnosticInfo(DK_InlineAsm, Severity), LocCookie(LocCookie), MsgStr(MsgStr), Instr(nullptr)"
  },
  {
    "label": "DiagnosticInfoInlineAsm()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DiagnosticInfoInlineAsm(const Instruction &I, const Twine &MsgStr, DiagnosticSeverity Severity = DS_Error)"
  },
  {
    "label": "getLocCookie()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getLocCookie()"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "classof(const DiagnosticInfo *DI)"
  },
  {
    "label": "DiagnosticInfoStackSize()",
    "kind": "Method",
    "detail": "Function (} } ; class DiagnosticInfoStackSize : public DiagnosticInfo { private : const Function& Fn ; unsigned StackSize ; public :)",
    "insertText": "DiagnosticInfoStackSize(const Function &Fn, unsigned StackSize, DiagnosticSeverity Severity = DS_Warning) : DiagnosticInfo(DK_StackSize, Severity), Fn(Fn), StackSize(StackSize)"
  },
  {
    "label": "getFunction()",
    "kind": "Method",
    "detail": "Function (} const Function&)",
    "insertText": "getFunction()"
  },
  {
    "label": "DiagnosticInfoDebugMetadataVersion()",
    "kind": "Method",
    "detail": "Function (} } ; class DiagnosticInfoDebugMetadataVersion : public DiagnosticInfo { private : const Module& M ; unsigned MetadataVersion ; public :)",
    "insertText": "DiagnosticInfoDebugMetadataVersion(const Module &M, unsigned MetadataVersion, DiagnosticSeverity Severity = DS_Warning) : DiagnosticInfo(DK_DebugMetadataVersion, Severity), M(M), MetadataVersion(MetadataVersion)"
  },
  {
    "label": "getModule()",
    "kind": "Method",
    "detail": "Function (} const Module&)",
    "insertText": "getModule()"
  },
  {
    "label": "DiagnosticInfoSampleProfile()",
    "kind": "Method",
    "detail": "Function (} } ; class DiagnosticInfoSampleProfile : public DiagnosticInfo { public :)",
    "insertText": "DiagnosticInfoSampleProfile(const char *FileName, unsigned LineNum, const Twine &Msg, DiagnosticSeverity Severity = DS_Error) : DiagnosticInfo(DK_SampleProfile, Severity), FileName(FileName), LineNum(LineNum), Msg(Msg)"
  },
  {
    "label": "DiagnosticInfoSampleProfile()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DiagnosticInfoSampleProfile(const char *FileName, const Twine &Msg, DiagnosticSeverity Severity = DS_Error) : DiagnosticInfo(DK_SampleProfile, Severity), FileName(FileName), LineNum(0), Msg(Msg)"
  },
  {
    "label": "DiagnosticInfoSampleProfile()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DiagnosticInfoSampleProfile(const Twine &Msg, DiagnosticSeverity Severity = DS_Error) : DiagnosticInfo(DK_SampleProfile, Severity), FileName(nullptr), LineNum(0), Msg(Msg)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(DiagnosticPrinter &DP)"
  },
  {
    "label": "getFileName()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "getFileName()"
  },
  {
    "label": "isEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEnabled()"
  },
  {
    "label": "isLocationAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLocationAvailable()"
  },
  {
    "label": "getLocationStr()",
    "kind": "Method",
    "detail": "Function (const std::string)",
    "insertText": "getLocationStr()"
  },
  {
    "label": "getLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getLocation(StringRef *Filename, unsigned *Line, unsigned *Column)"
  },
  {
    "label": "getPassName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getPassName()"
  },
  {
    "label": "DiagnosticInfoOptimizationRemarkMissed()",
    "kind": "Method",
    "detail": "Function (} ; class DiagnosticInfoOptimizationRemarkMissed : public DiagnosticInfoOptimizationBase { public :)",
    "insertText": "DiagnosticInfoOptimizationRemarkMissed(const char *PassName, const Function &Fn, const DebugLoc &DLoc, const Twine &Msg) : DiagnosticInfoOptimizationBase(DK_OptimizationRemarkMissed, DS_Remark, PassName, Fn, DLoc, Msg)"
  },
  {
    "label": "DiagnosticInfoOptimizationRemarkAnalysis()",
    "kind": "Method",
    "detail": "Function (} ; class DiagnosticInfoOptimizationRemarkAnalysis : public DiagnosticInfoOptimizationBase { public :)",
    "insertText": "DiagnosticInfoOptimizationRemarkAnalysis(const char *PassName, const Function &Fn, const DebugLoc &DLoc, const Twine &Msg) : DiagnosticInfoOptimizationBase(DK_OptimizationRemarkAnalysis, DS_Remark, PassName, Fn, DLoc, Msg)"
  },
  {
    "label": "DiagnosticInfoMIRParser()",
    "kind": "Method",
    "detail": "Function (} ; class DiagnosticInfoMIRParser : public DiagnosticInfo { const SMDiagnostic& Diagnostic ; public :)",
    "insertText": "DiagnosticInfoMIRParser(DiagnosticSeverity Severity, const SMDiagnostic &Diagnostic) : DiagnosticInfo(DK_MIRParser, Severity), Diagnostic(Diagnostic)"
  },
  {
    "label": "getDiagnostic()",
    "kind": "Method",
    "detail": "Function (} const SMDiagnostic&)",
    "insertText": "getDiagnostic()"
  },
  {
    "label": "DEFINE_SIMPLE_CONVERSION_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DEFINE_SIMPLE_CONVERSION_FUNCTIONS(DiagnosticInfo, LLVMDiagnosticInfoRef) void emitOptimizationRemark(LLVMContext &Ctx, const char *PassName, const Function &Fn, const DebugLoc &DLoc, const Twine &Msg)"
  },
  {
    "label": "emitOptimizationRemarkMissed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitOptimizationRemarkMissed(LLVMContext &Ctx, const char *PassName, const Function &Fn, const DebugLoc &DLoc, const Twine &Msg)"
  },
  {
    "label": "emitOptimizationRemarkAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitOptimizationRemarkAnalysis(LLVMContext &Ctx, const char *PassName, const Function &Fn, const DebugLoc &DLoc, const Twine &Msg)"
  },
  {
    "label": "DiagnosticInfoOptimizationFailure()",
    "kind": "Method",
    "detail": "Function (class DiagnosticInfoOptimizationFailure : public DiagnosticInfoOptimizationBase { public :)",
    "insertText": "DiagnosticInfoOptimizationFailure(const Function &Fn, const DebugLoc &DLoc, const Twine &Msg) : DiagnosticInfoOptimizationBase(DK_OptimizationFailure, DS_Warning, nullptr, Fn, DLoc, Msg)"
  },
  {
    "label": "emitLoopVectorizeWarning()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "emitLoopVectorizeWarning(LLVMContext &Ctx, const Function &Fn, const DebugLoc &DLoc, const Twine &Msg)"
  },
  {
    "label": "emitLoopInterleaveWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitLoopInterleaveWarning(LLVMContext &Ctx, const Function &Fn, const DebugLoc &DLoc, const Twine &Msg)"
  },
  {
    "label": "DiagnosticInfoDxil()",
    "kind": "Method",
    "detail": "Function (class DiagnosticInfoDxil : public DiagnosticInfo { private : const Function* Func ; bool HasLocation = false ; unsigned Line = 0 ; unsigned Column = 0 ; StringRef FileName ; const Twine& MsgStr ; public :)",
    "insertText": "DiagnosticInfoDxil(const Function *F, const Twine &MsgStr, DiagnosticSeverity Severity) : DiagnosticInfo(DK_DXIL, Severity), Func(F), MsgStr(MsgStr)"
  },
  {
    "label": "DiagnosticInfoDxil()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DiagnosticInfoDxil(const Function *F, const DILocation *Loc, const Twine &MsgStr, DiagnosticSeverity Severity = DS_Error)"
  },
  {
    "label": "DiagnosticInfoDxil()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiagnosticInfoDxil(const Function *F, const DIGlobalVariable *DGV, const Twine &MsgStr, DiagnosticSeverity Severity = DS_Error)"
  }
]