[
  {
    "label": "FXmlAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXmlAttribute"
  },
  {
    "label": "FXmlNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXmlNode"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FXmlFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXmlFile"
  },
  {
    "label": "FXmlFile()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" XmlNode . h \" class FXmlAttribute ; class FXmlNode ; namespace EConstructMethod { enum Type { ConstructFromFile,ConstructFromBuffer,} ; } class FXmlFile { public :)",
    "insertText": "FXmlFile() : RootNode(nullptr), bFileLoaded(false)"
  },
  {
    "label": "FXmlFile()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXmlFile(const FString& InFile, EConstructMethod::Type ConstructMethod = EConstructMethod::ConstructFromFile)"
  },
  {
    "label": "FXmlFile()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FXmlFile()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "FXmlFile()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FXmlFile(const FXmlFile& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FXmlFile&)",
    "insertText": "operator(const FXmlFile& rhs)"
  },
  {
    "label": "LoadFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFile(const FString& Path, EConstructMethod::Type ConstructMethod = EConstructMethod::ConstructFromFile)"
  },
  {
    "label": "GetLastError()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLastError()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetRootNode()",
    "kind": "Method",
    "detail": "Function (const FXmlNode*)",
    "insertText": "GetRootNode()"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Save(const FString& Path)"
  },
  {
    "label": "EnableAttemptToPreserveWhitespaceHack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableAttemptToPreserveWhitespaceHack()"
  },
  {
    "label": "PreProcessInput()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PreProcessInput(TArray<FString>& Input)"
  },
  {
    "label": "WhiteOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WhiteOut(TArray<FString>& Input, int32 LineStart, int32 LineEnd, int32 IndexStart, int32 IndexEnd)"
  },
  {
    "label": "Tokenize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tokenize(FStringView Input, TArray<FString>& Tokens)"
  },
  {
    "label": "Tokenize()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "Tokenize(const TArray<FString>& Input)"
  },
  {
    "label": "AddAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAttribute(const FString& InToken, TArray<FXmlAttribute>& OutAttributes)"
  },
  {
    "label": "CreateRootNode()",
    "kind": "Method",
    "detail": "Function (FXmlNode*)",
    "insertText": "CreateRootNode(TArrayView<const FString> Tokens)"
  },
  {
    "label": "HookUpNextPtrs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HookUpNextPtrs(FXmlNode* Node)"
  },
  {
    "label": "CreateNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNodes(const TArray<FString>& Tokens)"
  },
  {
    "label": "WriteNodeHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteNodeHierarchy(const FXmlNode& Node, const FString& Indent, FString& Output)"
  }
]