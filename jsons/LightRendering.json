[
  {
    "label": "FLightFunctionSharedParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightFunctionSharedParameters"
  },
  {
    "label": "TStencilSphereVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStencilSphereVertexBuffer"
  },
  {
    "label": "TStencilSphereIndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStencilSphereIndexBuffer"
  },
  {
    "label": "FStencilingGeometryShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStencilingGeometryShaderParameters"
  },
  {
    "label": "FDeferredLightVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeferredLightVS"
  },
  {
    "label": "FRadialLight",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRadialLight"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GetShadowQuality()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetShadowQuality()"
  },
  {
    "label": "GetLightFadeFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLightFadeFactor(const FSceneView& View, const FLightSceneProxy* Proxy)"
  },
  {
    "label": "GetDeferredLightParameters()",
    "kind": "Method",
    "detail": "Function (FDeferredLightUniformStruct)",
    "insertText": "GetDeferredLightParameters(const FSceneView& View, const FLightSceneInfo& LightSceneInfo, bool bUseLightFunctionAtlas=false, uint32 LightFlags=0)"
  },
  {
    "label": "GetSimpleDeferredLightParameters()",
    "kind": "Method",
    "detail": "Function (FDeferredLightUniformStruct)",
    "insertText": "GetSimpleDeferredLightParameters(\n\tconst FSceneView& View,\n\tconst FSimpleLightEntry& SimpleLight,\n\tconst FSimpleLightPerViewEntry &SimpleLightPerViewData)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bind(const FShaderParameterMap& ParameterMap)"
  },
  {
    "label": "GetLightFunctionSharedParameters()",
    "kind": "Method",
    "detail": "Function (FVector4f)",
    "insertText": "GetLightFunctionSharedParameters(const FLightSceneInfo* LightSceneInfo, float ShadowFadeFraction)"
  },
  {
    "label": "DrawSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSphere(FRHICommandList& RHICmdList)"
  },
  {
    "label": "DrawSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSphere(FRHICommandList& RHICmdList, uint32 InstanceCount)"
  },
  {
    "label": "DrawVectorSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawVectorSphere(FRHICommandList& RHICmdList)"
  },
  {
    "label": "DrawCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCone(FRHICommandList& RHICmdList)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "static_assert(std::is_same_v<typename VectorType::FReal, float>, \"Must be a float vector type\")"
  },
  {
    "label": "ArcRot()",
    "kind": "Method",
    "detail": "Function (FRotationMatrix44f)",
    "insertText": "ArcRot( ArcRotator )"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "Translate(Sphere.Center + PreViewTranslation)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bind(const FShaderParameterMap& ParameterMap)"
  },
  {
    "label": "GetParameters()",
    "kind": "Method",
    "detail": "Function (FParameters)",
    "insertText": "GetParameters(const FVector4f& InStencilingGeometryPosAndScale)"
  },
  {
    "label": "GetParameters()",
    "kind": "Method",
    "detail": "Function (FParameters)",
    "insertText": "GetParameters(const FSceneView& View, const FLightSceneInfo* LightSceneInfo)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "GetFullScreenRectParameters()",
    "kind": "Method",
    "detail": "Function (FDrawFullScreenRectangleParameters)",
    "insertText": "GetFullScreenRectParameters(\n\t\tfloat X, float Y,\n\t\tfloat SizeX, float SizeY,\n\t\tfloat U, float V,\n\t\tfloat SizeU, float SizeV,\n\t\tFIntPoint InTargetSize,\n\t\tFIntPoint InTextureSize)"
  },
  {
    "label": "GetParameters()",
    "kind": "Method",
    "detail": "Function (FParameters)",
    "insertText": "GetParameters(const FViewInfo& View,\n\t\tfloat X, float Y,\n\t\tfloat SizeX, float SizeY,\n\t\tfloat U, float V,\n\t\tfloat SizeU, float SizeV,\n\t\tFIntPoint TargetSize,\n\t\tFIntPoint TextureSize,\n\t\tbool bBindViewUniform = true)"
  },
  {
    "label": "GetParameters()",
    "kind": "Method",
    "detail": "Function (FParameters)",
    "insertText": "GetParameters(const FViewInfo& View, bool bBindViewUniform = true)"
  },
  {
    "label": "GetParameters()",
    "kind": "Method",
    "detail": "Function (FParameters)",
    "insertText": "GetParameters(const FViewInfo& View, const FSphere& LightBounds, bool bBindViewUniform = true)"
  },
  {
    "label": "GetParameters()",
    "kind": "Method",
    "detail": "Function (FParameters)",
    "insertText": "GetParameters(const FViewInfo& View, const FLightSceneInfo* LightSceneInfo, bool bBindViewUniform = true)"
  },
  {
    "label": "GetLightOcclusionType()",
    "kind": "Method",
    "detail": "Function (FLightOcclusionType)",
    "insertText": "GetLightOcclusionType(const FLightSceneProxy& Proxy, const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "GetLightOcclusionType()",
    "kind": "Method",
    "detail": "Function (FLightOcclusionType)",
    "insertText": "GetLightOcclusionType(const FLightSceneInfoCompact& LightInfo, const FSceneViewFamily& ViewFamily)"
  }
]