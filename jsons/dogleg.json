[
  {
    "label": "dogleg()",
    "kind": "Method",
    "detail": "Function (namespace Eigen { namespace internal { template<Scalar> void)",
    "insertText": "dogleg(const Matrix< Scalar, Dynamic, Dynamic > &qrfac, const Matrix< Scalar, Dynamic, 1 > &diag, const Matrix< Scalar, Dynamic, 1 > &qtb, Scalar delta, Matrix< Scalar, Dynamic, 1 > &x)"
  },
  {
    "label": "epsilon()",
    "kind": "Method",
    "detail": "Function (using std::abs ; using std::sqrt ; typedef DenseIndex Index ; Index i,j ; Scalar sum,temp,alpha,bnorm ; Scalar gnorm,qnorm ; Scalar sgnorm ; const Scalar epsmch = NumTraits<Scalar)",
    "insertText": "epsilon()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (const Index n = qrfac .)",
    "insertText": "cols()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(n==qtb.size())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(n==x.size())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(n==diag.size())"
  },
  {
    "label": "wa1()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,1>)",
    "insertText": "wa1(n), wa2(n)"
  },
  {
    "label": "qrfac()",
    "kind": "Method",
    "detail": "Function (temp =)",
    "insertText": "qrfac(j,j)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (temp = epsmch* qrfac .)",
    "insertText": "col(j).head(j+1).maxCoeff()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(j==n-1)"
  },
  {
    "label": "cwiseProduct()",
    "kind": "Method",
    "detail": "Function (} qnorm = diag .)",
    "insertText": "cwiseProduct(x).stableNorm()"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (wa1 .)",
    "insertText": "fill(0.)"
  },
  {
    "label": "tail()",
    "kind": "Method",
    "detail": "Function (wa1 .)",
    "insertText": "tail(n-j) += qrfac.row(j).tail(n-j)"
  },
  {
    "label": "stableNorm()",
    "kind": "Method",
    "detail": "Function (wa1 [ j ] / = diag [ j ] ; } gnorm = wa1 .)",
    "insertText": "stableNorm()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (sgnorm = 0 . ; alpha = delta / qnorm ;)",
    "insertText": "if(gnorm == 0.)"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (wa1 .)",
    "insertText": "array() /= (diag*gnorm).array()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (sum = 0 . ;)",
    "insertText": "for(i = j; i < n; ++i)"
  },
  {
    "label": "qrfac()",
    "kind": "Method",
    "detail": "Function (sum + =)",
    "insertText": "qrfac(j,i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (sgnorm = gnorm / temp / temp ; alpha = 0 . ;)",
    "insertText": "if(sgnorm >= delta)"
  },
  {
    "label": "gnorm()",
    "kind": "Method",
    "detail": "Function (temp = bnorm /)",
    "insertText": "gnorm(bnorm / qnorm) * (sgnorm / delta)"
  },
  {
    "label": "abs2()",
    "kind": "Method",
    "detail": "Function (temp = temp - delta / qnorm*)",
    "insertText": "abs2(sgnorm / delta) + sqrt(numext::abs2(temp - delta / qnorm) + (1.-numext::abs2(delta / qnorm)) * (1.-numext::abs2(sgnorm / delta)))"
  },
  {
    "label": "qnorm()",
    "kind": "Method",
    "detail": "Function (alpha = delta /)",
    "insertText": "qnorm(1. - numext::abs2(sgnorm / delta))"
  },
  {
    "label": "temp()",
    "kind": "Method",
    "detail": "Function (algo_end :)",
    "insertText": "temp(1.-alpha) * (std::min)(sgnorm,delta)"
  }
]