[
  {
    "label": "ELifetimeCondition",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELifetimeCondition"
  },
  {
    "label": "ELifetimeRepNotifyCondition",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELifetimeRepNotifyCondition"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # if WITH_ENGINE # include \" CoreNetTypes . generated . h \" # endif # ifndef UE_NET_REPACTOR_NAME_DEBUG # define UE_NET_REPACTOR_NAME_DEBUG 0 # endif)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (COND_None = 0)",
    "insertText": "UMETA(DisplayName = \"None\"), COND_InitialOnly = 1 UMETA(DisplayName = \"Initial Only\"), COND_OwnerOnly = 2 UMETA(DisplayName = \"Owner Only\"), COND_SkipOwner = 3 UMETA(DisplayName = \"Skip Owner\"), COND_SimulatedOnly = 4 UMETA(DisplayName = \"Simulated Only\"), COND_AutonomousOnly = 5 UMETA(DisplayName = \"Autonomous Only\"), COND_SimulatedOrPhysics = 6 UMETA(DisplayName = \"Simulated Or Physics\"), COND_InitialOrOwner = 7 UMETA(DisplayName = \"Initial Or Owner\"), COND_Custom = 8 UMETA(DisplayName = \"Custom\"), COND_ReplayOrOwner = 9 UMETA(DisplayName = \"Replay Or Owner\"), COND_ReplayOnly = 10 UMETA(DisplayName = \"Replay Only\"), COND_SimulatedOnlyNoReplay = 11 UMETA(DisplayName = \"Simulated Only No Replay\"), COND_SimulatedOrPhysicsNoReplay = 12 UMETA(DisplayName = \"Simulated Or Physics No Replay\"), COND_SkipReplay = 13 UMETA(DisplayName = \"Skip Replay\"), COND_Dynamic = 14 UMETA(Hidden), COND_Never = 15 UMETA(Hidden), COND_NetGroup = 16 UMETA(Hidden), COND_Max = 17 UMETA(Hidden)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (enum ELifetimeRepNotifyCondition { REPNOTIFY_OnChanged = 0,REPNOTIFY_Always = 1,} ; enum class EChannelCloseReason : uint8 { Destroyed,Dormancy,LevelUnloaded,Relevancy,TearOff,MAX = 1 5 } ; const TCHAR*)",
    "insertText": "LexToString(const EChannelCloseReason Value)"
  }
]