[
  {
    "label": "OutputWavFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OutputWavFile"
  },
  {
    "label": "OutputWavFile()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_OUTPUT_WAV_FILE_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_OUTPUT_WAV_FILE_H_ # include<string> # include \" absl / strings / string_view . h \" # include \" common_audio / wav_file . h \" # include \" modules / audio_coding / neteq / tools / audio_sink . h \" namespace webrtc { namespace test { class OutputWavFile : public AudioSink { public :)",
    "insertText": "OutputWavFile(absl::string_view file_name, int sample_rate_hz, int num_channels = 1) : wav_writer_(file_name, sample_rate_hz, num_channels)"
  },
  {
    "label": "OutputWavFile()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OutputWavFile(const OutputWavFile&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OutputWavFile&)",
    "insertText": "operator(const OutputWavFile&)"
  },
  {
    "label": "WriteArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteArray(const int16_t* audio, size_t num_samples)"
  },
  {
    "label": "WriteSamples()",
    "kind": "Method",
    "detail": "Function (wav_writer_ .)",
    "insertText": "WriteSamples(audio, num_samples)"
  }
]