[
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFRameNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFRameNumber"
  },
  {
    "label": "FFrameRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameRate"
  },
  {
    "label": "FMovieSceneDoubleChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneDoubleChannel"
  },
  {
    "label": "FMovieSceneFloatChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneFloatChannel"
  },
  {
    "label": "FMovieSceneSequenceHierarchy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceHierarchy"
  },
  {
    "label": "FMovieSceneSequenceID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceID"
  },
  {
    "label": "FTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTickFunction"
  },
  {
    "label": "FFixedObjectBindingID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFixedObjectBindingID"
  },
  {
    "label": "FSharedPlaybackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPlaybackState"
  },
  {
    "label": "UTransformableHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTransformableHandle"
  },
  {
    "label": "FComponentEvaluationGraphBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentEvaluationGraphBinding"
  },
  {
    "label": "UTransformableComponentHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTransformableComponentHandle"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" UObject / Object . h \" # include \" Engine / EngineBaseTypes . h \" # include \" MovieSceneObjectBindingID . h \" # include \" TransformableHandle . generated . h \" class UMovieSceneSection ; class USceneComponent ; enum class EMovieSceneTransformChannel : uint32 ; struct FFRameNumber ; struct FFrameRate ; struct FMovieSceneDoubleChannel ; struct FMovieSceneFloatChannel ; struct FMovieSceneSequenceHierarchy ; struct FMovieSceneSequenceID ; struct FTickFunction ; namespace UE::MovieScene { struct FFixedObjectBindingID ; struct FSharedPlaybackState ; })",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (LocalTransformUpdated,GlobalTransformUpdated,ComponentUpdated,UpperDependencyUpdated,Max)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(Abstract, Blueprintable, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: DECLARE_EVENT_TwoParams(UTransformableHandle, FHandleModifiedEvent, UTransformableHandle*, EHandleEvent)"
  },
  {
    "label": "UTransformableHandle()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UTransformableHandle()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(const bool bDeepCheck = true) const PURE_VIRTUAL(IsValid, return false;)"
  },
  {
    "label": "SetGlobalTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalTransform(const FTransform& InGlobal) const PURE_VIRTUAL(SetGlobalTransform,)"
  },
  {
    "label": "SetLocalTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalTransform(const FTransform& InLocal) const PURE_VIRTUAL(SetLocalTransform,)"
  },
  {
    "label": "GetGlobalTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetGlobalTransform() const PURE_VIRTUAL(GetGlobalTransform, return FTransform::Identity;)"
  },
  {
    "label": "GetLocalTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetLocalTransform() const PURE_VIRTUAL(GetLocalTransform, return FTransform::Identity;)"
  },
  {
    "label": "HasBoundObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBoundObjects()"
  },
  {
    "label": "ResolveBoundObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveBoundObjects(FMovieSceneSequenceID LocalSequenceID, TSharedRef<UE::MovieScene::FSharedPlaybackState> SharedPlaybackState, UObject* SubObject = nullptr) PURE_VIRTUAL(ResolveBoundObjects)"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (UTransformableHandle*)",
    "insertText": "Duplicate(UObject* NewOuter) const PURE_VIRTUAL(Duplicate, return nullptr;)"
  },
  {
    "label": "OnBindingIDsUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBindingIDsUpdated(const TMap<UE::MovieScene::FFixedObjectBindingID, UE::MovieScene::FFixedObjectBindingID>& OldFixedToNewFixedMap, FMovieSceneSequenceID LocalSequenceID, TSharedRef<UE::MovieScene::FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "TickTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickTarget()"
  },
  {
    "label": "PreEvaluate()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "PreEvaluate(const bool bTick = false)"
  },
  {
    "label": "GetFloatChannels()",
    "kind": "Method",
    "detail": "Function (TArrayView<FMovieSceneFloatChannel*>)",
    "insertText": "GetFloatChannels(const UMovieSceneSection* InSection) const PURE_VIRTUAL(GetFloatChannels, return TArrayView<FMovieSceneFloatChannel*>();)"
  },
  {
    "label": "GetDoubleChannels()",
    "kind": "Method",
    "detail": "Function (TArrayView<FMovieSceneDoubleChannel*>)",
    "insertText": "GetDoubleChannels(const UMovieSceneSection * InSection) const PURE_VIRTUAL(GetDoubleChannels, return TArrayView<FMovieSceneDoubleChannel*>();)"
  },
  {
    "label": "AddTransformKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddTransformKeys(const TArray<FFrameNumber>& InFrames, const TArray<FTransform>& InTransforms, const EMovieSceneTransformChannel& InChannels, const FFrameRate& InTickResolution, UMovieSceneSection* InSection, const bool bLocal = true) const PURE_VIRTUAL(AddTransformKeys, return false;)"
  },
  {
    "label": "GetPrerequisiteObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetPrerequisiteObject() const PURE_VIRTUAL(GetPrerequisiteObject, return nullptr;)"
  },
  {
    "label": "GetTickFunction()",
    "kind": "Method",
    "detail": "Function (FTickFunction*)",
    "insertText": "GetTickFunction() const PURE_VIRTUAL(GetTickFunction, return nullptr;)"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetHash() const PURE_VIRTUAL(GetHash, return 0;)"
  },
  {
    "label": "GetTarget()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<UObject>)",
    "insertText": "GetTarget() const PURE_VIRTUAL(GetTarget, return nullptr;)"
  },
  {
    "label": "HasDirectDependencyWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDirectDependencyWith(const UTransformableHandle& InOther) const PURE_VIRTUAL(HasDirectDependencyWith, return false;)"
  },
  {
    "label": "GetPrimaryPrerequisite()",
    "kind": "Method",
    "detail": "Function (FTickPrerequisite)",
    "insertText": "GetPrimaryPrerequisite() const PURE_VIRTUAL(GetPrimaryPrerequisite, return FTickPrerequisite();)"
  },
  {
    "label": "HandleModified()",
    "kind": "Method",
    "detail": "Function (FHandleModifiedEvent&)",
    "insertText": "HandleModified()"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Notify(EHandleEvent InEvent, const bool bPreTickTarget = false)"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (bool bNotifying = false ; # if WITH_EDITOR FString)",
    "insertText": "GetLabel() const PURE_VIRTUAL(GetLabel, return FString();)"
  },
  {
    "label": "GetFullLabel()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFullLabel() const PURE_VIRTUAL(GetFullLabel, return FString();)"
  },
  {
    "label": "OnActorMoving()",
    "kind": "Method",
    "detail": "Function (private : FHandleModifiedEvent OnHandleModified ; } ; struct FComponentEvaluationGraphBinding { void)",
    "insertText": "OnActorMoving(AActor* InActor)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (bool bPendingFlush = false ; } ;)",
    "insertText": "UCLASS(Blueprintable, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: CONSTRAINTS_API virtual ~UTransformableComponentHandle()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(const bool bDeepCheck = true)"
  },
  {
    "label": "SetGlobalTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalTransform(const FTransform& InGlobal)"
  },
  {
    "label": "SetLocalTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalTransform(const FTransform& InLocal)"
  },
  {
    "label": "GetGlobalTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetGlobalTransform()"
  },
  {
    "label": "GetLocalTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetLocalTransform()"
  },
  {
    "label": "GetPrerequisiteObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetPrerequisiteObject()"
  },
  {
    "label": "GetTickFunction()",
    "kind": "Method",
    "detail": "Function (FTickFunction*)",
    "insertText": "GetTickFunction()"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetHash()"
  },
  {
    "label": "GetTarget()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<UObject>)",
    "insertText": "GetTarget()"
  },
  {
    "label": "HasDirectDependencyWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDirectDependencyWith(const UTransformableHandle& InOther)"
  },
  {
    "label": "GetPrimaryPrerequisite()",
    "kind": "Method",
    "detail": "Function (FTickPrerequisite)",
    "insertText": "GetPrimaryPrerequisite()"
  },
  {
    "label": "GetFloatChannels()",
    "kind": "Method",
    "detail": "Function (TArrayView<FMovieSceneFloatChannel*>)",
    "insertText": "GetFloatChannels(const UMovieSceneSection* InSection)"
  },
  {
    "label": "GetDoubleChannels()",
    "kind": "Method",
    "detail": "Function (TArrayView<FMovieSceneDoubleChannel*>)",
    "insertText": "GetDoubleChannels(const UMovieSceneSection* InSection)"
  },
  {
    "label": "AddTransformKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddTransformKeys(const TArray<FFrameNumber>& InFrames, const TArray<FTransform>& InTransforms, const EMovieSceneTransformChannel& InChannels, const FFrameRate& InTickResolution, UMovieSceneSection* InSection, const bool bLocal = true)"
  },
  {
    "label": "ResolveBoundObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveBoundObjects(FMovieSceneSequenceID LocalSequenceID, TSharedRef<UE::MovieScene::FSharedPlaybackState> SharedPlaybackState, UObject* SubObject = nullptr)"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (UTransformableHandle*)",
    "insertText": "Duplicate(UObject* NewOuter)"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FString)",
    "insertText": "GetLabel()"
  },
  {
    "label": "GetFullLabel()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFullLabel()"
  },
  {
    "label": "UnregisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterDelegates()"
  },
  {
    "label": "RegisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDelegates()"
  },
  {
    "label": "OnPostPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostPropertyChanged(UObject* InObject, FPropertyChangedEvent& InPropertyChangedEvent)"
  },
  {
    "label": "OnObjectsReplaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectsReplaced(const TMap<UObject*, UObject*>& InOldToNewInstances)"
  },
  {
    "label": "GetEvaluationBinding()",
    "kind": "Method",
    "detail": "Function (# endif protected : FComponentEvaluationGraphBinding&)",
    "insertText": "GetEvaluationBinding()"
  }
]