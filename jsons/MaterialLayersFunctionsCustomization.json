[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "EMaterialLayerRowType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialLayerRowType"
  },
  {
    "label": "FMaterialLayersFunctionsCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialLayersFunctionsCustomization"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "IDetailGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailGroup"
  },
  {
    "label": "FMaterialLayerFunctionElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialLayerFunctionElement"
  },
  {
    "label": "FMaterialLayersFunctionsCustomization()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IPropertyTypeCustomization . h \" # include \" Materials / MaterialLayersFunctions . h \" # include \" IDetailCustomNodeBuilder . h \" # include \" Input / Reply . h \" struct FAssetData ; enum EMaterialLayerRowType { Layer,Blend } ; class FMaterialLayersFunctionsCustomization : public IDetailCustomNodeBuilder,public TSharedFromThis<FMaterialLayersFunctionsCustomization> { public :)",
    "insertText": "FMaterialLayersFunctionsCustomization(const TSharedPtr<class IPropertyHandle>& StructPropertyHandle, const class IDetailLayoutBuilder* InDetailLayout)"
  },
  {
    "label": "AddLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLayer()"
  },
  {
    "label": "RemoveLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLayer(int32 Index)"
  },
  {
    "label": "RefreshOnAssetChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshOnAssetChange(const struct FAssetData& InAssetData, int32 Index, EMaterialParameterAssociation MaterialType)"
  },
  {
    "label": "GetMaterialLayersFunctions()",
    "kind": "Method",
    "detail": "Function (FMaterialLayersFunctions*)",
    "insertText": "GetMaterialLayersFunctions()"
  },
  {
    "label": "RebuildChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RebuildChildren()"
  },
  {
    "label": "OnObjectChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnObjectChanged(const FAssetData&)"
  },
  {
    "label": "ResetToDefault()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ResetToDefault()"
  },
  {
    "label": "IsResetToDefaultVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResetToDefaultVisible()"
  },
  {
    "label": "RequiresTick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresTick()"
  },
  {
    "label": "GenerateHeaderRowContent()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "GenerateHeaderRowContent(FDetailWidgetRow& NodeRow)"
  },
  {
    "label": "GenerateChildContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateChildContent(IDetailChildrenBuilder& ChildrenBuilder)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetName()"
  },
  {
    "label": "InitiallyCollapsed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InitiallyCollapsed()"
  },
  {
    "label": "OnDetailGroupReset()",
    "kind": "Method",
    "detail": "Function (OnRebuildChildren = InOnRegenerateChildren ; } ; void)",
    "insertText": "OnDetailGroupReset()"
  },
  {
    "label": "GetLayerName()",
    "kind": "Method",
    "detail": "Function (} ; # if WITH_EDITOR FText)",
    "insertText": "GetLayerName(int32 Counter)"
  },
  {
    "label": "OnNameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNameChanged(const FText& InText, ETextCommit::Type CommitInfo, int32 Counter)"
  },
  {
    "label": "GetLayerAssetPath()",
    "kind": "Method",
    "detail": "Function (# endif private : FSimpleDelegate OnRebuildChildren ; TSharedPtr<IPropertyHandle> LayerHandle ; TSharedPtr<IPropertyHandle> BlendHandle ; TSharedPtr<IPropertyHandle> SavedStructPropertyHandle ; class IDetailLayoutBuilder* SavedLayoutBuilder ; TWeakPtr<IPropertyUtilities> PropertyUtilities ; FMaterialLayersFunctions* MaterialLayersFunctions ; TArray<class IDetailGroup*> DetailGroups ; public : FString)",
    "insertText": "GetLayerAssetPath(FMaterialParameterInfo InInfo)"
  },
  {
    "label": "FMaterialLayerFunctionElement()",
    "kind": "Method",
    "detail": "Function (} ; class FMaterialLayerFunctionElement : public IDetailCustomNodeBuilder,public TSharedFromThis<FMaterialLayerFunctionElement> { public :)",
    "insertText": "FMaterialLayerFunctionElement(FMaterialLayersFunctionsCustomization* InCustomization, TWeakPtr<IPropertyHandle> InPropertyHandle, EMaterialLayerRowType InRowType)"
  },
  {
    "label": "ResetLayerAssetToDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetLayerAssetToDefault(TSharedPtr<IPropertyHandle> PropertyHandle, TSharedPtr<IPropertyHandle> InPropertyHandle, FMaterialLayersFunctionsCustomization* InCustomization, int32 InIndex, EMaterialLayerRowType MaterialType)"
  },
  {
    "label": "CanResetLayerAssetToDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanResetLayerAssetToDefault(TSharedPtr<IPropertyHandle> PropertyHandle, TSharedPtr<IPropertyHandle> InPropertyHandle, FMaterialLayersFunctionsCustomization* InCustomization, int32 InIndex, EMaterialLayerRowType MaterialType)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetIndex()"
  }
]