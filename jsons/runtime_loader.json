[
  {
    "label": "runtime_loader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "runtime_loader"
  },
  {
    "label": "error_mode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "error_mode"
  },
  {
    "label": "error_code",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "error_code"
  },
  {
    "label": "comment()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_runtime_loader_H # define __TBB_runtime_loader_H # if ! TBB_PREVIEW_RUNTIME_LOADER # error Set TBB_PREVIEW_RUNTIME_LOADER to include runtime_loader . h # endif # include \" tbb_stddef . h \" # include<climits> # if _MSC_VER # if ! __TBB_NO_IMPLICIT_LINKAGE # ifdef _DEBUG # pragma)",
    "insertText": "comment(linker, \"/nodefaultlib:tbb_debug.lib\" ) #pragma comment( linker, \"/defaultlib:tbbproxy_debug.lib\" ) #else #pragma comment( linker, \"/nodefaultlib:tbb.lib\" ) #pragma comment( linker, \"/defaultlib:tbbproxy.lib\")"
  },
  {
    "label": "runtime_loader()",
    "kind": "Method",
    "detail": "Function (namespace interface6 { class runtime_loader : tbb::internal::no_copy { public : enum error_mode { em_status,em_throw,em_abort } ; enum error_code { ec_ok,ec_bad_call,ec_bad_arg,ec_bad_lib,ec_bad_ver,ec_no_lib } ;)",
    "insertText": "runtime_loader(error_mode mode = em_abort)"
  },
  {
    "label": "runtime_loader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "runtime_loader(char const * path[], int min_ver = TBB_INTERFACE_VERSION, int max_ver = INT_MAX, error_mode mode = em_abort)"
  },
  {
    "label": "runtime_loader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "runtime_loader()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (error_code)",
    "insertText": "load(char const * path[], int min_ver = TBB_INTERFACE_VERSION, int max_ver = INT_MAX)"
  },
  {
    "label": "status()",
    "kind": "Method",
    "detail": "Function (error_code)",
    "insertText": "status()"
  }
]