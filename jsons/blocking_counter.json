[
  {
    "label": "BlockingCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockingCounter"
  },
  {
    "label": "BlockingCounter()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_SYNCHRONIZATION_BLOCKING_COUNTER_H_ # define ABSL_SYNCHRONIZATION_BLOCKING_COUNTER_H_ # include<atomic> # include \" absl / base / thread_annotations . h \" # include \" absl / synchronization / mutex . h \" namespace absl { ABSL_NAMESPACE_BEGIN class BlockingCounter { public :)",
    "insertText": "BlockingCounter(int initial_count)"
  },
  {
    "label": "BlockingCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockingCounter(const BlockingCounter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BlockingCounter&)",
    "insertText": "operator(const BlockingCounter&)"
  },
  {
    "label": "DecrementCount()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecrementCount()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait()"
  },
  {
    "label": "ABSL_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : Mutex lock_ ; std::atomic<int> count_ ; int num_waiting_)",
    "insertText": "ABSL_GUARDED_BY(lock_)"
  }
]