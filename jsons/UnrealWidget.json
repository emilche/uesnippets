[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorModeTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeTools"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidget"
  },
  {
    "label": "FAbsoluteMovementParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAbsoluteMovementParams"
  },
  {
    "label": "FThickArcParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThickArcParams"
  },
  {
    "label": "HWidgetAxis",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HWidgetAxis"
  },
  {
    "label": "FWidget()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HitProxies . h \" # include \" UObject / GCObject . h \" # include \" UnrealWidgetFwd . h \" class FCanvas ; class FEditorModeTools ; class FEditorViewportClient ; class FPrimitiveDrawInterface ; class FSceneView ; class UMaterialInstanceDynamic ; class UMaterialInterface ; class FMaterialRenderProxy ; class FWidget : public FGCObject { public : float AXIS_LENGTH = 3 5 . 0 f ; float TRANSLATE_ROTATE_AXIS_CIRCLE_RADIUS = 2 0 . 0 f ; float TWOD_AXIS_CIRCLE_RADIUS = 1 0 . 0 f ; float INNER_AXIS_CIRCLE_RADIUS = 4 8 . 0 f ; float OUTER_AXIS_CIRCLE_RADIUS = 5 6 . 0 f ; float ROTATION_TEXT_RADIUS = 7 5 . 0 f ; int32 AXIS_CIRCLE_SIDES = 2 4 ; float AXIS_LENGTH_SCALE_OFFSET = 5 . 0 f ;)",
    "insertText": "FWidget()"
  },
  {
    "label": "SetUsesEditorModeTools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUsesEditorModeTools(FEditorModeTools* InEditorModeTools)"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD(FCanvas* Canvas)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FPrimitiveDrawInterface* PDI, FEditorViewportClient* ViewportClient)"
  },
  {
    "label": "ConvertMouseMovementToAxisMovement()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ConvertMouseMovementToAxisMovement(FSceneView* InView, FEditorViewportClient* InViewportClient, bool bInUsedDragModifier, FVector& InDiff, FVector& OutDrag, FRotator& OutRotation, FVector& OutScale)"
  },
  {
    "label": "AbsoluteTranslationConvertMouseMovementToAxisMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbsoluteTranslationConvertMouseMovementToAxisMovement(FSceneView* InView, FEditorViewportClient* InViewportClient, const FVector& InLocation, const FVector2D& InMousePosition, FVector& OutDrag, FRotator& OutRotation, FVector& OutScale)"
  },
  {
    "label": "ResetInitialTranslationOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetInitialTranslationOffset(void)"
  },
  {
    "label": "AllowsAbsoluteTranslationMovement()",
    "kind": "Method",
    "detail": "Function (bAbsoluteTranslationInitialOffsetCached = false ; } bool)",
    "insertText": "AllowsAbsoluteTranslationMovement(UE::Widget::EWidgetMode WidgetMode)"
  },
  {
    "label": "AllowsAbsoluteRotationMovement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowsAbsoluteRotationMovement(UE::Widget::EWidgetMode WidgetMode, EAxisList::Type InAxisType)"
  },
  {
    "label": "SetDefaultVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultVisibility(bool bInDefaultVisibility)"
  },
  {
    "label": "SetCurrentAxis()",
    "kind": "Method",
    "detail": "Function (bDefaultVisibility = bInDefaultVisibility ; } void)",
    "insertText": "SetCurrentAxis(EAxisList::Type InCurrentAxis)"
  },
  {
    "label": "GetCurrentAxis()",
    "kind": "Method",
    "detail": "Function (CurrentAxis = InCurrentAxis ; } EAxisList::Type)",
    "insertText": "GetCurrentAxis()"
  },
  {
    "label": "IsDragging()",
    "kind": "Method",
    "detail": "Function (DragStartPos = Position ; LastDragPos = DragStartPos ; } bool)",
    "insertText": "IsDragging(void)"
  },
  {
    "label": "SetSnapEnabled()",
    "kind": "Method",
    "detail": "Function (bDragging = InDragging ; } void)",
    "insertText": "SetSnapEnabled(const bool InSnapEnabled)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (bSnapEnabled = InSnapEnabled ; } void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "IsWidgetDisabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWidgetDisabled()"
  },
  {
    "label": "UpdateDeltaRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDeltaRotation()"
  },
  {
    "label": "ResetDeltaRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDeltaRotation()"
  },
  {
    "label": "GetRotationSpeed()",
    "kind": "Method",
    "detail": "Function (TotalDeltaRotation = 0 ; } float)",
    "insertText": "GetRotationSpeed()"
  },
  {
    "label": "ConvertMouseToAxis_Translate()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "ConvertMouseToAxis_Translate(FVector2D DragDir, FVector& InOutDelta, FVector& OutDrag)"
  },
  {
    "label": "ConvertMouseToAxis_Rotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertMouseToAxis_Rotate(FVector2D TangentDir, FVector2D DragDir, FSceneView* InView, FEditorViewportClient* InViewportClient, FVector& InOutDelta, FRotator& OutRotation)"
  },
  {
    "label": "ConvertMouseToAxis_Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertMouseToAxis_Scale(FVector2D DragDir, FVector& InOutDelta, FVector& OutScale)"
  },
  {
    "label": "ConvertMouseToAxis_TranslateRotateZ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertMouseToAxis_TranslateRotateZ(FVector2D TangentDir, FVector2D DragDir, FVector& InOutDelta, FVector& OutDrag, FRotator& OutRotation)"
  },
  {
    "label": "ConvertMouseToAxis_WM_2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertMouseToAxis_WM_2D(FVector2D TangentDir, FVector2D DragDir, FVector& InOutDelta, FVector& OutDrag, FRotator& OutRotation)"
  },
  {
    "label": "AbsoluteConvertMouseToAxis_Translate()",
    "kind": "Method",
    "detail": "Function (struct FAbsoluteMovementParams { FVector PlaneNormal ; FVector NormalToRemove ; FVector Position ; FVector XAxis ; FVector YAxis ; FVector ZAxis ; bool bMovementLockedToCamera ; FVector PixelDir ; FVector CameraDir ; FVector EyePos ; bool bPositionSnapping ; } ; void)",
    "insertText": "AbsoluteConvertMouseToAxis_Translate(FSceneView* InView, const FMatrix& InputCoordSystem, FAbsoluteMovementParams& InOutParams, FVector& OutDrag)"
  },
  {
    "label": "AbsoluteConvertMouseToAxis_WM_2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbsoluteConvertMouseToAxis_WM_2D(const FMatrix& InputCoordSystem, FAbsoluteMovementParams& InOutParams, FVector& OutDrag, FRotator& OutRotation)"
  },
  {
    "label": "AbsoluteConvertMouseToAxis_TranslateRotateZ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbsoluteConvertMouseToAxis_TranslateRotateZ(const FMatrix& InputCoordSystem, FAbsoluteMovementParams& InOutParams, FVector& OutDrag, FRotator& OutRotation)"
  },
  {
    "label": "RenderGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderGrid(const FSceneView* View, FPrimitiveDrawInterface* PDI, FEditorViewportClient* ViewportClient)"
  },
  {
    "label": "Render_Axis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render_Axis(const FSceneView* View, FPrimitiveDrawInterface* PDI, EAxisList::Type InAxis, FMatrix& InMatrix, UMaterialInterface* InMaterial, const FLinearColor& InColor, FVector2D& OutAxisDir, const FVector& InScale, bool bDrawWidget, bool bCubeHead = false, float AxisLengthOffset = 0)"
  },
  {
    "label": "Render_Cube()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render_Cube(FPrimitiveDrawInterface* PDI, const FMatrix& InMatrix, const UMaterialInterface* InMaterial, const FVector& InScale)"
  },
  {
    "label": "Render_Translate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render_Translate(const FSceneView* View, FPrimitiveDrawInterface* PDI, FEditorViewportClient* ViewportClient, const FVector& InLocation, bool bDrawWidget)"
  },
  {
    "label": "Render_Rotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render_Rotate(const FSceneView* View, FPrimitiveDrawInterface* PDI, FEditorViewportClient* ViewportClient, const FVector& InLocation, bool bDrawWidget)"
  },
  {
    "label": "Render_Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render_Scale(const FSceneView* View, FPrimitiveDrawInterface* PDI, FEditorViewportClient* ViewportClient, const FVector& InLocation, bool bDrawWidget)"
  },
  {
    "label": "Render_TranslateRotateZ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render_TranslateRotateZ(const FSceneView* View, FPrimitiveDrawInterface* PDI, FEditorViewportClient* ViewportClient, const FVector& InLocation, bool bDrawWidget)"
  },
  {
    "label": "Render_2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render_2D(const FSceneView* View, FPrimitiveDrawInterface* PDI, FEditorViewportClient* ViewportClient, const FVector& InLocation, bool bDrawWidget)"
  },
  {
    "label": "FThickArcParams()",
    "kind": "Method",
    "detail": "Function (struct FThickArcParams {)",
    "insertText": "FThickArcParams(FPrimitiveDrawInterface* InPDI, const FVector& InPosition, UMaterialInterface* InMaterial, const float InInnerRadius, const float InOuterRadius) : Position(InPosition) , PDI(InPDI) , Material(InMaterial) , InnerRadius(InInnerRadius) , OuterRadius(InOuterRadius)"
  },
  {
    "label": "GetAbsoluteTranslationDelta()",
    "kind": "Method",
    "detail": "Function (} FVector Position ; FPrimitiveDrawInterface* PDI ; UMaterialInterface* Material ; float InnerRadius ; float OuterRadius ; } ; FVector)",
    "insertText": "GetAbsoluteTranslationDelta(const FAbsoluteMovementParams& InParams)"
  },
  {
    "label": "GetAbsoluteTranslationInitialOffset()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetAbsoluteTranslationInitialOffset(const FVector& InNewPosition, const FVector& InCurrentPosition)"
  },
  {
    "label": "IsRotationLocalSpace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRotationLocalSpace()"
  },
  {
    "label": "GetDeltaRotation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDeltaRotation()"
  },
  {
    "label": "DrawRotationArc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawRotationArc(const FSceneView* View, FPrimitiveDrawInterface* PDI, EAxisList::Type InAxis, const FVector& InLocation, const FVector& Axis0, const FVector& Axis1, const FVector& InDirectionToWidget, const FColor& InColor, const float InScale, FVector2D& OutAxisEnd)"
  },
  {
    "label": "DrawPartialRotationArc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawPartialRotationArc(const FSceneView* View, FPrimitiveDrawInterface* PDI, EAxisList::Type InAxis, const FVector& InLocation, const FVector& Axis0, const FVector& Axis1, const float InStartAngle, const float InEndAngle, const FColor& InColor, const float InScale, const FVector& InDirectionToWidget)"
  },
  {
    "label": "DrawThickArc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawThickArc(const FThickArcParams& InParams, const FVector& Axis0, const FVector& Axis1, const float InStartAngle, const float InEndAngle, const FColor& InColor, const FVector& InDirectionToWidget, bool bIsOrtho)"
  },
  {
    "label": "DrawSnapMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSnapMarker(FPrimitiveDrawInterface* PDI, const FVector& InLocation, const FVector& Axis0, const FVector& Axis1, const FColor& InColor, const float InScale, const float InWidthPercent = 0.0f, const float InPercentSize = 1.0f)"
  },
  {
    "label": "DrawStartStopMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawStartStopMarker(FPrimitiveDrawInterface* PDI, const FVector& InLocation, const FVector& Axis0, const FVector& Axis1, const float InAngle, const FColor& InColor, const float InScale)"
  },
  {
    "label": "CacheRotationHUDText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheRotationHUDText(const FSceneView* View, FPrimitiveDrawInterface* PDI, const FVector& InLocation, const FVector& Axis0, const FVector& Axis1, const float AngleOfChange, const float InScale)"
  },
  {
    "label": "GetDominantAxisIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetDominantAxisIndex(const FVector& InDiff, FEditorViewportClient* ViewportClient)"
  },
  {
    "label": "DrawColoredSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawColoredSphere(FPrimitiveDrawInterface* PDI, const FVector& Center, const FRotator& Orientation, FColor Color, const FVector& Radii, int32 NumSides, int32 NumRings, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority, bool bDisableBackfaceCulling)"
  },
  {
    "label": "DECLARE_HIT_PROXY()",
    "kind": "Method",
    "detail": "Function (EAxisList::Type CurrentAxis ; FVector2D Origin ; FVector2D XAxisDir,YAxisDir,ZAxisDir ; FVector2D DragStartPos ; FVector2D LastDragPos ; enum { AXIS_ARROW_SEGMENTS = 1 6 } ; TObjectPtr<UMaterialInterface> TransparentPlaneMaterialXY ; TObjectPtr<UMaterialInterface> GridMaterial ; TObjectPtr<UMaterialInstanceDynamic> AxisMaterialX ; TObjectPtr<UMaterialInstanceDynamic> AxisMaterialY ; TObjectPtr<UMaterialInstanceDynamic> AxisMaterialZ ; TObjectPtr<UMaterialInstanceDynamic> CurrentAxisMaterial ; TObjectPtr<UMaterialInstanceDynamic> OpaquePlaneMaterialXY ; FLinearColor AxisColorX,AxisColorY,AxisColorZ ; FLinearColor ScreenAxisColor ; FColor PlaneColorXY,ScreenSpaceColor,CurrentColor ; FColor ArcBallColor ; FEditorModeTools* EditorModeTools ; FMatrix CustomCoordSystem ; ECoordSystem CustomCoordSystemSpace ; FVector2D HUDInfoPos ; FString HUDString ; bool bAbsoluteTranslationInitialOffsetCached ; FVector InitialTranslationOffset ; FVector InitialTranslationPosition ; bool bDragging ; bool bSnapEnabled ; bool bDefaultVisibility ; bool bIsOrthoDrawingFullRing ; float TotalDeltaRotation ; float CurrentDeltaRotation ; } ; struct HWidgetAxis : public HHitProxy {)",
    "insertText": "DECLARE_HIT_PROXY(UNREALED_API)"
  },
  {
    "label": "HWidgetAxis()",
    "kind": "Method",
    "detail": "Function (EAxisList::Type Axis ; uint32 bDisabled : 1 ;)",
    "insertText": "HWidgetAxis(EAxisList::Type InAxis, bool InbDisabled = false, EHitProxyPriority InHitProxy = HPP_UI)"
  },
  {
    "label": "GetMouseCursor()",
    "kind": "Method",
    "detail": "Function (EMouseCursor::Type)",
    "insertText": "GetMouseCursor()"
  },
  {
    "label": "AlwaysAllowsTranslucentPrimitives()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AlwaysAllowsTranslucentPrimitives()"
  }
]