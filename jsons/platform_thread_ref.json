[
  {
    "label": "PlatformThreadRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PlatformThreadRef"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_PLATFORM_THREAD_REF_H_ # define BASE_THREADING_PLATFORM_THREAD_REF_H_ # include<iosfwd> # include \" base / base_export . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN) #include \"base/win/windows_types.h\" #elif BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (class PlatformThreadRef { public : # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "PlatformThreadRef()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "PlatformThreadRef()"
  },
  {
    "label": "PlatformThreadRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformThreadRef(RefType id) : id_(id)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(PlatformThreadRef other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RefType id_ = 0 ; } ; BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& os, const PlatformThreadRef& ref)"
  }
]