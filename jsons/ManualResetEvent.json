[
  {
    "label": "FManualResetEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManualResetEvent"
  },
  {
    "label": "FManualResetEvent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / ParkingLot . h \" # include<atomic> namespace UE { class FManualResetEvent { public :)",
    "insertText": "FManualResetEvent()"
  },
  {
    "label": "FManualResetEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FManualResetEvent(const FManualResetEvent&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FManualResetEvent&)",
    "insertText": "operator(const FManualResetEvent&)"
  },
  {
    "label": "IsNotified()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNotified()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Wait()"
  },
  {
    "label": "WaitUntil()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitUntil(FMonotonicTimePoint::Infinity())"
  },
  {
    "label": "WaitFor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WaitFor(FMonotonicTimeSpan WaitTime)"
  },
  {
    "label": "WaitUntil()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WaitUntil(FMonotonicTimePoint WaitTime)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (uint8 CurrentState = State .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "WaitUntil()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitUntil(&State, [this] { return !IsNotified(); }, []{}, WaitTime)"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "Notify()"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (const uint8 CurrentState = State .)",
    "insertText": "exchange(IsNotifiedFlag, std::memory_order_release)"
  },
  {
    "label": "WakeAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeAll(&State)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reset()"
  },
  {
    "label": "fetch_and()",
    "kind": "Method",
    "detail": "Function (State .)",
    "insertText": "fetch_and(~IsNotifiedFlag, std::memory_order_release)"
  }
]