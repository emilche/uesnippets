[
  {
    "label": "IRCompileLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRCompileLayer"
  },
  {
    "label": "ObjectFile()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_EXECUTIONENGINE_ORC_IRCOMPILELAYER_H # define LLVM_EXECUTIONENGINE_ORC_IRCOMPILELAYER_H # include \" JITSymbol . h \" # include \" llvm / ExecutionEngine / ObjectCache . h \" # include \" llvm / ExecutionEngine / RTDyldMemoryManager . h \" # include \" llvm / Object / ObjectFile . h \" # include<memory> namespace llvm { namespace orc { template<BaseLayerT> class IRCompileLayer { public : typedef std::function<object::OwningBinary<)",
    "insertText": "ObjectFile(Module &)"
  },
  {
    "label": "IRCompileLayer()",
    "kind": "Method",
    "detail": "Function (private : typedef BaseLayerT::ObjSetHandleT ObjSetHandleT ; typedef std::vector<std::unique_ptr<object::ObjectFile>> OwningObjectVec ; typedef std::vector<std::unique_ptr<MemoryBuffer>> OwningBufferVec ; public : typedef ObjSetHandleT ModuleSetHandleT ;)",
    "insertText": "IRCompileLayer(BaseLayerT &BaseLayer, CompileFtor Compile) : BaseLayer(BaseLayer), Compile(std::move(Compile)), ObjCache(nullptr)"
  },
  {
    "label": "setObjectCache()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setObjectCache(ObjectCache *NewCache)"
  },
  {
    "label": "addModuleSet()",
    "kind": "Method",
    "detail": "Function (ObjCache = NewCache ; } template<ModuleSetT,MemoryManagerPtrT,SymbolResolverPtrT> ModuleSetHandleT)",
    "insertText": "addModuleSet(ModuleSetT Ms, MemoryManagerPtrT MemMgr, SymbolResolverPtrT Resolver)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (OwningObjectVec Objects ; OwningBufferVec Buffers ;)",
    "insertText": "for(const auto &M : Ms)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<object::ObjectFile> Object ; std::unique_ptr<MemoryBuffer> Buffer ;)",
    "insertText": "if(ObjCache) std::tie(Object, Buffer) = tryToLoadFromObjectCache(*M).takeBinary()"
  },
  {
    "label": "tie()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tie(Object, Buffer) = Compile(*M).takeBinary()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} Objects .)",
    "insertText": "push_back(std::move(Object))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Buffers .)",
    "insertText": "push_back(std::move(Buffer))"
  },
  {
    "label": "addObjectSet()",
    "kind": "Method",
    "detail": "Function (} ModuleSetHandleT H = BaseLayer .)",
    "insertText": "addObjectSet(Objects, std::move(MemMgr), std::move(Resolver))"
  },
  {
    "label": "takeOwnershipOfBuffers()",
    "kind": "Method",
    "detail": "Function (BaseLayer .)",
    "insertText": "takeOwnershipOfBuffers(H, std::move(Buffers))"
  },
  {
    "label": "removeObjectSet()",
    "kind": "Method",
    "detail": "Function (BaseLayer .)",
    "insertText": "removeObjectSet(H)"
  },
  {
    "label": "findSymbol()",
    "kind": "Method",
    "detail": "Function (} JITSymbol)",
    "insertText": "findSymbol(const std::string &Name, bool ExportedSymbolsOnly)"
  },
  {
    "label": "findSymbolIn()",
    "kind": "Method",
    "detail": "Function (} JITSymbol)",
    "insertText": "findSymbolIn(ModuleSetHandleT H, const std::string &Name, bool ExportedSymbolsOnly)"
  },
  {
    "label": "emitAndFinalize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "emitAndFinalize(ModuleSetHandleT H)"
  },
  {
    "label": "emitAndFinalize()",
    "kind": "Method",
    "detail": "Function (BaseLayer .)",
    "insertText": "emitAndFinalize(H)"
  },
  {
    "label": "tryToLoadFromObjectCache()",
    "kind": "Method",
    "detail": "Function (} private : object::OwningBinary<object::ObjectFile>)",
    "insertText": "tryToLoadFromObjectCache(const Module &M)"
  },
  {
    "label": "getObject()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<MemoryBuffer> ObjBuffer = ObjCache ->)",
    "insertText": "getObject(&M)"
  },
  {
    "label": "createObjectFile()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<object::ObjectFile>> Obj = object::)",
    "insertText": "createObjectFile(ObjBuffer->getMemBufferRef())"
  }
]