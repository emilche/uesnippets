[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FInteractiveToolActionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInteractiveToolActionSet"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "IToolsContextRenderAPI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolsContextRenderAPI"
  },
  {
    "label": "UInputBehavior",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputBehavior"
  },
  {
    "label": "UInteractiveTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInteractiveTool"
  },
  {
    "label": "UInteractiveToolManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInteractiveToolManager"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInteractiveToolInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInteractiveToolInfo"
  },
  {
    "label": "FWatchablePropertySet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWatchablePropertySet"
  },
  {
    "label": "FPropertyWatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyWatcher"
  },
  {
    "label": "TPropertyWatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPropertyWatcher"
  },
  {
    "label": "CInequalityComparable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CInequalityComparable"
  },
  {
    "label": "UInteractiveToolPropertySet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInteractiveToolPropertySet"
  },
  {
    "label": "EAcceptWarning",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAcceptWarning"
  },
  {
    "label": "UInteractionMechanic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInteractionMechanic"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" InputBehaviorSet . h \" # include \" InteractiveToolActionSet . h \" # include \" Internationalization / Text . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Optional . h \" # include \" Shader . h \" # include \" Templates / EnableIf . h \" # include \" Templates / Function . h \" # include \" Templates / Models . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" ToolContextInterfaces . h \" # include \" UObject / Class . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / Package . h \" # include \" UObject / UObjectGlobals . h \" # include \" InteractiveTool . generated . h \" class FCanvas ; class FInteractiveToolActionSet ; class FProperty ; class IToolsContextRenderAPI ; class UInputBehavior ; class UInteractiveTool ; class UInteractiveToolManager ; struct FPropertyChangedEvent ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (Completed = 0,Accept = 1,Cancel = 2 } ; struct FInteractiveToolInfo { FText ToolDisplayName =)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "FPropertyWatcher()",
    "kind": "Method",
    "detail": "Function (} ; class FWatchablePropertySet { public : class FPropertyWatcher { public : ~)",
    "insertText": "FPropertyWatcher()"
  },
  {
    "label": "CheckAndUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckAndUpdate()"
  },
  {
    "label": "SilentUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SilentUpdate()"
  },
  {
    "label": "PropType()",
    "kind": "Method",
    "detail": "Function (} ; template<PropType> class TPropertyWatcher : public FPropertyWatcher { public : using FValueGetter = TFunction<)",
    "insertText": "PropType(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FChangedCallback = TFunction<)",
    "insertText": "void(const PropType&)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using FNotEqualTestFunction = TFunction<)",
    "insertText": "bool(const PropType&, const PropType&)"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (struct CInequalityComparable { template<T> auto)",
    "insertText": "Requires(bool& Result, const T& A, const T& B) -> decltype( Result = A != B)"
  },
  {
    "label": "TPropertyWatcher()",
    "kind": "Method",
    "detail": "Function (} ; template<Q = PropType,= TEnableIf<TModels_V<CInequalityComparable,Q>>::Type>)",
    "insertText": "TPropertyWatcher(const PropType& Property, FChangedCallback OnChangedIn) : Cached(), GetValue([&Property]() {return Property; }), OnChanged(MoveTemp(OnChangedIn)), NotEqual([](const PropType& A, const PropType& B) { return A != B; })"
  },
  {
    "label": "TPropertyWatcher()",
    "kind": "Method",
    "detail": "Function (} template<Q = PropType,= TEnableIf<TModels_V<CInequalityComparable,Q>>::Type>)",
    "insertText": "TPropertyWatcher(FValueGetter GetValueIn, FChangedCallback OnChangedIn) : Cached(), GetValue(MoveTemp(GetValueIn)), OnChanged(MoveTemp(OnChangedIn)), NotEqual([](const PropType& A, const PropType& B) { return A != B; })"
  },
  {
    "label": "TPropertyWatcher()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPropertyWatcher(const PropType& Property, FChangedCallback OnChangedIn, FNotEqualTestFunction NotEqualIn) : Cached(), GetValue([&Property]() {return Property; }), OnChanged(MoveTemp(OnChangedIn)), NotEqual(MoveTemp(NotEqualIn))"
  },
  {
    "label": "TPropertyWatcher()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPropertyWatcher(FValueGetter GetValueIn, FChangedCallback OnChangedIn, FNotEqualTestFunction NotEqualIn) : Cached(), GetValue(MoveTemp(GetValueIn)), OnChanged(MoveTemp(OnChangedIn)), NotEqual(MoveTemp(NotEqualIn))"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (PropType Value =)",
    "insertText": "GetValue()"
  },
  {
    "label": "OnChanged()",
    "kind": "Method",
    "detail": "Function (Cached = Value ;)",
    "insertText": "OnChanged(Cached.GetValue())"
  },
  {
    "label": "FWatchablePropertySet()",
    "kind": "Method",
    "detail": "Function (} private : TOptional<PropType> Cached ; FValueGetter GetValue ; FChangedCallback OnChanged ; FNotEqualTestFunction NotEqual ; } ;)",
    "insertText": "FWatchablePropertySet()"
  },
  {
    "label": "FWatchablePropertySet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWatchablePropertySet(const FWatchablePropertySet&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWatchablePropertySet&)",
    "insertText": "operator(const FWatchablePropertySet&)"
  },
  {
    "label": "CheckAndUpdateWatched()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckAndUpdateWatched()"
  },
  {
    "label": "SilentUpdateWatched()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SilentUpdateWatched()"
  },
  {
    "label": "SilentUpdateWatcherAtIndex()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SilentUpdateWatcherAtIndex(int32 i)"
  },
  {
    "label": "WatchProperty()",
    "kind": "Method",
    "detail": "Function (} template<PropType> int32)",
    "insertText": "WatchProperty(const PropType& ValueIn, typename TPropertyWatcher<PropType>::FChangedCallback OnChangedIn)"
  },
  {
    "label": "WatchProperty()",
    "kind": "Method",
    "detail": "Function (} template<PropType> int32)",
    "insertText": "WatchProperty(typename TPropertyWatcher<PropType>::FValueGetter GetValueIn, typename TPropertyWatcher<PropType>::FChangedCallback OnChangedIn)"
  },
  {
    "label": "WatchProperty()",
    "kind": "Method",
    "detail": "Function (} template<PropType> int32)",
    "insertText": "WatchProperty(const PropType& ValueIn, typename TPropertyWatcher<PropType>::FChangedCallback OnChangedIn, typename TPropertyWatcher<PropType>::FNotEqualTestFunction NotEqualsIn)"
  },
  {
    "label": "WatchProperty()",
    "kind": "Method",
    "detail": "Function (} template<PropType> int32)",
    "insertText": "WatchProperty(typename TPropertyWatcher<PropType>::FValueGetter GetValueIn, typename TPropertyWatcher<PropType>::FChangedCallback OnChangedIn, typename TPropertyWatcher<PropType>::FNotEqualTestFunction NotEqualsIn)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} private : TArray<TUniquePtr<FPropertyWatcher>> PropertyWatchers ; } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FInteractiveToolPropertySetModifiedSignature, UObject*, FProperty*)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(Transient, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FInteractiveToolPropertySetModifiedSignature& GetOnModified()"
  },
  {
    "label": "RestoreProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreProperties(UInteractiveTool* RestoreToTool, const FString& CacheIdentifier = TEXT(\"\"))"
  },
  {
    "label": "SaveRestoreProperties()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SaveRestoreProperties(UInteractiveTool* RestoreToTool, const FString& CacheIdentifier, bool bSaving)"
  },
  {
    "label": "GetDynamicPropertyCache()",
    "kind": "Method",
    "detail": "Function (TObjectPtr<UInteractiveToolPropertySet>)",
    "insertText": "GetDynamicPropertyCache(const FString& CacheIdentifier, bool& bWasCreatedOut)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: INTERACTIVETOOLSFRAMEWORK_API UInteractiveTool()"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Setup()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown(EToolShutdownType ShutdownType)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(IToolsContextRenderAPI* RenderAPI)"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD(FCanvas* Canvas, IToolsContextRenderAPI* RenderAPI)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetToolManager()",
    "kind": "Method",
    "detail": "Function (UInteractiveToolManager*)",
    "insertText": "GetToolManager()"
  },
  {
    "label": "HasCancel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCancel()"
  },
  {
    "label": "HasAccept()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAccept()"
  },
  {
    "label": "CanAccept()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAccept()"
  },
  {
    "label": "AddInputBehavior()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInputBehavior(UInputBehavior* Behavior, void* Source = nullptr)"
  },
  {
    "label": "RemoveInputBehaviorsBySource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInputBehaviorsBySource(void* Source)"
  },
  {
    "label": "GetInputBehaviors()",
    "kind": "Method",
    "detail": "Function (const UInputBehaviorSet*)",
    "insertText": "GetInputBehaviors()"
  },
  {
    "label": "GetToolProperties()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*>)",
    "insertText": "GetToolProperties(bool bEnabledOnly = true)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(OnInteractiveToolPropertySetsModified)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (OnInteractiveToolPropertySetsModified OnPropertySetsModified ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(OnInteractiveToolPropertyInternallyModified, UObject*)"
  },
  {
    "label": "OnPropertyModified()",
    "kind": "Method",
    "detail": "Function (OnInteractiveToolPropertyInternallyModified OnPropertyModifiedDirectlyByTool ; void)",
    "insertText": "OnPropertyModified(UObject* PropertySet, FProperty* Property)"
  },
  {
    "label": "AddToolPropertySource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToolPropertySource(UObject* PropertyObject)"
  },
  {
    "label": "AddToolPropertySource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToolPropertySource(UInteractiveToolPropertySet* PropertySet)"
  },
  {
    "label": "RemoveToolPropertySource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveToolPropertySource(UInteractiveToolPropertySet* PropertySet)"
  },
  {
    "label": "ReplaceToolPropertySource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceToolPropertySource(UInteractiveToolPropertySet* CurPropertySet, UInteractiveToolPropertySet* ReplaceWith, bool bSetToEnabled = true)"
  },
  {
    "label": "SetToolPropertySourceEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetToolPropertySourceEnabled(UInteractiveToolPropertySet* PropertySet, bool bEnabled)"
  },
  {
    "label": "NotifyOfPropertyChangeByTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyOfPropertyChangeByTool(UInteractiveToolPropertySet* PropertySet)"
  },
  {
    "label": "UpdateAcceptWarnings()",
    "kind": "Method",
    "detail": "Function (enum EAcceptWarning { NoWarning,EmptyForbidden } ; void)",
    "insertText": "UpdateAcceptWarnings(EAcceptWarning Warning)"
  },
  {
    "label": "OnTick()",
    "kind": "Method",
    "detail": "Function (private : bool bLastShowedAcceptWarning = false ; protected : void)",
    "insertText": "OnTick(float DeltaTime)"
  },
  {
    "label": "GetActionSet()",
    "kind": "Method",
    "detail": "Function (} ; public : FInteractiveToolActionSet*)",
    "insertText": "GetActionSet()"
  },
  {
    "label": "ExecuteAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteAction(int32 ActionID)"
  },
  {
    "label": "RegisterActions()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "RegisterActions(FInteractiveToolActionSet& ActionSet)"
  },
  {
    "label": "GetToolInfo()",
    "kind": "Method",
    "detail": "Function (private : FInteractiveToolActionSet* ToolActionSet = nullptr ; public : FInteractiveToolInfo)",
    "insertText": "GetToolInfo()"
  },
  {
    "label": "SetToolDisplayName()",
    "kind": "Method",
    "detail": "Function (DefaultToolInfo = NewInfo ; } void)",
    "insertText": "SetToolDisplayName(const FText& NewName)"
  }
]