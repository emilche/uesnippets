[
  {
    "label": "BucketRanges",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BucketRanges"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SampleVectorTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SampleVectorTest"
  },
  {
    "label": "SampleVectorBase()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_SAMPLE_VECTOR_H_ # define BASE_METRICS_SAMPLE_VECTOR_H_ # include<stddef . h> # include<stdint . h> # include<atomic> # include<memory> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / compiler_specific . h \" # include \" base / gtest_prod_util . h \" # include \" base / memory / raw_ptr . h \" # include \" base / metrics / bucket_ranges . h \" # include \" base / metrics / histogram_base . h \" # include \" base / metrics / histogram_samples . h \" # include \" base / metrics / persistent_memory_allocator . h \" namespace base { class BucketRanges ; class BASE_EXPORT SampleVectorBase : public HistogramSamples { public :)",
    "insertText": "SampleVectorBase(const SampleVectorBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SampleVectorBase&)",
    "insertText": "operator(const SampleVectorBase&)"
  },
  {
    "label": "SampleVectorBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SampleVectorBase()"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Accumulate(HistogramBase::Sample value, HistogramBase::Count count)"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (HistogramBase::Count)",
    "insertText": "GetCount(HistogramBase::Sample value)"
  },
  {
    "label": "TotalCount()",
    "kind": "Method",
    "detail": "Function (HistogramBase::Count)",
    "insertText": "TotalCount()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SampleCountIterator>)",
    "insertText": "Iterator()"
  },
  {
    "label": "GetCountAtIndex()",
    "kind": "Method",
    "detail": "Function (HistogramBase::Count)",
    "insertText": "GetCountAtIndex(size_t bucket_index)"
  },
  {
    "label": "bucket_ranges()",
    "kind": "Method",
    "detail": "Function (const BucketRanges*)",
    "insertText": "bucket_ranges()"
  },
  {
    "label": "SampleVectorBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SampleVectorBase(uint64_t id, std::unique_ptr<Metadata> meta, const BucketRanges* bucket_ranges)"
  },
  {
    "label": "AddSubtractImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSubtractImpl(SampleCountIterator* iter, HistogramSamples::Operator op)"
  },
  {
    "label": "GetBucketIndex()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetBucketIndex(HistogramBase::Sample value)"
  },
  {
    "label": "MoveSingleSampleToCounts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSingleSampleToCounts()"
  },
  {
    "label": "MountCountsStorageAndMoveSingleSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MountCountsStorageAndMoveSingleSample()"
  },
  {
    "label": "MountExistingCountsStorage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MountExistingCountsStorage()"
  },
  {
    "label": "CreateCountsStorageWhileLocked()",
    "kind": "Method",
    "detail": "Function (HistogramBase::Count*)",
    "insertText": "CreateCountsStorageWhileLocked()"
  },
  {
    "label": "counts()",
    "kind": "Method",
    "detail": "Function (HistogramBase::AtomicCount*)",
    "insertText": "counts()"
  },
  {
    "label": "set_counts()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_counts(HistogramBase::AtomicCount* counts)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (counts_ .)",
    "insertText": "store(counts, std::memory_order_release)"
  },
  {
    "label": "counts_size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "counts_size()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (} private : class SampleVectorTest ;)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(HistogramTest, CorruptSampleCounts)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(SharedHistogramTest, CorruptSampleCounts)"
  },
  {
    "label": "SampleVector()",
    "kind": "Method",
    "detail": "Function (std::atomic<HistogramBase::AtomicCount*> counts_ { nullptr } ; const raw_ptr<const BucketRanges> bucket_ranges_ ; } ; class BASE_EXPORT SampleVector : public SampleVectorBase { public :)",
    "insertText": "SampleVector(const BucketRanges* bucket_ranges)"
  },
  {
    "label": "SampleVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SampleVector(uint64_t id, const BucketRanges* bucket_ranges)"
  },
  {
    "label": "SampleVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SampleVector(const SampleVector&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SampleVector&)",
    "insertText": "operator(const SampleVector&)"
  },
  {
    "label": "SampleVector()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SampleVector()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(SampleVectorTest, GetPeakBucketSize)"
  },
  {
    "label": "GetAsciiBody()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetAsciiBody()"
  },
  {
    "label": "GetAsciiHeader()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetAsciiHeader(StringPiece histogram_name, int32_t flags)"
  },
  {
    "label": "WriteAsciiBucketContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteAsciiBucketContext(int64_t past, HistogramBase::Count current, int64_t remaining, uint32_t current_bucket_index, std::string* output)"
  },
  {
    "label": "bucket_count()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "bucket_count()"
  },
  {
    "label": "PersistentSampleVector()",
    "kind": "Method",
    "detail": "Function (} std::vector<HistogramBase::AtomicCount> local_counts_ ; } ; class BASE_EXPORT PersistentSampleVector : public SampleVectorBase { public :)",
    "insertText": "PersistentSampleVector(uint64_t id, const BucketRanges* bucket_ranges, Metadata* meta, const DelayedPersistentAllocation& counts)"
  },
  {
    "label": "PersistentSampleVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PersistentSampleVector(const PersistentSampleVector&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PersistentSampleVector&)",
    "insertText": "operator(const PersistentSampleVector&)"
  },
  {
    "label": "PersistentSampleVector()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PersistentSampleVector()"
  },
  {
    "label": "SampleVectorIterator()",
    "kind": "Method",
    "detail": "Function (DelayedPersistentAllocation persistent_counts_ ; } ; class BASE_EXPORT SampleVectorIterator : public SampleCountIterator { public :)",
    "insertText": "SampleVectorIterator(const std::vector<HistogramBase::AtomicCount>* counts, const BucketRanges* bucket_ranges)"
  },
  {
    "label": "SampleVectorIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SampleVectorIterator(const HistogramBase::AtomicCount* counts, size_t counts_size, const BucketRanges* bucket_ranges)"
  },
  {
    "label": "SampleVectorIterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SampleVectorIterator()"
  },
  {
    "label": "Done()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Done()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Next()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get(HistogramBase::Sample* min, int64_t* max, HistogramBase::Count* count)"
  },
  {
    "label": "GetBucketIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBucketIndex(size_t* index)"
  },
  {
    "label": "SkipEmptyBuckets()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SkipEmptyBuckets()"
  }
]