[
  {
    "label": "BucketRanges",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BucketRanges"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SampleVectorTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SampleVectorTest"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SampleVectorBase()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "SampleVectorBase(uint64_t id,\n                   Metadata* meta,\n                   const BucketRanges* bucket_ranges)"
  },
  {
    "label": "MoveSingleSampleToCounts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSingleSampleToCounts()"
  },
  {
    "label": "MountCountsStorageAndMoveSingleSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MountCountsStorageAndMoveSingleSample()"
  },
  {
    "label": "SampleVector()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "SampleVector(const BucketRanges* bucket_ranges)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(SampleVectorTest, GetPeakBucketSize)"
  },
  {
    "label": "PersistentSampleVector()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "PersistentSampleVector(uint64_t id,\n                         const BucketRanges* bucket_ranges,\n                         Metadata* meta,\n                         const DelayedPersistentAllocation& counts)"
  },
  {
    "label": "SampleVectorIterator()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "SampleVectorIterator(const std::vector<HistogramBase::AtomicCount>* counts,\n                       const BucketRanges* bucket_ranges)"
  },
  {
    "label": "SkipEmptyBuckets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SkipEmptyBuckets()"
  }
]