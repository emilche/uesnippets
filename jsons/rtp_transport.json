[
  {
    "label": "CopyOnWriteBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CopyOnWriteBuffer"
  },
  {
    "label": "PacketOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketOptions"
  },
  {
    "label": "PacketTransportInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketTransportInternal"
  },
  {
    "label": "RtpTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpTransport"
  },
  {
    "label": "RtpTransport()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_RTP_TRANSPORT_H_ # define PC_RTP_TRANSPORT_H_ # include<stddef . h> # include<stdint . h> # include<string> # include \" absl / types / optional . h \" # include \" call / rtp_demuxer . h \" # include \" call / video_receive_stream . h \" # include \" modules / rtp_rtcp / include / rtp_header_extension_map . h \" # include \" p2p / base / packet_transport_internal . h \" # include \" pc / rtp_transport_internal . h \" # include \" pc / session_description . h \" # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / network / sent_packet . h \" # include \" rtc_base / network_route . h \" # include \" rtc_base / socket . h \" namespace rtc { class CopyOnWriteBuffer ; struct PacketOptions ; class PacketTransportInternal ; } namespace webrtc { class RtpTransport : public RtpTransportInternal { public :)",
    "insertText": "RtpTransport(const RtpTransport&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpTransport&)",
    "insertText": "operator(const RtpTransport&)"
  },
  {
    "label": "RtpTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpTransport(bool rtcp_mux_enabled) : rtcp_mux_enabled_(rtcp_mux_enabled)"
  },
  {
    "label": "rtcp_mux_enabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "rtcp_mux_enabled()"
  },
  {
    "label": "transport_name()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "transport_name()"
  },
  {
    "label": "SetRtpOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetRtpOption(rtc::Socket::Option opt, int value)"
  },
  {
    "label": "SetRtcpOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetRtcpOption(rtc::Socket::Option opt, int value)"
  },
  {
    "label": "rtp_packet_transport()",
    "kind": "Method",
    "detail": "Function (rtc::PacketTransportInternal*)",
    "insertText": "rtp_packet_transport()"
  },
  {
    "label": "rtcp_packet_transport()",
    "kind": "Method",
    "detail": "Function (rtc::PacketTransportInternal*)",
    "insertText": "rtcp_packet_transport()"
  },
  {
    "label": "IsReadyToSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyToSend()"
  },
  {
    "label": "SendRtpPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtpPacket(rtc::CopyOnWriteBuffer* packet, const rtc::PacketOptions& options, int flags)"
  },
  {
    "label": "SendRtcpPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtcpPacket(rtc::CopyOnWriteBuffer* packet, const rtc::PacketOptions& options, int flags)"
  },
  {
    "label": "IsSrtpActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSrtpActive()"
  },
  {
    "label": "RegisterRtpDemuxerSink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterRtpDemuxerSink(const RtpDemuxerCriteria& criteria, RtpPacketSinkInterface* sink)"
  },
  {
    "label": "UnregisterRtpDemuxerSink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterRtpDemuxerSink(RtpPacketSinkInterface* sink)"
  },
  {
    "label": "DemuxPacket()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "DemuxPacket(rtc::CopyOnWriteBuffer packet, int64_t packet_time_us)"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendPacket(bool rtcp, rtc::CopyOnWriteBuffer* packet, const rtc::PacketOptions& options, int flags)"
  },
  {
    "label": "OnNetworkRouteChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworkRouteChanged(absl::optional<rtc::NetworkRoute> network_route)"
  },
  {
    "label": "OnRtpPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRtpPacketReceived(rtc::CopyOnWriteBuffer packet, int64_t packet_time_us)"
  },
  {
    "label": "OnRtcpPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRtcpPacketReceived(rtc::CopyOnWriteBuffer packet, int64_t packet_time_us)"
  },
  {
    "label": "OnWritableState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWritableState(rtc::PacketTransportInternal* packet_transport)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnReadyToSend(rtc::PacketTransportInternal* transport)"
  },
  {
    "label": "OnSentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSentPacket(rtc::PacketTransportInternal* packet_transport, const rtc::SentPacket& sent_packet)"
  },
  {
    "label": "OnReadPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadPacket(rtc::PacketTransportInternal* transport, const char* data, size_t len, const int64_t& packet_time_us, int flags)"
  },
  {
    "label": "SetReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReadyToSend(bool rtcp, bool ready)"
  },
  {
    "label": "MaybeSignalReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSignalReadyToSend()"
  },
  {
    "label": "IsTransportWritable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTransportWritable()"
  }
]