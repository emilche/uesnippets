[
  {
    "label": "UScriptStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScriptStruct"
  },
  {
    "label": "FNodeParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeParameters"
  },
  {
    "label": "FGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraph"
  },
  {
    "label": "FDataflowNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowNode"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE"
  },
  {
    "label": "FDataflowConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowConnection"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FDataflowNodePauseInvalidationScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataflowNodePauseInvalidationScope"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ChaosLog . h \" # include \" CoreMinimal . h \" # include \" Dataflow / DataflowConnection . h \" # include \" Dataflow / DataflowInputOutput . h \" # include \" Dataflow / DataflowNodeParameters . h \" # include \" Dataflow / DataflowAnyType . h \" # include \" UObject / StructOnScope . h \" # include \" Dataflow / DataflowSettings . h \" # include \" DataflowNode . generated . h \" class UScriptStruct ; namespace UE::Dataflow { struct FNodeParameters { FName Name ; UObject* OwningObject = nullptr ; } ; class FGraph ; } PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FDataflowNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDataflowNode() : Guid(FGuid()) , Name(\"Invalid\") , LastModifiedTimestamp(UE::Dataflow::FTimestamp::Invalid)"
  },
  {
    "label": "FDataflowNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDataflowNode(const UE::Dataflow::FNodeParameters& Param, FGuid InGuid = FGuid::NewGuid()) : Guid(InGuid) , Name(Param.Name) , LastModifiedTimestamp(UE::Dataflow::FTimestamp::Invalid)"
  },
  {
    "label": "FDataflowNode()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_DISABLE_DEPRECATION_WARNINGS ~)",
    "insertText": "FDataflowNode()"
  },
  {
    "label": "ClearInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearInputs()"
  },
  {
    "label": "ClearOutputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearOutputs()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FDataflowNode&)",
    "insertText": "operator(const FDataflowNode&)"
  },
  {
    "label": "GetGuid()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetGuid()"
  },
  {
    "label": "GetTimestamp()",
    "kind": "Method",
    "detail": "Function (Name = InName ; } UE::Dataflow::FTimestamp)",
    "insertText": "GetTimestamp()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "StaticType()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetType()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetPinToolTip()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPinToolTip(const FName& PropertyName, const UE::Dataflow::FPin::EDirection Direction = UE::Dataflow::FPin::EDirection::NONE)"
  },
  {
    "label": "GetPinDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPinDisplayName(const FName& PropertyName, const UE::Dataflow::FPin::EDirection Direction = UE::Dataflow::FPin::EDirection::NONE)"
  },
  {
    "label": "GetPinMetaData()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetPinMetaData(const FName& PropertyName, const UE::Dataflow::FPin::EDirection Direction = UE::Dataflow::FPin::EDirection::NONE)"
  },
  {
    "label": "GetRenderParameters()",
    "kind": "Method",
    "detail": "Function (TArray<UE::Dataflow::FRenderingParameter>)",
    "insertText": "GetRenderParameters()"
  },
  {
    "label": "AddPin()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS const UE::Dataflow::FPin DeprecatedAddPin =)",
    "insertText": "AddPin()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS)",
    "insertText": "if(DeprecatedAddPin == UE::Dataflow::FPin::InvalidPin)"
  },
  {
    "label": "CanAddPin()",
    "kind": "Method",
    "detail": "Function (} return { DeprecatedAddPin } ; } bool)",
    "insertText": "CanAddPin()"
  },
  {
    "label": "GetPinToRemove()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return)",
    "insertText": "GetPinToRemove()"
  },
  {
    "label": "GetPinsToRemove()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } TArray<UE::Dataflow::FPin>)",
    "insertText": "GetPinsToRemove()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS)",
    "insertText": "if(DeprecatedRemovePin == UE::Dataflow::FPin::InvalidPin)"
  },
  {
    "label": "OnPinRemoved()",
    "kind": "Method",
    "detail": "Function (} return { DeprecatedRemovePin } ; } void)",
    "insertText": "OnPinRemoved(const UE::Dataflow::FPin& Pin)"
  },
  {
    "label": "CanRemovePin()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanRemovePin()"
  },
  {
    "label": "OutputSupportsType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OutputSupportsType(FName Name, FName Type)"
  },
  {
    "label": "AddInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInput(FDataflowInput* InPtr)"
  },
  {
    "label": "GetNumInputs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumInputs()"
  },
  {
    "label": "GetInputs()",
    "kind": "Method",
    "detail": "Function (TArray<FDataflowInput*>)",
    "insertText": "GetInputs()"
  },
  {
    "label": "HasHideableInputs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasHideableInputs()"
  },
  {
    "label": "HasHiddenInputs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasHiddenInputs()"
  },
  {
    "label": "FindInput()",
    "kind": "Method",
    "detail": "Function (FDataflowInput*)",
    "insertText": "FindInput(FName Name)"
  },
  {
    "label": "FindInput()",
    "kind": "Method",
    "detail": "Function (FDataflowInput*)",
    "insertText": "FindInput(const UE::Dataflow::FConnectionKey& Key)"
  },
  {
    "label": "FindInput()",
    "kind": "Method",
    "detail": "Function (FDataflowInput*)",
    "insertText": "FindInput(const UE::Dataflow::FConnectionReference& Reference)"
  },
  {
    "label": "FindInput()",
    "kind": "Method",
    "detail": "Function (const FDataflowInput*)",
    "insertText": "FindInput(const FGuid& InGuid)"
  },
  {
    "label": "AddOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOutput(FDataflowOutput* InPtr)"
  },
  {
    "label": "NumOutputs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumOutputs()"
  },
  {
    "label": "GetOutputs()",
    "kind": "Method",
    "detail": "Function (TArray<FDataflowOutput*>)",
    "insertText": "GetOutputs()"
  },
  {
    "label": "HasHideableOutputs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasHideableOutputs()"
  },
  {
    "label": "HasHiddenOutputs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasHiddenOutputs()"
  },
  {
    "label": "FindOutput()",
    "kind": "Method",
    "detail": "Function (FDataflowOutput*)",
    "insertText": "FindOutput(FName Name)"
  },
  {
    "label": "FindOutput()",
    "kind": "Method",
    "detail": "Function (FDataflowOutput*)",
    "insertText": "FindOutput(uint32 GuidHash)"
  },
  {
    "label": "FindOutput()",
    "kind": "Method",
    "detail": "Function (FDataflowOutput*)",
    "insertText": "FindOutput(const UE::Dataflow::FConnectionKey& Key)"
  },
  {
    "label": "FindOutput()",
    "kind": "Method",
    "detail": "Function (FDataflowOutput*)",
    "insertText": "FindOutput(const UE::Dataflow::FConnectionReference& Reference)"
  },
  {
    "label": "FindOutput()",
    "kind": "Method",
    "detail": "Function (const FDataflowOutput*)",
    "insertText": "FindOutput(const FGuid& InGuid)"
  },
  {
    "label": "GetPropertyOffset()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPropertyOffset(const FName& PropertyFullName)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (const FName DataflowInput ; const FName DataflowOutput ; const FName DataflowPassthrough ; const FName DataflowIntrinsic ; const FLinearColor DefaultNodeTitleColor ; const FLinearColor DefaultNodeBodyTintColor ; void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "RedirectSerializedInput()",
    "kind": "Method",
    "detail": "Function (} FDataflowInput*)",
    "insertText": "RedirectSerializedInput(const FName& MissingInputName)"
  },
  {
    "label": "NewStructOnScope()",
    "kind": "Method",
    "detail": "Function (} FStructOnScope*)",
    "insertText": "NewStructOnScope()"
  },
  {
    "label": "RegisterInputConnection()",
    "kind": "Method",
    "detail": "Function (template<T> FDataflowInput&)",
    "insertText": "RegisterInputConnection(const UE::Dataflow::TConnectionReference<T>& Reference, const FName& PropertyName = NAME_None)"
  },
  {
    "label": "RegisterInputConnectionInternal()",
    "kind": "Method",
    "detail": "Function (FDataflowInput& Input =)",
    "insertText": "RegisterInputConnectionInternal(Reference, PropertyName)"
  },
  {
    "label": "SetTypePolicy()",
    "kind": "Method",
    "detail": "Function (Input .)",
    "insertText": "SetTypePolicy(T::FPolicyType::GetInterface())"
  },
  {
    "label": "RegisterInputConnection()",
    "kind": "Method",
    "detail": "Function (} return Input ; } template<T> FDataflowInput&)",
    "insertText": "RegisterInputConnection(const T* Reference, const FName& PropertyName = NAME_None)"
  },
  {
    "label": "RegisterOutputConnection()",
    "kind": "Method",
    "detail": "Function (} template<T> FDataflowOutput&)",
    "insertText": "RegisterOutputConnection(const UE::Dataflow::TConnectionReference<T>& Reference, const UE::Dataflow::TConnectionReference<T>& Passthrough = UE::Dataflow::TConnectionReference<T>(nullptr), const FName& PropertyName = NAME_None)"
  },
  {
    "label": "RegisterOutputConnectionInternal()",
    "kind": "Method",
    "detail": "Function (FDataflowOutput& Output =)",
    "insertText": "RegisterOutputConnectionInternal(Reference, PropertyName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Passthrough.Reference != nullptr)"
  },
  {
    "label": "SetPassthroughInput()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "SetPassthroughInput(Passthrough)"
  },
  {
    "label": "RegisterOutputConnection()",
    "kind": "Method",
    "detail": "Function (} return Output ; } template<T> FDataflowOutput&)",
    "insertText": "RegisterOutputConnection(const T* Reference, const T* Passthrough = nullptr, const FName& PropertyName = NAME_None)"
  },
  {
    "label": "RegisterInputArrayConnection()",
    "kind": "Method",
    "detail": "Function (} template<T> FDataflowInput&)",
    "insertText": "RegisterInputArrayConnection(const UE::Dataflow::TConnectionReference<T>& Reference, const FName& ElementPropertyName = NAME_None, const FName& ArrayPropertyName = NAME_None)"
  },
  {
    "label": "RegisterInputArrayConnectionInternal()",
    "kind": "Method",
    "detail": "Function (FDataflowInput& Input =)",
    "insertText": "RegisterInputArrayConnectionInternal(Reference, ElementPropertyName, ArrayPropertyName)"
  },
  {
    "label": "FindOrRegisterInputArrayConnection()",
    "kind": "Method",
    "detail": "Function (} return Input ; } template<T> FDataflowInput&)",
    "insertText": "FindOrRegisterInputArrayConnection(const UE::Dataflow::TConnectionReference<T>& Reference, const FName& ElementPropertyName = NAME_None, const FName& ArrayPropertyName = NAME_None)"
  },
  {
    "label": "UnregisterInputConnection()",
    "kind": "Method",
    "detail": "Function (} return Input ; } void)",
    "insertText": "UnregisterInputConnection(const UE::Dataflow::FConnectionReference& Reference)"
  },
  {
    "label": "UnregisterInputConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterInputConnection(GetKeyFromReference(Reference))"
  },
  {
    "label": "UnregisterInputConnection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterInputConnection(const UE::Dataflow::FConnectionKey& Key)"
  },
  {
    "label": "UnregisterPinConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPinConnection(const UE::Dataflow::FPin& Pin)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate(UE::Dataflow::FContext& Context, const FDataflowOutput*)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} template<class T,= std::enable_if_t<! std::is_base_of_v<FDataflowAnyType,T>>> const T&)",
    "insertText": "GetValue(UE::Dataflow::FContext& Context, const UE::Dataflow::TConnectionReference<T>& Reference)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} template<TAnyType,= std::enable_if_t<std::is_base_of_v<FDataflowAnyType,TAnyType>>> TAnyType::FStorageType)",
    "insertText": "GetValue(UE::Dataflow::FContext& Context, const UE::Dataflow::TConnectionReference<TAnyType>& Reference)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} template<class T,= std::enable_if_t<! std::is_base_of_v<FDataflowAnyType,T>>> const T&)",
    "insertText": "GetValue(UE::Dataflow::FContext& Context, const T* Reference)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} template<TAnyType,= std::enable_if_t<std::is_base_of_v<FDataflowAnyType,TAnyType>>> TAnyType::FStorageType)",
    "insertText": "GetValue(UE::Dataflow::FContext& Context, const TAnyType* Reference)"
  },
  {
    "label": "GetValueParallel()",
    "kind": "Method",
    "detail": "Function (} template<class T> TFuture<const T&>)",
    "insertText": "GetValueParallel(UE::Dataflow::FContext& Context, const UE::Dataflow::TConnectionReference<T>& Reference)"
  },
  {
    "label": "GetValueParallel()",
    "kind": "Method",
    "detail": "Function (} template<class T> TFuture<const T&>)",
    "insertText": "GetValueParallel(UE::Dataflow::FContext& Context, const T* Reference)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} template<class T> const T&)",
    "insertText": "GetValue(UE::Dataflow::FContext& Context, const UE::Dataflow::TConnectionReference<T>& Reference, const T& Default)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} template<class T> const T&)",
    "insertText": "GetValue(UE::Dataflow::FContext& Context, const T* Reference, const T& Default)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} template<class T,= std::enable_if_t<! std::is_base_of_v<FDataflowAnyType,T>>> void)",
    "insertText": "SetValue(UE::Dataflow::FContext& Context, T&& Value, const typename TDecay<T>::Type* Reference)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Output -> template SetValue<)",
    "insertText": "T(Forward<T>(Value), Context)"
  },
  {
    "label": "checkfSlow()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "checkfSlow(false, TEXT(\"This output could not be found within this node, check this has been properly registered in the node constructor\"))"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} } template<TAnyType,= std::enable_if_t<std::is_base_of_v<FDataflowAnyType,TAnyType>>> void)",
    "insertText": "SetValue(UE::Dataflow::FContext& Context, const typename TAnyType::FStorageType& Value, const TAnyType* Reference)"
  },
  {
    "label": "TAnyType()",
    "kind": "Method",
    "detail": "Function (Output -> template SetValueFromAnyType<)",
    "insertText": "TAnyType(Value, Context)"
  },
  {
    "label": "ForwardInput()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ForwardInput(UE::Dataflow::FContext& Context, const UE::Dataflow::FConnectionReference& InputReference, const UE::Dataflow::FConnectionReference& Reference)"
  },
  {
    "label": "SafeForwardInput()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "SafeForwardInput(UE::Dataflow::FContext& Context, const UE::Dataflow::FConnectionReference& InputReference, const T* Reference)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_base_of_v<FDataflowAnyType, T>)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(Context, static_cast<const T*>(InputReference.Reference)->Value, Reference)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "SetValue(Context, *static_cast<const T*>(InputReference.Reference), Reference)"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsConnected(const UE::Dataflow::FConnectionReference& Reference)"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "IsConnected(const T* Reference)"
  },
  {
    "label": "PauseInvalidations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PauseInvalidations()"
  },
  {
    "label": "ResumeInvalidations()",
    "kind": "Method",
    "detail": "Function (bPauseInvalidations = true ; PausedModifiedTimestamp = UE::Dataflow::FTimestamp::Invalid ; } } void)",
    "insertText": "ResumeInvalidations()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (bPauseInvalidations = false ;)",
    "insertText": "Invalidate(PausedModifiedTimestamp)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Invalidate(const UE::Dataflow::FTimestamp& ModifiedTimestamp = UE::Dataflow::FTimestamp::Current())"
  },
  {
    "label": "OnInvalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInvalidate()"
  },
  {
    "label": "ValidateConnections()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValidateConnections()"
  },
  {
    "label": "ValidateProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateProperties()"
  },
  {
    "label": "HasValidConnections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidConnections()"
  },
  {
    "label": "AsType()",
    "kind": "Method",
    "detail": "Function (} template<class T> const T*)",
    "insertText": "AsType()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; })",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnNodeInvalidated, FDataflowNode*)"
  },
  {
    "label": "GetOnNodeInvalidatedDelegate()",
    "kind": "Method",
    "detail": "Function (FOnNodeInvalidated&)",
    "insertText": "GetOnNodeInvalidatedDelegate()"
  },
  {
    "label": "NotifyConnectionTypeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyConnectionTypeChanged(FDataflowConnection* Connection)"
  },
  {
    "label": "OnInputTypeChanged()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "OnInputTypeChanged(const FDataflowInput* Input)"
  },
  {
    "label": "SetInputConcreteType()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "SetInputConcreteType(const UE::Dataflow::FConnectionReference& InputReference)"
  },
  {
    "label": "SetOutputConcreteType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetOutputConcreteType(const UE::Dataflow::FConnectionReference& OutputReference, FName NewType)"
  },
  {
    "label": "SetOutputConcreteType()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "SetOutputConcreteType(const UE::Dataflow::FConnectionReference& OutputReference)"
  },
  {
    "label": "SetAllConnectionConcreteType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetAllConnectionConcreteType(FName NewType)"
  },
  {
    "label": "RegisterInputConnectionInternal()",
    "kind": "Method",
    "detail": "Function (FDataflowInput&)",
    "insertText": "RegisterInputConnectionInternal(const UE::Dataflow::FConnectionReference& Reference, const FName& PropertyName = NAME_None)"
  },
  {
    "label": "RegisterOutputConnectionInternal()",
    "kind": "Method",
    "detail": "Function (FDataflowOutput&)",
    "insertText": "RegisterOutputConnectionInternal(const UE::Dataflow::FConnectionReference& Reference, const FName& PropertyName = NAME_None)"
  },
  {
    "label": "RegisterInputArrayConnectionInternal()",
    "kind": "Method",
    "detail": "Function (FDataflowInput&)",
    "insertText": "RegisterInputArrayConnectionInternal(const UE::Dataflow::FConnectionReference& Reference, const FName& ElementPropertyName = NAME_None, const FName& ArrayPropertyName = NAME_None)"
  },
  {
    "label": "InitConnectionParametersFromPropertyReference()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitConnectionParametersFromPropertyReference(const FStructOnScope& StructOnScope, const void* PropertyRef, const FName& PropertyName, UE::Dataflow::FConnectionParameters& OutParams)"
  },
  {
    "label": "GetPropertyFullNameString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPropertyFullNameString(const TConstArrayView<const FProperty*>& PropertyChain, int32 ContainerIndex = INDEX_NONE)"
  },
  {
    "label": "GetPropertyFullName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPropertyFullName(const TArray<const FProperty*>& PropertyChain, int32 ContainerIndex = INDEX_NONE)"
  },
  {
    "label": "GetPropertyDisplayNameText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPropertyDisplayNameText(const TArray<const FProperty*>& PropertyChain, int32 ContainerIndex = INDEX_NONE)"
  },
  {
    "label": "StripContainerIndexFromPropertyFullName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "StripContainerIndexFromPropertyFullName(const FString& PropertyFullName)"
  },
  {
    "label": "GetPropertyOffset()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPropertyOffset(const TArray<const FProperty*>& PropertyChain)"
  },
  {
    "label": "GetConnectionOffsetFromReference()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetConnectionOffsetFromReference(const void* Reference)"
  },
  {
    "label": "GetKeyFromReference()",
    "kind": "Method",
    "detail": "Function (UE::Dataflow::FConnectionKey)",
    "insertText": "GetKeyFromReference(const UE::Dataflow::FConnectionReference& Reference)"
  },
  {
    "label": "FindProperty()",
    "kind": "Method",
    "detail": "Function (const FProperty*)",
    "insertText": "FindProperty(const UStruct* Struct, const void* Property, const FName& PropertyName, TArray<const FProperty*>* OutPropertyChain = nullptr)"
  },
  {
    "label": "FindPropertyChecked()",
    "kind": "Method",
    "detail": "Function (const FProperty&)",
    "insertText": "FindPropertyChecked(const UStruct* Struct, const void* Property, const FName& PropertyName, TArray<const FProperty*>* OutPropertyChain = nullptr)"
  },
  {
    "label": "FindProperty()",
    "kind": "Method",
    "detail": "Function (const FProperty*)",
    "insertText": "FindProperty(const UStruct* Struct, const FName& PropertyFullName, TArray<const FProperty*>* OutPropertyChain = nullptr)"
  },
  {
    "label": "GetRenderParametersImpl()",
    "kind": "Method",
    "detail": "Function (TArray<UE::Dataflow::FRenderingParameter>)",
    "insertText": "GetRenderParametersImpl()"
  },
  {
    "label": "FDataflowNodePauseInvalidationScope()",
    "kind": "Method",
    "detail": "Function (} bool bHasValidConnections = true ; TMap<UE::Dataflow::FConnectionKey,FDataflowInput*> ExpandedInputs ; TMap<uint32,const FArrayProperty*> InputArrayProperties ; protected : bool bPauseInvalidations = false ; UE::Dataflow::FTimestamp PausedModifiedTimestamp = UE::Dataflow::FTimestamp::Invalid ; FOnNodeInvalidated OnNodeInvalidatedDelegate ; } ; namespace UE::Dataflow { class FDataflowNodePauseInvalidationScope { public :)",
    "insertText": "FDataflowNodePauseInvalidationScope(FDataflowNode* InNode) :Node(InNode)"
  },
  {
    "label": "FDataflowNodePauseInvalidationScope()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FDataflowNodePauseInvalidationScope()"
  },
  {
    "label": "FDataflowNodePauseInvalidationScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDataflowNodePauseInvalidationScope(const FDataflowNodePauseInvalidationScope&)"
  },
  {
    "label": "FDataflowNodePauseInvalidationScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDataflowNodePauseInvalidationScope(FDataflowNodePauseInvalidationScope&&)"
  },
  {
    "label": "DATAFLOW_NODE_REGISTER_CREATION_FACTORY()",
    "kind": "Method",
    "detail": "Function (private : FDataflowNode* Node ; } ; # define)",
    "insertText": "DATAFLOW_NODE_REGISTER_CREATION_FACTORY(A) \\ ::UE::Dataflow::FNodeFactory::RegisterNodeFromType<A>()"
  },
  {
    "label": "DATAFLOW_NODE_RENDER_TYPE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DATAFLOW_NODE_RENDER_TYPE(A, B, ...) \\ virtual TArray<::UE::Dataflow::FRenderingParameter> GetRenderParametersImpl()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (\\ TArray<::UE::Dataflow::FRenderingParameter> Array ; \\ Array .)",
    "insertText": "Add({ A, B, {__VA_ARGS__,} })"
  },
  {
    "label": "DATAFLOW_NODE_DEFINE_INTERNAL()",
    "kind": "Method",
    "detail": "Function (\\ return Array ; } # define)",
    "insertText": "DATAFLOW_NODE_DEFINE_INTERNAL(TYPE, DISPLAY_NAME, CATEGORY, TAGS) \\ public: \\ static FName StaticType()"
  },
  {
    "label": "FStructOnScope()",
    "kind": "Method",
    "detail": "Function (\\ return new)",
    "insertText": "FStructOnScope(TYPE::StaticStruct(), (uint8*)this)"
  },
  {
    "label": "SerializeInternal()",
    "kind": "Method",
    "detail": "Function (} \\ void)",
    "insertText": "SerializeInternal(FArchive& Ar)"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (\\ UScriptStruct* const Struct =)",
    "insertText": "StaticStruct()"
  },
  {
    "label": "SerializeTaggedProperties()",
    "kind": "Method",
    "detail": "Function (\\ Struct ->)",
    "insertText": "SerializeTaggedProperties(Ar, (uint8*)this, \\ Struct, nullptr)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "PostSerialize(Ar)"
  },
  {
    "label": "GetCategory()",
    "kind": "Method",
    "detail": "Function (} \\ FName)",
    "insertText": "GetCategory()"
  },
  {
    "label": "GetTags()",
    "kind": "Method",
    "detail": "Function (} \\ FString)",
    "insertText": "GetTags()"
  },
  {
    "label": "TypedScriptStruct()",
    "kind": "Method",
    "detail": "Function (} \\ const UScriptStruct*)",
    "insertText": "TypedScriptStruct()"
  },
  {
    "label": "TYPE()",
    "kind": "Method",
    "detail": "Function (} \\)",
    "insertText": "TYPE()"
  },
  {
    "label": "DATAFLOW_NODE_REGISTER_CREATION_FACTORY_NODE_COLORS_BY_CATEGORY()",
    "kind": "Method",
    "detail": "Function (} \\ private : # define)",
    "insertText": "DATAFLOW_NODE_REGISTER_CREATION_FACTORY_NODE_COLORS_BY_CATEGORY(A, C1, C2)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (\\::UE::Dataflow::)",
    "insertText": "Get().RegisterNodeColors(A, {C1, C2})"
  }
]