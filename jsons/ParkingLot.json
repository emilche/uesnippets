[
  {
    "label": "FWaitState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaitState"
  },
  {
    "label": "FWakeState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWakeState"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / MonotonicTime . h \" # include \" Templates / Function . h \" # define namespace UE::ParkingLot { struct FWaitState final { bool bDidWait = false ; bool bDidWake = false ; uint64 WakeToken = 0 ; } ; struct FWakeState final { bool bDidWake = false ; bool bHasWaitingThreads = false ; } ; namespace Private { FWaitState)",
    "insertText": "Wait(const void* Address, const TFunctionRef<bool()>& CanWait, const TFunctionRef<void()>& BeforeWait)"
  },
  {
    "label": "WaitFor()",
    "kind": "Method",
    "detail": "Function (FWaitState)",
    "insertText": "WaitFor(const void* Address, const TFunctionRef<bool()>& CanWait, const TFunctionRef<void()>& BeforeWait, FMonotonicTimeSpan WaitTime)"
  },
  {
    "label": "WaitUntil()",
    "kind": "Method",
    "detail": "Function (FWaitState)",
    "insertText": "WaitUntil(const void* Address, const TFunctionRef<bool()>& CanWait, const TFunctionRef<void()>& BeforeWait, FMonotonicTimePoint WaitTime)"
  },
  {
    "label": "WakeOne()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeOne(const void* Address, const TFunctionRef<uint64(FWakeState)>& OnWakeState)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} template<CanWaitType,BeforeWaitType> FWaitState)",
    "insertText": "Wait(const void* Address, CanWaitType&& CanWait, BeforeWaitType&& BeforeWait)"
  },
  {
    "label": "WaitFor()",
    "kind": "Method",
    "detail": "Function (} template<CanWaitType,BeforeWaitType> FWaitState)",
    "insertText": "WaitFor(const void* Address, CanWaitType&& CanWait, BeforeWaitType&& BeforeWait, FMonotonicTimeSpan WaitTime)"
  },
  {
    "label": "WaitUntil()",
    "kind": "Method",
    "detail": "Function (} template<CanWaitType,BeforeWaitType> FWaitState)",
    "insertText": "WaitUntil(const void* Address, CanWaitType&& CanWait, BeforeWaitType&& BeforeWait, FMonotonicTimePoint WaitTime)"
  },
  {
    "label": "WakeOne()",
    "kind": "Method",
    "detail": "Function (} template<OnWakeStateType> void)",
    "insertText": "WakeOne(const void* Address, OnWakeStateType&& OnWakeState)"
  },
  {
    "label": "WakeOne()",
    "kind": "Method",
    "detail": "Function (} FWakeState)",
    "insertText": "WakeOne(const void* Address)"
  },
  {
    "label": "WakeMultiple()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "WakeMultiple(const void* Address, uint32 WakeCount)"
  },
  {
    "label": "WakeAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeAll(const void* Address)"
  }
]