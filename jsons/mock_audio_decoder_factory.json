[
  {
    "label": "MockAudioDecoderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockAudioDecoderFactory"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_MOCK_AUDIO_DECODER_FACTORY_H_ # define TEST_MOCK_AUDIO_DECODER_FACTORY_H_ # include<memory> # include<vector> # include \" api / audio_codecs / audio_decoder_factory . h \" # include \" api / audio_codecs / builtin_audio_decoder_factory . h \" # include \" api / make_ref_counted . h \" # include \" api / scoped_refptr . h \" # include \" test / gmock . h \" namespace webrtc { class MockAudioDecoderFactory : public AudioDecoderFactory { public :)",
    "insertText": "MOCK_METHOD(std::vector<AudioCodecSpec>, GetSupportedDecoders, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, IsSupportedDecoder, (const SdpAudioFormat&), (override))"
  },
  {
    "label": "MakeAudioDecoder()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<AudioDecoder>)",
    "insertText": "MakeAudioDecoder(const SdpAudioFormat& format, absl::optional<AudioCodecPairId> codec_pair_id)"
  },
  {
    "label": "MakeAudioDecoderMock()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<AudioDecoder> return_value ;)",
    "insertText": "MakeAudioDecoderMock(format, codec_pair_id, &return_value)"
  },
  {
    "label": "CreateUnusedFactory()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<webrtc::MockAudioDecoderFactory>)",
    "insertText": "CreateUnusedFactory()"
  },
  {
    "label": "MockAudioDecoderFactory()",
    "kind": "Method",
    "detail": "Function (using::testing::_ ; using::testing::AnyNumber ; using::testing::Return ; rtc::scoped_refptr<webrtc::MockAudioDecoderFactory> factory = rtc::make_ref_counted<)",
    "insertText": "MockAudioDecoderFactory()"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*factory.get(), GetSupportedDecoders()) .WillByDefault(Return(std::vector<webrtc::AudioCodecSpec>()))"
  },
  {
    "label": "EXPECT_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_CALL(*factory.get(), GetSupportedDecoders()).Times(AnyNumber())"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*factory, IsSupportedDecoder(_)).WillByDefault(Return(false))"
  },
  {
    "label": "EXPECT_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_CALL(*factory, IsSupportedDecoder(_)).Times(AnyNumber())"
  },
  {
    "label": "EXPECT_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_CALL(*factory.get(), MakeAudioDecoderMock(_, _, _)).Times(0)"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*factory.get(), MakeAudioDecoderMock(_, _, _)) .WillByDefault(SetArgPointee<2>(nullptr))"
  },
  {
    "label": "EXPECT_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_CALL(*factory.get(), MakeAudioDecoderMock(_, _, _)) .Times(AnyNumber())"
  }
]