[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNeuralProfileStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNeuralProfileStruct"
  },
  {
    "label": "UNeuralProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNeuralProfile"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "INeuralProfileManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INeuralProfileManager"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Misc / Guid . h \" # include \" NeuralProfile . generated . h \" # define MAX_NEURAL_PROFILE_COUNT 6 4)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Type32)",
    "insertText": "UMETA(DisplayName = \"32bit\"), Type16 UMETA(DisplayName = \"16bit\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (OneByOne)",
    "insertText": "UMETA(DisplayName = \"1x1\"), TwoByTwo UMETA(DisplayName = \"2x2\"), FourByFour UMETA(DisplayName = \"4x4\"), EightByEight UMETA(DisplayName = \"8x8\"), Auto UMETA(DisplayName = \"Auto\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Ignore)",
    "insertText": "UMETA(DisplayName = \"Ignore\"), Feathering UMETA(DisplayName = \"Feathering\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (NNERuntimeORTDml)",
    "insertText": "UMETA(DisplayName = \"NNERuntimeORTDml\"), NNERuntimeRDGHlsl UMETA(DisplayName = \"NNERuntimeRDGHlsl\"), MAX UMETA(Hidden)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(Category = \"Common\", EditAnywhere, BlueprintReadOnly, meta=(DisplayName=\"Input Format\", editcondition = \"false\", EditConditionHides))"
  },
  {
    "label": "FNeuralProfileStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNeuralProfileStruct()"
  },
  {
    "label": "FIntVector4()",
    "kind": "Method",
    "detail": "Function (InputFormat = ENeuralProfileFormat::Type32 ; OutputFormat = ENeuralProfileFormat::Type32 ; RuntimeType = ENeuralProfileRuntimeType::NNERuntimeORTDml ; NNEModelData = nullptr ; InputDimension =)",
    "insertText": "FIntVector4(0)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (TileSize = ENeuralModelTileType::OneByOne ; BatchSizeOverride = 1 ; TileOverlap =)",
    "insertText": "FIntPoint(0, 0)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (TileOverlapResolveType = ETileOverlapResolveType::Ignore ; } void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(autoexpandcategories = NeuralProfile, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY(Category = UNeuralProfile, EditAnywhere, meta = (ShowOnlyInnerProperties))"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "AddOrUpdateProfile()",
    "kind": "Method",
    "detail": "Function (} ; namespace NeuralProfile { int32)",
    "insertText": "AddOrUpdateProfile(const UNeuralProfile* InProfile, const FGuid& InGuid, const FNeuralProfileStruct InSettings)"
  },
  {
    "label": "GetProfileSetting()",
    "kind": "Method",
    "detail": "Function (FNeuralProfileStruct)",
    "insertText": "GetProfileSetting(int32 AllocationId)"
  },
  {
    "label": "GetNeuralProfileId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNeuralProfileId(const UNeuralProfile* In)"
  },
  {
    "label": "INeuralProfileManager()",
    "kind": "Method",
    "detail": "Function (class INeuralProfileManager { public : ~)",
    "insertText": "INeuralProfileManager()"
  },
  {
    "label": "UpdateModel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateModel(int32 AllocationId, UObject* NNEModelData, FString RuntimeName)"
  },
  {
    "label": "RemoveModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveModel(int32 AllocationId)"
  },
  {
    "label": "UpdateTileType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTileType(int32 AllocationId, ENeuralModelTileType ModelTileSize)"
  },
  {
    "label": "UpdateBatchSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateBatchSize(int32 AllocationId, int32 BatchSize)"
  },
  {
    "label": "UpdateTileOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTileOverlap(int32 AllocationId, FIntPoint TileOverlap)"
  },
  {
    "label": "UpdateTileOverlapResolveType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTileOverlapResolveType(int32 AllocationId, ETileOverlapResolveType TileOverlapResolveType)"
  },
  {
    "label": "GetInputDimension()",
    "kind": "Method",
    "detail": "Function (FIntVector4)",
    "insertText": "GetInputDimension(UObject* NNEModelData, FString RuntimeName)"
  },
  {
    "label": "GetOutputDimension()",
    "kind": "Method",
    "detail": "Function (FIntVector4)",
    "insertText": "GetOutputDimension(UObject* NNEModelData, FString RuntimeName)"
  }
]