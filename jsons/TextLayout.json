[
  {
    "label": "IBreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBreakIterator"
  },
  {
    "label": "ILayoutBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILayoutBlock"
  },
  {
    "label": "ILineHighlighter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILineHighlighter"
  },
  {
    "label": "IRunRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRunRenderer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FTextLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextLocation"
  },
  {
    "label": "FTextSelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextSelection"
  },
  {
    "label": "FTextLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextLayout"
  },
  {
    "label": "FBlockDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlockDefinition"
  },
  {
    "label": "FBreakCandidate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBreakCandidate"
  },
  {
    "label": "FRunModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunModel"
  },
  {
    "label": "ELineModelDirtyState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ELineModelDirtyState"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "FLineModel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLineModel"
  },
  {
    "label": "FLineViewHighlight",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLineViewHighlight"
  },
  {
    "label": "FLineView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLineView"
  },
  {
    "label": "FTextOffsetLocations",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextOffsetLocations"
  },
  {
    "label": "FOffsetEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOffsetEntry"
  },
  {
    "label": "FNewLineData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNewLineData"
  },
  {
    "label": "ETextLayoutDirtyState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ETextLayoutDirtyState"
  },
  {
    "label": "FTextLayoutSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextLayoutSize"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Misc / Attribute . h \" # include \" Layout / Margin . h \" # include \" Framework / Text / TextRunRenderer . h \" # include \" Framework / Text / TextLineHighlight . h \" # include \" Framework / Text / IRun . h \" # include \" Styling / SlateTypes . h \" # include \" TextLayout . generated . h \" # define TEXT_LAYOUT_DEBUG 0 class IBreakIterator ; class ILayoutBlock ; class ILineHighlighter ; class IRunRenderer ; enum class ETextHitPoint : uint8 ; enum class ETextShapingMethod : uint8 ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "GetDefaultTextFlowDirection()",
    "kind": "Method",
    "detail": "Function (Auto = 0,LeftToRight,RightToLeft,Culture,} ; ETextFlowDirection)",
    "insertText": "GetDefaultTextFlowDirection()"
  },
  {
    "label": "FTextLocation()",
    "kind": "Method",
    "detail": "Function (struct FTextLocation { public :)",
    "insertText": "FTextLocation(const int32 InLineIndex = 0, const int32 InOffset = 0 ) : LineIndex( InLineIndex ) , Offset( InOffset)"
  },
  {
    "label": "FTextLocation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTextLocation(const FTextLocation& InLocation, const int32 InOffset ) : LineIndex( InLocation.GetLineIndex() ) , Offset(FMath::Max(InLocation.GetOffset() + InOffset, 0))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FTextLocation& Other)"
  },
  {
    "label": "GetLineIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetLineIndex()"
  },
  {
    "label": "FTextSelection()",
    "kind": "Method",
    "detail": "Function (} private : int32 LineIndex ; int32 Offset ; } ; class FTextSelection { public : FTextLocation LocationA ; FTextLocation LocationB ; public :)",
    "insertText": "FTextSelection() : LocationA(INDEX_NONE) , LocationB(INDEX_NONE)"
  },
  {
    "label": "FTextSelection()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTextSelection(const FTextLocation& InLocationA, const FTextLocation& InLocationB) : LocationA(InLocationA) , LocationB(InLocationB)"
  },
  {
    "label": "GetBeginning()",
    "kind": "Method",
    "detail": "Function (} const FTextLocation&)",
    "insertText": "GetBeginning()"
  },
  {
    "label": "GetRun()",
    "kind": "Method",
    "detail": "Function (public : TSharedRef<IRun>)",
    "insertText": "GetRun()"
  },
  {
    "label": "BeginLayout()",
    "kind": "Method",
    "detail": "Function (; void)",
    "insertText": "BeginLayout()"
  },
  {
    "label": "EndLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndLayout()"
  },
  {
    "label": "GetTextRange()",
    "kind": "Method",
    "detail": "Function (FTextRange)",
    "insertText": "GetTextRange()"
  },
  {
    "label": "SetTextRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextRange(const FTextRange& Value)"
  },
  {
    "label": "GetBaseLine()",
    "kind": "Method",
    "detail": "Function (int16)",
    "insertText": "GetBaseLine(float Scale)"
  },
  {
    "label": "GetMaxHeight()",
    "kind": "Method",
    "detail": "Function (int16)",
    "insertText": "GetMaxHeight(float Scale)"
  },
  {
    "label": "Measure()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Measure(int32 BeginIndex, int32 EndIndex, float Scale, const FRunTextContext& InTextContext)"
  },
  {
    "label": "GetKerning()",
    "kind": "Method",
    "detail": "Function (int8)",
    "insertText": "GetKerning(int32 CurrentIndex, float Scale, const FRunTextContext& InTextContext)"
  },
  {
    "label": "BinarySearchForBeginIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BinarySearchForBeginIndex(const TArray< FTextRange >& Ranges, int32 BeginIndex)"
  },
  {
    "label": "BinarySearchForEndIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BinarySearchForEndIndex(const TArray< FTextRange >& Ranges, int32 RangeBeginIndex, int32 EndIndex)"
  },
  {
    "label": "CreateBlock()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ILayoutBlock>)",
    "insertText": "CreateBlock(const FBlockDefinition& BlockDefine, float InScale, const FLayoutBlockTextContext& InTextContext)"
  },
  {
    "label": "ClearCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCache()"
  },
  {
    "label": "AppendTextTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTextTo(FString& Text)"
  },
  {
    "label": "AppendTextTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTextTo(FString& Text, const FTextRange& Range)"
  },
  {
    "label": "FLineModel()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<IRun> Run ; TArray<FTextRange> MeasuredRanges ; TArray<FVector2D> MeasuredRangeSizes ; } ; struct ELineModelDirtyState { typedef uint8 Flags ; enum Enum { None = 0,WrappingInformation = 1<<0,TextBaseDirection = 1<<1,ShapingCache = 1<<2,All = WrappingInformation | TextBaseDirection | ShapingCache,} ; } ; struct FLineModel { public :)",
    "insertText": "FLineModel(const TSharedRef< FString >& InText)"
  },
  {
    "label": "TextLocationToOffset()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FString> Text ; FShapedTextCacheRef ShapedTextCache ; TextBiDi::ETextDirection TextBaseDirection ; TArray<FRunModel> Runs ; TArray<FBreakCandidate> BreakCandidates ; TArray<FTextRunRenderer> RunRenderers ; TArray<FTextLineHighlight> LineHighlights ; ELineModelDirtyState::Flags DirtyFlags ; } ; struct FLineViewHighlight { float OffsetX ; float Width ; TSharedPtr<ILineHighlighter> Highlighter ; } ; struct FLineView { TArray<TSharedRef<ILayoutBlock>> Blocks ; TArray<FLineViewHighlight> UnderlayHighlights ; TArray<FLineViewHighlight> OverlayHighlights ; FVector2D Offset ; FVector2D Size ; float TextHeight ; float JustificationWidth ; FTextRange Range ; TextBiDi::ETextDirection TextBaseDirection ; int32 ModelIndex ; } ; struct FTextOffsetLocations { class FTextLayout ; public : int32)",
    "insertText": "TextLocationToOffset(const FTextLocation& InLocation)"
  },
  {
    "label": "OffsetToTextLocation()",
    "kind": "Method",
    "detail": "Function (FTextLocation)",
    "insertText": "OffsetToTextLocation(const int32 InOffset)"
  },
  {
    "label": "GetTextLength()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTextLength()"
  },
  {
    "label": "FOffsetEntry()",
    "kind": "Method",
    "detail": "Function (private : struct FOffsetEntry {)",
    "insertText": "FOffsetEntry(const int32 InFlatStringIndex, const int32 InDocumentLineLength) : FlatStringIndex(InFlatStringIndex) , DocumentLineLength(InDocumentLineLength)"
  },
  {
    "label": "FTextLayout()",
    "kind": "Method",
    "detail": "Function (} int32 FlatStringIndex ; int32 DocumentLineLength ; } ; TArray<FOffsetEntry> OffsetData ; } ; public : ~)",
    "insertText": "FTextLayout()"
  },
  {
    "label": "GetViewSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetViewSize()"
  },
  {
    "label": "GetDrawSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetDrawSize()"
  },
  {
    "label": "GetWrappedSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetWrappedSize()"
  },
  {
    "label": "GetWrappedDrawSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetWrappedDrawSize()"
  },
  {
    "label": "GetVisualJustification()",
    "kind": "Method",
    "detail": "Function (ETextJustify::Type)",
    "insertText": "GetVisualJustification()"
  },
  {
    "label": "SetTextOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextOverflowPolicy(const TOptional<ETextOverflowPolicy> InTextOverflowPolicy)"
  },
  {
    "label": "SetVisibleRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibleRegion(const FVector2D& InViewSize, const FVector2D& InScrollOffset)"
  },
  {
    "label": "SetLineBreakIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLineBreakIterator(TSharedPtr<IBreakIterator> InLineBreakIterator)"
  },
  {
    "label": "SetDebugSourceInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDebugSourceInfo(const TAttribute<FString>& InDebugSourceInfo)"
  },
  {
    "label": "ClearLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLines()"
  },
  {
    "label": "FNewLineData()",
    "kind": "Method",
    "detail": "Function (struct FNewLineData {)",
    "insertText": "FNewLineData(TSharedRef<FString> InText, TArray<TSharedRef<IRun>> InRuns) : Text(MoveTemp(InText)) , Runs(MoveTemp(InRuns))"
  },
  {
    "label": "AddLine()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FString> Text ; TArray<TSharedRef<IRun>> Runs ; } ; void)",
    "insertText": "AddLine(const FNewLineData& NewLine)"
  },
  {
    "label": "AddLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLines(const TArray<FNewLineData>& NewLines)"
  },
  {
    "label": "ClearRunRenderers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRunRenderers()"
  },
  {
    "label": "SetRunRenderers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRunRenderers(const TArray< FTextRunRenderer >& Renderers)"
  },
  {
    "label": "AddRunRenderer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRunRenderer(const FTextRunRenderer& Renderer)"
  },
  {
    "label": "RemoveRunRenderer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRunRenderer(const FTextRunRenderer& Renderer)"
  },
  {
    "label": "ClearLineHighlights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLineHighlights()"
  },
  {
    "label": "SetLineHighlights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLineHighlights(const TArray< FTextLineHighlight >& Highlights)"
  },
  {
    "label": "AddLineHighlight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLineHighlight(const FTextLineHighlight& Highlight)"
  },
  {
    "label": "RemoveLineHighlight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLineHighlight(const FTextLineHighlight& Highlight)"
  },
  {
    "label": "UpdateIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateIfNeeded()"
  },
  {
    "label": "UpdateLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLayout()"
  },
  {
    "label": "UpdateHighlights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHighlights()"
  },
  {
    "label": "DirtyRunLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyRunLayout(const TSharedRef<const IRun>& Run)"
  },
  {
    "label": "DirtyLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyLayout()"
  },
  {
    "label": "IsLayoutDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLayoutDirty()"
  },
  {
    "label": "GetLineViewIndexForTextLocation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLineViewIndexForTextLocation(const TArray< FTextLayout::FLineView >& LineViews, const FTextLocation& Location, const bool bPerformInclusiveBoundsCheck)"
  },
  {
    "label": "GetTextLocationAt()",
    "kind": "Method",
    "detail": "Function (FTextLocation)",
    "insertText": "GetTextLocationAt(const FVector2D& Relative, ETextHitPoint* const OutHitPoint = nullptr)"
  },
  {
    "label": "GetTextLocationAt()",
    "kind": "Method",
    "detail": "Function (FTextLocation)",
    "insertText": "GetTextLocationAt(const FLineView& LineView, const FVector2D& Relative, ETextHitPoint* const OutHitPoint = nullptr)"
  },
  {
    "label": "GetLocationAt()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetLocationAt(const FTextLocation& Location, const bool bPerformInclusiveBoundsCheck)"
  },
  {
    "label": "SplitLineAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitLineAt(const FTextLocation& Location)"
  },
  {
    "label": "JoinLineWithNextLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "JoinLineWithNextLine(int32 LineIndex)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertAt(const FTextLocation& Location, TCHAR Character)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertAt(const FTextLocation& Location, const FString& Text)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertAt(const FTextLocation& Location, TSharedRef<IRun> InRun, const bool bAlwaysKeepRightRun = false)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveAt(const FTextLocation& Location, int32 Count = 1)"
  },
  {
    "label": "RemoveLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveLine(int32 LineIndex)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetLineCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLineCount()"
  },
  {
    "label": "GetAsText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAsText(FString& DisplayText, FTextOffsetLocations* const OutTextOffsetLocations = nullptr)"
  },
  {
    "label": "GetAsText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAsText(FText& DisplayText, FTextOffsetLocations* const OutTextOffsetLocations = nullptr)"
  },
  {
    "label": "GetTextOffsetLocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextOffsetLocations(FTextOffsetLocations& OutTextOffsetLocations)"
  },
  {
    "label": "GetSelectionAsText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectionAsText(FString& DisplayText, const FTextSelection& Selection)"
  },
  {
    "label": "GetGraphemeAt()",
    "kind": "Method",
    "detail": "Function (FTextSelection)",
    "insertText": "GetGraphemeAt(const FTextLocation& Location)"
  },
  {
    "label": "GetWordAt()",
    "kind": "Method",
    "detail": "Function (FTextSelection)",
    "insertText": "GetWordAt(const FTextLocation& Location)"
  },
  {
    "label": "CalculateTextDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateTextDirection()"
  },
  {
    "label": "CalculateLineTextDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateLineTextDirection(FLineModel& LineModel)"
  },
  {
    "label": "CalculateLineViewVisualJustification()",
    "kind": "Method",
    "detail": "Function (ETextJustify::Type)",
    "insertText": "CalculateLineViewVisualJustification(const FLineView& LineView)"
  },
  {
    "label": "CreateWrappingCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateWrappingCache()"
  },
  {
    "label": "CreateLineWrappingCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateLineWrappingCache(FLineModel& LineModel)"
  },
  {
    "label": "FlushTextShapingCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushTextShapingCache()"
  },
  {
    "label": "FlushLineTextShapingCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushLineTextShapingCache(FLineModel& LineModel)"
  },
  {
    "label": "DirtyAllLineModels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyAllLineModels(const ELineModelDirtyState::Flags InDirtyFlags)"
  },
  {
    "label": "ClearView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearView()"
  },
  {
    "label": "TransformLineText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformLineText(FLineModel& LineModel)"
  },
  {
    "label": "BeginLineLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginLineLayout(FLineModel& LineModel)"
  },
  {
    "label": "EndLineLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndLineLayout(FLineModel& LineModel)"
  },
  {
    "label": "CreateDefaultTextRun()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IRun>)",
    "insertText": "CreateDefaultTextRun(const TSharedRef<FString>& NewText, const FTextRange& NewRange)"
  },
  {
    "label": "GetWrappingDrawWidth()",
    "kind": "Method",
    "detail": "Function (private : float)",
    "insertText": "GetWrappingDrawWidth()"
  },
  {
    "label": "FlowLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlowLayout()"
  },
  {
    "label": "MarginLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarginLayout()"
  },
  {
    "label": "FlowLineLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlowLineLayout(const int32 LineModelIndex, const float WrappingDrawWidth, TArray<TSharedRef<ILayoutBlock>>& SoftLine)"
  },
  {
    "label": "FlowHighlights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlowHighlights()"
  },
  {
    "label": "JustifyLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JustifyLayout()"
  },
  {
    "label": "CreateLineViewBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateLineViewBlocks(int32 LineModelIndex, const int32 StopIndex, const float WrappedLineWidth, const TOptional<float>& JustificationWidth, int32& OutRunIndex, int32& OutRendererIndex, int32& OutPreviousBlockEnd, TArray< TSharedRef< ILayoutBlock > >& OutSoftLine)"
  },
  {
    "label": "CreateBreakCandidate()",
    "kind": "Method",
    "detail": "Function (FBreakCandidate)",
    "insertText": "CreateBreakCandidate(int32& OutRunIndex, FLineModel& Line, int32 PreviousBreak, int32 CurrentBreak)"
  },
  {
    "label": "GetAsTextAndOffsets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAsTextAndOffsets(FString* const OutDisplayText, FTextOffsetLocations* const OutTextOffsetLocations)"
  },
  {
    "label": "FTextLayoutSize()",
    "kind": "Method",
    "detail": "Function (protected : struct ETextLayoutDirtyState { typedef uint8 Flags ; enum Enum { None = 0,Layout = 1<<0,Highlights = 1<<1,All = Layout | Highlights,} ; } ; struct FTextLayoutSize {)",
    "insertText": "FTextLayoutSize() : DrawWidth(0.0f) , WrappedWidth(0.0f) , Height(0.0f)"
  }
]