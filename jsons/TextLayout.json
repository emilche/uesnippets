[
  {
    "label": "IBreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBreakIterator"
  },
  {
    "label": "ILayoutBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILayoutBlock"
  },
  {
    "label": "ILineHighlighter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILineHighlighter"
  },
  {
    "label": "IRunRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRunRenderer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTextLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextLocation"
  },
  {
    "label": "FTextSelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextSelection"
  },
  {
    "label": "FTextLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextLayout"
  },
  {
    "label": "FBlockDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlockDefinition"
  },
  {
    "label": "FBreakCandidate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBreakCandidate"
  },
  {
    "label": "FRunModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunModel"
  },
  {
    "label": "ELineModelDirtyState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ELineModelDirtyState"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "FLineModel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLineModel"
  },
  {
    "label": "FLineViewHighlight",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLineViewHighlight"
  },
  {
    "label": "FLineView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLineView"
  },
  {
    "label": "FTextOffsetLocations",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextOffsetLocations"
  },
  {
    "label": "FTextLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextLayout"
  },
  {
    "label": "FOffsetEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOffsetEntry"
  },
  {
    "label": "FNewLineData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNewLineData"
  },
  {
    "label": "ETextLayoutDirtyState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ETextLayoutDirtyState"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "FTextLayoutSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextLayoutSize"
  },
  {
    "label": "GetDefaultTextFlowDirection()",
    "kind": "Method",
    "detail": "Function (ETextFlowDirection)",
    "insertText": "GetDefaultTextFlowDirection()"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "HashCombine(InSubject.LineIndex, InSubject.Offset)"
  },
  {
    "label": "FRunModel()",
    "kind": "Method",
    "detail": "Function (SLATE_API)",
    "insertText": "FRunModel( const TSharedRef< IRun >& InRun)"
  },
  {
    "label": "BeginLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginLayout()"
  },
  {
    "label": "EndLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndLayout()"
  },
  {
    "label": "SetTextRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextRange( const FTextRange& Value )"
  },
  {
    "label": "Measure()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Measure( int32 BeginIndex, int32 EndIndex, float Scale, const FRunTextContext& InTextContext )"
  },
  {
    "label": "GetKerning()",
    "kind": "Method",
    "detail": "Function (int8)",
    "insertText": "GetKerning( int32 CurrentIndex, float Scale, const FRunTextContext& InTextContext )"
  },
  {
    "label": "BinarySearchForBeginIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BinarySearchForBeginIndex( const TArray< FTextRange >& Ranges, int32 BeginIndex )"
  },
  {
    "label": "BinarySearchForEndIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BinarySearchForEndIndex( const TArray< FTextRange >& Ranges, int32 RangeBeginIndex, int32 EndIndex )"
  },
  {
    "label": "ClearCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCache()"
  },
  {
    "label": "FLineModel()",
    "kind": "Method",
    "detail": "Function (SLATE_API)",
    "insertText": "FLineModel( const TSharedRef< FString >& InText )"
  },
  {
    "label": "SetWrappingWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrappingWidth( float Value )"
  },
  {
    "label": "SetWrappingPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrappingPolicy(ETextWrappingPolicy Value)"
  },
  {
    "label": "SetLineHeightPercentage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLineHeightPercentage( float Value )"
  },
  {
    "label": "SetApplyLineHeightToBottomLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetApplyLineHeightToBottomLine( bool Value )"
  },
  {
    "label": "SetJustification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJustification( ETextJustify::Type Value )"
  },
  {
    "label": "SetTransformPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformPolicy(ETextTransformPolicy Value)"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScale( float Value )"
  },
  {
    "label": "SetTextShapingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextShapingMethod( const ETextShapingMethod InTextShapingMethod )"
  },
  {
    "label": "SetTextFlowDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextFlowDirection( const ETextFlowDirection InTextFlowDirection )"
  },
  {
    "label": "SetTextOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextOverflowPolicy(const TOptional<ETextOverflowPolicy> InTextOverflowPolicy)"
  },
  {
    "label": "SetMargin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMargin( const FMargin& InMargin )"
  },
  {
    "label": "SetVisibleRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibleRegion( const FVector2D& InViewSize, const FVector2D& InScrollOffset )"
  },
  {
    "label": "SetLineBreakIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLineBreakIterator( TSharedPtr<IBreakIterator> InLineBreakIterator )"
  },
  {
    "label": "SetDebugSourceInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDebugSourceInfo(const TAttribute<FString>& InDebugSourceInfo)"
  },
  {
    "label": "ClearLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLines()"
  },
  {
    "label": "AddLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLine( const FNewLineData& NewLine )"
  },
  {
    "label": "AddLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLines( const TArray<FNewLineData>& NewLines )"
  },
  {
    "label": "ClearRunRenderers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRunRenderers()"
  },
  {
    "label": "SetRunRenderers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRunRenderers( const TArray< FTextRunRenderer >& Renderers )"
  },
  {
    "label": "AddRunRenderer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRunRenderer( const FTextRunRenderer& Renderer )"
  },
  {
    "label": "RemoveRunRenderer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRunRenderer( const FTextRunRenderer& Renderer )"
  },
  {
    "label": "ClearLineHighlights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLineHighlights()"
  },
  {
    "label": "SetLineHighlights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLineHighlights( const TArray< FTextLineHighlight >& Highlights )"
  },
  {
    "label": "AddLineHighlight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLineHighlight( const FTextLineHighlight& Highlight )"
  },
  {
    "label": "RemoveLineHighlight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLineHighlight( const FTextLineHighlight& Highlight )"
  },
  {
    "label": "UpdateIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateIfNeeded()"
  },
  {
    "label": "UpdateLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLayout()"
  },
  {
    "label": "UpdateHighlights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHighlights()"
  },
  {
    "label": "DirtyRunLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyRunLayout(const TSharedRef<const IRun>& Run)"
  },
  {
    "label": "DirtyLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyLayout()"
  },
  {
    "label": "SplitLineAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitLineAt(const FTextLocation& Location)"
  },
  {
    "label": "JoinLineWithNextLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "JoinLineWithNextLine(int32 LineIndex)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertAt(const FTextLocation& Location, TCHAR Character)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertAt(const FTextLocation& Location, const FString& Text)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertAt(const FTextLocation& Location, TSharedRef<IRun> InRun, const bool bAlwaysKeepRightRun = false)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveAt(const FTextLocation& Location, int32 Count = 1)"
  },
  {
    "label": "RemoveLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveLine(int32 LineIndex)"
  },
  {
    "label": "FTextLayout()",
    "kind": "Method",
    "detail": "Function (SLATE_API)",
    "insertText": "FTextLayout()"
  },
  {
    "label": "CalculateTextDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateTextDirection()"
  },
  {
    "label": "CreateWrappingCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateWrappingCache()"
  },
  {
    "label": "CreateLineWrappingCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateLineWrappingCache(FLineModel& LineModel)"
  },
  {
    "label": "FlushTextShapingCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushTextShapingCache()"
  },
  {
    "label": "FlushLineTextShapingCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushLineTextShapingCache(FLineModel& LineModel)"
  },
  {
    "label": "DirtyAllLineModels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyAllLineModels(const ELineModelDirtyState::Flags InDirtyFlags)"
  },
  {
    "label": "ClearView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearView()"
  },
  {
    "label": "BeginLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginLayout()"
  },
  {
    "label": "BeginLineLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginLineLayout(FLineModel& LineModel)"
  },
  {
    "label": "EndLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndLayout()"
  },
  {
    "label": "EndLineLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndLineLayout(FLineModel& LineModel)"
  },
  {
    "label": "FlowLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlowLayout()"
  },
  {
    "label": "MarginLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarginLayout()"
  },
  {
    "label": "FlowLineLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlowLineLayout(const int32 LineModelIndex, const float WrappingDrawWidth, TArray<TSharedRef<ILayoutBlock>>& SoftLine)"
  },
  {
    "label": "FlowHighlights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlowHighlights()"
  },
  {
    "label": "JustifyLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JustifyLayout()"
  },
  {
    "label": "CreateLineViewBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateLineViewBlocks( int32 LineModelIndex, const int32 StopIndex, const float WrappedLineWidth, const TOptional<float>& JustificationWidth, int32& OutRunIndex, int32& OutRendererIndex, int32& OutPreviousBlockEnd, TArray< TSharedRef< ILayoutBlock > >& OutSoftLine )"
  },
  {
    "label": "CreateBreakCandidate()",
    "kind": "Method",
    "detail": "Function (FBreakCandidate)",
    "insertText": "CreateBreakCandidate( int32& OutRunIndex, FLineModel& Line, int32 PreviousBreak, int32 CurrentBreak )"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FVector2D(DrawWidth, Height)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FVector2D(WrappedWidth, Height)"
  }
]