[
  {
    "label": "AudioDeviceBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDeviceBuffer"
  },
  {
    "label": "FineAudioBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FineAudioBuffer"
  },
  {
    "label": "CoreAudioBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CoreAudioBase"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "as_integer()",
    "kind": "Method",
    "detail": "Function (typename std::underlying_type<T>::type)",
    "insertText": "as_integer(T const value)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} typedef std::function<)",
    "insertText": "bool(uint64_t device_frequency)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef std::function<)",
    "insertText": "bool(ErrorType error)"
  },
  {
    "label": "ThreadRun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadRun()"
  },
  {
    "label": "CoreAudioBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CoreAudioBase(const CoreAudioBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CoreAudioBase&)",
    "insertText": "operator(const CoreAudioBase&)"
  },
  {
    "label": "CoreAudioBase()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "CoreAudioBase(Direction direction, bool automatic_restart, OnDataCallback data_callback, OnErrorCallback error_callback)"
  },
  {
    "label": "CoreAudioBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CoreAudioBase()"
  },
  {
    "label": "GetDeviceID()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetDeviceID(int index)"
  },
  {
    "label": "SetDevice()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetDevice(int index)"
  },
  {
    "label": "DeviceName()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DeviceName(int index, std::string* name, std::string* guid)"
  },
  {
    "label": "SwitchDeviceIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SwitchDeviceIfNeeded()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Stop()"
  },
  {
    "label": "IsVolumeControlAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVolumeControlAvailable(bool* available)"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Restart()"
  },
  {
    "label": "direction()",
    "kind": "Method",
    "detail": "Function (Direction)",
    "insertText": "direction()"
  },
  {
    "label": "NumberOfActiveDevices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumberOfActiveDevices()"
  },
  {
    "label": "NumberOfEnumeratedDevices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumberOfEnumeratedDevices()"
  },
  {
    "label": "IsInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInput()"
  },
  {
    "label": "IsOutput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOutput()"
  },
  {
    "label": "IsDefaultDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefaultDevice(int index)"
  },
  {
    "label": "IsDefaultCommunicationsDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefaultCommunicationsDevice(int index)"
  },
  {
    "label": "IsDefaultDeviceId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefaultDeviceId(absl::string_view device_id)"
  },
  {
    "label": "IsDefaultCommunicationsDeviceId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefaultCommunicationsDeviceId(absl::string_view device_id)"
  },
  {
    "label": "GetDataFlow()",
    "kind": "Method",
    "detail": "Function (EDataFlow)",
    "insertText": "GetDataFlow()"
  },
  {
    "label": "IsRestarting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRestarting()"
  },
  {
    "label": "TimeSinceStart()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "TimeSinceStart()"
  },
  {
    "label": "StopThread()",
    "kind": "Method",
    "detail": "Function (SequenceChecker thread_checker_ ; SequenceChecker thread_checker_audio_ ; AudioDeviceBuffer* audio_device_buffer_ = nullptr ; bool initialized_ = false ; WAVEFORMATEXTENSIBLE format_ = { } ; uint32_t endpoint_buffer_size_frames_ = 0 ; Microsoft::WRL::ComPtr<IAudioClock> audio_clock_ ; Microsoft::WRL::ComPtr<IAudioClient> audio_client_ ; bool is_active_ = false ; int64_t num_data_callbacks_ = 0 ; int latency_ms_ = 0 ; absl::optional<uint32_t> sample_rate_ ; private : const Direction direction_ ; const bool automatic_restart_ ; const OnDataCallback on_data_callback_ ; const OnErrorCallback on_error_callback_ ; ScopedHandle audio_samples_event_ ; ScopedHandle stop_event_ ; ScopedHandle restart_event_ ; int64_t start_time_ = 0 ; std::string device_id_ ; int device_index_ = - 1 ; LONG ref_count_ = 1 ; std::atomic<bool> is_restarting_ ; rtc::PlatformThread audio_thread_ ; Microsoft::WRL::ComPtr<IAudioSessionControl> audio_session_control_ ; void)",
    "insertText": "StopThread()"
  },
  {
    "label": "GetAudioSessionState()",
    "kind": "Method",
    "detail": "Function (AudioSessionState)",
    "insertText": "GetAudioSessionState()"
  },
  {
    "label": "HandleRestartEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRestartEvent()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (ULONG __stdcall)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (ULONG __stdcall)",
    "insertText": "Release()"
  },
  {
    "label": "QueryInterface()",
    "kind": "Method",
    "detail": "Function (HRESULT __stdcall)",
    "insertText": "QueryInterface(REFIID iid, void** object)"
  },
  {
    "label": "OnStateChanged()",
    "kind": "Method",
    "detail": "Function (HRESULT __stdcall)",
    "insertText": "OnStateChanged(AudioSessionState new_state)"
  },
  {
    "label": "OnSessionDisconnected()",
    "kind": "Method",
    "detail": "Function (HRESULT __stdcall)",
    "insertText": "OnSessionDisconnected(AudioSessionDisconnectReason disconnect_reason)"
  },
  {
    "label": "OnDisplayNameChanged()",
    "kind": "Method",
    "detail": "Function (HRESULT __stdcall)",
    "insertText": "OnDisplayNameChanged(LPCWSTR new_display_name, LPCGUID event_context)"
  },
  {
    "label": "OnIconPathChanged()",
    "kind": "Method",
    "detail": "Function (HRESULT __stdcall)",
    "insertText": "OnIconPathChanged(LPCWSTR new_icon_path, LPCGUID event_context)"
  },
  {
    "label": "OnSimpleVolumeChanged()",
    "kind": "Method",
    "detail": "Function (HRESULT __stdcall)",
    "insertText": "OnSimpleVolumeChanged(float new_simple_volume, BOOL new_mute, LPCGUID event_context)"
  },
  {
    "label": "OnChannelVolumeChanged()",
    "kind": "Method",
    "detail": "Function (HRESULT __stdcall)",
    "insertText": "OnChannelVolumeChanged(DWORD channel_count, float new_channel_volumes[], DWORD changed_channel, LPCGUID event_context)"
  },
  {
    "label": "OnGroupingParamChanged()",
    "kind": "Method",
    "detail": "Function (HRESULT __stdcall)",
    "insertText": "OnGroupingParamChanged(LPCGUID new_grouping_param, LPCGUID event_context)"
  }
]