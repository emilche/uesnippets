[
  {
    "label": "BufferQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BufferQueue"
  },
  {
    "label": "BufferQueue()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_BUFFER_QUEUE_H_ # define RTC_BASE_BUFFER_QUEUE_H_ # include<stddef . h> # include<deque> # include<vector> # include \" api / sequence_checker . h \" # include \" rtc_base / buffer . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / thread_annotations . h \" namespace rtc { class BufferQueue final { public :)",
    "insertText": "BufferQueue(size_t capacity, size_t default_size)"
  },
  {
    "label": "BufferQueue()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BufferQueue()"
  },
  {
    "label": "BufferQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BufferQueue(const BufferQueue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BufferQueue&)",
    "insertText": "operator(const BufferQueue&)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "size()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "ReadFront()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFront(void* data, size_t bytes, size_t* bytes_read)"
  },
  {
    "label": "WriteBack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteBack(const void* data, size_t bytes, size_t* bytes_written)"
  },
  {
    "label": "is_writable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_writable()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(&sequence_checker_)"
  },
  {
    "label": "is_readable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_readable()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} private : RTC_NO_UNIQUE_ADDRESS webrtc::SequenceChecker sequence_checker_ ; const size_t capacity_ ; const size_t default_size_ ; std::deque<Buffer*> queue_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  }
]