[
  {
    "label": "SpanAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SpanAllocator"
  },
  {
    "label": "Span",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Span"
  },
  {
    "label": "SpacesAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SpacesAllocator"
  },
  {
    "label": "Span()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / Support / Global . h \" # include<map> # include<set> namespace hlsl { template<T_index,T_element> class SpanAllocator { public : struct Span {)",
    "insertText": "Span(const T_element *element, T_index start, T_index end) : element(element), start(start), end(end)"
  },
  {
    "label": "DXASSERT_NOMSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DXASSERT_NOMSG(!(end < start))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const T_element* element ; T_index start,end ; bool)",
    "insertText": "operator(const Span &other)"
  },
  {
    "label": "DXASSERT_NOMSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DXASSERT_NOMSG(Min <= Max)"
  },
  {
    "label": "GetMin()",
    "kind": "Method",
    "detail": "Function (} T_index)",
    "insertText": "GetMin()"
  },
  {
    "label": "GetUnbounded()",
    "kind": "Method",
    "detail": "Function (m_Unbounded = element ; } const T_element*)",
    "insertText": "GetUnbounded()"
  },
  {
    "label": "DXASSERT_NOMSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DXASSERT_NOMSG(size)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (T_index end =)",
    "insertText": "pos(size - 1)"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (auto next = m_Spans .)",
    "insertText": "lower_bound(Span(nullptr, pos, end))"
  },
  {
    "label": "FindForUnbounded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindForUnbounded(T_index &pos, T_index align = 1)"
  },
  {
    "label": "UpdatePos()",
    "kind": "Method",
    "detail": "Function (pos = m_Min ; return)",
    "insertText": "UpdatePos(pos, 1, align)"
  },
  {
    "label": "crbegin()",
    "kind": "Method",
    "detail": "Function (end)",
    "insertText": "crbegin()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Allocate(const T_element *element, T_index size, T_index &pos, T_index align = 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pos = m_FirstFree ;)",
    "insertText": "if(!UpdatePos(pos, size, align))"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (auto result = m_Spans .)",
    "insertText": "emplace(element, pos, pos + (size - 1))"
  },
  {
    "label": "AdvanceFirstFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceFirstFree(result.first)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pos = m_Min ;)",
    "insertText": "if(!UpdatePos(pos, 1, align))"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} else { auto it = m_Spans .)",
    "insertText": "end()"
  },
  {
    "label": "DXASSERT_NOMSG()",
    "kind": "Method",
    "detail": "Function (- - it ;)",
    "insertText": "DXASSERT_NOMSG(it != m_Spans.end())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pos = it -> end ;)",
    "insertText": "if(!IncPos(pos, 1, 1, align))"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} const T_element* conflict =)",
    "insertText": "Insert(element, pos, m_Max)"
  },
  {
    "label": "DXASSERT_NOMSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DXASSERT_NOMSG(!conflict)"
  },
  {
    "label": "DXASSERT_NOMSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DXASSERT_NOMSG(m_Min <= start && start <= end && end <= m_Max)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (auto result = m_Spans .)",
    "insertText": "emplace(element, start, end)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (start =)",
    "insertText": "min(result.first->start, start)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (end =)",
    "insertText": "max(result.first->end, end)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (m_Spans .)",
    "insertText": "erase(result.first)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} } private : bool)",
    "insertText": "Find(T_index size, typename SpanSet::const_iterator it, T_index &pos, T_index align = 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pos = it -> end ;)",
    "insertText": "if(!IncPos(pos, 1, size, align))"
  },
  {
    "label": "AdvanceFirstFree()",
    "kind": "Method",
    "detail": "Function (} return true ; } void)",
    "insertText": "AdvanceFirstFree(typename SpanSet::const_iterator it)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_AllocationFull = true ; break ; } m_FirstFree = it -> end + 1 ; + + it ;)",
    "insertText": "if(it != m_Spans.end() && m_FirstFree < it->start)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (} } } T_index)",
    "insertText": "Align(T_index pos, T_index align)"
  },
  {
    "label": "rem()",
    "kind": "Method",
    "detail": "Function (T_index)",
    "insertText": "rem(1 < align)"
  },
  {
    "label": "IncPos()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IncPos(T_index &pos, T_index inc = 1, T_index size = 1, T_index align = 1)"
  },
  {
    "label": "DXASSERT_NOMSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DXASSERT_NOMSG(inc > 0)"
  },
  {
    "label": "UpdatePos()",
    "kind": "Method",
    "detail": "Function (pos + = inc ; return)",
    "insertText": "UpdatePos(pos, size, align)"
  },
  {
    "label": "UpdatePos()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UpdatePos(T_index &pos, T_index size = 1, T_index align = 1)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (T_index aligned =)",
    "insertText": "Align(pos, align)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (pos = aligned ; return true ; } private : SpanSet m_Spans ; T_index m_Min,m_Max,m_FirstFree ; const T_element* m_Unbounded ; bool m_AllocationFull ; } ; template<T_index,T_element> class SpacesAllocator { public : typedef SpanAllocator<T_index,T_element> Allocator ; typedef std::map<T_index,Allocator> AllocatorMap ; Allocator&)",
    "insertText": "Get(T_index SpaceID)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = m_Allocators .)",
    "insertText": "find(SpaceID)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (auto result = m_Allocators .)",
    "insertText": "emplace(SpaceID, Allocator(0, UINT_MAX))"
  },
  {
    "label": "DXASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DXASSERT(result.second, \"Failed to allocate new Allocator\")"
  }
]