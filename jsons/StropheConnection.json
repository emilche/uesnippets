[
  {
    "label": "FStropheStanza",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStropheStanza"
  },
  {
    "label": "FXmppConnectionStrophe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXmppConnectionStrophe"
  },
  {
    "label": "FXmppUserJid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXmppUserJid"
  },
  {
    "label": "_xmpp_conn_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_xmpp_conn_t"
  },
  {
    "label": "_xmpp_ctx_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_xmpp_ctx_t"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStropheConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStropheConnection"
  },
  {
    "label": "FStropheConnection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" XmppStrophe / StropheContext . h \" # if WITH_XMPP_STROPHE class FStropheStanza ; class FXmppConnectionStrophe ; class FXmppUserJid ; typedef struct _xmpp_conn_t xmpp_conn_t ; typedef struct _xmpp_ctx_t xmpp_ctx_t ; enum class EStropheConnectionState : uint8 { Unknown,Disconnected,Connecting,Connected } ; enum class EStropheConnectionEvent : uint8 { Connect,RawConnect,Disconnect,Fail } ; class FStropheConnection { public :)",
    "insertText": "FStropheConnection(FStropheContext& InContext)"
  },
  {
    "label": "FStropheConnection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStropheConnection()"
  },
  {
    "label": "FStropheConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStropheConnection(const FStropheConnection& Other)"
  },
  {
    "label": "FStropheConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStropheConnection(FStropheConnection&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FStropheConnection&)",
    "insertText": "operator(const FStropheConnection& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FStropheConnection&)",
    "insertText": "operator(FStropheConnection&& Other)"
  },
  {
    "label": "GetTimeout()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTimeout()"
  },
  {
    "label": "GetPingInterval()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPingInterval()"
  },
  {
    "label": "SetKeepAlive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeepAlive(int32 Timeout, int32 PingInterval)"
  },
  {
    "label": "GetUserId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetUserId()"
  },
  {
    "label": "SetUserId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserId(const FXmppUserJid& NewUserJid)"
  },
  {
    "label": "SetUserId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserId(const FString& NewUserId)"
  },
  {
    "label": "GetPassword()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPassword()"
  },
  {
    "label": "SetPassword()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPassword(const FString& NewPassword)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Connect(const FString& Domain, uint16 Port, FXmppConnectionStrophe& ConnectionManager)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect()"
  },
  {
    "label": "SendStanza()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendStanza(const FStropheStanza& Stanza)"
  },
  {
    "label": "XmppThreadTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XmppThreadTick()"
  },
  {
    "label": "RegisterStropheHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterStropheHandler(FXmppConnectionStrophe& ConnectionManager)"
  },
  {
    "label": "RemoveStropheHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStropheHandler()"
  },
  {
    "label": "GetContextPtr()",
    "kind": "Method",
    "detail": "Function (xmpp_ctx_t*)",
    "insertText": "GetContextPtr()"
  },
  {
    "label": "GetConnectionState()",
    "kind": "Method",
    "detail": "Function (} EStropheConnectionState)",
    "insertText": "GetConnectionState()"
  }
]