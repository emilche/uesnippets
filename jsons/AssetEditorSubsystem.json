[
  {
    "label": "UAssetEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetEditor"
  },
  {
    "label": "UEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdMode"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FAssetEditorRequestOpenAsset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetEditorRequestOpenAsset"
  },
  {
    "label": "FEditorModeTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeTools"
  },
  {
    "label": "IMessageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageContext"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "FToolMenuSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuSection"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IAssetEditorInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetEditorInstance"
  },
  {
    "label": "FTabId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTabId"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "FRegisteredModeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRegisteredModeInfo"
  },
  {
    "label": "UAssetEditorSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetEditorSubsystem"
  },
  {
    "label": "FOpenedEditorTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenedEditorTime"
  },
  {
    "label": "FAssetEditorAnalyticInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetEditorAnalyticInfo"
  },
  {
    "label": "FAssetEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetEntry"
  },
  {
    "label": "GetEditorName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EditorSubsystem . h \" # include \" Toolkits / IToolkit . h \" # include \" Containers / Ticker . h \" # include \" Tools / Modes . h \" # include \" Misc / NamePermissionList . h \" # include \" AssetTypeActivationOpenedMethod . h \" # include \" MRUFavoritesList . h \" # include \" AssetDefinition . h \" # include \" AssetEditorSubsystem . generated . h \" class UAssetEditor ; class UEdMode ; class UObject ; class UClass ; struct FAssetEditorRequestOpenAsset ; class FEditorModeTools ; class IMessageContext ; class UToolMenu ; struct FToolMenuSection ; enum class EAssetEditorCloseReason : uint8 { CloseAllEditorsForAsset,CloseOtherEditors,RemoveAssetFromAllEditors,CloseAllAssetEditors,AssetEditorHostClosed,AssetUnloadingOrInvalid,EditorRefreshRequested,AssetForceDeleted } ; class IAssetEditorInstance { public : FName)",
    "insertText": "GetEditorName()"
  },
  {
    "label": "FocusWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusWindow(UObject* ObjectToFocusOn = nullptr)"
  },
  {
    "label": "CloseWindow()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return)",
    "insertText": "CloseWindow()"
  },
  {
    "label": "IncludeAssetInRestoreOpenAssetsPrompt()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return)",
    "insertText": "IncludeAssetInRestoreOpenAssetsPrompt()"
  },
  {
    "label": "IsPrimaryEditor()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } bool)",
    "insertText": "IsPrimaryEditor()"
  },
  {
    "label": "InvokeTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeTab(const struct FTabId& TabId)"
  },
  {
    "label": "GetLastActivationTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetLastActivationTime()"
  },
  {
    "label": "RemoveEditingAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEditingAsset(UObject* Asset)"
  },
  {
    "label": "GetOpenMethod()",
    "kind": "Method",
    "detail": "Function (EAssetOpenMethod)",
    "insertText": "GetOpenMethod()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UNREALED_API UAssetEditorSubsystem()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FSubsystemCollectionBase& Collection)"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "IsAssetEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetEditable(const UObject* Asset)"
  },
  {
    "label": "OpenEditorForAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenEditorForAsset(const FString& AssetPathName, const EAssetTypeActivationOpenedMethod OpenedMethod = EAssetTypeActivationOpenedMethod::Edit)"
  },
  {
    "label": "OpenEditorForAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenEditorForAsset(const FSoftObjectPath& AssetPath, const EAssetTypeActivationOpenedMethod OpenedMethod = EAssetTypeActivationOpenedMethod::Edit)"
  },
  {
    "label": "OpenEditorForAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenEditorForAsset(UObject* Asset, const EToolkitMode::Type ToolkitMode = EToolkitMode::Standalone, TSharedPtr<IToolkitHost> OpenedFromLevelEditor = TSharedPtr<IToolkitHost>(), const bool bShowProgressWindow = true, EAssetTypeActivationOpenedMethod OpenedMethod = EAssetTypeActivationOpenedMethod::Edit)"
  },
  {
    "label": "OpenEditorForAsset()",
    "kind": "Method",
    "detail": "Function (template<ObjectType> bool)",
    "insertText": "OpenEditorForAsset(TObjectPtr<ObjectType> Asset, const EToolkitMode::Type ToolkitMode = EToolkitMode::Standalone, TSharedPtr<IToolkitHost> OpenedFromLevelEditor = TSharedPtr<IToolkitHost>(), const bool bShowProgressWindow = true)"
  },
  {
    "label": "OpenEditorForAssets_Advanced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenEditorForAssets_Advanced(const TArray<UObject*>& InAssets, const EToolkitMode::Type ToolkitMode = EToolkitMode::Standalone, TSharedPtr<IToolkitHost> OpenedFromLevelEditor = TSharedPtr<IToolkitHost>(), const EAssetTypeActivationOpenedMethod OpenedMethod = EAssetTypeActivationOpenedMethod::Edit)"
  },
  {
    "label": "OpenEditorsForAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenEditorsForAssets(const TArray<FString>& AssetsToOpen, const EAssetTypeActivationOpenedMethod OpenedMethod = EAssetTypeActivationOpenedMethod::Edit)"
  },
  {
    "label": "OpenEditorsForAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenEditorsForAssets(const TArray<FName>& AssetsToOpen, const EAssetTypeActivationOpenedMethod OpenedMethod = EAssetTypeActivationOpenedMethod::Edit)"
  },
  {
    "label": "OpenEditorsForAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenEditorsForAssets(const TArray<FSoftObjectPath>& AssetsToOpen)"
  },
  {
    "label": "CanOpenEditorForAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanOpenEditorForAsset(UObject* Asset, const EAssetTypeActivationOpenedMethod OpenedMethod, FText* OutErrorMsg)"
  },
  {
    "label": "FindEditorForAsset()",
    "kind": "Method",
    "detail": "Function (IAssetEditorInstance*)",
    "insertText": "FindEditorForAsset(UObject* Asset, bool bFocusIfOpen)"
  },
  {
    "label": "FindEditorsForAsset()",
    "kind": "Method",
    "detail": "Function (TArray<IAssetEditorInstance*>)",
    "insertText": "FindEditorsForAsset(UObject* Asset)"
  },
  {
    "label": "FindEditorsForAssetAndSubObjects()",
    "kind": "Method",
    "detail": "Function (TArray<IAssetEditorInstance*>)",
    "insertText": "FindEditorsForAssetAndSubObjects(UObject* Asset)"
  },
  {
    "label": "CloseOtherEditors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseOtherEditors(UObject* Asset, IAssetEditorInstance* OnlyEditor)"
  },
  {
    "label": "RemoveAssetFromAllEditors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAssetFromAllEditors(UObject* Asset)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(UAssetEditorSubsystem, FAssetEditorRequestCloseEvent, UObject*, EAssetEditorCloseReason)"
  },
  {
    "label": "OnAssetEditorRequestClose()",
    "kind": "Method",
    "detail": "Function (FAssetEditorRequestCloseEvent&)",
    "insertText": "OnAssetEditorRequestClose()"
  },
  {
    "label": "NotifyAssetOpened()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAssetOpened(UObject* Asset, IAssetEditorInstance* Instance)"
  },
  {
    "label": "NotifyAssetsOpened()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAssetsOpened(const TArray< UObject* >& Assets, IAssetEditorInstance* Instance)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(UAssetEditorSubsystem, FOnAssetOpenedInEditorEvent, UObject*, IAssetEditorInstance*)"
  },
  {
    "label": "OnAssetOpenedInEditor()",
    "kind": "Method",
    "detail": "Function (FOnAssetOpenedInEditorEvent&)",
    "insertText": "OnAssetOpenedInEditor()"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(UAssetEditorSubsystem, FOnAssetsOpenedInEditorEvent, const TArray<UObject*>&, IAssetEditorInstance*)"
  },
  {
    "label": "OnEditorOpeningPreWidgets()",
    "kind": "Method",
    "detail": "Function (FOnAssetsOpenedInEditorEvent&)",
    "insertText": "OnEditorOpeningPreWidgets()"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(UAssetEditorSubsystem, FOnAssetClosedInEditorEvent, UObject*, IAssetEditorInstance*)"
  },
  {
    "label": "OnAssetClosedInEditor()",
    "kind": "Method",
    "detail": "Function (FOnAssetClosedInEditorEvent&)",
    "insertText": "OnAssetClosedInEditor()"
  },
  {
    "label": "CloseAllAssetEditors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseAllAssetEditors()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(UAssetEditorSubsystem, FAssetEditorRequestOpenEvent, UObject*)"
  },
  {
    "label": "OnAssetEditorRequestedOpen()",
    "kind": "Method",
    "detail": "Function (FAssetEditorRequestOpenEvent&)",
    "insertText": "OnAssetEditorRequestedOpen()"
  },
  {
    "label": "OnAssetEditorOpened()",
    "kind": "Method",
    "detail": "Function (FAssetEditorOpenEvent&)",
    "insertText": "OnAssetEditorOpened()"
  },
  {
    "label": "RegisterUAssetEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterUAssetEditor(UAssetEditor* NewAssetEditor)"
  },
  {
    "label": "UnregisterUAssetEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterUAssetEditor(UAssetEditor* RemovedAssetEditor)"
  },
  {
    "label": "CreateEditorModeWithToolsOwner()",
    "kind": "Method",
    "detail": "Function (UEdMode*)",
    "insertText": "CreateEditorModeWithToolsOwner(FEditorModeID ModeID, FEditorModeTools& Owner)"
  },
  {
    "label": "FindEditorModeInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindEditorModeInfo(const FEditorModeID& InModeID, FEditorModeInfo& OutModeInfo)"
  },
  {
    "label": "GetEditorModeInfoOrderedByPriority()",
    "kind": "Method",
    "detail": "Function (TArray<FEditorModeInfo>)",
    "insertText": "GetEditorModeInfoOrderedByPriority()"
  },
  {
    "label": "OnEditorModesChanged()",
    "kind": "Method",
    "detail": "Function (FRegisteredModesChangedEvent&)",
    "insertText": "OnEditorModesChanged()"
  },
  {
    "label": "OnEditorModeRegistered()",
    "kind": "Method",
    "detail": "Function (FOnModeRegistered&)",
    "insertText": "OnEditorModeRegistered()"
  },
  {
    "label": "OnEditorModeUnregistered()",
    "kind": "Method",
    "detail": "Function (FOnModeUnregistered&)",
    "insertText": "OnEditorModeUnregistered()"
  },
  {
    "label": "GetAllowedEditorModes()",
    "kind": "Method",
    "detail": "Function (FNamePermissionList&)",
    "insertText": "GetAllowedEditorModes()"
  },
  {
    "label": "CreateRecentAssetsMenuForEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRecentAssetsMenuForEditor(const IAssetEditorInstance* InAssetEditorInstance, FToolMenuSection& InSection)"
  },
  {
    "label": "GetRecentlyOpenedAssets()",
    "kind": "Method",
    "detail": "Function (FMainMRUFavoritesList*)",
    "insertText": "GetRecentlyOpenedAssets()"
  },
  {
    "label": "HandleRequestOpenAssetMessage()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "HandleRequestOpenAssetMessage(const FAssetEditorRequestOpenAsset& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleTicker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTicker(float DeltaTime)"
  },
  {
    "label": "SpawnRestorePreviouslyOpenAssetsNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnRestorePreviouslyOpenAssetsNotification(const bool bCleanShutdown, const TArray<FString>& AssetsToOpen)"
  },
  {
    "label": "OnConfirmRestorePreviouslyOpenAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConfirmRestorePreviouslyOpenAssets(TArray<FString> AssetsToOpen)"
  },
  {
    "label": "OnCancelRestorePreviouslyOpenAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCancelRestorePreviouslyOpenAssets()"
  },
  {
    "label": "RegisterLevelEditorMenuExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterLevelEditorMenuExtensions()"
  },
  {
    "label": "CreateRecentAssetsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRecentAssetsMenu(UToolMenu* InMenu, const FName InAssetEditorName = FName())"
  },
  {
    "label": "OnAssetRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetRemoved(const FAssetData& AssetData)"
  },
  {
    "label": "OnAssetRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetRenamed(const FAssetData& AssetData, const FString& AssetOldName)"
  },
  {
    "label": "SaveOpenAssetEditors()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SaveOpenAssetEditors(const bool bOnShutdown)"
  },
  {
    "label": "RestorePreviouslyOpenAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestorePreviouslyOpenAssets()"
  },
  {
    "label": "SetAutoRestoreAndDisableSavingOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoRestoreAndDisableSavingOverride(TOptional<bool> bInAutoRestoreAndDisableSaving)"
  },
  {
    "label": "GetAutoRestoreAndDisableSavingOverride()",
    "kind": "Method",
    "detail": "Function (TOptional<bool>)",
    "insertText": "GetAutoRestoreAndDisableSavingOverride()"
  },
  {
    "label": "SetRecentAssetsFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecentAssetsFilter(const FMainMRUFavoritesList::FDoesMRUFavoritesItemPassFilter& InFilter)"
  },
  {
    "label": "GetAssetBeingOpenedMethod()",
    "kind": "Method",
    "detail": "Function (TOptional<EAssetOpenMethod>)",
    "insertText": "GetAssetBeingOpenedMethod(TObjectPtr<UObject> Asset)"
  },
  {
    "label": "GetAssetsBeingOpenedMethod()",
    "kind": "Method",
    "detail": "Function (TOptional<EAssetOpenMethod>)",
    "insertText": "GetAssetsBeingOpenedMethod(TArray<TObjectPtr<UObject>> Assets)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FReadOnlyAssetFilter, const FString&)"
  },
  {
    "label": "AddReadOnlyAssetFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReadOnlyAssetFilter(const FName& Owner, const FReadOnlyAssetFilter& ReadOnlyAssetFilter)"
  },
  {
    "label": "RemoveReadOnlyAssetFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReadOnlyAssetFilter(const FName& Owner)"
  },
  {
    "label": "HandlePackageReloaded()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandlePackageReloaded(const EPackageReloadPhase InPackageReloadPhase, FPackageReloadedEvent* InPackageReloadedEvent)"
  },
  {
    "label": "OnEditorClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorClose()"
  },
  {
    "label": "RegisterEditorModes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterEditorModes()"
  },
  {
    "label": "UnregisterEditorModes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterEditorModes()"
  },
  {
    "label": "OnSMInstanceElementsEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSMInstanceElementsEnabled()"
  },
  {
    "label": "IsEditorModeAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorModeAllowed(const FName ModeId)"
  },
  {
    "label": "InitializeRecentAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeRecentAssets()"
  },
  {
    "label": "SaveRecentAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveRecentAssets(const bool bOnShutdown = false)"
  },
  {
    "label": "CullRecentAssetEditorsMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CullRecentAssetEditorsMap()"
  },
  {
    "label": "ShouldShowRecentAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowRecentAsset(const FString& AssetName, int32 RecentAssetIndex, const FName& InAssetEditorName)"
  },
  {
    "label": "ShouldShowRecentAssetsMenu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowRecentAssetsMenu(const FName& InAssetEditorName)"
  },
  {
    "label": "FindOrLoadAssetForOpening()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "FindOrLoadAssetForOpening(const FSoftObjectPath& AssetPath)"
  },
  {
    "label": "FAssetEditorAnalyticInfo()",
    "kind": "Method",
    "detail": "Function (private : struct FOpenedEditorTime { FName EditorName ; FDateTime OpenedTime ; } ; struct FAssetEditorAnalyticInfo { FTimespan SumDuration ; int32 NumTimesOpened ;)",
    "insertText": "FAssetEditorAnalyticInfo() : SumDuration(0) , NumTimesOpened(0)"
  },
  {
    "label": "FAssetEntry()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAssetEntry {)",
    "insertText": "FAssetEntry(UObject* InRawPtr) : RawPtr(InRawPtr) , ObjectPtr(InRawPtr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} UObject* RawPtr ; FWeakObjectPtr ObjectPtr ; bool)",
    "insertText": "operator(const FAssetEntry& Other)"
  }
]