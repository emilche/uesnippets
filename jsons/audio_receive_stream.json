[
  {
    "label": "AudioSinkInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioSinkInterface"
  },
  {
    "label": "AudioReceiveStreamInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioReceiveStreamInterface"
  },
  {
    "label": "Stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stats"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "Rtp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rtp"
  },
  {
    "label": "Stats()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_AUDIO_RECEIVE_STREAM_H_ # define CALL_AUDIO_RECEIVE_STREAM_H_ # include<map> # include<memory> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / audio_codecs / audio_decoder_factory . h \" # include \" api / call / transport . h \" # include \" api / crypto / crypto_options . h \" # include \" api / rtp_parameters . h \" # include \" call / receive_stream . h \" # include \" call / rtp_config . h \" namespace webrtc { class AudioSinkInterface ; class AudioReceiveStreamInterface : public MediaReceiveStreamInterface { public : struct Stats {)",
    "insertText": "Stats()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (uint32_t remote_ssrc = 0 ; int64_t payload_bytes_rcvd = 0 ; int64_t header_and_padding_bytes_rcvd = 0 ; uint32_t packets_rcvd = 0 ; uint64_t fec_packets_received = 0 ; uint64_t fec_packets_discarded = 0 ; int32_t packets_lost = 0 ; uint64_t packets_discarded = 0 ; uint32_t nacks_sent = 0 ; std::string codec_name ; absl::optional<int> codec_payload_type ; uint32_t jitter_ms = 0 ; uint32_t jitter_buffer_ms = 0 ; uint32_t jitter_buffer_preferred_ms = 0 ; uint32_t delay_estimate_ms = 0 ; int32_t audio_level = - 1 ; double total_output_energy = 0 . 0 ; uint64_t total_samples_received = 0 ; double total_output_duration = 0 . 0 ; uint64_t concealed_samples = 0 ; uint64_t silent_concealed_samples = 0 ; uint64_t concealment_events = 0 ; double jitter_buffer_delay_seconds = 0 . 0 ; uint64_t jitter_buffer_emitted_count = 0 ; double jitter_buffer_target_delay_seconds = 0 . 0 ; double jitter_buffer_minimum_delay_seconds = 0 . 0 ; uint64_t inserted_samples_for_deceleration = 0 ; uint64_t removed_samples_for_acceleration = 0 ; float expand_rate = 0 . 0 f ; float speech_expand_rate = 0 . 0 f ; float secondary_decoded_rate = 0 . 0 f ; float secondary_discarded_rate = 0 . 0 f ; float accelerate_rate = 0 . 0 f ; float preemptive_expand_rate = 0 . 0 f ; uint64_t delayed_packet_outage_samples = 0 ; int32_t decoding_calls_to_silence_generator = 0 ; int32_t decoding_calls_to_neteq = 0 ; int32_t decoding_normal = 0 ; int32_t decoding_plc = 0 ; int32_t decoding_codec_plc = 0 ; int32_t decoding_cng = 0 ; int32_t decoding_plc_cng = 0 ; int32_t decoding_muted_output = 0 ; int64_t capture_start_ntp_time_ms = 0 ; absl::optional<int64_t> last_packet_received_timestamp_ms ; uint64_t jitter_buffer_flushes = 0 ; double relative_packet_arrival_delay_seconds = 0 . 0 ; int32_t interruption_count = 0 ; int32_t total_interruption_duration_ms = 0 ; absl::optional<int64_t> estimated_playout_ntp_timestamp_ms ; absl::optional<int64_t> last_sender_report_timestamp_ms ; absl::optional<int64_t> last_sender_report_remote_timestamp_ms ; uint32_t sender_reports_packets_sent = 0 ; uint64_t sender_reports_bytes_sent = 0 ; uint64_t sender_reports_reports_count = 0 ; absl::optional<TimeDelta> round_trip_time ; TimeDelta total_round_trip_time =)",
    "insertText": "Zero()"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (int round_trip_time_measurements ; } ; struct Config {)",
    "insertText": "Config()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "Rtp()",
    "kind": "Method",
    "detail": "Function (struct Rtp : public ReceiveStreamRtpConfig {)",
    "insertText": "Rtp()"
  },
  {
    "label": "SetDecoderMap()",
    "kind": "Method",
    "detail": "Function (NackConfig nack ; } rtp ; bool enable_non_sender_rtt = false ; Transport* rtcp_send_transport = nullptr ; size_t jitter_buffer_max_packets = 2 0 0 ; bool jitter_buffer_fast_accelerate = false ; int jitter_buffer_min_delay_ms = 0 ; std::string sync_group ; std::map<int,SdpAudioFormat> decoder_map ; rtc::scoped_refptr<AudioDecoderFactory> decoder_factory ; absl::optional<AudioCodecPairId> codec_pair_id ; webrtc::CryptoOptions crypto_options ; rtc::scoped_refptr<webrtc::FrameDecryptorInterface> frame_decryptor ; rtc::scoped_refptr<webrtc::FrameTransformerInterface> frame_transformer ; } ; void)",
    "insertText": "SetDecoderMap(std::map<int, SdpAudioFormat> decoder_map)"
  },
  {
    "label": "SetNackHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNackHistory(int history_ms)"
  },
  {
    "label": "SetNonSenderRttMeasurement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNonSenderRttMeasurement(bool enabled)"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (Stats)",
    "insertText": "GetStats(bool get_and_clear_legacy_stats)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (Stats)",
    "insertText": "GetStats()"
  },
  {
    "label": "SetSink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSink(AudioSinkInterface* sink)"
  },
  {
    "label": "SetGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGain(float gain)"
  },
  {
    "label": "SetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBaseMinimumPlayoutDelayMs(int delay_ms)"
  },
  {
    "label": "GetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetBaseMinimumPlayoutDelayMs()"
  },
  {
    "label": "remote_ssrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "remote_ssrc()"
  },
  {
    "label": "GetRtpExtensions()",
    "kind": "Method",
    "detail": "Function (const std::vector<RtpExtension>&)",
    "insertText": "GetRtpExtensions()"
  },
  {
    "label": "AudioReceiveStreamInterface()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "AudioReceiveStreamInterface()"
  }
]