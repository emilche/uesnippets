[
  {
    "label": "EProtocol",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EProtocol"
  },
  {
    "label": "EKnownEventUids",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EKnownEventUids"
  },
  {
    "label": "FEventHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventHeader"
  },
  {
    "label": "FImportantEventHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImportantEventHeader"
  },
  {
    "label": "FEventHeaderSync",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventHeaderSync"
  },
  {
    "label": "FAuxHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAuxHeader"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once namespace UE { namespace Trace { # if)",
    "insertText": "defined(TRACE_PRIVATE_PROTOCOL_5)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (enum EProtocol : uint8 { Id = 5 } ; using Protocol4::EFieldType ; using Protocol4::FNewEventEvent ; using Protocol4::EEventFlags ; struct EKnownEventUids { const uint16 Flag_TwoByteUid = 1<<0 ; const uint16 _UidShift = 1 ; enum : uint16 { NewEvent = 0,AuxData,_AuxData_Unused,AuxDataTerminal,EnterScope,LeaveScope,_Unused6,_Unused7,EnterScope_T,_EnterScope_T_Unused0,_EnterScope_T_Unused1,_EnterScope_T_Unused2,LeaveScope_T,_LeaveScope_T_Unused0,_LeaveScope_T_Unused1,_LeaveScope_T_Unused2,_WellKnownNum,} ; const uint16 User = _WellKnownNum ; const uint16)",
    "insertText": "Max(1 << (16 - _UidShift))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (const uint16 Invalid = Max ; } ; struct FEventHeader { uint16 Uid ; uint8 Data [ ] ; } ;)",
    "insertText": "static_assert(sizeof(FEventHeader) == 2, \"Struct layout assumption doesn't match expectation\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (struct FImportantEventHeader { uint16 Uid ; uint16 Size ; uint8 Data [ ] ; } ;)",
    "insertText": "static_assert(sizeof(FImportantEventHeader) == 4, \"Struct layout assumption doesn't match expectation\")"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# pragma)",
    "insertText": "pack(push, 1)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (uint16 Uid ; uint16 SerialLow ; uint8 SerialHigh ; uint8 Data [ ] ; } ; # pragma)",
    "insertText": "pack(pop) static_assert(sizeof(FEventHeaderSync) == 5, \"Packing assumption doesn't hold\")"
  },
  {
    "label": "FieldMask()",
    "kind": "Method",
    "detail": "Function (struct FAuxHeader { enum : uint32 { FieldShift = 8,FieldBits = 5,)",
    "insertText": "FieldMask(1 << FieldBits) - 1, SizeShift = FieldShift + FieldBits, SizeLimit = 1 << (32 - SizeShift)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (union { struct { uint8 Uid ; uint8 FieldIndex_Size ; uint16 Size ; } ; uint32 Pack ; } ; uint8 Data [ ] ; } ;)",
    "insertText": "static_assert(sizeof(FAuxHeader) == 4, \"Struct layout assumption doesn't match expectation\")"
  }
]