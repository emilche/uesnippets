[
  {
    "label": "string_index",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "string_index"
  },
  {
    "label": "itt_relation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "itt_relation"
  },
  {
    "label": "notify_type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "notify_type"
  },
  {
    "label": "itt_domain_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "itt_domain_enum"
  },
  {
    "label": "event",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "event"
  },
  {
    "label": "TBB_STRING_RESOURCE()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_profiling_H # define __TBB_profiling_H namespace tbb { namespace internal { # define)",
    "insertText": "TBB_STRING_RESOURCE(index_name,str)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# include \" internal / _tbb_strings . h \" NUM_STRINGS } ; # undef TBB_STRING_RESOURCE enum itt_relation { __itt_relation_is_unknown = 0,__itt_relation_is_dependent_on,__itt_relation_is_sibling_of,__itt_relation_is_parent_of,__itt_relation_is_continuation_of,__itt_relation_is_child_of,__itt_relation_is_continued_by,__itt_relation_is_predecessor_to } ; } } #)",
    "insertText": "if(_WIN32||_WIN64||__linux__)"
  },
  {
    "label": "itt_set_sync_name_v3()",
    "kind": "Method",
    "detail": "Function (namespace internal { # if _WIN32 | | _WIN64 void __TBB_EXPORTED_FUNC)",
    "insertText": "itt_set_sync_name_v3(void *obj, const wchar_t* name)"
  },
  {
    "label": "multibyte_to_widechar()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "multibyte_to_widechar(wchar_t* wcs, const char* mbs, size_t bufsize)"
  },
  {
    "label": "mbstowcs_s()",
    "kind": "Method",
    "detail": "Function (# if _MSC_VER> = 1 4 0 0 size_t len ;)",
    "insertText": "mbstowcs_s(&len, wcs, bufsize, mbs, _TRUNCATE)"
  },
  {
    "label": "__TBB_DEFINE_PROFILING_SET_NAME()",
    "kind": "Method",
    "detail": "Function (# endif } } # if _WIN32 | | _WIN64 # define)",
    "insertText": "__TBB_DEFINE_PROFILING_SET_NAME(sync_object_type)"
  },
  {
    "label": "set_name()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "set_name(sync_object_type& obj, const wchar_t* name)"
  },
  {
    "label": "itt_set_sync_name_v3()",
    "kind": "Method",
    "detail": "Function (\\ tbb::)",
    "insertText": "itt_set_sync_name_v3(&obj, name)"
  },
  {
    "label": "set_name()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void)",
    "insertText": "set_name(sync_object_type& obj, const char* name)"
  },
  {
    "label": "multibyte_to_widechar()",
    "kind": "Method",
    "detail": "Function (\\ size_t len = tbb::)",
    "insertText": "multibyte_to_widechar(NULL, name, 0)"
  },
  {
    "label": "multibyte_to_widechar()",
    "kind": "Method",
    "detail": "Function (\\ wchar_t* wname = new wchar_t [ len ] ; \\ tbb::)",
    "insertText": "multibyte_to_widechar(wname, name, len)"
  },
  {
    "label": "set_name()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "set_name(obj, wname)"
  },
  {
    "label": "set_name()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "set_name(sync_object_type&, const wchar_t*)"
  },
  {
    "label": "set_name()",
    "kind": "Method",
    "detail": "Function (} \\ void)",
    "insertText": "set_name(sync_object_type&, const char*)"
  },
  {
    "label": "call_itt_notify_v5()",
    "kind": "Method",
    "detail": "Function (} \\ } # endif # endif # include \" atomic . h \" namespace tbb { namespace internal { enum notify_type { prepare = 0,cancel,acquired,releasing } ; const uintptr_t NUM_NOTIFY_TYPES = 4 ; void __TBB_EXPORTED_FUNC)",
    "insertText": "call_itt_notify_v5(int t, void *ptr)"
  },
  {
    "label": "itt_store_pointer_with_release_v3()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_FUNC)",
    "insertText": "itt_store_pointer_with_release_v3(void *dst, void *src)"
  },
  {
    "label": "itt_load_pointer_with_acquire_v3()",
    "kind": "Method",
    "detail": "Function (void* __TBB_EXPORTED_FUNC)",
    "insertText": "itt_load_pointer_with_acquire_v3(const void *src)"
  },
  {
    "label": "itt_load_pointer_v3()",
    "kind": "Method",
    "detail": "Function (void* __TBB_EXPORTED_FUNC)",
    "insertText": "itt_load_pointer_v3(const void* src)"
  },
  {
    "label": "itt_make_task_group_v7()",
    "kind": "Method",
    "detail": "Function (enum itt_domain_enum { ITT_DOMAIN_FLOW = 0,ITT_DOMAIN_MAIN = 1,ITT_DOMAIN_ALGO = 2,ITT_NUM_DOMAINS } ; void __TBB_EXPORTED_FUNC)",
    "insertText": "itt_make_task_group_v7(itt_domain_enum domain, void *group, unsigned long long group_extra, void *parent, unsigned long long parent_extra, string_index name_index)"
  },
  {
    "label": "itt_metadata_str_add_v7()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_FUNC)",
    "insertText": "itt_metadata_str_add_v7(itt_domain_enum domain, void *addr, unsigned long long addr_extra, string_index key, const char *value)"
  },
  {
    "label": "itt_relation_add_v7()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_FUNC)",
    "insertText": "itt_relation_add_v7(itt_domain_enum domain, void *addr0, unsigned long long addr0_extra, itt_relation relation, void *addr1, unsigned long long addr1_extra)"
  },
  {
    "label": "itt_task_begin_v7()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_FUNC)",
    "insertText": "itt_task_begin_v7(itt_domain_enum domain, void *task, unsigned long long task_extra, void *parent, unsigned long long parent_extra, string_index name_index)"
  },
  {
    "label": "itt_task_end_v7()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_FUNC)",
    "insertText": "itt_task_end_v7(itt_domain_enum domain)"
  },
  {
    "label": "itt_region_begin_v9()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_FUNC)",
    "insertText": "itt_region_begin_v9(itt_domain_enum domain, void *region, unsigned long long region_extra, void *parent, unsigned long long parent_extra, string_index name_index)"
  },
  {
    "label": "itt_region_end_v9()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_FUNC)",
    "insertText": "itt_region_end_v9(itt_domain_enum domain, void *region, unsigned long long region_extra)"
  },
  {
    "label": "itt_store_word_with_release()",
    "kind": "Method",
    "detail": "Function (template<T,U> void)",
    "insertText": "itt_store_word_with_release(tbb::atomic<T>& dst, U src)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_THREADING_TOOLS)",
    "insertText": "__TBB_ASSERT(sizeof(T) == sizeof(void *), \"Type must be word-sized.\")"
  },
  {
    "label": "itt_store_pointer_with_release_v3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_store_pointer_with_release_v3(&dst, (void *)uintptr_t(src))"
  },
  {
    "label": "itt_load_word_with_acquire()",
    "kind": "Method",
    "detail": "Function (# else dst = src ; # endif } template<T> T)",
    "insertText": "itt_load_word_with_acquire(const tbb::atomic<T>& src)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) && !defined(__INTEL_COMPILER) #pragma warning (push) #pragma warning (disable: 4311) #endif T result = (T)itt_load_pointer_with_acquire_v3(&src)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) && !defined(__INTEL_COMPILER) #pragma warning (pop)"
  },
  {
    "label": "itt_store_word_with_release()",
    "kind": "Method",
    "detail": "Function (# else return src ; # endif } template<T> void)",
    "insertText": "itt_store_word_with_release(T& dst, T src)"
  },
  {
    "label": "itt_store_pointer_with_release_v3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_store_pointer_with_release_v3(&dst, (void *)src)"
  },
  {
    "label": "__TBB_store_with_release()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "__TBB_store_with_release(dst, src)"
  },
  {
    "label": "itt_load_word_with_acquire()",
    "kind": "Method",
    "detail": "Function (# endif } template<T> T)",
    "insertText": "itt_load_word_with_acquire(const T& src)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_THREADING_TOOLS)",
    "insertText": "__TBB_ASSERT(sizeof(T) == sizeof(void *), \"Type must be word-sized\")"
  },
  {
    "label": "__TBB_load_with_acquire()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "__TBB_load_with_acquire(src)"
  },
  {
    "label": "itt_hide_store_word()",
    "kind": "Method",
    "detail": "Function (# endif } template<T> void)",
    "insertText": "itt_hide_store_word(T& dst, T src)"
  },
  {
    "label": "itt_hide_load_word()",
    "kind": "Method",
    "detail": "Function (# else dst = src ; # endif } template<T> T)",
    "insertText": "itt_hide_load_word(const T& src)"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (# else return src ; # endif } # if TBB_USE_THREADING_TOOLS void)",
    "insertText": "call_itt_notify(notify_type t, void *ptr)"
  },
  {
    "label": "call_itt_notify_v5()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_itt_notify_v5((int)t, ptr)"
  },
  {
    "label": "itt_make_task_group()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "itt_make_task_group(itt_domain_enum domain, void *group, unsigned long long group_extra, void *parent, unsigned long long parent_extra, string_index name_index)"
  },
  {
    "label": "itt_make_task_group_v7()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_make_task_group_v7(domain, group, group_extra, parent, parent_extra, name_index)"
  },
  {
    "label": "itt_metadata_str_add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "itt_metadata_str_add(itt_domain_enum domain, void *addr, unsigned long long addr_extra, string_index key, const char *value)"
  },
  {
    "label": "itt_metadata_str_add_v7()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_metadata_str_add_v7(domain, addr, addr_extra, key, value)"
  },
  {
    "label": "itt_relation_add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "itt_relation_add(itt_domain_enum domain, void *addr0, unsigned long long addr0_extra, itt_relation relation, void *addr1, unsigned long long addr1_extra)"
  },
  {
    "label": "itt_relation_add_v7()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_relation_add_v7(domain, addr0, addr0_extra, relation, addr1, addr1_extra)"
  },
  {
    "label": "itt_task_begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "itt_task_begin(itt_domain_enum domain, void *task, unsigned long long task_extra, void *parent, unsigned long long parent_extra, string_index name_index)"
  },
  {
    "label": "itt_task_begin_v7()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_task_begin_v7(domain, task, task_extra, parent, parent_extra, name_index)"
  },
  {
    "label": "itt_task_end()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "itt_task_end(itt_domain_enum domain)"
  },
  {
    "label": "itt_task_end_v7()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_task_end_v7(domain)"
  },
  {
    "label": "itt_region_begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "itt_region_begin(itt_domain_enum domain, void *region, unsigned long long region_extra, void *parent, unsigned long long parent_extra, string_index name_index)"
  },
  {
    "label": "itt_region_begin_v9()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_region_begin_v9(domain, region, region_extra, parent, parent_extra, name_index)"
  },
  {
    "label": "itt_region_end()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "itt_region_end(itt_domain_enum domain, void *region, unsigned long long region_extra)"
  },
  {
    "label": "itt_region_end_v9()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_region_end_v9(domain, region, region_extra)"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (} # else void)",
    "insertText": "call_itt_notify(notify_type , void*)"
  },
  {
    "label": "itt_make_task_group()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "itt_make_task_group(itt_domain_enum , void* , unsigned long long , void* , unsigned long long , string_index)"
  },
  {
    "label": "itt_metadata_str_add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "itt_metadata_str_add(itt_domain_enum , void* , unsigned long long , string_index , const char*)"
  },
  {
    "label": "itt_relation_add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "itt_relation_add(itt_domain_enum , void* , unsigned long long , itt_relation , void* , unsigned long long)"
  },
  {
    "label": "itt_task_begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "itt_task_begin(itt_domain_enum , void* , unsigned long long , void* , unsigned long long , string_index)"
  },
  {
    "label": "itt_task_end()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "itt_task_end(itt_domain_enum)"
  },
  {
    "label": "itt_region_begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "itt_region_begin(itt_domain_enum , void* , unsigned long long , void* , unsigned long long , string_index)"
  },
  {
    "label": "itt_region_end()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "itt_region_end(itt_domain_enum , void* , unsigned long long)"
  },
  {
    "label": "TBB_USE_THREADING_TOOLS()",
    "kind": "Method",
    "detail": "Function (} # endif } } # if TBB_PREVIEW_FLOW_GRAPH_TRACE # include<string> namespace tbb { namespace profiling { namespace interface10 { # if)",
    "insertText": "TBB_USE_THREADING_TOOLS(TBB_USE_THREADING_TOOLS == 2)"
  },
  {
    "label": "emit_trace()",
    "kind": "Method",
    "detail": "Function (const std::string my_name ; void)",
    "insertText": "emit_trace(const std::string &input)"
  },
  {
    "label": "itt_metadata_str_add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_metadata_str_add(tbb::internal::ITT_DOMAIN_FLOW, NULL, tbb::internal::FLOW_NULL, tbb::internal::USER_EVENT, ( \"FGA::DATAID::\" + input ).c_str())"
  },
  {
    "label": "event()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "event(const std::string &input) : my_name( input)"
  },
  {
    "label": "emit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "emit()"
  },
  {
    "label": "emit_trace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emit_trace(my_name)"
  },
  {
    "label": "emit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "emit(const std::string &description)"
  },
  {
    "label": "emit_trace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emit_trace(description)"
  },
  {
    "label": "event()",
    "kind": "Method",
    "detail": "Function (} } ; # else struct event {)",
    "insertText": "event(const std::string &)"
  },
  {
    "label": "emit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "emit(const std::string &)"
  }
]