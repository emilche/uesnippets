[
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FConfigAccessData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConfigAccessData"
  },
  {
    "label": "FARFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FARFilter"
  },
  {
    "label": "FCookDependencyContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookDependencyContext"
  },
  {
    "label": "FErrorHandlerScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FErrorHandlerScope"
  },
  {
    "label": "FCookDependency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookDependency"
  },
  {
    "label": "FFunctionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFunctionData"
  },
  {
    "label": "FTransitiveBuildData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransitiveBuildData"
  },
  {
    "label": "FCookDependencyFunctionRegistration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookDependencyFunctionRegistration"
  },
  {
    "label": "FCookDependencyContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" Serialization / CompactBinary . h \" # include \" Templates / Function . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" class FCbFieldView ; class FCbWriter ; class UObject ; namespace UE::ConfigAccessTracking { enum class ELoadType : uint8 ; } namespace UE::ConfigAccessTracking { struct FConfigAccessData ; } struct FARFilter ; # endif # if WITH_EDITOR namespace UE::Cook { struct FCookDependencyContext { public :)",
    "insertText": "FCookDependencyContext(void* InHasher, TUniqueFunction<void(FString&&)>&& InOnLogError, FName InPackageName)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const void* Data, uint64 Size)"
  },
  {
    "label": "LogError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogError(FString Message)"
  },
  {
    "label": "FErrorHandlerScope()",
    "kind": "Method",
    "detail": "Function (struct FErrorHandlerScope { public : ~)",
    "insertText": "FErrorHandlerScope()"
  },
  {
    "label": "FErrorHandlerScope()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FErrorHandlerScope(FCookDependencyContext& InContext)"
  },
  {
    "label": "ErrorHandlerScope()",
    "kind": "Method",
    "detail": "Function (FCookDependencyContext ; FCookDependencyContext& Context ; } ; [ [ nodiscard ] ] FErrorHandlerScope)",
    "insertText": "ErrorHandlerScope(TUniqueFunction<FString(FString&&)>&& ErrorHandler)"
  },
  {
    "label": "GetPackageName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPackageName()"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (TArray<TUniqueFunction<)",
    "insertText": "FString(FString&&)"
  },
  {
    "label": "File()",
    "kind": "Method",
    "detail": "Function (FName PackageName ; void* Hasher ; } ; enum class ECookDependency : uint8 { None = 0,File = 1,Function = 2,TransitiveBuild = 3,Package = 4,ConsoleVariable = 5,Config = 6,SettingsObject = 7,NativeClass = 8,AssetRegistryQuery = 9,Count,} ; class FCookDependency { public : FCookDependency)",
    "insertText": "File(FStringView InFileName)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (FCookDependency)",
    "insertText": "Function(FName InFunctionName, FCbFieldIterator&& InArgs)"
  },
  {
    "label": "TransitiveBuildAndRuntime()",
    "kind": "Method",
    "detail": "Function (FCookDependency)",
    "insertText": "TransitiveBuildAndRuntime(FName PackageName)"
  },
  {
    "label": "Package()",
    "kind": "Method",
    "detail": "Function (FCookDependency)",
    "insertText": "Package(FName PackageName)"
  },
  {
    "label": "ConsoleVariable()",
    "kind": "Method",
    "detail": "Function (FCookDependency)",
    "insertText": "ConsoleVariable(FStringView VariableName)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (FCookDependency)",
    "insertText": "Config(UE::ConfigAccessTracking::FConfigAccessData AccessData)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (FCookDependency)",
    "insertText": "Config(UE::ConfigAccessTracking::ELoadType LoadType, FName Platform, FName FileName, FName SectionName, FName ValueName)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (FCookDependency)",
    "insertText": "Config(FName FileName, FName SectionName, FName ValueName)"
  },
  {
    "label": "SettingsObject()",
    "kind": "Method",
    "detail": "Function (FCookDependency)",
    "insertText": "SettingsObject(const UObject* InObject)"
  },
  {
    "label": "NativeClass()",
    "kind": "Method",
    "detail": "Function (FCookDependency)",
    "insertText": "NativeClass(const UClass* InClass)"
  },
  {
    "label": "NativeClass()",
    "kind": "Method",
    "detail": "Function (FCookDependency)",
    "insertText": "NativeClass(FStringView ClassPath)"
  },
  {
    "label": "AssetRegistryQuery()",
    "kind": "Method",
    "detail": "Function (FCookDependency)",
    "insertText": "AssetRegistryQuery(FARFilter Filter)"
  },
  {
    "label": "FCookDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCookDependency()"
  },
  {
    "label": "FCookDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCookDependency(const FCookDependency& Other)"
  },
  {
    "label": "FCookDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCookDependency(FCookDependency&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCookDependency&)",
    "insertText": "operator(const FCookDependency& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCookDependency&)",
    "insertText": "operator(FCookDependency&& Other)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (ECookDependency)",
    "insertText": "GetType()"
  },
  {
    "label": "GetFileName()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetFileName()"
  },
  {
    "label": "GetFunctionName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFunctionName()"
  },
  {
    "label": "GetFunctionArgs()",
    "kind": "Method",
    "detail": "Function (FCbFieldViewIterator)",
    "insertText": "GetFunctionArgs()"
  },
  {
    "label": "IsAlsoAddRuntimeDependency()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAlsoAddRuntimeDependency()"
  },
  {
    "label": "GetConfigPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetConfigPath()"
  },
  {
    "label": "GetSettingsObject()",
    "kind": "Method",
    "detail": "Function (const UObject*)",
    "insertText": "GetSettingsObject()"
  },
  {
    "label": "GetClassPath()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetClassPath()"
  },
  {
    "label": "GetARFilter()",
    "kind": "Method",
    "detail": "Function (const FARFilter*)",
    "insertText": "GetARFilter()"
  },
  {
    "label": "UpdateHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHash(FCookDependencyContext& Context)"
  },
  {
    "label": "FCookDependency()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FCookDependency(ECookDependency InType)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct()"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destruct()"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Save(FCbWriter& Writer)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(FCbFieldView Value)"
  },
  {
    "label": "ConfigAccessDataLessThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConfigAccessDataLessThan(const UE::ConfigAccessTracking::FConfigAccessData& A, const UE::ConfigAccessTracking::FConfigAccessData& B)"
  },
  {
    "label": "ConfigAccessDataEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConfigAccessDataEqual(const UE::ConfigAccessTracking::FConfigAccessData& A, const UE::ConfigAccessTracking::FConfigAccessData& B)"
  },
  {
    "label": "ARFilterLessThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ARFilterLessThan(const FARFilter& A, const FARFilter& B)"
  },
  {
    "label": "ARFilterEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ARFilterEqual(const FARFilter& A, const FARFilter& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FCookDependency& CookDependencies)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (CookDependencies .)",
    "insertText": "Save(Writer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} private : ECookDependency Type ; struct FFunctionData { FName Name ; FCbFieldIterator Args ; } ; struct FTransitiveBuildData { FName PackageName ; bool bAlsoAddRuntimeDependency = true ; } ; union { FString StringData ; FFunctionData FunctionData ; FTransitiveBuildData TransitiveBuildData ; FName NameData ; const UObject* ObjectPtr ; TUniquePtr<UE::ConfigAccessTracking::FConfigAccessData> ConfigAccessData ; TUniquePtr<FARFilter> ARFilter ; } ; } ; using FCookDependencyFunction =)",
    "insertText": "void(*)(FCbFieldViewIterator Args, FCookDependencyContext& Context)"
  },
  {
    "label": "FCookDependencyFunctionRegistration()",
    "kind": "Method",
    "detail": "Function (} namespace UE::Cook::Dependency::Private { struct FCookDependencyFunctionRegistration { template<int N>)",
    "insertText": "FCookDependencyFunctionRegistration(const TCHAR(&InName)[N], FCookDependencyFunction InFunction) : Name(InName), Function(InFunction), Next(nullptr)"
  },
  {
    "label": "FCookDependencyFunctionRegistration()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCookDependencyFunctionRegistration()"
  },
  {
    "label": "GetFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFName()"
  },
  {
    "label": "UE_COOK_DEPENDENCY_FUNCTION()",
    "kind": "Method",
    "detail": "Function (FLazyName Name ; FCookDependencyFunction Function ; FCookDependencyFunctionRegistration* Next ; } ; } # define)",
    "insertText": "UE_COOK_DEPENDENCY_FUNCTION(Name, Function) \\ UE::Cook::Dependency::Private::FCookDependencyFunctionRegistration \\ PREPROCESSOR_JOIN(FCookDependencyFunctionRegistration_,Name)(TEXT(#Name), Function) #define UE_COOK_DEPENDENCY_FUNCTION_CALL(Name) \\ PREPROCESSOR_JOIN(FCookDependencyFunctionRegistration_,Name).GetFName() #else #define UE_COOK_DEPENDENCY_FUNCTION(Name, Function) #define UE_COOK_DEPENDENCY_FUNCTION_CALL(Name)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "switch(Type)"
  },
  {
    "label": "TryGetRangeView()",
    "kind": "Method",
    "detail": "Function (bool bHasViewB = Other . FunctionData . Args .)",
    "insertText": "TryGetRangeView(ViewB)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (} case ECookDependency::TransitiveBuild : { int32 Compare = TransitiveBuildData . PackageName .)",
    "insertText": "Compare(Other.TransitiveBuildData.PackageName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!ConfigAccessData.IsValid())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!ARFilter.IsValid())"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "FCookDependencyContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCookDependencyContext(void* InHasher, TUniqueFunction<void(FString&&)>&& InOnLogError, FName InPackageName) : OnLogError(MoveTemp(InOnLogError)) , PackageName(InPackageName) , Hasher(InHasher)"
  }
]