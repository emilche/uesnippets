[
  {
    "label": "FWeakObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeakObjectPtr"
  },
  {
    "label": "FHierarchicalTimerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHierarchicalTimerInfo"
  },
  {
    "label": "FScopeTimer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeTimer"
  },
  {
    "label": "OutputHierarchyTimers()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" CookOnTheSide / CookOnTheFlyServer . h \" # include \" CoreTypes . h \" # include \" ProfilingDebugging / CookStats . h \" # include \" Stats / Stats . h \" # include<atomic> # define OUTPUT_COOKTIMING ENABLE_COOK_STATS # define PROFILE_NETWORK 0 # if OUTPUT_COOKTIMING # include \" Trace / Trace . inl \" # include \" ProfilingDebugging / FormatArgsTrace . h \" # include \" ProfilingDebugging / ScopedTimers . h \" # endif struct FWeakObjectPtr ; # if OUTPUT_COOKTIMING void)",
    "insertText": "OutputHierarchyTimers()"
  },
  {
    "label": "ClearHierarchyTimers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearHierarchyTimers()"
  },
  {
    "label": "FScopeTimer()",
    "kind": "Method",
    "detail": "Function (struct FHierarchicalTimerInfo ; struct FScopeTimer { public :)",
    "insertText": "FScopeTimer(const FScopeTimer&)"
  },
  {
    "label": "FScopeTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopeTimer(FScopeTimer&&)"
  },
  {
    "label": "FScopeTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopeTimer(int InId, const char* InName, bool IncrementScope = false)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "FScopeTimer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopeTimer()"
  },
  {
    "label": "UE_CREATE_HIERARCHICAL_COOKTIMER()",
    "kind": "Method",
    "detail": "Function (private : uint64 StartTime = 0 ; FHierarchicalTimerInfo* HierarchyTimerInfo ; FHierarchicalTimerInfo* PrevTimerInfo ; } ; # define)",
    "insertText": "UE_CREATE_HIERARCHICAL_COOKTIMER(name, incrementScope) \\ FScopeTimer PREPROCESSOR_JOIN(__HierarchicalCookTimerScope, __LINE__)(__COUNTER__, #name, incrementScope)"
  },
  {
    "label": "UE_CREATE_TEXT_HIERARCHICAL_COOKTIMER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_CREATE_TEXT_HIERARCHICAL_COOKTIMER(name, incrementScope) \\ FScopeTimer PREPROCESSOR_JOIN(__HierarchicalCookTimerScope, __LINE__)(__COUNTER__, name, incrementScope)"
  },
  {
    "label": "UE_SCOPED_COOKTIMER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_SCOPED_COOKTIMER(name) TRACE_CPUPROFILER_EVENT_SCOPE_ON_CHANNEL(name, CookChannel) #define UE_SCOPED_TEXT_COOKTIMER(name) TRACE_CPUPROFILER_EVENT_SCOPE_TEXT_ON_CHANNEL(name, CookChannel) #define UE_SCOPED_COOKTIMER_AND_DURATION(name, durationStorage) \\ FScopedDurationTimer PREPROCESSOR_JOIN(__CookTimerScope, __LINE__)(durationStorage)"
  },
  {
    "label": "UE_SCOPED_COOKTIMER()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_SCOPED_COOKTIMER(name) #define UE_SCOPED_TEXT_COOKTIMER_AND_DURATION(name, durationStorage) \\ FScopedDurationTimer PREPROCESSOR_JOIN(__CookTimerScope, __LINE__)(durationStorage)"
  },
  {
    "label": "UE_SCOPED_TEXT_COOKTIMER()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_SCOPED_TEXT_COOKTIMER(name) #define UE_SCOPED_HIERARCHICAL_COOKTIMER(name) \\ UE_CREATE_HIERARCHICAL_COOKTIMER(name, true)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "PREPROCESSOR_JOIN(__HierarchicalCookTimerScope, __LINE__).Start()"
  },
  {
    "label": "UE_SCOPED_COOKTIMER()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_SCOPED_COOKTIMER(name) #define UE_SCOPED_TEXT_HIERARCHICAL_COOKTIMER(name) \\ UE_CREATE_TEXT_HIERARCHICAL_COOKTIMER(name, true)"
  },
  {
    "label": "UE_SCOPED_TEXT_COOKTIMER()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_SCOPED_TEXT_COOKTIMER(name) #define UE_SCOPED_HIERARCHICAL_COOKTIMER_AND_DURATION(name, durationStorage) \\ FScopedDurationTimer PREPROCESSOR_JOIN(__CookTimerScope, __LINE__)(durationStorage)"
  },
  {
    "label": "UE_SCOPED_HIERARCHICAL_COOKTIMER()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_SCOPED_HIERARCHICAL_COOKTIMER(name) #define UE_SCOPED_TEXT_HIERARCHICAL_COOKTIMER_AND_DURATION(name, durationStorage) \\ FScopedDurationTimer PREPROCESSOR_JOIN(__CookTimerScope, __LINE__)(durationStorage)"
  },
  {
    "label": "UE_SCOPED_TEXT_HIERARCHICAL_COOKTIMER()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_SCOPED_TEXT_HIERARCHICAL_COOKTIMER(name) #define UE_CUSTOM_COOKTIMER_LOG Cpu #define UE_SCOPED_CUSTOM_COOKTIMER(name) UE_TRACE_LOG_SCOPED_T(UE_CUSTOM_COOKTIMER_LOG, name, CookChannel) #define UE_SCOPED_CUSTOM_COOKTIMER_AND_DURATION(name, durationStorage) \\ FScopedDurationTimer PREPROCESSOR_JOIN(__CookTimerScope, __LINE__)(durationStorage)"
  },
  {
    "label": "UE_SCOPED_CUSTOM_COOKTIMER()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_SCOPED_CUSTOM_COOKTIMER(name) #define UE_SCOPED_HIERARCHICAL_CUSTOM_COOKTIMER(name) \\ UE_CREATE_HIERARCHICAL_COOKTIMER(name, true)"
  },
  {
    "label": "UE_SCOPED_CUSTOM_COOKTIMER()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_SCOPED_CUSTOM_COOKTIMER(name) #define UE_SCOPED_HIERARCHICAL_CUSTOM_COOKTIMER_AND_DURATION(name, durationStorage) \\ FScopedDurationTimer PREPROCESSOR_JOIN(__CookTimerScope, __LINE__)(durationStorage)"
  },
  {
    "label": "UE_SCOPED_HIERARCHICAL_CUSTOM_COOKTIMER()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_SCOPED_HIERARCHICAL_CUSTOM_COOKTIMER(name) #define UE_ADD_CUSTOM_COOKTIMER_META(name, key, value) << name.key(value) #else #define UE_SCOPED_COOKTIMER(name) #define UE_SCOPED_TEXT_COOKTIMER(name) #define UE_SCOPED_COOKTIMER_AND_DURATION(name, durationStorage) #define UE_SCOPED_TEXT_COOKTIMER_AND_DURATION(name, durationStorage) #define UE_SCOPED_HIERARCHICAL_COOKTIMER(name) #define UE_SCOPED_TEXT_HIERARCHICAL_COOKTIMER(name) #define UE_SCOPED_HIERARCHICAL_COOKTIMER_AND_DURATION(name, durationStorage) #define UE_SCOPED_TEXT_HIERARCHICAL_COOKTIMER_AND_DURATION(name, durationStorage) #define UE_CUSTOM_COOKTIMER_LOG Cpu #define UE_SCOPED_CUSTOM_COOKTIMER(name) #define UE_SCOPED_CUSTOM_COOKTIMER_AND_DURATION(name, durationStorage) #define UE_SCOPED_HIERARCHICAL_CUSTOM_COOKTIMER(name) #define UE_SCOPED_HIERARCHICAL_CUSTOM_COOKTIMER_AND_DURATION(name, durationStorage) #define UE_ADD_CUSTOM_COOKTIMER_META(name, key, value) inline void OutputHierarchyTimers()"
  },
  {
    "label": "SendLogCookStats()",
    "kind": "Method",
    "detail": "Function (} # endif # if ENABLE_COOK_STATS namespace DetailedCookStats { FString CookProject ; FString CookCultures ; FString CookLabel ; FString TargetPlatforms ; double CookStartTime ; double CookWallTimeSec ; double StartupWallTimeSec ; double StartCookByTheBookTimeSec ; double TickCookOnTheSideTimeSec ; double TickCookOnTheSideLoadPackagesTimeSec ; double TickCookOnTheSideResolveRedirectorsTimeSec ; double TickCookOnTheSideSaveCookedPackageTimeSec ; double TickCookOnTheSidePrepareSaveTimeSec ; double BlockOnAssetRegistryTimeSec ; double GameCookModificationDelegateTimeSec ; double TickLoopGCTimeSec ; double TickLoopRecompileShaderRequestsTimeSec ; double TickLoopShaderProcessAsyncResultsTimeSec ; double TickLoopProcessDeferredCommandsTimeSec ; double TickLoopTickCommandletStatsTimeSec ; double TickLoopFlushRenderingCommandsTimeSec ; double ShaderFlushTimeSec ; double ValidationTimeSec ; bool IsCookAll ; bool IsCookOnTheFly ; bool IsIterativeCook ; bool IsFastCook ; bool IsUnversioned ; std::atomic<int32> NumDetectedLoads ; int32 NumRequestedLoads ; uint32 NumPackagesIterativelySkipped ; int32 PeakRequestQueueSize ; int32 PeakLoadQueueSize ; int32 PeakSaveQueueSize ; void)",
    "insertText": "SendLogCookStats(ECookMode::Type CookMode)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (} # endif # if PROFILE_NETWORK double TimeTillRequestStarted = 0 . 0 ; double TimeTillRequestForfilled = 0 . 0 ; double TimeTillRequestForfilledError = 0 . 0 ; double WaitForAsyncFilesWrites = 0 . 0 ; FEvent* NetworkRequestEvent = nullptr ; # endif)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Cooking\"), STATGROUP_Cooking, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Precache Derived data for platform\"), STAT_TickPrecacheCooking, STATGROUP_Cooking)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Tick cooking\"), STAT_TickCooker, STATGROUP_Cooking)"
  },
  {
    "label": "DumpObjClassList()",
    "kind": "Method",
    "detail": "Function (namespace UE::Cook { void)",
    "insertText": "DumpObjClassList(TConstArrayView<FWeakObjectPtr> SessionStartupObjects)"
  },
  {
    "label": "DumpPackageReferencers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpPackageReferencers(TConstArrayView<UPackage*> Packages)"
  }
]