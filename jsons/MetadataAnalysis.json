[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FMetadataProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetadataProvider"
  },
  {
    "label": "FMetadataAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetadataAnalysis"
  },
  {
    "label": "EMetadataRouteIds",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMetadataRouteIds"
  },
  {
    "label": "FMetadataAnalysis()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" Trace / Analyzer . h \" # include \" Containers / Map . h \" namespace TraceServices { class IAnalysisSession ; class FMetadataProvider ; class FMetadataAnalysis : public UE::Trace::IAnalyzer { public :)",
    "insertText": "FMetadataAnalysis(IAnalysisSession& Session, FMetadataProvider* InProvider)"
  },
  {
    "label": "FMetadataAnalysis()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetadataAnalysis()"
  },
  {
    "label": "OnAnalysisBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisBegin(const FOnAnalysisContext& Context)"
  },
  {
    "label": "OnAnalysisEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisEnd()"
  },
  {
    "label": "OnEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnEvent(uint16 RouteId, EStyle Style, const FOnEventContext& Context)"
  },
  {
    "label": "GetOrRegisterType()",
    "kind": "Method",
    "detail": "Function (private : uint16)",
    "insertText": "GetOrRegisterType(const FEventTypeInfo& EventInfo)"
  }
]