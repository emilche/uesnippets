[
  {
    "label": "TMpscQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMpscQueue"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNode"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / MemoryOps . h \" # include \" Templates / TypeCompatibleBytes . h \" # include \" Templates / UnrealTemplate . h \" # include \" Misc / Optional . h \" # include<atomic> template<T,AllocatorType = FMemory> class TMpscQueue final { public : using ElementType = T ;)",
    "insertText": "UE_NONCOPYABLE(TMpscQueue)"
  },
  {
    "label": "TMpscQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TMpscQueue()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (FNode* Sentinel)",
    "insertText": "new(AllocatorType::Malloc(sizeof(FNode), alignof(FNode)))"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (Head .)",
    "insertText": "store(Sentinel, std::memory_order_relaxed)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (FNode* Next = Tail -> Next .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Tail)"
  },
  {
    "label": "DestructItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructItem((ElementType*)&Tail->Value)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (} } template<. . . ArgTypes> void)",
    "insertText": "Enqueue(ArgTypes&&... Args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)&New->Value) ElementType(Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (FNode* Prev = Head .)",
    "insertText": "exchange(New, std::memory_order_acq_rel)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (Prev -> Next .)",
    "insertText": "store(New, std::memory_order_release)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (} TOptional<ElementType>)",
    "insertText": "Dequeue()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (FNode* Next = Tail -> Next .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TOptional<ElementType> Res {)",
    "insertText": "MoveTemp(*ValuePtr)"
  },
  {
    "label": "DestructItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructItem(ValuePtr)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (Tail = Next ; return Res ; } bool)",
    "insertText": "Dequeue(ElementType& OutElem)"
  },
  {
    "label": "MoveTempIfPossible()",
    "kind": "Method",
    "detail": "Function (OutElem =)",
    "insertText": "MoveTempIfPossible(LocalElement.GetValue())"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  }
]