[
  {
    "label": "WriteFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WriteFlag"
  },
  {
    "label": "Writer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Writer"
  },
  {
    "label": "Level",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Level"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_WRITER_H_ # define RAPIDJSON_WRITER_H_ # include \" stream . h \" # include \" internal / clzll . h \" # include \" internal / meta . h \" # include \" internal / stack . h \" # include \" internal / strfunc . h \" # include \" internal / dtoa . h \" # include \" internal / itoa . h \" # include \" stringbuffer . h \" # include<new> # if)",
    "insertText": "defined(RAPIDJSON_SIMD) && defined(_MSC_VER) #include <intrin.h> #pragma intrinsic(_BitScanForward) #endif #ifdef RAPIDJSON_SSE42 #include <nmmintrin.h> #elif defined(RAPIDJSON_SSE2) #include <emmintrin.h> #elif defined(RAPIDJSON_NEON) #include <arm_neon.h> #endif #ifdef __clang__ RAPIDJSON_DIAG_PUSH RAPIDJSON_DIAG_OFF(padded) RAPIDJSON_DIAG_OFF(unreachable-code) RAPIDJSON_DIAG_OFF(c++98-compat) #elif defined(_MSC_VER) RAPIDJSON_DIAG_PUSH RAPIDJSON_DIAG_OFF(4127)"
  },
  {
    "label": "Writer()",
    "kind": "Method",
    "detail": "Function (kWriteNoFlags = 0,kWriteValidateEncodingFlag = 1,kWriteNanAndInfFlag = 2,kWriteNanAndInfNullFlag = 4,kWriteDefaultFlags = RAPIDJSON_WRITE_DEFAULT_FLAGS } ; template<OutputStream,SourceEncoding = UTF8<>,TargetEncoding = UTF8<>,StackAllocator = CrtAllocator,unsigned writeFlags = kWriteDefaultFlags> class Writer { public : typedef SourceEncoding::Ch Ch ; const int kDefaultMaxDecimalPlaces = 3 2 4 ;)",
    "insertText": "Writer(OutputStream& os, StackAllocator* stackAllocator = 0, size_t levelDepth = kDefaultLevelDepth) : os_(&os), level_stack_(stackAllocator, levelDepth * sizeof(Level)), maxDecimalPlaces_(kDefaultMaxDecimalPlaces), hasRoot_(false)"
  },
  {
    "label": "Writer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Writer(StackAllocator* allocator = 0, size_t levelDepth = kDefaultLevelDepth) : os_(0), level_stack_(allocator, levelDepth * sizeof(Level)), maxDecimalPlaces_(kDefaultMaxDecimalPlaces), hasRoot_(false)"
  },
  {
    "label": "Writer()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_CXX11_RVALUE_REFS)",
    "insertText": "Writer(Writer&& rhs) : os_(rhs.os_), level_stack_(std::move(rhs.level_stack_)), maxDecimalPlaces_(rhs.maxDecimalPlaces_), hasRoot_(rhs.hasRoot_)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (rhs . os_ = 0 ; } # endif void)",
    "insertText": "Reset(OutputStream& os)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (os_ =& os ; hasRoot_ = false ; level_stack_ .)",
    "insertText": "Clear()"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "GetMaxDecimalPlaces()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetMaxDecimalPlaces()"
  },
  {
    "label": "Null()",
    "kind": "Method",
    "detail": "Function (maxDecimalPlaces_ = maxDecimalPlaces ; } bool)",
    "insertText": "Null()"
  },
  {
    "label": "Prefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prefix(kNullType)"
  },
  {
    "label": "Bool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Bool(bool b)"
  },
  {
    "label": "Prefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prefix(b ? kTrueType : kFalseType)"
  },
  {
    "label": "Int()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Int(int i)"
  },
  {
    "label": "Prefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prefix(kNumberType)"
  },
  {
    "label": "Uint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Uint(unsigned u)"
  },
  {
    "label": "Int64()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Int64(int64_t i64)"
  },
  {
    "label": "Uint64()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Uint64(uint64_t u64)"
  },
  {
    "label": "Double()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Double(double d)"
  },
  {
    "label": "RawNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RawNumber(const Ch* str, SizeType length, bool copy = false)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(str != 0)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "String(const Ch* str, SizeType length, bool copy = false)"
  },
  {
    "label": "Prefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prefix(kStringType)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING bool)",
    "insertText": "String(const std::basic_string<Ch>& str)"
  },
  {
    "label": "StartObject()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "StartObject()"
  },
  {
    "label": "Prefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prefix(kObjectType)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(level_stack_.template Push<Level>()) Level(false)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Key(const Ch* str, SizeType length, bool copy = false)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING bool)",
    "insertText": "Key(const std::basic_string<Ch>& str)"
  },
  {
    "label": "EndObject()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "EndObject(SizeType memberCount = 0)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(level_stack_.GetSize() >= sizeof(Level))"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(!level_stack_.template Top<Level>()->inArray)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(0 == level_stack_.template Top<Level>()->valueCount % 2)"
  },
  {
    "label": "Level()",
    "kind": "Method",
    "detail": "Function (level_stack_ . template Pop<)",
    "insertText": "Level(1)"
  },
  {
    "label": "StartArray()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "StartArray()"
  },
  {
    "label": "Prefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prefix(kArrayType)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(level_stack_.template Push<Level>()) Level(true)"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EndArray(SizeType elementCount = 0)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(level_stack_.template Top<Level>()->inArray)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "String(const Ch* const& str)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Key(const Ch* const& str)"
  },
  {
    "label": "RawValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RawValue(const Ch* json, size_t length, Type type)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(json != 0)"
  },
  {
    "label": "Prefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prefix(type)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Flush()"
  },
  {
    "label": "Level()",
    "kind": "Method",
    "detail": "Function (} const size_t kDefaultLevelDepth = 3 2 ; protected : struct Level {)",
    "insertText": "Level(bool inArray_) : valueCount(0), inArray(inArray_)"
  },
  {
    "label": "WriteNull()",
    "kind": "Method",
    "detail": "Function (} size_t valueCount ; bool inArray ; } ; bool)",
    "insertText": "WriteNull()"
  },
  {
    "label": "PutReserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutReserve(*os_, 4)"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, 'n')"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, 'u')"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, 'l')"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, 't')"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, 'r')"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, 'e')"
  },
  {
    "label": "PutReserve()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "PutReserve(*os_, 5)"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, 'f')"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, 'a')"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, 's')"
  },
  {
    "label": "WriteInt()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "WriteInt(int i)"
  },
  {
    "label": "i32toa()",
    "kind": "Method",
    "detail": "Function (char buffer [ 1 1 ] ; const char* end =)",
    "insertText": "i32toa(i, buffer)"
  },
  {
    "label": "PutReserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutReserve(*os_, static_cast<size_t>(end - buffer))"
  },
  {
    "label": "u32toa()",
    "kind": "Method",
    "detail": "Function (char buffer [ 1 0 ] ; const char* end =)",
    "insertText": "u32toa(u, buffer)"
  },
  {
    "label": "i64toa()",
    "kind": "Method",
    "detail": "Function (char buffer [ 2 1 ] ; const char* end =)",
    "insertText": "i64toa(i64, buffer)"
  },
  {
    "label": "u64toa()",
    "kind": "Method",
    "detail": "Function (char buffer [ 2 0 ] ; char* end =)",
    "insertText": "u64toa(u64, buffer)"
  },
  {
    "label": "PutReserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutReserve(*os_, 3)"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, 'N')"
  },
  {
    "label": "PutReserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutReserve(*os_, 9)"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, '-')"
  },
  {
    "label": "PutReserve()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "PutReserve(*os_, 8)"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, 'I')"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, 'i')"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, 'y')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const OutputStream::Ch hexDigits [ 1 6 ] = { ' 0 ',' 1 ',' 2 ',' 3 ',' 4 ',' 5 ',' 6 ',' 7 ',' 8 ',' 9 ',' A ',' B ',' C ',' D ',' E ',' F ' } ; const char escape [ 2 5 6 ] = { # define Z16 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ' u ',' u ',' u ',' u ',' u ',' u ',' u ',' u ',' b ',' t ',' n ',' u ',' f ',' r ',' u ',' u ',' u ',' u ',' u ',' u ',' u ',' u ',' u ',' u ',' u ',' u ',' u ',' u ',' u ',' u ',' u ',' u ',0,0,' \" ',0,0,0,0,0,0,0,0,0,0,0,0,0,Z16,Z16,0,0,0,0,0,0,0,0,0,0,0,0,' \\ \\ ',0,0,0,Z16,Z16,Z16,Z16,Z16,Z16,Z16,Z16,Z16,Z16 # undef Z16 } ;)",
    "insertText": "if(TargetEncoding::supportUnicode) PutReserve(*os_, 2 + length * 6)"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, '\\\"')"
  },
  {
    "label": "is()",
    "kind": "Method",
    "detail": "Function (GenericStringStream<SourceEncoding>)",
    "insertText": "is(str)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (const Ch c = is .)",
    "insertText": "Peek()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned codepoint ;)",
    "insertText": "if(RAPIDJSON_UNLIKELY(!SourceEncoding::Decode(is, &codepoint)))"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, '\\\\')"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, hexDigits[(codepoint >> 12) & 15])"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, hexDigits[(codepoint >> 8) & 15])"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, hexDigits[(codepoint >> 4) & 15])"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, hexDigits[(codepoint ) & 15])"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "RAPIDJSON_ASSERT(codepoint >= 0x010000 && codepoint <= 0x10FFFF)"
  },
  {
    "label": "lead()",
    "kind": "Method",
    "detail": "Function (unsigned s = codepoint - 0 x010000 ; unsigned)",
    "insertText": "lead(s >> 10)"
  },
  {
    "label": "trail()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "trail(s & 0x3FF)"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, hexDigits[(lead >> 12) & 15])"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, hexDigits[(lead >> 8) & 15])"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, hexDigits[(lead >> 4) & 15])"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, hexDigits[(lead ) & 15])"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, hexDigits[(trail >> 12) & 15])"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, hexDigits[(trail >> 8) & 15])"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, hexDigits[(trail >> 4) & 15])"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, hexDigits[(trail ) & 15])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if((sizeof(Ch) == 1 || static_cast<unsigned>(c) < 256) && RAPIDJSON_UNLIKELY(escape[static_cast<unsigned char>(c)]))"
  },
  {
    "label": "Take()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "Take()"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, static_cast<typename OutputStream::Ch>(escape[static_cast<unsigned char>(c)]))"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, '0')"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, hexDigits[static_cast<unsigned char>(c) >> 4])"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutUnsafe(*os_, hexDigits[static_cast<unsigned char>(c) & 0xF])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(RAPIDJSON_UNLIKELY(!(writeFlags & kWriteValidateEncodingFlag ? Transcoder<SourceEncoding, TargetEncoding>::Validate(is, *os_) : Transcoder<SourceEncoding, TargetEncoding>::TranscodeUnsafe(is, *os_))))"
  },
  {
    "label": "WriteStartObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WriteStartObject()"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (os_ ->)",
    "insertText": "Put('{')"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (os_ ->)",
    "insertText": "Put('}')"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (os_ ->)",
    "insertText": "Put('[')"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (os_ ->)",
    "insertText": "Put(']')"
  },
  {
    "label": "PutReserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutReserve(*os_, length)"
  },
  {
    "label": "is()",
    "kind": "Method",
    "detail": "Function (GenericStringStream<SourceEncoding>)",
    "insertText": "is(json)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(is.Peek() != '\\0')"
  },
  {
    "label": "Prefix()",
    "kind": "Method",
    "detail": "Function (} return true ; } void)",
    "insertText": "Prefix(Type type)"
  },
  {
    "label": "Level()",
    "kind": "Method",
    "detail": "Function (Level* level = level_stack_ . template Top<)",
    "insertText": "Level()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!level->inArray && level->valueCount % 2 == 0) RAPIDJSON_ASSERT(type == kStringType)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (level -> valueCount + + ; } else {)",
    "insertText": "RAPIDJSON_ASSERT(!hasRoot_)"
  },
  {
    "label": "EndValue()",
    "kind": "Method",
    "detail": "Function (hasRoot_ = true ; } } bool)",
    "insertText": "EndValue(bool ret)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Writer&)",
    "insertText": "operator(const Writer&)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (char* buffer = os_ ->)",
    "insertText": "Push(11)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (os_ ->)",
    "insertText": "Pop(static_cast<size_t>(11 - (end - buffer)))"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (char* buffer = os_ ->)",
    "insertText": "Push(10)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (os_ ->)",
    "insertText": "Pop(static_cast<size_t>(10 - (end - buffer)))"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (char* buffer = os_ ->)",
    "insertText": "Push(21)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (os_ ->)",
    "insertText": "Pop(static_cast<size_t>(21 - (end - buffer)))"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (char* buffer = os_ ->)",
    "insertText": "Push(20)"
  },
  {
    "label": "u64toa()",
    "kind": "Method",
    "detail": "Function (const char* end =)",
    "insertText": "u64toa(u, buffer)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (os_ ->)",
    "insertText": "Pop(static_cast<size_t>(20 - (end - buffer)))"
  },
  {
    "label": "dtoa()",
    "kind": "Method",
    "detail": "Function (char* end =)",
    "insertText": "dtoa(d, buffer, maxDecimalPlaces_)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (os_ ->)",
    "insertText": "Pop(static_cast<size_t>(25 - (end - buffer)))"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const char* p = is . src_ ; const char* end = is . head_ + length ; const char* nextAligned = reinterpret_cast<const)",
    "insertText": "char((reinterpret_cast<size_t>(p) + 15) & static_cast<size_t>(~15))"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const char* endAligned = reinterpret_cast<const)",
    "insertText": "char(reinterpret_cast<size_t>(end) & static_cast<size_t>(~15))"
  },
  {
    "label": "RAPIDJSON_LIKELY()",
    "kind": "Method",
    "detail": "Function (is . src_ = p ; return)",
    "insertText": "RAPIDJSON_LIKELY(is.Tell() < length)"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (} else os_ ->)",
    "insertText": "PutUnsafe(*p++)"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (const char dquote [ 1 6 ] = { ' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ' } ; const char bslash [ 1 6 ] = { ' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ' } ; const char space [ 1 6 ] = { 0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F } ; const __m128i dq =)",
    "insertText": "_mm_loadu_si128(reinterpret_cast<const __m128i *>(&dquote[0]))"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i bs =)",
    "insertText": "_mm_loadu_si128(reinterpret_cast<const __m128i *>(&bslash[0]))"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i sp =)",
    "insertText": "_mm_loadu_si128(reinterpret_cast<const __m128i *>(&space[0]))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i s =)",
    "insertText": "_mm_load_si128(reinterpret_cast<const __m128i *>(p))"
  },
  {
    "label": "_mm_cmpeq_epi8()",
    "kind": "Method",
    "detail": "Function (const __m128i t1 =)",
    "insertText": "_mm_cmpeq_epi8(s, dq)"
  },
  {
    "label": "_mm_cmpeq_epi8()",
    "kind": "Method",
    "detail": "Function (const __m128i t2 =)",
    "insertText": "_mm_cmpeq_epi8(s, bs)"
  },
  {
    "label": "_mm_cmpeq_epi8()",
    "kind": "Method",
    "detail": "Function (const __m128i t3 =)",
    "insertText": "_mm_cmpeq_epi8(_mm_max_epu8(s, sp), sp)"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i x =)",
    "insertText": "_mm_or_si128(_mm_or_si128(t1, t2), t3)"
  },
  {
    "label": "short()",
    "kind": "Method",
    "detail": "Function (unsigned short r = static_cast<unsigned)",
    "insertText": "short(_mm_movemask_epi8(x))"
  },
  {
    "label": "_BitScanForward()",
    "kind": "Method",
    "detail": "Function (SizeType len ; # ifdef _MSC_VER unsigned long offset ;)",
    "insertText": "_BitScanForward(&offset, r)"
  },
  {
    "label": "SizeType()",
    "kind": "Method",
    "detail": "Function (len = offset ; # else len = static_cast<)",
    "insertText": "SizeType(__builtin_ffs(r) - 1)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (# endif char* q = reinterpret_cast<)",
    "insertText": "char(os_->PushUnsafe(len))"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (p + = len ; break ; })",
    "insertText": "_mm_storeu_si128(reinterpret_cast<__m128i *>(os_->PushUnsafe(16)), s)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "defined(RAPIDJSON_NEON) template<> inline bool Writer<StringBuffer>::ScanWriteUnescapedString(StringStream& is, size_t length)"
  },
  {
    "label": "vmovq_n_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x16_t s0 =)",
    "insertText": "vmovq_n_u8('\"')"
  },
  {
    "label": "vmovq_n_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x16_t s1 =)",
    "insertText": "vmovq_n_u8('\\\\')"
  },
  {
    "label": "vmovq_n_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x16_t s2 =)",
    "insertText": "vmovq_n_u8('\\b')"
  },
  {
    "label": "vmovq_n_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x16_t s3 =)",
    "insertText": "vmovq_n_u8(32)"
  },
  {
    "label": "vld1q_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x16_t s =)",
    "insertText": "vld1q_u8(reinterpret_cast<const uint8_t *>(p))"
  },
  {
    "label": "vceqq_u8()",
    "kind": "Method",
    "detail": "Function (uint8x16_t x =)",
    "insertText": "vceqq_u8(s, s0)"
  },
  {
    "label": "vorrq_u8()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vorrq_u8(x, vceqq_u8(s, s1))"
  },
  {
    "label": "vorrq_u8()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vorrq_u8(x, vceqq_u8(s, s2))"
  },
  {
    "label": "vorrq_u8()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vorrq_u8(x, vcltq_u8(s, s3))"
  },
  {
    "label": "vrev64q_u8()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vrev64q_u8(x)"
  },
  {
    "label": "vgetq_lane_u64()",
    "kind": "Method",
    "detail": "Function (uint64_t low =)",
    "insertText": "vgetq_lane_u64(vreinterpretq_u64_u8(x), 0)"
  },
  {
    "label": "vgetq_lane_u64()",
    "kind": "Method",
    "detail": "Function (uint64_t high =)",
    "insertText": "vgetq_lane_u64(vreinterpretq_u64_u8(x), 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SizeType len = 0 ; bool escaped = false ;)",
    "insertText": "if(low == 0)"
  },
  {
    "label": "clzll()",
    "kind": "Method",
    "detail": "Function (uint32_t lz =)",
    "insertText": "clzll(high)"
  },
  {
    "label": "len()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "len(lz >> 3)"
  },
  {
    "label": "clzll()",
    "kind": "Method",
    "detail": "Function (escaped = true ; } } else { uint32_t lz =)",
    "insertText": "clzll(low)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (len = lz>> 3 ; escaped = true ; })",
    "insertText": "if(RAPIDJSON_UNLIKELY(escaped))"
  },
  {
    "label": "vst1q_u8()",
    "kind": "Method",
    "detail": "Function (p + = len ; break ; })",
    "insertText": "vst1q_u8(reinterpret_cast<uint8_t *>(os_->PushUnsafe(16)), s)"
  }
]