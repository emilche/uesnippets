[
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "MVT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MVT"
  },
  {
    "label": "SimpleValueType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SimpleValueType"
  },
  {
    "label": "mvt_iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mvt_iterator"
  },
  {
    "label": "MVT()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINEVALUETYPE_H # define LLVM_CODEGEN_MACHINEVALUETYPE_H # include \" llvm / ADT / iterator_range . h \" # include \" llvm / Support / ErrorHandling . h \" # include \" llvm / Support / MathExtras . h \" namespace llvm { class Type ; class MVT { public : enum SimpleValueType { INVALID_SIMPLE_VALUE_TYPE = - 1,Other = 0,i1 = 1,i8 = 2,i16 = 3,i32 = 4,i64 = 5,i128 = 6,FIRST_INTEGER_VALUETYPE = i1,LAST_INTEGER_VALUETYPE = i128,f16 = 7,f32 = 8,f64 = 9,f80 = 1 0,f128 = 1 1,ppcf128 = 1 2,FIRST_FP_VALUETYPE = f16,LAST_FP_VALUETYPE = ppcf128,v2i1 = 1 3,v4i1 = 1 4,v8i1 = 1 5,v16i1 = 1 6,v32i1 = 1 7,v64i1 = 1 8,v1i8 = 1 9,v2i8 = 2 0,v4i8 = 2 1,v8i8 = 2 2,v16i8 = 2 3,v32i8 = 2 4,v64i8 = 2 5,v1i16 = 2 6,v2i16 = 2 7,v4i16 = 2 8,v8i16 = 2 9,v16i16 = 3 0,v32i16 = 3 1,v1i32 = 3 2,v2i32 = 3 3,v4i32 = 3 4,v8i32 = 3 5,v16i32 = 3 6,v1i64 = 3 7,v2i64 = 3 8,v4i64 = 3 9,v8i64 = 4 0,v16i64 = 4 1,v1i128 = 4 2,FIRST_INTEGER_VECTOR_VALUETYPE = v2i1,LAST_INTEGER_VECTOR_VALUETYPE = v1i128,v2f16 = 4 3,v4f16 = 4 4,v8f16 = 4 5,v1f32 = 4 6,v2f32 = 4 7,v4f32 = 4 8,v8f32 = 4 9,v16f32 = 5 0,v1f64 = 5 1,v2f64 = 5 2,v4f64 = 5 3,v8f64 = 5 4,FIRST_FP_VECTOR_VALUETYPE = v2f16,LAST_FP_VECTOR_VALUETYPE = v8f64,FIRST_VECTOR_VALUETYPE = v2i1,LAST_VECTOR_VALUETYPE = v8f64,x86mmx = 5 5,Glue = 5 6,isVoid = 5 7,Untyped = 5 8,FIRST_VALUETYPE = 0,LAST_VALUETYPE = 5 9,MAX_ALLOWED_VALUETYPE = 6 4,Metadata = 2 5 0,iPTRAny = 2 5 1,vAny = 2 5 2,fAny = 2 5 3,iAny = 2 5 4,iPTR = 2 5 5,Any = 2 5 6 } ; SimpleValueType SimpleTy ; LLVM_CONSTEXPR)",
    "insertText": "MVT() : SimpleTy(INVALID_SIMPLE_VALUE_TYPE)"
  },
  {
    "label": "MVT()",
    "kind": "Method",
    "detail": "Function (} LLVM_CONSTEXPR)",
    "insertText": "MVT(SimpleValueType SVT) : SimpleTy(SVT)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const MVT& S)"
  },
  {
    "label": "isFloatingPoint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isFloatingPoint()"
  },
  {
    "label": "isInteger()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isInteger()"
  },
  {
    "label": "isVector()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isVector()"
  },
  {
    "label": "is16BitVector()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is16BitVector()"
  },
  {
    "label": "is32BitVector()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is32BitVector()"
  },
  {
    "label": "is64BitVector()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is64BitVector()"
  },
  {
    "label": "is128BitVector()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is128BitVector()"
  },
  {
    "label": "is256BitVector()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is256BitVector()"
  },
  {
    "label": "is512BitVector()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is512BitVector()"
  },
  {
    "label": "is1024BitVector()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is1024BitVector()"
  },
  {
    "label": "isOverloaded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOverloaded()"
  },
  {
    "label": "isPow2VectorType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPow2VectorType()"
  },
  {
    "label": "getVectorNumElements()",
    "kind": "Method",
    "detail": "Function (unsigned NElts =)",
    "insertText": "getVectorNumElements()"
  },
  {
    "label": "getPow2VectorType()",
    "kind": "Method",
    "detail": "Function (} MVT)",
    "insertText": "getPow2VectorType()"
  },
  {
    "label": "Log2_32_Ceil()",
    "kind": "Method",
    "detail": "Function (unsigned Pow2NElts = 1<<)",
    "insertText": "Log2_32_Ceil(NElts)"
  },
  {
    "label": "getScalarType()",
    "kind": "Method",
    "detail": "Function (} MVT)",
    "insertText": "getScalarType()"
  },
  {
    "label": "getVectorElementType()",
    "kind": "Method",
    "detail": "Function (} MVT)",
    "insertText": "getVectorElementType()"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "llvm_unreachable(\"Not a vector MVT!\")"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "llvm_unreachable(\"getSizeInBits called on extended MVT.\")"
  },
  {
    "label": "getStoreSize()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getStoreSize()"
  },
  {
    "label": "getStoreSizeInBits()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getStoreSizeInBits()"
  },
  {
    "label": "bitsGT()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "bitsGT(MVT VT)"
  },
  {
    "label": "bitsGE()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "bitsGE(MVT VT)"
  },
  {
    "label": "bitsLT()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "bitsLT(MVT VT)"
  },
  {
    "label": "bitsLE()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "bitsLE(MVT VT)"
  },
  {
    "label": "getFloatingPointVT()",
    "kind": "Method",
    "detail": "Function (} MVT)",
    "insertText": "getFloatingPointVT(unsigned BitWidth)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "llvm_unreachable(\"Bad bit width!\")"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "return(MVT::SimpleValueType)(MVT::INVALID_SIMPLE_VALUE_TYPE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (default : break ; case MVT::i1 :)",
    "insertText": "if(NumElements == 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; case MVT::i8 :)",
    "insertText": "if(NumElements == 1)"
  },
  {
    "label": "getVT()",
    "kind": "Method",
    "detail": "Function (} MVT)",
    "insertText": "getVT(Type *Ty, bool HandleUnknown = false)"
  },
  {
    "label": "mvt_iterator()",
    "kind": "Method",
    "detail": "Function (private : struct mvt_iterator { SimpleValueType VT ;)",
    "insertText": "mvt_iterator(SimpleValueType VT) : VT(VT)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} MVT)",
    "insertText": "operator()"
  },
  {
    "label": "VT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VT(MVT::SimpleValueType)((int)VT + 1)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((int)VT <= MVT::MAX_ALLOWED_VALUETYPE && \"MVT iterator overflowed.\")"
  },
  {
    "label": "integer_valuetypes()",
    "kind": "Method",
    "detail": "Function (} mvt_range)",
    "insertText": "integer_valuetypes()"
  },
  {
    "label": "fp_valuetypes()",
    "kind": "Method",
    "detail": "Function (} mvt_range)",
    "insertText": "fp_valuetypes()"
  },
  {
    "label": "vector_valuetypes()",
    "kind": "Method",
    "detail": "Function (} mvt_range)",
    "insertText": "vector_valuetypes()"
  },
  {
    "label": "integer_vector_valuetypes()",
    "kind": "Method",
    "detail": "Function (} mvt_range)",
    "insertText": "integer_vector_valuetypes()"
  },
  {
    "label": "fp_vector_valuetypes()",
    "kind": "Method",
    "detail": "Function (} mvt_range)",
    "insertText": "fp_vector_valuetypes()"
  }
]