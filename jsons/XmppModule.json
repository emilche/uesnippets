[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "IXmppConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IXmppConnection"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FXmppModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXmppModule"
  },
  {
    "label": "Exec_Runtime()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / Ticker . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" Misc / CoreMisc . h \" # include \" Modules / ModuleInterface . h \" # include \" Templates / SharedPointer . h \" # include \" XmppConnection . h \" # include \" XmppMultiUserChat . h \" class Error ; class FOutputDevice ; class IXmppConnection ; class UWorld ; class FXmppModule : public IModuleInterface,public FSelfRegisteringExec,public FTSTickerObjectBase { protected : bool)",
    "insertText": "Exec_Runtime(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleXmppCommand()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "HandleXmppCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FXmppModule&)",
    "insertText": "Get()"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "CreateConnection()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class IXmppConnection>)",
    "insertText": "CreateConnection(const FString& UserId)"
  },
  {
    "label": "GetConnection()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class IXmppConnection>)",
    "insertText": "GetConnection(const FString& UserId)"
  },
  {
    "label": "RemoveConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConnection(const FString& UserId)"
  },
  {
    "label": "ProcessPendingRemovals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPendingRemovals()"
  },
  {
    "label": "RemoveConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConnection(const TSharedRef<class IXmppConnection>& Connection)"
  },
  {
    "label": "IsXmppEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsXmppEnabled()"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(FXmppModule, FOnXmppConnectionAcquired, const TSharedRef<IXmppConnection>& , const FString&)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (FOnXmppConnectionAcquired OnXmppConnectionAcquired ;)",
    "insertText": "DECLARE_EVENT_TwoParams(FXmppModule, FOnXmppConnectionRelinquished, const TSharedRef<IXmppConnection>& , const FString&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnXmppConnectionRelinquished OnXmppConnectionRelinquished ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnXmppConnectionCreated, const TSharedRef<IXmppConnection>&)"
  },
  {
    "label": "OnXmppRoomCreated()",
    "kind": "Method",
    "detail": "Function (FOnXmppConnectionCreated OnXmppConnectionCreated ; private : void)",
    "insertText": "OnXmppRoomCreated(const TSharedRef<IXmppConnection>& Connection, bool bSuccess, const FXmppRoomId& RoomId, const FString& Error)"
  },
  {
    "label": "OnXmppRoomConfigured()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnXmppRoomConfigured(const TSharedRef<IXmppConnection>& Connection, bool bSuccess, const FXmppRoomId& RoomId, const FString& Error)"
  },
  {
    "label": "StartupModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartupModule()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "CleanupConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupConnection(const TSharedRef<class IXmppConnection>& Connection)"
  }
]