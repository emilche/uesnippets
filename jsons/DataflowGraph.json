[
  {
    "label": "FDataflowConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowConnection"
  },
  {
    "label": "FLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLink"
  },
  {
    "label": "FGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraph"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FLink()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / ChaosArchive . h \" # include \" Dataflow / DataflowNode . h \" # include \" Dataflow / DataflowTerminalNode . h \" # include \" Serialization / Archive . h \" struct FDataflowConnection ; namespace UE::Dataflow { struct FLink { FGuid InputNode ; FGuid Input ; FGuid OutputNode ; FGuid Output ;)",
    "insertText": "FLink()"
  },
  {
    "label": "FLink()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLink(FGuid InOutputNode, FGuid InOutput, FGuid InInputNode, FGuid InInput) : InputNode(InInputNode), Input(InInput) , OutputNode(InOutputNode), Output(InOutput)"
  },
  {
    "label": "FLink()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLink(const FLink& Other) : InputNode(Other.InputNode), Input(Other.Input) , OutputNode(Other.OutputNode), Output(Other.Output)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FLink& Other)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const FLink& Other)"
  },
  {
    "label": "FGraph()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FGraph(FGuid InGuid = FGuid::NewGuid())"
  },
  {
    "label": "FGraph()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FGraph()"
  },
  {
    "label": "GetFilteredNodes()",
    "kind": "Method",
    "detail": "Function (} const TArray<TSharedPtr<FDataflowNode>>&)",
    "insertText": "GetFilteredNodes(const FName& NodeFilter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FDataflowNode>> EmptyNodes ;)",
    "insertText": "if(const TArray< TSharedPtr<FDataflowNode> >* FoundNodes = FilteredNodes.Find(NodeFilter))"
  },
  {
    "label": "AddNode()",
    "kind": "Method",
    "detail": "Function (} template<class T> TSharedPtr<T>)",
    "insertText": "AddNode(T* InNode)"
  },
  {
    "label": "NewNode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<T>)",
    "insertText": "NewNode(InNode)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "AddUnique(NewNode)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FilteredNodes .)",
    "insertText": "FindOrAdd(RegisteredType).Add(NewNode)"
  },
  {
    "label": "AddNode()",
    "kind": "Method",
    "detail": "Function (} } return NewNode ; } template<class T> TSharedPtr<T>)",
    "insertText": "AddNode(TUniquePtr<T> &&InNode)"
  },
  {
    "label": "NewNode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<T>)",
    "insertText": "NewNode(InNode.Release())"
  },
  {
    "label": "FindBaseNode()",
    "kind": "Method",
    "detail": "Function (} } return NewNode ; } TSharedPtr<FDataflowNode>)",
    "insertText": "FindBaseNode(FGuid InGuid)"
  },
  {
    "label": "FindBaseNode()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FDataflowNode>)",
    "insertText": "FindBaseNode(FName InName)"
  },
  {
    "label": "FindFilteredNode()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FDataflowNode>)",
    "insertText": "FindFilteredNode(const FName& NodeFilter, FName InName)"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveNode(TSharedPtr<FDataflowNode> Node)"
  },
  {
    "label": "GetConnections()",
    "kind": "Method",
    "detail": "Function (const TArray<FLink>&)",
    "insertText": "GetConnections()"
  },
  {
    "label": "ClearConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearConnections(FDataflowInput* Input)"
  },
  {
    "label": "ClearConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearConnections(FDataflowOutput* Output)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Connect(FDataflowOutput* OutputConnection, FDataflowInput* InputConnection)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect(FDataflowOutput* OutputConnection, FDataflowInput* InputConnection)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, UObject* OwningObject)"
  },
  {
    "label": "GetDisabledNodes()",
    "kind": "Method",
    "detail": "Function (const TSet<FName>&)",
    "insertText": "GetDisabledNodes()"
  },
  {
    "label": "SerializeForLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeForLoading(FArchive& Ar, FGraph* InGraph, UObject* OwningObject)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Reset()"
  },
  {
    "label": "RegisterNodeFilter()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "RegisterNodeFilter(const FName& NodeFilter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, UE::Dataflow::FLink& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Value . InputNode<<Value . OutputNode<<Value . Input<<Value . Output ; return Ar ; } FArchive&)",
    "insertText": "operator(Chaos::FChaosArchive& Ar, UE::Dataflow::FLink& Value)"
  }
]