[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInputRayHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputRayHit"
  },
  {
    "label": "FDeviceButtonState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeviceButtonState"
  },
  {
    "label": "FKeyboardInputDeviceState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyboardInputDeviceState"
  },
  {
    "label": "FMouseInputDeviceState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMouseInputDeviceState"
  },
  {
    "label": "FInputDeviceState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputDeviceState"
  },
  {
    "label": "FInputDeviceRay",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputDeviceRay"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Math / NumericLimits . h \" # include \" Math / Ray . h \" # include \" Math / UnrealMath . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" InputState . generated . h \" class UObject ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0,Keyboard = 1,Mouse = 2,Gamepad = 4,OculusTouch = 8,HTCViveWands = 1 6,AnySpatialDevice = OculusTouch | HTCViveWands,TabletFingers = 1 0 2 4 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EInputDevices)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(BlueprintReadWrite, Category = InputRayHit)"
  },
  {
    "label": "SetHitObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHitObject(UObject* InHitObject)"
  },
  {
    "label": "FInputRayHit()",
    "kind": "Method",
    "detail": "Function (HitObject = InHitObject ; HitOwner = InHitObject ; })",
    "insertText": "FInputRayHit()"
  },
  {
    "label": "HitDepth()",
    "kind": "Method",
    "detail": "Function (bHit = false ;)",
    "insertText": "HitDepth(double)TNumericLimits<float>::Max()"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (HitNormal =)",
    "insertText": "FVector(0, 0, 1)"
  },
  {
    "label": "FInputRayHit()",
    "kind": "Method",
    "detail": "Function (bHasHitNormal = false ; HitIdentifier = 0 ; HitOwner = nullptr ; HitObject = nullptr ; })",
    "insertText": "FInputRayHit(double HitDepthIn)"
  },
  {
    "label": "FInputRayHit()",
    "kind": "Method",
    "detail": "Function (bHasHitNormal = false ; HitIdentifier = 0 ; HitOwner = nullptr ; HitObject = nullptr ; })",
    "insertText": "FInputRayHit(double HitDepthIn, const FVector& HitNormalIn)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(transient, BlueprintReadWrite, Category = DeviceButtonState)"
  },
  {
    "label": "FDeviceButtonState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDeviceButtonState()"
  },
  {
    "label": "FKey()",
    "kind": "Method",
    "detail": "Function (Button =)",
    "insertText": "FKey()"
  },
  {
    "label": "FDeviceButtonState()",
    "kind": "Method",
    "detail": "Function (bPressed = bDown = bReleased = bDoubleClicked = false ; })",
    "insertText": "FDeviceButtonState(const FKey& ButtonIn)"
  },
  {
    "label": "SetStates()",
    "kind": "Method",
    "detail": "Function (Button = ButtonIn ; bPressed = bDown = bReleased = bDoubleClicked = false ; } void)",
    "insertText": "SetStates(bool bPressedIn, bool bDownIn, bool bReleasedIn, bool bDoubleClickedIn = false)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(transient, BlueprintReadWrite, Category = KeyboardInputDeviceState)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(transient, BlueprintReadWrite, Category = MouseInputDeviceState)"
  },
  {
    "label": "FMouseInputDeviceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMouseInputDeviceState()"
  },
  {
    "label": "FDeviceButtonState()",
    "kind": "Method",
    "detail": "Function (Left =)",
    "insertText": "FDeviceButtonState(EKeys::LeftMouseButton)"
  },
  {
    "label": "FDeviceButtonState()",
    "kind": "Method",
    "detail": "Function (Middle =)",
    "insertText": "FDeviceButtonState(EKeys::MiddleMouseButton)"
  },
  {
    "label": "FDeviceButtonState()",
    "kind": "Method",
    "detail": "Function (Right =)",
    "insertText": "FDeviceButtonState(EKeys::RightMouseButton)"
  },
  {
    "label": "FRay()",
    "kind": "Method",
    "detail": "Function (WheelDelta = false ; Position2D = FVector2D::ZeroVector ; Delta2D = FVector2D::ZeroVector ; WorldRay =)",
    "insertText": "FRay()"
  },
  {
    "label": "FInputDeviceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInputDeviceState()"
  },
  {
    "label": "FKeyboardInputDeviceState()",
    "kind": "Method",
    "detail": "Function (InputDevice = EInputDevices::None ; bShiftKeyDown = bAltKeyDown = bCtrlKeyDown = bCmdKeyDown = false ; Keyboard =)",
    "insertText": "FKeyboardInputDeviceState()"
  },
  {
    "label": "SetModifierKeyStates()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetModifierKeyStates(bool bShiftDown, bool bAltDown, bool bCtrlDown, bool bCmdDown)"
  },
  {
    "label": "IsFromDevice()",
    "kind": "Method",
    "detail": "Function (bShiftKeyDown = bShiftDown ; bAltKeyDown = bAltDown ; bCtrlKeyDown = bCtrlDown ; bCmdKeyDown = bCmdDown ; } bool)",
    "insertText": "IsFromDevice(EInputDevices DeviceType)"
  },
  {
    "label": "IsShiftKeyDown()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsShiftKeyDown(const FInputDeviceState& InputState)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(transient, BlueprintReadWrite, Category = InputDeviceRay)"
  },
  {
    "label": "FInputDeviceRay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInputDeviceRay()"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (bHas2D = false ; ScreenPosition =)",
    "insertText": "FVector2D(0, 0)"
  },
  {
    "label": "FInputDeviceRay()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputDeviceRay(const FRay& WorldRayIn)"
  },
  {
    "label": "FInputDeviceRay()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputDeviceRay(const FRay& WorldRayIn, const FVector2D& ScreenPositionIn)"
  },
  {
    "label": "FInputDeviceRay()",
    "kind": "Method",
    "detail": "Function (WorldRay = WorldRayIn ; bHas2D = true ; ScreenPosition = ScreenPositionIn ; })",
    "insertText": "FInputDeviceRay(const FInputDeviceState& Input)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (WorldRay = Input . Mouse . WorldRay ; bHas2D = true ; ScreenPosition = Input . Mouse . Position2D ; } else {)",
    "insertText": "ensure(false)"
  },
  {
    "label": "FRay()",
    "kind": "Method",
    "detail": "Function (WorldRay =)",
    "insertText": "FRay(FVector::ZeroVector, FVector(0, 0, 1), true)"
  }
]