[
  {
    "label": "StringEnumeration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringEnumeration"
  },
  {
    "label": "UnicodeString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnicodeString"
  },
  {
    "label": "U_COMMON_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_COMMON_API"
  },
  {
    "label": "ELocaleType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELocaleType"
  },
  {
    "label": "locale_available_init()",
    "kind": "Method",
    "detail": "Function (# ifndef LOCID_H # define LOCID_H # include \" unicode / bytestream . h \" # include \" unicode / localpointer . h \" # include \" unicode / strenum . h \" # include \" unicode / stringpiece . h \" # include \" unicode / utypes . h \" # include \" unicode / uobject . h \" # include \" unicode / putil . h \" # include \" unicode / uloc . h \" U_NAMESPACE_BEGIN void U_CALLCONV)",
    "insertText": "locale_available_init()"
  },
  {
    "label": "getRoot()",
    "kind": "Method",
    "detail": "Function (class StringEnumeration ; class UnicodeString ; class Locale : public UObject { public : const Locale& U_EXPORT2)",
    "insertText": "getRoot(void)"
  },
  {
    "label": "getEnglish()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getEnglish(void)"
  },
  {
    "label": "getFrench()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getFrench(void)"
  },
  {
    "label": "getGerman()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getGerman(void)"
  },
  {
    "label": "getItalian()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getItalian(void)"
  },
  {
    "label": "getJapanese()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getJapanese(void)"
  },
  {
    "label": "getKorean()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getKorean(void)"
  },
  {
    "label": "getChinese()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getChinese(void)"
  },
  {
    "label": "getSimplifiedChinese()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getSimplifiedChinese(void)"
  },
  {
    "label": "getTraditionalChinese()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getTraditionalChinese(void)"
  },
  {
    "label": "getFrance()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getFrance(void)"
  },
  {
    "label": "getGermany()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getGermany(void)"
  },
  {
    "label": "getItaly()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getItaly(void)"
  },
  {
    "label": "getJapan()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getJapan(void)"
  },
  {
    "label": "getKorea()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getKorea(void)"
  },
  {
    "label": "getChina()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getChina(void)"
  },
  {
    "label": "getPRC()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getPRC(void)"
  },
  {
    "label": "getTaiwan()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getTaiwan(void)"
  },
  {
    "label": "getUK()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getUK(void)"
  },
  {
    "label": "getUS()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getUS(void)"
  },
  {
    "label": "getCanada()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getCanada(void)"
  },
  {
    "label": "getCanadaFrench()",
    "kind": "Method",
    "detail": "Function (const Locale& U_EXPORT2)",
    "insertText": "getCanadaFrench(void)"
  },
  {
    "label": "Locale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Locale()"
  },
  {
    "label": "Locale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Locale(const char * language, const char * country = 0, const char * variant = 0, const char * keywordsAndValues = 0)"
  },
  {
    "label": "Locale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Locale(const Locale& other)"
  },
  {
    "label": "Locale()",
    "kind": "Method",
    "detail": "Function (# ifndef)",
    "insertText": "Locale(Locale&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Locale&)",
    "insertText": "operator(const Locale& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef Locale&)",
    "insertText": "operator(Locale&& other)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Locale*)",
    "insertText": "clone()"
  },
  {
    "label": "getDefault()",
    "kind": "Method",
    "detail": "Function (# ifndef const Locale& U_EXPORT2)",
    "insertText": "getDefault(void)"
  },
  {
    "label": "setDefault()",
    "kind": "Method",
    "detail": "Function (void U_EXPORT2)",
    "insertText": "setDefault(const Locale& newLocale, UErrorCode& success)"
  },
  {
    "label": "forLanguageTag()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef Locale U_EXPORT2)",
    "insertText": "forLanguageTag(StringPiece tag, UErrorCode& status)"
  },
  {
    "label": "toLanguageTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toLanguageTag(ByteSink& sink, UErrorCode& status)"
  },
  {
    "label": "toLanguageTag()",
    "kind": "Method",
    "detail": "Function (template<StringClass> StringClass)",
    "insertText": "toLanguageTag(UErrorCode& status)"
  },
  {
    "label": "createFromName()",
    "kind": "Method",
    "detail": "Function (# endif Locale U_EXPORT2)",
    "insertText": "createFromName(const char *name)"
  },
  {
    "label": "createCanonical()",
    "kind": "Method",
    "detail": "Function (Locale U_EXPORT2)",
    "insertText": "createCanonical(const char* name)"
  },
  {
    "label": "getLanguage()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getLanguage()"
  },
  {
    "label": "getScript()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getScript()"
  },
  {
    "label": "getCountry()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getCountry()"
  },
  {
    "label": "getVariant()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getVariant()"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getName()"
  },
  {
    "label": "getBaseName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getBaseName()"
  },
  {
    "label": "addLikelySubtags()",
    "kind": "Method",
    "detail": "Function (# ifndef void)",
    "insertText": "addLikelySubtags(UErrorCode& status)"
  },
  {
    "label": "minimizeSubtags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "minimizeSubtags(UErrorCode& status)"
  },
  {
    "label": "createKeywords()",
    "kind": "Method",
    "detail": "Function (# endif StringEnumeration*)",
    "insertText": "createKeywords(UErrorCode &status)"
  },
  {
    "label": "createUnicodeKeywords()",
    "kind": "Method",
    "detail": "Function (# ifndef StringEnumeration*)",
    "insertText": "createUnicodeKeywords(UErrorCode &status)"
  },
  {
    "label": "getKeywords()",
    "kind": "Method",
    "detail": "Function (template<StringClass,OutputIterator> void)",
    "insertText": "getKeywords(OutputIterator iterator, UErrorCode& status)"
  },
  {
    "label": "getUnicodeKeywords()",
    "kind": "Method",
    "detail": "Function (template<StringClass,OutputIterator> void)",
    "insertText": "getUnicodeKeywords(OutputIterator iterator, UErrorCode& status)"
  },
  {
    "label": "getKeywordValue()",
    "kind": "Method",
    "detail": "Function (# endif int32_t)",
    "insertText": "getKeywordValue(const char* keywordName, char *buffer, int32_t bufferCapacity, UErrorCode &status)"
  },
  {
    "label": "getKeywordValue()",
    "kind": "Method",
    "detail": "Function (# ifndef void)",
    "insertText": "getKeywordValue(StringPiece keywordName, ByteSink& sink, UErrorCode& status)"
  },
  {
    "label": "getKeywordValue()",
    "kind": "Method",
    "detail": "Function (template<StringClass> StringClass)",
    "insertText": "getKeywordValue(StringPiece keywordName, UErrorCode& status)"
  },
  {
    "label": "getUnicodeKeywordValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getUnicodeKeywordValue(StringPiece keywordName, ByteSink& sink, UErrorCode& status)"
  },
  {
    "label": "getUnicodeKeywordValue()",
    "kind": "Method",
    "detail": "Function (template<StringClass> StringClass)",
    "insertText": "getUnicodeKeywordValue(StringPiece keywordName, UErrorCode& status)"
  },
  {
    "label": "setKeywordValue()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "setKeywordValue(const char* keywordName, const char* keywordValue, UErrorCode &status)"
  },
  {
    "label": "setKeywordValue()",
    "kind": "Method",
    "detail": "Function (# ifndef void)",
    "insertText": "setKeywordValue(StringPiece keywordName, StringPiece keywordValue, UErrorCode& status)"
  },
  {
    "label": "setUnicodeKeywordValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setUnicodeKeywordValue(StringPiece keywordName, StringPiece keywordValue, UErrorCode& status)"
  },
  {
    "label": "getISO3Language()",
    "kind": "Method",
    "detail": "Function (# endif const char*)",
    "insertText": "getISO3Language()"
  },
  {
    "label": "getISO3Country()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getISO3Country()"
  },
  {
    "label": "getLCID()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getLCID(void)"
  },
  {
    "label": "isRightToLeft()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isRightToLeft()"
  },
  {
    "label": "getDisplayLanguage()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getDisplayLanguage(UnicodeString& dispLang)"
  },
  {
    "label": "getDisplayLanguage()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getDisplayLanguage(const Locale& displayLocale, UnicodeString& dispLang)"
  },
  {
    "label": "getDisplayScript()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getDisplayScript(UnicodeString& dispScript)"
  },
  {
    "label": "getDisplayScript()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getDisplayScript(const Locale& displayLocale, UnicodeString& dispScript)"
  },
  {
    "label": "getDisplayCountry()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getDisplayCountry(UnicodeString& dispCountry)"
  },
  {
    "label": "getDisplayCountry()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getDisplayCountry(const Locale& displayLocale, UnicodeString& dispCountry)"
  },
  {
    "label": "getDisplayVariant()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getDisplayVariant(UnicodeString& dispVar)"
  },
  {
    "label": "getDisplayVariant()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getDisplayVariant(const Locale& displayLocale, UnicodeString& dispVar)"
  },
  {
    "label": "getDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getDisplayName(UnicodeString& name)"
  },
  {
    "label": "getDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getDisplayName(const Locale& displayLocale, UnicodeString& name)"
  },
  {
    "label": "hashCode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "hashCode(void)"
  },
  {
    "label": "setToBogus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setToBogus()"
  },
  {
    "label": "isBogus()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isBogus(void)"
  },
  {
    "label": "getAvailableLocales()",
    "kind": "Method",
    "detail": "Function (const Locale* U_EXPORT2)",
    "insertText": "getAvailableLocales(int32_t& count)"
  },
  {
    "label": "getISOCountries()",
    "kind": "Method",
    "detail": "Function (const char* const* U_EXPORT2)",
    "insertText": "getISOCountries()"
  },
  {
    "label": "getISOLanguages()",
    "kind": "Method",
    "detail": "Function (const char* const* U_EXPORT2)",
    "insertText": "getISOLanguages()"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID()"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID()"
  },
  {
    "label": "setFromPOSIXID()",
    "kind": "Method",
    "detail": "Function (protected : # ifndef void)",
    "insertText": "setFromPOSIXID(const char *posixID)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (# endif private : Locale&)",
    "insertText": "init(const char* cLocaleID, UBool canonicalize)"
  },
  {
    "label": "Locale()",
    "kind": "Method",
    "detail": "Function (enum ELocaleType { eBOGUS } ;)",
    "insertText": "Locale(ELocaleType)"
  },
  {
    "label": "getLocaleCache()",
    "kind": "Method",
    "detail": "Function (Locale*)",
    "insertText": "getLocaleCache(void)"
  },
  {
    "label": "initBaseName()",
    "kind": "Method",
    "detail": "Function (char language [ ULOC_LANG_CAPACITY ] ; char script [ ULOC_SCRIPT_CAPACITY ] ; char country [ ULOC_COUNTRY_CAPACITY ] ; int32_t variantBegin ; char* fullName ; char fullNameBuffer [ ULOC_FULLNAME_CAPACITY ] ; char* baseName ; void)",
    "insertText": "initBaseName(UErrorCode& status)"
  },
  {
    "label": "getLocale()",
    "kind": "Method",
    "detail": "Function (UBool fIsBogus ; const Locale&)",
    "insertText": "getLocale(int locid)"
  },
  {
    "label": "locale_set_default_internal()",
    "kind": "Method",
    "detail": "Function (Locale*)",
    "insertText": "locale_set_default_internal(const char *, UErrorCode& status)"
  },
  {
    "label": "sink()",
    "kind": "Method",
    "detail": "Function (StringClass result ; StringByteSink<StringClass>)",
    "insertText": "sink(&result)"
  },
  {
    "label": "toLanguageTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toLanguageTag(sink, status)"
  },
  {
    "label": "keys()",
    "kind": "Method",
    "detail": "Function (LocalPointer<StringEnumeration>)",
    "insertText": "keys(createKeywords(status))"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (int32_t resultLength ; const char* buffer = keys ->)",
    "insertText": "next(&resultLength, status)"
  },
  {
    "label": "keys()",
    "kind": "Method",
    "detail": "Function (LocalPointer<StringEnumeration>)",
    "insertText": "keys(createUnicodeKeywords(status))"
  },
  {
    "label": "getKeywordValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getKeywordValue(keywordName, sink, status)"
  },
  {
    "label": "getUnicodeKeywordValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getUnicodeKeywordValue(keywordName, sink, status)"
  }
]