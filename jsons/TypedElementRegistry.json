[
  {
    "label": "UTypedElementRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementRegistry"
  },
  {
    "label": "FDisableElementDestructionOnGC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisableElementDestructionOnGC"
  },
  {
    "label": "FRegisteredElementType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRegisteredElementType"
  },
  {
    "label": "TRegisteredElementType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRegisteredElementType"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Set . h \" # include \" Containers / SortedMap . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Elements / Framework / TypedElementData . h \" # include \" Elements / Framework / TypedElementHandle . h \" # include \" Elements / Framework / TypedElementId . h \" # include \" Elements / Framework / TypedElementLimits . h \" # include \" Elements / Framework / TypedElementList . h \" # include \" Elements / Framework / TypedElementListFwd . h \" # include \" Elements / Interfaces / TypedElementDataStorageInterface . h \" # include \" Elements / Interfaces / TypedElementDataStorageCompatibilityInterface . h \" # include \" Elements / Interfaces / TypedElementDataStorageUiInterface . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformCrt . h \" # include \" Logging / LogVerbosity . h \" # include \" Math / NumericLimits . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / ScopeLock . h \" # include \" Misc / ScopeRWLock . h \" # include \" Templates / Casts . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / SubclassOf . h \" # include \" Templates / Tuple . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / Class . h \" # include \" UObject / Interface . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ScriptInterface . h \" # include \" UObject / Stack . h \" # include \" UObject / UObjectGlobals . h \" # include<type_traits> # include \" TypedElementRegistry . generated . h \")",
    "insertText": "UCLASS(Transient, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: TYPEDELEMENTFRAMEWORK_API UTypedElementRegistry()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "Private_InitializeInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_InitializeInstance()"
  },
  {
    "label": "Private_ShutdownInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_ShutdownInstance()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (using FOnElementReplaced_Payload = TArrayView<const TTuple<FTypedElementHandle,FTypedElementHandle>> ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnElementReplaced, FOnElementReplaced_Payload)"
  },
  {
    "label": "OnElementReplaced()",
    "kind": "Method",
    "detail": "Function (FOnElementReplaced&)",
    "insertText": "OnElementReplaced()"
  },
  {
    "label": "OnElementUpdated()",
    "kind": "Method",
    "detail": "Function (FOnElementUpdated&)",
    "insertText": "OnElementUpdated()"
  },
  {
    "label": "GetRegisteredElementTypeFromName()",
    "kind": "Method",
    "detail": "Function (const FRegisteredElementType* RegisteredElementType =)",
    "insertText": "GetRegisteredElementTypeFromName(InElementTypeName)"
  },
  {
    "label": "GetRegisteredElementTypeFromId()",
    "kind": "Method",
    "detail": "Function (const FRegisteredElementType* RegisteredElementType =)",
    "insertText": "GetRegisteredElementTypeFromId(InElementTypeId)"
  },
  {
    "label": "RegisterElementType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterElementType(const FName InElementTypeName, bool bSupportScriptHandles)"
  },
  {
    "label": "RegisterElementTypeImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterElementTypeImpl(InElementTypeName, MakeUnique<TRegisteredElementType<void, true>>())"
  },
  {
    "label": "RegisterElementTypeImpl()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "RegisterElementTypeImpl(InElementTypeName, MakeUnique<TRegisteredElementType<void, false>>())"
  },
  {
    "label": "RegisterElementType()",
    "kind": "Method",
    "detail": "Function (} } template<ElementDataType,bool bSupportScriptHandles> void)",
    "insertText": "RegisterElementType(const FName InElementTypeName)"
  },
  {
    "label": "RegisterElementTypeImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterElementTypeImpl(InElementTypeName, MakeUnique<TRegisteredElementType<ElementDataType, bSupportScriptHandles>>())"
  },
  {
    "label": "RegisterElementInterface()",
    "kind": "Method",
    "detail": "Function (} template<BaseInterfaceType> void)",
    "insertText": "RegisterElementInterface(const FName InElementTypeName, UObject* InElementInterface, const bool InAllowOverride = false)"
  },
  {
    "label": "RegisterElementInterfaceImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterElementInterfaceImpl(InElementTypeName, InElementInterface, BaseInterfaceType::UClassType::StaticClass(), InAllowOverride)"
  },
  {
    "label": "GetElementInterface()",
    "kind": "Method",
    "detail": "Function (} template<BaseInterfaceType> BaseInterfaceType*)",
    "insertText": "GetElementInterface(const FTypedHandleTypeId InElementTypeId)"
  },
  {
    "label": "GetElementInterface()",
    "kind": "Method",
    "detail": "Function (} template<BaseInterfaceType> BaseInterfaceType*)",
    "insertText": "GetElementInterface(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "GetElementInterface()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "GetElementInterface(const FTypedElementHandle& InElementHandle, const TSubclassOf<UInterface> InBaseInterfaceType)"
  },
  {
    "label": "CreateElement()",
    "kind": "Method",
    "detail": "Function (} FTypedElementOwner)",
    "insertText": "CreateElement(const FName InElementTypeName, const FTypedHandleElementId InElementId)"
  },
  {
    "label": "CreateElement()",
    "kind": "Method",
    "detail": "Function (} template<ElementDataType> TTypedElementOwner<ElementDataType>)",
    "insertText": "CreateElement(const FName InElementTypeName)"
  },
  {
    "label": "DestroyElement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroyElement(FTypedElementOwner& InOutElementOwner)"
  },
  {
    "label": "DestroyElement()",
    "kind": "Method",
    "detail": "Function (} template<ElementDataType> void)",
    "insertText": "DestroyElement(TTypedElementOwner<ElementDataType>& InOutElementOwner)"
  },
  {
    "label": "ProcessDeferredElementsToDestroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessDeferredElementsToDestroy()"
  },
  {
    "label": "ReleaseElementId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseElementId(FTypedElementId& InOutElementId)"
  },
  {
    "label": "GetElementHandle()",
    "kind": "Method",
    "detail": "Function (FTypedElementHandle)",
    "insertText": "GetElementHandle(const FTypedElementId& InElementId)"
  },
  {
    "label": "GetElementImpl()",
    "kind": "Method",
    "detail": "Function (FTypedElement Element ;)",
    "insertText": "GetElementImpl(InElementId, InBaseInterfaceType, Element)"
  },
  {
    "label": "GetElementImpl()",
    "kind": "Method",
    "detail": "Function (TTypedElement<BaseInterfaceType> Element ;)",
    "insertText": "GetElementImpl(InElementId, BaseInterfaceType::UClassType::StaticClass(), Element)"
  },
  {
    "label": "GetElementImpl()",
    "kind": "Method",
    "detail": "Function (FTypedElement Element ;)",
    "insertText": "GetElementImpl(InElementHandle, InBaseInterfaceType, Element)"
  },
  {
    "label": "GetElementImpl()",
    "kind": "Method",
    "detail": "Function (TTypedElement<BaseInterfaceType> Element ;)",
    "insertText": "GetElementImpl(InElementHandle, BaseInterfaceType::UClassType::StaticClass(), Element)"
  },
  {
    "label": "CreateScriptElementList()",
    "kind": "Method",
    "detail": "Function (} FScriptTypedElementListRef)",
    "insertText": "CreateScriptElementList()"
  },
  {
    "label": "CreateElementList()",
    "kind": "Method",
    "detail": "Function (} FTypedElementListRef)",
    "insertText": "CreateElementList(TArrayView<const FTypedElementId> InElementIds)"
  },
  {
    "label": "CreateElementList()",
    "kind": "Method",
    "detail": "Function (FTypedElementListRef)",
    "insertText": "CreateElementList(TArrayView<const FTypedElementHandle> InElementHandles)"
  },
  {
    "label": "CreateElementList()",
    "kind": "Method",
    "detail": "Function (template<ElementDataType> FTypedElementListRef)",
    "insertText": "CreateElementList(const TArray<TTypedElementOwner<ElementDataType>>& InElementOwners)"
  },
  {
    "label": "CreateElementList()",
    "kind": "Method",
    "detail": "Function (} template<ElementDataType> FTypedElementListRef)",
    "insertText": "CreateElementList(TArrayView<const TTypedElementOwner<ElementDataType>> InElementOwners)"
  },
  {
    "label": "CreateElementList()",
    "kind": "Method",
    "detail": "Function (FTypedElementListRef ElementList =)",
    "insertText": "CreateElementList()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ElementList ->)",
    "insertText": "Append(InElementOwners)"
  },
  {
    "label": "GetRegisteredElementTypeFromId()",
    "kind": "Method",
    "detail": "Function (} FRegisteredElementType* RegisteredElementType =)",
    "insertText": "GetRegisteredElementTypeFromId(InElementId.GetTypeId())"
  },
  {
    "label": "KismetExecutionMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KismetExecutionMessage(TEXT(\"Element type ID has not been registered to this registry!\"), ELogVerbosity::Error)"
  },
  {
    "label": "Private_Initialize()",
    "kind": "Method",
    "detail": "Function (} FScriptTypedElementHandle ScriptTypedElementHandle ; ScriptTypedElementHandle .)",
    "insertText": "Private_Initialize(RegisteredElementType->GetDataForScriptElement(InElementId.GetElementId()))"
  },
  {
    "label": "ActiveElementListsLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ActiveElementListsLock(&ActiveElementListsCS)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ActiveElementLists .)",
    "insertText": "Add(InElementList)"
  },
  {
    "label": "Private_OnElementListDestroyed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Private_OnElementListDestroyed(FTypedElementList* InElementList)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ActiveElementLists .)",
    "insertText": "Remove(InElementList)"
  },
  {
    "label": "Private_OnElementListCreated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Private_OnElementListCreated(FScriptTypedElementList* InElementList)"
  },
  {
    "label": "Private_OnElementListDestroyed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Private_OnElementListDestroyed(FScriptTypedElementList* InElementList)"
  },
  {
    "label": "Private_GetElementImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Private_GetElementImpl(const FTypedElementHandle& InElementHandle, const TSubclassOf<UInterface>& InBaseInterfaceType, FTypedElement& OutElement)"
  },
  {
    "label": "GetElementImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementImpl(InElementHandle, InBaseInterfaceType, OutElement)"
  },
  {
    "label": "FDisableElementDestructionOnGC()",
    "kind": "Method",
    "detail": "Function (} struct FDisableElementDestructionOnGC { public :)",
    "insertText": "FDisableElementDestructionOnGC(UTypedElementRegistry* InRegistry) : Registry(InRegistry)"
  },
  {
    "label": "IncrementDisableElementDestructionOnGCCount()",
    "kind": "Method",
    "detail": "Function (Registry ->)",
    "insertText": "IncrementDisableElementDestructionOnGCCount()"
  },
  {
    "label": "FDisableElementDestructionOnGC()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDisableElementDestructionOnGC()"
  },
  {
    "label": "DecrementDisableElementDestructionOnGCCount()",
    "kind": "Method",
    "detail": "Function (Registry ->)",
    "insertText": "DecrementDisableElementDestructionOnGCCount()"
  },
  {
    "label": "FDisableElementDestructionOnGC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDisableElementDestructionOnGC(const FDisableElementDestructionOnGC&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FDisableElementDestructionOnGC&)",
    "insertText": "operator(const FDisableElementDestructionOnGC&)"
  },
  {
    "label": "FDisableElementDestructionOnGC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDisableElementDestructionOnGC(FDisableElementDestructionOnGC&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FDisableElementDestructionOnGC&)",
    "insertText": "operator(FDisableElementDestructionOnGC&&)"
  },
  {
    "label": "FRegisteredElementType()",
    "kind": "Method",
    "detail": "Function (private : UTypedElementRegistry* Registry = nullptr ; } ; private : struct FRegisteredElementType { ~)",
    "insertText": "FRegisteredElementType()"
  },
  {
    "label": "AddDataForElement()",
    "kind": "Method",
    "detail": "Function (FTypedElementInternalData&)",
    "insertText": "AddDataForElement(FTypedHandleElementId& InOutElementId)"
  },
  {
    "label": "RemoveDataForElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDataForElement(const FTypedHandleElementId InElementId, const FTypedElementInternalData* InExpectedDataPtr, const bool bDefer)"
  },
  {
    "label": "GetDataForElement()",
    "kind": "Method",
    "detail": "Function (const FTypedElementInternalData&)",
    "insertText": "GetDataForElement(const FTypedHandleElementId InElementId)"
  },
  {
    "label": "GetDataForScriptElement()",
    "kind": "Method",
    "detail": "Function (FScriptTypedElementInternalDataPtr)",
    "insertText": "GetDataForScriptElement(const FTypedHandleElementId InElementId)"
  },
  {
    "label": "ProcessDeferredElementsToRemove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDeferredElementsToRemove()"
  },
  {
    "label": "SetDataTypeId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataTypeId(const FTypedHandleTypeId InTypeId)"
  },
  {
    "label": "GetDataTypeId()",
    "kind": "Method",
    "detail": "Function (FTypedHandleTypeId)",
    "insertText": "GetDataTypeId()"
  },
  {
    "label": "GetDataTypeName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetDataTypeName()"
  },
  {
    "label": "TRegisteredElementType()",
    "kind": "Method",
    "detail": "Function (FTypedHandleTypeId TypeId = 0 ; FName ; TSortedMap<FName,TObjectPtr<UObject>,FDefaultAllocator,FNameFastLess> Interfaces ; } ; template<ElementDataType,bool bSupportScriptHandles> struct TRegisteredElementType : public FRegisteredElementType { ~)",
    "insertText": "TRegisteredElementType()"
  },
  {
    "label": "DisableScriptHandlesForElement()",
    "kind": "Method",
    "detail": "Function (HandleDataStore .)",
    "insertText": "DisableScriptHandlesForElement(InElementId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bDefer)"
  },
  {
    "label": "StoreDestructionRequestCallstack()",
    "kind": "Method",
    "detail": "Function (InExpectedDataPtr ->)",
    "insertText": "StoreDestructionRequestCallstack()"
  },
  {
    "label": "DeferredElementsToRemoveLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "DeferredElementsToRemoveLock(&DeferredElementsToRemoveCS)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DeferredElementsToRemove .)",
    "insertText": "Add(MakeTuple(InElementId, InExpectedDataPtr))"
  },
  {
    "label": "RemoveDataForElement()",
    "kind": "Method",
    "detail": "Function (} else { HandleDataStore .)",
    "insertText": "RemoveDataForElement(InElementId, InExpectedDataPtr)"
  },
  {
    "label": "RemoveDataForElement()",
    "kind": "Method",
    "detail": "Function (HandleDataStore .)",
    "insertText": "RemoveDataForElement(DeferredElementToRemove.Get<0>(), DeferredElementToRemove.Get<1>())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} DeferredElementsToRemove .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetStaticDataTypeId()",
    "kind": "Method",
    "detail": "Function (TTypedElementInternalDataStore<ElementDataType)",
    "insertText": "SetStaticDataTypeId(InTypeId)"
  },
  {
    "label": "RegisterElementTypeImpl()",
    "kind": "Method",
    "detail": "Function (} TTypedElementInternalDataStore<ElementDataType> HandleDataStore ; using FDeferredElementToRemove = TTuple<FTypedHandleElementId,const FTypedElementInternalData*> ; FCriticalSection DeferredElementsToRemoveCS ; TArray<FDeferredElementToRemove> DeferredElementsToRemove ; } ; void)",
    "insertText": "RegisterElementTypeImpl(const FName InElementTypeName, TUniquePtr<FRegisteredElementType>&& InRegisteredElementType)"
  },
  {
    "label": "RegisterElementInterfaceImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterElementInterfaceImpl(const FName InElementTypeName, UObject* InElementInterface, const TSubclassOf<UInterface>& InBaseInterfaceType, const bool InAllowOverride)"
  },
  {
    "label": "GetElementInterfaceImpl()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetElementInterfaceImpl(const FTypedHandleTypeId InElementTypeId, const TSubclassOf<UInterface>& InBaseInterfaceType)"
  },
  {
    "label": "CreateElementImpl()",
    "kind": "Method",
    "detail": "Function (template<ElementDataType> TTypedElementOwner<ElementDataType>)",
    "insertText": "CreateElementImpl(const FName InElementTypeName, const FTypedHandleElementId InElementId)"
  },
  {
    "label": "AddDataForElement()",
    "kind": "Method",
    "detail": "Function (FTypedHandleElementId NewElementId = InElementId ; FTypedElementInternalData& NewElementData = RegisteredElementType ->)",
    "insertText": "AddDataForElement(NewElementId)"
  },
  {
    "label": "Private_InitializeAddRef()",
    "kind": "Method",
    "detail": "Function (TTypedElementOwner<ElementDataType> ElementOwner ; ElementOwner .)",
    "insertText": "Private_InitializeAddRef(static_cast<TTypedElementInternalData<ElementDataType>&>(NewElementData))"
  },
  {
    "label": "GetRegisteredElementTypeFromId()",
    "kind": "Method",
    "detail": "Function (FRegisteredElementType* RegisteredElementType =)",
    "insertText": "GetRegisteredElementTypeFromId(InOutElementOwner.GetId().GetTypeId())"
  },
  {
    "label": "RemoveDataForElement()",
    "kind": "Method",
    "detail": "Function (RegisteredElementType ->)",
    "insertText": "RemoveDataForElement(InOutElementOwner.GetId().GetElementId(), InOutElementOwner.Private_GetInternalData(), true)"
  },
  {
    "label": "Private_DestroyNoRef()",
    "kind": "Method",
    "detail": "Function (InOutElementOwner .)",
    "insertText": "Private_DestroyNoRef()"
  },
  {
    "label": "GetElementImpl()",
    "kind": "Method",
    "detail": "Function (} template<BaseInterfaceType> void)",
    "insertText": "GetElementImpl(const FTypedElementId& InElementId, const TSubclassOf<UInterface>& InBaseInterfaceType, TTypedElement<BaseInterfaceType>& OutElement)"
  },
  {
    "label": "Private_DestroyReleaseRef()",
    "kind": "Method",
    "detail": "Function (OutElement .)",
    "insertText": "Private_DestroyReleaseRef()"
  },
  {
    "label": "GetDataForElement()",
    "kind": "Method",
    "detail": "Function (const FTypedElementInternalData& TypedElementInternalData = RegisteredElementType ->)",
    "insertText": "GetDataForElement(InElementId.GetElementId())"
  },
  {
    "label": "Private_InitializeAddRef()",
    "kind": "Method",
    "detail": "Function (OutElement .)",
    "insertText": "Private_InitializeAddRef(TypedElementInternalData, InterfaceObject->GetInterfaceAddress(InBaseInterfaceType))"
  },
  {
    "label": "Private_InitializeAddRef()",
    "kind": "Method",
    "detail": "Function (} else { OutElement .)",
    "insertText": "Private_InitializeAddRef(TypedElementInternalData, Cast<BaseInterfaceType>(InterfaceObject))"
  },
  {
    "label": "GetElementImpl()",
    "kind": "Method",
    "detail": "Function (} } } } template<BaseInterfaceType> void)",
    "insertText": "GetElementImpl(const FTypedElementHandle& InElementHandle, const TSubclassOf<UInterface>& InBaseInterfaceType, TTypedElement<BaseInterfaceType>& OutElement)"
  },
  {
    "label": "GetRegisteredElementTypeFromId()",
    "kind": "Method",
    "detail": "Function (FRegisteredElementType* RegisteredElementType =)",
    "insertText": "GetRegisteredElementTypeFromId(InElementHandle.GetId().GetTypeId())"
  },
  {
    "label": "Private_GetInternalData()",
    "kind": "Method",
    "detail": "Function (const FTypedElementInternalData& TypedElementInternalData =* InElementHandle .)",
    "insertText": "Private_GetInternalData()"
  },
  {
    "label": "AddRegisteredElementType()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "AddRegisteredElementType(TUniquePtr<FRegisteredElementType>&& InRegisteredElementType)"
  },
  {
    "label": "RegisteredElementTypesLock()",
    "kind": "Method",
    "detail": "Function ({ FWriteScopeLock)",
    "insertText": "RegisteredElementTypesLock(RegisteredElementTypesRW)"
  },
  {
    "label": "LLM_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE(ELLMTag::EngineMisc)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RegisteredElementTypesNameToId .)",
    "insertText": "Add(InRegisteredElementType->TypeName, InRegisteredElementType->TypeId)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (RegisteredElementTypes [ InRegisteredElementType -> TypeId - 1 ] =)",
    "insertText": "MoveTemp(InRegisteredElementType)"
  },
  {
    "label": "GetRegisteredElementTypeFromId()",
    "kind": "Method",
    "detail": "Function (} } FRegisteredElementType*)",
    "insertText": "GetRegisteredElementTypeFromId(const FTypedHandleTypeId InTypeId)"
  },
  {
    "label": "GetRegisteredElementTypeFromName()",
    "kind": "Method",
    "detail": "Function (} FRegisteredElementType*)",
    "insertText": "GetRegisteredElementTypeFromName(const FName& InTypeName)"
  },
  {
    "label": "NotifyElementListPendingChanges()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } void)",
    "insertText": "NotifyElementListPendingChanges()"
  },
  {
    "label": "OnBeginFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginFrame()"
  },
  {
    "label": "OnEndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndFrame()"
  },
  {
    "label": "OnPostGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostGarbageCollect()"
  }
]