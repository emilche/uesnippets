[
  {
    "label": "target()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_MATRIX_PRODUCT_MMA_ALTIVEC_H # define EIGEN_MATRIX_PRODUCT_MMA_ALTIVEC_H # pragma GCC)",
    "insertText": "target(\"cpu=power10\") #ifdef __has_builtin #if !__has_builtin(__builtin_vsx_assemble_pair)"
  },
  {
    "label": "bsetzeroMMA()",
    "kind": "Method",
    "detail": "Function (namespace internal { template<Scalar,Packet> EIGEN_ALWAYS_INLINE void)",
    "insertText": "bsetzeroMMA(__vector_quad* acc)"
  },
  {
    "label": "__builtin_mma_xxsetaccz()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__builtin_mma_xxsetaccz(acc)"
  },
  {
    "label": "storeAccumulator()",
    "kind": "Method",
    "detail": "Function (} template<DataMapper,Index,Packet,const Index accCols> EIGEN_ALWAYS_INLINE void)",
    "insertText": "storeAccumulator(Index i, Index j, const DataMapper& data, const Packet& alpha, __vector_quad* acc)"
  },
  {
    "label": "__builtin_mma_disassemble_acc()",
    "kind": "Method",
    "detail": "Function (PacketBlock<Packet,4> result ;)",
    "insertText": "__builtin_mma_disassemble_acc(&result.packet, acc)"
  },
  {
    "label": "ColMajor()",
    "kind": "Method",
    "detail": "Function (PacketBlock<Packet,4> tRes ; bload<DataMapper,Packet,Index,accCols,0,)",
    "insertText": "ColMajor(tRes, data, i, j)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (bscale<)",
    "insertText": "Packet(tRes, result, alpha)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (data . template storePacketBlock<)",
    "insertText": "Packet(i, j, tRes)"
  },
  {
    "label": "storeComplexAccumulator()",
    "kind": "Method",
    "detail": "Function (} template<DataMapper,Index,Packet,Packetc,const Index accColsC,int N> EIGEN_ALWAYS_INLINE void)",
    "insertText": "storeComplexAccumulator(Index i, Index j, const DataMapper& data, const Packet& alphaReal, const Packet& alphaImag, __vector_quad* accReal, __vector_quad* accImag)"
  },
  {
    "label": "__builtin_mma_disassemble_acc()",
    "kind": "Method",
    "detail": "Function (PacketBlock<Packet,4> resultReal,resultImag ;)",
    "insertText": "__builtin_mma_disassemble_acc(&resultReal.packet, accReal)"
  },
  {
    "label": "__builtin_mma_disassemble_acc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__builtin_mma_disassemble_acc(&resultImag.packet, accImag)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (PacketBlock<Packet,4> taccReal,taccImag ; bscalec<)",
    "insertText": "Packet(resultReal, resultImag, alphaReal, alphaImag, taccReal, taccImag)"
  },
  {
    "label": "Packetc()",
    "kind": "Method",
    "detail": "Function (PacketBlock<Packetc,4> acc1,acc2 ; bcouple<Packet,)",
    "insertText": "Packetc(taccReal, taccImag, tRes, acc1, acc2)"
  },
  {
    "label": "Packetc()",
    "kind": "Method",
    "detail": "Function (data . template storePacketBlock<)",
    "insertText": "Packetc(i + N*accColsC, j, acc1)"
  },
  {
    "label": "Packetc()",
    "kind": "Method",
    "detail": "Function (data . template storePacketBlock<)",
    "insertText": "Packetc(i + (N+1)*accColsC, j, acc2)"
  },
  {
    "label": "pgerMMA()",
    "kind": "Method",
    "detail": "Function (} template<LhsPacket,RhsPacket,bool NegativeAccumulate> EIGEN_ALWAYS_INLINE void)",
    "insertText": "pgerMMA(__vector_quad* acc, const RhsPacket& a, const LhsPacket& b)"
  },
  {
    "label": "__builtin_mma_xvf32gernp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__builtin_mma_xvf32gernp(acc, (__vector unsigned char)a, (__vector unsigned char)b)"
  },
  {
    "label": "__builtin_mma_xvf32gerpp()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "__builtin_mma_xvf32gerpp(acc, (__vector unsigned char)a, (__vector unsigned char)b)"
  },
  {
    "label": "pgerMMA()",
    "kind": "Method",
    "detail": "Function (} } template<LhsPacket,RhsPacket,bool NegativeAccumulate> EIGEN_ALWAYS_INLINE void)",
    "insertText": "pgerMMA(__vector_quad* acc, const PacketBlock<Packet2d,2>& a, const Packet2d& b)"
  },
  {
    "label": "a0()",
    "kind": "Method",
    "detail": "Function (__vector_pair*)",
    "insertText": "a0(__vector_pair *)(&a.packet[0])"
  },
  {
    "label": "__builtin_mma_xvf64gernp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__builtin_mma_xvf64gernp(acc, *a0, (__vector unsigned char)b)"
  },
  {
    "label": "__builtin_mma_xvf64gerpp()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "__builtin_mma_xvf64gerpp(acc, *a0, (__vector unsigned char)b)"
  },
  {
    "label": "pgerMMA()",
    "kind": "Method",
    "detail": "Function (} } template<LhsPacket,RhsPacket,bool NegativeAccumulate> EIGEN_ALWAYS_INLINE void)",
    "insertText": "pgerMMA(__vector_quad* acc, const __vector_pair& a, const Packet2d& b)"
  },
  {
    "label": "__builtin_mma_xvf64gernp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__builtin_mma_xvf64gernp(acc, (__vector_pair)a, (__vector unsigned char)b)"
  },
  {
    "label": "__builtin_mma_xvf64gerpp()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "__builtin_mma_xvf64gerpp(acc, (__vector_pair)a, (__vector unsigned char)b)"
  },
  {
    "label": "pgerMMA()",
    "kind": "Method",
    "detail": "Function (} } template<LhsPacket,RhsPacket,bool NegativeAccumulate> EIGEN_ALWAYS_INLINE void)",
    "insertText": "pgerMMA(__vector_quad*, const __vector_pair&, const Packet4f&)"
  },
  {
    "label": "pgercMMA()",
    "kind": "Method",
    "detail": "Function (} template<Scalar,Packet,RhsPacket,bool ConjugateLhs,bool ConjugateRhs,bool LhsIsReal,bool RhsIsReal> EIGEN_ALWAYS_INLINE void)",
    "insertText": "pgercMMA(__vector_quad* accReal, __vector_quad* accImag, const Packet& lhsV, const Packet& lhsVi, const RhsPacket& rhsV, const RhsPacket& rhsVi)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (pgerMMA<Packet,RhsPacket,)",
    "insertText": "false(accReal, rhsV, lhsV)"
  },
  {
    "label": "ConjugateRhs()",
    "kind": "Method",
    "detail": "Function (pgerMMA<Packet,RhsPacket,)",
    "insertText": "ConjugateRhs(accImag, rhsVi, lhsV)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!RhsIsReal)"
  },
  {
    "label": "ConjugateRhs()",
    "kind": "Method",
    "detail": "Function (pgerMMA<Packet,RhsPacket,ConjugateLhs = =)",
    "insertText": "ConjugateRhs(accReal, rhsVi, lhsVi)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "EIGEN_UNUSED_VARIABLE(rhsVi)"
  },
  {
    "label": "ConjugateLhs()",
    "kind": "Method",
    "detail": "Function (} pgerMMA<Packet,RhsPacket,)",
    "insertText": "ConjugateLhs(accImag, rhsV, lhsVi)"
  },
  {
    "label": "ploadRhsMMA()",
    "kind": "Method",
    "detail": "Function (} } template<Scalar,Packet> EIGEN_ALWAYS_INLINE void)",
    "insertText": "ploadRhsMMA(const Scalar* rhs, Packet& rhsV)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (rhsV = ploadRhs<Scalar,)",
    "insertText": "Packet((const Scalar*)(rhs))"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_ALWAYS_INLINE void ploadRhsMMA<double,PacketBlock<)",
    "insertText": "Packet2d(const double* rhs, PacketBlock<Packet2d, 2>& rhsV)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (rhsV . packet [ 0 ] = ploadRhs<double,)",
    "insertText": "Packet2d((const double *)((Packet2d *)rhs ))"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (rhsV . packet [ 1 ] = ploadRhs<double,)",
    "insertText": "Packet2d((const double *)(((Packet2d *)rhs) + 1))"
  },
  {
    "label": "__vector_pair()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_ALWAYS_INLINE void ploadRhsMMA<double,)",
    "insertText": "__vector_pair(const double* rhs, __vector_pair& rhsV)"
  },
  {
    "label": "__builtin_vsx_assemble_pair()",
    "kind": "Method",
    "detail": "Function (# if EIGEN_COMP_LLVM)",
    "insertText": "__builtin_vsx_assemble_pair(&rhsV, (__vector unsigned char)(ploadRhs<double, Packet2d>((const double *)(((Packet2d *)rhs) + 1))), (__vector unsigned char)(ploadRhs<double, Packet2d>((const double *)((Packet2d *)rhs ))))"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "__asm__(\"lxvp %x0,%1\" : \"=wa\" (rhsV) : \"Y\" (*rhs))"
  },
  {
    "label": "ploadRhsMMA()",
    "kind": "Method",
    "detail": "Function (# endif } template<> EIGEN_ALWAYS_INLINE void)",
    "insertText": "ploadRhsMMA(const float*, __vector_pair&)"
  },
  {
    "label": "MICRO_MMA_UNROLL()",
    "kind": "Method",
    "detail": "Function (} # define PEEL_MMA 7 # define)",
    "insertText": "MICRO_MMA_UNROLL(func) \\ func(0) func(1) func(2) func(3) func(4) func(5) func(6) func(7) #define MICRO_MMA_LOAD_ONE(iter) \\ if (unroll_factor > iter)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (\\ lhsV # # iter = ploadLhs<Scalar,)",
    "insertText": "Packet(lhs_ptr##iter)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (\\ lhs_ptr # # iter + = accCols ; \\ } else { \\)",
    "insertText": "EIGEN_UNUSED_VARIABLE(lhsV##iter)"
  },
  {
    "label": "MICRO_MMA_WORK_ONE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "MICRO_MMA_WORK_ONE(iter, type, peel) \\ if (unroll_factor > iter)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (\\ pgerMMA<Packet,type,)",
    "insertText": "false(&accZero##iter, rhsV##peel, lhsV##iter)"
  },
  {
    "label": "MICRO_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "MICRO_MMA_TYPE_PEEL(func, func2, type, peel) \\ if (PEEL_MMA > peel)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (\\ Packet lhsV0,lhsV1,lhsV2,lhsV3,lhsV4,lhsV5,lhsV6,lhsV7 ; \\ ploadRhsMMA<Scalar,)",
    "insertText": "type(rhs_ptr + (accRows * peel), rhsV##peel)"
  },
  {
    "label": "MICRO_MMA_UNROLL()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "MICRO_MMA_UNROLL(func2)"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "func(0,type,peel) func(1,type,peel) func(2,type,peel) func(3,type,peel) \\ func(4,type,peel) func(5,type,peel) func(6,type,peel) func(7,type,peel)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "EIGEN_UNUSED_VARIABLE(rhsV##peel)"
  },
  {
    "label": "MICRO_MMA_UNROLL_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "MICRO_MMA_UNROLL_TYPE_PEEL(func, func2, type)"
  },
  {
    "label": "MICRO_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "MICRO_MMA_TYPE_PEEL(func,func2,type,0)"
  },
  {
    "label": "MICRO_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MICRO_MMA_TYPE_PEEL(func,func2,type,1)"
  },
  {
    "label": "MICRO_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "MICRO_MMA_TYPE_PEEL(func,func2,type,2)"
  },
  {
    "label": "MICRO_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MICRO_MMA_TYPE_PEEL(func,func2,type,3)"
  },
  {
    "label": "MICRO_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "MICRO_MMA_TYPE_PEEL(func,func2,type,4)"
  },
  {
    "label": "MICRO_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MICRO_MMA_TYPE_PEEL(func,func2,type,5)"
  },
  {
    "label": "MICRO_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "MICRO_MMA_TYPE_PEEL(func,func2,type,6)"
  },
  {
    "label": "MICRO_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MICRO_MMA_TYPE_PEEL(func,func2,type,7)"
  },
  {
    "label": "MICRO_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "MICRO_MMA_TYPE_PEEL(func,func2,type,8)"
  },
  {
    "label": "MICRO_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MICRO_MMA_TYPE_PEEL(func,func2,type,9)"
  },
  {
    "label": "MICRO_MMA_UNROLL_TYPE_ONE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "MICRO_MMA_UNROLL_TYPE_ONE(func, func2, type)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# define MICRO_MMA_ONE_PEEL \\)",
    "insertText": "if(sizeof(Scalar) == sizeof(float))"
  },
  {
    "label": "MICRO_MMA_UNROLL_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "MICRO_MMA_UNROLL_TYPE_PEEL(MICRO_MMA_WORK_ONE, MICRO_MMA_LOAD_ONE, RhsPacket)"
  },
  {
    "label": "MICRO_MMA_UNROLL_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "MICRO_MMA_UNROLL_TYPE_PEEL(MICRO_MMA_WORK_ONE, MICRO_MMA_LOAD_ONE, __vector_pair)"
  },
  {
    "label": "rhs_ptr()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "rhs_ptr(accRows * PEEL_MMA)"
  },
  {
    "label": "MICRO_MMA_UNROLL_TYPE_ONE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "MICRO_MMA_UNROLL_TYPE_ONE(MICRO_MMA_WORK_ONE, MICRO_MMA_LOAD_ONE, RhsPacket)"
  },
  {
    "label": "MICRO_MMA_UNROLL_TYPE_ONE()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "MICRO_MMA_UNROLL_TYPE_ONE(MICRO_MMA_WORK_ONE, MICRO_MMA_LOAD_ONE, __vector_pair)"
  },
  {
    "label": "MICRO_MMA_DST_PTR_ONE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ rhs_ptr + = accRows ; # define)",
    "insertText": "MICRO_MMA_DST_PTR_ONE(iter) \\ if (unroll_factor > iter)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (\\ bsetzeroMMA<Scalar,)",
    "insertText": "Packet(&accZero##iter)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "EIGEN_UNUSED_VARIABLE(accZero##iter)"
  },
  {
    "label": "MICRO_MMA_UNROLL()",
    "kind": "Method",
    "detail": "Function (\\ } # define MICRO_MMA_DST_PTR)",
    "insertText": "MICRO_MMA_UNROLL(MICRO_MMA_DST_PTR_ONE) #define MICRO_MMA_SRC_PTR_ONE(iter) \\ if (unroll_factor > iter)"
  },
  {
    "label": "lhs_base()",
    "kind": "Method",
    "detail": "Function (\\ lhs_ptr # # iter =)",
    "insertText": "lhs_base((row/accCols) + iter)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "EIGEN_UNUSED_VARIABLE(lhs_ptr##iter)"
  },
  {
    "label": "MICRO_MMA_UNROLL()",
    "kind": "Method",
    "detail": "Function (\\ } # define MICRO_MMA_SRC_PTR)",
    "insertText": "MICRO_MMA_UNROLL(MICRO_MMA_SRC_PTR_ONE) #define MICRO_MMA_PREFETCH_ONE(iter) \\ if (unroll_factor > iter)"
  },
  {
    "label": "EIGEN_POWER_PREFETCH()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "EIGEN_POWER_PREFETCH(lhs_ptr##iter)"
  },
  {
    "label": "MICRO_MMA_UNROLL()",
    "kind": "Method",
    "detail": "Function (\\ } # define MICRO_MMA_PREFETCH)",
    "insertText": "MICRO_MMA_UNROLL(MICRO_MMA_PREFETCH_ONE) #define MICRO_MMA_STORE_ONE(iter) \\ if (unroll_factor > iter)"
  },
  {
    "label": "accCols()",
    "kind": "Method",
    "detail": "Function (\\ storeAccumulator<DataMapper,Index,Packet,)",
    "insertText": "accCols(row + iter*accCols, col, res, pAlpha, &accZero##iter)"
  },
  {
    "label": "MICRO_MMA_UNROLL()",
    "kind": "Method",
    "detail": "Function (\\ } # define MICRO_MMA_STORE)",
    "insertText": "MICRO_MMA_UNROLL(MICRO_MMA_STORE_ONE) template<int unroll_factor, typename Scalar, typename Packet, typename RhsPacket, typename DataMapper, typename Index, const Index accRows, const Index accCols> EIGEN_STRONG_INLINE void gemm_unrolled_MMA_iteration( const DataMapper& res, const Scalar* lhs_base, const Scalar* rhs_base, Index depth, Index strideA, Index offsetA, Index& row, Index col, const Packet& pAlpha)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Scalar* rhs_ptr = rhs_base ; const Scalar* lhs_ptr0 = NULL,* lhs_ptr1 = NULL,* lhs_ptr2 = NULL,* lhs_ptr3 = NULL,* lhs_ptr4 = NULL,* lhs_ptr5 = NULL,* lhs_ptr6 = NULL,* lhs_ptr7 = NULL ; __vector_quad accZero0,accZero1,accZero2,accZero3,accZero4,accZero5,accZero6,accZero7 ; MICRO_MMA_SRC_PTR MICRO_MMA_DST_PTR Index k = 0 ;)",
    "insertText": "for(; k + PEEL_MMA <= depth; k+= PEEL_MMA)"
  },
  {
    "label": "EIGEN_POWER_PREFETCH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_POWER_PREFETCH(rhs_ptr)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (MICRO_MMA_PREFETCH MICRO_MMA_ONE_PEEL })",
    "insertText": "for(; k < depth; k++)"
  },
  {
    "label": "gemmMMA()",
    "kind": "Method",
    "detail": "Function (MICRO_MMA_ONE } MICRO_MMA_STORE row + = unroll_factor* accCols ; } template<Scalar,Index,Packet,RhsPacket,DataMapper,const Index accRows,const Index accCols> void)",
    "insertText": "gemmMMA(const DataMapper& res, const Scalar* blockA, const Scalar* blockB, Index rows, Index depth, Index cols, Scalar alpha, Index strideA, Index strideB, Index offsetA, Index offsetB)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index remaining_rows = rows % accCols ; const Index remaining_cols = cols % accRows ;)",
    "insertText": "if(strideA == -1)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet pAlpha = pset1<)",
    "insertText": "Packet(alpha)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet pMask = bmask<)",
    "insertText": "Packet((const int)(remaining_rows))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index col = 0 ;)",
    "insertText": "for(; col + accRows <= cols; col += accRows)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const Scalar* rhs_base = blockB + col* strideB + accRows* offsetB ; const Scalar* lhs_base = blockA ; Index row = 0 ; # define MAX_MMA_UNROLL 7)",
    "insertText": "while(row + MAX_MMA_UNROLL*accCols <= rows)"
  },
  {
    "label": "accCols()",
    "kind": "Method",
    "detail": "Function (gemm_unrolled_MMA_iteration<MAX_MMA_UNROLL,Scalar,Packet,RhsPacket,DataMapper,Index,accRows,)",
    "insertText": "accCols(res, lhs_base, rhs_base, depth, strideA, offsetA, row, col, pAlpha)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "switch((rows-row)/accCols)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; # endif default : break ; } # undef MAX_MMA_UNROLL)",
    "insertText": "if(remaining_rows > 0)"
  },
  {
    "label": "accCols()",
    "kind": "Method",
    "detail": "Function (gemm_extra_row<Scalar,Packet,DataMapper,Index,accRows,)",
    "insertText": "accCols(res, lhs_base, rhs_base, depth, strideA, offsetA, row, col, rows, cols, remaining_rows, pAlpha, pMask)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(remaining_cols > 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Scalar* rhs_base = blockB + col* strideB + remaining_cols* offsetB ; const Scalar* lhs_base = blockA ;)",
    "insertText": "for(; col < cols; col++)"
  },
  {
    "label": "accCols()",
    "kind": "Method",
    "detail": "Function (Index row = 0 ; gemm_unrolled_col<Scalar,Packet,DataMapper,Index,)",
    "insertText": "accCols(res, lhs_base, rhs_base, depth, strideA, offsetA, row, rows, col, remaining_cols, pAlpha)"
  },
  {
    "label": "accRows()",
    "kind": "Method",
    "detail": "Function (gemm_extra_col<Scalar,Packet,DataMapper,Index,)",
    "insertText": "accRows(res, lhs_base, rhs_base, depth, strideA, offsetA, row, col, remaining_rows, remaining_cols, pAlpha)"
  },
  {
    "label": "accColsC()",
    "kind": "Method",
    "detail": "Function (} rhs_base + + ; } } } # define)",
    "insertText": "accColsC(accCols / 2) #define advanceRows ((LhsIsReal) ? 1 : 2) #define advanceCols ((RhsIsReal) ? 1 : 2) #define PEEL_COMPLEX_MMA 7 #define MICRO_COMPLEX_MMA_UNROLL(func) \\ func(0) func(1) func(2) func(3) func(4) #define MICRO_COMPLEX_MMA_LOAD_ONE(iter) \\ if (unroll_factor > iter)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (\\ lhsV # # iter = ploadLhs<Scalar,)",
    "insertText": "Packet(lhs_ptr_real##iter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ lhs_ptr_real # # iter + = accCols ; \\)",
    "insertText": "if(!LhsIsReal)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (\\ lhsVi # # iter = ploadLhs<Scalar,)",
    "insertText": "Packet(lhs_ptr_imag##iter)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (\\ lhs_ptr_imag # # iter + = accCols ; \\ } else { \\)",
    "insertText": "EIGEN_UNUSED_VARIABLE(lhsVi##iter)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_WORK_ONE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "MICRO_COMPLEX_MMA_WORK_ONE(iter, type, peel) \\ if (unroll_factor > iter)"
  },
  {
    "label": "RhsIsReal()",
    "kind": "Method",
    "detail": "Function (\\ pgercMMA<Scalar,Packet,type,ConjugateLhs,ConjugateRhs,LhsIsReal,)",
    "insertText": "RhsIsReal(&accReal##iter, &accImag##iter, lhsV##iter, lhsVi##iter, rhsV##peel, rhsVi##peel)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "MICRO_COMPLEX_MMA_TYPE_PEEL(func, func2, type, peel) \\ if (PEEL_COMPLEX_MMA > peel)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (\\ Packet lhsV0,lhsV1,lhsV2,lhsV3,lhsV4 ; \\ Packet lhsVi0,lhsVi1,lhsVi2,lhsVi3,lhsVi4 ; \\ ploadRhsMMA<Scalar,)",
    "insertText": "type(rhs_ptr_real + (accRows * peel), rhsV##peel)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (\\ ploadRhsMMA<Scalar,)",
    "insertText": "type(rhs_ptr_imag + (accRows * peel), rhsVi##peel)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "EIGEN_UNUSED_VARIABLE(rhsVi##peel)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_UNROLL()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "MICRO_COMPLEX_MMA_UNROLL(func2)"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "func(0,type,peel) func(1,type,peel) func(2,type,peel) func(3,type,peel) func(4,type,peel)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_UNROLL_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "MICRO_COMPLEX_MMA_UNROLL_TYPE_PEEL(func, func2, type)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\ type rhsVi0,rhsVi1,rhsVi2,rhsVi3,rhsVi4,rhsVi5,rhsVi6,rhsVi7,rhsVi8,rhsVi9 ; \\)",
    "insertText": "MICRO_COMPLEX_MMA_TYPE_PEEL(func,func2,type,0)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MICRO_COMPLEX_MMA_TYPE_PEEL(func,func2,type,1)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "MICRO_COMPLEX_MMA_TYPE_PEEL(func,func2,type,2)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MICRO_COMPLEX_MMA_TYPE_PEEL(func,func2,type,3)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "MICRO_COMPLEX_MMA_TYPE_PEEL(func,func2,type,4)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MICRO_COMPLEX_MMA_TYPE_PEEL(func,func2,type,5)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "MICRO_COMPLEX_MMA_TYPE_PEEL(func,func2,type,6)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MICRO_COMPLEX_MMA_TYPE_PEEL(func,func2,type,7)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "MICRO_COMPLEX_MMA_TYPE_PEEL(func,func2,type,8)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MICRO_COMPLEX_MMA_TYPE_PEEL(func,func2,type,9)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_UNROLL_TYPE_ONE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "MICRO_COMPLEX_MMA_UNROLL_TYPE_ONE(func, func2, type)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_UNROLL_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "MICRO_COMPLEX_MMA_UNROLL_TYPE_PEEL(MICRO_COMPLEX_MMA_WORK_ONE, MICRO_COMPLEX_MMA_LOAD_ONE, RhsPacket)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_UNROLL_TYPE_PEEL()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "MICRO_COMPLEX_MMA_UNROLL_TYPE_PEEL(MICRO_COMPLEX_MMA_WORK_ONE, MICRO_COMPLEX_MMA_LOAD_ONE, __vector_pair)"
  },
  {
    "label": "rhs_ptr_real()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "rhs_ptr_real(accRows * PEEL_COMPLEX_MMA)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!RhsIsReal) rhs_ptr_imag += (accRows * PEEL_COMPLEX_MMA)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_UNROLL_TYPE_ONE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "MICRO_COMPLEX_MMA_UNROLL_TYPE_ONE(MICRO_COMPLEX_MMA_WORK_ONE, MICRO_COMPLEX_MMA_LOAD_ONE, RhsPacket)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_UNROLL_TYPE_ONE()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "MICRO_COMPLEX_MMA_UNROLL_TYPE_ONE(MICRO_COMPLEX_MMA_WORK_ONE, MICRO_COMPLEX_MMA_LOAD_ONE, __vector_pair)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_DST_PTR_ONE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "MICRO_COMPLEX_MMA_DST_PTR_ONE(iter) \\ if (unroll_factor > iter)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (\\ bsetzeroMMA<Scalar,)",
    "insertText": "Packet(&accReal##iter)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (\\ bsetzeroMMA<Scalar,)",
    "insertText": "Packet(&accImag##iter)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "EIGEN_UNUSED_VARIABLE(accReal##iter)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "EIGEN_UNUSED_VARIABLE(accImag##iter)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_UNROLL()",
    "kind": "Method",
    "detail": "Function (\\ } # define MICRO_COMPLEX_MMA_DST_PTR)",
    "insertText": "MICRO_COMPLEX_MMA_UNROLL(MICRO_COMPLEX_MMA_DST_PTR_ONE) #define MICRO_COMPLEX_MMA_SRC_PTR_ONE(iter) \\ if (unroll_factor > iter)"
  },
  {
    "label": "lhs_base()",
    "kind": "Method",
    "detail": "Function (\\ lhs_ptr_real # # iter =)",
    "insertText": "lhs_base(((advanceRows*row)/accCols) + iter*advanceRows)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (\\ lhs_ptr_imag # # iter = lhs_ptr_real # # iter + accCols* strideA ; \\ } else { \\)",
    "insertText": "EIGEN_UNUSED_VARIABLE(lhs_ptr_imag##iter)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } else { \\)",
    "insertText": "EIGEN_UNUSED_VARIABLE(lhs_ptr_real##iter)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_UNROLL()",
    "kind": "Method",
    "detail": "Function (\\ } # define MICRO_COMPLEX_MMA_SRC_PTR)",
    "insertText": "MICRO_COMPLEX_MMA_UNROLL(MICRO_COMPLEX_MMA_SRC_PTR_ONE) #define MICRO_COMPLEX_MMA_PREFETCH_ONE(iter) \\ if (unroll_factor > iter)"
  },
  {
    "label": "EIGEN_POWER_PREFETCH()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "EIGEN_POWER_PREFETCH(lhs_ptr_real##iter)"
  },
  {
    "label": "EIGEN_POWER_PREFETCH()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "EIGEN_POWER_PREFETCH(lhs_ptr_imag##iter)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_UNROLL()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define MICRO_COMPLEX_MMA_PREFETCH)",
    "insertText": "MICRO_COMPLEX_MMA_UNROLL(MICRO_COMPLEX_MMA_PREFETCH_ONE) #define MICRO_COMPLEX_MMA_STORE_ONE(iter) \\ if (unroll_factor > iter)"
  },
  {
    "label": "accColsC()",
    "kind": "Method",
    "detail": "Function (\\ storeComplexAccumulator<DataMapper,Index,Packet,Packetc,)",
    "insertText": "accColsC(row + iter*accCols, col, res, pAlphaReal, pAlphaImag, &accReal##iter, &accImag##iter)"
  },
  {
    "label": "MICRO_COMPLEX_MMA_UNROLL()",
    "kind": "Method",
    "detail": "Function (\\ } # define MICRO_COMPLEX_MMA_STORE)",
    "insertText": "MICRO_COMPLEX_MMA_UNROLL(MICRO_COMPLEX_MMA_STORE_ONE) template<int unroll_factor, typename Scalar, typename Packet, typename Packetc, typename RhsPacket, typename DataMapper, typename Index, const Index accRows, const Index accCols, bool ConjugateLhs, bool ConjugateRhs, bool LhsIsReal, bool RhsIsReal> EIGEN_STRONG_INLINE void gemm_complex_unrolled_MMA_iteration( const DataMapper& res, const Scalar* lhs_base, const Scalar* rhs_base, Index depth, Index strideA, Index offsetA, Index strideB, Index& row, Index col, const Packet& pAlphaReal, const Packet& pAlphaImag)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (rhs_ptr_imag = rhs_base + accRows* strideB ; } else {)",
    "insertText": "EIGEN_UNUSED_VARIABLE(rhs_ptr_imag)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} const Scalar* lhs_ptr_real0 = NULL,* lhs_ptr_imag0 = NULL,* lhs_ptr_real1 = NULL,* lhs_ptr_imag1 = NULL ; const Scalar* lhs_ptr_real2 = NULL,* lhs_ptr_imag2 = NULL,* lhs_ptr_real3 = NULL,* lhs_ptr_imag3 = NULL ; const Scalar* lhs_ptr_real4 = NULL,* lhs_ptr_imag4 = NULL ; __vector_quad accReal0,accImag0,accReal1,accImag1,accReal2,accImag2,accReal3,accImag3,accReal4,accImag4 ; MICRO_COMPLEX_MMA_SRC_PTR MICRO_COMPLEX_MMA_DST_PTR Index k = 0 ;)",
    "insertText": "for(; k + PEEL_COMPLEX_MMA <= depth; k+= PEEL_COMPLEX_MMA)"
  },
  {
    "label": "EIGEN_POWER_PREFETCH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_POWER_PREFETCH(rhs_ptr_real)"
  },
  {
    "label": "EIGEN_POWER_PREFETCH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_POWER_PREFETCH(rhs_ptr_imag)"
  },
  {
    "label": "gemm_complexMMA()",
    "kind": "Method",
    "detail": "Function (MICRO_COMPLEX_MMA_ONE } MICRO_COMPLEX_MMA_STORE row + = unroll_factor* accCols ; } template<LhsScalar,RhsScalar,Scalarc,Scalar,Index,Packet,Packetc,RhsPacket,DataMapper,const Index accRows,const Index accCols,bool ConjugateLhs,bool ConjugateRhs,bool LhsIsReal,bool RhsIsReal> void)",
    "insertText": "gemm_complexMMA(const DataMapper& res, const LhsScalar* blockAc, const RhsScalar* blockBc, Index rows, Index depth, Index cols, Scalarc alpha, Index strideA, Index strideB, Index offsetA, Index offsetB)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet pAlphaReal = pset1<)",
    "insertText": "Packet(alpha.real())"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet pAlphaImag = pset1<)",
    "insertText": "Packet(alpha.imag())"
  },
  {
    "label": "blockA()",
    "kind": "Method",
    "detail": "Function (const Scalar*)",
    "insertText": "blockA(Scalar *)"
  },
  {
    "label": "blockB()",
    "kind": "Method",
    "detail": "Function (const Scalar*)",
    "insertText": "blockB(Scalar *)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const Scalar* rhs_base = blockB + advanceCols* col* strideB + accRows* offsetB ; const Scalar* lhs_base = blockA ; Index row = 0 ; # define MAX_COMPLEX_MMA_UNROLL 4)",
    "insertText": "while(row + MAX_COMPLEX_MMA_UNROLL*accCols <= rows)"
  },
  {
    "label": "RhsIsReal()",
    "kind": "Method",
    "detail": "Function (gemm_complex_unrolled_MMA_iteration<MAX_COMPLEX_MMA_UNROLL,Scalar,Packet,Packetc,RhsPacket,DataMapper,Index,accRows,accCols,ConjugateLhs,ConjugateRhs,LhsIsReal,)",
    "insertText": "RhsIsReal(res, lhs_base, rhs_base, depth, strideA, offsetA, strideB, row, col, pAlphaReal, pAlphaImag)"
  },
  {
    "label": "RhsIsReal()",
    "kind": "Method",
    "detail": "Function (gemm_complex_extra_row<Scalar,Packet,Packetc,DataMapper,Index,accRows,accCols,ConjugateLhs,ConjugateRhs,LhsIsReal,)",
    "insertText": "RhsIsReal(res, lhs_base, rhs_base, depth, strideA, offsetA, strideB, row, col, rows, cols, remaining_rows, pAlphaReal, pAlphaImag, pMask)"
  },
  {
    "label": "RhsIsReal()",
    "kind": "Method",
    "detail": "Function (Index row = 0 ; gemm_complex_unrolled_col<Scalar,Packet,Packetc,DataMapper,Index,accCols,ConjugateLhs,ConjugateRhs,LhsIsReal,)",
    "insertText": "RhsIsReal(res, lhs_base, rhs_base, depth, strideA, offsetA, strideB, row, rows, col, remaining_cols, pAlphaReal, pAlphaImag)"
  },
  {
    "label": "RhsIsReal()",
    "kind": "Method",
    "detail": "Function (gemm_complex_extra_col<Scalar,Packet,Packetc,DataMapper,Index,accRows,accCols,ConjugateLhs,ConjugateRhs,LhsIsReal,)",
    "insertText": "RhsIsReal(res, lhs_base, rhs_base, depth, strideA, offsetA, strideB, row, col, remaining_rows, remaining_cols, pAlphaReal, pAlphaImag)"
  }
]