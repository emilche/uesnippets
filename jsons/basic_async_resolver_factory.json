[
  {
    "label": "BasicAsyncResolverFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicAsyncResolverFactory"
  },
  {
    "label": "WrappingAsyncDnsResolverFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WrappingAsyncDnsResolverFactory"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_BASIC_ASYNC_RESOLVER_FACTORY_H_ # define P2P_BASE_BASIC_ASYNC_RESOLVER_FACTORY_H_ # include<functional> # include<memory> # include<utility> # include \" api / async_dns_resolver . h \" # include \" api / async_resolver_factory . h \" # include \" rtc_base / async_resolver_interface . h \" namespace webrtc { class BasicAsyncResolverFactory final : public AsyncResolverFactory { public : rtc::AsyncResolverInterface*)",
    "insertText": "Create()"
  },
  {
    "label": "WrappingAsyncDnsResolverFactory()",
    "kind": "Method",
    "detail": "Function (} ; class WrappingAsyncDnsResolverFactory final : public AsyncDnsResolverFactoryInterface { public :)",
    "insertText": "WrappingAsyncDnsResolverFactory(std::unique_ptr<AsyncResolverFactory> wrapped_factory) : owned_factory_(std::move(wrapped_factory)), wrapped_factory_(owned_factory_.get())"
  },
  {
    "label": "WrappingAsyncDnsResolverFactory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "WrappingAsyncDnsResolverFactory(AsyncResolverFactory* non_owned_factory) : wrapped_factory_(non_owned_factory)"
  },
  {
    "label": "CreateAndResolve()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<webrtc::AsyncDnsResolverInterface>)",
    "insertText": "CreateAndResolve(const rtc::SocketAddress& addr, std::function<void()> callback)"
  },
  {
    "label": "CreateAndResolve()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<webrtc::AsyncDnsResolverInterface>)",
    "insertText": "CreateAndResolve(const rtc::SocketAddress& addr, int family, std::function<void()> callback)"
  }
]