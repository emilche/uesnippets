[
  {
    "label": "VInt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VInt"
  },
  {
    "label": "FOpResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VBuffer"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "VArrayBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VArrayBase"
  },
  {
    "label": "FConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "IsString()",
    "kind": "Method",
    "detail": "Function (struct VInt ; struct FOpResult ; enum class EArrayType : uint8 { None,VValue,Int32,Char8,Char32 } ; bool)",
    "insertText": "IsString(EArrayType Type)"
  },
  {
    "label": "V_DIE()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "V_DIE(\"Unhandled EArrayType encountered!\")"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} } struct VBuffer : TAux<void> { struct)",
    "insertText": "alignas(sizeof(VValue))"
  },
  {
    "label": "VBuffer()",
    "kind": "Method",
    "detail": "Function (uint32 NumValues ; const uint32 Capacity ; const EArrayType Type ; } ;)",
    "insertText": "VBuffer()"
  },
  {
    "label": "VBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VBuffer(FAllocationContext Context, uint32 NumValues, uint32 Capacity, EArrayType Type)"
  },
  {
    "label": "V_DIE_IF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_IF(Type == EArrayType::None)"
  },
  {
    "label": "V_DIE_UNLESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_UNLESS(Capacity >= NumValues)"
  },
  {
    "label": "Capacity()",
    "kind": "Method",
    "detail": "Function (uint32 AllocationCapacity =)",
    "insertText": "Capacity(IsString(Type) ? 1 : 0)"
  },
  {
    "label": "V_DIE_UNLESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_UNLESS(AllocationCapacity > 0)"
  },
  {
    "label": "AllocateAuxCell()",
    "kind": "Method",
    "detail": "Function (Ptr = Context .)",
    "insertText": "AllocateAuxCell(sizeof(Header) + ByteLength(Type) * AllocationCapacity)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(GetHeader())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NumValues,Capacity,Type } ;)",
    "insertText": "if(IsString(Type))"
  },
  {
    "label": "SetNullTerminator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNullTerminator()"
  },
  {
    "label": "VBuffer()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "VBuffer(FAllocationContext Context, uint32 NumValues, EArrayType Type) : VBuffer(Context, NumValues, NumValues, Type)"
  },
  {
    "label": "GetHeader()",
    "kind": "Method",
    "detail": "Function (} Header*)",
    "insertText": "GetHeader()"
  },
  {
    "label": "GetDataStart()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetDataStart()"
  },
  {
    "label": "GetArrayType()",
    "kind": "Method",
    "detail": "Function (} EArrayType)",
    "insertText": "GetArrayType()"
  },
  {
    "label": "SetChar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChar(Num(), static_cast<UTF8CHAR>(0))"
  },
  {
    "label": "SetVValue()",
    "kind": "Method",
    "detail": "Function (} template<bool bTransactional> void)",
    "insertText": "SetVValue(FAllocationContext Context, uint32 Index, VValue Value)"
  },
  {
    "label": "VValue()",
    "kind": "Method",
    "detail": "Function (GetData<TWriteBarrier<)",
    "insertText": "VValue()[Index].SetTransactionally(Context, *this, Value)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "new(&GetData<TWriteBarrier<VValue>>()[Index]) TWriteBarrier<VValue>(Context, Value)"
  },
  {
    "label": "SetInt32()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetInt32(uint32 Index, int32 Value)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (GetData<)",
    "insertText": "int32()"
  },
  {
    "label": "SetChar()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetChar(uint32 Index, UTF8CHAR Value)"
  },
  {
    "label": "UTF8CHAR()",
    "kind": "Method",
    "detail": "Function (GetData<)",
    "insertText": "UTF8CHAR()"
  },
  {
    "label": "SetChar32()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetChar32(uint32 Index, UTF32CHAR Value)"
  },
  {
    "label": "UTF32CHAR()",
    "kind": "Method",
    "detail": "Function (GetData<)",
    "insertText": "UTF32CHAR()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} template<T = void> T*)",
    "insertText": "GetData()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "static_assert(IsTAux<VBuffer>)"
  },
  {
    "label": "DECLARE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (struct VArrayBase : VHeapValue {)",
    "insertText": "DECLARE_DERIVED_VCPPCLASSINFO(COREUOBJECT_API, VHeapValue)"
  },
  {
    "label": "SetBufferWithoutStoreBarrier()",
    "kind": "Method",
    "detail": "Function (protected : TWriteBarrier<VBuffer> Buffer ; template<bool bTransactional = false> void)",
    "insertText": "SetBufferWithoutStoreBarrier(FAccessContext Context, VBuffer NewBuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (reinterpret_cast<TWriteBarrier<TAux<)",
    "insertText": "void(Buffer).SetTransactionally(Context, this, NewBuffer)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} else { Buffer .)",
    "insertText": "Set(Context, NewBuffer)"
  },
  {
    "label": "SetBufferWithStoreBarrier()",
    "kind": "Method",
    "detail": "Function (} } template<bool bTransactional = false> void)",
    "insertText": "SetBufferWithStoreBarrier(FAccessContext Context, VBuffer NewBuffer)"
  },
  {
    "label": "StoreStoreFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreStoreFence()"
  },
  {
    "label": "bTransactional()",
    "kind": "Method",
    "detail": "Function (SetBufferWithoutStoreBarrier<)",
    "insertText": "bTransactional(Context, NewBuffer)"
  },
  {
    "label": "DetermineArrayType()",
    "kind": "Method",
    "detail": "Function (} EArrayType)",
    "insertText": "DetermineArrayType(VValue Value)"
  },
  {
    "label": "SetIsDeeplyMutable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsDeeplyMutable()"
  },
  {
    "label": "SetBufferWithoutStoreBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBufferWithoutStoreBarrier(Context, VBuffer(Context, NumValues, Capacity, ArrayType))"
  },
  {
    "label": "V_DIE_IF()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "V_DIE_IF(NumValues)"
  },
  {
    "label": "VArrayBase()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "VArrayBase(FAllocationContext Context, uint32 NumValues, EArrayType ArrayType, VEmergentType* Type) : VArrayBase(Context, NumValues, NumValues, ArrayType, Type)"
  },
  {
    "label": "VArrayBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VArrayBase(FAllocationContext Context, std::initializer_list<VValue> InitList, VEmergentType* Type) : VHeapValue(Context, Type)"
  },
  {
    "label": "SetBufferWithoutStoreBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBufferWithoutStoreBarrier(Context, VBuffer(Context, InitList.size(), DetermineArrayType(*InitList.begin())))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 Index = 0 ;)",
    "insertText": "for(VValue Value : InitList)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(Context, Index++, Value)"
  },
  {
    "label": "VArrayBase()",
    "kind": "Method",
    "detail": "Function (} } } template<InitIndexFunc,= std::enable_if_t<std::is_same_v<VValue,std::invoke_result_t<InitIndexFunc,uint32>>>>)",
    "insertText": "VArrayBase(FAllocationContext Context, uint32 NumValues, InitIndexFunc&& InitFunc, VEmergentType* Type) : VHeapValue(Context, Type)"
  },
  {
    "label": "InitFunc()",
    "kind": "Method",
    "detail": "Function (VValue Elem0 =)",
    "insertText": "InitFunc(0)"
  },
  {
    "label": "SetBufferWithoutStoreBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBufferWithoutStoreBarrier(Context, VBuffer(Context, NumValues, DetermineArrayType(Elem0)))"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(Context, Index, Index > 0 ? InitFunc(Index) : Elem0)"
  },
  {
    "label": "VArrayBase()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "VArrayBase(FAllocationContext Context, FUtf8StringView String, VEmergentType* Type) : VHeapValue(Context, Type) , Buffer(Context, VBuffer(Context, String.Len(), EArrayType::Char8))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(GetData(), String.GetData(), String.Len())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "Get().SetNullTerminator()"
  },
  {
    "label": "ConvertDataToVValues()",
    "kind": "Method",
    "detail": "Function (} template<bool bTransactional = false> void)",
    "insertText": "ConvertDataToVValues(FAllocationContext Context, uint32 NewCapacity)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "Serialize(T*& This, FAllocationContext Context, FAbstractVisitor& Visitor)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (public : uint32)",
    "insertText": "Num()"
  },
  {
    "label": "Capacity()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Capacity()"
  },
  {
    "label": "IsInBounds()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInBounds(uint32 Index)"
  },
  {
    "label": "IsInBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInBounds(const VInt& Index, const uint32 Bounds)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (VValue)",
    "insertText": "GetValue(uint32 Index)"
  },
  {
    "label": "SetValueImpl()",
    "kind": "Method",
    "detail": "Function (protected : template<bool bTransactional> void)",
    "insertText": "SetValueImpl(FAllocationContext Context, uint32 Index, VValue Value)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetValue(FAllocationContext Context, uint32 Index, VValue Value)"
  },
  {
    "label": "SetValueTransactionally()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValueTransactionally(FAllocationContext Context, uint32 Index, VValue Value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "Get().SetVValue<bTransactional>(Context, Index, Value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "Get().SetInt32(Index, Value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "Get().SetChar(Index, Value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "Get().SetChar32(Index, Value)"
  },
  {
    "label": "ByteLength()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "ByteLength()"
  },
  {
    "label": "IsString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsString()"
  },
  {
    "label": "AsString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "AsString()"
  },
  {
    "label": "ConstructWithSlack()",
    "kind": "Method",
    "detail": "Function (FString String =)",
    "insertText": "ConstructWithSlack(UTF8TEXT(\"\"), Num())"
  },
  {
    "label": "V_DIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE(\"Couldn't convert index %d to char! Partially parsed: %s\", Index, *String)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} String [ Index ] =)",
    "insertText": "GetValue(Index).AsChar()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return String ; })",
    "insertText": "if(::Verse::IsString(GetArrayType()))"
  },
  {
    "label": "V_DIE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "V_DIE(\"Couldn't convert Array to String!\")"
  },
  {
    "label": "AsStringView()",
    "kind": "Method",
    "detail": "Function (} FUtf8StringView)",
    "insertText": "AsStringView()"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const FUtf8StringView String)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (VValue Val =)",
    "insertText": "GetValue(Index)"
  },
  {
    "label": "EqualImpl()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "EqualImpl(FAllocationContext Context, VCell* Other, const TFunction<void(::Verse::VValue, ::Verse::VValue)>& HandlePlaceholder)"
  },
  {
    "label": "MeltImpl()",
    "kind": "Method",
    "detail": "Function (VValue)",
    "insertText": "MeltImpl(FAllocationContext Context)"
  },
  {
    "label": "GetTypeHashImpl()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHashImpl()"
  },
  {
    "label": "ToStringImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToStringImpl(FStringBuilderBase& Builder, FAllocationContext Context, const FCellFormatter& Formatter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (class FConstIterator { union { const TWriteBarrier<VValue>* Barrier ; const int32* Int32 ; const UTF8CHAR* Char ; const UTF32CHAR* Char32 ; const void* None ; } ; EArrayType ArrayType ; public : VValue)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "operator(const FConstIterator& Rhs)"
  },
  {
    "label": "FConstIterator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } private : struct VArrayBase ;)",
    "insertText": "FConstIterator(const TWriteBarrier<VValue>* InCurrentValue) : Barrier(InCurrentValue) , ArrayType(EArrayType::VValue)"
  },
  {
    "label": "FConstIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstIterator(const int32* InCurrentValue) : Int32(InCurrentValue) , ArrayType(EArrayType::Int32)"
  },
  {
    "label": "FConstIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstIterator(const UTF8CHAR* InCurrentValue) : Char(InCurrentValue) , ArrayType(EArrayType::Char8)"
  },
  {
    "label": "FConstIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstIterator(const UTF32CHAR* InCurrentValue) : Char32(InCurrentValue) , ArrayType(EArrayType::Char32)"
  },
  {
    "label": "FConstIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstIterator(const void* InCurrentValue) : None(InCurrentValue) , ArrayType(EArrayType::None)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} } ; FConstIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (FConstIterator)",
    "insertText": "end()"
  }
]