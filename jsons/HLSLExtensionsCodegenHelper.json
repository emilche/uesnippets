[
  {
    "label": "CodeGenOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CodeGenOptions"
  },
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "HLSLExtensionsCodegenHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HLSLExtensionsCodegenHelper"
  },
  {
    "label": "SemanticDefineError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SemanticDefineError"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CustomRootSignature",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CustomRootSignature"
  },
  {
    "label": "Status",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Status"
  },
  {
    "label": "SemanticDefineError()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / DXIL / DxilOperations . h \" # include \" dxc / Support / DxcOptToggles . h \" # include<string> # include<vector> namespace clang { class CodeGenOptions ; } namespace llvm { class CallInst ; class Value ; class Module ; } namespace hlsl { class HLSLExtensionsCodegenHelper { public : class SemanticDefineError { public : enum class Level { Warning,Error } ;)",
    "insertText": "SemanticDefineError(unsigned location, Level level, const std::string &message) : m_location(location), m_level(level), m_message(message)"
  },
  {
    "label": "Location()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "Location()"
  },
  {
    "label": "UpdateCodeGenOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCodeGenOptions(clang::CodeGenOptions &CGO)"
  },
  {
    "label": "IsOptionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOptionEnabled(hlsl::options::Toggle toggle)"
  },
  {
    "label": "GetIntrinsicName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetIntrinsicName(unsigned opcode)"
  },
  {
    "label": "GetDxilOpcode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDxilOpcode(unsigned opcode, OP::OpCode &dxilOpcode)"
  },
  {
    "label": "GetCustomRootSignature()",
    "kind": "Method",
    "detail": "Function (struct CustomRootSignature { std::string RootSignature ; unsigned EncodedSourceLocation ; enum Status { NOT_FOUND = 0,FOUND } ; } ; CustomRootSignature::Status)",
    "insertText": "GetCustomRootSignature(CustomRootSignature *out)"
  },
  {
    "label": "HLSLExtensionsCodegenHelper()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "HLSLExtensionsCodegenHelper()"
  }
]