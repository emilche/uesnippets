[
  {
    "label": "AHUD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AHUD"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FDebugTextInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugTextInfo"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_FiveParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" GameFramework / Actor . h \" # include \" GameFramework / HUDHitBox . h \" # include \" GameFramework / DebugTextInfo . h \" # include \" HUD . generated . h \" class AHUD ; class APawn ; class APlayerController ; class FCanvas ; class FDebugDisplayInfo ; class UCanvas ; class UFont ; class UMaterialInterface ; class UTexture ;)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_FiveParams(FOnShowDebugInfo, AHUD* , UCanvas* , const FDebugDisplayInfo& , float& , float&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnHUDPostRender, AHUD* , UCanvas*)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(config=Game, hidecategories=(Rendering,Actor,Input,Replication), showcategories=(\"Input|MouseInput\", \"Input|TouchInput\"), notplaceable, transient, BlueprintType, Blueprintable, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(BlueprintReadOnly, Category=HUD)"
  },
  {
    "label": "NotifyHitBoxClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyHitBoxClick(FName BoxName)"
  },
  {
    "label": "NotifyHitBoxRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyHitBoxRelease(FName BoxName)"
  },
  {
    "label": "NotifyHitBoxBeginCursorOver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyHitBoxBeginCursorOver(FName BoxName)"
  },
  {
    "label": "NotifyHitBoxEndCursorOver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyHitBoxEndCursorOver(FName BoxName)"
  },
  {
    "label": "GetActorsInSelectionRectangle()",
    "kind": "Method",
    "detail": "Function (template<ClassFilter> bool)",
    "insertText": "GetActorsInSelectionRectangle(const FVector2D& FirstPoint, const FVector2D& SecondPoint, TArray<ClassFilter*>& OutActors, bool bIncludeNonCollidingComponents = true, bool bActorMustBeFullyEnclosed = false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutActors .)",
    "insertText": "Add(CastChecked<ClassFilter>(EachActor))"
  },
  {
    "label": "Draw3DLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw3DLine(FVector Start, FVector End, FColor LineColor)"
  },
  {
    "label": "Draw2DLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw2DLine(int32 X1, int32 Y1, int32 X2, int32 Y2, FColor LineColor)"
  },
  {
    "label": "SetCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanvas(UCanvas* InCanvas, UCanvas* InDebugCanvas)"
  },
  {
    "label": "PostInitializeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitializeComponents()"
  },
  {
    "label": "DrawActorOverlays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawActorOverlays(FVector Viewpoint, FRotator ViewRotation)"
  },
  {
    "label": "DrawSafeZoneOverlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSafeZoneOverlay()"
  },
  {
    "label": "NotifyBindPostProcessEffects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyBindPostProcessEffects()"
  },
  {
    "label": "RemovePostRenderedActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePostRenderedActor(AActor* A)"
  },
  {
    "label": "AddPostRenderedActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPostRenderedActor(AActor* A)"
  },
  {
    "label": "ShouldDisplayDebug()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDisplayDebug(const FName& DebugType)"
  },
  {
    "label": "ShowDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowDebugInfo(float& YL, float& YPos)"
  },
  {
    "label": "GetCurrentDebugTargetActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetCurrentDebugTargetActor()"
  },
  {
    "label": "AddActorToDebugList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorToDebugList(AActor* InActor, TArray<AActor*>& InOutList, UWorld* InWorld)"
  },
  {
    "label": "AddComponentOwnerToDebugList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddComponentOwnerToDebugList(UActorComponent* InComponent, TArray<AActor*>& InOutList, UWorld* InWorld)"
  },
  {
    "label": "GetDebugActorList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDebugActorList(TArray<AActor*>& InOutList)"
  },
  {
    "label": "PostRender()",
    "kind": "Method",
    "detail": "Function (FOnShowDebugInfo OnShowDebugInfo ; FOnHUDPostRender OnHUDPostRender ; void)",
    "insertText": "PostRender()"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD()"
  },
  {
    "label": "GetFontFromSizeIndex()",
    "kind": "Method",
    "detail": "Function (UFont*)",
    "insertText": "GetFontFromSizeIndex(int32 FontSizeIndex)"
  },
  {
    "label": "OnLostFocusPause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLostFocusPause(bool bEnable)"
  },
  {
    "label": "DrawDebugTextList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugTextList()"
  },
  {
    "label": "HandleBugScreenShot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleBugScreenShot()"
  },
  {
    "label": "RenderHitBoxes()",
    "kind": "Method",
    "detail": "Function (} TArray<FHUDHitBox> HitBoxMap ; TArray<FHUDHitBox*> HitBoxHits ; TSet<FName> HitBoxesOver ; void)",
    "insertText": "RenderHitBoxes(FCanvas* InCanvas)"
  },
  {
    "label": "UpdateAndDispatchHitBoxClickEvents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateAndDispatchHitBoxClickEvents(const FVector2D ClickLocation, const EInputEvent InEventType)"
  },
  {
    "label": "UpdateHitBoxCandidates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHitBoxCandidates(TArray<FVector2D> InContactPoints)"
  },
  {
    "label": "AnyCurrentHitBoxHits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyCurrentHitBoxHits()"
  },
  {
    "label": "GetHitBoxAtCoordinates()",
    "kind": "Method",
    "detail": "Function (const FHUDHitBox*)",
    "insertText": "GetHitBoxAtCoordinates(FVector2D InHitLocation, bool bConsumingInput = false)"
  },
  {
    "label": "GetHitBoxesAtCoordinates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHitBoxesAtCoordinates(FVector2D InHitLocation, TArray<const FHUDHitBox*>& OutHitBoxes)"
  },
  {
    "label": "GetHitBoxWithName()",
    "kind": "Method",
    "detail": "Function (const FHUDHitBox*)",
    "insertText": "GetHitBoxWithName(const FName InName)"
  },
  {
    "label": "IsCanvasValid_WarnIfNot()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsCanvasValid_WarnIfNot()"
  },
  {
    "label": "GetCoordinateOffset()",
    "kind": "Method",
    "detail": "Function (private : FVector2D)",
    "insertText": "GetCoordinateOffset()"
  },
  {
    "label": "FindDebugTextListIntervalForActor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindDebugTextListIntervalForActor(AActor* InSrcActor, int32& OutFirstIdx, int32& OutLastIdx)"
  }
]