[
  {
    "label": "AHUD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AHUD"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "AHUD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AHUD"
  },
  {
    "label": "FDebugTextInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugTextInfo"
  },
  {
    "label": "filter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "filter"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "filter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "filter"
  },
  {
    "label": "ShowHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowHUD()"
  },
  {
    "label": "ShowDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowDebug(FName DebugType = NAME_None)"
  },
  {
    "label": "ShowDebugToggleSubCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowDebugToggleSubCategory(FName Category)"
  },
  {
    "label": "ShowDebugForReticleTargetToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowDebugForReticleTargetToggle(TSubclassOf<AActor> DesiredClass)"
  },
  {
    "label": "RemoveAllDebugStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllDebugStrings()"
  },
  {
    "label": "RemoveDebugText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDebugText(AActor* SrcActor, bool bLeaveDurationText = false)"
  },
  {
    "label": "ReceiveDrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveDrawHUD(int32 SizeX, int32 SizeY)"
  },
  {
    "label": "ReceiveHitBoxClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveHitBoxClick(const FName BoxName)"
  },
  {
    "label": "NotifyHitBoxClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyHitBoxClick(FName BoxName)"
  },
  {
    "label": "ReceiveHitBoxRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveHitBoxRelease(const FName BoxName)"
  },
  {
    "label": "NotifyHitBoxRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyHitBoxRelease(FName BoxName)"
  },
  {
    "label": "ReceiveHitBoxBeginCursorOver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveHitBoxBeginCursorOver(const FName BoxName)"
  },
  {
    "label": "NotifyHitBoxBeginCursorOver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyHitBoxBeginCursorOver(FName BoxName)"
  },
  {
    "label": "ReceiveHitBoxEndCursorOver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveHitBoxEndCursorOver(const FName BoxName)"
  },
  {
    "label": "NotifyHitBoxEndCursorOver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyHitBoxEndCursorOver(FName BoxName)"
  },
  {
    "label": "DrawText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawText(const FString& Text, FLinearColor TextColor, float ScreenX, float ScreenY, UFont* Font=NULL, float Scale=1.f, bool bScalePosition=false)"
  },
  {
    "label": "DrawLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, FLinearColor LineColor, float LineThickness=0.f)"
  },
  {
    "label": "DrawRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawRect(FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH)"
  },
  {
    "label": "DrawTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTexture(UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, FLinearColor TintColor=FLinearColor::White, EBlendMode BlendMode=BLEND_Translucent, float Scale=1.f, bool bScalePosition=false, float Rotation=0.f, FVector2D RotPivot=FVector2D::ZeroVector)"
  },
  {
    "label": "DrawTextureSimple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTextureSimple(UTexture* Texture, float ScreenX, float ScreenY, float Scale=1.f, bool bScalePosition=false)"
  },
  {
    "label": "DrawMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawMaterial(UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale=1.f, bool bScalePosition=false, float Rotation=0.f, FVector2D RotPivot=FVector2D::ZeroVector)"
  },
  {
    "label": "DrawMaterialSimple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawMaterialSimple(UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale=1.f, bool bScalePosition=false)"
  },
  {
    "label": "DrawMaterialTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawMaterialTriangle(UMaterialInterface* Material, FVector2D V0_Pos, FVector2D V1_Pos, FVector2D V2_Pos, FVector2D V0_UV, FVector2D V1_UV, FVector2D V2_UV, FLinearColor V0_Color = FLinearColor::White, FLinearColor V1_Color = FLinearColor::White, FLinearColor V2_Color = FLinearColor::White)"
  },
  {
    "label": "GetActorsInSelectionRectangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorsInSelectionRectangle(TSubclassOf<AActor> ClassFilter, const FVector2D& FirstPoint, const FVector2D& SecondPoint, TArray<AActor*>& OutActors, bool bIncludeNonCollidingComponents = true, bool bActorMustBeFullyEnclosed = false)"
  },
  {
    "label": "AddHitBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHitBox(FVector2D Position, FVector2D Size, FName InName, bool bConsumesInput, int32 Priority = 0)"
  },
  {
    "label": "Draw3DLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw3DLine(FVector Start, FVector End, FColor LineColor)"
  },
  {
    "label": "Draw2DLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw2DLine(int32 X1, int32 Y1, int32 X2, int32 Y2, FColor LineColor)"
  },
  {
    "label": "SetCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanvas(UCanvas* InCanvas, UCanvas* InDebugCanvas)"
  },
  {
    "label": "DrawActorOverlays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawActorOverlays(FVector Viewpoint, FRotator ViewRotation)"
  },
  {
    "label": "DrawSafeZoneOverlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSafeZoneOverlay()"
  },
  {
    "label": "NotifyBindPostProcessEffects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyBindPostProcessEffects()"
  },
  {
    "label": "RemovePostRenderedActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePostRenderedActor(AActor* A)"
  },
  {
    "label": "AddPostRenderedActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPostRenderedActor(AActor* A)"
  },
  {
    "label": "ShowDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowDebugInfo(float& YL, float& YPos)"
  },
  {
    "label": "AddActorToDebugList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorToDebugList(AActor* InActor, TArray<AActor*>& InOutList, UWorld* InWorld)"
  },
  {
    "label": "AddComponentOwnerToDebugList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddComponentOwnerToDebugList(UActorComponent* InComponent, TArray<AActor*>& InOutList, UWorld* InWorld)"
  },
  {
    "label": "GetDebugActorList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDebugActorList(TArray<AActor*>& InOutList)"
  },
  {
    "label": "NextDebugTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NextDebugTarget()"
  },
  {
    "label": "PreviousDebugTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreviousDebugTarget()"
  },
  {
    "label": "PostRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRender()"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD()"
  },
  {
    "label": "OnLostFocusPause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLostFocusPause(bool bEnable)"
  },
  {
    "label": "DrawDebugTextList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugTextList()"
  },
  {
    "label": "RenderHitBoxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderHitBoxes( FCanvas* InCanvas )"
  },
  {
    "label": "UpdateAndDispatchHitBoxClickEvents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateAndDispatchHitBoxClickEvents(const FVector2D ClickLocation, const EInputEvent InEventType)"
  },
  {
    "label": "UpdateHitBoxCandidates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHitBoxCandidates( TArray<FVector2D> InContactPoints )"
  }
]