[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_THREAD_COLLISION_WARNER_H_ # define BASE_THREADING_THREAD_COLLISION_WARNER_H_ # include \" base / atomicops . h \" # include \" base / base_export . h \" # include \" base / compiler_specific . h \" # include \" base / memory / raw_ptr . h \" # if !)",
    "insertText": "defined(NDEBUG) #define DFAKE_UNIQUE_VARIABLE_CONCAT(a, b) a##b #define DFAKE_UNIQUE_VARIABLE_CONCAT1(a, b) DFAKE_UNIQUE_VARIABLE_CONCAT(a, b) #define DFAKE_UNIQUE_VARIABLE_NAME(a) DFAKE_UNIQUE_VARIABLE_CONCAT1(a, __LINE__) #define DFAKE_MUTEX(obj) \\ mutable base::ThreadCollisionWarner obj #define DFAKE_SCOPED_LOCK(obj) \\ base::ThreadCollisionWarner::ScopedCheck DFAKE_UNIQUE_VARIABLE_NAME( \\ s_check_)(&obj) #define DFAKE_SCOPED_RECURSIVE_LOCK(obj) \\ base::ThreadCollisionWarner::ScopedRecursiveCheck \\ DFAKE_UNIQUE_VARIABLE_NAME(sr_check)(&obj) #define DFAKE_SCOPED_LOCK_THREAD_LOCKED(obj) \\ base::ThreadCollisionWarner::Check DFAKE_UNIQUE_VARIABLE_NAME(check_)(&obj) #else #define DFAKE_MUTEX(obj) typedef void InternalFakeMutexType##obj #define DFAKE_SCOPED_LOCK(obj) ((void)0) #define DFAKE_SCOPED_RECURSIVE_LOCK(obj) ((void)0) #define DFAKE_SCOPED_LOCK_THREAD_LOCKED(obj) ((void)0)"
  },
  {
    "label": "AsserterBase()",
    "kind": "Method",
    "detail": "Function (struct BASE_EXPORT AsserterBase { ~)",
    "insertText": "AsserterBase()"
  },
  {
    "label": "warn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "warn()"
  },
  {
    "label": "DCheckAsserter()",
    "kind": "Method",
    "detail": "Function (} ; struct BASE_EXPORT DCheckAsserter : public AsserterBase { ~)",
    "insertText": "DCheckAsserter()"
  },
  {
    "label": "ThreadCollisionWarner()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT ThreadCollisionWarner { public :)",
    "insertText": "ThreadCollisionWarner(AsserterBase* asserter = new DCheckAsserter()) : valid_thread_id_(0), counter_(0), asserter_(asserter)"
  },
  {
    "label": "ThreadCollisionWarner()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ThreadCollisionWarner(const ThreadCollisionWarner&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadCollisionWarner&)",
    "insertText": "operator(const ThreadCollisionWarner&)"
  },
  {
    "label": "ThreadCollisionWarner()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ThreadCollisionWarner()"
  },
  {
    "label": "ClearAndDelete()",
    "kind": "Method",
    "detail": "Function (asserter_ .)",
    "insertText": "ClearAndDelete()"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (} class BASE_EXPORT Check { public :)",
    "insertText": "Check(ThreadCollisionWarner* warner) : warner_(warner)"
  },
  {
    "label": "EnterSelf()",
    "kind": "Method",
    "detail": "Function (warner_ ->)",
    "insertText": "EnterSelf()"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Check(const Check&)"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Check()"
  },
  {
    "label": "ScopedCheck()",
    "kind": "Method",
    "detail": "Function (private : raw_ptr<ThreadCollisionWarner> warner_ ; } ; class BASE_EXPORT ScopedCheck { public :)",
    "insertText": "ScopedCheck(ThreadCollisionWarner* warner) : warner_(warner)"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (warner_ ->)",
    "insertText": "Enter()"
  },
  {
    "label": "ScopedCheck()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedCheck(const ScopedCheck&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedCheck&)",
    "insertText": "operator(const ScopedCheck&)"
  },
  {
    "label": "ScopedCheck()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedCheck()"
  },
  {
    "label": "Leave()",
    "kind": "Method",
    "detail": "Function (warner_ ->)",
    "insertText": "Leave()"
  },
  {
    "label": "ScopedRecursiveCheck()",
    "kind": "Method",
    "detail": "Function (} private : raw_ptr<ThreadCollisionWarner> warner_ ; } ; class BASE_EXPORT ScopedRecursiveCheck { public :)",
    "insertText": "ScopedRecursiveCheck(ThreadCollisionWarner* warner) : warner_(warner)"
  },
  {
    "label": "ScopedRecursiveCheck()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedRecursiveCheck(const ScopedRecursiveCheck&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedRecursiveCheck&)",
    "insertText": "operator(const ScopedRecursiveCheck&)"
  },
  {
    "label": "ScopedRecursiveCheck()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedRecursiveCheck()"
  }
]