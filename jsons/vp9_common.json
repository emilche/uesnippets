[
  {
    "label": "vp9_copy()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_COMMON_VP9_COMMON_H_ # define VPX_VP9_COMMON_VP9_COMMON_H_ # include<assert . h> # include \" . / vpx_config . h \" # include \" vpx_dsp / vpx_dsp_common . h \" # include \" vpx_mem / vpx_mem . h \" # include \" vpx / vpx_integer . h \" # include \" vpx_ports / bitops . h \" # ifdef __cplusplus \" C \" { # endif # define)",
    "insertText": "vp9_copy(dest, src)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(sizeof(dest) == sizeof(src))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "memcpy(dest, src, sizeof(src))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define vp9_copy_array(dest, src, n)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(sizeof(*(dest)) == sizeof(*(src)))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "memcpy(dest, src, (n) * sizeof(*(src)))"
  },
  {
    "label": "vp9_zero()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "vp9_zero(dest) memset(&(dest), 0, sizeof(dest)) #define vp9_zero_array(dest, n) memset(dest, 0, (n) * sizeof(*(dest))) static INLINE int get_unsigned_bits(unsigned int num_values)"
  },
  {
    "label": "CHECK_MEM_ERROR()",
    "kind": "Method",
    "detail": "Function (} # if CONFIG_DEBUG # define)",
    "insertText": "CHECK_MEM_ERROR(cm, lval, expr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(&(cm)->error.setjmp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!(lval)) \\ vpx_internal_error(&(cm)->error, VPX_CODEC_MEM_ERROR, \\ \"Failed to allocate \" #lval \" at %s:%d\", __FILE__, \\ __LINE__)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #else #define CHECK_MEM_ERROR(cm, lval, expr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!(lval)) \\ vpx_internal_error(&(cm)->error, VPX_CODEC_MEM_ERROR, \\ \"Failed to allocate \" #lval)"
  }
]