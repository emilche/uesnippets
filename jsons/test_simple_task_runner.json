[
  {
    "label": "TimeDelta",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeDelta"
  },
  {
    "label": "TestSimpleTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestSimpleTaskRunner"
  },
  {
    "label": "TestSimpleTaskRunner()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_TEST_SIMPLE_TASK_RUNNER_H_ # define BASE_TEST_TEST_SIMPLE_TASK_RUNNER_H_ # include \" base / callback . h \" # include \" base / compiler_specific . h \" # include \" base / containers / circular_deque . h \" # include \" base / synchronization / lock . h \" # include \" base / task / single_thread_task_runner . h \" # include \" base / test / test_pending_task . h \" # include \" base / threading / platform_thread . h \" namespace base { class TimeDelta ; class TestSimpleTaskRunner : public SingleThreadTaskRunner { public :)",
    "insertText": "TestSimpleTaskRunner()"
  },
  {
    "label": "TestSimpleTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestSimpleTaskRunner(const TestSimpleTaskRunner&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestSimpleTaskRunner&)",
    "insertText": "operator(const TestSimpleTaskRunner&)"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostDelayedTask(const Location& from_here, OnceClosure task, TimeDelta delay)"
  },
  {
    "label": "PostNonNestableDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostNonNestableDelayedTask(const Location& from_here, OnceClosure task, TimeDelta delay)"
  },
  {
    "label": "RunsTasksInCurrentSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunsTasksInCurrentSequence()"
  },
  {
    "label": "TakePendingTasks()",
    "kind": "Method",
    "detail": "Function (base::circular_deque<TestPendingTask>)",
    "insertText": "TakePendingTasks()"
  },
  {
    "label": "NumPendingTasks()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "NumPendingTasks()"
  },
  {
    "label": "HasPendingTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingTask()"
  },
  {
    "label": "NextPendingTaskDelay()",
    "kind": "Method",
    "detail": "Function (base::TimeDelta)",
    "insertText": "NextPendingTaskDelay()"
  },
  {
    "label": "FinalPendingTaskDelay()",
    "kind": "Method",
    "detail": "Function (base::TimeDelta)",
    "insertText": "FinalPendingTaskDelay()"
  },
  {
    "label": "ClearPendingTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPendingTasks()"
  },
  {
    "label": "RunPendingTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPendingTasks()"
  },
  {
    "label": "RunUntilIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunUntilIdle()"
  },
  {
    "label": "CurrentRef()",
    "kind": "Method",
    "detail": "Function (private : const PlatformThreadRef thread_ref_ =)",
    "insertText": "CurrentRef()"
  }
]