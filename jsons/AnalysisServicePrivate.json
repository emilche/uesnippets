[
  {
    "label": "FModuleService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModuleService"
  },
  {
    "label": "FAnalysisSessionLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnalysisSessionLock"
  },
  {
    "label": "FAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnalysisSession"
  },
  {
    "label": "FAnalysisService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnalysisService"
  },
  {
    "label": "ReadAccessCheck()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnalysisCache . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" TraceServices / AnalysisService . h \" # include \" Containers / HashTable . h \" # include \" Common / SlabAllocator . h \" # include \" Common / StringStore . h \" # include \" Trace / Analysis . h \" namespace TraceServices { class FModuleService ; class FAnalysisSessionLock { public : void)",
    "insertText": "ReadAccessCheck()"
  },
  {
    "label": "WriteAccessCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteAccessCheck()"
  },
  {
    "label": "BeginRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRead()"
  },
  {
    "label": "EndRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRead()"
  },
  {
    "label": "BeginEdit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginEdit()"
  },
  {
    "label": "EndEdit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndEdit()"
  },
  {
    "label": "FAnalysisSession()",
    "kind": "Method",
    "detail": "Function (private : FRWLock RWLock ; } ; class FAnalysisSession : public IAnalysisSession { public :)",
    "insertText": "FAnalysisSession(uint32 TraceId, const TCHAR* SessionName, TUniquePtr<UE::Trace::IInDataStream>&& InDataStream)"
  },
  {
    "label": "FAnalysisSession()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAnalysisSession()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop(bool bAndWait)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait()"
  },
  {
    "label": "IsAnalysisComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnalysisComplete()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (DurationSeconds =)",
    "insertText": "Max(Duration, DurationSeconds)"
  },
  {
    "label": "GetMetadataCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetMetadataCount()"
  },
  {
    "label": "EnumerateMetadata()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateMetadata(TFunctionRef<void(const FTraceSessionMetadata& Metadata)> Callback)"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetadata(FName InName, int64 InValue)"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetadata(FName InName, double InValue)"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetadata(FName InName, FString InValue)"
  },
  {
    "label": "GetLog()",
    "kind": "Method",
    "detail": "Function (FMessageLog*)",
    "insertText": "GetLog()"
  },
  {
    "label": "DrainPendingMessages()",
    "kind": "Method",
    "detail": "Function (TArray<FAnalysisMessage>)",
    "insertText": "DrainPendingMessages()"
  },
  {
    "label": "GetLinearAllocator()",
    "kind": "Method",
    "detail": "Function (ILinearAllocator&)",
    "insertText": "GetLinearAllocator()"
  },
  {
    "label": "StoreString()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "StoreString(const FStringView& String)"
  },
  {
    "label": "GetCache()",
    "kind": "Method",
    "detail": "Function (} IAnalysisCache&)",
    "insertText": "GetCache()"
  },
  {
    "label": "AddAnalyzer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddAnalyzer(UE::Trace::IAnalyzer* Analyzer)"
  },
  {
    "label": "AddProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddProvider(const FName& Name, TSharedPtr<IProvider> Provider, TSharedPtr<IEditableProvider> EditableProvider = nullptr)"
  },
  {
    "label": "ReadAnalyzers()",
    "kind": "Method",
    "detail": "Function (const TArray<UE::Trace::IAnalyzer*>)",
    "insertText": "ReadAnalyzers()"
  },
  {
    "label": "EditProviderPrivate()",
    "kind": "Method",
    "detail": "Function (IEditableProvider*)",
    "insertText": "EditProviderPrivate(const FName& Name)"
  },
  {
    "label": "OnAnalysisMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisMessage(UE::Trace::EAnalysisMessageSeverity Severity, FStringView Message)"
  },
  {
    "label": "FAnalysisService()",
    "kind": "Method",
    "detail": "Function (private : FAnalysisSessionLock Lock ; FString Name ; uint32 TraceId = 0 ; double DurationSeconds = 0 . 0 ; TMap<FName,FTraceSessionMetadata> Metadata ; FSlabAllocator Allocator ; FStringStore StringStore ; FAnalysisCache Cache ; TArray<UE::Trace::IAnalyzer*> Analyzers ; TMap<FName,TTuple<TSharedPtr<IProvider>,TSharedPtr<IEditableProvider>>> Providers ; TArray<FAnalysisMessage> PendingMessages ; std::atomic<uint32> PendingMessagesCount ; TUniquePtr<UE::Trace::IInDataStream> DataStream ; UE::Trace::FAnalysisProcessor Processor ; } ; class FAnalysisService : public IAnalysisService { public :)",
    "insertText": "FAnalysisService(FModuleService& ModuleService)"
  },
  {
    "label": "FAnalysisService()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAnalysisService()"
  },
  {
    "label": "Analyze()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const IAnalysisSession>)",
    "insertText": "Analyze(const TCHAR* SessionUri)"
  },
  {
    "label": "StartAnalysis()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const IAnalysisSession>)",
    "insertText": "StartAnalysis(const TCHAR* SessionUri)"
  },
  {
    "label": "StartAnalysis()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const IAnalysisSession>)",
    "insertText": "StartAnalysis(uint32 TraceId, const TCHAR* SessionName, TUniquePtr<UE::Trace::IInDataStream>&& DataStream)"
  }
]