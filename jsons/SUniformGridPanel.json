[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "SUniformGridPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUniformGridPanel"
  },
  {
    "label": "FSlot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlot"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS_OneMixin()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" SlotBase . h \" # include \" Layout / Margin . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Children . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SPanel . h \" class FArrangedChildren ; class SUniformGridPanel : public SPanel { public : struct FSlot : public TSlotBase<FSlot>,public TAlignmentWidgetSlotMixin<FSlot> {)",
    "insertText": "SLATE_SLOT_BEGIN_ARGS_OneMixin(FSlot, TSlotBase<FSlot>, TAlignmentWidgetSlotMixin<FSlot>) SLATE_SLOT_END_ARGS() FSlot( int32 InColumn, int32 InRow ) : TSlotBase<FSlot>() , TAlignmentWidgetSlotMixin<FSlot>(HAlign_Fill, VAlign_Fill) , Column( InColumn ) , Row( InRow)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FChildren& SlotOwner, FSlotArguments&& InArgs)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (TSlotBase<FSlot)",
    "insertText": "Construct(SlotOwner, MoveTemp(InArgs))"
  },
  {
    "label": "ConstructMixin()",
    "kind": "Method",
    "detail": "Function (TAlignmentWidgetSlotMixin<FSlot)",
    "insertText": "ConstructMixin(SlotOwner, MoveTemp(InArgs))"
  },
  {
    "label": "SetColumn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetColumn(int32 InColumn)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (Column = InColumn ;)",
    "insertText": "Invalidate(EInvalidateWidgetReason::Layout)"
  },
  {
    "label": "GetColumn()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "GetColumn()"
  },
  {
    "label": "SUniformGridPanel()",
    "kind": "Method",
    "detail": "Function (} } private : int32 Column ; int32 Row ; } ;)",
    "insertText": "SUniformGridPanel()"
  },
  {
    "label": "Slot()",
    "kind": "Method",
    "detail": "Function (FSlot::FSlotArguments)",
    "insertText": "Slot(int32 Column, int32 Row)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SUniformGridPanel ) : _SlotPadding( FMargin(0.0f) ) , _MinDesiredSlotWidth( 0.0f ) , _MinDesiredSlotHeight( 0.0f)"
  },
  {
    "label": "SLATE_SLOT_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; })",
    "insertText": "SLATE_SLOT_ARGUMENT(FSlot, Slots) SLATE_ATTRIBUTE(FMargin, SlotPadding) SLATE_ATTRIBUTE(float, MinDesiredSlotWidth) SLATE_ATTRIBUTE(float, MinDesiredSlotHeight) SLATE_END_ARGS() SLATE_API void Construct( const FArguments& InArgs)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "SetSlotPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSlotPadding(TAttribute<FMargin> InSlotPadding)"
  },
  {
    "label": "SetMinDesiredSlotWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinDesiredSlotWidth(TAttribute<float> InMinDesiredSlotWidth)"
  },
  {
    "label": "SetMinDesiredSlotHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinDesiredSlotHeight(TAttribute<float> InMinDesiredSlotHeight)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (using FScopedWidgetSlotArguments = TPanelChildren<FSlot>::FScopedWidgetSlotArguments ; FScopedWidgetSlotArguments)",
    "insertText": "AddSlot(int32 Column, int32 Row)"
  },
  {
    "label": "RemoveSlot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSlot(const TSharedRef<SWidget>& SlotWidget)"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearChildren()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (protected : FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  }
]