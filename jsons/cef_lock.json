[
  {
    "label": "Lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Lock"
  },
  {
    "label": "AutoLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoLock"
  },
  {
    "label": "AlreadyAcquired",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AlreadyAcquired"
  },
  {
    "label": "AutoUnlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoUnlock"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_BASE_CEF_LOCK_H_ # define CEF_INCLUDE_BASE_CEF_LOCK_H_ # pragma once # if)",
    "insertText": "defined(USING_CHROMIUM_INCLUDES)"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (namespace cef_internal { class Lock { public : # if !)",
    "insertText": "DCHECK_IS_ON() Lock() : lock_()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Lock()"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Acquire()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (lock_ .)",
    "insertText": "Unlock()"
  },
  {
    "label": "Try()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Try()"
  },
  {
    "label": "AssertAcquired()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssertAcquired()"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# endif private : # if)",
    "insertText": "DCHECK_IS_ON() void CheckHeldAndUnmark()"
  },
  {
    "label": "CheckUnheldAndMark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckUnheldAndMark()"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (base::PlatformThreadRef owning_thread_ref_ ; # endif LockImpl lock_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(Lock)"
  },
  {
    "label": "AutoLock()",
    "kind": "Method",
    "detail": "Function (} ; class AutoLock { public : struct AlreadyAcquired { } ;)",
    "insertText": "AutoLock(Lock& lock) : lock_(lock)"
  },
  {
    "label": "AutoLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AutoLock(Lock& lock, const AlreadyAcquired&) : lock_(lock)"
  },
  {
    "label": "AutoLock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "AutoLock()"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (} private : Lock& lock_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(AutoLock)"
  },
  {
    "label": "AutoUnlock()",
    "kind": "Method",
    "detail": "Function (} ; class AutoUnlock { public :)",
    "insertText": "AutoUnlock(Lock& lock) : lock_(lock)"
  },
  {
    "label": "AutoUnlock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "AutoUnlock()"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (} private : Lock& lock_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(AutoUnlock)"
  }
]