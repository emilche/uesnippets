[
  {
    "label": "IDirectSound8",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IDirectSound8"
  },
  {
    "label": "IVoiceCapture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVoiceCapture"
  },
  {
    "label": "FVoiceCaptureWindows",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVoiceCaptureWindows"
  },
  {
    "label": "FVoiceCaptureWindowsVars",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVoiceCaptureWindowsVars"
  },
  {
    "label": "FVoiceCaptureDeviceWindows",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVoiceCaptureDeviceWindows"
  },
  {
    "label": "FCaptureDeviceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCaptureDeviceInfo"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Interfaces / VoiceCapture . h \" # include \" VoicePackage . h \" # include \" VoiceDelayBuffer . h \" # include \" DSP / EnvelopeFollower . h \" # include \" Containers / Ticker . h \" # include \" Windows / WindowsHWrapper . h \" # include \" SampleBuffer . h \" typedef struct IDirectSound8* LPDIRECTSOUND8 ; class IVoiceCapture ; class FVoiceCaptureWindows ; struct FVoiceCaptureWindowsVars ; class FVoiceCaptureDeviceWindows { private : FVoiceCaptureDeviceWindows* Singleton ; TArray<IVoiceCapture*> ActiveVoiceCaptures ; bool bInitialized ; bool)",
    "insertText": "Init()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (PACKAGE_SCOPE : FVoiceCaptureDeviceWindows*)",
    "insertText": "Create()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "FreeVoiceCaptureObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeVoiceCaptureObject(IVoiceCapture* VoiceCaptureObj)"
  },
  {
    "label": "FVoiceCaptureDeviceWindows()",
    "kind": "Method",
    "detail": "Function (public : struct FCaptureDeviceInfo { FString DeviceName ; GUID DeviceId ; bool bIsDefault ; } ; LPDIRECTSOUND8 DirectSound ; FString HMDAudioInputDevice ; FCaptureDeviceInfo DefaultVoiceCaptureDevice ; TMap<FString,FCaptureDeviceInfo> Devices ;)",
    "insertText": "FVoiceCaptureDeviceWindows()"
  },
  {
    "label": "CreateVoiceCaptureObject()",
    "kind": "Method",
    "detail": "Function (FVoiceCaptureWindows*)",
    "insertText": "CreateVoiceCaptureObject(const FString& DeviceName, int32 SampleRate, int32 NumChannels)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FVoiceCaptureDeviceWindows*)",
    "insertText": "Get()"
  },
  {
    "label": "FVoiceCaptureWindows()",
    "kind": "Method",
    "detail": "Function (} ; class FVoiceCaptureWindows : public IVoiceCapture,public FTSTickerObjectBase { public :)",
    "insertText": "FVoiceCaptureWindows()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(const FString& DeviceName, int32 SampleRate, int32 NumChannels)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "ChangeDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ChangeDevice(const FString& DeviceName, int32 SampleRate, int32 NumChannels)"
  },
  {
    "label": "IsCapturing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCapturing()"
  },
  {
    "label": "GetCaptureState()",
    "kind": "Method",
    "detail": "Function (EVoiceCaptureState::Type)",
    "insertText": "GetCaptureState(uint32& OutAvailableVoiceData)"
  },
  {
    "label": "GetVoiceData()",
    "kind": "Method",
    "detail": "Function (EVoiceCaptureState::Type)",
    "insertText": "GetVoiceData(uint8* OutVoiceBuffer, uint32 InVoiceBufferSize, uint32& OutAvailableVoiceData)"
  },
  {
    "label": "GetVoiceData()",
    "kind": "Method",
    "detail": "Function (EVoiceCaptureState::Type)",
    "insertText": "GetVoiceData(uint8* OutVoiceBuffer, uint32 InVoiceBufferSize, uint32& OutAvailableVoiceData, uint64& OutSampleCounter)"
  },
  {
    "label": "GetBufferSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBufferSize()"
  },
  {
    "label": "DumpState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpState()"
  },
  {
    "label": "GetCurrentAmplitude()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentAmplitude()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "CreateCaptureBuffer()",
    "kind": "Method",
    "detail": "Function (private : FVoiceCaptureWindowsVars* CV ; double LastCaptureTime ; EVoiceCaptureState::Type VoiceCaptureState ; TArray<uint8> UncompressedAudioBuffer ; uint64 SampleCounter ; uint64 CachedSampleStart ; uint64 CurrentSampleStart ; bool bSampleStartCached ; int32 NumInputChannels ; Audio::TSampleBuffer<float> ConversionBuffer ; FVoiceDelayBuffer<int16> LookaheadBuffer ; FVoiceDelayBuffer<int16> ReleaseBuffer ; Audio::FInlineEnvelopeFollower MicLevelDetector ; bool bIsMicActive ; Audio::FLinearEase NoiseGateAttenuator ; bool bWasMicAboveNoiseGateThreshold ; bool)",
    "insertText": "CreateCaptureBuffer(const FString& DeviceName, int32 SampleRate, int32 NumChannels)"
  },
  {
    "label": "FreeCaptureBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeCaptureBuffer()"
  },
  {
    "label": "ProcessData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessData()"
  },
  {
    "label": "CreateNotifications()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateNotifications(uint32 BufferSize)"
  }
]