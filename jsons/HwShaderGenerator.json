[
  {
    "label": "HwLightShaders",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HwLightShaders"
  },
  {
    "label": "HwShaderGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HwShaderGenerator"
  },
  {
    "label": "HwResourceBindingContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HwResourceBindingContext"
  },
  {
    "label": "MX_GENSHADER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_GENSHADER_API"
  },
  {
    "label": "ClosureContextType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ClosureContextType"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_HWSHADERGENERATOR_H # define MATERIALX_HWSHADERGENERATOR_H # include<MaterialXGenShader / Export . h> # include<MaterialXGenShader / GenContext . h> # include<MaterialXGenShader / ShaderGenerator . h> MATERIALX_NAMESPACE_BEGIN namespace HW { const string T_IN_POSITION ; const string T_IN_NORMAL ; const string T_IN_TANGENT ; const string T_IN_TEXCOORD ; const string T_IN_GEOMPROP ; const string T_IN_COLOR ; const string T_POSITION_WORLD ; const string T_NORMAL_WORLD ; const string T_TANGENT_WORLD ; const string T_BITANGENT_WORLD ; const string T_POSITION_OBJECT ; const string T_NORMAL_OBJECT ; const string T_TANGENT_OBJECT ; const string T_BITANGENT_OBJECT ; const string T_TEXCOORD ; const string T_COLOR ; const string T_WORLD_MATRIX ; const string T_WORLD_INVERSE_MATRIX ; const string T_WORLD_TRANSPOSE_MATRIX ; const string T_WORLD_INVERSE_TRANSPOSE_MATRIX ; const string T_VIEW_MATRIX ; const string T_VIEW_INVERSE_MATRIX ; const string T_VIEW_TRANSPOSE_MATRIX ; const string T_VIEW_INVERSE_TRANSPOSE_MATRIX ; const string T_PROJ_MATRIX ; const string T_PROJ_INVERSE_MATRIX ; const string T_PROJ_TRANSPOSE_MATRIX ; const string T_PROJ_INVERSE_TRANSPOSE_MATRIX ; const string T_WORLD_VIEW_MATRIX ; const string T_VIEW_PROJECTION_MATRIX ; const string T_WORLD_VIEW_PROJECTION_MATRIX ; const string T_VIEW_POSITION ; const string T_VIEW_DIRECTION ; const string T_FRAME ; const string T_TIME ; const string T_GEOMPROP ; const string T_ALPHA_THRESHOLD ; const string T_NUM_ACTIVE_LIGHT_SOURCES ; const string T_ENV_MATRIX ; const string T_ENV_RADIANCE ; const string T_ENV_RADIANCE_MIPS ; const string T_ENV_RADIANCE_SAMPLES ; const string T_ENV_IRRADIANCE ; const string T_REFRACTION_ENV ; const string T_REFRACTION_COLOR ; const string T_ALBEDO_TABLE ; const string T_ALBEDO_TABLE_SIZE ; const string T_AMB_OCC_MAP ; const string T_AMB_OCC_GAIN ; const string T_SHADOW_MAP ; const string T_SHADOW_MATRIX ; const string T_VERTEX_DATA_INSTANCE ; const string T_LIGHT_DATA_INSTANCE ; const string IN_POSITION ; const string IN_NORMAL ; const string IN_TANGENT ; const string IN_TEXCOORD ; const string IN_GEOMPROP ; const string IN_COLOR ; const string POSITION_WORLD ; const string NORMAL_WORLD ; const string TANGENT_WORLD ; const string BITANGENT_WORLD ; const string POSITION_OBJECT ; const string NORMAL_OBJECT ; const string TANGENT_OBJECT ; const string BITANGENT_OBJECT ; const string TEXCOORD ; const string COLOR ; const string WORLD_MATRIX ; const string WORLD_INVERSE_MATRIX ; const string WORLD_TRANSPOSE_MATRIX ; const string WORLD_INVERSE_TRANSPOSE_MATRIX ; const string VIEW_MATRIX ; const string VIEW_INVERSE_MATRIX ; const string VIEW_TRANSPOSE_MATRIX ; const string VIEW_INVERSE_TRANSPOSE_MATRIX ; const string PROJ_MATRIX ; const string PROJ_INVERSE_MATRIX ; const string PROJ_TRANSPOSE_MATRIX ; const string PROJ_INVERSE_TRANSPOSE_MATRIX ; const string WORLD_VIEW_MATRIX ; const string VIEW_PROJECTION_MATRIX ; const string WORLD_VIEW_PROJECTION_MATRIX ; const string VIEW_POSITION ; const string VIEW_DIRECTION ; const string FRAME ; const string TIME ; const string GEOMPROP ; const string ALPHA_THRESHOLD ; const string NUM_ACTIVE_LIGHT_SOURCES ; const string ENV_MATRIX ; const string ENV_RADIANCE ; const string ENV_RADIANCE_MIPS ; const string ENV_RADIANCE_SAMPLES ; const string ENV_IRRADIANCE ; const string REFRACTION_ENV ; const string REFRACTION_COLOR ; const string ALBEDO_TABLE ; const string ALBEDO_TABLE_SIZE ; const string AMB_OCC_MAP ; const string AMB_OCC_GAIN ; const string SHADOW_MAP ; const string SHADOW_MATRIX ; const string VERTEX_DATA_INSTANCE ; const string LIGHT_DATA_INSTANCE ; const string LIGHT_DATA_MAX_LIGHT_SOURCES ; const string VERTEX_INPUTS ; const string VERTEX_DATA ; const string PRIVATE_UNIFORMS ; const string PUBLIC_UNIFORMS ; const string LIGHT_DATA ; const string PIXEL_OUTPUTS ; const string DIR_N ; const string DIR_L ; const string DIR_V ; const string WORLD_POSITION ; const string OCCLUSION ; const string ATTR_TRANSPARENT ; const string USER_DATA_LIGHT_SHADERS ; const string USER_DATA_BINDING_CONTEXT ; } namespace Stage { const string VERTEX ; } class HwLightShaders ; class HwShaderGenerator ; class HwResourceBindingContext ; using HwLightShadersPtr = shared_ptr<class HwLightShaders> ; using HwShaderGeneratorPtr = shared_ptr<class HwShaderGenerator> ; using HwResourceBindingContextPtr = shared_ptr<class HwResourceBindingContext> ; class HwLightShaders : public GenUserData { public : HwLightShadersPtr)",
    "insertText": "create()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "bind(unsigned int type, ShaderNodePtr shader)"
  },
  {
    "label": "unbind()",
    "kind": "Method",
    "detail": "Function (_shaders [ type ] = shader ; } void)",
    "insertText": "unbind(unsigned int type)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (_shaders .)",
    "insertText": "erase(type)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} const ShaderNode*)",
    "insertText": "get(unsigned int type)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = _shaders .)",
    "insertText": "find(type)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} const std::unordered_map<unsigned int,ShaderNodePtr>&)",
    "insertText": "get()"
  },
  {
    "label": "addStageLightingUniforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addStageLightingUniforms(GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "getClosureContexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getClosureContexts(const ShaderNode& node, vector<ClosureContext*>& cct)"
  },
  {
    "label": "bindLightShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bindLightShader(const NodeDef& nodeDef, unsigned int lightTypeId, GenContext& context)"
  },
  {
    "label": "unbindLightShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unbindLightShader(unsigned int lightTypeId, GenContext& context)"
  },
  {
    "label": "unbindLightShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unbindLightShaders(GenContext& context)"
  },
  {
    "label": "HwShaderGenerator()",
    "kind": "Method",
    "detail": "Function (enum ClosureContextType { DEFAULT,REFLECTION,TRANSMISSION,INDIRECT,EMISSION } ; const string CLOSURE_CONTEXT_SUFFIX_REFLECTION ; const string CLOSURE_CONTEXT_SUFFIX_TRANSMISSION ; const string CLOSURE_CONTEXT_SUFFIX_INDIRECT ; protected :)",
    "insertText": "HwShaderGenerator(SyntaxPtr syntax)"
  },
  {
    "label": "createShader()",
    "kind": "Method",
    "detail": "Function (ShaderPtr)",
    "insertText": "createShader(const string& name, ElementPtr element, GenContext& context)"
  },
  {
    "label": "HwResourceBindingContext()",
    "kind": "Method",
    "detail": "Function (ClosureContext _defDefault ; ClosureContext _defReflection ; ClosureContext _defTransmission ; ClosureContext _defIndirect ; ClosureContext _defEmission ; } ; class HwResourceBindingContext : public GenUserData { public : ~)",
    "insertText": "HwResourceBindingContext()"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "initialize()"
  },
  {
    "label": "emitDirectives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitDirectives(GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitResourceBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitResourceBindings(GenContext& context, const VariableBlock& uniforms, ShaderStage& stage)"
  },
  {
    "label": "emitStructuredResourceBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitStructuredResourceBindings(GenContext& context, const VariableBlock& uniforms, ShaderStage& stage, const std::string& structInstanceName, const std::string& arraySuffix = EMPTY_STRING)"
  }
]