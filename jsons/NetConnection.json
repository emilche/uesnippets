[
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "FObjectReplicator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectReplicator"
  },
  {
    "label": "StatelessConnectHandlerComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatelessConnectHandlerComponent"
  },
  {
    "label": "UActorChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorChannel"
  },
  {
    "label": "UChildConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChildConnection"
  },
  {
    "label": "ULevelStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreaming"
  },
  {
    "label": "FEncryptionKeyResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEncryptionKeyResponse"
  },
  {
    "label": "PacketHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketHandler"
  },
  {
    "label": "FRPCDoSDetection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRPCDoSDetection"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetPing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetPing"
  },
  {
    "label": "FNetConnectionFaultRecovery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetConnectionFaultRecovery"
  },
  {
    "label": "FStatelessHandshakeFailureInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatelessHandshakeFailureInfo"
  },
  {
    "label": "EConnectionState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EConnectionState"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FDelayedPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelayedPacket"
  },
  {
    "label": "FDelayedIncomingPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelayedIncomingPacket"
  },
  {
    "label": "FChannelCloseInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChannelCloseInfo"
  },
  {
    "label": "FWrittenChannelsRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWrittenChannelsRecord"
  },
  {
    "label": "FChannelRecordEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChannelRecordEntry"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "UNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetDriver"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "UChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChannel"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FURL",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FURL"
  },
  {
    "label": "FUpdateLevelVisibilityLevelInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateLevelVisibilityLevelInfo"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "UVoiceChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVoiceChannel"
  },
  {
    "label": "FScopedRepContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedRepContext"
  },
  {
    "label": "FNetConnectionSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetConnectionSettings"
  },
  {
    "label": "FScopedNetConnectionSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedNetConnectionSettings"
  },
  {
    "label": "USimulatedClientNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USimulatedClientNetConnection"
  },
  {
    "label": "LLM_DECLARE_TAG_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectKey . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" Serialization / BitWriter . h \" # include \" Serialization / CustomVersion . h \" # include \" Misc / EngineVersion . h \" # include \" Misc / NetworkGuid . h \" # include \" GameFramework / OnlineReplStructs . h \" # include \" GameFramework / UpdateLevelVisibilityLevelInfo . h \" # include \" Engine / NetDriver . h \" # include \" Net / DataBunch . h \" # include \" Net / NetPacketNotify . h \" # include \" Engine / Player . h \" # include \" Engine / Channel . h \" # include \" ProfilingDebugging / Histogram . h \" # include \" Containers / ArrayView . h \" # include \" Containers / CircularBuffer . h \" # include \" Net / Core / Trace / NetTraceConfig . h \" # include \" ReplicationDriver . h \" # include \" Analytics / EngineNetAnalytics . h \" # include \" Net / Common / Packets / PacketTraits . h \" # include \" Net / Core / Misc / ResizableCircularQueue . h \" # include \" Net / NetAnalyticsTypes . h \" # include \" Net / Core / Connection / ConnectionHandle . h \" # include \" Net / Core / Connection / NetCloseResult . h \" # include \" Net / TrafficControl . h \" # include \" Net / NetDormantHolder . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" GameFramework / Actor . h \" # include \" NetConnection . generated . h \" # define NETCONNECTION_HAS_SETENCRYPTIONKEY 1)",
    "insertText": "LLM_DECLARE_TAG_API(NetConnection, ENGINE_API)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (class FInternetAddr ; class FObjectReplicator ; class StatelessConnectHandlerComponent ; class UActorChannel ; class UChildConnection ; class ULevelStreaming ; struct FEncryptionKeyResponse ; class PacketHandler ; class FRPCDoSDetection ; enum class EEngineNetworkRuntimeFeatures : uint16 ; namespace UE::Net { class FNetPing ; class FNetConnectionFaultRecovery ; struct FStatelessHandshakeFailureInfo ; } typedef TMap<TWeakObjectPtr<AActor>,UActorChannel*,FDefaultSetAllocator,TWeakObjectPtrMapKeyFuncs<TWeakObjectPtr<AActor>,UActorChannel*>> FActorChannelMap ; namespace NetConnectionHelper { int32 NumBitsForJitterClockTimeInHeader = 1 0 ; } TAutoConsoleVariable<int32> CVarNetEnableCongestionControl ; enum { RELIABLE_BUFFER = 5 1 2 } ; enum { MAX_PACKETID = FNetPacketNotify::SequenceNumberT::SeqNumberCount } ; enum { MAX_CHSEQUENCE = 1 0 2 4 } ; enum { MAX_BUNCH_HEADER_BITS = 2 5 6 } ; enum { MAX_PACKET_RELIABLE_SEQUENCE_HEADER_BITS = 3 2 + FNetPacketNotify::SequenceHistoryT::MaxSizeInBits } ; enum { MAX_PACKET_INFO_HEADER_BITS = 1 + NetConnectionHelper::NumBitsForJitterClockTimeInHeader + 1 + 8 } ; enum { MAX_PACKET_HEADER_BITS = MAX_PACKET_RELIABLE_SEQUENCE_HEADER_BITS + MAX_PACKET_INFO_HEADER_BITS } ; enum { MAX_PACKET_TRAILER_BITS = 1 } ; enum EConnectionState { USOCK_Invalid = 0,USOCK_Closed = 1,USOCK_Pending = 2,USOCK_Open = 3,USOCK_Closing = 4,} ; const TCHAR*)",
    "insertText": "LexToString(const EConnectionState Value)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (namespace UE::Net { enum class ENetUpgradeSource : uint8 { ControlChannel,StatelessHandshake } ; } namespace EClientLoginState { enum Type { Invalid = 0,LoggingIn = 1,Welcomed = 2,ReceivedJoin = 3,CleanedUp = 4 } ; const TCHAR*)",
    "insertText": "ToString(const EClientLoginState::Type EnumVal)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case LoggingIn : { return)",
    "insertText": "TEXT(\"LoggingIn\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case Welcomed : { return)",
    "insertText": "TEXT(\"Welcomed\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case ReceivedJoin : { return)",
    "insertText": "TEXT(\"ReceivedJoin\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case CleanedUp : { return)",
    "insertText": "TEXT(\"CleanedUp\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EResendAllDataState : uint8 { None,SinceOpen,SinceCheckpoint } ; # if ! UE_BUILD_SHIPPING)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnReceivedRawPacket, void* , int32 , bool&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnLowLevelSend, void* , int32 , bool&)"
  },
  {
    "label": "FDelayedPacket()",
    "kind": "Method",
    "detail": "Function (# endif # if DO_ENABLE_NET_TEST struct FDelayedPacket { TArray<uint8> Data ; int32 SizeBits ; FOutPacketTraits Traits ; double SendTime = 0 . 0 ; uint32 DelayFrameCount = 0 ; bool bSent = false ; public :)",
    "insertText": "FDelayedPacket(uint8* InData, int32 InSizeBits, FOutPacketTraits& InTraits) : Data() , SizeBits(InSizeBits) , Traits(InTraits)"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (int32 SizeBytes =)",
    "insertText": "DivideAndRoundUp(SizeBits, 8)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "AddUninitialized(SizeBytes)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Data.GetData(), InData, SizeBytes)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "CountBytes(Ar)"
  },
  {
    "label": "CountMemory()",
    "kind": "Method",
    "detail": "Function (PacketData ->)",
    "insertText": "CountMemory(Ar)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (} Ar .)",
    "insertText": "CountBytes(sizeof(ReinjectionTime), sizeof(ReinjectionTime))"
  },
  {
    "label": "FWrittenChannelsRecord()",
    "kind": "Method",
    "detail": "Function (} } ; # endif struct FChannelCloseInfo { uint32 Id ; EChannelCloseReason CloseReason ; } ; typedef TArray<FChannelCloseInfo,TInlineAllocator<8>> FChannelsToClose ; struct FWrittenChannelsRecord { enum { DefaultInitialSize = 1 0 2 4 } ; struct FChannelRecordEntry { uint32 Value : 3 1 ; uint32 IsSequence : 1 ; } ; typedef TResizableCircularQueue<FChannelRecordEntry> FChannelRecordEntryQueue ; FChannelRecordEntryQueue ChannelRecord ; int32 LastPacketId ; public :)",
    "insertText": "FWrittenChannelsRecord(size_t InitialSize = DefaultInitialSize) : ChannelRecord(InitialSize) , LastPacketId(-1)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(customConstructor, Abstract, MinimalAPI, transient, config=Engine)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (using FNetResult = UE::Net::FNetResult ; using FNetCloseResult = UE::Net::FNetCloseResult ;)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(transient)"
  },
  {
    "label": "IsInternalAck()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsInternalAck()"
  },
  {
    "label": "IsReplay()",
    "kind": "Method",
    "detail": "Function (bInternalAck = bValue ; PRAGMA_DISABLE_DEPRECATION_WARNINGS InternalAck = bValue ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } bool)",
    "insertText": "IsReplay()"
  },
  {
    "label": "IsReplayReady()",
    "kind": "Method",
    "detail": "Function (bReplay = bValue ; } bool)",
    "insertText": "IsReplayReady()"
  },
  {
    "label": "IsUnlimitedBunchSizeAllowed()",
    "kind": "Method",
    "detail": "Function (bForceInitialDirty = bValue ; } bool)",
    "insertText": "IsUnlimitedBunchSizeAllowed()"
  },
  {
    "label": "UNetConnection()",
    "kind": "Method",
    "detail": "Function (bUnlimitedBunchSizeAllowed = bValue ; } ~)",
    "insertText": "UNetConnection()"
  },
  {
    "label": "ResetPacketBitCounts()",
    "kind": "Method",
    "detail": "Function (private : uint32 bInternalAck : 1 ; uint32 bReplay : 1 ; uint32 bForceInitialDirty : 1 ; uint32 bUnlimitedBunchSizeAllowed : 1 ; public : struct FURL URL ; TSharedPtr<FInternetAddr> RemoteAddr ; int NumPacketIdBits ; int NumBunchBits ; int NumAckBits ; int NumPaddingBits ; int32 MaxPacketHandlerBits ; void)",
    "insertText": "ResetPacketBitCounts()"
  },
  {
    "label": "GetActorsStarvedByClassTimeMap()",
    "kind": "Method",
    "detail": "Function (enum class EWriteBitsDataType { Unknown,Bunch,Ack } ; TMap<FString,TArray<float>>&)",
    "insertText": "GetActorsStarvedByClassTimeMap()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ActorsStarvedByClassTimeMap .)",
    "insertText": "Empty()"
  },
  {
    "label": "GetConnectionState()",
    "kind": "Method",
    "detail": "Function (} private : EConnectionState State ; public : const EConnectionState)",
    "insertText": "GetConnectionState()"
  },
  {
    "label": "SetConnectionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConnectionState(EConnectionState ConnectionState)"
  },
  {
    "label": "IsClosingOrClosed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClosingOrClosed()"
  },
  {
    "label": "GetNetworkCustomVersion()",
    "kind": "Method",
    "detail": "Function (TArray<TObjectPtr<UChannel>> Channels ; TArray<int32> OutReliable ; TArray<int32> InReliable ; TArray<int32> PendingOutRec ; int32 InitOutReliable ; int32 InitInReliable ; uint32)",
    "insertText": "GetNetworkCustomVersion(const FGuid& VersionGuid)"
  },
  {
    "label": "SetNetworkCustomVersions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetworkCustomVersions(const FCustomVersionContainer& CustomVersions)"
  },
  {
    "label": "GetConnectionHandle()",
    "kind": "Method",
    "detail": "Function (private : FCustomVersionContainer NetworkCustomVersions ; public : double LogCallLastTime ; int32 LogCallCount ; int32 LogSustainedCount ; UE::Net::FConnectionHandle)",
    "insertText": "GetConnectionHandle()"
  },
  {
    "label": "FConnectionHandle()",
    "kind": "Method",
    "detail": "Function (ConnectionHandle = UE::)",
    "insertText": "FConnectionHandle(InConnectionId)"
  },
  {
    "label": "GetInTraceCollector()",
    "kind": "Method",
    "detail": "Function (FNetTraceCollector*)",
    "insertText": "GetInTraceCollector()"
  },
  {
    "label": "GetOutTraceCollector()",
    "kind": "Method",
    "detail": "Function (FNetTraceCollector*)",
    "insertText": "GetOutTraceCollector()"
  },
  {
    "label": "GetConnectionViewTarget()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetConnectionViewTarget()"
  },
  {
    "label": "RemoveActorChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActorChannel(AActor* Actor)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ActorChannels .)",
    "insertText": "Remove(Actor)"
  },
  {
    "label": "NotifyActorChannelRemoved()",
    "kind": "Method",
    "detail": "Function (ReplicationConnectionDriver ->)",
    "insertText": "NotifyActorChannelRemoved(Actor)"
  },
  {
    "label": "AddActorChannel()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddActorChannel(AActor* Actor, UActorChannel* Channel)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ActorChannels .)",
    "insertText": "Add(Actor, Channel)"
  },
  {
    "label": "NotifyActorChannelAdded()",
    "kind": "Method",
    "detail": "Function (ReplicationConnectionDriver ->)",
    "insertText": "NotifyActorChannelAdded(Actor, Channel)"
  },
  {
    "label": "FindActorChannelRef()",
    "kind": "Method",
    "detail": "Function (} } UActorChannel*)",
    "insertText": "FindActorChannelRef(const TWeakObjectPtr<AActor>& Actor)"
  },
  {
    "label": "FindActorChannel()",
    "kind": "Method",
    "detail": "Function (} UActorChannel**)",
    "insertText": "FindActorChannel(const TWeakObjectPtr<AActor>& Actor)"
  },
  {
    "label": "ContainsActorChannel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsActorChannel(const TWeakObjectPtr<AActor>& Actor)"
  },
  {
    "label": "ActorChannelsNum()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ActorChannelsNum()"
  },
  {
    "label": "ActorChannelConstIterator()",
    "kind": "Method",
    "detail": "Function (} FActorChannelMap::TConstIterator)",
    "insertText": "ActorChannelConstIterator()"
  },
  {
    "label": "ActorChannelMap()",
    "kind": "Method",
    "detail": "Function (} const FActorChannelMap&)",
    "insertText": "ActorChannelMap()"
  },
  {
    "label": "TearDownReplicationConnectionDriver()",
    "kind": "Method",
    "detail": "Function (ReplicationConnectionDriver = NewReplicationConnectionDriver ; } void)",
    "insertText": "TearDownReplicationConnectionDriver()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (ReplicationConnectionDriver ->)",
    "insertText": "TearDown()"
  },
  {
    "label": "SetPackageVersionUE()",
    "kind": "Method",
    "detail": "Function (ReplicationConnectionDriver = nullptr ; } } private : FActorChannelMap ActorChannels ; UReplicationConnectionDriver* ReplicationConnectionDriver ; FPackageFileVersion PackageVersionUE ; int32 PackageVersionLicenseeUE ; FEngineVersion EngineVersion ; public : void)",
    "insertText": "SetPackageVersionUE(FPackageFileVersion InPackageVersionUE)"
  },
  {
    "label": "SetPackageVersionLicenseeUE()",
    "kind": "Method",
    "detail": "Function (PackageVersionUE = InPackageVersionUE ; } void)",
    "insertText": "SetPackageVersionLicenseeUE(int32 InPackageVersionLicenseeUE)"
  },
  {
    "label": "SetEngineVersion()",
    "kind": "Method",
    "detail": "Function (PackageVersionLicenseeUE = InPackageVersionLicenseeUE ; } void)",
    "insertText": "SetEngineVersion(const FEngineVersion& InEngineVersion)"
  },
  {
    "label": "SetNetVersionsOnArchive()",
    "kind": "Method",
    "detail": "Function (EngineVersion = InEngineVersion ; } void)",
    "insertText": "SetNetVersionsOnArchive(FArchive& Ar)"
  },
  {
    "label": "AddDestructionInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDestructionInfo(FActorDestructionInfo* DestructionInfo)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_IRIS)",
    "insertText": "if(Driver && Driver->GetReplicationSystem())"
  },
  {
    "label": "NotifyAddDestructionInfo()",
    "kind": "Method",
    "detail": "Function (ReplicationConnectionDriver ->)",
    "insertText": "NotifyAddDestructionInfo(DestructionInfo)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { DestroyedStartupOrDormantActorGUIDs .)",
    "insertText": "Add(DestructionInfo->NetGUID)"
  },
  {
    "label": "RemoveDestructionInfo()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveDestructionInfo(FActorDestructionInfo* DestructionInfo)"
  },
  {
    "label": "NotifyRemoveDestructionInfo()",
    "kind": "Method",
    "detail": "Function (ReplicationConnectionDriver ->)",
    "insertText": "NotifyRemoveDestructionInfo(DestructionInfo)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} else { DestroyedStartupOrDormantActorGUIDs .)",
    "insertText": "Remove(DestructionInfo->NetGUID)"
  },
  {
    "label": "ResetDestructionInfos()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ResetDestructionInfos()"
  },
  {
    "label": "NotifyResetDestructionInfo()",
    "kind": "Method",
    "detail": "Function (ReplicationConnectionDriver ->)",
    "insertText": "NotifyResetDestructionInfo()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} else { DestroyedStartupOrDormantActorGUIDs .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetDestroyedStartupOrDormantActorGUIDs()",
    "kind": "Method",
    "detail": "Function (} } TSet<FNetworkGUID>&)",
    "insertText": "GetDestroyedStartupOrDormantActorGUIDs()"
  },
  {
    "label": "UpdateLevelVisibility()",
    "kind": "Method",
    "detail": "Function (TSet<FName> ClientVisibleLevelNames ; void)",
    "insertText": "UpdateLevelVisibility(const struct FUpdateLevelVisibilityLevelInfo& LevelVisibility)"
  },
  {
    "label": "GetClientMakingVisibleLevelNames()",
    "kind": "Method",
    "detail": "Function (const TSet<FName>&)",
    "insertText": "GetClientMakingVisibleLevelNames()"
  },
  {
    "label": "ReinjectDelayedPackets()",
    "kind": "Method",
    "detail": "Function (private : TArray<FDelayedPacket> Delayed ; TArray<FDelayedIncomingPacket> DelayedIncomingPackets ; bool bSendDelayedPacketsOutofOrder = false ; bool bIsReinjectingDelayedPackets = false ; void)",
    "insertText": "ReinjectDelayedPackets()"
  },
  {
    "label": "UpdateDelayedPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDelayedPackets(const double CurrentRealtimeSeconds)"
  },
  {
    "label": "ShouldReplicateVoicePacketFrom()",
    "kind": "Method",
    "detail": "Function (# endif public : EResendAllDataState ResendAllDataState ; # if ! UE_BUILD_SHIPPING FOnReceivedRawPacket ReceivedRawPacketDel ; FOnLowLevelSend LowLevelSendDel ; # endif bool)",
    "insertText": "ShouldReplicateVoicePacketFrom(const FUniqueNetId& Sender)"
  },
  {
    "label": "UNetConnection()",
    "kind": "Method",
    "detail": "Function (class UNetConnection* GNetConnectionBeingCleanedUp ;)",
    "insertText": "UNetConnection(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "UNetConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UNetConnection(FVTableHelper& Helper)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (# if UE_ALLOW_EXEC_COMMANDS bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar=*GLog)"
  },
  {
    "label": "ReadInput()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ReadInput(float DeltaSeconds)"
  },
  {
    "label": "GetUChildConnection()",
    "kind": "Method",
    "detail": "Function (UChildConnection*)",
    "insertText": "GetUChildConnection()"
  },
  {
    "label": "LowLevelDescribe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LowLevelDescribe() PURE_VIRTUAL(UNetConnection::LowLevelDescribe,return TEXT(\"\");)"
  },
  {
    "label": "Describe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Describe()"
  },
  {
    "label": "LowLevelSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelSend(void* Data, int32 CountBits, FOutPacketTraits& Traits) PURE_VIRTUAL(UNetConnection::LowLevelSend,)"
  },
  {
    "label": "ValidateSendBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateSendBuffer()"
  },
  {
    "label": "InitSendBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSendBuffer()"
  },
  {
    "label": "AssertValid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertValid()"
  },
  {
    "label": "FlushNet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushNet(bool bIgnoreSimulation = false)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "IsNetReady()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "IsNetReady(bool Saturate)"
  },
  {
    "label": "IsPacketSequenceWindowFull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPacketSequenceWindowFull(uint32 SafetyMargin=0U)"
  },
  {
    "label": "HandleClientPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleClientPlayer(class APlayerController* PC, class UNetConnection* NetConnection)"
  },
  {
    "label": "GetAddrPort()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAddrPort(void)"
  },
  {
    "label": "GetRemoteAddr()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } TSharedPtr<const FInternetAddr>)",
    "insertText": "GetRemoteAddr()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(FNetCloseResult())"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Close(FNetCloseResult&& CloseReason)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(static_cast<FNetResult&&>(MoveTemp(CloseReason)))"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Close(FNetResult&& CloseReason)"
  },
  {
    "label": "GracefulClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GracefulClose(FNetResult&& CloseReason)"
  },
  {
    "label": "GracefulClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GracefulClose(FNetCloseResult&& CloseReason)"
  },
  {
    "label": "GracefulClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GracefulClose(static_cast<FNetResult&&>(MoveTemp(CloseReason)))"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CleanUp()"
  },
  {
    "label": "InitBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBase(UNetDriver* InDriver, class FSocket* InSocket, const FURL& InURL, EConnectionState InState, int32 InMaxPacket = 0, int32 InPacketOverhead = 0)"
  },
  {
    "label": "InitRemoteConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRemoteConnection(UNetDriver* InDriver, class FSocket* InSocket, const FURL& InURL, const class FInternetAddr& InRemoteAddr, EConnectionState InState, int32 InMaxPacket = 0, int32 InPacketOverhead = 0) PURE_VIRTUAL(UNetConnection::InitRemoteConnection,)"
  },
  {
    "label": "InitLocalConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitLocalConnection(UNetDriver* InDriver, class FSocket* InSocket, const FURL& InURL, EConnectionState InState, int32 InMaxPacket = 0, int32 InPacketOverhead = 0) PURE_VIRTUAL(UNetConnection::InitLocalConnection,)"
  },
  {
    "label": "InitConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitConnection(UNetDriver* InDriver, EConnectionState InState, const FURL& InURL, int32 InConnectionSpeed=0, int32 InMaxPacket=0)"
  },
  {
    "label": "InitHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitHandler()"
  },
  {
    "label": "InitSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSequence(int32 IncomingSequence, int32 OutgoingSequence)"
  },
  {
    "label": "NotifyAnalyticsProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAnalyticsProvider()"
  },
  {
    "label": "EnableEncryption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableEncryption(const FEncryptionData& EncryptionData)"
  },
  {
    "label": "EnableEncryptionServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableEncryptionServer(const FEncryptionData& EncryptionData)"
  },
  {
    "label": "SetEncryptionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncryptionData(const FEncryptionData& EncryptionData)"
  },
  {
    "label": "SendClientEncryptionAck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendClientEncryptionAck()"
  },
  {
    "label": "EnableEncryption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableEncryption()"
  },
  {
    "label": "IsEncryptionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEncryptionEnabled()"
  },
  {
    "label": "RemoteAddressToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RemoteAddressToString()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TEXT(\"Invalid\")"
  },
  {
    "label": "CreateReplicatorForNewActorChannel()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FObjectReplicator>)",
    "insertText": "CreateReplicatorForNewActorChannel(UObject* Object)"
  },
  {
    "label": "WriteBitsToSendBuffer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "WriteBitsToSendBuffer(const uint8 * Bits, const int32 SizeInBits, const uint8 * ExtraBits = NULL, const int32 ExtraSizeInBits = 0, EWriteBitsDataType DataType = EWriteBitsDataType::Unknown)"
  },
  {
    "label": "GetFreeSendBufferBits()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetFreeSendBufferBits()"
  },
  {
    "label": "PopLastStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopLastStart()"
  },
  {
    "label": "ClientHasInitializedLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClientHasInitializedLevel(const ULevel* TestLevel)"
  },
  {
    "label": "ReceivedRawPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedRawPacket(void* Data,int32 Count)"
  },
  {
    "label": "SendRawBunch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SendRawBunch(FOutBunch& Bunch, bool InAllowMerge, const FNetTraceCollector* BunchCollector)"
  },
  {
    "label": "SendRawBunch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SendRawBunch(FOutBunch& Bunch, bool InAllowMerge)"
  },
  {
    "label": "GetMaxSingleBunchSizeBits()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMaxSingleBunchSizeBits()"
  },
  {
    "label": "GetDriver()",
    "kind": "Method",
    "detail": "Function (} UNetDriver*)",
    "insertText": "GetDriver()"
  },
  {
    "label": "ReceivedPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedPacket(FBitReader& Reader, bool bIsReinjectedPacket=false, bool bDispatchPacket=true)"
  },
  {
    "label": "DispatchPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchPacket(FBitReader& Reader, int32 PacketId, bool& bOutSkipAck, bool& bOutHasBunchErrors)"
  },
  {
    "label": "ReceivedNak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedNak(int32 NakPacketId)"
  },
  {
    "label": "ResetGameWorldState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetGameWorldState()"
  },
  {
    "label": "SlowAssertValid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlowAssertValid()"
  },
  {
    "label": "GetVoiceChannel()",
    "kind": "Method",
    "detail": "Function (# endif } class UVoiceChannel*)",
    "insertText": "GetVoiceChannel()"
  },
  {
    "label": "FlushDormancy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushDormancy(class AActor* Actor)"
  },
  {
    "label": "ForcePropertyCompare()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForcePropertyCompare(AActor* Actor)"
  },
  {
    "label": "FlushDormancyForObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushDormancyForObject(AActor* DormantActor, UObject* ReplicatedObject)"
  },
  {
    "label": "SetClientLoginState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClientLoginState(const EClientLoginState::Type NewState)"
  },
  {
    "label": "SetExpectedClientLoginMsgType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpectedClientLoginMsgType(const uint8 NewType)"
  },
  {
    "label": "IsClientMsgTypeValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClientMsgTypeValid(const uint8 ClientMsgType)"
  },
  {
    "label": "TrackLogsPerSecond()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrackLogsPerSecond()"
  },
  {
    "label": "GetTimeoutValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTimeoutValue()"
  },
  {
    "label": "StartTickingChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTickingChannel(UChannel* Channel)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (ChannelsToTick .)",
    "insertText": "AddUnique(Channel)"
  },
  {
    "label": "StopTickingChannel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StopTickingChannel(UChannel* Channel)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ChannelsToTick .)",
    "insertText": "Remove(Channel)"
  },
  {
    "label": "GetNumTickingChannels()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumTickingChannels()"
  },
  {
    "label": "GetNetHistogram()",
    "kind": "Method",
    "detail": "Function (} FHistogram)",
    "insertText": "GetNetHistogram()"
  },
  {
    "label": "SetPlayerOnlinePlatformName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPlayerOnlinePlatformName(const FName InPlayerOnlinePlatformName)"
  },
  {
    "label": "GetPlayerOnlinePlatformName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPlayerOnlinePlatformName()"
  },
  {
    "label": "RestoreRemappedChannel()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RestoreRemappedChannel(const int32 ChIndex)"
  },
  {
    "label": "SetIgnoreActorBunches()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetIgnoreActorBunches(bool bInIgnoreActorBunches, TSet<FNetworkGUID>&& InIgnoredBunchGuids)"
  },
  {
    "label": "SetReserveDestroyedChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReserveDestroyedChannels(bool bInReserveChannels)"
  },
  {
    "label": "IsReservingDestroyedChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReservingDestroyedChannels()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ReservedChannels .)",
    "insertText": "Add(ChIndex)"
  },
  {
    "label": "SetIgnoreReservedChannels()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIgnoreReservedChannels(bool bInIgnoreReservedChannels)"
  },
  {
    "label": "GetOutgoingBunches()",
    "kind": "Method",
    "detail": "Function (TArray<FOutBunch*>&)",
    "insertText": "GetOutgoingBunches()"
  },
  {
    "label": "FindAndRemoveDormantReplicator()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FObjectReplicator>)",
    "insertText": "FindAndRemoveDormantReplicator(AActor* OwnerActor, UObject* Object)"
  },
  {
    "label": "RemoveDormantReplicator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDormantReplicator(AActor* Actor, UObject* Object)"
  },
  {
    "label": "CleanupDormantReplicatorsForActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupDormantReplicatorsForActor(AActor* Actor)"
  },
  {
    "label": "ExecuteOnAllDormantReplicators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOnAllDormantReplicators(UE::Net::FExecuteForEachDormantReplicator ExecuteFunction)"
  },
  {
    "label": "ExecuteOnAllDormantReplicatorsOfActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOnAllDormantReplicatorsOfActor(AActor* OwnerActor, UE::Net::FExecuteForEachDormantReplicator ExecuteFunction)"
  },
  {
    "label": "CleanupStaleDormantReplicators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupStaleDormantReplicators()"
  },
  {
    "label": "PreTickDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreTickDispatch()"
  },
  {
    "label": "PostTickDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTickDispatch()"
  },
  {
    "label": "FlushPacketOrderCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPacketOrderCache(bool bFlushWholeCache=false)"
  },
  {
    "label": "GetTotalOutOfOrderPackets()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTotalOutOfOrderPackets()"
  },
  {
    "label": "NotifyActorNetGUID()",
    "kind": "Method",
    "detail": "Function (LastOSReceiveTime = InOSReceiveTime ; bIsOSReceiveTimeLocal = bInIsOSReceiveTimeLocal ; } void)",
    "insertText": "NotifyActorNetGUID(UActorChannel* Channel)"
  },
  {
    "label": "ConsumeQueuedActorDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConsumeQueuedActorDelinquencyAnalytics(FNetQueuedActorDelinquencyAnalytics& Out)"
  },
  {
    "label": "GetQueuedActorDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (const FNetQueuedActorDelinquencyAnalytics&)",
    "insertText": "GetQueuedActorDelinquencyAnalytics()"
  },
  {
    "label": "ResetQueuedActorDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetQueuedActorDelinquencyAnalytics()"
  },
  {
    "label": "ConsumeSaturationAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeSaturationAnalytics(FNetConnectionSaturationAnalytics& Out)"
  },
  {
    "label": "GetSaturationAnalytics()",
    "kind": "Method",
    "detail": "Function (const FNetConnectionSaturationAnalytics&)",
    "insertText": "GetSaturationAnalytics()"
  },
  {
    "label": "ResetSaturationAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSaturationAnalytics()"
  },
  {
    "label": "ConsumePacketAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumePacketAnalytics(FNetConnectionPacketAnalytics& Out)"
  },
  {
    "label": "GetPacketAnalytics()",
    "kind": "Method",
    "detail": "Function (const FNetConnectionPacketAnalytics&)",
    "insertText": "GetPacketAnalytics()"
  },
  {
    "label": "ResetPacketAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPacketAnalytics()"
  },
  {
    "label": "TrackReplicationForAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackReplicationForAnalytics(const bool bWasSaturated)"
  },
  {
    "label": "GetOutTotalNotifiedPackets()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetOutTotalNotifiedPackets()"
  },
  {
    "label": "SendChallengeControlMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendChallengeControlMessage(const FEncryptionKeyResponse& Response)"
  },
  {
    "label": "GetPendingCloseDueToReplicationFailure()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPendingCloseDueToReplicationFailure()"
  },
  {
    "label": "NotifyActorDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorDestroyed(AActor* Actor, bool IsSeamlessTravel = false)"
  },
  {
    "label": "NotifyActorChannelCleanedUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorChannelCleanedUp(UActorChannel* Channel, EChannelCloseReason CloseReason)"
  },
  {
    "label": "UpdateLevelStreamStatusChangedTransactionId()",
    "kind": "Method",
    "detail": "Function (FNetLevelVisibilityTransactionId)",
    "insertText": "UpdateLevelStreamStatusChangedTransactionId(const ULevelStreaming* LevelObject, const FName PackageName, bool bShouldBeVisible)"
  },
  {
    "label": "GetPendingCloseDueToSocketSendFailure()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "GetPendingCloseDueToSocketSendFailure()"
  },
  {
    "label": "CleanupDormantActorState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupDormantActorState()"
  },
  {
    "label": "ClearDormantReplicatorsReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDormantReplicatorsReference()"
  },
  {
    "label": "DestroyOwningActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyOwningActor()"
  },
  {
    "label": "DestroyIgnoredActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyIgnoredActor(AActor* Actor)"
  },
  {
    "label": "HandleConnectionTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConnectionTimeout(const FString& Error)"
  },
  {
    "label": "NotifyConnectionUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyConnectionUpdated()"
  },
  {
    "label": "GetLastNotifiedPacketId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLastNotifiedPacketId()"
  },
  {
    "label": "OnStatelessHandshakeFailure()",
    "kind": "Method",
    "detail": "Function (FHistogram NetConnectionHistogram ; FName PlayerOnlinePlatformName ; TMap<FName,bool> ClientVisibleActorOuters ; TMap<FName,FUpdateLevelVisibilityLevelInfo> PendingUpdateLevelVisibility ; TMap<FName,FNetLevelVisibilityTransactionId> ClientPendingStreamingStatusRequest ; private : void)",
    "insertText": "OnStatelessHandshakeFailure(UE::Net::FStatelessHandshakeFailureInfo HandshakeFailureInfo)"
  },
  {
    "label": "UpdateLevelVisibilityInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLevelVisibilityInternal(const struct FUpdateLevelVisibilityLevelInfo& LevelVisibility)"
  },
  {
    "label": "UpdateCachedLevelVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateCachedLevelVisibility(const FName& PackageName)"
  },
  {
    "label": "UpdateAllCachedLevelVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllCachedLevelVisibility()"
  },
  {
    "label": "ShouldDropOutgoingPacketForLossSimulation()",
    "kind": "Method",
    "detail": "Function (# if DO_ENABLE_NET_TEST bool)",
    "insertText": "ShouldDropOutgoingPacketForLossSimulation(int64 NumBits)"
  },
  {
    "label": "CheckOutgoingPacketEmulation()",
    "kind": "Method",
    "detail": "Function (# endif # if DO_ENABLE_NET_TEST bool)",
    "insertText": "CheckOutgoingPacketEmulation(FOutPacketTraits& Traits)"
  },
  {
    "label": "WritePacketHeader()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "WritePacketHeader(FBitWriter& Writer)"
  },
  {
    "label": "WriteDummyPacketInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteDummyPacketInfo(FBitWriter& Writer)"
  },
  {
    "label": "WriteFinalPacketInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteFinalPacketInfo(FBitWriter& Writer, double PacketSentTimeInS)"
  },
  {
    "label": "ReadPacketInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadPacketInfo(FBitReader& Reader, bool bHasPacketInfoPayload, FEngineNetworkCustomVersion::Type EngineNetVer)"
  },
  {
    "label": "ReceivedAck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedAck(int32 AckPacketId, FChannelsToClose& OutChannelsToClose)"
  },
  {
    "label": "ProcessJitter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessJitter(uint32 PacketJitterClockTimeMS)"
  },
  {
    "label": "PrepareWriteBitsToSendBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareWriteBitsToSendBuffer(const int32 SizeInBits, const int32 ExtraSizeInBits)"
  },
  {
    "label": "WriteBitsToSendBufferInternal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "WriteBitsToSendBufferInternal(const uint8 * Bits, const int32 SizeInBits, const uint8 * ExtraBits, const int32 ExtraSizeInBits, EWriteBitsDataType DataType = EWriteBitsDataType::Unknown)"
  },
  {
    "label": "GetActorGUIDFromOpenBunch()",
    "kind": "Method",
    "detail": "Function (FName ClientWorldPackageName ; TMap<FString,TArray<float>> ActorsStarvedByClassTimeMap ; TMap<int32,FNetworkGUID> IgnoringChannels ; TMap<int32,int32> ChannelIndexMap ; bool bAllowExistingChannelIndex ; TSet<FNetworkGUID> IgnoredBunchGuids ; TSet<int32> IgnoredBunchChannels ; bool bIgnoreActorBunches ; TSet<int32> ReservedChannels ; bool bReserveDestroyedChannels ; bool bIgnoreReservedChannels ; TArray<FOutBunch*> OutgoingBunches ; FWrittenChannelsRecord ChannelRecord ; FNetPacketNotify PacketNotify ; int32 LastNotifiedPacketId ; uint32 OutTotalNotifiedPackets ; uint32 HasDirtyAcks ; bool bHasWarnedAboutChannelLimit ; bool bConnectionPendingCloseDueToSocketSendFailure ; bool bConnectionPendingCloseDueToReplicationFailure ; FNetworkGUID)",
    "insertText": "GetActorGUIDFromOpenBunch(FInBunch& Bunch)"
  },
  {
    "label": "GetFreeChannelIndex()",
    "kind": "Method",
    "detail": "Function (int32 TotalOutOfOrderPacketsLost = 0 ; int32 TotalOutOfOrderPacketsRecovered = 0 ; int32 TotalOutOfOrderPacketsDuplicate = 0 ; TOptional<TCircularBuffer<TUniquePtr<FBitReader>>> PacketOrderCache ; int32 PacketOrderCacheStartIdx ; int32 PacketOrderCacheCount ; FNetConnectionSaturationAnalytics SaturationAnalytics ; FNetConnectionPacketAnalytics PacketAnalytics ; bool bFlushingPacketOrderCache ; UE::Net::FConnectionHandle ConnectionHandle ; # if UE_NET_TRACE_ENABLED FNetTraceCollector* InTraceCollector = nullptr ; FNetTraceCollector* OutTraceCollector = nullptr ; uint32 NetTraceId = 0 ; # endif bool bFlushedNetThisFrame = false ; AActor* RepContextActor ; ULevel* RepContextLevel ; struct FScopedRepContext ; bool bAutoFlush ; bool bLoggedFlushNetQueuedBitsOverflow = false ; TUniquePtr<FRPCDoSDetection> RPCDoS ; TUniquePtr<UE::Net::FNetConnectionFaultRecovery> FaultRecovery ; bool bReceivedCloseReason = false ; TPimplPtr<UE::Net::FNetResult,EPimplPtrMode::DeepCopy> PendingGracefulCloseResult ; TPimplPtr<UE::Net::FNetPing> NetPing ; int32)",
    "insertText": "GetFreeChannelIndex(const FName& ChName)"
  },
  {
    "label": "GetRepContextActor()",
    "kind": "Method",
    "detail": "Function (public : AActor*)",
    "insertText": "GetRepContextActor()"
  },
  {
    "label": "GetRPCDoS()",
    "kind": "Method",
    "detail": "Function (bAutoFlush = bValue ; } FRPCDoSDetection*)",
    "insertText": "GetRPCDoS()"
  },
  {
    "label": "GetFaultRecovery()",
    "kind": "Method",
    "detail": "Function (} UE::Net::FNetConnectionFaultRecovery*)",
    "insertText": "GetFaultRecovery()"
  },
  {
    "label": "GetNetPing()",
    "kind": "Method",
    "detail": "Function (} UE::Net::FNetPing*)",
    "insertText": "GetNetPing()"
  },
  {
    "label": "SendCloseReason()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SendCloseReason(FNetCloseResult&& CloseReason)"
  },
  {
    "label": "SendCloseReason()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendCloseReason(static_cast<FNetResult&&>(MoveTemp(CloseReason)))"
  },
  {
    "label": "SendCloseReason()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SendCloseReason(FNetResult&& CloseReason)"
  },
  {
    "label": "HandleReceiveCloseReason()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceiveCloseReason(const FString& CloseReasonList)"
  },
  {
    "label": "HandleReceiveNetUpgrade()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleReceiveNetUpgrade(uint32 RemoteNetworkVersion, EEngineNetworkRuntimeFeatures RemoteNetworkFeatures, UE::Net::ENetUpgradeSource NetUpgradeSource=UE::Net::ENetUpgradeSource::ControlChannel)"
  },
  {
    "label": "HandleNetResultOrClose()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleNetResultOrClose(ENetCloseResult InResult)"
  },
  {
    "label": "TryClosePendingGracefulClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryClosePendingGracefulClose()"
  },
  {
    "label": "InitChannelData()",
    "kind": "Method",
    "detail": "Function (protected : TOptional<FNetworkCongestionControl> NetworkCongestionControl ; void)",
    "insertText": "InitChannelData()"
  },
  {
    "label": "SetConnectionHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConnectionHandle(UE::Net::FConnectionHandle Handle)"
  },
  {
    "label": "GetDormantFlushedObjectsForActor()",
    "kind": "Method",
    "detail": "Function (ConnectionHandle = Handle ; } public : UE::Net::FDormantObjectMap*)",
    "insertText": "GetDormantFlushedObjectsForActor(AActor* Actor)"
  },
  {
    "label": "ClearDormantFlushedObjectsForActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDormantFlushedObjectsForActor(AActor* Actor)"
  },
  {
    "label": "FScopedRepContext()",
    "kind": "Method",
    "detail": "Function (} ; struct FScopedRepContext { public :)",
    "insertText": "FScopedRepContext(UNetConnection* InConnection, AActor* InActor)"
  },
  {
    "label": "FScopedRepContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedRepContext(UNetConnection* InConnection, ULevel* InLevel) : Connection(InConnection)"
  },
  {
    "label": "FScopedRepContext()",
    "kind": "Method",
    "detail": "Function (Connection -> RepContextLevel = InLevel ; } } ~)",
    "insertText": "FScopedRepContext()"
  },
  {
    "label": "FScopedRepContext()",
    "kind": "Method",
    "detail": "Function (Connection -> RepContextActor = nullptr ; Connection -> RepContextLevel = nullptr ; } })",
    "insertText": "FScopedRepContext(FScopedRepContext&&)"
  },
  {
    "label": "FScopedRepContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedRepContext(const FScopedRepContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedRepContext&)",
    "insertText": "operator(const FScopedRepContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedRepContext&)",
    "insertText": "operator(FScopedRepContext&&)"
  },
  {
    "label": "FNetConnectionSettings()",
    "kind": "Method",
    "detail": "Function (private : UNetConnection* Connection ; } ; struct FNetConnectionSettings {)",
    "insertText": "FNetConnectionSettings(UNetConnection* InConnection)"
  },
  {
    "label": "FNetConnectionSettings()",
    "kind": "Method",
    "detail": "Function (# if DO_ENABLE_NET_TEST PacketLag = InConnection -> PacketSimulationSettings . PktLag ; PacketLoss = InConnection -> PacketSimulationSettings . PktLoss ; # else PacketLag = 0 ; PacketLoss = 0 ; # endif })",
    "insertText": "FNetConnectionSettings(int32 InPacketLag)"
  },
  {
    "label": "ApplyTo()",
    "kind": "Method",
    "detail": "Function (PacketLag = InPacketLag ; PacketLoss = 0 ; } void)",
    "insertText": "ApplyTo(UNetConnection* Connection)"
  },
  {
    "label": "FScopedNetConnectionSettings()",
    "kind": "Method",
    "detail": "Function (# if DO_ENABLE_NET_TEST Connection -> PacketSimulationSettings . PktLag = PacketLag ; Connection -> PacketSimulationSettings . PktLoss = PacketLoss ; # endif } int32 PacketLag ; int32 PacketLoss ; } ; struct FScopedNetConnectionSettings {)",
    "insertText": "FScopedNetConnectionSettings(UNetConnection* InConnection, FNetConnectionSettings NewSettings, bool Apply=true) : Connection(InConnection), OldSettings(InConnection), ShouldApply(Apply)"
  },
  {
    "label": "FlushNet()",
    "kind": "Method",
    "detail": "Function (Connection ->)",
    "insertText": "FlushNet()"
  },
  {
    "label": "ApplyTo()",
    "kind": "Method",
    "detail": "Function (NewSettings .)",
    "insertText": "ApplyTo(Connection.Get())"
  },
  {
    "label": "FScopedNetConnectionSettings()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FScopedNetConnectionSettings()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UNetConnection* LocalConnection = Connection .)",
    "insertText": "Get()"
  },
  {
    "label": "ApplyTo()",
    "kind": "Method",
    "detail": "Function (OldSettings .)",
    "insertText": "ApplyTo(LocalConnection)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } TWeakObjectPtr<UNetConnection> Connection ; FNetConnectionSettings OldSettings ; bool ShouldApply ; } ;)",
    "insertText": "UCLASS(transient, config=Engine, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: virtual void LowLevelSend(void* Data, int32 CountBits, FOutPacketTraits& Traits)"
  },
  {
    "label": "HandleClientPlayer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleClientPlayer(APlayerController* PC, UNetConnection* NetConnection)"
  },
  {
    "label": "LowLevelGetRemoteAddress()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LowLevelGetRemoteAddress(bool bAppendPort=false)"
  },
  {
    "label": "InitLocalConnection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitLocalConnection(UNetDriver* InDriver, class FSocket* InSocket, const FURL& InURL, EConnectionState InState, int32 InMaxPacket = 0, int32 InPacketOverhead = 0)"
  },
  {
    "label": "LowLevelDescribe()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "LowLevelDescribe()"
  }
]