[
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "FObjectReplicator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectReplicator"
  },
  {
    "label": "StatelessConnectHandlerComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatelessConnectHandlerComponent"
  },
  {
    "label": "UActorChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorChannel"
  },
  {
    "label": "UChildConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChildConnection"
  },
  {
    "label": "ULevelStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreaming"
  },
  {
    "label": "FEncryptionKeyResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEncryptionKeyResponse"
  },
  {
    "label": "PacketHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketHandler"
  },
  {
    "label": "FRPCDoSDetection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRPCDoSDetection"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetPing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetPing"
  },
  {
    "label": "FNetConnectionFaultRecovery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetConnectionFaultRecovery"
  },
  {
    "label": "FStatelessHandshakeFailureInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatelessHandshakeFailureInfo"
  },
  {
    "label": "EConnectionState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EConnectionState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "passed",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "passed"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDelayedPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelayedPacket"
  },
  {
    "label": "FDelayedIncomingPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelayedIncomingPacket"
  },
  {
    "label": "FChannelCloseInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChannelCloseInfo"
  },
  {
    "label": "FWrittenChannelsRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWrittenChannelsRecord"
  },
  {
    "label": "FChannelRecordEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChannelRecordEntry"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "UChildConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChildConnection"
  },
  {
    "label": "UNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetDriver"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "UChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChannel"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FURL",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FURL"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UActorChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorChannel"
  },
  {
    "label": "FUpdateLevelVisibilityLevelInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateLevelVisibilityLevelInfo"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "UVoiceChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVoiceChannel"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FUpdateLevelVisibilityLevelInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateLevelVisibilityLevelInfo"
  },
  {
    "label": "names",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "names"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FScopedRepContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedRepContext"
  },
  {
    "label": "FScopedRepContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedRepContext"
  },
  {
    "label": "FNetConnectionSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetConnectionSettings"
  },
  {
    "label": "FScopedNetConnectionSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedNetConnectionSettings"
  },
  {
    "label": "USimulatedClientNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USimulatedClientNetConnection"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"Invalid\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"LoggingIn\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"Welcomed\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"ReceivedJoin\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"CleanedUp\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "ResetPacketBitCounts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPacketBitCounts()"
  },
  {
    "label": "SetConnectionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConnectionState(EConnectionState ConnectionState)"
  },
  {
    "label": "SetNetworkCustomVersions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetworkCustomVersions(const FCustomVersionContainer& CustomVersions)"
  },
  {
    "label": "SetClientWorldPackageName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClientWorldPackageName(FName NewClientWorldPackageName)"
  },
  {
    "label": "UpdateLevelVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLevelVisibility(const struct FUpdateLevelVisibilityLevelInfo& LevelVisibility)"
  },
  {
    "label": "UpdatePacketSimulationSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePacketSimulationSettings()"
  },
  {
    "label": "ReinjectDelayedPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReinjectDelayedPackets()"
  },
  {
    "label": "UpdateDelayedPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDelayedPackets(const double CurrentRealtimeSeconds)"
  },
  {
    "label": "ShouldReplicateVoicePacketFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldReplicateVoicePacketFrom(const FUniqueNetId& Sender)"
  },
  {
    "label": "UNetConnection()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "UNetConnection(FVTableHelper& Helper)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "ReadInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadInput( float DeltaSeconds )"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "Describe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Describe()"
  },
  {
    "label": "ValidateSendBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateSendBuffer()"
  },
  {
    "label": "InitSendBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSendBuffer()"
  },
  {
    "label": "AssertValid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertValid()"
  },
  {
    "label": "FlushNet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushNet(bool bIgnoreSimulation = false)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "IsNetReady()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "IsNetReady( bool Saturate )"
  },
  {
    "label": "IsPacketSequenceWindowFull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPacketSequenceWindowFull(uint32 SafetyMargin=0U)"
  },
  {
    "label": "HandleClientPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleClientPlayer( class APlayerController* PC, class UNetConnection* NetConnection )"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(FNetResult&& CloseReason)"
  },
  {
    "label": "GracefulClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GracefulClose(FNetResult&& CloseReason)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp()"
  },
  {
    "label": "InitBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBase(UNetDriver* InDriver, class FSocket* InSocket, const FURL& InURL, EConnectionState InState, int32 InMaxPacket = 0, int32 InPacketOverhead = 0)"
  },
  {
    "label": "InitConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitConnection(UNetDriver* InDriver, EConnectionState InState, const FURL& InURL, int32 InConnectionSpeed=0, int32 InMaxPacket=0)"
  },
  {
    "label": "InitHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitHandler()"
  },
  {
    "label": "InitSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSequence(int32 IncomingSequence, int32 OutgoingSequence)"
  },
  {
    "label": "NotifyAnalyticsProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAnalyticsProvider()"
  },
  {
    "label": "EnableEncryption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableEncryption(const FEncryptionData& EncryptionData)"
  },
  {
    "label": "EnableEncryptionServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableEncryptionServer(const FEncryptionData& EncryptionData)"
  },
  {
    "label": "SetEncryptionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncryptionData(const FEncryptionData& EncryptionData)"
  },
  {
    "label": "SendClientEncryptionAck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendClientEncryptionAck()"
  },
  {
    "label": "EnableEncryption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableEncryption()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"Invalid\")"
  },
  {
    "label": "CreateReplicatorForNewActorChannel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FObjectReplicator>)",
    "insertText": "CreateReplicatorForNewActorChannel(UObject* Object)"
  },
  {
    "label": "WriteBitsToSendBuffer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "WriteBitsToSendBuffer( \n\t\tconst uint8 *\tBits, \n\t\tconst int32\t\tSizeInBits, \n\t\tconst uint8 *\tExtraBits = NULL, \n\t\tconst int32\t\tExtraSizeInBits = 0,\n\t\tEWriteBitsDataType DataType =  EWriteBitsDataType::Unknown)"
  },
  {
    "label": "GetFreeSendBufferBits()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetFreeSendBufferBits()"
  },
  {
    "label": "PopLastStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopLastStart()"
  },
  {
    "label": "ReceivedRawPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedRawPacket(void* Data,int32 Count)"
  },
  {
    "label": "SendRawBunch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SendRawBunch(FOutBunch& Bunch, bool InAllowMerge, const FNetTraceCollector* BunchCollector)"
  },
  {
    "label": "SendRawBunch()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SendRawBunch(Bunch, InAllowMerge, nullptr)"
  },
  {
    "label": "ReceivedPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedPacket( FBitReader& Reader, bool bIsReinjectedPacket=false, bool bDispatchPacket=true )"
  },
  {
    "label": "DispatchPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchPacket( FBitReader& Reader, int32 PacketId, bool& bOutSkipAck, bool& bOutHasBunchErrors )"
  },
  {
    "label": "ReceivedNak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedNak( int32 NakPacketId )"
  },
  {
    "label": "ResetGameWorldState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetGameWorldState()"
  },
  {
    "label": "AssertValid()",
    "kind": "Method",
    "detail": "Function (DO_GUARD_SLOW)",
    "insertText": "AssertValid()"
  },
  {
    "label": "FlushDormancy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushDormancy(class AActor* Actor)"
  },
  {
    "label": "ForcePropertyCompare()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForcePropertyCompare( AActor* Actor )"
  },
  {
    "label": "FlushDormancyForObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushDormancyForObject(AActor* DormantActor, UObject* ReplicatedObject)"
  },
  {
    "label": "SetClientLoginState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClientLoginState( const EClientLoginState::Type NewState )"
  },
  {
    "label": "SetExpectedClientLoginMsgType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpectedClientLoginMsgType( const uint8 NewType )"
  },
  {
    "label": "IsClientMsgTypeValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClientMsgTypeValid( const uint8 ClientMsgType )"
  },
  {
    "label": "TrackLogsPerSecond()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrackLogsPerSecond()"
  },
  {
    "label": "GetTimeoutValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTimeoutValue()"
  },
  {
    "label": "SetPlayerOnlinePlatformName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayerOnlinePlatformName(const FName InPlayerOnlinePlatformName)"
  },
  {
    "label": "SetAllowExistingChannelIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowExistingChannelIndex(bool bAllow)"
  },
  {
    "label": "RestoreRemappedChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreRemappedChannel(const int32 ChIndex)"
  },
  {
    "label": "SetIgnoreActorBunches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIgnoreActorBunches(bool bInIgnoreActorBunches, TSet<FNetworkGUID>&& InIgnoredBunchGuids)"
  },
  {
    "label": "SetReserveDestroyedChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReserveDestroyedChannels(bool bInReserveChannels)"
  },
  {
    "label": "SetIgnoreReservedChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIgnoreReservedChannels(bool bInIgnoreReservedChannels)"
  },
  {
    "label": "StoreDormantReplicator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreDormantReplicator(AActor* OwnerActor, UObject* Object, const TSharedRef<FObjectReplicator>& ObjectReplicator)"
  },
  {
    "label": "FindAndRemoveDormantReplicator()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FObjectReplicator>)",
    "insertText": "FindAndRemoveDormantReplicator(AActor* OwnerActor, UObject* Object)"
  },
  {
    "label": "RemoveDormantReplicator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDormantReplicator(AActor* Actor, UObject* Object)"
  },
  {
    "label": "CleanupDormantReplicatorsForActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupDormantReplicatorsForActor(AActor* Actor)"
  },
  {
    "label": "ExecuteOnAllDormantReplicators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOnAllDormantReplicators(UE::Net::FExecuteForEachDormantReplicator ExecuteFunction)"
  },
  {
    "label": "ExecuteOnAllDormantReplicatorsOfActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOnAllDormantReplicatorsOfActor(AActor* OwnerActor, UE::Net::FExecuteForEachDormantReplicator ExecuteFunction)"
  },
  {
    "label": "CleanupStaleDormantReplicators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupStaleDormantReplicators()"
  },
  {
    "label": "PreTickDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreTickDispatch()"
  },
  {
    "label": "PostTickDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTickDispatch()"
  },
  {
    "label": "FlushPacketOrderCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPacketOrderCache(bool bFlushWholeCache=false)"
  },
  {
    "label": "ConsumeQueuedActorDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeQueuedActorDelinquencyAnalytics(FNetQueuedActorDelinquencyAnalytics& Out)"
  },
  {
    "label": "ResetQueuedActorDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetQueuedActorDelinquencyAnalytics()"
  },
  {
    "label": "ConsumeSaturationAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeSaturationAnalytics(FNetConnectionSaturationAnalytics& Out)"
  },
  {
    "label": "ResetSaturationAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSaturationAnalytics()"
  },
  {
    "label": "ConsumePacketAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumePacketAnalytics(FNetConnectionPacketAnalytics& Out)"
  },
  {
    "label": "ResetPacketAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPacketAnalytics()"
  },
  {
    "label": "TrackReplicationForAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackReplicationForAnalytics(const bool bWasSaturated)"
  },
  {
    "label": "SendChallengeControlMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendChallengeControlMessage()"
  },
  {
    "label": "SendChallengeControlMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendChallengeControlMessage(const FEncryptionKeyResponse& Response)"
  },
  {
    "label": "SetPendingCloseDueToReplicationFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPendingCloseDueToReplicationFailure()"
  },
  {
    "label": "NotifyActorDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorDestroyed(AActor* Actor, bool IsSeamlessTravel = false)"
  },
  {
    "label": "NotifyActorChannelCleanedUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorChannelCleanedUp(UActorChannel* Channel, EChannelCloseReason CloseReason)"
  },
  {
    "label": "UpdateLevelStreamStatusChangedTransactionId()",
    "kind": "Method",
    "detail": "Function (FNetLevelVisibilityTransactionId)",
    "insertText": "UpdateLevelStreamStatusChangedTransactionId(const ULevelStreaming* LevelObject, const FName PackageName, bool bShouldBeVisible)"
  },
  {
    "label": "SetPendingCloseDueToSocketSendFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPendingCloseDueToSocketSendFailure()"
  },
  {
    "label": "CleanupDormantActorState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupDormantActorState()"
  },
  {
    "label": "ClearDormantReplicatorsReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDormantReplicatorsReference()"
  },
  {
    "label": "DestroyOwningActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyOwningActor()"
  },
  {
    "label": "DestroyIgnoredActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyIgnoredActor(AActor* Actor)"
  },
  {
    "label": "HandleConnectionTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConnectionTimeout(const FString& Error)"
  },
  {
    "label": "NotifyConnectionUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyConnectionUpdated()"
  },
  {
    "label": "OnStatelessHandshakeFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStatelessHandshakeFailure(UE::Net::FStatelessHandshakeFailureInfo HandshakeFailureInfo)"
  },
  {
    "label": "UpdateLevelVisibilityInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLevelVisibilityInternal(const struct FUpdateLevelVisibilityLevelInfo& LevelVisibility)"
  },
  {
    "label": "CheckOutgoingPacketEmulation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckOutgoingPacketEmulation(FOutPacketTraits& Traits)"
  },
  {
    "label": "WritePacketHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePacketHeader(FBitWriter& Writer)"
  },
  {
    "label": "WriteDummyPacketInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteDummyPacketInfo(FBitWriter& Writer)"
  },
  {
    "label": "WriteFinalPacketInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteFinalPacketInfo(FBitWriter& Writer, double PacketSentTimeInS)"
  },
  {
    "label": "ReadPacketInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadPacketInfo(FBitReader& Reader, bool bHasPacketInfoPayload, FEngineNetworkCustomVersion::Type EngineNetVer)"
  },
  {
    "label": "ReceivedAck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedAck(int32 AckPacketId, FChannelsToClose& OutChannelsToClose)"
  },
  {
    "label": "ProcessJitter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessJitter(uint32 PacketJitterClockTimeMS)"
  },
  {
    "label": "PrepareWriteBitsToSendBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareWriteBitsToSendBuffer(const int32 SizeInBits, const int32 ExtraSizeInBits)"
  },
  {
    "label": "WriteBitsToSendBufferInternal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "WriteBitsToSendBufferInternal( \n\t\tconst uint8 *\tBits, \n\t\tconst int32\t\tSizeInBits, \n\t\tconst uint8 *\tExtraBits, \n\t\tconst int32\t\tExtraSizeInBits,\n\t\tEWriteBitsDataType DataType =  EWriteBitsDataType::Unknown)"
  },
  {
    "label": "GetActorGUIDFromOpenBunch()",
    "kind": "Method",
    "detail": "Function (FNetworkGUID)",
    "insertText": "GetActorGUIDFromOpenBunch(FInBunch& Bunch)"
  },
  {
    "label": "SendCloseReason()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendCloseReason(FNetResult&& CloseReason)"
  },
  {
    "label": "HandleReceiveCloseReason()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceiveCloseReason(const FString& CloseReasonList)"
  },
  {
    "label": "HandleReceiveNetUpgrade()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleReceiveNetUpgrade(uint32 RemoteNetworkVersion, EEngineNetworkRuntimeFeatures RemoteNetworkFeatures,\n\t\t\t\t\t\t\t\t\t\t\tUE::Net::ENetUpgradeSource NetUpgradeSource=UE::Net::ENetUpgradeSource::ControlChannel)"
  },
  {
    "label": "HandleNetResultOrClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleNetResultOrClose(ENetCloseResult InResult)"
  },
  {
    "label": "TryClosePendingGracefulClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryClosePendingGracefulClose()"
  },
  {
    "label": "InitChannelData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitChannelData()"
  },
  {
    "label": "ClearDormantFlushedObjectsForActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDormantFlushedObjectsForActor(AActor* Actor)"
  },
  {
    "label": "FScopedRepContext()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FScopedRepContext(UNetConnection* InConnection, AActor* InActor)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FString()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"Simulated Client\")"
  }
]