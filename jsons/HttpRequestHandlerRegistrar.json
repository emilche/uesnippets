[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRouteQueryResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRouteQueryResult"
  },
  {
    "label": "FHttpRequestHandlerRegistrar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpRequestHandlerRegistrar"
  },
  {
    "label": "FDynamicRouteHandleWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicRouteHandleWrapper"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HttpRouteHandle . h \" # include \" Templates / UnrealTypeTraits . h \" enum class EHttpServerRequestVerbs : uint16 ; struct FRouteQueryResult { operator)",
    "insertText": "bool()"
  },
  {
    "label": "RemoveRoute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRoute(const FHttpRouteHandle& Handle)"
  },
  {
    "label": "ContainsRoute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsRoute(const FHttpPath& RoutePath, EHttpServerRequestVerbs Verb)"
  },
  {
    "label": "QueryRoute()",
    "kind": "Method",
    "detail": "Function (FRouteQueryResult)",
    "insertText": "QueryRoute(const FString& Query, EHttpServerRequestVerbs Verb, const TArray<FString>* Parsedtokens = nullptr)"
  },
  {
    "label": "FDynamicRouteHandleWrapper()",
    "kind": "Method",
    "detail": "Function (private : struct FDynamicRouteHandleWrapper {)",
    "insertText": "FDynamicRouteHandleWrapper(FHttpRouteHandle Handle)"
  },
  {
    "label": "FindStaticRoute()",
    "kind": "Method",
    "detail": "Function (FHttpRouteHandle Handle ; TArray<FString> DynamicPathSectionTokens ; } ; private : TTuple<TArray<FHttpRouteHandle>*,int64>)",
    "insertText": "FindStaticRoute(const FString& RoutePath, EHttpServerRequestVerbs Verb)"
  },
  {
    "label": "FindDynamicRoute()",
    "kind": "Method",
    "detail": "Function (TTuple<TArray<FDynamicRouteHandleWrapper>*,int64>)",
    "insertText": "FindDynamicRoute(const FString& RoutePath, EHttpServerRequestVerbs Verb)"
  },
  {
    "label": "ContainsStaticRoute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsStaticRoute(const FHttpPath& RoutePath, EHttpServerRequestVerbs Verb)"
  },
  {
    "label": "ContainsDynamicRoute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsDynamicRoute(const FHttpPath& RoutePath, EHttpServerRequestVerbs Verb)"
  },
  {
    "label": "RemoveStaticRoute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveStaticRoute(const FHttpPath& RoutePath, EHttpServerRequestVerbs Verb)"
  },
  {
    "label": "RemoveDynamicRoute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveDynamicRoute(const FHttpPath& RoutePath, EHttpServerRequestVerbs Verb)"
  },
  {
    "label": "MatchesPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesPath(const TArray<FString>& InPath, const TArray<FString>& TemplatePath)"
  },
  {
    "label": "ParsePathParameters()",
    "kind": "Method",
    "detail": "Function (TMap<FString,FString>)",
    "insertText": "ParsePathParameters(const TArray<FString>& InPath, const TArray<FString>& TemplatePath)"
  }
]