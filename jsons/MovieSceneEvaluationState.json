[
  {
    "label": "IMovieScenePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieScenePlayer"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FMovieSceneEvaluationKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationKey"
  },
  {
    "label": "FMovieSceneObjectBindingID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneObjectBindingID"
  },
  {
    "label": "FSharedPersistentDataKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPersistentDataKey"
  },
  {
    "label": "IPersistentEvaluationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPersistentEvaluationData"
  },
  {
    "label": "FInstanceHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceHandle"
  },
  {
    "label": "FSharedPlaybackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPlaybackState"
  },
  {
    "label": "MOVIESCENE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MOVIESCENE_API"
  },
  {
    "label": "FMovieSceneObjectCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneObjectCache"
  },
  {
    "label": "FBoundObjects",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoundObjects"
  },
  {
    "label": "TFastGuidKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFastGuidKeyFuncs"
  },
  {
    "label": "FMovieSceneEvaluationState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationState"
  },
  {
    "label": "FVersionedObjectCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVersionedObjectCache"
  },
  {
    "label": "NotifyBindingsChanged()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Map . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Delegates / MulticastDelegateBase . h \" # include \" EntitySystem / MovieSceneSharedPlaybackState . h \" # include \" Evaluation / IMovieScenePlaybackCapability . h \" # include \" Evaluation / MovieSceneEvaluationKey . h \" # include \" Evaluation / PersistentEvaluationData . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Misc / Guid . h \" # include \" MovieSceneSequence . h \" # include \" MovieSceneSequenceID . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class IMovieScenePlayer ; class UMovieSceneSequence ; class UObject ; struct FMovieSceneEvaluationKey ; struct FMovieSceneObjectBindingID ; struct FSharedPersistentDataKey ; struct IPersistentEvaluationData ; namespace UE::MovieScene { struct FInstanceHandle ; struct FSharedPlaybackState ; struct IObjectBindingNotifyPlaybackCapability { TPlaybackCapabilityID<IObjectBindingNotifyPlaybackCapability> ID ; void)",
    "insertText": "NotifyBindingsChanged()"
  },
  {
    "label": "NotifyBindingUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyBindingUpdate(const FGuid& InBindingId, FMovieSceneSequenceIDRef InSequenceID, TArrayView<TWeakObjectPtr<>> BoundObjects)"
  },
  {
    "label": "IStaticBindingOverridesPlaybackCapability()",
    "kind": "Method",
    "detail": "Function (} } ; struct IStaticBindingOverridesPlaybackCapability { TPlaybackCapabilityID<IStaticBindingOverridesPlaybackCapability> ID ; ~)",
    "insertText": "IStaticBindingOverridesPlaybackCapability()"
  },
  {
    "label": "GetBindingOverride()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneEvaluationOperand*)",
    "insertText": "GetBindingOverride(const FMovieSceneEvaluationOperand& InOperand)"
  },
  {
    "label": "AddBindingOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBindingOverride(const FMovieSceneEvaluationOperand& InOperand, const FMovieSceneEvaluationOperand& InOverrideOperand)"
  },
  {
    "label": "RemoveBindingOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBindingOverride(const FMovieSceneEvaluationOperand& InOperand)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} ; } struct FMovieSceneObjectCache { using FSharedPlaybackState = UE::MovieScene::FSharedPlaybackState ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnBindingInvalidated, const FGuid&)"
  },
  {
    "label": "FindBoundObjects()",
    "kind": "Method",
    "detail": "Function (FOnBindingInvalidated OnBindingInvalidated ; TArrayView<TWeakObjectPtr<>>)",
    "insertText": "FindBoundObjects(const FGuid& InBindingID, TSharedRef<const FSharedPlaybackState> InSharedPlaybackState)"
  },
  {
    "label": "IterateBoundObjects()",
    "kind": "Method",
    "detail": "Function (TArrayView<const TWeakObjectPtr<>>)",
    "insertText": "IterateBoundObjects(const FGuid& InBindingID)"
  },
  {
    "label": "SetSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSequence(UMovieSceneSequence& InSequence, FMovieSceneSequenceIDRef InSequenceID, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "FindObjectId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindObjectId(UObject& InObject, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "FindCachedObjectId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindCachedObjectId(UObject& InObject, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "InvalidateExpiredObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateExpiredObjects()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate(const FGuid& InGuid)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate(const FGuid& InGuid, FMovieSceneSequenceIDRef InSequenceID)"
  },
  {
    "label": "InvalidateIfValid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateIfValid(const FGuid& InGuid)"
  },
  {
    "label": "GetBindingActivation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBindingActivation(const FGuid& InGuid)"
  },
  {
    "label": "SetBindingActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBindingActivation(const FGuid& InGuid, bool bActive)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear(TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "GetSequence()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSequence*)",
    "insertText": "GetSequence()"
  },
  {
    "label": "GetSerialNumber()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSerialNumber()"
  },
  {
    "label": "FindBoundObjects()",
    "kind": "Method",
    "detail": "Function (public : TArrayView<TWeakObjectPtr<>>)",
    "insertText": "FindBoundObjects(const FGuid& InBindingID, IMovieScenePlayer& Player)"
  },
  {
    "label": "SetSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSequence(UMovieSceneSequence& InSequence, FMovieSceneSequenceIDRef InSequenceID, IMovieScenePlayer& Player)"
  },
  {
    "label": "FindObjectId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindObjectId(UObject& InObject, IMovieScenePlayer& Player)"
  },
  {
    "label": "FindCachedObjectId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindCachedObjectId(UObject& InObject, IMovieScenePlayer& Player)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear(IMovieScenePlayer& Player)"
  },
  {
    "label": "FilterObjectBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterObjectBindings(UObject* PredicateObject, IMovieScenePlayer& Player, TArray<FMovieSceneObjectBindingID>* OutBindings)"
  },
  {
    "label": "UpdateBindings()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateBindings(const FGuid& InGuid, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "InvalidateInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InvalidateInternal(const FGuid& InGuid)"
  },
  {
    "label": "InvalidateIfValidInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InvalidateIfValidInternal(const FGuid& InGuid)"
  },
  {
    "label": "UpdateSerialNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSerialNumber()"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (struct FBoundObjects { bool bUpToDate ; TArray<TWeakObjectPtr<>,TInlineAllocator<1>> Objects ; } ; private : TWeakObjectPtr<UMovieSceneSequence> WeakSequence ; FMovieSceneSequenceID SequenceID ; template<ValueType> struct TFastGuidKeyFuncs : BaseKeyFuncs<TPair<FGuid,ValueType>,FGuid,false> { typedef TTypeTraits<FGuid>::ConstPointerType KeyInitType ; typedef const TPairInitializer<TTypeTraits<FGuid>::ConstInitType,TTypeTraits<ValueType>::ConstInitType>& ElementInitType ; KeyInitType)",
    "insertText": "GetSetKey(ElementInitType Element)"
  },
  {
    "label": "FindSequence()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSequence*)",
    "insertText": "FindSequence(FMovieSceneSequenceIDRef InSequenceID)"
  },
  {
    "label": "FindSequenceId()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceID)",
    "insertText": "FindSequenceId(UMovieSceneSequence* InSequence)"
  },
  {
    "label": "FindSequenceId()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceID)",
    "insertText": "FindSequenceId(const UMovieSceneSequence* InSequence)"
  },
  {
    "label": "FindObjectId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindObjectId(UObject& Object, FMovieSceneSequenceIDRef InSequenceID, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "FindCachedObjectId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindCachedObjectId(UObject& Object, FMovieSceneSequenceIDRef InSequenceID, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "FilterObjectBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterObjectBindings(UObject* PredicateObject, TSharedRef<const FSharedPlaybackState> SharedPlaybackState, TArray<FMovieSceneObjectBindingID>* OutBindings)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FVersionedObjectCache* Cache = ObjectCaches .)",
    "insertText": "Find(SequenceID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Cache =& ObjectCaches .)",
    "insertText": "Add(SequenceID, FVersionedObjectCache())"
  },
  {
    "label": "FindBoundObjects()",
    "kind": "Method",
    "detail": "Function (} return Cache -> ObjectCache ; } TArrayView<TWeakObjectPtr<>>)",
    "insertText": "FindBoundObjects(const FGuid& ObjectBindingID, FMovieSceneSequenceIDRef SequenceID, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "FindObjectCache()",
    "kind": "Method",
    "detail": "Function (FMovieSceneObjectCache* Cache =)",
    "insertText": "FindObjectCache(SequenceID)"
  },
  {
    "label": "TWeakObjectPtr()",
    "kind": "Method",
    "detail": "Function (} return TArrayView<)",
    "insertText": "TWeakObjectPtr()"
  },
  {
    "label": "FindBoundObjects()",
    "kind": "Method",
    "detail": "Function (} TArrayView<TWeakObjectPtr<>>)",
    "insertText": "FindBoundObjects(const FMovieSceneEvaluationOperand& Operand, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "GetBindingActivation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBindingActivation(const FGuid& InGuid, FMovieSceneSequenceIDRef InSequenceID)"
  },
  {
    "label": "SetBindingActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBindingActivation(const FGuid& InGuid, FMovieSceneSequenceIDRef InSequenceID, bool bActive)"
  },
  {
    "label": "ClearObjectCaches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearObjectCaches(TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (TMap<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData>> PersistentEntityData ; TMap<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData>> PersistentSharedData ; public : void)",
    "insertText": "Initialize(TSharedRef<const FSharedPlaybackState> Owner)"
  },
  {
    "label": "OnSubInstanceCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSubInstanceCreated(TSharedRef<const FSharedPlaybackState> Owner, const UE::MovieScene::FInstanceHandle InstanceHandle)"
  },
  {
    "label": "RegisterObjectCacheEvents()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RegisterObjectCacheEvents(UMovieSceneEntitySystemLinker* Linker, const UE::MovieScene::FInstanceHandle& InstanceHandle, const FMovieSceneSequenceID SequenceID)"
  },
  {
    "label": "AssignSequence()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AssignSequence(FMovieSceneSequenceIDRef InSequenceID, UMovieSceneSequence& InSequence, IMovieScenePlayer& Player)"
  },
  {
    "label": "FindObjectId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindObjectId(UObject& Object, FMovieSceneSequenceIDRef InSequenceID, IMovieScenePlayer& Player)"
  },
  {
    "label": "FindCachedObjectId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindCachedObjectId(UObject& Object, FMovieSceneSequenceIDRef InSequenceID, IMovieScenePlayer& Player)"
  },
  {
    "label": "ClearObjectCaches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearObjectCaches(IMovieScenePlayer& Player)"
  }
]