[
  {
    "label": "FSocketSubsystemMac",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocketSubsystemMac"
  },
  {
    "label": "FSocketBSD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocketBSD"
  },
  {
    "label": "FSocketMac",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocketMac"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SocketSubsystem . h \" # include \" BSDSockets / SocketSubsystemBSD . h \" # include \" BSDSockets / SocketsBSD . h \" # include \" SocketSubsystemPackage . h \" class FSocketSubsystemMac : public FSocketSubsystemBSD { protected : FSocketSubsystemMac* SocketSingleton ; bool bTriedToInit ; PACKAGE_SCOPE : FSocketSubsystemMac*)",
    "insertText": "Create()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "InternalBSDSocketFactory()",
    "kind": "Method",
    "detail": "Function (class FSocketBSD*)",
    "insertText": "InternalBSDSocketFactory(SOCKET Socket, ESocketType SocketType, const FString& SocketDescription, const FName& SocketProtocol)"
  },
  {
    "label": "FSocketSubsystemMac()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSocketSubsystemMac() : bTriedToInit(false)"
  },
  {
    "label": "FSocketSubsystemMac()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSocketSubsystemMac()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Init(FString& Error)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "HasNetworkDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNetworkDevice()"
  },
  {
    "label": "GetLocalAdapterAddresses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLocalAdapterAddresses(TArray<TSharedPtr<FInternetAddr>>& OutAddresses)"
  },
  {
    "label": "FSocketMac()",
    "kind": "Method",
    "detail": "Function (} ; class FSocketMac : public FSocketBSD { public :)",
    "insertText": "FSocketMac(SOCKET InSocket, ESocketType InSocketType, const FString& InSocketDescription, const FName& InSocketProtocol, ISocketSubsystem * InSubsystem) : FSocketBSD(InSocket, InSocketType, InSocketDescription, InSocketProtocol, InSubsystem)"
  },
  {
    "label": "FSocketMac()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSocketMac()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "SetReuseAddr()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetReuseAddr(bool bAllowReuse)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (int Param = bAllowReuse ? 1 : 0 ;)",
    "insertText": "return(setsockopt(Socket,SOL_SOCKET,SO_REUSEADDR,(char*)&Param,sizeof(Param)) == 0) && (setsockopt(Socket,SOL_SOCKET,SO_REUSEPORT,(char*)&Param,sizeof(Param)) == 0)"
  }
]