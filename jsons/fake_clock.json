[
  {
    "label": "FakeClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeClock"
  },
  {
    "label": "ThreadProcessingFakeClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadProcessingFakeClock"
  },
  {
    "label": "ScopedBaseFakeClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedBaseFakeClock"
  },
  {
    "label": "ScopedFakeClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedFakeClock"
  },
  {
    "label": "FakeClock()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_FAKE_CLOCK_H_ # define RTC_BASE_FAKE_CLOCK_H_ # include<stdint . h> # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" # include \" rtc_base / time_utils . h \" namespace rtc { class FakeClock : public ClockInterface { public :)",
    "insertText": "FakeClock()"
  },
  {
    "label": "FakeClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FakeClock(const FakeClock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FakeClock&)",
    "insertText": "operator(const FakeClock&)"
  },
  {
    "label": "TimeNanos()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "TimeNanos()"
  },
  {
    "label": "SetTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTime(webrtc::Timestamp new_time)"
  },
  {
    "label": "AdvanceTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceTime(webrtc::TimeDelta delta)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : webrtc::Mutex lock_ ; int64_t time_ns_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  },
  {
    "label": "SetTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTime(webrtc::Timestamp time)"
  },
  {
    "label": "ScopedBaseFakeClock()",
    "kind": "Method",
    "detail": "Function (private : FakeClock clock_ ; } ; class ScopedBaseFakeClock : public FakeClock { public :)",
    "insertText": "ScopedBaseFakeClock()"
  },
  {
    "label": "ScopedFakeClock()",
    "kind": "Method",
    "detail": "Function (private : ClockInterface* prev_clock_ ; } ; class ScopedFakeClock : public ThreadProcessingFakeClock { public :)",
    "insertText": "ScopedFakeClock()"
  }
]