[
  {
    "label": "CClassDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CClassDefinition"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "CClass()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Containers / SharedPointerSet . h \" # include \" uLang / Common / Containers / UniquePointerSet . h \" # include \" uLang / Semantics / Attributable . h \" # include \" uLang / Semantics / Definition . h \" # include \" uLang / Semantics / DataDefinition . h \" # include \" uLang / Semantics / MemberOrigin . h \" # include \" uLang / Semantics / SemanticFunction . h \" # include \" uLang / Semantics / SemanticInterface . h \" # include \" uLang / Semantics / SemanticScope . h \" # include \" uLang / Semantics / SmallDefinitionArray . h \" # include \" uLang / Semantics / StructOrClass . h \" # include \" uLang / Semantics / VisitStamp . h \" namespace uLang { class CClassDefinition ; class CClass : public CNominalType,public CLogicalScope { public : const ETypeKind StaticTypeKind = ETypeKind::Class ; const CDefinition::EKind StaticDefinitionKind = CDefinition::EKind::Class ; CClassDefinition* const _Definition ; const EStructOrClass _StructOrClass ; CClass* _Superclass ; TArray<CInterface*> _SuperInterfaces ; TArray<CInterface*> _AllInheritedInterfaces ; SEffectSet _ConstructorEffects ; TArray<CExprCodeBlock*> _IrBlockClauses ; CClass* _GeneralizedClass { this } ; TArray<STypeVariableSubstitution> _TypeVariableSubstitutions ; TURefArray<CClass> _InstantiatedClasses ; TUPtr<CClass> _OwnedNegativeClass ; CClass* _NegativeClass ; bool _bHasCyclesBroken { false } ;)",
    "insertText": "CClass(CClassDefinition*, CScope& EnclosingScope, CClass* Superclass = nullptr, TArray<CInterface*>&& SuperInterfaces = {}, EStructOrClass = EStructOrClass::Class, SEffectSet ConstructorEffects = EffectSets::ClassDefault)"
  },
  {
    "label": "CClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CClass(CScope* ParentScope, CClassDefinition*, EStructOrClass, CClass* Superclass, TArray<CInterface*>&& SuperInterfaces, SEffectSet ConstructorEffects, CClass* GeneralizedClass, TArray<STypeVariableSubstitution>)"
  },
  {
    "label": "CClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CClass(CClass* PositiveClass)"
  },
  {
    "label": "GetTypeType()",
    "kind": "Method",
    "detail": "Function (using CTypeBase::GetProgram ; const CTypeType*)",
    "insertText": "GetTypeType()"
  },
  {
    "label": "SetSuperclass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSuperclass(CClass* SuperClass)"
  },
  {
    "label": "IsClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClass(const CClass& Class)"
  },
  {
    "label": "IsSubclassOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubclassOf(const CClass& Superclass)"
  },
  {
    "label": "IsSuperclassOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSuperclassOf(const CClass& Subclass)"
  },
  {
    "label": "IsStruct()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStruct()"
  },
  {
    "label": "IsAbstract()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAbstract()"
  },
  {
    "label": "IsPersistent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPersistent()"
  },
  {
    "label": "IsUnique()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnique()"
  },
  {
    "label": "HasConcreteAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasConcreteAttribute()"
  },
  {
    "label": "FindConcreteBase()",
    "kind": "Method",
    "detail": "Function (const CClass*)",
    "insertText": "FindConcreteBase()"
  },
  {
    "label": "FindInitialConcreteBase()",
    "kind": "Method",
    "detail": "Function (const CClass*)",
    "insertText": "FindInitialConcreteBase()"
  },
  {
    "label": "IsConcrete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConcrete()"
  },
  {
    "label": "GetScopeName()",
    "kind": "Method",
    "detail": "Function (} CSymbol)",
    "insertText": "GetScopeName()"
  },
  {
    "label": "ScopeAsType()",
    "kind": "Method",
    "detail": "Function (} const CTypeBase*)",
    "insertText": "ScopeAsType()"
  },
  {
    "label": "GetDefaultDefinitionAccessLevel()",
    "kind": "Method",
    "detail": "Function (} SAccessLevel)",
    "insertText": "GetDefaultDefinitionAccessLevel()"
  },
  {
    "label": "CreateNegativeDataDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNegativeDataDefinition(const CDataDefinition& PositiveDataDefinition)"
  },
  {
    "label": "CreateNegativeFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNegativeFunction(const CFunction& PositiveFunction)"
  },
  {
    "label": "FindDefinitions()",
    "kind": "Method",
    "detail": "Function (SmallDefinitionArray)",
    "insertText": "FindDefinitions(const CSymbol& Name, EMemberOrigin Origin = EMemberOrigin::InheritedOrOriginal, const SQualifier& Qualifier = SQualifier::Unknown(), const CAstPackage* ContextPackage = nullptr, VisitStampType VisitStamp = GenerateNewVisitStamp())"
  },
  {
    "label": "AsCodeRecursive()",
    "kind": "Method",
    "detail": "Function (CUTF8String)",
    "insertText": "AsCodeRecursive(ETypeSyntaxPrecedence OuterPrecedence, TArray<const CFlowType*>& VisitedFlowTypes, bool bLinkable)"
  },
  {
    "label": "FindInstanceMember()",
    "kind": "Method",
    "detail": "Function (SmallDefinitionArray)",
    "insertText": "FindInstanceMember(const CSymbol& Name, EMemberOrigin Origin, const SQualifier& Qualifier = SQualifier::Unknown(), const CAstPackage* ContextPackage = nullptr, VisitStampType VisitStamp = CScope::GenerateNewVisitStamp())"
  },
  {
    "label": "GetComparability()",
    "kind": "Method",
    "detail": "Function (EComparability)",
    "insertText": "GetComparability()"
  },
  {
    "label": "GetComparability()",
    "kind": "Method",
    "detail": "Function (EComparability)",
    "insertText": "GetComparability(VisitStampType)"
  },
  {
    "label": "IsPersistable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPersistable()"
  },
  {
    "label": "SetRevision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRevision(SemanticRevision Revision)"
  },
  {
    "label": "CanBeCustomAccessorDataType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeCustomAccessorDataType()"
  },
  {
    "label": "ForEachAncestorClassOrInterface()",
    "kind": "Method",
    "detail": "Function (template<TFunc> void)",
    "insertText": "ForEachAncestorClassOrInterface(const TFunc& Func)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(Interface, nullptr, Interface)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(CClass* Class = _Superclass; Class; Class = Class->_Superclass)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(Class, Class, nullptr)"
  },
  {
    "label": "HasAttributeClass()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "HasAttributeClass(const CClass* AttributeClass, const CSemanticProgram& Program)"
  },
  {
    "label": "AddAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAttribute(SAttribute)"
  },
  {
    "label": "FindAttribute()",
    "kind": "Method",
    "detail": "Function (TOptional<SAttribute>)",
    "insertText": "FindAttribute(const CClass* AttributeClass, const CSemanticProgram& Program)"
  },
  {
    "label": "HasCyclesBroken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCyclesBroken()"
  },
  {
    "label": "IsParametric()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParametric()"
  },
  {
    "label": "CClassDefinition()",
    "kind": "Method",
    "detail": "Function (} } ; class CClassDefinition : public CDefinition,public CClass { public : CAttributable _EffectAttributable ; TOptional<SAccessLevel> _ConstructorAccessLevel ;)",
    "insertText": "CClassDefinition(const CSymbol& ClassName, CScope& EnclosingScope, CClass* Superclass = nullptr, TArray<CInterface*>&& SuperInterfaces = {}, EStructOrClass StructOrClass = EStructOrClass::Class) : CDefinition(StaticDefinitionKind, EnclosingScope, ClassName) , CClass(this, EnclosingScope, Superclass, Move(SuperInterfaces), StructOrClass)"
  },
  {
    "label": "DerivedConstructorAccessLevel()",
    "kind": "Method",
    "detail": "Function (} using CAttributable::HasAttributeClass ; using CAttributable::AddAttribute ; using CAttributable::FindAttribute ; SAccessLevel)",
    "insertText": "DerivedConstructorAccessLevel()"
  },
  {
    "label": "SetAstNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAstNode(CExprClassDefinition* AstNode)"
  },
  {
    "label": "GetAstNode()",
    "kind": "Method",
    "detail": "Function (CExprClassDefinition*)",
    "insertText": "GetAstNode()"
  },
  {
    "label": "SetIrNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIrNode(CExprClassDefinition* AstNode)"
  },
  {
    "label": "GetIrNode()",
    "kind": "Method",
    "detail": "Function (CExprClassDefinition*)",
    "insertText": "GetIrNode(bool bForce = false)"
  },
  {
    "label": "DefinitionAsLogicalScopeNullable()",
    "kind": "Method",
    "detail": "Function (const CLogicalScope*)",
    "insertText": "DefinitionAsLogicalScopeNullable()"
  },
  {
    "label": "CInstantiatedClass()",
    "kind": "Method",
    "detail": "Function (} } ; class CInstantiatedClass : public CInstantiatedType { public :)",
    "insertText": "CInstantiatedClass(CSemanticProgram& Program, const CClass& Class, ETypePolarity Polarity, TArray<STypeVariableSubstitution> Arguments) : CInstantiatedType(Program, Polarity, Move(Arguments)) , _Class(&Class)"
  },
  {
    "label": "InstantiateClass()",
    "kind": "Method",
    "detail": "Function (private : const CClass* _Class ; } ; CClass*)",
    "insertText": "InstantiateClass(const CClass&, ETypePolarity, const TArray<STypeVariableSubstitution>&)"
  },
  {
    "label": "SetNegativeClassMemberDefinitionTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNegativeClassMemberDefinitionTypes(const CClass& PositiveClass)"
  },
  {
    "label": "Definition()",
    "kind": "Method",
    "detail": "Function (const CDefinition*)",
    "insertText": "Definition()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArrayG<const CClass*,TInlineElementAllocator<1 6>> SeenClasses ; const CClass* RelatedClass = this ; do {)",
    "insertText": "if(SeenClasses.Contains(RelatedClass))"
  },
  {
    "label": "ULANG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERT(HasCyclesBroken())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const CClass* RelatedClass = _Superclass ;)",
    "insertText": "while(RelatedClass)"
  },
  {
    "label": "ULANG_ENSUREF()",
    "kind": "Method",
    "detail": "Function (CClass* Class = this ; do {)",
    "insertText": "ULANG_ENSUREF(Revision >= Class->GetRevision(), \"Revision to be set must not be smaller than existing revisions.\")"
  },
  {
    "label": "SetRevision()",
    "kind": "Method",
    "detail": "Function (break ; } Class ->)",
    "insertText": "SetRevision(Revision)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Class = Class -> _Superclass ; })",
    "insertText": "while(Class)"
  },
  {
    "label": "AddAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddAttribute(SAttribute Attribute)"
  }
]