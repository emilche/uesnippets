[
  {
    "label": "FDependsNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDependsNode"
  },
  {
    "label": "FARFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FARFilter"
  },
  {
    "label": "FAssetDataGatherer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetDataGatherer"
  },
  {
    "label": "FFileChangeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileChangeData"
  },
  {
    "label": "FPackageReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageReader"
  },
  {
    "label": "UAssetRegistryImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetRegistryImpl"
  },
  {
    "label": "FEventContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAsyncConsumer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncConsumer"
  },
  {
    "label": "FInitializeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitializeContext"
  },
  {
    "label": "FScanPathContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScanPathContext"
  },
  {
    "label": "FTickContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTickContext"
  },
  {
    "label": "FClassInheritanceContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClassInheritanceContext"
  },
  {
    "label": "TRWScopeLockWithPriority",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRWScopeLockWithPriority"
  },
  {
    "label": "FRWScopeLockWithPriority",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRWScopeLockWithPriority"
  },
  {
    "label": "FRegisteredAssetDependencyGatherer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRegisteredAssetDependencyGatherer"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "FAsyncConsumer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncConsumer"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "FRWLockWithPriority",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRWLockWithPriority"
  },
  {
    "label": "ELockPriority",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELockPriority"
  },
  {
    "label": "inheritance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "inheritance"
  },
  {
    "label": "FClassInheritanceBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClassInheritanceBuffer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EPerformanceMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPerformanceMode"
  },
  {
    "label": "FInterruptionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInterruptionContext"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FAssetRegistryImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryImpl"
  },
  {
    "label": "whose",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "whose"
  },
  {
    "label": "names",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "names"
  },
  {
    "label": "this",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "this"
  },
  {
    "label": "names",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "names"
  },
  {
    "label": "FAssetRegistryPackageRedirect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRegistryPackageRedirect"
  },
  {
    "label": "dependency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dependency"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Impl"
  },
  {
    "label": "FEventContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FClassInheritanceContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClassInheritanceContext"
  },
  {
    "label": "FScanPathContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScanPathContext"
  },
  {
    "label": "FTickContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTickContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "PrepareForConsume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareForConsume()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait(UAssetRegistryImpl& UARI, FInterfaceWriteScopeLock& ScopeLock)"
  },
  {
    "label": "Consume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Consume(UAssetRegistryImpl& UARI, UE::AssetRegistry::Impl::FEventContext& EventContext, ELoadResult LoadResult, FAssetRegistryState&& ARState)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "ShouldExitEarly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldExitEarly()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(Impl::FInitializeContext& Context)"
  },
  {
    "label": "GetRedirectedObjectPath()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "GetRedirectedObjectPath(const FSoftObjectPath& ObjectPath, UE::AssetRegistry::Impl::FEventContext* EventContext, \n\t\tUE::AssetRegistry::Impl::FClassInheritanceContext* InheritanceContext, bool bNeedsScanning)"
  },
  {
    "label": "SetTemporaryCachingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTemporaryCachingMode(bool bEnable)"
  },
  {
    "label": "SetTemporaryCachingModeInvalidated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTemporaryCachingModeInvalidated()"
  },
  {
    "label": "AddPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddPath(Impl::FEventContext& EventContext, FStringView PathToAdd)"
  },
  {
    "label": "SearchAllAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchAllAssets(Impl::FEventContext& EventContext, Impl::FClassInheritanceContext& InheritanceContext,\n\t\tbool bSynchronousSearch)"
  },
  {
    "label": "ScanPathsSynchronous()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScanPathsSynchronous(Impl::FScanPathContext& Context)"
  },
  {
    "label": "PrioritizeSearchPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrioritizeSearchPath(const FString& PathToPrioritize)"
  },
  {
    "label": "ScanModifiedAssetFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScanModifiedAssetFiles(Impl::FEventContext& EventContext, Impl::FClassInheritanceContext& InheritanceContext,\n\t\tconst TArray<FString>& InFilePaths, UE::AssetRegistry::EScanFlags ScanFlags)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, Impl::FEventContext& EventContext)"
  },
  {
    "label": "AppendState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendState(Impl::FEventContext& EventContext, const FAssetRegistryState& InState,\n\t\tFAssetRegistryState::EInitializationMode Mode = FAssetRegistryState::EInitializationMode::Append, bool bEmitAssetEvents = false)"
  },
  {
    "label": "SetManageReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetManageReferences(const TMultiMap<FAssetIdentifier, FAssetIdentifier>& ManagerMap,\n\t\tbool bClearExisting, UE::AssetRegistry::EDependencyCategory RecurseType,\n\t\tTSet<FDependsNode*>& ExistingManagedNodes, IAssetRegistry::ShouldSetManagerPredicate ShouldSetManager)"
  },
  {
    "label": "SetPrimaryAssetIdForObjectPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPrimaryAssetIdForObjectPath(Impl::FEventContext& EventContext, const FSoftObjectPath& ObjectPath, FPrimaryAssetId PrimaryAssetId)"
  },
  {
    "label": "OnDirectoryChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDirectoryChanged(Impl::FEventContext& EventContext, Impl::FClassInheritanceContext& InheritanceContext,\n\t\tTArray<FFileChangeData>& FileChangesProcessed)"
  },
  {
    "label": "OnDirectoryRescanRequired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDirectoryRescanRequired(Impl::FEventContext& EventContext,\n\t\tImpl::FClassInheritanceContext& InheritanceContext, FString& DirPath, int64 BeforeTimeStamp)"
  },
  {
    "label": "AddLoadedAssetToProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLoadedAssetToProcess(const UObject& AssetLoaded)"
  },
  {
    "label": "OnContentPathMounted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContentPathMounted(Impl::FEventContext& EventContext, Impl::FClassInheritanceContext& InheritanceContext,\n\t\tconst FString& InAssetPath, const FString& AssetPathWithTrailingSlash, const FString& FileSystemPath)"
  },
  {
    "label": "OnContentPathDismounted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContentPathDismounted(Impl::FEventContext& EventContext, const FString& InAssetPath,\n\t\tconst FString& AssetPathNoTrailingSlash, const FString& FileSystemPath)"
  },
  {
    "label": "OnPluginLoadingComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPluginLoadingComplete(bool bPhaseSuccessful)"
  },
  {
    "label": "RefreshNativeClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshNativeClasses()"
  },
  {
    "label": "WaitForGathererIdleIfSynchronous()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForGathererIdleIfSynchronous()"
  },
  {
    "label": "WaitForGathererIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForGathererIdle(float TimeoutSeconds)"
  },
  {
    "label": "TickGatherer()",
    "kind": "Method",
    "detail": "Function (Impl::EGatherStatus)",
    "insertText": "TickGatherer(Impl::FTickContext& TickContext)"
  },
  {
    "label": "SetGameThreadTakeOverGatherEachTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGameThreadTakeOverGatherEachTick(bool bValue)"
  },
  {
    "label": "LogSearchDiagnostics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogSearchDiagnostics(double StartTime)"
  },
  {
    "label": "TickGatherPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickGatherPackage(Impl::FEventContext& EventContext, const FString& PackageName, const FString& LocalPath)"
  },
  {
    "label": "ClearGathererCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearGathererCache()"
  },
  {
    "label": "AssetsSaved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetsSaved(UE::AssetRegistry::Impl::FEventContext& EventContext, TArray<FAssetData>&& Assets)"
  },
  {
    "label": "GetProcessLoadedAssetsBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetProcessLoadedAssetsBatch(TArray<const UObject*>& OutLoadedAssets, uint32 BatchSize,\n\t\tbool bUpdateDiskCacheAfterLoad)"
  },
  {
    "label": "PushProcessLoadedAssetsBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushProcessLoadedAssetsBatch(Impl::FEventContext& EventContext,\n\t\tTArrayView<FAssetData> LoadedAssetDatas, TArrayView<const UObject*> UnprocessedFromBatch)"
  },
  {
    "label": "LoadCalculatedDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadCalculatedDependencies(TArray<FName>* AssetPackageNamessToCalculate, Impl::FClassInheritanceContext& InheritanceContext, \n\t\tTSet<FName>* InPackagesNeedingDependencyCalculation, Impl::FInterruptionContext& InOutInterruptionContext)"
  },
  {
    "label": "PruneAndCoalescePackagesRequiringDependencyCalculation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneAndCoalescePackagesRequiringDependencyCalculation(TSet<FName>& BackgroundPackages, TSet<FName>& GameThreadPackages,\n\t\tImpl::FInterruptionContext& InOutInterruptionContext)"
  },
  {
    "label": "LoadCalculatedDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadCalculatedDependencies(FName PackageName, Impl::FClassInheritanceContext& InheritanceContext,\n\t\tbool& bOutHadActivity)"
  },
  {
    "label": "AddDirectoryReferencer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirectoryReferencer(FName PackageName, const FString& DirectoryLocalPathOrLongPackageName)"
  },
  {
    "label": "RemoveDirectoryReferencer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDirectoryReferencer(FName PackageName)"
  },
  {
    "label": "AddEmptyPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEmptyPackage(FName PackageName)"
  },
  {
    "label": "RemoveEmptyPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveEmptyPackage(FName PackageName)"
  },
  {
    "label": "AddAssetPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddAssetPath(Impl::FEventContext& EventContext, FName PathToAdd)"
  },
  {
    "label": "RemoveAssetPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveAssetPath(Impl::FEventContext& EventContext, FName PathToRemove, bool bEvenIfAssetsStillExist = false)"
  },
  {
    "label": "RemovePackageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePackageData(Impl::FEventContext& EventContext, const FName PackageName)"
  },
  {
    "label": "AddVerseFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVerseFile(Impl::FEventContext& EventContext, FName VerseFilePathToAdd)"
  },
  {
    "label": "RemoveVerseFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveVerseFile(Impl::FEventContext& EventContext, FName VerseFilePathToRemove)"
  },
  {
    "label": "GetCurrentGeneratorClassesVersionNumber()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetCurrentGeneratorClassesVersionNumber()"
  },
  {
    "label": "GetCurrentAllClassesVersionNumber()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetCurrentAllClassesVersionNumber()"
  },
  {
    "label": "SetPerformanceMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPerformanceMode(Impl::EPerformanceMode NewMode)"
  },
  {
    "label": "CollectCodeGeneratorClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectCodeGeneratorClasses()"
  },
  {
    "label": "ConditionalLoadPremadeAssetRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalLoadPremadeAssetRegistry(UAssetRegistryImpl& UARI, \n\t\tUE::AssetRegistry::Impl::FEventContext& EventContext, FInterfaceWriteScopeLock& ScopeLock)"
  },
  {
    "label": "RequestPauseBackgroundProcessing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestPauseBackgroundProcessing()"
  },
  {
    "label": "RequestResumeBackgroundProcessing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestResumeBackgroundProcessing()"
  },
  {
    "label": "InitRedirectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRedirectors(Impl::FEventContext& EventContext, Impl::FClassInheritanceContext& InheritanceContext,\n\t\tbool& bOutRedirectorsNeedSubscribe)"
  },
  {
    "label": "ReadScriptPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadScriptPackages()"
  },
  {
    "label": "TryConstructGathererIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConstructGathererIfNeeded()"
  },
  {
    "label": "SearchAllAssetsInitialAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchAllAssetsInitialAsync(Impl::FEventContext& EventContext, Impl::FClassInheritanceContext& InheritanceContext)"
  },
  {
    "label": "AssetSearchDataGathered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetSearchDataGathered(Impl::FEventContext& EventContext,\n\t\tTMultiMap<FName, TUniquePtr<FAssetData>>& AssetResults, \n\t\tTMultiMap<FName, TUniquePtr<FAssetData>>& OutDeferredResults,\\\n\t\tImpl::FInterruptionContext& InOutInterruptionContext)"
  },
  {
    "label": "ShouldSkipGatheredAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSkipGatheredAsset(FAssetData& AssetData)"
  },
  {
    "label": "PathDataGathered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PathDataGathered(Impl::FEventContext& EventContext, TRingBuffer<FString>& PathResults, Impl::FInterruptionContext& InOutInterruptionContext)"
  },
  {
    "label": "DependencyDataGathered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DependencyDataGathered(TMultiMap<FName, FPackageDependencyData>& DependsResults, \n\t\tTMultiMap<FName, FPackageDependencyData>& OutDeferredDependencyResults,\tTSet<FName>* OutPackagesNeedingDependencyCalculation, \n\t\tImpl::FInterruptionContext& InOutInterruptionContext)"
  },
  {
    "label": "CookedPackageNamesWithoutAssetDataGathered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CookedPackageNamesWithoutAssetDataGathered(Impl::FEventContext& EventContext, \n\t\tTRingBuffer<FString>& CookedPackageNamesWithoutAssetDataResults, Impl::FInterruptionContext& InOutInterruptionContext)"
  },
  {
    "label": "VerseFilesGathered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerseFilesGathered(Impl::FEventContext& EventContext, TRingBuffer<FName>& VerseResults, Impl::FInterruptionContext& InOutInterruptionContext)"
  },
  {
    "label": "AddAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAssetData(Impl::FEventContext& EventContext, FAssetData* AssetData)"
  },
  {
    "label": "UpdateAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAssetData(Impl::FEventContext& EventContext, FAssetData* AssetData, FAssetData&& NewAssetData, bool bKeepDeletedTags)"
  },
  {
    "label": "AddNonOverlappingTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNonOverlappingTags(Impl::FEventContext& EventContext, FAssetData& ExistingAssetData,\n\t\tconst FAssetData& NewAssetData)"
  },
  {
    "label": "RemoveAssetData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveAssetData(Impl::FEventContext& EventContext, FAssetData* AssetData)"
  },
  {
    "label": "TryPostLoadAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryPostLoadAssetRegistryTags(FAssetData* AssetData)"
  },
  {
    "label": "UpdateRedirectCollector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRedirectCollector()"
  },
  {
    "label": "RebuildAssetDependencyGathererMapIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildAssetDependencyGathererMapIfNeeded()"
  },
  {
    "label": "CachePathsFromState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachePathsFromState(Impl::FEventContext& EventContext, const FAssetRegistryState& InState)"
  },
  {
    "label": "AddCachedBPClassParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCachedBPClassParent(const FTopLevelAssetPath& ClassPath, const FTopLevelAssetPath& NotYetRedirectedParentPath)"
  },
  {
    "label": "ConsumeOrDeferPreloadedPremade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeOrDeferPreloadedPremade(UAssetRegistryImpl& UARI, Impl::FEventContext& EventContext)"
  },
  {
    "label": "LoadPremadeAssetRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadPremadeAssetRegistry(Impl::FEventContext& Context,\n\t\tPremade::ELoadResult LoadResult, FAssetRegistryState&& ARState)"
  },
  {
    "label": "UpdatePersistentMountPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePersistentMountPoints()"
  },
  {
    "label": "OnInitialSearchCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitialSearchCompleted(Impl::FEventContext& EventContext)"
  },
  {
    "label": "UpdateMaxSecondsPerFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMaxSecondsPerFrame()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(FEventContext&& Other)"
  },
  {
    "label": "BindToBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindToBuffer(FClassInheritanceBuffer& InBuffer, FAssetRegistryImpl& InAssetRegistryImpl,\n\t\tbool bInInheritanceMapUpToDate, bool bInCodeGeneratorClassesUpToDate)"
  },
  {
    "label": "ConditionalUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalUpdate()"
  },
  {
    "label": "IsFilterValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilterValid(const FARCompiledFilter& Filter)"
  },
  {
    "label": "RunAssetThroughFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunAssetThroughFilter(const FAssetData& AssetData, const FARCompiledFilter& Filter, const EFilterMode FilterMode)"
  },
  {
    "label": "RunAssetThroughFilter_Unchecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunAssetThroughFilter_Unchecked(const FAssetData& AssetData, const FARCompiledFilter& Filter, const bool bPassFilterValue)"
  },
  {
    "label": "RunAssetsThroughFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunAssetsThroughFilter(TArray<FAssetData>& AssetDataList, const FARCompiledFilter& Filter, const EFilterMode FilterMode)"
  },
  {
    "label": "InitializeSerializationOptionsFromIni()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSerializationOptionsFromIni(FAssetRegistrySerializationOptions& Options, const FString& PlatformIniName,\n\tESerializationTarget Target = ESerializationTarget::ForGame)"
  },
  {
    "label": "GetAssetAvailability()",
    "kind": "Method",
    "detail": "Function (EAssetAvailability::Type)",
    "insertText": "GetAssetAvailability(const FAssetData& AssetData)"
  },
  {
    "label": "GetAssetAvailabilityProgress()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAssetAvailabilityProgress(const FAssetData& AssetData, EAssetAvailabilityProgressReportingType::Type ReportType)"
  },
  {
    "label": "GetAssetAvailabilityProgressTypeSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssetAvailabilityProgressTypeSupported(EAssetAvailabilityProgressReportingType::Type ReportType)"
  },
  {
    "label": "PrioritizeAssetInstall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrioritizeAssetInstall(const FAssetData& AssetData)"
  },
  {
    "label": "ReadAssetFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadAssetFile(FPackageReader& PackageReader, IAssetRegistry::FLoadPackageRegistryData& InOutData)"
  },
  {
    "label": "IsPathMounted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPathMounted(const FString& Path, const TSet<FString>& MountPointsNoTrailingSlashes, FString& StringBuffer)"
  }
]