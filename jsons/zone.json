[
  {
    "label": "msgpack_zone_finalizer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "msgpack_zone_finalizer"
  },
  {
    "label": "msgpack_zone_finalizer_array",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "msgpack_zone_finalizer_array"
  },
  {
    "label": "msgpack_zone_chunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "msgpack_zone_chunk"
  },
  {
    "label": "msgpack_zone_chunk_list",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "msgpack_zone_chunk_list"
  },
  {
    "label": "msgpack_zone",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "msgpack_zone"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef MSGPACK_ZONE_H # define MSGPACK_ZONE_H # include \" sysdep . h \" # ifdef __cplusplus \" C \" { # endif typedef struct msgpack_zone_finalizer {)",
    "insertText": "void(*func)(void* data)"
  },
  {
    "label": "msgpack_zone_init()",
    "kind": "Method",
    "detail": "Function (void* data ; } msgpack_zone_finalizer ; typedef struct msgpack_zone_finalizer_array { msgpack_zone_finalizer* tail ; msgpack_zone_finalizer* end ; msgpack_zone_finalizer* array ; } msgpack_zone_finalizer_array ; struct msgpack_zone_chunk ; typedef struct msgpack_zone_chunk msgpack_zone_chunk ; typedef struct msgpack_zone_chunk_list { size_t free ; char* ptr ; msgpack_zone_chunk* head ; } msgpack_zone_chunk_list ; typedef struct msgpack_zone { msgpack_zone_chunk_list chunk_list ; msgpack_zone_finalizer_array finalizer_array ; size_t chunk_size ; } msgpack_zone ; # ifndef MSGPACK_ZONE_CHUNK_SIZE # define MSGPACK_ZONE_CHUNK_SIZE 8 1 9 2 # endif MSGPACK_DLLEXPORT bool)",
    "insertText": "msgpack_zone_init(msgpack_zone* zone, size_t chunk_size)"
  },
  {
    "label": "msgpack_zone_destroy()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT void)",
    "insertText": "msgpack_zone_destroy(msgpack_zone* zone)"
  },
  {
    "label": "msgpack_zone_new()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT msgpack_zone*)",
    "insertText": "msgpack_zone_new(size_t chunk_size)"
  },
  {
    "label": "msgpack_zone_free()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT void)",
    "insertText": "msgpack_zone_free(msgpack_zone* zone)"
  },
  {
    "label": "msgpack_zone_malloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "msgpack_zone_malloc(msgpack_zone* zone, size_t size)"
  },
  {
    "label": "msgpack_zone_malloc_no_align()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "msgpack_zone_malloc_no_align(msgpack_zone* zone, size_t size)"
  },
  {
    "label": "msgpack_zone_push_finalizer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "msgpack_zone_push_finalizer(msgpack_zone* zone, void (*func)(void* data), void* data)"
  },
  {
    "label": "msgpack_zone_swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "msgpack_zone_swap(msgpack_zone* a, msgpack_zone* b)"
  },
  {
    "label": "msgpack_zone_is_empty()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT bool)",
    "insertText": "msgpack_zone_is_empty(msgpack_zone* zone)"
  },
  {
    "label": "msgpack_zone_clear()",
    "kind": "Method",
    "detail": "Function (MSGPACK_DLLEXPORT void)",
    "insertText": "msgpack_zone_clear(msgpack_zone* zone)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# ifndef MSGPACK_ZONE_ALIGN # define MSGPACK_ZONE_ALIGN)",
    "insertText": "sizeof(void*) #endif MSGPACK_DLLEXPORT void* msgpack_zone_malloc_expand(msgpack_zone* zone, size_t size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (char* ptr ; msgpack_zone_chunk_list* cl =& zone -> chunk_list ;)",
    "insertText": "if(zone->chunk_list.free < size)"
  },
  {
    "label": "aligned()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "aligned(char*)( (size_t)( zone->chunk_list.ptr + (MSGPACK_ZONE_ALIGN - 1) ) / MSGPACK_ZONE_ALIGN * MSGPACK_ZONE_ALIGN)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t adjusted_size =)",
    "insertText": "size(aligned - zone->chunk_list.ptr)"
  },
  {
    "label": "msgpack_zone_malloc_expand()",
    "kind": "Method",
    "detail": "Function (zone -> chunk_list . free - = adjusted_size ; zone -> chunk_list . ptr + = adjusted_size ; return aligned ; } { void* ptr =)",
    "insertText": "msgpack_zone_malloc_expand(zone, size + (MSGPACK_ZONE_ALIGN - 1))"
  },
  {
    "label": "msgpack_zone_push_finalizer_expand()",
    "kind": "Method",
    "detail": "Function (} } return NULL ; } bool)",
    "insertText": "msgpack_zone_push_finalizer_expand(msgpack_zone* zone, void (*func)(void* data), void* data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (msgpack_zone_finalizer_array* const fa =& zone -> finalizer_array ; msgpack_zone_finalizer* fin = fa -> tail ;)",
    "insertText": "if(fin == fa->end)"
  }
]