[
  {
    "label": "gebp_kernel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "gebp_kernel"
  },
  {
    "label": "gemm_pack_rhs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "gemm_pack_rhs"
  },
  {
    "label": "gemm_pack_lhs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "gemm_pack_lhs"
  },
  {
    "label": "general_matrix_matrix_product",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "general_matrix_matrix_product"
  },
  {
    "label": "general_matrix_vector_product",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "general_matrix_vector_product"
  },
  {
    "label": "get_factor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "get_factor"
  },
  {
    "label": "BlasVectorMapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlasVectorMapper"
  },
  {
    "label": "BlasLinearMapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlasLinearMapper"
  },
  {
    "label": "blas_data_mapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "blas_data_mapper"
  },
  {
    "label": "PacketBlockManagement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketBlockManagement"
  },
  {
    "label": "storePacketBlock_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "storePacketBlock_helper"
  },
  {
    "label": "const_blas_data_mapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_blas_data_mapper"
  },
  {
    "label": "blas_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "blas_traits"
  },
  {
    "label": "extract_data_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "extract_data_selector"
  },
  {
    "label": "combine_scalar_factors_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "combine_scalar_factors_impl"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_BLASUTIL_H # define EIGEN_BLASUTIL_H namespace Eigen { namespace internal { template<LhsScalar,RhsScalar,Index,DataMapper,int mr,int nr,bool ConjugateLhs = false,bool ConjugateRhs = false> struct gebp_kernel ; template<Scalar,Index,DataMapper,int nr,int StorageOrder,bool Conjugate = false,bool PanelMode = false> struct gemm_pack_rhs ; template<Scalar,Index,DataMapper,int Pack1,int Pack2,Packet,int StorageOrder,bool Conjugate = false,bool PanelMode = false> struct gemm_pack_lhs ; template<Index,LhsScalar,int LhsStorageOrder,bool ConjugateLhs,RhsScalar,int RhsStorageOrder,bool ConjugateRhs,int ResStorageOrder,int ResInnerStride> struct general_matrix_matrix_product ; template<Index,LhsScalar,LhsMapper,int LhsStorageOrder,bool ConjugateLhs,RhsScalar,RhsMapper,bool ConjugateRhs,int Version = Specialized> struct general_matrix_vector_product ; template<From,To> struct get_factor { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE To)",
    "insertText": "run(const From& x)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar> struct get_factor<Scalar,NumTraits<Scalar>::Real> { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE NumTraits<Scalar>::Real)",
    "insertText": "run(const Scalar& x)"
  },
  {
    "label": "BlasVectorMapper()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar,Index> class BlasVectorMapper { public : EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "BlasVectorMapper(Scalar *data) : m_data(data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE Scalar)",
    "insertText": "operator()(Index i)"
  },
  {
    "label": "aligned()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC bool)",
    "insertText": "aligned(Index i)"
  },
  {
    "label": "BlasLinearMapper()",
    "kind": "Method",
    "detail": "Function (} protected : Scalar* m_data ; } ; template<Scalar,Index,int AlignmentType,int Incr = 1> class BlasLinearMapper ; template<Scalar,Index,int AlignmentType> class BlasLinearMapper<Scalar,Index,AlignmentType> { public : EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "BlasLinearMapper(Scalar *data, Index incr=1) : m_data(data)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(incr)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(incr==1)"
  },
  {
    "label": "prefetch()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void)",
    "insertText": "prefetch(int i)"
  },
  {
    "label": "prefetch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prefetch(&operator()(i))"
  },
  {
    "label": "storePacket()",
    "kind": "Method",
    "detail": "Function (} template<PacketType> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void)",
    "insertText": "storePacket(Index i, const PacketType &p)"
  },
  {
    "label": "AlignmentType()",
    "kind": "Method",
    "detail": "Function (pstoret<Scalar,PacketType,)",
    "insertText": "AlignmentType(m_data + i, p)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} protected : Scalar* m_data ; } ; template<Scalar,Index,int StorageOrder,int AlignmentType = Unaligned,int Incr = 1> class blas_data_mapper ; template<Index,Scalar,Packet,int n,int idx,int StorageOrder> struct PacketBlockManagement { PacketBlockManagement<Index,Scalar,Packet,n,idx - 1,StorageOrder> pbm ; EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void)",
    "insertText": "store(Scalar *to, const Index stride, Index i, Index j, const PacketBlock<Packet, n> &block)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (pbm .)",
    "insertText": "store(to, stride, i, j, block)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (pstoreu<)",
    "insertText": "Scalar(to + i + (j + idx)*stride, block.packet[idx])"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (pstoreu<)",
    "insertText": "Scalar(to + j + (i + idx)*stride, block.packet[idx])"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(to)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(stride)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(i)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(j)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(block)"
  },
  {
    "label": "blas_data_mapper()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar,Index,int StorageOrder,int AlignmentType> class blas_data_mapper<Scalar,Index,StorageOrder,AlignmentType,1> { public : typedef BlasLinearMapper<Scalar,Index,AlignmentType> LinearMapper ; typedef BlasVectorMapper<Scalar,Index> VectorMapper ; EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "blas_data_mapper(Scalar* data, Index stride, Index incr=1) : m_data(data), m_stride(stride)"
  },
  {
    "label": "getSubMapper()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE blas_data_mapper<Scalar,Index,StorageOrder,AlignmentType>)",
    "insertText": "getSubMapper(Index i, Index j)"
  },
  {
    "label": "getLinearMapper()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE LinearMapper)",
    "insertText": "getLinearMapper(Index i, Index j)"
  },
  {
    "label": "getVectorMapper()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE VectorMapper)",
    "insertText": "getVectorMapper(Index i, Index j)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE Scalar&)",
    "insertText": "operator()(Index i, Index j)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (} template<PacketT,int AlignmentT> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE PacketT)",
    "insertText": "load(Index i, Index j)"
  },
  {
    "label": "scatterPacket()",
    "kind": "Method",
    "detail": "Function (} template<SubPacket> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void)",
    "insertText": "scatterPacket(Index i, Index j, const SubPacket &p)"
  },
  {
    "label": "SubPacket()",
    "kind": "Method",
    "detail": "Function (pscatter<Scalar,)",
    "insertText": "SubPacket(&operator()(i, j), p, m_stride)"
  },
  {
    "label": "gatherPacket()",
    "kind": "Method",
    "detail": "Function (} template<SubPacket> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE SubPacket)",
    "insertText": "gatherPacket(Index i, Index j)"
  },
  {
    "label": "stride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Index)",
    "insertText": "stride()"
  },
  {
    "label": "storePacketBlock()",
    "kind": "Method",
    "detail": "Function (} template<SubPacket,int n> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void)",
    "insertText": "storePacketBlock(Index i, Index j, const PacketBlock<SubPacket, n> &block)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (PacketBlockManagement<Index,Scalar,SubPacket,n,n - 1,StorageOrder> pbm ; pbm .)",
    "insertText": "store(m_data, m_stride, i, j, block)"
  },
  {
    "label": "BlasLinearMapper()",
    "kind": "Method",
    "detail": "Function (} protected : Scalar* EIGEN_RESTRICT m_data ; const Index m_stride ; } ; template<Scalar,Index,int AlignmentType,int Incr> class BlasLinearMapper { public : EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "BlasLinearMapper(Scalar *data,Index incr) : m_data(data), m_incr(incr)"
  },
  {
    "label": "loadPacket()",
    "kind": "Method",
    "detail": "Function (} template<PacketType> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE PacketType)",
    "insertText": "loadPacket(Index i)"
  },
  {
    "label": "PacketType()",
    "kind": "Method",
    "detail": "Function (pscatter<Scalar,)",
    "insertText": "PacketType(m_data + i*m_incr.value(), p, m_incr.value())"
  },
  {
    "label": "blas_data_mapper()",
    "kind": "Method",
    "detail": "Function (} protected : Scalar* m_data ; const internal::variable_if_dynamic<Index,Incr> m_incr ; } ; template<Scalar,Index,int StorageOrder,int AlignmentType,int Incr> class blas_data_mapper { public : typedef BlasLinearMapper<Scalar,Index,AlignmentType,Incr> LinearMapper ; EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "blas_data_mapper(Scalar* data, Index stride, Index incr) : m_data(data), m_stride(stride), m_incr(incr)"
  },
  {
    "label": "loadPacket()",
    "kind": "Method",
    "detail": "Function (} template<PacketType> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE PacketType)",
    "insertText": "loadPacket(Index i, Index j)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} template<SubPacket,ScalarT,int n,int idx> struct storePacketBlock_helper { storePacketBlock_helper<SubPacket,ScalarT,n,idx - 1> spbh ; EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void)",
    "insertText": "store(const blas_data_mapper<Scalar, Index, StorageOrder, AlignmentType, Incr>* sup, Index i, Index j, const PacketBlock<SubPacket, n>& block)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (spbh .)",
    "insertText": "store(sup, i,j,block)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScalarT* v =& sup ->)",
    "insertText": "operator()(i+l, j+idx)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (spbh .)",
    "insertText": "store(sup,i,j,block)"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (v ->)",
    "insertText": "real(block.packet[idx].v[2*l+0])"
  },
  {
    "label": "imag()",
    "kind": "Method",
    "detail": "Function (v ->)",
    "insertText": "imag(block.packet[idx].v[2*l+1])"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} } } ; template<SubPacket,ScalarT,int n> struct storePacketBlock_helper<SubPacket,ScalarT,n,- 1> { EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void)",
    "insertText": "store(const blas_data_mapper<Scalar, Index, StorageOrder, AlignmentType, Incr>*, Index, Index, const PacketBlock<SubPacket, n>&)"
  },
  {
    "label": "storePacketBlock()",
    "kind": "Method",
    "detail": "Function (} } ; template<SubPacket,int n> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void)",
    "insertText": "storePacketBlock(Index i, Index j, const PacketBlock<SubPacket, n>&block)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (storePacketBlock_helper<SubPacket,Scalar,n,n - 1> spb ; spb .)",
    "insertText": "store(this, i,j,block)"
  },
  {
    "label": "const_blas_data_mapper()",
    "kind": "Method",
    "detail": "Function (} protected : Scalar* EIGEN_RESTRICT m_data ; const Index m_stride ; const internal::variable_if_dynamic<Index,Incr> m_incr ; } ; template<Scalar,Index,int StorageOrder> class const_blas_data_mapper : public blas_data_mapper<const Scalar,Index,StorageOrder> { public : EIGEN_ALWAYS_INLINE)",
    "insertText": "const_blas_data_mapper(const Scalar *data, Index stride) : blas_data_mapper<const Scalar, Index, StorageOrder>(data, stride)"
  },
  {
    "label": "HasUsableDirectAccess()",
    "kind": "Method",
    "detail": "Function (} } ; template<XprType> struct blas_traits { typedef traits<XprType>::Scalar Scalar ; typedef const XprType& ExtractType ; typedef XprType _ExtractType ; enum { IsComplex = NumTraits<Scalar>::IsComplex,IsTransposed = false,NeedToConjugate = false,)",
    "insertText": "HasUsableDirectAccess((int(XprType::Flags)&DirectAccessBit) && ( bool(XprType::IsVectorAtCompileTime) || int(inner_stride_at_compile_time<XprType>::ret) == 1))"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef conditional<)",
    "insertText": "bool(HasUsableDirectAccess)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC ExtractType)",
    "insertText": "extract(const XprType& x)"
  },
  {
    "label": "extractScalarFactor()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "extractScalarFactor(const XprType& x)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} } ; template<NestedXpr> struct blas_traits<Transpose<NestedXpr>> : blas_traits<NestedXpr> { typedef NestedXpr::Scalar Scalar ; typedef blas_traits<NestedXpr> Base ; typedef Transpose<NestedXpr> XprType ; typedef Transpose<const Base::_ExtractType> ExtractType ; typedef Transpose<const Base::_ExtractType> _ExtractType ; typedef conditional<)",
    "insertText": "bool(Base::HasUsableDirectAccess)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct blas_traits<const T> : blas_traits<T> { } ; template<T,bool HasUsableDirectAccess = blas_traits<T>::HasUsableDirectAccess> struct extract_data_selector { EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE const T::Scalar*)",
    "insertText": "run(const T& m)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct extract_data_selector<T,false> { T::Scalar*)",
    "insertText": "run(const T&)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<ResScalar,Lhs,Rhs> struct combine_scalar_factors_impl { EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE ResScalar)",
    "insertText": "run(const Lhs& lhs, const Rhs& rhs)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE ResScalar)",
    "insertText": "run(const ResScalar& alpha, const Lhs& lhs, const Rhs& rhs)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE bool)",
    "insertText": "run(const bool& alpha, const Lhs& lhs, const Rhs& rhs)"
  },
  {
    "label": "combine_scalar_factors()",
    "kind": "Method",
    "detail": "Function (} } ; template<ResScalar,Lhs,Rhs> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE ResScalar)",
    "insertText": "combine_scalar_factors(const ResScalar& alpha, const Lhs& lhs, const Rhs& rhs)"
  },
  {
    "label": "combine_scalar_factors()",
    "kind": "Method",
    "detail": "Function (} template<ResScalar,Lhs,Rhs> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE ResScalar)",
    "insertText": "combine_scalar_factors(const Lhs& lhs, const Rhs& rhs)"
  }
]