[
  {
    "label": "BigInteger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BigInteger"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_BIGINTEGER_H_ # define RAPIDJSON_BIGINTEGER_H_ # include \" . . / rapidjson . h \" # if)",
    "insertText": "defined(_MSC_VER) && !defined(__INTEL_COMPILER) && defined(_M_AMD64) #include <intrin.h> #if !defined(_ARM64EC_) #pragma intrinsic(_umul128) #else #pragma comment(lib,\"softintrin\")"
  },
  {
    "label": "BigInteger()",
    "kind": "Method",
    "detail": "Function (class BigInteger { public : typedef uint64_t Type ;)",
    "insertText": "BigInteger(const BigInteger& rhs) : count_(rhs.count_)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(digits_, rhs.digits_, count_ * sizeof(Type))"
  },
  {
    "label": "BigInteger()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BigInteger(uint64_t u) : count_(1)"
  },
  {
    "label": "BigInteger()",
    "kind": "Method",
    "detail": "Function (digits_ [ 0 ] = u ; } template<Ch>)",
    "insertText": "BigInteger(const Ch* decimals, size_t length) : count_(1)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(length > 0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (digits_ [ 0 ] = 0 ; size_t i = 0 ; const size_t kMaxDigitPerIteration = 1 9 ;)",
    "insertText": "while(length >= kMaxDigitPerIteration)"
  },
  {
    "label": "AppendDecimal64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendDecimal64(decimals + i, decimals + i + kMaxDigitPerIteration)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (length - = kMaxDigitPerIteration ; i + = kMaxDigitPerIteration ; })",
    "insertText": "if(length > 0) AppendDecimal64(decimals + i, decimals + i + length)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BigInteger&)",
    "insertText": "operator(const BigInteger &rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } BigInteger&)",
    "insertText": "operator(uint64_t u)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Type backup = digits_ [ 0 ] ; digits_ [ 0 ] + = u ;)",
    "insertText": "for(size_t i = 0; i < count_ - 1; i++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (backup = digits_ [ i + 1 ] ; digits_ [ i + 1 ] + = 1 ; })",
    "insertText": "if(digits_[count_ - 1] < backup) PushBack(1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint64_t k = 0 ;)",
    "insertText": "for(size_t i = 0; i < count_; i++)"
  },
  {
    "label": "MulAdd64()",
    "kind": "Method",
    "detail": "Function (uint64_t hi ; digits_ [ i ] =)",
    "insertText": "MulAdd64(digits_[i], u, k, &hi)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (k = hi ; })",
    "insertText": "if(k > 0) PushBack(k)"
  },
  {
    "label": "uc()",
    "kind": "Method",
    "detail": "Function (const uint64_t c = digits_ [ i ]>> 3 2 ; const uint64_t d = digits_ [ i ]& 0 xFFFFFFFF ; const uint64_t uc = u* c ; const uint64_t ud = u* d ; const uint64_t p0 = ud + k ; const uint64_t p1 =)",
    "insertText": "uc(p0 >> 32)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (digits_ [)",
    "insertText": "i(p0 & 0xFFFFFFFF) | (p1 << 32)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (size_t offset = shift / kTypeBit ; size_t interShift = shift % kTypeBit ;)",
    "insertText": "RAPIDJSON_ASSERT(count_ + offset <= kCapacity)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(digits_ + offset, digits_, count_ * sizeof(Type))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (count_ + = offset ; } else { digits_ [ count_ ] = 0 ;)",
    "insertText": "for(size_t i = count_; i > 0; i--) digits_[i + offset] = (digits_[i] << interShift) | (digits_[i - 1] >> (kTypeBit - interShift))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (digits_ [ offset ] = digits_ [ 0 ]<<interShift ; count_ + = offset ;)",
    "insertText": "if(digits_[count_])"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "memset(digits_, 0, offset * sizeof(Type))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Type rhs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint32_t kPow5 [ 1 2 ] = { 5,5* 5,5* 5* 5,5* 5* 5* 5,5* 5* 5* 5* 5,5* 5* 5* 5* 5* 5,5* 5* 5* 5* 5* 5* 5,5* 5* 5* 5* 5* 5* 5* 5,5* 5* 5* 5* 5* 5* 5* 5* 5,5* 5* 5* 5* 5* 5* 5* 5* 5* 5,5* 5* 5* 5* 5* 5* 5* 5* 5* 5* 5,5* 5* 5* 5* 5* 5* 5* 5* 5* 5* 5* 5 } ;)",
    "insertText": "if(exp == 0)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int cmp =)",
    "insertText": "Compare(rhs)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(cmp != 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const BigInteger* a,* b ; bool ret ;)",
    "insertText": "if(cmp < 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (a =& rhs ; b = this ; ret = true ; } else { a = this ; b =& rhs ; ret = false ; } Type borrow = 0 ;)",
    "insertText": "for(size_t i = 0; i < a->count_; i++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (digits_[i])",
    "insertText": "if(i < b->count_)"
  },
  {
    "label": "borrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "borrow(d > a->digits_[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (count_ = i + 1)",
    "insertText": "if(d != 0)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (} return ret ; } int)",
    "insertText": "Compare(const BigInteger& rhs)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(index < count_)"
  },
  {
    "label": "ParseUint64()",
    "kind": "Method",
    "detail": "Function (uint64_t u =)",
    "insertText": "ParseUint64(begin, end)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PushBack(Type digit)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(count_ < kCapacity)"
  },
  {
    "label": "ParseUint64()",
    "kind": "Method",
    "detail": "Function (digits_ [ count_ + + ] = digit ; } template<Ch> uint64_t)",
    "insertText": "ParseUint64(const Ch* begin, const Ch* end)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint64_t r = 0 ;)",
    "insertText": "for(const Ch* p = begin; p != end; ++p)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(*p >= Ch('0') && *p <= Ch('9'))"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (r = r* 1 0 u + static_cast<)",
    "insertText": "unsigned(*p - Ch('0'))"
  },
  {
    "label": "MulAdd64()",
    "kind": "Method",
    "detail": "Function (} return r ; } uint64_t)",
    "insertText": "MulAdd64(uint64_t a, uint64_t b, uint64_t k, uint64_t* outHigh)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) && defined(_M_AMD64) uint64_t low = _umul128(a, b, outHigh)"
  },
  {
    "label": "uint128()",
    "kind": "Method",
    "detail": "Function (uint128 p = static_cast<)",
    "insertText": "uint128(a) * static_cast<uint128>(b)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (p + = k ;* outHigh = static_cast<)",
    "insertText": "uint64_t(p >> 64)"
  },
  {
    "label": "x1()",
    "kind": "Method",
    "detail": "Function (# else const uint64_t a0 = a& 0 xFFFFFFFF,a1 = a>> 3 2,b0 = b& 0 xFFFFFFFF,b1 = b>> 3 2 ; uint64_t x0 = a0* b0,x1 = a0* b1,x2 = a1* b0,x3 = a1* b1 ;)",
    "insertText": "x1(x0 >> 32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (x1 + = x2 ;)",
    "insertText": "if(x1 < x2) x3 += (static_cast<uint64_t>(1) << 32)"
  },
  {
    "label": "lo()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "lo(x1 << 32) + (x0 & 0xFFFFFFFF)"
  },
  {
    "label": "x3()",
    "kind": "Method",
    "detail": "Function (uint64_t hi =)",
    "insertText": "x3(x1 >> 32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lo + = k ;)",
    "insertText": "if(lo < k)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (* outHigh = hi ; return lo ; # endif } const size_t kBitCount = 3 3 2 8 ; const size_t kCapacity = kBitCount /)",
    "insertText": "sizeof(Type)"
  }
]