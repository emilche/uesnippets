[
  {
    "label": "FCompressibleAnimData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompressibleAnimData"
  },
  {
    "label": "FMaxErrorStatTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaxErrorStatTracker"
  },
  {
    "label": "FErrorTrackerWorstBone",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FErrorTrackerWorstBone"
  },
  {
    "label": "FErrorTrackerWorstAnimation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FErrorTrackerWorstAnimation"
  },
  {
    "label": "FCompressionMemorySummary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompressionMemorySummary"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FAnimCompressContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimCompressContext"
  },
  {
    "label": "FAnimationUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationUtils"
  },
  {
    "label": "FDerivedDataAnimationCompression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDerivedDataAnimationCompression"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "FAnimationCompressionMemorySummaryScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationCompressionMemorySummaryScope"
  },
  {
    "label": "UAnimCompress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimCompress"
  },
  {
    "label": "FTranslationTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTranslationTrack"
  },
  {
    "label": "FRotationTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRotationTrack"
  },
  {
    "label": "FScaleTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScaleTrack"
  },
  {
    "label": "FRawAnimSequenceTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawAnimSequenceTrack"
  },
  {
    "label": "MakeBitForFlag()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Templates / Function . h \" # include \" Animation / AnimSequence . h \" # include \" Animation / AnimBoneCompressionCodec . h \" # include \" AnimationUtils . h \" # include \" AnimEnums . h \" # include \" AnimationCompression . h \" # include \" AnimCompress . generated . h \" struct FCompressibleAnimData ; uint8)",
    "insertText": "MakeBitForFlag(uint32 Item, uint32 Position)"
  },
  {
    "label": "FMaxErrorStatTracker()",
    "kind": "Method",
    "detail": "Function (template<DataType,SortType,int MaxItems> struct FMaxErrorStatTracker { public :)",
    "insertText": "FMaxErrorStatTracker() : CurrentLowestError(0.f)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "Reserve(MaxItems)"
  },
  {
    "label": "CanUseErrorStat()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanUseErrorStat(SortType NewError)"
  },
  {
    "label": "StoreErrorStat()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgsType> void)",
    "insertText": "StoreErrorStat(SortType NewError, ArgsType&&... Args)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bModified = false ;)",
    "insertText": "if(Items.Num() < MaxItems)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "Emplace(Forward<ArgsType>(Args)...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bModified = true ; } else)",
    "insertText": "if(NewError > CurrentLowestError)"
  },
  {
    "label": "DataType()",
    "kind": "Method",
    "detail": "Function (Items [ MaxItems - 1 ] =)",
    "insertText": "DataType(Forward<ArgsType>(Args)...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bModified = true ; })",
    "insertText": "if(bModified)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(Items, TGreater<>())"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (CurrentLowestError = Items .)",
    "insertText": "Last().GetErrorValue()"
  },
  {
    "label": "LogErrorStat()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "LogErrorStat()"
  },
  {
    "label": "GetMaxErrorItem()",
    "kind": "Method",
    "detail": "Function (} } const DataType&)",
    "insertText": "GetMaxErrorItem()"
  },
  {
    "label": "FErrorTrackerWorstBone()",
    "kind": "Method",
    "detail": "Function (} private : TArray<DataType> Items ; SortType CurrentLowestError ; } ; struct FErrorTrackerWorstBone {)",
    "insertText": "FErrorTrackerWorstBone() : BoneError(0) , BoneErrorTime(0) , BoneErrorBone(0) , BoneErrorBoneName(NAME_None) , BoneErrorAnimName(NAME_None)"
  },
  {
    "label": "FErrorTrackerWorstBone()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FErrorTrackerWorstBone(float InBoneError, float InBoneErrorTime, int32 InBoneErrorBone, FName InBoneErrorBoneName, FName InBoneErrorAnimName) : BoneError(InBoneError) , BoneErrorTime(InBoneErrorTime) , BoneErrorBone(InBoneErrorBone) , BoneErrorBoneName(InBoneErrorBoneName) , BoneErrorAnimName(InBoneErrorAnimName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FErrorTrackerWorstBone& Rhs)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FNumberFormattingOptions Options ; Options . MinimumIntegralDigits = 1 ; Options . MinimumFractionalDigits = 3 ; FFormatNamedArguments Args ; Args .)",
    "insertText": "Add(TEXT(\"BoneError\"), FText::AsNumber(BoneError, &Options))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Args .)",
    "insertText": "Add(TEXT(\"BoneErrorAnimName\"), FText::FromName(BoneErrorAnimName))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Args .)",
    "insertText": "Add(TEXT(\"BoneErrorBoneName\"), FText::FromName(BoneErrorBoneName))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Args .)",
    "insertText": "Add(TEXT(\"BoneErrorBone\"), BoneErrorBone)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Args .)",
    "insertText": "Add(TEXT(\"BoneErrorTime\"), FText::AsNumber(BoneErrorTime, &Options))"
  },
  {
    "label": "FErrorTrackerWorstAnimation()",
    "kind": "Method",
    "detail": "Function (} float BoneError ; float BoneErrorTime ; int32 BoneErrorBone ; FName BoneErrorBoneName ; FName BoneErrorAnimName ; } ; struct FErrorTrackerWorstAnimation {)",
    "insertText": "FErrorTrackerWorstAnimation() : AvgError(0) , AnimName(NAME_None)"
  },
  {
    "label": "FErrorTrackerWorstAnimation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FErrorTrackerWorstAnimation(float InAvgError, FName InMaxErrorAnimName) : AvgError(InAvgError) , AnimName(InMaxErrorAnimName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FErrorTrackerWorstAnimation& Rhs)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FNumberFormattingOptions Options ; Options . MinimumIntegralDigits = 1 ; Options . MinimumFractionalDigits = 3 ; FFormatNamedArguments Args ; Args .)",
    "insertText": "Add(TEXT(\"AvgError\"), FText::AsNumber(AvgError, &Options))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Args .)",
    "insertText": "Add(TEXT(\"AnimName\"), FText::FromName(AnimName))"
  },
  {
    "label": "FCompressionMemorySummary()",
    "kind": "Method",
    "detail": "Function (} private : float AvgError ; FName AnimName ; } ; class FCompressionMemorySummary { public :)",
    "insertText": "FCompressionMemorySummary(bool bInEnabled)"
  },
  {
    "label": "GatherPreCompressionStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherPreCompressionStats(int32 RawSize, int32 PreviousCompressionSize)"
  },
  {
    "label": "GatherPostCompressionStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherPostCompressionStats(const FCompressedAnimSequence& CompressedData, const TArray<FBoneData>& BoneData, const FName AnimFName, double CompressionTime, bool bInPerformedCompression)"
  },
  {
    "label": "FCompressionMemorySummary()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCompressionMemorySummary()"
  },
  {
    "label": "GatherPreCompressionStats()",
    "kind": "Method",
    "detail": "Function (struct FAnimCompressContext { private : FCompressionMemorySummary CompressionSummary ; void)",
    "insertText": "GatherPreCompressionStats(const FString& Name, int32 RawSize, int32 PreviousCompressionSize)"
  },
  {
    "label": "FAnimCompressContext()",
    "kind": "Method",
    "detail": "Function (} public : uint32 AnimIndex ; uint32 MaxAnimations ; bool bOutput ;)",
    "insertText": "FAnimCompressContext(bool bInOutput, uint32 InMaxAnimations = 1) : CompressionSummary(bInOutput) , AnimIndex(0) , MaxAnimations(InMaxAnimations) , bOutput(bInOutput)"
  },
  {
    "label": "FAnimCompressContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAnimCompressContext(const FAnimCompressContext& Rhs) : CompressionSummary(false) , AnimIndex(Rhs.AnimIndex) , MaxAnimations(Rhs.MaxAnimations) , bOutput(Rhs.bOutput)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FAnimCompressContext&)",
    "insertText": "operator(const FAnimCompressContext&)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (class FAnimationUtils ; class FDerivedDataAnimationCompression ; class UAnimSequence ; } ; # if WITH_EDITOR namespace UE { namespace Anim { namespace Compression { const FString AnimationCompressionVersionString =)",
    "insertText": "TEXT(\"0439926D560447329623BE4394FA11A6\")"
  },
  {
    "label": "FAnimationCompressionMemorySummaryScope()",
    "kind": "Method",
    "detail": "Function (struct FAnimationCompressionMemorySummaryScope {)",
    "insertText": "FAnimationCompressionMemorySummaryScope()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (bool bExpected = false ;)",
    "insertText": "check(ScopeExists.compare_exchange_strong(bExpected, true))"
  },
  {
    "label": "FCompressionMemorySummary()",
    "kind": "Method",
    "detail": "Function (CompressionSummary = MakeUnique<)",
    "insertText": "FCompressionMemorySummary(true)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (bool bExpected = true ;)",
    "insertText": "check(ScopeExists.compare_exchange_strong(bExpected, false))"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (CompressionSummary .)",
    "insertText": "Reset()"
  },
  {
    "label": "ShouldStoreCompressionResults()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldStoreCompressionResults()"
  },
  {
    "label": "CompressionResultSummary()",
    "kind": "Method",
    "detail": "Function (} FCompressionMemorySummary&)",
    "insertText": "CompressionResultSummary()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} std::atomic<bool> ScopeExists ; TUniquePtr<FCompressionMemorySummary> CompressionSummary ; } ; } } } # endif)",
    "insertText": "UCLASS(abstract, hidecategories=Object, MinimalAPI, EditInlineNew)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY()"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITORONLY_DATA bool)",
    "insertText": "Compress(const FCompressibleAnimData& CompressibleAnimData, FCompressibleAnimDataResult& OutResult)"
  },
  {
    "label": "AllocateAnimData()",
    "kind": "Method",
    "detail": "Function (# endif TUniquePtr<ICompressedAnimData>)",
    "insertText": "AllocateAnimData()"
  },
  {
    "label": "ByteSwapIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapIn(ICompressedAnimData& AnimData, TArrayView<uint8> CompressedData, FMemoryReader& MemoryStream)"
  },
  {
    "label": "ByteSwapOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapOut(ICompressedAnimData& AnimData, TArrayView<uint8> CompressedData, FMemoryWriter& MemoryStream)"
  },
  {
    "label": "DecompressPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecompressPose(FAnimSequenceDecompressionContext& DecompContext, const BoneTrackArray& RotationPairs, const BoneTrackArray& TranslationPairs, const BoneTrackArray& ScalePairs, TArrayView<FTransform>& OutAtoms)"
  },
  {
    "label": "DecompressBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecompressBone(FAnimSequenceDecompressionContext& DecompContext, int32 TrackIndex, FTransform& OutAtom)"
  },
  {
    "label": "DoReduction()",
    "kind": "Method",
    "detail": "Function (protected : # if WITH_EDITOR bool)",
    "insertText": "DoReduction(const FCompressibleAnimData& CompressibleAnimData, FCompressibleAnimDataResult& OutResult) PURE_VIRTUAL(UAnimCompress::DoReduction,return false;)"
  },
  {
    "label": "FilterTrivialPositionKeys()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "FilterTrivialPositionKeys(TArray<struct FTranslationTrack>& Track, float MaxPosDelta)"
  },
  {
    "label": "FilterTrivialPositionKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterTrivialPositionKeys(struct FTranslationTrack& Track, float MaxPosDelta)"
  },
  {
    "label": "FilterTrivialRotationKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterTrivialRotationKeys(TArray<struct FRotationTrack>& InputTracks, float MaxRotDelta)"
  },
  {
    "label": "FilterTrivialRotationKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterTrivialRotationKeys(struct FRotationTrack& Track, float MaxRotDelta)"
  },
  {
    "label": "FilterTrivialScaleKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterTrivialScaleKeys(TArray<struct FScaleTrack>& Track, float MaxScaleDelta)"
  },
  {
    "label": "FilterTrivialScaleKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterTrivialScaleKeys(struct FScaleTrack& Track, float MaxScaleDelta)"
  },
  {
    "label": "FilterTrivialKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterTrivialKeys(TArray<struct FTranslationTrack>& PositionTracks, TArray<struct FRotationTrack>& RotationTracks, TArray<struct FScaleTrack>& ScaleTracks, float MaxPosDelta, float MaxRotDelta, float MaxScaleDelta)"
  },
  {
    "label": "FilterIntermittentPositionKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterIntermittentPositionKeys(TArray<struct FTranslationTrack>& PositionTracks, int32 StartIndex, int32 Interval)"
  },
  {
    "label": "FilterIntermittentPositionKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterIntermittentPositionKeys(struct FTranslationTrack& Track, int32 StartIndex, int32 Interval)"
  },
  {
    "label": "FilterIntermittentRotationKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterIntermittentRotationKeys(TArray<struct FRotationTrack>& RotationTracks, int32 StartIndex, int32 Interval)"
  },
  {
    "label": "FilterIntermittentRotationKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterIntermittentRotationKeys(struct FRotationTrack& Track, int32 StartIndex, int32 Interval)"
  },
  {
    "label": "FilterIntermittentKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterIntermittentKeys(TArray<struct FTranslationTrack>& PositionTracks, TArray<struct FRotationTrack>& RotationTracks, int32 StartIndex, int32 Interval)"
  },
  {
    "label": "SeparateRawDataIntoTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeparateRawDataIntoTracks(const TArray<struct FRawAnimSequenceTrack>& RawAnimData, float SequenceLength, TArray<struct FTranslationTrack>& OutTranslationData, TArray<struct FRotationTrack>& OutRotationData, TArray<struct FScaleTrack>& OutScaleData)"
  },
  {
    "label": "PrecalculateShortestQuaternionRoutes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrecalculateShortestQuaternionRoutes(TArray<struct FRotationTrack>& RotationData)"
  },
  {
    "label": "BitwiseCompressAnimationTracks()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "BitwiseCompressAnimationTracks(const FCompressibleAnimData& CompressibleAnimData, FCompressibleAnimDataResult& OutCompressedData, AnimationCompressionFormat TargetTranslationFormat, AnimationCompressionFormat TargetRotationFormat, AnimationCompressionFormat TargetScaleFormat, const TArray<FTranslationTrack>& TranslationData, const TArray<FRotationTrack>& RotationData, const TArray<FScaleTrack>& ScaleData, bool IncludeKeyTable = false)"
  },
  {
    "label": "PopulateDDCKey()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "PopulateDDCKey(const UE::Anim::Compression::FAnimDDCKeyArgs& KeyArgs, FArchive& Ar)"
  },
  {
    "label": "UnalignedWriteToStream()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "UnalignedWriteToStream(TArray<uint8>& ByteStream, const void* Src, SIZE_T Len)"
  },
  {
    "label": "UnalignedWriteToStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnalignedWriteToStream(TArray<uint8>& ByteStream, int32& StreamOffset, const void* Src, SIZE_T Len)"
  },
  {
    "label": "PackVectorToStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PackVectorToStream(TArray<uint8>& ByteStream, AnimationCompressionFormat Format, const FVector3f& Vec, const float* Mins, const float* Ranges)"
  },
  {
    "label": "PackQuaternionToStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PackQuaternionToStream(TArray<uint8>& ByteStream, AnimationCompressionFormat Format, const FQuat4f& Quat, const float* Mins, const float* Ranges)"
  },
  {
    "label": "PadByteStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PadByteStream(TArray<uint8>& ByteStream, const int32 Alignment, uint8 Sentinel)"
  }
]