[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "INetBlobReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INetBlobReceiver"
  },
  {
    "label": "FNetTraceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTraceCollector"
  },
  {
    "label": "FNetBitArrayView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitArrayView"
  },
  {
    "label": "FNetBitStreamReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitStreamReader"
  },
  {
    "label": "FNetBitStreamWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitStreamWriter"
  },
  {
    "label": "FNetTokenStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenStore"
  },
  {
    "label": "FNetTokenStoreState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenStoreState"
  },
  {
    "label": "FInternalNetSerializationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternalNetSerializationContext"
  },
  {
    "label": "FNetExportContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetExportContext"
  },
  {
    "label": "FNetStatsContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetStatsContext"
  },
  {
    "label": "FNetSerializationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetSerializationContext"
  },
  {
    "label": "FNetSerializationContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Iris / Serialization / NetErrorContext . h \" # include \" Iris / Serialization / NetJournal . h \" class FName ; class INetBlobReceiver ; class FNetTraceCollector ; namespace UE::Net { class FNetBitArrayView ; class FNetBitStreamReader ; class FNetBitStreamWriter ; class FNetTokenStore ; class FNetTokenStoreState ; namespace Private { class FInternalNetSerializationContext ; class FNetExportContext ; class FNetStatsContext ; } } namespace UE::Net { class FNetSerializationContext { public :)",
    "insertText": "FNetSerializationContext()"
  },
  {
    "label": "FNetSerializationContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetSerializationContext(FNetBitStreamReader*, FNetBitStreamWriter*)"
  },
  {
    "label": "FNetSerializationContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetSerializationContext(FNetBitStreamReader*)"
  },
  {
    "label": "FNetSerializationContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetSerializationContext(FNetBitStreamWriter*)"
  },
  {
    "label": "GetBitStreamReader()",
    "kind": "Method",
    "detail": "Function (FNetBitStreamReader*)",
    "insertText": "GetBitStreamReader()"
  },
  {
    "label": "MakeSubContext()",
    "kind": "Method",
    "detail": "Function (FNetSerializationContext)",
    "insertText": "MakeSubContext(FNetBitStreamReader*)"
  },
  {
    "label": "SetTraceCollector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTraceCollector(FNetTraceCollector* InTraceCollector)"
  },
  {
    "label": "GetTraceCollector()",
    "kind": "Method",
    "detail": "Function (TraceCollector = InTraceCollector ; } FNetTraceCollector*)",
    "insertText": "GetTraceCollector()"
  },
  {
    "label": "HasErrorOrOverflow()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasErrorOrOverflow()"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(const FName Error, bool bDoOverFlow = true)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetError()"
  },
  {
    "label": "SetErrorHandleContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetErrorHandleContext(const FNetRefHandle& HandleContext)"
  },
  {
    "label": "GetErrorHandleContext()",
    "kind": "Method",
    "detail": "Function (const FNetRefHandle&)",
    "insertText": "GetErrorHandleContext()"
  },
  {
    "label": "ResetErrorContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetErrorContext()"
  },
  {
    "label": "FNetErrorContext()",
    "kind": "Method",
    "detail": "Function (ErrorContext =)",
    "insertText": "FNetErrorContext()"
  },
  {
    "label": "AddReadJournalEntry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReadJournalEntry(const TCHAR* Name)"
  },
  {
    "label": "AddReadJournalEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReadJournalEntry(const FNetDebugName* DebugName)"
  },
  {
    "label": "PrintReadJournal()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "PrintReadJournal()"
  },
  {
    "label": "ResetReadJournal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetReadJournal()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ReadJournal .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetIsInitState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsInitState(bool bInIsInitState)"
  },
  {
    "label": "IsInitState()",
    "kind": "Method",
    "detail": "Function (bIsInitState = bInIsInitState ; } bool)",
    "insertText": "IsInitState()"
  },
  {
    "label": "GetChangeMask()",
    "kind": "Method",
    "detail": "Function (ChangeMask = InChangeMask ; } const FNetBitArrayView*)",
    "insertText": "GetChangeMask()"
  },
  {
    "label": "SetLocalConnectionId()",
    "kind": "Method",
    "detail": "Function (NetBlobReceiver = InNetBlobReceiver ; } void)",
    "insertText": "SetLocalConnectionId(uint32 InLocalConnectionId)"
  },
  {
    "label": "GetLocalConnectionId()",
    "kind": "Method",
    "detail": "Function (LocalConnectionId = InLocalConnectionId ; } uint32)",
    "insertText": "GetLocalConnectionId()"
  },
  {
    "label": "GetNetTokenStore()",
    "kind": "Method",
    "detail": "Function (const UE::Net::FNetTokenStore*)",
    "insertText": "GetNetTokenStore()"
  },
  {
    "label": "GetRemoteNetTokenStoreState()",
    "kind": "Method",
    "detail": "Function (const UE::Net::FNetTokenStoreState*)",
    "insertText": "GetRemoteNetTokenStoreState()"
  },
  {
    "label": "SetInternalContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInternalContext(Private::FInternalNetSerializationContext* InInternalContext)"
  },
  {
    "label": "GetInternalContext()",
    "kind": "Method",
    "detail": "Function (InternalContext = InInternalContext ; } Private::FInternalNetSerializationContext*)",
    "insertText": "GetInternalContext()"
  },
  {
    "label": "GetExportContext()",
    "kind": "Method",
    "detail": "Function (ExportContext = InExportContext ; } Private::FNetExportContext*)",
    "insertText": "GetExportContext()"
  },
  {
    "label": "GetNetStatsContext()",
    "kind": "Method",
    "detail": "Function (NetStatsContext = InNetStatsContext ; } Private::FNetStatsContext*)",
    "insertText": "GetNetStatsContext()"
  },
  {
    "label": "IsInitializingDefaultState()",
    "kind": "Method",
    "detail": "Function (bIsInitializingDefaultState = bInIsInitializingDefaultState ; } bool)",
    "insertText": "IsInitializingDefaultState()"
  },
  {
    "label": "GetPacketId()",
    "kind": "Method",
    "detail": "Function (PacketId = InPacketId ; } int32)",
    "insertText": "GetPacketId()"
  },
  {
    "label": "SetBitStreamOverflow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBitStreamOverflow()"
  },
  {
    "label": "FNetSerializationContext()",
    "kind": "Method",
    "detail": "Function (FNetErrorContext ErrorContext ; FNetJournal ReadJournal ; FNetBitStreamReader* BitStreamReader = nullptr ; FNetBitStreamWriter* BitStreamWriter = nullptr ; FNetTraceCollector* TraceCollector = nullptr ; Private::FInternalNetSerializationContext* InternalContext = nullptr ; Private::FNetExportContext* ExportContext = nullptr ; Private::FNetStatsContext* NetStatsContext = nullptr ; const FNetBitArrayView* ChangeMask = nullptr ; INetBlobReceiver* NetBlobReceiver = nullptr ; uint32 LocalConnectionId = 0 ; int32 PacketId = - 1 ; uint32 bIsInitState : 1 ; uint32 bIsInitializingDefaultState : 1 ; } ;)",
    "insertText": "FNetSerializationContext(FNetBitStreamReader* InBitStreamReader, FNetBitStreamWriter* InBitStreamWriter) : BitStreamReader(InBitStreamReader) , BitStreamWriter(InBitStreamWriter) , bIsInitState(0) , bIsInitializingDefaultState(0)"
  },
  {
    "label": "FNetSerializationContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetSerializationContext() : FNetSerializationContext(static_cast<FNetBitStreamReader*>(nullptr), static_cast<FNetBitStreamWriter*>(nullptr))"
  },
  {
    "label": "FNetSerializationContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetSerializationContext(FNetBitStreamReader* InBitStreamReader) : FNetSerializationContext(InBitStreamReader, static_cast<FNetBitStreamWriter*>(nullptr))"
  },
  {
    "label": "FNetSerializationContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetSerializationContext(FNetBitStreamWriter* InBitStreamWriter) : FNetSerializationContext(static_cast<FNetBitStreamReader*>(nullptr), InBitStreamWriter)"
  },
  {
    "label": "MakeSubContext()",
    "kind": "Method",
    "detail": "Function (} FNetSerializationContext)",
    "insertText": "MakeSubContext(FNetBitStreamWriter* InBitStreamWriter)"
  },
  {
    "label": "SubContext()",
    "kind": "Method",
    "detail": "Function (FNetSerializationContext)",
    "insertText": "SubContext(*this)"
  },
  {
    "label": "MakeSubContext()",
    "kind": "Method",
    "detail": "Function (SubContext . BitStreamReader = nullptr ; SubContext . BitStreamWriter = InBitStreamWriter ; return SubContext ; } FNetSerializationContext)",
    "insertText": "MakeSubContext(FNetBitStreamReader* InBitStreamReader)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (SubContext . BitStreamReader = InBitStreamReader ; SubContext . BitStreamWriter = nullptr ; return SubContext ; } void)",
    "insertText": "SetError(const FName Error, bool bDoOverFlow)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (} ErrorContext .)",
    "insertText": "SetError(Error)"
  },
  {
    "label": "SetObjectHandle()",
    "kind": "Method",
    "detail": "Function (ErrorContext .)",
    "insertText": "SetObjectHandle(HandleContext)"
  }
]