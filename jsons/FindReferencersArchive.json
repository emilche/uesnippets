[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FFindReferencersArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFindReferencersArchive"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "FTargetObjectContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTargetObjectContainer"
  },
  {
    "label": "FFindReferencersArchive()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / BinarySearch . h \" # include \" Algo / Sort . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PlatformMath . h \" # include \" Misc / AssertionMacros . h \" # include \" Serialization / ArchiveUObject . h \" class FArchive ; class UObject ; class FFindReferencersArchive : public FArchiveUObject { public :)",
    "insertText": "FFindReferencersArchive(class UObject* PotentialReferencer, TArrayView<class UObject*> InTargetObjects, bool bFindAlsoWeakReferences = false)"
  },
  {
    "label": "GetReferenceCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetReferenceCount(class UObject* TargetObject, TArray<class FProperty*>* out_ReferencingProperties=NULL)"
  },
  {
    "label": "GetReferenceCounts()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetReferenceCounts(TMap<class UObject*, int32>& out_ReferenceCounts)"
  },
  {
    "label": "AppendReferenceCounts()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AppendReferenceCounts(TMap<class UObject*, int32>& out_ReferenceCounts)"
  },
  {
    "label": "GetReferenceCounts()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetReferenceCounts(TMap<class UObject*, int32>& out_ReferenceCounts, TMultiMap<class UObject*,class FProperty*>& out_ReferencingProperties)"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "ResetPotentialReferencer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetPotentialReferencer(UObject* InPotentialReferencer)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (protected : class FTargetObjectContainer { public : void)",
    "insertText": "Reserve(int32 Num)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TargetObjects .)",
    "insertText": "Reserve(Num)"
  },
  {
    "label": "AddObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddObject(UObject* Object)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TargetObjects .)",
    "insertText": "Add(Object)"
  },
  {
    "label": "Freeze()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Freeze()"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (bFrozen = true ;)",
    "insertText": "Sort(TargetObjects)"
  },
  {
    "label": "ResetRefCounts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetRefCounts()"
  },
  {
    "label": "GetRefCountPtr()",
    "kind": "Method",
    "detail": "Function (} int32*)",
    "insertText": "GetRefCountPtr(UObject* Object)"
  },
  {
    "label": "BinarySearch()",
    "kind": "Method",
    "detail": "Function (int32 ExistingIndex =)",
    "insertText": "BinarySearch(TargetObjects, Object)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (RefCounts .)",
    "insertText": "SetNumZeroed(ExistingIndex+1, EAllowShrinking::No)"
  },
  {
    "label": "TryGetRefCountPtr()",
    "kind": "Method",
    "detail": "Function (} return& RefCounts [ ExistingIndex ] ; } const int32*)",
    "insertText": "TryGetRefCountPtr(UObject* Object)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (RefCounts .)",
    "insertText": "Empty(TargetObjects.Num())"
  },
  {
    "label": "RefCountNum()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "RefCountNum()"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "GetObject(int32 Index)"
  },
  {
    "label": "CheckUnfrozen()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckUnfrozen()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool bFrozen = false ; TArray<UObject*> TargetObjects ; TArray<int32> RefCounts ; } ; FTargetObjectContainer TargetObjects ; TMultiMap<class UObject*,class FProperty*> ReferenceMap ; class UObject* PotentialReferencer ; private : FArchive&)",
    "insertText": "operator(class UObject*& Obj)"
  }
]