[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "LinkNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LinkNode"
  },
  {
    "label": "LinkedList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LinkedList"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_LINKED_LIST_H_ # define BASE_CONTAINERS_LINKED_LIST_H_ # include \" base / base_export . h \" # include \" base / memory / raw_ptr_exclusion . h \" namespace base { namespace internal { class BASE_EXPORT LinkNodeBase { public : void)",
    "insertText": "RemoveFromList()"
  },
  {
    "label": "LinkNodeBase()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "LinkNodeBase()"
  },
  {
    "label": "LinkNodeBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkNodeBase(LinkNodeBase* previous, LinkNodeBase* next)"
  },
  {
    "label": "LinkNodeBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkNodeBase(LinkNodeBase&& rhs)"
  },
  {
    "label": "LinkNodeBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkNodeBase(const LinkNodeBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LinkNodeBase&)",
    "insertText": "operator(const LinkNodeBase&)"
  },
  {
    "label": "InsertBeforeBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertBeforeBase(LinkNodeBase* e)"
  },
  {
    "label": "InsertAfterBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertAfterBase(LinkNodeBase* e)"
  },
  {
    "label": "previous_base()",
    "kind": "Method",
    "detail": "Function (LinkNodeBase*)",
    "insertText": "previous_base()"
  },
  {
    "label": "LinkNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkNode(LinkNode<T>* previous, LinkNode<T>* next) : internal::LinkNodeBase(previous, next)"
  },
  {
    "label": "LinkNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LinkNode(LinkNode<T>&&)"
  },
  {
    "label": "LinkNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkNode(const LinkNode&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LinkNode&)",
    "insertText": "operator(const LinkNode&)"
  },
  {
    "label": "InsertBefore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertBefore(LinkNode<T>* e)"
  },
  {
    "label": "InsertBeforeBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertBeforeBase(e)"
  },
  {
    "label": "InsertAfter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertAfter(LinkNode<T>* e)"
  },
  {
    "label": "InsertAfterBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertAfterBase(e)"
  },
  {
    "label": "previous()",
    "kind": "Method",
    "detail": "Function (} LinkNode<T>*)",
    "insertText": "previous()"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (} LinkNode<T>*)",
    "insertText": "next()"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} const T*)",
    "insertText": "value()"
  },
  {
    "label": "LinkedList()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> class LinkedList { public :)",
    "insertText": "LinkedList() : root_(&root_, &root_)"
  },
  {
    "label": "LinkedList()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LinkedList(const LinkedList&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LinkedList&)",
    "insertText": "operator(const LinkedList&)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(LinkNode<T>* e)"
  },
  {
    "label": "InsertBefore()",
    "kind": "Method",
    "detail": "Function (e ->)",
    "insertText": "InsertBefore(&root_)"
  },
  {
    "label": "head()",
    "kind": "Method",
    "detail": "Function (} LinkNode<T>*)",
    "insertText": "head()"
  },
  {
    "label": "tail()",
    "kind": "Method",
    "detail": "Function (} LinkNode<T>*)",
    "insertText": "tail()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} const LinkNode<T>*)",
    "insertText": "end()"
  }
]