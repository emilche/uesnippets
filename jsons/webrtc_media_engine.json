[
  {
    "label": "MediaEngineDependencies",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MediaEngineDependencies"
  },
  {
    "label": "MediaEngineDependencies()",
    "kind": "Method",
    "detail": "Function (# ifndef MEDIA_ENGINE_WEBRTC_MEDIA_ENGINE_H_ # define MEDIA_ENGINE_WEBRTC_MEDIA_ENGINE_H_ # include<memory> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" api / audio / audio_frame_processor . h \" # include \" api / audio / audio_mixer . h \" # include \" api / audio_codecs / audio_decoder_factory . h \" # include \" api / audio_codecs / audio_encoder_factory . h \" # include \" api / field_trials_view . h \" # include \" api / rtp_parameters . h \" # include \" api / scoped_refptr . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / transport / bitrate_settings . h \" # include \" api / video_codecs / video_decoder_factory . h \" # include \" api / video_codecs / video_encoder_factory . h \" # include \" media / base / codec . h \" # include \" media / base / media_engine . h \" # include \" modules / audio_device / include / audio_device . h \" # include \" modules / audio_processing / include / audio_processing . h \" # include \" rtc_base / system / rtc_export . h \" namespace cricket { struct MediaEngineDependencies {)",
    "insertText": "MediaEngineDependencies()"
  },
  {
    "label": "MediaEngineDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MediaEngineDependencies(const MediaEngineDependencies&)"
  },
  {
    "label": "MediaEngineDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MediaEngineDependencies(MediaEngineDependencies&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MediaEngineDependencies&)",
    "insertText": "operator(const MediaEngineDependencies&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MediaEngineDependencies&)",
    "insertText": "operator(MediaEngineDependencies&&)"
  },
  {
    "label": "CreateMediaEngine()",
    "kind": "Method",
    "detail": "Function (webrtc::TaskQueueFactory* task_queue_factory = nullptr ; rtc::scoped_refptr<webrtc::AudioDeviceModule> adm ; rtc::scoped_refptr<webrtc::AudioEncoderFactory> audio_encoder_factory ; rtc::scoped_refptr<webrtc::AudioDecoderFactory> audio_decoder_factory ; rtc::scoped_refptr<webrtc::AudioMixer> audio_mixer ; rtc::scoped_refptr<webrtc::AudioProcessing> audio_processing ; webrtc::AudioFrameProcessor* audio_frame_processor = nullptr ; std::unique_ptr<webrtc::VideoEncoderFactory> video_encoder_factory ; std::unique_ptr<webrtc::VideoDecoderFactory> video_decoder_factory ; const webrtc::FieldTrialsView* trials = nullptr ; } ; RTC_EXPORT std::unique_ptr<MediaEngineInterface>)",
    "insertText": "CreateMediaEngine(MediaEngineDependencies dependencies)"
  },
  {
    "label": "ValidateRtpExtensions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateRtpExtensions(rtc::ArrayView<const webrtc::RtpExtension> extennsions, rtc::ArrayView<const webrtc::RtpExtension> old_extensions)"
  },
  {
    "label": "FilterRtpExtensions()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::RtpExtension>)",
    "insertText": "FilterRtpExtensions(const std::vector<webrtc::RtpExtension>& extensions, bool (*supported)(absl::string_view), bool filter_redundant_extensions, const webrtc::FieldTrialsView& trials)"
  },
  {
    "label": "GetBitrateConfigForCodec()",
    "kind": "Method",
    "detail": "Function (webrtc::BitrateConstraints)",
    "insertText": "GetBitrateConfigForCodec(const Codec& codec)"
  }
]