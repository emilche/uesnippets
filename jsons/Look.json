[
  {
    "label": "Look",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Look"
  },
  {
    "label": "LookGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LookGroup"
  },
  {
    "label": "LookInherit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LookInherit"
  },
  {
    "label": "MaterialAssign",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MaterialAssign"
  },
  {
    "label": "Visibility",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Visibility"
  },
  {
    "label": "MX_CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_CORE_API"
  },
  {
    "label": "Look()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_LOOK_H # define MATERIALX_LOOK_H # include<MaterialXCore / Export . h> # include<MaterialXCore / Material . h> # include<MaterialXCore / Property . h> # include<MaterialXCore / Variant . h> MATERIALX_NAMESPACE_BEGIN class Look ; class LookGroup ; class LookInherit ; class MaterialAssign ; class Visibility ; using LookPtr = shared_ptr<Look> ; using ConstLookPtr = shared_ptr<const Look> ; using LookGroupPtr = shared_ptr<LookGroup> ; using ConstLookGroupPtr = shared_ptr<const LookGroup> ; using MaterialAssignPtr = shared_ptr<MaterialAssign> ; using ConstMaterialAssignPtr = shared_ptr<const MaterialAssign> ; using VisibilityPtr = shared_ptr<Visibility> ; using ConstVisibilityPtr = shared_ptr<const Visibility> ; class Look : public Element { public :)",
    "insertText": "Look(ElementPtr parent, const string& name) : Element(parent, CATEGORY, name)"
  },
  {
    "label": "Look()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Look()"
  },
  {
    "label": "addMaterialAssign()",
    "kind": "Method",
    "detail": "Function (} MaterialAssignPtr)",
    "insertText": "addMaterialAssign(const string& name = EMPTY_STRING, const string& material = EMPTY_STRING)"
  },
  {
    "label": "getMaterialAssign()",
    "kind": "Method",
    "detail": "Function (MaterialAssignPtr)",
    "insertText": "getMaterialAssign(const string& name)"
  },
  {
    "label": "getMaterialAssigns()",
    "kind": "Method",
    "detail": "Function (} vector<MaterialAssignPtr>)",
    "insertText": "getMaterialAssigns()"
  },
  {
    "label": "getActiveMaterialAssigns()",
    "kind": "Method",
    "detail": "Function (} vector<MaterialAssignPtr>)",
    "insertText": "getActiveMaterialAssigns()"
  },
  {
    "label": "removeMaterialAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeMaterialAssign(const string& name)"
  },
  {
    "label": "MaterialAssign()",
    "kind": "Method",
    "detail": "Function (removeChildOfType<)",
    "insertText": "MaterialAssign(name)"
  },
  {
    "label": "addPropertyAssign()",
    "kind": "Method",
    "detail": "Function (} PropertyAssignPtr)",
    "insertText": "addPropertyAssign(const string& name = EMPTY_STRING)"
  },
  {
    "label": "getPropertyAssign()",
    "kind": "Method",
    "detail": "Function (} PropertyAssignPtr)",
    "insertText": "getPropertyAssign(const string& name)"
  },
  {
    "label": "getPropertyAssigns()",
    "kind": "Method",
    "detail": "Function (} vector<PropertyAssignPtr>)",
    "insertText": "getPropertyAssigns()"
  },
  {
    "label": "getActivePropertyAssigns()",
    "kind": "Method",
    "detail": "Function (} vector<PropertyAssignPtr>)",
    "insertText": "getActivePropertyAssigns()"
  },
  {
    "label": "removePropertyAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removePropertyAssign(const string& name)"
  },
  {
    "label": "PropertyAssign()",
    "kind": "Method",
    "detail": "Function (removeChildOfType<)",
    "insertText": "PropertyAssign(name)"
  },
  {
    "label": "addPropertySetAssign()",
    "kind": "Method",
    "detail": "Function (} PropertySetAssignPtr)",
    "insertText": "addPropertySetAssign(const string& name = EMPTY_STRING)"
  },
  {
    "label": "getPropertySetAssign()",
    "kind": "Method",
    "detail": "Function (} PropertySetAssignPtr)",
    "insertText": "getPropertySetAssign(const string& name)"
  },
  {
    "label": "getPropertySetAssigns()",
    "kind": "Method",
    "detail": "Function (} vector<PropertySetAssignPtr>)",
    "insertText": "getPropertySetAssigns()"
  },
  {
    "label": "getActivePropertySetAssigns()",
    "kind": "Method",
    "detail": "Function (} vector<PropertySetAssignPtr>)",
    "insertText": "getActivePropertySetAssigns()"
  },
  {
    "label": "removePropertySetAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removePropertySetAssign(const string& name)"
  },
  {
    "label": "PropertySetAssign()",
    "kind": "Method",
    "detail": "Function (removeChildOfType<)",
    "insertText": "PropertySetAssign(name)"
  },
  {
    "label": "addVariantAssign()",
    "kind": "Method",
    "detail": "Function (} VariantAssignPtr)",
    "insertText": "addVariantAssign(const string& name = EMPTY_STRING)"
  },
  {
    "label": "getVariantAssign()",
    "kind": "Method",
    "detail": "Function (} VariantAssignPtr)",
    "insertText": "getVariantAssign(const string& name)"
  },
  {
    "label": "getVariantAssigns()",
    "kind": "Method",
    "detail": "Function (} vector<VariantAssignPtr>)",
    "insertText": "getVariantAssigns()"
  },
  {
    "label": "getActiveVariantAssigns()",
    "kind": "Method",
    "detail": "Function (} vector<VariantAssignPtr>)",
    "insertText": "getActiveVariantAssigns()"
  },
  {
    "label": "removeVariantAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeVariantAssign(const string& name)"
  },
  {
    "label": "VariantAssign()",
    "kind": "Method",
    "detail": "Function (removeChildOfType<)",
    "insertText": "VariantAssign(name)"
  },
  {
    "label": "addVisibility()",
    "kind": "Method",
    "detail": "Function (} VisibilityPtr)",
    "insertText": "addVisibility(const string& name = EMPTY_STRING)"
  },
  {
    "label": "getVisibility()",
    "kind": "Method",
    "detail": "Function (} VisibilityPtr)",
    "insertText": "getVisibility(const string& name)"
  },
  {
    "label": "getVisibilities()",
    "kind": "Method",
    "detail": "Function (} vector<VisibilityPtr>)",
    "insertText": "getVisibilities()"
  },
  {
    "label": "getActiveVisibilities()",
    "kind": "Method",
    "detail": "Function (} vector<VisibilityPtr>)",
    "insertText": "getActiveVisibilities()"
  },
  {
    "label": "removeVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeVisibility(const string& name)"
  },
  {
    "label": "Visibility()",
    "kind": "Method",
    "detail": "Function (removeChildOfType<)",
    "insertText": "Visibility(name)"
  },
  {
    "label": "LookGroup()",
    "kind": "Method",
    "detail": "Function (} public : const string CATEGORY ; } ; class LookGroup : public Element { public :)",
    "insertText": "LookGroup(ElementPtr parent, const string& name) : Element(parent, CATEGORY, name)"
  },
  {
    "label": "LookGroup()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "LookGroup()"
  },
  {
    "label": "setLooks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setLooks(const string& looks)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(LOOKS_ATTRIBUTE, looks)"
  },
  {
    "label": "getLooks()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getLooks()"
  },
  {
    "label": "setActiveLook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setActiveLook(const string& look)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(ACTIVE_ATTRIBUTE, look)"
  },
  {
    "label": "getActiveLook()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getActiveLook()"
  },
  {
    "label": "MaterialAssign()",
    "kind": "Method",
    "detail": "Function (} public : const string CATEGORY ; const string LOOKS_ATTRIBUTE ; const string ACTIVE_ATTRIBUTE ; } ; class MaterialAssign : public GeomElement { public :)",
    "insertText": "MaterialAssign(ElementPtr parent, const string& name) : GeomElement(parent, CATEGORY, name)"
  },
  {
    "label": "MaterialAssign()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MaterialAssign()"
  },
  {
    "label": "setMaterial()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setMaterial(const string& material)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(MATERIAL_ATTRIBUTE, material)"
  },
  {
    "label": "hasMaterial()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasMaterial()"
  },
  {
    "label": "getMaterial()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getMaterial()"
  },
  {
    "label": "getMaterialOutputs()",
    "kind": "Method",
    "detail": "Function (} vector<OutputPtr>)",
    "insertText": "getMaterialOutputs()"
  },
  {
    "label": "setExclusive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setExclusive(bool value)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (setTypedAttribute<)",
    "insertText": "bool(EXCLUSIVE_ATTRIBUTE, value)"
  },
  {
    "label": "getExclusive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "getExclusive()"
  },
  {
    "label": "getReferencedMaterial()",
    "kind": "Method",
    "detail": "Function (} NodePtr)",
    "insertText": "getReferencedMaterial()"
  },
  {
    "label": "Visibility()",
    "kind": "Method",
    "detail": "Function (} public : const string CATEGORY ; const string MATERIAL_ATTRIBUTE ; const string EXCLUSIVE_ATTRIBUTE ; } ; class Visibility : public GeomElement { public :)",
    "insertText": "Visibility(ElementPtr parent, const string& name) : GeomElement(parent, CATEGORY, name)"
  },
  {
    "label": "Visibility()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Visibility()"
  },
  {
    "label": "setViewerGeom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setViewerGeom(const string& geom)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(VIEWER_GEOM_ATTRIBUTE, geom)"
  },
  {
    "label": "hasViewerGeom()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasViewerGeom()"
  },
  {
    "label": "getViewerGeom()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getViewerGeom()"
  },
  {
    "label": "setViewerCollection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setViewerCollection(const string& collection)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(VIEWER_COLLECTION_ATTRIBUTE, collection)"
  },
  {
    "label": "hasViewerCollection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasViewerCollection()"
  },
  {
    "label": "getViewerCollection()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getViewerCollection()"
  },
  {
    "label": "setVisibilityType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setVisibilityType(const string& type)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(VISIBILITY_TYPE_ATTRIBUTE, type)"
  },
  {
    "label": "hasVisibilityType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasVisibilityType()"
  },
  {
    "label": "getVisibilityType()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getVisibilityType()"
  },
  {
    "label": "setVisible()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setVisible(bool visible)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (setTypedAttribute<)",
    "insertText": "bool(VISIBLE_ATTRIBUTE, visible)"
  },
  {
    "label": "getVisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "getVisible()"
  },
  {
    "label": "getGeometryBindings()",
    "kind": "Method",
    "detail": "Function (} public : const string CATEGORY ; const string VIEWER_GEOM_ATTRIBUTE ; const string VIEWER_COLLECTION_ATTRIBUTE ; const string VISIBILITY_TYPE_ATTRIBUTE ; const string VISIBLE_ATTRIBUTE ; } ; vector<MaterialAssignPtr>)",
    "insertText": "getGeometryBindings(ConstNodePtr materialNode, const string& geom = UNIVERSAL_GEOM_NAME)"
  }
]