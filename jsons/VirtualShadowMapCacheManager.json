[
  {
    "label": "FRHIGPUBufferReadback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIGPUBufferReadback"
  },
  {
    "label": "FGPUScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUScene"
  },
  {
    "label": "FVirtualShadowMapPerLightCacheEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualShadowMapPerLightCacheEntry"
  },
  {
    "label": "FInvalidatePagesParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInvalidatePagesParameters"
  },
  {
    "label": "FPackedViewParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedViewParams"
  },
  {
    "label": "FVirtualShadowMapInstanceRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualShadowMapInstanceRange"
  },
  {
    "label": "FVirtualShadowMapCacheEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualShadowMapCacheEntry"
  },
  {
    "label": "FClipmapInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClipmapInfo"
  },
  {
    "label": "FFrameState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameState"
  },
  {
    "label": "FClipmapCacheKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClipmapCacheKey"
  },
  {
    "label": "FVirtualShadowMapFeedback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualShadowMapFeedback"
  },
  {
    "label": "FReadbackInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReadbackInfo"
  },
  {
    "label": "FVirtualShadowMapArrayFrameData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualShadowMapArrayFrameData"
  },
  {
    "label": "FPhysicalPageMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysicalPageMetaData"
  },
  {
    "label": "FVirtualShadowMapCacheKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualShadowMapCacheKey"
  },
  {
    "label": "FVirtualShadowMapArrayCacheManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualShadowMapArrayCacheManager"
  },
  {
    "label": "FVirtualShadowMapInvalidationSceneUpdater",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualShadowMapInvalidationSceneUpdater"
  },
  {
    "label": "FInvalidatingPrimitiveCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInvalidatingPrimitiveCollector"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShadowInvalidatingInstancesImplementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowInvalidatingInstancesImplementation"
  },
  {
    "label": "FInvalidationPassCommon",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInvalidationPassCommon"
  },
  {
    "label": "FLargePageAreaItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLargePageAreaItem"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" VirtualShadowMapArray . h \" # include \" SceneManagement . h \" # include \" InstanceCulling / InstanceCullingLoadBalancer . h \" # include \" GPUScene . h \" # include \" GPUMessaging . h \" # include \" SceneRendererInterface . h \" # include \" SceneExtensions . h \" # include \" ScenePrivate . h \" class FRHIGPUBufferReadback ; class FGPUScene ; class FVirtualShadowMapPerLightCacheEntry ; class FInvalidatePagesParameters ; namespace Nanite { struct FPackedViewParams ; } struct FVirtualShadowMapInstanceRange { FPersistentPrimitiveIndex PersistentPrimitiveIndex ; int32 InstanceSceneDataOffset ; int32 NumInstanceSceneDataEntries ; bool bMarkAsDynamic ; } ; # define VSM_LOG_INVALIDATIONS 0 class FVirtualShadowMapCacheEntry { public : void)",
    "insertText": "Update(FVirtualShadowMapArray& VirtualShadowMapArray, const FVirtualShadowMapPerLightCacheEntry &PerLightEntry, int32 VirtualShadowMapId)"
  },
  {
    "label": "UpdateClipmapLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateClipmapLevel(FVirtualShadowMapArray& VirtualShadowMapArray, const FVirtualShadowMapPerLightCacheEntry& PerLightEntry, int32 VirtualShadowMapId, FInt64Point PageSpaceLocation, double LevelRadius, double ViewCenterZ, double ViewRadiusZ, double WPODistanceDisabledThreshold)"
  },
  {
    "label": "SetHZBViewParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHZBViewParams(Nanite::FPackedViewParams& OutParams)"
  },
  {
    "label": "FInt64Point()",
    "kind": "Method",
    "detail": "Function (FVirtualShadowMapHZBMetadata PrevHZBMetadata ; int32 CurrentVirtualShadowMapId = INDEX_NONE ; FVirtualShadowMapHZBMetadata CurrentHZBMetadata ; FVirtualShadowMapProjectionShaderData ProjectionData ; struct FClipmapInfo { FInt64Point PageSpaceLocation =)",
    "insertText": "FInt64Point(0, 0)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ShadowMapEntries .)",
    "insertText": "SetNum(NumShadowMaps)"
  },
  {
    "label": "OnPrimitiveRendered()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPrimitiveRendered(const FPrimitiveSceneInfo* PrimitiveSceneInfo, bool bPrimitiveRevealed)"
  },
  {
    "label": "IsFullyCached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullyCached()"
  },
  {
    "label": "GetLastScheduledFrameNumber()",
    "kind": "Method",
    "detail": "Function (Current . RenderedFrameNumber = FrameIndex ; } int32)",
    "insertText": "GetLastScheduledFrameNumber()"
  },
  {
    "label": "UpdateLocal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateLocal(const FProjectedShadowInitializer &InCacheKey, const FVector& NewLightOrigin, const float NewLightRadius, bool bNewIsDistantLight, bool bCacheEnabled, bool bAllowInvalidation)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "AffectsBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AffectsBounds(const FBoxSphereBounds& Bounds)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (} struct FFrameState { int32 RenderedFrameNumber = - 1 ; int32 ScheduledFrameNumber = - 1 ; } ; FFrameState Prev ; FFrameState Current ; bool bIsUncached = false ; bool bIsDistantLight = false ; bool bReferencedThisRender = false ; uint32 LastReferencedFrameNumber = 0 ; TBitArray<> RenderedPrimitives ; TArray<FVirtualShadowMapCacheEntry> ShadowMapEntries ; TArray<FVirtualShadowMapInstanceRange> PrimitiveInstancesToInvalidate ; FVector LightOrigin =)",
    "insertText": "FVector(0, 0, 0)"
  },
  {
    "label": "FVirtualShadowMapFeedback()",
    "kind": "Method",
    "detail": "Function (float LightRadius = - 1 . 0 f ; private : FProjectedShadowInitializer LocalCacheKey ; struct FClipmapCacheKey { FVector LightDirection ; int FirstLevel ; int LevelCount ; } ; FClipmapCacheKey ClipmapCacheKey ; } ; class FVirtualShadowMapFeedback { public :)",
    "insertText": "FVirtualShadowMapFeedback()"
  },
  {
    "label": "SubmitFeedbackBuffer()",
    "kind": "Method",
    "detail": "Function (struct FReadbackInfo { FRHIGPUBufferReadback* Buffer = nullptr ; uint32 Size = 0 ; } ; void)",
    "insertText": "SubmitFeedbackBuffer(FRDGBuilder& GraphBuilder, FRDGBufferRef FeedbackBuffer)"
  },
  {
    "label": "GetLatestReadbackBuffer()",
    "kind": "Method",
    "detail": "Function (FReadbackInfo)",
    "insertText": "GetLatestReadbackBuffer()"
  },
  {
    "label": "GetGPUSizeBytes()",
    "kind": "Method",
    "detail": "Function (private : const int32 MaxBuffers = 3 ; int32 WriteIndex = 0 ; int32 NumPending = 0 ; FReadbackInfo Buffers [ MaxBuffers ] ; } ; struct FVirtualShadowMapArrayFrameData { TRefCountPtr<FRDGPooledBuffer> PageTable ; TRefCountPtr<FRDGPooledBuffer> PageFlags ; TRefCountPtr<FRDGPooledBuffer> UncachedPageRectBounds ; TRefCountPtr<FRDGPooledBuffer> AllocatedPageRectBounds ; TRefCountPtr<FRDGPooledBuffer> ProjectionData ; TRefCountPtr<FRDGPooledBuffer> PhysicalPageLists ; TRefCountPtr<FRDGPooledBuffer> PageRequestFlags ; uint64)",
    "insertText": "GetGPUSizeBytes(bool bLogSizes)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FPhysicalPageMetaData { uint32 Flags ; uint32 LastRequestedSceneFrameNumber ; uint32 VirtualShadowMapId ; uint32 MipLevel ; FUintPoint PageAddress ; } ; struct FVirtualShadowMapCacheKey { uint32 ViewUniqueID ; uint32 LightSceneId ; bool)",
    "insertText": "operator(const FVirtualShadowMapCacheKey& Other)"
  },
  {
    "label": "DECLARE_SCENE_EXTENSION()",
    "kind": "Method",
    "detail": "Function (} class FVirtualShadowMapArrayCacheManager : public ISceneExtension { class FVirtualShadowMapInvalidationSceneUpdater ;)",
    "insertText": "DECLARE_SCENE_EXTENSION(RENDERER_API, FVirtualShadowMapArrayCacheManager)"
  },
  {
    "label": "FVirtualShadowMapArrayCacheManager()",
    "kind": "Method",
    "detail": "Function (public : using FEntryMap = TMap<FVirtualShadowMapCacheKey,TSharedPtr<FVirtualShadowMapPerLightCacheEntry>> ; uint32 MaxStatFrames = 5 1 2* 1 0 2 4 U ;)",
    "insertText": "FVirtualShadowMapArrayCacheManager()"
  },
  {
    "label": "ShouldCreateExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreateExtension(FScene& InScene)"
  },
  {
    "label": "InitExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitExtension(FScene& InScene)"
  },
  {
    "label": "CreateUpdater()",
    "kind": "Method",
    "detail": "Function (ISceneExtensionUpdater*)",
    "insertText": "CreateUpdater()"
  },
  {
    "label": "SetPhysicalPoolSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysicalPoolSize(FRDGBuilder& GraphBuilder, FIntPoint RequestedSize, int RequestedArraySize, uint32 MaxPhysicalPages)"
  },
  {
    "label": "FreePhysicalPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreePhysicalPool(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetPhysicalPagePool()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<IPooledRenderTarget>)",
    "insertText": "GetPhysicalPagePool()"
  },
  {
    "label": "FreeHZBPhysicalPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeHZBPhysicalPool(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "UpdateUnreferencedCacheEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUnreferencedCacheEntries(FVirtualShadowMapArray& VirtualShadowMapArray)"
  },
  {
    "label": "ExtractFrameData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractFrameData(FRDGBuilder& GraphBuilder, FVirtualShadowMapArray &VirtualShadowMapArray, const FSceneRenderer& SceneRenderer, bool bAllowPersistentData)"
  },
  {
    "label": "FindCreateLightCacheEntry()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FVirtualShadowMapPerLightCacheEntry>)",
    "insertText": "FindCreateLightCacheEntry(int32 LightSceneId, uint32 ViewUniqueID, uint32 NumShadowMaps)"
  },
  {
    "label": "IsCacheEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCacheEnabled()"
  },
  {
    "label": "IsCacheDataAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCacheDataAvailable()"
  },
  {
    "label": "IsHZBDataAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHZBDataAvailable()"
  },
  {
    "label": "GetCacheValidGPUMask()",
    "kind": "Method",
    "detail": "Function (FRHIGPUMask)",
    "insertText": "GetCacheValidGPUMask()"
  },
  {
    "label": "GPU0()",
    "kind": "Method",
    "detail": "Function (# if WITH_MGPU return CacheValidGPUMask ; # else return)",
    "insertText": "GPU0()"
  },
  {
    "label": "UpdateCacheValidGPUMask()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "UpdateCacheValidGPUMask(FRHIGPUMask GPUMask, bool bMergeMask)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_MGPU)",
    "insertText": "if(bMergeMask)"
  },
  {
    "label": "IsAccumulatingStats()",
    "kind": "Method",
    "detail": "Function (CacheValidGPUMask | = GPUMask ; } else { CacheValidGPUMask = GPUMask ; } # endif } bool)",
    "insertText": "IsAccumulatingStats()"
  },
  {
    "label": "FInvalidatingPrimitiveCollector()",
    "kind": "Method",
    "detail": "Function (using FInstanceGPULoadBalancer = TInstanceCullingLoadBalancer<SceneRenderingAllocator> ; class FInvalidatingPrimitiveCollector { public :)",
    "insertText": "FInvalidatingPrimitiveCollector(FVirtualShadowMapArrayCacheManager* InCacheManager)"
  },
  {
    "label": "AddPrimitivesToInvalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPrimitivesToInvalidate()"
  },
  {
    "label": "Removed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Removed(FPrimitiveSceneInfo* PrimitiveSceneInfo)"
  },
  {
    "label": "AddInvalidation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInvalidation(PrimitiveSceneInfo, EInvalidationCause::Removed)"
  },
  {
    "label": "UpdatedTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdatedTransform(FPrimitiveSceneInfo* PrimitiveSceneInfo)"
  },
  {
    "label": "AddInvalidation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInvalidation(PrimitiveSceneInfo, EInvalidationCause::Updated)"
  },
  {
    "label": "Added()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Added(FPrimitiveSceneInfo* PrimitiveSceneInfo)"
  },
  {
    "label": "AddInvalidation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInvalidation(PrimitiveSceneInfo, EInvalidationCause::Added)"
  },
  {
    "label": "AddInvalidation()",
    "kind": "Method",
    "detail": "Function (} FInstanceGPULoadBalancer Instances ; TBitArray<> InvalidatedPrimitives ; TBitArray<> RemovedPrimitives ; private : enum class EInvalidationCause { Added,Removed,Updated,} ; void)",
    "insertText": "AddInvalidation(FPrimitiveSceneInfo* PrimitiveSceneInfo, EInvalidationCause InvalidationCause)"
  },
  {
    "label": "ProcessInvalidations()",
    "kind": "Method",
    "detail": "Function (FScene* Scene = nullptr ; FVirtualShadowMapArrayCacheManager& Manager ; } ; void)",
    "insertText": "ProcessInvalidations(FRDGBuilder& GraphBuilder, FSceneUniformBuffer &SceneUniformBuffer, FInvalidatingPrimitiveCollector& InvalidatingPrimitiveCollector)"
  },
  {
    "label": "OnLightRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLightRemoved(int32 LightId)"
  },
  {
    "label": "GetPrevBuffers()",
    "kind": "Method",
    "detail": "Function (const FVirtualShadowMapArrayFrameData&)",
    "insertText": "GetPrevBuffers()"
  },
  {
    "label": "GetStatsFeedbackMessageId()",
    "kind": "Method",
    "detail": "Function (} # if ! UE_BUILD_SHIPPING uint32)",
    "insertText": "GetStatsFeedbackMessageId()"
  },
  {
    "label": "GetGlobalResolutionLodBias()",
    "kind": "Method",
    "detail": "Function (} # endif float)",
    "insertText": "GetGlobalResolutionLodBias()"
  },
  {
    "label": "CreateConstEntryIterator()",
    "kind": "Method",
    "detail": "Function (} FEntryMap::TConstIterator)",
    "insertText": "CreateConstEntryIterator()"
  },
  {
    "label": "GetInvalidatingInstancesInterface()",
    "kind": "Method",
    "detail": "Function (} UE::Renderer::Private::IShadowInvalidatingInstances*)",
    "insertText": "GetInvalidatingInstancesInterface()"
  },
  {
    "label": "ReallocatePersistentPrimitiveIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReallocatePersistentPrimitiveIndices()"
  },
  {
    "label": "FShadowInvalidatingInstancesImplementation()",
    "kind": "Method",
    "detail": "Function (private : class FShadowInvalidatingInstancesImplementation : public UE::Renderer::Private::IShadowInvalidatingInstances { public :)",
    "insertText": "FShadowInvalidatingInstancesImplementation(FVirtualShadowMapArrayCacheManager &InCacheManager) : CacheManager(InCacheManager)"
  },
  {
    "label": "AddPrimitive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPrimitive(const FPrimitiveSceneInfo *PrimitiveSceneInfo)"
  },
  {
    "label": "AddInstanceRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInstanceRange(FPersistentPrimitiveIndex PersistentPrimitiveIndex, uint32 InstanceSceneDataOffset, uint32 NumInstanceSceneDataEntries)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (FVirtualShadowMapArrayCacheManager& CacheManager ; TArray<FVirtualShadowMapInstanceRange> PrimitiveInstancesToInvalidate ; } ; void)",
    "insertText": "Invalidate(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetUniformParametersForInvalidation()",
    "kind": "Method",
    "detail": "Function (struct FInvalidationPassCommon { FVirtualShadowMapUniformParameters* UniformParameters ; TRDGUniformBufferRef<FVirtualShadowMapUniformParameters> VirtualShadowMapUniformBuffer ; TRDGUniformBufferRef<FSceneUniformParameters> SceneUniformBuffer ; FRDGBufferRef AllocatedPageRectBounds ; } ; FInvalidationPassCommon)",
    "insertText": "GetUniformParametersForInvalidation(FRDGBuilder& GraphBuilder, FSceneUniformBuffer &SceneUniformBuffer)"
  },
  {
    "label": "SetInvalidateInstancePagesParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInvalidateInstancePagesParameters(FRDGBuilder& GraphBuilder, const FInvalidationPassCommon& InvalidationPassCommon, FInvalidatePagesParameters* PassParameters)"
  },
  {
    "label": "UpdateCachePrimitiveAsDynamic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachePrimitiveAsDynamic(FInvalidatingPrimitiveCollector& InvalidatingPrimitiveCollector)"
  },
  {
    "label": "ProcessInvalidations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessInvalidations(FRDGBuilder& GraphBuilder, const FInvalidationPassCommon& InvalidationPassCommon, const FInstanceGPULoadBalancer& Instances)"
  },
  {
    "label": "ExtractStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractStats(FRDGBuilder& GraphBuilder, FVirtualShadowMapArray &VirtualShadowMapArray)"
  },
  {
    "label": "TrimLoggingInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimLoggingInfo()"
  },
  {
    "label": "GetOverflowMessage()",
    "kind": "Method",
    "detail": "Function (FVirtualShadowMapArrayFrameData PrevBuffers ; FVirtualShadowMapUniformParameters PrevUniformParameters ; TRefCountPtr<IPooledRenderTarget> PhysicalPagePool ; TRefCountPtr<IPooledRenderTarget> HZBPhysicalPagePoolArray ; ETextureCreateFlags PhysicalPagePoolCreateFlags = TexCreate_None ; TRefCountPtr<FRDGPooledBuffer> PhysicalPageMetaData ; uint32 MaxPhysicalPages = 0 ; FEntryMap CacheEntries ; TBitArray<> CachePrimitiveAsDynamic ; TArray<uint32> LastPrimitiveInvalidatedFrame ; TRefCountPtr<FRDGPooledBuffer> AccumulatedStatsBuffer ; bool bAccumulatingStats = false ; FRHIGPUBufferReadback* GPUBufferReadback = nullptr ; GPUMessage::FSocket StatusFeedbackSocket ; float GlobalResolutionLodBias = 0 . 0 f ; uint32 LastFrameOverPageAllocationBudget = 0 ; # if ! UE_BUILD_SHIPPING FDelegateHandle ScreenMessageDelegate ; uint32 LoggedOverflowFlags = 0 ; TArray<float,TInlineAllocator<VSM_STAT_OVERFLOW_FLAG_NUM>> LastOverflowTimes ; FText)",
    "insertText": "GetOverflowMessage(uint32 OverflowTypeIndex)"
  },
  {
    "label": "DECLARE_SCENE_EXTENSION_UPDATER()",
    "kind": "Method",
    "detail": "Function (GPUMessage::FSocket StatsFeedbackSocket ; TArray<float> LastLoggedPageOverlapAppTime ; struct FLargePageAreaItem { uint32 PageArea ; float LastTimeSeen ; } ; TMap<uint32,FLargePageAreaItem> LargePageAreaItems ; # endif FScene* Scene ; FShadowInvalidatingInstancesImplementation ShadowInvalidatingInstancesImplementation ; # if WITH_MGPU FRHIGPUMask CacheValidGPUMask ; # endif } ; class FVirtualShadowMapInvalidationSceneUpdater : public ISceneExtensionUpdater {)",
    "insertText": "DECLARE_SCENE_EXTENSION_UPDATER(FVirtualShadowMapInvalidationSceneUpdater, FVirtualShadowMapArrayCacheManager)"
  },
  {
    "label": "FVirtualShadowMapInvalidationSceneUpdater()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FVirtualShadowMapInvalidationSceneUpdater(FVirtualShadowMapArrayCacheManager& InCacheManager)"
  },
  {
    "label": "PreSceneUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSceneUpdate(FRDGBuilder& GraphBuilder, const FScenePreUpdateChangeSet& ChangeSet, FSceneUniformBuffer& SceneUniforms)"
  },
  {
    "label": "PostSceneUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSceneUpdate(FRDGBuilder& GraphBuilder, const FScenePostUpdateChangeSet& ChangeSet)"
  },
  {
    "label": "PostGPUSceneUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostGPUSceneUpdate(FRDGBuilder& GraphBuilder, FSceneUniformBuffer& SceneUniforms)"
  }
]