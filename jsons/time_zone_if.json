[
  {
    "label": "TimeZoneIf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeZoneIf"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_TIME_INTERNAL_CCTZ_TIME_ZONE_IF_H_ # define ABSL_TIME_INTERNAL_CCTZ_TIME_ZONE_IF_H_ # include<chrono> # include<cstdint> # include<memory> # include<string> # include \" absl / base / config . h \" # include \" absl / time / internal / cctz / include / cctz / civil_time . h \" # include \" absl / time / internal / cctz / include / cctz / time_zone . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace time_internal { namespace cctz { class TimeZoneIf { public : std::unique_ptr<TimeZoneIf>)",
    "insertText": "Load(const std::string& name)"
  },
  {
    "label": "TimeZoneIf()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TimeZoneIf()"
  },
  {
    "label": "BreakTime()",
    "kind": "Method",
    "detail": "Function (time_zone::absolute_lookup)",
    "insertText": "BreakTime(const time_point<seconds>& tp)"
  },
  {
    "label": "MakeTime()",
    "kind": "Method",
    "detail": "Function (time_zone::civil_lookup)",
    "insertText": "MakeTime(const civil_second& cs)"
  },
  {
    "label": "NextTransition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NextTransition(const time_point<seconds>& tp, time_zone::civil_transition* trans)"
  },
  {
    "label": "PrevTransition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrevTransition(const time_point<seconds>& tp, time_zone::civil_transition* trans)"
  },
  {
    "label": "Version()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Version()"
  },
  {
    "label": "Description()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Description()"
  },
  {
    "label": "ToUnixSeconds()",
    "kind": "Method",
    "detail": "Function (} } ; std::int_fast64_t)",
    "insertText": "ToUnixSeconds(const time_point<seconds>& tp)"
  },
  {
    "label": "FromUnixSeconds()",
    "kind": "Method",
    "detail": "Function (} time_point<seconds>)",
    "insertText": "FromUnixSeconds(std::int_fast64_t t)"
  }
]