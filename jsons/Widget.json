[
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "SObjectWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SObjectWidget"
  },
  {
    "label": "UGameViewportSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportSubsystem"
  },
  {
    "label": "UPanelSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPanelSlot"
  },
  {
    "label": "UPropertyBinding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPropertyBinding"
  },
  {
    "label": "UUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidget"
  },
  {
    "label": "FDynamicPropertyPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicPropertyPath"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDesignerChangedEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDesignerChangedEventArgs"
  },
  {
    "label": "UWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidget"
  },
  {
    "label": "UWidgetNavigation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetNavigation"
  },
  {
    "label": "UPanelWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPanelWidget"
  },
  {
    "label": "WidgetType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WidgetType"
  },
  {
    "label": "TGameInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGameInstance"
  },
  {
    "label": "TPlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPlayerController"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IWidgetCompilerLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWidgetCompilerLog"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "states",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "states"
  },
  {
    "label": "UE_HAS_WIDGET_GENERATED_BY_CLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Binding / States / WidgetStateBitfield . h \" # include \" UObject / ObjectMacros . h \" # include \" FieldNotificationDeclaration . h \" # include \" INotifyFieldValueChanged . h \" # include \" Misc / Attribute . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / ScriptMacros . h \" # include \" Styling / SlateColor . h \" # include \" Layout / Visibility . h \" # include \" Layout / Geometry . h \" # include \" Widgets / SWidget . h \" # include \" Types / SlateStructs . h \" # include \" Components / Visual . h \" # include \" Styling / SlateBrush . h \" # include \" UObject / TextProperty . h \" # include \" Components / SlateWrapperTypes . h \" # include \" Slate / WidgetTransform . h \" # include \" UObject / UObjectThreadContext . h \" # include \" GameFramework / PlayerController . h \" # include \" Blueprint / WidgetNavigation . h \" # include \" Widgets / WidgetPixelSnapping . h \" # include \" Widget . generated . h \" # ifndef UE_HAS_WIDGET_GENERATED_BY_CLASS # define)",
    "insertText": "UE_HAS_WIDGET_GENERATED_BY_CLASS(!UE_BUILD_SHIPPING || WITH_EDITOR) #endif #ifndef WIDGET_INCLUDE_RELFECTION_METADATA #define WIDGET_INCLUDE_RELFECTION_METADATA (!UE_BUILD_SHIPPING || WITH_EDITOR)"
  },
  {
    "label": "PROPERTY_BINDING()",
    "kind": "Method",
    "detail": "Function (class SObjectWidget ; class UGameViewportSubsystem ; class UPanelSlot ; class UPropertyBinding ; class UUserWidget ; struct FDynamicPropertyPath ; enum class ECheckBoxState : uint8 ; namespace UMWidget { enum { EntryClass,EntryInterface,} ; enum { DesignerRebuild,BindWidget,BindWidgetOptional,OptionalWidget,BindWidgetAnim,BindWidgetAnimOptional,IsBindableEvent,} ; } # if WITH_EDITOR # define)",
    "insertText": "PROPERTY_BINDING(ReturnType, MemberName) \\ ( MemberName ## Delegate.IsBound() && !IsDesignTime() ) \\ ? \\ BIND_UOBJECT_ATTRIBUTE(ReturnType, K2_Gate_ ## MemberName) \\ : \\ TAttribute< ReturnType >(MemberName) #define BITFIELD_PROPERTY_BINDING(MemberName) \\ ( MemberName ## Delegate.IsBound() && !IsDesignTime() ) \\ ? \\ BIND_UOBJECT_ATTRIBUTE(bool, K2_Gate_ ## MemberName) \\ : \\ TAttribute< bool >(MemberName != 0) #define PROPERTY_BINDING_IMPLEMENTATION(ReturnType, MemberName)"
  },
  {
    "label": "MemberName()",
    "kind": "Method",
    "detail": "Function (\\ ReturnType K2_Gate_ # #)",
    "insertText": "MemberName()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(CanSafelyRouteEvent())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (\\ K2_Cache_ # # MemberName = TAttribute<ReturnType)",
    "insertText": "Create(MemberName ## Delegate.GetUObject(), MemberName ## Delegate.GetFunctionName()).Get()"
  },
  {
    "label": "PROPERTY_BINDING()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ return K2_Cache_ # # MemberName ; \\ } # else # define)",
    "insertText": "PROPERTY_BINDING(ReturnType, MemberName) \\ ( MemberName ## Delegate.IsBound() && !IsDesignTime() ) \\ ? \\ TAttribute< ReturnType >::Create(MemberName ## Delegate.GetUObject(), MemberName ## Delegate.GetFunctionName()) \\ : \\ TAttribute< ReturnType >(MemberName) #define BITFIELD_PROPERTY_BINDING(MemberName) \\ ( MemberName ## Delegate.IsBound() && !IsDesignTime() ) \\ ? \\ TAttribute< bool >::Create(MemberName ## Delegate.GetUObject(), MemberName ## Delegate.GetFunctionName()) \\ : \\ TAttribute< bool >(MemberName != 0) #define PROPERTY_BINDING_IMPLEMENTATION(Type, MemberName) #endif #define GAME_SAFE_OPTIONAL_BINDING(ReturnType, MemberName) PROPERTY_BINDING(ReturnType, MemberName) #define GAME_SAFE_BINDING_IMPLEMENTATION(ReturnType, MemberName) PROPERTY_BINDING_IMPLEMENTATION(ReturnType, MemberName) #define OPTIONAL_BINDING_CONVERT(ReturnType, MemberName, ConvertedType, ConversionFunction) \\ ( MemberName ## Delegate.IsBound() && !IsDesignTime() ) \\ ? \\ TAttribute< ConvertedType >::Create(TAttribute< ConvertedType >::FGetter::CreateUObject(this, &ThisClass::ConversionFunction, TAttribute< ReturnType >::Create(MemberName ## Delegate.GetUObject(), MemberName ## Delegate.GetFunctionName()))) \\ : \\ ConversionFunction(TAttribute< ReturnType >(MemberName)) UENUM()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0,Designing = 1<<0,ShowOutline = 1<<1,ExecutePreConstruct = 1<<2,Previewing = 1<<3 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EWidgetDesignFlags)"
  },
  {
    "label": "FDesignerChangedEventArgs()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR struct FDesignerChangedEventArgs { public :)",
    "insertText": "FDesignerChangedEventArgs() : bScreenPreview(false) , Size(0, 0) , DpiScale(1.0f)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} public : bool bScreenPreview ; FVector2D Size ; float DpiScale ; } ; # endif)",
    "insertText": "UCLASS(Abstract, BlueprintType, Blueprintable, CustomFieldNotify, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "UE_FIELD_NOTIFICATION_DECLARE_CLASS_DESCRIPTOR_BASE_BEGIN()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UE_FIELD_NOTIFICATION_DECLARE_CLASS_DESCRIPTOR_BASE_BEGIN(UMG_API) UE_FIELD_NOTIFICATION_DECLARE_FIELD(ToolTipText) UE_FIELD_NOTIFICATION_DECLARE_FIELD(Visibility) UE_FIELD_NOTIFICATION_DECLARE_FIELD(bIsEnabled) UE_FIELD_NOTIFICATION_DECLARE_ENUM_FIELD_BEGIN(ToolTipText) UE_FIELD_NOTIFICATION_DECLARE_ENUM_FIELD(Visibility) UE_FIELD_NOTIFICATION_DECLARE_ENUM_FIELD(bIsEnabled) UE_FIELD_NOTIFICATION_DECLARE_ENUM_FIELD_END() UE_FIELD_NOTIFICATION_DECLARE_CLASS_DESCRIPTOR_BASE_END()"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_RetVal(bool, FGetBool)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_RetVal(float, FGetFloat)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_RetVal(int32, FGetInt32)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_RetVal(FText, FGetText)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_RetVal(FSlateColor, FGetSlateColor)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_RetVal(FLinearColor, FGetLinearColor)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_RetVal(FSlateBrush, FGetSlateBrush)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_RetVal(ESlateVisibility, FGetSlateVisibility)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_RetVal(EMouseCursor::Type, FGetMouseCursor)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_RetVal(ECheckBoxState, FGetCheckBoxState)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_RetVal(UWidget*, FGetWidget)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_RetVal_OneParam(UWidget*, FGenerateWidgetForString, FString, Item)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_RetVal_OneParam(UWidget*, FGenerateWidgetForObject, UObject*, Item)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_RetVal(FEventReply, FOnReply)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_RetVal_TwoParams(FEventReply, FOnPointerEvent, FGeometry, MyGeometry, const FPointerEvent&, MouseEvent)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnWidgetStateBroadcast, UWidget* , const FWidgetStateBitfield&)"
  },
  {
    "label": "SObjectWidget()",
    "kind": "Method",
    "detail": "Function (typedef TFunctionRef<TSharedPtr<)",
    "insertText": "SObjectWidget(UUserWidget*, TSharedRef<SWidget>)"
  },
  {
    "label": "IsLockedInDesigner()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA TWeakObjectPtr<UObject> WidgetGeneratedBy ; # endif public : # if WITH_EDITOR bool)",
    "insertText": "IsLockedInDesigner()"
  },
  {
    "label": "GetRenderTransform()",
    "kind": "Method",
    "detail": "Function (bLockedInDesigner = NewLockedInDesigner ; } # endif # if UE_HAS_WIDGET_GENERATED_BY_CLASS TWeakObjectPtr<UClass> WidgetGeneratedByClass ; # endif public : const FWidgetTransform&)",
    "insertText": "GetRenderTransform()"
  },
  {
    "label": "GetRenderTransformPivot()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetRenderTransformPivot()"
  },
  {
    "label": "GetFlowDirectionPreference()",
    "kind": "Method",
    "detail": "Function (EFlowDirectionPreference)",
    "insertText": "GetFlowDirectionPreference()"
  },
  {
    "label": "SetFlowDirectionPreference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlowDirectionPreference(EFlowDirectionPreference FlowDirection)"
  },
  {
    "label": "GetToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipText()"
  },
  {
    "label": "GetToolTip()",
    "kind": "Method",
    "detail": "Function (UWidget*)",
    "insertText": "GetToolTip()"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (EMouseCursor::Type)",
    "insertText": "GetCursor()"
  },
  {
    "label": "SetVisibilityInternal()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetVisibilityInternal(ESlateVisibility InVisibility)"
  },
  {
    "label": "GetPixelSnapping()",
    "kind": "Method",
    "detail": "Function (EWidgetPixelSnapping)",
    "insertText": "GetPixelSnapping()"
  },
  {
    "label": "SetPixelSnapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPixelSnapping(EWidgetPixelSnapping InPixelSnapping)"
  },
  {
    "label": "AddFieldValueChangedDelegate()",
    "kind": "Method",
    "detail": "Function (public : FDelegateHandle)",
    "insertText": "AddFieldValueChangedDelegate(UE::FieldNotification::FFieldId InFieldId, FFieldValueChangedDelegate InNewDelegate)"
  },
  {
    "label": "RemoveFieldValueChangedDelegate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFieldValueChangedDelegate(UE::FieldNotification::FFieldId InFieldId, FDelegateHandle InHandle)"
  },
  {
    "label": "RemoveAllFieldValueChangedDelegates()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveAllFieldValueChangedDelegates(const void* InUserObject)"
  },
  {
    "label": "RemoveAllFieldValueChangedDelegates()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveAllFieldValueChangedDelegates(UE::FieldNotification::FFieldId InFieldId, const void* InUserObject)"
  },
  {
    "label": "BroadcastFieldValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastFieldValueChanged(UE::FieldNotification::FFieldId InFieldId)"
  },
  {
    "label": "TakeWidget()",
    "kind": "Method",
    "detail": "Function (public : TSharedRef<SWidget>)",
    "insertText": "TakeWidget()"
  },
  {
    "label": "TakeDerivedWidget()",
    "kind": "Method",
    "detail": "Function (template<class WidgetType = SObjectWidget> TSharedRef<WidgetType>)",
    "insertText": "TakeDerivedWidget(ConstructMethodType ConstructMethod)"
  },
  {
    "label": "TakeWidget_Private()",
    "kind": "Method",
    "detail": "Function (} private : TSharedRef<SWidget>)",
    "insertText": "TakeWidget_Private(ConstructMethodType ConstructMethod)"
  },
  {
    "label": "GetCachedWidget()",
    "kind": "Method",
    "detail": "Function (public : TSharedPtr<SWidget>)",
    "insertText": "GetCachedWidget()"
  },
  {
    "label": "IsConstructed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstructed()"
  },
  {
    "label": "GetGameInstance()",
    "kind": "Method",
    "detail": "Function (template<class TGameInstance = UGameInstance> TGameInstance*)",
    "insertText": "GetGameInstance()"
  },
  {
    "label": "GetOwningPlayer()",
    "kind": "Method",
    "detail": "Function (template<class TPlayerController = APlayerController> TPlayerController*)",
    "insertText": "GetOwningPlayer()"
  },
  {
    "label": "GetOwningLocalPlayer()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetOwningLocalPlayer()"
  },
  {
    "label": "SynchronizeProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronizeProperties()"
  },
  {
    "label": "BuildNavigation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildNavigation()"
  },
  {
    "label": "IsDesignTime()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "IsDesignTime()"
  },
  {
    "label": "SetDesignerFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDesignerFlags(EWidgetDesignFlags NewFlags)"
  },
  {
    "label": "HasAnyDesignerFlags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAnyDesignerFlags(EWidgetDesignFlags FlagsToCheck)"
  },
  {
    "label": "IsPreviewTime()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPreviewTime()"
  },
  {
    "label": "GetDisplayLabel()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetDisplayLabel()"
  },
  {
    "label": "GetCategoryName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetCategoryName()"
  },
  {
    "label": "SetCategoryName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCategoryName(const FString& InValue)"
  },
  {
    "label": "ValidateCompiledDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateCompiledDefaults(class IWidgetCompilerLog& CompileLog)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Modify(bool bAlwaysMarkDirty = true)"
  },
  {
    "label": "AddBinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddBinding(FDelegateProperty* DelegateProperty, UObject* SourceObject, const FDynamicPropertyPath& BindingPath)"
  },
  {
    "label": "RegisterPostStateListener()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterPostStateListener(const FOnWidgetStateBroadcast::FDelegate& ListenerDelegate, bool bBroadcastCurrentState = true)"
  },
  {
    "label": "UnregisterPostStateListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPostStateListener(const FDelegateHandle& ListenerDelegate)"
  },
  {
    "label": "FindBinderClassForDestination()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UPropertyBinding>)",
    "insertText": "FindBinderClassForDestination(FProperty* Property)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSave(FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "CanSafelyRoutePaint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanSafelyRoutePaint()"
  },
  {
    "label": "CanSafelyRouteCall()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "CanSafelyRouteCall()"
  },
  {
    "label": "IsGeneratedName()",
    "kind": "Method",
    "detail": "Function (} public : # if WITH_EDITOR bool)",
    "insertText": "IsGeneratedName()"
  },
  {
    "label": "GetLabelMetadata()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLabelMetadata()"
  },
  {
    "label": "GetLabelText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLabelText()"
  },
  {
    "label": "GetLabelTextWithMetadata()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLabelTextWithMetadata()"
  },
  {
    "label": "GetPaletteCategory()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetPaletteCategory()"
  },
  {
    "label": "CreatedFromPalette()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatedFromPalette()"
  },
  {
    "label": "OnCreationFromPalette()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreationFromPalette()"
  },
  {
    "label": "ConnectEditorData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConnectEditorData()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "IsVisibleInDesigner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisibleInDesigner()"
  },
  {
    "label": "SelectByDesigner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectByDesigner()"
  },
  {
    "label": "DeselectByDesigner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectByDesigner()"
  },
  {
    "label": "OnDesignerChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDesignerChanged(const FDesignerChangedEventArgs& EventArgs)"
  },
  {
    "label": "OnSelectedByDesigner()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSelectedByDesigner()"
  },
  {
    "label": "OnDeselectedByDesigner()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDeselectedByDesigner()"
  },
  {
    "label": "OnDescendantSelectedByDesigner()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDescendantSelectedByDesigner(UWidget* DescendantWidget)"
  },
  {
    "label": "OnDescendantDeselectedByDesigner()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDescendantDeselectedByDesigner(UWidget* DescendantWidget)"
  },
  {
    "label": "OnBeginEditByDesigner()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBeginEditByDesigner()"
  },
  {
    "label": "OnEndEditByDesigner()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEndEditByDesigner()"
  },
  {
    "label": "ConvertSerializedVisibilityToRuntime()",
    "kind": "Method",
    "detail": "Function (} # endif EVisibility)",
    "insertText": "ConvertSerializedVisibilityToRuntime(ESlateVisibility Input)"
  },
  {
    "label": "ConvertRuntimeToSerializedVisibility()",
    "kind": "Method",
    "detail": "Function (ESlateVisibility)",
    "insertText": "ConvertRuntimeToSerializedVisibility(const EVisibility& Input)"
  },
  {
    "label": "ConvertSerializedSizeParamToRuntime()",
    "kind": "Method",
    "detail": "Function (FSizeParam)",
    "insertText": "ConvertSerializedSizeParamToRuntime(const FSlateChildSize& Input)"
  },
  {
    "label": "FindChildContainingDescendant()",
    "kind": "Method",
    "detail": "Function (UWidget*)",
    "insertText": "FindChildContainingDescendant(UWidget* Root, UWidget* Descendant)"
  },
  {
    "label": "GetDefaultFontName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultFontName()"
  },
  {
    "label": "GetVisibilityInDesigner()",
    "kind": "Method",
    "detail": "Function (protected : # if WITH_EDITOR EVisibility)",
    "insertText": "GetVisibilityInDesigner()"
  },
  {
    "label": "IsEditorWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorWidget()"
  },
  {
    "label": "OnBindingChanged()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "OnBindingChanged(const FName& Property)"
  },
  {
    "label": "BroadcastBinaryPostStateChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastBinaryPostStateChange(const FWidgetStateBitfield& StateChange, bool bInValue)"
  },
  {
    "label": "GetSourceAssetOrClass()",
    "kind": "Method",
    "detail": "Function (protected : UObject*)",
    "insertText": "GetSourceAssetOrClass()"
  },
  {
    "label": "RebuildWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "RebuildWidget()"
  },
  {
    "label": "OnWidgetRebuilt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWidgetRebuilt()"
  },
  {
    "label": "RebuildDesignWidget()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR TSharedRef<SWidget>)",
    "insertText": "RebuildDesignWidget(TSharedRef<SWidget> Content)"
  },
  {
    "label": "CreateDesignerOutline()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateDesignerOutline(TSharedRef<SWidget> Content)"
  },
  {
    "label": "GetDisplayNameBase()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayNameBase()"
  },
  {
    "label": "UpdateRenderTransform()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "UpdateRenderTransform()"
  },
  {
    "label": "SynchronizeAccessibleData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronizeAccessibleData()"
  },
  {
    "label": "ConvertVisibility()",
    "kind": "Method",
    "detail": "Function (protected : EVisibility)",
    "insertText": "ConvertVisibility(TAttribute<ESlateVisibility> SerializedType)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ESlateVisibility SlateVisibility = SerializedType .)",
    "insertText": "Get()"
  },
  {
    "label": "ConvertFloatToOptionalFloat()",
    "kind": "Method",
    "detail": "Function (} TOptional<float>)",
    "insertText": "ConvertFloatToOptionalFloat(TAttribute<float> InFloat)"
  },
  {
    "label": "ConvertLinearColorToSlateColor()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "ConvertLinearColorToSlateColor(TAttribute<FLinearColor> InLinearColor)"
  },
  {
    "label": "SetNavigationRuleInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNavigationRuleInternal(EUINavigation Direction, EUINavigationRule Rule, FName WidgetToFocus = NAME_None, UWidget* InWidget = nullptr, FCustomWidgetNavigationDelegate InCustomDelegate = FCustomWidgetNavigationDelegate())"
  },
  {
    "label": "GetAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY TSharedPtr<SWidget>)",
    "insertText": "GetAccessibleWidget()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) UMG_API void VerifySynchronizeProperties()"
  },
  {
    "label": "VerifySynchronizeProperties()",
    "kind": "Method",
    "detail": "Function (bool bRoutedSynchronizeProperties ; # else void)",
    "insertText": "VerifySynchronizeProperties()"
  },
  {
    "label": "PROPERTY_BINDING_IMPLEMENTATION()",
    "kind": "Method",
    "detail": "Function (} # endif private :)",
    "insertText": "PROPERTY_BINDING_IMPLEMENTATION(FText, ToolTipText)"
  },
  {
    "label": "PROPERTY_BINDING_IMPLEMENTATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PROPERTY_BINDING_IMPLEMENTATION(bool, bIsEnabled)"
  },
  {
    "label": "PROPERTY_BINDING_IMPLEMENTATION()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "PROPERTY_BINDING_IMPLEMENTATION(FText, AccessibleText)"
  },
  {
    "label": "PROPERTY_BINDING_IMPLEMENTATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PROPERTY_BINDING_IMPLEMENTATION(FText, AccessibleSummaryText)"
  }
]