[
  {
    "label": "CallHelpers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallHelpers"
  },
  {
    "label": "UntypedFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UntypedFunction"
  },
  {
    "label": "TrivialUntypedFunctionArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TrivialUntypedFunctionArgs"
  },
  {
    "label": "NontrivialUntypedFunctionArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NontrivialUntypedFunctionArgs"
  },
  {
    "label": "FunctionPointerUntypedFunctionArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FunctionPointerUntypedFunctionArgs"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_UNTYPED_FUNCTION_H_ # define RTC_BASE_UNTYPED_FUNCTION_H_ # include<cstddef> # include<cstring> # include<memory> # include<type_traits> # include<utility> # include \" rtc_base / system / assume . h \" namespace webrtc { namespace webrtc_function_impl { using FunVoid =)",
    "insertText": "void()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (enum : size_t { kInlineStorageWords = 4 } ; union VoidUnion { void* void_ptr ; FunVoid* fun_ptr ; std::aligned_storage<kInlineStorageWords*)",
    "insertText": "sizeof(uintptr_t)"
  },
  {
    "label": "InlineStorageSize()",
    "kind": "Method",
    "detail": "Function (} ; template<T> size_t)",
    "insertText": "InlineStorageSize()"
  },
  {
    "label": "RetT()",
    "kind": "Method",
    "detail": "Function (} template<T> struct CallHelpers ; template<RetT,. . . ArgT> struct CallHelpers<)",
    "insertText": "RetT(ArgT...)"
  },
  {
    "label": "RetT()",
    "kind": "Method",
    "detail": "Function (using return_type = RetT ; using function_type =)",
    "insertText": "RetT(VoidUnion*, ArgT...)"
  },
  {
    "label": "CallVoidPtr()",
    "kind": "Method",
    "detail": "Function (template<F> RetT)",
    "insertText": "CallVoidPtr(VoidUnion* vu, ArgT... args)"
  },
  {
    "label": "CallFunPtr()",
    "kind": "Method",
    "detail": "Function (} RetT)",
    "insertText": "CallFunPtr(VoidUnion* vu, ArgT... args)"
  },
  {
    "label": "CallInlineStorage()",
    "kind": "Method",
    "detail": "Function (} template<F> RetT)",
    "insertText": "CallInlineStorage(VoidUnion* vu, ArgT... args)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} } ; } class UntypedFunction final { public : enum : size_t { kInlineStorageSize =)",
    "insertText": "sizeof(webrtc_function_impl::VoidUnion::inline_storage)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (template<size_t N> struct TrivialUntypedFunctionArgs {)",
    "insertText": "static_assert(N >= 1, \"\")"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "alignas(std::max_align_t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (webrtc_function_impl::FunVoid* call ; } ; struct NontrivialUntypedFunctionArgs { void* void_ptr ; webrtc_function_impl::FunVoid* call ;)",
    "insertText": "void(*del)(webrtc_function_impl::VoidUnion*)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} ; struct FunctionPointerUntypedFunctionArgs { webrtc_function_impl::FunVoid* fun_ptr ; webrtc_function_impl::FunVoid* call ; } ; template<Signature,F,F_deref = std::remove_reference<F>::type,std::enable_if<! std::is_function<std::remove_pointer<F_deref>::type>::value&& ! std::is_same<std::nullptr_t,std::remove_cv<F>::type>::value&& ! std::is_same<UntypedFunction,std::remove_cv<F_deref>::type>::value&& std::is_trivially_move_constructible<F_deref>::value&& std::is_trivially_destructible<F_deref>::value&&)",
    "insertText": "sizeof(F_deref) <= kInlineStorageSize>::type* = nullptr, size_t InlineSize = webrtc_function_impl::InlineStorageSize<F_deref>()> static TrivialUntypedFunctionArgs<InlineSize> PrepareArgs(F&& f)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (TrivialUntypedFunctionArgs<InlineSize> args ;)",
    "insertText": "new(&args.inline_storage) F_deref(std::forward<F>(f))"
  },
  {
    "label": "FunVoid()",
    "kind": "Method",
    "detail": "Function (args . call = reinterpret_cast<)",
    "insertText": "FunVoid(webrtc_function_impl::CallHelpers< Signature>::template CallInlineStorage<F_deref>)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (webrtc_function_impl::VoidUnion vu ;)",
    "insertText": "memcpy(&vu.inline_storage, args.inline_storage, sizeof(args.inline_storage))"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} template<Signature,F,F_deref = std::remove_reference<F>::type,std::enable_if<! std::is_function<std::remove_pointer<F_deref>::type>::value&& ! std::is_same<std::nullptr_t,std::remove_cv<F>::type>::value&& ! std::is_same<UntypedFunction,std::remove_cv<F_deref>::type)",
    "insertText": "value(std::is_trivially_move_constructible<F_deref>::value && std::is_trivially_destructible<F_deref>::value && sizeof(F_deref) <= kInlineStorageSize)>::type* = nullptr> static NontrivialUntypedFunctionArgs PrepareArgs(F&& f)"
  },
  {
    "label": "F_deref()",
    "kind": "Method",
    "detail": "Function (NontrivialUntypedFunctionArgs args ; args . void_ptr = new)",
    "insertText": "F_deref(std::forward<F>(f))"
  },
  {
    "label": "FunVoid()",
    "kind": "Method",
    "detail": "Function (args . call = reinterpret_cast<)",
    "insertText": "FunVoid(webrtc_function_impl::CallHelpers<Signature>::template CallVoidPtr< F_deref>)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (args . del = static_cast<)",
    "insertText": "void(*)(webrtc_function_impl::VoidUnion*)>( [](webrtc_function_impl::VoidUnion* vu) { RTC_ASSUME(vu->void_ptr != nullptr); delete reinterpret_cast<F_deref*>(vu->void_ptr); })"
  },
  {
    "label": "UntypedFunction()",
    "kind": "Method",
    "detail": "Function (webrtc_function_impl::VoidUnion vu ; vu . void_ptr = args . void_ptr ; return)",
    "insertText": "UntypedFunction(vu, args.call, args.del)"
  },
  {
    "label": "PrepareArgs()",
    "kind": "Method",
    "detail": "Function (} template<Signature> FunctionPointerUntypedFunctionArgs)",
    "insertText": "PrepareArgs(Signature* f)"
  },
  {
    "label": "FunVoid()",
    "kind": "Method",
    "detail": "Function (FunctionPointerUntypedFunctionArgs args ; args . fun_ptr = reinterpret_cast<)",
    "insertText": "FunVoid(f)"
  },
  {
    "label": "FunVoid()",
    "kind": "Method",
    "detail": "Function (args . call = reinterpret_cast<)",
    "insertText": "FunVoid(webrtc_function_impl::CallHelpers<Signature>::CallFunPtr)"
  },
  {
    "label": "UntypedFunction()",
    "kind": "Method",
    "detail": "Function (webrtc_function_impl::VoidUnion vu ; vu . fun_ptr = args . fun_ptr ; return)",
    "insertText": "UntypedFunction(vu, args.fun_ptr == nullptr ? nullptr : args.call, nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} template<Signature,F> UntypedFunction)",
    "insertText": "Create(F&& f)"
  },
  {
    "label": "UntypedFunction()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UntypedFunction() : call_(nullptr), delete_(nullptr)"
  },
  {
    "label": "UntypedFunction()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UntypedFunction(std::nullptr_t) : call_(nullptr), delete_(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} UntypedFunction&)",
    "insertText": "operator(std::nullptr_t)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (call_ = nullptr ;)",
    "insertText": "if(delete_)"
  },
  {
    "label": "delete_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "delete_(&f_)"
  },
  {
    "label": "UntypedFunction()",
    "kind": "Method",
    "detail": "Function (delete_ = nullptr ; } return* this ; })",
    "insertText": "UntypedFunction(const UntypedFunction&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UntypedFunction&)",
    "insertText": "operator(const UntypedFunction&)"
  },
  {
    "label": "UntypedFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UntypedFunction(UntypedFunction&& other) : f_(other.f_), call_(other.call_), delete_(other.delete_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (other . delete_ = nullptr ; } UntypedFunction&)",
    "insertText": "operator(UntypedFunction&& other)"
  },
  {
    "label": "UntypedFunction()",
    "kind": "Method",
    "detail": "Function (} f_ = other . f_ ; call_ = other . call_ ; delete_ = other . delete_ ; other . delete_ = nullptr ; return* this ; } ~)",
    "insertText": "UntypedFunction()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "swap(UntypedFunction& a, UntypedFunction& b)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (using std::swap ;)",
    "insertText": "swap(a.f_, b.f_)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(a.call_, b.call_)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(a.delete_, b.delete_)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "IsTriviallyDestructible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTriviallyDestructible()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} webrtc_function_impl::VoidUnion f_ ; webrtc_function_impl::FunVoid* call_ ;)",
    "insertText": "void(*delete_)(webrtc_function_impl::VoidUnion*)"
  }
]