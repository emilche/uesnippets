[
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_GMOCK_CALLBACK_SUPPORT_H_ # define BASE_TEST_GMOCK_CALLBACK_SUPPORT_H_ # include<functional> # include<tuple> # include<type_traits> # include<utility> # include \" base / callback . h \" # include \" base / memory / ref_counted . h \" # include \" base / memory / scoped_refptr . h \" # include \" testing / gmock / include / gmock / gmock . h \" namespace base { namespace gmock_callback_support_internal { template<size_t I,. . . Args>)",
    "insertText": "decltype(auto) get(Args&&... args)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<Callback,Tuple,size_t . . . Is>)",
    "insertText": "decltype(auto) RunImpl(Callback&& cb, Tuple&& tuple, std::index_sequence<Is...>)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<Callback,Tuple>)",
    "insertText": "decltype(auto) RunImpl(Callback&& cb, Tuple&& tuple)"
  },
  {
    "label": "RunOnceCallbackImpl()",
    "kind": "Method",
    "detail": "Function (} template<size_t I,Tuple,std::enable_if_t<std::is_copy_constructible<Tuple>::value,int> = 0> auto)",
    "insertText": "RunOnceCallbackImpl(Tuple&& tuple)"
  },
  {
    "label": "Tuple()",
    "kind": "Method",
    "detail": "Function (auto tuple_ptr = base::MakeRefCounted<base::RefCountedData<)",
    "insertText": "Tuple(std::forward<Tuple>(tuple))"
  },
  {
    "label": "RunRepeatingCallbackImpl()",
    "kind": "Method",
    "detail": "Function (} ; } template<size_t I,Tuple> auto)",
    "insertText": "RunRepeatingCallbackImpl(Tuple&& tuple)"
  },
  {
    "label": "MATCHER()",
    "kind": "Method",
    "detail": "Function (} ; } } namespace test {)",
    "insertText": "MATCHER(IsNullCallback, \"a null callback\")"
  },
  {
    "label": "MATCHER()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MATCHER(IsNotNullCallback, \"a non-null callback\")"
  },
  {
    "label": "ACTION_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_P(RunClosure, closure)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (closure .)",
    "insertText": "Run()"
  },
  {
    "label": "RunOnceClosure()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "RunOnceClosure(base::OnceClosure cb)"
  },
  {
    "label": "RefCountedOnceClosure()",
    "kind": "Method",
    "detail": "Function (using RefCountedOnceClosure = base::RefCountedData<base::OnceClosure> ; scoped_refptr<RefCountedOnceClosure> copyable_cb = base::MakeRefCounted<)",
    "insertText": "RefCountedOnceClosure(std::move(cb))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(copyable_cb->data).Run()"
  },
  {
    "label": "RunClosure()",
    "kind": "Method",
    "detail": "Function (} ; } template<size_t I> auto)",
    "insertText": "RunClosure()"
  },
  {
    "label": "RunOnceClosure()",
    "kind": "Method",
    "detail": "Function (} ; } template<size_t I> auto)",
    "insertText": "RunOnceClosure()"
  },
  {
    "label": "RunOnceCallback()",
    "kind": "Method",
    "detail": "Function (} ; } template<size_t I,. . . RunArgs> auto)",
    "insertText": "RunOnceCallback(RunArgs&&... run_args)"
  },
  {
    "label": "RunCallback()",
    "kind": "Method",
    "detail": "Function (} template<size_t I,. . . RunArgs> auto)",
    "insertText": "RunCallback(RunArgs&&... run_args)"
  }
]