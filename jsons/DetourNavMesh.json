[
  {
    "label": "dtMeshTile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtMeshTile"
  },
  {
    "label": "dtTileFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "dtTileFlags"
  },
  {
    "label": "dtStraightPathFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "dtStraightPathFlags"
  },
  {
    "label": "dtStraightPathOptions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "dtStraightPathOptions"
  },
  {
    "label": "dtPolyTypes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "dtPolyTypes"
  },
  {
    "label": "dtPoly",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtPoly"
  },
  {
    "label": "dtPolyDetail",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtPolyDetail"
  },
  {
    "label": "dtLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtLink"
  },
  {
    "label": "dtBVNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtBVNode"
  },
  {
    "label": "dtOffMeshSegmentConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtOffMeshSegmentConnection"
  },
  {
    "label": "dtOffMeshConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtOffMeshConnection"
  },
  {
    "label": "dtCluster",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtCluster"
  },
  {
    "label": "dtClusterLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtClusterLink"
  },
  {
    "label": "dtMeshHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtMeshHeader"
  },
  {
    "label": "dtNavMeshResParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtNavMeshResParams"
  },
  {
    "label": "dtNavMeshParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtNavMeshParams"
  },
  {
    "label": "dtNavMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtNavMesh"
  },
  {
    "label": "FConnectingPolyData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConnectingPolyData"
  },
  {
    "label": "ReadTilesHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReadTilesHelper"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# ifndef DETOURNAVMESH_H # define DETOURNAVMESH_H # include \" CoreMinimal . h \" # include \" Detour / DetourAlloc . h \" # include \" Detour / DetourStatus . h \" # include \" DetourLargeWorldCoordinates . h \" # include \" Logging / LogMacros . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogDetour, Log, All)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef USE_64BIT_ADDRESS # define USE_64BIT_ADDRESS 1 # endif # if USE_64BIT_ADDRESS # if)",
    "insertText": "defined(__LP64__)"
  },
  {
    "label": "DT_CONNECTION_INTERNAL()",
    "kind": "Method",
    "detail": "Function (# else # include<stdint . h> typedef uint64_t UEType_uint64 ; # endif typedef UEType_uint64 dtPolyRef ; typedef UEType_uint64 dtTileRef ; typedef UEType_uint64 dtClusterRef ; # else typedef unsigned int dtPolyRef ; typedef unsigned int dtTileRef ; typedef unsigned int dtClusterRef ; # endif const int DT_VERTS_PER_POLYGON = 6 ; const int DT_NAVMESH_VERSION = 7 ; const int DT_NAVMESH_STATE_MAGIC = ' D '<<2 4 | ' N '<<1 6 | ' M '<<8 | ' S ' ; const int DT_NAVMESH_STATE_VERSION = 1 ; const unsigned short DT_EXT_LINK = 0 x8000 ; const unsigned int DT_NULL_LINK = 0 xffffffff ; const unsigned char DT_OFFMESH_CON_BIDIR = 0 x01 ; const unsigned char DT_OFFMESH_CON_POINT = 0 x02 ; const unsigned char DT_OFFMESH_CON_SEGMENT = 0 x04 ; const unsigned char DT_OFFMESH_CON_CHEAPAREA = 0 x08 ; const unsigned char DT_OFFMESH_CON_GENERATED = 0 x10 ; const int DT_MAX_AREAS = 6 4 ; const int DT_MIN_SALT_BITS = 5 ; const int DT_SALT_BASE = 1 ; const int DT_RESOLUTION_COUNT = 3 ; # if WITH_NAVMESH_SEGMENT_LINKS const int DT_MAX_OFFMESH_SEGMENT_PARTS = 4 ; const int DT_INVALID_SEGMENT_PART = 0 xffff ; # endif const unsigned char)",
    "insertText": "DT_CONNECTION_INTERNAL(1 << 7)"
  },
  {
    "label": "DT_LINK_FLAG_OFFMESH_CON()",
    "kind": "Method",
    "detail": "Function (const unsigned char)",
    "insertText": "DT_LINK_FLAG_OFFMESH_CON(1 << 6)"
  },
  {
    "label": "DT_LINK_FLAG_OFFMESH_CON_BIDIR()",
    "kind": "Method",
    "detail": "Function (const unsigned char)",
    "insertText": "DT_LINK_FLAG_OFFMESH_CON_BIDIR(1 << 5)"
  },
  {
    "label": "DT_LINK_FLAG_OFFMESH_CON_BACKTRACKER()",
    "kind": "Method",
    "detail": "Function (const unsigned char)",
    "insertText": "DT_LINK_FLAG_OFFMESH_CON_BACKTRACKER(1 << 4)"
  },
  {
    "label": "DT_LINK_FLAG_OFFMESH_CON_ENABLED()",
    "kind": "Method",
    "detail": "Function (const unsigned char)",
    "insertText": "DT_LINK_FLAG_OFFMESH_CON_ENABLED(1 << 3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (const unsigned char DT_LINK_FLAG_SIDE_MASK = 7 ; # if WITH_NAVMESH_CLUSTER_LINKS const unsigned char DT_CLINK_VALID_FWD = 0 x01 ; const unsigned char DT_CLINK_VALID_BCK = 0 x02 ; const unsigned int DT_CLINK_FIRST = 0 x80000000 ; # endif struct dtMeshTile ; typedef)",
    "insertText": "void(dtStatsPostAddTileFunc)(const dtMeshTile& TileAdd)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(dtStatsPreRemoveTileFunc)(const dtMeshTile& tileRemove)"
  },
  {
    "label": "dtStatsSetCustom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtStatsSetCustom(dtStatsPostAddTileFunc* addFunc, dtStatsPreRemoveTileFunc* removeFunc)"
  },
  {
    "label": "setArea()",
    "kind": "Method",
    "detail": "Function (enum dtTileFlags { DT_TILE_FREE_DATA = 0 x01,} ; enum dtStraightPathFlags { DT_STRAIGHTPATH_START = 0 x01,DT_STRAIGHTPATH_END = 0 x02,DT_STRAIGHTPATH_OFFMESH_CONNECTION = 0 x04,} ; enum dtStraightPathOptions { DT_STRAIGHTPATH_AREA_CROSSINGS = 0 x01,DT_STRAIGHTPATH_ALL_CROSSINGS = 0 x02,} ; enum dtPolyTypes { DT_POLYTYPE_GROUND = 0,DT_POLYTYPE_OFFMESH_POINT = 1,# if WITH_NAVMESH_SEGMENT_LINKS DT_POLYTYPE_OFFMESH_SEGMENT = 2,# endif } ; struct dtPoly { unsigned int firstLink ; unsigned short verts [ DT_VERTS_PER_POLYGON ] ; unsigned short neis [ DT_VERTS_PER_POLYGON ] ; unsigned short flags ; unsigned char vertCount ; unsigned char areaAndtype ; void)",
    "insertText": "setArea(unsigned char a)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (areaAndtype = static_cast<unsigned)",
    "insertText": "char((areaAndtype & 0xc0) | (a & 0x3f))"
  },
  {
    "label": "setType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setType(unsigned char t)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (areaAndtype = static_cast<unsigned)",
    "insertText": "char((areaAndtype & 0x3f) | (t << 6))"
  },
  {
    "label": "getArea()",
    "kind": "Method",
    "detail": "Function (} unsigned char)",
    "insertText": "getArea()"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flags((conFlags & DT_OFFMESH_CON_BIDIR) ? 0x80 : 0)"
  },
  {
    "label": "getBiDirectional()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "getBiDirectional()"
  },
  {
    "label": "setFlags()",
    "kind": "Method",
    "detail": "Function (} } ; # endif struct dtOffMeshConnection { dtReal pos [ 6 ] ; dtReal rad ; dtReal height ; unsigned long long int userId ; unsigned short poly ; unsigned char side ; unsigned char flags ; void)",
    "insertText": "setFlags(unsigned char conTypeFlags)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flags((conTypeFlags & DT_OFFMESH_CON_BIDIR) ? 0x80 : 0) | ((conTypeFlags & DT_OFFMESH_CON_CHEAPAREA) ? 0x40 : 0) | ((conTypeFlags & DT_OFFMESH_CON_GENERATED) ? 0x20 : 0)"
  },
  {
    "label": "getSnapToCheapestArea()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "getSnapToCheapestArea()"
  },
  {
    "label": "getIsGenerated()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "getIsGenerated()"
  },
  {
    "label": "dtNavMesh()",
    "kind": "Method",
    "detail": "Function (} } ; # if WITH_NAVMESH_CLUSTER_LINKS struct dtCluster { dtReal center [ 3 ] ; unsigned int firstLink ; unsigned int numLinks ; } ; struct dtClusterLink { dtClusterRef ref ; unsigned int next ; unsigned char flags ; } ; # endif struct dtMeshHeader { unsigned short version ; unsigned short layer ; unsigned short polyCount ; unsigned short vertCount ; int x ; int y ; unsigned short maxLinkCount ; unsigned short detailMeshCount ; unsigned short detailVertCount ; unsigned short detailTriCount ; unsigned short bvNodeCount ; unsigned short offMeshConCount ; unsigned short offMeshBase ; # if WITH_NAVMESH_SEGMENT_LINKS unsigned short offMeshSegConCount ; unsigned short offMeshSegPolyBase ; unsigned short offMeshSegVertBase ; # endif # if WITH_NAVMESH_CLUSTER_LINKS unsigned short clusterCount ; # endif unsigned char resolution ; dtReal bmin [ 3 ] ; dtReal bmax [ 3 ] ; } ; struct dtMeshTile { unsigned int salt ; unsigned int linksFreeList ; dtMeshHeader* header ; dtPoly* polys ; dtReal* verts ; dtLink* links ; dtPolyDetail* detailMeshes ; dtReal* detailVerts ; unsigned char* detailTris ; dtBVNode* bvTree ; dtOffMeshConnection* offMeshCons ; unsigned char* data ; int dataSize ; int flags ; dtMeshTile* next ; # if WITH_NAVMESH_SEGMENT_LINKS dtOffMeshSegmentConnection* offMeshSeg ; # endif # if WITH_NAVMESH_CLUSTER_LINKS dtCluster* clusters ; unsigned short* polyClusters ; dtChunkArray<dtClusterLink,DT_ALLOC_PERM_TILE_DYNLINK_CLUSTER> dynamicLinksC ; # endif dtChunkArray<dtLink,DT_ALLOC_PERM_TILE_DYNLINK_OFFMESH> dynamicLinksO ; unsigned int dynamicFreeListO ; # if WITH_NAVMESH_CLUSTER_LINKS unsigned int dynamicFreeListC ; # endif } ; struct dtNavMeshResParams { dtReal bvQuantFactor ; } ; struct dtNavMeshParams { dtReal walkableHeight ; dtReal walkableRadius ; dtReal walkableClimb ; dtNavMeshResParams resolutionParams [ DT_RESOLUTION_COUNT ] ; dtReal orig [ 3 ] ; dtReal tileWidth ; dtReal tileHeight ; int maxTiles ; int maxPolys ; } ; class dtNavMesh { public :)",
    "insertText": "dtNavMesh()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "init(const dtNavMeshParams* params)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "init(unsigned char* data, const int dataSize, const int flags)"
  },
  {
    "label": "getParams()",
    "kind": "Method",
    "detail": "Function (const dtNavMeshParams*)",
    "insertText": "getParams()"
  },
  {
    "label": "addTile()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "addTile(unsigned char* data, int dataSize, int flags, dtTileRef lastRef, dtTileRef* result)"
  },
  {
    "label": "removeTile()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "removeTile(dtTileRef ref, unsigned char** data, int* dataSize)"
  },
  {
    "label": "calcTileLoc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "calcTileLoc(const dtReal* pos, int* tx, int* ty)"
  },
  {
    "label": "isTileLocInValidRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isTileLocInValidRange(const dtReal* pos)"
  },
  {
    "label": "getTileAt()",
    "kind": "Method",
    "detail": "Function (const dtMeshTile*)",
    "insertText": "getTileAt(const int x, const int y, const int layer)"
  },
  {
    "label": "getTileCountAt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getTileCountAt(const int x, const int y)"
  },
  {
    "label": "getTilesAt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getTilesAt(const int x, const int y, dtMeshTile const** tiles, const int maxTiles)"
  },
  {
    "label": "getTileRefAt()",
    "kind": "Method",
    "detail": "Function (dtTileRef)",
    "insertText": "getTileRefAt(int x, int y, int layer)"
  },
  {
    "label": "getTileRef()",
    "kind": "Method",
    "detail": "Function (dtTileRef)",
    "insertText": "getTileRef(const dtMeshTile* tile)"
  },
  {
    "label": "getTileByRef()",
    "kind": "Method",
    "detail": "Function (const dtMeshTile*)",
    "insertText": "getTileByRef(dtTileRef ref)"
  },
  {
    "label": "getMaxTiles()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getMaxTiles()"
  },
  {
    "label": "getTile()",
    "kind": "Method",
    "detail": "Function (const dtMeshTile*)",
    "insertText": "getTile(int i)"
  },
  {
    "label": "getTileAndPolyByRef()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "getTileAndPolyByRef(const dtPolyRef ref, const dtMeshTile** tile, const dtPoly** poly)"
  },
  {
    "label": "getTileAndPolyByRefUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getTileAndPolyByRefUnsafe(const dtPolyRef ref, const dtMeshTile** tile, const dtPoly** poly)"
  },
  {
    "label": "isValidPolyRef()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValidPolyRef(dtPolyRef ref)"
  },
  {
    "label": "getPolyRefBase()",
    "kind": "Method",
    "detail": "Function (dtPolyRef)",
    "insertText": "getPolyRefBase(const dtMeshTile* tile)"
  },
  {
    "label": "getClusterRefBase()",
    "kind": "Method",
    "detail": "Function (dtClusterRef)",
    "insertText": "getClusterRefBase(const dtMeshTile* tile)"
  },
  {
    "label": "getOffMeshConnectionPolyEndPoints()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "getOffMeshConnectionPolyEndPoints(dtPolyRef prevRef, dtPolyRef polyRef, const dtReal* currentPos, dtReal* startPos, dtReal* endPos)"
  },
  {
    "label": "getOffMeshConnectionByRef()",
    "kind": "Method",
    "detail": "Function (const dtOffMeshConnection*)",
    "insertText": "getOffMeshConnectionByRef(dtPolyRef ref)"
  },
  {
    "label": "updateOffMeshConnectionByUserId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateOffMeshConnectionByUserId(unsigned long long int userId, unsigned char newArea, unsigned short newFlags)"
  },
  {
    "label": "getOffMeshSegmentConnectionByRef()",
    "kind": "Method",
    "detail": "Function (# if WITH_NAVMESH_SEGMENT_LINKS const dtOffMeshSegmentConnection*)",
    "insertText": "getOffMeshSegmentConnectionByRef(dtPolyRef ref)"
  },
  {
    "label": "updateOffMeshSegmentConnectionByUserId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateOffMeshSegmentConnectionByUserId(unsigned int userId, unsigned char newArea, unsigned short newFlags)"
  },
  {
    "label": "setPolyFlags()",
    "kind": "Method",
    "detail": "Function (# endif dtStatus)",
    "insertText": "setPolyFlags(dtPolyRef ref, unsigned short flags)"
  },
  {
    "label": "getPolyFlags()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "getPolyFlags(dtPolyRef ref, unsigned short* resultFlags)"
  },
  {
    "label": "setPolyArea()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "setPolyArea(dtPolyRef ref, unsigned char area)"
  },
  {
    "label": "getPolyArea()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "getPolyArea(dtPolyRef ref, unsigned char* resultArea)"
  },
  {
    "label": "getTileStateSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getTileStateSize(const dtMeshTile* tile)"
  },
  {
    "label": "storeTileState()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "storeTileState(const dtMeshTile* tile, unsigned char* data, const int maxDataSize)"
  },
  {
    "label": "restoreTileState()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "restoreTileState(dtMeshTile* tile, const unsigned char* data, const int maxDataSize)"
  },
  {
    "label": "encodePolyId()",
    "kind": "Method",
    "detail": "Function (dtPolyRef)",
    "insertText": "encodePolyId(unsigned int salt, unsigned int it, unsigned int ip)"
  },
  {
    "label": "decodePolyId()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "decodePolyId(dtPolyRef ref, unsigned int& salt, unsigned int& it, unsigned int& ip)"
  },
  {
    "label": "saltMask()",
    "kind": "Method",
    "detail": "Function (const dtPolyRef)",
    "insertText": "saltMask((dtPolyRef)1<<m_saltBits)"
  },
  {
    "label": "tileMask()",
    "kind": "Method",
    "detail": "Function (const dtPolyRef)",
    "insertText": "tileMask((dtPolyRef)1<<m_tileBits)"
  },
  {
    "label": "polyMask()",
    "kind": "Method",
    "detail": "Function (const dtPolyRef)",
    "insertText": "polyMask((dtPolyRef)1<<m_polyBits)"
  },
  {
    "label": "salt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "salt(unsigned int)((ref >> (m_polyBits+m_tileBits)) & saltMask)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "it(unsigned int)((ref >> m_polyBits) & tileMask)"
  },
  {
    "label": "ip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ip(unsigned int)(ref & polyMask)"
  },
  {
    "label": "decodePolyIdSalt()",
    "kind": "Method",
    "detail": "Function (} unsigned int)",
    "insertText": "decodePolyIdSalt(dtPolyRef ref)"
  },
  {
    "label": "decodePolyIdTile()",
    "kind": "Method",
    "detail": "Function (} unsigned int)",
    "insertText": "decodePolyIdTile(dtPolyRef ref)"
  },
  {
    "label": "decodePolyIdPoly()",
    "kind": "Method",
    "detail": "Function (} unsigned int)",
    "insertText": "decodePolyIdPoly(dtPolyRef ref)"
  },
  {
    "label": "decodeClusterIdTile()",
    "kind": "Method",
    "detail": "Function (} unsigned int)",
    "insertText": "decodeClusterIdTile(dtClusterRef ref)"
  },
  {
    "label": "decodeClusterIdCluster()",
    "kind": "Method",
    "detail": "Function (} # if WITH_NAVMESH_CLUSTER_LINKS unsigned int)",
    "insertText": "decodeClusterIdCluster(dtClusterRef ref)"
  },
  {
    "label": "applyWorldOffset()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "applyWorldOffset(const dtReal* offset)"
  },
  {
    "label": "getLink()",
    "kind": "Method",
    "detail": "Function (dtLink&)",
    "insertText": "getLink(dtMeshTile* tile, unsigned int linkIdx)"
  },
  {
    "label": "getLink()",
    "kind": "Method",
    "detail": "Function (} const dtLink&)",
    "insertText": "getLink(const dtMeshTile* tile, unsigned int linkIdx)"
  },
  {
    "label": "getClusterLink()",
    "kind": "Method",
    "detail": "Function (} # if WITH_NAVMESH_CLUSTER_LINKS dtClusterLink&)",
    "insertText": "getClusterLink(dtMeshTile* tile, unsigned int linkIdx)"
  },
  {
    "label": "isEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isEmpty()"
  },
  {
    "label": "getSaltBits()",
    "kind": "Method",
    "detail": "Function (} unsigned int)",
    "insertText": "getSaltBits()"
  },
  {
    "label": "getNeighbourTilesCountAt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getNeighbourTilesCountAt(const int x, const int y, const int side)"
  },
  {
    "label": "getNeighbourCoords()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getNeighbourCoords(const int x, const int y, const int side, int& outX, int& outY)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (outX = x ; outY = y ;)",
    "insertText": "switch(side)"
  },
  {
    "label": "getWalkableHeight()",
    "kind": "Method",
    "detail": "Function (} dtReal)",
    "insertText": "getWalkableHeight()"
  },
  {
    "label": "getTilesAt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getTilesAt(const int x, const int y, dtMeshTile** tiles, const int maxTiles)"
  },
  {
    "label": "getNeighbourTilesAt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getNeighbourTilesAt(const int x, const int y, const int side, dtMeshTile** tiles, const int maxTiles)"
  },
  {
    "label": "findConnectingPolys()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "findConnectingPolys(const dtReal* va, const dtReal* vb, const dtMeshTile* fromTile, int fromPolyIdx, const dtMeshTile* tile, int side, dtChunkArray<FConnectingPolyData>& cons)"
  },
  {
    "label": "connectIntLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "connectIntLinks(dtMeshTile* tile)"
  },
  {
    "label": "baseOffMeshLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "baseOffMeshLinks(dtMeshTile* tile)"
  },
  {
    "label": "connectExtLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "connectExtLinks(dtMeshTile* tile, dtMeshTile* target, int side, bool updateCLinks)"
  },
  {
    "label": "connectExtOffMeshLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "connectExtOffMeshLinks(dtMeshTile* tile, dtMeshTile* target, int side, bool updateCLinks)"
  },
  {
    "label": "unconnectExtLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unconnectExtLinks(dtMeshTile* tile, dtMeshTile* target)"
  },
  {
    "label": "connectClusterLink()",
    "kind": "Method",
    "detail": "Function (# if WITH_NAVMESH_CLUSTER_LINKS void)",
    "insertText": "connectClusterLink(dtMeshTile* tile0, unsigned int cluster0, dtMeshTile* tile1, unsigned int cluster1, unsigned char flags, bool bCheckExisting = true)"
  },
  {
    "label": "unconnectClusterLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unconnectClusterLinks(dtMeshTile* tile, dtMeshTile* target)"
  },
  {
    "label": "queryPolygonsInTile()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "queryPolygonsInTile(const dtMeshTile* tile, const dtReal* qmin, const dtReal* qmax, dtPolyRef* polys, const int maxPolys, bool bExcludeUnwalkable = false)"
  },
  {
    "label": "findNearestPolyInTile()",
    "kind": "Method",
    "detail": "Function (dtPolyRef)",
    "insertText": "findNearestPolyInTile(const dtMeshTile* tile, const dtReal* center, const dtReal* extents, dtReal* nearestPt, bool bExcludeUnwalkable = false)"
  },
  {
    "label": "findCheapestNearPolyInTile()",
    "kind": "Method",
    "detail": "Function (dtPolyRef)",
    "insertText": "findCheapestNearPolyInTile(const dtMeshTile* tile, const dtReal* center, const dtReal* extents, dtReal* nearestPt)"
  },
  {
    "label": "closestPointOnPolyInTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "closestPointOnPolyInTile(const dtMeshTile* tile, unsigned int ip, const dtReal* pos, dtReal* closest)"
  },
  {
    "label": "isTileLocInValidRange()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "isTileLocInValidRange(const dtReal tx, const dtReal ty)"
  },
  {
    "label": "calcTileLoc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "calcTileLoc(const dtReal* pos, dtReal* tx, dtReal* ty)"
  },
  {
    "label": "dtAllocNavMesh()",
    "kind": "Method",
    "detail": "Function (public : dtNavMeshParams m_params ; dtReal m_orig [ 3 ] ; dtReal m_tileWidth,m_tileHeight ; int m_maxTiles ; int m_tileLutSize ; int m_tileLutMask ; unsigned char m_areaCostOrder [ DT_MAX_AREAS ] ; dtMeshTile** m_posLookup ; dtMeshTile* m_nextFree ; dtMeshTile* m_tiles ; unsigned int m_saltBits ; unsigned int m_tileBits ; unsigned int m_polyBits ; } ; dtNavMesh*)",
    "insertText": "dtAllocNavMesh()"
  },
  {
    "label": "dtFreeNavMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFreeNavMesh(dtNavMesh* navmesh)"
  },
  {
    "label": "ReadTilesHelper()",
    "kind": "Method",
    "detail": "Function (struct ReadTilesHelper { const int MaxTiles = 3 2 ; dtMeshTile* Tiles [ MaxTiles ] ; int NumAllocated ; dtMeshTile** AllocatedTiles ;)",
    "insertText": "ReadTilesHelper() : NumAllocated(0), AllocatedTiles(0)"
  },
  {
    "label": "ReadTilesHelper()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ReadTilesHelper()"
  },
  {
    "label": "dtFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFree(AllocatedTiles, DT_ALLOC_TEMP)"
  },
  {
    "label": "PrepareArray()",
    "kind": "Method",
    "detail": "Function (} dtMeshTile**)",
    "insertText": "PrepareArray(int RequestedSize)"
  },
  {
    "label": "AllocatedTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocatedTiles(dtMeshTile**)dtAlloc(RequestedSize * sizeof(dtMeshTile*), DT_ALLOC_TEMP)"
  }
]