[
  {
    "label": "FScopeCycleCounterSWidget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeCycleCounterSWidget"
  },
  {
    "label": "FScopeCycleCounterSWidget()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / SWidget . h \" # if STATS struct FScopeCycleCounterSWidget : public FCycleCounter {)",
    "insertText": "FScopeCycleCounterSWidget(const SWidget* Widget)"
  },
  {
    "label": "UE_TRACE_CHANNELEXPR_IS_ENABLED()",
    "kind": "Method",
    "detail": "Function (# if CPUPROFILERTRACE_ENABLED const bool bCpuChannelEnabled =)",
    "insertText": "UE_TRACE_CHANNELEXPR_IS_ENABLED(CpuChannel)"
  },
  {
    "label": "GetStatID()",
    "kind": "Method",
    "detail": "Function (# else const bool bCpuChannelEnabled = false ; # endif bool bStarted = false ; TStatId WidgetStatId = Widget ->)",
    "insertText": "GetStatID(bCpuChannelEnabled)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(WidgetStatId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bStarted = true ; } # if CPUPROFILERTRACE_ENABLED)",
    "insertText": "if(!bStarted && bCpuChannelEnabled && WidgetStatId.IsValidStat())"
  },
  {
    "label": "StartTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTrace(WidgetStatId.GetName(), WidgetStatId.GetStatDescriptionWIDE())"
  },
  {
    "label": "FScopeCycleCounterSWidget()",
    "kind": "Method",
    "detail": "Function (} # endif } } ~)",
    "insertText": "FScopeCycleCounterSWidget()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "SCOPE_CYCLE_SWIDGET()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "SCOPE_CYCLE_SWIDGET(Object) \\ FScopeCycleCounterSWidget ANONYMOUS_VARIABLE(SlateWidgetCycleCount_) (Object)"
  },
  {
    "label": "FScopeCycleCounterSWidget()",
    "kind": "Method",
    "detail": "Function (# elif ENABLE_STATNAMEDEVENTS struct FScopeCycleCounterSWidget { FScopeCycleCounter ScopeCycleCounter ; # if CPUPROFILERTRACE_ENABLED bool bPop = false ; # endif)",
    "insertText": "FScopeCycleCounterSWidget(const SWidget* Widget) : ScopeCycleCounter(Widget ? Widget->GetStatID().StatString : nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if CPUPROFILERTRACE_ENABLED)",
    "insertText": "if(GCycleStatsShouldEmitNamedEvents && UE_TRACE_CHANNELEXPR_IS_ENABLED(CpuChannel) && Widget)"
  },
  {
    "label": "GetStatID()",
    "kind": "Method",
    "detail": "Function (const TStatId StatId = Widget ->)",
    "insertText": "GetStatID()"
  },
  {
    "label": "OutputBeginDynamicEvent()",
    "kind": "Method",
    "detail": "Function (bPop = true ;)",
    "insertText": "OutputBeginDynamicEvent(StatId.StatString)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if CPUPROFILERTRACE_ENABLED)",
    "insertText": "if(bPop)"
  },
  {
    "label": "OutputEndEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputEndEvent()"
  }
]