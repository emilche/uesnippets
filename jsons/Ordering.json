[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "partial_ordering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "partial_ordering"
  },
  {
    "label": "weak_ordering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "weak_ordering"
  },
  {
    "label": "strong_ordering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "strong_ordering"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_CmpUnspecifiedParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_CmpUnspecifiedParam"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___COMPARE_ORDERING_H # define _LIBCPP___COMPARE_ORDERING_H # include<__config> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__one_of_v()",
    "kind": "Method",
    "detail": "Function (__less = - 1,__equiv = 0,__greater = 1 } ; enum class _LIBCPP_ENUM_VIS _NCmpResult : signed char { __unordered = - 1 2 7 } ; class partial_ordering ; class weak_ordering ; class strong_ordering ; template<class _Tp,class . . . _Args> bool)",
    "insertText": "__one_of_v(is_same_v<_Tp, _Args> || ...)"
  },
  {
    "label": "_CmpUnspecifiedParam()",
    "kind": "Method",
    "detail": "Function (struct _CmpUnspecifiedParam { _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEVAL)",
    "insertText": "_CmpUnspecifiedParam(int _CmpUnspecifiedParam::*)"
  },
  {
    "label": "_CmpUnspecifiedParam()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class = enable_if_t<! __one_of_v<_Tp,int,partial_ordering,weak_ordering,strong_ordering>>>)",
    "insertText": "_CmpUnspecifiedParam(_Tp)"
  },
  {
    "label": "partial_ordering()",
    "kind": "Method",
    "detail": "Function (} ; class partial_ordering { using _ValueT = signed char ; _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "partial_ordering(_OrdResult __v) noexcept : __value_(_ValueT(__v))"
  },
  {
    "label": "partial_ordering()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "partial_ordering(_NCmpResult __v) noexcept : __value_(_ValueT(__v))"
  },
  {
    "label": "__is_ordered()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "__is_ordered()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : const partial_ordering less ; const partial_ordering equivalent ; const partial_ordering greater ; const partial_ordering unordered ; _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator(partial_ordering, partial_ordering)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator(partial_ordering __v, _CmpUnspecifiedParam)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator(_CmpUnspecifiedParam, partial_ordering __v)"
  },
  {
    "label": "less()",
    "kind": "Method",
    "detail": "Function (} private : _ValueT __value_ ; } ; partial_ordering)",
    "insertText": "less(_OrdResult::__less)"
  },
  {
    "label": "equivalent()",
    "kind": "Method",
    "detail": "Function (partial_ordering)",
    "insertText": "equivalent(_OrdResult::__equiv)"
  },
  {
    "label": "greater()",
    "kind": "Method",
    "detail": "Function (partial_ordering)",
    "insertText": "greater(_OrdResult::__greater)"
  },
  {
    "label": "unordered()",
    "kind": "Method",
    "detail": "Function (partial_ordering)",
    "insertText": "unordered(_NCmpResult ::__unordered)"
  },
  {
    "label": "weak_ordering()",
    "kind": "Method",
    "detail": "Function (class weak_ordering { using _ValueT = signed char ; _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "weak_ordering(_OrdResult __v) noexcept : __value_(_ValueT(__v))"
  },
  {
    "label": "partial_ordering()",
    "kind": "Method",
    "detail": "Function (} public : const weak_ordering less ; const weak_ordering equivalent ; const weak_ordering greater ; _LIBCPP_HIDE_FROM_ABI operator)",
    "insertText": "partial_ordering()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator(weak_ordering, weak_ordering)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator(weak_ordering __v, _CmpUnspecifiedParam)"
  },
  {
    "label": "strong_ordering()",
    "kind": "Method",
    "detail": "Function (class strong_ordering { using _ValueT = signed char ; _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "strong_ordering(_OrdResult __v) noexcept : __value_(_ValueT(__v))"
  },
  {
    "label": "weak_ordering()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI operator)",
    "insertText": "weak_ordering()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator(strong_ordering, strong_ordering)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator(strong_ordering __v, _CmpUnspecifiedParam)"
  },
  {
    "label": "equal()",
    "kind": "Method",
    "detail": "Function (strong_ordering)",
    "insertText": "equal(_OrdResult::__equiv)"
  }
]