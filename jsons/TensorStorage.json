[
  {
    "label": "TensorStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorStorage"
  },
  {
    "label": "TensorStorage()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSORSTORAGE_H # define EIGEN_CXX11_TENSOR_TENSORSTORAGE_H # ifdef EIGEN_TENSOR_STORAGE_CTOR_PLUGIN # define EIGEN_INTERNAL_TENSOR_STORAGE_CTOR_PLUGIN EIGEN_TENSOR_STORAGE_CTOR_PLUGIN ; # else # define EIGEN_INTERNAL_TENSOR_STORAGE_CTOR_PLUGIN # endif namespace Eigen { template<T,Dimensions,int Options> class TensorStorage ; template<T,FixedDimensions,int Options_> class TensorStorage { private : const std::size_t Size = FixedDimensions::total_size ; const std::size_t MinSize = max_n_1<Size>::size ; EIGEN_ALIGN_MAX T m_data [ MinSize ] ; public : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorStorage()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T*)",
    "insertText": "data()"
  },
  {
    "label": "FixedDimensions()",
    "kind": "Method",
    "detail": "Function (const FixedDimensions* singleton_dimensions = new)",
    "insertText": "FixedDimensions()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (m_data = internal::conditional_aligned_new_auto<)",
    "insertText": "T(Options_&DontAlign)==0>(1)"
  },
  {
    "label": "TensorStorage()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEVICE_FUNC)",
    "insertText": "TensorStorage(internal::constructor_without_unaligned_array_assert) : m_data(0), m_dimensions(internal::template repeat<NumIndices_, Index>(0))"
  },
  {
    "label": "TensorStorage()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "TensorStorage(Index size, const array<Index, NumIndices_>& dimensions) : m_data(internal::conditional_aligned_new_auto<T,(Options_&DontAlign)==0>(size)), m_dimensions(dimensions)"
  },
  {
    "label": "TensorStorage()",
    "kind": "Method",
    "detail": "Function (EIGEN_INTERNAL_TENSOR_STORAGE_CTOR_PLUGIN } # if EIGEN_HAS_VARIADIC_TEMPLATES template<. . . DenseIndex> EIGEN_DEVICE_FUNC)",
    "insertText": "TensorStorage(DenseIndex... indices) : m_dimensions(indices...)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (m_data = internal::conditional_aligned_new_auto<)",
    "insertText": "T(Options_&DontAlign)==0>(internal::array_prod(m_dimensions))"
  },
  {
    "label": "TensorStorage()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_DEVICE_FUNC)",
    "insertText": "TensorStorage(const Self& other) : m_data(internal::conditional_aligned_new_auto<T,(Options_&DontAlign)==0>(internal::array_prod(other.m_dimensions))) , m_dimensions(other.m_dimensions)"
  },
  {
    "label": "smart_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "smart_copy(other.m_data, other.m_data+internal::array_prod(other.m_dimensions), m_data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Self&)",
    "insertText": "operator(const Self& other)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (Self)",
    "insertText": "tmp(other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "swap(tmp)"
  },
  {
    "label": "TensorStorage()",
    "kind": "Method",
    "detail": "Function (} return* this ; } # if EIGEN_HAS_RVALUE_REFERENCES EIGEN_DEVICE_FUNC)",
    "insertText": "TensorStorage(Self&& other) : TensorStorage()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "move(other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Self&)",
    "insertText": "operator(Self&& other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_data, other.m_data)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_dimensions, other.m_dimensions)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (internal::conditional_aligned_delete_auto<)",
    "insertText": "T(Options_&DontAlign)==0>(m_data, internal::array_prod(m_dimensions))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "swap(Self& other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_data,other.m_data)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_dimensions,other.m_dimensions)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Dimensions&)",
    "insertText": "dimensions()"
  },
  {
    "label": "array_prod()",
    "kind": "Method",
    "detail": "Function (const Index currentSz =)",
    "insertText": "array_prod(m_dimensions)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (internal::conditional_aligned_delete_auto<)",
    "insertText": "T(Options_&DontAlign)==0>(m_data, currentSz)"
  },
  {
    "label": "EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN()",
    "kind": "Method",
    "detail": "Function (} else m_data = 0 ;)",
    "insertText": "EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})"
  }
]