[
  {
    "label": "TDeinterleaveView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDeinterleaveView"
  },
  {
    "label": "TChannelIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TChannelIterator"
  },
  {
    "label": "TChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TChannel"
  },
  {
    "label": "TAutoDeinterleaveView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAutoDeinterleaveView"
  },
  {
    "label": "TChannel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" namespace Audio { template<T> class TDeinterleaveView { class TChannelIterator ; public : template<InAllocator = FDefaultAllocator> class TChannel { public : TArray<T,InAllocator>& Values ; const int32 ChannelIndex ;)",
    "insertText": "TChannel(TArray<T, InAllocator>& InValues, const int32 InChannelIndex) : Values(InValues) , ChannelIndex(InChannelIndex)"
  },
  {
    "label": "TChannelIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<InAllocator = FDefaultAllocator> class TChannelIterator { TDeinterleaveView<T> DeinterleaveView ; TArray<T,InAllocator>& ArrayToFill ; int32 ChannelIndex ; public : const int32 ChannelIndexEnd = INDEX_NONE ;)",
    "insertText": "TChannelIterator(TDeinterleaveView<T> InDeinterleaveView, TArray<T, InAllocator>& InArrayToFill, int32 InChannelIndex) : DeinterleaveView(InDeinterleaveView) , ArrayToFill(InArrayToFill) , ChannelIndex(InChannelIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ChannelIndex = ChannelIndexEnd ; } } TChannelIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ChannelIndex + + ;)",
    "insertText": "if(ChannelIndex >= DeinterleaveView.NumChannels)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ChannelIndex = ChannelIndexEnd ; } } return* this ; } bool)",
    "insertText": "operator(const TChannelIterator& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ArrayToFill .)",
    "insertText": "Reset(DeinterleaveView.NumElementsPerChannel)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (ArrayToFill .)",
    "insertText": "AddUninitialized(DeinterleaveView.NumElementsPerChannel)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} T* ArrayToFillData = ArrayToFill .)",
    "insertText": "GetData()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 InterleavedPos = ChannelIndex ;)",
    "insertText": "for(int32 OutPos = 0; OutPos < DeinterleaveView.NumElementsPerChannel; OutPos++, InterleavedPos += DeinterleaveView.NumChannels)"
  },
  {
    "label": "InAllocator()",
    "kind": "Method",
    "detail": "Function (ArrayToFillData [ OutPos ] = InterleavedData [ InterleavedPos ] ; } } return TChannel<)",
    "insertText": "InAllocator(ArrayToFill, ChannelIndex)"
  },
  {
    "label": "TDeinterleaveView()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "TDeinterleaveView(TArrayView<const T> InInterleavedArray, int32 InNumChannels) : InterleavedArray(InInterleavedArray) , NumChannels(InNumChannels) , NumElementsPerChannel(0)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (NumElementsPerChannel = InterleavedArray .)",
    "insertText": "Num()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} template<InAllocator = FDefaultAllocator> TChannelIterator<InAllocator>)",
    "insertText": "begin(TArray<T, InAllocator>& InArrayToFill)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} template<InAllocator = FDefaultAllocator> TChannelIterator<InAllocator>)",
    "insertText": "end(TArray<T, InAllocator>& InArrayToFill)"
  },
  {
    "label": "TAutoDeinterleaveView()",
    "kind": "Method",
    "detail": "Function (} private : TArrayView<const T> InterleavedArray ; int32 NumChannels ; int32 NumElementsPerChannel ; } ; template<T,InAllocator = FDefaultAllocator> class TAutoDeinterleaveView : public TDeinterleaveView<T> { TArray<T,InAllocator>& ArrayToFill ; typedef TDeinterleaveView<T>::template TChannelIterator<InAllocator> TAutoChannelIterator ; public :)",
    "insertText": "TAutoDeinterleaveView(TArrayView<const T> InInterleavedArray, TArray<T, InAllocator>& InArrayToFill, int32 InNumChannels) : TDeinterleaveView<T>(InInterleavedArray, InNumChannels) , ArrayToFill(InArrayToFill)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} TAutoChannelIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TAutoChannelIterator)",
    "insertText": "end()"
  }
]