[
  {
    "label": "FPollingState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPollingState"
  },
  {
    "label": "FEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntry"
  },
  {
    "label": "FNeedPollingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNeedPollingPolicy"
  },
  {
    "label": "FNoPollingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNoPollingPolicy"
  },
  {
    "label": "FFastArrayReplicationFragmentHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFastArrayReplicationFragmentHelper"
  },
  {
    "label": "FFastArrayReplicationFragmentBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFastArrayReplicationFragmentBase"
  },
  {
    "label": "FNativeFastArrayReplicationFragmentBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNativeFastArrayReplicationFragmentBase"
  },
  {
    "label": "CSV_DECLARE_CATEGORY_MODULE_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Iris / ReplicationSystem / ReplicationFragment . h \" # include \" Iris / Core / IrisProfiler . h \" # include \" Iris / ReplicationState / IrisFastArraySerializer . h \" # include \" Iris / ReplicationState / Private / IrisFastArraySerializerInternal . h \" # include \" Iris / ReplicationState / PropertyReplicationState . h \" # include \" Iris / ReplicationState / ReplicationStateDescriptor . h \" # include \" Net / Core / Trace / NetDebugName . h \" # include \" Net / Core / NetBitArray . h \" # include \" ProfilingDebugging / CsvProfiler . h \")",
    "insertText": "CSV_DECLARE_CATEGORY_MODULE_EXTERN(NETCORE_API, Networking)"
  },
  {
    "label": "GetPollingState()",
    "kind": "Method",
    "detail": "Function (namespace UE::Net { namespace FastArrayPollingPolicies { struct FPollingState { int32 ArrayReplicationKey = - 1 ; struct FEntry { int32 ReplicationKey = - 1 ; int32 ReplicationID = - 1 ; } ; TArray<FEntry> ItemPollData ; } ; class FNeedPollingPolicy { public : FPollingState*)",
    "insertText": "GetPollingState()"
  },
  {
    "label": "ApplyReplicatedState()",
    "kind": "Method",
    "detail": "Function (template<FastArrayType,ItemArrayType> void)",
    "insertText": "ApplyReplicatedState(FastArrayType* DstFastArray, ItemArrayType* DstWrappedArray, FastArrayType* SrcFastArray, const ItemArrayType* SrcWrappedArray, const FReplicationStateDescriptor* ArrayElementDescriptor, FReplicationStateApplyContext& Context)"
  },
  {
    "label": "InternalApplyArrayElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalApplyArrayElement(const FReplicationStateDescriptor* ArrayElementDescriptor, void* RESTRICT Dst, const void* RESTRICT Src)"
  },
  {
    "label": "InternalCopyArrayElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalCopyArrayElement(const FReplicationStateDescriptor* ArrayElementDescriptor, void* RESTRICT Dst, const void* RESTRICT Src)"
  },
  {
    "label": "InternalCompareArrayElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InternalCompareArrayElement(const FReplicationStateDescriptor* ArrayElementDescriptor, void* RESTRICT Dst, const void* RESTRICT Src)"
  },
  {
    "label": "GetFastArrayStructItemArrayMemberIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetFastArrayStructItemArrayMemberIndex(const FReplicationStateDescriptor* StructDescriptor)"
  },
  {
    "label": "CallPostReplicatedReceiveOrNot()",
    "kind": "Method",
    "detail": "Function (template<FastArrayType> TEnableIf<TModels_V<FFastArraySerializer::CPostReplicatedReceiveFuncable,FastArrayType,const FFastArraySerializer::FPostReplicatedReceiveParameters&>,void>::Type)",
    "insertText": "CallPostReplicatedReceiveOrNot(FastArrayType& ArraySerializer, int32 OldArraySize, bool bHasUnresolvedReferences)"
  },
  {
    "label": "PostReplicatedReceive()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS FFastArraySerializer::FPostReplicatedReceiveParameters PostReceivedParameters = { OldArraySize,bHasUnresolvedReferences } ; PRAGMA_ENABLE_DEPRECATION_WARNINGS ArraySerializer .)",
    "insertText": "PostReplicatedReceive(PostReceivedParameters)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (} } ; class FFastArrayReplicationFragmentBase : public FReplicationFragment { public : void)",
    "insertText": "Register(FFragmentRegistrationContext& Context, EReplicationFragmentTraits InTraits)"
  },
  {
    "label": "FFastArrayReplicationFragmentBase()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FFastArrayReplicationFragmentBase(EReplicationFragmentTraits InTraits, UObject* InOwner, const FReplicationStateDescriptor* InDescriptor, bool bValidateDescriptor = true)"
  },
  {
    "label": "CollectOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectOwner(FReplicationStateOwnerCollector* Owners)"
  },
  {
    "label": "GetFastArrayPropertyStructDescriptor()",
    "kind": "Method",
    "detail": "Function (protected : const FReplicationStateDescriptor*)",
    "insertText": "GetFastArrayPropertyStructDescriptor()"
  },
  {
    "label": "GetArrayElementDescriptor()",
    "kind": "Method",
    "detail": "Function (const FReplicationStateDescriptor*)",
    "insertText": "GetArrayElementDescriptor()"
  },
  {
    "label": "InternalDequantizeFastArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDequantizeFastArray(FNetSerializationContext& Context, uint8* RESTRICT DstExternalBuffer, const uint8* RESTRICT SrcInternalBuffer, const FReplicationStateDescriptor* FastArrayPropertyDescriptor)"
  },
  {
    "label": "InternalPartialDequantizeFastArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalPartialDequantizeFastArray(FReplicationStateApplyContext& Context, uint8* RESTRICT DstExternalBuffer, const uint8* RESTRICT SrcInternalBuffer, const FReplicationStateDescriptor* FastArrayPropertyDescriptor)"
  },
  {
    "label": "InternalDequantizeExtraProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDequantizeExtraProperties(FNetSerializationContext& Context, uint8* RESTRICT DstExternalBuffer, const uint8* RESTRICT SrcInternalBuffer, const FReplicationStateDescriptor* Descriptor)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(FStringBuilderBase& StringBuilder, const uint8* ExternalStateBuffer, const FReplicationStateDescriptor* FastArrayPropertyDescriptor)"
  },
  {
    "label": "FNativeFastArrayReplicationFragmentBase()",
    "kind": "Method",
    "detail": "Function (protected : TRefCountPtr<const FReplicationStateDescriptor> ReplicationStateDescriptor ; TUniquePtr<FPropertyReplicationState> ReplicationState ; UObject* Owner ; SIZE_T WrappedArrayOffsetRelativeFastArraySerializerProperty ; } ; class FNativeFastArrayReplicationFragmentBase : public FReplicationFragment { protected :)",
    "insertText": "FNativeFastArrayReplicationFragmentBase(EReplicationFragmentTraits InTraits, UObject* InOwner, const FReplicationStateDescriptor* InDescriptor)"
  },
  {
    "label": "ConditionalRebuildItemMap()",
    "kind": "Method",
    "detail": "Function (protected : TRefCountPtr<const FReplicationStateDescriptor> ReplicationStateDescriptor ; UObject* Owner ; SIZE_T WrappedArrayOffsetRelativeFastArraySerializerProperty ; } ; template<FastArrayType,ItemArrayType> void)",
    "insertText": "ConditionalRebuildItemMap(FastArrayType& ArraySerializer, const ItemArrayType& Items, bool bForceRebuild)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef ItemArrayType::ElementType ItemType ;)",
    "insertText": "if(bForceRebuild || ArraySerializer.ItemMap.Num() != Items.Num())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ArraySerializer . ItemMap .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const ItemType* SrcItems = Items .)",
    "insertText": "GetData()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const ItemType& Item = SrcItems [ It ] ;)",
    "insertText": "if(Item.ReplicationID == INDEX_NONE)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (continue ; } ArraySerializer . ItemMap .)",
    "insertText": "Add(Item.ReplicationID, It)"
  },
  {
    "label": "ApplyReplicatedState()",
    "kind": "Method",
    "detail": "Function (} } } template<FastArrayType,ItemArrayType> void)",
    "insertText": "ApplyReplicatedState(FastArrayType* DstArraySerializer, ItemArrayType* DstWrappedArray, FastArrayType* SrcArraySerializer, const ItemArrayType* SrcWrappedArray, const FReplicationStateDescriptor* ArrayElementDescriptor, FReplicationStateApplyContext& Context)"
  },
  {
    "label": "CSV_SCOPED_TIMING_STAT()",
    "kind": "Method",
    "detail": "Function (typedef ItemArrayType::ElementType ItemType ;)",
    "insertText": "CSV_SCOPED_TIMING_STAT(Networking, FastArray_Apply)"
  },
  {
    "label": "MakeNetBitArrayView()",
    "kind": "Method",
    "detail": "Function (const uint32* ChangeMaskData = Context . StateBufferData . ChangeMaskData ; FNetBitArrayView MemberChangeMask =)",
    "insertText": "MakeNetBitArrayView(ChangeMaskData, Context.Descriptor->ChangeMaskBitCount)"
  },
  {
    "label": "GetBit()",
    "kind": "Method",
    "detail": "Function (const FReplicationStateMemberChangeMaskDescriptor& MemberChangeMaskDescriptor = Context . Descriptor -> MemberChangeMaskDescriptors [ 0 ] ; const uint32 ChangeMaskBitOffset = MemberChangeMaskDescriptor . BitOffset + FIrisFastArraySerializer::IrisFastArrayChangeMaskBitOffset ; const uint32 ChangeMaskBitCount = MemberChangeMaskDescriptor . BitCount - FIrisFastArraySerializer::IrisFastArrayChangeMaskBitOffset ; const bool bForceRebuildItemMap = MemberChangeMask .)",
    "insertText": "GetBit(0)"
  },
  {
    "label": "ConditionalRebuildItemMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalRebuildItemMap(*DstArraySerializer, *DstWrappedArray, false)"
  },
  {
    "label": "ConditionalRebuildItemMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalRebuildItemMap(*SrcArraySerializer, *SrcWrappedArray, bForceRebuildItemMap)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 OriginalSize = DstWrappedArray ->)",
    "insertText": "Num()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<int32> RemovedIndices ; { RemovedIndices .)",
    "insertText": "Reserve(DstWrappedArray->Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 ReplicationID = DstItems [ It ] . ReplicationID ;)",
    "insertText": "if(ReplicationID != -1 && !SrcArraySerializer->ItemMap.Contains(ReplicationID))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RemovedIndices .)",
    "insertText": "Add(It)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} } } TArray<int32> AddedIndices ; TArray<int32> ModifiedIndices ; { AddedIndices .)",
    "insertText": "Reserve(SrcWrappedArray->Num())"
  },
  {
    "label": "GetBit()",
    "kind": "Method",
    "detail": "Function (const bool bIsDirty = ChangeMaskBitCount = = 0 U | | MemberChangeMask .)",
    "insertText": "GetBit((It % ChangeMaskBitCount) + ChangeMaskBitOffset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } ItemType* DstItem = nullptr ;)",
    "insertText": "if(int32* ExistingIndex = DstArraySerializer->ItemMap.Find(SrcItems[It].ReplicationID))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ModifiedIndices .)",
    "insertText": "Add(*ExistingIndex)"
  },
  {
    "label": "DstItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DstItem(*DstWrappedArray)"
  },
  {
    "label": "InternalApplyArrayElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalApplyArrayElement(ArrayElementDescriptor, DstItem, &SrcItems[It])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(SrcItems[It].ReplicationID != 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (int32 AddedIndex = DstWrappedArray ->)",
    "insertText": "Add(SrcItems[It])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DstItem -> ReplicationID = SrcItems [ It ] . ReplicationID ; AddedIndices .)",
    "insertText": "Add(AddedIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(DstItem != nullptr)"
  },
  {
    "label": "IncrementArrayReplicationKey()",
    "kind": "Method",
    "detail": "Function (DstItem -> MostRecentArrayReplicationKey = DstArraySerializer -> ArrayReplicationKey ; DstItem -> ReplicationKey + + ; } } } DstArraySerializer ->)",
    "insertText": "IncrementArrayReplicationKey()"
  },
  {
    "label": "PreReplicatedRemove()",
    "kind": "Method",
    "detail": "Function (} DstArraySerializer ->)",
    "insertText": "PreReplicatedRemove(MakeArrayView(RemovedIndices), FinalSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 AddedIndex : AddedIndices)"
  },
  {
    "label": "PostReplicatedAdd()",
    "kind": "Method",
    "detail": "Function (} DstArraySerializer ->)",
    "insertText": "PostReplicatedAdd(MakeArrayView(AddedIndices), FinalSize)"
  },
  {
    "label": "PostReplicatedChange()",
    "kind": "Method",
    "detail": "Function (} DstArraySerializer ->)",
    "insertText": "PostReplicatedChange(MakeArrayView(ModifiedIndices), FinalSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(RemovedIndices.Num() > 0)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (RemovedIndices .)",
    "insertText": "Sort()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 DeleteIndex = RemovedIndices [ i ] ;)",
    "insertText": "if(DstWrappedArray->IsValidIndex(DeleteIndex))"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (DstWrappedArray ->)",
    "insertText": "RemoveAtSwap(DeleteIndex, EAllowShrinking::No)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} } DstArraySerializer -> ItemMap .)",
    "insertText": "Empty()"
  },
  {
    "label": "CallPostReplicatedReceiveOrNot()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CallPostReplicatedReceiveOrNot(*DstArraySerializer, OriginalSize, Context.bHasUnresolvableReferences)"
  }
]