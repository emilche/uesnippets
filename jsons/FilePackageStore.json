[
  {
    "label": "FIoContainerHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoContainerHeader"
  },
  {
    "label": "FFilePackageStoreEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilePackageStoreEntry"
  },
  {
    "label": "FMountedDataRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMountedDataRange"
  },
  {
    "label": "FMountedContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMountedContainer"
  },
  {
    "label": "FEntryHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntryHandle"
  },
  {
    "label": "FPackageIdMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageIdMap"
  },
  {
    "label": "FConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstIterator"
  },
  {
    "label": "FUncookedPackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUncookedPackage"
  },
  {
    "label": "FFilePackageStoreBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilePackageStoreBackend"
  },
  {
    "label": "FEntryHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IO / PackageId . h \" # include \" IO / PackageStore . h \" # include \" Misc / PackagePath . h \" struct FIoContainerHeader ; struct FFilePackageStoreEntry ; namespace UE::FilePackageStorePrivate { struct FMountedDataRange { uint32 Begin = 0 ; uint32 End = 0 ; } ; struct FMountedContainer { FIoContainerHeader* ContainerHeader ; uint32 Order ; uint32 Sequence ; uint32 NumMountedPackages = 0 ; FMountedDataRange EntryDataRange ; } ; struct FEntryHandle { uint32 OffsetBits = 3 0 ; uint32 Offset : OffsetBits ; uint32 HasPackageIds : 1 ; uint32 HasShaderMaps : 1 ;)",
    "insertText": "FEntryHandle()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(*this)"
  },
  {
    "label": "FPackageIdMap()",
    "kind": "Method",
    "detail": "Function (} } ; class FPackageIdMap { public :)",
    "insertText": "FPackageIdMap()"
  },
  {
    "label": "FPackageIdMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageIdMap(TArray<TPair<FPackageId, FEntryHandle>>&& Pairs)"
  },
  {
    "label": "FPackageIdMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageIdMap(FPackageIdMap&& O)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "MoveTemp(O)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FPackageIdMap&)",
    "insertText": "operator(FPackageIdMap&& O)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FEntryHandle*)",
    "insertText": "Find(FPackageId Key)"
  },
  {
    "label": "GetCapacity()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCapacity()"
  },
  {
    "label": "NumSlots()",
    "kind": "Method",
    "detail": "Function (class FConstIterator ; private : uint32 MaxValues = 0 ; uint32 SlotBits = 0 ; uint32* Slots = nullptr ; uint16* Values = nullptr ; uint32)",
    "insertText": "NumSlots()"
  },
  {
    "label": "OnMounted()",
    "kind": "Method",
    "detail": "Function (} } ; struct FUncookedPackage { FName PackageName ; EPackageExtension HeaderExtension ; } ; } class FFilePackageStoreBackend : public IPackageStoreBackend { public : void)",
    "insertText": "OnMounted(TSharedRef<const FPackageStoreBackendContext>)"
  },
  {
    "label": "BeginRead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginRead()"
  },
  {
    "label": "EndRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRead()"
  },
  {
    "label": "GetPackageStoreEntry()",
    "kind": "Method",
    "detail": "Function (EPackageStoreEntryStatus)",
    "insertText": "GetPackageStoreEntry(FPackageId PackageId, FName PackageName, FPackageStoreEntry& OutPackageStoreEntry)"
  },
  {
    "label": "GetPackageRedirectInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPackageRedirectInfo(FPackageId PackageId, FName& OutSourcePackageName, FPackageId& OutRedirectedToPackageId)"
  },
  {
    "label": "Mount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mount(FIoContainerHeader* ContainerHeader, uint32 Order)"
  },
  {
    "label": "Unmount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unmount(const FIoContainerHeader* ContainerHeader)"
  },
  {
    "label": "AddUncookedPackagesFromRoot()",
    "kind": "Method",
    "detail": "Function (private : using FMountedDataRange = UE::FilePackageStorePrivate::FMountedDataRange ; using FMountedContainer = UE::FilePackageStorePrivate::FMountedContainer ; using FEntryHandle = UE::FilePackageStorePrivate::FEntryHandle ; using FPackageIdMap = UE::FilePackageStorePrivate::FPackageIdMap ; using FUncookedPackage = UE::FilePackageStorePrivate::FUncookedPackage ; FRWLock EntriesLock ; FCriticalSection UpdateLock ; TArray<FMountedContainer> MountedContainers ; TAtomic<uint32> NextSequence { 0 } ; FPackageIdMap PackageEntries ; TArray<uint32> EntryData ; TMap<FPackageId,TTuple<FName,FPackageId>> RedirectsPackageMap ; TMap<FPackageId,FName> LocalizedPackages ; bool bNeedsContainerUpdate = false ; # if WITH_EDITOR FDelegateHandle OnContentPathMountedDelegateHandle ; FDelegateHandle OnContentPathDismountedDelegateHandle ; FCriticalSection UncookedPackageRootsLock ; TSet<FString> PendingAddUncookedPackageRoots ; TSet<FString> PendingRemoveUncookedPackageRoots ; TMap<FPackageId,FUncookedPackage> UncookedPackagesMap ; TMap<FPackageId,const FFilePackageStoreEntry*> OptionalSegmentStoreEntriesMap ; bool bNeedsUncookedPackagesUpdate = false ; uint64)",
    "insertText": "AddUncookedPackagesFromRoot(const FString& RootPath)"
  },
  {
    "label": "RemoveUncookedPackagesFromRoot()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "RemoveUncookedPackagesFromRoot(const TSet<FString>& RootPath)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Update()"
  },
  {
    "label": "AddNewEntryData()",
    "kind": "Method",
    "detail": "Function (FEntryHandle)",
    "insertText": "AddNewEntryData(const FFilePackageStoreEntry& Entry)"
  },
  {
    "label": "AddOldEntryData()",
    "kind": "Method",
    "detail": "Function (FEntryHandle)",
    "insertText": "AddOldEntryData(FEntryHandle OldHandle, TConstArrayView<uint32> OldEntryData)"
  },
  {
    "label": "GetImportedPackages()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FPackageId>)",
    "insertText": "GetImportedPackages(FEntryHandle Handle)"
  },
  {
    "label": "GetShaderHashes()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FSHAHash>)",
    "insertText": "GetShaderHashes(FEntryHandle Handle)"
  }
]