[
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "MCTargetOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCTargetOptions"
  },
  {
    "label": "AsmInstrumentation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AsmInstrumentation"
  },
  {
    "label": "getABIName()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCTARGETOPTIONS_H # define LLVM_MC_MCTARGETOPTIONS_H # include<string> namespace llvm { class StringRef ; class MCTargetOptions { public : enum AsmInstrumentation { AsmInstrumentationNone,AsmInstrumentationAddress } ; bool SanitizeAddress : 1 ; bool MCRelaxAll : 1 ; bool MCNoExecStack : 1 ; bool MCFatalWarnings : 1 ; bool MCSaveTempLabels : 1 ; bool MCUseDwarfDirectory : 1 ; bool ShowMCEncoding : 1 ; bool ShowMCInst : 1 ; bool AsmVerbose : 1 ; int DwarfVersion ; StringRef)",
    "insertText": "getABIName()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "operator(const MCTargetOptions &LHS, const MCTargetOptions &RHS)"
  },
  {
    "label": "ARE_EQUAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "ARE_EQUAL(X) LHS.X == RHS.X return (ARE_EQUAL(SanitizeAddress) && ARE_EQUAL(MCRelaxAll) && ARE_EQUAL(MCNoExecStack) && ARE_EQUAL(MCFatalWarnings) && ARE_EQUAL(MCSaveTempLabels) && ARE_EQUAL(MCUseDwarfDirectory) && ARE_EQUAL(ShowMCEncoding) && ARE_EQUAL(ShowMCInst) && ARE_EQUAL(AsmVerbose) && ARE_EQUAL(DwarfVersion) && ARE_EQUAL(ABIName))"
  }
]