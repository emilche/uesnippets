[
  {
    "label": "DataRate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataRate"
  },
  {
    "label": "rtc_units_impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rtc_units_impl"
  },
  {
    "label": "BitsPerSec()",
    "kind": "Method",
    "detail": "Function (# ifndef API_UNITS_DATA_RATE_H_ # define API_UNITS_DATA_RATE_H_ # ifdef WEBRTC_UNIT_TEST # include<ostream> # endif # include<limits> # include<string> # include<type_traits> # include \" api / units / data_size . h \" # include \" api / units / frequency . h \" # include \" api / units / time_delta . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / units / unit_base . h \" namespace webrtc { class DataRate final : public rtc_units_impl::RelativeUnit<DataRate> { public : template<T> DataRate)",
    "insertText": "BitsPerSec(T value)"
  },
  {
    "label": "BytesPerSec()",
    "kind": "Method",
    "detail": "Function (} template<T> DataRate)",
    "insertText": "BytesPerSec(T value)"
  },
  {
    "label": "KilobitsPerSec()",
    "kind": "Method",
    "detail": "Function (} template<T> DataRate)",
    "insertText": "KilobitsPerSec(T value)"
  },
  {
    "label": "Infinity()",
    "kind": "Method",
    "detail": "Function (} DataRate)",
    "insertText": "Infinity()"
  },
  {
    "label": "DataRate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DataRate()"
  },
  {
    "label": "bps()",
    "kind": "Method",
    "detail": "Function (template<T = int64_t> T)",
    "insertText": "bps()"
  },
  {
    "label": "bytes_per_sec()",
    "kind": "Method",
    "detail": "Function (} template<T = int64_t> T)",
    "insertText": "bytes_per_sec()"
  },
  {
    "label": "kbps()",
    "kind": "Method",
    "detail": "Function (} template<T = int64_t> T)",
    "insertText": "kbps()"
  },
  {
    "label": "bps_or()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "bps_or(int64_t fallback_value)"
  },
  {
    "label": "kbps_or()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "kbps_or(int64_t fallback_value)"
  },
  {
    "label": "Microbits()",
    "kind": "Method",
    "detail": "Function (} private : class rtc_units_impl::UnitBase<DataRate> ; using RelativeUnit::RelativeUnit ; bool one_sided = true ; } ; namespace data_rate_impl { int64_t)",
    "insertText": "Microbits(const DataSize& size)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (int64_t kMaxBeforeConversion = std::numeric_limits<int64_t)",
    "insertText": "max()"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LE(size.bytes(), kMaxBeforeConversion)"
  },
  {
    "label": "MillibytePerSec()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "MillibytePerSec(const DataRate& size)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (int64_t kMaxBeforeConversion = std::numeric_limits<int64_t)",
    "insertText": "max() / (1000 / 8)"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LE(size.bps(), kMaxBeforeConversion)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } DataRate)",
    "insertText": "operator(const DataSize size, const TimeDelta duration)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TimeDelta)",
    "insertText": "operator(const DataSize size, const DataRate rate)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} DataSize)",
    "insertText": "operator(const DataRate rate, const TimeDelta duration)"
  },
  {
    "label": "bps()",
    "kind": "Method",
    "detail": "Function (int64_t microbits = rate .)",
    "insertText": "bps() * duration.us()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} DataSize)",
    "insertText": "operator(const TimeDelta duration, const DataRate rate)"
  },
  {
    "label": "int64_t()",
    "kind": "Method",
    "detail": "Function (int64_t millihertz = frequency . millihertz<)",
    "insertText": "int64_t()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Frequency)",
    "insertText": "operator(const DataRate rate, const DataSize size)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} DataRate)",
    "insertText": "operator(const DataSize size, const Frequency frequency)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(frequency.IsZero() || size.bytes() <= std::numeric_limits<int64_t>::max() / 8 / frequency.millihertz<int64_t>())"
  },
  {
    "label": "bytes()",
    "kind": "Method",
    "detail": "Function (int64_t millibits_per_second = size .)",
    "insertText": "bytes() * 8 * frequency.millihertz<int64_t>()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} DataRate)",
    "insertText": "operator(const Frequency frequency, const DataSize size)"
  },
  {
    "label": "ToLogString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToLogString(DataRate value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # ifdef WEBRTC_UNIT_TEST std::ostream&)",
    "insertText": "operator(std::ostream& stream, DataRate value)"
  }
]