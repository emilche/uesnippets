[
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "EEras",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EEras"
  },
  {
    "label": "GregorianCalendar()",
    "kind": "Method",
    "detail": "Function (# ifndef GREGOCAL_H # define GREGOCAL_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / calendar . h \" U_NAMESPACE_BEGIN class U_I18N_API GregorianCalendar : public Calendar { public : enum EEras { BC,AD } ;)",
    "insertText": "GregorianCalendar(UErrorCode& success)"
  },
  {
    "label": "GregorianCalendar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GregorianCalendar(TimeZone* zoneToAdopt, UErrorCode& success)"
  },
  {
    "label": "GregorianCalendar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GregorianCalendar(const TimeZone& zone, UErrorCode& success)"
  },
  {
    "label": "GregorianCalendar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GregorianCalendar(const Locale& aLocale, UErrorCode& success)"
  },
  {
    "label": "GregorianCalendar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GregorianCalendar(TimeZone* zoneToAdopt, const Locale& aLocale, UErrorCode& success)"
  },
  {
    "label": "GregorianCalendar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GregorianCalendar(const TimeZone& zone, const Locale& aLocale, UErrorCode& success)"
  },
  {
    "label": "GregorianCalendar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GregorianCalendar(int32_t year, int32_t month, int32_t date, UErrorCode& success)"
  },
  {
    "label": "GregorianCalendar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GregorianCalendar(int32_t year, int32_t month, int32_t date, int32_t hour, int32_t minute, UErrorCode& success)"
  },
  {
    "label": "GregorianCalendar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GregorianCalendar(int32_t year, int32_t month, int32_t date, int32_t hour, int32_t minute, int32_t second, UErrorCode& success)"
  },
  {
    "label": "GregorianCalendar()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GregorianCalendar()"
  },
  {
    "label": "GregorianCalendar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GregorianCalendar(const GregorianCalendar& source)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GregorianCalendar&)",
    "insertText": "operator(const GregorianCalendar& right)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Calendar*)",
    "insertText": "clone(void)"
  },
  {
    "label": "setGregorianChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGregorianChange(UDate date, UErrorCode& success)"
  },
  {
    "label": "getGregorianChange()",
    "kind": "Method",
    "detail": "Function (UDate)",
    "insertText": "getGregorianChange(void)"
  },
  {
    "label": "isLeapYear()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isLeapYear(int32_t year)"
  },
  {
    "label": "isEquivalentTo()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isEquivalentTo(const Calendar& other)"
  },
  {
    "label": "roll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "roll(EDateFields field, int32_t amount, UErrorCode& status)"
  },
  {
    "label": "roll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "roll(UCalendarDateFields field, int32_t amount, UErrorCode& status)"
  },
  {
    "label": "getActualMinimum()",
    "kind": "Method",
    "detail": "Function (# ifndef int32_t)",
    "insertText": "getActualMinimum(EDateFields field)"
  },
  {
    "label": "getActualMinimum()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getActualMinimum(EDateFields field, UErrorCode& status)"
  },
  {
    "label": "getActualMinimum()",
    "kind": "Method",
    "detail": "Function (# endif int32_t)",
    "insertText": "getActualMinimum(UCalendarDateFields field, UErrorCode &status)"
  },
  {
    "label": "getActualMaximum()",
    "kind": "Method",
    "detail": "Function (# ifndef int32_t)",
    "insertText": "getActualMaximum(EDateFields field)"
  },
  {
    "label": "getActualMaximum()",
    "kind": "Method",
    "detail": "Function (# endif int32_t)",
    "insertText": "getActualMaximum(UCalendarDateFields field, UErrorCode& status)"
  },
  {
    "label": "inDaylightTime()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "inDaylightTime(UErrorCode& status)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (public : UClassID)",
    "insertText": "getDynamicClassID(void)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getType()"
  },
  {
    "label": "internalGetEra()",
    "kind": "Method",
    "detail": "Function (protected : int32_t)",
    "insertText": "internalGetEra()"
  },
  {
    "label": "handleComputeMonthStart()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "handleComputeMonthStart(int32_t eyear, int32_t month, UBool useMonth)"
  },
  {
    "label": "handleComputeJulianDay()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "handleComputeJulianDay(UCalendarDateFields bestField)"
  },
  {
    "label": "handleGetMonthLength()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "handleGetMonthLength(int32_t extendedYear, int32_t month)"
  },
  {
    "label": "handleGetYearLength()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "handleGetYearLength(int32_t eyear)"
  },
  {
    "label": "monthLength()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "monthLength(int32_t month)"
  },
  {
    "label": "monthLength()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "monthLength(int32_t month, int32_t year)"
  },
  {
    "label": "yearLength()",
    "kind": "Method",
    "detail": "Function (# ifndef int32_t)",
    "insertText": "yearLength(int32_t year)"
  },
  {
    "label": "yearLength()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "yearLength(void)"
  },
  {
    "label": "pinDayOfMonth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pinDayOfMonth(void)"
  },
  {
    "label": "getEpochDay()",
    "kind": "Method",
    "detail": "Function (# endif UDate)",
    "insertText": "getEpochDay(UErrorCode& status)"
  },
  {
    "label": "handleGetLimit()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "handleGetLimit(UCalendarDateFields field, ELimitType limitType)"
  },
  {
    "label": "handleGetExtendedYear()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "handleGetExtendedYear()"
  },
  {
    "label": "handleGetExtendedYearFromWeekFields()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "handleGetExtendedYearFromWeekFields(int32_t yearWoy, int32_t woy)"
  },
  {
    "label": "handleComputeFields()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "handleComputeFields(int32_t julianDay, UErrorCode &status)"
  },
  {
    "label": "computeJulianDayOfYear()",
    "kind": "Method",
    "detail": "Function (private : double)",
    "insertText": "computeJulianDayOfYear(UBool isGregorian, int32_t year, UBool& isLeap)"
  },
  {
    "label": "validateFields()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "validateFields(void)"
  },
  {
    "label": "boundsCheck()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "boundsCheck(int32_t value, UCalendarDateFields field)"
  },
  {
    "label": "aggregateStamp()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "aggregateStamp(int32_t stamp_a, int32_t stamp_b)"
  },
  {
    "label": "millisToJulianDay()",
    "kind": "Method",
    "detail": "Function (UDate fGregorianCutover ; int32_t fCutoverJulianDay ; UDate fNormalizedGregorianCutover ; int32_t fGregorianCutoverYear ; int32_t fGregorianCutoverJulianDay ; double)",
    "insertText": "millisToJulianDay(UDate millis)"
  },
  {
    "label": "julianDayToMillis()",
    "kind": "Method",
    "detail": "Function (UDate)",
    "insertText": "julianDayToMillis(double julian)"
  },
  {
    "label": "haveDefaultCentury()",
    "kind": "Method",
    "detail": "Function (UBool fIsGregorian ; UBool fInvertGregorian ; public : UBool)",
    "insertText": "haveDefaultCentury()"
  },
  {
    "label": "defaultCenturyStart()",
    "kind": "Method",
    "detail": "Function (UDate)",
    "insertText": "defaultCenturyStart()"
  },
  {
    "label": "defaultCenturyStartYear()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "defaultCenturyStartYear()"
  }
]