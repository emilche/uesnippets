[
  {
    "label": "FCollisionContextAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionContextAllocator"
  },
  {
    "label": "FParticlePairMidPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticlePairMidPhase"
  },
  {
    "label": "FCollisionDetectorSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionDetectorSettings"
  },
  {
    "label": "FCollisionContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionContext"
  },
  {
    "label": "FCollisionDetectorSettings()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" namespace Chaos { namespace Private { class FCollisionContextAllocator ; } class FParticlePairMidPhase ; class FCollisionDetectorSettings { public :)",
    "insertText": "FCollisionDetectorSettings() : BoundsExpansion(0) , BoundsVelocityInflation(0) , MaxVelocityBoundsExpansion(0) , BoundsVelocityInflationMACD(0) , MaxVelocityBoundsExpansionMACD(0) , bFilteringEnabled(true) , bDeferNarrowPhase(false) , bAllowManifolds(true) , bAllowManifoldReuse(true) , bAllowCCD(true) , bAllowMACD(false)"
  },
  {
    "label": "FCollisionContext()",
    "kind": "Method",
    "detail": "Function (} FReal BoundsExpansion ; FReal BoundsVelocityInflation ; FReal MaxVelocityBoundsExpansion ; FReal BoundsVelocityInflationMACD ; FReal MaxVelocityBoundsExpansionMACD ; bool bFilteringEnabled ; bool bDeferNarrowPhase ; bool bAllowManifolds ; bool bAllowManifoldReuse ; bool bAllowCCD ; bool bAllowMACD ; } ; class FCollisionContext { public :)",
    "insertText": "FCollisionContext() : Settings(nullptr) , Allocator(nullptr) , MidPhase(nullptr)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (Settings = nullptr ; Allocator = nullptr ; MidPhase = nullptr ; } const FCollisionDetectorSettings&)",
    "insertText": "GetSettings()"
  },
  {
    "label": "GetAllocator()",
    "kind": "Method",
    "detail": "Function (Settings =& InSettings ; } Private::FCollisionContextAllocator*)",
    "insertText": "GetAllocator()"
  }
]