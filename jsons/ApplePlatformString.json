[
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "FApplePlatformString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FApplePlatformString"
  },
  {
    "label": "NSString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # if PLATFORM_TCHAR_IS_CHAR16 # include \" GenericPlatform / GenericWidePlatformString . h \" # else # include \" GenericPlatform / StandardPlatformString . h \" # endif # include \" Misc / AssertionMacros . h \" # include \" Misc / OutputDevice . h \" # if PLATFORM_MAC # include \" Mac / MacSystemIncludes . h \" # elif PLATFORM_IOS # include \" IOS / IOSSystemIncludes . h \" # endif # ifdef __OBJC__ # import<Foundation / NSString . h> class FString ; @ interface)",
    "insertText": "NSString(FString_Extensions) + (NSString*) stringWithTCHARString:(const TCHAR*)"
  },
  {
    "label": "CFStringToTCHAR()",
    "kind": "Method",
    "detail": "Function (@ end # endif struct FApplePlatformString # if PLATFORM_TCHAR_IS_CHAR16 : public FGenericWidePlatformString # else : public FStandardPlatformString # endif { void)",
    "insertText": "CFStringToTCHAR(CFStringRef CFStr, TCHAR *TChar)"
  },
  {
    "label": "CFStringGetLength()",
    "kind": "Method",
    "detail": "Function (const SIZE_T Length =)",
    "insertText": "CFStringGetLength(CFStr)"
  },
  {
    "label": "CFRangeMake()",
    "kind": "Method",
    "detail": "Function (CFRange Range =)",
    "insertText": "CFRangeMake(0, Length)"
  },
  {
    "label": "CFStringGetBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CFStringGetBytes(CFStr, Range, sizeof( TCHAR ) == 4 ? kCFStringEncodingUTF32LE : kCFStringEncodingUnicode, '?', false, ( uint8 *)TChar, Length * sizeof( TCHAR ) + 1, NULL)"
  },
  {
    "label": "TCHARToCFString()",
    "kind": "Method",
    "detail": "Function (TChar [ Length ] = 0 ; } CFStringRef)",
    "insertText": "TCHARToCFString(const TCHAR *TChar)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (const SIZE_T Length =)",
    "insertText": "Strlen(TChar)"
  },
  {
    "label": "CFStringCreateWithBytes()",
    "kind": "Method",
    "detail": "Function (CFStringRef String =)",
    "insertText": "CFStringCreateWithBytes(kCFAllocatorDefault, ( const uint8 *)TChar, Length * sizeof( TCHAR ), sizeof( TCHAR ) == 4 ? kCFStringEncodingUTF32LE : kCFStringEncodingUnicode, false)"
  }
]