[
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "FDDoSDetection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDDoSDetection"
  },
  {
    "label": "FEncryptionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEncryptionComponent"
  },
  {
    "label": "FNetAnalyticsAggregator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetAnalyticsAggregator"
  },
  {
    "label": "HandlerComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HandlerComponent"
  },
  {
    "label": "IAnalyticsProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyticsProvider"
  },
  {
    "label": "PacketHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketHandler"
  },
  {
    "label": "ReliabilityHandlerComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReliabilityHandlerComponent"
  },
  {
    "label": "FNetConnectionFaultRecoveryBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetConnectionFaultRecoveryBase"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ProcessedPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessedPacket"
  },
  {
    "label": "BufferedPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BufferedPacket"
  },
  {
    "label": "FIncomingPacketRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIncomingPacketRef"
  },
  {
    "label": "FPacketHandlerComponentModuleInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPacketHandlerComponentModuleInterface"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Queue . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" HAL / UnrealMemory . h \" # include \" IPAddress . h \" # include \" Logging / LogMacros . h \" # include \" Math / UnrealMathSSE . h \" # include \" Misc / AssertionMacros . h \" # include \" Modules / ModuleInterface . h \" # include \" Net / Common / Packets / PacketTraits . h \" # include \" Net / Common / Packets / PacketView . h \" # include \" Serialization / Archive . h \" # include \" Serialization / BitReader . h \" # include \" Serialization / BitWriter . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(PacketHandlerLog, Log, All)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (class FInternetAddr ; class FDDoSDetection ; class FEncryptionComponent ; class FNetAnalyticsAggregator ; class HandlerComponent ; class IAnalyticsProvider ; class PacketHandler ; class ReliabilityHandlerComponent ; namespace UE { namespace Net { class FNetConnectionFaultRecoveryBase ; } } # if ! UE_BUILD_SHIPPING bool GPacketHandlerDiscardTimeguardMeasurement ; # endif)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FPacketHandlerLowLevelSendTraits, void* , int32 , FOutPacketTraits&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FPacketHandlerLowLevelSend, void* , int32 , int32)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FPacketHandlerAddComponentByNameDelegate, TArray<FString>&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FPacketHandlerAddComponentDelegate, TArray<TSharedPtr<HandlerComponent>>&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FPacketHandlerNotifyAddHandler, TSharedPtr<HandlerComponent>&)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FPacketHandlerHandshakeComplete)"
  },
  {
    "label": "ProcessedPacket()",
    "kind": "Method",
    "detail": "Function (namespace UE { namespace Handler { enum class State : uint8 { Uninitialized,InitializingComponents,Initialized } ; enum class Mode : uint8 { Client,Server } ; namespace Component { enum class State : uint8 { UnInitialized,InitializedOnLocal,InitializeOnRemote,Initialized } ; } } } struct ProcessedPacket { uint8* Data ; int32 CountBits ; bool bError ; public :)",
    "insertText": "ProcessedPacket() : Data() , CountBits(0) , bError(false)"
  },
  {
    "label": "ProcessedPacket()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ProcessedPacket(uint8* InData, int32 InCountBits, bool bInError=false) : Data(InData) , CountBits(InCountBits) , bError(bInError)"
  },
  {
    "label": "BufferedPacket()",
    "kind": "Method",
    "detail": "Function (} } ; struct BufferedPacket { uint8* Data ; uint32 CountBits ; FOutPacketTraits Traits ; double ResendTime ; uint32 Id ; TSharedPtr<const FInternetAddr> Address ; HandlerComponent* FromComponent ; private :)",
    "insertText": "BufferedPacket() : Data(nullptr) , CountBits(0) , Traits() , ResendTime(0.0) , Id(0) , Address(nullptr) , FromComponent(nullptr)"
  },
  {
    "label": "BufferedPacket()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "BufferedPacket(uint8* InCopyData, uint32 InCountBits, FOutPacketTraits& InTraits, double InResendTime=0.0, uint32 InId=0) : CountBits(InCountBits) , Traits(InTraits) , ResendTime(InResendTime) , Id(InId) , Address(nullptr) , FromComponent(nullptr)"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (Data = new uint8 [)",
    "insertText": "DivideAndRoundUp(InCountBits, 8u)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Data, InCopyData, FMath::DivideAndRoundUp(InCountBits, 8u))"
  },
  {
    "label": "BufferedPacket()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BufferedPacket(TSharedPtr<const FInternetAddr> InAddress, uint8* InCopyData, uint32 InCountBits, FOutPacketTraits& InTraits, double InResendTime=0.0, uint32 InId=0) : BufferedPacket(InCopyData, InCountBits, InTraits, InResendTime, InId)"
  },
  {
    "label": "BufferedPacket()",
    "kind": "Method",
    "detail": "Function (Address = InAddress ; } ~)",
    "insertText": "BufferedPacket()"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "CountBytes(sizeof(*this), sizeof(*this))"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "CountBytes(FMath::DivideAndRoundUp(CountBits, 8u), FMath::DivideAndRoundUp(CountBits, 8u))"
  },
  {
    "label": "PacketHandler()",
    "kind": "Method",
    "detail": "Function (} } ; struct FIncomingPacketRef { FBitReader& Packet ; const TSharedPtr<const FInternetAddr>& Address ; FInPacketTraits& Traits ; } ; enum class EIncomingResult : uint8 { Success,Error } ; class PacketHandler { public :)",
    "insertText": "PacketHandler(FDDoSDetection* InDDoS=nullptr)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(UE::Handler::Mode Mode, uint32 InMaxPacketBits, bool bConnectionlessOnly=false, TSharedPtr<class IAnalyticsProvider> InProvider=nullptr, FDDoSDetection* InDDoS=nullptr, FName InDriverProfile=NAME_None)"
  },
  {
    "label": "InitializeDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeDelegates(FPacketHandlerLowLevelSendTraits InLowLevelSendDel, FPacketHandlerNotifyAddHandler InAddHandlerDel=FPacketHandlerNotifyAddHandler())"
  },
  {
    "label": "InitFaultRecovery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFaultRecovery(UE::Net::FNetConnectionFaultRecoveryBase* InFaultRecovery)"
  },
  {
    "label": "NotifyAnalyticsProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAnalyticsProvider(TSharedPtr<IAnalyticsProvider> InProvider, TSharedPtr<FNetAnalyticsAggregator> InAggregator)"
  },
  {
    "label": "InitializeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeComponents()"
  },
  {
    "label": "BeginHandshaking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginHandshaking(FPacketHandlerHandshakeComplete InHandshakeDel=FPacketHandlerHandshakeComplete())"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "AddHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHandler(TSharedPtr<HandlerComponent>& NewHandler, bool bDeferInitialize=false)"
  },
  {
    "label": "AddHandler()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<HandlerComponent>)",
    "insertText": "AddHandler(const FString& ComponentStr, bool bDeferInitialize=false)"
  },
  {
    "label": "IncomingHigh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncomingHigh(FBitReader& Reader)"
  },
  {
    "label": "OutgoingHigh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutgoingHigh(FBitWriter& Writer)"
  },
  {
    "label": "Incoming_Internal()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS const TSharedPtr<const FInternetAddr> EmptyAddress = nullptr ; return)",
    "insertText": "Incoming_Internal(Packet, CountBytes, false, EmptyAddress)"
  },
  {
    "label": "Incoming()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } EIncomingResult)",
    "insertText": "Incoming(FReceivedPacketView& PacketView)"
  },
  {
    "label": "Outgoing()",
    "kind": "Method",
    "detail": "Function (} const ProcessedPacket)",
    "insertText": "Outgoing(uint8* Packet, int32 CountBits, FOutPacketTraits& Traits)"
  },
  {
    "label": "Outgoing_Internal()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<const FInternetAddr> EmptyAddress = nullptr ; return)",
    "insertText": "Outgoing_Internal(Packet, CountBits, Traits, false, EmptyAddress)"
  },
  {
    "label": "IncomingConnectionless()",
    "kind": "Method",
    "detail": "Function (} const ProcessedPacket)",
    "insertText": "IncomingConnectionless(const TSharedPtr<const FInternetAddr>& Address, uint8* Packet, int32 CountBytes)"
  },
  {
    "label": "Incoming_Internal()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return)",
    "insertText": "Incoming_Internal(Packet, CountBytes, true, Address)"
  },
  {
    "label": "IncomingConnectionless()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } EIncomingResult)",
    "insertText": "IncomingConnectionless(FReceivedPacketView& PacketView)"
  },
  {
    "label": "Incoming_Internal()",
    "kind": "Method",
    "detail": "Function (PacketView . Traits . bConnectionlessPacket = true ; return)",
    "insertText": "Incoming_Internal(PacketView)"
  },
  {
    "label": "OutgoingConnectionless()",
    "kind": "Method",
    "detail": "Function (} const ProcessedPacket)",
    "insertText": "OutgoingConnectionless(const TSharedPtr<const FInternetAddr>& Address, uint8* Packet, int32 CountBits, FOutPacketTraits& Traits)"
  },
  {
    "label": "GetEncryptionComponent()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FEncryptionComponent>)",
    "insertText": "GetEncryptionComponent()"
  },
  {
    "label": "GetComponentByName()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<HandlerComponent>)",
    "insertText": "GetComponentByName(FName ComponentName)"
  },
  {
    "label": "ProcessedPacket()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "ProcessedPacket(nullptr, 0, true)"
  },
  {
    "label": "Incoming_Internal()",
    "kind": "Method",
    "detail": "Function (} } EIncomingResult)",
    "insertText": "Incoming_Internal(FReceivedPacketView& PacketView)"
  },
  {
    "label": "Outgoing_Internal()",
    "kind": "Method",
    "detail": "Function (const ProcessedPacket)",
    "insertText": "Outgoing_Internal(uint8* Packet, int32 CountBits, FOutPacketTraits& Traits, bool bConnectionless, const TSharedPtr<const FInternetAddr>& Address)"
  },
  {
    "label": "SendHandlerPacket()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SendHandlerPacket(HandlerComponent* InComponent, FBitWriter& Writer, FOutPacketTraits& Traits)"
  },
  {
    "label": "HandlerComponentInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlerComponentInitialized(HandlerComponent* InComponent)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (QueuedRawPackets .)",
    "insertText": "Enqueue(PacketToQueue)"
  },
  {
    "label": "QueueHandlerPacketForSending()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "QueueHandlerPacketForSending(BufferedPacket* PacketToQueue)"
  },
  {
    "label": "DoesAnyProfileHaveComponent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesAnyProfileHaveComponent(const FString& InComponentName)"
  },
  {
    "label": "DoesProfileHaveComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesProfileHaveComponent(const FName InNetDriverName, const FString& InComponentName)"
  },
  {
    "label": "GetQueuedPacket()",
    "kind": "Method",
    "detail": "Function (BufferedPacket*)",
    "insertText": "GetQueuedPacket()"
  },
  {
    "label": "GetQueuedRawPacket()",
    "kind": "Method",
    "detail": "Function (BufferedPacket*)",
    "insertText": "GetQueuedRawPacket()"
  },
  {
    "label": "GetQueuedConnectionlessPacket()",
    "kind": "Method",
    "detail": "Function (BufferedPacket*)",
    "insertText": "GetQueuedConnectionlessPacket()"
  },
  {
    "label": "GetTotalReservedPacketBits()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTotalReservedPacketBits()"
  },
  {
    "label": "GetRawSend()",
    "kind": "Method",
    "detail": "Function (bRawSend = bInEnabled ; } bool)",
    "insertText": "GetRawSend()"
  },
  {
    "label": "UpdateInitialState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInitialState()"
  },
  {
    "label": "HandlerInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlerInitialized()"
  },
  {
    "label": "ReplaceIncomingPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceIncomingPacket(FBitReader& ReplacementPacket)"
  },
  {
    "label": "RealignPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RealignPacket(FBitReader& Packet)"
  },
  {
    "label": "GetAddComponentByNameDelegate()",
    "kind": "Method",
    "detail": "Function (public : UE::Handler::Mode Mode ; FPacketHandlerAddComponentByNameDelegate&)",
    "insertText": "GetAddComponentByNameDelegate()"
  },
  {
    "label": "GetAddComponentDelegate()",
    "kind": "Method",
    "detail": "Function (FPacketHandlerAddComponentDelegate&)",
    "insertText": "GetAddComponentDelegate()"
  },
  {
    "label": "HandlerComponent()",
    "kind": "Method",
    "detail": "Function (private : UE::Handler::State State ; uint8 bRawSend : 1 ; uint8 bBeganHandshaking : 1 ; uint8 bConnectionlessHandler : 1 ; uint32 MaxPacketBits ; FDDoSDetection* DDoS ; FPacketHandlerLowLevelSendTraits LowLevelSendDel ; FPacketHandlerHandshakeComplete HandshakeCompleteDel ; FPacketHandlerNotifyAddHandler AddHandlerDel ; FBitWriter OutgoingPacket ; FBitReader IncomingPacket ; TArray<TSharedPtr<HandlerComponent>> HandlerComponents ; TSharedPtr<FEncryptionComponent> EncryptionComponent ; TArray<BufferedPacket*> BufferedPackets ; TQueue<BufferedPacket*> QueuedPackets ; TQueue<BufferedPacket*> QueuedRawPackets ; TQueue<BufferedPacket*> QueuedHandlerPackets ; TArray<BufferedPacket*> BufferedConnectionlessPackets ; TQueue<BufferedPacket*> QueuedConnectionlessPackets ; TSharedPtr<ReliabilityHandlerComponent> ReliabilityComponent ; TSharedPtr<IAnalyticsProvider> Provider ; TSharedPtr<FNetAnalyticsAggregator> Aggregator ; } ; class HandlerComponent { class PacketHandler ; public :)",
    "insertText": "HandlerComponent()"
  },
  {
    "label": "HandlerComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlerComponent(FName InName)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "RequiresHandshake()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresHandshake()"
  },
  {
    "label": "Incoming()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Incoming(FIncomingPacketRef PacketRef)"
  },
  {
    "label": "Incoming()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "Incoming(PacketRef.Packet)"
  },
  {
    "label": "Outgoing()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "Outgoing(FBitWriter& Packet, FOutPacketTraits& Traits)"
  },
  {
    "label": "IncomingConnectionless()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "IncomingConnectionless(FIncomingPacketRef PacketRef)"
  },
  {
    "label": "OutgoingConnectionless()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OutgoingConnectionless(const TSharedPtr<const FInternetAddr>& Address, FBitWriter& Packet, FOutPacketTraits& Traits)"
  },
  {
    "label": "CanReadUnaligned()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanReadUnaligned()"
  },
  {
    "label": "NotifyHandshakeBegin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyHandshakeBegin()"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetActive(bool Active)"
  },
  {
    "label": "GetReservedPacketBits()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetReservedPacketBits()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetName()"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetState(UE::Handler::Component::State State)"
  },
  {
    "label": "Initialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialized()"
  },
  {
    "label": "CreateComponentInstance()",
    "kind": "Method",
    "detail": "Function (public : PacketHandler* Handler ; protected : UE::Handler::Component::State State ; uint32 MaxOutgoingBits ; bool bRequiresHandshake ; bool bRequiresReliability ; private : bool bActive ; bool bInitialized ; FName Name ; } ; class FPacketHandlerComponentModuleInterface : public IModuleInterface { public : TSharedPtr<HandlerComponent>)",
    "insertText": "CreateComponentInstance(FString& Options)"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  }
]