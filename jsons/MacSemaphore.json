[
  {
    "label": "FMacSemaphore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMacSemaphore"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / Timespan . h \" # include \" Misc / AssertionMacros . h \" # include<dispatch / dispatch . h> class FMacSemaphore { public :)",
    "insertText": "UE_NONCOPYABLE(FMacSemaphore)"
  },
  {
    "label": "FMacSemaphore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMacSemaphore(int32 InitialCount, int32 ) : Semaphore(dispatch_semaphore_create(InitialCount))"
  },
  {
    "label": "FMacSemaphore()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMacSemaphore()"
  },
  {
    "label": "dispatch_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dispatch_release(Semaphore)"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Acquire()"
  },
  {
    "label": "dispatch_semaphore_wait()",
    "kind": "Method",
    "detail": "Function (intptr_t Res =)",
    "insertText": "dispatch_semaphore_wait(Semaphore, DISPATCH_TIME_FOREVER)"
  },
  {
    "label": "TryAcquire()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryAcquire(FTimespan Timeout = FTimespan::Zero())"
  },
  {
    "label": "dispatch_time()",
    "kind": "Method",
    "detail": "Function (dispatch_time_t TS =)",
    "insertText": "dispatch_time(DISPATCH_TIME_NOW, (int64)Timeout.GetTotalMicroseconds() * 1000)"
  },
  {
    "label": "dispatch_semaphore_wait()",
    "kind": "Method",
    "detail": "Function (intptr_t Res =)",
    "insertText": "dispatch_semaphore_wait(Semaphore, TS)"
  },
  {
    "label": "dispatch_semaphore_signal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dispatch_semaphore_signal(Semaphore)"
  }
]