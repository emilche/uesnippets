[
  {
    "label": "UnordSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnordSet"
  },
  {
    "label": "LookupTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LookupTest"
  },
  {
    "label": "TYPED_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_UNORDERED_SET_LOOKUP_TEST_H_ # define ABSL_CONTAINER_INTERNAL_UNORDERED_SET_LOOKUP_TEST_H_ # include \" gmock / gmock . h \" # include \" gtest / gtest . h \" # include \" absl / container / internal / hash_generator_testing . h \" # include \" absl / container / internal / hash_policy_testing . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<class UnordSet> class LookupTest : public::testing::Test { } ;)",
    "insertText": "TYPED_TEST_SUITE_P(LookupTest)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPED_TEST_P(LookupTest, Count)"
  },
  {
    "label": "generate_n()",
    "kind": "Method",
    "detail": "Function (using T = hash_internal::GeneratedType<TypeParam> ; std::vector<T> values ;)",
    "insertText": "generate_n(std::back_inserter(values), 10, hash_internal::Generator<T>())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TypeParam m ;)",
    "insertText": "for(const auto& v : values) EXPECT_EQ(0, m.count(v)) << ::testing::PrintToString(v)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (m .)",
    "insertText": "insert(values.begin(), values.end())"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(LookupTest, Find)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TypeParam m ;)",
    "insertText": "for(const auto& v : values) EXPECT_TRUE(m.end() == m.find(v)) << ::testing::PrintToString(v)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (TypeParam::iterator it = m .)",
    "insertText": "find(v)"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE(m.end() != it) << ::testing::PrintToString(v)"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(v, *it) << ::testing::PrintToString(v)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TYPED_TEST_P(LookupTest, EqualRange)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TypeParam m ;)",
    "insertText": "for(const auto& v : values)"
  },
  {
    "label": "equal_range()",
    "kind": "Method",
    "detail": "Function (auto r = m .)",
    "insertText": "equal_range(v)"
  },
  {
    "label": "ASSERT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_EQ(0, std::distance(r.first, r.second))"
  },
  {
    "label": "ASSERT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_EQ(1, std::distance(r.first, r.second))"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(v, *r.first)"
  },
  {
    "label": "REGISTER_TYPED_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "REGISTER_TYPED_TEST_SUITE_P(LookupTest, Count, Find, EqualRange)"
  }
]