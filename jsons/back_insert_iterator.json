[
  {
    "label": "_Container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Container"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ITERATOR_BACK_INSERT_ITERATOR_H # define _LIBCPP___ITERATOR_BACK_INSERT_ITERATOR_H # include<__config> # include<__iterator / iterator . h> # include<__iterator / iterator_traits . h> # include<__memory / addressof . h> # include<__utility / move . h> # include<cstddef> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD _LIBCPP_SUPPRESS_DEPRECATED_PUSH template <class _Container> class _LIBCPP_TEMPLATE_VIS back_insert_iterator #if _LIBCPP_STD_VER <= 14 || !defined(_LIBCPP_ABI_NO_ITERATOR_BASES)"
  },
  {
    "label": "back_insert_iterator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_SUPPRESS_DEPRECATED_POP protected : _Container* container ; public : typedef output_iterator_tag iterator_category ; typedef void value_type ; # if _LIBCPP_STD_VER> 1 7 typedef ptrdiff_t difference_type ; # else typedef void difference_type ; # endif typedef void pointer ; typedef void reference ; typedef _Container container_type ; _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17)",
    "insertText": "back_insert_iterator(_Container& __x) : container(_VSTD::addressof(__x))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 back_insert_iterator&)",
    "insertText": "operator(const typename _Container::value_type& __value)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (container ->)",
    "insertText": "push_back(__value)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (container ->)",
    "insertText": "push_back(_VSTD::move(__value))"
  }
]