[
  {
    "label": "PacketFeedback",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketFeedback"
  },
  {
    "label": "InFlightBytesTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InFlightBytesTracker"
  },
  {
    "label": "NetworkRouteComparator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkRouteComparator"
  },
  {
    "label": "TransportFeedbackAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransportFeedbackAdapter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "PacketFeedback()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_RTP_TRANSPORT_FEEDBACK_ADAPTER_H_ # define MODULES_CONGESTION_CONTROLLER_RTP_TRANSPORT_FEEDBACK_ADAPTER_H_ # include<deque> # include<map> # include<utility> # include<vector> # include \" api / sequence_checker . h \" # include \" api / transport / network_types . h \" # include \" api / units / timestamp . h \" # include \" modules / include / module_common_types_public . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" rtc_base / network / sent_packet . h \" # include \" rtc_base / network_route . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { struct PacketFeedback {)",
    "insertText": "PacketFeedback()"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (Timestamp creation_time =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "PlusInfinity()",
    "kind": "Method",
    "detail": "Function (SentPacket sent ; Timestamp receive_time =)",
    "insertText": "PlusInfinity()"
  },
  {
    "label": "AddInFlightPacketBytes()",
    "kind": "Method",
    "detail": "Function (rtc::NetworkRoute network_route ; } ; class InFlightBytesTracker { public : void)",
    "insertText": "AddInFlightPacketBytes(const PacketFeedback& packet)"
  },
  {
    "label": "RemoveInFlightPacketBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInFlightPacketBytes(const PacketFeedback& packet)"
  },
  {
    "label": "GetOutstandingData()",
    "kind": "Method",
    "detail": "Function (DataSize)",
    "insertText": "GetOutstandingData(const rtc::NetworkRoute& network_route)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : struct NetworkRouteComparator { bool)",
    "insertText": "operator()(const rtc::NetworkRoute& a, const rtc::NetworkRoute& b)"
  },
  {
    "label": "TransportFeedbackAdapter()",
    "kind": "Method",
    "detail": "Function (} ; std::map<rtc::NetworkRoute,DataSize,NetworkRouteComparator> in_flight_data_ ; } ; class TransportFeedbackAdapter { public :)",
    "insertText": "TransportFeedbackAdapter()"
  },
  {
    "label": "AddPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPacket(const RtpPacketSendInfo& packet_info, size_t overhead_bytes, Timestamp creation_time)"
  },
  {
    "label": "ProcessSentPacket()",
    "kind": "Method",
    "detail": "Function (absl::optional<SentPacket>)",
    "insertText": "ProcessSentPacket(const rtc::SentPacket& sent_packet)"
  },
  {
    "label": "ProcessTransportFeedback()",
    "kind": "Method",
    "detail": "Function (absl::optional<TransportPacketsFeedback>)",
    "insertText": "ProcessTransportFeedback(const rtcp::TransportFeedback& feedback, Timestamp feedback_receive_time)"
  },
  {
    "label": "SetNetworkRoute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetworkRoute(const rtc::NetworkRoute& network_route)"
  },
  {
    "label": "GetOutstandingData()",
    "kind": "Method",
    "detail": "Function (DataSize)",
    "insertText": "GetOutstandingData()"
  },
  {
    "label": "ProcessTransportFeedbackInner()",
    "kind": "Method",
    "detail": "Function (private : enum class SendTimeHistoryStatus { kNotAdded,kOk,kDuplicate } ; std::vector<PacketResult>)",
    "insertText": "ProcessTransportFeedbackInner(const rtcp::TransportFeedback& feedback, Timestamp feedback_receive_time)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (DataSize pending_untracked_size_ =)",
    "insertText": "Zero()"
  }
]