[
  {
    "label": "SDeviceQuickInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDeviceQuickInfo"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / AppStyle . h \" # include \" Fonts / SlateFontInfo . h \" # include \" ITargetDeviceService . h \" # include \" Misc / Paths . h \" # include \" PlatformInfo . h \" # include \" Styling / StyleDefaults . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Images / SImage . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Layout / SGridPanel . h \" # include \" Widgets / Text / STextBlock . h \" # define LOCTEXT_NAMESPACE \" SDeviceQuickInfo \" class SDeviceQuickInfo : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SDeviceQuickInfo)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(ITargetDeviceServicePtr, InitialDeviceService) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (DeviceService = InArgs . _InitialDeviceService .)",
    "insertText": "Get()"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (ChildSlot [)",
    "insertText": "SNew(SHorizontalBox) + SHorizontalBox::Slot() .AutoWidth() [ SNew(SBox) .HeightOverride(96.0f) .WidthOverride(96.0f) [ SNew(SImage) .Image(this, &SDeviceQuickInfo::HandlePlatformIcon) ] ] + SHorizontalBox::Slot() .AutoWidth() .Padding(20.0f, 0.0f, 0.0f, 0.0f) .VAlign(VAlign_Center) [ SNew(SGridPanel) .FillColumn(0, 1.0f) + SGridPanel::Slot(0, 0) [ SNew(STextBlock) .Font(FCoreStyle::GetDefaultFontStyle(\"Bold\", 9)) .Text(LOCTEXT(\"DeviceNameLabel\", \"Name:\")) ] + SGridPanel::Slot(1, 0) .Padding(16.0f, 0.0f, 8.0f, 0.0f) [ SNew(STextBlock) .Text(this, &SDeviceQuickInfo::HandleDeviceNameText) ] + SGridPanel::Slot(0, 1) .Padding(0.0f, 4.0f, 0.0f, 0.0f) [ SNew(STextBlock) .Font(FCoreStyle::GetDefaultFontStyle(\"Bold\", 9)) .Text(LOCTEXT(\"DevicePlatformLabel\", \"Platform:\")) ] + SGridPanel::Slot(1, 1) .Padding(16.0f, 4.0f, 8.0f, 0.0f) [ SNew(STextBlock) .Text(this, &SDeviceQuickInfo::HandlePlatformNameText) ] + SGridPanel::Slot(0, 2) .Padding(0.0f, 4.0f, 0.0f, 0.0f) [ SNew(STextBlock) .Font(FCoreStyle::GetDefaultFontStyle(\"Bold\", 9)) .Text(LOCTEXT(\"DeviceMakeModelLabel\", \"Operating System:\")) ] + SGridPanel::Slot(1, 2) .Padding(16.0f, 4.0f, 8.0f, 0.0f) [ SNew(STextBlock) .Text(this, &SDeviceQuickInfo::HandleOperatingSystemText) ] + SGridPanel::Slot(0, 3) .Padding(0.0f, 4.0f, 0.0f, 0.0f) [ SNew(STextBlock) .Font(FCoreStyle::GetDefaultFontStyle(\"Bold\", 9)) .Text(LOCTEXT(\"DeviceIdLabel\", \"Device ID:\")) ] + SGridPanel::Slot(1, 3) .Padding(16.0f, 4.0f, 8.0f, 0.0f) [ SNew(STextBlock) .Text(this, &SDeviceQuickInfo::HandleDeviceIdText) ] + SGridPanel::Slot(0, 4) .Padding(0.0f, 4.0f, 0.0f, 0.0f) [ SNew(STextBlock) .Font(FCoreStyle::GetDefaultFontStyle(\"Bold\", 9)) .Text(LOCTEXT(\"DefaultDeviceLabel\", \"Default device:\")) ] + SGridPanel::Slot(1, 4) .Padding(16.0f, 4.0f, 8.0f, 0.0f) [ SNew(STextBlock) .Text(this, &SDeviceQuickInfo::HandleIsDefaultText) ] + SGridPanel::Slot(0, 5) .Padding(0.0f, 4.0f, 0.0f, 0.0f) [ SNew(STextBlock) .Font(FCoreStyle::GetDefaultFontStyle(\"Bold\", 9)) .Text(LOCTEXT(\"StatusLabel\", \"Status:\")) ] + SGridPanel::Slot(1, 5) .Padding(16.0f, 4.0f, 8.0f, 0.0f) [ SNew(STextBlock) .Text(this, &SDeviceQuickInfo::HandleStatusText)"
  },
  {
    "label": "SetDeviceService()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetDeviceService(const TSharedPtr<ITargetDeviceService, ESPMode::ThreadSafe>& InDeviceService)"
  },
  {
    "label": "HandleDeviceIdText()",
    "kind": "Method",
    "detail": "Function (DeviceService = InDeviceService ; } private : FText)",
    "insertText": "HandleDeviceIdText()"
  },
  {
    "label": "GetDevice()",
    "kind": "Method",
    "detail": "Function (ITargetDevicePtr Device = DeviceService ->)",
    "insertText": "GetDevice()"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "LOCTEXT(\"UnknownValue\", \"<unknown>\")"
  },
  {
    "label": "HandleDeviceNameText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleDeviceNameText()"
  },
  {
    "label": "GetDeviceName()",
    "kind": "Method",
    "detail": "Function (FString DeviceName = DeviceService ->)",
    "insertText": "GetDeviceName()"
  },
  {
    "label": "HandleIsDefaultText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleIsDefaultText()"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "LOCTEXT(\"NoText\", \"no\")"
  },
  {
    "label": "HandleOperatingSystemText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleOperatingSystemText()"
  },
  {
    "label": "GetOperatingSystemName()",
    "kind": "Method",
    "detail": "Function (FString OSName = TargetDevice ->)",
    "insertText": "GetOperatingSystemName()"
  },
  {
    "label": "HandlePlatformIcon()",
    "kind": "Method",
    "detail": "Function (} const FSlateBrush*)",
    "insertText": "HandlePlatformIcon()"
  },
  {
    "label": "FindPlatformInfo()",
    "kind": "Method",
    "detail": "Function (const PlatformInfo::FTargetPlatformInfo* const PlatformInfo =)",
    "insertText": "FindPlatformInfo(DeviceService->GetDevicePlatformName())"
  },
  {
    "label": "GetNoBrush()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "GetNoBrush()"
  },
  {
    "label": "HandlePlatformNameText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandlePlatformNameText()"
  },
  {
    "label": "GetDevicePlatformDisplayName()",
    "kind": "Method",
    "detail": "Function (FString PlatformName = DeviceService ->)",
    "insertText": "GetDevicePlatformDisplayName()"
  },
  {
    "label": "HandleStatusText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleStatusText()"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "LOCTEXT(\"StatusDisconnected\", \"Disconnected\")"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "LOCTEXT(\"StatusUnavailable\", \"Unavailable\")"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetEmpty()"
  }
]