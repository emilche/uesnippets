[
  {
    "label": "EqualTo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EqualTo"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_ALGORITHM_ALGORITHM_H_ # define ABSL_ALGORITHM_ALGORITHM_H_ # include<algorithm> # include<iterator> # include<type_traits> # include \" absl / base / config . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace algorithm_internal { struct EqualTo { template<T,U> bool)",
    "insertText": "operator()(const T& a, const U& b)"
  },
  {
    "label": "EqualImpl()",
    "kind": "Method",
    "detail": "Function (+ + first1 ; + + first2 ; } } template<InputIter1,InputIter2,Pred> bool)",
    "insertText": "EqualImpl(InputIter1 first1, InputIter1 last1, InputIter2 first2, InputIter2 last2, Pred&& pred, std::random_access_iterator_tag, std::random_access_iterator_tag)"
  },
  {
    "label": "EqualImpl()",
    "kind": "Method",
    "detail": "Function (} template<InputIter1,InputIter2> bool)",
    "insertText": "EqualImpl(InputIter1 first1, InputIter1 last1, InputIter2 first2, InputIter2 last2, algorithm_internal::EqualTo , std::random_access_iterator_tag, std::random_access_iterator_tag)"
  },
  {
    "label": "RotateImpl()",
    "kind": "Method",
    "detail": "Function (} template<It> It)",
    "insertText": "RotateImpl(It first, It middle, It last, std::true_type)"
  },
  {
    "label": "RotateImpl()",
    "kind": "Method",
    "detail": "Function (} template<It> It)",
    "insertText": "RotateImpl(It first, It middle, It last, std::false_type)"
  },
  {
    "label": "rotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rotate(first, middle, last)"
  },
  {
    "label": "equal()",
    "kind": "Method",
    "detail": "Function (} } template<InputIter1,InputIter2,Pred> bool)",
    "insertText": "equal(InputIter1 first1, InputIter1 last1, InputIter2 first2, InputIter2 last2, Pred&& pred)"
  },
  {
    "label": "equal()",
    "kind": "Method",
    "detail": "Function (} template<InputIter1,InputIter2> bool)",
    "insertText": "equal(InputIter1 first1, InputIter1 last1, InputIter2 first2, InputIter2 last2)"
  },
  {
    "label": "linear_search()",
    "kind": "Method",
    "detail": "Function (} template<InputIterator,EqualityComparable> bool)",
    "insertText": "linear_search(InputIterator first, InputIterator last, const EqualityComparable& value)"
  },
  {
    "label": "rotate()",
    "kind": "Method",
    "detail": "Function (} template<ForwardIterator> ForwardIterator)",
    "insertText": "rotate(ForwardIterator first, ForwardIterator middle, ForwardIterator last)"
  }
]