[
  {
    "label": "ISpatialAcceleration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpatialAcceleration"
  },
  {
    "label": "IResimCacheBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IResimCacheBase"
  },
  {
    "label": "FBroadPhaseOverlap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBroadPhaseOverlap"
  },
  {
    "label": "FBroadPhaseContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBroadPhaseContext"
  },
  {
    "label": "FSimOverlapVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimOverlapVisitor"
  },
  {
    "label": "FSpatialAccelerationBroadPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpatialAccelerationBroadPhase"
  },
  {
    "label": "ParticlePairCollisionAllowed()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Collision / CollisionConstraintAllocator . h \" # include \" Chaos / Collision / CollisionContext . h \" # include \" Chaos / Collision / CollisionFilter . h \" # include \" Chaos / Collision / StatsData . h \" # include \" Chaos / ISpatialAccelerationCollection . h \" # include \" Chaos / ParticleHandleFwd . h \" # include \" Chaos / ParticleHandle . h \" # include \" Chaos / PBDRigidsSOAs . h \" # include \" Chaos / Capsule . h \" # include \" ChaosStats . h \" # include \" Chaos / EvolutionResimCache . h \" # include \" Chaos / GeometryParticlesfwd . h \" # include \" Chaos / AABBTree . h \" # ifndef CHAOS_CHECK_BROADPHASE # define CHAOS_CHECK_BROADPHASE 0 # endif namespace Chaos::CVars { bool bChaosMidPhaseRedistributionEnabled ; int32 ChaosOneWayInteractionPairCollisionMode ; } namespace Chaos { template<TPayloadType,T,int d> class ISpatialAcceleration ; class IResimCacheBase ; namespace Private { bool)",
    "insertText": "ParticlePairCollisionAllowed(const FGeometryParticleHandle* Particle1, const FGeometryParticleHandle* Particle2, const FIgnoreCollisionManager& IgnoreCollisionManager, const bool bIsResimming, bool& bOutSwapOrder)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bOutSwapOrder = false ;)",
    "insertText": "if(!ParticlePairBroadPhaseFilter(Particle1, Particle2, &IgnoreCollisionManager))"
  },
  {
    "label": "IsMovingKinematic()",
    "kind": "Method",
    "detail": "Function (bIsMovingKinematic1 = Rigid1 ->)",
    "insertText": "IsMovingKinematic()"
  },
  {
    "label": "IsDynamic()",
    "kind": "Method",
    "detail": "Function (bIsDynamicAsleep1 = Rigid1 ->)",
    "insertText": "IsDynamic() && Rigid1->IsSleeping()"
  },
  {
    "label": "IsDynamic()",
    "kind": "Method",
    "detail": "Function (bIsDynamicAwake1 = Rigid1 ->)",
    "insertText": "IsDynamic() && !Rigid1->IsSleeping()"
  },
  {
    "label": "CastToRigidParticle()",
    "kind": "Method",
    "detail": "Function (; } bool bIsMovingKinematic2 = false ; bool bIsDynamicAwake2 = false ; bool bIsDynamicAsleep2 = false ; const FPBDRigidParticleHandle* Rigid2 = Particle2 ->)",
    "insertText": "CastToRigidParticle()"
  },
  {
    "label": "IsDynamic()",
    "kind": "Method",
    "detail": "Function (bIsDynamicAsleep2 = Rigid2 ->)",
    "insertText": "IsDynamic() && Rigid2->IsSleeping()"
  },
  {
    "label": "IsDynamic()",
    "kind": "Method",
    "detail": "Function (bIsDynamicAwake2 = Rigid2 ->)",
    "insertText": "IsDynamic() && !Rigid2->IsSleeping()"
  },
  {
    "label": "AreParticlesInPreferredOrder()",
    "kind": "Method",
    "detail": "Function (} const bool bIsParticle1Preferred =)",
    "insertText": "AreParticlesInPreferredOrder(Particle1, Particle2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bAcceptParticlePair = false ;)",
    "insertText": "if(!bIsResimming)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bAcceptParticlePair = bIsParticle1Preferred ; } else { bAcceptParticlePair = true ; } } else)",
    "insertText": "if(bIsDynamicAsleep1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bAcceptParticlePair = bIsMovingKinematic2 ; } else)",
    "insertText": "if(bIsMovingKinematic1)"
  },
  {
    "label": "bIsResimming()",
    "kind": "Method",
    "detail": "Function (bAcceptParticlePair = bIsDynamicAsleep2 ; } else { } } else { const bool bIsParticle2Desynced =)",
    "insertText": "bIsResimming(Particle2->SyncState() == ESyncState::HardDesync)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool bIsKinematic1 = ! bIsDynamicAwake1&& ! bIsDynamicAsleep1 ; const bool bIsKinematic2 = ! bIsDynamicAwake2&& ! bIsDynamicAsleep2 ;)",
    "insertText": "if((bIsDynamicAwake1 && !bIsDynamicAwake2) || (bIsDynamicAsleep1 && bIsKinematic2))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bAcceptParticlePair = true ; })",
    "insertText": "if(!bIsDynamicAwake1 && bIsDynamicAwake2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bAcceptParticlePair = ! bIsParticle2Desynced ; } else)",
    "insertText": "if(bIsDynamicAwake1 && bIsDynamicAwake2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bAcceptParticlePair = bIsParticle1Preferred | | ! bIsParticle2Desynced ; } else)",
    "insertText": "if(bIsKinematic1 && bIsDynamicAsleep2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bAcceptParticlePair = ! bIsParticle2Desynced ; } })",
    "insertText": "if(bAcceptParticlePair)"
  },
  {
    "label": "ShouldSwapParticleOrder()",
    "kind": "Method",
    "detail": "Function (bOutSwapOrder =)",
    "insertText": "ShouldSwapParticleOrder((bIsDynamicAwake1 || bIsDynamicAsleep1), (bIsDynamicAwake2 || bIsDynamicAsleep2), bIsParticle1Preferred)"
  },
  {
    "label": "FBroadPhaseOverlap()",
    "kind": "Method",
    "detail": "Function (} return bAcceptParticlePair ; } class FBroadPhaseOverlap { public :)",
    "insertText": "FBroadPhaseOverlap()"
  },
  {
    "label": "FBroadPhaseOverlap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBroadPhaseOverlap(FGeometryParticleHandle* Particle0, FGeometryParticleHandle* Particle1, const int32 InSearchParticleIndex)"
  },
  {
    "label": "SearchParticleIndex()",
    "kind": "Method",
    "detail": "Function (Particle0,Particle1 },)",
    "insertText": "SearchParticleIndex(InSearchParticleIndex) , bCollisionsEnabled(true)"
  },
  {
    "label": "ApplyFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyFilter(const FIgnoreCollisionManager& IgnoreCollisionManager, const bool bIsResimming)"
  },
  {
    "label": "ParticlePairCollisionAllowed()",
    "kind": "Method",
    "detail": "Function (bool bSwapOrder = false ; bCollisionsEnabled =)",
    "insertText": "ParticlePairCollisionAllowed(Particles[0], Particles[1], IgnoreCollisionManager, bIsResimming, bSwapOrder)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Particles[0], Particles[1])"
  },
  {
    "label": "FBroadPhaseContext()",
    "kind": "Method",
    "detail": "Function (SearchParticleIndex = 1 - SearchParticleIndex ; } } FGeometryParticleHandle* Particles [ 2 ] ; int32 SearchParticleIndex ; bool bCollisionsEnabled ; } ; class FBroadPhaseContext { public :)",
    "insertText": "FBroadPhaseContext()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FSimOverlapVisitor()",
    "kind": "Method",
    "detail": "Function (} TArray<FBroadPhaseOverlap> Overlaps ; TArray<FParticlePairMidPhase*> MidPhases ; FCollisionContext CollisionContext ; } ; struct FSimOverlapVisitor {)",
    "insertText": "FSimOverlapVisitor(FGeometryParticleHandle* ParticleHandle, const FCollisionFilterData& InSimFilterData, Private::FBroadPhaseContext& InContext) : Context(InContext) , SimFilterData(InSimFilterData) , ParticleUniqueIdx(ParticleHandle ? ParticleHandle->UniqueIdx() : FUniqueIdx(0)) , AccelerationHandle(ParticleHandle)"
  },
  {
    "label": "VisitOverlap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "VisitOverlap(const TSpatialVisitorData<FAccelerationStructureHandle>& Instance)"
  },
  {
    "label": "GetGeometryParticleHandle_PhysicsThread()",
    "kind": "Method",
    "detail": "Function (FGeometryParticleHandle* Particle1 = AccelerationHandle .)",
    "insertText": "GetGeometryParticleHandle_PhysicsThread()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Context . Overlaps .)",
    "insertText": "Emplace(Particle1, Particle2, 0)"
  },
  {
    "label": "GetQueryPayload()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "GetQueryPayload()"
  },
  {
    "label": "SetSpatialAcceleration()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSpatialAcceleration(const FAccelerationStructure* InSpatialAcceleration)"
  },
  {
    "label": "ProduceOverlaps()",
    "kind": "Method",
    "detail": "Function (SpatialAcceleration = InSpatialAcceleration ; } void)",
    "insertText": "ProduceOverlaps(FReal Dt, Private::FCollisionConstraintAllocator* Allocator, const FCollisionDetectorSettings& Settings, IResimCacheBase* ResimCache)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (NumBroadPhasePairs = 0 ; NumMidPhases = 0 ; {)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_Collisions_SpatialBroadPhase)"
  },
  {
    "label": "ProduceOverlaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProduceOverlaps(Dt, *AABBTree, Allocator, Settings, ResimCache)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(const auto BV = SpatialAcceleration->template As<TBoundingVolume<FAccelerationStructureHandle>>())"
  },
  {
    "label": "ProduceOverlaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProduceOverlaps(Dt, *BV, Allocator, Settings, ResimCache)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(const auto AABBTreeBV = SpatialAcceleration->template As<TAABBTree<FAccelerationStructureHandle, TBoundingVolume<FAccelerationStructureHandle>>>())"
  },
  {
    "label": "ProduceOverlaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProduceOverlaps(Dt, *AABBTreeBV, Allocator, Settings, ResimCache)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(const auto Collection = SpatialAcceleration->template As<ISpatialAccelerationCollection<FAccelerationStructureHandle, FReal, 3>>())"
  },
  {
    "label": "PBDComputeConstraintsLowLevel()",
    "kind": "Method",
    "detail": "Function (Collection ->)",
    "insertText": "PBDComputeConstraintsLowLevel(Dt, *this, Allocator, Settings, ResimCache)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(false)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (} } {)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_Collisions_MidPhase)"
  },
  {
    "label": "CSV_SCOPED_TIMING_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_SCOPED_TIMING_STAT(PhysicsVerbose, DetectCollisions_AssignMidPhases)"
  },
  {
    "label": "CVD_GET_WRAPPED_CURRENT_CONTEXT()",
    "kind": "Method",
    "detail": "Function (FChaosVDContextWrapper CVDContext ;)",
    "insertText": "CVD_GET_WRAPPED_CURRENT_CONTEXT(CVDContext)"
  },
  {
    "label": "CVDContext()",
    "kind": "Method",
    "detail": "Function (const auto& AssignMidPhasesWorker = [ this,Dt,&)",
    "insertText": "CVDContext(const int32 ContextIndex)"
  },
  {
    "label": "CVD_SCOPE_CONTEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_SCOPE_CONTEXT(CVDContext.Context)"
  },
  {
    "label": "AssignMidPhases()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignMidPhases(BroadphaseContexts[ContextIndex])"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "PhysicsParallelFor(NumActiveBroadphaseContexts, AssignMidPhasesWorker, bDisableCollisionParallelFor)"
  },
  {
    "label": "ProcessNewMidPhases()",
    "kind": "Method",
    "detail": "Function (Allocator ->)",
    "insertText": "ProcessNewMidPhases()"
  },
  {
    "label": "CheckOverlapResults()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CheckOverlapResults()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (NumBroadPhasePairs + = BroadphaseContexts [ ContextIndex ] . Overlaps .)",
    "insertText": "Num()"
  },
  {
    "label": "ProduceCollisions()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ProduceCollisions(FReal Dt)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_Collisions_NarrowPhase)"
  },
  {
    "label": "CSV_SCOPED_TIMING_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_SCOPED_TIMING_STAT(PhysicsVerbose, DetectCollisions_MidPhase)"
  },
  {
    "label": "RedistributeMidPhasesInContexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedistributeMidPhasesInContexts()"
  },
  {
    "label": "ProcessMidPhases()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMidPhases(Dt, BroadphaseContexts[ContextIndex])"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "PhysicsParallelFor(NumActiveBroadphaseContexts, ProcessMidPhasesWorker, bDisableCollisionParallelFor)"
  },
  {
    "label": "ComputeParticlesOverlaps()",
    "kind": "Method",
    "detail": "Function (} template<bool bOnlyRigid,ViewType,SpatialAccelerationType> void)",
    "insertText": "ComputeParticlesOverlaps(ViewType& OverlapView, FReal Dt, const SpatialAccelerationType& InSpatialAcceleration, Private::FCollisionConstraintAllocator* Allocator, const FCollisionDetectorSettings& Settings)"
  },
  {
    "label": "OverlapView()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OverlapView(const int32 WorkerIndex, const int32 NumWorkers)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (BroadphaseContexts .)",
    "insertText": "SetNum(NumWorkers)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} NumActiveBroadphaseContexts =)",
    "insertText": "Max(NumWorkers, NumActiveBroadphaseContexts)"
  },
  {
    "label": "SetMaxContexts()",
    "kind": "Method",
    "detail": "Function (Allocator ->)",
    "insertText": "SetMaxContexts(NumActiveBroadphaseContexts)"
  },
  {
    "label": "GetContextAllocator()",
    "kind": "Method",
    "detail": "Function (Private::FCollisionContextAllocator* ContextAllocator = Allocator ->)",
    "insertText": "GetContextAllocator(WorkerIndex)"
  },
  {
    "label": "SetSettings()",
    "kind": "Method",
    "detail": "Function (BroadphaseContexts [ WorkerIndex ] . CollisionContext .)",
    "insertText": "SetSettings(Settings)"
  },
  {
    "label": "SetAllocator()",
    "kind": "Method",
    "detail": "Function (BroadphaseContexts [ WorkerIndex ] . CollisionContext .)",
    "insertText": "SetAllocator(ContextAllocator)"
  },
  {
    "label": "InSpatialAcceleration()",
    "kind": "Method",
    "detail": "Function (const auto& ProduceOverlapsWorker = [ this,Dt,&)",
    "insertText": "InSpatialAcceleration(auto& Particle1, const int32 ActiveIdxIdx, const int32 ContextIndex)"
  },
  {
    "label": "bOnlyRigid()",
    "kind": "Method",
    "detail": "Function (ProduceParticleOverlaps<)",
    "insertText": "bOnlyRigid(Dt, Particle1.Handle(), InSpatialAcceleration, BroadphaseContexts[ContextIndex])"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (} ; OverlapView .)",
    "insertText": "ParallelFor(ContextCreator, ProduceOverlapsWorker, bDisableCollisionParallelFor)"
  },
  {
    "label": "ProduceOverlaps()",
    "kind": "Method",
    "detail": "Function (} } template<T_SPATIALACCELERATION> void)",
    "insertText": "ProduceOverlaps(FReal Dt, const T_SPATIALACCELERATION& InSpatialAcceleration, Private::FCollisionConstraintAllocator* Allocator, const FCollisionDetectorSettings& Settings, IResimCacheBase* ResimCache)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool bDisableParallelFor = bDisableCollisionParallelFor ;)",
    "insertText": "if(!bNeedsResim)"
  },
  {
    "label": "GetNonDisabledDynamicView()",
    "kind": "Method",
    "detail": "Function (const TParticleView<TPBDRigidParticles<FReal,3>>& DynamicSleepingView = Particles .)",
    "insertText": "GetNonDisabledDynamicView()"
  },
  {
    "label": "GetActiveDynamicMovingKinematicParticlesView()",
    "kind": "Method",
    "detail": "Function (const TParticleView<TPBDRigidParticles<FReal,3>>& DynamicMovingKinematicView = Particles .)",
    "insertText": "GetActiveDynamicMovingKinematicParticlesView()"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (ComputeParticlesOverlaps<)",
    "insertText": "true(DynamicSleepingView, Dt, InSpatialAcceleration, Allocator, Settings)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (} else { ComputeParticlesOverlaps<)",
    "insertText": "false(DynamicMovingKinematicView, Dt, InSpatialAcceleration, Allocator, Settings)"
  },
  {
    "label": "GetDesyncedView()",
    "kind": "Method",
    "detail": "Function (} } else { const TParticleView<TGeometryParticles<FReal,3>>& DesyncedView = ResimCache ->)",
    "insertText": "GetDesyncedView()"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (ComputeParticlesOverlaps<)",
    "insertText": "false(DesyncedView, Dt, InSpatialAcceleration, Allocator, Settings)"
  },
  {
    "label": "GetIgnoreCollisionManager()",
    "kind": "Method",
    "detail": "Function (} } FIgnoreCollisionManager&)",
    "insertText": "GetIgnoreCollisionManager()"
  },
  {
    "label": "IsKinematic()",
    "kind": "Method",
    "detail": "Function (bIsKinematic1 = Rigid1 ->)",
    "insertText": "IsKinematic()"
  },
  {
    "label": "IsSleeping()",
    "kind": "Method",
    "detail": "Function (bIsDynamicAsleep1 = ! bIsKinematic1&& Rigid1 ->)",
    "insertText": "IsSleeping()"
  },
  {
    "label": "Disabled()",
    "kind": "Method",
    "detail": "Function (bIsDynamicAwake1 = ! bIsKinematic1&& ! bIsDynamicAsleep1 ; bDisabled1 = Rigid1 ->)",
    "insertText": "Disabled()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bDisabled1)"
  },
  {
    "label": "ComputeParticleSimFilterDataFromShapes()",
    "kind": "Method",
    "detail": "Function (FCollisionFilterData ParticleSimData ;)",
    "insertText": "ComputeParticleSimFilterDataFromShapes(*Particle1, ParticleSimData)"
  },
  {
    "label": "WorldSpaceInflatedBounds()",
    "kind": "Method",
    "detail": "Function (const FAABB3 Box1 = Particle1 ->)",
    "insertText": "WorldSpaceInflatedBounds()"
  },
  {
    "label": "PHYSICS_CSV_SCOPED_EXPENSIVE()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "PHYSICS_CSV_SCOPED_EXPENSIVE(PhysicsVerbose, DetectCollisions_BroadPhase)"
  },
  {
    "label": "OverlapVisitor()",
    "kind": "Method",
    "detail": "Function (Private::FSimOverlapVisitor)",
    "insertText": "OverlapVisitor(Particle1, ParticleSimData, Context)"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (InSpatialAcceleration .)",
    "insertText": "Overlap(Box1, OverlapVisitor)"
  },
  {
    "label": "GlobalObjects()",
    "kind": "Method",
    "detail": "Function (} } else { const auto& GlobalElems = InSpatialAcceleration .)",
    "insertText": "GlobalObjects()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Context . Overlaps .)",
    "insertText": "Reserve(GlobalElems.Num())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Context . Overlaps .)",
    "insertText": "Emplace(Particle1, Elem.Payload.GetGeometryParticleHandle_PhysicsThread(), 1)"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_Collisions_RedistributeMidPhases)"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (const int32 NumMidPhasesPerContext =)",
    "insertText": "DivideAndRoundUp(NumMidPhases, NumActiveBroadphaseContexts)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (BroadphaseContexts [ ContextIndex ] . MidPhases .)",
    "insertText": "Reserve(NumMidPhasesPerContext)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 SrcContextIndex = 0; SrcContextIndex < NumActiveBroadphaseContexts; ++SrcContextIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<FParticlePairMidPhase*>& DstMidPhases = BroadphaseContexts [ DstContextIndex ] . MidPhases ;)",
    "insertText": "if((DstContextIndex != SrcContextIndex) && (DstMidPhases.Num() < NumMidPhasesPerContext))"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const int32 NumToMove =)",
    "insertText": "Min(SrcNum - NumMidPhasesPerContext, NumMidPhasesPerContext - DstMidPhases.Num())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (SrcNum - = NumToMove ; DstMidPhases .)",
    "insertText": "Append(&SrcMidPhases[SrcNum], NumToMove)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (break ; } } })",
    "insertText": "check(SrcNum == NumMidPhasesPerContext)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (SrcMidPhases .)",
    "insertText": "SetNum(SrcNum)"
  },
  {
    "label": "AssignMidPhases()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "AssignMidPhases(Private::FBroadPhaseContext& BroadphaseContext)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_Collisions_AssignMidPhases)"
  },
  {
    "label": "GetAllocator()",
    "kind": "Method",
    "detail": "Function (Private::FCollisionContextAllocator* ContextAllocator = BroadphaseContext . CollisionContext .)",
    "insertText": "GetAllocator()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (BroadphaseContext . MidPhases .)",
    "insertText": "SetNum(BroadphaseContext.Overlaps.Num())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 MidPhaseIndex = 0 ;)",
    "insertText": "for(int32 OverlapIndex = 0, OverlapEnd = BroadphaseContext.Overlaps.Num(); OverlapIndex < OverlapEnd; ++OverlapIndex)"
  },
  {
    "label": "ApplyFilter()",
    "kind": "Method",
    "detail": "Function (Private::FBroadPhaseOverlap& Overlap = BroadphaseContext . Overlaps [ OverlapIndex ] ; Overlap .)",
    "insertText": "ApplyFilter(IgnoreCollisionManager, bNeedsResim)"
  },
  {
    "label": "FConstGenericParticleHandle()",
    "kind": "Method",
    "detail": "Function (const bool bIsOneWay0 =)",
    "insertText": "FConstGenericParticleHandle(Overlap.Particles[0])->OneWayInteraction()"
  },
  {
    "label": "FConstGenericParticleHandle()",
    "kind": "Method",
    "detail": "Function (const bool bIsOneWay1 =)",
    "insertText": "FConstGenericParticleHandle(Overlap.Particles[1])->OneWayInteraction()"
  },
  {
    "label": "GetMidPhase()",
    "kind": "Method",
    "detail": "Function (continue ; } } FParticlePairMidPhase* MidPhase = ContextAllocator ->)",
    "insertText": "GetMidPhase(Overlap.Particles[0], Overlap.Particles[1], Overlap.Particles[Overlap.SearchParticleIndex], BroadphaseContext.CollisionContext)"
  },
  {
    "label": "CVD_TRACE_MID_PHASE()",
    "kind": "Method",
    "detail": "Function (BroadphaseContext . MidPhases [ MidPhaseIndex ] = MidPhase ;)",
    "insertText": "CVD_TRACE_MID_PHASE(MidPhase)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (+ + MidPhaseIndex ; } } BroadphaseContext . MidPhases .)",
    "insertText": "SetNum(MidPhaseIndex)"
  },
  {
    "label": "ProcessMidPhases()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessMidPhases(const FReal Dt, const Private::FBroadPhaseContext& BroadphaseContext)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_Collisions_GenerateCollisions)"
  },
  {
    "label": "CachePrefetch()",
    "kind": "Method",
    "detail": "Function (BroadphaseContext . MidPhases [ Index ] ->)",
    "insertText": "CachePrefetch()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 Index = 0; Index < NumContextMidPhases; Index++)"
  },
  {
    "label": "GetParticle0()",
    "kind": "Method",
    "detail": "Function (} FParticlePairMidPhase* MidPhase = BroadphaseContext . MidPhases [ Index ] ; const FGeometryParticleHandle* Particle0 = MidPhase ->)",
    "insertText": "GetParticle0()"
  },
  {
    "label": "GetParticle1()",
    "kind": "Method",
    "detail": "Function (const FGeometryParticleHandle* Particle1 = MidPhase ->)",
    "insertText": "GetParticle1()"
  },
  {
    "label": "GenerateCollisions()",
    "kind": "Method",
    "detail": "Function (MidPhase ->)",
    "insertText": "GenerateCollisions(BroadphaseContext.CollisionContext.GetSettings().BoundsExpansion, Dt, BroadphaseContext.CollisionContext)"
  },
  {
    "label": "PHYSICS_CSV_CUSTOM_EXPENSIVE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PHYSICS_CSV_CUSTOM_EXPENSIVE(PhysicsCounters, NumFromBroadphase, NumPotentials, ECsvCustomStatOp::Accumulate)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_CHECK_BROADPHASE TSet<uint64> ParticlePairKeys ;)",
    "insertText": "for(int32 ContextIndex = 0; ContextIndex < NumActiveBroadphaseContexts; ++ContextIndex)"
  },
  {
    "label": "FCollisionParticlePairKey()",
    "kind": "Method",
    "detail": "Function (const Private::FCollisionParticlePairKey PairKey =)",
    "insertText": "FCollisionParticlePairKey(Overlap.Particles[0], Overlap.Particles[1])"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (const bool bIsInSet = ParticlePairKeys .)",
    "insertText": "Contains(PairKey.GetKey())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ParticlePairKeys .)",
    "insertText": "Add(PairKey.GetKey())"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogChaos, Fatal, TEXT(\"Broadphase overlaps generated the same particle pair twice\"))"
  }
]