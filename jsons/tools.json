[
  {
    "label": "DefineTupleFromSingleType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefineTupleFromSingleType"
  },
  {
    "label": "CreateTupleOfPointers()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_DISPATCHER_TESTING_TOOLS_H_ # define BASE_ALLOCATOR_DISPATCHER_TESTING_TOOLS_H_ # include<array> # include<tuple> # include<utility> namespace base::allocator::dispatcher::testing { namespace internal { template<size_t Size,Type,. . . AppendedTypes> struct DefineTupleFromSingleType { using type = DefineTupleFromSingleType<Size - 1,Type,AppendedTypes . . .,Type>::type ; } ; template<Type,. . . AppendedTypes> struct DefineTupleFromSingleType<0,Type,AppendedTypes . . .> { using type = std::tuple<AppendedTypes . . .> ; } ; } template<size_t Size,Type> struct DefineTupleFromSingleType { using type = internal::DefineTupleFromSingleType<Size,Type>::type ; } ; template<Type,size_t Size,size_t . . . Indices> internal::DefineTupleFromSingleType<Size,Type*>::type)",
    "insertText": "CreateTupleOfPointers(std::array<Type, Size>& items, std::index_sequence<Indices...>)"
  },
  {
    "label": "CreateTupleOfPointers()",
    "kind": "Method",
    "detail": "Function (} template<Type,size_t Size> internal::DefineTupleFromSingleType<Size,Type*>::type)",
    "insertText": "CreateTupleOfPointers(std::array<Type, Size>& items)"
  }
]