[
  {
    "label": "TraceProcessorStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceProcessorStorage"
  },
  {
    "label": "RefCountedString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedString"
  },
  {
    "label": "PerfettoPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PerfettoPlatform"
  },
  {
    "label": "TraceCategory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceCategory"
  },
  {
    "label": "TraceBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceBuffer"
  },
  {
    "label": "TraceBufferChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceBufferChunk"
  },
  {
    "label": "TraceEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceEvent"
  },
  {
    "label": "TraceEventFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceEventFilter"
  },
  {
    "label": "TraceEventMemoryOverhead",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceEventMemoryOverhead"
  },
  {
    "label": "JsonStringOutputWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JsonStringOutputWriter"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Mode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Mode"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "ThreadLocalEventBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadLocalEventBuffer"
  },
  {
    "label": "OptionalAutoLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OptionalAutoLock"
  },
  {
    "label": "RegisteredAsyncObserver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisteredAsyncObserver"
  },
  {
    "label": "TraceLogStatus()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_TRACE_LOG_H_ # define BASE_TRACE_EVENT_TRACE_LOG_H_ # include<stddef . h> # include<stdint . h> # include<atomic> # include<map> # include<memory> # include<string> # include<unordered_map> # include<vector> # include \" base / base_export . h \" # include \" base / containers / stack . h \" # include \" base / gtest_prod_util . h \" # include \" base / memory / scoped_refptr . h \" # include \" base / no_destructor . h \" # include \" base / task / single_thread_task_runner . h \" # include \" base / threading / platform_thread . h \" # include \" base / threading / thread_local . h \" # include \" base / time / time_override . h \" # include \" base / trace_event / category_registry . h \" # include \" base / trace_event / memory_dump_provider . h \" # include \" base / trace_event / trace_config . h \" # include \" base / trace_event / trace_event_impl . h \" # include \" build / build_config . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace perfetto { namespace trace_processor { class TraceProcessorStorage ; } } namespace base { class RefCountedString ; namespace tracing { class PerfettoPlatform ; } namespace trace_event { struct TraceCategory ; class TraceBuffer ; class TraceBufferChunk ; class TraceEvent ; class TraceEventFilter ; class TraceEventMemoryOverhead ; class JsonStringOutputWriter ; struct BASE_EXPORT TraceLogStatus {)",
    "insertText": "TraceLogStatus()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (uint32_t event_capacity ; uint32_t event_count ; } ; class BASE_EXPORT TraceLog : # if)",
    "insertText": "BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (public : enum Mode : uint8_t { RECORDING_MODE = 1<<0,FILTERING_MODE = 1<<1 } ; TraceLog*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "TraceLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceLog(const TraceLog&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TraceLog&)",
    "insertText": "operator(const TraceLog&)"
  },
  {
    "label": "GetCurrentTraceConfig()",
    "kind": "Method",
    "detail": "Function (TraceConfig)",
    "insertText": "GetCurrentTraceConfig()"
  },
  {
    "label": "InitializeThreadLocalEventBufferIfSupported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeThreadLocalEventBufferIfSupported()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(const TraceConfig& trace_config, uint8_t modes_to_enable)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY) void SetEnabled(const TraceConfig& trace_config, const perfetto::TraceConfig& perfetto_config)"
  },
  {
    "label": "SetDisabled()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetDisabled()"
  },
  {
    "label": "SetDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisabled(uint8_t modes_to_disable)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY) AutoLock lock(track_event_lock_)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_ANDROID) void StartATrace(const std::string& category_filter)"
  },
  {
    "label": "StopATrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopATrace()"
  },
  {
    "label": "AddClockSyncMetadataEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClockSyncMetadataEvent()"
  },
  {
    "label": "SetupATraceStartupTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupATraceStartupTrace(const std::string& category_filter)"
  },
  {
    "label": "TakeATraceStartupConfig()",
    "kind": "Method",
    "detail": "Function (absl::optional<TraceConfig>)",
    "insertText": "TakeATraceStartupConfig()"
  },
  {
    "label": "EnabledStateObserver()",
    "kind": "Method",
    "detail": "Function (# endif class BASE_EXPORT EnabledStateObserver { public : ~)",
    "insertText": "EnabledStateObserver()"
  },
  {
    "label": "OnTraceLogEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTraceLogEnabled()"
  },
  {
    "label": "OnTraceLogDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTraceLogDisabled()"
  },
  {
    "label": "AddEnabledStateObserver()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AddEnabledStateObserver(EnabledStateObserver* listener)"
  },
  {
    "label": "RemoveEnabledStateObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEnabledStateObserver(EnabledStateObserver* listener)"
  },
  {
    "label": "AddOwnedEnabledStateObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOwnedEnabledStateObserver(std::unique_ptr<EnabledStateObserver> listener)"
  },
  {
    "label": "HasEnabledStateObserver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEnabledStateObserver(EnabledStateObserver* listener)"
  },
  {
    "label": "AsyncEnabledStateObserver()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT AsyncEnabledStateObserver { public : ~)",
    "insertText": "AsyncEnabledStateObserver()"
  },
  {
    "label": "AddAsyncEnabledStateObserver()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AddAsyncEnabledStateObserver(WeakPtr<AsyncEnabledStateObserver> listener)"
  },
  {
    "label": "RemoveAsyncEnabledStateObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAsyncEnabledStateObserver(AsyncEnabledStateObserver* listener)"
  },
  {
    "label": "HasAsyncEnabledStateObserver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAsyncEnabledStateObserver(AsyncEnabledStateObserver* listener)"
  },
  {
    "label": "IncrementalStateObserver()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT IncrementalStateObserver { public : ~)",
    "insertText": "IncrementalStateObserver()"
  },
  {
    "label": "OnIncrementalStateCleared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIncrementalStateCleared()"
  },
  {
    "label": "AddIncrementalStateObserver()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AddIncrementalStateObserver(IncrementalStateObserver* listener)"
  },
  {
    "label": "RemoveIncrementalStateObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveIncrementalStateObserver(IncrementalStateObserver* listener)"
  },
  {
    "label": "GetStatus()",
    "kind": "Method",
    "detail": "Function (TraceLogStatus)",
    "insertText": "GetStatus()"
  },
  {
    "label": "BufferIsFull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BufferIsFull()"
  },
  {
    "label": "EstimateTraceMemoryOverhead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EstimateTraceMemoryOverhead(TraceEventMemoryOverhead* overhead)"
  },
  {
    "label": "SetArgumentFilterPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArgumentFilterPredicate(const ArgumentFilterPredicate& argument_filter_predicate)"
  },
  {
    "label": "GetArgumentFilterPredicate()",
    "kind": "Method",
    "detail": "Function (ArgumentFilterPredicate)",
    "insertText": "GetArgumentFilterPredicate()"
  },
  {
    "label": "SetMetadataFilterPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMetadataFilterPredicate(const MetadataFilterPredicate& metadata_filter_predicate)"
  },
  {
    "label": "GetMetadataFilterPredicate()",
    "kind": "Method",
    "detail": "Function (MetadataFilterPredicate)",
    "insertText": "GetMetadataFilterPredicate()"
  },
  {
    "label": "SetRecordHostAppPackageName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecordHostAppPackageName(bool record_host_app_package_name)"
  },
  {
    "label": "ShouldRecordHostAppPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRecordHostAppPackageName()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using OutputCallback = base::RepeatingCallback<)",
    "insertText": "void(const scoped_refptr<base::RefCountedString>&, bool has_more_events)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(const OutputCallback& cb, bool use_worker_thread = false)"
  },
  {
    "label": "CancelTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelTracing(const OutputCallback& cb)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using AddTraceEventOverrideFunction =)",
    "insertText": "void(*)(TraceEvent*, bool thread_will_flush, TraceEventHandle* handle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using OnFlushFunction =)",
    "insertText": "void(*)()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using UpdateDurationFunction =)",
    "insertText": "void(*)(const unsigned char* category_group_enabled, const char* name, TraceEventHandle handle, PlatformThreadId thread_id, bool explicit_timestamps, const TimeTicks& now, const ThreadTicks& thread_now)"
  },
  {
    "label": "SetAddTraceEventOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAddTraceEventOverrides(const AddTraceEventOverrideFunction& add_event_override, const OnFlushFunction& on_flush_callback, const UpdateDurationFunction& update_duration_callback)"
  },
  {
    "label": "GetCategoryGroupEnabled()",
    "kind": "Method",
    "detail": "Function (const unsigned char*)",
    "insertText": "GetCategoryGroupEnabled(const char* name)"
  },
  {
    "label": "GetCategoryGroupName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetCategoryGroupName(const unsigned char* category_group_enabled)"
  },
  {
    "label": "GetBuiltinCategoryEnabled()",
    "kind": "Method",
    "detail": "Function (const unsigned char*)",
    "insertText": "GetBuiltinCategoryEnabled(const char* name)"
  },
  {
    "label": "GetBuiltinCategoryByName()",
    "kind": "Method",
    "detail": "Function (TraceCategory* builtin_category =)",
    "insertText": "GetBuiltinCategoryByName(name)"
  },
  {
    "label": "AddTraceEvent()",
    "kind": "Method",
    "detail": "Function (TraceEventHandle)",
    "insertText": "AddTraceEvent(char phase, const unsigned char* category_group_enabled, const char* name, const char* scope, uint64_t id, TraceArguments* args, unsigned int flags)"
  },
  {
    "label": "AddTraceEventWithBindId()",
    "kind": "Method",
    "detail": "Function (TraceEventHandle)",
    "insertText": "AddTraceEventWithBindId(char phase, const unsigned char* category_group_enabled, const char* name, const char* scope, uint64_t id, uint64_t bind_id, TraceArguments* args, unsigned int flags)"
  },
  {
    "label": "AddTraceEventWithProcessId()",
    "kind": "Method",
    "detail": "Function (TraceEventHandle)",
    "insertText": "AddTraceEventWithProcessId(char phase, const unsigned char* category_group_enabled, const char* name, const char* scope, uint64_t id, ProcessId process_id, TraceArguments* args, unsigned int flags)"
  },
  {
    "label": "AddTraceEventWithThreadIdAndTimestamp()",
    "kind": "Method",
    "detail": "Function (TraceEventHandle)",
    "insertText": "AddTraceEventWithThreadIdAndTimestamp(char phase, const unsigned char* category_group_enabled, const char* name, const char* scope, uint64_t id, PlatformThreadId thread_id, const TimeTicks& timestamp, TraceArguments* args, unsigned int flags)"
  },
  {
    "label": "AddTraceEventWithThreadIdAndTimestamp()",
    "kind": "Method",
    "detail": "Function (TraceEventHandle)",
    "insertText": "AddTraceEventWithThreadIdAndTimestamp(char phase, const unsigned char* category_group_enabled, const char* name, const char* scope, uint64_t id, uint64_t bind_id, PlatformThreadId thread_id, const TimeTicks& timestamp, TraceArguments* args, unsigned int flags)"
  },
  {
    "label": "AddTraceEventWithThreadIdAndTimestamps()",
    "kind": "Method",
    "detail": "Function (TraceEventHandle)",
    "insertText": "AddTraceEventWithThreadIdAndTimestamps(char phase, const unsigned char* category_group_enabled, const char* name, const char* scope, uint64_t id, uint64_t bind_id, PlatformThreadId thread_id, const TimeTicks& timestamp, const ThreadTicks& thread_timestamp, TraceArguments* args, unsigned int flags)"
  },
  {
    "label": "AddMetadataEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetadataEvent(const unsigned char* category_group_enabled, const char* name, TraceArguments* args, unsigned int flags)"
  },
  {
    "label": "UpdateTraceEventDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTraceEventDuration(const unsigned char* category_group_enabled, const char* name, TraceEventHandle handle)"
  },
  {
    "label": "UpdateTraceEventDurationExplicit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTraceEventDurationExplicit(const unsigned char* category_group_enabled, const char* name, TraceEventHandle handle, PlatformThreadId thread_id, bool explicit_timestamps, const TimeTicks& now, const ThreadTicks& thread_now)"
  },
  {
    "label": "EndFilteredEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFilteredEvent(const unsigned char* category_group_enabled, const char* name, TraceEventHandle handle)"
  },
  {
    "label": "process_id()",
    "kind": "Method",
    "detail": "Function (ProcessId)",
    "insertText": "process_id()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (AutoLock)",
    "insertText": "lock(lock_)"
  },
  {
    "label": "TraceEventFilter()",
    "kind": "Method",
    "detail": "Function (typedef std::unique_ptr<)",
    "insertText": "TraceEventFilter(*FilterFactoryForTesting)( const std::string&)"
  },
  {
    "label": "SetFilterFactoryForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilterFactoryForTesting(FilterFactoryForTesting factory)"
  },
  {
    "label": "ResetForTesting()",
    "kind": "Method",
    "detail": "Function (filter_factory_for_testing_ = factory ; } void)",
    "insertText": "ResetForTesting()"
  },
  {
    "label": "GetEventByHandle()",
    "kind": "Method",
    "detail": "Function (TraceEvent*)",
    "insertText": "GetEventByHandle(TraceEventHandle handle)"
  },
  {
    "label": "SetProcessID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProcessID(ProcessId process_id)"
  },
  {
    "label": "SetProcessSortIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProcessSortIndex(int sort_index)"
  },
  {
    "label": "set_process_name()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_process_name(const std::string& process_name)"
  },
  {
    "label": "IsProcessNameEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProcessNameEmpty()"
  },
  {
    "label": "UpdateProcessLabel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateProcessLabel(int label_id, const std::string& current_label)"
  },
  {
    "label": "RemoveProcessLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveProcessLabel(int label_id)"
  },
  {
    "label": "SetThreadSortIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadSortIndex(PlatformThreadId thread_id, int sort_index)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY) void SetTimeOffset(TimeDelta offset)"
  },
  {
    "label": "GetObserverCountForTest()",
    "kind": "Method",
    "detail": "Function (# endif size_t)",
    "insertText": "GetObserverCountForTest()"
  },
  {
    "label": "SetCurrentThreadBlocksMessageLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentThreadBlocksMessageLoop()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) void UpdateETWCategoryGroupEnabledFlags()"
  },
  {
    "label": "SetTraceBufferForTesting()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetTraceBufferForTesting(std::unique_ptr<TraceBuffer> trace_buffer)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY) perfetto::DataSourceConfig GetCurrentTrackEventDataSourceConfig()"
  },
  {
    "label": "InitializePerfettoIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePerfettoIfNeeded()"
  },
  {
    "label": "SetEnabledImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabledImpl(const TraceConfig& trace_config, const perfetto::TraceConfig& perfetto_config)"
  },
  {
    "label": "OnSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetup(const perfetto::DataSourceBase::SetupArgs&)"
  },
  {
    "label": "OnStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStart(const perfetto::DataSourceBase::StartArgs&)"
  },
  {
    "label": "OnStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStop(const perfetto::DataSourceBase::StopArgs&)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private : typedef unsigned int InternalTraceOptions ;)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(TraceEventTestFixture, TraceBufferRingBufferGetReturnChunk)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(TraceEventTestFixture, TraceBufferRingBufferHalfIteration)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(TraceEventTestFixture, TraceBufferRingBufferFullIteration)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(TraceEventTestFixture, TraceBufferVectorReportFull)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(TraceEventTestFixture, ConvertTraceConfigToInternalOptions)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(TraceEventTestFixture, TraceRecordAsMuchAsPossibleMode)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(TraceEventTestFixture, ConfigTraceBufferLimit)"
  },
  {
    "label": "OnMemoryDump()",
    "kind": "Method",
    "detail": "Function (class base::NoDestructor<TraceLog> ; bool)",
    "insertText": "OnMemoryDump(const MemoryDumpArgs& args, ProcessMemoryDump* pmd)"
  },
  {
    "label": "UpdateCategoryRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCategoryRegistry()"
  },
  {
    "label": "UpdateCategoryState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCategoryState(TraceCategory* category)"
  },
  {
    "label": "CreateFiltersForTraceConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFiltersForTraceConfig()"
  },
  {
    "label": "GetInternalOptionsFromTraceConfig()",
    "kind": "Method",
    "detail": "Function (InternalTraceOptions)",
    "insertText": "GetInternalOptionsFromTraceConfig(const TraceConfig& config)"
  },
  {
    "label": "TraceLog()",
    "kind": "Method",
    "detail": "Function (class ThreadLocalEventBuffer ; class OptionalAutoLock ; struct RegisteredAsyncObserver ;)",
    "insertText": "TraceLog(int generation)"
  },
  {
    "label": "TraceLog()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TraceLog()"
  },
  {
    "label": "AddMetadataEventsWhileLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetadataEventsWhileLocked() EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "AddMetadataEventWhileLocked()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "AddMetadataEventWhileLocked(PlatformThreadId thread_id, const char* metadata_name, const char* arg_name, const T& value) EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "trace_options()",
    "kind": "Method",
    "detail": "Function (InternalTraceOptions)",
    "insertText": "trace_options()"
  },
  {
    "label": "trace_buffer()",
    "kind": "Method",
    "detail": "Function (} TraceBuffer*)",
    "insertText": "trace_buffer()"
  },
  {
    "label": "CreateTraceBuffer()",
    "kind": "Method",
    "detail": "Function (} TraceBuffer*)",
    "insertText": "CreateTraceBuffer()"
  },
  {
    "label": "EventToConsoleMessage()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "EventToConsoleMessage(char phase, const TimeTicks& timestamp, TraceEvent* trace_event)"
  },
  {
    "label": "AddEventToThreadSharedChunkWhileLocked()",
    "kind": "Method",
    "detail": "Function (TraceEvent*)",
    "insertText": "AddEventToThreadSharedChunkWhileLocked(TraceEventHandle* handle, bool check_buffer_is_full) EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "CheckIfBufferIsFullWhileLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckIfBufferIsFullWhileLocked() EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "SetDisabledWhileLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisabledWhileLocked(uint8_t modes) EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "GetEventByHandleInternal()",
    "kind": "Method",
    "detail": "Function (TraceEvent*)",
    "insertText": "GetEventByHandleInternal(TraceEventHandle handle, OptionalAutoLock* lock)"
  },
  {
    "label": "FlushInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushInternal(const OutputCallback& cb, bool use_worker_thread, bool discard_events)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY) tracing::PerfettoPlatform* GetOrCreatePerfettoPlatform()"
  },
  {
    "label": "OnTraceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTraceData(const char* data, size_t size, bool has_more)"
  },
  {
    "label": "FlushCurrentThread()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "FlushCurrentThread(int generation, bool discard_events)"
  },
  {
    "label": "ConvertTraceEventsToTraceFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertTraceEventsToTraceFormat(std::unique_ptr<TraceBuffer> logged_events, const TraceLog::OutputCallback& flush_output_callback, const ArgumentFilterPredicate& argument_filter_predicate)"
  },
  {
    "label": "FinishFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishFlush(int generation, bool discard_events)"
  },
  {
    "label": "OnFlushTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFlushTimeout(int generation, bool discard_events)"
  },
  {
    "label": "generation()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "generation()"
  },
  {
    "label": "CheckGeneration()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckGeneration(int generation)"
  },
  {
    "label": "UseNextTraceBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UseNextTraceBuffer()"
  },
  {
    "label": "OffsetNow()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "OffsetNow()"
  },
  {
    "label": "OffsetTimestamp()",
    "kind": "Method",
    "detail": "Function (} TimeTicks)",
    "insertText": "OffsetTimestamp(const TimeTicks& timestamp)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::map<AsyncEnabledStateObserver*,RegisteredAsyncObserver> async_observers_)",
    "insertText": "GUARDED_BY(observers_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::string process_name_ ; std::unordered_map<int,std::string> process_labels_ ; int process_sort_index_ ; std::unordered_map<PlatformThreadId,int> thread_sort_indices_ ; std::unordered_map<PlatformThreadId,std::string> thread_names_)",
    "insertText": "GUARDED_BY(thread_info_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<perfetto::TracingSession> tracing_session_ ; perfetto::TraceConfig perfetto_config_ ; perfetto::DataSourceConfig track_event_config_)",
    "insertText": "GUARDED_BY(track_event_lock_)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (Lock track_event_lock_ ; # if !)",
    "insertText": "BUILDFLAG(IS_NACL)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<JsonStringOutputWriter> json_output_writer_ ; OutputCallback proto_output_callback_ ; # endif # endif FilterFactoryForTesting filter_factory_for_testing_ = nullptr ; # if)",
    "insertText": "BUILDFLAG(IS_ANDROID)"
  }
]