[
  {
    "label": "TraceProcessorStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceProcessorStorage"
  },
  {
    "label": "RefCountedString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedString"
  },
  {
    "label": "PerfettoPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PerfettoPlatform"
  },
  {
    "label": "TraceCategory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceCategory"
  },
  {
    "label": "TraceBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceBuffer"
  },
  {
    "label": "TraceBufferChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceBufferChunk"
  },
  {
    "label": "TraceEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceEvent"
  },
  {
    "label": "TraceEventFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceEventFilter"
  },
  {
    "label": "TraceEventMemoryOverhead",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceEventMemoryOverhead"
  },
  {
    "label": "JsonStringOutputWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JsonStringOutputWriter"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Mode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Mode"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "ThreadLocalEventBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadLocalEventBuffer"
  },
  {
    "label": "OptionalAutoLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OptionalAutoLock"
  },
  {
    "label": "RegisteredAsyncObserver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisteredAsyncObserver"
  },
  {
    "label": "InitializeThreadLocalEventBufferIfSupported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeThreadLocalEventBufferIfSupported()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(const TraceConfig& trace_config, uint8_t modes_to_enable)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(const TraceConfig& trace_config,\n                  const perfetto::TraceConfig& perfetto_config)"
  },
  {
    "label": "SetDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisabled()"
  },
  {
    "label": "SetDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisabled(uint8_t modes_to_disable)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (AutoLock)",
    "insertText": "lock(track_event_lock_)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (AutoLock)",
    "insertText": "lock(lock_)"
  },
  {
    "label": "GetNumTracesRecorded()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumTracesRecorded()"
  },
  {
    "label": "StartATrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartATrace(const std::string& category_filter)"
  },
  {
    "label": "StopATrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopATrace()"
  },
  {
    "label": "AddClockSyncMetadataEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClockSyncMetadataEvent()"
  },
  {
    "label": "SetupATraceStartupTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupATraceStartupTrace(const std::string& category_filter)"
  },
  {
    "label": "TakeATraceStartupConfig()",
    "kind": "Method",
    "detail": "Function (absl::optional<TraceConfig>)",
    "insertText": "TakeATraceStartupConfig()"
  },
  {
    "label": "AddEnabledStateObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEnabledStateObserver(EnabledStateObserver* listener)"
  },
  {
    "label": "RemoveEnabledStateObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEnabledStateObserver(EnabledStateObserver* listener)"
  },
  {
    "label": "AddOwnedEnabledStateObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOwnedEnabledStateObserver(\n      std::unique_ptr<EnabledStateObserver> listener)"
  },
  {
    "label": "AddAsyncEnabledStateObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAsyncEnabledStateObserver(\n      WeakPtr<AsyncEnabledStateObserver> listener)"
  },
  {
    "label": "RemoveAsyncEnabledStateObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAsyncEnabledStateObserver(AsyncEnabledStateObserver* listener)"
  },
  {
    "label": "AddIncrementalStateObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIncrementalStateObserver(IncrementalStateObserver* listener)"
  },
  {
    "label": "RemoveIncrementalStateObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveIncrementalStateObserver(IncrementalStateObserver* listener)"
  },
  {
    "label": "EstimateTraceMemoryOverhead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EstimateTraceMemoryOverhead(TraceEventMemoryOverhead* overhead)"
  },
  {
    "label": "SetArgumentFilterPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArgumentFilterPredicate(\n      const ArgumentFilterPredicate& argument_filter_predicate)"
  },
  {
    "label": "SetMetadataFilterPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMetadataFilterPredicate(\n      const MetadataFilterPredicate& metadata_filter_predicate)"
  },
  {
    "label": "SetRecordHostAppPackageName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecordHostAppPackageName(bool record_host_app_package_name)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(const OutputCallback& cb, bool use_worker_thread = false)"
  },
  {
    "label": "CancelTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelTracing(const OutputCallback& cb)"
  },
  {
    "label": "SetAddTraceEventOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAddTraceEventOverrides(\n      const AddTraceEventOverrideFunction& add_event_override,\n      const OnFlushFunction& on_flush_callback,\n      const UpdateDurationFunction& update_duration_callback)"
  },
  {
    "label": "ShouldAddAfterUpdatingState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAddAfterUpdatingState(char phase,\n                                   const unsigned char* category_group_enabled,\n                                   const char* name,\n                                   uint64_t id,\n                                   PlatformThreadId thread_id,\n                                   TraceArguments* args)"
  },
  {
    "label": "AddTraceEvent()",
    "kind": "Method",
    "detail": "Function (TraceEventHandle)",
    "insertText": "AddTraceEvent(char phase,\n                                 const unsigned char* category_group_enabled,\n                                 const char* name,\n                                 const char* scope,\n                                 uint64_t id,\n                                 TraceArguments* args,\n                                 unsigned int flags)"
  },
  {
    "label": "AddTraceEventWithBindId()",
    "kind": "Method",
    "detail": "Function (TraceEventHandle)",
    "insertText": "AddTraceEventWithBindId(\n      char phase,\n      const unsigned char* category_group_enabled,\n      const char* name,\n      const char* scope,\n      uint64_t id,\n      uint64_t bind_id,\n      TraceArguments* args,\n      unsigned int flags)"
  },
  {
    "label": "AddTraceEventWithProcessId()",
    "kind": "Method",
    "detail": "Function (TraceEventHandle)",
    "insertText": "AddTraceEventWithProcessId(\n      char phase,\n      const unsigned char* category_group_enabled,\n      const char* name,\n      const char* scope,\n      uint64_t id,\n      ProcessId process_id,\n      TraceArguments* args,\n      unsigned int flags)"
  },
  {
    "label": "AddTraceEventWithThreadIdAndTimestamp()",
    "kind": "Method",
    "detail": "Function (TraceEventHandle)",
    "insertText": "AddTraceEventWithThreadIdAndTimestamp(\n      char phase,\n      const unsigned char* category_group_enabled,\n      const char* name,\n      const char* scope,\n      uint64_t id,\n      PlatformThreadId thread_id,\n      const TimeTicks& timestamp,\n      TraceArguments* args,\n      unsigned int flags)"
  },
  {
    "label": "AddTraceEventWithThreadIdAndTimestamp()",
    "kind": "Method",
    "detail": "Function (TraceEventHandle)",
    "insertText": "AddTraceEventWithThreadIdAndTimestamp(\n      char phase,\n      const unsigned char* category_group_enabled,\n      const char* name,\n      const char* scope,\n      uint64_t id,\n      uint64_t bind_id,\n      PlatformThreadId thread_id,\n      const TimeTicks& timestamp,\n      TraceArguments* args,\n      unsigned int flags)"
  },
  {
    "label": "AddTraceEventWithThreadIdAndTimestamps()",
    "kind": "Method",
    "detail": "Function (TraceEventHandle)",
    "insertText": "AddTraceEventWithThreadIdAndTimestamps(\n      char phase,\n      const unsigned char* category_group_enabled,\n      const char* name,\n      const char* scope,\n      uint64_t id,\n      uint64_t bind_id,\n      PlatformThreadId thread_id,\n      const TimeTicks& timestamp,\n      const ThreadTicks& thread_timestamp,\n      TraceArguments* args,\n      unsigned int flags)"
  },
  {
    "label": "AddMetadataEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetadataEvent(const unsigned char* category_group_enabled,\n                        const char* name,\n                        TraceArguments* args,\n                        unsigned int flags)"
  },
  {
    "label": "UpdateTraceEventDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTraceEventDuration(const unsigned char* category_group_enabled,\n                                const char* name,\n                                TraceEventHandle handle)"
  },
  {
    "label": "UpdateTraceEventDurationExplicit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTraceEventDurationExplicit(\n      const unsigned char* category_group_enabled,\n      const char* name,\n      TraceEventHandle handle,\n      PlatformThreadId thread_id,\n      bool explicit_timestamps,\n      const TimeTicks& now,\n      const ThreadTicks& thread_now)"
  },
  {
    "label": "EndFilteredEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFilteredEvent(const unsigned char* category_group_enabled,\n                        const char* name,\n                        TraceEventHandle handle)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (AutoLock)",
    "insertText": "lock(lock_)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (AutoLock)",
    "insertText": "lock(lock_)"
  },
  {
    "label": "MangleEventId()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "MangleEventId(uint64_t id)"
  },
  {
    "label": "ResetForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetForTesting()"
  },
  {
    "label": "SetProcessID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProcessID(ProcessId process_id)"
  },
  {
    "label": "SetProcessSortIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProcessSortIndex(int sort_index)"
  },
  {
    "label": "set_process_name()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_process_name(const std::string& process_name)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (AutoLock)",
    "insertText": "lock(lock_)"
  },
  {
    "label": "UpdateProcessLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProcessLabel(int label_id, const std::string& current_label)"
  },
  {
    "label": "RemoveProcessLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveProcessLabel(int label_id)"
  },
  {
    "label": "SetThreadSortIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadSortIndex(PlatformThreadId thread_id, int sort_index)"
  },
  {
    "label": "SetTimeOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeOffset(TimeDelta offset)"
  },
  {
    "label": "SetCurrentThreadBlocksMessageLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentThreadBlocksMessageLoop()"
  },
  {
    "label": "UpdateETWCategoryGroupEnabledFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateETWCategoryGroupEnabledFlags()"
  },
  {
    "label": "SetTraceBufferForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTraceBufferForTesting(std::unique_ptr<TraceBuffer> trace_buffer)"
  },
  {
    "label": "InitializePerfettoIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePerfettoIfNeeded()"
  },
  {
    "label": "SetEnabledImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabledImpl(const TraceConfig& trace_config,\n                      const perfetto::TraceConfig& perfetto_config)"
  },
  {
    "label": "OnIncrementalStateCleared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIncrementalStateCleared()"
  },
  {
    "label": "UpdateCategoryRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCategoryRegistry()"
  },
  {
    "label": "UpdateCategoryState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCategoryState(TraceCategory* category)"
  },
  {
    "label": "CreateFiltersForTraceConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFiltersForTraceConfig()"
  },
  {
    "label": "GetInternalOptionsFromTraceConfig()",
    "kind": "Method",
    "detail": "Function (InternalTraceOptions)",
    "insertText": "GetInternalOptionsFromTraceConfig(\n      const TraceConfig& config)"
  },
  {
    "label": "TraceLog()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "TraceLog(int generation)"
  },
  {
    "label": "EventToConsoleMessage()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "EventToConsoleMessage(char phase,\n                                    const TimeTicks& timestamp,\n                                    TraceEvent* trace_event)"
  },
  {
    "label": "FlushInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushInternal(const OutputCallback& cb,\n                     bool use_worker_thread,\n                     bool discard_events)"
  },
  {
    "label": "OnTraceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTraceData(const char* data, size_t size, bool has_more)"
  },
  {
    "label": "FlushCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCurrentThread(int generation, bool discard_events)"
  },
  {
    "label": "ConvertTraceEventsToTraceFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertTraceEventsToTraceFormat(\n      std::unique_ptr<TraceBuffer> logged_events,\n      const TraceLog::OutputCallback& flush_output_callback,\n      const ArgumentFilterPredicate& argument_filter_predicate)"
  },
  {
    "label": "FinishFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishFlush(int generation, bool discard_events)"
  },
  {
    "label": "OnFlushTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFlushTimeout(int generation, bool discard_events)"
  },
  {
    "label": "UseNextTraceBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseNextTraceBuffer()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (enabled_state_observers_)",
    "insertText": "GUARDED_BY(observers_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (async_observers_)",
    "insertText": "GUARDED_BY(observers_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (owned_enabled_state_observer_copy_)",
    "insertText": "GUARDED_BY(observers_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (incremental_state_observers_)",
    "insertText": "GUARDED_BY(observers_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (thread_names_)",
    "insertText": "GUARDED_BY(thread_info_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (thread_event_start_times_)",
    "insertText": "GUARDED_BY(thread_info_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (thread_colors_)",
    "insertText": "GUARDED_BY(thread_info_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (track_event_config_)",
    "insertText": "GUARDED_BY(track_event_lock_)"
  }
]