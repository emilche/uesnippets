[
  {
    "label": "FInterval1i",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInterval1i"
  },
  {
    "label": "TDynamicMeshScalarTriangleAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicMeshScalarTriangleAttribute"
  },
  {
    "label": "CompactAttributeValues()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" DynamicMesh / DynamicMesh3 . h \" # include \" DynamicMesh / DynamicMeshAttributeSet . h \" # include \" HAL / Platform . h \" # include \" IntBoxTypes . h \" namespace UE { namespace Geometry { struct FInterval1i ; template<RealType> class TDynamicMeshScalarTriangleAttribute ; bool)",
    "insertText": "CompactAttributeValues(const FDynamicMesh3& Mesh, TDynamicMeshScalarTriangleAttribute<int32>& TriangleAttrib, FInterval1i& OldMaxAttributeRangeOut, int& NewMaxAttributeValueOut, TArray<int32>& OldToNewMapOut, TArray<int32>& NewToOldMapOut, bool& bWasCompactOut)"
  },
  {
    "label": "CopyVertexUVsToOverlay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyVertexUVsToOverlay(const FDynamicMesh3& Mesh, FDynamicMeshUVOverlay& UVOverlayOut, bool bCompactElements = false)"
  },
  {
    "label": "CopyVertexNormalsToOverlay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyVertexNormalsToOverlay(const FDynamicMesh3& Mesh, FDynamicMeshNormalOverlay& NormalOverlayOut, bool bCompactElements = false)"
  }
]