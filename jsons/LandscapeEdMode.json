[
  {
    "label": "ALandscape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscape"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FLandscapeToolSplines",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeToolSplines"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "ULandscapeEditorObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeEditorObject"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "ULandscapeEditLayerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeEditLayerBase"
  },
  {
    "label": "FHeightmapToolTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeightmapToolTarget"
  },
  {
    "label": "FViewportActionKeyInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportActionKeyInput"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "ToolTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ToolTarget"
  },
  {
    "label": "FLandscapeToolCopyPaste",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeToolCopyPaste"
  },
  {
    "label": "ULandscapeLayerInfoObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeLayerInfoObject"
  },
  {
    "label": "FLandscapeToolMode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeToolMode"
  },
  {
    "label": "FLandscapeTargetListInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeTargetListInfo"
  },
  {
    "label": "ALandscapeProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeProxy"
  },
  {
    "label": "UMaterialInstanceConstant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceConstant"
  },
  {
    "label": "FLandscapeListInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeListInfo"
  },
  {
    "label": "FGizmoHistory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGizmoHistory"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEdModeLandscape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdModeLandscape"
  },
  {
    "label": "FProcessLandscapeTraceHitsResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcessLandscapeTraceHitsResult"
  },
  {
    "label": "FLandscapeLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeLayer"
  },
  {
    "label": "ALandscapeBlueprintBrushBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeBlueprintBrushBase"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" UnrealWidgetFwd . h \" # include \" LandscapeProxy . h \" # include \" EdMode . h \" # include \" LandscapeToolInterface . h \" # include \" Materials / MaterialInstanceConstant . h \" # include \" LandscapeInfo . h \" # include \" LandscapeLayerInfoObject . h \" # include \" LandscapeGizmoActiveActor . h \" # include \" LandscapeEdit . h \" # include \" LandscapeEditTypes . h \" # include \" Containers / Set . h \" # include \" LandscapeImportHelper . h \" class ALandscape ; class FCanvas ; class FEditorViewportClient ; class FLandscapeToolSplines ; class FPrimitiveDrawInterface ; class FSceneView ; class FUICommandList ; class FViewport ; class ULandscapeComponent ; class ULandscapeEditorObject ; class UViewportInteractor ; class ULandscapeEditLayerBase ; struct FHeightmapToolTarget ; struct FViewportActionKeyInput ; struct FViewportClick ; template<class ToolTarget> class FLandscapeToolCopyPaste ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLandscapeEdMode, Log, All)"
  },
  {
    "label": "FLandscapeToolMode()",
    "kind": "Method",
    "detail": "Function (class ULandscapeEditorObject ; class ULandscapeLayerInfoObject ; class FLandscapeToolSplines ; class UViewportInteractor ; struct FViewportActionKeyInput ; struct FHeightmapToolTarget ; template<TargetType> class FLandscapeToolCopyPaste ; struct FLandscapeToolMode { const FName ToolModeName ; int32 SupportedTargetTypes ; TArray<FName> ValidTools ; FName CurrentToolName ; FName CurrentTargetLayerName ;)",
    "insertText": "FLandscapeToolMode(FName InToolModeName, int32 InSupportedTargetTypes) : ToolModeName(InToolModeName) , SupportedTargetTypes(InSupportedTargetTypes)"
  },
  {
    "label": "FLandscapeTargetListInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FLandscapeTargetListInfo { FText TargetLayerDisplayName ; ELandscapeToolTargetType TargetType ; TWeakObjectPtr<ULandscapeInfo> LandscapeInfo ; TWeakObjectPtr<ULandscapeLayerInfoObject> LayerInfoObj ; FName LayerName ; TWeakObjectPtr<class ALandscapeProxy> Owner ; TWeakObjectPtr<class UMaterialInstanceConstant> ThumbnailMIC ; int32 DebugColorChannel ; uint32 bValid : 1 ; int32 LayerIndex ;)",
    "insertText": "FLandscapeTargetListInfo(FText InTargetLayerDisplayName, ELandscapeToolTargetType InTargetType, const FLandscapeInfoLayerSettings& InLayerSettings, int32 InLayerIndex) : TargetLayerDisplayName(InTargetLayerDisplayName) , TargetType(InTargetType) , LandscapeInfo(InLayerSettings.Owner->GetLandscapeInfo()) , LayerInfoObj(InLayerSettings.LayerInfoObj) , LayerName(InLayerSettings.LayerName) , Owner(InLayerSettings.Owner) , ThumbnailMIC(InLayerSettings.ThumbnailMIC) , DebugColorChannel(InLayerSettings.DebugColorChannel) , bValid(InLayerSettings.bValid) , LayerIndex(InLayerIndex)"
  },
  {
    "label": "FLandscapeTargetListInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLandscapeTargetListInfo(FText InTargetLayerDisplayName, ELandscapeToolTargetType InTargetType, ULandscapeInfo* InLandscapeInfo, int32 InLayerIndex) : TargetLayerDisplayName(InTargetLayerDisplayName) , TargetType(InTargetType) , LandscapeInfo(InLandscapeInfo) , LayerInfoObj(nullptr) , LayerName(NAME_None) , Owner(nullptr) , ThumbnailMIC(nullptr) , bValid(true) , LayerIndex(InLayerIndex)"
  },
  {
    "label": "GetLandscapeInfoLayerIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetLandscapeInfoLayerIndex()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Index = INDEX_NONE ;)",
    "insertText": "if(TargetType == ELandscapeToolTargetType::Weightmap)"
  },
  {
    "label": "GetLayerInfoIndex()",
    "kind": "Method",
    "detail": "Function (Index = LandscapeInfo ->)",
    "insertText": "GetLayerInfoIndex(LayerInfoObj.Get(), Owner.Get())"
  },
  {
    "label": "GetLayerInfoIndex()",
    "kind": "Method",
    "detail": "Function (} else { Index = LandscapeInfo ->)",
    "insertText": "GetLayerInfoIndex(LayerName, Owner.Get())"
  },
  {
    "label": "GetLandscapeInfoLayerSettings()",
    "kind": "Method",
    "detail": "Function (} } return Index ; } FLandscapeInfoLayerSettings*)",
    "insertText": "GetLandscapeInfoLayerSettings()"
  },
  {
    "label": "GetLandscapeProxy()",
    "kind": "Method",
    "detail": "Function (ALandscapeProxy* Proxy = LandscapeInfo ->)",
    "insertText": "GetLandscapeProxy()"
  },
  {
    "label": "GetTargetLayers()",
    "kind": "Method",
    "detail": "Function (const FName* TargetLayerName = Proxy ->)",
    "insertText": "GetTargetLayers().FindKey(FLandscapeTargetLayerSettings(LayerInfoObj.Get()))"
  },
  {
    "label": "AddTargetLayer()",
    "kind": "Method",
    "detail": "Function (} else { return& Proxy ->)",
    "insertText": "AddTargetLayer(LayerInfoObj->LayerName, FLandscapeTargetLayerSettings(LayerInfoObj.Get()))"
  },
  {
    "label": "GetLayerName()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } FName)",
    "insertText": "GetLayerName()"
  },
  {
    "label": "GetReimportFilePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReimportFilePath()"
  },
  {
    "label": "GetTargetLayerSettings()",
    "kind": "Method",
    "detail": "Function (const FLandscapeTargetLayerSettings* EditorLayerSettings =)",
    "insertText": "GetTargetLayerSettings()"
  },
  {
    "label": "SetReimportFilePath()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetReimportFilePath(const FString& InNewPath)"
  },
  {
    "label": "GetTargetLayers()",
    "kind": "Method",
    "detail": "Function (FLandscapeTargetLayerSettings LayerSettings =* Proxy ->)",
    "insertText": "GetTargetLayers().Find(*TargetLayerName)"
  },
  {
    "label": "UpdateTargetLayer()",
    "kind": "Method",
    "detail": "Function (LayerSettings . ReimportLayerFilePath = InNewPath ; Proxy ->)",
    "insertText": "UpdateTargetLayer(*TargetLayerName, LayerSettings)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(LandscapeInfo.IsValid())"
  },
  {
    "label": "FLandscapeListInfo()",
    "kind": "Method",
    "detail": "Function (LandscapeProxy -> ReimportHeightmapFilePath = InNewPath ; } } } } } ; struct FLandscapeListInfo { FString LandscapeName ; ULandscapeInfo* Info ; int32 ComponentQuads ; int32 NumSubsections ; int32 Width ; int32 Height ;)",
    "insertText": "FLandscapeListInfo(const TCHAR* InName, ULandscapeInfo* InInfo, int32 InComponentQuads, int32 InNumSubsections, int32 InWidth, int32 InHeight) : LandscapeName(InName) , Info(InInfo) , ComponentQuads(InComponentQuads) , NumSubsections(InNumSubsections) , Width(InWidth) , Height(InHeight)"
  },
  {
    "label": "FGizmoHistory()",
    "kind": "Method",
    "detail": "Function (} } ; struct FGizmoHistory { ALandscapeGizmoActor* Gizmo ; FString GizmoName ;)",
    "insertText": "FGizmoHistory(ALandscapeGizmoActor* InGizmo) : Gizmo(InGizmo)"
  },
  {
    "label": "GetPathName()",
    "kind": "Method",
    "detail": "Function (GizmoName = Gizmo ->)",
    "insertText": "GetPathName()"
  },
  {
    "label": "FGizmoHistory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGizmoHistory(ALandscapeGizmoActiveActor* InGizmo)"
  },
  {
    "label": "SpawnGizmoActor()",
    "kind": "Method",
    "detail": "Function (Gizmo = InGizmo ->)",
    "insertText": "SpawnGizmoActor()"
  },
  {
    "label": "CopyDataToGizmo()",
    "kind": "Method",
    "detail": "Function (} } ; enum class ENewLandscapePreviewMode : uint8 { None,NewLandscape,ImportLandscape,} ; enum class EImportExportMode : uint8 { Import,Export,} ; enum class ELandscapeEditingState : uint8 { Unknown,Enabled,BadFeatureLevel,PIEWorld,SIEWorld,NoLandscape,} ; class FEdModeLandscape : public FEdMode,public ILandscapeEdModeInterface { public : TObjectPtr<ULandscapeEditorObject> UISettings ; FText ErrorReasonOnMouseUp ; FLandscapeToolMode* CurrentToolMode ; FLandscapeTool* CurrentTool ; FLandscapeBrush* CurrentBrush ; FLandscapeToolTarget CurrentToolTarget ; FLandscapeBrush* GizmoBrush ; int32 CurrentToolIndex ; int32 CurrentBrushSetIndex ; ENewLandscapePreviewMode NewLandscapePreviewMode ; EImportExportMode ImportExportMode ; TWeakObjectPtr<ALandscapeGizmoActiveActor> CurrentGizmoActor ; FLandscapeToolCopyPaste<FHeightmapToolTarget>* CopyPasteTool ; void)",
    "insertText": "CopyDataToGizmo()"
  },
  {
    "label": "PasteDataFromGizmo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteDataFromGizmo()"
  },
  {
    "label": "ShowSplineProperties()",
    "kind": "Method",
    "detail": "Function (FLandscapeToolSplines* SplinesTool ; void)",
    "insertText": "ShowSplineProperties()"
  },
  {
    "label": "HasSelectedSplineSegments()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSelectedSplineSegments()"
  },
  {
    "label": "FlipSelectedSplineSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipSelectedSplineSegments()"
  },
  {
    "label": "GetSelectedSplineOwners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedSplineOwners(TSet<AActor*>& SelectedSplineOwners)"
  },
  {
    "label": "SelectAllSplineControlPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllSplineControlPoints()"
  },
  {
    "label": "SelectAllSplineSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllSplineSegments()"
  },
  {
    "label": "SelectAllConnectedSplineControlPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllConnectedSplineControlPoints()"
  },
  {
    "label": "SelectAllConnectedSplineSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllConnectedSplineSegments()"
  },
  {
    "label": "SplineMoveToCurrentLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplineMoveToCurrentLevel()"
  },
  {
    "label": "CanMoveSplineToCurrentLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMoveSplineToCurrentLevel()"
  },
  {
    "label": "UpdateSplineMeshLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSplineMeshLevels()"
  },
  {
    "label": "SetbUseAutoRotateOnJoin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetbUseAutoRotateOnJoin(bool InbAutoRotateOnJoin)"
  },
  {
    "label": "GetbUseAutoRotateOnJoin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetbUseAutoRotateOnJoin()"
  },
  {
    "label": "SetbAlwaysRotateForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetbAlwaysRotateForward(bool InbAlwaysRotateForward)"
  },
  {
    "label": "GetbAlwaysRotateForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetbAlwaysRotateForward()"
  },
  {
    "label": "ApplyRampTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRampTool()"
  },
  {
    "label": "CanApplyRampTool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanApplyRampTool()"
  },
  {
    "label": "ResetRampTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetRampTool()"
  },
  {
    "label": "ApplyMirrorTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyMirrorTool()"
  },
  {
    "label": "CenterMirrorTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CenterMirrorTool()"
  },
  {
    "label": "FEdModeLandscape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEdModeLandscape()"
  },
  {
    "label": "InitializeBrushes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeBrushes()"
  },
  {
    "label": "InitializeTool_Paint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_Paint()"
  },
  {
    "label": "InitializeTool_Smooth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_Smooth()"
  },
  {
    "label": "InitializeTool_Flatten()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_Flatten()"
  },
  {
    "label": "InitializeTool_Erosion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_Erosion()"
  },
  {
    "label": "InitializeTool_HydraErosion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_HydraErosion()"
  },
  {
    "label": "InitializeTool_Noise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_Noise()"
  },
  {
    "label": "InitializeTool_Retopologize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_Retopologize()"
  },
  {
    "label": "InitializeTool_NewLandscape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_NewLandscape()"
  },
  {
    "label": "InitializeTool_ResizeLandscape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_ResizeLandscape()"
  },
  {
    "label": "InitializeTool_ImportExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_ImportExport()"
  },
  {
    "label": "InitializeTool_Select()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_Select()"
  },
  {
    "label": "InitializeTool_AddComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_AddComponent()"
  },
  {
    "label": "InitializeTool_DeleteComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_DeleteComponent()"
  },
  {
    "label": "InitializeTool_MoveToLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_MoveToLevel()"
  },
  {
    "label": "InitializeTool_Mask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_Mask()"
  },
  {
    "label": "InitializeTool_CopyPaste()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_CopyPaste()"
  },
  {
    "label": "InitializeTool_Visibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_Visibility()"
  },
  {
    "label": "InitializeTool_Splines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_Splines()"
  },
  {
    "label": "InitializeTool_Ramp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_Ramp()"
  },
  {
    "label": "InitializeTool_Mirror()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_Mirror()"
  },
  {
    "label": "InitializeTool_BlueprintBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTool_BlueprintBrush()"
  },
  {
    "label": "UpdateToolModes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateToolModes()"
  },
  {
    "label": "PostUpdateLayerContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUpdateLayerContent()"
  },
  {
    "label": "GetLandscapeToolTargetType()",
    "kind": "Method",
    "detail": "Function (ELandscapeToolTargetType)",
    "insertText": "GetLandscapeToolTargetType()"
  },
  {
    "label": "GetLandscapeSelectedLayer()",
    "kind": "Method",
    "detail": "Function (const FLandscapeLayer*)",
    "insertText": "GetLandscapeSelectedLayer()"
  },
  {
    "label": "GetSelectedLandscapeLayerInfo()",
    "kind": "Method",
    "detail": "Function (ULandscapeLayerInfoObject*)",
    "insertText": "GetSelectedLandscapeLayerInfo()"
  },
  {
    "label": "OnCanHaveLayersContentChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCanHaveLayersContentChanged()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "UsesToolkits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesToolkits()"
  },
  {
    "label": "GetUICommandList()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FUICommandList>)",
    "insertText": "GetUICommandList()"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enter()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "MouseEnter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseEnter(FEditorViewportClient* InViewportClient, FViewport* InViewport, int32 MouseX, int32 MouseY)"
  },
  {
    "label": "MouseLeave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseLeave(FEditorViewportClient* InViewportClient, FViewport* Viewport)"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseMove(FEditorViewportClient* ViewportClient, FViewport* Viewport, int32 x, int32 y)"
  },
  {
    "label": "CapturedMouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CapturedMouseMove(FEditorViewportClient* InViewportClient, FViewport* InViewport, int32 InMouseX, int32 InMouseY)"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "DisallowMouseDeltaTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DisallowMouseDeltaTracking()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FEditorViewportClient* ViewportClient, float DeltaTime)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy* HitProxy, const FViewportClick& Click)"
  },
  {
    "label": "IsAdjustingBrush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAdjustingBrush(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "ChangeBrushSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeBrushSize(bool bIncrease)"
  },
  {
    "label": "ChangeBrushFalloff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeBrushFalloff(bool bIncrease)"
  },
  {
    "label": "ChangeBrushStrength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeBrushStrength(bool bIncrease)"
  },
  {
    "label": "ChangeAlphaBrushRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeAlphaBrushRotation(bool bIncrease)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(FEditorViewportClient* InViewportClient, FViewport* InViewport, FKey InKey, EInputEvent InEvent)"
  },
  {
    "label": "InputDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputDelta(FEditorViewportClient* InViewportClient, FViewport* InViewport, FVector& InDrag, FRotator& InRot, FVector& InScale)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD(FEditorViewportClient* ViewportClient, FViewport* Viewport, const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Select(AActor* InActor, bool bInSelected)"
  },
  {
    "label": "IsSelectionAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectionAllowed(AActor* InActor, bool bInSelection)"
  },
  {
    "label": "ActorSelectionChangeNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorSelectionChangeNotify()"
  },
  {
    "label": "ActorMoveNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorMoveNotify()"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo()"
  },
  {
    "label": "GetActionEditDuplicate()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditDuplicate()"
  },
  {
    "label": "GetActionEditDelete()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditDelete()"
  },
  {
    "label": "GetActionEditCut()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditCut()"
  },
  {
    "label": "GetActionEditCopy()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditCopy()"
  },
  {
    "label": "GetActionEditPaste()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditPaste()"
  },
  {
    "label": "ProcessEditDuplicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditDuplicate()"
  },
  {
    "label": "ProcessEditDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditDelete()"
  },
  {
    "label": "ProcessEditCut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditCut()"
  },
  {
    "label": "ProcessEditCopy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditCopy()"
  },
  {
    "label": "ProcessEditPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditPaste()"
  },
  {
    "label": "AllowWidgetMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowWidgetMove()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget()"
  },
  {
    "label": "GetWidgetAxisToDraw()",
    "kind": "Method",
    "detail": "Function (EAxisList::Type)",
    "insertText": "GetWidgetAxisToDraw(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "GetCustomDrawingCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomDrawingCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "GetCustomInputCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomInputCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCursor(EMouseCursor::Type& OutCursor)"
  },
  {
    "label": "GetOverrideCursorVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOverrideCursorVisibility(bool& bWantsOverride, bool& bHardwareCursorVisible, bool bSoftwareCursorVisible)"
  },
  {
    "label": "PreConvertMouseMovement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreConvertMouseMovement(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "PostConvertMouseMovement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostConvertMouseMovement(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "ForceRealTimeViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRealTimeViewports(const bool bEnable)"
  },
  {
    "label": "LandscapeMouseTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LandscapeMouseTrace(FEditorViewportClient* ViewportClient, float& OutHitX, float& OutHitY)"
  },
  {
    "label": "LandscapeMouseTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LandscapeMouseTrace(FEditorViewportClient* ViewportClient, FVector& OutHitLocation)"
  },
  {
    "label": "LandscapeMouseTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LandscapeMouseTrace(FEditorViewportClient* ViewportClient, int32 MouseX, int32 MouseY, float& OutHitX, float& OutHitY)"
  },
  {
    "label": "LandscapeMouseTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LandscapeMouseTrace(FEditorViewportClient* ViewportClient, int32 MouseX, int32 MouseY, FVector& OutHitLocation)"
  },
  {
    "label": "LandscapePlaneTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LandscapePlaneTrace(FEditorViewportClient* ViewportClient, const FPlane& Plane, FVector& OutHitLocation)"
  },
  {
    "label": "LandscapePlaneTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LandscapePlaneTrace(FEditorViewportClient* ViewportClient, int32 MouseX, int32 MouseY, const FPlane& Plane, FVector& OutHitLocation)"
  },
  {
    "label": "LandscapeTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LandscapeTrace(const FVector& InRayOrigin, const FVector& InRayEnd, const FVector& InDirection, FVector& OutHitLocation)"
  },
  {
    "label": "ProcessLandscapeTraceHits()",
    "kind": "Method",
    "detail": "Function (struct FProcessLandscapeTraceHitsResult ; bool)",
    "insertText": "ProcessLandscapeTraceHits(const TArray<FHitResult>& InResults, FProcessLandscapeTraceHitsResult& OutLandscapeTraceHitsResult)"
  },
  {
    "label": "SetCurrentToolMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentToolMode(FName ToolModeName, bool bRestoreCurrentTool = true)"
  },
  {
    "label": "SetCurrentTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentTool(FName ToolName, FName TargetLayerName = NAME_None)"
  },
  {
    "label": "SetCurrentTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentTool(int32 ToolIdx, FName TargetLayerName = NAME_None)"
  },
  {
    "label": "SetCurrentTargetLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentTargetLayer(FName TargetLayerName, TWeakObjectPtr<ULandscapeLayerInfoObject> LayerInfo)"
  },
  {
    "label": "SetCurrentBrushSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentBrushSet(FName BrushSetName)"
  },
  {
    "label": "SetCurrentBrushSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentBrushSet(int32 BrushSetIndex)"
  },
  {
    "label": "SetCurrentBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentBrush(FName BrushName)"
  },
  {
    "label": "SetCurrentBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentBrush(int32 BrushIndex)"
  },
  {
    "label": "UpdateBrushList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBrushList()"
  },
  {
    "label": "GetBrushList()",
    "kind": "Method",
    "detail": "Function (const TArray<ALandscapeBlueprintBrushBase*>&)",
    "insertText": "GetBrushList()"
  },
  {
    "label": "GetTargetList()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<FLandscapeTargetListInfo>>&)",
    "insertText": "GetTargetList()"
  },
  {
    "label": "GetTargetLandscapeMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetTargetLandscapeMaterial()"
  },
  {
    "label": "GetTargetLayerStartingIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTargetLayerStartingIndex()"
  },
  {
    "label": "GetLandscapeList()",
    "kind": "Method",
    "detail": "Function (const TArray<FLandscapeListInfo>&)",
    "insertText": "GetLandscapeList()"
  },
  {
    "label": "UpdateLandscapeList()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "UpdateLandscapeList()"
  },
  {
    "label": "UpdateTargetList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTargetList()"
  },
  {
    "label": "SetTargetLandscape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetLandscape(const TWeakObjectPtr<ULandscapeInfo>& InLandscapeInfo)"
  },
  {
    "label": "CanEditCurrentTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditCurrentTarget(FText* Reason = nullptr)"
  },
  {
    "label": "UpdateTargetLayerDisplayOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTargetLayerDisplayOrder(ELandscapeLayerDisplayMode InTargetDisplayOrder)"
  },
  {
    "label": "MoveTargetLayerDisplayOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveTargetLayerDisplayOrder(int32 IndexToMove, int32 IndexToDestination)"
  },
  {
    "label": "RequestUpdateLayerUsageInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestUpdateLayerUsageInformation()"
  },
  {
    "label": "ShouldShowLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowLayer(TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "UpdateLayerUsageInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLayerUsageInformation(TWeakObjectPtr<ULandscapeLayerInfoObject>* LayerInfoObjectThatChanged = nullptr)"
  },
  {
    "label": "OnLandscapeMaterialChangedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLandscapeMaterialChangedDelegate()"
  },
  {
    "label": "RefreshDetailPanel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshDetailPanel()"
  },
  {
    "label": "IsGridBased()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGridBased()"
  },
  {
    "label": "HasValidLandscapeEditLayerSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidLandscapeEditLayerSelection()"
  },
  {
    "label": "CanHaveLandscapeLayersContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHaveLandscapeLayersContent()"
  },
  {
    "label": "HasLandscapeLayersContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLandscapeLayersContent()"
  },
  {
    "label": "GetLayerCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLayerCount()"
  },
  {
    "label": "SetCurrentLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentLayer(int32 InLayerIndex)"
  },
  {
    "label": "GetCurrentLayerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentLayerIndex()"
  },
  {
    "label": "GetLandscape()",
    "kind": "Method",
    "detail": "Function (ALandscape*)",
    "insertText": "GetLandscape()"
  },
  {
    "label": "GetLayer()",
    "kind": "Method",
    "detail": "Function (const struct FLandscapeLayer*)",
    "insertText": "GetLayer(int32 InLayerIndex)"
  },
  {
    "label": "GetLayerName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetLayerName(int32 InLayerIndex)"
  },
  {
    "label": "SetLayerName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayerName(int32 InLayerIndex, const FName& InName)"
  },
  {
    "label": "CanRenameLayerTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRenameLayerTo(int32 InLayerIndex, const FName& InNewName)"
  },
  {
    "label": "SetLayerAlpha()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayerAlpha(int32 InLayerIndex, float InAlpha)"
  },
  {
    "label": "GetLayerAlpha()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLayerAlpha(int32 InLayerIndex)"
  },
  {
    "label": "GetEditLayer()",
    "kind": "Method",
    "detail": "Function (const ULandscapeEditLayerBase*)",
    "insertText": "GetEditLayer(int32 InLayerIndex)"
  },
  {
    "label": "GetClampedLayerAlpha()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetClampedLayerAlpha(float InLayerAlpha)"
  },
  {
    "label": "SetLayerVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayerVisibility(bool InVisible, int32 InLayerIndex)"
  },
  {
    "label": "IsLayerVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLayerVisible(int32 InLayerIndex)"
  },
  {
    "label": "IsLayerLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLayerLocked(int32 InLayerIndex)"
  },
  {
    "label": "IsLayerAlphaVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLayerAlphaVisible(int32 InLayerIndex)"
  },
  {
    "label": "SetLayerLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayerLocked(int32 InLayerIndex, bool bInLocked)"
  },
  {
    "label": "GetCurrentLayer()",
    "kind": "Method",
    "detail": "Function (const struct FLandscapeLayer*)",
    "insertText": "GetCurrentLayer()"
  },
  {
    "label": "GetCurrentLayerGuid()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetCurrentLayerGuid()"
  },
  {
    "label": "IsCurrentLayerBlendSubstractive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrentLayerBlendSubstractive(const TWeakObjectPtr<ULandscapeLayerInfoObject>& InLayerInfoObj)"
  },
  {
    "label": "SetCurrentLayerSubstractiveBlendStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentLayerSubstractiveBlendStatus(bool InStatus, const TWeakObjectPtr<ULandscapeLayerInfoObject>& InLayerInfoObj)"
  },
  {
    "label": "UpdateLandscapeSplines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLandscapeSplines(bool bUpdateOnlySelected = false)"
  },
  {
    "label": "AutoUpdateDirtyLandscapeSplines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoUpdateDirtyLandscapeSplines()"
  },
  {
    "label": "CanEditLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditLayer(FText* Reason = nullptr, const FLandscapeLayer* InLayer = nullptr)"
  },
  {
    "label": "AddBrushToCurrentLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBrushToCurrentLayer(class ALandscapeBlueprintBrushBase* InBrush)"
  },
  {
    "label": "RemoveBrushFromCurrentLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBrushFromCurrentLayer(int32 InBrushIndex)"
  },
  {
    "label": "GetBrushForCurrentLayer()",
    "kind": "Method",
    "detail": "Function (class ALandscapeBlueprintBrushBase*)",
    "insertText": "GetBrushForCurrentLayer(int32 InBrushIndex)"
  },
  {
    "label": "GetBrushesForCurrentLayer()",
    "kind": "Method",
    "detail": "Function (TArray<class ALandscapeBlueprintBrushBase*>)",
    "insertText": "GetBrushesForCurrentLayer()"
  },
  {
    "label": "ShowOnlySelectedBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowOnlySelectedBrush(class ALandscapeBlueprintBrushBase* InBrush)"
  },
  {
    "label": "DuplicateBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateBrush(class ALandscapeBlueprintBrushBase* InBrush)"
  },
  {
    "label": "NeedToFillEmptyMaterialLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedToFillEmptyMaterialLayers()"
  },
  {
    "label": "RequestLayersContentUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestLayersContentUpdate(ELandscapeLayerUpdateMode InUpdateMode)"
  },
  {
    "label": "RequestLayersContentUpdateForceAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestLayersContentUpdateForceAll(ELandscapeLayerUpdateMode InUpdateMode = ELandscapeLayerUpdateMode::Update_All)"
  },
  {
    "label": "OnLevelActorAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelActorAdded(AActor* InActor)"
  },
  {
    "label": "OnLevelActorRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelActorRemoved(AActor* InActor)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(FEdModeLandscape, FTargetsListUpdated)"
  },
  {
    "label": "OnPreSaveWorld()",
    "kind": "Method",
    "detail": "Function (FTargetsListUpdated TargetsListUpdated ; void)",
    "insertText": "OnPreSaveWorld(class UWorld* InWorld, FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "HandleLevelsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLevelsChanged()"
  },
  {
    "label": "OnMaterialCompilationFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMaterialCompilationFinished(UMaterialInterface* MaterialInterface)"
  },
  {
    "label": "ReimportData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReimportData(const FLandscapeTargetListInfo& TargetInfo)"
  },
  {
    "label": "ImportData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportData(const FLandscapeTargetListInfo& TargetInfo, const FString& Filename)"
  },
  {
    "label": "ImportHeightData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportHeightData(ULandscapeInfo* LandscapeInfo, const FGuid& LayerGuid, const FString& Filename, const FIntRect& ImportRegionVerts, ELandscapeImportTransformType TransformType = ELandscapeImportTransformType::ExpandCentered, FIntPoint Offset = FIntPoint(0,0), const ELandscapeLayerPaintingRestriction& PaintRestriction = ELandscapeLayerPaintingRestriction::None, bool bFlipYAxis = false)"
  },
  {
    "label": "ImportWeightData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportWeightData(ULandscapeInfo* LandscapeInfo, const FGuid& LayerGuid, ULandscapeLayerInfoObject* LayerInfo, const FString& Filename, const FIntRect& ImportRegionVerts, ELandscapeImportTransformType TransformType = ELandscapeImportTransformType::ExpandCentered, FIntPoint Offset = FIntPoint(0, 0), const ELandscapeLayerPaintingRestriction& PaintRestriction = ELandscapeLayerPaintingRestriction::None, bool bFlipYAxis = false)"
  },
  {
    "label": "UseSingleFileImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseSingleFileImport()"
  },
  {
    "label": "ChangeComponentSetting()",
    "kind": "Method",
    "detail": "Function (} ALandscape*)",
    "insertText": "ChangeComponentSetting(int32 NumComponentsX, int32 NumComponentsY, int32 InNumSubsections, int32 InSubsectionSizeQuads, bool bResample)"
  },
  {
    "label": "DeleteLandscapeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteLandscapeComponents(ULandscapeInfo* LandscapeInfo, TSet<ULandscapeComponent*> ComponentsToDelete)"
  },
  {
    "label": "GetEditingState()",
    "kind": "Method",
    "detail": "Function (TArray<FLandscapeToolMode> LandscapeToolModes ; TArray<TUniquePtr<FLandscapeTool>> LandscapeTools ; TArray<FLandscapeBrushSet> LandscapeBrushSets ; ELandscapeEditingState)",
    "insertText": "GetEditingState()"
  },
  {
    "label": "IsEditingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditingEnabled()"
  },
  {
    "label": "SetLandscapeInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLandscapeInfo(ULandscapeInfo* InLandscapeInfo)"
  },
  {
    "label": "GetAccumulatedAllLandscapesResolution()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAccumulatedAllLandscapesResolution()"
  },
  {
    "label": "IsLandscapeResolutionCompliant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLandscapeResolutionCompliant()"
  },
  {
    "label": "DoesCurrentToolAffectEditLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesCurrentToolAffectEditLayers()"
  },
  {
    "label": "GetLandscapeResolutionErrorText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLandscapeResolutionErrorText()"
  },
  {
    "label": "GetNewLandscapeResolutionX()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNewLandscapeResolutionX()"
  },
  {
    "label": "GetNewLandscapeResolutionY()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNewLandscapeResolutionY()"
  }
]