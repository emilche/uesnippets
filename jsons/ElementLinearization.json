[
  {
    "label": "FElementLinearization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FElementLinearization"
  },
  {
    "label": "TVector3Arrays",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TVector3Arrays"
  },
  {
    "label": "TVector2Arrays",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TVector2Arrays"
  },
  {
    "label": "FElementLinearization()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<CoreMinimal . h> # include \" IndexTypes . h \" # include \" VectorTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; class FElementLinearization { public :)",
    "insertText": "FElementLinearization()"
  },
  {
    "label": "ToId()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>&)",
    "insertText": "ToId()"
  },
  {
    "label": "MaxId()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "MaxId()"
  },
  {
    "label": "NumIndices()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumIndices()"
  },
  {
    "label": "IsValidId()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidId(int32 Id)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(int32 Index)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetIndex(int32 Id)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ToIdMap .)",
    "insertText": "Empty()"
  },
  {
    "label": "Populate()",
    "kind": "Method",
    "detail": "Function (} template<IterableType> void)",
    "insertText": "Populate(const int32 MaxId, const int32 Count, IterableType Iterable)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (ToIndexMap .)",
    "insertText": "SetNumUninitialized(MaxId)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (ToIdMap .)",
    "insertText": "SetNumUninitialized(Count)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ToIndexMap [ i ] = IndexConstants::InvalidID ; } { int32 N = 0 ;)",
    "insertText": "for(int32 Id : Iterable)"
  },
  {
    "label": "FElementLinearization()",
    "kind": "Method",
    "detail": "Function (ToIdMap [ N ] = Id ; ToIndexMap [ Id ] = N ; N + + ; } } } protected : TArray<int32> ToIdMap ; TArray<int32> ToIndexMap ; private :)",
    "insertText": "FElementLinearization(const FElementLinearization&)"
  },
  {
    "label": "TVector3Arrays()",
    "kind": "Method",
    "detail": "Function (} ; template<RealType> class TVector3Arrays { protected : TArray<RealType> XVector ; TArray<RealType> YVector ; TArray<RealType> ZVector ; public :)",
    "insertText": "TVector3Arrays(int32 Size)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (XVector .)",
    "insertText": "SetNum(Size)"
  },
  {
    "label": "TVector3Arrays()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TVector3Arrays()"
  },
  {
    "label": "SetZero()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetZero(int32 NumElements)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (XVector .)",
    "insertText": "Reset(0)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (XVector .)",
    "insertText": "SetNumZeroed(NumElements, EAllowShrinking::No)"
  },
  {
    "label": "bHasSize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "bHasSize(int32 Size)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (Size = - 1 ; } return Size ; } RealType)",
    "insertText": "X(int32 i)"
  },
  {
    "label": "SetY()",
    "kind": "Method",
    "detail": "Function (XVector [ i ] = Value ; } void)",
    "insertText": "SetY(int32 i, const RealType& Value)"
  },
  {
    "label": "SetZ()",
    "kind": "Method",
    "detail": "Function (YVector [ i ] = Value ; } void)",
    "insertText": "SetZ(int32 i, const RealType& Value)"
  },
  {
    "label": "SetXYZ()",
    "kind": "Method",
    "detail": "Function (ZVector [ i ] = Value ; } void)",
    "insertText": "SetXYZ(int32 i, const TVector<RealType>& Value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (XVector [ i ] = Value . X ; YVector [ i ] = Value . Y ; ZVector [ i ] = Value . Z ; } TVector<RealType>)",
    "insertText": "Get(int32 i)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(int32 i, const TVector<RealType>& Value)"
  },
  {
    "label": "TVector2Arrays()",
    "kind": "Method",
    "detail": "Function (XVector [ i ] = Value . X ; YVector [ i ] = Value . Y ; ZVector [ i ] = Value . Z ; } } ; template<RealType> class TVector2Arrays { protected : TArray<RealType> XVector ; TArray<RealType> YVector ; public :)",
    "insertText": "TVector2Arrays(int32 Size)"
  },
  {
    "label": "TVector2Arrays()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TVector2Arrays()"
  },
  {
    "label": "SetXY()",
    "kind": "Method",
    "detail": "Function (YVector [ i ] = Value ; } void)",
    "insertText": "SetXY(int32 i, const UE::Math::TVector2<RealType>& Value)"
  }
]