[
  {
    "label": "ConnectionContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConnectionContext"
  },
  {
    "label": "MediaEngineInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MediaEngineInterface"
  },
  {
    "label": "SenderOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SenderOptions"
  },
  {
    "label": "MediaDescriptionOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MediaDescriptionOptions"
  },
  {
    "label": "MediaSessionOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MediaSessionOptions"
  },
  {
    "label": "MediaSessionDescriptionFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MediaSessionDescriptionFactory"
  },
  {
    "label": "AudioVideoRtpHeaderExtensions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioVideoRtpHeaderExtensions"
  },
  {
    "label": "AddAudioSender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAudioSender(const std::string& track_id,\n                      const std::vector<std::string>& stream_ids)"
  },
  {
    "label": "AddVideoSender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVideoSender(const std::string& track_id,\n                      const std::vector<std::string>& stream_ids,\n                      const std::vector<RidDescription>& rids,\n                      const SimulcastLayerList& simulcast_layers,\n                      int num_sim_layers)"
  },
  {
    "label": "AddSenderInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSenderInternal(const std::string& track_id,\n                         const std::vector<std::string>& stream_ids,\n                         const std::vector<RidDescription>& rids,\n                         const SimulcastLayerList& simulcast_layers,\n                         int num_sim_layers)"
  },
  {
    "label": "HasMediaDescription()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "HasMediaDescription(MEDIA_TYPE_AUDIO)"
  },
  {
    "label": "HasMediaDescription()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "HasMediaDescription(MEDIA_TYPE_VIDEO)"
  },
  {
    "label": "HasMediaDescription()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "HasMediaDescription(MEDIA_TYPE_DATA)"
  },
  {
    "label": "MediaSessionDescriptionFactory()",
    "kind": "Method",
    "detail": "Function (MediaEngine)",
    "insertText": "MediaSessionDescriptionFactory(cricket::MediaEngineInterface* media_engine,\n                                 bool rtx_enabled,\n                                 rtc::UniqueRandomIdGenerator* ssrc_generator,\n                                 const TransportDescriptionFactory* factory)"
  },
  {
    "label": "set_audio_codecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_audio_codecs(const AudioCodecs& send_codecs,\n                        const AudioCodecs& recv_codecs)"
  },
  {
    "label": "set_video_codecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_video_codecs(const VideoCodecs& send_codecs,\n                        const VideoCodecs& recv_codecs)"
  },
  {
    "label": "ComputeAudioCodecsIntersectionAndUnion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeAudioCodecsIntersectionAndUnion()"
  },
  {
    "label": "ComputeVideoCodecsIntersectionAndUnion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeVideoCodecsIntersectionAndUnion()"
  },
  {
    "label": "IsMediaContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMediaContent(const ContentInfo* content)"
  },
  {
    "label": "IsAudioContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAudioContent(const ContentInfo* content)"
  },
  {
    "label": "IsVideoContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVideoContent(const ContentInfo* content)"
  },
  {
    "label": "IsDataContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDataContent(const ContentInfo* content)"
  },
  {
    "label": "IsUnsupportedContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnsupportedContent(const ContentInfo* content)"
  },
  {
    "label": "GetSupportedAudioSdesCryptoSuites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSupportedAudioSdesCryptoSuites(\n    const webrtc::CryptoOptions& crypto_options,\n    std::vector<int>* crypto_suites)"
  },
  {
    "label": "GetSupportedVideoSdesCryptoSuites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSupportedVideoSdesCryptoSuites(\n    const webrtc::CryptoOptions& crypto_options,\n    std::vector<int>* crypto_suites)"
  },
  {
    "label": "GetSupportedDataSdesCryptoSuites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSupportedDataSdesCryptoSuites(\n    const webrtc::CryptoOptions& crypto_options,\n    std::vector<int>* crypto_suites)"
  },
  {
    "label": "GetSupportedAudioSdesCryptoSuiteNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSupportedAudioSdesCryptoSuiteNames(\n    const webrtc::CryptoOptions& crypto_options,\n    std::vector<std::string>* crypto_suite_names)"
  },
  {
    "label": "GetSupportedVideoSdesCryptoSuiteNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSupportedVideoSdesCryptoSuiteNames(\n    const webrtc::CryptoOptions& crypto_options,\n    std::vector<std::string>* crypto_suite_names)"
  },
  {
    "label": "GetSupportedDataSdesCryptoSuiteNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSupportedDataSdesCryptoSuiteNames(\n    const webrtc::CryptoOptions& crypto_options,\n    std::vector<std::string>* crypto_suite_names)"
  }
]