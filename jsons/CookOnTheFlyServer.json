[
  {
    "label": "FAssetRegistryGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryGenerator"
  },
  {
    "label": "FAsyncIODelete",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncIODelete"
  },
  {
    "label": "FDiffModeCookServerUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiffModeCookServerUtils"
  },
  {
    "label": "FIterativeValidatePackageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIterativeValidatePackageWriter"
  },
  {
    "label": "FLayeredCookArtifactReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLayeredCookArtifactReader"
  },
  {
    "label": "FLooseFilesCookArtifactReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLooseFilesCookArtifactReader"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FSavePackageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSavePackageContext"
  },
  {
    "label": "IAssetRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistry"
  },
  {
    "label": "ICookArtifactReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookArtifactReader"
  },
  {
    "label": "ICookedPackageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookedPackageWriter"
  },
  {
    "label": "IPlugin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlugin"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBeginCookContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBeginCookContext"
  },
  {
    "label": "FCrashContextExtendedWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrashContextExtendedWriter"
  },
  {
    "label": "FGenericMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericMemoryStats"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FResourceSizeEx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResourceSizeEx"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FAssetRegistryMPCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryMPCollector"
  },
  {
    "label": "FBuildDefinitions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildDefinitions"
  },
  {
    "label": "FCachedDependencies",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCachedDependencies"
  },
  {
    "label": "FCookDirector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookDirector"
  },
  {
    "label": "FCookGCDiagnosticContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookGCDiagnosticContext"
  },
  {
    "label": "FCookSandbox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookSandbox"
  },
  {
    "label": "FCookWorkerClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookWorkerClient"
  },
  {
    "label": "FCookWorkerServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookWorkerServer"
  },
  {
    "label": "FDiagnostics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiagnostics"
  },
  {
    "label": "FODSCClientData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FODSCClientData"
  },
  {
    "label": "FPackagePreloader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePreloader"
  },
  {
    "label": "FPackageWriterMPCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageWriterMPCollector"
  },
  {
    "label": "FRequestCluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestCluster"
  },
  {
    "label": "FRequestQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestQueue"
  },
  {
    "label": "FSaveCookedPackageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSaveCookedPackageContext"
  },
  {
    "label": "FWorkerRequestsLocal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkerRequestsLocal"
  },
  {
    "label": "FWorkerRequestsRemote",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkerRequestsRemote"
  },
  {
    "label": "ICookOnTheFlyRequestManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyRequestManager"
  },
  {
    "label": "ICookOnTheFlyNetworkServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyNetworkServer"
  },
  {
    "label": "IWorkerRequests",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWorkerRequests"
  },
  {
    "label": "FBeginCookConfigSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBeginCookConfigSettings"
  },
  {
    "label": "FCachedObjectInOuter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedObjectInOuter"
  },
  {
    "label": "FConstructPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstructPackageData"
  },
  {
    "label": "FCookByTheBookOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookByTheBookOptions"
  },
  {
    "label": "FCookOnTheFlyOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookOnTheFlyOptions"
  },
  {
    "label": "FCookerTimer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookerTimer"
  },
  {
    "label": "FCookGenerationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookGenerationInfo"
  },
  {
    "label": "FCookSavePackageContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookSavePackageContext"
  },
  {
    "label": "FDiscoveredPlatformSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiscoveredPlatformSet"
  },
  {
    "label": "FGenerationHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenerationHelper"
  },
  {
    "label": "FInitializeConfigSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitializeConfigSettings"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "FPackageDatas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageDatas"
  },
  {
    "label": "FPackageTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageTracker"
  },
  {
    "label": "FPendingCookedPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingCookedPlatformData"
  },
  {
    "label": "FPlatformManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformManager"
  },
  {
    "label": "FTickStackData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTickStackData"
  },
  {
    "label": "FRegisteredCookPackageSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRegisteredCookPackageSplitter"
  },
  {
    "label": "FStatHistoryInt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatHistoryInt"
  },
  {
    "label": "UCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookOnTheFlyServer"
  },
  {
    "label": "FPollable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPollable"
  },
  {
    "label": "EManualTrigger",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EManualTrigger"
  },
  {
    "label": "FPollableQueueKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPollableQueueKey"
  },
  {
    "label": "FCookOnTheFlyServerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookOnTheFlyServerInterface"
  },
  {
    "label": "INetworkFileServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INetworkFileServer"
  },
  {
    "label": "ECookOnTheSideResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECookOnTheSideResult"
  },
  {
    "label": "FCookByTheBookStartupOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookByTheBookStartupOptions"
  },
  {
    "label": "FCookOnTheFlyStartupOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookOnTheFlyStartupOptions"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FActivePackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActivePackageData"
  },
  {
    "label": "FScopedActivePackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedActivePackage"
  },
  {
    "label": "FScopeFindCookReferences",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeFindCookReferences"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" Containers / RingBuffer . h \" # include \" CookOnTheSide / CookLog . h \" # include \" CookPackageSplitter . h \" # include \" HAL / PlatformMemory . h \" # include \" INetworkFileSystemModule . h \" # include \" Logging / LogMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Optional . h \" # include \" Misc / PackageAccessTracking . h \" # include \" Templates / Function . h \" # include \" Templates / RefCounting . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" TickableEditorObject . h \" # include \" UObject / ICookInfo . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectHandleTracking . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Package . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / WeakObjectPtr . h \" # include \" CookOnTheFlyServer . generated . h \" class FAssetRegistryGenerator ; class FAsyncIODelete ; class FDiffModeCookServerUtils ; class FIterativeValidatePackageWriter ; class FLayeredCookArtifactReader ; class FLooseFilesCookArtifactReader ; class FReferenceCollector ; class FSavePackageContext ; class IAssetRegistry ; class ICookArtifactReader ; class ICookedPackageWriter ; class IPlugin ; class ITargetPlatform ; enum class EPackageWriterResult : uint8 ; enum class ODSCRecompileCommand ; struct FBeginCookContext ; struct FCrashContextExtendedWriter ; struct FGenericMemoryStats ; struct FPropertyChangedEvent ; struct FResourceSizeEx ; namespace UE::LinkerLoad { enum class EImportBehavior : uint8 ; } enum class ECookInitializationFlags { None = 0 x00000000,Iterative = 0 x00000002,SkipEditorContent = 0 x00000004,Unversioned = 0 x00000008,AutoTick = 0 x00000010,AsyncSave = 0 x00000020,IncludeServerMaps = 0 x00000080,BuildDDCInBackground = 0 x00000200,OutputVerboseCookerWarnings = 0 x00000800,EnablePartialGC = 0 x00001000,TestCook = 0 x00002000,LogDebugInfo = 0 x00008000,IterateSharedBuild = 0 x00010000,IgnoreIniSettingsOutOfDate = 0 x00020000,IgnoreScriptPackagesOutOfDate = 0 x00040000,CookEditorOptional = 0 x00100000,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECookInitializationFlags)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class ECookByTheBookOptions { None = 0 x00000000,CookAll = 0 x00000001,MapsOnly = 0 x00000002,NoDevContent = 0 x00000004,ForceDisableCompressed = 0 x00000010,ForceEnableCompressed = 0 x00000020,ForceDisableSaveGlobalShaders = 0 x00000040,NoGameAlwaysCookPackages = 0 x00000080,NoAlwaysCookMaps = 0 x00000100,NoDefaultMaps = 0 x00000200,NoStartupPackages = 0 x00000400,NoInputPackages = 0 x00000800,SkipSoftReferences = 0 x00001000,SkipHardReferences = 0 x00002000,CookAgainstFixedBase = 0 x00010000,DlcLoadMainAssetRegistry = 0 x00020000,ZenStore = 0 x00040000,DlcReevaluateUncookedAssets = 0 x00080000,RunAssetValidation = 0 x00100000,RunMapValidation = 0 x00200000,ValidationErrorsAreFatal = 0 x00400000,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECookByTheBookOptions)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class ECookListOptions { None = 0 x00000000,ShowRejected = 0 x00000001,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECookListOptions)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "IsCookByTheBookMode()",
    "kind": "Method",
    "detail": "Function (enum Type : int { CookOnTheFly,CookOnTheFlyFromTheEditor,CookByTheBookFromTheEditor,CookByTheBook,CookWorker,} ; } bool)",
    "insertText": "IsCookByTheBookMode(ECookMode::Type CookMode)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0 x00000000,MarkupInUsePackages = 0 x00000001,HideProgressDisplay = 0 x00000002,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECookTickFlags)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (namespace UE::Cook { enum class EMPCookGeneratorSplit : uint8 { AnyWorker,AllOnSameWorker,SomeOnSameWorker,NoneOnSameWorker,} ; } namespace UE::Cook { class FAssetRegistryMPCollector ; class FBuildDefinitions ; class FCachedDependencies ; class FCookDirector ; class FCookGCDiagnosticContext ; class FCookSandbox ; class FCookWorkerClient ; class FCookWorkerServer ; class FDiagnostics ; class FODSCClientData ; class FPackagePreloader ; class FPackageWriterMPCollector ; class FRequestCluster ; class FRequestQueue ; class FSaveCookedPackageContext ; class FWorkerRequestsLocal ; class FWorkerRequestsRemote ; class ICookOnTheFlyRequestManager ; class ICookOnTheFlyNetworkServer ; class IWorkerRequests ; enum class ECachedCookedPlatformDataEvent : uint8 ; enum class EPackageState : uint8 ; enum class EPollStatus : uint8 ; enum class EStateChangeReason : uint8 ; enum class ESuppressCookReason : uint8 ; enum class ESendFlags : uint8 ; enum class EUrgency : uint8 ; struct FBeginCookConfigSettings ; struct FCachedObjectInOuter ; struct FConstructPackageData ; struct FCookByTheBookOptions ; struct FCookOnTheFlyOptions ; struct FCookerTimer ; struct FCookGenerationInfo ; struct FCookSavePackageContext ; struct FDiscoveredPlatformSet ; struct FGenerationHelper ; struct FInitializeConfigSettings ; struct FPackageData ; struct FPackageDatas ; struct FPackageTracker ; struct FPendingCookedPlatformData ; struct FPlatformManager ; struct FTickStackData ; } namespace UE::Cook::Private { class FRegisteredCookPackageSplitter ; } namespace UE::Cook { struct FStatHistoryInt { public : void)",
    "insertText": "Initialize(int64 InitialValue)"
  },
  {
    "label": "AddInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInstance(int64 CurrentValue)"
  },
  {
    "label": "GetMinimum()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetMinimum()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UNREALED_API UCookOnTheFlyServer(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "UCookOnTheFlyServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCookOnTheFlyServer(FVTableHelper& Helper)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : using FPollFunction = TUniqueFunction<)",
    "insertText": "void(UE::Cook::FTickStackData&)"
  },
  {
    "label": "FPollable()",
    "kind": "Method",
    "detail": "Function (struct FPollable : public FRefCountBase { public : enum EManualTrigger { } ;)",
    "insertText": "FPollable(const TCHAR* InDebugName, float InPeriodSeconds, float InPeriodIdleSeconds, FPollFunction&& InFunction)"
  },
  {
    "label": "FPollable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPollable(const TCHAR* InDebugName, EManualTrigger, FPollFunction&& InFunction)"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Trigger(UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "RunNow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunNow(UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (public : const TCHAR* DebugName =)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "RunDuringPump()",
    "kind": "Method",
    "detail": "Function (FPollFunction PollFunction ; double NextTimeIdleSeconds = 0 . ; float PeriodSeconds = 6 0 . f ; float PeriodIdleSeconds = 5 . f ; public : void)",
    "insertText": "RunDuringPump(UE::Cook::FTickStackData& StackData, double& OutNewCurrentTime, double& OutNextTimeSeconds)"
  },
  {
    "label": "TriggerInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerInternal(UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "RunNowInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunNowInternal(UCookOnTheFlyServer& COTFS, double LastTimeRun)"
  },
  {
    "label": "FPollableQueueKey()",
    "kind": "Method",
    "detail": "Function (} ; struct FPollableQueueKey { public :)",
    "insertText": "FPollableQueueKey()"
  },
  {
    "label": "FPollableQueueKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPollableQueueKey(FPollable* InPollable)"
  },
  {
    "label": "FPollableQueueKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPollableQueueKey(const TRefCountPtr<FPollable>& InPollable)"
  },
  {
    "label": "FPollableQueueKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPollableQueueKey(TRefCountPtr<FPollable>&& InPollable)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FPollableQueueKey& Other)"
  },
  {
    "label": "OnRequestClusterCompleted()",
    "kind": "Method",
    "detail": "Function (int32 LastCookPendingCount = 0 ; int32 LastCookedPackagesCount = 0 ; double LastProgressDisplayTime = 0 ; double LastDiagnosticsDisplayTime = 0 ; IAssetRegistry* AssetRegistry = nullptr ; TMap<FName,TArray<FString>> OutSCLCSVPaths ; TSet<FName> ModifiedAssetFilenames ; TArray<FString> ConfigSettingDenyList ; void)",
    "insertText": "OnRequestClusterCompleted(const UE::Cook::FRequestCluster& RequestCluster)"
  },
  {
    "label": "OnTargetPlatformChangedSupportedFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTargetPlatformChangedSupportedFormats(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "AddCookOnTheFlyPlatformFromGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCookOnTheFlyPlatformFromGameThread(ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "StartCookOnTheFlySessionFromGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCookOnTheFlySessionFromGameThread(ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "OnTargetPlatformsInvalidated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTargetPlatformsInvalidated()"
  },
  {
    "label": "TickNetwork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickNetwork()"
  },
  {
    "label": "TickMainCookLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickMainCookLoop(UE::Cook::FTickStackData& StackData)"
  },
  {
    "label": "TickCookStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickCookStatus(UE::Cook::FTickStackData& StackData)"
  },
  {
    "label": "SetSaveBusy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSaveBusy(bool bInSaveBusy)"
  },
  {
    "label": "SetLoadBusy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoadBusy(bool bInLoadBusy)"
  },
  {
    "label": "SetIdleStatus()",
    "kind": "Method",
    "detail": "Function (enum class EIdleStatus { Active,Idle,Done } ; void)",
    "insertText": "SetIdleStatus(UE::Cook::FTickStackData& StackData, EIdleStatus InStatus)"
  },
  {
    "label": "UpdateDisplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDisplay(UE::Cook::FTickStackData& StackData, bool bForceDisplay)"
  },
  {
    "label": "DecideNextCookAction()",
    "kind": "Method",
    "detail": "Function (enum class ECookAction { Done,Request,Load,LoadLimited,Save,SaveLimited,Poll,PollIdle,WaitForAsync,YieldTick,} ; ECookAction)",
    "insertText": "DecideNextCookAction(UE::Cook::FTickStackData& StackData)"
  },
  {
    "label": "NumMultiprocessLocalWorkerAssignments()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumMultiprocessLocalWorkerAssignments()"
  },
  {
    "label": "PumpExternalRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpExternalRequests(const UE::Cook::FCookerTimer& CookerTimer)"
  },
  {
    "label": "TryCreateRequestCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryCreateRequestCluster(UE::Cook::FPackageData& PackageData)"
  },
  {
    "label": "PumpRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpRequests(UE::Cook::FTickStackData& StackData, int32& OutNumPushed)"
  },
  {
    "label": "AssignRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignRequests(TArrayView<UE::Cook::FPackageData*> Requests, UE::Cook::FRequestQueue& RequestQueue, TMap<UE::Cook::FPackageData*, TArray<UE::Cook::FPackageData*>>&& RequestGraph)"
  },
  {
    "label": "NotifyRemovedFromWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyRemovedFromWorker(UE::Cook::FPackageData& PackageData)"
  },
  {
    "label": "PumpLoads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpLoads(UE::Cook::FTickStackData& StackData, uint32 DesiredQueueLength, int32& OutNumPushed, bool& bOutBusy)"
  },
  {
    "label": "LoadPackageInQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadPackageInQueue(UE::Cook::FPackageData& PackageData, uint32& ResultFlags, int32& OutNumPushed)"
  },
  {
    "label": "RejectPackageToLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RejectPackageToLoad(UE::Cook::FPackageData& PackageData, const TCHAR* ReasonText, UE::Cook::ESuppressCookReason Reason)"
  },
  {
    "label": "PumpSaves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpSaves(UE::Cook::FTickStackData& StackData, uint32 DesiredQueueLength, int32& OutNumPushed, bool& bOutBusy)"
  },
  {
    "label": "QueueDiscoveredPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueDiscoveredPackage(UE::Cook::FPackageData& PackageData, UE::Cook::FInstigator&& Instigator, UE::Cook::FDiscoveredPlatformSet&& ReachablePlatforms, UE::Cook::EUrgency Urgency, UE::Cook::FGenerationHelper* ParentGenerationHelper = nullptr)"
  },
  {
    "label": "QueueDiscoveredPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueDiscoveredPackage(UE::Cook::FPackageData& PackageData, UE::Cook::FInstigator&& Instigator, UE::Cook::FDiscoveredPlatformSet&& ReachablePlatforms)"
  },
  {
    "label": "QueueDiscoveredPackageOnDirector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueDiscoveredPackageOnDirector(UE::Cook::FPackageData& PackageData, UE::Cook::FInstigator&& Instigator, UE::Cook::FDiscoveredPlatformSet&& ReachablePlatforms, UE::Cook::EUrgency Urgency)"
  },
  {
    "label": "DemoteToIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DemoteToIdle(UE::Cook::FPackageData& PackageData, UE::Cook::ESendFlags SendFlags, UE::Cook::ESuppressCookReason Reason)"
  },
  {
    "label": "PromoteToSaveComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PromoteToSaveComplete(UE::Cook::FPackageData& PackageData, UE::Cook::ESendFlags SendFlags)"
  },
  {
    "label": "OnRemoveSessionPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveSessionPlatform(const ITargetPlatform* TargetPlatform, int32 RemovedIndex)"
  },
  {
    "label": "OnPlatformAddedToSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlatformAddedToSession(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "InitializePollables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePollables()"
  },
  {
    "label": "PumpPollables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpPollables(UE::Cook::FTickStackData& StackData, bool bIsIdle)"
  },
  {
    "label": "PollFlushRenderingCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollFlushRenderingCommands()"
  },
  {
    "label": "CreatePollableLLM()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FPollable>)",
    "insertText": "CreatePollableLLM()"
  },
  {
    "label": "CreatePollableTriggerGC()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FPollable>)",
    "insertText": "CreatePollableTriggerGC()"
  },
  {
    "label": "PollGarbageCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollGarbageCollection(UE::Cook::FTickStackData& StackData)"
  },
  {
    "label": "PollQueuedCancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollQueuedCancel(UE::Cook::FTickStackData& StackData)"
  },
  {
    "label": "WaitForAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAsync(UE::Cook::FTickStackData& StackData)"
  },
  {
    "label": "TickRecompileShaderRequestsPrivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickRecompileShaderRequestsPrivate(UE::Cook::FTickStackData& StackData)"
  },
  {
    "label": "UCookOnTheFlyServer()",
    "kind": "Method",
    "detail": "Function (public : enum ECookOnTheSideResult { COSR_None = 0 x00000000,COSR_CookedMap = 0 x00000001,COSR_CookedPackage = 0 x00000002,COSR_ErrorLoadingPackage = 0 x00000004,COSR_RequiresGC = 0 x00000008,COSR_WaitingOnCache = 0 x00000010,COSR_MarkedUpKeepPackages = 0 x00000040,COSR_RequiresGC_OOM = 0 x00000080,COSR_RequiresGC_PackageCount = 0 x00000100,COSR_RequiresGC_IdleTimer = 0 x00000200,COSR_YieldTick = 0 x00000400,COSR_RequiresGC_Soft_OOM = 0 x00000800,} ; struct FCookByTheBookStartupOptions { public : TArray<ITargetPlatform*> TargetPlatforms ; TArray<FString> CookMaps ; TArray<FString> CookDirectories ; TArray<FString> NeverCookDirectories ; TArray<FString> CookCultures ; TArray<FString> IniMapSections ; TArray<FString> CookPackages ; ECookByTheBookOptions CookOptions = ECookByTheBookOptions::None ; FString DLCName ; FString CreateReleaseVersion ; FString BasedOnReleaseVersion ; bool bGenerateStreamingInstallManifests = false ; bool bGenerateDependenciesForMaps = false ; bool bErrorOnEngineContentUse = false ; } ; struct FCookOnTheFlyStartupOptions { int32 AnyPort = 0 ; int32 DefaultPort = - 1 ; int32 Port = DefaultPort ; bool bZenStore = false ; bool bPlatformProtocol = false ; TArray<ITargetPlatform*> TargetPlatforms ; } ; ~)",
    "insertText": "UCookOnTheFlyServer()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "GetCookMode()",
    "kind": "Method",
    "detail": "Function (ECookMode::Type)",
    "insertText": "GetCookMode()"
  },
  {
    "label": "GetInstigatorChain()",
    "kind": "Method",
    "detail": "Function (TArray<UE::Cook::FInstigator>)",
    "insertText": "GetInstigatorChain(FName PackageName)"
  },
  {
    "label": "GetCookType()",
    "kind": "Method",
    "detail": "Function (UE::Cook::ECookType)",
    "insertText": "GetCookType()"
  },
  {
    "label": "GetCookingDLC()",
    "kind": "Method",
    "detail": "Function (UE::Cook::ECookingDLC)",
    "insertText": "GetCookingDLC()"
  },
  {
    "label": "GetProcessType()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EProcessType)",
    "insertText": "GetProcessType()"
  },
  {
    "label": "IsIterative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIterative()"
  },
  {
    "label": "GetSessionPlatforms()",
    "kind": "Method",
    "detail": "Function (TArray<const ITargetPlatform*>)",
    "insertText": "GetSessionPlatforms()"
  },
  {
    "label": "GetCookOutputFolder()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCookOutputFolder(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "RegisterCollector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCollector(UE::Cook::IMPCollector* Collector, UE::Cook::EProcessType ProcessType = UE::Cook::EProcessType::AllMPCook)"
  },
  {
    "label": "UnregisterCollector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCollector(UE::Cook::IMPCollector* Collector)"
  },
  {
    "label": "GetCulturesToCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCulturesToCook(TArray<FString>& OutCulturesToCook)"
  },
  {
    "label": "DumpStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStats()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(ECookMode::Type DesiredCookMode, ECookInitializationFlags InCookInitializationFlags, const FString& OutputDirectoryOverride = FString())"
  },
  {
    "label": "StartCookOnTheFly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartCookOnTheFly(FCookOnTheFlyStartupOptions InCookOnTheFlyOptions)"
  },
  {
    "label": "BroadcastFileserverPresence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BroadcastFileserverPresence(const FGuid &InstanceId)"
  },
  {
    "label": "ShutdownCookOnTheFly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownCookOnTheFly()"
  },
  {
    "label": "StartCookByTheBook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCookByTheBook(const FCookByTheBookStartupOptions& CookByTheBookStartupOptions)"
  },
  {
    "label": "QueueCancelCookByTheBook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueCancelCookByTheBook()"
  },
  {
    "label": "CancelCookByTheBook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelCookByTheBook()"
  },
  {
    "label": "TryInitializeCookWorker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryInitializeCookWorker()"
  },
  {
    "label": "LogCookWorkerStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogCookWorkerStats()"
  },
  {
    "label": "ShutdownCookAsCookWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownCookAsCookWorker()"
  },
  {
    "label": "IsInSession()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInSession()"
  },
  {
    "label": "IsCookByTheBookRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookByTheBookRunning()"
  },
  {
    "label": "PostLoadPackageFixup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoadPackageFixup(UE::Cook::FPackageData& PackageData, UPackage* Package)"
  },
  {
    "label": "ValidateSourcePackage()",
    "kind": "Method",
    "detail": "Function (EDataValidationResult)",
    "insertText": "ValidateSourcePackage(UE::Cook::FPackageData& PackageData, UPackage* Package)"
  },
  {
    "label": "TickCookByTheBook()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "TickCookByTheBook(const float TimeSlice, ECookTickFlags TickFlags = ECookTickFlags::None)"
  },
  {
    "label": "TickCookOnTheFly()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "TickCookOnTheFly(const float TimeSlice, ECookTickFlags TickFlags = ECookTickFlags::None)"
  },
  {
    "label": "TickCookWorker()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "TickCookWorker()"
  },
  {
    "label": "RunCookList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunCookList(ECookListOptions CookListOptions)"
  },
  {
    "label": "ClearAllCookedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllCookedData()"
  },
  {
    "label": "CancelAllQueues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAllQueues()"
  },
  {
    "label": "ClearCachedCookedPlatformDataForPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedCookedPlatformDataForPlatform(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "ClearPlatformCookedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPlatformCookedData(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "ResetCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCook(TConstArrayView<TPair<const ITargetPlatform*, bool>> TargetPlatforms)"
  },
  {
    "label": "RecompileChangedShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecompileChangedShaders(const TArray<const ITargetPlatform*>& TargetPlatforms)"
  },
  {
    "label": "StopAndClearCookedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAndClearCookedData()"
  },
  {
    "label": "TickRequestManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickRequestManager()"
  },
  {
    "label": "HasRemainingWork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRemainingWork()"
  },
  {
    "label": "WaitForRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForRequests(int TimeoutMs)"
  },
  {
    "label": "NumConnections()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NumConnections()"
  },
  {
    "label": "IsCookingInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookingInEditor()"
  },
  {
    "label": "IsRealtimeMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRealtimeMode()"
  },
  {
    "label": "IsCookByTheBookMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookByTheBookMode()"
  },
  {
    "label": "IsDirectorCookByTheBook()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirectorCookByTheBook()"
  },
  {
    "label": "IsUsingShaderCodeLibrary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingShaderCodeLibrary()"
  },
  {
    "label": "IsUsingZenStore()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingZenStore()"
  },
  {
    "label": "IsCookOnTheFlyMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookOnTheFlyMode()"
  },
  {
    "label": "IsDirectorCookOnTheFly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirectorCookOnTheFly()"
  },
  {
    "label": "IsCookWorkerMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookWorkerMode()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "GetPackagesPerGC()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPackagesPerGC()"
  },
  {
    "label": "GetPackagesPerPartialGC()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPackagesPerPartialGC()"
  },
  {
    "label": "GetIdleTimeToGC()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetIdleTimeToGC()"
  },
  {
    "label": "ClearGarbageCollectType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearGarbageCollectType()"
  },
  {
    "label": "OnCookerStartCollectGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCookerStartCollectGarbage(uint32& ResultFlagsFromTick)"
  },
  {
    "label": "OnCookerEndCollectGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCookerEndCollectGarbage(uint32& ResultFlagsFromTick)"
  },
  {
    "label": "EvaluateGarbageCollectionResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateGarbageCollectionResults(bool bWasDueToOOM, bool bWasPartialGC, uint32 ResultFlags, int32 NumObjectsBeforeGC, const FPlatformMemoryStats& MemStatsBeforeGC, const FGenericMemoryStats& AllocatorStatsBeforeGC, int32 NumObjectsAfterGC, const FPlatformMemoryStats& MemStatsAfterGC, const FGenericMemoryStats& AllocatorStatsAfterGC)"
  },
  {
    "label": "NeedsDiagnosticSecondGC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsDiagnosticSecondGC()"
  },
  {
    "label": "RequestPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestPackage(const FName& StandardFileName, const TArrayView<const ITargetPlatform* const>& TargetPlatforms, const bool bForceFrontOfQueue)"
  },
  {
    "label": "RequestPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestPackage(const FName& StandardPackageFName, const bool bForceFrontOfQueue)"
  },
  {
    "label": "OnObjectModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectModified(UObject *ObjectMoving)"
  },
  {
    "label": "OnObjectPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectPropertyChanged(UObject* ObjectBeingModified, FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "OnObjectUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectUpdated(UObject *Object)"
  },
  {
    "label": "OnObjectSaved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectSaved(UObject *ObjectSaved, FObjectPreSaveContext SaveContext)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnCookByTheBookStarted)"
  },
  {
    "label": "MarkPackageDirtyForCookerFromSchedulerThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPackageDirtyForCookerFromSchedulerThread(const FName& PackageName)"
  },
  {
    "label": "MaybeMarkPackageAsAlreadyLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeMarkPackageAsAlreadyLoaded(UPackage* Package)"
  },
  {
    "label": "PreGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreGarbageCollect()"
  },
  {
    "label": "CookerAddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CookerAddReferencedObjects(FReferenceCollector& Ar)"
  },
  {
    "label": "PostGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostGarbageCollect()"
  },
  {
    "label": "GetShaderLibraryPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderLibraryPaths(const ITargetPlatform* TargetPlatform, FString& OutShaderCodeDir, FString& OutMetaDataPath, bool bUseProjectDirForDLC=false)"
  },
  {
    "label": "PrintDetailedCookStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintDetailedCookStats()"
  },
  {
    "label": "IsCookingDLC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookingDLC()"
  },
  {
    "label": "ShouldVerifyEDLCookInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldVerifyEDLCookInfo()"
  },
  {
    "label": "Exec_Editor()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Exec_Editor(class UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "PumpHasExceededMaxMemory()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "PumpHasExceededMaxMemory(uint32& OutResultFlags)"
  },
  {
    "label": "IsUsingLegacyCookOnTheFlyScheduling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingLegacyCookOnTheFlyScheduling()"
  },
  {
    "label": "IsDebugRecordUnsolicited()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebugRecordUnsolicited()"
  },
  {
    "label": "BeginCookEditorSystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCookEditorSystems()"
  },
  {
    "label": "BeginCookPackageWriters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCookPackageWriters(FBeginCookContext& BeginContext)"
  },
  {
    "label": "BeginCookDirector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCookDirector(FBeginCookContext& BeginContext)"
  },
  {
    "label": "InitializeAtFirstSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAtFirstSession()"
  },
  {
    "label": "InitializeSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSession()"
  },
  {
    "label": "BlockOnPrebootCookGate()",
    "kind": "Method",
    "detail": "Function (const FCookByTheBookStartupOptions&)",
    "insertText": "BlockOnPrebootCookGate(bool& bOutAbortCook, const FCookByTheBookStartupOptions& CookByTheBookStartupOptions, TOptional<FCookByTheBookStartupOptions>& ModifiedStartupOptions)"
  },
  {
    "label": "CreateBeginCookByTheBookContext()",
    "kind": "Method",
    "detail": "Function (FBeginCookContext)",
    "insertText": "CreateBeginCookByTheBookContext(const FCookByTheBookStartupOptions& StartupOptions)"
  },
  {
    "label": "SelectSessionPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectSessionPlatforms(FBeginCookContext& BeginContext)"
  },
  {
    "label": "GenerateInitialRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateInitialRequests(FBeginCookContext& BeginContext)"
  },
  {
    "label": "RecordDLCPackagesFromBaseGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordDLCPackagesFromBaseGame(FBeginCookContext& BeginContext)"
  },
  {
    "label": "RegisterCookByTheBookDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCookByTheBookDelegates()"
  },
  {
    "label": "UnregisterCookByTheBookDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCookByTheBookDelegates()"
  },
  {
    "label": "BeginCookEDLCookInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCookEDLCookInfo(FBeginCookContext& BeginContext)"
  },
  {
    "label": "CollectFilesToCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectFilesToCook(TArray<FName>& FilesInPath, TMap<FName, UE::Cook::FInstigator>& Instigators, const TArray<FString>& CookMaps, const TArray<FString>& CookDirectories, const TArray<FString>& IniMapSections, ECookByTheBookOptions FilesToCookFlags, const TArrayView<const ITargetPlatform* const>& TargetPlatforms, const TMap<FName, TArray<FName>>& GameDefaultObjects)"
  },
  {
    "label": "GetGameDefaultObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGameDefaultObjects(const TArray<ITargetPlatform*>& TargetPlatforms, TMap<FName, TArray<FName>>& GameDefaultObjectsOut)"
  },
  {
    "label": "GetNeverCookPackageNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetNeverCookPackageNames(TArrayView<const FString> ExtraNeverCookDirectories = TArrayView<const FString>())"
  },
  {
    "label": "AddFileToCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFileToCook(TArray<FName>& InOutFilesToCook, TMap<FName, UE::Cook::FInstigator>& InOutInstigators, const FString &InFilename, const UE::Cook::FInstigator& Instigator)"
  },
  {
    "label": "AddFlexPathToCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFlexPathToCook(TArray<FName>& InOutFilesToCook, TMap<FName, UE::Cook::FInstigator>& InOutInstigators, const FString& InFlexPath, const UE::Cook::FInstigator& Instigator)"
  },
  {
    "label": "GetProjectShaderLibraryName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetProjectShaderLibraryName()"
  },
  {
    "label": "BeginCookStartShaderCodeLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCookStartShaderCodeLibrary(FBeginCookContext& BeginContext)"
  },
  {
    "label": "BeginCookFinishShaderCodeLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCookFinishShaderCodeLibrary(FBeginCookContext& BeginContext)"
  },
  {
    "label": "OpenGlobalShaderLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenGlobalShaderLibrary()"
  },
  {
    "label": "SaveAndCloseGlobalShaderLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveAndCloseGlobalShaderLibrary()"
  },
  {
    "label": "OpenShaderLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenShaderLibrary(FString const& Name)"
  },
  {
    "label": "FinishPopulateShaderLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishPopulateShaderLibrary(const ITargetPlatform* TargetPlatform, FString const& Name)"
  },
  {
    "label": "SaveShaderLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveShaderLibrary(const ITargetPlatform* TargetPlatform, FString const& Name)"
  },
  {
    "label": "CreatePipelineCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePipelineCache(const ITargetPlatform* TargetPlatform, const FString& LibraryName)"
  },
  {
    "label": "CleanShaderCodeLibraries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanShaderCodeLibraries()"
  },
  {
    "label": "RegisterShaderChunkDataGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterShaderChunkDataGenerator()"
  },
  {
    "label": "CookByTheBookFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CookByTheBookFinished()"
  },
  {
    "label": "CookByTheBookFinishedInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CookByTheBookFinishedInternal()"
  },
  {
    "label": "ShutdownCookSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownCookSession()"
  },
  {
    "label": "PrintFinishStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintFinishStats()"
  },
  {
    "label": "GetAllPackageFilenamesFromAssetRegistry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllPackageFilenamesFromAssetRegistry(const FString& AssetRegistryPath, bool bVerifyPackagesExist, bool bSkipUncookedPackages, TArray<UE::Cook::FConstructPackageData>& OutPackageDatas)"
  },
  {
    "label": "BuildMapDependencyGraph()",
    "kind": "Method",
    "detail": "Function (TMap<FName,TSet<FName>>)",
    "insertText": "BuildMapDependencyGraph(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "WriteMapDependencyGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteMapDependencyGraph(const ITargetPlatform* TargetPlatform, TMap<FName, TSet<FName>>& MapDependencyGraph)"
  },
  {
    "label": "GenerateCachedEditorThumbnails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateCachedEditorThumbnails()"
  },
  {
    "label": "InitializeAllCulturesToCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAllCulturesToCook(TConstArrayView<FString> CookCultures)"
  },
  {
    "label": "CompileDLCLocalization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileDLCLocalization(FBeginCookContext& BeginContext)"
  },
  {
    "label": "GenerateLocalizationReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateLocalizationReferences()"
  },
  {
    "label": "RegisterLocalizationChunkDataGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterLocalizationChunkDataGenerator()"
  },
  {
    "label": "CreateBeginCookOnTheFlyContext()",
    "kind": "Method",
    "detail": "Function (FBeginCookContext)",
    "insertText": "CreateBeginCookOnTheFlyContext(const FCookOnTheFlyStartupOptions& Options)"
  },
  {
    "label": "CreateAddPlatformContext()",
    "kind": "Method",
    "detail": "Function (FBeginCookContext)",
    "insertText": "CreateAddPlatformContext(ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "GetCookOnTheFlyUnsolicitedFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCookOnTheFlyUnsolicitedFiles(const ITargetPlatform* TargetPlatform, const FString& PlatformName, TArray<FString>& UnsolicitedFiles, const FString& Filename, bool bIsCookable)"
  },
  {
    "label": "StartCookAsCookWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCookAsCookWorker()"
  },
  {
    "label": "CreateCookWorkerContext()",
    "kind": "Method",
    "detail": "Function (FBeginCookContext)",
    "insertText": "CreateCookWorkerContext()"
  },
  {
    "label": "CookAsCookWorkerFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CookAsCookWorkerFinished()"
  },
  {
    "label": "GetPackagesToRetract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPackagesToRetract(int32 NumToRetract, TArray<FName>& OutRetractionPackages)"
  },
  {
    "label": "ProcessUnsolicitedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessUnsolicitedPackages(TArray<FName>* OutDiscoveredPackageNames = nullptr, TMap<FName, UE::Cook::FInstigator>* OutInstigators = nullptr)"
  },
  {
    "label": "LoadPackageForCooking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadPackageForCooking(UE::Cook::FPackageData& PackageData, UPackage*& OutPackage, UE::Cook::FPackageData* ReportingPackageData = nullptr)"
  },
  {
    "label": "LoadBeginCookIterativeFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadBeginCookIterativeFlags(FBeginCookContext& BeginContext)"
  },
  {
    "label": "LoadBeginCookIterativeFlagsLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadBeginCookIterativeFlagsLocal(FBeginCookContext& BeginContext)"
  },
  {
    "label": "BeginCookSandbox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCookSandbox(FBeginCookContext& BeginContext)"
  },
  {
    "label": "LoadInitializeConfigSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadInitializeConfigSettings(const FString& InOutputDirectoryOverride)"
  },
  {
    "label": "SetInitializeConfigSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitializeConfigSettings(UE::Cook::FInitializeConfigSettings&& Settings)"
  },
  {
    "label": "ParseCookFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseCookFilters()"
  },
  {
    "label": "ParseCookFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseCookFilters(const TCHAR* Parameter, const TCHAR* Message, TSet<FName>& OutFilterClasses)"
  },
  {
    "label": "LoadBeginCookConfigSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadBeginCookConfigSettings(FBeginCookContext& BeginContext)"
  },
  {
    "label": "SetBeginCookConfigSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBeginCookConfigSettings(FBeginCookContext& BeginContext, UE::Cook::FBeginCookConfigSettings&& Settings)"
  },
  {
    "label": "SetNeverCookPackageConfigSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNeverCookPackageConfigSettings(FBeginCookContext& BeginContext, UE::Cook::FBeginCookConfigSettings& Settings)"
  },
  {
    "label": "FinalizePackageStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizePackageStore()"
  },
  {
    "label": "ClearPackageStoreContexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPackageStoreContexts()"
  },
  {
    "label": "InitializeShadersForCookOnTheFly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeShadersForCookOnTheFly(const TArrayView<ITargetPlatform* const>& NewTargetPlatforms)"
  },
  {
    "label": "DiscoverPlatformSpecificNeverCookPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscoverPlatformSpecificNeverCookPackages(const TArrayView<const ITargetPlatform* const>& TargetPlatforms, const TArray<FString>& UBTPlatformStrings, UE::Cook::FBeginCookConfigSettings& Settings)"
  },
  {
    "label": "GetDependentPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDependentPackages(const TSet<UPackage*>& Packages, TSet<FName>& Found)"
  },
  {
    "label": "GetDependentPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDependentPackages(const TSet<FName>& RootPackages, TSet<FName>& FoundPackages)"
  },
  {
    "label": "ContainsMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsMap(const FName& PackageName)"
  },
  {
    "label": "ContainsRedirector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsRedirector(const FName& PackageName, TMap<FSoftObjectPath, FSoftObjectPath>& RedirectedPaths)"
  },
  {
    "label": "PrepareSave()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "PrepareSave(UE::Cook::FPackageData& PackageData, UE::Cook::FCookerTimer& Timer, bool bPrecaching)"
  },
  {
    "label": "PrepareSaveInternal()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "PrepareSaveInternal(UE::Cook::FPackageData& PackageData, UE::Cook::FCookerTimer& Timer, bool bPrecaching)"
  },
  {
    "label": "CallBeginCacheOnObjects()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "CallBeginCacheOnObjects(UE::Cook::FPackageData& PackageData, UPackage* Package, TArray<UE::Cook::FCachedObjectInOuter>& Objects, int32& NextIndex, UE::Cook::FCookerTimer& Timer)"
  },
  {
    "label": "ReleaseCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseCookedPlatformData(UE::Cook::FPackageData& PackageData, UE::Cook::EStateChangeReason ReleaseSaveReason, UE::Cook::EPackageState NewState)"
  },
  {
    "label": "TickCancels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickCancels()"
  },
  {
    "label": "GetCurrentIniVersionStrings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCurrentIniVersionStrings(const ITargetPlatform* TargetPlatform, UE::Cook::FIniSettingContainer& IniVersionStrings)"
  },
  {
    "label": "GetCookedIniVersionStrings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCookedIniVersionStrings(const ITargetPlatform* TargetPlatform, UE::Cook::FIniSettingContainer& IniVersionStrings, TMap<FString, FString>& AdditionalStrings)"
  },
  {
    "label": "ArePreviousCookSettingsCompatible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ArePreviousCookSettingsCompatible(const TMap<FName, FString>& CurrentCookSettings, const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "SaveCookSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCookSettings(const TMap<FName, FString>& CurrentCookSettings, const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "ClearCookInProgressFlagFromCookSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookInProgressFlagFromCookSettings(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "CalculateCookSettingStrings()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FString>)",
    "insertText": "CalculateCookSettingStrings()"
  },
  {
    "label": "GetCookSettingsFileName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCookSettingsFileName(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "ConvertToFullSandboxPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToFullSandboxPath(const FString &FileName, bool bForWrite = false)"
  },
  {
    "label": "ConvertToFullSandboxPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToFullSandboxPath(const FString &FileName, bool bForWrite, const FString& PlatformName)"
  },
  {
    "label": "GetSandboxAssetRegistryFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSandboxAssetRegistryFilename()"
  },
  {
    "label": "GetCookedAssetRegistryFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCookedAssetRegistryFilename(const FString& PlatformName)"
  },
  {
    "label": "GetCookedCookMetadataFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCookedCookMetadataFilename(const FString& PlatformName)"
  },
  {
    "label": "WriteCookMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteCookMetadata(const ITargetPlatform* InTargetPlatform, uint64 InDevelopmentAssetRegistryHash)"
  },
  {
    "label": "WriteReferencedSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteReferencedSet(const ITargetPlatform* InTargetPlatform, TArray<FName>&& CookedPackageNames)"
  },
  {
    "label": "GetSandboxCachedEditorThumbnailsFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSandboxCachedEditorThumbnailsFilename()"
  },
  {
    "label": "GetSandboxDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSandboxDirectory(const FString& PlatformName)"
  },
  {
    "label": "GetAsyncIODelete()",
    "kind": "Method",
    "detail": "Function (FAsyncIODelete&)",
    "insertText": "GetAsyncIODelete()"
  },
  {
    "label": "IsCookingAgainstFixedBase()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookingAgainstFixedBase()"
  },
  {
    "label": "ShouldPopulateFullAssetRegistry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPopulateFullAssetRegistry()"
  },
  {
    "label": "GetBaseDirectoryForDLC()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBaseDirectoryForDLC()"
  },
  {
    "label": "GetContentDirectoryForDLC()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetContentDirectoryForDLC()"
  },
  {
    "label": "GetMountedAssetPathForDLC()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetMountedAssetPathForDLC()"
  },
  {
    "label": "GetMountedAssetPathForPlugin()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetMountedAssetPathForPlugin(const FString& InPluginName)"
  },
  {
    "label": "GetMetadataDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetMetadataDirectory()"
  },
  {
    "label": "IsCreatingReleaseVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCreatingReleaseVersion()"
  },
  {
    "label": "IniSettingsOutOfDate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IniSettingsOutOfDate(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "SaveCurrentIniSettings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveCurrentIniSettings(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "IsCookFlagSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookFlagSet(const ECookInitializationFlags& InCookFlags)"
  },
  {
    "label": "RouteBeginCacheForCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RouteBeginCacheForCookedPlatformData(UE::Cook::FPackageData& PackageData, UObject* Obj, const ITargetPlatform* TargetPlatform, UE::Cook::ECachedCookedPlatformDataEvent* ExistingEvent)"
  },
  {
    "label": "RouteIsCachedCookedPlatformDataLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RouteIsCachedCookedPlatformDataLoaded(UE::Cook::FPackageData& PackageData, UObject* Obj, const ITargetPlatform* TargetPlatform, UE::Cook::ECachedCookedPlatformDataEvent* ExistingEvent)"
  },
  {
    "label": "SavePackageBeginCacheForCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (EPackageWriterResult)",
    "insertText": "SavePackageBeginCacheForCookedPlatformData(FName PackageName, const ITargetPlatform* TargetPlatform, TConstArrayView<UObject*> SaveableObjects, uint32 SaveFlags)"
  },
  {
    "label": "SaveCookedPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCookedPackage(UE::Cook::FSaveCookedPackageContext& Context)"
  },
  {
    "label": "RecordExternalActorDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordExternalActorDependencies(TConstArrayView<FName> ExternalActorDependencies)"
  },
  {
    "label": "SaveGlobalShaderMapFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveGlobalShaderMapFiles(const TArrayView<const ITargetPlatform* const>& Platforms, ODSCRecompileCommand RecompileCommand)"
  },
  {
    "label": "CreateSandboxFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSandboxFile(FBeginCookContext& BeginContext)"
  },
  {
    "label": "GetOutputDirectoryOverride()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetOutputDirectoryOverride(FBeginCookContext& BeginContext)"
  },
  {
    "label": "PopulateCookedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateCookedPackages(const TConstArrayView<const ITargetPlatform*> TargetPlatforms)"
  },
  {
    "label": "BlockOnAssetRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockOnAssetRegistry(TConstArrayView<FString> CommandlinePackages)"
  },
  {
    "label": "RefreshPlatformAssetRegistries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshPlatformAssetRegistries(const TArrayView<const ITargetPlatform* const>& TargetPlatforms)"
  },
  {
    "label": "GenerateLongPackageNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateLongPackageNames(TArray<FName>& FilesInPath, TMap<FName, UE::Cook::FInstigator>& Instigators)"
  },
  {
    "label": "QueueGeneratedPackages()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "QueueGeneratedPackages(UE::Cook::FGenerationHelper& GenerationHelper, UE::Cook::FPackageData& PackageData)"
  },
  {
    "label": "PrepareSaveGenerationPackage()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "PrepareSaveGenerationPackage(UE::Cook::FGenerationHelper& GenerationHelper, UE::Cook::FPackageData& PackageData, UE::Cook::FCookerTimer& Timer, bool bPrecaching)"
  },
  {
    "label": "BeginCacheObjectsToMove()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "BeginCacheObjectsToMove(UE::Cook::FGenerationHelper& GenerationHelper, UE::Cook::FCookGenerationInfo& Info, UE::Cook::FCookerTimer& Timer, TArray<ICookPackageSplitter::FGeneratedPackageForPreSave>& GeneratedPackagesForPresave)"
  },
  {
    "label": "PreSaveGeneratorPackage()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "PreSaveGeneratorPackage(UE::Cook::FPackageData& PackageData, UE::Cook::FGenerationHelper& GenerationHelper, UE::Cook::FCookGenerationInfo& Info, TArray<ICookPackageSplitter::FGeneratedPackageForPreSave>& GeneratedPackagesForPresave)"
  },
  {
    "label": "TryConstructGeneratedPackagesForPresave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConstructGeneratedPackagesForPresave(UE::Cook::FPackageData& PackageData, UE::Cook::FGenerationHelper& GenerationHelper, TArray<ICookPackageSplitter::FGeneratedPackageForPreSave>& GeneratedPackagesForPresave)"
  },
  {
    "label": "BeginCachePostMove()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "BeginCachePostMove(UE::Cook::FGenerationHelper& GenerationHelper, UE::Cook::FCookGenerationInfo& Info, UE::Cook::FCookerTimer& Timer)"
  },
  {
    "label": "TryPopulateGeneratedPackage()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "TryPopulateGeneratedPackage(UE::Cook::FGenerationHelper& GenerationHelper, UE::Cook::FCookGenerationInfo& GeneratedInfo)"
  },
  {
    "label": "FindOrCreateCookArtifactReader()",
    "kind": "Method",
    "detail": "Function (ICookArtifactReader&)",
    "insertText": "FindOrCreateCookArtifactReader(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "FindCookArtifactReader()",
    "kind": "Method",
    "detail": "Function (const ICookArtifactReader*)",
    "insertText": "FindCookArtifactReader(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "FindOrCreatePackageWriter()",
    "kind": "Method",
    "detail": "Function (ICookedPackageWriter&)",
    "insertText": "FindOrCreatePackageWriter(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "FindPackageWriter()",
    "kind": "Method",
    "detail": "Function (const ICookedPackageWriter*)",
    "insertText": "FindPackageWriter(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "FindOrCreateSaveContexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindOrCreateSaveContexts(TConstArrayView<const ITargetPlatform*> TargetPlatforms)"
  },
  {
    "label": "FindOrCreateSaveContext()",
    "kind": "Method",
    "detail": "Function (UE::Cook::FCookSavePackageContext&)",
    "insertText": "FindOrCreateSaveContext(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "FindSaveContext()",
    "kind": "Method",
    "detail": "Function (const UE::Cook::FCookSavePackageContext*)",
    "insertText": "FindSaveContext(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "CreateSaveContext()",
    "kind": "Method",
    "detail": "Function (UE::Cook::FCookSavePackageContext*)",
    "insertText": "CreateSaveContext(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "DeleteOutputForPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteOutputForPackage(FName PackageName, const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "SetActivePackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActivePackage(FName PackageName, FName PackageTrackingOpsName)"
  },
  {
    "label": "ClearActivePackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearActivePackage()"
  },
  {
    "label": "UE_TRACK_REFERENCING_PACKAGE_DECLARE_SCOPE_VARIABLE()",
    "kind": "Method",
    "detail": "Function (struct FActivePackageData { FName PackageName ; bool bActive = false ;)",
    "insertText": "UE_TRACK_REFERENCING_PACKAGE_DECLARE_SCOPE_VARIABLE(ReferenceTrackingScope)"
  },
  {
    "label": "FScopedActivePackage()",
    "kind": "Method",
    "detail": "Function (} ; struct FScopedActivePackage {)",
    "insertText": "FScopedActivePackage(UCookOnTheFlyServer& InCOTFS, FName InPackageName, FName InPackageTrackingOpsName)"
  },
  {
    "label": "FScopedActivePackage()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedActivePackage()"
  },
  {
    "label": "FScopeFindCookReferences()",
    "kind": "Method",
    "detail": "Function (UCookOnTheFlyServer& COTFS ; } ; struct FScopeFindCookReferences {)",
    "insertText": "FScopeFindCookReferences(UCookOnTheFlyServer& InCOTFS)"
  },
  {
    "label": "FScopeFindCookReferences()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopeFindCookReferences()"
  },
  {
    "label": "DumpCrashContext()",
    "kind": "Method",
    "detail": "Function (UCookOnTheFlyServer& COTFS ; TGuardValue<bool> SoftGCGuard ; bool bNeedsConstructBuffer ; } ; void)",
    "insertText": "DumpCrashContext(FCrashContextExtendedWriter& Writer)"
  },
  {
    "label": "OnDiscoveredPackageDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDiscoveredPackageDebug(FName PackageName, const UE::Cook::FInstigator& Instigator)"
  },
  {
    "label": "OnObjectHandleReadDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectHandleReadDebug(const TArrayView<const UObject*const>& ReadObjects)"
  },
  {
    "label": "ReportHiddenDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportHiddenDependency(FName Referencer, FName Dependency)"
  },
  {
    "label": "BroadcastCookStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastCookStarted()"
  },
  {
    "label": "BroadcastCookFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastCookFinished()"
  }
]