[
  {
    "label": "FAssetRegistryGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryGenerator"
  },
  {
    "label": "FAsyncIODelete",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncIODelete"
  },
  {
    "label": "FDiffModeCookServerUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiffModeCookServerUtils"
  },
  {
    "label": "FIterativeValidatePackageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIterativeValidatePackageWriter"
  },
  {
    "label": "FLayeredCookArtifactReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLayeredCookArtifactReader"
  },
  {
    "label": "FLooseFilesCookArtifactReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLooseFilesCookArtifactReader"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FSavePackageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSavePackageContext"
  },
  {
    "label": "IAssetRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistry"
  },
  {
    "label": "ICookArtifactReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookArtifactReader"
  },
  {
    "label": "ICookedPackageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookedPackageWriter"
  },
  {
    "label": "IPlugin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlugin"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBeginCookContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBeginCookContext"
  },
  {
    "label": "FCrashContextExtendedWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrashContextExtendedWriter"
  },
  {
    "label": "FGenericMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericMemoryStats"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FResourceSizeEx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResourceSizeEx"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAssetRegistryMPCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryMPCollector"
  },
  {
    "label": "FBuildDefinitions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildDefinitions"
  },
  {
    "label": "FCachedDependencies",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCachedDependencies"
  },
  {
    "label": "FCookDirector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookDirector"
  },
  {
    "label": "FCookGCDiagnosticContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookGCDiagnosticContext"
  },
  {
    "label": "FCookSandbox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookSandbox"
  },
  {
    "label": "FCookWorkerClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookWorkerClient"
  },
  {
    "label": "FCookWorkerServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookWorkerServer"
  },
  {
    "label": "FDiagnostics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiagnostics"
  },
  {
    "label": "FODSCClientData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FODSCClientData"
  },
  {
    "label": "FPackagePreloader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePreloader"
  },
  {
    "label": "FPackageWriterMPCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageWriterMPCollector"
  },
  {
    "label": "FRequestCluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestCluster"
  },
  {
    "label": "FRequestQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestQueue"
  },
  {
    "label": "FSaveCookedPackageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSaveCookedPackageContext"
  },
  {
    "label": "FWorkerRequestsLocal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkerRequestsLocal"
  },
  {
    "label": "FWorkerRequestsRemote",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkerRequestsRemote"
  },
  {
    "label": "ICookOnTheFlyRequestManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyRequestManager"
  },
  {
    "label": "ICookOnTheFlyNetworkServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyNetworkServer"
  },
  {
    "label": "IWorkerRequests",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWorkerRequests"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBeginCookConfigSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBeginCookConfigSettings"
  },
  {
    "label": "FCachedObjectInOuter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedObjectInOuter"
  },
  {
    "label": "FConstructPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstructPackageData"
  },
  {
    "label": "FCookByTheBookOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookByTheBookOptions"
  },
  {
    "label": "FCookOnTheFlyOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookOnTheFlyOptions"
  },
  {
    "label": "FCookerTimer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookerTimer"
  },
  {
    "label": "FCookGenerationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookGenerationInfo"
  },
  {
    "label": "FCookSavePackageContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookSavePackageContext"
  },
  {
    "label": "FDiscoveredPlatformSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiscoveredPlatformSet"
  },
  {
    "label": "FGenerationHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenerationHelper"
  },
  {
    "label": "FInitializeConfigSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitializeConfigSettings"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "FPackageDatas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageDatas"
  },
  {
    "label": "FPackageTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageTracker"
  },
  {
    "label": "FPendingCookedPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingCookedPlatformData"
  },
  {
    "label": "FPlatformManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformManager"
  },
  {
    "label": "FTickStackData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTickStackData"
  },
  {
    "label": "FRegisteredCookPackageSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRegisteredCookPackageSplitter"
  },
  {
    "label": "FStatHistoryInt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatHistoryInt"
  },
  {
    "label": "UCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookOnTheFlyServer"
  },
  {
    "label": "FPollable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPollable"
  },
  {
    "label": "EManualTrigger",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EManualTrigger"
  },
  {
    "label": "FPollableQueueKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPollableQueueKey"
  },
  {
    "label": "FCookOnTheFlyServerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookOnTheFlyServerInterface"
  },
  {
    "label": "INetworkFileServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INetworkFileServer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ECookOnTheSideResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECookOnTheSideResult"
  },
  {
    "label": "FCookByTheBookStartupOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookByTheBookStartupOptions"
  },
  {
    "label": "FCookOnTheFlyStartupOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookOnTheFlyStartupOptions"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "registered",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "registered"
  },
  {
    "label": "returns",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "returns"
  },
  {
    "label": "FActivePackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActivePackageData"
  },
  {
    "label": "FScopedActivePackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedActivePackage"
  },
  {
    "label": "FScopeFindCookReferences",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeFindCookReferences"
  },
  {
    "label": "header",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "header"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(int64 InitialValue)"
  },
  {
    "label": "AddInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInstance(int64 CurrentValue)"
  },
  {
    "label": "UCookOnTheFlyServer()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "UCookOnTheFlyServer(FVTableHelper& Helper)"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Trigger(UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "RunNow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunNow(UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "RunDuringPump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunDuringPump(UE::Cook::FTickStackData& StackData, double& OutNewCurrentTime, double& OutNextTimeSeconds)"
  },
  {
    "label": "TriggerInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerInternal(UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "RunNowInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunNowInternal(UCookOnTheFlyServer& COTFS, double LastTimeRun)"
  },
  {
    "label": "FPollableQueueKey()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FPollableQueueKey(FPollable* InPollable)"
  },
  {
    "label": "FPollableQueueKey()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FPollableQueueKey(const TRefCountPtr<FPollable>& InPollable)"
  },
  {
    "label": "FPollableQueueKey()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FPollableQueueKey(TRefCountPtr<FPollable>&& InPollable)"
  },
  {
    "label": "TickPrecacheObjectsForPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickPrecacheObjectsForPlatforms(const float TimeSlice, const TArray<const ITargetPlatform*>& TargetPlatform)"
  },
  {
    "label": "OnRequestClusterCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRequestClusterCompleted(const UE::Cook::FRequestCluster& RequestCluster)"
  },
  {
    "label": "OnTargetPlatformChangedSupportedFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTargetPlatformChangedSupportedFormats(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "AddCookOnTheFlyPlatformFromGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCookOnTheFlyPlatformFromGameThread(ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "StartCookOnTheFlySessionFromGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCookOnTheFlySessionFromGameThread(ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "OnTargetPlatformsInvalidated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTargetPlatformsInvalidated()"
  },
  {
    "label": "TickNetwork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickNetwork()"
  },
  {
    "label": "TickMainCookLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickMainCookLoop(UE::Cook::FTickStackData& StackData)"
  },
  {
    "label": "TickCookStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickCookStatus(UE::Cook::FTickStackData& StackData)"
  },
  {
    "label": "SetSaveBusy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSaveBusy(bool bInSaveBusy)"
  },
  {
    "label": "SetLoadBusy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoadBusy(bool bInLoadBusy)"
  },
  {
    "label": "SetIdleStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIdleStatus(UE::Cook::FTickStackData& StackData, EIdleStatus InStatus)"
  },
  {
    "label": "UpdateDisplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDisplay(UE::Cook::FTickStackData& StackData, bool bForceDisplay)"
  },
  {
    "label": "DecideNextCookAction()",
    "kind": "Method",
    "detail": "Function (ECookAction)",
    "insertText": "DecideNextCookAction(UE::Cook::FTickStackData& StackData)"
  },
  {
    "label": "PumpExternalRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpExternalRequests(const UE::Cook::FCookerTimer& CookerTimer)"
  },
  {
    "label": "TryCreateRequestCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryCreateRequestCluster(UE::Cook::FPackageData& PackageData)"
  },
  {
    "label": "PumpRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpRequests(UE::Cook::FTickStackData& StackData, int32& OutNumPushed)"
  },
  {
    "label": "AssignRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignRequests(TArrayView<UE::Cook::FPackageData*> Requests, UE::Cook::FRequestQueue& RequestQueue,\n\t\tTMap<UE::Cook::FPackageData*, TArray<UE::Cook::FPackageData*>>&& RequestGraph)"
  },
  {
    "label": "NotifyRemovedFromWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyRemovedFromWorker(UE::Cook::FPackageData& PackageData)"
  },
  {
    "label": "PumpLoads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpLoads(UE::Cook::FTickStackData& StackData, uint32 DesiredQueueLength, int32& OutNumPushed, bool& bOutBusy)"
  },
  {
    "label": "LoadPackageInQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadPackageInQueue(UE::Cook::FPackageData& PackageData, uint32& ResultFlags, int32& OutNumPushed)"
  },
  {
    "label": "RejectPackageToLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RejectPackageToLoad(UE::Cook::FPackageData& PackageData, const TCHAR* ReasonText,\n\t\tUE::Cook::ESuppressCookReason Reason)"
  },
  {
    "label": "PumpSaves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpSaves(UE::Cook::FTickStackData& StackData, uint32 DesiredQueueLength, int32& OutNumPushed, bool& bOutBusy)"
  },
  {
    "label": "QueueDiscoveredPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueDiscoveredPackage(UE::Cook::FPackageData& PackageData, UE::Cook::FInstigator&& Instigator, \n\t\tUE::Cook::FDiscoveredPlatformSet&& ReachablePlatforms, UE::Cook::EUrgency Urgency,\n\t\tUE::Cook::FGenerationHelper* ParentGenerationHelper = nullptr)"
  },
  {
    "label": "QueueDiscoveredPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueDiscoveredPackage(UE::Cook::FPackageData& PackageData, UE::Cook::FInstigator&& Instigator,\n\t\tUE::Cook::FDiscoveredPlatformSet&& ReachablePlatforms)"
  },
  {
    "label": "QueueDiscoveredPackageOnDirector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueDiscoveredPackageOnDirector(UE::Cook::FPackageData& PackageData, UE::Cook::FInstigator&& Instigator,\n\t\tUE::Cook::FDiscoveredPlatformSet&& ReachablePlatforms, UE::Cook::EUrgency Urgency)"
  },
  {
    "label": "DemoteToIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DemoteToIdle(UE::Cook::FPackageData& PackageData, UE::Cook::ESendFlags SendFlags, UE::Cook::ESuppressCookReason Reason)"
  },
  {
    "label": "PromoteToSaveComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PromoteToSaveComplete(UE::Cook::FPackageData& PackageData, UE::Cook::ESendFlags SendFlags)"
  },
  {
    "label": "OnRemoveSessionPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveSessionPlatform(const ITargetPlatform* TargetPlatform, int32 RemovedIndex)"
  },
  {
    "label": "OnPlatformAddedToSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlatformAddedToSession(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "InitializePollables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePollables()"
  },
  {
    "label": "PumpPollables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpPollables(UE::Cook::FTickStackData& StackData, bool bIsIdle)"
  },
  {
    "label": "PollFlushRenderingCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollFlushRenderingCommands()"
  },
  {
    "label": "CreatePollableLLM()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FPollable>)",
    "insertText": "CreatePollableLLM()"
  },
  {
    "label": "CreatePollableTriggerGC()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FPollable>)",
    "insertText": "CreatePollableTriggerGC()"
  },
  {
    "label": "PollGarbageCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollGarbageCollection(UE::Cook::FTickStackData& StackData)"
  },
  {
    "label": "PollQueuedCancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollQueuedCancel(UE::Cook::FTickStackData& StackData)"
  },
  {
    "label": "WaitForAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAsync(UE::Cook::FTickStackData& StackData)"
  },
  {
    "label": "TickRecompileShaderRequestsPrivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickRecompileShaderRequestsPrivate(UE::Cook::FTickStackData& StackData)"
  },
  {
    "label": "DumpStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStats()"
  },
  {
    "label": "StartCookOnTheFly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartCookOnTheFly(FCookOnTheFlyStartupOptions InCookOnTheFlyOptions)"
  },
  {
    "label": "BroadcastFileserverPresence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BroadcastFileserverPresence( const FGuid &InstanceId )"
  },
  {
    "label": "ShutdownCookOnTheFly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownCookOnTheFly()"
  },
  {
    "label": "StartCookByTheBook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCookByTheBook( const FCookByTheBookStartupOptions& CookByTheBookStartupOptions )"
  },
  {
    "label": "QueueCancelCookByTheBook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueCancelCookByTheBook()"
  },
  {
    "label": "CancelCookByTheBook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelCookByTheBook()"
  },
  {
    "label": "TryInitializeCookWorker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryInitializeCookWorker()"
  },
  {
    "label": "LogCookWorkerStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogCookWorkerStats()"
  },
  {
    "label": "ShutdownCookAsCookWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownCookAsCookWorker()"
  },
  {
    "label": "PostLoadPackageFixup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoadPackageFixup(UE::Cook::FPackageData& PackageData, UPackage* Package)"
  },
  {
    "label": "ValidateSourcePackage()",
    "kind": "Method",
    "detail": "Function (EDataValidationResult)",
    "insertText": "ValidateSourcePackage(UE::Cook::FPackageData& PackageData, UPackage* Package)"
  },
  {
    "label": "TickCookByTheBook()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "TickCookByTheBook(const float TimeSlice, ECookTickFlags TickFlags = ECookTickFlags::None)"
  },
  {
    "label": "TickCookOnTheFly()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "TickCookOnTheFly(const float TimeSlice, ECookTickFlags TickFlags = ECookTickFlags::None)"
  },
  {
    "label": "TickCookWorker()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "TickCookWorker()"
  },
  {
    "label": "RunCookList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunCookList(ECookListOptions CookListOptions)"
  },
  {
    "label": "ClearAllCookedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllCookedData()"
  },
  {
    "label": "CancelAllQueues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAllQueues()"
  },
  {
    "label": "ClearCachedCookedPlatformDataForPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedCookedPlatformDataForPlatform(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "ClearPlatformCookedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPlatformCookedData(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "ResetCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCook(TConstArrayView<TPair<const ITargetPlatform*, bool>> TargetPlatforms)"
  },
  {
    "label": "RecompileChangedShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecompileChangedShaders(const TArray<const ITargetPlatform*>& TargetPlatforms)"
  },
  {
    "label": "StopAndClearCookedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAndClearCookedData()"
  },
  {
    "label": "TickRequestManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickRequestManager()"
  },
  {
    "label": "WaitForRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForRequests(int TimeoutMs)"
  },
  {
    "label": "SetGarbageCollectType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGarbageCollectType(uint32 ResultFlagsFromTick)"
  },
  {
    "label": "ClearGarbageCollectType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearGarbageCollectType()"
  },
  {
    "label": "OnCookerStartCollectGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCookerStartCollectGarbage(uint32& ResultFlagsFromTick)"
  },
  {
    "label": "OnCookerEndCollectGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCookerEndCollectGarbage(uint32& ResultFlagsFromTick)"
  },
  {
    "label": "EvaluateGarbageCollectionResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateGarbageCollectionResults(bool bWasDueToOOM, bool bWasPartialGC, uint32 ResultFlags,\n\t\tint32 NumObjectsBeforeGC, const FPlatformMemoryStats& MemStatsBeforeGC,\n\t\tconst FGenericMemoryStats& AllocatorStatsBeforeGC,\n\t\tint32 NumObjectsAfterGC, const FPlatformMemoryStats& MemStatsAfterGC,\n\t\tconst FGenericMemoryStats& AllocatorStatsAfterGC)"
  },
  {
    "label": "RequestPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestPackage(const FName& StandardFileName, const TArrayView<const ITargetPlatform* const>& TargetPlatforms,\n\t\tconst bool bForceFrontOfQueue)"
  },
  {
    "label": "RequestPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestPackage(const FName& StandardPackageFName, const bool bForceFrontOfQueue)"
  },
  {
    "label": "OnObjectModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectModified( UObject *ObjectMoving )"
  },
  {
    "label": "OnObjectPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectPropertyChanged(UObject* ObjectBeingModified, FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "OnObjectUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectUpdated( UObject *Object )"
  },
  {
    "label": "OnObjectSaved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectSaved( UObject *ObjectSaved, FObjectPreSaveContext SaveContext )"
  },
  {
    "label": "MarkPackageDirtyForCooker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPackageDirtyForCooker( UPackage *Package, bool bAllowInSession = false )"
  },
  {
    "label": "MarkPackageDirtyForCookerFromSchedulerThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPackageDirtyForCookerFromSchedulerThread(const FName& PackageName)"
  },
  {
    "label": "MaybeMarkPackageAsAlreadyLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeMarkPackageAsAlreadyLoaded(UPackage* Package)"
  },
  {
    "label": "PreGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreGarbageCollect()"
  },
  {
    "label": "CookerAddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CookerAddReferencedObjects(FReferenceCollector& Ar)"
  },
  {
    "label": "PostGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostGarbageCollect()"
  },
  {
    "label": "GetShaderLibraryPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderLibraryPaths(const ITargetPlatform* TargetPlatform, FString& OutShaderCodeDir,\n\t\tFString& OutMetaDataPath, bool bUseProjectDirForDLC=false)"
  },
  {
    "label": "PrintDetailedCookStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintDetailedCookStats()"
  },
  {
    "label": "PumpHasExceededMaxMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PumpHasExceededMaxMemory(uint32& OutResultFlags)"
  },
  {
    "label": "BeginCookEditorSystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCookEditorSystems()"
  },
  {
    "label": "BeginCookPackageWriters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCookPackageWriters(FBeginCookContext& BeginContext)"
  },
  {
    "label": "BeginCookDirector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCookDirector(FBeginCookContext& BeginContext)"
  },
  {
    "label": "InitializeAtFirstSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAtFirstSession()"
  },
  {
    "label": "InitializeSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSession()"
  },
  {
    "label": "CreateBeginCookByTheBookContext()",
    "kind": "Method",
    "detail": "Function (FBeginCookContext)",
    "insertText": "CreateBeginCookByTheBookContext(const FCookByTheBookStartupOptions& StartupOptions)"
  },
  {
    "label": "SelectSessionPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectSessionPlatforms(FBeginCookContext& BeginContext)"
  },
  {
    "label": "GenerateInitialRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateInitialRequests(FBeginCookContext& BeginContext)"
  },
  {
    "label": "RecordDLCPackagesFromBaseGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordDLCPackagesFromBaseGame(FBeginCookContext& BeginContext)"
  },
  {
    "label": "RegisterCookByTheBookDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCookByTheBookDelegates()"
  },
  {
    "label": "UnregisterCookByTheBookDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCookByTheBookDelegates()"
  },
  {
    "label": "BeginCookEDLCookInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCookEDLCookInfo(FBeginCookContext& BeginContext)"
  },
  {
    "label": "CollectFilesToCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectFilesToCook(TArray<FName>& FilesInPath, TMap<FName, UE::Cook::FInstigator>& Instigators,\n\t\tconst TArray<FString>& CookMaps, const TArray<FString>& CookDirectories, \n\t\tconst TArray<FString>& IniMapSections, ECookByTheBookOptions FilesToCookFlags,\n\t\tconst TArrayView<const ITargetPlatform* const>& TargetPlatforms,\n\t\tconst TMap<FName, TArray<FName>>& GameDefaultObjects)"
  },
  {
    "label": "GetGameDefaultObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGameDefaultObjects(const TArray<ITargetPlatform*>& TargetPlatforms, TMap<FName,\n\t\tTArray<FName>>& GameDefaultObjectsOut)"
  },
  {
    "label": "BeginCookStartShaderCodeLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCookStartShaderCodeLibrary(FBeginCookContext& BeginContext)"
  },
  {
    "label": "BeginCookFinishShaderCodeLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCookFinishShaderCodeLibrary(FBeginCookContext& BeginContext)"
  },
  {
    "label": "OpenGlobalShaderLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenGlobalShaderLibrary()"
  },
  {
    "label": "SaveAndCloseGlobalShaderLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveAndCloseGlobalShaderLibrary()"
  },
  {
    "label": "OpenShaderLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenShaderLibrary(FString const& Name)"
  },
  {
    "label": "FinishPopulateShaderLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishPopulateShaderLibrary(const ITargetPlatform* TargetPlatform, FString const& Name)"
  },
  {
    "label": "SaveShaderLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveShaderLibrary(const ITargetPlatform* TargetPlatform, FString const& Name)"
  },
  {
    "label": "CreatePipelineCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePipelineCache(const ITargetPlatform* TargetPlatform, const FString& LibraryName)"
  },
  {
    "label": "CleanShaderCodeLibraries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanShaderCodeLibraries()"
  },
  {
    "label": "RegisterShaderChunkDataGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterShaderChunkDataGenerator()"
  },
  {
    "label": "CookByTheBookFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CookByTheBookFinished()"
  },
  {
    "label": "CookByTheBookFinishedInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CookByTheBookFinishedInternal()"
  },
  {
    "label": "ShutdownCookSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownCookSession()"
  },
  {
    "label": "PrintFinishStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintFinishStats()"
  },
  {
    "label": "BuildMapDependencyGraph()",
    "kind": "Method",
    "detail": "Function (TSet<FName>>)",
    "insertText": "BuildMapDependencyGraph(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "WriteMapDependencyGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteMapDependencyGraph(const ITargetPlatform* TargetPlatform, TMap<FName, TSet<FName>>& MapDependencyGraph)"
  },
  {
    "label": "GenerateCachedEditorThumbnails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateCachedEditorThumbnails()"
  },
  {
    "label": "InitializeAllCulturesToCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAllCulturesToCook(TConstArrayView<FString> CookCultures)"
  },
  {
    "label": "CompileDLCLocalization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileDLCLocalization(FBeginCookContext& BeginContext)"
  },
  {
    "label": "GenerateLocalizationReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateLocalizationReferences()"
  },
  {
    "label": "RegisterLocalizationChunkDataGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterLocalizationChunkDataGenerator()"
  },
  {
    "label": "CreateBeginCookOnTheFlyContext()",
    "kind": "Method",
    "detail": "Function (FBeginCookContext)",
    "insertText": "CreateBeginCookOnTheFlyContext(const FCookOnTheFlyStartupOptions& Options)"
  },
  {
    "label": "CreateAddPlatformContext()",
    "kind": "Method",
    "detail": "Function (FBeginCookContext)",
    "insertText": "CreateAddPlatformContext(ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "GetCookOnTheFlyUnsolicitedFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCookOnTheFlyUnsolicitedFiles(const ITargetPlatform* TargetPlatform, const FString& PlatformName,\n\t\tTArray<FString>& UnsolicitedFiles, const FString& Filename, bool bIsCookable)"
  },
  {
    "label": "StartCookAsCookWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCookAsCookWorker()"
  },
  {
    "label": "CreateCookWorkerContext()",
    "kind": "Method",
    "detail": "Function (FBeginCookContext)",
    "insertText": "CreateCookWorkerContext()"
  },
  {
    "label": "CookAsCookWorkerFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CookAsCookWorkerFinished()"
  },
  {
    "label": "GetPackagesToRetract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPackagesToRetract(int32 NumToRetract, TArray<FName>& OutRetractionPackages)"
  },
  {
    "label": "ProcessUnsolicitedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessUnsolicitedPackages(TArray<FName>* OutDiscoveredPackageNames = nullptr,\n\t\tTMap<FName, UE::Cook::FInstigator>* OutInstigators = nullptr)"
  },
  {
    "label": "LoadPackageForCooking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadPackageForCooking(UE::Cook::FPackageData& PackageData, UPackage*& OutPackage,\n\t\tUE::Cook::FPackageData* ReportingPackageData = nullptr)"
  },
  {
    "label": "LoadBeginCookIterativeFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadBeginCookIterativeFlags(FBeginCookContext& BeginContext)"
  },
  {
    "label": "LoadBeginCookIterativeFlagsLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadBeginCookIterativeFlagsLocal(FBeginCookContext& BeginContext)"
  },
  {
    "label": "BeginCookSandbox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCookSandbox(FBeginCookContext& BeginContext)"
  },
  {
    "label": "LoadInitializeConfigSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadInitializeConfigSettings(const FString& InOutputDirectoryOverride)"
  },
  {
    "label": "SetInitializeConfigSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitializeConfigSettings(UE::Cook::FInitializeConfigSettings&& Settings)"
  },
  {
    "label": "ParseCookFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseCookFilters()"
  },
  {
    "label": "ParseCookFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseCookFilters(const TCHAR* Parameter, const TCHAR* Message, TSet<FName>& OutFilterClasses)"
  },
  {
    "label": "LoadBeginCookConfigSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadBeginCookConfigSettings(FBeginCookContext& BeginContext)"
  },
  {
    "label": "SetBeginCookConfigSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBeginCookConfigSettings(FBeginCookContext& BeginContext, UE::Cook::FBeginCookConfigSettings&& Settings)"
  },
  {
    "label": "SetNeverCookPackageConfigSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNeverCookPackageConfigSettings(FBeginCookContext& BeginContext, UE::Cook::FBeginCookConfigSettings& Settings)"
  },
  {
    "label": "FinalizePackageStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizePackageStore()"
  },
  {
    "label": "ClearPackageStoreContexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPackageStoreContexts()"
  },
  {
    "label": "InitializeShadersForCookOnTheFly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeShadersForCookOnTheFly(const TArrayView<ITargetPlatform* const>& NewTargetPlatforms)"
  },
  {
    "label": "GetDependentPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDependentPackages( const TSet<UPackage*>& Packages, TSet<FName>& Found)"
  },
  {
    "label": "GetDependentPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDependentPackages(const TSet<FName>& RootPackages, TSet<FName>& FoundPackages)"
  },
  {
    "label": "PrepareSave()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "PrepareSave(UE::Cook::FPackageData& PackageData, UE::Cook::FCookerTimer& Timer,\n\t\tbool bPrecaching)"
  },
  {
    "label": "PrepareSaveInternal()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "PrepareSaveInternal(UE::Cook::FPackageData& PackageData, UE::Cook::FCookerTimer& Timer,\n\t\tbool bPrecaching)"
  },
  {
    "label": "CallBeginCacheOnObjects()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "CallBeginCacheOnObjects(UE::Cook::FPackageData& PackageData, UPackage* Package,\n\t\tTArray<UE::Cook::FCachedObjectInOuter>& Objects, int32& NextIndex, UE::Cook::FCookerTimer& Timer)"
  },
  {
    "label": "ReleaseCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseCookedPlatformData(UE::Cook::FPackageData& PackageData, UE::Cook::EStateChangeReason ReleaseSaveReason,\n\t\tUE::Cook::EPackageState NewState)"
  },
  {
    "label": "TickCancels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickCancels()"
  },
  {
    "label": "ArePreviousCookSettingsCompatible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ArePreviousCookSettingsCompatible(const TMap<FName, FString>& CurrentCookSettings,\n\t\tconst ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "SaveCookSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCookSettings(const TMap<FName, FString>& CurrentCookSettings, const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "GetSandboxAssetRegistryFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSandboxAssetRegistryFilename()"
  },
  {
    "label": "GetCookedAssetRegistryFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCookedAssetRegistryFilename(const FString& PlatformName)"
  },
  {
    "label": "GetCookedCookMetadataFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCookedCookMetadataFilename(const FString& PlatformName)"
  },
  {
    "label": "WriteCookMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteCookMetadata(const ITargetPlatform* InTargetPlatform, uint64 InDevelopmentAssetRegistryHash)"
  },
  {
    "label": "WriteReferencedSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteReferencedSet(const ITargetPlatform* InTargetPlatform, TArray<FName>&& CookedPackageNames)"
  },
  {
    "label": "GetSandboxCachedEditorThumbnailsFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSandboxCachedEditorThumbnailsFilename()"
  },
  {
    "label": "GetMountedAssetPathForPlugin()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetMountedAssetPathForPlugin(const FString& InPluginName)"
  },
  {
    "label": "IsCreatingReleaseVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCreatingReleaseVersion()"
  },
  {
    "label": "RouteBeginCacheForCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RouteBeginCacheForCookedPlatformData(UE::Cook::FPackageData& PackageData, UObject* Obj,\n\t\tconst ITargetPlatform* TargetPlatform, UE::Cook::ECachedCookedPlatformDataEvent* ExistingEvent)"
  },
  {
    "label": "RouteIsCachedCookedPlatformDataLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RouteIsCachedCookedPlatformDataLoaded(UE::Cook::FPackageData& PackageData, UObject* Obj,\n\t\tconst ITargetPlatform* TargetPlatform, UE::Cook::ECachedCookedPlatformDataEvent* ExistingEvent)"
  },
  {
    "label": "SavePackageBeginCacheForCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (EPackageWriterResult)",
    "insertText": "SavePackageBeginCacheForCookedPlatformData(FName PackageName,\n\t\tconst ITargetPlatform* TargetPlatform, TConstArrayView<UObject*> SaveableObjects, uint32 SaveFlags)"
  },
  {
    "label": "SaveCookedPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCookedPackage(UE::Cook::FSaveCookedPackageContext& Context)"
  },
  {
    "label": "RecordExternalActorDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordExternalActorDependencies(TConstArrayView<FName> ExternalActorDependencies)"
  },
  {
    "label": "SaveGlobalShaderMapFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveGlobalShaderMapFiles(const TArrayView<const ITargetPlatform* const>& Platforms,\n\t\tODSCRecompileCommand RecompileCommand)"
  },
  {
    "label": "CreateSandboxFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSandboxFile(FBeginCookContext& BeginContext)"
  },
  {
    "label": "PopulateCookedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateCookedPackages(const TConstArrayView<const ITargetPlatform*> TargetPlatforms)"
  },
  {
    "label": "BlockOnAssetRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockOnAssetRegistry(TConstArrayView<FString> CommandlinePackages)"
  },
  {
    "label": "RefreshPlatformAssetRegistries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshPlatformAssetRegistries(const TArrayView<const ITargetPlatform* const>& TargetPlatforms)"
  },
  {
    "label": "GenerateLongPackageNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateLongPackageNames(TArray<FName>& FilesInPath, TMap<FName, UE::Cook::FInstigator>& Instigators)"
  },
  {
    "label": "QueueGeneratedPackages()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "QueueGeneratedPackages(UE::Cook::FGenerationHelper& GenerationHelper,\n\t\tUE::Cook::FPackageData& PackageData)"
  },
  {
    "label": "PrepareSaveGenerationPackage()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "PrepareSaveGenerationPackage(UE::Cook::FGenerationHelper& GenerationHelper,\n\t\tUE::Cook::FPackageData& PackageData, UE::Cook::FCookerTimer& Timer, bool bPrecaching)"
  },
  {
    "label": "BeginCacheObjectsToMove()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "BeginCacheObjectsToMove(UE::Cook::FGenerationHelper& GenerationHelper,\n\t\tUE::Cook::FCookGenerationInfo& Info, UE::Cook::FCookerTimer& Timer,\n\t\tTArray<ICookPackageSplitter::FGeneratedPackageForPreSave>& GeneratedPackagesForPresave)"
  },
  {
    "label": "PreSaveGeneratorPackage()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "PreSaveGeneratorPackage(UE::Cook::FPackageData& PackageData,\n\t\tUE::Cook::FGenerationHelper& GenerationHelper, UE::Cook::FCookGenerationInfo& Info,\n\t\tTArray<ICookPackageSplitter::FGeneratedPackageForPreSave>& GeneratedPackagesForPresave)"
  },
  {
    "label": "TryConstructGeneratedPackagesForPresave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConstructGeneratedPackagesForPresave(UE::Cook::FPackageData& PackageData,\n\t\tUE::Cook::FGenerationHelper& GenerationHelper,\n\t\tTArray<ICookPackageSplitter::FGeneratedPackageForPreSave>& GeneratedPackagesForPresave)"
  },
  {
    "label": "BeginCachePostMove()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "BeginCachePostMove(UE::Cook::FGenerationHelper& GenerationHelper,\n\t\tUE::Cook::FCookGenerationInfo& Info, UE::Cook::FCookerTimer& Timer)"
  },
  {
    "label": "TryPopulateGeneratedPackage()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EPollStatus)",
    "insertText": "TryPopulateGeneratedPackage(UE::Cook::FGenerationHelper& GenerationHelper,\n\t\tUE::Cook::FCookGenerationInfo& GeneratedInfo)"
  },
  {
    "label": "FindOrCreateSaveContexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindOrCreateSaveContexts(TConstArrayView<const ITargetPlatform*> TargetPlatforms)"
  },
  {
    "label": "DeleteOutputForPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteOutputForPackage(FName PackageName, const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "SetActivePackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActivePackage(FName PackageName, FName PackageTrackingOpsName)"
  },
  {
    "label": "ClearActivePackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearActivePackage()"
  },
  {
    "label": "DumpCrashContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpCrashContext(FCrashContextExtendedWriter& Writer)"
  },
  {
    "label": "OnDiscoveredPackageDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDiscoveredPackageDebug(FName PackageName, const UE::Cook::FInstigator& Instigator)"
  },
  {
    "label": "OnObjectHandleReadDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectHandleReadDebug(const TArrayView<const UObject*const>& ReadObjects)"
  },
  {
    "label": "ReportHiddenDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportHiddenDependency(FName Referencer, FName Dependency)"
  },
  {
    "label": "BroadcastCookStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastCookStarted()"
  },
  {
    "label": "BroadcastCookFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastCookFinished()"
  }
]