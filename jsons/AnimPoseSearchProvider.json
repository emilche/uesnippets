[
  {
    "label": "FAnimationBaseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationBaseContext"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "ENGINE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ENGINE_API"
  },
  {
    "label": "FSearchResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSearchResult"
  },
  {
    "label": "FSearchPlayingAsset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSearchPlayingAsset"
  },
  {
    "label": "FSearchFutureAsset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSearchFutureAsset"
  },
  {
    "label": "IPoseSearchProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" CoreMinimal . h \" # include \" Features / IModularFeature . h \" struct FAnimationBaseContext ; class UAnimationAsset ; namespace UE::Anim { class IPoseSearchProvider : public IModularFeature { public : ~)",
    "insertText": "IPoseSearchProvider()"
  },
  {
    "label": "GetModularFeatureName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetModularFeatureName()"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IPoseSearchProvider*)",
    "insertText": "Get()"
  },
  {
    "label": "Search()",
    "kind": "Method",
    "detail": "Function (struct FSearchResult { UObject* SelectedAsset = nullptr ; float TimeOffsetSeconds = 0 . f ; float Dissimilarity = MAX_flt ; bool bIsFromContinuingPlaying = false ; bool bMirrored = false ; float WantedPlayRate = 1 . f ; } ; struct FSearchPlayingAsset { const UObject* Asset = nullptr ; float AccumulatedTime = 0 . f ; } ; struct FSearchFutureAsset : FSearchPlayingAsset { float IntervalTime = 0 . f ; } ; FSearchResult)",
    "insertText": "Search(const FAnimationBaseContext& GraphContext, TArrayView<const UObject*> AssetsToSearch, const FSearchPlayingAsset& PlayingAsset, const FSearchFutureAsset& FutureAsset)"
  },
  {
    "label": "Search()",
    "kind": "Method",
    "detail": "Function (FSearchPlayingAsset SearchPlayingAsset ; SearchPlayingAsset . Asset = PlayingAsset ; SearchPlayingAsset . AccumulatedTime = PlayingAssetAccumulatedTime ; return)",
    "insertText": "Search(GraphContext, AssetsToSearch, SearchPlayingAsset, FSearchFutureAsset())"
  }
]