[
  {
    "label": "ExtensionTestHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExtensionTestHandler"
  },
  {
    "label": "RequestContextType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RequestContextType"
  },
  {
    "label": "ExtensionTestHandler()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_CEFTESTS_EXTENSIONS_EXTENSION_TEST_HANDLER_H_ # define CEF_TESTS_CEFTESTS_EXTENSIONS_EXTENSION_TEST_HANDLER_H_ # pragma once # include<vector> # include \" include / cef_extension_handler . h \" # include \" include / cef_values . h \" # include \" include / wrapper / cef_scoped_temp_dir . h \" # include \" tests / ceftests / routing_test_handler . h \" # include \" tests / gtest / include / gtest / gtest . h \" class ExtensionTestHandler : public RoutingTestHandler,public CefExtensionHandler { public : enum RequestContextType { RC_TYPE_FLAG_CUSTOM = 1<<0,RC_TYPE_FLAG_ON_DISK = 1<<1,RC_TYPE_FLAG_WITH_HANDLER = 1<<2,RC_TYPE_FLAG_LOAD_WITH_HANDLER = 1<<3,RC_TYPE_FLAG_LOAD_WITHOUT_HANDLER = 1<<4,} ;)",
    "insertText": "ExtensionTestHandler(RequestContextType request_context_type)"
  },
  {
    "label": "ExtensionTestHandler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ExtensionTestHandler()"
  },
  {
    "label": "RunTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunTest()"
  },
  {
    "label": "DestroyTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyTest()"
  },
  {
    "label": "OnAfterCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAfterCreated(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "OnExtensionLoadFailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExtensionLoadFailed(cef_errorcode_t result)"
  },
  {
    "label": "OnQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnQuery(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, int64 query_id, const CefString& request, bool persistent, CefRefPtr<Callback> callback)"
  },
  {
    "label": "request_context()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefRequestContext>)",
    "insertText": "request_context()"
  },
  {
    "label": "request_context_on_disk()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "request_context_on_disk()"
  },
  {
    "label": "request_context_with_handler()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "request_context_with_handler()"
  },
  {
    "label": "request_context_load_with_handler()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "request_context_load_with_handler()"
  },
  {
    "label": "request_context_load_without_handler()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "request_context_load_without_handler()"
  },
  {
    "label": "request_context_same_loader()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "request_context_same_loader()"
  },
  {
    "label": "CreateDefaultManifest()",
    "kind": "Method",
    "detail": "Function (} protected : typedef std::vector<std::string> ApiPermissionsList ; CefRefPtr<CefDictionaryValue>)",
    "insertText": "CreateDefaultManifest(const ApiPermissionsList& api_permissions)"
  },
  {
    "label": "GetMessageJS()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetMessageJS(const std::string& message)"
  },
  {
    "label": "VerifyExtensionInContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyExtensionInContext(CefRefPtr<CefExtension> extension, CefRefPtr<CefRequestContext> context, bool has_access, bool is_loader)"
  },
  {
    "label": "LoadExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadExtension(const std::string& extension_path, CefRefPtr<CefDictionaryValue> manifest)"
  },
  {
    "label": "UnloadExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnloadExtension(CefRefPtr<CefExtension> extension)"
  },
  {
    "label": "ReleaseRequestContexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRequestContexts()"
  },
  {
    "label": "set_create_main_browser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_create_main_browser(bool val)"
  },
  {
    "label": "create_main_browser()",
    "kind": "Method",
    "detail": "Function (create_main_browser_ = val ; } bool)",
    "insertText": "create_main_browser()"
  },
  {
    "label": "OnCreateMainBrowser()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCreateMainBrowser()"
  },
  {
    "label": "OnLoadExtensions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnLoadExtensions()"
  },
  {
    "label": "OnMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnMessage(CefRefPtr<CefBrowser> browser, const std::string& message)"
  },
  {
    "label": "OnDestroyTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDestroyTest()"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (private : const RequestContextType request_context_type_ ; CefScopedTempDir request_context_temp_dir_ ; CefRefPtr<CefRequestContext> request_context_ ; CefRefPtr<CefRequestContext> loader_request_context_ ; bool create_main_browser_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(ExtensionTestHandler)"
  },
  {
    "label": "EXTENSION_TEST()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "EXTENSION_TEST(name, test_class, rc_type) \\ TEST(ExtensionTest, name)"
  },
  {
    "label": "test_class()",
    "kind": "Method",
    "detail": "Function (\\ CefRefPtr<test_class> handler = new)",
    "insertText": "test_class(\\ static_cast<ExtensionTestHandler::RequestContextType>(rc_type))"
  },
  {
    "label": "ExecuteTest()",
    "kind": "Method",
    "detail": "Function (\\ handler ->)",
    "insertText": "ExecuteTest()"
  },
  {
    "label": "ReleaseAndWaitForDestructor()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ReleaseAndWaitForDestructor(handler)"
  }
]