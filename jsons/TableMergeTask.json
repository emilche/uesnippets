[
  {
    "label": "FImportTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImportTableRow"
  },
  {
    "label": "FTableMergeTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableMergeTask"
  },
  {
    "label": "FBoth",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoth"
  },
  {
    "label": "FOnlyA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnlyA"
  },
  {
    "label": "FOnlyB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnlyB"
  },
  {
    "label": "FMerged",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMerged"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTableMergeTask()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" TableImportTask . h \" # include \" Tables . h \" # include \" TraceServices / Model / TableMerge . h \" # include \" Misc / TVariant . h \" namespace TraceServices { class FImportTableRow ; class FTableMergeTask { public :)",
    "insertText": "FTableMergeTask(const TSharedPtr<IUntypedTable>& InTableA, const TSharedPtr<IUntypedTable>& InTableB, FTableMergeService::TableDiffCallback InCallback)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()()"
  },
  {
    "label": "MergeTables()",
    "kind": "Method",
    "detail": "Function (private : ETableDiffResult)",
    "insertText": "MergeTables()"
  },
  {
    "label": "FBoth()",
    "kind": "Method",
    "detail": "Function (struct FBoth {)",
    "insertText": "FBoth(uint64 Index) : ColIndex(Index)"
  },
  {
    "label": "FOnlyA()",
    "kind": "Method",
    "detail": "Function (} uint64 ColIndex ; } ; struct FOnlyA {)",
    "insertText": "FOnlyA(uint64 Index) : ColIndex(Index)"
  },
  {
    "label": "FOnlyB()",
    "kind": "Method",
    "detail": "Function (} uint64 ColIndex ; } ; struct FOnlyB {)",
    "insertText": "FOnlyB(uint64 Index) : ColIndex(Index)"
  },
  {
    "label": "FMerged()",
    "kind": "Method",
    "detail": "Function (} uint64 ColIndex ; } ; struct FMerged {)",
    "insertText": "FMerged(uint64 Index) : ColIndex(Index)"
  },
  {
    "label": "BuildCLayout()",
    "kind": "Method",
    "detail": "Function (} uint64 ColIndex ; } ; enum class Sign { Positive,Negative } ; bool)",
    "insertText": "BuildCLayout(const ITableLayout& LayoutA, const ITableLayout& LayoutB, TTableLayout<FImportTableRow>& LayoutC)"
  },
  {
    "label": "FillResultUsing()",
    "kind": "Method",
    "detail": "Function (template<Variant,Sign Operation> void)",
    "insertText": "FillResultUsing(IUntypedTableReader& SourceTableReader)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(const FText& Msg)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (const uint64 ColumnsMapCount = static_cast<)",
    "insertText": "uint64(ColumnsMap.Num())"
  },
  {
    "label": "AddRow()",
    "kind": "Method",
    "detail": "Function (FImportTableRow& Row = TableC ->)",
    "insertText": "AddRow()"
  },
  {
    "label": "SetNumValues()",
    "kind": "Method",
    "detail": "Function (Row .)",
    "insertText": "SetNumValues(ColumnsMapCount)"
  },
  {
    "label": "GetLayout()",
    "kind": "Method",
    "detail": "Function (const ETableColumnType ColumnType = TableC ->)",
    "insertText": "GetLayout().GetColumnType(DestIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64 SourceIndex ; int64 Multiplier = 1 ;)",
    "insertText": "if(const auto* Column = ColumnsMap[static_cast<int32>(DestIndex)].TryGet<FBoth>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SourceIndex = Column -> ColIndex ; } else)",
    "insertText": "if(const auto* ColumnA = ColumnsMap[static_cast<int32>(DestIndex)].TryGet<Variant>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SourceIndex = ColumnA -> ColIndex ; } else)",
    "insertText": "if(const auto* ColumnM = ColumnsMap[static_cast<int32>(DestIndex)].TryGet<FMerged>())"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (SourceIndex = ColumnM -> ColIndex ; Multiplier = Operation = = Sign::Negative ? - 1 : 1 ; } else {)",
    "insertText": "switch(ColumnType)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (break ; case TableColumnType_Int : Row .)",
    "insertText": "SetValue(DestIndex, 0)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (break ; case TableColumnType_Float : Row .)",
    "insertText": "SetValue(DestIndex, 0.0f)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (break ; case TableColumnType_Double : Row .)",
    "insertText": "SetValue(DestIndex, 0.0)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (break ; case TableColumnType_CString : Row .)",
    "insertText": "SetValue(DestIndex, TEXT(\"<>\"))"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (break ; case TableColumnType_Int : Row .)",
    "insertText": "SetValue(DestIndex, SourceTableReader.GetValueInt(SourceIndex) * Multiplier)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (break ; case TableColumnType_Float : Row .)",
    "insertText": "SetValue(DestIndex, SourceTableReader.GetValueFloat(SourceIndex) * (float)Multiplier)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (break ; case TableColumnType_Double : Row .)",
    "insertText": "SetValue(DestIndex, SourceTableReader.GetValueDouble(SourceIndex) * (double)Multiplier)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (break ; case TableColumnType_CString : Row .)",
    "insertText": "SetValue(DestIndex, TableC->GetStringStore().Store(SourceTableReader.GetValueCString(SourceIndex)))"
  },
  {
    "label": "SetRowIndex()",
    "kind": "Method",
    "detail": "Function (break ; case TableColumnType_Invalid : break ; default : break ; } } } SourceTableReader .)",
    "insertText": "SetRowIndex(0)"
  }
]