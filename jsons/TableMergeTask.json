[
  {
    "label": "FImportTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImportTableRow"
  },
  {
    "label": "FTableMergeTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableMergeTask"
  },
  {
    "label": "FBoth",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoth"
  },
  {
    "label": "FOnlyA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnlyA"
  },
  {
    "label": "FOnlyB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnlyB"
  },
  {
    "label": "FMerged",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMerged"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTableMergeTask()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FTableMergeTask(const TSharedPtr<IUntypedTable>& InTableA, const TSharedPtr<IUntypedTable>& InTableB, FTableMergeService::TableDiffCallback InCallback)"
  },
  {
    "label": "MergeTables()",
    "kind": "Method",
    "detail": "Function (ETableDiffResult)",
    "insertText": "MergeTables()"
  },
  {
    "label": "BuildCLayout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildCLayout(const ITableLayout& LayoutA, const ITableLayout& LayoutB, TTableLayout<FImportTableRow>& LayoutC)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(const FText& Msg)"
  }
]