[
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "FFrameRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameRate"
  },
  {
    "label": "TimeHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeHelpers"
  },
  {
    "label": "MigrateFrameTimes()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Math / NumericLimits . h \" # include \" Math / Range . h \" # include \" Math / RangeBound . h \" # include \" Math / UnrealMathUtility . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameTime . h \" class UMovieScene ; struct FFrameRate ; namespace UE { namespace MovieScene { class TimeHelpers { public : void)",
    "insertText": "MigrateFrameTimes(FFrameRate SourceRate, FFrameRate DestinationRate, UMovieScene* MovieScene, bool bApplyRecursively = false)"
  },
  {
    "label": "DiscreteInclusiveLower()",
    "kind": "Method",
    "detail": "Function (} ; FFrameNumber)",
    "insertText": "DiscreteInclusiveLower(const TRangeBound<FFrameNumber>& InLowerBound)"
  },
  {
    "label": "OffsetIndex()",
    "kind": "Method",
    "detail": "Function (const int32 Offsets [ ] = { 0,1 } ; const int32)",
    "insertText": "OffsetIndex(int32)InLowerBound.IsExclusive()"
  },
  {
    "label": "DiscreteInclusiveLower()",
    "kind": "Method",
    "detail": "Function (} FFrameNumber)",
    "insertText": "DiscreteInclusiveLower(const TRange<FFrameNumber>& InRange)"
  },
  {
    "label": "DiscreteExclusiveUpper()",
    "kind": "Method",
    "detail": "Function (} FFrameNumber)",
    "insertText": "DiscreteExclusiveUpper(const TRangeBound<FFrameNumber>& InUpperBound)"
  },
  {
    "label": "OffsetIndex()",
    "kind": "Method",
    "detail": "Function (const int32 Offsets [ ] = { 0,1 } ; const int32)",
    "insertText": "OffsetIndex(int32)InUpperBound.IsInclusive()"
  },
  {
    "label": "DiscreteExclusiveUpper()",
    "kind": "Method",
    "detail": "Function (} FFrameNumber)",
    "insertText": "DiscreteExclusiveUpper(const TRange<FFrameNumber>& InRange)"
  },
  {
    "label": "MakeDiscreteRange()",
    "kind": "Method",
    "detail": "Function (} TRange<FFrameNumber>)",
    "insertText": "MakeDiscreteRange(FFrameNumber MinInclusive, FFrameNumber MaxExclusive)"
  },
  {
    "label": "MakeHullRange()",
    "kind": "Method",
    "detail": "Function (} TRange<FFrameNumber>)",
    "insertText": "MakeHullRange(const TRange<FFrameNumber>& InRange)"
  },
  {
    "label": "MakeHullRange()",
    "kind": "Method",
    "detail": "Function (} TRange<FFrameNumber>)",
    "insertText": "MakeHullRange(FFrameNumber MinInclusive, FFrameNumber MaxInclusive)"
  },
  {
    "label": "IsEmptyOrZeroSize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmptyOrZeroSize(const TRange<FFrameNumber>& InRange)"
  },
  {
    "label": "MakeDiscreteRangeFromLower()",
    "kind": "Method",
    "detail": "Function (} TRange<FFrameNumber>)",
    "insertText": "MakeDiscreteRangeFromLower(const TRangeBound<FFrameNumber>& InLowerBound, int32 DiscreteSize)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (const FFrameNumber ExclusiveUpperValue = InLowerBound .)",
    "insertText": "GetValue()"
  },
  {
    "label": "MakeDiscreteRangeFromUpper()",
    "kind": "Method",
    "detail": "Function (} TRange<FFrameNumber>)",
    "insertText": "MakeDiscreteRangeFromUpper(const TRangeBound<FFrameNumber>& InUpperBound, int32 DiscreteSize)"
  },
  {
    "label": "DiscreteSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "DiscreteSize(const TRange<FFrameNumber>& InRange)"
  },
  {
    "label": "DiscreteRangeIsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DiscreteRangeIsEmpty(const TRange<FFrameNumber>& InRange)"
  },
  {
    "label": "GetUpperBound()",
    "kind": "Method",
    "detail": "Function (const bool bUpperInclusive = InRange .)",
    "insertText": "GetUpperBound().IsInclusive()"
  },
  {
    "label": "GetLowerBoundValue()",
    "kind": "Method",
    "detail": "Function (} else { return bUpperInclusive ? InRange .)",
    "insertText": "GetLowerBoundValue() >= InRange.GetUpperBoundValue() : InRange.GetLowerBoundValue() >= InRange.GetUpperBoundValue()"
  },
  {
    "label": "DilateRange()",
    "kind": "Method",
    "detail": "Function (} } template<T> TRange<T>)",
    "insertText": "DilateRange(const TRange<T>& InRange, T LowerAmount, T UpperAmount)"
  },
  {
    "label": "GetLowerBound()",
    "kind": "Method",
    "detail": "Function (TRangeBound<T> LowerBound = InRange .)",
    "insertText": "GetLowerBound()"
  },
  {
    "label": "GetUpperBound()",
    "kind": "Method",
    "detail": "Function (TRangeBound<T> UpperBound = InRange .)",
    "insertText": "GetUpperBound()"
  },
  {
    "label": "ExpandRange()",
    "kind": "Method",
    "detail": "Function (} template<T> TRange<T>)",
    "insertText": "ExpandRange(const TRange<T>& InRange, T Amount)"
  },
  {
    "label": "TranslateRange()",
    "kind": "Method",
    "detail": "Function (} template<T> TRange<T>)",
    "insertText": "TranslateRange(const TRange<T>& InRange, T Amount)"
  },
  {
    "label": "ClampToDiscreteRange()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "ClampToDiscreteRange(FFrameTime InTime, const TRange<FFrameNumber>& InRange)"
  },
  {
    "label": "GetLowerBound()",
    "kind": "Method",
    "detail": "Function (FFrameTime MinTime = InRange .)",
    "insertText": "GetLowerBound().IsClosed() ? DiscreteInclusiveLower(InRange) : FFrameTime(TNumericLimits<int32>::Lowest())"
  },
  {
    "label": "FFrameTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime MaxTime =)",
    "insertText": "FFrameTime(InRange.GetUpperBound().IsClosed() ? DiscreteExclusiveUpper(InRange)-1 : TNumericLimits<int32>::Max(), 0.99999994f)"
  },
  {
    "label": "ConvertToFrameTimeRange()",
    "kind": "Method",
    "detail": "Function (} TRange<FFrameTime>)",
    "insertText": "ConvertToFrameTimeRange(const TRange<FFrameNumber>& InRange)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameTime> Result ;)",
    "insertText": "if(InRange.HasLowerBound())"
  },
  {
    "label": "SetLowerBound()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetLowerBound(TRangeBound<FFrameTime>::Inclusive(InRange.GetLowerBoundValue()))"
  },
  {
    "label": "SetLowerBound()",
    "kind": "Method",
    "detail": "Function (} else { Result .)",
    "insertText": "SetLowerBound(TRangeBound<FFrameTime>::Exclusive(InRange.GetLowerBoundValue()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(InRange.HasUpperBound())"
  },
  {
    "label": "SetUpperBound()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetUpperBound(TRangeBound<FFrameTime>::Inclusive(InRange.GetUpperBoundValue()))"
  },
  {
    "label": "SetUpperBound()",
    "kind": "Method",
    "detail": "Function (} else { Result .)",
    "insertText": "SetUpperBound(TRangeBound<FFrameTime>::Exclusive(InRange.GetUpperBoundValue()))"
  },
  {
    "label": "ConvertToFrameTimeRange()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } TRange<FFrameTime>)",
    "insertText": "ConvertToFrameTimeRange(const TRange<float>& InRange)"
  },
  {
    "label": "SetLowerBound()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetLowerBound(TRangeBound<FFrameTime>::Inclusive(FFrameTime::FromDecimal(InRange.GetLowerBoundValue())))"
  },
  {
    "label": "SetLowerBound()",
    "kind": "Method",
    "detail": "Function (} else { Result .)",
    "insertText": "SetLowerBound(TRangeBound<FFrameTime>::Exclusive(FFrameTime::FromDecimal(InRange.GetLowerBoundValue())))"
  },
  {
    "label": "SetUpperBound()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetUpperBound(TRangeBound<FFrameTime>::Inclusive(FFrameTime::FromDecimal(InRange.GetUpperBoundValue())))"
  },
  {
    "label": "SetUpperBound()",
    "kind": "Method",
    "detail": "Function (} else { Result .)",
    "insertText": "SetUpperBound(TRangeBound<FFrameTime>::Exclusive(FFrameTime::FromDecimal(InRange.GetUpperBoundValue())))"
  },
  {
    "label": "ConvertToDiscreteRange()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } TRange<FFrameNumber>)",
    "insertText": "ConvertToDiscreteRange(const TRange<FFrameTime>& InRange)"
  },
  {
    "label": "GetLowerBoundValue()",
    "kind": "Method",
    "detail": "Function (FFrameTime LowerBound = InRange .)",
    "insertText": "GetLowerBoundValue()"
  },
  {
    "label": "SetLowerBound()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetLowerBound(TRangeBound<FFrameNumber>::Inclusive(LowerBound.GetFrame()))"
  },
  {
    "label": "SetLowerBound()",
    "kind": "Method",
    "detail": "Function (} else { Result .)",
    "insertText": "SetLowerBound(TRangeBound<FFrameNumber>::Inclusive(LowerBound.GetFrame()+1))"
  },
  {
    "label": "GetUpperBoundValue()",
    "kind": "Method",
    "detail": "Function (FFrameTime UpperBound = InRange .)",
    "insertText": "GetUpperBoundValue()"
  },
  {
    "label": "SetUpperBound()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetUpperBound(TRangeBound<FFrameNumber>::Exclusive(UpperBound.GetFrame()))"
  },
  {
    "label": "ConvertRange()",
    "kind": "Method",
    "detail": "Function (} return Result ; } template<InBoundType,OutBoundType> TRange<OutBoundType>)",
    "insertText": "ConvertRange(const TRange<InBoundType>& Range)"
  },
  {
    "label": "IsOpen()",
    "kind": "Method",
    "detail": "Function (TRangeBound<OutBoundType> DestLower = SourceLower .)",
    "insertText": "IsOpen() ? TRangeBound<OutBoundType>() : SourceLower.IsInclusive() ? TRangeBound<OutBoundType>::Inclusive(SourceLower.GetValue()) : TRangeBound<OutBoundType>::Exclusive(SourceLower.GetValue())"
  },
  {
    "label": "IsOpen()",
    "kind": "Method",
    "detail": "Function (TRangeBound<OutBoundType> DestUpper = SourceUpper .)",
    "insertText": "IsOpen() ? TRangeBound<OutBoundType>() : SourceUpper.IsInclusive() ? TRangeBound<OutBoundType>::Inclusive(SourceUpper.GetValue()) : TRangeBound<OutBoundType>::Exclusive(SourceUpper.GetValue())"
  },
  {
    "label": "ConvertRange()",
    "kind": "Method",
    "detail": "Function (} template<> TRange<FFrameNumber>)",
    "insertText": "ConvertRange(const TRange<FFrameTime>& Range)"
  },
  {
    "label": "IsOpen()",
    "kind": "Method",
    "detail": "Function (TRangeBound<FFrameNumber> DestLower = SourceLower .)",
    "insertText": "IsOpen() ? TRangeBound<FFrameNumber>() : SourceLower.IsInclusive() ? TRangeBound<FFrameNumber>::Inclusive(SourceLower.GetValue().FloorToFrame()) : TRangeBound<FFrameNumber>::Exclusive(SourceLower.GetValue().FloorToFrame())"
  },
  {
    "label": "IsOpen()",
    "kind": "Method",
    "detail": "Function (TRangeBound<FFrameNumber> DestUpper = SourceUpper .)",
    "insertText": "IsOpen() ? TRangeBound<FFrameNumber>() : SourceUpper.IsInclusive() ? TRangeBound<FFrameNumber>::Inclusive(SourceUpper.GetValue().FloorToFrame()) : TRangeBound<FFrameNumber>::Exclusive(SourceUpper.GetValue().FloorToFrame())"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} } } FString)",
    "insertText": "LexToString(const TRange<FFrameNumber>& InRange)"
  }
]