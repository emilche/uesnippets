[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CURVEEDITOR_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CURVEEDITOR_API"
  },
  {
    "label": "FCurvePointHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePointHandle"
  },
  {
    "label": "FCurveEditorTreeItemID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorTreeItemID"
  },
  {
    "label": "FCurveEditorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditorTree"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / TypeHash . h \" # include \" Curves / KeyHandle . h \" # include \" Containers / BitArray . h \" # include \" Containers / Array . h \" # include \" Templates / SharedPointer . h \" enum class ECurvePointType : uint8 { None = 0 x000,Key = 0 x001,ArriveTangent = 0 x002,LeaveTangent = 0 x004,Any = Key | ArriveTangent | LeaveTangent } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECurvePointType)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None,,ImplicitChild } ; enum class ECurveEditorViewID : uint64 { Invalid = 0,Absolute = 1<<0,Normalized = 1<<1,Stacked = 1<<2,CUSTOM_START = 1<<3,ANY_BUILT_IN = Absolute | Normalized | Stacked,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECurveEditorViewID)"
  },
  {
    "label": "Unique()",
    "kind": "Method",
    "detail": "Function (struct FCurveModelID { FCurveModelID)",
    "insertText": "Unique()"
  },
  {
    "label": "FCurveModelID()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FCurveModelID()"
  },
  {
    "label": "FCurvePointHandle()",
    "kind": "Method",
    "detail": "Function (} uint32 ID ; } ; struct FCurvePointHandle {)",
    "insertText": "FCurvePointHandle(FCurveModelID InCurveID, ECurvePointType InPointType, FKeyHandle InKeyHandle) : CurveID(InCurveID), PointType(InPointType), KeyHandle(InKeyHandle)"
  },
  {
    "label": "FCurveEditorTreeItemID()",
    "kind": "Method",
    "detail": "Function (} FCurveModelID CurveID ; ECurvePointType PointType ; FKeyHandle KeyHandle ; } ; struct FCurveEditorTreeItemID {)",
    "insertText": "FCurveEditorTreeItemID() : Value(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FCurveEditorTreeItemID A, FCurveEditorTreeItemID B)"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (} FCurveEditorTreeItemID)",
    "insertText": "Invalid()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  }
]