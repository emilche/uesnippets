[
  {
    "label": "RandenPoolSeedSeq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RandenPoolSeedSeq"
  },
  {
    "label": "ContiguousTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContiguousTag"
  },
  {
    "label": "BufferTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BufferTag"
  },
  {
    "label": "NonsecureURBGBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NonsecureURBGBase"
  },
  {
    "label": "SSeq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSeq"
  },
  {
    "label": "generate_impl()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_NONSECURE_BASE_H_ # define ABSL_RANDOM_INTERNAL_NONSECURE_BASE_H_ # include<algorithm> # include<cstdint> # include<iterator> # include<type_traits> # include<utility> # include<vector> # include \" absl / base / macros . h \" # include \" absl / container / inlined_vector . h \" # include \" absl / meta / type_traits . h \" # include \" absl / random / internal / pool_urbg . h \" # include \" absl / random / internal / salted_seed_seq . h \" # include \" absl / random / internal / seed_material . h \" # include \" absl / types / span . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { class RandenPoolSeedSeq { private : struct ContiguousTag { } ; struct BufferTag { } ; template<Contiguous> void)",
    "insertText": "generate_impl(ContiguousTag, Contiguous begin, Contiguous end)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (const size_t n = static_cast<)",
    "insertText": "size_t(std::distance(begin, end))"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (auto*)",
    "insertText": "a(*begin)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (RandenPool<uint8_t)",
    "insertText": "Fill(absl::MakeSpan(reinterpret_cast<uint8_t*>(a), sizeof(*a) * n))"
  },
  {
    "label": "generate_impl()",
    "kind": "Method",
    "detail": "Function (} template<RandomAccessIterator> void)",
    "insertText": "generate_impl(BufferTag, RandomAccessIterator begin, RandomAccessIterator end)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (const size_t n =)",
    "insertText": "distance(begin, end)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (absl::InlinedVector<uint32_t,8>)",
    "insertText": "data(n, 0)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (RandenPool<uint32_t)",
    "insertText": "Fill(absl::MakeSpan(data.begin(), data.end()))"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(std::begin(data), std::end(data), begin)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} public : using result_type = uint32_t ; size_t)",
    "insertText": "size()"
  },
  {
    "label": "generate()",
    "kind": "Method",
    "detail": "Function (} template<RandomAccessIterator> void)",
    "insertText": "generate(RandomAccessIterator begin, RandomAccessIterator end)"
  },
  {
    "label": "conditional_t()",
    "kind": "Method",
    "detail": "Function (using U = std::iterator_traits<RandomAccessIterator>::value_type ; using TagType =)",
    "insertText": "conditional_t(std::is_pointer<RandomAccessIterator>::value || std::is_same<RandomAccessIterator, typename std::vector<U>::iterator>::value)"
  },
  {
    "label": "generate_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "generate_impl(TagType{}, begin, end)"
  },
  {
    "label": "NonsecureURBGBase()",
    "kind": "Method",
    "detail": "Function (} } } ; template<URBG,Seeder = RandenPoolSeedSeq> class NonsecureURBGBase { public : using result_type = URBG::result_type ;)",
    "insertText": "NonsecureURBGBase() : urbg_(ConstructURBG())"
  },
  {
    "label": "NonsecureURBGBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NonsecureURBGBase(const NonsecureURBGBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NonsecureURBGBase&)",
    "insertText": "operator(const NonsecureURBGBase&)"
  },
  {
    "label": "NonsecureURBGBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NonsecureURBGBase(NonsecureURBGBase&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NonsecureURBGBase&)",
    "insertText": "operator(NonsecureURBGBase&&)"
  },
  {
    "label": "NonsecureURBGBase()",
    "kind": "Method",
    "detail": "Function (template<class SSeq,= absl::enable_if_t<! std::is_same<SSeq,NonsecureURBGBase>::value>>)",
    "insertText": "NonsecureURBGBase(SSeq&& seq) : urbg_(ConstructURBG(std::forward<SSeq>(seq)))"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "result_type(min)()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "result_type(max)()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} result_type)",
    "insertText": "operator()()"
  },
  {
    "label": "discard()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "discard(unsigned long long values)"
  },
  {
    "label": "discard()",
    "kind": "Method",
    "detail": "Function (urbg_ .)",
    "insertText": "discard(values)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const NonsecureURBGBase& other)"
  },
  {
    "label": "ConstructURBG()",
    "kind": "Method",
    "detail": "Function (} private : URBG)",
    "insertText": "ConstructURBG()"
  },
  {
    "label": "URBG()",
    "kind": "Method",
    "detail": "Function (Seeder seeder ; return)",
    "insertText": "URBG(seeder)"
  },
  {
    "label": "ConstructURBG()",
    "kind": "Method",
    "detail": "Function (} template<SSeq> URBG)",
    "insertText": "ConstructURBG(SSeq&& seq)"
  },
  {
    "label": "MakeSaltedSeedSeq()",
    "kind": "Method",
    "detail": "Function (auto salted_seq =)",
    "insertText": "MakeSaltedSeedSeq(std::forward<SSeq>(seq))"
  }
]