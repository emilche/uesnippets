[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TSceneUpdateCommandQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSceneUpdateCommandQueue"
  },
  {
    "label": "FBasePayloadArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBasePayloadArray"
  },
  {
    "label": "TPayloadArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPayloadArray"
  },
  {
    "label": "FUpdateCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateCommand"
  },
  {
    "label": "TConstPayloadIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TConstPayloadIterator"
  },
  {
    "label": "FItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FItem"
  },
  {
    "label": "TPayloadRangeView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPayloadRangeView"
  },
  {
    "label": "TPayloadBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPayloadBase"
  },
  {
    "label": "FReadAccessScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReadAccessScope"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Experimental / Containers / RobinHoodHashTable . h \" # include \" RendererInterface . h \" enum class ESceneUpdateCommandFilter : uint32 { Added = 1 u<<0,Deleted = 1 u<<1,Updated = 1 u<<2,AddedUpdated = Added | Updated,All = Added | Deleted | Updated } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESceneUpdateCommandFilter)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (template<InSceneInfoType,EInDirtyFlagsType,EInId> class TSceneUpdateCommandQueue { private : using FAllocator = FDefaultAllocator ; struct FBasePayloadArray ; template<PayloadType> struct TPayloadArray ; public : using EDirtyFlags = EInDirtyFlagsType ; using FSceneInfo = InSceneInfoType ; using FSceneInfoPersistentId = InSceneInfoType::FPersistentId ; using EId = EInId ; int32 MaxId =)",
    "insertText": "int32(EId::MAX)"
  },
  {
    "label": "FUpdateCommand()",
    "kind": "Method",
    "detail": "Function (struct FUpdateCommand {)",
    "insertText": "FUpdateCommand(FSceneInfo *InSceneInfo, FSceneInfoPersistentId InPersistentId) : SceneInfo(InSceneInfo), PersistentId(InPersistentId)"
  },
  {
    "label": "GetPayloadOffset()",
    "kind": "Method",
    "detail": "Function (} template<PayloadType> int32)",
    "insertText": "GetPayloadOffset()"
  },
  {
    "label": "CountBits()",
    "kind": "Method",
    "detail": "Function (int32 Index =)",
    "insertText": "CountBits(PayloadMask& PayloadType::ExclusiveIdMask)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (PayloadDataSlots [ Index ] = PayloadOffset ; } else { PayloadMask | = PayloadType::IdBit ; PayloadDataSlots .)",
    "insertText": "Insert(PayloadOffset, Index)"
  },
  {
    "label": "GetSceneInfo()",
    "kind": "Method",
    "detail": "Function (} } FSceneInfo*)",
    "insertText": "GetSceneInfo()"
  },
  {
    "label": "TSceneUpdateCommandQueue()",
    "kind": "Method",
    "detail": "Function (PersistentId = InId ; } private : FSceneInfo* SceneInfo = nullptr ; uint64 PayloadMask = 0 ull ; FSceneInfoPersistentId PersistentId ; EDirtyFlags DirtyFlags = EDirtyFlags::None ; bool bDeleted = false ; bool bAdded = false ; TArray<int32,TInlineAllocator<8,FAllocator>> PayloadDataSlots ; TSceneUpdateCommandQueue ; } ;)",
    "insertText": "TSceneUpdateCommandQueue() : PayloadArrays(InPlace)"
  },
  {
    "label": "TSceneUpdateCommandQueue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSceneUpdateCommandQueue(const TSceneUpdateCommandQueue&)"
  },
  {
    "label": "TSceneUpdateCommandQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSceneUpdateCommandQueue(TSceneUpdateCommandQueue&& Other) : PayloadArrays(MoveTemp(Other.PayloadArrays)) , Commands(MoveTemp(Other.Commands))"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Other . CommandSlots .)",
    "insertText": "Empty()"
  },
  {
    "label": "TSceneUpdateCommandQueue()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TSceneUpdateCommandQueue()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "NumCommands()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumCommands()"
  },
  {
    "label": "HasCommand()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasCommand(FSceneInfo* SceneInfo)"
  },
  {
    "label": "FindCommand()",
    "kind": "Method",
    "detail": "Function (} const FUpdateCommand*)",
    "insertText": "FindCommand(FSceneInfo* SceneInfo)"
  },
  {
    "label": "FindId()",
    "kind": "Method",
    "detail": "Function (Experimental::FHashElementId Id = CommandSlots .)",
    "insertText": "FindId(SceneInfo)"
  },
  {
    "label": "EnqueueDelete()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } void)",
    "insertText": "EnqueueDelete(FSceneInfo* SceneInfo)"
  },
  {
    "label": "GetOrAddCommandSlot()",
    "kind": "Method",
    "detail": "Function (int32 CommandSlot =)",
    "insertText": "GetOrAddCommandSlot(SceneInfo)"
  },
  {
    "label": "EnqueueAdd()",
    "kind": "Method",
    "detail": "Function (FUpdateCommand& Command = Commands [ CommandSlot ] ; Command . bDeleted = true ; } void)",
    "insertText": "EnqueueAdd(FSceneInfo* SceneInfo)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FUpdateCommand& Command = Commands [ CommandSlot ] ;)",
    "insertText": "check(!Command.bAdded)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (Command . bAdded = true ; } template<PayloadType> void)",
    "insertText": "Enqueue(FSceneInfo* SceneInfo, PayloadType&& Payload)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FUpdateCommand& Command = Commands [ CommandSlot ] ;)",
    "insertText": "if(PayloadArrays[int32(PayloadType::Id)] == nullptr)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (PayloadArrays [)",
    "insertText": "int32(PayloadType::Id)] = MakeUnique<TPayloadArray<PayloadType>>()"
  },
  {
    "label": "PayloadType()",
    "kind": "Method",
    "detail": "Function (} TPayloadArray<PayloadType>* Payloads = GetPayloadArray<)",
    "insertText": "PayloadType()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Payloads -> PayloadData [ PrevPayloadOffset ] = Payload ; } else { int32 PayloadOffset = Payloads -> CommandSlots .)",
    "insertText": "Num()"
  },
  {
    "label": "PayloadType()",
    "kind": "Method",
    "detail": "Function (Commands [ CommandSlot ] . template SetOrAddPayloadOffset<)",
    "insertText": "PayloadType(PayloadOffset, Payload.GetDirtyFlags())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Payloads -> CommandSlots .)",
    "insertText": "Emplace(CommandSlot)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Payloads -> PayloadData .)",
    "insertText": "Emplace(Payload)"
  },
  {
    "label": "GetPayloadPtr()",
    "kind": "Method",
    "detail": "Function (} } template<PayloadType> PayloadType*)",
    "insertText": "GetPayloadPtr(const FUpdateCommand& Command)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Commands .)",
    "insertText": "Reset()"
  },
  {
    "label": "ForEachCommand()",
    "kind": "Method",
    "detail": "Function (} } } template<CallbackFuncType> void)",
    "insertText": "ForEachCommand(ESceneUpdateCommandFilter CommandFilter, CallbackFuncType CallbackFunc)"
  },
  {
    "label": "CallbackFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackFunc(Command)"
  },
  {
    "label": "ForEachCommand()",
    "kind": "Method",
    "detail": "Function (} } } template<CallbackFuncType> void)",
    "insertText": "ForEachCommand(CallbackFuncType CallbackFunc)"
  },
  {
    "label": "ForEachUpdateCommand()",
    "kind": "Method",
    "detail": "Function (} template<CallbackFuncType> void)",
    "insertText": "ForEachUpdateCommand(ESceneUpdateCommandFilter CommandFilter, uint64 UpdatePayloadMask, CallbackFuncType CallbackFunc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(Command.bAdded || Command.bDeleted || (UpdatePayloadMask& Command.PayloadMask) != 0)"
  },
  {
    "label": "ForEachUpdateCommand()",
    "kind": "Method",
    "detail": "Function (} } } template<CallbackFuncType> void)",
    "insertText": "ForEachUpdateCommand(ESceneUpdateCommandFilter CommandFilter, EDirtyFlags DirtyFlags, CallbackFuncType CallbackFunc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(Command.bAdded || Command.bDeleted || EnumHasAnyFlags(Command.DirtyFlags, DirtyFlags))"
  },
  {
    "label": "TConstPayloadIterator()",
    "kind": "Method",
    "detail": "Function (} } } template<PayloadType> struct TConstPayloadIterator { struct FItem { const PayloadType& Payload ; FSceneInfo* SceneInfo ; } ;)",
    "insertText": "TConstPayloadIterator(const TPayloadArray<PayloadType>* InPayloads, const TArray<FUpdateCommand, FAllocator>& InCommands, int32 InIndex = 0) : Payloads(InPayloads) , Commands(InCommands) , Index(InIndex)"
  },
  {
    "label": "SkipDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SkipDeleted()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + Index ; } } void)",
    "insertText": "operator()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const FUpdateCommand& Command = Commands [ Payloads -> CommandSlots [ Index ] ] ;)",
    "insertText": "check(!Command.bDeleted)"
  },
  {
    "label": "GetIterator()",
    "kind": "Method",
    "detail": "Function (} private : const TPayloadArray<PayloadType>* Payloads ; const TArray<FUpdateCommand,FAllocator>& Commands ; int32 Index = 0 ; } ; template<PayloadType> TConstPayloadIterator<PayloadType>)",
    "insertText": "GetIterator()"
  },
  {
    "label": "GetNumItems()",
    "kind": "Method",
    "detail": "Function (} template<PayloadType> int32)",
    "insertText": "GetNumItems()"
  },
  {
    "label": "TPayloadRangeView()",
    "kind": "Method",
    "detail": "Function (} template<PayloadType> struct TPayloadRangeView {)",
    "insertText": "TPayloadRangeView(TSceneUpdateCommandQueue& InUpdateBuffer, int32 InNumItems) : UpdateBuffer(InUpdateBuffer) , NumItems(InNumItems)"
  },
  {
    "label": "BeginReadAccess()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK UpdateBuffer .)",
    "insertText": "BeginReadAccess()"
  },
  {
    "label": "TPayloadRangeView()",
    "kind": "Method",
    "detail": "Function (# endif } ~)",
    "insertText": "TPayloadRangeView()"
  },
  {
    "label": "EndReadAccess()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK UpdateBuffer .)",
    "insertText": "EndReadAccess()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (# endif } TConstPayloadIterator<PayloadType>)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TConstPayloadIterator<PayloadType>)",
    "insertText": "end()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} template<EId InId,EDirtyFlags InDirtyFlags> struct TPayloadBase { EId Id = InId ; uint64 IdBit = 1 ull<<)",
    "insertText": "uint32(Id)"
  },
  {
    "label": "ExclusiveIdMask()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "ExclusiveIdMask(1ull << uint32(Id))"
  },
  {
    "label": "GetDirtyFlags()",
    "kind": "Method",
    "detail": "Function (EDirtyFlags DirtyFlags = InDirtyFlags ; EDirtyFlags)",
    "insertText": "GetDirtyFlags()"
  },
  {
    "label": "FReadAccessScope()",
    "kind": "Method",
    "detail": "Function (- - RaceGuard ; } struct FReadAccessScope {)",
    "insertText": "FReadAccessScope(TSceneUpdateCommandQueue& InUpdateQueue) : UpdateQueue(InUpdateQueue)"
  },
  {
    "label": "FReadAccessScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FReadAccessScope()"
  },
  {
    "label": "GetEndIterator()",
    "kind": "Method",
    "detail": "Function (} protected : TSceneUpdateCommandQueue& UpdateQueue ; } ; # endif private : template<PayloadType> TConstPayloadIterator<PayloadType>)",
    "insertText": "GetEndIterator()"
  },
  {
    "label": "FBasePayloadArray()",
    "kind": "Method",
    "detail": "Function (} struct FBasePayloadArray {)",
    "insertText": "FBasePayloadArray(int32 InPayloadByteSize) : PayloadByteSize(InPayloadByteSize)"
  },
  {
    "label": "FBasePayloadArray()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FBasePayloadArray()"
  },
  {
    "label": "TPayloadArray()",
    "kind": "Method",
    "detail": "Function (int32 PayloadByteSize = 0 ; } ; template<PayloadType> struct TPayloadArray : public FBasePayloadArray { TArray<PayloadType,FAllocator> PayloadData ; TArray<int32,FAllocator> CommandSlots ;)",
    "insertText": "TPayloadArray() : FBasePayloadArray(sizeof(PayloadType))"
  },
  {
    "label": "GetOrAddCommandSlot()",
    "kind": "Method",
    "detail": "Function (} } ; int32)",
    "insertText": "GetOrAddCommandSlot(FSceneInfo* SceneInfo)"
  },
  {
    "label": "FindOrAddId()",
    "kind": "Method",
    "detail": "Function (bool bWasAlreadyInSet = false ; Experimental::FHashElementId Id = CommandSlots .)",
    "insertText": "FindOrAddId(SceneInfo, bWasAlreadyInSet)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (int32 CommandSlot = Id .)",
    "insertText": "GetIndex()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Commands .)",
    "insertText": "Emplace(SceneInfo, SceneInfo->GetPersistentIndex())"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(Commands.IsValidIndex(CommandSlot))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Command.bAdded)"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "EnumHasAnyFlags(CommandFilter, ESceneUpdateCommandFilter::Updated)"
  },
  {
    "label": "GetPayloadArray()",
    "kind": "Method",
    "detail": "Function (} template<PayloadType> TPayloadArray<PayloadType>*)",
    "insertText": "GetPayloadArray()"
  },
  {
    "label": "FPayloadArrays()",
    "kind": "Method",
    "detail": "Function (} using FPayloadArrays = TStaticArray<TUniquePtr<FBasePayloadArray>,6 4> ; FPayloadArrays PayloadArrays =)",
    "insertText": "FPayloadArrays(InPlace)"
  }
]