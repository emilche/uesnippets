[
  {
    "label": "TUnrolledLinkList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUnrolledLinkList"
  },
  {
    "label": "TNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TNode"
  },
  {
    "label": "TIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIterator"
  },
  {
    "label": "TNode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" template<T,uint32 blockSize> class TUnrolledLinkList { class TNode { class TUnrolledLinkList<T,blockSize> ; public :)",
    "insertText": "TNode() : next(NULL) , prev(NULL)"
  },
  {
    "label": "TNode()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TNode()"
  },
  {
    "label": "TIterator()",
    "kind": "Method",
    "detail": "Function (delete next ; } private : T block [ blockSize ] ; TNode* next ; TNode* prev ; } ; public : class TIterator { class TUnrolledLinkList<T,blockSize> ; public :)",
    "insertText": "TIterator() : node(NULL) , index(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TIterator& i)"
  },
  {
    "label": "node()",
    "kind": "Method",
    "detail": "Function (next)",
    "insertText": "node(index & (blockSize - 1))"
  },
  {
    "label": "TUnrolledLinkList()",
    "kind": "Method",
    "detail": "Function (} TNode* node ; uint32 index ; } ; public :)",
    "insertText": "TUnrolledLinkList()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Num()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const T& Element)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const TIterator& i)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (TIterator)",
    "insertText": "Begin()"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (} TIterator)",
    "insertText": "End()"
  },
  {
    "label": "TUnrolledLinkList()",
    "kind": "Method",
    "detail": "Function (} protected : TNode head ; TNode* freeNode ; uint32 num ; } ; template<T,uint32 blockSize> TUnrolledLinkList<T,blockSize)",
    "insertText": "TUnrolledLinkList() : freeNode( &head ) , num(0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} template<T,uint32 blockSize> void TUnrolledLinkList<T,blockSize)",
    "insertText": "Add(const T& Element)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (freeNode -> next = new TNode ; freeNode -> next -> prev = freeNode ; } freeNode = freeNode -> next ; })",
    "insertText": "checkSlow(freeNode)"
  },
  {
    "label": "num()",
    "kind": "Method",
    "detail": "Function (freeNode -> block [)",
    "insertText": "num(blockSize - 1)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (num - - ;)",
    "insertText": "if(i.index != num)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (i . node -> block [ i .)",
    "insertText": "index(blockSize - 1) ] = freeNode->block[ num & (blockSize - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(( num & (blockSize - 1) ) == 0)"
  }
]