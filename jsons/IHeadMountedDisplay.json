[
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "FPostProcessSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPostProcessSettings"
  },
  {
    "label": "FWorldContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldContext"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTexture"
  },
  {
    "label": "FHeadMountedDisplayPassContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeadMountedDisplayPassContext"
  },
  {
    "label": "IHeadMountedDisplay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHeadMountedDisplay"
  },
  {
    "label": "MonitorInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MonitorInfo"
  },
  {
    "label": "ISpectatorScreenController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpectatorScreenController"
  },
  {
    "label": "FHMDDistortionInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHMDDistortionInputs"
  },
  {
    "label": "FScreenPassTexture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenPassTexture"
  },
  {
    "label": "FRHICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FHeadMountedDisplayPassContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Modules / ModuleInterface . h \" # include \" HeadMountedDisplayTypes . h \" # include \" StereoRendering . h \" # include \" LateUpdateManager . h \" # include \" SceneInterface . h \" class FSceneInterface ; class UCanvas ; struct FPostProcessSettings ; struct FWorldContext ; class UTexture ; class FSceneViewFamily ; class FSceneView ; class FRHICommandListImmediate ; class FTexture ; struct FHeadMountedDisplayPassContext {)",
    "insertText": "FHeadMountedDisplayPassContext(FRHICommandListImmediate& InRHICmdList, const FSceneView& InView) : RHICmdList(InRHICmdList) , View(InView)"
  },
  {
    "label": "IHeadMountedDisplay()",
    "kind": "Method",
    "detail": "Function (} FRHICommandListImmediate& RHICmdList ; const FSceneView& View ; } ; class IHeadMountedDisplay : public IModuleInterface { public :)",
    "insertText": "IHeadMountedDisplay()"
  },
  {
    "label": "IsHMDConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHMDConnected()"
  },
  {
    "label": "IsHMDEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHMDEnabled()"
  },
  {
    "label": "GetHMDWornState()",
    "kind": "Method",
    "detail": "Function (EHMDWornState::Type)",
    "insertText": "GetHMDWornState()"
  },
  {
    "label": "GetHMDName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetHMDName()"
  },
  {
    "label": "MonitorInfo()",
    "kind": "Method",
    "detail": "Function (struct MonitorInfo { FString MonitorName ; size_t MonitorId ; int DesktopX,DesktopY ; int ResolutionX,ResolutionY ; int WindowSizeX,WindowSizeY ; bool bShouldTestResolution ;)",
    "insertText": "MonitorInfo() : MonitorId(0) , DesktopX(0) , DesktopY(0) , ResolutionX(0) , ResolutionY(0) , WindowSizeX(0) , WindowSizeY(0) , bShouldTestResolution(false)"
  },
  {
    "label": "GetHMDMonitorInfo()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "GetHMDMonitorInfo(MonitorInfo&)"
  },
  {
    "label": "GetFieldOfView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFieldOfView(float& InOutHFOVInDegrees, float& InOutVFOVInDegrees)"
  },
  {
    "label": "SetClippingPlanes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClippingPlanes(float NCP, float FCP)"
  },
  {
    "label": "GetEyeRenderParams_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetEyeRenderParams_RenderThread(const struct FHeadMountedDisplayPassContext& Context, FVector2D& EyeToSrcUVScaleValue, FVector2D& EyeToSrcUVOffsetValue)"
  },
  {
    "label": "SetInterpupillaryDistance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInterpupillaryDistance(float NewInterpupillaryDistance)"
  },
  {
    "label": "GetInterpupillaryDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInterpupillaryDistance()"
  },
  {
    "label": "GetHMDDistortionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHMDDistortionEnabled(EShadingPath ShadingPath)"
  },
  {
    "label": "IsSpectatorScreenActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSpectatorScreenActive()"
  },
  {
    "label": "GetPixelDenity()",
    "kind": "Method",
    "detail": "Function (} public : float)",
    "insertText": "GetPixelDenity()"
  },
  {
    "label": "GetIdealRenderTargetSize()",
    "kind": "Method",
    "detail": "Function (} ; FIntPoint)",
    "insertText": "GetIdealRenderTargetSize()"
  },
  {
    "label": "GetIdealDebugCanvasRenderTargetSize()",
    "kind": "Method",
    "detail": "Function (} FIntPoint)",
    "insertText": "GetIdealDebugCanvasRenderTargetSize()"
  },
  {
    "label": "GetDistortionScalingFactor()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetDistortionScalingFactor()"
  },
  {
    "label": "IsChromaAbCorrectionEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsChromaAbCorrectionEnabled()"
  },
  {
    "label": "GetChromaAbCorrectionValues()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChromaAbCorrectionValues(FVector4& K)"
  },
  {
    "label": "DrawHiddenAreaMesh()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DrawHiddenAreaMesh(class FRHICommandList& RHICmdList, int32 ViewIndex, int32 InstanceCount)"
  },
  {
    "label": "DrawVisibleAreaMesh()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DrawVisibleAreaMesh(class FRHICommandList& RHICmdList, int32 ViewIndex)"
  },
  {
    "label": "DrawVisibleAreaMesh()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DrawVisibleAreaMesh(class FRHICommandList& RHICmdList, int32 ViewIndex, int32 InstanceCount)"
  },
  {
    "label": "DrawDistortionMesh_RenderThread()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DrawDistortionMesh_RenderThread(struct FHeadMountedDisplayPassContext& Context, const FIntPoint& TextureSize)"
  },
  {
    "label": "UpdateScreenSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateScreenSettings(const class FViewport* InViewport)"
  },
  {
    "label": "GetDistortionTextureLeft()",
    "kind": "Method",
    "detail": "Function (} FTexture*)",
    "insertText": "GetDistortionTextureLeft()"
  },
  {
    "label": "DoesAppUseVRFocus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesAppUseVRFocus()"
  },
  {
    "label": "DoesAppHaveVRFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesAppHaveVRFocus()"
  },
  {
    "label": "IsRenderingPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRenderingPaused()"
  }
]