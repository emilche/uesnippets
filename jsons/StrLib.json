[
  {
    "label": "hash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hash"
  },
  {
    "label": "NVCORE_CLASS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NVCORE_CLASS"
  },
  {
    "label": "strHash()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_CORE_STRING_H # define NV_CORE_STRING_H # include<nvcore / nvcore . h> # include<nvcore / Containers . h> # include<string . h> namespace nv { uint)",
    "insertText": "strHash(const char * str, uint h)"
  },
  {
    "label": "strHash()",
    "kind": "Method",
    "detail": "Function (uint)",
    "insertText": "strHash(const char * data, uint h = 5381)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint i = 0 ;)",
    "insertText": "while(data[i] != 0)"
  },
  {
    "label": "h()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "h(33 * h) ^ uint(data[i])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (i + + ; } return h ; } template<> struct hash<const char*> { uint)",
    "insertText": "operator()(const char * str)"
  },
  {
    "label": "strCaseCmp()",
    "kind": "Method",
    "detail": "Function (} } ; int)",
    "insertText": "strCaseCmp(const char * s1, const char * s2)"
  },
  {
    "label": "strCmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "strCmp(const char * s1, const char * s2)"
  },
  {
    "label": "strCpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "strCpy(char * dst, int size, const char * src)"
  },
  {
    "label": "strCpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "strCpy(char * dst, int size, const char * src, int len)"
  },
  {
    "label": "strCat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "strCat(char * dst, int size, const char * src)"
  },
  {
    "label": "strMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "strMatch(const char * str, const char * pat)"
  },
  {
    "label": "StringBuilder()",
    "kind": "Method",
    "detail": "Function (class NVCORE_CLASS StringBuilder { public :)",
    "insertText": "StringBuilder()"
  },
  {
    "label": "StringBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StringBuilder(int size_hint)"
  },
  {
    "label": "StringBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StringBuilder(const char * str)"
  },
  {
    "label": "StringBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StringBuilder(const StringBuilder &)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (StringBuilder&)",
    "insertText": "format(const char * format, ... ) __attribute__((format (printf, 2, 3)))"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (StringBuilder&)",
    "insertText": "format(const char * format, va_list arg)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (StringBuilder&)",
    "insertText": "append(const char * str)"
  },
  {
    "label": "appendFormat()",
    "kind": "Method",
    "detail": "Function (StringBuilder&)",
    "insertText": "appendFormat(const char * format, ... ) __attribute__((format (printf, 2, 3)))"
  },
  {
    "label": "appendFormat()",
    "kind": "Method",
    "detail": "Function (StringBuilder&)",
    "insertText": "appendFormat(const char * format, va_list arg)"
  },
  {
    "label": "number()",
    "kind": "Method",
    "detail": "Function (StringBuilder&)",
    "insertText": "number(int i, int base = 10)"
  },
  {
    "label": "number()",
    "kind": "Method",
    "detail": "Function (StringBuilder&)",
    "insertText": "number(uint i, int base = 10)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (StringBuilder&)",
    "insertText": "reserve(uint size_hint)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (StringBuilder&)",
    "insertText": "copy(const char * str)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (StringBuilder&)",
    "insertText": "copy(const StringBuilder & str)"
  },
  {
    "label": "toLower()",
    "kind": "Method",
    "detail": "Function (StringBuilder&)",
    "insertText": "toLower()"
  },
  {
    "label": "toUpper()",
    "kind": "Method",
    "detail": "Function (StringBuilder&)",
    "insertText": "toUpper()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "isNull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isNull()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} StringBuilder&)",
    "insertText": "operator(const char * s)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const StringBuilder & s)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "length()"
  },
  {
    "label": "capacity()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "capacity()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(StringBuilder & a, StringBuilder & b)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(a.m_size, b.m_size)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(a.m_str, b.m_str)"
  },
  {
    "label": "Path()",
    "kind": "Method",
    "detail": "Function (} protected : uint m_size ; char* m_str ; } ; class NVCORE_CLASS Path : public StringBuilder { public :)",
    "insertText": "Path() : StringBuilder()"
  },
  {
    "label": "Path()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Path(int size_hint) : StringBuilder(size_hint)"
  },
  {
    "label": "Path()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Path(const char * str) : StringBuilder(str)"
  },
  {
    "label": "Path()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Path(const Path & path) : StringBuilder(path)"
  },
  {
    "label": "fileName()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "fileName()"
  },
  {
    "label": "extension()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "extension()"
  },
  {
    "label": "translatePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "translatePath()"
  },
  {
    "label": "stripFileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stripFileName()"
  },
  {
    "label": "stripExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stripExtension()"
  },
  {
    "label": "separator()",
    "kind": "Method",
    "detail": "Function (char)",
    "insertText": "separator()"
  },
  {
    "label": "fileName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "fileName(const char *)"
  },
  {
    "label": "extension()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "extension(const char *)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (} ; class NVCORE_CLASS String { public :)",
    "insertText": "String()"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (data = NULL ; })",
    "insertText": "String(const String & str)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (data = str . data ;)",
    "insertText": "if(data != NULL) addRef()"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "String(const char * str)"
  },
  {
    "label": "setString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setString(str)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "String(const char * str, int length)"
  },
  {
    "label": "setString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setString(str, length)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "String(const StringBuilder & str)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "release()"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (} String)",
    "insertText": "clone()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const String&)",
    "insertText": "operator(const char * str)"
  },
  {
    "label": "addRef()",
    "kind": "Method",
    "detail": "Function (data = str . data ;)",
    "insertText": "addRef()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } bool)",
    "insertText": "operator(const String & str)"
  },
  {
    "label": "nvCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvCheck(str != NULL)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(data != NULL)"
  },
  {
    "label": "hash()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "hash()"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (} operator const)",
    "insertText": "char()"
  },
  {
    "label": "setRefCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRefCount(getRefCount() + 1)"
  },
  {
    "label": "getRefCount()",
    "kind": "Method",
    "detail": "Function (const uint16 count =)",
    "insertText": "getRefCount()"
  },
  {
    "label": "setRefCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRefCount(count - 1)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(data - 2)"
  },
  {
    "label": "setRefCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setRefCount(uint16 count)"
  },
  {
    "label": "nvCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvCheck(count < 0xFFFF)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (* reinterpret_cast<)",
    "insertText": "uint16(const_cast<char *>(data - 2)) = uint16(count)"
  },
  {
    "label": "setData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setData(const char * str)"
  },
  {
    "label": "allocString()",
    "kind": "Method",
    "detail": "Function (data = str + 2 ; } void)",
    "insertText": "allocString(const char * str)"
  },
  {
    "label": "allocString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allocString(str, (int)strlen(str))"
  },
  {
    "label": "allocString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "allocString(const char * str, int len)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const char* ptr = static_cast<const)",
    "insertText": "char(mem::malloc(2 + len + 1))"
  },
  {
    "label": "setData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setData(ptr)"
  },
  {
    "label": "setRefCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRefCount(0)"
  },
  {
    "label": "strCpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "strCpy(const_cast<char *>(data), len+1, str, len)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "char(data)"
  },
  {
    "label": "setString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setString(const char * str)"
  },
  {
    "label": "setString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setString(const char * str, int length)"
  },
  {
    "label": "setString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setString(const StringBuilder & str)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(String & a, String & b)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(a.data, b.data)"
  }
]