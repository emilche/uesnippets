[
  {
    "label": "_I1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_I1"
  },
  {
    "label": "_I2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_I2"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_SWAP_RANGES_H # define _LIBCPP___ALGORITHM_RANGES_SWAP_RANGES_H # include<__algorithm / in_in_result . h> # include<__algorithm / iterator_operations . h> # include<__algorithm / swap_ranges . h> # include<__config> # include<__iterator / concepts . h> # include<__iterator / iter_swap . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _I1,class _I2> using swap_ranges_result = in_in_result<_I1,_I2> ; namespace __swap_ranges { struct __fn { template<input_iterator _I1,sentinel_for<_I1> _S1,input_iterator _I2,sentinel_for<_I2> _S2> requires indirectly_swappable<_I1,_I2> _LIBCPP_HIDE_FROM_ABI swap_ranges_result<_I1,_I2>)",
    "insertText": "operator()(_I1 __first1, _S1 __last1, _I2 __first2, _S2 __last2)"
  },
  {
    "label": "_RangeAlgPolicy()",
    "kind": "Method",
    "detail": "Function (auto __ret = std::__swap_ranges<)",
    "insertText": "_RangeAlgPolicy(std::move(__first1), std::move(__last1), std::move(__first2), std::move(__last2))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<input_range _R1,input_range _R2> requires indirectly_swappable<iterator_t<_R1>,iterator_t<_R2>> _LIBCPP_HIDE_FROM_ABI swap_ranges_result<borrowed_iterator_t<_R1>,borrowed_iterator_t<_R2>>)",
    "insertText": "operator()(_R1&& __r1, _R2&& __r2)"
  }
]