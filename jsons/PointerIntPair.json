[
  {
    "label": "DenseMapInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DenseMapInfo"
  },
  {
    "label": "PointerIntPair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerIntPair"
  },
  {
    "label": "isPodLike",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isPodLike"
  },
  {
    "label": "PointerLikeTypeTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerLikeTypeTraits"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_POINTERINTPAIR_H # define LLVM_ADT_POINTERINTPAIR_H # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / PointerLikeTypeTraits . h \" # include<cassert> # include<limits> namespace llvm { template<T> struct DenseMapInfo ; template<PointerTy,unsigned IntBits,IntType = unsigned,PtrTraits = PointerLikeTypeTraits<PointerTy>> class PointerIntPair { intptr_t Value ;)",
    "insertText": "static_assert(PtrTraits::NumLowBitsAvailable < std::numeric_limits<uintptr_t>::digits, \"cannot use a pointer type that has all bits free\")"
  },
  {
    "label": "PointerBitMask()",
    "kind": "Method",
    "detail": "Function (enum : uintptr_t {)",
    "insertText": "PointerBitMask(uintptr_t)(((intptr_t)1 << PtrTraits::NumLowBitsAvailable)-1), IntShift = (uintptr_t)PtrTraits::NumLowBitsAvailable-IntBits, IntMask = (uintptr_t)(((intptr_t)1 << IntBits)-1), ShiftedIntMask = (uintptr_t)(IntMask << IntShift)"
  },
  {
    "label": "PointerIntPair()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "PointerIntPair() : Value(0)"
  },
  {
    "label": "PointerIntPair()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PointerIntPair(PointerTy PtrVal, IntType IntVal)"
  },
  {
    "label": "setPointerAndInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPointerAndInt(PtrVal, IntVal)"
  },
  {
    "label": "PointerIntPair()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PointerIntPair(PointerTy PtrVal)"
  },
  {
    "label": "initWithPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initWithPointer(PtrVal)"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (} PointerTy)",
    "insertText": "getPointer()"
  },
  {
    "label": "getInt()",
    "kind": "Method",
    "detail": "Function (} IntType)",
    "insertText": "getInt()"
  },
  {
    "label": "setPointer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setPointer(PointerTy PtrVal)"
  },
  {
    "label": "intptr_t()",
    "kind": "Method",
    "detail": "Function (intptr_t PtrWord = reinterpret_cast<)",
    "insertText": "intptr_t(PtrTraits::getAsVoidPointer(PtrVal))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((PtrWord & ~PointerBitMask) == 0 && \"Pointer is not sufficiently aligned\")"
  },
  {
    "label": "PtrWord()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "PtrWord(Value & ~PointerBitMask)"
  },
  {
    "label": "setInt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setInt(IntType IntVal)"
  },
  {
    "label": "intptr_t()",
    "kind": "Method",
    "detail": "Function (intptr_t IntWord = static_cast<)",
    "insertText": "intptr_t(IntVal)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((IntWord & ~IntMask) == 0 && \"Integer too large for field\")"
  },
  {
    "label": "initWithPointer()",
    "kind": "Method",
    "detail": "Function (Value& = ~ ShiftedIntMask ; Value | = IntWord<<IntShift ; } void)",
    "insertText": "initWithPointer(PointerTy PtrVal)"
  },
  {
    "label": "setPointerAndInt()",
    "kind": "Method",
    "detail": "Function (Value = PtrWord ; } void)",
    "insertText": "setPointerAndInt(PointerTy PtrVal, IntType IntVal)"
  },
  {
    "label": "PtrWord()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "PtrWord(IntWord << IntShift)"
  },
  {
    "label": "getAddrOfPointer()",
    "kind": "Method",
    "detail": "Function (} PointerTy const*)",
    "insertText": "getAddrOfPointer()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Value == reinterpret_cast<intptr_t>(getPointer()) && \"Can only return the address if IntBits is cleared and \" \"PtrTraits doesn't change the pointer\")"
  },
  {
    "label": "getOpaqueValue()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "getOpaqueValue()"
  },
  {
    "label": "setFromOpaqueValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setFromOpaqueValue(void *Val)"
  },
  {
    "label": "intptr_t()",
    "kind": "Method",
    "detail": "Function (Value = reinterpret_cast<)",
    "insertText": "intptr_t(Val)"
  },
  {
    "label": "getFromOpaqueValue()",
    "kind": "Method",
    "detail": "Function (} PointerIntPair)",
    "insertText": "getFromOpaqueValue(void *V)"
  },
  {
    "label": "setFromOpaqueValue()",
    "kind": "Method",
    "detail": "Function (PointerIntPair P ; P .)",
    "insertText": "setFromOpaqueValue(V)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const PointerIntPair &RHS)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t Val = static_cast<)",
    "insertText": "uintptr_t(-1)"
  },
  {
    "label": "getFromOpaqueValue()",
    "kind": "Method",
    "detail": "Function (Val<<= PointerLikeTypeTraits<Ty>::NumLowBitsAvailable ; return)",
    "insertText": "getFromOpaqueValue(reinterpret_cast<void *>(Val))"
  },
  {
    "label": "getTombstoneKey()",
    "kind": "Method",
    "detail": "Function (} Ty)",
    "insertText": "getTombstoneKey()"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t Val = static_cast<)",
    "insertText": "uintptr_t(-2)"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getHashValue(Ty V)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t IV = reinterpret_cast<)",
    "insertText": "uintptr_t(V.getOpaqueValue())"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEqual(const Ty &LHS, const Ty &RHS)"
  },
  {
    "label": "getFromVoidPointer()",
    "kind": "Method",
    "detail": "Function (} PointerIntPair<PointerTy,IntBits,IntType>)",
    "insertText": "getFromVoidPointer(void *P)"
  },
  {
    "label": "getFromVoidPointer()",
    "kind": "Method",
    "detail": "Function (} PointerIntPair<PointerTy,IntBits,IntType>)",
    "insertText": "getFromVoidPointer(const void *P)"
  }
]