[
  {
    "label": "UMediaPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMediaPlayer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMediaSampleSinkEventData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaSampleSinkEventData"
  },
  {
    "label": "TMediaSampleSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMediaSampleSink"
  },
  {
    "label": "FMediaAudioSampleSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaAudioSampleSink"
  },
  {
    "label": "IMediaAudioSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaAudioSample"
  },
  {
    "label": "IMediaBinarySample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaBinarySample"
  },
  {
    "label": "IMediaOverlaySample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaOverlaySample"
  },
  {
    "label": "IMediaTextureSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaTextureSample"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / Timespan . h \" # include \" Templates / SharedPointer . h \" # include \" Delegates / Delegate . h \" # include \" IMediaTimeSource . h \" # include \" IMediaTracks . h \" class UMediaPlayer ; enum class EMediaSampleSinkEvent { Attached,Detached,PlayerPluginChange,SampleDataUpdate,FlushWasRequested,MediaClosed,PlaybackEndReached,PlaybackRateChanged,} ; struct FMediaSampleSinkEventData { union { struct { UMediaPlayer* MediaPlayer ; } Attached ; struct { UMediaPlayer* MediaPlayer ; } Detached ; struct { UMediaPlayer* MediaPlayer ; } PlayerPluginChange ; struct { uint32 Dummy ; } SampleDataUpdate ; struct { UMediaPlayer* MediaPlayer ; } FlushWasRequested ; struct { uint32 Dummy ; } MediaClosed ; struct { uint32 Dummy ; } PlaybackEndReached ; struct { float PlaybackRate ; } PlaybackRateChanged ; } ; } ; template<SampleType> class TMediaSampleSink { public : bool)",
    "insertText": "Enqueue(const TSharedRef<SampleType, ESPMode::ThreadSafe>& Sample)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "CanAcceptSamples()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAcceptSamples(int32 NumSamples)"
  },
  {
    "label": "GetFlushCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetFlushCount()"
  },
  {
    "label": "ReceiveEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveEvent(EMediaSampleSinkEvent Event, const FMediaSampleSinkEventData& Data)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (MediaSampleSinkEvent .)",
    "insertText": "Broadcast(Event, Data)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT_TwoParams(TMediaSampleSink<SampleType>, FOnMediaSampleSinkEvent, EMediaSampleSinkEvent , const FMediaSampleSinkEventData& ) FOnMediaSampleSinkEvent& OnMediaSampleSinkEvent()"
  },
  {
    "label": "GetAudioTime()",
    "kind": "Method",
    "detail": "Function (} private : FOnMediaSampleSinkEvent MediaSampleSinkEvent ; } ; class FMediaAudioSampleSink : public TMediaSampleSink<class IMediaAudioSample> { public : FMediaTimeStampSample)",
    "insertText": "GetAudioTime()"
  },
  {
    "label": "InvalidateAudioTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateAudioTime()"
  }
]