[
  {
    "label": "RUNTIME_FUNCTION",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RUNTIME_FUNCTION"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Win32StackFrameUnwinderTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Win32StackFrameUnwinderTest"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_WIN32_STACK_FRAME_UNWINDER_H_ # define BASE_PROFILER_WIN32_STACK_FRAME_UNWINDER_H_ # include<windows . h> # include<memory> # include \" base / base_export . h \" # include \" base / profiler / module_cache . h \" # include \" build / build_config . h \" namespace base { # if !)",
    "insertText": "defined(ARCH_CPU_64_BITS)"
  },
  {
    "label": "ContextPC()",
    "kind": "Method",
    "detail": "Function (DWORD BeginAddress ; DWORD EndAddress ; } ; using PRUNTIME_FUNCTION = RUNTIME_FUNCTION* ; # endif ULONG64)",
    "insertText": "ContextPC(CONTEXT* context)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (Rip)",
    "insertText": "defined(ARCH_CPU_X86_64)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (Eip)",
    "insertText": "defined(ARCH_CPU_X86)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (Pc)",
    "insertText": "defined(ARCH_CPU_ARM64)"
  },
  {
    "label": "UnwindFunctions()",
    "kind": "Method",
    "detail": "Function (# else # error Unsupported Windows Arch # endif } class BASE_EXPORT Win32StackFrameUnwinder { public : class BASE_EXPORT UnwindFunctions { public :)",
    "insertText": "UnwindFunctions(const UnwindFunctions&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnwindFunctions&)",
    "insertText": "operator(const UnwindFunctions&)"
  },
  {
    "label": "UnwindFunctions()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UnwindFunctions()"
  },
  {
    "label": "LookupFunctionEntry()",
    "kind": "Method",
    "detail": "Function (PRUNTIME_FUNCTION)",
    "insertText": "LookupFunctionEntry(DWORD64 program_counter, PDWORD64 image_base)"
  },
  {
    "label": "VirtualUnwind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VirtualUnwind(DWORD64 image_base, DWORD64 program_counter, PRUNTIME_FUNCTION runtime_function, CONTEXT* context)"
  },
  {
    "label": "Win32StackFrameUnwinder()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "Win32StackFrameUnwinder()"
  },
  {
    "label": "Win32StackFrameUnwinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Win32StackFrameUnwinder(const Win32StackFrameUnwinder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Win32StackFrameUnwinder&)",
    "insertText": "operator(const Win32StackFrameUnwinder&)"
  },
  {
    "label": "TryUnwind()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryUnwind(bool at_top_frame, CONTEXT* context, const ModuleCache::Module* module)"
  },
  {
    "label": "Win32StackFrameUnwinder()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "Win32StackFrameUnwinder(std::unique_ptr<UnwindFunctions> unwind_functions)"
  }
]