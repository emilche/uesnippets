[
  {
    "label": "lmpar()",
    "kind": "Method",
    "detail": "Function (namespace Eigen { namespace internal { template<Scalar> void)",
    "insertText": "lmpar(Matrix< Scalar, Dynamic, Dynamic > &r, const VectorXi &ipvt, const Matrix< Scalar, Dynamic, 1 > &diag, const Matrix< Scalar, Dynamic, 1 > &qtb, Scalar delta, Scalar &par, Matrix< Scalar, Dynamic, 1 > &x)"
  },
  {
    "label": "dwarf()",
    "kind": "Method",
    "detail": "Function (using std::abs ; using std::sqrt ; typedef DenseIndex Index ; Index i,j,l ; Scalar fp ; Scalar parc,parl ; Index iter ; Scalar temp,paru ; Scalar gnorm ; Scalar dxnorm ; const Scalar)",
    "insertText": "dwarf(std::numeric_limits<Scalar>::min)()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (const Index n = r .)",
    "insertText": "cols()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(n==diag.size())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(n==qtb.size())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(n==x.size())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,1> wa1,wa2 ; Index nsing = n - 1 ; wa1 = qtb ;)",
    "insertText": "for(j = 0; j < n; ++j)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(j = nsing; j>=0; --j)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (wa1 [ j ] / =)",
    "insertText": "r(j,j)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (temp = wa1 [ j ] ;)",
    "insertText": "for(i = 0; i < j ; ++i) wa1[i] -= r(i,j)"
  },
  {
    "label": "cwiseProduct()",
    "kind": "Method",
    "detail": "Function (iter = 0 ; wa2 = diag .)",
    "insertText": "cwiseProduct(x)"
  },
  {
    "label": "blueNorm()",
    "kind": "Method",
    "detail": "Function (dxnorm = wa2 .)",
    "insertText": "blueNorm()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fp = dxnorm - delta ;)",
    "insertText": "if(fp <= Scalar(0.1) * delta)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (par = 0 ; return ; } parl = 0 . ;)",
    "insertText": "if(nsing >= n-1)"
  },
  {
    "label": "l()",
    "kind": "Method",
    "detail": "Function (l = ipvt [ j ] ; wa1 [ j ] = diag [)",
    "insertText": "l(wa2[l] / dxnorm)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Scalar sum = 0 . ;)",
    "insertText": "for(i = 0; i < j; ++i) sum += r(i,j)"
  },
  {
    "label": "j()",
    "kind": "Method",
    "detail": "Function (wa1 [)",
    "insertText": "j(wa1[j] - sum) / r(j,j)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (parl = fp / delta / temp / temp ; })",
    "insertText": "for(j = 0; j < n; ++j) wa1[j] = r.col(j).head(j+1).dot(qtb.head(j+1))"
  },
  {
    "label": "stableNorm()",
    "kind": "Method",
    "detail": "Function (gnorm = wa1 .)",
    "insertText": "stableNorm()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (paru = gnorm / delta ;)",
    "insertText": "if(paru == 0.) paru = dwarf / (std::min)(delta,Scalar(0.1))"
  },
  {
    "label": "par()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "par(std::max)(par,parl)"
  },
  {
    "label": "par()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "par(std::min)(par,paru)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + iter ;)",
    "insertText": "if(par == 0.) par = (std::max)(dwarf,Scalar(.001) * paru)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (wa1 =)",
    "insertText": "sqrt(par)"
  },
  {
    "label": "sdiag()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,1>)",
    "insertText": "sdiag(n)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (qrsolv<)",
    "insertText": "Scalar(r, ipvt, wa1, qtb, x, sdiag)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (temp = fp ; fp = dxnorm - delta ;)",
    "insertText": "if(abs(fp) <= Scalar(0.1) * delta || (parl == 0. && fp <= temp && temp < 0.) || iter == 10)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (wa1 [ j ] / = sdiag [ j ] ; temp = wa1 [ j ] ;)",
    "insertText": "for(i = j+1; i < n; ++i) wa1[i] -= r(i,j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (parc = fp / delta / temp / temp ;)",
    "insertText": "if(fp > 0.) parl = (std::max)(parl,par)"
  },
  {
    "label": "par()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "par(std::max)(parl,par+parc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(iter == 0)"
  },
  {
    "label": "matrixQR()",
    "kind": "Method",
    "detail": "Function (const Index n = qr .)",
    "insertText": "matrixQR().cols()"
  },
  {
    "label": "rank()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,1> wa1,wa2 ; const Index rank = qr .)",
    "insertText": "rank()"
  },
  {
    "label": "tail()",
    "kind": "Method",
    "detail": "Function (wa1 = qtb ; wa1 .)",
    "insertText": "tail(n-rank).setZero()"
  },
  {
    "label": "matrixQR()",
    "kind": "Method",
    "detail": "Function (qr .)",
    "insertText": "matrixQR().topLeftCorner(rank, rank).template triangularView<Upper>().solveInPlace(wa1.head(rank))"
  },
  {
    "label": "colsPermutation()",
    "kind": "Method",
    "detail": "Function (x = qr .)",
    "insertText": "colsPermutation()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (par = 0 ; return ; } parl = 0 . ;)",
    "insertText": "if(rank==n)"
  },
  {
    "label": "colsPermutation()",
    "kind": "Method",
    "detail": "Function (wa1 = qr .)",
    "insertText": "colsPermutation().inverse() * diag.cwiseProduct(wa2)"
  },
  {
    "label": "matrixQR()",
    "kind": "Method",
    "detail": "Function (qr .)",
    "insertText": "matrixQR().topLeftCorner(n, n).transpose().template triangularView<Lower>().solveInPlace(wa1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (parl = fp / delta / temp / temp ; })",
    "insertText": "for(j = 0; j < n; ++j) wa1[j] = qr.matrixQR().col(j).head(j+1).dot(qtb.head(j+1)) / diag[qr.colsPermutation().indices()(j)"
  },
  {
    "label": "matrixQR()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,Dynamic> s = qr .)",
    "insertText": "matrixQR()"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (qrsolv<)",
    "insertText": "Scalar(s, qr.colsPermutation().indices(), wa1, qtb, x, sdiag)"
  },
  {
    "label": "colsPermutation()",
    "kind": "Method",
    "detail": "Function (wa1 = qr .)",
    "insertText": "colsPermutation().inverse() * diag.cwiseProduct(wa2/dxnorm)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (wa1 [ j ] / = sdiag [ j ] ; temp = wa1 [ j ] ;)",
    "insertText": "for(Index i = j+1; i < n; ++i) wa1[i] -= s(i,j)"
  }
]