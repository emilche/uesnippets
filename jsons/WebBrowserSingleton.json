[
  {
    "label": "CefListValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefListValue"
  },
  {
    "label": "FCEFBrowserApp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCEFBrowserApp"
  },
  {
    "label": "FCEFWebBrowserWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCEFWebBrowserWindow"
  },
  {
    "label": "IWebBrowserCookieManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWebBrowserCookieManager"
  },
  {
    "label": "IWebBrowserWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWebBrowserWindow"
  },
  {
    "label": "FWebBrowserWindowInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWebBrowserWindowInfo"
  },
  {
    "label": "FWebBrowserInitSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWebBrowserInitSettings"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FWebBrowserSingleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWebBrowserSingleton"
  },
  {
    "label": "CefCookieManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefCookieManager"
  },
  {
    "label": "FCefWebBrowserCookieManagerFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCefWebBrowserCookieManagerFactory"
  },
  {
    "label": "push_macro()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / Ticker . h \" # include \" IWebBrowserSingleton . h \" # if WITH_CEF3 # if PLATFORM_WINDOWS # include \" Windows / AllowWindowsPlatformTypes . h \" # include \" Windows / AllowWindowsPlatformAtomics . h \" # endif # pragma)",
    "insertText": "push_macro(\"OVERRIDE\") #undef OVERRIDE THIRD_PARTY_INCLUDES_START #if PLATFORM_APPLE PRAGMA_DISABLE_DEPRECATION_WARNINGS #endif #include \"include/internal/cef_ptr.h\" #include \"include/cef_request_context.h\" #if PLATFORM_APPLE PRAGMA_ENABLE_DEPRECATION_WARNINGS #endif THIRD_PARTY_INCLUDES_END #pragma pop_macro(\"OVERRIDE\")"
  },
  {
    "label": "FWebBrowserSingleton()",
    "kind": "Method",
    "detail": "Function (class FCEFBrowserApp ; class FCEFWebBrowserWindow ; # endif class IWebBrowserCookieManager ; class IWebBrowserWindow ; struct FWebBrowserWindowInfo ; struct FWebBrowserInitSettings ; class UMaterialInterface ; PRAGMA_DISABLE_DEPRECATION_WARNINGS class FWebBrowserSingleton : public IWebBrowserSingleton,public FTSTickerObjectBase { public :)",
    "insertText": "FWebBrowserSingleton(const FWebBrowserInitSettings& WebBrowserInitSettings)"
  },
  {
    "label": "FWebBrowserSingleton()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FWebBrowserSingleton()"
  },
  {
    "label": "GetCurrentLocaleCode()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCurrentLocaleCode()"
  },
  {
    "label": "ApplicationCacheDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ApplicationCacheDir()"
  },
  {
    "label": "GetWebBrowserWindowFactory()",
    "kind": "Method",
    "detail": "Function (public : TSharedRef<IWebBrowserWindowFactory>)",
    "insertText": "GetWebBrowserWindowFactory()"
  },
  {
    "label": "CreateBrowserWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IWebBrowserWindow>)",
    "insertText": "CreateBrowserWindow(TSharedPtr<FCEFWebBrowserWindow>& BrowserWindowParent, TSharedPtr<FWebBrowserWindowInfo>& BrowserWindowInfo)"
  },
  {
    "label": "CreateBrowserWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IWebBrowserWindow>)",
    "insertText": "CreateBrowserWindow(const FCreateBrowserWindowSettings& Settings)"
  },
  {
    "label": "CreateNativeBrowserProxy()",
    "kind": "Method",
    "detail": "Function (# if BUILD_EMBEDDED_APP TSharedPtr<IWebBrowserWindow>)",
    "insertText": "CreateNativeBrowserProxy()"
  },
  {
    "label": "GetCookieManager()",
    "kind": "Method",
    "detail": "Function (# endif TSharedPtr<IWebBrowserCookieManager>)",
    "insertText": "GetCookieManager()"
  },
  {
    "label": "RegisterContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterContext(const FBrowserContextSettings& Settings)"
  },
  {
    "label": "UnregisterContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterContext(const FString& ContextId)"
  },
  {
    "label": "RegisterSchemeHandlerFactory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterSchemeHandlerFactory(FString Scheme, FString Domain, IWebBrowserSchemeHandlerFactory* WebBrowserSchemeHandlerFactory)"
  },
  {
    "label": "UnregisterSchemeHandlerFactory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterSchemeHandlerFactory(IWebBrowserSchemeHandlerFactory* WebBrowserSchemeHandlerFactory)"
  },
  {
    "label": "IsDevToolsShortcutEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDevToolsShortcutEnabled()"
  },
  {
    "label": "SetJSBindingToLoweringEnabled()",
    "kind": "Method",
    "detail": "Function (bDevToolsShortcutEnabled = Value ; } void)",
    "insertText": "SetJSBindingToLoweringEnabled(bool bEnabled)"
  },
  {
    "label": "ClearOldCacheFolders()",
    "kind": "Method",
    "detail": "Function (bJSBindingsToLoweringEnabled = bEnabled ; } void)",
    "insertText": "ClearOldCacheFolders(const FString& CachePathRoot, const FString& CachePrefix)"
  },
  {
    "label": "SetDefaultMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultMaterial(UMaterialInterface* InDefaultMaterial)"
  },
  {
    "label": "SetDefaultTranslucentMaterial()",
    "kind": "Method",
    "detail": "Function (DefaultMaterial = InDefaultMaterial ; } void)",
    "insertText": "SetDefaultTranslucentMaterial(UMaterialInterface* InDefaultMaterial)"
  },
  {
    "label": "GetDefaultMaterial()",
    "kind": "Method",
    "detail": "Function (DefaultTranslucentMaterial = InDefaultMaterial ; } UMaterialInterface*)",
    "insertText": "GetDefaultMaterial()"
  },
  {
    "label": "URLRequestAllowsCredentials()",
    "kind": "Method",
    "detail": "Function (# if WITH_CEF3 bool)",
    "insertText": "URLRequestAllowsCredentials(const FString& URL)"
  },
  {
    "label": "GenerateWebCacheFolderName()",
    "kind": "Method",
    "detail": "Function (# endif private : TSharedPtr<IWebBrowserCookieManager> DefaultCookieManager ; # if WITH_CEF3 FString)",
    "insertText": "GenerateWebCacheFolderName(const FString &InputPath)"
  },
  {
    "label": "WaitForTaskQueueFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForTaskQueueFlush()"
  },
  {
    "label": "PLATFORM_SPECIFIC_WEB_BROWSER()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<FCEFBrowserApp> CEFBrowserApp ; TMap<FString,CefRefPtr<CefRequestContext>> RequestContexts ; TMap<FString,CefRefPtr<FCEFResourceContextHandler>> RequestResourceHandlers ; FCefSchemeHandlerFactories SchemeHandlerFactories ; bool bAllowCEF ; bool bTaskFinished ; # endif # if WITH_CEF3 TArray<TWeakPtr<FCEFWebBrowserWindow>> WindowInterfaces ; # elif PLATFORM_IOS | |)",
    "insertText": "PLATFORM_SPECIFIC_WEB_BROWSER(PLATFORM_ANDROID && USE_ANDROID_JNI)"
  },
  {
    "label": "WITH_CEF3()",
    "kind": "Method",
    "detail": "Function (# endif FCriticalSection WindowInterfacesCS ; TSharedRef<IWebBrowserWindowFactory> WebBrowserWindowFactory ; # if !)",
    "insertText": "WITH_CEF3(PLATFORM_IOS || (PLATFORM_ANDROID && USE_ANDROID_JNI))"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# endif bool bDevToolsShortcutEnabled ; bool bJSBindingsToLoweringEnabled ; bool bAppIsFocused ; # if WITH_CEF3 bool bCEFInitialized ; # endif UMaterialInterface* DefaultMaterial ; UMaterialInterface* DefaultTranslucentMaterial ; } ; PRAGMA_ENABLE_DEPRECATION_WARNINGS # if WITH_CEF3 class CefCookieManager ; class FCefWebBrowserCookieManagerFactory { public : TSharedRef<IWebBrowserCookieManager>)",
    "insertText": "Create(const CefRefPtr<CefCookieManager>& CookieManager)"
  }
]