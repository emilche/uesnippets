[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKey"
  },
  {
    "label": "FPropertyTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyTag"
  },
  {
    "label": "EKeys",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EKeys"
  },
  {
    "label": "TSharedPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSharedPtr"
  },
  {
    "label": "FKeyDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyDetails"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "EKeyFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EKeyFlags"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FCategoryDisplayInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCategoryDisplayInfo"
  },
  {
    "label": "FInputKeyManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputKeyManager"
  },
  {
    "label": "UInputCoreTypes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputCoreTypes"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / Class . h \" # include \" Misc / Attribute . h \" # include \" InputCoreTypes . generated . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogInput, Log, All)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Left,Right,AnyHand,Pad,ExternalCamera,Gun,HMD,Chest,LeftShoulder,RightShoulder,LeftElbow,RightElbow,Waist,LeftKnee,RightKnee,LeftFoot,RightFoot,Special,ControllerHand_Count)",
    "insertText": "UMETA(Hidden, DisplayName = \"<INVALID>\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (enum class EPairedAxis : uint8 { Unpaired,X,Y,Z,} ;)",
    "insertText": "USTRUCT(BlueprintType,Blueprintable)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FKey()"
  },
  {
    "label": "FKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FKey(const FName InName) : KeyName(InName)"
  },
  {
    "label": "FKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FKey(const TCHAR* InName) : KeyName(FName(InName))"
  },
  {
    "label": "FKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FKey(const ANSICHAR* InName) : KeyName(FName(InName))"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsModifierKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModifierKey()"
  },
  {
    "label": "IsGamepadKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGamepadKey()"
  },
  {
    "label": "IsTouch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTouch()"
  },
  {
    "label": "IsMouseButton()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMouseButton()"
  },
  {
    "label": "IsButtonAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsButtonAxis()"
  },
  {
    "label": "IsAxis1D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAxis1D()"
  },
  {
    "label": "IsAxis2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAxis2D()"
  },
  {
    "label": "IsAxis3D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAxis3D()"
  },
  {
    "label": "IsDigital()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDigital()"
  },
  {
    "label": "IsAnalog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnalog()"
  },
  {
    "label": "IsBindableInBlueprints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBindableInBlueprints()"
  },
  {
    "label": "ShouldUpdateAxisWithoutSamples()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUpdateAxisWithoutSamples()"
  },
  {
    "label": "IsBindableToActions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBindableToActions()"
  },
  {
    "label": "IsDeprecated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeprecated()"
  },
  {
    "label": "IsGesture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGesture()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayName(bool bLongDisplayName = true)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "GetFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFName()"
  },
  {
    "label": "GetMenuCategory()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetMenuCategory()"
  },
  {
    "label": "GetPairedAxis()",
    "kind": "Method",
    "detail": "Function (EPairedAxis)",
    "insertText": "GetPairedAxis()"
  },
  {
    "label": "GetPairedAxisKey()",
    "kind": "Method",
    "detail": "Function (FKey)",
    "insertText": "GetPairedAxisKey()"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeFromMismatchedTag(struct FPropertyTag const& Tag, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "ExportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportTextItem(FString& ValueStr, FKey const& DefaultValue, UObject* Parent, int32 PortFlags, UObject* ExportRootScope)"
  },
  {
    "label": "ImportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportTextItem(const TCHAR*& Buffer, int32 PortFlags, UObject* Parent, FOutputDevice* ErrorText)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "PostScriptConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostScriptConstruct()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FKey& KeyA, const FKey& KeyB)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FKey& Key)"
  },
  {
    "label": "ConditionalLookupKeyDetails()",
    "kind": "Method",
    "detail": "Function (class TSharedPtr<struct FKeyDetails> KeyDetails ; void)",
    "insertText": "ConditionalLookupKeyDetails()"
  },
  {
    "label": "ResetKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetKey()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TStructOpsTypeTraits<FKey> : public TStructOpsTypeTraitsBase2<FKey> { enum { WithStructuredSerializeFromMismatchedTag = true,WithExportTextItem = true,WithImportTextItem = true,WithPostSerialize = true,WithPostScriptConstruct = true,WithCopy = true,} ; } ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FText, FGetKeyDisplayNameSignature, const FKey)"
  },
  {
    "label": "FKeyDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FKeyDetails(const FKey InKey, const TAttribute<FText>& InLongDisplayName, const uint32 InKeyFlags = 0, const FName InMenuCategory = NAME_None, const TAttribute<FText>& InShortDisplayName = TAttribute<FText>())"
  },
  {
    "label": "FKeyDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FKeyDetails(const FKey InKey, const TAttribute<FText>& InLongDisplayName, const TAttribute<FText>& InShortDisplayName, const uint32 InKeyFlags = 0, const FName InMenuCategory = NAME_None)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Touch1,Touch2,Touch3,Touch4,Touch5,Touch6,Touch7,Touch8,Touch9,Touch10,CursorPointerIndex)",
    "insertText": "UMETA(Hidden), MAX_TOUCHES UMETA(Hidden)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UENUM()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (const FKey ValveIndex_Right_Grip_Axis ; const FKey ValveIndex_Right_Grip_Force ; const FKey ValveIndex_Right_Trigger_Click ; const FKey ValveIndex_Right_Trigger_Axis ; const FKey ValveIndex_Right_Trigger_Touch ; const FKey ValveIndex_Right_Thumbstick_2D ; const FKey ValveIndex_Right_Thumbstick_X ; const FKey ValveIndex_Right_Thumbstick_Y ; const FKey ValveIndex_Right_Thumbstick_Click ; const FKey ValveIndex_Right_Thumbstick_Touch ; const FKey ValveIndex_Right_Thumbstick_Up ; const FKey ValveIndex_Right_Thumbstick_Down ; const FKey ValveIndex_Right_Thumbstick_Left ; const FKey ValveIndex_Right_Thumbstick_Right ; const FKey ValveIndex_Right_Trackpad_2D ; const FKey ValveIndex_Right_Trackpad_X ; const FKey ValveIndex_Right_Trackpad_Y ; const FKey ValveIndex_Right_Trackpad_Force ; const FKey ValveIndex_Right_Trackpad_Touch ; const FKey ValveIndex_Right_Trackpad_Up ; const FKey ValveIndex_Right_Trackpad_Down ; const FKey ValveIndex_Right_Trackpad_Left ; const FKey ValveIndex_Right_Trackpad_Right ; const FKey Virtual_Accept ; const FKey Virtual_Back ; const FKey Invalid ; const int32 NUM_TOUCH_KEYS = 1 1 ; const FKey TouchKeys [ NUM_TOUCH_KEYS ] ; const int32 NUM_XR_KEY_TOKENS = 4 ; EConsoleForGamepadLabels::Type ConsoleForGamepadLabels ; const FName NAME_KeyboardCategory ; const FName NAME_GamepadCategory ; const FName NAME_MouseCategory ; void)",
    "insertText": "Initialize()"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKey(const FKeyDetails& KeyDetails)"
  },
  {
    "label": "AddPairedKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPairedKey(const FKeyDetails& PairedKeyDetails, FKey KeyX, FKey KeyY)"
  },
  {
    "label": "GetAllKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllKeys(TArray<FKey>& OutKeys)"
  },
  {
    "label": "GetKeyDetails()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FKeyDetails>)",
    "insertText": "GetKeyDetails(const FKey Key)"
  },
  {
    "label": "RemoveKeysWithCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveKeysWithCategory(const FName InCategory)"
  },
  {
    "label": "IsModifierKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModifierKey(FKey Key)"
  },
  {
    "label": "IsGamepadKey()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGamepadKey(FKey Key)"
  },
  {
    "label": "IsAxis()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAxis(FKey Key)"
  },
  {
    "label": "IsBindableInBlueprints()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBindableInBlueprints(const FKey Key)"
  },
  {
    "label": "SetConsoleForGamepadLabels()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetConsoleForGamepadLabels(const EConsoleForGamepadLabels::Type Console)"
  },
  {
    "label": "GetGamepadDisplayName()",
    "kind": "Method",
    "detail": "Function (ConsoleForGamepadLabels = Console ; } FText)",
    "insertText": "GetGamepadDisplayName(const FKey Key)"
  },
  {
    "label": "AddMenuCategoryDisplayInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMenuCategoryDisplayInfo(const FName CategoryName, const FText DisplayName, const FName PaletteIcon)"
  },
  {
    "label": "GetMenuCategoryDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetMenuCategoryDisplayName(const FName CategoryName)"
  },
  {
    "label": "GetMenuCategoryPaletteIcon()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetMenuCategoryPaletteIcon(const FName CategoryName)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Began,Moved,Stationary,ForceChanged,FirstMove,Ended,NumTypes } ; } struct FInputKeyManager { public : FInputKeyManager&)",
    "insertText": "Get()"
  },
  {
    "label": "GetCodesFromKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCodesFromKey(const FKey Key, const uint32*& KeyCode, const uint32*& CharCode)"
  },
  {
    "label": "GetKeyFromCodes()",
    "kind": "Method",
    "detail": "Function (FKey)",
    "insertText": "GetKeyFromCodes(const uint32 KeyCode, const uint32 CharCode)"
  },
  {
    "label": "InitKeyMappings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitKeyMappings()"
  },
  {
    "label": "FInputKeyManager()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FInputKeyManager()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FInputKeyManager> Instance ; TMap<uint32,FKey> KeyMapVirtualToEnum ; TMap<uint32,FKey> KeyMapCharToEnum ; } ;)",
    "insertText": "UCLASS(abstract)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  }
]