[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKey"
  },
  {
    "label": "FPropertyTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyTag"
  },
  {
    "label": "EKeys",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EKeys"
  },
  {
    "label": "TSharedPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSharedPtr"
  },
  {
    "label": "FKeyDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyDetails"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FKeyDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyDetails"
  },
  {
    "label": "EKeyFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EKeyFlags"
  },
  {
    "label": "EKeys",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EKeys"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "EKeys",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EKeys"
  },
  {
    "label": "FCategoryDisplayInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCategoryDisplayInfo"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FInputKeyManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputKeyManager"
  },
  {
    "label": "UInputCoreTypes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputCoreTypes"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (INPUTCORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogInput, Log, All)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeFromMismatchedTag(struct FPropertyTag const& Tag, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "ImportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportTextItem(const TCHAR*& Buffer, int32 PortFlags, UObject* Parent, FOutputDevice* ErrorText)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "PostScriptConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostScriptConstruct()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetTypeHash(Key.KeyName)"
  },
  {
    "label": "ResetKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetKey()"
  },
  {
    "label": "FKeyDetails()",
    "kind": "Method",
    "detail": "Function (INPUTCORE_API)",
    "insertText": "FKeyDetails(const FKey InKey, const TAttribute<FText>& InLongDisplayName, const TAttribute<FText>& InShortDisplayName, const uint32 InKeyFlags = 0, const FName InMenuCategory = NAME_None)"
  },
  {
    "label": "IsAxis1D()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsAxis1D()"
  },
  {
    "label": "CommonInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommonInit(const uint32 InKeyFlags)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKey(const FKeyDetails& KeyDetails)"
  },
  {
    "label": "AddPairedKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPairedKey(const FKeyDetails& PairedKeyDetails, FKey KeyX, FKey KeyY)"
  },
  {
    "label": "GetAllKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllKeys(TArray<FKey>& OutKeys)"
  },
  {
    "label": "GetKeyDetails()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FKeyDetails>)",
    "insertText": "GetKeyDetails(const FKey Key)"
  },
  {
    "label": "RemoveKeysWithCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveKeysWithCategory(const FName InCategory)"
  },
  {
    "label": "GetGamepadDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetGamepadDisplayName(const FKey Key)"
  },
  {
    "label": "AddMenuCategoryDisplayInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMenuCategoryDisplayInfo(const FName CategoryName, const FText DisplayName, const FName PaletteIcon)"
  },
  {
    "label": "GetMenuCategoryDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetMenuCategoryDisplayName(const FName CategoryName)"
  },
  {
    "label": "GetMenuCategoryPaletteIcon()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetMenuCategoryPaletteIcon(const FName CategoryName)"
  },
  {
    "label": "InitKeyMappings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitKeyMappings()"
  }
]