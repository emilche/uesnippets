[
  {
    "label": "COMPILED_PLATFORM_HEADER()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIDefinitions . h \" # include)",
    "insertText": "COMPILED_PLATFORM_HEADER(D3D12RHIDefinitions.h) #define DX_MAX_MSAA_COUNT 8 #define RESIDENCY_PIPELINE_DEPTH 6 #define DEBUG_RESOURCE_STATES 0 #define D3D12_RHI_RAYTRACING (RHI_RAYTRACING) #if D3D12_MAX_COMMANDLIST_INTERFACE >= 10 #define D3D12_RHI_WORKGRAPHS 1 #else #define D3D12_RHI_WORKGRAPHS 0 #endif #if D3D12_MAX_DEVICE_INTERFACE >= 12 #define D3D12RHI_SUPPORTS_UNCOMPRESSED_UAV 1 #else #define D3D12RHI_SUPPORTS_UNCOMPRESSED_UAV 0 #endif #define MAX_ROOT_CBVS MAX_CBS #define EXECUTE_DEBUG_COMMAND_LISTS 0 #define NAME_OBJECTS !(UE_BUILD_SHIPPING || UE_BUILD_TEST) #define LOG_PSO_CREATES (0 && STATS) #define TRACK_RESOURCE_ALLOCATIONS (PLATFORM_WINDOWS && !UE_BUILD_SHIPPING && !UE_BUILD_TEST) #define READBACK_BUFFER_POOL_MAX_ALLOC_SIZE (64 * 1024) #define READBACK_BUFFER_POOL_DEFAULT_POOL_SIZE (4 * 1024 * 1024) #define TEXTURE_POOL_SIZE (8 * 1024 * 1024) #if DEBUG_RESOURCE_STATES #define LOG_EXECUTE_COMMAND_LISTS 1 #define LOG_PRESENT 1 #else #define LOG_EXECUTE_COMMAND_LISTS 0 #define LOG_PRESENT 0 #endif #define DEBUG_FRAME_TIMING 0 #if DEBUG_FRAME_TIMING #define LOG_VIEWPORT_EVENTS 1 #define LOG_PRESENT 1 #define LOG_EXECUTE_COMMAND_LISTS 1 #else #define LOG_VIEWPORT_EVENTS 0 #endif #if EXECUTE_DEBUG_COMMAND_LISTS #define DEBUG_EXECUTE_COMMAND_LIST(scope) if (scope##->ActiveQueries == 0)"
  },
  {
    "label": "FlushCommands()",
    "kind": "Method",
    "detail": "Function (scope # # ->)",
    "insertText": "FlushCommands(ED3D12FlushFlags::WaitForCompletion)"
  },
  {
    "label": "DEBUG_EXECUTE_COMMAND_CONTEXT()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "DEBUG_EXECUTE_COMMAND_CONTEXT(context) if (context.ActiveQueries == 0)"
  },
  {
    "label": "DEBUG_RHI_EXECUTE_COMMAND_LIST()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "DEBUG_RHI_EXECUTE_COMMAND_LIST(scope) if (scope##->GetRHIDevice(0)->GetDefaultCommandContext().ActiveQueries == 0)"
  },
  {
    "label": "GetRHIDevice()",
    "kind": "Method",
    "detail": "Function (scope # # ->)",
    "insertText": "GetRHIDevice(0)->GetDefaultCommandContext().FlushCommands(ED3D12FlushFlags::WaitForCompletion)"
  }
]