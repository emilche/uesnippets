[
  {
    "label": "UAudioAnalyzerSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioAnalyzerSubsystem"
  },
  {
    "label": "UAudioAnalyzerSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioAnalyzerSettings"
  },
  {
    "label": "FAudioAnalyzeTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioAnalyzeTask"
  },
  {
    "label": "UAudioAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioAnalyzer"
  },
  {
    "label": "ResultType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResultType"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / AsyncWork . h \" # include \" AudioAnalyzerAsset . h \" # include \" AudioAnalyzerFacade . h \" # include \" AudioDefines . h \" # include \" CoreMinimal . h \" # include \" DSP / MultithreadedPatching . h \" # include \" IAudioAnalyzerInterface . h \" # include \" Sound / AudioBus . h \" # include \" AudioAnalyzer . generated . h \" class UAudioAnalyzerSubsystem ;)",
    "insertText": "UCLASS(Abstract, EditInlineNew, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FAudioAnalyzeTask()",
    "kind": "Method",
    "detail": "Function (typedef TSharedPtr<Audio::IAnalyzerResult,ESPMode::ThreadSafe> FAnalyzerResultSharedPtr ; class FAudioAnalyzeTask : public FNonAbandonableTask { public :)",
    "insertText": "FAudioAnalyzeTask(TUniquePtr<Audio::FAnalyzerFacade>& InAnalyzerFacade, int32 InSampleRate, int32 InNumChannels)"
  },
  {
    "label": "SetAnalyzerControls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnalyzerControls(TSharedPtr<Audio::IAnalyzerControls> InControls)"
  },
  {
    "label": "SetAudioBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioBuffer(TArray<float>&& InAudioData)"
  },
  {
    "label": "GetAudioBuffer()",
    "kind": "Method",
    "detail": "Function (TArray<float>&&)",
    "insertText": "GetAudioBuffer()"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoWork()"
  },
  {
    "label": "GetResults()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<Audio::IAnalyzerResult>)",
    "insertText": "GetResults()"
  },
  {
    "label": "StartAnalyzing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAnalyzing(const Audio::FDeviceId InAudioDeviceId, UAudioBus* AudioBusToAnalyze)"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<Audio::IAnalyzerSettings>)",
    "insertText": "GetSettings(const int32 InSampleRate, const int32 InNumChannels)"
  },
  {
    "label": "GetAnalyzerControls()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<Audio::IAnalyzerControls>)",
    "insertText": "GetAnalyzerControls()"
  },
  {
    "label": "BroadcastResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastResults()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "IsReadyForAnalysis()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsReadyForAnalysis()"
  },
  {
    "label": "DoAnalysis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoAnalysis()"
  },
  {
    "label": "GetAnalyzerFactoryName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetAnalyzerFactoryName() const PURE_VIRTUAL(UAudioAnalyzer::GetAnalyzerFactoryName, return FName();)"
  },
  {
    "label": "GetSettingsFromProperty()",
    "kind": "Method",
    "detail": "Function (int32 NumFramesPerBufferToAnalyze = 1 0 2 4 ; private : UAudioAnalyzerSettings*)",
    "insertText": "GetSettingsFromProperty(FProperty* Property)"
  }
]