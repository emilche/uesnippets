[
  {
    "label": "PushSincResampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PushSincResampler"
  },
  {
    "label": "PushSincResamplerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PushSincResamplerTest"
  },
  {
    "label": "PushSincResampler()",
    "kind": "Method",
    "detail": "Function (# ifndef COMMON_AUDIO_RESAMPLER_PUSH_SINC_RESAMPLER_H_ # define COMMON_AUDIO_RESAMPLER_PUSH_SINC_RESAMPLER_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include \" common_audio / resampler / sinc_resampler . h \" namespace webrtc { class PushSincResampler : public SincResamplerCallback { public :)",
    "insertText": "PushSincResampler(size_t source_frames, size_t destination_frames)"
  },
  {
    "label": "PushSincResampler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PushSincResampler()"
  },
  {
    "label": "PushSincResampler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushSincResampler(const PushSincResampler&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PushSincResampler&)",
    "insertText": "operator(const PushSincResampler&)"
  },
  {
    "label": "Resample()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Resample(const int16_t* source, size_t source_frames, int16_t* destination, size_t destination_capacity)"
  },
  {
    "label": "Resample()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Resample(const float* source, size_t source_frames, float* destination, size_t destination_capacity)"
  },
  {
    "label": "AlgorithmicDelaySeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "AlgorithmicDelaySeconds(int source_rate_hz)"
  },
  {
    "label": "get_resampler_for_testing()",
    "kind": "Method",
    "detail": "Function (private : class PushSincResamplerTest ; SincResampler*)",
    "insertText": "get_resampler_for_testing()"
  }
]