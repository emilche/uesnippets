[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_BYTE_ORDER_H_ # define RTC_BASE_BYTE_ORDER_H_ # include<stdint . h> # if)",
    "insertText": "defined(WEBRTC_POSIX) && !defined(__native_client__) #include <arpa/inet.h> #endif #include \"rtc_base/system/arch.h\" #if defined(WEBRTC_MAC) #include <libkern/OSByteOrder.h> #define htobe16(v) OSSwapHostToBigInt16(v) #define htobe32(v) OSSwapHostToBigInt32(v) #define htobe64(v) OSSwapHostToBigInt64(v) #define be16toh(v) OSSwapBigToHostInt16(v) #define be32toh(v) OSSwapBigToHostInt32(v) #define be64toh(v) OSSwapBigToHostInt64(v) #define htole16(v) OSSwapHostToLittleInt16(v) #define htole32(v) OSSwapHostToLittleInt32(v) #define htole64(v) OSSwapHostToLittleInt64(v) #define le16toh(v) OSSwapLittleToHostInt16(v) #define le32toh(v) OSSwapLittleToHostInt32(v) #define le64toh(v) OSSwapLittleToHostInt64(v) #elif defined(WEBRTC_WIN) || defined(__native_client__) #if defined(WEBRTC_WIN) #include <stdlib.h> #include <winsock2.h> #else #include <netinet/in.h> #endif #if defined(WEBRTC_ARCH_LITTLE_ENDIAN) #define htobe16(v) htons(v) #define htobe32(v) htonl(v) #define be16toh(v) ntohs(v) #define be32toh(v) ntohl(v) #define htole16(v) (v) #define htole32(v) (v) #define htole64(v) (v) #define le16toh(v) (v) #define le32toh(v) (v) #define le64toh(v) (v) #if defined(WEBRTC_WIN) #define htobe64(v) _byteswap_uint64(v) #define be64toh(v) _byteswap_uint64(v) #endif #if defined(__native_client__) #define htobe64(v) __builtin_bswap64(v) #define be64toh(v) __builtin_bswap64(v) #endif #elif defined(WEBRTC_ARCH_BIG_ENDIAN) #define htobe16(v) (v) #define htobe32(v) (v) #define be16toh(v) (v) #define be32toh(v) (v) #define htole16(v) __builtin_bswap16(v) #define htole32(v) __builtin_bswap32(v) #define htole64(v) __builtin_bswap64(v) #define le16toh(v) __builtin_bswap16(v) #define le32toh(v) __builtin_bswap32(v) #define le64toh(v) __builtin_bswap64(v) #if defined(WEBRTC_WIN) #define htobe64(v) (v) #define be64toh(v) (v) #endif #if defined(__native_client__) #define htobe64(v) (v) #define be64toh(v) (v) #endif #else #error WEBRTC_ARCH_BIG_ENDIAN or WEBRTC_ARCH_LITTLE_ENDIAN must be defined. #endif #elif defined(WEBRTC_POSIX)"
  },
  {
    "label": "Set8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set8(void* memory, size_t offset, uint8_t v)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "uint8_t(memory)"
  },
  {
    "label": "Get8()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "Get8(const void* memory, size_t offset)"
  },
  {
    "label": "SetBE16()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBE16(void* memory, uint16_t v)"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (* static_cast<)",
    "insertText": "uint16_t(memory) = htobe16(v)"
  },
  {
    "label": "SetBE32()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBE32(void* memory, uint32_t v)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (* static_cast<)",
    "insertText": "uint32_t(memory) = htobe32(v)"
  },
  {
    "label": "SetBE64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBE64(void* memory, uint64_t v)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (* static_cast<)",
    "insertText": "uint64_t(memory) = htobe64(v)"
  },
  {
    "label": "GetBE16()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "GetBE16(const void* memory)"
  },
  {
    "label": "GetBE32()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetBE32(const void* memory)"
  },
  {
    "label": "GetBE64()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "GetBE64(const void* memory)"
  },
  {
    "label": "SetLE16()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLE16(void* memory, uint16_t v)"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (* static_cast<)",
    "insertText": "uint16_t(memory) = htole16(v)"
  },
  {
    "label": "SetLE32()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLE32(void* memory, uint32_t v)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (* static_cast<)",
    "insertText": "uint32_t(memory) = htole32(v)"
  },
  {
    "label": "SetLE64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLE64(void* memory, uint64_t v)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (* static_cast<)",
    "insertText": "uint64_t(memory) = htole64(v)"
  },
  {
    "label": "GetLE16()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "GetLE16(const void* memory)"
  },
  {
    "label": "GetLE32()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetLE32(const void* memory)"
  },
  {
    "label": "GetLE64()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "GetLE64(const void* memory)"
  },
  {
    "label": "IsHostBigEndian()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHostBigEndian()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_ARCH_BIG_ENDIAN)"
  },
  {
    "label": "HostToNetwork16()",
    "kind": "Method",
    "detail": "Function (# else return false ; # endif } uint16_t)",
    "insertText": "HostToNetwork16(uint16_t n)"
  },
  {
    "label": "HostToNetwork32()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "HostToNetwork32(uint32_t n)"
  },
  {
    "label": "HostToNetwork64()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "HostToNetwork64(uint64_t n)"
  },
  {
    "label": "NetworkToHost16()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "NetworkToHost16(uint16_t n)"
  },
  {
    "label": "NetworkToHost32()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "NetworkToHost32(uint32_t n)"
  },
  {
    "label": "NetworkToHost64()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "NetworkToHost64(uint64_t n)"
  }
]