[
  {
    "label": "SDeviceBrowserDeviceListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDeviceBrowserDeviceListRow"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Styling / AppStyle . h \" # include \" HAL / PlatformProcess . h \" # include \" Internationalization / Text . h \" # include \" ITargetDeviceProxy . h \" # include \" ITargetDeviceService . h \" # include \" Layout / Margin . h \" # include \" Misc / Attribute . h \" # include \" PlatformInfo . h \" # include \" SlateOptMacros . h \" # include \" Styling / SlateColor . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / StyleDefaults . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Images / SImage . h \" # include \" Widgets / Input / SCheckBox . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" # define LOCTEXT_NAMESPACE \" SDeviceBrowserDeviceListRow \" class SDeviceBrowserDeviceListRow : public SMultiColumnTableRow<TSharedPtr<ITargetDeviceProxy>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SDeviceBrowserDeviceListRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(ITargetDeviceServicePtr, DeviceService) SLATE_ATTRIBUTE(FText, HighlightText) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (DeviceService = InArgs . _DeviceService ; HighlightText = InArgs . _HighlightText ; SMultiColumnTableRow<TSharedPtr<ITargetDeviceProxy>)",
    "insertText": "Construct(FSuperRowType::FArguments(), InOwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (} public : BEGIN_SLATE_FUNCTION_BUILD_OPTIMIZATION TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == TEXT(\"Icon\"))"
  },
  {
    "label": "FindPlatformInfo()",
    "kind": "Method",
    "detail": "Function (const PlatformInfo::FTargetPlatformInfo* const PlatformInfo =)",
    "insertText": "FindPlatformInfo(DeviceService->GetDevicePlatformName())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == TEXT(\"Name\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == TEXT(\"Platform\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == TEXT(\"Share\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == TEXT(\"Status\"))"
  },
  {
    "label": "HandleClaimedText()",
    "kind": "Method",
    "detail": "Function (} return SNullWidget::NullWidget ; } END_SLATE_FUNCTION_BUILD_OPTIMIZATION private : FText)",
    "insertText": "HandleClaimedText()"
  },
  {
    "label": "GetClaimUser()",
    "kind": "Method",
    "detail": "Function (FString ClaimUser = DeviceService ->)",
    "insertText": "GetClaimUser()"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (ClaimUser + =)",
    "insertText": "LOCTEXT(\"RemotelyHint\", \" (remotely)\").ToString()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FromString(ClaimUser)"
  },
  {
    "label": "HandleNameText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleNameText()"
  },
  {
    "label": "HandleShareCheckBoxStateChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleShareCheckBoxStateChanged(ECheckBoxState NewState)"
  },
  {
    "label": "SetShared()",
    "kind": "Method",
    "detail": "Function (DeviceService ->)",
    "insertText": "SetShared(NewState == ECheckBoxState::Checked)"
  },
  {
    "label": "HandleShareCheckBoxIsChecked()",
    "kind": "Method",
    "detail": "Function (} ECheckBoxState)",
    "insertText": "HandleShareCheckBoxIsChecked()"
  },
  {
    "label": "HandleStatusTextBlockText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleStatusTextBlockText()"
  },
  {
    "label": "GetDevice()",
    "kind": "Method",
    "detail": "Function (ITargetDevicePtr TargetDevice = DeviceService ->)",
    "insertText": "GetDevice()"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "LOCTEXT(\"StatusDisconnected\", \"Disconnected\")"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "LOCTEXT(\"StatusUnavailable\", \"Unavailable\")"
  },
  {
    "label": "HandleTextColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "HandleTextColorAndOpacity()"
  },
  {
    "label": "UseSubduedForeground()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "UseSubduedForeground()"
  }
]