[
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "IPersonaToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaToolkit"
  },
  {
    "label": "SMenuAnchor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMenuAnchor"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "UDebugSkelMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDebugSkelMeshComponent"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "FFrontendFilter_Folder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrontendFilter_Folder"
  },
  {
    "label": "FFrontendFilter_SkeletonNotify",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrontendFilter_SkeletonNotify"
  },
  {
    "label": "FAnimationAssetViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationAssetViewportClient"
  },
  {
    "label": "SAnimationSequenceBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimationSequenceBrowser"
  },
  {
    "label": "FAnimationAssetViewportClient()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" PreviewScene . h \" # include \" EditorViewportClient . h \" # include \" AssetRegistry / AssetData . h \" # include \" Widgets / SToolTip . h \" # include \" PersonaDelegates . h \" # include \" ContentBrowserDelegates . h \" # include \" EditorAnimUtils . h \" # include \" IAnimationSequenceBrowser . h \" # include \" AssetRegistry / ARFilter . h \" class FSceneViewport ; class FUICommandList ; class IPersonaToolkit ; class SMenuAnchor ; class SViewport ; class UAnimationAsset ; class UDebugSkelMeshComponent ; class USoundWave ; class FFrontendFilter_Folder ; class FFrontendFilter_SkeletonNotify ; class FAnimationAssetViewportClient : public FEditorViewportClient { public :)",
    "insertText": "FAnimationAssetViewportClient(FPreviewScene& InPreviewScene)"
  },
  {
    "label": "GetScene()",
    "kind": "Method",
    "detail": "Function (FSceneInterface*)",
    "insertText": "GetScene()"
  },
  {
    "label": "GetBackgroundColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetBackgroundColor()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SAnimationSequenceBrowser : public IAnimationSequenceBrowser { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimationSequenceBrowser) : _ShowHistory(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(bool, ShowHistory) SLATE_ARGUMENT(FOnOpenNewAsset, OnOpenNewAsset) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TSharedRef<class IPersonaToolkit>& InPersonaToolkit)"
  },
  {
    "label": "OnRequestOpenAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRequestOpenAssets(const TArray<FAssetData>& SelectedAssets, bool bFromHistory)"
  },
  {
    "label": "OnRequestOpenAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRequestOpenAsset(const FAssetData& AssetData, bool bFromHistory)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "SAnimationSequenceBrowser()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SAnimationSequenceBrowser()"
  },
  {
    "label": "SelectAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAsset(UAnimationAsset * AnimAsset)"
  },
  {
    "label": "AddToHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToHistory(UAnimationAsset* AnimAsset)"
  },
  {
    "label": "FilterBySkeletonNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterBySkeletonNotify(const FName& InNotifyName)"
  },
  {
    "label": "OnGetAssetContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnGetAssetContextMenu(const TArray<FAssetData>& SelectedAssets)"
  },
  {
    "label": "OpenInNewWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenInNewWindow(TArray<FAssetData> AnimationAssets)"
  },
  {
    "label": "FindInContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindInContentBrowser()"
  },
  {
    "label": "CanFindInContentBrowser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFindInContentBrowser()"
  },
  {
    "label": "SaveSelectedAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveSelectedAssets(TArray<FAssetData> ObjectsToSave)"
  },
  {
    "label": "CanSaveSelectedAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSaveSelectedAssets(TArray<FAssetData> ObjectsToSave)"
  },
  {
    "label": "OnApplyCompression()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnApplyCompression(TArray<FAssetData> SelectedAssets)"
  },
  {
    "label": "OnExportToFBX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExportToFBX(TArray<FAssetData> SelectedAssets)"
  },
  {
    "label": "OnAddLoopingInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddLoopingInterpolation(TArray<FAssetData> SelectedAssets)"
  },
  {
    "label": "OnSetCurrentPreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetCurrentPreviewMesh(TArray<FAssetData> SelectedAssets)"
  },
  {
    "label": "OnReimportAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReimportAnimation(TArray<FAssetData> SelectedAssets)"
  },
  {
    "label": "OnCreateCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateCopy(TArray<FAssetData> Selected)"
  },
  {
    "label": "CanShowColumnForAssetRegistryTag()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "CanShowColumnForAssetRegistryTag(FName AssetType, FName TagName)"
  },
  {
    "label": "GetSelectedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedPackages(const TArray<FAssetData>& Assets, TArray<UPackage*>& OutPackages)"
  },
  {
    "label": "AddAssetToHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAssetToHistory(const FAssetData& AssetData)"
  },
  {
    "label": "CacheOriginalAnimAssetHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheOriginalAnimAssetHistory()"
  },
  {
    "label": "OnGoForwardInHistory()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnGoForwardInHistory()"
  },
  {
    "label": "OnGoBackInHistory()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnGoBackInHistory()"
  },
  {
    "label": "GoToHistoryIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoToHistoryIndex(int32 InHistoryIdx)"
  },
  {
    "label": "CanStepBackwardInHistory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStepBackwardInHistory()"
  },
  {
    "label": "CanStepForwardInHistory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStepForwardInHistory()"
  },
  {
    "label": "OnMouseDownHistory()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseDownHistory(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, TWeakPtr< SMenuAnchor > InMenuAnchor)"
  },
  {
    "label": "CreateHistoryMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateHistoryMenu(bool bInBackHistory)"
  },
  {
    "label": "CreateAssetTooltipResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAssetTooltipResources()"
  },
  {
    "label": "CreateCustomAssetToolTip()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SToolTip>)",
    "insertText": "CreateCustomAssetToolTip(FAssetData& AssetData)"
  },
  {
    "label": "OnVisualizeAssetToolTip()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVisualizeAssetToolTip(const TSharedPtr<SWidget>& TooltipContent, FAssetData& AssetData)"
  },
  {
    "label": "OnAssetToolTipClosing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetToolTipClosing()"
  },
  {
    "label": "CleanupPreviewSceneComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupPreviewSceneComponent(USceneComponent* Component)"
  },
  {
    "label": "IsToolTipPreviewVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToolTipPreviewVisible()"
  },
  {
    "label": "GetHistoryVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetHistoryVisibility()"
  },
  {
    "label": "HandleFilterAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleFilterAsset(const FAssetData& InAssetData)"
  },
  {
    "label": "HandlePlayAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePlayAudio(FAssetData InAssetData)"
  },
  {
    "label": "HandleStopAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleStopAudio()"
  },
  {
    "label": "PlayPreviewAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayPreviewAudio(USoundWave* InSoundWave)"
  },
  {
    "label": "UpdateTootipPreview()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<SViewport> ViewportWidget ; TSharedPtr<FSceneViewport> SceneViewport ; TSharedPtr<FAnimationAssetViewportClient> ViewportClient ; UDebugSkelMeshComponent* PreviewComponent ; FPreviewScene PreviewScene ; TSharedPtr<FUICommandList> Commands ; TWeakPtr<class IPersonaToolkit> PersonaToolkitPtr ; TSet<FName> AssetRegistryTagsToIgnore ; TArray<FAssetData> AssetHistory ; int32 CurrentAssetHistoryIndex ; const int32 MaxAssetsHistory ; bool bTriedToCacheOrginalAsset ; bool bShowHistory ; FOnOpenNewAsset OnOpenNewAsset ; FSyncToAssetsDelegate SyncToAssetsDelegate ; FGetCurrentSelectionDelegate GetCurrentSelectionDelegate ; FSetARFilterDelegate SetFilterDelegate ; FARFilter Filter ; TArray<TSharedPtr<FFrontendFilter_Folder>> FolderFilters ; TSharedPtr<FFrontendFilter_SkeletonNotify> SkeletonNotifyFilter ; private : EActiveTimerReturnType)",
    "insertText": "UpdateTootipPreview(double InCurrentTime, float InDeltaTime)"
  }
]