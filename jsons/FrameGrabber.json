[
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FViewportSurfaceReader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportSurfaceReader"
  },
  {
    "label": "IFramePayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IFramePayload"
  },
  {
    "label": "FCapturedFrameData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCapturedFrameData"
  },
  {
    "label": "FFrameGrabber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrameGrabber"
  },
  {
    "label": "FResolveSurface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResolveSurface"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FViewportSurfaceReader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" HAL / ThreadSafeBool . h \" # include \" Slate / SceneViewport . h \" class SWindow ; struct FViewportSurfaceReader {)",
    "insertText": "FViewportSurfaceReader(EPixelFormat InPixelFormat, FIntPoint InBufferSize)"
  },
  {
    "label": "FViewportSurfaceReader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FViewportSurfaceReader()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "BlockUntilAvailable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockUntilAvailable()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ResolveRenderTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveRenderTarget(FViewportSurfaceReader* RenderToReadback, const FTextureRHIRef& BackBuffer, TFunction<void(FColor*, int32, int32)> Callback)"
  },
  {
    "label": "GetCurrentSize()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetCurrentSize()"
  },
  {
    "label": "SetCaptureRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCaptureRect(FIntRect InCaptureRect)"
  },
  {
    "label": "SetWindowSize()",
    "kind": "Method",
    "detail": "Function (CaptureRect = InCaptureRect ; } void)",
    "insertText": "SetWindowSize(FIntPoint InWindowSize)"
  },
  {
    "label": "WasEverQueued()",
    "kind": "Method",
    "detail": "Function (WindowSize = InWindowSize ; } bool)",
    "insertText": "WasEverQueued()"
  },
  {
    "label": "IFramePayload()",
    "kind": "Method",
    "detail": "Function (FThreadSafeBool bEnabled ; FEvent* AvailableEvent ; FTextureRHIRef ReadbackTexture ; FIntRect CaptureRect ; FIntPoint WindowSize ; EPixelFormat PixelFormat ; bool bIsEnabled ; bool bQueuedForCapture ; } ; struct IFramePayload { ~)",
    "insertText": "IFramePayload()"
  },
  {
    "label": "OnFrameReady_RenderThread()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnFrameReady_RenderThread(FColor* ColorBuffer, FIntPoint BufferSize, FIntPoint TargetSize)"
  },
  {
    "label": "FCapturedFrameData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCapturedFrameData(FCapturedFrameData&& In) : ColorBuffer(MoveTemp(In.ColorBuffer)), BufferSize(In.BufferSize), Payload(MoveTemp(In.Payload))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FCapturedFrameData&)",
    "insertText": "operator(FCapturedFrameData&& In)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ColorBuffer =)",
    "insertText": "MoveTemp(In.ColorBuffer)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (BufferSize = In . BufferSize ; Payload =)",
    "insertText": "MoveTemp(In.Payload)"
  },
  {
    "label": "FCapturedFrameData()",
    "kind": "Method",
    "detail": "Function (} TArray<FColor> ColorBuffer ; FIntPoint BufferSize ; FFramePayloadPtr Payload ; private :)",
    "insertText": "FCapturedFrameData(const FCapturedFrameData& In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCapturedFrameData&)",
    "insertText": "operator(const FCapturedFrameData& In)"
  },
  {
    "label": "FFrameGrabber()",
    "kind": "Method",
    "detail": "Function (} ; class FFrameGrabber { public :)",
    "insertText": "FFrameGrabber(TSharedRef<FSceneViewport> Viewport, FIntPoint DesiredBufferSize, EPixelFormat InPixelFormat = PF_B8G8R8A8, uint32 NumSurfaces = 3)"
  },
  {
    "label": "FFrameGrabber()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FFrameGrabber()"
  },
  {
    "label": "StartCapturingFrames()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "StartCapturingFrames()"
  },
  {
    "label": "IsCapturingFrames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCapturingFrames()"
  },
  {
    "label": "CaptureThisFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureThisFrame(FFramePayloadPtr Payload)"
  },
  {
    "label": "StopCapturingFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopCapturingFrames()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "HasOutstandingFrames()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "HasOutstandingFrames()"
  },
  {
    "label": "GetCapturedFrames()",
    "kind": "Method",
    "detail": "Function (TArray<FCapturedFrameData>)",
    "insertText": "GetCapturedFrames()"
  },
  {
    "label": "OnBackBufferReadyToPresentCallback()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnBackBufferReadyToPresentCallback(SWindow& SlateWindow, const FTextureRHIRef& BackBuffer)"
  },
  {
    "label": "OnFrameReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameReady(int32 SurfaceIndex, FColor* ColorBuffer, int32 Width, int32 Height)"
  },
  {
    "label": "FFrameGrabber()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FFrameGrabber(const FFrameGrabber&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFrameGrabber&)",
    "insertText": "operator(const FFrameGrabber&)"
  },
  {
    "label": "FResolveSurface()",
    "kind": "Method",
    "detail": "Function (void* TargetWindowPtr ; FDelegateHandle OnBackBufferReadyToPresent ; TArray<FCapturedFrameData> CapturedFrames ; FCriticalSection CapturedFramesMutex ; struct FResolveSurface {)",
    "insertText": "FResolveSurface(EPixelFormat InPixelFormat, FIntPoint BufferSize) : Surface(InPixelFormat, BufferSize)"
  }
]