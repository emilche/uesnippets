[
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FSubObjectRegistryGetter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubObjectRegistryGetter"
  },
  {
    "label": "FSubObjectRegistry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubObjectRegistry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntry"
  },
  {
    "label": "FReplicatedComponentInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicatedComponentInfo"
  },
  {
    "label": "AddSubObjectUnique()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" HAL / Platform . h \" # include \" UObject / CoreNetTypes . h \" # include \" UObject / ObjectKey . h \" class UActorComponent ; class UObject ; # ifndef UE_NET_SUBOBJECTLIST_WEAKPTR # define UE_NET_SUBOBJECTLIST_WEAKPTR 1 # endif namespace UE::Net { class FSubObjectRegistryGetter ; } namespace UE::Net { struct FSubObjectRegistry { public : enum class EResult : uint8 { NewEntry,AlreadyRegistered,NetConditionConflict,} ; FSubObjectRegistry::EResult)",
    "insertText": "AddSubObjectUnique(UObject* InSubObject, ELifetimeCondition InNetCondition)"
  },
  {
    "label": "RemoveSubObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSubObject(UObject* InSubObject)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "CleanRegistryIndexes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CleanRegistryIndexes(const TArrayView<int32>& IndexesToClean)"
  },
  {
    "label": "GetNetCondition()",
    "kind": "Method",
    "detail": "Function (ELifetimeCondition)",
    "insertText": "GetNetCondition(UObject* SubObject)"
  },
  {
    "label": "FEntry()",
    "kind": "Method",
    "detail": "Function (struct FEntry { private : # if UE_NET_SUBOBJECTLIST_WEAKPTR FWeakObjectPtr SubObject ; # else UObject* SubObject = nullptr ; # endif public : FObjectKey Key ; ELifetimeCondition NetCondition = COND_None ; # if UE_NET_REPACTOR_NAME_DEBUG FName SubObjectClassName ; FName SubObjectName ; # endif)",
    "insertText": "FEntry(UObject* InSubObject, ELifetimeCondition InNetCondition = COND_None) : SubObject(InSubObject) , Key(InSubObject) , NetCondition(InNetCondition) #if UE_NET_REPACTOR_NAME_DEBUG , SubObjectClassName(InSubObject != nullptr ? ((UObjectBase*)((UObjectBase*)InSubObject)->GetClass())->GetFName() : NAME_None) , SubObjectName(InSubObject != nullptr ? ((UObjectBase*)InSubObject)->GetFName() : NAME_None)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FEntry& rhs)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# if UE_NET_SUBOBJECTLIST_WEAKPTR return SubObject .)",
    "insertText": "Get()"
  },
  {
    "label": "GetRegistryList()",
    "kind": "Method",
    "detail": "Function (# else return SubObject ; # endif } } ; const TArray<FSubObjectRegistry::FEntry>&)",
    "insertText": "GetRegistryList()"
  },
  {
    "label": "FReplicatedComponentInfo()",
    "kind": "Method",
    "detail": "Function (private : TArray<FEntry> Registry ; } ; struct FReplicatedComponentInfo { UActorComponent* Component = nullptr ; FObjectKey Key ; ELifetimeCondition NetCondition = COND_None ; FSubObjectRegistry SubObjects ; # if UE_NET_REPACTOR_NAME_DEBUG FName ComponentClassName ; FName ComponentName ; # endif)",
    "insertText": "FReplicatedComponentInfo(UActorComponent* InComponent, ELifetimeCondition InNetCondition = COND_None) : Component(InComponent) , Key((UObject*)InComponent) , NetCondition(InNetCondition) #if UE_NET_REPACTOR_NAME_DEBUG , ComponentClassName(InComponent != nullptr ? ((UObjectBase*)((UObjectBase*)InComponent)->GetClass())->GetFName() : NAME_None) , ComponentName(InComponent != nullptr ? ((UObjectBase*)InComponent)->GetFName() : NAME_None)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "operator(const FReplicatedComponentInfo& rhs)"
  }
]