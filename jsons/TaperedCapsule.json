[
  {
    "label": "FTaperedCapsuleSpecializeSamplingHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTaperedCapsuleSpecializeSamplingHelper"
  },
  {
    "label": "FTaperedCapsule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaperedCapsule"
  },
  {
    "label": "FISPCDataVerifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FISPCDataVerifier"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FTaperedCapsule()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ImplicitObject . h \" # include \" Chaos / Core . h \" # include \" Chaos / TaperedCylinder . h \" namespace Chaos { struct FTaperedCapsuleSpecializeSamplingHelper ; class FTaperedCapsule : public FImplicitObject { public :)",
    "insertText": "FTaperedCapsule() : FImplicitObject(EImplicitObject::FiniteConvex, ImplicitObjectType::TaperedCapsule)"
  },
  {
    "label": "FTaperedCapsule()",
    "kind": "Method",
    "detail": "Function (this -> bIsConvex = true ; })",
    "insertText": "FTaperedCapsule(const FVec3& X1, const FVec3& X2, const FReal Radius1, const FReal Radius2) : FImplicitObject(EImplicitObject::FiniteConvex, ImplicitObjectType::TaperedCapsule) , Origin(X1) , Axis((X2 - X1).GetSafeNormal()) , Height((X2 - X1).Size()) , Radius1(Radius1) , Radius2(Radius2) , LocalBoundingBox(X1, X1)"
  },
  {
    "label": "GrowToInclude()",
    "kind": "Method",
    "detail": "Function (this -> bIsConvex = true ; LocalBoundingBox .)",
    "insertText": "GrowToInclude(X2)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (FReal MaxRadius =)",
    "insertText": "Max(Radius1, Radius2)"
  },
  {
    "label": "FAABB3()",
    "kind": "Method",
    "detail": "Function (LocalBoundingBox =)",
    "insertText": "FAABB3(LocalBoundingBox.Min() - FVec3(MaxRadius), LocalBoundingBox.Max() + FVec3(MaxRadius))"
  },
  {
    "label": "FTaperedCapsule()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTaperedCapsule(const FTaperedCapsule& Other) : FImplicitObject(EImplicitObject::FiniteConvex, ImplicitObjectType::TaperedCapsule) , Origin(Other.Origin) , Axis(Other.Axis) , Height(Other.Height) , Radius1(Other.Radius1) , Radius2(Other.Radius2) , LocalBoundingBox(Other.LocalBoundingBox)"
  },
  {
    "label": "FTaperedCapsule()",
    "kind": "Method",
    "detail": "Function (this -> bIsConvex = true ; })",
    "insertText": "FTaperedCapsule(FTaperedCapsule&& Other) : FImplicitObject(EImplicitObject::FiniteConvex, ImplicitObjectType::TaperedCapsule) , Origin(MoveTemp(Other.Origin)) , Axis(MoveTemp(Other.Axis)) , Height(Other.Height) , Radius1(Other.Radius1) , Radius2(Other.Radius2) , LocalBoundingBox(MoveTemp(Other.LocalBoundingBox))"
  },
  {
    "label": "FTaperedCapsule()",
    "kind": "Method",
    "detail": "Function (this -> bIsConvex = true ; } ~)",
    "insertText": "FTaperedCapsule()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (} EImplicitObjectType)",
    "insertText": "StaticType()"
  },
  {
    "label": "ComputeLocalSamplePoints()",
    "kind": "Method",
    "detail": "Function (TArray<FVec3>)",
    "insertText": "ComputeLocalSamplePoints(const FReal PointsPerUnitArea, const int32 MinPoints = 0, const int32 MaxPoints = 1000)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (} TArray<FVec3>)",
    "insertText": "ComputeSamplePoints(const int32 NumPoints)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (TArray<FVec3>)",
    "insertText": "ComputeSamplePoints(const FReal PointsPerUnitArea, const int32 MinPoints, const int32 MaxPoints)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const int32 NumPoints =)",
    "insertText": "Clamp(static_cast<int32>(ceil(PointsPerUnitArea * GetArea(true))), MinPoints, MaxPoints)"
  },
  {
    "label": "BoundingBox()",
    "kind": "Method",
    "detail": "Function (} const FAABB3)",
    "insertText": "BoundingBox()"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const FVec3 OriginToX = x - Origin ; const FReal DistanceAlongAxis =)",
    "insertText": "Clamp(FVec3::DotProduct(OriginToX, Axis), (FReal)0.0, Height)"
  },
  {
    "label": "Radius()",
    "kind": "Method",
    "detail": "Function (const FVec3 ClosestPoint = Origin + Axis* DistanceAlongAxis ; const FReal)",
    "insertText": "Radius(Height > UE_SMALL_NUMBER) ? FMath::Lerp(Radius1, Radius2, DistanceAlongAxis / Height) : FMath::Max(Radius1, Radius2)"
  },
  {
    "label": "OutNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutNormal(x - ClosestPoint)"
  },
  {
    "label": "SafeNormalize()",
    "kind": "Method",
    "detail": "Function (const FReal NormalSize = OutNormal .)",
    "insertText": "SafeNormalize()"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (const FReal R1mR2 = Radius1 - Radius2 ; return)",
    "insertText": "Sqrt(R1mR2*R1mR2 + Height*Height)"
  },
  {
    "label": "GetX1()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetX1()"
  },
  {
    "label": "GetInsertion()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetInsertion()"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetCenter()"
  },
  {
    "label": "GetCenterOfMass()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetCenterOfMass()"
  },
  {
    "label": "TaperedSectionCenterOfMass()",
    "kind": "Method",
    "detail": "Function (const FReal R1R1 = Radius1* Radius1 ; const FReal R2R2 = Radius2* Radius2 ; const FReal R1R2 = Radius1* Radius2 ; FReal)",
    "insertText": "TaperedSectionCenterOfMass(Height * (R1R1 + (FReal)2.0 * R1R2 + (FReal)3.0 * R2R2) / (FReal)4.0 * (R1R1 + R1R2 + R2R2))"
  },
  {
    "label": "Hemisphere1CenterOfMass()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "Hemisphere1CenterOfMass((FReal)3.0 * Radius1 / (FReal)8.0)"
  },
  {
    "label": "Hemisphere2CenterOfMass()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "Hemisphere2CenterOfMass(Height + ((FReal)3.0 * Radius2 / (FReal)8.0))"
  },
  {
    "label": "GetTaperedSectionVolume()",
    "kind": "Method",
    "detail": "Function (const FReal TaperedSectionVolume =)",
    "insertText": "GetTaperedSectionVolume(Height, Radius1, Radius2)"
  },
  {
    "label": "GetHemisphereVolume()",
    "kind": "Method",
    "detail": "Function (const FReal Hemisphere1Volume =)",
    "insertText": "GetHemisphereVolume(Radius1)"
  },
  {
    "label": "GetHemisphereVolume()",
    "kind": "Method",
    "detail": "Function (const FReal Hemisphere2Volume =)",
    "insertText": "GetHemisphereVolume(Radius2)"
  },
  {
    "label": "TotalCenterOfMassAlongAxis()",
    "kind": "Method",
    "detail": "Function (const FReal TotalVolume = TaperedSectionVolume + Hemisphere1Volume + Hemisphere2Volume ; const FReal)",
    "insertText": "TotalCenterOfMassAlongAxis((TaperedSectionCenterOfMass * TaperedSectionVolume) + (Hemisphere1CenterOfMass * Hemisphere1Volume) + (Hemisphere2CenterOfMass * Hemisphere2Volume))"
  },
  {
    "label": "GetAxis()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetAxis()"
  },
  {
    "label": "GetArea()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetArea(const FReal Height, const FReal Radius1, const FReal Radius2, const bool IncludeEndCaps)"
  },
  {
    "label": "AreaNoCaps()",
    "kind": "Method",
    "detail": "Function (const FReal TwoPI = UE_PI* 2 ; FReal)",
    "insertText": "AreaNoCaps(FReal)"
  },
  {
    "label": "UE_PI()",
    "kind": "Method",
    "detail": "Function (AreaNoCaps = TwoPI* Radius1* Height ; } else { const FReal R1_R2 = Radius1 - Radius2 ; AreaNoCaps =)",
    "insertText": "UE_PI(Radius1 + Radius2) * FMath::Sqrt((R1_R2 * R1_R2) + (Height * Height))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IncludeEndCaps)"
  },
  {
    "label": "GetArea()",
    "kind": "Method",
    "detail": "Function (const FReal Hemisphere1Area = TSphere<FReal,3)",
    "insertText": "GetArea(Radius1) / (FReal)"
  },
  {
    "label": "GetArea()",
    "kind": "Method",
    "detail": "Function (const FReal Hemisphere2Area = TSphere<FReal,3)",
    "insertText": "GetArea(Radius2) / (FReal)"
  },
  {
    "label": "GetVolume()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetVolume(const FReal Height, const FReal Radius1, const FReal Radius2)"
  },
  {
    "label": "GetInertiaTensor()",
    "kind": "Method",
    "detail": "Function (} FMatrix33)",
    "insertText": "GetInertiaTensor(const FReal Mass, const FReal Height, const FReal Radius1, const FReal Radius2)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const FReal R1 =)",
    "insertText": "Min(Radius1, Radius2)"
  },
  {
    "label": "Num1()",
    "kind": "Method",
    "detail": "Function (const FReal HH = Height* Height ; const FReal R1R1 = R1* R1 ; const FReal R1R2 = R1* R2 ; const FReal R2R2 = R2* R2 ; const FReal)",
    "insertText": "Num1(FReal)2.0 * HH * (R1R1 + (FReal)3.0 * R1R2 + (FReal)6.0 * R2R2)"
  },
  {
    "label": "Num2()",
    "kind": "Method",
    "detail": "Function (const FReal)",
    "insertText": "Num2(FReal)3.0 * (R1R1 * R1R1 + R1R1 * R1R2 + R1R2 * R1R2 + R1R2 * R2R2 + R2R2 * R2R2)"
  },
  {
    "label": "UE_PI()",
    "kind": "Method",
    "detail": "Function (const FReal Den1 =)",
    "insertText": "UE_PI(R1R1 + R1R2 + R2R2)"
  },
  {
    "label": "Mass()",
    "kind": "Method",
    "detail": "Function (const FReal Diag12 =)",
    "insertText": "Mass(Num1 + Num2) / ((FReal)20.0 * Den1)"
  },
  {
    "label": "Num2()",
    "kind": "Method",
    "detail": "Function (const FReal Diag3 = Mass*)",
    "insertText": "Num2((FReal)10.0 * Den1)"
  },
  {
    "label": "GetRotationOfMass()",
    "kind": "Method",
    "detail": "Function (} FRotation3)",
    "insertText": "GetRotationOfMass()"
  },
  {
    "label": "GetRotationOfMass()",
    "kind": "Method",
    "detail": "Function (} FRotation3)",
    "insertText": "GetRotationOfMass(const FVec3& Axis)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (const uint32 OriginAxisHash =)",
    "insertText": "HashCombine(UE::Math::GetTypeHash(Origin), UE::Math::GetTypeHash(Axis))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (const uint32 PropertyHash =)",
    "insertText": "HashCombine(::GetTypeHash(Height), HashCombine(::GetTypeHash(Radius1), ::GetTypeHash(Radius2)))"
  },
  {
    "label": "OffsetOfOrigin()",
    "kind": "Method",
    "detail": "Function (} # if INTEL_ISPC struct FISPCDataVerifier { int32)",
    "insertText": "OffsetOfOrigin()"
  },
  {
    "label": "SizeOfOrigin()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfOrigin()"
  },
  {
    "label": "OffsetOfAxis()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OffsetOfAxis()"
  },
  {
    "label": "SizeOfAxis()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfAxis()"
  },
  {
    "label": "OffsetOfHeight()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OffsetOfHeight()"
  },
  {
    "label": "SizeOfHeight()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfHeight()"
  },
  {
    "label": "OffsetOfRadius1()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OffsetOfRadius1()"
  },
  {
    "label": "SizeOfRadius1()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfRadius1()"
  },
  {
    "label": "OffsetOfRadius2()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OffsetOfRadius2()"
  },
  {
    "label": "SizeOfRadius2()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfRadius2()"
  },
  {
    "label": "GetRadiusAtDistance()",
    "kind": "Method",
    "detail": "Function (} } ; FISPCDataVerifier ; # endif private : FReal)",
    "insertText": "GetRadiusAtDistance(const FReal& Phi)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (const FReal Alpha = Phi / Height ; return)",
    "insertText": "Lerp(Radius1, Radius2, Alpha)"
  },
  {
    "label": "GetHemisphereVolume()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetHemisphereVolume(const FReal Radius)"
  },
  {
    "label": "GetTaperedSectionVolume()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetTaperedSectionVolume(const FReal Height, const FReal Radius1, const FReal Radius2)"
  },
  {
    "label": "UE_PI()",
    "kind": "Method",
    "detail": "Function (const FReal PI_OVER_3 =)",
    "insertText": "UE_PI(FReal)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (} FVec3 Origin,Axis ; FReal Height,Radius1,Radius2 ; FAABB3 LocalBoundingBox ; } ; struct FTaperedCapsuleSpecializeSamplingHelper { void)",
    "insertText": "ComputeSamplePoints(TArray<FVec3>& Points, const FTaperedCapsule& Capsule, const int32 NumPoints)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 Offset = Points .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Points .)",
    "insertText": "SetNumUninitialized(Offset + 1)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (} else { Points .)",
    "insertText": "SetNumUninitialized(Offset + 3)"
  },
  {
    "label": "GetOrigin()",
    "kind": "Method",
    "detail": "Function (Points [ Offset + 0 ] = Capsule .)",
    "insertText": "GetOrigin()"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (} return ; })",
    "insertText": "ComputeGoldenSpiralPoints(Points, Capsule, NumPoints)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeGoldenSpiralPoints(TArray<FVec3>& Points, const FTaperedCapsule& Capsule, const int32 NumPoints)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGoldenSpiralPoints(Points, Capsule.GetOrigin(), Capsule.GetAxis(), Capsule.GetRadius1(), Capsule.GetRadius2(), Capsule.GetHeight(), NumPoints)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeGoldenSpiralPoints(TArray<FVec3>& Points, const FVec3& Origin, const FVec3& Axis, const FReal Radius1, const FReal Radius2, const FReal Height, const int32 NumPoints, const int32 SpiralSeed = 0)"
  },
  {
    "label": "ComputeGoldenSpiralPointsUnoriented()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGoldenSpiralPointsUnoriented(Points, Radius1, Radius2, Height, NumPoints, SpiralSeed)"
  },
  {
    "label": "FromRotatedVector()",
    "kind": "Method",
    "detail": "Function (const FReal HalfHeight = Height / 2 ; const FRotation3 Rotation =)",
    "insertText": "FromRotatedVector(FVec3(0, 0, 1), Axis)"
  },
  {
    "label": "RotateVector()",
    "kind": "Method",
    "detail": "Function (FVec3& Point = Points [ i ] ; const FVec3 PointNew = Rotation .)",
    "insertText": "RotateVector(Point + FVec3(0, 0, HalfHeight))"
  },
  {
    "label": "ComputeGoldenSpiralPointsUnoriented()",
    "kind": "Method",
    "detail": "Function (Point = PointNew ; } } void)",
    "insertText": "ComputeGoldenSpiralPointsUnoriented(TArray<FVec3>& Points, const FReal Radius1, const FReal Radius2, const FReal Height, const int32 NumPoints, int32 SpiralSeed = 0)"
  },
  {
    "label": "GetArea()",
    "kind": "Method",
    "detail": "Function (const FReal TaperedSectionArea =)",
    "insertText": "GetArea(Height, Radius1, Radius2, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReal AllArea = TaperedSectionArea + Cap1Area + Cap2Area ;)",
    "insertText": "if(AllArea > UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (NumPointsEndCap1 = static_cast<)",
    "insertText": "int32(round(Cap1Area / AllArea * static_cast<FReal>(NumPoints)))"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (NumPointsEndCap2 = static_cast<)",
    "insertText": "int32(round(Cap2Area / AllArea * static_cast<FReal>(NumPoints)))"
  },
  {
    "label": "NumPointsEndCap2()",
    "kind": "Method",
    "detail": "Function (NumPointsTaperedSection = NumPoints - NumPointsEndCap1 - NumPointsEndCap2 ; } else { NumPointsTaperedSection = 0 ; NumPointsEndCap1 =)",
    "insertText": "NumPointsEndCap2(NumPoints - (NumPoints % 2))"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} const int32 NumPointsToAdd = NumPointsTaperedSection + NumPointsEndCap1 + NumPointsEndCap2 ; Points .)",
    "insertText": "Reserve(Points.Num() + NumPointsToAdd)"
  },
  {
    "label": "ComputeBottomHalfSemiSphere()",
    "kind": "Method",
    "detail": "Function (const FReal HalfHeight = Height / 2 ; { TSphereSpecializeSamplingHelper<FReal,3)",
    "insertText": "ComputeBottomHalfSemiSphere(Points, TSphere<FReal, 3>(FVec3(0, 0, -HalfHeight), Radius1), NumPointsEndCap1, SpiralSeed)"
  },
  {
    "label": "ComputeGoldenSpiralPointsUnoriented()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGoldenSpiralPointsUnoriented(Points, Radius1, Radius2, Height, NumPointsTaperedSection, false, SpiralSeed)"
  },
  {
    "label": "ComputeTopHalfSemiSphere()",
    "kind": "Method",
    "detail": "Function (TSphereSpecializeSamplingHelper<FReal,3)",
    "insertText": "ComputeTopHalfSemiSphere(Points, TSphere<FReal, 3>(FVec3(0, 0, HalfHeight), Radius2), NumPointsEndCap2, SpiralSeed)"
  },
  {
    "label": "ComputeLocalSamplePoints()",
    "kind": "Method",
    "detail": "Function (} } } ; TArray<FVec3>)",
    "insertText": "ComputeLocalSamplePoints(const int32 NumPoints)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (TArray<FVec3> Points ;)",
    "insertText": "ComputeSamplePoints(Points, FTaperedCapsule(Origin, Origin + Axis * Height, GetRadius1(), GetRadius2()), NumPoints)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (TArray<FVec3> Points ;)",
    "insertText": "ComputeSamplePoints(Points, *this, NumPoints)"
  }
]