[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "RampUpTester",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RampUpTester"
  },
  {
    "label": "VideoStreamFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoStreamFactory"
  },
  {
    "label": "RampUpDownUpTester",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RampUpDownUpTester"
  },
  {
    "label": "TestStates",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TestStates"
  },
  {
    "label": "RampUpTester()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_RAMPUP_TESTS_H_ # define CALL_RAMPUP_TESTS_H_ # include<map> # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / rtc_event_log / rtc_event_log . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / test / metrics / metric . h \" # include \" api / test / simulated_network . h \" # include \" call / call . h \" # include \" call / simulated_network . h \" # include \" rtc_base / event . h \" # include \" rtc_base / task_utils / repeating_task . h \" # include \" test / call_test . h \" namespace webrtc { const int kTransmissionTimeOffsetExtensionId = 6 ; const int kAbsSendTimeExtensionId = 7 ; const int kTransportSequenceNumberExtensionId = 8 ; const unsigned int kSingleStreamTargetBps = 1 0 0 0 0 0 0 ; class Clock ; class RampUpTester : public test::EndToEndTest { public :)",
    "insertText": "RampUpTester(size_t num_video_streams, size_t num_audio_streams, size_t num_flexfec_streams, unsigned int start_bitrate_bps, int64_t min_run_time_ms, absl::string_view extension_type, bool rtx, bool red, bool report_perf_stats, TaskQueueBase* task_queue)"
  },
  {
    "label": "RampUpTester()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RampUpTester()"
  },
  {
    "label": "GetNumVideoStreams()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNumVideoStreams()"
  },
  {
    "label": "GetNumAudioStreams()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNumAudioStreams()"
  },
  {
    "label": "GetNumFlexfecStreams()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNumFlexfecStreams()"
  },
  {
    "label": "PerformTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformTest()"
  },
  {
    "label": "PollStats()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PollStats()"
  },
  {
    "label": "AccumulateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateStats(const VideoSendStream::StreamStats& stream, size_t* total_packets_sent, size_t* total_sent, size_t* padding_sent, size_t* media_sent)"
  },
  {
    "label": "ReportResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportResult(absl::string_view measurement, size_t value, test::Unit unit, test::ImprovementDirection improvement_direction)"
  },
  {
    "label": "TriggerTestDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerTestDone()"
  },
  {
    "label": "ModifySenderBitrateConfig()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; BuiltInNetworkBehaviorConfig forward_transport_config_ ; const size_t num_video_streams_ ; const size_t num_audio_streams_ ; const size_t num_flexfec_streams_ ; const bool rtx_ ; const bool red_ ; const bool report_perf_stats_ ; Call* sender_call_ ; VideoSendStream* send_stream_ ; test::PacketTransport* send_transport_ ; SimulatedNetwork* send_simulated_network_ ; private : typedef std::map<uint32_t,uint32_t> SsrcMap ; class VideoStreamFactory ; void)",
    "insertText": "ModifySenderBitrateConfig(BitrateConstraints* bitrate_config)"
  },
  {
    "label": "OnVideoStreamsCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVideoStreamsCreated(VideoSendStream* send_stream, const std::vector<VideoReceiveStreamInterface*>& receive_streams)"
  },
  {
    "label": "CreateSendTransport()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<test::PacketTransport>)",
    "insertText": "CreateSendTransport(TaskQueueBase* task_queue, Call* sender_call)"
  },
  {
    "label": "ModifyVideoConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyVideoConfigs(VideoSendStream::Config* send_config, std::vector<VideoReceiveStreamInterface::Config>* receive_configs, VideoEncoderConfig* encoder_config)"
  },
  {
    "label": "ModifyAudioConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyAudioConfigs(AudioSendStream::Config* send_config, std::vector<AudioReceiveStreamInterface::Config>* receive_configs)"
  },
  {
    "label": "ModifyFlexfecConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyFlexfecConfigs(std::vector<FlexfecReceiveStream::Config>* receive_configs)"
  },
  {
    "label": "OnCallsCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCallsCreated(Call* sender_call, Call* receiver_call)"
  },
  {
    "label": "RampUpDownUpTester()",
    "kind": "Method",
    "detail": "Function (const int start_bitrate_bps_ ; const int64_t min_run_time_ms_ ; int expected_bitrate_bps_ ; int64_t test_start_ms_ ; int64_t ramp_up_finished_ms_ ; const std::string extension_type_ ; std::vector<uint32_t> video_ssrcs_ ; std::vector<uint32_t> video_rtx_ssrcs_ ; std::vector<uint32_t> audio_ssrcs_ ; protected : TaskQueueBase* const task_queue_ ; RepeatingTaskHandle pending_task_ ; } ; class RampUpDownUpTester : public RampUpTester { public :)",
    "insertText": "RampUpDownUpTester(size_t num_video_streams, size_t num_audio_streams, size_t num_flexfec_streams, unsigned int start_bitrate_bps, absl::string_view extension_type, bool rtx, bool red, const std::vector<int>& loss_rates, bool report_perf_stats, TaskQueueBase* task_queue)"
  },
  {
    "label": "RampUpDownUpTester()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RampUpDownUpTester()"
  },
  {
    "label": "ModifyReceiverBitrateConfig()",
    "kind": "Method",
    "detail": "Function (private : enum TestStates { kFirstRampup = 0,kLowRate,kSecondRampup,kTestEnd,kTransitionToNextState,} ; void)",
    "insertText": "ModifyReceiverBitrateConfig(BitrateConstraints* bitrate_config)"
  },
  {
    "label": "GetModifierString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetModifierString()"
  },
  {
    "label": "GetExpectedHighBitrate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetExpectedHighBitrate()"
  },
  {
    "label": "GetHighLinkCapacity()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetHighLinkCapacity()"
  },
  {
    "label": "GetFecBytes()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetFecBytes()"
  },
  {
    "label": "ExpectingFec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpectingFec()"
  },
  {
    "label": "EvolveTestState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvolveTestState(int bitrate_bps, bool suspended)"
  }
]