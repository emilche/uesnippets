[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ThreadDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadDelegate"
  },
  {
    "label": "State",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "State"
  },
  {
    "label": "Watchdog()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_WATCHDOG_H_ # define BASE_THREADING_WATCHDOG_H_ # include<string> # include \" base / base_export . h \" # include \" base / compiler_specific . h \" # include \" base / memory / raw_ptr . h \" # include \" base / synchronization / condition_variable . h \" # include \" base / synchronization / lock . h \" # include \" base / threading / platform_thread . h \" # include \" base / time / time . h \" namespace base { class BASE_EXPORT Watchdog { public :)",
    "insertText": "Watchdog(const TimeDelta& duration, const std::string& thread_watched_name, bool enabled)"
  },
  {
    "label": "Watchdog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Watchdog(const Watchdog&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Watchdog&)",
    "insertText": "operator(const Watchdog&)"
  },
  {
    "label": "Watchdog()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Watchdog()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "IsJoinable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsJoinable()"
  },
  {
    "label": "Arm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Arm()"
  },
  {
    "label": "ArmSomeTimeDeltaAgo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArmSomeTimeDeltaAgo(const TimeDelta& time_delta)"
  },
  {
    "label": "ArmAtStartTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArmAtStartTime(const TimeTicks start_time)"
  },
  {
    "label": "Disarm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disarm()"
  },
  {
    "label": "Alarm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Alarm()"
  },
  {
    "label": "ResetStaticData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStaticData()"
  },
  {
    "label": "ThreadDelegate()",
    "kind": "Method",
    "detail": "Function (private : class ThreadDelegate : public PlatformThread::Delegate { public :)",
    "insertText": "ThreadDelegate(Watchdog* watchdog) : watchdog_(watchdog)"
  },
  {
    "label": "ThreadMain()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ThreadMain()"
  },
  {
    "label": "SetThreadName()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetThreadName()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (raw_ptr<Watchdog> watchdog_ ; } ; enum State { ARMED,DISARMED,SHUTDOWN,JOINABLE } ; bool enabled_ ; Lock lock_ ; ConditionVariable condition_variable_ ; State state_)",
    "insertText": "GUARDED_BY(lock_)"
  }
]