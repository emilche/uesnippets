[
  {
    "label": "FCEFWebBrowserWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCEFWebBrowserWindow"
  },
  {
    "label": "IWebBrowserCookieManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWebBrowserCookieManager"
  },
  {
    "label": "IWebBrowserWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWebBrowserWindow"
  },
  {
    "label": "IWebBrowserSchemeHandlerFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWebBrowserSchemeHandlerFactory"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FWebBrowserWindowInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWebBrowserWindowInfo"
  },
  {
    "label": "IWebBrowserWindowFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWebBrowserWindowFactory"
  },
  {
    "label": "FBrowserContextSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBrowserContextSettings"
  },
  {
    "label": "FCreateBrowserWindowSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateBrowserWindowSettings"
  },
  {
    "label": "IWebBrowserSingleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWebBrowserSingleton"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Rendering / SlateRenderer . h \" # include \" IWebBrowserResourceLoader . h \" class FCEFWebBrowserWindow ; class IWebBrowserCookieManager ; class IWebBrowserWindow ; class IWebBrowserSchemeHandlerFactory ; class UMaterialInterface ; struct FWebBrowserWindowInfo ; class IWebBrowserWindowFactory { public : TSharedPtr<IWebBrowserWindow>)",
    "insertText": "Create(TSharedPtr<FCEFWebBrowserWindow>& BrowserWindowParent, TSharedPtr<FWebBrowserWindowInfo>& BrowserWindowInfo)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IWebBrowserWindow>)",
    "insertText": "Create(void* OSWindowHandle, FString InitialURL, bool bUseTransparency, bool bThumbMouseButtonNavigation, bool InterceptLoadRequests = true, TOptional<FString> ContentsToLoad = TOptional<FString>(), bool ShowErrorMessage = true, FColor BackgroundColor = FColor(255, 255, 255, 255))"
  },
  {
    "label": "FBrowserContextSettings()",
    "kind": "Method",
    "detail": "Function (} ; struct FBrowserContextSettings {)",
    "insertText": "FBrowserContextSettings(const FString& InId) : Id(InId) , AcceptLanguageList() , CookieStorageLocation() , bPersistSessionCookies(false) , bIgnoreCertificateErrors(false) , bEnableNetSecurityExpiration(true)"
  },
  {
    "label": "FCreateBrowserWindowSettings()",
    "kind": "Method",
    "detail": "Function (} FString Id ; FString AcceptLanguageList ; FString CookieStorageLocation ; bool bPersistSessionCookies ; bool bIgnoreCertificateErrors ; bool bEnableNetSecurityExpiration ; FOnBeforeContextResourceLoadDelegate OnBeforeContextResourceLoad ; } ; struct FCreateBrowserWindowSettings {)",
    "insertText": "FCreateBrowserWindowSettings() : OSWindowHandle(nullptr) , InitialURL() , bUseTransparency(false) , bInterceptLoadRequests(true) , bThumbMouseButtonNavigation(false) , ContentsToLoad() , bShowErrorMessage(true) , BackgroundColor(FColor(255, 255, 255, 255)) , BrowserFrameRate(24) , Context() , AltRetryDomains()"
  },
  {
    "label": "IWebBrowserSingleton()",
    "kind": "Method",
    "detail": "Function (} void* OSWindowHandle ; FString InitialURL ; bool bUseTransparency ; bool bInterceptLoadRequests ; bool bThumbMouseButtonNavigation ; TOptional<FString> ContentsToLoad ; bool bShowErrorMessage ; FColor BackgroundColor ; int BrowserFrameRate ; TOptional<FBrowserContextSettings> Context ; TArray<FString> AltRetryDomains ; } ; class IWebBrowserSingleton { public : ~)",
    "insertText": "IWebBrowserSingleton()"
  },
  {
    "label": "GetWebBrowserWindowFactory()",
    "kind": "Method",
    "detail": "Function (} ; TSharedRef<IWebBrowserWindowFactory>)",
    "insertText": "GetWebBrowserWindowFactory()"
  },
  {
    "label": "CreateBrowserWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IWebBrowserWindow>)",
    "insertText": "CreateBrowserWindow(TSharedPtr<FCEFWebBrowserWindow>& BrowserWindowParent, TSharedPtr<FWebBrowserWindowInfo>& BrowserWindowInfo)"
  },
  {
    "label": "CreateBrowserWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IWebBrowserWindow>)",
    "insertText": "CreateBrowserWindow(const FCreateBrowserWindowSettings& Settings)"
  },
  {
    "label": "CreateNativeBrowserProxy()",
    "kind": "Method",
    "detail": "Function (# if BUILD_EMBEDDED_APP TSharedPtr<IWebBrowserWindow>)",
    "insertText": "CreateNativeBrowserProxy()"
  },
  {
    "label": "GetCookieManager()",
    "kind": "Method",
    "detail": "Function (# endif TSharedPtr<class IWebBrowserCookieManager>)",
    "insertText": "GetCookieManager()"
  },
  {
    "label": "GetCookieManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class IWebBrowserCookieManager>)",
    "insertText": "GetCookieManager(TOptional<FString> ContextId)"
  },
  {
    "label": "RegisterContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterContext(const FBrowserContextSettings& Settings)"
  },
  {
    "label": "UnregisterContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterContext(const FString& ContextId)"
  },
  {
    "label": "ApplicationCacheDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ApplicationCacheDir()"
  },
  {
    "label": "RegisterSchemeHandlerFactory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterSchemeHandlerFactory(FString Scheme, FString Domain, IWebBrowserSchemeHandlerFactory* WebBrowserSchemeHandlerFactory)"
  },
  {
    "label": "UnregisterSchemeHandlerFactory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterSchemeHandlerFactory(IWebBrowserSchemeHandlerFactory* WebBrowserSchemeHandlerFactory)"
  },
  {
    "label": "SetDevToolsShortcutEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDevToolsShortcutEnabled(bool Value)"
  },
  {
    "label": "IsDevToolsShortcutEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDevToolsShortcutEnabled()"
  },
  {
    "label": "SetJSBindingToLoweringEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJSBindingToLoweringEnabled(bool bEnabled)"
  },
  {
    "label": "ClearOldCacheFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearOldCacheFolders(const FString &CachePathRoot, const FString &CachePrefix)"
  },
  {
    "label": "SetDefaultMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultMaterial(UMaterialInterface* InDefaultMaterial)"
  },
  {
    "label": "SetDefaultTranslucentMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultTranslucentMaterial(UMaterialInterface* InDefaultMaterial)"
  },
  {
    "label": "GetDefaultMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetDefaultMaterial()"
  },
  {
    "label": "GetDefaultTranslucentMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetDefaultTranslucentMaterial()"
  }
]