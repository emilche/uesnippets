[
  {
    "label": "IAssetRegistryInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistryInterface"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FReloadPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReloadPackageData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPackageReloadedEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageReloadedEvent"
  },
  {
    "label": "FReloadPackageData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / SparseArray . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Templates / PointerIsConvertibleFromTo . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class IAssetRegistryInterface ; class UPackage ; struct FReloadPackageData {)",
    "insertText": "FReloadPackageData() : PackageToReload(nullptr) , LoadFlags(LOAD_None)"
  },
  {
    "label": "FReloadPackageData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FReloadPackageData(UPackage* InPackageToReload, const uint32 InLoadFlags) : PackageToReload(InPackageToReload) , LoadFlags(InLoadFlags)"
  },
  {
    "label": "FPackageReloadedEvent()",
    "kind": "Method",
    "detail": "Function (} UPackage* PackageToReload ; uint32 LoadFlags ; } ; enum class EPackageReloadPhase : uint8 { PrePackageLoad,PrePackageFixup,OnPackageFixup,PostPackageFixup,PreBatch,PostBatchPreGC,PostBatchPostGC,} ; class FPackageReloadedEvent { public :)",
    "insertText": "FPackageReloadedEvent(const UPackage* InOldPackage, const UPackage* InNewPackage, TMap<UObject*, UObject*> InRepointedObjects) : OldPackage(InOldPackage) , NewPackage(InNewPackage) , RepointedObjects(ObjectPtrWrap(MoveTemp(InRepointedObjects))) , ObjectReferencers()"
  },
  {
    "label": "GetOldPackage()",
    "kind": "Method",
    "detail": "Function (} const UPackage*)",
    "insertText": "GetOldPackage()"
  },
  {
    "label": "GetRepointedObject()",
    "kind": "Method",
    "detail": "Function (} template<InObjectType,OutObjectType> bool)",
    "insertText": "GetRepointedObject(InObjectType* InObject, OutObjectType*& OutRepointedObject)"
  },
  {
    "label": "RepointObject()",
    "kind": "Method",
    "detail": "Function (} template<ObjectType> bool)",
    "insertText": "RepointObject(ObjectType*& Object)"
  },
  {
    "label": "GetObjectReferencers()",
    "kind": "Method",
    "detail": "Function (} const TArray<TWeakObjectPtr<UObject>>&)",
    "insertText": "GetObjectReferencers()"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (ObjectReferencers .)",
    "insertText": "AddUnique(InObject)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObjects(RepointedObjects)"
  },
  {
    "label": "GetRepointedObjectInternal()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "GetRepointedObjectInternal(const UObject* InObject, const UObject*& OutRepointedObject)"
  },
  {
    "label": "SortPackagesForReload()",
    "kind": "Method",
    "detail": "Function (OutRepointedObject = RepointedObjects [ InObject ] ; return true ; } return false ; } const UPackage* OldPackage ; const UPackage* NewPackage ; TMap<TObjectPtr<UObject>,TObjectPtr<UObject>> RepointedObjects ; TArray<TWeakObjectPtr<UObject>> ObjectReferencers ; } ; void)",
    "insertText": "SortPackagesForReload(TArray<UPackage*>& PackagesToReload)"
  },
  {
    "label": "ReloadPackage()",
    "kind": "Method",
    "detail": "Function (UPackage*)",
    "insertText": "ReloadPackage(UPackage* InPackageToReload, const uint32 InLoadFlags)"
  },
  {
    "label": "ReloadPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReloadPackages(const TArrayView<FReloadPackageData>& InPackagesToReload, TArray<UPackage*>& OutReloadedPackages, const int32 InNumPackagesPerBatch = 1)"
  }
]