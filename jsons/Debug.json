[
  {
    "label": "GetHighResolutionTime()",
    "kind": "Method",
    "detail": "Function (# ifndef SILK_DEBUG_H # define SILK_DEBUG_H # define SILK_DEBUG 0 # define SILK_TIC_TOC 0 # if SILK_DEBUG | | SILK_TIC_TOC # include \" typedef . h \" # include<string . h> # include<stdio . h> # endif # ifdef __cplusplus \" C \" { # endif # if SILK_TIC_TOC unsigned long)",
    "insertText": "GetHighResolutionTime(void)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(defined(_WIN32) || defined(_WINCE)) #include <windows.h> #else #include <sys/time.h> #endif void silk_TimerSave(char *file_name)"
  },
  {
    "label": "TIC()",
    "kind": "Method",
    "detail": "Function (# define silk_NUM_TIMERS_MAX 5 0 # define silk_NUM_TIMERS_MAX_TAG_LEN 3 0 int silk_Timer_nTimers ; int silk_Timer_depth_ctr ; char silk_Timer_tags [ silk_NUM_TIMERS_MAX ] [ silk_NUM_TIMERS_MAX_TAG_LEN ] ; # ifdef _WIN32 LARGE_INTEGER silk_Timer_start [ silk_NUM_TIMERS_MAX ] ; # else unsigned long silk_Timer_start [ silk_NUM_TIMERS_MAX ] ; # endif unsigned int silk_Timer_cnt [ silk_NUM_TIMERS_MAX ] ; opus_int64 silk_Timer_sum [ silk_NUM_TIMERS_MAX ] ; opus_int64 silk_Timer_max [ silk_NUM_TIMERS_MAX ] ; opus_int64 silk_Timer_min [ silk_NUM_TIMERS_MAX ] ; opus_int64 silk_Timer_depth [ silk_NUM_TIMERS_MAX ] ; # ifdef _WIN32 # define)",
    "insertText": "TIC(TAG_NAME)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ int init = 0 ; \\ int ID = - 1 ; \\)",
    "insertText": "if(init == 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\ int k ; \\ init = 1 ; \\)",
    "insertText": "for(k = 0; k < silk_Timer_nTimers; k++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(strcmp(silk_Timer_tags[k], #TAG_NAME) == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ ID = k ; \\ break ; \\ } \\ } \\)",
    "insertText": "if(ID == -1)"
  },
  {
    "label": "strcpy()",
    "kind": "Method",
    "detail": "Function (\\ ID = silk_Timer_nTimers ; \\ silk_Timer_nTimers + + ; \\ silk_Timer_depth [ ID ] = silk_Timer_depth_ctr ; \\)",
    "insertText": "strcpy(silk_Timer_tags[ID], #TAG_NAME)"
  },
  {
    "label": "QueryPerformanceCounter()",
    "kind": "Method",
    "detail": "Function (\\ silk_Timer_cnt [ ID ] = 0 ; \\ silk_Timer_sum [ ID ] = 0 ; \\ silk_Timer_min [ ID ] = 0 xFFFFFFFF ; \\ silk_Timer_max [ ID ] = 0 ; \\ } \\ } \\ silk_Timer_depth_ctr + + ; \\)",
    "insertText": "QueryPerformanceCounter(&silk_Timer_start[ID])"
  },
  {
    "label": "GetHighResolutionTime()",
    "kind": "Method",
    "detail": "Function (\\ silk_Timer_cnt [ ID ] = 0 ; \\ silk_Timer_sum [ ID ] = 0 ; \\ silk_Timer_min [ ID ] = 0 xFFFFFFFF ; \\ silk_Timer_max [ ID ] = 0 ; \\ } \\ } \\ silk_Timer_depth_ctr + + ; \\ silk_Timer_start [ ID ] =)",
    "insertText": "GetHighResolutionTime()"
  },
  {
    "label": "TOC()",
    "kind": "Method",
    "detail": "Function (\\ } # endif # ifdef _WIN32 # define)",
    "insertText": "TOC(TAG_NAME)"
  },
  {
    "label": "QueryPerformanceCounter()",
    "kind": "Method",
    "detail": "Function (\\ ID = k ; \\ break ; \\ } \\ } \\ } \\)",
    "insertText": "QueryPerformanceCounter(&lpPerformanceCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ lpPerformanceCount . QuadPart - = silk_Timer_start [ ID ] . QuadPart ; \\)",
    "insertText": "if((lpPerformanceCount.QuadPart < 100000000) && \\ (lpPerformanceCount.QuadPart >= 0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ silk_Timer_cnt [ ID ] + + ; \\ silk_Timer_sum [ ID ] + = lpPerformanceCount . QuadPart ; \\)",
    "insertText": "if(lpPerformanceCount.QuadPart > silk_Timer_max[ID])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(lpPerformanceCount.QuadPart < silk_Timer_min[ID])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ endTime - = silk_Timer_start [ ID ] ; \\)",
    "insertText": "if((endTime < 100000000) && \\ (endTime >= 0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ silk_Timer_cnt [ ID ] + + ; \\ silk_Timer_sum [ ID ] + = endTime ; \\)",
    "insertText": "if(endTime > silk_Timer_max[ID])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(endTime < silk_Timer_min[ID])"
  },
  {
    "label": "TIC()",
    "kind": "Method",
    "detail": "Function (\\ } \\ silk_Timer_depth_ctr - - ; \\ } # endif # else # define)",
    "insertText": "TIC(TAG_NAME) #define TOC(TAG_NAME) #define silk_TimerSave(FILE_NAME)"
  },
  {
    "label": "DEBUG_STORE_DATA()",
    "kind": "Method",
    "detail": "Function (int silk_debug_store_count ; # define)",
    "insertText": "DEBUG_STORE_DATA(FILE_NAME, DATA_PTR, N_BYTES)"
  },
  {
    "label": "fopen()",
    "kind": "Method",
    "detail": "Function (\\ init = 1 ; \\ cnt = silk_debug_store_count + + ; \\ silk_debug_store_fp [ cnt ] =)",
    "insertText": "fopen(#FILE_NAME, \"wb\")"
  },
  {
    "label": "fwrite()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "fwrite((DATA_PTR), (N_BYTES), 1, silk_debug_store_fp[ cnt ])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\ } # define SILK_DEBUG_STORE_CLOSE_FILES { \\ opus_int i ; \\)",
    "insertText": "for(i = 0; i < silk_debug_store_count; i++)"
  },
  {
    "label": "fclose()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "fclose(silk_debug_store_fp[ i ])"
  }
]