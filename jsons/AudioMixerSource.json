[
  {
    "label": "FMixerDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerDevice"
  },
  {
    "label": "FMixerSourceVoice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceVoice"
  },
  {
    "label": "FMixerSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSource"
  },
  {
    "label": "FMixerBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerBuffer"
  },
  {
    "label": "ISourceListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISourceListener"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDynamicBusSendInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicBusSendInfo"
  },
  {
    "label": "FMixerSource()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AudioMixerBuffer . h \" # include \" AudioMixerSourceManager . h \" namespace Audio { class FMixerDevice ; class FMixerSourceVoice ; class FMixerSource ; class FMixerBuffer ; class ISourceListener ; enum class EMixerSourceInitializationState : uint8 { NotInitialized,Initializing,Initialized } ; class FMixerSource : public FSoundSource,public ISourceListener { public :)",
    "insertText": "FMixerSource(FAudioDevice* InAudioDevice)"
  },
  {
    "label": "FMixerSource()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMixerSource()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(FWaveInstance* InWaveInstance)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "PrepareForInitialization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareForInitialization(FWaveInstance* InWaveInstance)"
  },
  {
    "label": "IsPreparedToInit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreparedToInit()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "Play()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Play()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "StopNow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopNow()"
  },
  {
    "label": "IsStopping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStopping()"
  },
  {
    "label": "IsFinished()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFinished()"
  },
  {
    "label": "GetPlaybackPercent()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPlaybackPercent()"
  },
  {
    "label": "GetNumFramesPlayed()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetNumFramesPlayed()"
  },
  {
    "label": "GetEnvelopeValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEnvelopeValue()"
  },
  {
    "label": "GetRelativeRenderCost()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelativeRenderCost()"
  },
  {
    "label": "OnBeginGenerate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginGenerate()"
  },
  {
    "label": "OnDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDone()"
  },
  {
    "label": "OnEffectTailsDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEffectTailsDone()"
  },
  {
    "label": "OnLoopEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoopEnd()"
  },
  {
    "label": "SetupBusData()",
    "kind": "Method",
    "detail": "Function (bLoopCallback = true ; } ; private : void)",
    "insertText": "SetupBusData(TArray<FInitAudioBusSend>* OutAudioBusSends = nullptr, bool bEnableBusSends = true)"
  },
  {
    "label": "FreeResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeResources()"
  },
  {
    "label": "UpdatePitch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePitch()"
  },
  {
    "label": "UpdateVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVolume()"
  },
  {
    "label": "UpdateSpatialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSpatialization()"
  },
  {
    "label": "UpdateEffects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEffects()"
  },
  {
    "label": "UpdateModulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModulation()"
  },
  {
    "label": "UpdateSourceBusSends()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSourceBusSends()"
  },
  {
    "label": "UpdateChannelMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateChannelMaps()"
  },
  {
    "label": "UpdateRelativeRenderCost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRelativeRenderCost()"
  },
  {
    "label": "UpdateCPUCoreUtilization()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_AUDIO_DEBUG void)",
    "insertText": "UpdateCPUCoreUtilization()"
  },
  {
    "label": "ComputeMonoChannelMap()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "ComputeMonoChannelMap(Audio::FAlignedFloatBuffer& OutChannelMap)"
  },
  {
    "label": "ComputeStereoChannelMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeStereoChannelMap(Audio::FAlignedFloatBuffer& OutChannelMap)"
  },
  {
    "label": "ComputeChannelMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeChannelMap(const int32 NumSourceChannels, Audio::FAlignedFloatBuffer& OutChannelMap)"
  },
  {
    "label": "UseObjectBasedSpatialization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseObjectBasedSpatialization()"
  },
  {
    "label": "IsUsingObjectBasedSpatialization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingObjectBasedSpatialization()"
  },
  {
    "label": "UseSpatializationPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseSpatializationPlugin()"
  },
  {
    "label": "UseOcclusionPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseOcclusionPlugin()"
  },
  {
    "label": "UseReverbPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseReverbPlugin()"
  },
  {
    "label": "UseSourceDataOverridePlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseSourceDataOverridePlugin()"
  },
  {
    "label": "GetInheritedSubmixVolumeModulation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInheritedSubmixVolumeModulation()"
  },
  {
    "label": "UpdateSubmixSendLevels()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateSubmixSendLevels(const FSoundSubmixSendInfoBase& InSendInfo, EMixerSourceSubmixSendStage InSendStage, TSet<FMixerSubmixWeakPtr>& OutTouchedSubmixes)"
  }
]