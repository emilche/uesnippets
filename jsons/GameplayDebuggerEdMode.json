[
  {
    "label": "FGameplayDebuggerEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayDebuggerEdMode"
  },
  {
    "label": "FGameplayDebuggerEdMode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" EditorModes . h \" # include \" EdMode . h \" # include \" EditorViewportClient . h \" class FGameplayDebuggerEdMode : public FEdMode { public :)",
    "insertText": "FGameplayDebuggerEdMode() : FocusedViewport(nullptr)"
  },
  {
    "label": "UsesToolkits()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesToolkits()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "ReceivedFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReceivedFocus(FEditorViewportClient* ViewportClient, FViewport* Viewport)"
  },
  {
    "label": "LostFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LostFocus(FEditorViewportClient* ViewportClient, FViewport* Viewport)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(FEditorViewportClient* InViewportClient, FViewport* InViewport, FKey InKey, EInputEvent InEvent)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FEditorViewportClient* ViewportClient, float DeltaTime)"
  },
  {
    "label": "SafeOpenMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeOpenMode()"
  },
  {
    "label": "SafeCloseMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeCloseMode()"
  },
  {
    "label": "EnableViewportClientFlags()",
    "kind": "Method",
    "detail": "Function (const FName EM_GameplayDebugger ; private : FEditorViewportClient* FocusedViewport ; bool bPrevGAreScreenMessagesEnabled ; void)",
    "insertText": "EnableViewportClientFlags(FEditorViewportClient* ViewportClient, bool bEnable)"
  }
]