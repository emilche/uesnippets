[
  {
    "label": "parallel_while",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "parallel_while"
  },
  {
    "label": "while_task",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "while_task"
  },
  {
    "label": "while_iteration_task",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "while_iteration_task"
  },
  {
    "label": "while_group_task",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "while_group_task"
  },
  {
    "label": "tbb",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tbb"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_parallel_while # define __TBB_parallel_while # include \" task . h \" # include<new> namespace tbb { template<Body> class parallel_while ; namespace internal { template<Stream,Body> class while_task ; template<Body> class while_iteration_task : public task { const Body& my_body ; Body::argument_type my_value ; task*)",
    "insertText": "execute()"
  },
  {
    "label": "my_body()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "my_body(my_value)"
  },
  {
    "label": "while_group_task()",
    "kind": "Method",
    "detail": "Function (} template<Body_> class while_group_task ; class tbb::parallel_while<Body> ; } ; template<Body> class while_group_task : public task { const size_t max_arg_size = 4 ; const Body& my_body ; size_t size ; Body::argument_type my_arg [ max_arg_size ] ;)",
    "insertText": "while_group_task(const Body& body ) : my_body(body), size(0)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (typedef while_iteration_task<Body> iteration_type ;)",
    "insertText": "__TBB_ASSERT(size>0, NULL)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (task_list list ; task* t ; size_t k = 0 ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (t =)",
    "insertText": "new(allocate_child() ) iteration_type(my_arg[k],my_body)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (list .)",
    "insertText": "push_back(*t)"
  },
  {
    "label": "set_ref_count()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "set_ref_count(int(k+1))"
  },
  {
    "label": "spawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn(list)"
  },
  {
    "label": "spawn_and_wait_for_all()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn_and_wait_for_all(*t)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (typedef while_group_task<Body> block_type ; block_type& t =*)",
    "insertText": "new(allocate_additional_child_of(my_barrier) ) block_type(my_body)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (size_t k = 0 ;)",
    "insertText": "while(my_stream.pop_if_present(t.my_arg[k]))"
  },
  {
    "label": "recycle_to_reexecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recycle_to_reexecute()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(k==0)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroy(t)"
  },
  {
    "label": "parallel_while()",
    "kind": "Method",
    "detail": "Function (} class tbb::parallel_while<Body> ; } ; } template<Body> class parallel_while : internal::no_copy { public :)",
    "insertText": "parallel_while() : my_body(NULL), my_barrier(NULL)"
  },
  {
    "label": "parallel_while()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "parallel_while()"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (my_barrier ->)",
    "insertText": "destroy(*my_barrier)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (my_barrier = NULL ; } } typedef Body::argument_type value_type ; template<Stream> void)",
    "insertText": "run(Stream& stream, const Body& body)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(const value_type& item)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (using namespace internal ; empty_task& barrier =*)",
    "insertText": "new(task::allocate_root() ) empty_task()"
  },
  {
    "label": "set_ref_count()",
    "kind": "Method",
    "detail": "Function (my_body =& body ; my_barrier =& barrier ; my_barrier ->)",
    "insertText": "set_ref_count(2)"
  },
  {
    "label": "spawn_and_wait_for_all()",
    "kind": "Method",
    "detail": "Function (my_barrier ->)",
    "insertText": "spawn_and_wait_for_all(w)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(my_barrier,\"attempt to add to parallel_while that is not running\")"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (typedef internal::while_iteration_task<Body> iteration_type ; iteration_type& i =*)",
    "insertText": "new(task::allocate_additional_child_of(*my_barrier) ) iteration_type(item,*my_body)"
  },
  {
    "label": "self()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "self().spawn( i)"
  }
]