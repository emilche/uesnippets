[
  {
    "label": "ClassName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClassName"
  },
  {
    "label": "BaseName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseName"
  },
  {
    "label": "StructName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructName"
  },
  {
    "label": "CefCToCppRefCounted",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefCToCppRefCounted"
  },
  {
    "label": "WrapperStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WrapperStruct"
  },
  {
    "label": "Wrap()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_LIBCEF_DLL_CTOCPP_CTOCPP_REF_COUNTED_H_ # define CEF_LIBCEF_DLL_CTOCPP_CTOCPP_REF_COUNTED_H_ # pragma once # include \" include / base / cef_logging . h \" # include \" include / base / cef_macros . h \" # include \" include / capi / cef_base_capi . h \" # include \" include / cef_base . h \" # include \" libcef_dll / wrapper_types . h \" template<class ClassName,class BaseName,class StructName> class CefCToCppRefCounted : public BaseName { public : CefRefPtr<BaseName>)",
    "insertText": "Wrap(StructName* s)"
  },
  {
    "label": "Unwrap()",
    "kind": "Method",
    "detail": "Function (StructName*)",
    "insertText": "Unwrap(CefRefPtr<BaseName> c)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRef()"
  },
  {
    "label": "UnderlyingAddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnderlyingAddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Release()"
  },
  {
    "label": "HasOneRef()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasOneRef()"
  },
  {
    "label": "HasAtLeastOneRef()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAtLeastOneRef()"
  },
  {
    "label": "CefCToCppRefCounted()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "CefCToCppRefCounted()"
  },
  {
    "label": "GetStruct()",
    "kind": "Method",
    "detail": "Function (} StructName*)",
    "insertText": "GetStruct()"
  },
  {
    "label": "GetWrapperStruct()",
    "kind": "Method",
    "detail": "Function (WrapperStruct* wrapperStruct =)",
    "insertText": "GetWrapperStruct(this)"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(kWrapperType, wrapperStruct->type_)"
  },
  {
    "label": "UnwrapDerived()",
    "kind": "Method",
    "detail": "Function (StructName*)",
    "insertText": "UnwrapDerived(CefWrapperType type, BaseName* c)"
  },
  {
    "label": "NO_SANITIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NO_SANITIZE(\"cfi-icall\") void UnderlyingAddRef()"
  },
  {
    "label": "cef_base_ref_counted_t()",
    "kind": "Method",
    "detail": "Function (cef_base_ref_counted_t* base = reinterpret_cast<)",
    "insertText": "cef_base_ref_counted_t(GetStruct())"
  },
  {
    "label": "NO_SANITIZE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NO_SANITIZE(\"cfi-icall\") bool UnderlyingRelease()"
  },
  {
    "label": "NO_SANITIZE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NO_SANITIZE(\"cfi-icall\") bool UnderlyingHasOneRef()"
  },
  {
    "label": "NO_SANITIZE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NO_SANITIZE(\"cfi-icall\") bool UnderlyingHasAtLeastOneRef()"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (} CefRefCount ref_count_ ; CefWrapperType kWrapperType ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(CefCToCppRefCounted)"
  },
  {
    "label": "wrapperPtr()",
    "kind": "Method",
    "detail": "Function (WrapperStruct* wrapperStruct = new WrapperStruct ; wrapperStruct -> type_ = kWrapperType ; wrapperStruct -> struct_ = s ; CefRefPtr<BaseName>)",
    "insertText": "wrapperPtr(&wrapperStruct->wrapper_)"
  },
  {
    "label": "UnderlyingRelease()",
    "kind": "Method",
    "detail": "Function (wrapperStruct -> wrapper_ .)",
    "insertText": "UnderlyingRelease()"
  },
  {
    "label": "GetWrapperStruct()",
    "kind": "Method",
    "detail": "Function (WrapperStruct* wrapperStruct =)",
    "insertText": "GetWrapperStruct(c.get())"
  },
  {
    "label": "GetWrapperStruct()",
    "kind": "Method",
    "detail": "Function (delete wrapperStruct ; return true ; } return false ; } template<class ClassName,class BaseName,class StructName> CefCToCppRefCounted<ClassName,BaseName,StructName>::WrapperStruct* CefCToCppRefCounted<ClassName,BaseName,StructName)",
    "insertText": "GetWrapperStruct(const BaseName* obj)"
  }
]