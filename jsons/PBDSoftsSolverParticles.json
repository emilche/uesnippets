[
  {
    "label": "FPAndInvM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPAndInvM"
  },
  {
    "label": "FSolverParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverParticles"
  },
  {
    "label": "FSolverParticles()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Real . h \" # include \" Chaos / Vector . h \" # include \" Chaos / ArrayCollectionArray . h \" # include \" Chaos / DynamicParticles . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" namespace Chaos::Softs { struct FPAndInvM { FSolverVec3 P ; FSolverReal InvM ; } ; class FSolverParticles : public TDynamicParticles<FSolverReal,3> { public : typedef TDynamicParticles<FSolverReal,3> Base ;)",
    "insertText": "FSolverParticles() : Base()"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MPAndInvM)"
  },
  {
    "label": "FSolverParticles()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSolverParticles(const FSolverParticles& Other)"
  },
  {
    "label": "FSolverParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSolverParticles(FSolverParticles&& Other) : Base(MoveTemp(Other)), MPAndInvM(MoveTemp(Other.MPAndInvM))"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (} const FSolverVec3&)",
    "insertText": "P(const int32 index)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return)",
    "insertText": "X(index)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } FSolverVec3&)",
    "insertText": "X(const int32 index)"
  },
  {
    "label": "GetP()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } const FSolverVec3&)",
    "insertText": "GetP(const int32 index)"
  },
  {
    "label": "VPrev()",
    "kind": "Method",
    "detail": "Function (MPAndInvM [ index ] . P = InP ; } const FSolverVec3&)",
    "insertText": "VPrev(const int32 Index)"
  },
  {
    "label": "PAndInvM()",
    "kind": "Method",
    "detail": "Function (} const FPAndInvM&)",
    "insertText": "PAndInvM(const int32 index)"
  },
  {
    "label": "GetVPrev()",
    "kind": "Method",
    "detail": "Function (} const TArrayCollectionArray<FSolverVec3>&)",
    "insertText": "GetVPrev()"
  },
  {
    "label": "GetConstArrayView()",
    "kind": "Method",
    "detail": "Function (} template<T> TConstArrayView<T>)",
    "insertText": "GetConstArrayView(const TArray<T>& Data)"
  },
  {
    "label": "GetArrayView()",
    "kind": "Method",
    "detail": "Function (} template<T> TArrayView<T>)",
    "insertText": "GetArrayView(const TArray<T>& Data)"
  }
]