[
  {
    "label": "_InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator"
  },
  {
    "label": "_Predicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Predicate"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_IS_PARTITIONED_H # define _LIBCPP___ALGORITHM_IS_PARTITIONED_H # include<__config> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _InputIterator, class _Predicate> _LIBCPP_NODISCARD_EXT _LIBCPP_CONSTEXPR_AFTER_CXX17 bool is_partitioned(_InputIterator __first, _InputIterator __last, _Predicate __pred)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (+ + __first ;)",
    "insertText": "for(; __first != __last; ++__first) if (__pred(*__first))"
  }
]