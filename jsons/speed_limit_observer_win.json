[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_POWER_MONITOR_SPEED_LIMIT_OBSERVER_WIN_H_ # define BASE_POWER_MONITOR_SPEED_LIMIT_OBSERVER_WIN_H_ # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / power_monitor / moving_average . h \" # include \" base / power_monitor / power_observer . h \" # include \" base / time / time . h \" # include \" base / timer / timer . h \" namespace base { class BASE_EXPORT SpeedLimitObserverWin final { public : typedef base::RepeatingCallback<)",
    "insertText": "void(int)"
  },
  {
    "label": "SpeedLimitObserverWin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpeedLimitObserverWin(SpeedLimitUpdateCallback speed_limit_update_callback)"
  },
  {
    "label": "SpeedLimitObserverWin()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SpeedLimitObserverWin()"
  },
  {
    "label": "GetCurrentSpeedLimit()",
    "kind": "Method",
    "detail": "Function (private : int)",
    "insertText": "GetCurrentSpeedLimit()"
  },
  {
    "label": "OnTimerTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimerTick()"
  },
  {
    "label": "EstimateThrottlingLevel()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EstimateThrottlingLevel()"
  },
  {
    "label": "num_cpus()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "num_cpus()"
  }
]