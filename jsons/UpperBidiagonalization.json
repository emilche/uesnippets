[
  {
    "label": "UpperBidiagonalization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UpperBidiagonalization"
  },
  {
    "label": "UpperBidiagonalization()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_BIDIAGONALIZATION_H # define EIGEN_BIDIAGONALIZATION_H namespace Eigen { namespace internal { template<_MatrixType> class UpperBidiagonalization { public : typedef _MatrixType MatrixType ; enum { RowsAtCompileTime = MatrixType::RowsAtCompileTime,ColsAtCompileTime = MatrixType::ColsAtCompileTime,ColsAtCompileTimeMinusOne = internal::decrement_size<ColsAtCompileTime>::ret } ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef Eigen::Index Index ; typedef Matrix<Scalar,1,ColsAtCompileTime> RowVectorType ; typedef Matrix<Scalar,RowsAtCompileTime,1> ColVectorType ; typedef BandMatrix<RealScalar,ColsAtCompileTime,ColsAtCompileTime,1,0,RowMajor> BidiagonalType ; typedef Matrix<Scalar,ColsAtCompileTime,1> DiagVectorType ; typedef Matrix<Scalar,ColsAtCompileTimeMinusOne,1> SuperDiagVectorType ; typedef HouseholderSequence<const MatrixType,const internal::remove_all<Diagonal<const MatrixType,0>::ConjugateReturnType>::type> HouseholderUSequenceType ; typedef HouseholderSequence<const internal::remove_all<MatrixType::ConjugateReturnType>::type,Diagonal<const MatrixType,1>,OnTheRight> HouseholderVSequenceType ;)",
    "insertText": "UpperBidiagonalization() : m_householder(), m_bidiagonal(), m_isInitialized(false)"
  },
  {
    "label": "UpperBidiagonalization()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UpperBidiagonalization(const MatrixType& matrix) : m_householder(matrix.rows(), matrix.cols()), m_bidiagonal(matrix.cols(), matrix.cols()), m_isInitialized(false)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} UpperBidiagonalization&)",
    "insertText": "compute(const MatrixType& matrix)"
  },
  {
    "label": "computeUnblocked()",
    "kind": "Method",
    "detail": "Function (UpperBidiagonalization&)",
    "insertText": "computeUnblocked(const MatrixType& matrix)"
  },
  {
    "label": "householder()",
    "kind": "Method",
    "detail": "Function (const MatrixType&)",
    "insertText": "householder()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"UpperBidiagonalization is not initialized.\")"
  },
  {
    "label": "householderV()",
    "kind": "Method",
    "detail": "Function (} const HouseholderVSequenceType)",
    "insertText": "householderV()"
  },
  {
    "label": "upperbidiagonalization_inplace_unblocked()",
    "kind": "Method",
    "detail": "Function (} protected : MatrixType m_householder ; BidiagonalType m_bidiagonal ; bool m_isInitialized ; } ; template<MatrixType> void)",
    "insertText": "upperbidiagonalization_inplace_unblocked(MatrixType& mat, typename MatrixType::RealScalar *diagonal, typename MatrixType::RealScalar *upper_diagonal, typename MatrixType::Scalar* tempData = 0)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (typedef MatrixType::Scalar Scalar ; Index rows = mat .)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (Index cols = mat .)",
    "insertText": "cols()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef Matrix<Scalar,Dynamic,1,ColMajor,MatrixType::MaxRowsAtCompileTime,1> TempType ; TempType tempVector ;)",
    "insertText": "if(tempData==0)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (tempVector .)",
    "insertText": "resize(rows)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (tempData = tempVector .)",
    "insertText": "data()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index k = 0; ; ++k)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (Index remainingRows = rows - k ; Index remainingCols = cols - k - 1 ; mat .)",
    "insertText": "col(k).tail(remainingRows) .makeHouseholderInPlace(mat.coeffRef(k,k), diagonal[k])"
  },
  {
    "label": "bottomRightCorner()",
    "kind": "Method",
    "detail": "Function (mat .)",
    "insertText": "bottomRightCorner(remainingRows, remainingCols) .applyHouseholderOnTheLeft(mat.col(k).tail(remainingRows-1), mat.coeff(k,k), tempData)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (mat .)",
    "insertText": "row(k).tail(remainingCols) .makeHouseholderInPlace(mat.coeffRef(k,k+1), upper_diagonal[k])"
  },
  {
    "label": "bottomRightCorner()",
    "kind": "Method",
    "detail": "Function (mat .)",
    "insertText": "bottomRightCorner(remainingRows-1, remainingCols) .applyHouseholderOnTheRight(mat.row(k).tail(remainingCols-1).adjoint(), mat.coeff(k,k+1), tempData)"
  },
  {
    "label": "upperbidiagonalization_blocked_helper()",
    "kind": "Method",
    "detail": "Function (} } template<MatrixType> void)",
    "insertText": "upperbidiagonalization_blocked_helper(MatrixType& A, typename MatrixType::RealScalar *diagonal, typename MatrixType::RealScalar *upper_diagonal, Index bs, Ref<Matrix<typename MatrixType::Scalar, Dynamic, Dynamic, traits<MatrixType>::Flags & RowMajorBit> > X, Ref<Matrix<typename MatrixType::Scalar, Dynamic, Dynamic, traits<MatrixType>::Flags & RowMajorBit> > Y)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef NumTraits<RealScalar>::Literal Literal ; enum { StorageOrder = traits<MatrixType>::Flags& RowMajorBit } ; typedef InnerStride<)",
    "insertText": "int(StorageOrder) == int(ColMajor)"
  },
  {
    "label": "tau_u_prev()",
    "kind": "Method",
    "detail": "Function (Scalar tau_u,)",
    "insertText": "tau_u_prev(0)"
  },
  {
    "label": "X_k1()",
    "kind": "Method",
    "detail": "Function (Index remainingRows = brows - k ; Index remainingCols = bcols - k - 1 ; SubMatType)",
    "insertText": "X_k1(X.block(k,0, remainingRows,k))"
  },
  {
    "label": "V_k1()",
    "kind": "Method",
    "detail": "Function (SubMatType)",
    "insertText": "V_k1(A.block(k,0, remainingRows,k))"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (SubColumnType v_k = A .)",
    "insertText": "col(k).tail(remainingRows)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (v_k - = V_k1* Y .)",
    "insertText": "row(k).head(k).adjoint()"
  },
  {
    "label": "makeHouseholderInPlace()",
    "kind": "Method",
    "detail": "Function (v_k .)",
    "insertText": "makeHouseholderInPlace(tau_v, diagonal[k])"
  },
  {
    "label": "Y_k()",
    "kind": "Method",
    "detail": "Function (SubMatType)",
    "insertText": "Y_k(Y.block(k+1,0, remainingCols, k+1))"
  },
  {
    "label": "U_k1()",
    "kind": "Method",
    "detail": "Function (SubMatType)",
    "insertText": "U_k1(A.block(0,k+1, k,remainingCols))"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "A(k,k) = Scalar(1)"
  },
  {
    "label": "y_k()",
    "kind": "Method",
    "detail": "Function ({ SubColumnType)",
    "insertText": "y_k(Y.col(k).tail(remainingCols))"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (SubColumnType)",
    "insertText": "tmp(Y.col(k).head(k))"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (y_k .)",
    "insertText": "noalias() = A.block(k,k+1, remainingRows,remainingCols).adjoint()"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (tmp .)",
    "insertText": "noalias() = V_k1.adjoint()"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (y_k .)",
    "insertText": "noalias() -= Y_k.leftCols(k)"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (tmp .)",
    "insertText": "noalias() = X_k1.adjoint()"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (y_k .)",
    "insertText": "noalias() -= U_k1.adjoint()"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (y_k* =)",
    "insertText": "conj(tau_v)"
  },
  {
    "label": "u_k()",
    "kind": "Method",
    "detail": "Function (} SubRowType)",
    "insertText": "u_k(A.row(k).tail(remainingCols))"
  },
  {
    "label": "conjugate()",
    "kind": "Method",
    "detail": "Function (u_k = u_k .)",
    "insertText": "conjugate()"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function ({ u_k - = Y_k* A .)",
    "insertText": "row(k).head(k+1).adjoint()"
  },
  {
    "label": "makeHouseholderInPlace()",
    "kind": "Method",
    "detail": "Function (} u_k .)",
    "insertText": "makeHouseholderInPlace(tau_u, upper_diagonal[k])"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "A(k,k+1) = Scalar(1)"
  },
  {
    "label": "x_k()",
    "kind": "Method",
    "detail": "Function ({ SubColumnType)",
    "insertText": "x_k(X.col(k).tail(remainingRows-1))"
  },
  {
    "label": "tmp0()",
    "kind": "Method",
    "detail": "Function (SubColumnType)",
    "insertText": "tmp0(X.col(k).head(k) ), tmp1 ( X.col(k).head(k+1))"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (x_k .)",
    "insertText": "noalias() = A.block(k+1,k+1, remainingRows-1,remainingCols) * u_k.transpose()"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (tmp0 .)",
    "insertText": "noalias() = U_k1 * u_k.transpose()"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (x_k .)",
    "insertText": "noalias() -= X_k1.bottomRows(remainingRows-1)"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (tmp1 .)",
    "insertText": "noalias() = Y_k.adjoint() * u_k.transpose()"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (x_k .)",
    "insertText": "noalias() -= A.block(k+1,0, remainingRows-1,k+1)"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (x_k* =)",
    "insertText": "conj(tau_u)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(k>0) A.coeffRef(k-1,k)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (tau_u_prev = tau_u ; } else A .)",
    "insertText": "coeffRef(k-1,k)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (A .)",
    "insertText": "coeffRef(k,k)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bs<bcols) A.coeffRef(bs-1,bs)"
  },
  {
    "label": "A11()",
    "kind": "Method",
    "detail": "Function (SubMatType)",
    "insertText": "A11(A.bottomRightCorner(brows-bs,bcols-bs))"
  },
  {
    "label": "A10()",
    "kind": "Method",
    "detail": "Function (SubMatType)",
    "insertText": "A10(A.block(bs,0, brows-bs,bs))"
  },
  {
    "label": "A01()",
    "kind": "Method",
    "detail": "Function (SubMatType)",
    "insertText": "A01(A.block(0,bs, bs,bcols-bs))"
  },
  {
    "label": "A01()",
    "kind": "Method",
    "detail": "Function (Scalar tmp =)",
    "insertText": "A01(bs-1,0)"
  },
  {
    "label": "A01()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "A01(bs-1,0) = Literal(1)"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (A11 .)",
    "insertText": "noalias() -= A10 * Y.topLeftCorner(bcols,bs).bottomRows(bcols-bs).adjoint()"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (A11 .)",
    "insertText": "noalias() -= X.topLeftCorner(brows,bs).bottomRows(brows-bs)"
  },
  {
    "label": "upperbidiagonalization_inplace_blocked()",
    "kind": "Method",
    "detail": "Function (} } template<MatrixType,BidiagType> void)",
    "insertText": "upperbidiagonalization_inplace_blocked(MatrixType& A, BidiagType& bidiagonal, Index maxBlockSize=32, typename MatrixType::Scalar* = 0)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "size(std::min)(rows, cols)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (enum { StorageOrder = traits<MatrixType>::Flags& RowMajorBit } ; Matrix<Scalar,MatrixType::RowsAtCompileTime,Dynamic,StorageOrder,MatrixType::MaxRowsAtCompileTime>)",
    "insertText": "X(rows,maxBlockSize)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,MatrixType::ColsAtCompileTime,Dynamic,StorageOrder,MatrixType::MaxColsAtCompileTime>)",
    "insertText": "Y(cols,maxBlockSize)"
  },
  {
    "label": "blockSize()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "blockSize(std::min)(maxBlockSize,size)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index k = 0 ;)",
    "insertText": "for(k = 0; k < size; k += blockSize)"
  },
  {
    "label": "bs()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "bs(std::min)(size-k,blockSize)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (Index brows = rows - k ; Index bcols = cols - k ; BlockType B = A .)",
    "insertText": "block(k,k,brows,bcols)"
  },
  {
    "label": "upperbidiagonalization_inplace_unblocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "upperbidiagonalization_inplace_unblocked(B, &(bidiagonal.template diagonal<0>().coeffRef(k)), &(bidiagonal.template diagonal<1>().coeffRef(k)), X.data())"
  },
  {
    "label": "BlockType()",
    "kind": "Method",
    "detail": "Function (break ; } else { upperbidiagonalization_blocked_helper<)",
    "insertText": "BlockType(B, &(bidiagonal.template diagonal<0>().coeffRef(k)), &(bidiagonal.template diagonal<1>().coeffRef(k)), bs, X.topLeftCorner(brows,bs), Y.topLeftCorner(bcols,bs))"
  },
  {
    "label": "computeUnblocked()",
    "kind": "Method",
    "detail": "Function (} } } template<_MatrixType> UpperBidiagonalization<_MatrixType>& UpperBidiagonalization<_MatrixType)",
    "insertText": "computeUnblocked(const _MatrixType& matrix)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(cols)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rows >= cols && \"UpperBidiagonalization is only for Arices satisfying rows>=cols.\")"
  },
  {
    "label": "temp()",
    "kind": "Method",
    "detail": "Function (m_householder = matrix ; ColVectorType)",
    "insertText": "temp(rows)"
  },
  {
    "label": "upperbidiagonalization_inplace_unblocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "upperbidiagonalization_inplace_unblocked(m_householder, &(m_bidiagonal.template diagonal<0>().coeffRef(0)), &(m_bidiagonal.template diagonal<1>().coeffRef(0)), temp.data())"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; return* this ; } template<_MatrixType> UpperBidiagonalization<_MatrixType>& UpperBidiagonalization<_MatrixType)",
    "insertText": "compute(const _MatrixType& matrix)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(rows)"
  },
  {
    "label": "upperbidiagonalization_inplace_blocked()",
    "kind": "Method",
    "detail": "Function (m_householder = matrix ;)",
    "insertText": "upperbidiagonalization_inplace_blocked(m_householder, m_bidiagonal)"
  },
  {
    "label": "bidiagonalization()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; return* this ; } # if 0 template<Derived> const UpperBidiagonalization<MatrixBase<Derived>::PlainObject> MatrixBase<Derived)",
    "insertText": "bidiagonalization()"
  }
]