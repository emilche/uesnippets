[
  {
    "label": "any",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "any"
  },
  {
    "label": "IsInPlaceType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsInPlaceType"
  },
  {
    "label": "ObjInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjInterface"
  },
  {
    "label": "Obj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Obj"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_TYPES_ANY_H_ # define ABSL_TYPES_ANY_H_ # include \" absl / base / config . h \" # include \" absl / utility / utility . h \" # ifdef ABSL_USES_STD_ANY # include<any> namespace absl { ABSL_NAMESPACE_BEGIN using std::any ; using std::any_cast ; using std::bad_any_cast ; using std::make_any ; ABSL_NAMESPACE_END } # else # include<algorithm> # include<cstddef> # include<initializer_list> # include<memory> # include<stdexcept> # include<type_traits> # include<typeinfo> # include<utility> # include \" absl / base / internal / fast_type_id . h \" # include \" absl / meta / type_traits . h \" # include \" absl / types / bad_any_cast . h \" namespace absl { ABSL_NAMESPACE_BEGIN class any ; void)",
    "insertText": "swap(any& x, any& y)"
  },
  {
    "label": "make_any()",
    "kind": "Method",
    "detail": "Function (template<T,. . . Args> any)",
    "insertText": "make_any(Args&&... args)"
  },
  {
    "label": "make_any()",
    "kind": "Method",
    "detail": "Function (template<T,U,. . . Args> any)",
    "insertText": "make_any(std::initializer_list<U> il, Args&&... args)"
  },
  {
    "label": "any_cast()",
    "kind": "Method",
    "detail": "Function (template<ValueType> ValueType)",
    "insertText": "any_cast(const any& operand)"
  },
  {
    "label": "any_cast()",
    "kind": "Method",
    "detail": "Function (template<ValueType> ValueType)",
    "insertText": "any_cast(any& operand)"
  },
  {
    "label": "any_cast()",
    "kind": "Method",
    "detail": "Function (template<ValueType> ValueType)",
    "insertText": "any_cast(any&& operand)"
  },
  {
    "label": "any_cast()",
    "kind": "Method",
    "detail": "Function (template<ValueType> const ValueType*)",
    "insertText": "any_cast(const any* operand)"
  },
  {
    "label": "any_cast()",
    "kind": "Method",
    "detail": "Function (template<ValueType> ValueType*)",
    "insertText": "any_cast(any* operand)"
  },
  {
    "label": "any()",
    "kind": "Method",
    "detail": "Function (class any { private : template<T> struct IsInPlaceType ; public :)",
    "insertText": "any()"
  },
  {
    "label": "any()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "any(const any& other) : obj_(other.has_value() ? other.obj_->Clone() : std::unique_ptr<ObjInterface>())"
  },
  {
    "label": "any()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "any(any&& other)"
  },
  {
    "label": "any()",
    "kind": "Method",
    "detail": "Function (template<T,VT = absl::decay_t<T>,absl::enable_if_t<! absl::disjunction<std::is_same<any,VT>,IsInPlaceType<VT>,absl::negation<std::is_copy_constructible<VT>>>::value>* = nullptr>)",
    "insertText": "any(T&& value) : obj_(new Obj<VT>(in_place, std::forward<T>(value)))"
  },
  {
    "label": "any()",
    "kind": "Method",
    "detail": "Function (} template<T,. . . Args,VT = absl::decay_t<T>,absl::enable_if_t<absl::conjunction<std::is_copy_constructible<VT>,std::is_constructible<VT,Args . . .>>::value>* = nullptr>)",
    "insertText": "any(in_place_type_t<T> , Args&&... args) : obj_(new Obj<VT>(in_place, std::forward<Args>(args)...))"
  },
  {
    "label": "any()",
    "kind": "Method",
    "detail": "Function (} template<T,U,. . . Args,VT = absl::decay_t<T>,absl::enable_if_t<absl::conjunction<std::is_copy_constructible<VT>,std::is_constructible<VT,std::initializer_list<U>&,Args . . .>>::value>* = nullptr>)",
    "insertText": "any(in_place_type_t<T> , std::initializer_list<U> ilist, Args&&... args) : obj_(new Obj<VT>(in_place, ilist, std::forward<Args>(args)...))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} any&)",
    "insertText": "operator(const any& rhs)"
  },
  {
    "label": "any()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "any(rhs).swap(*this)"
  },
  {
    "label": "any()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "any(std::move(rhs)).swap(*this)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (any)",
    "insertText": "tmp(in_place_type_t<VT>(), std::forward<T>(rhs))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (tmp .)",
    "insertText": "swap(*this)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "VT()",
    "kind": "Method",
    "detail": "Function (Obj<VT>* const object_ptr = new Obj<)",
    "insertText": "VT(in_place, std::forward<Args>(args)...)"
  },
  {
    "label": "ObjInterface()",
    "kind": "Method",
    "detail": "Function (obj_ = std::unique_ptr<)",
    "insertText": "ObjInterface(object_ptr)"
  },
  {
    "label": "VT()",
    "kind": "Method",
    "detail": "Function (Obj<VT>* const object_ptr = new Obj<)",
    "insertText": "VT(in_place, ilist, std::forward<Args>(args)...)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (obj_ = nullptr ; } void)",
    "insertText": "swap(any& other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (obj_ .)",
    "insertText": "swap(other.obj_)"
  },
  {
    "label": "has_value()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_value()"
  },
  {
    "label": "typeid()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "typeid(void)"
  },
  {
    "label": "ObjInterface()",
    "kind": "Method",
    "detail": "Function (} # endif private : class ObjInterface { public : ~)",
    "insertText": "ObjInterface()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ObjInterface>)",
    "insertText": "Clone()"
  },
  {
    "label": "ObjTypeId()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "ObjTypeId()"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (# ifdef ABSL_INTERNAL_HAS_RTTI const std::type_info&)",
    "insertText": "Type()"
  },
  {
    "label": "Obj()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<T> class Obj : public ObjInterface { public : template<. . . Args>)",
    "insertText": "Obj(in_place_t , Args&&... args) : value(std::forward<Args>(args)...)"
  },
  {
    "label": "CloneObj()",
    "kind": "Method",
    "detail": "Function (} # endif T value ; } ; std::unique_ptr<ObjInterface>)",
    "insertText": "CloneObj()"
  },
  {
    "label": "IdForType()",
    "kind": "Method",
    "detail": "Function (} template<T> const void*)",
    "insertText": "IdForType()"
  },
  {
    "label": "NormalizedType()",
    "kind": "Method",
    "detail": "Function (using NormalizedType = std::remove_cv<std::remove_reference<T>::type>::type ; return base_internal::FastTypeId<)",
    "insertText": "NormalizedType()"
  },
  {
    "label": "GetObjTypeId()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "GetObjTypeId()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "swap(y)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using U = std::remove_cv<std::remove_reference<ValueType>::type>::type ;)",
    "insertText": "static_assert(std::is_constructible<ValueType, const U&>::value, \"Invalid ValueType\")"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (auto* const)",
    "insertText": "result(any_cast<U>)(&operand)"
  },
  {
    "label": "ThrowBadAnyCast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThrowBadAnyCast()"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (} return static_cast<)",
    "insertText": "ValueType(*result)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using U = std::remove_cv<std::remove_reference<ValueType>::type>::type ;)",
    "insertText": "static_assert(std::is_constructible<ValueType, U&>::value, \"Invalid ValueType\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using U = std::remove_cv<std::remove_reference<ValueType>::type>::type ;)",
    "insertText": "static_assert(std::is_constructible<ValueType, U>::value, \"Invalid ValueType\")"
  },
  {
    "label": "GetObjTypeId()",
    "kind": "Method",
    "detail": "Function (using U = std::remove_cv<std::remove_reference<T>::type>::type ; return operand&& operand ->)",
    "insertText": "GetObjTypeId() == any::IdForType<U>() ? std::addressof( static_cast<const any::Obj<U>*>(operand->obj_.get())->value)"
  },
  {
    "label": "GetObjTypeId()",
    "kind": "Method",
    "detail": "Function (using U = std::remove_cv<std::remove_reference<T>::type>::type ; return operand&& operand ->)",
    "insertText": "GetObjTypeId() == any::IdForType<U>() ? std::addressof( static_cast<any::Obj<U>*>(operand->obj_.get())->value)"
  }
]