[
  {
    "label": "FBaseTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaseTimingTrack"
  },
  {
    "label": "TRACEINSIGHTS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTS_API"
  },
  {
    "label": "FAcceptNoneTimingEventFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAcceptNoneTimingEventFilter"
  },
  {
    "label": "FAcceptAllTimingEventFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAcceptAllTimingEventFilter"
  },
  {
    "label": "FAggregatedTimingEventFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAggregatedTimingEventFilter"
  },
  {
    "label": "FAllAggregatedTimingEventFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAllAggregatedTimingEventFilter"
  },
  {
    "label": "FAnyAggregatedTimingEventFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnyAggregatedTimingEventFilter"
  },
  {
    "label": "FTimingEventFilterByMinDuration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingEventFilterByMinDuration"
  },
  {
    "label": "FTimingEventFilterByMaxDuration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingEventFilterByMaxDuration"
  },
  {
    "label": "FTimingEventFilterByFrameIndex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingEventFilterByFrameIndex"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Templates / SharedPointer . h \" # include \" InsightsCore / Common / SimpleRtti . h \" # include \" Insights / ViewModels / ITimingEvent . h \" # include \" Insights / ViewModels / TimingEventSearch . h \" class FBaseTimingTrack ; class FTimingEvent : public ITimingEvent {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTimingEvent, ITimingEvent) public: FTimingEvent(const TSharedRef<const FBaseTimingTrack> InTrack, double InStartTime, double InEndTime, uint32 InDepth, uint64 InType = uint64(-1)) : Track(InTrack) , StartTime(InStartTime) , EndTime(InEndTime) , ExclusiveTime(0.0) , Depth(InDepth) , Type(InType)"
  },
  {
    "label": "FTimingEvent()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTimingEvent()"
  },
  {
    "label": "FTimingEvent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimingEvent(const FTimingEvent&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTimingEvent&)",
    "insertText": "operator(const FTimingEvent&)"
  },
  {
    "label": "FTimingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTimingEvent(FTimingEvent&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTimingEvent&)",
    "insertText": "operator(FTimingEvent&&)"
  },
  {
    "label": "GetTrack()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<const FBaseTimingTrack>)",
    "insertText": "GetTrack()"
  },
  {
    "label": "GetSearchHandle()",
    "kind": "Method",
    "detail": "Function (} FTimingEventSearchHandle&)",
    "insertText": "GetSearchHandle()"
  },
  {
    "label": "IsExclusiveTimeComputed()",
    "kind": "Method",
    "detail": "Function (ExclusiveTime = InExclusiveTime ; } bool)",
    "insertText": "IsExclusiveTimeComputed()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (bIsExclusiveTimeComputed = InIsExclusiveTime ; } uint64)",
    "insertText": "GetType()"
  },
  {
    "label": "ComputeEventColor()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ComputeEventColor(const TCHAR* Str)"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetType(uint64 InType)"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (Type = InType ; } private : TSharedRef<const FBaseTimingTrack> Track ; FTimingEventSearchHandle SearchHandle ; double StartTime ; double EndTime ; double ExclusiveTime ; bool bIsExclusiveTimeComputed = false ; uint32 Depth ; uint64 Type ; } ; class FAcceptNoneTimingEventFilter : public ITimingEventFilter {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FAcceptNoneTimingEventFilter, ITimingEventFilter) public: FAcceptNoneTimingEventFilter()"
  },
  {
    "label": "FAcceptNoneTimingEventFilter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAcceptNoneTimingEventFilter()"
  },
  {
    "label": "FilterTrack()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FilterTrack(const FBaseTimingTrack& InTrack)"
  },
  {
    "label": "FAcceptAllTimingEventFilter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAcceptAllTimingEventFilter()"
  },
  {
    "label": "FAggregatedTimingEventFilter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAggregatedTimingEventFilter()"
  },
  {
    "label": "GetChangeNumber()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetChangeNumber()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Children .)",
    "insertText": "Add(InFilter)"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (ChangeNumber + + ; } protected : uint32 ChangeNumber ; TArray<TSharedPtr<ITimingEventFilter>> Children ; } ; class FAllAggregatedTimingEventFilter : public FAggregatedTimingEventFilter {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FAllAggregatedTimingEventFilter, FAggregatedTimingEventFilter) public: FAllAggregatedTimingEventFilter()"
  },
  {
    "label": "FAllAggregatedTimingEventFilter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAllAggregatedTimingEventFilter()"
  },
  {
    "label": "FAnyAggregatedTimingEventFilter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAnyAggregatedTimingEventFilter()"
  },
  {
    "label": "FTimingEventFilter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTimingEventFilter()"
  },
  {
    "label": "FTimingEventFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimingEventFilter(const FTimingEventFilter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTimingEventFilter&)",
    "insertText": "operator(const FTimingEventFilter&)"
  },
  {
    "label": "FTimingEventFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTimingEventFilter(FTimingEventFilter&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTimingEventFilter&)",
    "insertText": "operator(FTimingEventFilter&&)"
  },
  {
    "label": "FilterEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FilterEvent(const ITimingEvent& InEvent)"
  },
  {
    "label": "SetTrackTypeName()",
    "kind": "Method",
    "detail": "Function (bFilterByTrackTypeName = bInFilterByTrackTypeName ; ChangeNumber + + ; } } void)",
    "insertText": "SetTrackTypeName(const FName InTrackTypeName)"
  },
  {
    "label": "IsFilteringByTrackInstance()",
    "kind": "Method",
    "detail": "Function (TrackTypeName = InTrackTypeName ; ChangeNumber + + ; } } bool)",
    "insertText": "IsFilteringByTrackInstance()"
  },
  {
    "label": "SetTrackInstance()",
    "kind": "Method",
    "detail": "Function (bFilterByTrackInstance = bInFilterByTrackInstance ; ChangeNumber + + ; } } void)",
    "insertText": "SetTrackInstance(TSharedPtr<FBaseTimingTrack> InTrackInstance)"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (TrackInstance = InTrackInstance ; ChangeNumber + + ; } } protected : bool bFilterByTrackTypeName ; FName TrackTypeName ; bool bFilterByTrackInstance ; TSharedPtr<FBaseTimingTrack> TrackInstance ; uint32 ChangeNumber ; } ; class FTimingEventFilterByMinDuration : public FTimingEventFilter {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTimingEventFilterByMinDuration, FTimingEventFilter) public: FTimingEventFilterByMinDuration(double InMinDuration) : MinDuration(InMinDuration)"
  },
  {
    "label": "FTimingEventFilterByMinDuration()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTimingEventFilterByMinDuration()"
  },
  {
    "label": "FilterEvent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FilterEvent(double InEventStartTime, double InEventEndTime, uint32 InEventDepth, const TCHAR* InEventName, uint64 InEventType = 0, uint32 InEventColor = 0)"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (MinDuration = InMinDuration ; ChangeNumber + + ; } } private : double MinDuration ; } ; class FTimingEventFilterByMaxDuration : public FTimingEventFilter {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTimingEventFilterByMaxDuration, FTimingEventFilter) public: FTimingEventFilterByMaxDuration(double InMaxDuration) : MaxDuration(InMaxDuration)"
  },
  {
    "label": "FTimingEventFilterByMaxDuration()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTimingEventFilterByMaxDuration()"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (MaxDuration = InMaxDuration ; ChangeNumber + + ; } } private : double MaxDuration ; } ; class FTimingEventFilterByEventType : public FTimingEventFilter {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTimingEventFilterByEventType, FTimingEventFilter) public: FTimingEventFilterByEventType(uint64 InEventType) : EventType(InEventType)"
  },
  {
    "label": "FTimingEventFilterByEventType()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTimingEventFilterByEventType()"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (EventType = InEventType ; ChangeNumber + + ; } } private : uint64 EventType ; } ; class FTimingEventFilterByFrameIndex : public FTimingEventFilter {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTimingEventFilterByFrameIndex, FTimingEventFilter) public: FTimingEventFilterByFrameIndex(uint64 InFrameIndex) : FrameIndex(InFrameIndex)"
  },
  {
    "label": "FTimingEventFilterByFrameIndex()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTimingEventFilterByFrameIndex()"
  },
  {
    "label": "FilterEvent()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "FilterEvent(double InEventStartTime, double InEventEndTime, uint32 InEventDepth, const TCHAR* InEventName, uint64 InFrameIndex = 0, uint32 InEventColor = 0)"
  }
]