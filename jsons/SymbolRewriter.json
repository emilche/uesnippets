[
  {
    "label": "MemoryBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryBuffer"
  },
  {
    "label": "KeyValueNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyValueNode"
  },
  {
    "label": "MappingNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MappingNode"
  },
  {
    "label": "ScalarNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScalarNode"
  },
  {
    "label": "Stream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Stream"
  },
  {
    "label": "RewriteDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RewriteDescriptor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RewriteMapParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RewriteMapParser"
  },
  {
    "label": "ilist_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_traits"
  },
  {
    "label": "RewriteDescriptor()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TRANSFORMS_UTILS_SYMBOL_REWRITER_H # define LLVM_TRANSFORMS_UTILS_SYMBOL_REWRITER_H # include \" llvm / ADT / ilist . h \" # include \" llvm / ADT / ilist_node . h \" # include \" llvm / IR / Module . h \" namespace llvm { class MemoryBuffer ; namespace yaml { class KeyValueNode ; class MappingNode ; class ScalarNode ; class Stream ; } namespace SymbolRewriter { class RewriteDescriptor : public ilist_node<RewriteDescriptor> {)",
    "insertText": "RewriteDescriptor(const RewriteDescriptor &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const RewriteDescriptor&)",
    "insertText": "operator(const RewriteDescriptor &)"
  },
  {
    "label": "RewriteDescriptor()",
    "kind": "Method",
    "detail": "Function (public : enum class Type { Invalid,Function,GlobalVariable,NamedAlias,} ; ~)",
    "insertText": "RewriteDescriptor()"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (} Type)",
    "insertText": "getType()"
  },
  {
    "label": "RewriteDescriptor()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "RewriteDescriptor(Type T) : Kind(T)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (} private : const Type Kind ; } ; typedef iplist<RewriteDescriptor> RewriteDescriptorList ; class RewriteMapParser { public : bool)",
    "insertText": "parse(const std::string &MapFile, RewriteDescriptorList *Descriptors)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "parse(std::unique_ptr<MemoryBuffer> &MapFile, RewriteDescriptorList *DL)"
  },
  {
    "label": "parseEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parseEntry(yaml::Stream &Stream, yaml::KeyValueNode &Entry, RewriteDescriptorList *DL)"
  },
  {
    "label": "parseRewriteFunctionDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parseRewriteFunctionDescriptor(yaml::Stream &Stream, yaml::ScalarNode *Key, yaml::MappingNode *Value, RewriteDescriptorList *DL)"
  },
  {
    "label": "parseRewriteGlobalVariableDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parseRewriteGlobalVariableDescriptor(yaml::Stream &Stream, yaml::ScalarNode *Key, yaml::MappingNode *Value, RewriteDescriptorList *DL)"
  },
  {
    "label": "parseRewriteGlobalAliasDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parseRewriteGlobalAliasDescriptor(yaml::Stream &YS, yaml::ScalarNode *K, yaml::MappingNode *V, RewriteDescriptorList *DL)"
  },
  {
    "label": "createSentinel()",
    "kind": "Method",
    "detail": "Function (} ; } template<> struct ilist_traits<SymbolRewriter::RewriteDescriptor> : public ilist_default_traits<SymbolRewriter::RewriteDescriptor> { ilist_half_node<SymbolRewriter::RewriteDescriptor> Sentinel ; public : SymbolRewriter::RewriteDescriptor*)",
    "insertText": "createSentinel()"
  },
  {
    "label": "destroySentinel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "destroySentinel(SymbolRewriter::RewriteDescriptor *)"
  },
  {
    "label": "provideInitialHead()",
    "kind": "Method",
    "detail": "Function (} SymbolRewriter::RewriteDescriptor*)",
    "insertText": "provideInitialHead()"
  },
  {
    "label": "ensureHead()",
    "kind": "Method",
    "detail": "Function (} SymbolRewriter::RewriteDescriptor*)",
    "insertText": "ensureHead(SymbolRewriter::RewriteDescriptor *&)"
  },
  {
    "label": "noteHead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "noteHead(SymbolRewriter::RewriteDescriptor *, SymbolRewriter::RewriteDescriptor *)"
  },
  {
    "label": "createRewriteSymbolsPass()",
    "kind": "Method",
    "detail": "Function (} } ; ModulePass*)",
    "insertText": "createRewriteSymbolsPass()"
  },
  {
    "label": "createRewriteSymbolsPass()",
    "kind": "Method",
    "detail": "Function (ModulePass*)",
    "insertText": "createRewriteSymbolsPass(SymbolRewriter::RewriteDescriptorList &)"
  }
]