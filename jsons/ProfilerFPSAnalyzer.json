[
  {
    "label": "FProfilerFPSChartEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerFPSChartEntry"
  },
  {
    "label": "FPSChartBins",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FPSChartBins"
  },
  {
    "label": "FFPSAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFPSAnalyzer"
  },
  {
    "label": "FFPSAnalyzer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if STATS # include \" ProfilerSample . h \" struct FProfilerFPSChartEntry { int32 Count ; double CummulativeTime ; } ; enum FPSChartBins { FPSBin_0_5,FPSBin_5_10,FPSBin_10_15,FPSBin_15_20,FPSBin_20_25,FPSBin_25_30,FPSBin_30_35,FPSBin_35_40,FPSBin_40_45,FPSBin_45_50,FPSBin_50_55,FPSBin_55_60,FPSBin_60_65,FPSBin_65_70,FPSBin_70_75,FPSBin_75_80,FPSBin_80_85,FPSBin_85_90,FPSBin_90_INF,FPSBin_LastBucketStat,} ; class FFPSAnalyzer : public IHistogramDataSource { public :)",
    "insertText": "FFPSAnalyzer(int32 InInterval, int32 InMinVal, int32 InMaxVal)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Interval = InInterval ; MaxVal = InMaxVal ; MinVal = InMinVal ;)",
    "insertText": "Reset()"
  },
  {
    "label": "FFPSAnalyzer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFPSAnalyzer()"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCount(float MinVal, float MaxVal)"
  },
  {
    "label": "GetTotalCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTotalCount()"
  },
  {
    "label": "AddSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSample(float FPSSample)"
  },
  {
    "label": "GetMemoryUsage()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetMemoryUsage()"
  }
]