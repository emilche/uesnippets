[
  {
    "label": "CArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CArchive"
  },
  {
    "label": "CSourcePackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSourcePackage"
  },
  {
    "label": "CSourceProject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSourceProject"
  },
  {
    "label": "ISourceSnippet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISourceSnippet"
  },
  {
    "label": "CSourceModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSourceModule"
  },
  {
    "label": "SSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SSettings"
  },
  {
    "label": "SVersionedDigest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SVersionedDigest"
  },
  {
    "label": "EOrigin",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOrigin"
  },
  {
    "label": "SPackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SPackage"
  },
  {
    "label": "ISourceSnippet()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Containers / SharedPointerArray . h \" # include \" uLang / Common / Misc / Optional . h \" # include \" uLang / Common / Text / UTF8String . h \" # include \" uLang / CompilerPasses / CompilerTypes . h \" namespace uLang { class CArchive ; class CSourcePackage ; class CSourceProject ; class ISourceSnippet : public CSharedMix { public : ~)",
    "insertText": "ISourceSnippet()"
  },
  {
    "label": "GetPath()",
    "kind": "Method",
    "detail": "Function (} CUTF8String)",
    "insertText": "GetPath()"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPath(const CUTF8String& Path)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (TOptional<CUTF8String>)",
    "insertText": "GetText()"
  },
  {
    "label": "GetVst()",
    "kind": "Method",
    "detail": "Function (TOptional<TSRef<Verse::Vst::Snippet>>)",
    "insertText": "GetVst()"
  },
  {
    "label": "SetVst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVst(TSRef<Verse::Vst::Snippet> Snippet)"
  },
  {
    "label": "CSourceModule()",
    "kind": "Method",
    "detail": "Function (} ; class CSourceModule : public CSharedMix { public : TSRefArray<ISourceSnippet> _SourceSnippets ; TSRefArray<CSourceModule> _Submodules ;)",
    "insertText": "CSourceModule(const CUTF8StringView& Name) : _Name(Name)"
  },
  {
    "label": "CSourceModule()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CSourceModule()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const CUTF8String&)",
    "insertText": "GetName()"
  },
  {
    "label": "GetNameFromFile()",
    "kind": "Method",
    "detail": "Function (} CUTF8StringView)",
    "insertText": "GetNameFromFile()"
  },
  {
    "label": "GetNameFromFile()",
    "kind": "Method",
    "detail": "Function (CUTF8StringView)",
    "insertText": "GetNameFromFile(const CUTF8StringView& ModuleFilePath)"
  },
  {
    "label": "FindSubmodule()",
    "kind": "Method",
    "detail": "Function (TOptional<TSRef<CSourceModule>>)",
    "insertText": "FindSubmodule(const CUTF8StringView& ModuleName)"
  },
  {
    "label": "AddSnippet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSnippet(const uLang::TSRef<ISourceSnippet>& Snippet)"
  },
  {
    "label": "RemoveSnippet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSnippet(const uLang::TSRef<ISourceSnippet>& Snippet, bool bRecursive)"
  },
  {
    "label": "VisitAll()",
    "kind": "Method",
    "detail": "Function (template<FunctionType> bool)",
    "insertText": "VisitAll(FunctionType&& Lambda)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ULANG_FORCEINLINE bool)",
    "insertText": "operator(const CUTF8StringView& Name)"
  },
  {
    "label": "CSourcePackage()",
    "kind": "Method",
    "detail": "Function (} } ; struct SVersionedDigest { TSRef<ISourceSnippet> _Snippet ; uint32_t _EffectiveVerseVersion ; } ; enum EOrigin : uint8_t { Unknown,Memory,FileSystem } ; TSRef<CSourceModule> _RootModule ; TOptional<SVersionedDigest> _Digest ; TOptional<SVersionedDigest> _PublicDigest ;)",
    "insertText": "CSourcePackage(const CUTF8StringView& Name, const TSRef<CSourceModule>& RootModule) : _RootModule(RootModule), _Name(Name)"
  },
  {
    "label": "CSourcePackage()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CSourcePackage()"
  },
  {
    "label": "GetFilePath()",
    "kind": "Method",
    "detail": "Function (} const CUTF8String&)",
    "insertText": "GetFilePath()"
  },
  {
    "label": "GetNumSnippets()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "GetNumSnippets()"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetName(const CUTF8StringView& NewName)"
  },
  {
    "label": "SetVersePath()",
    "kind": "Method",
    "detail": "Function (_Name = NewName ; } void)",
    "insertText": "SetVersePath(const CUTF8StringView& VersePath)"
  },
  {
    "label": "SetVerseScope()",
    "kind": "Method",
    "detail": "Function (_Settings . _VersePath = VersePath ; } void)",
    "insertText": "SetVerseScope(const EVerseScope VerseScope)"
  },
  {
    "label": "SetVerseVersion()",
    "kind": "Method",
    "detail": "Function (_Settings . _VerseScope = VerseScope ; } void)",
    "insertText": "SetVerseVersion(const TOptional<uint32_t> VerseVersion)"
  },
  {
    "label": "SetRole()",
    "kind": "Method",
    "detail": "Function (_Settings . _VerseVersion = VerseVersion ; } void)",
    "insertText": "SetRole(const EPackageRole Role)"
  },
  {
    "label": "SetTreatDefinitionsAsImplicit()",
    "kind": "Method",
    "detail": "Function (_Settings . _Role = Role ; } void)",
    "insertText": "SetTreatDefinitionsAsImplicit(bool bTreatAsImplicit)"
  },
  {
    "label": "SetDependencyPackages()",
    "kind": "Method",
    "detail": "Function (_Settings . _bTreatModulesAsImplicit = bTreatAsImplicit ; } void)",
    "insertText": "SetDependencyPackages(TArray<CUTF8String>&& PackageNames)"
  },
  {
    "label": "AddDependencyPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDependencyPackage(const CUTF8StringView& PackageName)"
  },
  {
    "label": "TruncateVniDestDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TruncateVniDestDir()"
  },
  {
    "label": "RemoveSnippet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSnippet(const uLang::TSRef<ISourceSnippet>& Snippet)"
  },
  {
    "label": "CSourceProject()",
    "kind": "Method",
    "detail": "Function (private : CUTF8String _Name ; protected : SSettings _Settings ; } ; class CSourceProject : public CSharedMix { public : struct SPackage { TSPtr<CSourcePackage> _Package ; bool _bReadonly = false ; } ; TArray<SPackage> _Packages ;)",
    "insertText": "CSourceProject(const CUTF8StringView& Name) : _Name(Name)"
  },
  {
    "label": "CSourceProject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CSourceProject(const CSourceProject& Other)"
  },
  {
    "label": "CSourceProject()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CSourceProject()"
  },
  {
    "label": "FindPackage()",
    "kind": "Method",
    "detail": "Function (const SPackage*)",
    "insertText": "FindPackage(const CUTF8StringView& PackageName, const CUTF8StringView& PackageVersePath)"
  },
  {
    "label": "FindOrAddPackage()",
    "kind": "Method",
    "detail": "Function (const SPackage&)",
    "insertText": "FindOrAddPackage(const CUTF8StringView& PackageName, const CUTF8StringView& PackageVersePath)"
  },
  {
    "label": "AddSnippet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSnippet(const uLang::TSRef<ISourceSnippet>& Snippet, const CUTF8StringView& PackageName, const CUTF8StringView& PackageVersePath)"
  },
  {
    "label": "TruncateVniDestDirs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TruncateVniDestDirs()"
  }
]