[
  {
    "label": "ArrayRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayRef"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "MDTuple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDTuple"
  },
  {
    "label": "MDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDNode"
  },
  {
    "label": "GlobalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalVariable"
  },
  {
    "label": "DIGlobalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIGlobalVariable"
  },
  {
    "label": "DebugInfoFinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DebugInfoFinder"
  },
  {
    "label": "GetElementPtrInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GetElementPtrInst"
  },
  {
    "label": "ShaderModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderModel"
  },
  {
    "label": "OP",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OP"
  },
  {
    "label": "HLOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HLOptions"
  },
  {
    "label": "HLModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HLModule"
  },
  {
    "label": "BuilderTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BuilderTy"
  },
  {
    "label": "HLExtraPropertyHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HLExtraPropertyHelper"
  },
  {
    "label": "HLOptions()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / DXIL / DxilConstants . h \" # include \" dxc / DXIL / DxilFunctionProps . h \" # include \" dxc / DXIL / DxilMetadataHelper . h \" # include \" dxc / DXIL / DxilResourceProperties . h \" # include \" dxc / DXIL / DxilSampler . h \" # include \" dxc / DXIL / DxilShaderModel . h \" # include \" dxc / DXIL / DxilSignature . h \" # include \" dxc / DXIL / DxilSubobject . h \" # include \" dxc / HLSL / HLOperations . h \" # include \" dxc / HLSL / HLResource . h \" # include \" dxc / Support / Global . h \" # include<memory> # include<string> # include<unordered_map> # include<unordered_set> # include<vector> namespace llvm { template<T> class ArrayRef ; class LLVMContext ; class Module ; class Function ; class Instruction ; class CallInst ; class MDTuple ; class MDNode ; class GlobalVariable ; class DIGlobalVariable ; class DebugInfoFinder ; class GetElementPtrInst ; } namespace hlsl { class ShaderModel ; class OP ; struct HLOptions {)",
    "insertText": "HLOptions() : bDefaultRowMajor(false), bIEEEStrict(false), bAllResourcesBound(false), bDisableOptimizations(false), bLegacyCBufferLoad(false), PackingStrategy(0), bUseMinPrecision(false), bDX9CompatMode(false), bFXCCompatMode(false), bLegacyResourceReservation(false), bForceZeroStoreLifetimes(false), unused(0)"
  },
  {
    "label": "GetHLOptionsRaw()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetHLOptionsRaw()"
  },
  {
    "label": "SetHLOptionsRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHLOptionsRaw(uint32_t data)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (unsigned bDefaultRowMajor : 1 ; unsigned bIEEEStrict : 1 ; unsigned bAllResourcesBound : 1 ; unsigned bDisableOptimizations : 1 ; unsigned bLegacyCBufferLoad : 1 ; unsigned PackingStrategy : 2 ;)",
    "insertText": "static_assert((unsigned)DXIL::PackingStrategy::Invalid < 4, \"otherwise 2 bits is not enough to store PackingStrategy\")"
  },
  {
    "label": "HLModule()",
    "kind": "Method",
    "detail": "Function (unsigned bUseMinPrecision : 1 ; unsigned bDX9CompatMode : 1 ; unsigned bFXCCompatMode : 1 ; unsigned bLegacyResourceReservation : 1 ; unsigned bForceZeroStoreLifetimes : 1 ; unsigned bResMayAlias : 1 ; unsigned unused : 1 9 ; } ; typedef std::unordered_map<const llvm::Function*,std::unique_ptr<DxilFunctionProps>> DxilFunctionPropsMap ; class HLModule { public :)",
    "insertText": "HLModule(llvm::Module *pModule)"
  },
  {
    "label": "HLModule()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "HLModule()"
  },
  {
    "label": "GetCtx()",
    "kind": "Method",
    "detail": "Function (using Domain = DXIL::TessellatorDomain ; llvm::LLVMContext&)",
    "insertText": "GetCtx()"
  },
  {
    "label": "GetModule()",
    "kind": "Method",
    "detail": "Function (llvm::Module*)",
    "insertText": "GetModule()"
  },
  {
    "label": "GetOP()",
    "kind": "Method",
    "detail": "Function (OP*)",
    "insertText": "GetOP()"
  },
  {
    "label": "SetShaderModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderModel(const ShaderModel *pSM)"
  },
  {
    "label": "GetShaderModel()",
    "kind": "Method",
    "detail": "Function (const ShaderModel*)",
    "insertText": "GetShaderModel()"
  },
  {
    "label": "SetValidatorVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValidatorVersion(unsigned ValMajor, unsigned ValMinor)"
  },
  {
    "label": "GetValidatorVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValidatorVersion(unsigned &ValMajor, unsigned &ValMinor)"
  },
  {
    "label": "SetForceZeroStoreLifetimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceZeroStoreLifetimes(bool ForceZeroStoreLifetimes)"
  },
  {
    "label": "GetForceZeroStoreLifetimes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetForceZeroStoreLifetimes()"
  },
  {
    "label": "SetHLOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHLOptions(HLOptions &opts)"
  },
  {
    "label": "GetHLOptions()",
    "kind": "Method",
    "detail": "Function (const HLOptions&)",
    "insertText": "GetHLOptions()"
  },
  {
    "label": "SetAutoBindingSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoBindingSpace(uint32_t Space)"
  },
  {
    "label": "GetAutoBindingSpace()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetAutoBindingSpace()"
  },
  {
    "label": "GetEntryFunction()",
    "kind": "Method",
    "detail": "Function (llvm::Function*)",
    "insertText": "GetEntryFunction()"
  },
  {
    "label": "SetEntryFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEntryFunction(llvm::Function *pEntryFunc)"
  },
  {
    "label": "GetEntryFunctionName()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "GetEntryFunctionName()"
  },
  {
    "label": "SetEntryFunctionName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEntryFunctionName(const std::string &name)"
  },
  {
    "label": "GetPatchConstantFunction()",
    "kind": "Method",
    "detail": "Function (llvm::Function*)",
    "insertText": "GetPatchConstantFunction()"
  },
  {
    "label": "AddCBuffer()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "AddCBuffer(std::unique_ptr<DxilCBuffer> pCB)"
  },
  {
    "label": "GetCBuffer()",
    "kind": "Method",
    "detail": "Function (DxilCBuffer&)",
    "insertText": "GetCBuffer(unsigned idx)"
  },
  {
    "label": "GetCBuffers()",
    "kind": "Method",
    "detail": "Function (const std::vector<std::unique_ptr<DxilCBuffer>>&)",
    "insertText": "GetCBuffers()"
  },
  {
    "label": "AddSampler()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "AddSampler(std::unique_ptr<DxilSampler> pSampler)"
  },
  {
    "label": "GetSampler()",
    "kind": "Method",
    "detail": "Function (DxilSampler&)",
    "insertText": "GetSampler(unsigned idx)"
  },
  {
    "label": "GetSamplers()",
    "kind": "Method",
    "detail": "Function (const std::vector<std::unique_ptr<DxilSampler>>&)",
    "insertText": "GetSamplers()"
  },
  {
    "label": "AddSRV()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "AddSRV(std::unique_ptr<HLResource> pSRV)"
  },
  {
    "label": "GetSRV()",
    "kind": "Method",
    "detail": "Function (HLResource&)",
    "insertText": "GetSRV(unsigned idx)"
  },
  {
    "label": "GetSRVs()",
    "kind": "Method",
    "detail": "Function (const std::vector<std::unique_ptr<HLResource>>&)",
    "insertText": "GetSRVs()"
  },
  {
    "label": "AddUAV()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "AddUAV(std::unique_ptr<HLResource> pUAV)"
  },
  {
    "label": "GetUAV()",
    "kind": "Method",
    "detail": "Function (HLResource&)",
    "insertText": "GetUAV(unsigned idx)"
  },
  {
    "label": "GetUAVs()",
    "kind": "Method",
    "detail": "Function (const std::vector<std::unique_ptr<HLResource>>&)",
    "insertText": "GetUAVs()"
  },
  {
    "label": "RemoveGlobal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGlobal(llvm::GlobalVariable *GV)"
  },
  {
    "label": "RemoveFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFunction(llvm::Function *F)"
  },
  {
    "label": "tgsm_begin()",
    "kind": "Method",
    "detail": "Function (typedef std::vector<llvm::GlobalVariable*>::iterator tgsm_iterator ; tgsm_iterator)",
    "insertText": "tgsm_begin()"
  },
  {
    "label": "tgsm_end()",
    "kind": "Method",
    "detail": "Function (tgsm_iterator)",
    "insertText": "tgsm_end()"
  },
  {
    "label": "AddGroupSharedVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGroupSharedVariable(llvm::GlobalVariable *GV)"
  },
  {
    "label": "GetSerializedRootSignature()",
    "kind": "Method",
    "detail": "Function (std::vector<uint8_t>&)",
    "insertText": "GetSerializedRootSignature()"
  },
  {
    "label": "SetSerializedRootSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSerializedRootSignature(const uint8_t *pData, unsigned size)"
  },
  {
    "label": "HasDxilFunctionProps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDxilFunctionProps(llvm::Function *F)"
  },
  {
    "label": "GetDxilFunctionProps()",
    "kind": "Method",
    "detail": "Function (DxilFunctionProps&)",
    "insertText": "GetDxilFunctionProps(llvm::Function *F)"
  },
  {
    "label": "AddDxilFunctionProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDxilFunctionProps(llvm::Function *F, std::unique_ptr<DxilFunctionProps> &info)"
  },
  {
    "label": "SetPatchConstantFunctionForHS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPatchConstantFunctionForHS(llvm::Function *hullShaderFunc, llvm::Function *patchConstantFunc)"
  },
  {
    "label": "IsGraphicsShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGraphicsShader(llvm::Function *F)"
  },
  {
    "label": "IsPatchConstantShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPatchConstantShader(llvm::Function *F)"
  },
  {
    "label": "IsComputeShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComputeShader(llvm::Function *F)"
  },
  {
    "label": "IsNodeShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeShader(llvm::Function *F)"
  },
  {
    "label": "IsEntryThatUsesSignatures()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEntryThatUsesSignatures(llvm::Function *F)"
  },
  {
    "label": "IsEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEntry(llvm::Function *F)"
  },
  {
    "label": "GetFunctionAnnotation()",
    "kind": "Method",
    "detail": "Function (DxilFunctionAnnotation*)",
    "insertText": "GetFunctionAnnotation(llvm::Function *F)"
  },
  {
    "label": "AddFunctionAnnotation()",
    "kind": "Method",
    "detail": "Function (DxilFunctionAnnotation*)",
    "insertText": "AddFunctionAnnotation(llvm::Function *F)"
  },
  {
    "label": "SetFloat32DenormMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFloat32DenormMode(const DXIL::Float32DenormMode mode)"
  },
  {
    "label": "GetFloat32DenormMode()",
    "kind": "Method",
    "detail": "Function (DXIL::Float32DenormMode)",
    "insertText": "GetFloat32DenormMode()"
  },
  {
    "label": "GetDefaultLinkage()",
    "kind": "Method",
    "detail": "Function (DXIL::DefaultLinkage)",
    "insertText": "GetDefaultLinkage()"
  },
  {
    "label": "SetDefaultLinkage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultLinkage(const DXIL::DefaultLinkage linkage)"
  },
  {
    "label": "EmitHLMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitHLMetadata()"
  },
  {
    "label": "LoadHLMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadHLMetadata()"
  },
  {
    "label": "ClearHLMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearHLMetadata(llvm::Module &M)"
  },
  {
    "label": "AddResourceWithGlobalVariableAndProps()",
    "kind": "Method",
    "detail": "Function (DxilResourceBase*)",
    "insertText": "AddResourceWithGlobalVariableAndProps(llvm::Constant *GV, DxilResourceProperties &RP)"
  },
  {
    "label": "GetBindingForResourceInCB()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetBindingForResourceInCB(llvm::GetElementPtrInst *CbPtr, llvm::GlobalVariable *CbGV, DXIL::ResourceClass RC)"
  },
  {
    "label": "IsStreamOutputPtrType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreamOutputPtrType(llvm::Type *Ty)"
  },
  {
    "label": "IsStreamOutputType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreamOutputType(llvm::Type *Ty)"
  },
  {
    "label": "GetParameterRowsAndCols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetParameterRowsAndCols(llvm::Type *Ty, unsigned &rows, unsigned &cols, DxilParameterAnnotation &paramAnnotation)"
  },
  {
    "label": "GetHLOperationFunction()",
    "kind": "Method",
    "detail": "Function (llvm::Function*)",
    "insertText": "GetHLOperationFunction(HLOpcodeGroup group, unsigned opcode, llvm::Type *RetType, llvm::ArrayRef<llvm::Value *> paramList, llvm::Module &M)"
  },
  {
    "label": "EmitHLOperationCall()",
    "kind": "Method",
    "detail": "Function (template<class BuilderTy> llvm::CallInst*)",
    "insertText": "EmitHLOperationCall(BuilderTy &Builder, HLOpcodeGroup group, unsigned opcode, llvm::Type *RetType, llvm::ArrayRef<llvm::Value *> paramList, llvm::Module &M)"
  },
  {
    "label": "GetNumericCastOp()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetNumericCastOp(llvm::Type *SrcTy, bool SrcIsUnsigned, llvm::Type *DstTy, bool DstIsUnsigned)"
  },
  {
    "label": "HasPreciseAttributeWithMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPreciseAttributeWithMetadata(llvm::Instruction *I)"
  },
  {
    "label": "MarkPreciseAttributeWithMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPreciseAttributeWithMetadata(llvm::Instruction *I)"
  },
  {
    "label": "ClearPreciseAttributeWithMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPreciseAttributeWithMetadata(llvm::Instruction *I)"
  },
  {
    "label": "MarkPreciseAttributeOnValWithFunctionCall()",
    "kind": "Method",
    "detail": "Function (template<class BuilderTy> void)",
    "insertText": "MarkPreciseAttributeOnValWithFunctionCall(llvm::Value *V, BuilderTy &Builder, llvm::Module &M)"
  },
  {
    "label": "MarkPreciseAttributeOnPtrWithFunctionCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPreciseAttributeOnPtrWithFunctionCall(llvm::Value *Ptr, llvm::Module &M)"
  },
  {
    "label": "HasPreciseAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPreciseAttribute(llvm::Function *F)"
  },
  {
    "label": "GetTypeSystem()",
    "kind": "Method",
    "detail": "Function (DxilTypeSystem&)",
    "insertText": "GetTypeSystem()"
  },
  {
    "label": "EmitLLVMUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitLLVMUsed()"
  },
  {
    "label": "GetLLVMUsed()",
    "kind": "Method",
    "detail": "Function (std::vector<llvm::GlobalVariable*>&)",
    "insertText": "GetLLVMUsed()"
  },
  {
    "label": "ReleaseTypeSystem()",
    "kind": "Method",
    "detail": "Function (DxilTypeSystem*)",
    "insertText": "ReleaseTypeSystem()"
  },
  {
    "label": "ReleaseOP()",
    "kind": "Method",
    "detail": "Function (OP*)",
    "insertText": "ReleaseOP()"
  },
  {
    "label": "ReleaseFunctionPropsMap()",
    "kind": "Method",
    "detail": "Function (DxilFunctionPropsMap&&)",
    "insertText": "ReleaseFunctionPropsMap()"
  },
  {
    "label": "GetOrCreateDebugInfoFinder()",
    "kind": "Method",
    "detail": "Function (llvm::DebugInfoFinder&)",
    "insertText": "GetOrCreateDebugInfoFinder()"
  },
  {
    "label": "CreateElementGlobalVariableDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateElementGlobalVariableDebugInfo(llvm::GlobalVariable *GV, llvm::DebugInfoFinder &DbgInfoFinder, llvm::GlobalVariable *EltGV, unsigned sizeInBits, unsigned alignInBits, unsigned offsetInBits, llvm::StringRef eltName)"
  },
  {
    "label": "UpdateGlobalVariableDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGlobalVariableDebugInfo(llvm::GlobalVariable *GV, llvm::DebugInfoFinder &DbgInfoFinder, llvm::GlobalVariable *NewGV)"
  },
  {
    "label": "GetSubobjects()",
    "kind": "Method",
    "detail": "Function (DxilSubobjects*)",
    "insertText": "GetSubobjects()"
  },
  {
    "label": "ReleaseSubobjects()",
    "kind": "Method",
    "detail": "Function (DxilSubobjects*)",
    "insertText": "ReleaseSubobjects()"
  },
  {
    "label": "ResetSubobjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSubobjects(DxilSubobjects *subobjects)"
  },
  {
    "label": "AddRegBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRegBinding(unsigned CbID, unsigned ConstantIdx, unsigned Srv, unsigned Uav, unsigned Sampler)"
  },
  {
    "label": "EmitHLResources()",
    "kind": "Method",
    "detail": "Function (private : std::vector<uint8_t> m_SerializedRootSignature ; std::vector<std::unique_ptr<HLResource>> m_SRVs ; std::vector<std::unique_ptr<HLResource>> m_UAVs ; std::vector<std::unique_ptr<DxilCBuffer>> m_CBuffers ; std::vector<std::unique_ptr<DxilSampler>> m_Samplers ; std::vector<llvm::GlobalVariable*> m_TGSMVariables ; std::unordered_map<const llvm::Function*,std::unique_ptr<DxilFunctionProps>> m_DxilFunctionPropsMap ; std::unordered_set<llvm::Function*> m_PatchConstantFunctions ; std::unordered_map<uint64_t,unsigned> m_SrvBindingInCB ; std::unordered_map<uint64_t,unsigned> m_UavBindingInCB ; std::unordered_map<uint64_t,unsigned> m_SamplerBindingInCB ; private : llvm::LLVMContext& m_Ctx ; llvm::Module* m_pModule ; llvm::Function* m_pEntryFunc ; std::string m_EntryName ; std::unique_ptr<DxilMDHelper> m_pMDHelper ; std::unique_ptr<llvm::DebugInfoFinder> m_pDebugInfoFinder ; const ShaderModel* m_pSM ; unsigned m_DxilMajor ; unsigned m_DxilMinor ; unsigned m_ValMajor ; unsigned m_ValMinor ; DXIL::Float32DenormMode m_Float32DenormMode ; HLOptions m_Options ; std::unique_ptr<OP> m_pOP ; size_t m_pUnused ; uint32_t m_AutoBindingSpace ; DXIL::DefaultLinkage m_DefaultLinkage ; std::unique_ptr<DxilSubobjects> m_pSubobjects ; llvm::MDTuple*)",
    "insertText": "EmitHLResources()"
  },
  {
    "label": "LoadHLResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadHLResources(const llvm::MDOperand &MDO)"
  },
  {
    "label": "EmitHLShaderProperties()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitHLShaderProperties()"
  },
  {
    "label": "LoadHLShaderProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadHLShaderProperties(const llvm::MDOperand &MDO)"
  },
  {
    "label": "EmitDxilShaderProperties()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitDxilShaderProperties()"
  },
  {
    "label": "AddResource()",
    "kind": "Method",
    "detail": "Function (std::vector<llvm::GlobalVariable*> m_LLVMUsed ; std::unique_ptr<DxilTypeSystem> m_pTypeSystem ; template<T> unsigned)",
    "insertText": "AddResource(std::vector<std::unique_ptr<T>> &Vec, std::unique_ptr<T> pRes)"
  },
  {
    "label": "HLExtraPropertyHelper()",
    "kind": "Method",
    "detail": "Function (} ; class HLExtraPropertyHelper : public DxilExtraPropertyHelper { public :)",
    "insertText": "HLExtraPropertyHelper(llvm::Module *pModule)"
  },
  {
    "label": "HLExtraPropertyHelper()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "HLExtraPropertyHelper()"
  },
  {
    "label": "EmitSignatureElementProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmitSignatureElementProperties(const DxilSignatureElement &SE, std::vector<llvm::Metadata *> &MDVals)"
  },
  {
    "label": "LoadSignatureElementProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSignatureElementProperties(const llvm::MDOperand &MDO, DxilSignatureElement &SE)"
  }
]