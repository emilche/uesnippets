[
  {
    "label": "FStreamReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamReader"
  },
  {
    "label": "FTidPacketTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTidPacketTransport"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FThreadStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadStream"
  },
  {
    "label": "FTidPacketTransportSync",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTidPacketTransportSync"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Transport . h \" # include \" Analysis / StreamReader . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" TraceAnalysisDebug . h \" # include \" Trace / Detail / Transport . h \" namespace UE { namespace Trace { class FStreamReader ; class FTidPacketTransport : public FTransport { public : typedef UPTRINT ThreadIter ; enum class ETransportResult : uint8 { Ok,Error } ; bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "DebugBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugBegin()"
  },
  {
    "label": "DebugEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugEnd()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (ETransportResult)",
    "insertText": "Update()"
  },
  {
    "label": "GetThreadCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetThreadCount()"
  },
  {
    "label": "GetThreadStream()",
    "kind": "Method",
    "detail": "Function (FStreamReader*)",
    "insertText": "GetThreadStream(uint32 Index)"
  },
  {
    "label": "GetThreadId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetThreadId(uint32 Index)"
  },
  {
    "label": "GetSyncCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSyncCount()"
  },
  {
    "label": "ReadPacket()",
    "kind": "Method",
    "detail": "Function (private : struct FThreadStream { FStreamBuffer Buffer ; uint32 ThreadId ; } ; enum class EReadPacketResult : uint8 { NeedMoreData,Continue,ReadError } ; EReadPacketResult)",
    "insertText": "ReadPacket()"
  },
  {
    "label": "FindOrAddThread()",
    "kind": "Method",
    "detail": "Function (FThreadStream*)",
    "insertText": "FindOrAddThread(uint32 ThreadId, bool bAddIfNotFound)"
  },
  {
    "label": "DebugUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugUpdate()"
  }
]