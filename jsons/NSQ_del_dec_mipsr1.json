[
  {
    "label": "silk_noise_shape_quantizer_del_dec()",
    "kind": "Method",
    "detail": "Function (# ifndef __NSQ_DEL_DEC_MIPSR1_H__ # define __NSQ_DEL_DEC_MIPSR1_H__ # ifdef HAVE_CONFIG_H # include \" config . h \" # endif # include \" main . h \" # include \" stack_alloc . h \" # define OVERRIDE_silk_noise_shape_quantizer_del_dec void)",
    "insertText": "silk_noise_shape_quantizer_del_dec(silk_nsq_state *NSQ, NSQ_del_dec_struct psDelDec[], opus_int signalType, const opus_int32 x_Q10[], opus_int8 pulses[], opus_int16 xq[], opus_int32 sLTP_Q15[], opus_int32 delayedGain_Q10[], const opus_int16 a_Q12[], const opus_int16 b_Q14[], const opus_int16 AR_shp_Q13[], opus_int lag, opus_int32 HarmShapeFIRPacked_Q14, opus_int Tilt_Q14, opus_int32 LF_shp_Q14, opus_int32 Gain_Q16, opus_int Lambda_Q10, opus_int offset_Q10, opus_int length, opus_int subfr, opus_int shapingLPCOrder, opus_int predictLPCOrder, opus_int warping_Q16, opus_int nStatesDelayedDecision, opus_int *smpl_buf_idx, opus_int decisionDelay, int arch)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (opus_int i,j,k,Winner_ind,RDmin_ind,RDmax_ind,last_smple_idx ; opus_int32 Winner_rand_state ; opus_int32 LTP_pred_Q14,LPC_pred_Q14,n_AR_Q14,n_LTP_Q14 ; opus_int32 n_LF_Q14,r_Q10,rr_Q10,rd1_Q10,rd2_Q10,RDmin_Q10,RDmax_Q10 ; opus_int32 q1_Q0,q1_Q10,q2_Q10,exc_Q14,LPC_exc_Q14,xq_Q14,Gain_Q10 ; opus_int32 tmp1,tmp2,sLF_AR_shp_Q14 ; opus_int32* pred_lag_ptr,* shp_lag_ptr,* psLPC_Q14 ; NSQ_sample_struct psSampleState [ MAX_DEL_DEC_STATES ] [ 2 ] ; NSQ_del_dec_struct* psDD ; NSQ_sample_struct* psSS ; opus_int16 b_Q14_0,b_Q14_1,b_Q14_2,b_Q14_3,b_Q14_4 ; opus_int16 a_Q12_0,a_Q12_1,a_Q12_2,a_Q12_3,a_Q12_4,a_Q12_5,a_Q12_6 ; opus_int16 a_Q12_7,a_Q12_8,a_Q12_9,a_Q12_10,a_Q12_11,a_Q12_12,a_Q12_13 ; opus_int16 a_Q12_14,a_Q12_15 ; opus_int32 cur,prev,)",
    "insertText": "next(void)"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (b_Q14_0 = b_Q14 [ 0 ] ; b_Q14_1 = b_Q14 [ 1 ] ; b_Q14_2 = b_Q14 [ 2 ] ; b_Q14_3 = b_Q14 [ 3 ] ; b_Q14_4 = b_Q14 [ 4 ] ; a_Q12_0 = a_Q12 [ 0 ] ; a_Q12_1 = a_Q12 [ 1 ] ; a_Q12_2 = a_Q12 [ 2 ] ; a_Q12_3 = a_Q12 [ 3 ] ; a_Q12_4 = a_Q12 [ 4 ] ; a_Q12_5 = a_Q12 [ 5 ] ; a_Q12_6 = a_Q12 [ 6 ] ; a_Q12_7 = a_Q12 [ 7 ] ; a_Q12_8 = a_Q12 [ 8 ] ; a_Q12_9 = a_Q12 [ 9 ] ; a_Q12_10 = a_Q12 [ 1 0 ] ; a_Q12_11 = a_Q12 [ 1 1 ] ; a_Q12_12 = a_Q12 [ 1 2 ] ; a_Q12_13 = a_Q12 [ 1 3 ] ; a_Q12_14 = a_Q12 [ 1 4 ] ; a_Q12_15 = a_Q12 [ 1 5 ] ; long long temp64 ;)",
    "insertText": "silk_assert(nStatesDelayedDecision > 0)"
  },
  {
    "label": "silk_RSHIFT()",
    "kind": "Method",
    "detail": "Function (shp_lag_ptr =& NSQ -> sLTP_shp_Q14 [ NSQ -> sLTP_shp_buf_idx - lag + HARM_SHAPE_FIR_TAPS / 2 ] ; pred_lag_ptr =& sLTP_Q15 [ NSQ -> sLTP_buf_idx - lag + LTP_ORDER / 2 ] ; Gain_Q10 =)",
    "insertText": "silk_RSHIFT(Gain_Q16, 6)"
  },
  {
    "label": "__builtin_mips_mult()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_mult(pred_lag_ptr[ 0 ], b_Q14_0)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, pred_lag_ptr[ -1 ], b_Q14_1)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, pred_lag_ptr[ -2 ], b_Q14_2)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, pred_lag_ptr[ -3 ], b_Q14_3)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, pred_lag_ptr[ -4 ], b_Q14_4)"
  },
  {
    "label": "__builtin_mips_extr_w()",
    "kind": "Method",
    "detail": "Function (temp64 + = 3 2 7 6 8 ; LTP_pred_Q14 =)",
    "insertText": "__builtin_mips_extr_w(temp64, 16)"
  },
  {
    "label": "silk_LSHIFT()",
    "kind": "Method",
    "detail": "Function (LTP_pred_Q14 =)",
    "insertText": "silk_LSHIFT(LTP_pred_Q14, 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pred_lag_ptr + + ; } else { LTP_pred_Q14 = 0 ; })",
    "insertText": "if(lag > 0)"
  },
  {
    "label": "silk_SMULWB()",
    "kind": "Method",
    "detail": "Function (n_LTP_Q14 =)",
    "insertText": "silk_SMULWB(silk_ADD32( shp_lag_ptr[ 0 ], shp_lag_ptr[ -2 ] ), HarmShapeFIRPacked_Q14)"
  },
  {
    "label": "silk_SMLAWT()",
    "kind": "Method",
    "detail": "Function (n_LTP_Q14 =)",
    "insertText": "silk_SMLAWT(n_LTP_Q14, shp_lag_ptr[ -1 ], HarmShapeFIRPacked_Q14)"
  },
  {
    "label": "silk_SUB_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (n_LTP_Q14 =)",
    "insertText": "silk_SUB_LSHIFT32(LTP_pred_Q14, n_LTP_Q14, 2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (shp_lag_ptr + + ; } else { n_LTP_Q14 = 0 ; })",
    "insertText": "for(k = 0; k < nStatesDelayedDecision; k++)"
  },
  {
    "label": "silk_RAND()",
    "kind": "Method",
    "detail": "Function (psDD =& psDelDec [ k ] ; psSS = psSampleState [ k ] ; psDD -> Seed =)",
    "insertText": "silk_RAND(psDD->Seed)"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (psLPC_Q14 =& psDD -> sLPC_Q14 [ NSQ_LPC_BUF_LENGTH - 1 + i ] ;)",
    "insertText": "silk_assert(predictLPCOrder == 10 || predictLPCOrder == 16)"
  },
  {
    "label": "__builtin_mips_mult()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_mult(psLPC_Q14[ 0 ], a_Q12_0)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, psLPC_Q14[ -1 ], a_Q12_1)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, psLPC_Q14[ -2 ], a_Q12_2)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, psLPC_Q14[ -3 ], a_Q12_3)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, psLPC_Q14[ -4 ], a_Q12_4)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, psLPC_Q14[ -5 ], a_Q12_5)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, psLPC_Q14[ -6 ], a_Q12_6)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, psLPC_Q14[ -7 ], a_Q12_7)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, psLPC_Q14[ -8 ], a_Q12_8)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, psLPC_Q14[ -9 ], a_Q12_9)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, psLPC_Q14[ -10 ], a_Q12_10)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, psLPC_Q14[ -11 ], a_Q12_11)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, psLPC_Q14[ -12 ], a_Q12_12)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, psLPC_Q14[ -13 ], a_Q12_13)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, psLPC_Q14[ -14 ], a_Q12_14)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, psLPC_Q14[ -15 ], a_Q12_15)"
  },
  {
    "label": "silk_LSHIFT()",
    "kind": "Method",
    "detail": "Function (LPC_pred_Q14 =)",
    "insertText": "silk_LSHIFT(LPC_pred_Q14, 4)"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_assert(( shapingLPCOrder & 1 ) == 0)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp2 =)",
    "insertText": "silk_SMLAWB(psLPC_Q14[ 0 ], psDD->sAR2_Q14[ 0 ], warping_Q16)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp1 =)",
    "insertText": "silk_SMLAWB(psDD->sAR2_Q14[ 0 ], psDD->sAR2_Q14[ 1 ] - tmp2, warping_Q16)"
  },
  {
    "label": "__builtin_mips_mult()",
    "kind": "Method",
    "detail": "Function (psDD -> sAR2_Q14 [ 0 ] = tmp2 ; temp64 =)",
    "insertText": "__builtin_mips_mult(tmp2, AR_shp_Q13[ 0 ])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (prev = psDD -> sAR2_Q14 [ 1 ] ;)",
    "insertText": "for(j = 2; j < shapingLPCOrder; j += 2)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (cur = psDD -> sAR2_Q14 [ j ] ; next = psDD -> sAR2_Q14 [ j + 1 ] ; tmp2 =)",
    "insertText": "silk_SMLAWB(prev, cur - tmp1, warping_Q16)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (psDD -> sAR2_Q14 [ j - 1 ] = tmp1 ; temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, tmp1, AR_shp_Q13[ j - 1 ])"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, tmp2, AR_shp_Q13[ j ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp1 =)",
    "insertText": "silk_SMLAWB(cur, next - tmp2, warping_Q16)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (psDD -> sAR2_Q14 [ j + 0 ] = tmp2 ; prev = next ; } psDD -> sAR2_Q14 [ shapingLPCOrder - 1 ] = tmp1 ; temp64 =)",
    "insertText": "__builtin_mips_madd(temp64, tmp1, AR_shp_Q13[ shapingLPCOrder - 1 ])"
  },
  {
    "label": "silk_LSHIFT()",
    "kind": "Method",
    "detail": "Function (n_AR_Q14 =)",
    "insertText": "silk_LSHIFT(n_AR_Q14, 1)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (n_AR_Q14 =)",
    "insertText": "silk_SMLAWB(n_AR_Q14, psDD->LF_AR_Q14, Tilt_Q14)"
  },
  {
    "label": "silk_LSHIFT()",
    "kind": "Method",
    "detail": "Function (n_AR_Q14 =)",
    "insertText": "silk_LSHIFT(n_AR_Q14, 2)"
  },
  {
    "label": "silk_SMULWB()",
    "kind": "Method",
    "detail": "Function (n_LF_Q14 =)",
    "insertText": "silk_SMULWB(psDD->Shape_Q14[ *smpl_buf_idx ], LF_shp_Q14)"
  },
  {
    "label": "silk_SMLAWT()",
    "kind": "Method",
    "detail": "Function (n_LF_Q14 =)",
    "insertText": "silk_SMLAWT(n_LF_Q14, psDD->LF_AR_Q14, LF_shp_Q14)"
  },
  {
    "label": "silk_LSHIFT()",
    "kind": "Method",
    "detail": "Function (n_LF_Q14 =)",
    "insertText": "silk_LSHIFT(n_LF_Q14, 2)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (tmp1 =)",
    "insertText": "silk_ADD32(n_AR_Q14, n_LF_Q14)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (tmp2 =)",
    "insertText": "silk_ADD32(n_LTP_Q14, LPC_pred_Q14)"
  },
  {
    "label": "silk_SUB32()",
    "kind": "Method",
    "detail": "Function (tmp1 =)",
    "insertText": "silk_SUB32(tmp2, tmp1)"
  },
  {
    "label": "silk_RSHIFT_ROUND()",
    "kind": "Method",
    "detail": "Function (tmp1 =)",
    "insertText": "silk_RSHIFT_ROUND(tmp1, 4)"
  },
  {
    "label": "silk_SUB32()",
    "kind": "Method",
    "detail": "Function (r_Q10 =)",
    "insertText": "silk_SUB32(x_Q10[ i ], tmp1)"
  },
  {
    "label": "silk_LIMIT_32()",
    "kind": "Method",
    "detail": "Function (r_Q10 = - r_Q10 ; } r_Q10 =)",
    "insertText": "silk_LIMIT_32(r_Q10, -(31 << 10), 30 << 10)"
  },
  {
    "label": "silk_SUB32()",
    "kind": "Method",
    "detail": "Function (q1_Q10 =)",
    "insertText": "silk_SUB32(r_Q10, offset_Q10)"
  },
  {
    "label": "silk_RSHIFT()",
    "kind": "Method",
    "detail": "Function (q1_Q0 =)",
    "insertText": "silk_RSHIFT(q1_Q10, 10)"
  },
  {
    "label": "silk_SUB32()",
    "kind": "Method",
    "detail": "Function (q1_Q10 =)",
    "insertText": "silk_SUB32(silk_LSHIFT( q1_Q0, 10 ), QUANT_LEVEL_ADJUST_Q10)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (q1_Q10 =)",
    "insertText": "silk_ADD32(q1_Q10, offset_Q10)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (q2_Q10 =)",
    "insertText": "silk_ADD32(q1_Q10, 1024)"
  },
  {
    "label": "silk_SMULBB()",
    "kind": "Method",
    "detail": "Function (rd1_Q10 =)",
    "insertText": "silk_SMULBB(q1_Q10, Lambda_Q10)"
  },
  {
    "label": "silk_SMULBB()",
    "kind": "Method",
    "detail": "Function (rd2_Q10 =)",
    "insertText": "silk_SMULBB(q2_Q10, Lambda_Q10)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(q1_Q0 == 0)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (q1_Q10 = offset_Q10 ; q2_Q10 =)",
    "insertText": "silk_ADD32(q1_Q10, 1024 - QUANT_LEVEL_ADJUST_Q10)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(q1_Q0 == -1)"
  },
  {
    "label": "silk_SUB32()",
    "kind": "Method",
    "detail": "Function (q2_Q10 = offset_Q10 ; q1_Q10 =)",
    "insertText": "silk_SUB32(q2_Q10, 1024 - QUANT_LEVEL_ADJUST_Q10)"
  },
  {
    "label": "silk_SMULBB()",
    "kind": "Method",
    "detail": "Function (rd1_Q10 =)",
    "insertText": "silk_SMULBB(-q1_Q10, Lambda_Q10)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (} else { q1_Q10 =)",
    "insertText": "silk_ADD32(silk_LSHIFT( q1_Q0, 10 ), QUANT_LEVEL_ADJUST_Q10)"
  },
  {
    "label": "silk_SMULBB()",
    "kind": "Method",
    "detail": "Function (rd2_Q10 =)",
    "insertText": "silk_SMULBB(-q2_Q10, Lambda_Q10)"
  },
  {
    "label": "silk_SUB32()",
    "kind": "Method",
    "detail": "Function (} rr_Q10 =)",
    "insertText": "silk_SUB32(r_Q10, q1_Q10)"
  },
  {
    "label": "silk_RSHIFT()",
    "kind": "Method",
    "detail": "Function (rd1_Q10 =)",
    "insertText": "silk_RSHIFT(silk_SMLABB( rd1_Q10, rr_Q10, rr_Q10 ), 10)"
  },
  {
    "label": "silk_SUB32()",
    "kind": "Method",
    "detail": "Function (rr_Q10 =)",
    "insertText": "silk_SUB32(r_Q10, q2_Q10)"
  },
  {
    "label": "silk_RSHIFT()",
    "kind": "Method",
    "detail": "Function (rd2_Q10 =)",
    "insertText": "silk_RSHIFT(silk_SMLABB( rd2_Q10, rr_Q10, rr_Q10 ), 10)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (psSS [ 0 ] . RD_Q10 =)",
    "insertText": "silk_ADD32(psDD->RD_Q10, rd1_Q10)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (psSS [ 1 ] . RD_Q10 =)",
    "insertText": "silk_ADD32(psDD->RD_Q10, rd2_Q10)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (psSS [ 0 ] . Q_Q10 = q2_Q10 ; psSS [ 1 ] . Q_Q10 = q1_Q10 ; } exc_Q14 =)",
    "insertText": "silk_LSHIFT32(psSS[ 0 ].Q_Q10, 4)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (exc_Q14 = - exc_Q14 ; } LPC_exc_Q14 =)",
    "insertText": "silk_ADD32(exc_Q14, LTP_pred_Q14)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (xq_Q14 =)",
    "insertText": "silk_ADD32(LPC_exc_Q14, LPC_pred_Q14)"
  },
  {
    "label": "silk_SUB32()",
    "kind": "Method",
    "detail": "Function (sLF_AR_shp_Q14 =)",
    "insertText": "silk_SUB32(xq_Q14, n_AR_Q14)"
  },
  {
    "label": "silk_SUB32()",
    "kind": "Method",
    "detail": "Function (psSS [ 0 ] . sLTP_shp_Q14 =)",
    "insertText": "silk_SUB32(sLF_AR_shp_Q14, n_LF_Q14)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (psSS [ 0 ] . LF_AR_Q14 = sLF_AR_shp_Q14 ; psSS [ 0 ] . LPC_exc_Q14 = LPC_exc_Q14 ; psSS [ 0 ] . xq_Q14 = xq_Q14 ; exc_Q14 =)",
    "insertText": "silk_LSHIFT32(psSS[ 1 ].Q_Q10, 4)"
  },
  {
    "label": "smpl_buf_idx()",
    "kind": "Method",
    "detail": "Function (psSS [ 1 ] . LF_AR_Q14 = sLF_AR_shp_Q14 ; psSS [ 1 ] . LPC_exc_Q14 = LPC_exc_Q14 ; psSS [ 1 ] . xq_Q14 = xq_Q14 ; }*)",
    "insertText": "smpl_buf_idx(*smpl_buf_idx - 1)"
  },
  {
    "label": "last_smple_idx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "last_smple_idx(*smpl_buf_idx + decisionDelay)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (RDmin_Q10 = psSampleState [ 0 ] [ 0 ] . RD_Q10 ; Winner_ind = 0 ;)",
    "insertText": "for(k = 1; k < nStatesDelayedDecision; k++)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (psSampleState [ k ] [ 0 ] . RD_Q10 =)",
    "insertText": "silk_ADD32(psSampleState[ k ][ 0 ].RD_Q10, silk_int32_MAX >> 4)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (psSampleState [ k ] [ 1 ] . RD_Q10 =)",
    "insertText": "silk_ADD32(psSampleState[ k ][ 1 ].RD_Q10, silk_int32_MAX >> 4)"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_assert(psSampleState[ k ][ 0 ].RD_Q10 >= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RDmax_Q10 = psSampleState [ k ] [ 0 ] . RD_Q10 ; RDmax_ind = k ; })",
    "insertText": "if(psSampleState[ k ][ 1 ].RD_Q10 < RDmin_Q10)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RDmin_Q10 = psSampleState [ k ] [ 1 ] . RD_Q10 ; RDmin_ind = k ; } })",
    "insertText": "if(RDmin_Q10 < RDmax_Q10)"
  },
  {
    "label": "silk_memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_memcpy(( (opus_int32 *)&psDelDec[ RDmax_ind ] ) + i, ( (opus_int32 *)&psDelDec[ RDmin_ind ] ) + i, sizeof( NSQ_del_dec_struct ) - i * sizeof( opus_int32))"
  },
  {
    "label": "silk_memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_memcpy(&psSampleState[ RDmax_ind ][ 0 ], &psSampleState[ RDmin_ind ][ 1 ], sizeof( NSQ_sample_struct ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} psDD =& psDelDec [ Winner_ind ] ;)",
    "insertText": "if(subfr > 0 || i >= decisionDelay)"
  },
  {
    "label": "decisionDelay()",
    "kind": "Method",
    "detail": "Function (pulses [ i -)",
    "insertText": "decisionDelay(opus_int8)silk_RSHIFT_ROUND( psDD->Q_Q10[ last_smple_idx ], 10)"
  },
  {
    "label": "decisionDelay()",
    "kind": "Method",
    "detail": "Function (xq [ i -)",
    "insertText": "decisionDelay(opus_int16)silk_SAT16( silk_RSHIFT_ROUND( silk_SMULWW( psDD->Xq_Q14[ last_smple_idx ], delayedGain_Q10[ last_smple_idx ] ), 8 ))"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (psDD =& psDelDec [ k ] ; psSS =& psSampleState [ k ] [ 0 ] ; psDD -> LF_AR_Q14 = psSS -> LF_AR_Q14 ; psDD -> sLPC_Q14 [ NSQ_LPC_BUF_LENGTH + i ] = psSS -> xq_Q14 ; psDD -> Xq_Q14 [* smpl_buf_idx ] = psSS -> xq_Q14 ; psDD -> Q_Q10 [* smpl_buf_idx ] = psSS -> Q_Q10 ; psDD -> Pred_Q15 [* smpl_buf_idx ] =)",
    "insertText": "silk_LSHIFT32(psSS->LPC_exc_Q14, 1)"
  },
  {
    "label": "silk_ADD32_ovflw()",
    "kind": "Method",
    "detail": "Function (psDD -> Shape_Q14 [* smpl_buf_idx ] = psSS -> sLTP_shp_Q14 ; psDD -> Seed =)",
    "insertText": "silk_ADD32_ovflw(psDD->Seed, silk_RSHIFT_ROUND( psSS->Q_Q10, 10 ))"
  },
  {
    "label": "silk_memcpy()",
    "kind": "Method",
    "detail": "Function (psDD =& psDelDec [ k ] ;)",
    "insertText": "silk_memcpy(psDD->sLPC_Q14, &psDD->sLPC_Q14[ length ], NSQ_LPC_BUF_LENGTH * sizeof( opus_int32 ))"
  }
]