[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BucketRanges()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_BUCKET_RANGES_H_ # define BASE_METRICS_BUCKET_RANGES_H_ # include<limits . h> # include<stddef . h> # include<stdint . h> # include<atomic> # include<vector> # include \" base / base_export . h \" # include \" base / check_op . h \" # include \" base / metrics / histogram_base . h \" namespace base { class BASE_EXPORT BucketRanges { public : typedef std::vector<HistogramBase::Sample> Ranges ;)",
    "insertText": "BucketRanges(size_t num_ranges)"
  },
  {
    "label": "BucketRanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BucketRanges(const BucketRanges&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BucketRanges&)",
    "insertText": "operator(const BucketRanges&)"
  },
  {
    "label": "BucketRanges()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BucketRanges()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "size()"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (} HistogramBase::Sample)",
    "insertText": "range(size_t i)"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(i, ranges_.size())"
  },
  {
    "label": "DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_GE(value, 0)"
  },
  {
    "label": "checksum()",
    "kind": "Method",
    "detail": "Function (ranges_ [ i ] = value ; } uint32_t)",
    "insertText": "checksum()"
  },
  {
    "label": "CalculateChecksum()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "CalculateChecksum()"
  },
  {
    "label": "HasValidChecksum()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidChecksum()"
  },
  {
    "label": "ResetChecksum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetChecksum()"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const BucketRanges* other)"
  },
  {
    "label": "set_persistent_reference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_persistent_reference(uint32_t ref)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (persistent_reference_ .)",
    "insertText": "store(ref, std::memory_order_release)"
  },
  {
    "label": "persistent_reference()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "persistent_reference()"
  }
]