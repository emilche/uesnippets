[
  {
    "label": "FComputePipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComputePipelineState"
  },
  {
    "label": "FGraphicsPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphicsPipelineState"
  },
  {
    "label": "FRayTracingPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingPipelineState"
  },
  {
    "label": "FWorkGraphPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkGraphPipelineState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPSOPrecacheRequestID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPSOPrecacheRequestID"
  },
  {
    "label": "FPSOPrecacheRequestResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPSOPrecacheRequestResult"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RHI . h \" # include \" Misc / EnumClassFlags . h \" class FComputePipelineState ; class FGraphicsPipelineState ; class FRayTracingPipelineState ; class FWorkGraphPipelineState ; enum class EApplyRendertargetOption : int { DoNothing = 0,CheckApply = 1<<0,ForceApply = CheckApply,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EApplyRendertargetOption)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EPSOPrecachePriority : uint8 { Medium,High,Highest,} ; enum class ERayTracingPipelineCacheFlags : uint8 { Default = 0,NonBlocking = 1<<0,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ERayTracingPipelineCacheFlags)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (enum class EPSOPrecacheResult { Unknown,Active,Complete,Missed,TooLate,NotSupported,Untracked,} ; const TCHAR*)",
    "insertText": "LexToString(EPSOPrecacheResult Result)"
  },
  {
    "label": "FPSOPrecacheRequestID()",
    "kind": "Method",
    "detail": "Function (struct FPSOPrecacheRequestID { enum class EType { Invalid = 0,Graphics,Compute } ;)",
    "insertText": "FPSOPrecacheRequestID() : Type((uint32)EType::Invalid), RequestID(0)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} EType)",
    "insertText": "GetType()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPSOPrecacheRequestID& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPSOPrecacheRequestResult& Other)"
  },
  {
    "label": "SetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (} FPSOPrecacheRequestID RequestID ; FGraphEventRef AsyncCompileEvent ; } ; void)",
    "insertText": "SetComputePipelineState(FRHIComputeCommandList& RHICmdList, FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "SetGraphicsPipelineStateCheckApply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraphicsPipelineStateCheckApply(FRHICommandList& RHICmdList, const FGraphicsPipelineStateInitializer& Initializer, uint32 StencilRef, bool bApplyAdditionalState = true)"
  },
  {
    "label": "SetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraphicsPipelineState(FRHICommandList& RHICmdList, const FGraphicsPipelineStateInitializer& Initializer, uint32 StencilRef, EApplyRendertargetOption ApplyFlags = EApplyRendertargetOption::CheckApply, bool bApplyAdditionalState = true)"
  },
  {
    "label": "RetrieveGraphicsPipelineStateSortKey()",
    "kind": "Method",
    "detail": "Function (namespace PipelineStateCache { uint64)",
    "insertText": "RetrieveGraphicsPipelineStateSortKey(const FGraphicsPipelineState* GraphicsPipelineState)"
  },
  {
    "label": "GetAndOrCreateComputePipelineState()",
    "kind": "Method",
    "detail": "Function (FComputePipelineState*)",
    "insertText": "GetAndOrCreateComputePipelineState(FRHIComputeCommandList& RHICmdList, FRHIComputeShader* ComputeShader, bool bFromFileCache)"
  },
  {
    "label": "GetAndOrCreateWorkGraphPipelineState()",
    "kind": "Method",
    "detail": "Function (FWorkGraphPipelineState*)",
    "insertText": "GetAndOrCreateWorkGraphPipelineState(FRHIComputeCommandList& RHICmdList, const FWorkGraphPipelineStateInitializer& Initializer)"
  },
  {
    "label": "GetAndOrCreateGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineState*)",
    "insertText": "GetAndOrCreateGraphicsPipelineState(FRHICommandList& RHICmdList, const FGraphicsPipelineStateInitializer& OriginalInitializer, EApplyRendertargetOption ApplyFlags)"
  },
  {
    "label": "FindComputePipelineState()",
    "kind": "Method",
    "detail": "Function (FComputePipelineState*)",
    "insertText": "FindComputePipelineState(FRHIComputeShader* ComputeShader, bool bVerifyUse = true)"
  },
  {
    "label": "FindWorkGraphPipelineState()",
    "kind": "Method",
    "detail": "Function (FWorkGraphPipelineState*)",
    "insertText": "FindWorkGraphPipelineState(const FWorkGraphPipelineStateInitializer& Initializer, bool bVerifyUse = true)"
  },
  {
    "label": "FindGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineState*)",
    "insertText": "FindGraphicsPipelineState(const FGraphicsPipelineStateInitializer& Initializer, bool bVerifyUse = true)"
  },
  {
    "label": "GetOrCreateVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (FRHIVertexDeclaration*)",
    "insertText": "GetOrCreateVertexDeclaration(const FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "GetAndOrCreateRayTracingPipelineState()",
    "kind": "Method",
    "detail": "Function (FRayTracingPipelineState*)",
    "insertText": "GetAndOrCreateRayTracingPipelineState(FRHICommandList& RHICmdList, const FRayTracingPipelineStateInitializer& Initializer, ERayTracingPipelineCacheFlags Flags = ERayTracingPipelineCacheFlags::Default)"
  },
  {
    "label": "GetRayTracingPipelineState()",
    "kind": "Method",
    "detail": "Function (FRayTracingPipelineState*)",
    "insertText": "GetRayTracingPipelineState(const FRayTracingPipelineStateSignature& Signature)"
  },
  {
    "label": "FlushResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushResources()"
  },
  {
    "label": "ReportFrameHitchToCSV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportFrameHitchToCSV()"
  },
  {
    "label": "WaitForAllTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAllTasks()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "PreCompileComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreCompileComplete()"
  },
  {
    "label": "GetNumActivePipelinePrecompileTasks()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumActivePipelinePrecompileTasks()"
  },
  {
    "label": "IsPSOPrecachingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPSOPrecachingEnabled()"
  },
  {
    "label": "PrecacheComputePipelineState()",
    "kind": "Method",
    "detail": "Function (FPSOPrecacheRequestResult)",
    "insertText": "PrecacheComputePipelineState(FRHIComputeShader* ComputeShader, const TCHAR* Name = nullptr, bool bForcePrecache = false)"
  },
  {
    "label": "PrecacheGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FPSOPrecacheRequestResult)",
    "insertText": "PrecacheGraphicsPipelineState(const FGraphicsPipelineStateInitializer& PipelineStateInitializer)"
  },
  {
    "label": "CheckPipelineStateInCache()",
    "kind": "Method",
    "detail": "Function (EPSOPrecacheResult)",
    "insertText": "CheckPipelineStateInCache(const FGraphicsPipelineStateInitializer& PipelineStateInitializer)"
  },
  {
    "label": "CheckPipelineStateInCache()",
    "kind": "Method",
    "detail": "Function (EPSOPrecacheResult)",
    "insertText": "CheckPipelineStateInCache(FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "IsPrecaching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecaching(const FPSOPrecacheRequestID& PSOPrecacheRequestID)"
  },
  {
    "label": "IsPrecaching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecaching(const FGraphicsPipelineStateInitializer& PipelineStateInitializer)"
  },
  {
    "label": "IsPrecaching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecaching(FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "IsPrecaching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecaching()"
  },
  {
    "label": "BoostPrecachePriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoostPrecachePriority(EPSOPrecachePriority PSOPrecachePriority, const FPSOPrecacheRequestID& PSOPrecacheRequestID)"
  },
  {
    "label": "NumActivePrecacheRequests()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NumActivePrecacheRequests()"
  },
  {
    "label": "PrecachePSOsBoostToHighestPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrecachePSOsBoostToHighestPriority(bool bForceHighest)"
  },
  {
    "label": "ResetPSOHitchTrackingStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPSOHitchTrackingStats()"
  },
  {
    "label": "FindRayTracingHitGroupIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindRayTracingHitGroupIndex(FRayTracingPipelineState* Pipeline, FRHIRayTracingShader* HitGroupShader, bool bRequired = true)"
  },
  {
    "label": "FindRayTracingCallableShaderIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindRayTracingCallableShaderIndex(FRayTracingPipelineState* Pipeline, FRHIRayTracingShader* CallableShader, bool bRequired = true)"
  },
  {
    "label": "FindRayTracingMissShaderIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindRayTracingMissShaderIndex(FRayTracingPipelineState* Pipeline, FRHIRayTracingShader* MissShader, bool bRequired = true)"
  }
]