[
  {
    "label": "FComputePipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComputePipelineState"
  },
  {
    "label": "FGraphicsPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphicsPipelineState"
  },
  {
    "label": "FRayTracingPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingPipelineState"
  },
  {
    "label": "FWorkGraphPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkGraphPipelineState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPSOPrecacheRequestID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPSOPrecacheRequestID"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPSOPrecacheRequestResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPSOPrecacheRequestResult"
  },
  {
    "label": "SetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComputePipelineState(FRHIComputeCommandList& RHICmdList, FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "SetGraphicsPipelineStateCheckApply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraphicsPipelineStateCheckApply(FRHICommandList& RHICmdList, const FGraphicsPipelineStateInitializer& Initializer, uint32 StencilRef, bool bApplyAdditionalState = true)"
  },
  {
    "label": "SetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraphicsPipelineState(FRHICommandList& RHICmdList, const FGraphicsPipelineStateInitializer& Initializer, uint32 StencilRef, EApplyRendertargetOption ApplyFlags = EApplyRendertargetOption::CheckApply, bool bApplyAdditionalState = true)"
  },
  {
    "label": "RetrieveGraphicsPipelineStateSortKey()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "RetrieveGraphicsPipelineStateSortKey(const FGraphicsPipelineState* GraphicsPipelineState)"
  },
  {
    "label": "FlushResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushResources()"
  },
  {
    "label": "ReportFrameHitchToCSV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportFrameHitchToCSV()"
  },
  {
    "label": "WaitForAllTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAllTasks()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "PreCompileComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreCompileComplete()"
  },
  {
    "label": "GetNumActivePipelinePrecompileTasks()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumActivePipelinePrecompileTasks()"
  },
  {
    "label": "IsPSOPrecachingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPSOPrecachingEnabled()"
  },
  {
    "label": "PrecacheComputePipelineState()",
    "kind": "Method",
    "detail": "Function (FPSOPrecacheRequestResult)",
    "insertText": "PrecacheComputePipelineState(FRHIComputeShader* ComputeShader, const TCHAR* Name = nullptr, bool bForcePrecache = false)"
  },
  {
    "label": "PrecacheGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FPSOPrecacheRequestResult)",
    "insertText": "PrecacheGraphicsPipelineState(const FGraphicsPipelineStateInitializer& PipelineStateInitializer)"
  },
  {
    "label": "CheckPipelineStateInCache()",
    "kind": "Method",
    "detail": "Function (EPSOPrecacheResult)",
    "insertText": "CheckPipelineStateInCache(const FGraphicsPipelineStateInitializer& PipelineStateInitializer)"
  },
  {
    "label": "CheckPipelineStateInCache()",
    "kind": "Method",
    "detail": "Function (EPSOPrecacheResult)",
    "insertText": "CheckPipelineStateInCache(FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "IsPrecaching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecaching(const FPSOPrecacheRequestID& PSOPrecacheRequestID)"
  },
  {
    "label": "IsPrecaching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecaching(const FGraphicsPipelineStateInitializer& PipelineStateInitializer)"
  },
  {
    "label": "IsPrecaching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecaching(FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "IsPrecaching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecaching()"
  },
  {
    "label": "BoostPrecachePriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoostPrecachePriority(EPSOPrecachePriority PSOPrecachePriority, const FPSOPrecacheRequestID& PSOPrecacheRequestID)"
  },
  {
    "label": "NumActivePrecacheRequests()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NumActivePrecacheRequests()"
  },
  {
    "label": "PrecachePSOsBoostToHighestPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrecachePSOsBoostToHighestPriority(bool bForceHighest)"
  },
  {
    "label": "ResetPSOHitchTrackingStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPSOHitchTrackingStats()"
  },
  {
    "label": "FindRayTracingHitGroupIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindRayTracingHitGroupIndex(FRayTracingPipelineState* Pipeline, FRHIRayTracingShader* HitGroupShader, bool bRequired = true)"
  },
  {
    "label": "FindRayTracingCallableShaderIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindRayTracingCallableShaderIndex(FRayTracingPipelineState* Pipeline, FRHIRayTracingShader* CallableShader, bool bRequired = true)"
  },
  {
    "label": "FindRayTracingMissShaderIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindRayTracingMissShaderIndex(FRayTracingPipelineState* Pipeline, FRHIRayTracingShader* MissShader, bool bRequired = true)"
  }
]