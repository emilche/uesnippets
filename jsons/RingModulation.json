[
  {
    "label": "FRingModulation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRingModulation"
  },
  {
    "label": "FRingModulation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Osc . h \" # include \" DSP / MultithreadedPatching . h \" namespace Audio { class FRingModulation { public :)",
    "insertText": "FRingModulation()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const float InSampleRate, const int32 InNumChannels)"
  },
  {
    "label": "SetModulatorWaveType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModulatorWaveType(const EOsc::Type InType)"
  },
  {
    "label": "SetModulationFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModulationFrequency(const float InModulationFrequency)"
  },
  {
    "label": "SetModulationDepth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModulationDepth(const float InModulationDepth)"
  },
  {
    "label": "SetExternalPatchSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExternalPatchSource(Audio::FPatchOutputStrongPtr InPatch)"
  },
  {
    "label": "SetDryLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDryLevel(const float InDryLevel)"
  },
  {
    "label": "SetWetLevel()",
    "kind": "Method",
    "detail": "Function (DryLevel = InDryLevel ; } void)",
    "insertText": "SetWetLevel(const float InWetLevel)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(const float* InBuffer, const int32 InNumSamples, float* OutBuffer)"
  },
  {
    "label": "UpdateScale()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateScale()"
  }
]