[
  {
    "label": "FOpenGLDynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLDynamicRHI"
  },
  {
    "label": "FOpenGLLinkedProgram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLLinkedProgram"
  },
  {
    "label": "FOpenGLTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLTexture"
  },
  {
    "label": "FOpenGLViewableResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLViewableResource"
  },
  {
    "label": "FOpenGLShaderResourceView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLShaderResourceView"
  },
  {
    "label": "FOpenGLUnorderedAccessView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLUnorderedAccessView"
  },
  {
    "label": "FOpenGLView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLView"
  },
  {
    "label": "TOpenGLBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOpenGLBuffer"
  },
  {
    "label": "FOpenGLBasePixelBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLBasePixelBuffer"
  },
  {
    "label": "FOpenGLBaseBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLBaseBuffer"
  },
  {
    "label": "FOpenGLEUniformBufferData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLEUniformBufferData"
  },
  {
    "label": "FOpenGLUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLUniformBuffer"
  },
  {
    "label": "TOpenGLStreamedBufferArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOpenGLStreamedBufferArray"
  },
  {
    "label": "FOpenGLVertexElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLVertexElement"
  },
  {
    "label": "FOpenGLVertexDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLVertexDeclaration"
  },
  {
    "label": "FOpenGLBoundShaderState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLBoundShaderState"
  },
  {
    "label": "FTextureEvictionLRU",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureEvictionLRU"
  },
  {
    "label": "FTextureEvictionParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureEvictionParams"
  },
  {
    "label": "FOpenGLTextureDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLTextureDesc"
  },
  {
    "label": "FOpenGLTextureCreateDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLTextureCreateDesc"
  },
  {
    "label": "OPENGLDRV_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENGLDRV_API"
  },
  {
    "label": "EAliasConstructorParam",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAliasConstructorParam"
  },
  {
    "label": "FOpenGLSamplerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLSamplerState"
  },
  {
    "label": "FOpenGLRenderQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLRenderQuery"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FActiveQueries",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveQueries"
  },
  {
    "label": "FQueryPool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryPool"
  },
  {
    "label": "FOpenGLRenderQuery_RHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLRenderQuery_RHI"
  },
  {
    "label": "FOpenGLEventQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLEventQuery"
  },
  {
    "label": "FOpenGLViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLViewport"
  },
  {
    "label": "FPlatformOpenGLContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformOpenGLContext"
  },
  {
    "label": "FOpenGLGPUFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLGPUFence"
  },
  {
    "label": "FOpenGLGPUFenceProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLGPUFenceProxy"
  },
  {
    "label": "FOpenGLStagingBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLStagingBuffer"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TOpenGLResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOpenGLResourceTraits"
  },
  {
    "label": "OnBufferDeletion()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" OpenGLUtil . h \" # include \" OpenGLPlatform . h \" # include \" OpenGL . h \" # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Array . h \" # include \" Math / UnrealMathUtility . h \" # include \" Logging / LogMacros . h \" # include \" Containers / BitArray . h \" # include \" Math / IntPoint . h \" # include \" Misc / CommandLine . h \" # include \" Templates / RefCounting . h \" # include \" Stats / Stats . h \" # include \" RHI . h \" # include \" BoundShaderStateCache . h \" # include \" RenderResource . h \" # include \" OpenGLShaderResources . h \" # include \" PsoLruCache . h \" class FOpenGLDynamicRHI ; class FOpenGLLinkedProgram ; class FOpenGLTexture ; typedef TArray<ANSICHAR> FAnsiCharArray ; void)",
    "insertText": "OnBufferDeletion(GLuint BufferResource)"
  },
  {
    "label": "OnPixelBufferDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPixelBufferDeletion(GLuint PixelBufferResource)"
  },
  {
    "label": "OnUniformBufferDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUniformBufferDeletion(GLuint UniformBufferResource, uint32 AllocatedSize, bool bStreamDraw, uint32 Offset, uint8* Pointer)"
  },
  {
    "label": "OnProgramDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnProgramDeletion(GLint ProgramResource)"
  },
  {
    "label": "CachedBindBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachedBindBuffer(GLenum Type, GLuint Buffer)"
  },
  {
    "label": "CachedBindPixelUnpackBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachedBindPixelUnpackBuffer(GLenum Type, GLuint Buffer)"
  },
  {
    "label": "CachedBindUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachedBindUniformBuffer(GLuint Buffer)"
  },
  {
    "label": "IsUniformBufferBound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUniformBufferBound(GLuint Buffer)"
  },
  {
    "label": "UpdateUniformBufferStats()",
    "kind": "Method",
    "detail": "Function (namespace OpenGLConsoleVariables { int32 bUseMapBuffer ; int32 MaxSubDataSize ; int32 bUseStagingBuffer ; int32 bUseBufferDiscard ; } ; # if PLATFORM_WINDOWS # define RESTRICT_SUBDATA_SIZE 1 # else # define RESTRICT_SUBDATA_SIZE 0 # endif namespace OpenGLBufferStats { void)",
    "insertText": "UpdateUniformBufferStats(int64 BufferSize, bool bAllocating)"
  },
  {
    "label": "UpdateBufferStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBufferStats(const FRHIBufferDesc& BufferDesc, bool bAllocating)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (} # define OPENGLRHI_DETAILED_STATS 0 # if OPENGLRHI_DETAILED_STATS)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"MapBuffer time\"),STAT_OpenGLMapBufferTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"UnmapBuffer time\"),STAT_OpenGLUnmapBufferTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER_DETAILED()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_CYCLE_COUNTER_DETAILED(Stat) SCOPE_CYCLE_COUNTER(Stat) #define DETAILED_QUICK_SCOPE_CYCLE_COUNTER(x) QUICK_SCOPE_CYCLE_COUNTER(x) #else #define SCOPE_CYCLE_COUNTER_DETAILED(Stat) #define DETAILED_QUICK_SCOPE_CYCLE_COUNTER(x) #endif #define GLDEBUG_LABELS_ENABLED (!UE_BUILD_SHIPPING)"
  },
  {
    "label": "FOpenGLViewableResource()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FOpenGLViewableResource()"
  },
  {
    "label": "HasLinkedViews()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasLinkedViews()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : class FOpenGLShaderResourceView ; class FOpenGLUnorderedAccessView ; class FOpenGLView* LinkedViews = nullptr ; } ; typedef)",
    "insertText": "void(*BufferBindFunction)( GLenum Type, GLuint Buffer)"
  },
  {
    "label": "LoadData()",
    "kind": "Method",
    "detail": "Function (template<BaseType,BufferBindFunction BufBind> class TOpenGLBuffer : public BaseType { void)",
    "insertText": "LoadData(uint32 InOffset, uint32 InSize, const void* InData)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (const uint8*)",
    "insertText": "Data(const uint8*)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint32 BlockSize = OpenGLConsoleVariables::MaxSubDataSize ;)",
    "insertText": "if(BlockSize > 0)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 BufferSize = FMath::Min<)",
    "insertText": "uint32(BlockSize, InSize)"
  },
  {
    "label": "BufferSubData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BufferSubData(Type, InOffset, BufferSize, Data)"
  },
  {
    "label": "BufferSubData()",
    "kind": "Method",
    "detail": "Function (InOffset + = BufferSize ; InSize - = BufferSize ; Data + = BufferSize ; } } else {)",
    "insertText": "BufferSubData(Type, InOffset, InSize, InData)"
  },
  {
    "label": "GetAccess()",
    "kind": "Method",
    "detail": "Function (} } GLenum)",
    "insertText": "GetAccess()"
  },
  {
    "label": "TOpenGLBuffer()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "TOpenGLBuffer(FRHICommandListBase* RHICmdList, GLenum InType, FRHIBufferDesc const& BufferDesc, const void *InData) : BaseType(BufferDesc) , Resource(0) , Type(InType) , bIsLocked(false) , bIsLockReadOnly(false) , bLockBufferWasAllocated(false) , LockSize(0) , LockOffset(0) , LockBuffer(nullptr)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (void* LocalCopy = RHICmdList ->)",
    "insertText": "Alloc(BaseType::GetSize(), 16)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(LocalCopy, InData, BaseType::GetSize())"
  },
  {
    "label": "InData()",
    "kind": "Method",
    "detail": "Function (InData = LocalCopy ; } auto InitLambda = [ this,)",
    "insertText": "InData()"
  },
  {
    "label": "GenBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenBuffers(1, &Resource)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bind()"
  },
  {
    "label": "glBufferData()",
    "kind": "Method",
    "detail": "Function (# if ! RESTRICT_SUBDATA_SIZE)",
    "insertText": "glBufferData(Type, BaseType::GetSize(), InData, GetAccess())"
  },
  {
    "label": "glBufferData()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "glBufferData(Type, BaseType::GetSize(), nullptr, GetAccess())"
  },
  {
    "label": "LoadData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadData(0, BaseType::GetSize(), InData)"
  },
  {
    "label": "UpdateBufferStats()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "UpdateBufferStats(BaseType::GetDesc(), true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(!BufferDesc.IsNull())"
  },
  {
    "label": "EnqueueLambda()",
    "kind": "Method",
    "detail": "Function (RHICmdList ->)",
    "insertText": "EnqueueLambda([Lambda = MoveTemp(InitLambda)](FRHICommandListBase&) { Lambda(); })"
  },
  {
    "label": "InitLambda()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "InitLambda()"
  },
  {
    "label": "TOpenGLBuffer()",
    "kind": "Method",
    "detail": "Function (} } } ~)",
    "insertText": "TOpenGLBuffer()"
  },
  {
    "label": "ReleaseOwnership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseOwnership()"
  },
  {
    "label": "BufBind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BufBind(Type, Resource)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "Lock(uint32 InOffset, uint32 InSize, bool bReadOnly, bool bDiscard)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER_DETAILED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER_DETAILED(STAT_OpenGLMapBufferTime)"
  },
  {
    "label": "bDiscard()",
    "kind": "Method",
    "detail": "Function (bIsLocked = true ; bIsLockReadOnly = bReadOnly ; uint8* Data = NULL ;)",
    "insertText": "bDiscard(bDiscard || (!bReadOnly && InSize == BaseType::GetSize())) && FOpenGL::DiscardFrameBufferToResize()"
  },
  {
    "label": "bUseMapBuffer()",
    "kind": "Method",
    "detail": "Function (bool const)",
    "insertText": "bUseMapBuffer(bReadOnly || OpenGLConsoleVariables::bUseMapBuffer)"
  },
  {
    "label": "DiscardSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "DiscardSize(bDiscard && !bUseMapBuffer && InSize == BaseType::GetSize() && !RESTRICT_SUBDATA_SIZE) ? 0 : BaseType::GetSize()"
  },
  {
    "label": "glBufferData()",
    "kind": "Method",
    "detail": "Function (# if 0)",
    "insertText": "glBufferData(Type, DiscardSize, NULL, GL_STATIC_DRAW)"
  },
  {
    "label": "glBufferData()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "glBufferData(Type, DiscardSize, NULL, GetAccess())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "if(bUseMapBuffer)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (FOpenGL::EResourceLockMode LockMode = bReadOnly ? FOpenGL::EResourceLockMode::RLM_ReadOnly : FOpenGL::EResourceLockMode::RLM_WriteOnly ; Data = static_cast<)",
    "insertText": "uint8(FOpenGL::MapBufferRange( Type, InOffset, InSize, LockMode ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LockOffset = InOffset ; LockSize = InSize ; LockBuffer = Data ; bLockBufferWasAllocated = false ; } else { LockOffset = InOffset ; LockSize = InSize ;)",
    "insertText": "if(CachedBuffer && InSize <= CachedBufferSize)"
  },
  {
    "label": "ReleaseCachedBuffer()",
    "kind": "Method",
    "detail": "Function (LockBuffer = CachedBuffer ; CachedBuffer = nullptr ; } else {)",
    "insertText": "ReleaseCachedBuffer()"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (LockBuffer =)",
    "insertText": "Malloc(InSize)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (CachedBufferSize = InSize ; } Data = static_cast<)",
    "insertText": "uint8(LockBuffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bLockBufferWasAllocated = true ; })",
    "insertText": "if(Data == nullptr)"
  },
  {
    "label": "LockWriteOnlyUnsynchronized()",
    "kind": "Method",
    "detail": "Function (} return Data ; } uint8*)",
    "insertText": "LockWriteOnlyUnsynchronized(uint32 InOffset, uint32 InSize, bool bDiscard)"
  },
  {
    "label": "bDiscard()",
    "kind": "Method",
    "detail": "Function (bIsLocked = true ; bIsLockReadOnly = false ; uint8* Data = NULL ;)",
    "insertText": "bDiscard(bDiscard || InSize == BaseType::GetSize()) && FOpenGL::DiscardFrameBufferToResize()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (} return Data ; } void)",
    "insertText": "Unlock()"
  },
  {
    "label": "UnmapBufferRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnmapBufferRange(Type, LockOffset, LockSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LockBuffer = NULL ; } else { # if ! RESTRICT_SUBDATA_SIZE)",
    "insertText": "if(LockSize == BaseType::GetSize())"
  },
  {
    "label": "glBufferData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBufferData(Type, BaseType::GetSize(), LockBuffer, GetAccess())"
  },
  {
    "label": "BufferSubData()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "BufferSubData(Type, 0, LockSize, LockBuffer)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(LockBuffer != NULL)"
  },
  {
    "label": "BufferSubData()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "BufferSubData(Type, LockOffset, LockSize, LockBuffer)"
  },
  {
    "label": "LoadData()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "LoadData(LockOffset, LockSize, LockBuffer)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "check(bLockBufferWasAllocated)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (CachedBuffer = LockBuffer ; CachedBufferSize = FMath::Max<)",
    "insertText": "GLuint(CachedBufferSize, LockSize)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Free(LockBuffer)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} LockBuffer = NULL ; bLockBufferWasAllocated = false ; LockSize = 0 ; } bIsLocked = false ; } } void)",
    "insertText": "Update(void *InData, uint32 InOffset, uint32 InSize, bool bDiscard)"
  },
  {
    "label": "LoadData()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "LoadData(InOffset, InSize, InData)"
  },
  {
    "label": "IsDynamic()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "IsDynamic()"
  },
  {
    "label": "IsLocked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLocked()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(CachedBuffer)"
  },
  {
    "label": "TakeOwnership()",
    "kind": "Method",
    "detail": "Function (CachedBuffer = nullptr ; CachedBufferSize = 0 ; } } void)",
    "insertText": "TakeOwnership(TOpenGLBuffer& Other)"
  },
  {
    "label": "TakeOwnership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeOwnership(Other)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogRHI, Warning, TEXT(\"Destroying TOpenGLBuffer without returning memory to the driver; possibly called RHIMapStagingSurface() but didn't call RHIUnmapStagingSurface()? Resource %u\"), Resource)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(BaseType::OnDelete(Resource, BaseType::GetSize(), false, 0))"
  },
  {
    "label": "DeleteBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteBuffers(1, &Resource)"
  },
  {
    "label": "UpdateBufferStats()",
    "kind": "Method",
    "detail": "Function (Resource = 0 ; } LockBuffer = nullptr ;)",
    "insertText": "UpdateBufferStats(BaseType::GetDesc(), false)"
  },
  {
    "label": "FOpenGLBasePixelBuffer()",
    "kind": "Method",
    "detail": "Function (} GLuint Resource ; GLenum Type ; private : uint32 bIsLocked : 1 ; uint32 bIsLockReadOnly : 1 ; uint32 bLockBufferWasAllocated : 1 ; GLuint LockSize ; GLuint LockOffset ; void* LockBuffer ; void* CachedBuffer = nullptr ; GLuint CachedBufferSize = 0 ; } ; class FOpenGLBasePixelBuffer : public FRefCountedObject { public :)",
    "insertText": "FOpenGLBasePixelBuffer(FRHIBufferDesc const& BufferDesc) : Desc(BufferDesc)"
  },
  {
    "label": "OnDelete()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnDelete(GLuint Resource,uint32 Size,bool bStreamDraw,uint32 Offset)"
  },
  {
    "label": "OnPixelBufferDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPixelBufferDeletion(Resource)"
  },
  {
    "label": "Null()",
    "kind": "Method",
    "detail": "Function (Desc = Other . Desc ; Other . Desc =)",
    "insertText": "Null()"
  },
  {
    "label": "FOpenGLBaseBuffer()",
    "kind": "Method",
    "detail": "Function (} private : FRHIBufferDesc Desc ; } ; class FOpenGLBaseBuffer : public FRHIBuffer,public FOpenGLViewableResource { public :)",
    "insertText": "FOpenGLBaseBuffer(FRHIBufferDesc const& BufferDesc) : FRHIBuffer(BufferDesc)"
  },
  {
    "label": "LLM_SCOPED_PAUSE_TRACKING_WITH_ENUM_AND_AMOUNT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPED_PAUSE_TRACKING_WITH_ENUM_AND_AMOUNT(ELLMTag::GraphicsPlatform, (int64)GetSize(), ELLMTracker::Platform, ELLMAllocType::None)"
  },
  {
    "label": "LLM_SCOPED_PAUSE_TRACKING_WITH_ENUM_AND_AMOUNT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPED_PAUSE_TRACKING_WITH_ENUM_AND_AMOUNT(ELLMTag::Meshes, (int64)GetSize(), ELLMTracker::Default, ELLMAllocType::None)"
  },
  {
    "label": "FOpenGLBaseBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FOpenGLBaseBuffer()"
  },
  {
    "label": "LLM_SCOPED_PAUSE_TRACKING_WITH_ENUM_AND_AMOUNT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPED_PAUSE_TRACKING_WITH_ENUM_AND_AMOUNT(ELLMTag::GraphicsPlatform, -(int64)GetSize(), ELLMTracker::Platform, ELLMAllocType::None)"
  },
  {
    "label": "LLM_SCOPED_PAUSE_TRACKING_WITH_ENUM_AND_AMOUNT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPED_PAUSE_TRACKING_WITH_ENUM_AND_AMOUNT(ELLMTag::Meshes, -(int64)GetSize(), ELLMTracker::Default, ELLMAllocType::None)"
  },
  {
    "label": "TakeOwnership()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "TakeOwnership(FOpenGLBaseBuffer& Other)"
  },
  {
    "label": "OnBufferDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBufferDeletion(Resource)"
  },
  {
    "label": "SizeInUint32s()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SizeInUint32s(SizeInBytes + 3)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "Empty(SizeInUint32s)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "AddUninitialized(SizeInUint32s)"
  },
  {
    "label": "UpdateUniformBufferStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUniformBufferStats(Data.GetAllocatedSize(), true)"
  },
  {
    "label": "FOpenGLEUniformBufferData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FOpenGLEUniformBufferData()"
  },
  {
    "label": "UpdateUniformBufferStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUniformBufferStats(Data.GetAllocatedSize(), false)"
  },
  {
    "label": "FOpenGLUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} TArray<uint32> Data ; } ; typedef TRefCountPtr<FOpenGLEUniformBufferData> FOpenGLEUniformBufferDataRef ; class FOpenGLUniformBuffer : public FRHIUniformBuffer { public : GLuint Resource ; uint32 Offset ; uint32 RangeSize ; uint8* PersistentlyMappedBuffer ; uint32 UniqueID ; FOpenGLEUniformBufferDataRef EmulatedBufferData ; uint32 AllocatedSize ; bool bStreamDraw ; bool bIsEmulatedUniformBuffer ; bool bOwnsResource ;)",
    "insertText": "FOpenGLUniformBuffer(const FRHIUniformBufferLayout* InLayout)"
  },
  {
    "label": "SetGLUniformBufferParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGLUniformBufferParams(GLuint InResource, uint32 InOffset, uint8* InPersistentlyMappedBuffer, uint32 InAllocatedSize, FOpenGLEUniformBufferDataRef InEmulatedBuffer, bool bInStreamDraw)"
  },
  {
    "label": "FOpenGLUniformBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FOpenGLUniformBuffer()"
  },
  {
    "label": "GetResourceTable()",
    "kind": "Method",
    "detail": "Function (TArray<TRefCountPtr<FRHIResource>>&)",
    "insertText": "GetResourceTable()"
  },
  {
    "label": "TOpenGLStreamedBufferArray()",
    "kind": "Method",
    "detail": "Function (} ; # define MAX_STREAMED_BUFFERS_IN_ARRAY 2 # define MIN_DRAWS_IN_SINGLE_BUFFER 1 6 template<BaseType,uint32 Stride> class TOpenGLStreamedBufferArray { public :)",
    "insertText": "TOpenGLStreamedBufferArray(void)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(uint32 InitialBufferSize)"
  },
  {
    "label": "BaseType()",
    "kind": "Method",
    "detail": "Function (Buffer [ BufferIndex ] = new)",
    "insertText": "BaseType(Stride, InitialBufferSize, BUF_Volatile, NULL, true)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (} CurrentBufferIndex = 0 ; CurrentOffset = 0 ; LastOffset = 0 ; MinNeededBufferSize = InitialBufferSize / MIN_DRAWS_IN_SINGLE_BUFFER ; } void)",
    "insertText": "Cleanup(void)"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (Buffer [ BufferIndex ] .)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (} } uint8*)",
    "insertText": "Lock(uint32 DataSize)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (DataSize =)",
    "insertText": "Align(DataSize, (1<<8))"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (uint32 NeededBufSize =)",
    "insertText": "Align(MIN_DRAWS_IN_SINGLE_BUFFER * DataSize, (1 << 20))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MinNeededBufferSize = NeededBufSize ; } bool bDiscard = false ;)",
    "insertText": "if(Buffer[CurrentBufferIndex]->GetSize() < CurrentOffset + DataSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + CurrentBufferIndex ;)",
    "insertText": "if(CurrentBufferIndex == MAX_STREAMED_BUFFERS_IN_ARRAY)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrentBufferIndex = 0 ; } CurrentOffset = 0 ;)",
    "insertText": "if(MinNeededBufferSize > Buffer[CurrentBufferIndex]->GetSize())"
  },
  {
    "label": "BaseType()",
    "kind": "Method",
    "detail": "Function (Buffer [ CurrentBufferIndex ] = new)",
    "insertText": "BaseType(Stride, MinNeededBufferSize, BUF_Volatile)"
  },
  {
    "label": "LockWriteOnlyUnsynchronized()",
    "kind": "Method",
    "detail": "Function (} bDiscard = true ; } LastOffset = CurrentOffset ; CurrentOffset + = DataSize ; return Buffer [ CurrentBufferIndex ] ->)",
    "insertText": "LockWriteOnlyUnsynchronized(LastOffset, DataSize, bDiscard)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Unlock(void)"
  },
  {
    "label": "GetPendingBuffer()",
    "kind": "Method",
    "detail": "Function (} BaseType*)",
    "insertText": "GetPendingBuffer(void)"
  },
  {
    "label": "FOpenGLVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TArray<FOpenGLVertexElement,TFixedAllocator<MaxVertexElementCount>> FOpenGLVertexElements ; class FOpenGLVertexDeclaration : public FRHIVertexDeclaration { public : FOpenGLVertexElements VertexElements ; uint16 StreamStrides [ MaxVertexElementCount ] ;)",
    "insertText": "FOpenGLVertexDeclaration(const FOpenGLVertexElements& InElements, const uint16* InStrides) : VertexElements(InElements)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(StreamStrides, InStrides, sizeof(StreamStrides))"
  },
  {
    "label": "GetInitializer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetInitializer(FVertexDeclarationElementList& Init)"
  },
  {
    "label": "FindOrCreateLinkedProgram()",
    "kind": "Method",
    "detail": "Function (} ; class FOpenGLBoundShaderState : public FRHIBoundShaderState { FOpenGLLinkedProgram*)",
    "insertText": "FindOrCreateLinkedProgram(FOpenGLVertexShader* VertexShader, FOpenGLPixelShader* PixelShader, FOpenGLGeometryShader* GeometryShader)"
  },
  {
    "label": "FOpenGLBoundShaderState()",
    "kind": "Method",
    "detail": "Function (public : FCachedBoundShaderStateLink CacheLink ; uint16 StreamStrides [ MaxVertexElementCount ] ; FOpenGLLinkedProgram* const LinkedProgram ; TRefCountPtr<FOpenGLVertexDeclaration> const VertexDeclaration ; TRefCountPtr<FOpenGLVertexShader> const VertexShader ; TRefCountPtr<FOpenGLPixelShader> const PixelShader ; TRefCountPtr<FOpenGLGeometryShader> const GeometryShader ;)",
    "insertText": "FOpenGLBoundShaderState(FOpenGLVertexDeclaration* InVertexDeclarationRHI, FOpenGLVertexShader* InVertexShaderRHI, FOpenGLPixelShader* InPixelShaderRHI, FOpenGLGeometryShader* InGeometryShaderRHI)"
  },
  {
    "label": "GetTextureNeeds()",
    "kind": "Method",
    "detail": "Function (const TBitArray<>&)",
    "insertText": "GetTextureNeeds(int32& OutMaxTextureStageUsed)"
  },
  {
    "label": "GetUAVNeeds()",
    "kind": "Method",
    "detail": "Function (const TBitArray<>&)",
    "insertText": "GetUAVNeeds(int32& OutMaxUAVUnitUsed)"
  },
  {
    "label": "GetNumUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNumUniformBuffers(int32 NumVertexUniformBuffers[SF_NumGraphicsFrequencies])"
  },
  {
    "label": "NeedsTextureStage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsTextureStage(int32 TextureStageIndex)"
  },
  {
    "label": "MaxTextureStageUsed()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MaxTextureStageUsed()"
  },
  {
    "label": "RequiresDriverInstantiation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresDriverInstantiation()"
  },
  {
    "label": "GetVertexShader()",
    "kind": "Method",
    "detail": "Function (FOpenGLVertexShader*)",
    "insertText": "GetVertexShader()"
  },
  {
    "label": "GetLRUContainer()",
    "kind": "Method",
    "detail": "Function (} ; class FTextureEvictionLRU { private : typedef TPsoLruCache<FOpenGLTexture*,FOpenGLTexture*> FOpenGLTextureLRUContainer ; FCriticalSection TextureLRULock ; FOpenGLTextureLRUContainer&)",
    "insertText": "GetLRUContainer()"
  },
  {
    "label": "TextureLRU()",
    "kind": "Method",
    "detail": "Function (const int32 MaxNumLRUs = 1 0 0 0 0 ; FOpenGLTextureLRUContainer)",
    "insertText": "TextureLRU(MaxNumLRUs)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (FTextureEvictionLRU Lru ; return Lru ; } uint32)",
    "insertText": "Num()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(FOpenGLTexture* TextureBase)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Add(FOpenGLTexture* TextureBase)"
  },
  {
    "label": "Touch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Touch(FOpenGLTexture* TextureBase)"
  },
  {
    "label": "TickEviction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickEviction()"
  },
  {
    "label": "GetLeastRecent()",
    "kind": "Method",
    "detail": "Function (FOpenGLTexture*)",
    "insertText": "GetLeastRecent()"
  },
  {
    "label": "FTextureEvictionParams()",
    "kind": "Method",
    "detail": "Function (} ; class FTextureEvictionParams { public :)",
    "insertText": "FTextureEvictionParams(uint32 NumMips)"
  },
  {
    "label": "FTextureEvictionParams()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTextureEvictionParams()"
  },
  {
    "label": "SetDebugLabelName()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<uint8>> MipImageData ; uint32 bHasRestored : 1 ; FSetElementId LRUNode ; uint32 FrameLastRendered ; # if GLDEBUG_LABELS_ENABLED FAnsiCharArray TextureDebugName ; void)",
    "insertText": "SetDebugLabelName(const FAnsiCharArray& TextureDebugNameIn)"
  },
  {
    "label": "SetDebugLabelName()",
    "kind": "Method",
    "detail": "Function (TextureDebugName = TextureDebugNameIn ; } void)",
    "insertText": "SetDebugLabelName(const ANSICHAR * TextureDebugNameIn)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (TextureDebugName .)",
    "insertText": "Append(TextureDebugNameIn, FCStringAnsi::Strlen(TextureDebugNameIn) + 1)"
  },
  {
    "label": "GetDebugLabelName()",
    "kind": "Method",
    "detail": "Function (} FAnsiCharArray&)",
    "insertText": "GetDebugLabelName()"
  },
  {
    "label": "SetMipData()",
    "kind": "Method",
    "detail": "Function (FAnsiCharArray Dummy ; return Dummy ; } # endif void)",
    "insertText": "SetMipData(uint32 MipIndex, const void* Data, uint32 Bytes)"
  },
  {
    "label": "ReleaseMipData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseMipData(uint32 RetainMips)"
  },
  {
    "label": "CloneMipData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneMipData(const FTextureEvictionParams& Src, uint32 NumMips, int32 SrcOffset, int DstOffset)"
  },
  {
    "label": "GetTotalAllocated()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTotalAllocated()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 TotalAllocated = 0 ;)",
    "insertText": "for(const auto& MipData : MipImageData)"
  },
  {
    "label": "AreAllMipsPresent()",
    "kind": "Method",
    "detail": "Function (} return TotalAllocated ; } bool)",
    "insertText": "AreAllMipsPresent()"
  },
  {
    "label": "FOpenGLTextureDesc()",
    "kind": "Method",
    "detail": "Function (} return bRet ; } } ; class FOpenGLTextureDesc { public :)",
    "insertText": "FOpenGLTextureDesc(FRHITextureDesc const& InDesc)"
  },
  {
    "label": "CanDeferTextureCreation()",
    "kind": "Method",
    "detail": "Function (GLenum Target = GL_NONE ; GLenum Attachment = GL_NONE ; uint32 MemorySize = 0 ; uint8 bCubemap : 1 ; uint8 bArrayTexture : 1 ; uint8 bStreamable : 1 ; uint8 bDepthStencil : 1 ; uint8 bCanCreateAsEvicted : 1 ; uint8 bIsPowerOfTwo : 1 ; uint8 bMultisampleRenderbuffer : 1 ; private : bool)",
    "insertText": "CanDeferTextureCreation()"
  },
  {
    "label": "FOpenGLTextureCreateDesc()",
    "kind": "Method",
    "detail": "Function (} ; class FOpenGLTextureCreateDesc : public FRHITextureCreateDesc,public FOpenGLTextureDesc { public :)",
    "insertText": "FOpenGLTextureCreateDesc(FRHITextureCreateDesc const& CreateDesc) : FRHITextureCreateDesc(CreateDesc) , FOpenGLTextureDesc(CreateDesc)"
  },
  {
    "label": "FOpenGLTexture()",
    "kind": "Method",
    "detail": "Function (} } ; class FOpenGLTexture : public FRHITexture,public FOpenGLViewableResource {)",
    "insertText": "FOpenGLTexture(FOpenGLTexture const&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FOpenGLTexture&)",
    "insertText": "operator(FOpenGLTexture const&)"
  },
  {
    "label": "FOpenGLTexture()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FOpenGLTexture(FRHICommandListBase& RHICmdList, FOpenGLTextureCreateDesc const& CreateDesc)"
  },
  {
    "label": "FOpenGLTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOpenGLTexture(FOpenGLTextureCreateDesc const& CreateDesc, GLuint Resource)"
  },
  {
    "label": "FOpenGLTexture()",
    "kind": "Method",
    "detail": "Function (enum EAliasConstructorParam { AliasResource } ;)",
    "insertText": "FOpenGLTexture(FOpenGLTexture& Texture, const FString& Name, EAliasConstructorParam)"
  },
  {
    "label": "AliasResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AliasResources(FOpenGLTexture& Texture)"
  },
  {
    "label": "FOpenGLTexture()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FOpenGLTexture()"
  },
  {
    "label": "GetResource()",
    "kind": "Method",
    "detail": "Function (GLuint)",
    "insertText": "GetResource()"
  },
  {
    "label": "TryRestoreGLResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryRestoreGLResource()"
  },
  {
    "label": "IsEvicted()",
    "kind": "Method",
    "detail": "Function (Resource = InResource ; } bool)",
    "insertText": "IsEvicted()"
  },
  {
    "label": "GetTextureBaseRHI()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetTextureBaseRHI()"
  },
  {
    "label": "GetLockSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetLockSize(uint32 MipIndex, uint32 ArrayIndex, EResourceLockMode LockMode, uint32& DestStride)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock(uint32 MipIndex, uint32 ArrayIndex)"
  },
  {
    "label": "GetNativeResource()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetNativeResource()"
  },
  {
    "label": "GetAllocatedStorageForMip()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetAllocatedStorageForMip(uint32 MipIndex, uint32 FaceIndex)"
  },
  {
    "label": "SetAllocatedStorageForMip()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAllocatedStorageForMip(uint32 MipIndex, uint32 FaceIndex)"
  },
  {
    "label": "MipIndex()",
    "kind": "Method",
    "detail": "Function (bAllocatedStorage [)",
    "insertText": "MipIndex(bCubemap ? 6 : 1)"
  },
  {
    "label": "SetAllocatedStorage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAllocatedStorage(bool bInAllocatedStorage)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bAllocatedStorage .)",
    "insertText": "Init(bInAllocatedStorage, this->GetNumMips() * (bCubemap ? 6 : 1))"
  },
  {
    "label": "CloneViaCopyImage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CloneViaCopyImage(FOpenGLTexture* Src, uint32 InNumMips, int32 SrcOffset, int32 DstOffset)"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resolve(uint32 MipIndex, uint32 ArrayIndex)"
  },
  {
    "label": "RestoreEvictedGLResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreEvictedGLResource(bool bAttemptToRetainMips)"
  },
  {
    "label": "CanBeEvicted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeEvicted()"
  },
  {
    "label": "TryEvictGLResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryEvictGLResource()"
  },
  {
    "label": "UpdateTextureStats()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateTextureStats(FOpenGLTexture* Texture, bool bAllocating)"
  },
  {
    "label": "RestoreEvictedGLResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreEvictedGLResource(true)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(CanBeEvicted())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().Touch(this)"
  },
  {
    "label": "DeleteGLResource()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "DeleteGLResource()"
  },
  {
    "label": "Fill2DGLTextureImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fill2DGLTextureImage(const FOpenGLTextureFormat& GLFormat, const bool bSRGB, uint32 MipIndex, const void* LockedBuffer, uint32 LockedSize, uint32 ArrayIndex)"
  },
  {
    "label": "GetEffectiveSizeZ()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetEffectiveSizeZ()"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (FRHITextureDesc const& Desc =)",
    "insertText": "GetDesc()"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (} private : GLuint Resource = GL_NONE ; public : GLenum const Target = 0 ; GLenum const Attachment = 0 ; TUniquePtr<FTextureEvictionParams> EvictionParamsPtr ; class FOpenGLSamplerState* SamplerState = nullptr ; private : TArray<TRefCountPtr<FOpenGLPixelBuffer>> PixelBuffers ; TBitArray<TInlineAllocator<1>> bAllocatedStorage ; public : uint32 const MemorySize ; public : uint8 const bIsPowerOfTwo : 1 ; uint8 const bCanCreateAsEvicted : 1 ; uint8 const bStreamable : 1 ; uint8 const bCubemap : 1 ; uint8 const bArrayTexture : 1 ; uint8 const bDepthStencil : 1 ; uint8 const bAlias : 1 ; uint8 const bMultisampleRenderbuffer : 1 ; } ; class FOpenGLRenderQuery { public : enum class EType : uint8 { Timestamp,Occlusion,Disjoint,Num } ; uint64 InvalidDisjointMask = 0 x8000000000000000 ; private : struct FActiveQueries { FOpenGLRenderQuery* First = nullptr ; FOpenGLRenderQuery* Last = nullptr ; int32 Count = 0 ; } ActiveQueries ; struct FQueryPool : public TStaticArray<TArray<)",
    "insertText": "GLuint(uint32)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TArray<GLuint>&)",
    "insertText": "operator(EType InType)"
  },
  {
    "label": "FOpenGLRenderQuery()",
    "kind": "Method",
    "detail": "Function (} } PooledQueries ; FOpenGLRenderQuery** Prev = nullptr ; FOpenGLRenderQuery* Next = nullptr ; uint64 Result = 0 ; GLuint Resource = 0 ; uint8 bSharedContext : 1 = false ; protected : EType const Type : 2 ; std::atomic<uint8> LastCachedBOPCounter = 0 ; uint8 BOPCounter = 0 ; uint8 TOPCounter = 0 ; public :)",
    "insertText": "FOpenGLRenderQuery(EType Type) : Type(Type)"
  },
  {
    "label": "FOpenGLRenderQuery()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FOpenGLRenderQuery()"
  },
  {
    "label": "AcquireGlQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcquireGlQuery()"
  },
  {
    "label": "ReleaseGlQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseGlQuery()"
  },
  {
    "label": "IsLinked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLinked()"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "End()"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetResult()"
  },
  {
    "label": "PollQueryResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollQueryResults()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Link()"
  },
  {
    "label": "Unlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlink()"
  },
  {
    "label": "SetResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResult(uint64 Value)"
  },
  {
    "label": "CheckContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckContext()"
  },
  {
    "label": "FOpenGLRenderQuery_RHI()",
    "kind": "Method",
    "detail": "Function (} ; class FOpenGLRenderQuery_RHI : public FRHIRenderQuery,public FOpenGLRenderQuery { public :)",
    "insertText": "FOpenGLRenderQuery_RHI(ERenderQueryType QueryType) : FOpenGLRenderQuery(QueryType == RQT_Occlusion ? EType::Occlusion : EType::Timestamp)"
  },
  {
    "label": "End_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "End_TopOfPipe()"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (TOPCounter + + ; } bool)",
    "insertText": "GetResult(bool bWait, uint64& OutResult)"
  },
  {
    "label": "UpdateView()",
    "kind": "Method",
    "detail": "Function (} ; class FOpenGLView : public TIntrusiveLinkedList<FOpenGLView> { public : void)",
    "insertText": "UpdateView()"
  },
  {
    "label": "FOpenGLUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} ; class FOpenGLUnorderedAccessView final : public FRHIUnorderedAccessView,public FOpenGLView { public :)",
    "insertText": "FOpenGLUnorderedAccessView(FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "FOpenGLUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FOpenGLUnorderedAccessView()"
  },
  {
    "label": "GetBaseResource()",
    "kind": "Method",
    "detail": "Function (FOpenGLViewableResource*)",
    "insertText": "GetBaseResource()"
  },
  {
    "label": "GetBufferSize()",
    "kind": "Method",
    "detail": "Function (GLuint Resource = 0 ; GLuint BufferResource = 0 ; GLenum Format = 0 ; uint8 UnrealFormat = 0 ; uint32)",
    "insertText": "GetBufferSize()"
  },
  {
    "label": "IsLayered()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLayered()"
  },
  {
    "label": "GetLayer()",
    "kind": "Method",
    "detail": "Function (} GLint)",
    "insertText": "GetLayer()"
  },
  {
    "label": "FOpenGLShaderResourceView()",
    "kind": "Method",
    "detail": "Function (bool OwnsResource = false ; } ; class FOpenGLShaderResourceView final : public FRHIShaderResourceView,public FOpenGLView { public :)",
    "insertText": "FOpenGLShaderResourceView(FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "FOpenGLShaderResourceView()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FOpenGLShaderResourceView()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (GLuint Resource = GL_NONE ; GLenum Target = GL_TEXTURE_BUFFER ; int32 LimitMip = - 1 ; private : void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "ReleaseOpenGLFramebuffers()",
    "kind": "Method",
    "detail": "Function (bool OwnsResource = false ; } ; void)",
    "insertText": "ReleaseOpenGLFramebuffers(FRHITexture* TextureRHI)"
  },
  {
    "label": "FOpenGLEventQuery()",
    "kind": "Method",
    "detail": "Function (class FOpenGLEventQuery { public :)",
    "insertText": "FOpenGLEventQuery()"
  },
  {
    "label": "IssueEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IssueEvent()"
  },
  {
    "label": "WaitForCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForCompletion()"
  },
  {
    "label": "FOpenGLViewport()",
    "kind": "Method",
    "detail": "Function (private : UGLsync Sync = { } ; } ; class FOpenGLViewport : public FRHIViewport { public :)",
    "insertText": "FOpenGLViewport(class FOpenGLDynamicRHI* InOpenGLRHI,void* InWindowHandle,uint32 InSizeX,uint32 InSizeY,bool bInIsFullscreen,EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "FOpenGLViewport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FOpenGLViewport()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(uint32 InSizeX,uint32 InSizeY,bool bInIsFullscreen)"
  },
  {
    "label": "GetSizeXY()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetSizeXY()"
  },
  {
    "label": "GetBackBuffer()",
    "kind": "Method",
    "detail": "Function (} FOpenGLTexture*)",
    "insertText": "GetBackBuffer()"
  },
  {
    "label": "IssueFrameEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IssueFrameEvent()"
  },
  {
    "label": "GetNativeWindow()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetNativeWindow(void** AddParam)"
  },
  {
    "label": "GetGLContext()",
    "kind": "Method",
    "detail": "Function (struct FPlatformOpenGLContext*)",
    "insertText": "GetGLContext()"
  },
  {
    "label": "GetCustomPresent()",
    "kind": "Method",
    "detail": "Function (CustomPresent = InCustomPresent ; } FRHICustomPresent*)",
    "insertText": "GetCustomPresent()"
  },
  {
    "label": "FOpenGLGPUFence()",
    "kind": "Method",
    "detail": "Function (} private : class FOpenGLDynamicRHI ; FOpenGLDynamicRHI* OpenGLRHI ; struct FPlatformOpenGLContext* OpenGLContext ; uint32 SizeX ; uint32 SizeY ; bool bIsFullscreen ; EPixelFormat PixelFormat ; bool bIsValid ; TRefCountPtr<FOpenGLTexture> BackBuffer ; TUniquePtr<FOpenGLEventQuery> FrameSyncEvent ; FCustomPresentRHIRef CustomPresent ; } ; class FOpenGLGPUFence final : public FRHIGPUFence { public :)",
    "insertText": "FOpenGLGPUFence(FName InName)"
  },
  {
    "label": "FOpenGLGPUFence()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FOpenGLGPUFence()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Poll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Poll()"
  },
  {
    "label": "WriteInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInternal()"
  },
  {
    "label": "FOpenGLStagingBuffer()",
    "kind": "Method",
    "detail": "Function (private : struct FOpenGLGPUFenceProxy* Proxy ; } ; class FOpenGLStagingBuffer final : public FRHIStagingBuffer { class FOpenGLDynamicRHI ; public :)",
    "insertText": "FOpenGLStagingBuffer() : FRHIStagingBuffer()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "FOpenGLStagingBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FOpenGLStagingBuffer()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Lock(uint32 Offset, uint32 NumBytes)"
  },
  {
    "label": "GetGPUSizeBytes()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetGPUSizeBytes()"
  }
]