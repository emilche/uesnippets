[
  {
    "label": "FProjectLauncherModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectLauncherModel"
  },
  {
    "label": "SProjectLauncher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncher"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Delegates / Delegate . h \" # include \" GameProjectHelper . h \" # include \" ILauncher . h \" # include \" ILauncherProfileManager . h \" # include \" Misc / Paths . h \" # include \" Misc / ConfigCacheIni . h \" # include \" Misc / App . h \" # include \" Templates / SharedPointer . h \" class FProjectLauncherModel ; class SProjectLauncher ; namespace ELauncherPanels { enum Type { NoTask = 0,Launch,ProfileEditor,Progress,End,} ; })",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnSelectedSProjectLauncherProfileChanged, const ILauncherProfilePtr&, const ILauncherProfilePtr&)"
  },
  {
    "label": "FProjectLauncherModel()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FProjectLauncherModel(const TSharedRef<ITargetDeviceProxyManager>& InDeviceProxyManager, const TSharedRef<ILauncher>& InLauncher, const TSharedRef<ILauncherProfileManager>& InProfileManager) : DeviceProxyManager(InDeviceProxyManager) , SProjectLauncher(InLauncher) , ProfileManager(InProfileManager)"
  },
  {
    "label": "OnProfileAdded()",
    "kind": "Method",
    "detail": "Function (ProfileManager ->)",
    "insertText": "OnProfileAdded().AddRaw(this, &FProjectLauncherModel::HandleProfileManagerProfileAdded)"
  },
  {
    "label": "OnProfileRemoved()",
    "kind": "Method",
    "detail": "Function (ProfileManager ->)",
    "insertText": "OnProfileRemoved().AddRaw(this, &FProjectLauncherModel::HandleProfileManagerProfileRemoved)"
  },
  {
    "label": "LoadConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadConfig()"
  },
  {
    "label": "FProjectLauncherModel()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FProjectLauncherModel()"
  },
  {
    "label": "OnProfileAdded()",
    "kind": "Method",
    "detail": "Function (ProfileManager ->)",
    "insertText": "OnProfileAdded().RemoveAll(this)"
  },
  {
    "label": "OnProfileRemoved()",
    "kind": "Method",
    "detail": "Function (ProfileManager ->)",
    "insertText": "OnProfileRemoved().RemoveAll(this)"
  },
  {
    "label": "SaveConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveConfig()"
  },
  {
    "label": "GetDeviceProxyManager()",
    "kind": "Method",
    "detail": "Function (} public : const TSharedRef<ITargetDeviceProxyManager>&)",
    "insertText": "GetDeviceProxyManager()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ILauncherProfile> PreviousProfile = SelectedProfile ; SelectedProfile = Profile ; ProfileSelectedDelegate .)",
    "insertText": "Broadcast(Profile, PreviousProfile)"
  },
  {
    "label": "OnProfileListChanged()",
    "kind": "Method",
    "detail": "Function (} } } public : FSimpleMulticastDelegate&)",
    "insertText": "OnProfileListChanged()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString ProjectPath ;)",
    "insertText": "if(FPaths::IsProjectFilePathSet())"
  },
  {
    "label": "GetProjectFilePath()",
    "kind": "Method",
    "detail": "Function (ProjectPath =)",
    "insertText": "GetProjectFilePath()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FGameProjectHelper::IsGameAvailable(FApp::GetProjectName()))"
  },
  {
    "label": "RootDir()",
    "kind": "Method",
    "detail": "Function (ProjectPath =)",
    "insertText": "RootDir() / FApp::GetProjectName() / FApp::GetProjectName() + TEXT(\".uproject\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(GConfig != nullptr)"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (GConfig ->)",
    "insertText": "GetString(TEXT(\"FProjectLauncherModel\"), TEXT(\"SelectedProjectPath\"), ProjectPath, GEngineIni)"
  },
  {
    "label": "SetProjectPath()",
    "kind": "Method",
    "detail": "Function (} ProfileManager ->)",
    "insertText": "SetProjectPath(ProjectPath)"
  },
  {
    "label": "GetProjectPath()",
    "kind": "Method",
    "detail": "Function (FString ProjectPath = ProfileManager ->)",
    "insertText": "GetProjectPath()"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (GConfig ->)",
    "insertText": "SetString(TEXT(\"FProjectLauncherModel\"), TEXT(\"SelectedProjectPath\"), *ProjectPath, GEngineIni)"
  },
  {
    "label": "HandleProfileManagerProfileAdded()",
    "kind": "Method",
    "detail": "Function (} } private : void)",
    "insertText": "HandleProfileManagerProfileAdded(const TSharedRef<ILauncherProfile>& Profile)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (ProfileListChangedDelegate .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "SelectProfile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectProfile(Profile)"
  },
  {
    "label": "HandleProfileManagerProfileRemoved()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleProfileManagerProfileRemoved(const TSharedRef<ILauncherProfile>& Profile)"
  },
  {
    "label": "GetAllProfiles()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<ILauncherProfile>>& Profiles = ProfileManager ->)",
    "insertText": "GetAllProfiles()"
  },
  {
    "label": "SelectProfile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectProfile(Profiles[0])"
  },
  {
    "label": "SelectProfile()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "SelectProfile(nullptr)"
  }
]