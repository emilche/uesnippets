[
  {
    "label": "FWindowsConsoleOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindowsConsoleOutputDevice"
  },
  {
    "label": "FLogHighlight",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogHighlight"
  },
  {
    "label": "FLogStringHighlight",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogStringHighlight"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / OutputDeviceConsole . h \" # include \" UObject / NameTypes . h \" class FWindowsConsoleOutputDevice : public FOutputDeviceConsole { private : Windows::HANDLE ConsoleHandle ; bool OverrideColorSet ; bool bIsAttached ; # if ! UE_BUILD_SHIPPING struct FLogHighlight { FName Category ; const TCHAR* Color = nullptr ; bool)",
    "insertText": "operator(FName InCategory)"
  },
  {
    "label": "FWindowsConsoleOutputDevice()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FWindowsConsoleOutputDevice()"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Show(bool ShowWindow)"
  },
  {
    "label": "IsShown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShown()"
  },
  {
    "label": "IsAttached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAttached()"
  },
  {
    "label": "CanBeUsedOnAnyThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeUsedOnAnyThread()"
  },
  {
    "label": "CanBeUsedOnPanicThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeUsedOnPanicThread()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* Data, ELogVerbosity::Type Verbosity, const class FName& Category, const double Time)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* Data, ELogVerbosity::Type Verbosity, const class FName& Category)"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColor(const TCHAR* Color)"
  }
]