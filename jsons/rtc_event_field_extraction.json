[
  {
    "label": "RtcEventLogEnum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLogEnum"
  },
  {
    "label": "ValuesWithPositions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValuesWithPositions"
  },
  {
    "label": "UnsignedBitWidth()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_FIELD_EXTRACTION_H_ # define LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_FIELD_EXTRACTION_H_ # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / rtc_event_log / rtc_event . h \" # include \" api / units / timestamp . h \" # include \" logging / rtc_event_log / encoder / rtc_event_log_encoder_common . h \" # include \" rtc_base / logging . h \" namespace webrtc_event_logging { uint8_t)",
    "insertText": "UnsignedBitWidth(uint64_t max_magnitude)"
  },
  {
    "label": "SignedBitWidth()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "SignedBitWidth(uint64_t max_pos_magnitude, uint64_t max_neg_magnitude)"
  },
  {
    "label": "MaxUnsignedValueOfBitWidth()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "MaxUnsignedValueOfBitWidth(uint64_t bit_width)"
  },
  {
    "label": "UnsignedDelta()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "UnsignedDelta(uint64_t previous, uint64_t current, uint64_t bit_mask)"
  },
  {
    "label": "EncodeAsUnsigned()",
    "kind": "Method",
    "detail": "Function (} namespace webrtc { template<T,std::enable_if_t<std::is_signed<T>::value,bool> = true> uint64_t)",
    "insertText": "EncodeAsUnsigned(T value)"
  },
  {
    "label": "DecodeFromUnsignedToType()",
    "kind": "Method",
    "detail": "Function (} template<T,std::enable_if_t<std::is_signed<T>::value,bool> = true> T)",
    "insertText": "DecodeFromUnsignedToType(uint64_t value)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T signed_value = 0 ; bool success = webrtc_event_logging::ToSigned<)",
    "insertText": "T(value, &signed_value)"
  },
  {
    "label": "RTC_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_LOG(LS_ERROR)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} template<T> class RtcEventLogEnum {)",
    "insertText": "static_assert(sizeof(T) != sizeof(T), \"Missing specialisation of RtcEventLogEnum for type\")"
  }
]