[
  {
    "label": "FMallocLeakReportOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMallocLeakReportOptions"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMallocLeakDetection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocLeakDetection"
  },
  {
    "label": "FCallstackTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCallstackTrack"
  },
  {
    "label": "FContextString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContextString"
  },
  {
    "label": "FMallocLeakDetectionIgnoreScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocLeakDetectionIgnoreScope"
  },
  {
    "label": "FMallocLeakScopedContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocLeakScopedContext"
  },
  {
    "label": "FMallocLeakReportOptions()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" HAL / MemoryBase . h \" # include \" HAL / ThreadSafeBool . h \" # include \" HAL / UnrealMemory . h \" # include \" Misc / Crc . h \" # include \" Misc / ScopeLock . h \" # ifndef MALLOC_LEAKDETECTION # define MALLOC_LEAKDETECTION 0 # endif struct FMallocLeakReportOptions { enum class ESortOption { SortSize,SortRate,SortHash } ;)",
    "insertText": "FMallocLeakReportOptions()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this, sizeof(FMallocLeakReportOptions))"
  },
  {
    "label": "FCallstackTrack()",
    "kind": "Method",
    "detail": "Function (} uint32 SizeFilter ; float RateFilter ; bool OnlyNonDeleters ; uint32 FrameStart ; uint32 FrameEnd ; ESortOption SortBy ; FOutputDevice* OutputDevice ; } ; # if MALLOC_LEAKDETECTION class FMallocLeakDetection { struct FCallstackTrack {)",
    "insertText": "FCallstackTrack()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this, sizeof(FCallstackTrack))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} int32 Depth = 3 2 ; uint64 CallStack [ Depth ] ; uint32 FirstFrame ; uint32 LastFrame ; uint64 Size ; uint32 Count ; uint32 CachedHash ; uint32 NumCheckPoints ; float SumOfFramesNumbers ; float SumOfFramesNumbersSquared ; float SumOfMemory ; float SumOfMemoryTimesFrameNumber ; float Baseline ; float BytesPerFrame ; bool)",
    "insertText": "operator(const FCallstackTrack& Other)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bEqual = true ;)",
    "insertText": "for(int32 i = 0; i < Depth; ++i)"
  },
  {
    "label": "GetLinearFit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetLinearFit()"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetHash()"
  },
  {
    "label": "MemCrc32()",
    "kind": "Method",
    "detail": "Function (CachedHash =)",
    "insertText": "MemCrc32(CallStack, sizeof(CallStack), 0)"
  },
  {
    "label": "FMallocLeakDetection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMallocLeakDetection()"
  },
  {
    "label": "AddCallstack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCallstack(FCallstackTrack& Callstack)"
  },
  {
    "label": "RemoveCallstack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCallstack(FCallstackTrack& Callstack)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TMap<void*,FCallstackTrack> OpenPointers ; TMap<uint32,FCallstackTrack> UniqueCallstacks ; TSet<uint32> KnownDeleters ; TSet<uint32> KnownTrimmers ; TMap<void*,FString> PointerContexts ; struct FContextString { TCHAR Buffer [ 6 4 ] ; } ; TArray<FContextString> Contexts ; FCriticalSection AllocatedPointersCritical ; bool bRecursive ; bool bCaptureAllocs ; int32 MinAllocationSize ; SIZE_T TotalTracked ; int32 AllocsWithoutCompact ; public : FMallocLeakDetection&)",
    "insertText": "Get()"
  },
  {
    "label": "HandleMallocLeakCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMallocLeakCommand(const TArray< FString >& Args)"
  },
  {
    "label": "SetAllocationCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllocationCollection(bool bEnabled, int32 Size = 0)"
  },
  {
    "label": "IsAllocationCollectionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllocationCollectionEnabled(void)"
  },
  {
    "label": "DumpOpenCallstacks()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DumpOpenCallstacks(const TCHAR* FileName, const FMallocLeakReportOptions& Options = FMallocLeakReportOptions())"
  },
  {
    "label": "CheckpointLinearFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckpointLinearFit()"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Malloc(void* Ptr, SIZE_T Size)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Realloc(void* OldPtr, SIZE_T OldSize, void* NewPtr, SIZE_T NewSize)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* Ptr)"
  },
  {
    "label": "SetDisabledForThisThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisabledForThisThread(const bool Disabled)"
  },
  {
    "label": "IsDisabledForThisThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDisabledForThisThread()"
  },
  {
    "label": "PushContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushContext(const FString& Context)"
  },
  {
    "label": "PushContext()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "PushContext(*Context)"
  },
  {
    "label": "PushContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PushContext(const TCHAR* Context)"
  },
  {
    "label": "PopContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopContext()"
  },
  {
    "label": "GetOpenCallstacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOpenCallstacks(TArray<uint32>& OutCallstacks, SIZE_T& OutTotalSize, const FMallocLeakReportOptions& Options = FMallocLeakReportOptions())"
  },
  {
    "label": "FMallocLeakDetectionIgnoreScope()",
    "kind": "Method",
    "detail": "Function (} ; class FMallocLeakDetectionIgnoreScope { public :)",
    "insertText": "FMallocLeakDetectionIgnoreScope()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().SetDisabledForThisThread(true)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().SetDisabledForThisThread(false)"
  },
  {
    "label": "FMallocLeakDetectionIgnoreScope()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMallocLeakDetectionIgnoreScope(const FMallocLeakDetectionIgnoreScope&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMallocLeakDetectionIgnoreScope&)",
    "insertText": "operator(const FMallocLeakDetectionIgnoreScope&)"
  },
  {
    "label": "FMallocLeakScopedContext()",
    "kind": "Method",
    "detail": "Function (} ; class FMallocLeakScopedContext { public : template<ArgType>)",
    "insertText": "FMallocLeakScopedContext(ArgType&& Context)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().PushContext(Forward<ArgType>(Context))"
  },
  {
    "label": "FMallocLeakScopedContext()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMallocLeakScopedContext()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().PopContext()"
  },
  {
    "label": "FMallocLeakScopedContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMallocLeakScopedContext(const FMallocLeakScopedContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMallocLeakScopedContext&)",
    "insertText": "operator(const FMallocLeakScopedContext&)"
  }
]