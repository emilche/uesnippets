[
  {
    "label": "DxilSignature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilSignature"
  },
  {
    "label": "DxilEntrySignature",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilEntrySignature"
  },
  {
    "label": "DxilSignature()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / DXIL / DxilSignatureElement . h \" # include<memory> # include<string> # include<vector> namespace hlsl { class DxilSignature { public : using Kind = DXIL::SignatureKind ;)",
    "insertText": "DxilSignature(DXIL::ShaderKind shaderKind, DXIL::SignatureKind sigKind, bool useMinPrecision)"
  },
  {
    "label": "DxilSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DxilSignature(DXIL::SigPointKind sigPointKind, bool useMinPrecision)"
  },
  {
    "label": "DxilSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DxilSignature(const DxilSignature &src)"
  },
  {
    "label": "DxilSignature()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DxilSignature()"
  },
  {
    "label": "IsInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInput()"
  },
  {
    "label": "IsOutput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOutput()"
  },
  {
    "label": "CreateElement()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<DxilSignatureElement>)",
    "insertText": "CreateElement()"
  },
  {
    "label": "AppendElement()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "AppendElement(std::unique_ptr<DxilSignatureElement> pSE, bool bSetID = true)"
  },
  {
    "label": "GetElement()",
    "kind": "Method",
    "detail": "Function (DxilSignatureElement&)",
    "insertText": "GetElement(unsigned idx)"
  },
  {
    "label": "GetElements()",
    "kind": "Method",
    "detail": "Function (const std::vector<std::unique_ptr<DxilSignatureElement>>&)",
    "insertText": "GetElements()"
  },
  {
    "label": "IsFullyAllocated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullyAllocated()"
  },
  {
    "label": "NumVectorsUsed()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "NumVectorsUsed(unsigned streamIndex = 0)"
  },
  {
    "label": "UseMinPrecision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseMinPrecision()"
  },
  {
    "label": "GetRowCount()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetRowCount()"
  },
  {
    "label": "DxilEntrySignature()",
    "kind": "Method",
    "detail": "Function (private : DXIL::SigPointKind m_sigPointKind ; std::vector<std::unique_ptr<DxilSignatureElement>> m_Elements ; bool m_UseMinPrecision ; } ; struct DxilEntrySignature {)",
    "insertText": "DxilEntrySignature(DXIL::ShaderKind shaderKind, bool useMinPrecision) : InputSignature(shaderKind, DxilSignature::Kind::Input, useMinPrecision), OutputSignature(shaderKind, DxilSignature::Kind::Output, useMinPrecision), PatchConstOrPrimSignature(shaderKind, DxilSignature::Kind::PatchConstOrPrim, useMinPrecision)"
  },
  {
    "label": "DxilEntrySignature()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DxilEntrySignature(const DxilEntrySignature &src)"
  }
]