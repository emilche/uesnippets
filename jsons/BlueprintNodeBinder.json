[
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "FBindingObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBindingObject"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "IBlueprintNodeBinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBlueprintNodeBinder"
  },
  {
    "label": "FBindingObject()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / Casts . h \" # include \" Templates / Requires . h \" # include \" UObject / Object . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakFieldPtr . h \" # include<type_traits> class UEdGraphNode ; class FBindingObject { TObjectPtr<UObject> Object ; FField* Field ; bool bIsUObject ; public :)",
    "insertText": "FBindingObject() : bIsUObject(false)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<T, UObject*>) > FBindingObject(T InObject) : Object(InObject) , bIsUObject(true)"
  },
  {
    "label": "FBindingObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBindingObject(FField* InField) : Field(InField) , bIsUObject(false)"
  },
  {
    "label": "FBindingObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBindingObject(const FFieldVariant& InFieldOrObject)"
  },
  {
    "label": "IsUObject()",
    "kind": "Method",
    "detail": "Function (bIsUObject = InFieldOrObject .)",
    "insertText": "IsUObject()"
  },
  {
    "label": "ToUObject()",
    "kind": "Method",
    "detail": "Function (Object = InFieldOrObject .)",
    "insertText": "ToUObject()"
  },
  {
    "label": "ToField()",
    "kind": "Method",
    "detail": "Function (} else { Field = InFieldOrObject .)",
    "insertText": "ToField()"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} } template<T)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<T, UObject*>) > FBindingObject& operator=(T InObject)"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (Object = ImplicitConv<)",
    "insertText": "UObject(InObject)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Field = nullptr ; bIsUObject = true ; return* this ; } FBindingObject&)",
    "insertText": "operator(FField* InField)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Object = nullptr ; Field = InField ; bIsUObject = false ; return* this ; } FBindingObject&)",
    "insertText": "operator(TYPE_OF_NULLPTR)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetPathName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetPathName()"
  },
  {
    "label": "GetFullName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetFullName()"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsA(const UClass* InClass)"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsA(const FFieldClass* InClass)"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "IsA()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(!bIsUObject && Field != nullptr)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } return false ; } template<T> T*)",
    "insertText": "Get()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } uint32)",
    "insertText": "GetTypeHash(const FBindingObject& BindingObject)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FBindingObject &Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FBindingObject &Lhs, const UObject* Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const UObject* Lhs, const FBindingObject &Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FBindingObject &Lhs, const FField* Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FField* Lhs, const FBindingObject &Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FBindingObject &Lhs, TYPE_OF_NULLPTR)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(TYPE_OF_NULLPTR, const FBindingObject &Rhs)"
  },
  {
    "label": "AddStructReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddStructReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "IsBindingCompatible()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TStructOpsTypeTraits<FBindingObject> : public TStructOpsTypeTraitsBase2<FBindingObject> { enum { WithAddStructReferencedObjects = true,} ; } ; class IBlueprintNodeBinder { public : typedef TSet<FBindingObject> FBindingSet ; public : bool)",
    "insertText": "IsBindingCompatible(FBindingObject BindingCandidate)"
  },
  {
    "label": "CanBindMultipleObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBindMultipleObjects()"
  },
  {
    "label": "ApplyBindings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyBindings(UEdGraphNode* Node, FBindingSet const& Bindings)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 BindingCount = 0 ;)",
    "insertText": "for(const FBindingObject& Binding : Bindings)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + BindingCount ;)",
    "insertText": "if(!CanBindMultipleObjects())"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (break ; } } })",
    "insertText": "return(BindingCount == Bindings.Num())"
  },
  {
    "label": "BindToNode()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "BindToNode(UEdGraphNode* Node, FBindingObject Binding)"
  }
]