[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMotionControllerSource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMotionControllerSource"
  },
  {
    "label": "IMotionController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMotionController"
  },
  {
    "label": "UPlayerMappableInputConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlayerMappableInputConfig"
  },
  {
    "label": "UEnhancedInputUserSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnhancedInputUserSettings"
  },
  {
    "label": "UInputMappingContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputMappingContext"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" Features / IModularFeature . h \" # include \" IMotionController . generated . h \" enum class EControllerHand : uint8 ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "FMotionControllerSource()",
    "kind": "Method",
    "detail": "Function (NotTracked,InertialOnly,Tracked,} ; struct FMotionControllerSource { FName SourceName ; # if WITH_EDITOR FName EditorCategory ; # endif)",
    "insertText": "FMotionControllerSource(FName InSourceName = NAME_None) : SourceName(InSourceName)"
  },
  {
    "label": "IMotionController()",
    "kind": "Method",
    "detail": "Function (} } ; class IMotionController : public IModularFeature { public : ~)",
    "insertText": "IMotionController()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (} FName FeatureName =)",
    "insertText": "FName(TEXT(\"MotionController\"))"
  },
  {
    "label": "GetModularFeatureName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetModularFeatureName()"
  },
  {
    "label": "GetControllerOrientationAndPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetControllerOrientationAndPosition(const int32 ControllerIndex, const FName MotionSource, FRotator& OutOrientation, FVector& OutPosition, float WorldToMetersScale)"
  },
  {
    "label": "GetControllerOrientationAndPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetControllerOrientationAndPosition(const int32 ControllerIndex, const FName MotionSource, FRotator& OutOrientation, FVector& OutPosition, bool& OutbProvidedLinearVelocity, FVector& OutLinearVelocity, bool& OutbProvidedAngularVelocity, FVector& OutAngularVelocityAsAxisAndLength, bool& OutbProvidedLinearAcceleration, FVector& OutLinearAcceleration, float WorldToMetersScale)"
  },
  {
    "label": "GetControllerOrientationAndPositionForTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetControllerOrientationAndPositionForTime(const int32 ControllerIndex, const FName MotionSource, FTimespan Time, bool& OutTimeWasUsed, FRotator& OutOrientation, FVector& OutPosition, bool& OutbProvidedLinearVelocity, FVector& OutLinearVelocity, bool& OutbProvidedAngularVelocity, FVector& OutAngularVelocityAsAxisAndLength, bool& OutbProvidedLinearAcceleration, FVector& OutLinearAcceleration, float WorldToMetersScale)"
  },
  {
    "label": "AngularVelocityAsAxisAndLengthToRotator()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "AngularVelocityAsAxisAndLengthToRotator(const FVector AngularVelocityAsAxisAndLength)"
  },
  {
    "label": "ToDirectionAndLength()",
    "kind": "Method",
    "detail": "Function (FVector Direction ; double Angle ; AngularVelocityAsAxisAndLength .)",
    "insertText": "ToDirectionAndLength(Direction, Angle)"
  },
  {
    "label": "GetControllerTrackingStatus()",
    "kind": "Method",
    "detail": "Function (} ETrackingStatus)",
    "insertText": "GetControllerTrackingStatus(const int32 ControllerIndex, const FName MotionSource)"
  },
  {
    "label": "EnumerateSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateSources(TArray<FMotionControllerSource>& SourcesOut)"
  },
  {
    "label": "GetCustomParameterValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCustomParameterValue(const FName MotionSource, FName ParameterName, bool& bOutValueFound)"
  },
  {
    "label": "GetHandJointPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHandJointPosition(const FName MotionSource, int jointIndex, FVector& OutPosition)"
  }
]