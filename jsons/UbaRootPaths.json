[
  {
    "label": "RootPaths",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RootPaths"
  },
  {
    "label": "Root",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Root"
  },
  {
    "label": "RegisterRoot()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaHash . h \" # include \" UbaLogger . h \" namespace uba { u8 RootPathsVersion = 1 ; class RootPaths { public : bool)",
    "insertText": "RegisterRoot(Logger& logger, const tchar* rootPath, bool includeInKey = true, u8 id = 0)"
  },
  {
    "label": "RegisterSystemRoots()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterSystemRoots(Logger& logger, u8 startId = 0)"
  },
  {
    "label": "FindRoot()",
    "kind": "Method",
    "detail": "Function (struct Root { TString path ; StringKey shortestPathKey ; u8 index ; bool includeInKey ; } ; const Root*)",
    "insertText": "FindRoot(const StringBufferBase& path)"
  },
  {
    "label": "GetRoot()",
    "kind": "Method",
    "detail": "Function (const TString&)",
    "insertText": "GetRoot(u32 index)"
  },
  {
    "label": "NormalizeString()",
    "kind": "Method",
    "detail": "Function (template<CharType,Func> bool)",
    "insertText": "NormalizeString(Logger& logger, const CharType* str, u64 strLen, const Func& func, const tchar* hint, const tchar* hint2 = TC(\"\"))"
  },
  {
    "label": "NormalizeAndHashFile()",
    "kind": "Method",
    "detail": "Function (CasKey)",
    "insertText": "NormalizeAndHashFile(Logger& logger, const tchar* filename)"
  },
  {
    "label": "InternalRegisterRoot()",
    "kind": "Method",
    "detail": "Function (u8 RootStartByte = ' ' ; private : bool)",
    "insertText": "InternalRegisterRoot(Logger& logger, const tchar* rootPath, bool includeInKey, u8 index)"
  },
  {
    "label": "NormalizeString()",
    "kind": "Method",
    "detail": "Function (Vector<Root> m_roots ; u32 m_shortestRoot = 0 ; u32 m_longestRoot = 0 ; } ; template<CharType,Func> bool)",
    "insertText": "NormalizeString(Logger& logger, const CharType* str, u64 strLen, const Func& func, const tchar* hint, const tchar* hint2)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (auto strEnd = str + strLen ; auto searchPos = str ; u32 destPos = 0 ;)",
    "insertText": "while(true)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (auto absPathChars = searchPos ; CharType lastChar = 0 ;)",
    "insertText": "while(absPathChars < strEnd && !(lastChar == ':' && *absPathChars == PathSeparator))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lastChar =* absPathChars ; + + absPathChars ; })",
    "insertText": "if(absPathChars == strEnd)"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "func(searchPos, strEnd - searchPos, ~0u)"
  },
  {
    "label": "u32()",
    "kind": "Method",
    "detail": "Function (u32 lenOrMore =)",
    "insertText": "u32(pathEndOrMore - pathStart)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (u32 toCopy =)",
    "insertText": "Min(lenOrMore, m_longestRoot)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<5 1 2> path ; path .)",
    "insertText": "Append(pathStart, toCopy)"
  },
  {
    "label": "FindRoot()",
    "kind": "Method",
    "detail": "Function (auto root =)",
    "insertText": "FindRoot(path)"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (logger .)",
    "insertText": "Info(TC(\"PATH WITHOUT ROOT: %s (inside %s%s at offset %u)\"), path.data, hint, hint2, destPos)"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (destPos + = len ;)",
    "insertText": "func(searchPos, len, ~0u)"
  },
  {
    "label": "CharType()",
    "kind": "Method",
    "detail": "Function (} CharType temp = RootStartByte +)",
    "insertText": "CharType(root->index)"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "func(&temp, 1, destPos)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (destPos + = 1 ; searchPos = pathStart + root -> path .)",
    "insertText": "size()"
  },
  {
    "label": "IsNormalized()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsNormalized(const CasKey& key)"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT(key != CasKeyZero)"
  },
  {
    "label": "AsNormalized()",
    "kind": "Method",
    "detail": "Function (} CasKey)",
    "insertText": "AsNormalized(const CasKey& key, bool normalized)"
  },
  {
    "label": "flagField()",
    "kind": "Method",
    "detail": "Function (CasKey newKey = key ; u8)",
    "insertText": "flagField((u8*)&key)"
  }
]