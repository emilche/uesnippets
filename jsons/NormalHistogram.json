[
  {
    "label": "TNormalHistogram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TNormalHistogram"
  },
  {
    "label": "TNormalHistogram()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MathUtil . h \" # include \" VectorTypes . h \" # include \" Sampling / SphericalFibonacci . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> class TNormalHistogram { public : int32 Bins ; TSphericalFibonacci<RealType> BinPoints ; TArray<RealType> WeightedCounts ;)",
    "insertText": "TNormalHistogram(int32 NumBins)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Bins = NumBins ; BinPoints = TSphericalFibonacci<)",
    "insertText": "RealType(NumBins)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (WeightedCounts .)",
    "insertText": "Init(0, BinPoints.Num())"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Count(const TVector<RealType>& Normal, RealType Weight = 1)"
  },
  {
    "label": "FindIndex()",
    "kind": "Method",
    "detail": "Function (int32 BinIndex = BinPoints .)",
    "insertText": "FindIndex(Normal)"
  },
  {
    "label": "FindMaxNormal()",
    "kind": "Method",
    "detail": "Function (WeightedCounts [ BinIndex ] + = Weight ; } TVector<RealType>)",
    "insertText": "FindMaxNormal()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int MaxIndex = 0 ;)",
    "insertText": "for(int k = 1; k < Bins; ++k)"
  },
  {
    "label": "WeightedSpreadMetric()",
    "kind": "Method",
    "detail": "Function (MaxIndex = k ; } } return BinPoints [ MaxIndex ] ; } RealType)",
    "insertText": "WeightedSpreadMetric()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 NumOccupiedBins = 0 ; RealType TotalWeightedCount = 0 ;)",
    "insertText": "for(int k = 0; k < Bins; ++k)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TotalWeightedCount + = WeightedCounts [ k ] ; NumOccupiedBins + + ; } } RealType Metric = 0 ;)",
    "insertText": "for(int32 k = 0; k < Bins; ++k)"
  },
  {
    "label": "MassFraction()",
    "kind": "Method",
    "detail": "Function (RealType MassFraction = WeightedCounts [ k ] / TotalWeightedCount ;)",
    "insertText": "MassFraction(RealType)"
  }
]