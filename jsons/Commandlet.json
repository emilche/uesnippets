[
  {
    "label": "UCommandlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCommandlet"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Commandlet . generated . h \")",
    "insertText": "UCLASS(abstract, transient,MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY()"
  },
  {
    "label": "Main()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Main(const FString& Params)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (FString NextToken ;)",
    "insertText": "while(FParse::Token(CmdLine, NextToken, false))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { Tokens .)",
    "insertText": "Add(MoveTemp(NextToken))"
  },
  {
    "label": "ParseCommandLine()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ParseCommandLine(const TCHAR* CmdLine, TArray<FString>& Tokens, TArray<FString>& Switches, TMap<FString, FString>& Params)"
  },
  {
    "label": "ParseCommandLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseCommandLine(CmdLine, Tokens, Switches)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString& Switch = Switches [ SwitchIdx ] ; TArray<FString> SplitSwitch ; int32 AssignmentIndex = 0 ;)",
    "insertText": "if(Switch.FindChar(TEXT('='), AssignmentIndex))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Params .)",
    "insertText": "Add(Switch.Left(AssignmentIndex), Switch.RightChop(AssignmentIndex+1).TrimQuotes())"
  },
  {
    "label": "CreateCustomEngine()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "CreateCustomEngine(const FString& Params)"
  },
  {
    "label": "TickEngine()",
    "kind": "Method",
    "detail": "Function (} } ; namespace CommandletHelpers { void)",
    "insertText": "TickEngine(class UWorld* InWorld = nullptr, double InDeltaTime = 0.0)"
  }
]