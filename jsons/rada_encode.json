[
  {
    "label": "RR_STRING_JOIN3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<stdint . h> # define RADA_LIBRARY_VERSION 1 # ifndef RR_STRING_JOIN3 # define)",
    "insertText": "RR_STRING_JOIN3(arg1, arg2, arg3) RR_STRING_JOIN_DELAY3(arg1, arg2, arg3) #define RR_STRING_JOIN_DELAY3(arg1, arg2, arg3) RR_STRING_JOIN_IMMEDIATE3(arg1, arg2, arg3) #define RR_STRING_JOIN_IMMEDIATE3(arg1, arg2, arg3) arg1 ## arg2 ## arg3 #endif #ifndef RR_STRING_JOIN #define RR_STRING_JOIN(arg1, arg2) RR_STRING_JOIN_DELAY(arg1, arg2) #define RR_STRING_JOIN_DELAY(arg1, arg2) RR_STRING_JOIN_IMMEDIATE(arg1, arg2) #define RR_STRING_JOIN_IMMEDIATE(arg1, arg2) arg1 ## arg2 #endif #ifdef RADA_WRAP #define RADA_NAME(name) RR_STRING_JOIN3(RADA_WRAP, name##_, RADA_LIBRARY_VERSION ) #else #error RADA_WRAP must be defined (MIRA or UERA) #endif typedef void* RadACompressAllocFnType(uintptr_t ByteCount)"
  },
  {
    "label": "RadACompressFreeFnType()",
    "kind": "Method",
    "detail": "Function (typedef void)",
    "insertText": "RadACompressFreeFnType(void* Ptr)"
  },
  {
    "label": "RADA_NAME()",
    "kind": "Method",
    "detail": "Function (# define RADA_COMPRESS_SUCCESS 0 # define RADA_COMPRESS_ERROR_CHANS 1 # define RADA_COMPRESS_ERROR_SAMPLES 2 # define RADA_COMPRESS_ERROR_RATE 3 # define RADA_COMPRESS_ERROR_QUALITY 4 # define RADA_COMPRESS_ERROR_ALLOCATORS 5 # define RADA_COMPRESS_ERROR_OUTPUT 6 # define RADA_COMPRESS_ERROR_SEEKTABLE 7 # define RADA_COMPRESS_ERROR_SIZE 8 # define RADA_COMPRESS_ERROR_ENCODER 9 # define RADA_COMPRESS_ERROR_ALLOCATION 1 0 # define RadAErrorString)",
    "insertText": "RADA_NAME(RadAErrorString) #define EncodeRadAFile RADA_NAME(EncodeRadAFile) const char* RadAErrorString(uint8_t InError)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (const uint32_t RADA_MAX_CHANS = 3 2 ; const uint32_t RADA_VALID_RATES [ ] = { 4 8 0 0 0,4 4 1 0 0,3 2 0 0 0,2 4 0 0 0 } ; # if)",
    "insertText": "defined(__RADINDLL__) && defined(_MSC_VER) __declspec(dllexport) #endif uint8_t EncodeRadAFile( void* InPcmData, uint64_t InPcmDataLen, uint32_t InPcmRate, uint8_t InPcmChannels, uint8_t InQuality, uint8_t InSeamlessLooping, uint8_t InGenerateSeekTable, uint16_t InSeekTableMaxEntries, RadACompressAllocFnType* InMemAlloc, RadACompressFreeFnType* InMemFree, void** OutData, uint64_t* OutDataLen)"
  }
]