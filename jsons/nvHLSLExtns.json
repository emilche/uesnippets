[
  {
    "label": "NvHitObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NvHitObject"
  },
  {
    "label": "AttrWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AttrWrapper"
  },
  {
    "label": "DummyPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DummyPayload"
  },
  {
    "label": "NvHitObjectMacroDummyPayloadType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NvHitObjectMacroDummyPayloadType"
  },
  {
    "label": "NvShfl()",
    "kind": "Method",
    "detail": "Function (# include \" nvHLSLExtnsInternal . h \" int)",
    "insertText": "NvShfl(int val, uint srcLane, int width = NV_WARP_SIZE)"
  },
  {
    "label": "IncrementCounter()",
    "kind": "Method",
    "detail": "Function (uint index = g_NvidiaExt .)",
    "insertText": "IncrementCounter()"
  },
  {
    "label": "__NvGetShflMaskFromWidth()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . x = val ; g_NvidiaExt [ index ] . src0u . y = srcLane ; g_NvidiaExt [ index ] . src0u . z =)",
    "insertText": "__NvGetShflMaskFromWidth(width)"
  },
  {
    "label": "NvShfl()",
    "kind": "Method",
    "detail": "Function (} int2)",
    "insertText": "NvShfl(int2 val, uint srcLane, int width = NV_WARP_SIZE)"
  },
  {
    "label": "NvShfl()",
    "kind": "Method",
    "detail": "Function (int x =)",
    "insertText": "NvShfl(val.x, srcLane, width)"
  },
  {
    "label": "NvShfl()",
    "kind": "Method",
    "detail": "Function (int y =)",
    "insertText": "NvShfl(val.y, srcLane, width)"
  },
  {
    "label": "NvShfl()",
    "kind": "Method",
    "detail": "Function (} int4)",
    "insertText": "NvShfl(int4 val, uint srcLane, int width = NV_WARP_SIZE)"
  },
  {
    "label": "NvShfl()",
    "kind": "Method",
    "detail": "Function (int z =)",
    "insertText": "NvShfl(val.z, srcLane, width)"
  },
  {
    "label": "NvShfl()",
    "kind": "Method",
    "detail": "Function (int w =)",
    "insertText": "NvShfl(val.w, srcLane, width)"
  },
  {
    "label": "NvShflUp()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "NvShflUp(int val, uint delta, int width = NV_WARP_SIZE)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . x = val ; g_NvidiaExt [ index ] . src0u . y = delta ; g_NvidiaExt [ index ] . src0u .)",
    "insertText": "z(NV_WARP_SIZE - width)"
  },
  {
    "label": "NvShflDown()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "NvShflDown(int val, uint delta, int width = NV_WARP_SIZE)"
  },
  {
    "label": "NvShflXor()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "NvShflXor(int val, uint laneMask, int width = NV_WARP_SIZE)"
  },
  {
    "label": "NvAny()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvAny(int predicate)"
  },
  {
    "label": "NvAll()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvAll(int predicate)"
  },
  {
    "label": "NvBallot()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvBallot(int predicate)"
  },
  {
    "label": "NvGetLaneId()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "NvGetLaneId()"
  },
  {
    "label": "NvGetSpecial()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvGetSpecial(uint subOpCode)"
  },
  {
    "label": "NvInterlockedAddFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedAddFp16x2(RWByteAddressBuffer uav, uint byteAddress, uint fp16x2Val)"
  },
  {
    "label": "NvInterlockedMinFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedMinFp16x2(RWByteAddressBuffer uav, uint byteAddress, uint fp16x2Val)"
  },
  {
    "label": "NvInterlockedMaxFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedMaxFp16x2(RWByteAddressBuffer uav, uint byteAddress, uint fp16x2Val)"
  },
  {
    "label": "NvInterlockedAddFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedAddFp16x2(RWByteAddressBuffer uav, uint byteAddress, float2 val)"
  },
  {
    "label": "NvInterlockedMinFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedMinFp16x2(RWByteAddressBuffer uav, uint byteAddress, float2 val)"
  },
  {
    "label": "NvInterlockedMaxFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedMaxFp16x2(RWByteAddressBuffer uav, uint byteAddress, float2 val)"
  },
  {
    "label": "NvInterlockedAddFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedAddFp16x2(RWTexture1D<float2> uav, uint address, uint fp16x2Val)"
  },
  {
    "label": "NvInterlockedMinFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedMinFp16x2(RWTexture1D<float2> uav, uint address, uint fp16x2Val)"
  },
  {
    "label": "NvInterlockedMaxFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedMaxFp16x2(RWTexture1D<float2> uav, uint address, uint fp16x2Val)"
  },
  {
    "label": "NvInterlockedAddFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedAddFp16x2(RWTexture2D<float2> uav, uint2 address, uint fp16x2Val)"
  },
  {
    "label": "NvInterlockedMinFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedMinFp16x2(RWTexture2D<float2> uav, uint2 address, uint fp16x2Val)"
  },
  {
    "label": "NvInterlockedMaxFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedMaxFp16x2(RWTexture2D<float2> uav, uint2 address, uint fp16x2Val)"
  },
  {
    "label": "NvInterlockedAddFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedAddFp16x2(RWTexture3D<float2> uav, uint3 address, uint fp16x2Val)"
  },
  {
    "label": "NvInterlockedMinFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedMinFp16x2(RWTexture3D<float2> uav, uint3 address, uint fp16x2Val)"
  },
  {
    "label": "NvInterlockedMaxFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedMaxFp16x2(RWTexture3D<float2> uav, uint3 address, uint fp16x2Val)"
  },
  {
    "label": "NvInterlockedAddFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedAddFp16x2(RWTexture1D<float2> uav, uint address, float2 val)"
  },
  {
    "label": "NvInterlockedMinFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedMinFp16x2(RWTexture1D<float2> uav, uint address, float2 val)"
  },
  {
    "label": "NvInterlockedMaxFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedMaxFp16x2(RWTexture1D<float2> uav, uint address, float2 val)"
  },
  {
    "label": "NvInterlockedAddFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedAddFp16x2(RWTexture2D<float2> uav, uint2 address, float2 val)"
  },
  {
    "label": "NvInterlockedMinFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedMinFp16x2(RWTexture2D<float2> uav, uint2 address, float2 val)"
  },
  {
    "label": "NvInterlockedMaxFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedMaxFp16x2(RWTexture2D<float2> uav, uint2 address, float2 val)"
  },
  {
    "label": "NvInterlockedAddFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedAddFp16x2(RWTexture3D<float2> uav, uint3 address, float2 val)"
  },
  {
    "label": "NvInterlockedMinFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedMinFp16x2(RWTexture3D<float2> uav, uint3 address, float2 val)"
  },
  {
    "label": "NvInterlockedMaxFp16x2()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvInterlockedMaxFp16x2(RWTexture3D<float2> uav, uint3 address, float2 val)"
  },
  {
    "label": "NvInterlockedAddFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedAddFp16x4(RWTexture1D<float4> uav, uint address, uint2 fp16x2Val)"
  },
  {
    "label": "NvInterlockedMinFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMinFp16x4(RWTexture1D<float4> uav, uint address, uint2 fp16x2Val)"
  },
  {
    "label": "NvInterlockedMaxFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMaxFp16x4(RWTexture1D<float4> uav, uint address, uint2 fp16x2Val)"
  },
  {
    "label": "NvInterlockedAddFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedAddFp16x4(RWTexture2D<float4> uav, uint2 address, uint2 fp16x2Val)"
  },
  {
    "label": "NvInterlockedMinFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMinFp16x4(RWTexture2D<float4> uav, uint2 address, uint2 fp16x2Val)"
  },
  {
    "label": "NvInterlockedMaxFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMaxFp16x4(RWTexture2D<float4> uav, uint2 address, uint2 fp16x2Val)"
  },
  {
    "label": "NvInterlockedAddFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedAddFp16x4(RWTexture3D<float4> uav, uint3 address, uint2 fp16x2Val)"
  },
  {
    "label": "NvInterlockedMinFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMinFp16x4(RWTexture3D<float4> uav, uint3 address, uint2 fp16x2Val)"
  },
  {
    "label": "NvInterlockedMaxFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMaxFp16x4(RWTexture3D<float4> uav, uint3 address, uint2 fp16x2Val)"
  },
  {
    "label": "NvInterlockedAddFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedAddFp16x4(RWTexture1D<float4> uav, uint address, float4 val)"
  },
  {
    "label": "NvInterlockedMinFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMinFp16x4(RWTexture1D<float4> uav, uint address, float4 val)"
  },
  {
    "label": "NvInterlockedMaxFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMaxFp16x4(RWTexture1D<float4> uav, uint address, float4 val)"
  },
  {
    "label": "NvInterlockedAddFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedAddFp16x4(RWTexture2D<float4> uav, uint2 address, float4 val)"
  },
  {
    "label": "NvInterlockedMinFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMinFp16x4(RWTexture2D<float4> uav, uint2 address, float4 val)"
  },
  {
    "label": "NvInterlockedMaxFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMaxFp16x4(RWTexture2D<float4> uav, uint2 address, float4 val)"
  },
  {
    "label": "NvInterlockedAddFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedAddFp16x4(RWTexture3D<float4> uav, uint3 address, float4 val)"
  },
  {
    "label": "NvInterlockedMinFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMinFp16x4(RWTexture3D<float4> uav, uint3 address, float4 val)"
  },
  {
    "label": "NvInterlockedMaxFp16x4()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMaxFp16x4(RWTexture3D<float4> uav, uint3 address, float4 val)"
  },
  {
    "label": "NvInterlockedAddFp32()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "NvInterlockedAddFp32(RWByteAddressBuffer uav, uint byteAddress, float val)"
  },
  {
    "label": "NvInterlockedAddFp32()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "NvInterlockedAddFp32(RWTexture1D<float> uav, uint address, float val)"
  },
  {
    "label": "NvInterlockedAddFp32()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "NvInterlockedAddFp32(RWTexture2D<float> uav, uint2 address, float val)"
  },
  {
    "label": "NvInterlockedAddFp32()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "NvInterlockedAddFp32(RWTexture3D<float> uav, uint3 address, float val)"
  },
  {
    "label": "NvInterlockedAddUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedAddUint64(RWByteAddressBuffer uav, uint byteAddress, uint2 value)"
  },
  {
    "label": "NvInterlockedMaxUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMaxUint64(RWByteAddressBuffer uav, uint byteAddress, uint2 value)"
  },
  {
    "label": "NvInterlockedMinUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMinUint64(RWByteAddressBuffer uav, uint byteAddress, uint2 value)"
  },
  {
    "label": "NvInterlockedAndUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedAndUint64(RWByteAddressBuffer uav, uint byteAddress, uint2 value)"
  },
  {
    "label": "NvInterlockedOrUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedOrUint64(RWByteAddressBuffer uav, uint byteAddress, uint2 value)"
  },
  {
    "label": "NvInterlockedXorUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedXorUint64(RWByteAddressBuffer uav, uint byteAddress, uint2 value)"
  },
  {
    "label": "NvInterlockedCompareExchangeUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedCompareExchangeUint64(RWByteAddressBuffer uav, uint byteAddress, uint2 compare_value, uint2 value)"
  },
  {
    "label": "NvInterlockedExchangeUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedExchangeUint64(RWByteAddressBuffer uav, uint byteAddress, uint2 value)"
  },
  {
    "label": "NvInterlockedAddUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedAddUint64(RWTexture1D<uint2> uav, uint address, uint2 value)"
  },
  {
    "label": "NvInterlockedMaxUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMaxUint64(RWTexture1D<uint2> uav, uint address, uint2 value)"
  },
  {
    "label": "NvInterlockedMinUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMinUint64(RWTexture1D<uint2> uav, uint address, uint2 value)"
  },
  {
    "label": "NvInterlockedAndUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedAndUint64(RWTexture1D<uint2> uav, uint address, uint2 value)"
  },
  {
    "label": "NvInterlockedOrUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedOrUint64(RWTexture1D<uint2> uav, uint address, uint2 value)"
  },
  {
    "label": "NvInterlockedXorUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedXorUint64(RWTexture1D<uint2> uav, uint address, uint2 value)"
  },
  {
    "label": "NvInterlockedCompareExchangeUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedCompareExchangeUint64(RWTexture1D<uint2> uav, uint address, uint2 compare_value, uint2 value)"
  },
  {
    "label": "NvInterlockedExchangeUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedExchangeUint64(RWTexture1D<uint2> uav, uint address, uint2 value)"
  },
  {
    "label": "NvInterlockedAddUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedAddUint64(RWTexture2D<uint2> uav, uint2 address, uint2 value)"
  },
  {
    "label": "NvInterlockedMaxUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMaxUint64(RWTexture2D<uint2> uav, uint2 address, uint2 value)"
  },
  {
    "label": "NvInterlockedMinUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMinUint64(RWTexture2D<uint2> uav, uint2 address, uint2 value)"
  },
  {
    "label": "NvInterlockedAndUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedAndUint64(RWTexture2D<uint2> uav, uint2 address, uint2 value)"
  },
  {
    "label": "NvInterlockedOrUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedOrUint64(RWTexture2D<uint2> uav, uint2 address, uint2 value)"
  },
  {
    "label": "NvInterlockedXorUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedXorUint64(RWTexture2D<uint2> uav, uint2 address, uint2 value)"
  },
  {
    "label": "NvInterlockedCompareExchangeUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedCompareExchangeUint64(RWTexture2D<uint2> uav, uint2 address, uint2 compare_value, uint2 value)"
  },
  {
    "label": "NvInterlockedExchangeUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedExchangeUint64(RWTexture2D<uint2> uav, uint2 address, uint2 value)"
  },
  {
    "label": "NvInterlockedAddUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedAddUint64(RWTexture3D<uint2> uav, uint3 address, uint2 value)"
  },
  {
    "label": "NvInterlockedMaxUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMaxUint64(RWTexture3D<uint2> uav, uint3 address, uint2 value)"
  },
  {
    "label": "NvInterlockedMinUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedMinUint64(RWTexture3D<uint2> uav, uint3 address, uint2 value)"
  },
  {
    "label": "NvInterlockedAndUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedAndUint64(RWTexture3D<uint2> uav, uint3 address, uint2 value)"
  },
  {
    "label": "NvInterlockedOrUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedOrUint64(RWTexture3D<uint2> uav, uint3 address, uint2 value)"
  },
  {
    "label": "NvInterlockedXorUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedXorUint64(RWTexture3D<uint2> uav, uint3 address, uint2 value)"
  },
  {
    "label": "NvInterlockedCompareExchangeUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedCompareExchangeUint64(RWTexture3D<uint2> uav, uint3 address, uint2 compare_value, uint2 value)"
  },
  {
    "label": "NvInterlockedExchangeUint64()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvInterlockedExchangeUint64(RWTexture3D<uint2> uav, uint3 address, uint2 value)"
  },
  {
    "label": "NvGetShadingRate()",
    "kind": "Method",
    "detail": "Function (} uint3)",
    "insertText": "NvGetShadingRate()"
  },
  {
    "label": "shadingRate()",
    "kind": "Method",
    "detail": "Function (uint3)",
    "insertText": "shadingRate(uint3)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "value(float)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ ext ] . opcode = NV_EXTN_OP_VPRS_EVAL_ATTRIB_AT_SAMPLE ; g_NvidiaExt [ ext ] . src0u . x =)",
    "insertText": "asuint(attrib.x)"
  },
  {
    "label": "asfloat()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ ext ] . src1u . x = sampleIndex ; g_NvidiaExt [ ext ] . src2u . xy = pixelOffset ; g_NvidiaExt [ ext ] . numOutputsForIncCounter = 1 ; value . x =)",
    "insertText": "asfloat(g_NvidiaExt.IncrementCounter())"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (float2)",
    "insertText": "value(float2)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ ext ] . opcode = NV_EXTN_OP_VPRS_EVAL_ATTRIB_AT_SAMPLE ; g_NvidiaExt [ ext ] . src0u . xy =)",
    "insertText": "asuint(attrib.xy)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (float3)",
    "insertText": "value(float3)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ ext ] . opcode = NV_EXTN_OP_VPRS_EVAL_ATTRIB_AT_SAMPLE ; g_NvidiaExt [ ext ] . src0u . xyz =)",
    "insertText": "asuint(attrib.xyz)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (float4)",
    "insertText": "value(float4)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ ext ] . opcode = NV_EXTN_OP_VPRS_EVAL_ATTRIB_AT_SAMPLE ; g_NvidiaExt [ ext ] . src0u . xyzw =)",
    "insertText": "asuint(attrib.xyzw)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "value(int)"
  },
  {
    "label": "asint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ ext ] . src1u . x = sampleIndex ; g_NvidiaExt [ ext ] . src2u . xy = pixelOffset ; g_NvidiaExt [ ext ] . numOutputsForIncCounter = 1 ; value . x =)",
    "insertText": "asint(g_NvidiaExt.IncrementCounter())"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (int2)",
    "insertText": "value(int2)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (int3)",
    "insertText": "value(int3)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (int4)",
    "insertText": "value(int4)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (uint)",
    "insertText": "value(uint)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ ext ] . src1u . x = sampleIndex ; g_NvidiaExt [ ext ] . src2u . xy = pixelOffset ; g_NvidiaExt [ ext ] . numOutputsForIncCounter = 1 ; value . x =)",
    "insertText": "asuint(g_NvidiaExt.IncrementCounter())"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (uint2)",
    "insertText": "value(uint2)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (uint3)",
    "insertText": "value(uint3)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (uint4)",
    "insertText": "value(uint4)"
  },
  {
    "label": "NvWaveMatch()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvWaveMatch(uint2 value)"
  },
  {
    "label": "NvWaveMatch()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvWaveMatch(uint4 value)"
  },
  {
    "label": "NvWaveMatch()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvWaveMatch(float value)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . x =)",
    "insertText": "asuint(value)"
  },
  {
    "label": "NvWaveMatch()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvWaveMatch(float2 value)"
  },
  {
    "label": "NvWaveMatch()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvWaveMatch(float4 value)"
  },
  {
    "label": "NvFootprintFine()",
    "kind": "Method",
    "detail": "Function (} uint4)",
    "insertText": "NvFootprintFine(uint texSpace, uint texIndex, uint smpSpace, uint smpIndex, uint texType, float3 location, uint gran, int3 offset = int3(0, 0, 0))"
  },
  {
    "label": "NvFootprintCoarse()",
    "kind": "Method",
    "detail": "Function (} uint4)",
    "insertText": "NvFootprintCoarse(uint texSpace, uint texIndex, uint smpSpace, uint smpIndex, uint texType, float3 location, uint gran, int3 offset = int3(0, 0, 0))"
  },
  {
    "label": "NvFootprintFineBias()",
    "kind": "Method",
    "detail": "Function (} uint4)",
    "insertText": "NvFootprintFineBias(uint texSpace, uint texIndex, uint smpSpace, uint smpIndex, uint texType, float3 location, uint gran, float bias, int3 offset = int3(0, 0, 0))"
  },
  {
    "label": "NvFootprintCoarseBias()",
    "kind": "Method",
    "detail": "Function (} uint4)",
    "insertText": "NvFootprintCoarseBias(uint texSpace, uint texIndex, uint smpSpace, uint smpIndex, uint texType, float3 location, uint gran, float bias, int3 offset = int3(0, 0, 0))"
  },
  {
    "label": "NvFootprintFineLevel()",
    "kind": "Method",
    "detail": "Function (} uint4)",
    "insertText": "NvFootprintFineLevel(uint texSpace, uint texIndex, uint smpSpace, uint smpIndex, uint texType, float3 location, uint gran, float lodLevel, int3 offset = int3(0, 0, 0))"
  },
  {
    "label": "NvFootprintCoarseLevel()",
    "kind": "Method",
    "detail": "Function (} uint4)",
    "insertText": "NvFootprintCoarseLevel(uint texSpace, uint texIndex, uint smpSpace, uint smpIndex, uint texType, float3 location, uint gran, float lodLevel, int3 offset = int3(0, 0, 0))"
  },
  {
    "label": "NvFootprintFineGrad()",
    "kind": "Method",
    "detail": "Function (} uint4)",
    "insertText": "NvFootprintFineGrad(uint texSpace, uint texIndex, uint smpSpace, uint smpIndex, uint texType, float3 location, uint gran, float3 ddx, float3 ddy, int3 offset = int3(0, 0, 0))"
  },
  {
    "label": "NvFootprintCoarseGrad()",
    "kind": "Method",
    "detail": "Function (} uint4)",
    "insertText": "NvFootprintCoarseGrad(uint texSpace, uint texIndex, uint smpSpace, uint smpIndex, uint texType, float3 location, uint gran, float3 ddx, float3 ddy, int3 offset = int3(0, 0, 0))"
  },
  {
    "label": "NvFootprintExtractLOD()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvFootprintExtractLOD(uint4 blob)"
  },
  {
    "label": "NvFootprintExtractReturnGran()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvFootprintExtractReturnGran(uint4 blob)"
  },
  {
    "label": "NvFootprintExtractAnchorTileLoc2D()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvFootprintExtractAnchorTileLoc2D(uint4 blob)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (uint2 loc ; loc .)",
    "insertText": "x(blob.w & 0xFFF)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (loc .)",
    "insertText": "y(blob.z & 0xFFF)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (loc .)",
    "insertText": "y((blob.w & 0xFFF0000) >> 16)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (loc .)",
    "insertText": "z(blob.z & 0x1FFF)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (uint2 loc ; loc .)",
    "insertText": "x((blob.z & 0x070000) >> 16)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (loc .)",
    "insertText": "y((blob.z & 0x380000) >> 19)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (uint3 loc ; loc .)",
    "insertText": "x((blob.z & 0x030000) >> 16)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (loc .)",
    "insertText": "y((blob.z & 0x0C0000) >> 18)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (loc .)",
    "insertText": "z((blob.z & 0x300000) >> 20)"
  },
  {
    "label": "__NvFootprint()",
    "kind": "Method",
    "detail": "Function (uint4 res =)",
    "insertText": "__NvFootprint(texSpace, texIndex, smpSpace, smpIndex, texType, location, NV_EXTN_FOOTPRINT_MODE_FINE, gran, offset)"
  },
  {
    "label": "__NvGetSpecial()",
    "kind": "Method",
    "detail": "Function (isSingleLod =)",
    "insertText": "__NvGetSpecial(NV_SPECIALOP_FOOTPRINT_SINGLELOD_PRED)"
  },
  {
    "label": "__NvFootprint()",
    "kind": "Method",
    "detail": "Function (uint4 res =)",
    "insertText": "__NvFootprint(texSpace, texIndex, smpSpace, smpIndex, texType, location, NV_EXTN_FOOTPRINT_MODE_COARSE, gran, offset)"
  },
  {
    "label": "__NvFootprintBias()",
    "kind": "Method",
    "detail": "Function (uint4 res =)",
    "insertText": "__NvFootprintBias(texSpace, texIndex, smpSpace, smpIndex, texType, location, NV_EXTN_FOOTPRINT_MODE_FINE, gran, bias, offset)"
  },
  {
    "label": "__NvFootprintBias()",
    "kind": "Method",
    "detail": "Function (uint4 res =)",
    "insertText": "__NvFootprintBias(texSpace, texIndex, smpSpace, smpIndex, texType, location, NV_EXTN_FOOTPRINT_MODE_COARSE, gran, bias, offset)"
  },
  {
    "label": "__NvFootprintLevel()",
    "kind": "Method",
    "detail": "Function (uint4 res =)",
    "insertText": "__NvFootprintLevel(texSpace, texIndex, smpSpace, smpIndex, texType, location, NV_EXTN_FOOTPRINT_MODE_FINE, gran, lodLevel, offset)"
  },
  {
    "label": "__NvFootprintLevel()",
    "kind": "Method",
    "detail": "Function (uint4 res =)",
    "insertText": "__NvFootprintLevel(texSpace, texIndex, smpSpace, smpIndex, texType, location, NV_EXTN_FOOTPRINT_MODE_COARSE, gran, lodLevel, offset)"
  },
  {
    "label": "__NvFootprintGrad()",
    "kind": "Method",
    "detail": "Function (uint4 res =)",
    "insertText": "__NvFootprintGrad(texSpace, texIndex, smpSpace, smpIndex, texType, location, NV_EXTN_FOOTPRINT_MODE_FINE, gran, ddx, ddy, offset)"
  },
  {
    "label": "__NvFootprintGrad()",
    "kind": "Method",
    "detail": "Function (uint4 res =)",
    "insertText": "__NvFootprintGrad(texSpace, texIndex, smpSpace, smpIndex, texType, location, NV_EXTN_FOOTPRINT_MODE_COARSE, gran, ddx, ddy, offset)"
  },
  {
    "label": "NvWaveMultiPrefixInclusiveAdd()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvWaveMultiPrefixInclusiveAdd(uint val, uint mask)"
  },
  {
    "label": "NvActiveThreads()",
    "kind": "Method",
    "detail": "Function (uint temp ; uint a =)",
    "insertText": "NvActiveThreads()"
  },
  {
    "label": "__NvGetSpecial()",
    "kind": "Method",
    "detail": "Function (uint remainingThreads = a&)",
    "insertText": "__NvGetSpecial(NV_SPECIALOP_THREADLTMASK)"
  },
  {
    "label": "firstbithigh()",
    "kind": "Method",
    "detail": "Function (uint nextLane =)",
    "insertText": "firstbithigh(remainingThreads)"
  },
  {
    "label": "NvShfl()",
    "kind": "Method",
    "detail": "Function (temp =)",
    "insertText": "NvShfl(val, nextLane)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (uint laneValid ; uint newLane =)",
    "insertText": "asuint(__NvShflGeneric(nextLane, nextLane, 30, laneValid))"
  },
  {
    "label": "NvWaveMultiPrefixExclusiveAdd()",
    "kind": "Method",
    "detail": "Function (val = val + temp ; nextLane = newLane ; } } return val ; } uint)",
    "insertText": "NvWaveMultiPrefixExclusiveAdd(uint val, uint mask)"
  },
  {
    "label": "NvShfl()",
    "kind": "Method",
    "detail": "Function (temp =)",
    "insertText": "NvShfl(val, lane)"
  },
  {
    "label": "NvWaveMultiPrefixInclusiveAdd()",
    "kind": "Method",
    "detail": "Function (val = remainingThreads ! = 0 ? temp : 0 ; return)",
    "insertText": "NvWaveMultiPrefixInclusiveAdd(val, mask)"
  },
  {
    "label": "NvWaveMultiPrefixInclusiveAdd()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvWaveMultiPrefixInclusiveAdd(uint2 val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixExclusiveAdd()",
    "kind": "Method",
    "detail": "Function (val = val + temp ; nextLane = newLane ; } } return val ; } uint2)",
    "insertText": "NvWaveMultiPrefixExclusiveAdd(uint2 val, uint mask)"
  },
  {
    "label": "uint2()",
    "kind": "Method",
    "detail": "Function (val = remainingThreads ! = 0 ? temp :)",
    "insertText": "uint2(0, 0)"
  },
  {
    "label": "NvWaveMultiPrefixInclusiveAdd()",
    "kind": "Method",
    "detail": "Function (} uint4)",
    "insertText": "NvWaveMultiPrefixInclusiveAdd(uint4 val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixExclusiveAdd()",
    "kind": "Method",
    "detail": "Function (val = val + temp ; nextLane = newLane ; } } return val ; } uint4)",
    "insertText": "NvWaveMultiPrefixExclusiveAdd(uint4 val, uint mask)"
  },
  {
    "label": "uint4()",
    "kind": "Method",
    "detail": "Function (val = remainingThreads ! = 0 ? temp :)",
    "insertText": "uint4(0, 0, 0, 0)"
  },
  {
    "label": "NvWaveMultiPrefixInclusiveAnd()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvWaveMultiPrefixInclusiveAnd(uint val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixExclusiveAnd()",
    "kind": "Method",
    "detail": "Function (val = val& temp ; nextLane = newLane ; } } return val ; } uint)",
    "insertText": "NvWaveMultiPrefixExclusiveAnd(uint val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixInclusiveAnd()",
    "kind": "Method",
    "detail": "Function (val = remainingThreads ! = 0 ? temp : ~ 0 ; return)",
    "insertText": "NvWaveMultiPrefixInclusiveAnd(val, mask)"
  },
  {
    "label": "NvWaveMultiPrefixInclusiveAnd()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvWaveMultiPrefixInclusiveAnd(uint2 val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixExclusiveAnd()",
    "kind": "Method",
    "detail": "Function (val = val& temp ; nextLane = newLane ; } } return val ; } uint2)",
    "insertText": "NvWaveMultiPrefixExclusiveAnd(uint2 val, uint mask)"
  },
  {
    "label": "uint2()",
    "kind": "Method",
    "detail": "Function (val = remainingThreads ! = 0 ? temp :)",
    "insertText": "uint2(~0, ~0)"
  },
  {
    "label": "NvWaveMultiPrefixInclusiveAnd()",
    "kind": "Method",
    "detail": "Function (} uint4)",
    "insertText": "NvWaveMultiPrefixInclusiveAnd(uint4 val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixExclusiveAnd()",
    "kind": "Method",
    "detail": "Function (val = val& temp ; nextLane = newLane ; } } return val ; } uint4)",
    "insertText": "NvWaveMultiPrefixExclusiveAnd(uint4 val, uint mask)"
  },
  {
    "label": "uint4()",
    "kind": "Method",
    "detail": "Function (val = remainingThreads ! = 0 ? temp :)",
    "insertText": "uint4(~0, ~0, ~0, ~0)"
  },
  {
    "label": "NvWaveMultiPrefixInclusiveOr()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvWaveMultiPrefixInclusiveOr(uint val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixExclusiveOr()",
    "kind": "Method",
    "detail": "Function (val = val | temp ; nextLane = newLane ; } } return val ; } uint)",
    "insertText": "NvWaveMultiPrefixExclusiveOr(uint val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixInclusiveOr()",
    "kind": "Method",
    "detail": "Function (val = remainingThreads ! = 0 ? temp : 0 ; return)",
    "insertText": "NvWaveMultiPrefixInclusiveOr(val, mask)"
  },
  {
    "label": "NvWaveMultiPrefixInclusiveOr()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvWaveMultiPrefixInclusiveOr(uint2 val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixExclusiveOr()",
    "kind": "Method",
    "detail": "Function (val = val | temp ; nextLane = newLane ; } } return val ; } uint2)",
    "insertText": "NvWaveMultiPrefixExclusiveOr(uint2 val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixInclusiveOr()",
    "kind": "Method",
    "detail": "Function (} uint4)",
    "insertText": "NvWaveMultiPrefixInclusiveOr(uint4 val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixExclusiveOr()",
    "kind": "Method",
    "detail": "Function (val = val | temp ; nextLane = newLane ; } } return val ; } uint4)",
    "insertText": "NvWaveMultiPrefixExclusiveOr(uint4 val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixInclusiveXOr()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "NvWaveMultiPrefixInclusiveXOr(uint val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixExclusiveXOr()",
    "kind": "Method",
    "detail": "Function (val = val ^ temp ; nextLane = newLane ; } } return val ; } uint)",
    "insertText": "NvWaveMultiPrefixExclusiveXOr(uint val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixInclusiveXOr()",
    "kind": "Method",
    "detail": "Function (val = remainingThreads ! = 0 ? temp : 0 ; return)",
    "insertText": "NvWaveMultiPrefixInclusiveXOr(val, mask)"
  },
  {
    "label": "NvWaveMultiPrefixInclusiveXOr()",
    "kind": "Method",
    "detail": "Function (} uint2)",
    "insertText": "NvWaveMultiPrefixInclusiveXOr(uint2 val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixExclusiveXOr()",
    "kind": "Method",
    "detail": "Function (val = val ^ temp ; nextLane = newLane ; } } return val ; } uint2)",
    "insertText": "NvWaveMultiPrefixExclusiveXOr(uint2 val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixInclusiveXOr()",
    "kind": "Method",
    "detail": "Function (} uint4)",
    "insertText": "NvWaveMultiPrefixInclusiveXOr(uint4 val, uint mask)"
  },
  {
    "label": "NvWaveMultiPrefixExclusiveXOr()",
    "kind": "Method",
    "detail": "Function (val = val ^ temp ; nextLane = newLane ; } } return val ; } uint4)",
    "insertText": "NvWaveMultiPrefixExclusiveXOr(uint4 val, uint mask)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(__HLSL_VERSION) && (__HLSL_VERSION >= 2021) && !defined(NV_HITOBJECT_USE_MACRO_API)"
  },
  {
    "label": "IsMiss()",
    "kind": "Method",
    "detail": "Function (uint _handle ; bool)",
    "insertText": "IsMiss()"
  },
  {
    "label": "GetInstanceIndex()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "GetInstanceIndex()"
  },
  {
    "label": "GetPrimitiveIndex()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "GetPrimitiveIndex()"
  },
  {
    "label": "GetGeometryIndex()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "GetGeometryIndex()"
  },
  {
    "label": "GetHitKind()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "GetHitKind()"
  },
  {
    "label": "GetRayDesc()",
    "kind": "Method",
    "detail": "Function (} RayDesc)",
    "insertText": "GetRayDesc()"
  },
  {
    "label": "asfloat()",
    "kind": "Method",
    "detail": "Function (RayDesc ray ; ray . TMin =)",
    "insertText": "asfloat(tmin)"
  },
  {
    "label": "asfloat()",
    "kind": "Method",
    "detail": "Function (ray . TMax =)",
    "insertText": "asfloat(tmax)"
  },
  {
    "label": "asfloat()",
    "kind": "Method",
    "detail": "Function (ray . Origin . x =)",
    "insertText": "asfloat(rayOrgX)"
  },
  {
    "label": "asfloat()",
    "kind": "Method",
    "detail": "Function (ray . Origin . y =)",
    "insertText": "asfloat(rayOrgY)"
  },
  {
    "label": "asfloat()",
    "kind": "Method",
    "detail": "Function (ray . Origin . z =)",
    "insertText": "asfloat(rayOrgZ)"
  },
  {
    "label": "asfloat()",
    "kind": "Method",
    "detail": "Function (ray . Direction . x =)",
    "insertText": "asfloat(rayDirX)"
  },
  {
    "label": "asfloat()",
    "kind": "Method",
    "detail": "Function (ray . Direction . y =)",
    "insertText": "asfloat(rayDirY)"
  },
  {
    "label": "asfloat()",
    "kind": "Method",
    "detail": "Function (ray . Direction . z =)",
    "insertText": "asfloat(rayDirZ)"
  },
  {
    "label": "CallShader()",
    "kind": "Method",
    "detail": "Function (T attrs ;)",
    "insertText": "CallShader(callHandle, attrs)"
  },
  {
    "label": "LoadLocalRootTableConstant()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "LoadLocalRootTableConstant(uint RootConstantOffsetInBytes)"
  },
  {
    "label": "NvTraceRayHitObject()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> NvHitObject)",
    "insertText": "NvTraceRayHitObject(RaytracingAccelerationStructure AccelerationStructure, uint RayFlags, uint InstanceInclusionMask, uint RayContributionToHitGroupIndex, uint MultiplierForGeometryContributionToHitGroupIndex, uint MissShaderIndex, RayDesc Ray, inout T Payload)"
  },
  {
    "label": "TraceRay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceRay(AccelerationStructure, RayFlags, InstanceInclusionMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToHitGroupIndex, traceHandle, Ray, Payload)"
  },
  {
    "label": "NvMakeHit()",
    "kind": "Method",
    "detail": "Function (NvHitObject hitObj ; hitObj . _handle = hitHandle ; return hitObj ; } template<T> NvHitObject)",
    "insertText": "NvMakeHit(RaytracingAccelerationStructure AccelerationStructure, uint InstanceIndex, uint GeometryIndex, uint PrimitiveIndex, uint HitKind, uint RayContributionToHitGroupIndex, uint MultiplierForGeometryContributionToHitGroupIndex, RayDesc Ray, T Attributes)"
  },
  {
    "label": "CallShader()",
    "kind": "Method",
    "detail": "Function (struct AttrWrapper { T Attrs ; } ; AttrWrapper wrapper ; wrapper . Attrs = Attributes ;)",
    "insertText": "CallShader(traceHandle, wrapper)"
  },
  {
    "label": "TraceRay()",
    "kind": "Method",
    "detail": "Function (struct DummyPayload { int a ; } ; DummyPayload payload ;)",
    "insertText": "TraceRay(AccelerationStructure, 0, 0, 0, 0, traceHandle, Ray, payload)"
  },
  {
    "label": "NvMakeHitWithRecordIndex()",
    "kind": "Method",
    "detail": "Function (NvHitObject hitObj ; hitObj . _handle = hitHandle ; return hitObj ; } template<T> NvHitObject)",
    "insertText": "NvMakeHitWithRecordIndex(uint HitGroupRecordIndex, RaytracingAccelerationStructure AccelerationStructure, uint InstanceIndex, uint GeometryIndex, uint PrimitiveIndex, uint HitKind, RayDesc Ray, T Attributes)"
  },
  {
    "label": "NvMakeMiss()",
    "kind": "Method",
    "detail": "Function (NvHitObject hitObj ; hitObj . _handle = hitHandle ; return hitObj ; } NvHitObject)",
    "insertText": "NvMakeMiss(uint MissShaderIndex, RayDesc Ray)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . opcode = NV_EXTN_OP_HIT_OBJECT_MAKE_MISS ; g_NvidiaExt [ index ] . src0u . x = MissShaderIndex ; g_NvidiaExt [ index ] . src0u . y =)",
    "insertText": "asuint(Ray.TMin)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src0u . z =)",
    "insertText": "asuint(Ray.TMax)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src1u . x =)",
    "insertText": "asuint(Ray.Origin.x)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src1u . y =)",
    "insertText": "asuint(Ray.Origin.y)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src1u . z =)",
    "insertText": "asuint(Ray.Origin.z)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src2u . x =)",
    "insertText": "asuint(Ray.Direction.x)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src2u . y =)",
    "insertText": "asuint(Ray.Direction.y)"
  },
  {
    "label": "asuint()",
    "kind": "Method",
    "detail": "Function (g_NvidiaExt [ index ] . src2u . z =)",
    "insertText": "asuint(Ray.Direction.z)"
  },
  {
    "label": "NvMakeNop()",
    "kind": "Method",
    "detail": "Function (NvHitObject hitObj ; hitObj . _handle = hitHandle ; return hitObj ; } NvHitObject)",
    "insertText": "NvMakeNop()"
  },
  {
    "label": "NvReorderThread()",
    "kind": "Method",
    "detail": "Function (NvHitObject hitObj ; hitObj . _handle = hitHandle ; return hitObj ; } void)",
    "insertText": "NvReorderThread(uint CoherenceHint, uint NumCoherenceHintBits)"
  },
  {
    "label": "NvReorderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NvReorderThread(NvHitObject HitObj, uint CoherenceHint, uint NumCoherenceHintBits)"
  },
  {
    "label": "NvReorderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NvReorderThread(NvHitObject HitObj)"
  },
  {
    "label": "NvReorderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NvReorderThread(HitObj, 0, 0)"
  },
  {
    "label": "NvInvokeHitObject()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "NvInvokeHitObject(RaytracingAccelerationStructure AccelerationStructure, NvHitObject HitObj, inout T Payload)"
  },
  {
    "label": "TraceRay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceRay(AccelerationStructure, 0, 0, 0, 0, handle, (RayDesc)0, Payload)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "defined(NV_HITOBJECT_USE_MACRO_API)"
  },
  {
    "label": "NvTraceRayHitObject()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "NvTraceRayHitObject(AccelerationStructure,RayFlags,InstanceInclusionMask,RayContributionToHitGroupIndex,MultiplierForGeometryContributionToHitGroupIndex,MissShaderIndex,Ray,Payload,ResultHitObj)"
  },
  {
    "label": "TraceRay()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TraceRay(AccelerationStructure, _rayFlags, _instanceInclusionMask, _rayContributionToHitGroupIndex, _multiplierForGeometryContributionToHitGroupIndex, _traceHandle, _ray, Payload)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ ResultHitObj . _handle = _hitHandle ; \\ })",
    "insertText": "while(0)"
  },
  {
    "label": "NvMakeHit()",
    "kind": "Method",
    "detail": "Function (int a ; } ; # define)",
    "insertText": "NvMakeHit(AccelerationStructure,InstanceIndex,GeometryIndex,PrimitiveIndex,HitKind,RayContributionToHitGroupIndex,MultiplierForGeometryContributionToHitGroupIndex,Ray,Attributes,ResultHitObj)"
  },
  {
    "label": "CallShader()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CallShader(_traceHandle, Attributes)"
  },
  {
    "label": "TraceRay()",
    "kind": "Method",
    "detail": "Function (\\ NvHitObjectMacroDummyPayloadType _payload ; \\)",
    "insertText": "TraceRay(AccelerationStructure, 0, 0, 0, 0, _traceHandle, _ray, _payload)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ ResultHitObj . _handle = _hitHandle ; \\ })",
    "insertText": "while(0) #define NvMakeHitWithRecordIndex(HitGroupRecordIndex,AccelerationStructure,InstanceIndex,GeometryIndex,PrimitiveIndex,HitKind,Ray,Attributes,ResultHitObj)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ ResultHitObj . _handle = _hitHandle ; \\ })",
    "insertText": "while(0) NvHitObject NvMakeMiss( uint MissShaderIndex, RayDesc Ray)"
  },
  {
    "label": "NvGetAttributesFromHitObject()",
    "kind": "Method",
    "detail": "Function (NvHitObject hitObj ; hitObj . _handle = hitHandle ; return hitObj ; } # define)",
    "insertText": "NvGetAttributesFromHitObject(HitObj,ResultAttributes)"
  },
  {
    "label": "CallShader()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CallShader(_callHandle, ResultAttributes)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) void NvReorderThread(uint CoherenceHint, uint NumCoherenceHintBits)"
  },
  {
    "label": "NvInvokeHitObject()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "NvInvokeHitObject(AccelerationStructure,HitObj,Payload)"
  },
  {
    "label": "TraceRay()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TraceRay(AccelerationStructure, 0, 0, 0, 0, _handle, (RayDesc)0, Payload)"
  }
]