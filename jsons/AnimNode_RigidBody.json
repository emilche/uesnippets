[
  {
    "label": "FBodyInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyInstance"
  },
  {
    "label": "FConstraintInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintInstance"
  },
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "FSimSpaceSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimSpaceSettings"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FAnimNode_RigidBody",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_RigidBody"
  },
  {
    "label": "FRigidBodyNodeSimulationTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRigidBodyNodeSimulationTask"
  },
  {
    "label": "FOutputBoneData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutputBoneData"
  },
  {
    "label": "FBodyAnimData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyAnimData"
  },
  {
    "label": "FWorldObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldObject"
  },
  {
    "label": "FClothCollider",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClothCollider"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BoneControllers / AnimNode_SkeletalControlBase . h \" # include \" Components / SkeletalMeshComponent . h \" # include \" Physics / ImmediatePhysics / ImmediatePhysicsDeclares . h \" # include \" PhysicsEngine / PhysicsAsset . h \" # include \" PhysicsProxy / PerSolverFieldSystem . h \" # include \" Tasks / Task . h \" # include \" AnimNode_RigidBody . generated . h \" struct FBodyInstance ; struct FConstraintInstance ; class FEvent ; bool bEnableRigidBodyNode ; FAutoConsoleVariableRef CVarEnableRigidBodyNode ; TAutoConsoleVariable<int32> CVarEnableRigidBodyNodeSimulation ; TAutoConsoleVariable<int32> CVarRigidBodyLODThreshold ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Default,Synchronous,Deferred } ; template<> struct TIsPODType<FSimSpaceSettings> { enum { Value = true } ; } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() ANIMGRAPHRUNTIME_API FSimSpaceSettings()"
  },
  {
    "label": "FSimSpaceSettings()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS ~)",
    "insertText": "FSimSpaceSettings()"
  },
  {
    "label": "FSimSpaceSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimSpaceSettings(FSimSpaceSettings const&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSimSpaceSettings&)",
    "insertText": "operator(const FSimSpaceSettings &)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ; # if WITH_EDITORONLY_DATA template<> struct TStructOpsTypeTraits<FSimSpaceSettings> : public TStructOpsTypeTraitsBase2<FSimSpaceSettings> { enum { WithPostSerialize = true } ; } ; # endif)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() ANIMGRAPHRUNTIME_API FAnimNode_RigidBody()"
  },
  {
    "label": "FAnimNode_RigidBody()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAnimNode_RigidBody()"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "UpdateComponentPose_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentPose_AnyThread(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "EvaluateComponentPose_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateComponentPose_AnyThread(FComponentSpacePoseContext& Output)"
  },
  {
    "label": "EvaluateSkeletalControl_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateSkeletalControl_AnyThread(FComponentSpacePoseContext& Output, TArray<FBoneTransform>& OutBoneTransforms)"
  },
  {
    "label": "OnInitializeAnimInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitializeAnimInstance(const FAnimInstanceProxy* InProxy, const UAnimInstance* InAnimInstance)"
  },
  {
    "label": "NeedsOnInitializeAnimInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsOnInitializeAnimInstance()"
  },
  {
    "label": "UpdateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInternal(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "HasPreUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPreUpdate()"
  },
  {
    "label": "NeedsDynamicReset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsDynamicReset()"
  },
  {
    "label": "ResetDynamics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDynamics(ETeleportType InTeleportType)"
  },
  {
    "label": "GetLODThreshold()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLODThreshold()"
  },
  {
    "label": "AddImpulseAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImpulseAtLocation(FVector Impulse, FVector Location, FName BoneName = NAME_None)"
  },
  {
    "label": "GetSimulation()",
    "kind": "Method",
    "detail": "Function (ImmediatePhysics::FSimulation*)",
    "insertText": "GetSimulation()"
  },
  {
    "label": "GetPhysicsAsset()",
    "kind": "Method",
    "detail": "Function (UPhysicsAsset*)",
    "insertText": "GetPhysicsAsset()"
  },
  {
    "label": "GetPhysicsAssetToBeUsed()",
    "kind": "Method",
    "detail": "Function (private : UPhysicsAsset*)",
    "insertText": "GetPhysicsAssetToBeUsed(const UAnimInstance* InAnimInstance)"
  },
  {
    "label": "InitializeBoneReferences()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "InitializeBoneReferences(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "InitPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitPhysics(const UAnimInstance* InAnimInstance)"
  },
  {
    "label": "UpdateWorldGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWorldGeometry(const UWorld& World, const USkeletalMeshComponent& SKC)"
  },
  {
    "label": "UpdateWorldForces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWorldForces(const FTransform& ComponentToWorld, const FTransform& RootBoneTM, const float DeltaSeconds)"
  },
  {
    "label": "InitializeNewBodyTransformsDuringSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeNewBodyTransformsDuringSimulation(FComponentSpacePoseContext& Output, const FTransform& ComponentTransform, const FTransform& BaseBoneTM)"
  },
  {
    "label": "InitSimulationSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSimulationSpace(const FTransform& ComponentToWorld, const FTransform& BoneToComponent)"
  },
  {
    "label": "CalculateSimulationSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateSimulationSpace(ESimulationSpace Space, const FTransform& ComponentToWorld, const FTransform& BoneToComponent, const float Dt, const FSimSpaceSettings& Settings, FTransform& SpaceTransform, FVector& SpaceLinearVel, FVector& SpaceAngularVel, FVector& SpaceLinearAcc, FVector& SpaceAngularAcc)"
  },
  {
    "label": "CollectClothColliderObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectClothColliderObjects(const USkeletalMeshComponent* SkeletalMeshComp)"
  },
  {
    "label": "RemoveClothColliderObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveClothColliderObjects()"
  },
  {
    "label": "UpdateClothColliderObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateClothColliderObjects(const FTransform& SpaceTransform)"
  },
  {
    "label": "CollectWorldObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectWorldObjects()"
  },
  {
    "label": "ExpireWorldObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpireWorldObjects()"
  },
  {
    "label": "PurgeExpiredWorldObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeExpiredWorldObjects()"
  },
  {
    "label": "UpdateWorldObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWorldObjects(const FTransform& SpaceTransform)"
  },
  {
    "label": "RunPhysicsSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPhysicsSimulation(float DeltaSeconds, const FVector& SimSpaceGravity)"
  },
  {
    "label": "FlushDeferredSimulationTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushDeferredSimulationTask()"
  },
  {
    "label": "DestroyPhysicsSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPhysicsSimulation()"
  },
  {
    "label": "FOutputBoneData()",
    "kind": "Method",
    "detail": "Function (private : double WorldTimeSeconds ; double LastEvalTimeSeconds ; float AccumulatedDeltaTime ; float AnimPhysicsMinDeltaTime ; bool bSimulateAnimPhysicsAfterReset ; TWeakObjectPtr<USkeletalMeshComponent> SkelMeshCompWeakPtr ; ImmediatePhysics::FSimulation* PhysicsSimulation ; FPhysicsAssetSolverSettings SolverSettings ; FSolverIterations SolverIterations ; class FRigidBodyNodeSimulationTask ; UE::Tasks::FTask SimulationTask ; struct FOutputBoneData {)",
    "insertText": "FOutputBoneData() : CompactPoseBoneIndex(INDEX_NONE)"
  },
  {
    "label": "FBodyAnimData()",
    "kind": "Method",
    "detail": "Function (} TArray<FCompactPoseBoneIndex> BoneIndicesToParentBody ; FCompactPoseBoneIndex CompactPoseBoneIndex ; int32 BodyIndex ; int32 ParentBodyIndex ; } ; struct FBodyAnimData {)",
    "insertText": "FBodyAnimData() : TransferedBoneAngularVelocity(ForceInit) , TransferedBoneLinearVelocity(ForceInitToZero) , LinearXMotion(ELinearConstraintMotion::LCM_Locked) , LinearYMotion(ELinearConstraintMotion::LCM_Locked) , LinearZMotion(ELinearConstraintMotion::LCM_Locked) , LinearLimit(0.0f) , RefPoseLength (0.f) , bIsSimulated(false) , bBodyTransformInitialized(false)"
  },
  {
    "label": "FWorldObject()",
    "kind": "Method",
    "detail": "Function (} FQuat TransferedBoneAngularVelocity ; FVector TransferedBoneLinearVelocity ; ELinearConstraintMotion LinearXMotion ; ELinearConstraintMotion LinearYMotion ; ELinearConstraintMotion LinearZMotion ; float LinearLimit ; float RefPoseLength ; bool bIsSimulated : 1 ; bool bBodyTransformInitialized : 1 ; } ; struct FWorldObject {)",
    "insertText": "FWorldObject() : ActorHandle(nullptr), LastSeenTick(0), bExpired(false)"
  },
  {
    "label": "FWorldObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWorldObject(ImmediatePhysics::FActorHandle* InActorHandle, int32 InLastSeenTick) : ActorHandle(InActorHandle), LastSeenTick(InLastSeenTick), bExpired(false)"
  },
  {
    "label": "FClothCollider()",
    "kind": "Method",
    "detail": "Function (} ImmediatePhysics::FActorHandle* ActorHandle ; int32 LastSeenTick ; bool bExpired ; } ; TArray<FOutputBoneData> OutputBoneData ; TArray<ImmediatePhysics::FActorHandle*> Bodies ; TArray<int32> SkeletonBoneIndexToBodyIndex ; TArray<FBodyAnimData> BodyAnimData ; TArray<FPhysicsConstraintHandle*> Constraints ; TArray<USkeletalMeshComponent::FPendingRadialForces> PendingRadialForces ; FPerSolverFieldSystem PerSolverField ; struct FClothCollider {)",
    "insertText": "FClothCollider(ImmediatePhysics::FActorHandle* const InActorHandle, const USkeletalMeshComponent* const InSkeletalMeshComponent, const uint32 InBoneIndex) : ActorHandle(InActorHandle) , SkeletalMeshComponent(InSkeletalMeshComponent) , BoneIndex(InBoneIndex)"
  },
  {
    "label": "SpaceToWorldTransform()",
    "kind": "Method",
    "detail": "Function (} ImmediatePhysics::FActorHandle* ActorHandle ; const USkeletalMeshComponent* SkeletalMeshComponent ; uint32 BoneIndex ; } ; TArray<FClothCollider> ClothColliders ; TMap<const UPrimitiveComponent*,FWorldObject> ComponentsInSim ; int32 ComponentsInSimTick ; FVector WorldSpaceGravity ; double TotalMass ; FSphere CachedBounds ; FCollisionQueryParams QueryParams ; FPhysScene* PhysScene ; const UWorld* UnsafeWorld ; const AActor* UnsafeOwner ; FBoneContainer CapturedBoneVelocityBoneContainer ; FCSPose<FCompactHeapPose> CapturedBoneVelocityPose ; FCSPose<FCompactHeapPose> CapturedFrozenPose ; FBlendedHeapCurve CapturedFrozenCurves ; FVector PreviousComponentLinearVelocity ; FTransform SimSpacePreviousComponentToWorld ; FTransform SimSpacePreviousBoneToComponent ; FVector SimSpacePreviousComponentLinearVelocity ; FVector SimSpacePreviousComponentAngularVelocity ; FVector SimSpacePreviousBoneLinearVelocity ; FVector SimSpacePreviousBoneAngularVelocity ; # if ENABLE_LOW_LEVEL_MEM_TRACKER FName OwningAssetPackageName ; FName OwningAssetName ; # endif } ; # if WITH_EDITORONLY_DATA template<> struct TStructOpsTypeTraits<FAnimNode_RigidBody> : public TStructOpsTypeTraitsBase2<FAnimNode_RigidBody> { enum { WithPostSerialize = true,} ; } ; # endif FTransform)",
    "insertText": "SpaceToWorldTransform(ESimulationSpace Space, const FTransform& ComponentToWorld, const FTransform& BaseBoneTM)"
  },
  {
    "label": "WorldPositionToSpace()",
    "kind": "Method",
    "detail": "Function (default : return FVector::ZeroVector ; } } FVector)",
    "insertText": "WorldPositionToSpace(ESimulationSpace Space, const FVector& WorldPoint, const FTransform& ComponentToWorld, const FTransform& BaseBoneTM)"
  },
  {
    "label": "ConvertCSTransformToSimSpace()",
    "kind": "Method",
    "detail": "Function (default : return FVector::ZeroVector ; } } FTransform)",
    "insertText": "ConvertCSTransformToSimSpace(ESimulationSpace Space, const FTransform& InCSTransform, const FTransform& ComponentToWorld, const FTransform& BaseBoneTM)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "ensureMsgf(false, TEXT(\"Unsupported Simulation Space\"))"
  }
]