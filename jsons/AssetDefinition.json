[
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "UThumbnailInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UThumbnailInfo"
  },
  {
    "label": "FAssetDisplayInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetDisplayInfo"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "IAssetSystemInfoProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetSystemInfoProvider"
  },
  {
    "label": "IAssetStatusInfoProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetStatusInfoProvider"
  },
  {
    "label": "ISourceControlRevision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISourceControlRevision"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAssetArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetArgs"
  },
  {
    "label": "FAssetOpenArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetOpenArgs"
  },
  {
    "label": "FAssetActivateArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetActivateArgs"
  },
  {
    "label": "FAssetSourceFilesArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetSourceFilesArgs"
  },
  {
    "label": "FAssetSourceFilesResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetSourceFilesResult"
  },
  {
    "label": "FAssetMergeResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetMergeResults"
  },
  {
    "label": "EMergeFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMergeFlags"
  },
  {
    "label": "FAssetAutomaticMergeArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetAutomaticMergeArgs"
  },
  {
    "label": "FAssetManualMergeArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetManualMergeArgs"
  },
  {
    "label": "FAssetSupportResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetSupportResponse"
  },
  {
    "label": "FRevisionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRevisionInfo"
  },
  {
    "label": "FAssetDiffArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetDiffArgs"
  },
  {
    "label": "FAssetOpenSupportArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetOpenSupportArgs"
  },
  {
    "label": "ASSETDEFINITION_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ASSETDEFINITION_API"
  },
  {
    "label": "FAssetOpenSupport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetOpenSupport"
  },
  {
    "label": "UAssetDefinitionRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetDefinitionRegistry"
  },
  {
    "label": "FAssetImportInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetImportInfo"
  },
  {
    "label": "FAssetFilterDataCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetFilterDataCache"
  },
  {
    "label": "FAssetActionThumbnailOverlayInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetActionThumbnailOverlayInfo"
  },
  {
    "label": "FAssetButtonActionExtension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetButtonActionExtension"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / Object . h \" # include \" UObject / SoftObjectPtr . h \" # include \" AssetRegistry / AssetData . h \" # include \" Framework / SlateDelegates . h \" # include \" Misc / ScopedSlowTask . h \" # include \" Toolkits / IToolkit . h \" # include \" Misc / AssetFilterData . h \" # include \" AssetDefinition . generated . h \" class IToolkitHost ; class UThumbnailInfo ; struct FAssetDisplayInfo ; struct FSlateBrush ; class IAssetSystemInfoProvider ; class IAssetStatusInfoProvider ; class ISourceControlRevision ; class SWidget ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FAssetArgs()",
    "kind": "Method",
    "detail": "Function (Edit,View,} ; enum class EAssetMergeResult : uint8 { Unknown,Completed,Cancelled,} ; enum class EPathUse : uint8 { Display,AbsolutePath } ; struct FAssetArgs {)",
    "insertText": "FAssetArgs()"
  },
  {
    "label": "FAssetArgs()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAssetArgs(TConstArrayView<FAssetData> InAssets) : Assets(InAssets)"
  },
  {
    "label": "LoadObjects()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FAssetData> Assets ; template<ExpectedObjectType> TArray<ExpectedObjectType*>)",
    "insertText": "LoadObjects(const TSet<FName>& LoadTags = {}, TArray<FAssetData>* OutAssetsThatFailedToLoad = nullptr)"
  },
  {
    "label": "SlowTask()",
    "kind": "Method",
    "detail": "Function (FScopedSlowTask)",
    "insertText": "SlowTask((float)Assets.Num())"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<ExpectedObjectType*> LoadedObjects ; LoadedObjects .)",
    "insertText": "Reserve(Assets.Num())"
  },
  {
    "label": "EnterProgressFrame()",
    "kind": "Method",
    "detail": "Function (SlowTask .)",
    "insertText": "EnterProgressFrame(1, FText::FromString(Asset.GetObjectPathString()))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LoadedObjects .)",
    "insertText": "Add(ExpectedType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } })",
    "insertText": "if(OutAssetsThatFailedToLoad)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutAssetsThatFailedToLoad ->)",
    "insertText": "Add(Asset)"
  },
  {
    "label": "LoadFirstValid()",
    "kind": "Method",
    "detail": "Function (} } return LoadedObjects ; } template<ExpectedObjectType> ExpectedObjectType*)",
    "insertText": "LoadFirstValid(const TSet<FName>& LoadTags = {})"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAssetActivateArgs : public FAssetArgs { EAssetActivationMethod ActivationMethod ; } ; struct FAssetSourceFilesArgs : public FAssetArgs { EPathUse FilePathFormat = EPathUse::AbsolutePath ; } ; struct FAssetSourceFilesResult { FString FilePath ; FString DisplayLabel ; FDateTime Timestamp ; FMD5Hash FileHash ; } ; struct FAssetMergeResults { UPackage* MergedPackage = nullptr ; EAssetMergeResult Result = EAssetMergeResult::Unknown ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnAssetMergeResolved, const FAssetMergeResults& Results)"
  },
  {
    "label": "Supported()",
    "kind": "Method",
    "detail": "Function (enum EMergeFlags : uint8 { MF_NONE = 0 x00,MF_NO_GUI = 0 x01,MF_HANDLE_SOURCE_CONTROL = 0 x02,} ; struct FAssetAutomaticMergeArgs { UObject* LocalAsset = nullptr ; FOnAssetMergeResolved ResolutionCallback ; EMergeFlags Flags = MF_HANDLE_SOURCE_CONTROL ; } ; struct FAssetManualMergeArgs { UObject* LocalAsset = nullptr ; UObject* BaseAsset = nullptr ; UObject* RemoteAsset = nullptr ; FOnAssetMergeResolved ResolutionCallback ; EMergeFlags Flags = MF_HANDLE_SOURCE_CONTROL ; } ; struct FAssetSupportResponse { public : FAssetSupportResponse)",
    "insertText": "Supported()"
  },
  {
    "label": "NotSupported()",
    "kind": "Method",
    "detail": "Function (} FAssetSupportResponse)",
    "insertText": "NotSupported()"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (} FAssetSupportResponse)",
    "insertText": "Error(const FText& ErrorText)"
  },
  {
    "label": "IsSupported()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSupported()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} private : bool bSupported ; FText ErrorText ; } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(BlueprintReadWrite, Category=\"Asset Revision\")"
  },
  {
    "label": "InvalidRevision()",
    "kind": "Method",
    "detail": "Function (FRevisionInfo)",
    "insertText": "InvalidRevision()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const FRevisionInfo Ret = {)",
    "insertText": "TEXT(\"\"), -1, FDateTime()"
  },
  {
    "label": "FAssetOpenSupport()",
    "kind": "Method",
    "detail": "Function (} EAssetOpenMethod OpenMethod ; } ; struct EAssetCategoryPaths { FAssetCategoryPath Basic ; FAssetCategoryPath Animation ; FAssetCategoryPath Audio ; FAssetCategoryPath Blueprint ; FAssetCategoryPath Cinematics ; FAssetCategoryPath Foliage ; FAssetCategoryPath FX ; FAssetCategoryPath Gameplay ; FAssetCategoryPath AI ; FAssetCategoryPath Input ; FAssetCategoryPath Material ; FAssetCategoryPath Media ; FAssetCategoryPath Misc ; FAssetCategoryPath Physics ; FAssetCategoryPath Texture ; FAssetCategoryPath UI ; FAssetCategoryPath World ; } ; struct FAssetOpenSupport { public :)",
    "insertText": "FAssetOpenSupport(EAssetOpenMethod InOpenMethod, bool bInSupported) : OpenMethod(InOpenMethod) , IsSupported(bInSupported)"
  },
  {
    "label": "FAssetOpenSupport()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAssetOpenSupport(EAssetOpenMethod InOpenMethod, bool bInSupported, EToolkitMode::Type InRequiredToolkitMode) : OpenMethod(InOpenMethod) , IsSupported(bInSupported) , RequiredToolkitMode(InRequiredToolkitMode)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} EAssetOpenMethod OpenMethod ; bool IsSupported ; TOptional<EToolkitMode::Type> RequiredToolkitMode ; } ; class UAssetDefinitionRegistry ; struct FAssetImportInfo ; enum class EIncludeClassInFilter : uint8 { IfClassIsNotAbstract,Always } ; struct FAssetFilterDataCache { public : TArray<FAssetFilterData> Filters ; } ; struct FAssetActionThumbnailOverlayInfo { public : TSharedPtr<SWidget> ActionImageWidget ; TSharedPtr<SWidget> ActionButtonWidget ; } ; struct FAssetButtonActionExtension { public : TAttribute<FText> PickTooltipAttribute ; TAttribute<const FSlateBrush*> PickBrushAttribute ; FOnClicked OnClicked ; } ;)",
    "insertText": "UCLASS(Abstract)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UAssetDefinition()"
  },
  {
    "label": "PostCDOContruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostCDOContruct()"
  },
  {
    "label": "GetAssetDisplayName()",
    "kind": "Method",
    "detail": "Function (public : FText)",
    "insertText": "GetAssetDisplayName() const PURE_VIRTUAL(UAssetDefinition::GetAssetDisplayName, ensureMsgf(false && \"NotImplemented\", TEXT(\"NotImplemented\")); return FText();)"
  },
  {
    "label": "GetAssetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetAssetDisplayName(const FAssetData& AssetData)"
  },
  {
    "label": "GetAssetClass()",
    "kind": "Method",
    "detail": "Function (} TSoftClassPtr<UObject>)",
    "insertText": "GetAssetClass() const PURE_VIRTUAL(UAssetDefinition::GetAssetClass, ensureMsgf(false && \"NotImplemented\", TEXT(\"NotImplemented\")); return TSoftClassPtr<UClass>();)"
  },
  {
    "label": "GetAssetColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetAssetColor() const PURE_VIRTUAL(UAssetDefinition::GetAssetColor, ensureMsgf(false && \"NotImplemented\", TEXT(\"NotImplemented\")); return FColor::Red;)"
  },
  {
    "label": "GetAssetDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetAssetDescription(const FAssetData& AssetData)"
  },
  {
    "label": "GetAssetCategories()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FAssetCategoryPath>)",
    "insertText": "GetAssetCategories()"
  },
  {
    "label": "PrepareToActivateAssets()",
    "kind": "Method",
    "detail": "Function (public : TArray<FAssetData>)",
    "insertText": "PrepareToActivateAssets(const FAssetActivateArgs& ActivateArgs)"
  },
  {
    "label": "GetAssetOpenSupport()",
    "kind": "Method",
    "detail": "Function (} FAssetOpenSupport)",
    "insertText": "GetAssetOpenSupport(const FAssetOpenSupportArgs& OpenSupportArgs)"
  },
  {
    "label": "OpenAssets()",
    "kind": "Method",
    "detail": "Function (} EAssetCommandResult)",
    "insertText": "OpenAssets(const FAssetOpenArgs& OpenArgs) const PURE_VIRTUAL(UAssetDefinition::OpenAsset, ensureMsgf(false && \"NotImplemented\", TEXT(\"NotImplemented\")); return EAssetCommandResult::Unhandled;)"
  },
  {
    "label": "ActivateAssets()",
    "kind": "Method",
    "detail": "Function (EAssetCommandResult)",
    "insertText": "ActivateAssets(const FAssetActivateArgs& ActivateArgs)"
  },
  {
    "label": "CanDuplicate()",
    "kind": "Method",
    "detail": "Function (} FAssetSupportResponse)",
    "insertText": "CanDuplicate(const FAssetData& InAsset)"
  },
  {
    "label": "CanLocalize()",
    "kind": "Method",
    "detail": "Function (} FAssetSupportResponse)",
    "insertText": "CanLocalize(const FAssetData& InAsset)"
  },
  {
    "label": "CanImport()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanImport()"
  },
  {
    "label": "FAssetFilterDataCache()",
    "kind": "Method",
    "detail": "Function (FilterCache = MakeShared<)",
    "insertText": "FAssetFilterDataCache()"
  },
  {
    "label": "BuildFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildFilters(FilterCache->Filters)"
  },
  {
    "label": "ToSharedRef()",
    "kind": "Method",
    "detail": "Function (} return FilterCache .)",
    "insertText": "ToSharedRef()"
  },
  {
    "label": "BuildFilters()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "BuildFilters(TArray<FAssetFilterData>& OutFilters)"
  },
  {
    "label": "GetObjectDisplayNameText()",
    "kind": "Method",
    "detail": "Function (public : FText)",
    "insertText": "GetObjectDisplayNameText(UObject* Object)"
  },
  {
    "label": "GetSourceFiles()",
    "kind": "Method",
    "detail": "Function (} EAssetCommandResult)",
    "insertText": "GetSourceFiles(const FAssetSourceFilesArgs& InArgs, TFunctionRef<bool(const FAssetSourceFilesResult& InSourceFile)> SourceFileFunc)"
  },
  {
    "label": "PerformAssetDiff()",
    "kind": "Method",
    "detail": "Function (EAssetCommandResult)",
    "insertText": "PerformAssetDiff(const FAssetDiffArgs& DiffArgs)"
  },
  {
    "label": "GetThumbnailActionOverlay()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetThumbnailActionOverlay(const FAssetData& InAssetData, FAssetActionThumbnailOverlayInfo& OutActionOverlayInfo)"
  },
  {
    "label": "ShouldSaveExternalPackages()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "ShouldSaveExternalPackages()"
  }
]