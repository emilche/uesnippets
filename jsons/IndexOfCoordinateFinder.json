[
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FIndexOfCoordinateFinder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" namespace UE::CADKernel { class FIndexOfCoordinateFinder { protected : const TArray<double>& Coordinates ; public :)",
    "insertText": "FIndexOfCoordinateFinder(const TArray<double>& InPolylineCoordinates) : Coordinates(InPolylineCoordinates)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Find(const double InCoordinate)"
  },
  {
    "label": "FLinearFinder()",
    "kind": "Method",
    "detail": "Function (} ; class FLinearFinder : public FIndexOfCoordinateFinder { int32& Index ; public :)",
    "insertText": "FLinearFinder(const TArray<double>& InPolylineCoordinates, int32& InOutIndex) : FIndexOfCoordinateFinder(InPolylineCoordinates) , Index(InOutIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index = 0 ; return Index ; })",
    "insertText": "if(InCoordinate > Coordinates.Last())"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Index = Coordinates .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - Index ;)",
    "insertText": "if(InCoordinate + DOUBLE_SMALL_NUMBER >= Coordinates[Index])"
  },
  {
    "label": "FDichotomyFinder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDichotomyFinder(const TArray<double>& InPolylineCoordinates, int32 InStartLowerBound, int32 InStartUpperBound) : FIndexOfCoordinateFinder(InPolylineCoordinates) , StartLower(InStartLowerBound) , StartUpper(InStartUpperBound)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((StartUpper - StartLower < 1) || (InCoordinate < Coordinates[StartLower + 1]))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (StartLower = StartUpper ; return StartUpper ; } int32 LowerBound = StartLower ; int32 UpperBound = StartUpper ;)",
    "insertText": "while(LowerBound <= UpperBound)"
  },
  {
    "label": "Center()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Center(LowerBound + UpperBound)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StartLower = Center ; return Center ; } else)",
    "insertText": "if(InCoordinate < Coordinates[Center])"
  }
]