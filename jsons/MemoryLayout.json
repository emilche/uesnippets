[
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FHashedName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHashedName"
  },
  {
    "label": "FShaderKeyGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderKeyGenerator"
  },
  {
    "label": "FSHA1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSHA1"
  },
  {
    "label": "FMemoryImageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryImageWriter"
  },
  {
    "label": "FMemoryUnfreezeContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryUnfreezeContent"
  },
  {
    "label": "FPointerTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointerTableBase"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FTypeLayoutDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypeLayoutDesc"
  },
  {
    "label": "FPlatformTypeLayoutParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformTypeLayoutParameters"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "T"
  },
  {
    "label": "FMemoryToStringContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryToStringContext"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FFieldLayoutDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFieldLayoutDesc"
  },
  {
    "label": "FRegisterTypeLayoutDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRegisterTypeLayoutDesc"
  },
  {
    "label": "CProvidesDefaultUObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CProvidesDefaultUObject"
  },
  {
    "label": "THasCustomDefaultObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "THasCustomDefaultObject"
  },
  {
    "label": "TGetDefaultObjectHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGetDefaultObjectHelper"
  },
  {
    "label": "TValidateInterfaceHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TValidateInterfaceHelper"
  },
  {
    "label": "TUsePropertyFreezing",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TUsePropertyFreezing"
  },
  {
    "label": "TGetFreezeImageHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGetFreezeImageHelper"
  },
  {
    "label": "TGetFreezeImageFieldHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGetFreezeImageFieldHelper"
  },
  {
    "label": "TGetBaseTypeHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGetBaseTypeHelper"
  },
  {
    "label": "TInitializeBaseHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TInitializeBaseHelper"
  },
  {
    "label": "CTypeLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CTypeLayout"
  },
  {
    "label": "THasTypeLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "THasTypeLayout"
  },
  {
    "label": "TStaticGetTypeLayoutHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStaticGetTypeLayoutHelper"
  },
  {
    "label": "TGetTypeLayoutHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGetTypeLayoutHelper"
  },
  {
    "label": "Flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flags"
  },
  {
    "label": "UE_STATIC_ONLY()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Concepts / StaticClassProvider . h \" # include \" Concepts / StaticStructProvider . h \" # include \" Containers / EnumAsByte . h \" # include \" Containers / StringFwd . h \" # include \" HAL / UnrealMemory . h \" # include \" Misc / DelayedAutoRegister . h \" # include \" Templates / EnableIf . h \" # include \" Templates / IsAbstract . h \" # include \" Templates / IsPolymorphic . h \" # include \" Templates / Models . h \" # include \" Templates / UnrealTemplate . h \" class FCbFieldView ; class FCbWriter ; class FHashedName ; class FShaderKeyGenerator ; class FSHA1 ; class FMemoryImageWriter ; class FMemoryUnfreezeContent ; class FPointerTableBase ; class ITargetPlatform ; struct FTypeLayoutDesc ; struct FPlatformTypeLayoutParameters ; # define)",
    "insertText": "UE_STATIC_ONLY(T) #if PLATFORM_ANDROID || PLATFORM_MAC || PLATFORM_IOS || PLATFORM_TVOS #define UE_DECLARE_INTERNAL_LINK_BASE(T) template<int Counter, typename Dummy=void> struct T #define UE_DECLARE_INTERNAL_LINK_SPECIALIZATION(T, Counter) template<typename Dummy> struct T<Counter, Dummy> #else #define UE_DECLARE_INTERNAL_LINK_BASE(T) template<int Counter> struct T #define UE_DECLARE_INTERNAL_LINK_SPECIALIZATION(T, Counter) template<> struct T<Counter> #endif template<typename T> const FTypeLayoutDesc& StaticGetTypeLayoutDesc()"
  },
  {
    "label": "AppendIndent()",
    "kind": "Method",
    "detail": "Function (struct FMemoryToStringContext { void)",
    "insertText": "AppendIndent()"
  },
  {
    "label": "AppendNullptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendNullptr()"
  },
  {
    "label": "AppendUnfrozenPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendUnfrozenPointer(const FTypeLayoutDesc& StaticTypeDesc)"
  },
  {
    "label": "AppendFrozenPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendFrozenPointer(const FTypeLayoutDesc& StaticTypeDesc, int32 FrozenTypeIndex)"
  },
  {
    "label": "TryGetPrevPointerTable()",
    "kind": "Method",
    "detail": "Function (const FPointerTableBase*)",
    "insertText": "TryGetPrevPointerTable()"
  },
  {
    "label": "MakeFlagsEditorOnly()",
    "kind": "Method",
    "detail": "Function (} Type)",
    "insertText": "MakeFlagsEditorOnly(uint32 Flags = None)"
  },
  {
    "label": "MakeFlagsRayTracing()",
    "kind": "Method",
    "detail": "Function (} Type)",
    "insertText": "MakeFlagsRayTracing(uint32 Flags = None)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } struct FFieldLayoutDesc { typedef)",
    "insertText": "void(FWriteFrozenMemoryImageFunc)(FMemoryImageWriter& Writer, const void* Object, const void* FieldObject, const FTypeLayoutDesc& TypeDesc, const FTypeLayoutDesc& DerivedTypeDesc)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (const TCHAR* Name ; const struct FTypeLayoutDesc* Type ; const FFieldLayoutDesc* Next ; FWriteFrozenMemoryImageFunc* WriteFrozenMemoryImageFunc ; uint32 Offset ; uint32 NumArray ; EFieldLayoutFlags::Type Flags ; uint8 BitFieldSize ; uint8 UFieldNameLength ; } ; struct FTypeLayoutDesc { typedef)",
    "insertText": "void(FDestroyFunc)(void* Object, const FTypeLayoutDesc& TypeDesc, const FPointerTableBase* PtrTable, bool bIsFrozen)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(FWriteFrozenMemoryImageFunc)(FMemoryImageWriter& Writer, const void* Object, const FTypeLayoutDesc& TypeDesc, const FTypeLayoutDesc& DerivedTypeDesc)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "uint32(FUnfrozenCopyFunc)(const FMemoryUnfreezeContent& Context, const void* Object, const FTypeLayoutDesc& TypeDesc, void* OutDst)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "uint32(FAppendHashFunc)(const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FSHA1& Hasher)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "uint32(FGetTargetAlignmentFunc)(const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(FToStringFunc)(const void* Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef const)",
    "insertText": "void(FGetDefaultFunc)()"
  },
  {
    "label": "GetInvalidTypeLayout()",
    "kind": "Method",
    "detail": "Function (const FTypeLayoutDesc&)",
    "insertText": "GetInvalidTypeLayout()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FTypeLayoutDesc& TypeDesc)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(FTypeLayoutDesc& TypeDesc)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FTypeLayoutDesc*)",
    "insertText": "Find(uint64 NameHash)"
  },
  {
    "label": "GetOffsetToBase()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetOffsetToBase(const FTypeLayoutDesc& BaseTypeDesc)"
  },
  {
    "label": "IsDerivedFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDerivedFrom(const FTypeLayoutDesc& BaseTypeDesc)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const FTypeLayoutDesc* HashNext ; const TCHAR* Name ; const FFieldLayoutDesc* Fields ; FDestroyFunc* DestroyFunc ; FWriteFrozenMemoryImageFunc* WriteFrozenMemoryImageFunc ; FUnfrozenCopyFunc* UnfrozenCopyFunc ; FAppendHashFunc* AppendHashFunc ; FGetTargetAlignmentFunc* GetTargetAlignmentFunc ; FToStringFunc* ToStringFunc ; FGetDefaultFunc* GetDefaultObjectFunc ; uint64 NameHash ; uint32 Size ; uint32 SizeFromFields ; uint32 Alignment ; ETypeLayoutInterface::Type Interface ; uint8 NumBases ; uint8 NumVirtualBases ; uint8 IsIntrinsic : 1 ; uint8 IsInitialized : 1 ; bool)",
    "insertText": "operator(const FTypeLayoutDesc& Lhs, const FTypeLayoutDesc& Rhs)"
  },
  {
    "label": "FRegisterTypeLayoutDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRegisterTypeLayoutDesc(const TCHAR* Name, FTypeLayoutDesc& TypeDesc)"
  },
  {
    "label": "GetBaseOffset()",
    "kind": "Method",
    "detail": "Function (} ; template<T,Base> uint32)",
    "insertText": "GetBaseOffset()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "alignas(T) char Dummy[sizeof(T)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Derived = reinterpret_cast<)",
    "insertText": "T(Dummy)"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (} struct CProvidesDefaultUObject { template<T> auto)",
    "insertText": "Requires(const T&) -> decltype(T::StaticClass()->GetDefaultObject())"
  },
  {
    "label": "GetDefault()",
    "kind": "Method",
    "detail": "Function (} ; template<T> const T*)",
    "insertText": "GetDefault()"
  },
  {
    "label": "InternalGetDefaultObject()",
    "kind": "Method",
    "detail": "Function (template<T> struct THasCustomDefaultObject { bool Value = TModels_V<CProvidesDefaultUObject,T> ; } ; template<T> const T*)",
    "insertText": "InternalGetDefaultObject()"
  },
  {
    "label": "UE_STATIC_ONLY()",
    "kind": "Method",
    "detail": "Function (} else { const T Default ; return& Default ; } } template<T,ETypeLayoutInterface::Type InterfaceType> struct TGetDefaultObjectHelper {)",
    "insertText": "UE_STATIC_ONLY(TGetDefaultObjectHelper)"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "Do()"
  },
  {
    "label": "UE_STATIC_ONLY()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,ETypeLayoutInterface::Type InterfaceType> struct TValidateInterfaceHelper ; template<T> struct TValidateInterfaceHelper<T,ETypeLayoutInterface::NonVirtual> {)",
    "insertText": "UE_STATIC_ONLY(TValidateInterfaceHelper)"
  },
  {
    "label": "DefaultWriteMemoryImageField()",
    "kind": "Method",
    "detail": "Function (bool Value = true ; } ; namespace Freeze { void)",
    "insertText": "DefaultWriteMemoryImageField(FMemoryImageWriter& Writer, const void* Object, const void* FieldObject, const FTypeLayoutDesc& TypeDesc, const FTypeLayoutDesc& DerivedTypeDesc)"
  },
  {
    "label": "DefaultWriteMemoryImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultWriteMemoryImage(FMemoryImageWriter& Writer, const void* Object, const FTypeLayoutDesc& TypeDesc, const FTypeLayoutDesc& DerivedTypeDesc)"
  },
  {
    "label": "DefaultUnfrozenCopy()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "DefaultUnfrozenCopy(const FMemoryUnfreezeContent& Context, const void* Object, const FTypeLayoutDesc& TypeDesc, void* OutDst)"
  },
  {
    "label": "DefaultAppendHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "DefaultAppendHash(const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FSHA1& Hasher)"
  },
  {
    "label": "DefaultGetTargetAlignment()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "DefaultGetTargetAlignment(const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams)"
  },
  {
    "label": "DefaultToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultToString(const void* Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "AppendHashForNameAndSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AppendHashForNameAndSize(const TCHAR* Name, uint32 Size, FSHA1& Hasher)"
  },
  {
    "label": "IntrinsicWriteMemoryImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicWriteMemoryImage(FMemoryImageWriter& Writer, const void* Object, uint32 Size)"
  },
  {
    "label": "IntrinsicWriteMemoryImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicWriteMemoryImage(FMemoryImageWriter& Writer, void*, const FTypeLayoutDesc&)"
  },
  {
    "label": "DestroyObject()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "DestroyObject(T* Object, const FPointerTableBase* PtrTable, bool bIsFrozen)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Object -> ~)",
    "insertText": "T()"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Memset(Object, 0xfe, sizeof(T))"
  },
  {
    "label": "IntrinsicWriteMemoryImage()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "IntrinsicWriteMemoryImage(FMemoryImageWriter& Writer, const T& Object, const FTypeLayoutDesc& TypeDesc)"
  },
  {
    "label": "IntrinsicWriteMemoryImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicWriteMemoryImage(Writer, &Object, sizeof(T))"
  },
  {
    "label": "IntrinsicUnfrozenCopy()",
    "kind": "Method",
    "detail": "Function (} template<T> uint32)",
    "insertText": "IntrinsicUnfrozenCopy(const FMemoryUnfreezeContent& Context, const T& Object, void* OutDst)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(OutDst) T(Object)"
  },
  {
    "label": "IntrinsicAppendHash()",
    "kind": "Method",
    "detail": "Function (} template<T> uint32)",
    "insertText": "IntrinsicAppendHash(const T* DummyObject, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FSHA1& Hasher)"
  },
  {
    "label": "IntrinsicGetTargetAlignment()",
    "kind": "Method",
    "detail": "Function (} template<T> uint32)",
    "insertText": "IntrinsicGetTargetAlignment(const T* DummyObject, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams)"
  },
  {
    "label": "DefaultToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultToString(&Object, TypeDesc, LayoutParams, OutContext)"
  },
  {
    "label": "IntrinsicAppendHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "IntrinsicAppendHash(void* const* DummyObject, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FSHA1& Hasher)"
  },
  {
    "label": "IntrinsicGetTargetAlignment()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "IntrinsicGetTargetAlignment(void* const* DummyObject, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(char Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(short Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(int Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(int8 Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(long Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(long long Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(unsigned char Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(unsigned short Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(unsigned int Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(unsigned long Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(unsigned long long Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(float Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(double Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(wchar_t Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(char16_t Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicToString(void* Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "ExtractBitFieldValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractBitFieldValue(const void* Value, uint32 SrcBitOffset, uint32 DestBitOffset, uint32 NumBits, uint64& InOutValue)"
  },
  {
    "label": "IncludeField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IncludeField(const FFieldLayoutDesc* FieldDesc, const FPlatformTypeLayoutParameters& LayoutParams)"
  },
  {
    "label": "GetTargetAlignment()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTargetAlignment(const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AppendHash(const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FSHA1& Hasher)"
  },
  {
    "label": "AppendHashPair()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AppendHashPair(const FTypeLayoutDesc& KeyTypeDesc, const FTypeLayoutDesc& ValueTypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FSHA1& Hasher)"
  },
  {
    "label": "HashLayout()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "HashLayout(const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FSHAHash& OutHash)"
  },
  {
    "label": "HashLayouts()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "HashLayouts(const TArray<const FTypeLayoutDesc*>& TypeLayouts, const FPlatformTypeLayoutParameters& LayoutParams, FSHAHash& OutHash)"
  },
  {
    "label": "HashLayout()",
    "kind": "Method",
    "detail": "Function (FSHAHash)",
    "insertText": "HashLayout(const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} template<T> struct TUsePropertyFreezing { bool)",
    "insertText": "Value(TModels_V<CStaticClassProvider, T> || TModels_V<CStaticStructProvider, T>)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "alignas(FFieldLayoutDesc) static uint8 FieldBuffer[sizeof(FFieldLayoutDesc)"
  },
  {
    "label": "FieldDesc()",
    "kind": "Method",
    "detail": "Function (0 } ; FFieldLayoutDesc&)",
    "insertText": "FieldDesc(FFieldLayoutDesc*)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FieldDesc . Name =)",
    "insertText": "TEXT(\"BASE\")"
  },
  {
    "label": "BaseType()",
    "kind": "Method",
    "detail": "Function (FieldDesc . UFieldNameLength = 4 ; FieldDesc . Type =& StaticGetTypeLayoutDesc<)",
    "insertText": "BaseType()"
  },
  {
    "label": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS()",
    "kind": "Method",
    "detail": "Function (FieldDesc . WriteFrozenMemoryImageFunc = TGetFreezeImageFieldHelper<)",
    "insertText": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)>::Do()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FieldDesc . NumArray = 1 u ; FieldDesc . Next = TypeDesc . Fields ; TypeDesc . Fields =& FieldDesc ; + + TypeDesc . NumBases ;)",
    "insertText": "if(ETypeLayoutInterface::HasVTable(FieldDesc.Type->Interface))"
  },
  {
    "label": "InternalInitializeBasesHelper()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "InternalInitializeBasesHelper(FTypeLayoutDesc& TypeDesc)"
  },
  {
    "label": "RemainingBaseTypes()",
    "kind": "Method",
    "detail": "Function (InternalInitializeBasesHelper<T,)",
    "insertText": "RemainingBaseTypes(TypeDesc)"
  },
  {
    "label": "BaseType()",
    "kind": "Method",
    "detail": "Function (InternalInitializeBaseHelper<T,)",
    "insertText": "BaseType(TypeDesc)"
  },
  {
    "label": "UE_STATIC_ONLY()",
    "kind": "Method",
    "detail": "Function (} template<T> struct TGetBaseTypeHelper {)",
    "insertText": "UE_STATIC_ONLY(TGetBaseTypeHelper)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (template<InternalType> InternalType::DerivedType)",
    "insertText": "Test(const typename InternalType::DerivedType*)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (template<InternalType> void)",
    "insertText": "Test(...)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using Type =)",
    "insertText": "decltype(Test<T>(nullptr))"
  },
  {
    "label": "UE_STATIC_ONLY()",
    "kind": "Method",
    "detail": "Function (} ; template<T,BaseType> struct TInitializeBaseHelper {)",
    "insertText": "UE_STATIC_ONLY(TInitializeBaseHelper)"
  },
  {
    "label": "FindFieldNameLength()",
    "kind": "Method",
    "detail": "Function (} } ; namespace Freeze { uint8)",
    "insertText": "FindFieldNameLength(const TCHAR* Name)"
  },
  {
    "label": "INTERNAL_LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "INTERNAL_LAYOUT_FIELD(T, InName, InOffset, InFlags, InNumArray, InBitFieldSize, Counter) \\ PRAGMA_DISABLE_DEPRECATION_WARNINGS \\ UE_DECLARE_INTERNAL_LINK_SPECIALIZATION(InternalLinkType, Counter - CounterBase)"
  },
  {
    "label": "UE_STATIC_ONLY()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_STATIC_ONLY(InternalLinkType)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (\\ InternalLinkType<Counter - CounterBase + 1)",
    "insertText": "Initialize(TypeDesc)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (\\ FieldDesc . Name =)",
    "insertText": "TEXT(#InName)"
  },
  {
    "label": "FindFieldNameLength()",
    "kind": "Method",
    "detail": "Function (\\ FieldDesc . UFieldNameLength =)",
    "insertText": "FindFieldNameLength(FieldDesc.Name)"
  },
  {
    "label": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS()",
    "kind": "Method",
    "detail": "Function (\\ FieldDesc . Type =& StaticGetTypeLayoutDesc<)",
    "insertText": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)>()"
  },
  {
    "label": "INTERNAL_LAYOUT_FIELD_WITH_WRITER()",
    "kind": "Method",
    "detail": "Function (\\ FieldDesc . Offset = InOffset ; \\ FieldDesc . NumArray = InNumArray ; \\ FieldDesc . Flags = InFlags ; \\ FieldDesc . BitFieldSize = InBitFieldSize ; \\ FieldDesc . Next = TypeDesc . Fields ; \\ TypeDesc . Fields =& FieldDesc ; \\ } \\ } ; \\ PRAGMA_ENABLE_DEPRECATION_WARNINGS # define)",
    "insertText": "INTERNAL_LAYOUT_FIELD_WITH_WRITER(T, InName, InFunc, Counter) \\ PRAGMA_DISABLE_DEPRECATION_WARNINGS \\ UE_DECLARE_INTERNAL_LINK_SPECIALIZATION(InternalLinkType, Counter - CounterBase)"
  },
  {
    "label": "CallWriteFrozenField()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "CallWriteFrozenField(FMemoryImageWriter& Writer, const void* Object, const void* FieldObject, const FTypeLayoutDesc& TypeDesc, const FTypeLayoutDesc& DerivedTypeDesc)"
  },
  {
    "label": "DerivedType()",
    "kind": "Method",
    "detail": "Function (\\ static_cast<const)",
    "insertText": "DerivedType(Object)->InFunc(Writer, *(PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)*)FieldObject)"
  },
  {
    "label": "STRUCT_OFFSET()",
    "kind": "Method",
    "detail": "Function (\\ FieldDesc . WriteFrozenMemoryImageFunc =& CallWriteFrozenField ; \\ FieldDesc . Offset =)",
    "insertText": "STRUCT_OFFSET(DerivedType, InName)"
  },
  {
    "label": "INTERNAL_LAYOUT_WRITE_MEMORY_IMAGE()",
    "kind": "Method",
    "detail": "Function (\\ FieldDesc . NumArray = 1 u ; \\ FieldDesc . Flags = EFieldLayoutFlags::None ; \\ FieldDesc . Next = TypeDesc . Fields ; \\ TypeDesc . Fields =& FieldDesc ; \\ } \\ } ; \\ PRAGMA_ENABLE_DEPRECATION_WARNINGS # define)",
    "insertText": "INTERNAL_LAYOUT_WRITE_MEMORY_IMAGE(Func, Counter) \\ UE_DECLARE_INTERNAL_LINK_SPECIALIZATION(InternalLinkType, Counter - CounterBase)"
  },
  {
    "label": "CallWriteMemoryImage()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "CallWriteMemoryImage(FMemoryImageWriter& Writer, const void* Object, const FTypeLayoutDesc& TypeDesc, const FTypeLayoutDesc& DerivedTypeDesc)"
  },
  {
    "label": "DerivedType()",
    "kind": "Method",
    "detail": "Function (\\ static_cast<const)",
    "insertText": "DerivedType(Object)->Func(Writer, TypeDesc)"
  },
  {
    "label": "INTERNAL_LAYOUT_TOSTRING()",
    "kind": "Method",
    "detail": "Function (\\ TypeDesc . WriteFrozenMemoryImageFunc =& CallWriteMemoryImage ; \\ } \\ } ; # define)",
    "insertText": "INTERNAL_LAYOUT_TOSTRING(Func, Counter) \\ UE_DECLARE_INTERNAL_LINK_SPECIALIZATION(InternalLinkType, Counter - CounterBase)"
  },
  {
    "label": "CallToString()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "CallToString(const void* Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "DerivedType()",
    "kind": "Method",
    "detail": "Function (\\ static_cast<const)",
    "insertText": "DerivedType(Object)->Func(OutContext)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (\\ TypeDesc . ToStringFunc =& CallToString ; \\ } \\ } ; # define)",
    "insertText": "LAYOUT_FIELD(T, Name, ...) PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "INTERNAL_LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_LAYOUT_FIELD(T, Name, STRUCT_OFFSET(DerivedType, Name), EFieldLayoutFlags::MakeFlags(__VA_ARGS__), 1u, 0u, __COUNTER__) #define LAYOUT_MUTABLE_FIELD(T, Name, ...) mutable PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "INTERNAL_LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_LAYOUT_FIELD(T, Name, STRUCT_OFFSET(DerivedType, Name), EFieldLayoutFlags::MakeFlags(__VA_ARGS__), 1u, 0u, __COUNTER__) #define LAYOUT_FIELD_INITIALIZED(T, Name, Value, ...) PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "INTERNAL_LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_LAYOUT_FIELD(T, Name, STRUCT_OFFSET(DerivedType, Name), EFieldLayoutFlags::MakeFlags(__VA_ARGS__), 1u, 0u, __COUNTER__) #define LAYOUT_MUTABLE_FIELD_INITIALIZED(T, Name, Value, ...) mutable PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "INTERNAL_LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_LAYOUT_FIELD(T, Name, STRUCT_OFFSET(DerivedType, Name), EFieldLayoutFlags::MakeFlags(__VA_ARGS__), 1u, 0u, __COUNTER__) #define LAYOUT_ARRAY(T, Name, NumArray, ...) PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "INTERNAL_LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_LAYOUT_FIELD(T, Name, STRUCT_OFFSET(DerivedType, Name), EFieldLayoutFlags::MakeFlags(__VA_ARGS__), NumArray, 0u, __COUNTER__) #define LAYOUT_MUTABLE_BITFIELD(T, Name, BitFieldSize, ...) mutable PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "INTERNAL_LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_LAYOUT_FIELD(T, Name, ~0u, EFieldLayoutFlags::MakeFlags(__VA_ARGS__), 1u, BitFieldSize, __COUNTER__) #define LAYOUT_BITFIELD(T, Name, BitFieldSize, ...) PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "INTERNAL_LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_LAYOUT_FIELD(T, Name, ~0u, EFieldLayoutFlags::MakeFlags(__VA_ARGS__), 1u, BitFieldSize, __COUNTER__) #define LAYOUT_FIELD_WITH_WRITER(T, Name, Func) PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "INTERNAL_LAYOUT_FIELD_WITH_WRITER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_LAYOUT_FIELD_WITH_WRITER(T, Name, Func, __COUNTER__) #define LAYOUT_MUTABLE_FIELD_WITH_WRITER(T, Name, Func) mutable PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "INTERNAL_LAYOUT_FIELD_WITH_WRITER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_LAYOUT_FIELD_WITH_WRITER(T, Name, Func, __COUNTER__) #define LAYOUT_WRITE_MEMORY_IMAGE(Func) INTERNAL_LAYOUT_WRITE_MEMORY_IMAGE(Func, __COUNTER__) #define LAYOUT_TOSTRING(Func) INTERNAL_LAYOUT_TOSTRING(Func, __COUNTER__) #if WITH_EDITORONLY_DATA #define LAYOUT_FIELD_EDITORONLY(T, Name, ...) PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "INTERNAL_LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_LAYOUT_FIELD(T, Name, STRUCT_OFFSET(DerivedType, Name), EFieldLayoutFlags::MakeFlagsEditorOnly(__VA_ARGS__), 1u, 0u, __COUNTER__) #define LAYOUT_ARRAY_EDITORONLY(T, Name, NumArray, ...) PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "INTERNAL_LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_LAYOUT_FIELD(T, Name, STRUCT_OFFSET(DerivedType, Name), EFieldLayoutFlags::MakeFlagsEditorOnly(__VA_ARGS__), NumArray, 0u, __COUNTER__) #define LAYOUT_BITFIELD_EDITORONLY(T, Name, BitFieldSize, ...) PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "INTERNAL_LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_LAYOUT_FIELD(T, Name, ~0u, EFieldLayoutFlags::MakeFlagsEditorOnly(__VA_ARGS__), 1u, BitFieldSize, __COUNTER__) #else #define LAYOUT_FIELD_EDITORONLY(T, Name, ...) #define LAYOUT_ARRAY_EDITORONLY(T, Name, NumArray, ...) #define LAYOUT_BITFIELD_EDITORONLY(T, Name, BitFieldSize, ...) #endif #define INTERNAL_LAYOUT_INTERFACE_PREFIX_NonVirtual(...) __VA_ARGS__ #define INTERNAL_LAYOUT_INTERFACE_PREFIX_Virtual(...) __VA_ARGS__ virtual #define INTERNAL_LAYOUT_INTERFACE_PREFIX_Abstract(...) virtual #define INTERNAL_LAYOUT_INTERFACE_PREFIX(Type) PREPROCESSOR_JOIN(INTERNAL_LAYOUT_INTERFACE_PREFIX_, Type)"
  },
  {
    "label": "INTERNAL_LAYOUT_INTERFACE_SUFFIX()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "INTERNAL_LAYOUT_INTERFACE_SUFFIX(Type) PREPROCESSOR_JOIN(INTERNAL_LAYOUT_INTERFACE_SUFFIX_, Type)"
  },
  {
    "label": "StaticGetTypeLayout()",
    "kind": "Method",
    "detail": "Function (} # define INTERNAL_LAYOUT_INTERFACE_INLINE_IMPL_Virtual { return)",
    "insertText": "StaticGetTypeLayout()"
  },
  {
    "label": "INTERNAL_LAYOUT_INTERFACE_INLINE_IMPL()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "INTERNAL_LAYOUT_INTERFACE_INLINE_IMPL(Type) PREPROCESSOR_JOIN(INTERNAL_LAYOUT_INTERFACE_INLINE_IMPL_, Type) #define INTERNAL_DECLARE_TYPE_LAYOUT_COMMON(T, InInterface)"
  },
  {
    "label": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS()",
    "kind": "Method",
    "detail": "Function (\\ public : using DerivedType =)",
    "insertText": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "UE_DECLARE_INTERNAL_LINK_BASE()",
    "kind": "Method",
    "detail": "Function (\\ ETypeLayoutInterface::Type InterfaceType = ETypeLayoutInterface::InInterface ; \\)",
    "insertText": "UE_DECLARE_INTERNAL_LINK_BASE(InternalLinkType)"
  },
  {
    "label": "INTERNAL_DECLARE_INLINE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "INTERNAL_DECLARE_INLINE_TYPE_LAYOUT(T, InInterface) \\ private: static void InternalDestroy(void* Object, const FTypeLayoutDesc&, const FPointerTableBase* PtrTable, bool bIsFrozen)"
  },
  {
    "label": "DestroyObject()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DestroyObject(static_cast<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)*>(Object), PtrTable, bIsFrozen)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(TValidateInterfaceHelper<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T), ETypeLayoutInterface::InInterface>::Value, #InInterface \" is invalid interface for \" #T)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "alignas(FTypeLayoutDesc) static uint8 TypeBuffer[sizeof(FTypeLayoutDesc)"
  },
  {
    "label": "TypeDesc()",
    "kind": "Method",
    "detail": "Function (0 } ; \\ FTypeLayoutDesc&)",
    "insertText": "TypeDesc(FTypeLayoutDesc*)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!TypeDesc.IsInitialized)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (\\ TypeDesc . IsInitialized = true ; \\ TypeDesc . Name =)",
    "insertText": "TEXT(#T)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (\\ TypeDesc . UnfrozenCopyFunc =& Freeze::DefaultUnfrozenCopy ; \\ TypeDesc . AppendHashFunc =& Freeze::DefaultAppendHash ; \\ TypeDesc . GetTargetAlignmentFunc =& Freeze::DefaultGetTargetAlignment ; \\ TypeDesc . ToStringFunc =& Freeze::DefaultToString ; \\ TypeDesc . DestroyFunc =& InternalDestroy ; \\ TypeDesc . Size =)",
    "insertText": "sizeof(PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T))"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (\\ TypeDesc . Alignment =)",
    "insertText": "alignof(PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T))"
  },
  {
    "label": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS()",
    "kind": "Method",
    "detail": "Function (\\ InternalInitializeBases<)",
    "insertText": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)>(TypeDesc)"
  },
  {
    "label": "INTERNAL_LAYOUT_INTERFACE_PREFIX()",
    "kind": "Method",
    "detail": "Function (\\ } \\ return TypeDesc ; } \\ public :)",
    "insertText": "INTERNAL_LAYOUT_INTERFACE_PREFIX(InInterface)(PREPROCESSOR_NOTHING) const FTypeLayoutDesc& GetTypeLayout() const INTERNAL_LAYOUT_INTERFACE_INLINE_IMPL(InInterface) \\ INTERNAL_DECLARE_TYPE_LAYOUT_COMMON(T, InInterface) #define INTERNAL_DECLARE_TYPE_LAYOUT(T, InInterface, RequiredAPI) \\ private: static void InternalDestroy(void* Object, const FTypeLayoutDesc&, const FPointerTableBase* PtrTable, bool bIsFrozen)"
  },
  {
    "label": "INTERNAL_LAYOUT_INTERFACE_PREFIX()",
    "kind": "Method",
    "detail": "Function (\\ public :)",
    "insertText": "INTERNAL_LAYOUT_INTERFACE_PREFIX(InInterface)(RequiredAPI) const FTypeLayoutDesc& GetTypeLayout() const INTERNAL_LAYOUT_INTERFACE_SUFFIX(InInterface) \\ INTERNAL_DECLARE_TYPE_LAYOUT_COMMON(T, InInterface) #define INTERNAL_DECLARE_LAYOUT_BASE(T) \\ private: using InternalBaseType = typename TGetBaseTypeHelper<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "InternalInitializeBases()",
    "kind": "Method",
    "detail": "Function (\\ template<InternalType> void)",
    "insertText": "InternalInitializeBases(FTypeLayoutDesc& TypeDesc)"
  },
  {
    "label": "INTERNAL_DECLARE_LAYOUT_EXPLICIT_BASES()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "INTERNAL_DECLARE_LAYOUT_EXPLICIT_BASES(T, ...) \\ template<typename InternalType> static void InternalInitializeBases(FTypeLayoutDesc& TypeDesc)"
  },
  {
    "label": "__VA_ARGS__()",
    "kind": "Method",
    "detail": "Function (InternalInitializeBasesHelper<InternalType,)",
    "insertText": "__VA_ARGS__(TypeDesc)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "DECLARE_TYPE_LAYOUT(T, Interface) INTERNAL_DECLARE_LAYOUT_BASE(T)"
  },
  {
    "label": "INTERNAL_DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_DECLARE_TYPE_LAYOUT(T, Interface, PREPROCESSOR_NOTHING) #define DECLARE_INLINE_TYPE_LAYOUT(T, Interface) INTERNAL_DECLARE_LAYOUT_BASE(T)"
  },
  {
    "label": "INTERNAL_DECLARE_INLINE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_DECLARE_INLINE_TYPE_LAYOUT(T, Interface) #define DECLARE_EXPORTED_TYPE_LAYOUT(T, RequiredAPI, Interface) INTERNAL_DECLARE_LAYOUT_BASE(T)"
  },
  {
    "label": "INTERNAL_DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_DECLARE_TYPE_LAYOUT(T, Interface, RequiredAPI) #define DECLARE_TYPE_LAYOUT_EXPLICIT_BASES(T, Interface, ...) INTERNAL_DECLARE_LAYOUT_EXPLICIT_BASES(T, __VA_ARGS__)"
  },
  {
    "label": "INTERNAL_DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_DECLARE_TYPE_LAYOUT(T, Interface, PREPROCESSOR_NOTHING) #define DECLARE_INLINE_TYPE_LAYOUT_EXPLICIT_BASES(T, Interface, ...) INTERNAL_DECLARE_LAYOUT_EXPLICIT_BASES(T, __VA_ARGS__)"
  },
  {
    "label": "INTERNAL_DECLARE_INLINE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_DECLARE_INLINE_TYPE_LAYOUT(T, Interface) #define DECLARE_EXPORTED_TYPE_LAYOUT_EXPLICIT_BASES(T, RequiredAPI, Interface, ...) INTERNAL_DECLARE_LAYOUT_EXPLICIT_BASES(T, __VA_ARGS__)"
  },
  {
    "label": "INTERNAL_DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INTERNAL_DECLARE_TYPE_LAYOUT(T, Interface, RequiredAPI) #define INTERNAL_IMPLEMENT_TYPE_LAYOUT_COMMON(TemplatePrefix, T) \\ PREPROCESSOR_REMOVE_OPTIONAL_PARENS(TemplatePrefix) void PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)::InternalDestroy(void* Object, const FTypeLayoutDesc&, const FPointerTableBase* PtrTable, bool bIsFrozen)"
  },
  {
    "label": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS(TemplatePrefix) FTypeLayoutDesc& PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)::StaticGetTypeLayout()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(TValidateInterfaceHelper<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T), InterfaceType>::Value, \"Invalid interface for \" #T)"
  },
  {
    "label": "INTERNAL_REGISTER_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (\\ } \\ return TypeDesc ; } # define)",
    "insertText": "INTERNAL_REGISTER_TYPE_LAYOUT(T) static const FDelayedAutoRegisterHelper ANONYMOUS_VARIABLE(DelayedAutoRegisterHelper)(EDelayedRegisterRunPhase::ShaderTypesReady, []{ FTypeLayoutDesc::Register(T::StaticGetTypeLayout()); })"
  },
  {
    "label": "IMPLEMENT_UNREGISTERED_TEMPLATE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "IMPLEMENT_UNREGISTERED_TEMPLATE_TYPE_LAYOUT(TemplatePrefix, T) \\ INTERNAL_IMPLEMENT_TYPE_LAYOUT_COMMON(TemplatePrefix, T)"
  },
  {
    "label": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS(TemplatePrefix) const FTypeLayoutDesc& PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)::GetTypeLayout()"
  },
  {
    "label": "IMPLEMENT_TEMPLATE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "IMPLEMENT_TEMPLATE_TYPE_LAYOUT(TemplatePrefix, T) \\ IMPLEMENT_UNREGISTERED_TEMPLATE_TYPE_LAYOUT(TemplatePrefix, T)"
  },
  {
    "label": "INTERNAL_REGISTER_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "INTERNAL_REGISTER_TYPE_LAYOUT(T) #define IMPLEMENT_TYPE_LAYOUT(T) IMPLEMENT_TEMPLATE_TYPE_LAYOUT(, T) #define IMPLEMENT_ABSTRACT_TYPE_LAYOUT(T) \\ INTERNAL_IMPLEMENT_TYPE_LAYOUT_COMMON(, T)"
  },
  {
    "label": "INTERNAL_REGISTER_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "INTERNAL_REGISTER_TYPE_LAYOUT(T) #define REGISTER_INLINE_TYPE_LAYOUT(T) \\ static const FDelayedAutoRegisterHelper ANONYMOUS_VARIABLE(DelayedAutoRegisterHelper)(EDelayedRegisterRunPhase::ShaderTypesReady, [] \\ { \\ PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)::StaticGetTypeLayout().Name = TEXT(#T); \\ FTypeLayoutDesc::Register(PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)::StaticGetTypeLayout()); \\ } \\)"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (struct CTypeLayout { template<T> auto)",
    "insertText": "Requires(const T&) -> decltype(T::StaticGetTypeLayout())"
  },
  {
    "label": "UE_STATIC_ONLY()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct THasTypeLayout {)",
    "insertText": "UE_STATIC_ONLY(THasTypeLayout)"
  },
  {
    "label": "UE_STATIC_ONLY()",
    "kind": "Method",
    "detail": "Function (bool Value = TModels_V<CTypeLayout,T> ; } ; template<T> struct TStaticGetTypeLayoutHelper {)",
    "insertText": "UE_STATIC_ONLY(TStaticGetTypeLayoutHelper)"
  },
  {
    "label": "UE_STATIC_ONLY()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TGetTypeLayoutHelper {)",
    "insertText": "UE_STATIC_ONLY(TGetTypeLayoutHelper)"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (const FTypeLayoutDesc&)",
    "insertText": "Do(const T& Object)"
  },
  {
    "label": "StaticGetTypeLayoutDesc()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> const FTypeLayoutDesc&)",
    "insertText": "StaticGetTypeLayoutDesc()"
  },
  {
    "label": "GetTypeLayoutDesc()",
    "kind": "Method",
    "detail": "Function (} template<T> const FTypeLayoutDesc&)",
    "insertText": "GetTypeLayoutDesc(const FPointerTableBase*, const T& Object)"
  },
  {
    "label": "InternalDeleteObjectFromLayout()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InternalDeleteObjectFromLayout(void* Object, const FTypeLayoutDesc& TypeDesc, const FPointerTableBase* PtrTable, bool bIsFrozen)"
  },
  {
    "label": "DeleteObjectFromLayout()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "DeleteObjectFromLayout(T* Object, const FPointerTableBase* PtrTable = nullptr, bool bIsFrozen = false)"
  },
  {
    "label": "GetTypeLayoutDesc()",
    "kind": "Method",
    "detail": "Function (const FTypeLayoutDesc& TypeDesc =)",
    "insertText": "GetTypeLayoutDesc(PtrTable, *Object)"
  },
  {
    "label": "InternalDeleteObjectFromLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDeleteObjectFromLayout(Object, TypeDesc, PtrTable, bIsFrozen)"
  },
  {
    "label": "DECLARE_TEMPLATE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "DECLARE_TEMPLATE_INTRINSIC_TYPE_LAYOUT(TemplatePrefix, T) \\ PREPROCESSOR_REMOVE_OPTIONAL_PARENS(TemplatePrefix) struct THasTypeLayout<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS()",
    "kind": "Method",
    "detail": "Function (const bool Value = true ; } ; \\)",
    "insertText": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS(TemplatePrefix) struct TStaticGetTypeLayoutHelper<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "IntrinsicWriteMemoryImage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "IntrinsicWriteMemoryImage(Writer, *static_cast<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T) const*>(Object), TypeDesc)"
  },
  {
    "label": "CallUnfrozenCopy()",
    "kind": "Method",
    "detail": "Function (\\ } \\ uint32)",
    "insertText": "CallUnfrozenCopy(const FMemoryUnfreezeContent& Context, const void* Object, const FTypeLayoutDesc& TypeDesc, void* OutDst)"
  },
  {
    "label": "IntrinsicUnfrozenCopy()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "IntrinsicUnfrozenCopy(Context, *static_cast<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T) const*>(Object), OutDst)"
  },
  {
    "label": "CallAppendHash()",
    "kind": "Method",
    "detail": "Function (\\ } \\ uint32)",
    "insertText": "CallAppendHash(const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FSHA1& Hasher)"
  },
  {
    "label": "IntrinsicAppendHash()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "IntrinsicAppendHash(static_cast<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T) const*>(nullptr), TypeDesc, LayoutParams, Hasher)"
  },
  {
    "label": "CallGetTargetAlignment()",
    "kind": "Method",
    "detail": "Function (\\ } \\ uint32)",
    "insertText": "CallGetTargetAlignment(const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams)"
  },
  {
    "label": "IntrinsicGetTargetAlignment()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "IntrinsicGetTargetAlignment(static_cast<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T) const*>(nullptr), TypeDesc, LayoutParams)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "IntrinsicToString(*static_cast<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T) const*>(Object), TypeDesc, LayoutParams, OutContext)"
  },
  {
    "label": "CallDestroy()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void)",
    "insertText": "CallDestroy(void* Object, const FTypeLayoutDesc&, const FPointerTableBase* PtrTable, bool bIsFrozen)"
  },
  {
    "label": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS()",
    "kind": "Method",
    "detail": "Function (\\ } \\ return TypeDesc ; } } ; \\)",
    "insertText": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS(TemplatePrefix) struct TGetTypeLayoutHelper<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (\\ const FTypeLayoutDesc&)",
    "insertText": "Do(const PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)&)"
  },
  {
    "label": "DECLARE_EXPORTED_TEMPLATE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "DECLARE_EXPORTED_TEMPLATE_INTRINSIC_TYPE_LAYOUT(TemplatePrefix, T, RequiredAPI) \\ PREPROCESSOR_REMOVE_OPTIONAL_PARENS(TemplatePrefix) struct THasTypeLayout<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)"
  },
  {
    "label": "IMPLEMENT_EXPORTED_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "IMPLEMENT_EXPORTED_INTRINSIC_TYPE_LAYOUT(T) \\ void TStaticGetTypeLayoutHelper<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)>::CallWriteMemoryImage(FMemoryImageWriter& Writer, const void* Object, const FTypeLayoutDesc& TypeDesc, const FTypeLayoutDesc& DerivedTypeDesc)"
  },
  {
    "label": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS()",
    "kind": "Method",
    "detail": "Function (\\ } \\ uint32 TStaticGetTypeLayoutHelper<)",
    "insertText": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)>::CallUnfrozenCopy(const FMemoryUnfreezeContent& Context, const void* Object, const FTypeLayoutDesc& TypeDesc, void* OutDst)"
  },
  {
    "label": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS()",
    "kind": "Method",
    "detail": "Function (\\ } \\ uint32 TStaticGetTypeLayoutHelper<)",
    "insertText": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)>::CallAppendHash(const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FSHA1& Hasher)"
  },
  {
    "label": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS()",
    "kind": "Method",
    "detail": "Function (\\ } \\ uint32 TStaticGetTypeLayoutHelper<)",
    "insertText": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)>::CallGetTargetAlignment(const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams)"
  },
  {
    "label": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void TStaticGetTypeLayoutHelper<)",
    "insertText": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)>::CallToString(const void* Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void TStaticGetTypeLayoutHelper<)",
    "insertText": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)>::CallDestroy(void* Object, const FTypeLayoutDesc&, const FPointerTableBase* PtrTable, bool bIsFrozen)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (\\ } \\ return TypeDesc ; } # define)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(T) DECLARE_TEMPLATE_INTRINSIC_TYPE_LAYOUT(template<>, T) #define ALIAS_TEMPLATE_TYPE_LAYOUT(TemplatePrefix, T, Alias) \\ PREPROCESSOR_REMOVE_OPTIONAL_PARENS(TemplatePrefix) struct TStaticGetTypeLayoutHelper<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)> : public TStaticGetTypeLayoutHelper<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(Alias)"
  },
  {
    "label": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS()",
    "kind": "Method",
    "detail": "Function (} ; \\)",
    "insertText": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS(TemplatePrefix) struct TGetTypeLayoutHelper<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(T)> : public TGetTypeLayoutHelper<PREPROCESSOR_REMOVE_OPTIONAL_PARENS(Alias)"
  },
  {
    "label": "ALIAS_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "ALIAS_TYPE_LAYOUT(Type, Alias) \\ static_assert(sizeof(PREPROCESSOR_REMOVE_OPTIONAL_PARENS(Type)) == sizeof(PREPROCESSOR_REMOVE_OPTIONAL_PARENS(Alias)), \"Using a type alias but the sizes don't match!\")"
  },
  {
    "label": "ALIAS_TEMPLATE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ALIAS_TEMPLATE_TYPE_LAYOUT(template<>, Type, Alias) DECLARE_INTRINSIC_TYPE_LAYOUT(char)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(short)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(int)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(int8)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(long)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(long long)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(unsigned char)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(unsigned short)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(unsigned int)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(unsigned long)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(unsigned long long)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(bool)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(float)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(double)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(wchar_t)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(char16_t)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(void*)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(ETypeLayoutInterface::Type)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(FThreadSafeCounter)"
  },
  {
    "label": "DECLARE_TEMPLATE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TEMPLATE_INTRINSIC_TYPE_LAYOUT(template<typename T>, TEnumAsByte<T>)"
  },
  {
    "label": "ALIAS_TEMPLATE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALIAS_TEMPLATE_TYPE_LAYOUT(template<typename T>, const T, T)"
  },
  {
    "label": "ALIAS_TEMPLATE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALIAS_TEMPLATE_TYPE_LAYOUT(template<typename T>, T*, void*)"
  },
  {
    "label": "DECLARE_EXPORTED_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (struct FPlatformTypeLayoutParameters {)",
    "insertText": "DECLARE_EXPORTED_TYPE_LAYOUT(FPlatformTypeLayoutParameters, CORE_API, NonVirtual)"
  },
  {
    "label": "Flag_Initialized()",
    "kind": "Method",
    "detail": "Function (enum Flags {)",
    "insertText": "Flag_Initialized(1 << 0), Flag_Is32Bit = (1 << 1), Flag_AlignBases = (1 << 2), Flag_WithEditorOnly = (1 << 3)"
  },
  {
    "label": "LAYOUT_FIELD_INITIALIZED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_INITIALIZED(uint32, MaxFieldAlignment, 0xffffffff)"
  },
  {
    "label": "LAYOUT_FIELD_INITIALIZED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_INITIALIZED(uint32, Flags, 0u)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "Is32Bit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Is32Bit()"
  },
  {
    "label": "HasAlignBases()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAlignBases()"
  },
  {
    "label": "WithEditorOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WithEditorOnly()"
  },
  {
    "label": "WithCasePreservingFName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WithCasePreservingFName()"
  },
  {
    "label": "GetRawPointerSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetRawPointerSize()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FPlatformTypeLayoutParameters& Ref)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPlatformTypeLayoutParameters& Lhs, const FPlatformTypeLayoutParameters& Rhs)"
  },
  {
    "label": "IsCurrentPlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCurrentPlatform()"
  },
  {
    "label": "InitializeForArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeForArchive(FArchive& Ar)"
  },
  {
    "label": "InitializeForPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeForPlatform(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "InitializeForPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeForPlatform(const FString& PlatformName, bool bHasEditorOnlyData)"
  },
  {
    "label": "InitializeForCurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeForCurrent()"
  },
  {
    "label": "InitializeForMSVC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeForMSVC()"
  },
  {
    "label": "InitializeForClang()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeForClang()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "AppendKeyString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendKeyString(FString& KeyString)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(FShaderKeyGenerator& KeyGen)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Append(FShaderKeyGenerator& KeyGen, const FPlatformTypeLayoutParameters& Value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Append(KeyGen)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "Save(FCbWriter& Writer)"
  },
  {
    "label": "TryLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLoad(FCbFieldView Field)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FPlatformTypeLayoutParameters& Value)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Save(Writer)"
  }
]