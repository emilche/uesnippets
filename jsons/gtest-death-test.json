[
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "GTEST_DECLARE_string_()",
    "kind": "Method",
    "detail": "Function (# ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_ # define GOOGLETEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_ # include \" gtest / internal / gtest - death - test - internal . h \")",
    "insertText": "GTEST_DECLARE_string_(death_test_style)"
  },
  {
    "label": "InDeathTestChild()",
    "kind": "Method",
    "detail": "Function (namespace testing { # if GTEST_HAS_DEATH_TEST namespace internal { GTEST_API_ bool)",
    "insertText": "InDeathTestChild()"
  },
  {
    "label": "ASSERT_EXIT()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "ASSERT_EXIT(statement, predicate, matcher) \\ GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_FATAL_FAILURE_) #define EXPECT_EXIT(statement, predicate, matcher) \\ GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_) #define ASSERT_DEATH(statement, matcher) \\ ASSERT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher) #define EXPECT_DEATH(statement, matcher) \\ EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)"
  },
  {
    "label": "ExitedWithCode()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ExitedWithCode(int exit_code)"
  },
  {
    "label": "ExitedWithCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitedWithCode(const ExitedWithCode&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const ExitedWithCode& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator()(int exit_status)"
  },
  {
    "label": "KilledBySignal()",
    "kind": "Method",
    "detail": "Function (private : const int exit_code_ ; } ; # if ! GTEST_OS_WINDOWS&& ! GTEST_OS_FUCHSIA class GTEST_API_ KilledBySignal { public :)",
    "insertText": "KilledBySignal(int signum)"
  },
  {
    "label": "EXPECT_DEBUG_DEATH()",
    "kind": "Method",
    "detail": "Function (private : const int signum_ ; } ; # endif # ifdef NDEBUG # define)",
    "insertText": "EXPECT_DEBUG_DEATH(statement, regex) \\ GTEST_EXECUTE_STATEMENT_(statement, regex) #define ASSERT_DEBUG_DEATH(statement, regex) \\ GTEST_EXECUTE_STATEMENT_(statement, regex) #else #define EXPECT_DEBUG_DEATH(statement, regex) EXPECT_DEATH(statement, regex) #define ASSERT_DEBUG_DEATH(statement, regex) ASSERT_DEATH(statement, regex) #endif #endif #define GTEST_UNSUPPORTED_DEATH_TEST(statement, regex, terminator) \\ GTEST_AMBIGUOUS_ELSE_BLOCKER_ \\ if (::testing::internal::AlwaysTrue())"
  },
  {
    "label": "GTEST_LOG_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GTEST_LOG_(WARNING)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(::testing::internal::AlwaysFalse())"
  },
  {
    "label": "PartialMatch()",
    "kind": "Method",
    "detail": "Function (\\::testing::internal::)",
    "insertText": "PartialMatch(\".*\", (regex))"
  },
  {
    "label": "GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement)"
  }
]