[
  {
    "label": "FPBDConstraintContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDConstraintContainer"
  },
  {
    "label": "FPBDIndexedConstraintContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDIndexedConstraintContainer"
  },
  {
    "label": "FPBDIslandConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDIslandConstraint"
  },
  {
    "label": "FConstraintHandleTypeID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintHandleTypeID"
  },
  {
    "label": "FConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintHandle"
  },
  {
    "label": "FIntrusiveConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIntrusiveConstraintHandle"
  },
  {
    "label": "TIntrusiveConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntrusiveConstraintHandle"
  },
  {
    "label": "T_CONTAINER",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T_CONTAINER"
  },
  {
    "label": "TConstraintHandleAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstraintHandleAllocator"
  },
  {
    "label": "FConstraintHandleHolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintHandleHolder"
  },
  {
    "label": "CHAOS_CONSTRAINTHANDLE_DEBUG_DETAILED_ENABLED()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / Declares . h \" # include \" Chaos / Vector . h \" # include \" Chaos / ParticleHandleFwd . h \" # ifndef CHAOS_CONSTRAINTHANDLE_DEBUG_ENABLED # define CHAOS_CONSTRAINTHANDLE_DEBUG_ENABLED 0 # endif # ifndef CHAOS_CONSTRAINTHANDLE_DEBUG_DETAILED_ENABLED # define)",
    "insertText": "CHAOS_CONSTRAINTHANDLE_DEBUG_DETAILED_ENABLED(CHAOS_CONSTRAINTHANDLE_DEBUG_ENABLED && 0) #endif #if UE_BUILD_SHIPPING || UE_BUILD_TEST static_assert(CHAOS_CONSTRAINTHANDLE_DEBUG_ENABLED == 0, \"CHAOS_CONSTRAINTHANDLE_DEBUG_ENABLED should be 0\")"
  },
  {
    "label": "FConstraintHandleTypeID()",
    "kind": "Method",
    "detail": "Function (# endif namespace Chaos { class FPBDConstraintContainer ; class FPBDIndexedConstraintContainer ; using FParticlePair = TVec2<FGeometryParticleHandle*> ; using FConstParticlePair = TVec2<const FGeometryParticleHandle*> ; namespace Private { class FPBDIslandConstraint ; } class FConstraintHandleTypeID { public :)",
    "insertText": "FConstraintHandleTypeID(const FName& InName, const FConstraintHandleTypeID* InBaseType = nullptr) : TypeName(InName) , BaseType(InBaseType)"
  },
  {
    "label": "InvalidTypeID()",
    "kind": "Method",
    "detail": "Function (} const FConstraintHandleTypeID)",
    "insertText": "InvalidTypeID()"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsA(const FConstraintHandleTypeID& TypeID)"
  },
  {
    "label": "FConstraintHandle()",
    "kind": "Method",
    "detail": "Function (} return false ; } private : FName ; const FConstraintHandleTypeID* BaseType ; } ; class FConstraintHandle { public : using FGeometryParticleHandle = TGeometryParticleHandle<FReal,3> ;)",
    "insertText": "FConstraintHandle() : ConstraintContainer(nullptr) , GraphEdge(nullptr)"
  },
  {
    "label": "FConstraintHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstraintHandle(FPBDConstraintContainer* InContainer) : ConstraintContainer(InContainer) , GraphEdge(nullptr)"
  },
  {
    "label": "FConstraintHandle()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FConstraintHandle()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetContainer()",
    "kind": "Method",
    "detail": "Function (} FPBDConstraintContainer*)",
    "insertText": "GetContainer()"
  },
  {
    "label": "GetConstraintGraphEdge()",
    "kind": "Method",
    "detail": "Function (} Private::FPBDIslandConstraint*)",
    "insertText": "GetConstraintGraphEdge()"
  },
  {
    "label": "GetConstrainedParticles()",
    "kind": "Method",
    "detail": "Function (GraphEdge = InEdge ; } TVec2<FGeometryParticleHandle*>)",
    "insertText": "GetConstrainedParticles()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(bool InEnabled)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "IsProbe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProbe()"
  },
  {
    "label": "WasAwakened()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WasAwakened()"
  },
  {
    "label": "GetContainerId()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetContainerId()"
  },
  {
    "label": "As()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "As()"
  },
  {
    "label": "AsUnsafe()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "AsUnsafe()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} const FConstraintHandleTypeID&)",
    "insertText": "GetType()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (const FConstraintHandleTypeID&)",
    "insertText": "StaticType()"
  },
  {
    "label": "STypeID()",
    "kind": "Method",
    "detail": "Function (FConstraintHandleTypeID)",
    "insertText": "STypeID(TEXT(\"FConstraintHandle\"), nullptr)"
  },
  {
    "label": "STypeID()",
    "kind": "Method",
    "detail": "Function (FConstraintHandleTypeID)",
    "insertText": "STypeID(TEXT(\"InvalidConstraintHandle\"), nullptr)"
  },
  {
    "label": "FIntrusiveConstraintHandle()",
    "kind": "Method",
    "detail": "Function (} protected : class FPBDConstraintContainer ; FPBDConstraintContainer* ConstraintContainer ; Private::FPBDIslandConstraint* GraphEdge ; } ; class FIntrusiveConstraintHandle : public FConstraintHandle { public :)",
    "insertText": "FIntrusiveConstraintHandle() : FConstraintHandle()"
  },
  {
    "label": "SetContainer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetContainer(FPBDConstraintContainer* InContainer)"
  },
  {
    "label": "STypeID()",
    "kind": "Method",
    "detail": "Function (FConstraintHandleTypeID)",
    "insertText": "STypeID(TEXT(\"FIntrusiveConstraintHandle\"), &FConstraintHandle::StaticType())"
  },
  {
    "label": "GetConstraint()",
    "kind": "Method",
    "detail": "Function (ConstraintContainer = InContainer ; } FConstraint*)",
    "insertText": "GetConstraint()"
  },
  {
    "label": "AllocHandle()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T_CONTAINER> class TConstraintHandleAllocator { public : using FConstraintContainer = T_CONTAINER ; using FConstraintContainerHandle = FConstraintContainer::FConstraintContainerHandle ; FConstraintContainerHandle*)",
    "insertText": "AllocHandle(FConstraintContainer* ConstraintContainer, int32 ConstraintIndex)"
  },
  {
    "label": "FreeHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FreeHandle(FConstraintContainerHandle* Handle)"
  },
  {
    "label": "FConstraintHandleHolder()",
    "kind": "Method",
    "detail": "Function (delete Handle ; } } ; class FConstraintHandleHolder { public :)",
    "insertText": "FConstraintHandleHolder() : Handle(nullptr)"
  },
  {
    "label": "InitDebugData()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_CONSTRAINTHANDLE_DEBUG_ENABLED)",
    "insertText": "InitDebugData()"
  },
  {
    "label": "FConstraintHandleHolder()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "FConstraintHandleHolder(FConstraintHandle* InHandle) : Handle(InHandle)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif } FConstraintHandle*)",
    "insertText": "operator()"
  },
  {
    "label": "GetParticle0()",
    "kind": "Method",
    "detail": "Function (} private : FConstraintHandle* Handle ; # if CHAOS_CONSTRAINTHANDLE_DEBUG_ENABLED public : const FGeometryParticleHandle*)",
    "insertText": "GetParticle0()"
  }
]