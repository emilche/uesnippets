[
  {
    "label": "FPBDConstraintContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDConstraintContainer"
  },
  {
    "label": "FPBDIndexedConstraintContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDIndexedConstraintContainer"
  },
  {
    "label": "FPBDIslandConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDIslandConstraint"
  },
  {
    "label": "chain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "chain"
  },
  {
    "label": "FConstraintHandleTypeID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintHandleTypeID"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintHandle"
  },
  {
    "label": "FPBDConstraintContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDConstraintContainer"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "should",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "should"
  },
  {
    "label": "FIntrusiveConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIntrusiveConstraintHandle"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "TIntrusiveConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntrusiveConstraintHandle"
  },
  {
    "label": "T_CONTAINER",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T_CONTAINER"
  },
  {
    "label": "TConstraintHandleAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstraintHandleAllocator"
  },
  {
    "label": "FConstraintHandleHolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintHandleHolder"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (UE_BUILD_TEST)",
    "insertText": "static_assert(CHAOS_CONSTRAINTHANDLE_DEBUG_ENABLED == 0, \"CHAOS_CONSTRAINTHANDLE_DEBUG_ENABLED should be 0\")"
  },
  {
    "label": "FConstraintHandleTypeID()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FConstraintHandleTypeID(NAME_None)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (graph)",
    "insertText": "check(GraphEdge == nullptr)"
  },
  {
    "label": "FConstraintContainerHandle()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "FConstraintContainerHandle(ConstraintContainer, ConstraintIndex)"
  },
  {
    "label": "InitDebugData()",
    "kind": "Method",
    "detail": "Function (CHAOS_CONSTRAINTHANDLE_DEBUG_ENABLED)",
    "insertText": "InitDebugData()"
  },
  {
    "label": "InitDebugData()",
    "kind": "Method",
    "detail": "Function (CHAOS_CONSTRAINTHANDLE_DEBUG_ENABLED)",
    "insertText": "InitDebugData()"
  },
  {
    "label": "InitDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDebugData()"
  }
]