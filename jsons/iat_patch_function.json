[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "IATPatchFunction()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_IAT_PATCH_FUNCTION_H_ # define BASE_WIN_IAT_PATCH_FUNCTION_H_ # include<windows . h> # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" namespace base { namespace win { class BASE_EXPORT IATPatchFunction { public :)",
    "insertText": "IATPatchFunction()"
  },
  {
    "label": "IATPatchFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IATPatchFunction(const IATPatchFunction&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IATPatchFunction&)",
    "insertText": "operator(const IATPatchFunction&)"
  },
  {
    "label": "Patch()",
    "kind": "Method",
    "detail": "Function (DWORD)",
    "insertText": "Patch(const wchar_t* module, const char* imported_from_module, const char* function_name, void* new_function)"
  },
  {
    "label": "PatchFromModule()",
    "kind": "Method",
    "detail": "Function (DWORD)",
    "insertText": "PatchFromModule(HMODULE module, const char* imported_from_module, const char* function_name, void* new_function)"
  },
  {
    "label": "Unpatch()",
    "kind": "Method",
    "detail": "Function (DWORD)",
    "insertText": "Unpatch()"
  },
  {
    "label": "is_patched()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_patched()"
  },
  {
    "label": "original_function()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "original_function()"
  }
]