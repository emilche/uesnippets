[
  {
    "label": "IQueuedWork",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IQueuedWork"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FThreadPoolPriorityQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadPoolPriorityQueue"
  },
  {
    "label": "FQueuedThreadPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueuedThreadPool"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" GenericPlatform / GenericPlatformAffinity . h \" # include \" Templates / Function . h \" class IQueuedWork ; enum class EQueuedWorkPriority : uint8 { Blocking = 0,Highest = 1,High = 2,Normal = 3,Low = 4,Lowest = 5,Count } ; const TCHAR*)",
    "insertText": "LexToString(EQueuedWorkPriority Priority)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "check(false)"
  },
  {
    "label": "FThreadPoolPriorityQueue()",
    "kind": "Method",
    "detail": "Function (} } class FThreadPoolPriorityQueue { public :)",
    "insertText": "FThreadPoolPriorityQueue()"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enqueue(IQueuedWork* InQueuedWork, EQueuedWorkPriority InPriority = EQueuedWorkPriority::Normal)"
  },
  {
    "label": "Retract()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Retract(IQueuedWork* InQueuedWork)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (IQueuedWork*)",
    "insertText": "Dequeue(EQueuedWorkPriority* OutDequeuedWorkPriority = nullptr)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (IQueuedWork*)",
    "insertText": "Peek(EQueuedWorkPriority* OutDequeuedWorkPriority = nullptr)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (private : int32 FirstNonEmptyQueueIndex = 0 ; TArray<TArray<IQueuedWork*>,TInlineAllocator<static_cast<)",
    "insertText": "int32(EQueuedWorkPriority::Lowest)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TAtomic<int32> NumQueuedWork ; } ; class FQueuedThreadPool { public : bool)",
    "insertText": "Create(uint32 InNumQueuedThreads, uint32 StackSize = (32 * 1024), EThreadPriority ThreadPriority = TPri_Normal, const TCHAR* Name = TEXT(\"UnknownThreadPool\"))"
  },
  {
    "label": "CreateForkable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateForkable(uint32 InNumQueuedThreads, uint32 StackSize = (32 * 1024), EThreadPriority ThreadPriority = TPri_Normal, const TCHAR* Name = TEXT(\"UnknownThreadPool\"))"
  },
  {
    "label": "AddQueuedWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddQueuedWork(IQueuedWork* InQueuedWork, EQueuedWorkPriority InQueuedWorkPriority = EQueuedWorkPriority::Normal)"
  },
  {
    "label": "RetractQueuedWork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RetractQueuedWork(IQueuedWork* InQueuedWork)"
  },
  {
    "label": "GetNumThreads()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumThreads()"
  },
  {
    "label": "FQueuedThreadPool()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FQueuedThreadPool()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (public : FQueuedThreadPool*)",
    "insertText": "Allocate()"
  }
]