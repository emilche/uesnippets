[
  {
    "label": "TimeTicks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeTicks"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "NextWorkInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NextWorkInfo"
  },
  {
    "label": "ScopedDoWorkItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedDoWorkItem"
  },
  {
    "label": "MessagePump()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MESSAGE_LOOP_MESSAGE_PUMP_H_ # define BASE_MESSAGE_LOOP_MESSAGE_PUMP_H_ # include<memory> # include<utility> # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / check_op . h \" # include \" base / memory / raw_ptr_exclusion . h \" # include \" base / message_loop / message_pump_type . h \" # include \" base / message_loop / timer_slack . h \" # include \" base / sequence_checker . h \" # include \" base / time / time . h \" # include \" build / build_config . h \" namespace base { class TimeTicks ; class BASE_EXPORT MessagePump { public : using MessagePumpFactory = std::unique_ptr<)",
    "insertText": "MessagePump()"
  },
  {
    "label": "OverrideMessagePumpForUIFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideMessagePumpForUIFactory(MessagePumpFactory* factory)"
  },
  {
    "label": "IsMessagePumpForUIFactoryOveridden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMessagePumpForUIFactoryOveridden()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<MessagePump>)",
    "insertText": "Create(MessagePumpType type)"
  },
  {
    "label": "Delegate()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT Delegate { public : ~)",
    "insertText": "Delegate()"
  },
  {
    "label": "remaining_delay()",
    "kind": "Method",
    "detail": "Function (struct NextWorkInfo { TimeDelta)",
    "insertText": "remaining_delay()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!delayed_run_time.is_null() && !delayed_run_time.is_max())"
  },
  {
    "label": "DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_GE(TimeTicks::Now(), recent_now)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} TimeTicks delayed_run_time ; TimeTicks recent_now ; bool yield_to_native = false ; } ; NextWorkInfo)",
    "insertText": "DoWork()"
  },
  {
    "label": "DoIdleWork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoIdleWork()"
  },
  {
    "label": "ScopedDoWorkItem()",
    "kind": "Method",
    "detail": "Function (class ScopedDoWorkItem { public :)",
    "insertText": "ScopedDoWorkItem() : outer_(nullptr)"
  },
  {
    "label": "ScopedDoWorkItem()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ScopedDoWorkItem()"
  },
  {
    "label": "ScopedDoWorkItem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedDoWorkItem(ScopedDoWorkItem&& rhs) : outer_(std::exchange(rhs.outer_, nullptr))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ScopedDoWorkItem&)",
    "insertText": "operator(ScopedDoWorkItem&& rhs)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (outer_ =)",
    "insertText": "exchange(rhs.outer_, nullptr)"
  },
  {
    "label": "OnBeginWorkItem()",
    "kind": "Method",
    "detail": "Function (outer_ ->)",
    "insertText": "OnBeginWorkItem()"
  },
  {
    "label": "BeginWorkItem()",
    "kind": "Method",
    "detail": "Function (} RAW_PTR_EXCLUSION Delegate* outer_ ; } ; [ [ nodiscard ] ] ScopedDoWorkItem)",
    "insertText": "BeginWorkItem()"
  },
  {
    "label": "BeforeWait()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeforeWait()"
  },
  {
    "label": "OnEndWorkItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndWorkItem()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(Delegate* delegate)"
  },
  {
    "label": "Quit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quit()"
  },
  {
    "label": "ScheduleWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleWork()"
  },
  {
    "label": "ScheduleDelayedWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleDelayedWork(const Delegate::NextWorkInfo& next_work_info)"
  },
  {
    "label": "SetTimerSlack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimerSlack(TimerSlack timer_slack)"
  }
]