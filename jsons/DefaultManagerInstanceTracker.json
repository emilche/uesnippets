[
  {
    "label": "TDefaultManagerInstanceTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDefaultManagerInstanceTracker"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Engine / World . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogManagerInstanceTracker, Warning, All)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FManager** FoundInstance = WorldToInstanceMap .)",
    "insertText": "Find(&World)"
  },
  {
    "label": "FManager()",
    "kind": "Method",
    "detail": "Function (NewInstance = NewObject<)",
    "insertText": "FManager(&World)"
  },
  {
    "label": "AddToRoot()",
    "kind": "Method",
    "detail": "Function (NewInstance ->)",
    "insertText": "AddToRoot()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (WorldToInstanceMap .)",
    "insertText": "Add(&World, NewInstance)"
  },
  {
    "label": "AddRaw()",
    "kind": "Method",
    "detail": "Function (FWorldDelegates::OnPostWorldCleanup .)",
    "insertText": "AddRaw(this, &TDefaultManagerInstanceTracker::OnPostWorldCleanup)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "UE_LOG(LogManagerInstanceTracker, Warning , TEXT(\"Calling FManager::GetCurrent while no instance for world %s has been created, and bCreateIfMissing == false\") , *World.GetName())"
  },
  {
    "label": "OnPostWorldCleanup()",
    "kind": "Method",
    "detail": "Function (} return NewInstance ; } void)",
    "insertText": "OnPostWorldCleanup(UWorld* World, bool , bool)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FManager** FoundInstance = WorldToInstanceMap .)",
    "insertText": "Find(World)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (WorldToInstanceMap .)",
    "insertText": "Remove(World)"
  }
]