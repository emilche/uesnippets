[
  {
    "label": "FGeometryCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollection"
  },
  {
    "label": "FSphereCovering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSphereCovering"
  },
  {
    "label": "FNegativeSpaceSampleSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNegativeSpaceSampleSettings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FConvexHulls",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexHulls"
  },
  {
    "label": "FGeometryCollectionConvexUtility",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionConvexUtility"
  },
  {
    "label": "FGeometryCollectionConvexData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionConvexData"
  },
  {
    "label": "FClusterConvexHullSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterConvexHullSettings"
  },
  {
    "label": "FMergeConvexHullSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMergeConvexHullSettings"
  },
  {
    "label": "FIntersectionFilters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIntersectionFilters"
  },
  {
    "label": "FConvexDecompositionSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexDecompositionSettings"
  },
  {
    "label": "FLeafConvexHullSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLeafConvexHullSettings"
  },
  {
    "label": "FTransformedConvex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformedConvex"
  },
  {
    "label": "HullIntersectionStats()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "HullIntersectionStats(const ::Chaos::FConvex* HullA, const ::Chaos::FConvex* HullB, float HullBExpansion, float& OutArea, float& OutMaxArea, float& OutSharpContact, float& OutMaxSharpContact)"
  },
  {
    "label": "IntersectConvexHulls()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "IntersectConvexHulls(::Chaos::FConvex* ResultHull, const ::Chaos::FConvex* ClipHull, float ClipHullOffset, const ::Chaos::FConvex* UpdateHull,\n\t\tconst FTransform* ClipHullTransform = nullptr, const FTransform* UpdateHullTransform = nullptr, const FTransform* UpdateToResultTransform = nullptr, double SimplificationDistanceThreshold = 0.0)"
  },
  {
    "label": "GetExistingConvexHullsInSharedSpace()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GetExistingConvexHullsInSharedSpace(const FManagedArrayCollection* Collection, FConvexHulls& OutConvexHulls, bool bLeafOnly = false)"
  },
  {
    "label": "not()",
    "kind": "Method",
    "detail": "Function (if)",
    "insertText": "not(or if some data is missing. */\n\tstatic CHAOS_API FGeometryCollectionConvexData GetValidConvexHullData(FGeometryCollection* GeometryCollection)"
  },
  {
    "label": "GetConvexHullDataIfPresent()",
    "kind": "Method",
    "detail": "Function (TOptional<FGeometryCollectionConvexData>)",
    "insertText": "GetConvexHullDataIfPresent(FManagedArrayCollection* GeometryCollection)"
  },
  {
    "label": "HasConvexHullData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasConvexHullData(const FManagedArrayCollection* GeometryCollection)"
  },
  {
    "label": "CreateNonOverlappingConvexHullData()",
    "kind": "Method",
    "detail": "Function (FGeometryCollectionConvexData)",
    "insertText": "CreateNonOverlappingConvexHullData(FGeometryCollection* GeometryCollection, double FractionAllowRemove = .3, double SimplificationDistanceThreshold = 0.0, double CanExceedFraction = .5, \n\t\tEConvexOverlapRemoval OverlapRemovalMethod = EConvexOverlapRemoval::All, double OverlapRemovalShrinkPercent = 0.0, UE::GeometryCollectionConvexUtility::FConvexHulls* ComputedLeafHullsToModify = nullptr)"
  },
  {
    "label": "GenerateClusterConvexHullsFromChildrenHulls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateClusterConvexHullsFromChildrenHulls(FGeometryCollection& Collection, const FClusterConvexHullSettings& Settings, const TArrayView<const int32> TransformSubset)"
  },
  {
    "label": "GenerateClusterConvexHullsFromChildrenHulls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateClusterConvexHullsFromChildrenHulls(FGeometryCollection& Collection, const FClusterConvexHullSettings& Settings)"
  },
  {
    "label": "GenerateClusterConvexHullsFromLeafHulls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateClusterConvexHullsFromLeafHulls(FGeometryCollection& Collection, const FClusterConvexHullSettings& Settings, const TArrayView<const int32> OptionalTransformSubset)"
  },
  {
    "label": "GenerateClusterConvexHullsFromLeafHulls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateClusterConvexHullsFromLeafHulls(FGeometryCollection& Collection, const FClusterConvexHullSettings& Settings)"
  },
  {
    "label": "MergeHullsOnTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeHullsOnTransforms(FManagedArrayCollection& Collection, const FGeometryCollectionConvexUtility::FMergeConvexHullSettings& Settings, bool bRestrictToSelection, const TArrayView<const int32> OptionalTransformSelection,\n\t\tUE::Geometry::FSphereCovering* OptionalSphereCoveringOut = nullptr)"
  },
  {
    "label": "GenerateLeafConvexHulls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateLeafConvexHulls(FGeometryCollection& Collection, bool bRestrictToSelection, const TArrayView<const int32> TransformSubset, const FLeafConvexHullSettings& Settings)"
  },
  {
    "label": "GetConvexHull()",
    "kind": "Method",
    "detail": "Function (Chaos::FConvexPtr)",
    "insertText": "GetConvexHull(const FGeometryCollection* GeometryCollection, int32 GeometryIndex)"
  },
  {
    "label": "RemoveConvexHulls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConvexHulls(FManagedArrayCollection* GeometryCollection, const TArray<int32>& TransformsToClearHullsFrom)"
  },
  {
    "label": "RemoveEmptyConvexHulls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEmptyConvexHulls(FManagedArrayCollection& GeometryCollection)"
  },
  {
    "label": "SetDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaults(FGeometryCollection* GeometryCollection, FName Group, uint32 StartSize, uint32 NumElements)"
  },
  {
    "label": "ValidateConvexData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateConvexData(const FManagedArrayCollection* GeometryCollection)"
  },
  {
    "label": "SetVolumeAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVolumeAttributes(FManagedArrayCollection* Collection)"
  },
  {
    "label": "CopyChildConvexes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyChildConvexes(const FGeometryCollection* FromCollection, const TArrayView<const int32>& FromTransformIdx, FGeometryCollection* ToCollection, const TArrayView<const int32>& ToTransformIdx, bool bLeafOnly)"
  },
  {
    "label": "ConvertImplicitToConvexArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertImplicitToConvexArray(const Chaos::FImplicitObject& InImplicit, const FTransform& Transform, TArray<FTransformedConvex>& InOutConvex)"
  },
  {
    "label": "ConvertScaledImplicitToConvexArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertScaledImplicitToConvexArray(\n\t\tconst Chaos::FImplicitObject& Implicit,\n\t\tconst FTransform& WorldSpaceTransform, bool bInstanced,\n\t\tTArray<FTransformedConvex>& InOutConvex)"
  },
  {
    "label": "ConvertInstancedImplicitToConvexArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertInstancedImplicitToConvexArray(\n\t\tconst Chaos::FImplicitObject& Implicit,\n\t\tconst FTransform& Transform,\n\t\tTArray<FTransformedConvex>& InOutConvex)"
  },
  {
    "label": "CreateConvexHullAttributesIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateConvexHullAttributesIfNeeded(FManagedArrayCollection& GeometryCollection)"
  },
  {
    "label": "GenerateClusterConvexHullsFromLeafOrChildrenHullsInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateClusterConvexHullsFromLeafOrChildrenHullsInternal(FGeometryCollection& Collection, const FClusterConvexHullSettings& Settings, bool bOnlySubset, bool bUseDirectChildren, const TArrayView<const int32> OptionalTransformSubset)"
  }
]