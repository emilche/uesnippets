[
  {
    "label": "FAllocOpBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocOpBase"
  },
  {
    "label": "TAllocRecordingLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAllocRecordingLog"
  },
  {
    "label": "TAllocPlaybackLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAllocPlaybackLog"
  },
  {
    "label": "WriteHeader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / FileHelper . h \" struct FAllocOpBase { int64 AllocIndex ; int32 FrameNumber ; bool bIsFree ; int32)",
    "insertText": "WriteHeader(ANSICHAR* Dest)"
  },
  {
    "label": "WriteValueStrings()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "WriteValueStrings(ANSICHAR* Dest)"
  },
  {
    "label": "ParseValueStrings()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ParseValueStrings(const TArray<FString>& ValueStrings)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsFree = false ; } else)",
    "insertText": "if(ValueStrings[0] == TEXT(\"Free\"))"
  },
  {
    "label": "Atoi()",
    "kind": "Method",
    "detail": "Function (bIsFree = true ; } else { return - 1 ; } FrameNumber =)",
    "insertText": "Atoi(*ValueStrings[1])"
  },
  {
    "label": "Atoi64()",
    "kind": "Method",
    "detail": "Function (AllocIndex =)",
    "insertText": "Atoi64(*ValueStrings[2])"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (OutputFile ->)",
    "insertText": "Serialize((void*)LineBuffer, NumCharacters)"
  },
  {
    "label": "TAllocRecordingLog()",
    "kind": "Method",
    "detail": "Function (} } int64 CurrentAllocationIndex ; FCriticalSection CS ; TSharedPtr<FArchive> OutputFile ; ANSICHAR LineBuffer [ MAX_SPRINTF ] ; public : template<. . . ArgTypes>)",
    "insertText": "TAllocRecordingLog(const FString& Filename, ArgTypes&&... Args) : FModifier(Forward<ArgTypes>(Args)...) , CurrentAllocationIndex(0)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (OutputFile =)",
    "insertText": "MakeShareable(IFileManager::Get().CreateFileWriter(*Filename))"
  },
  {
    "label": "HandleFatalError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFatalError(*FString::Printf(TEXT(\"Failed to create allocation log file \\\"%s\\\". Capture will not start.\"), *Filename))"
  },
  {
    "label": "HandleDisplayMessage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "HandleDisplayMessage(*FString::Printf(TEXT(\"Recording allocations to file: %s\"), *Filename))"
  },
  {
    "label": "WriteLineBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLineBuffer(FAllocOp::WriteHeader(LineBuffer))"
  },
  {
    "label": "RecordAlloc()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgTypes> int64)",
    "insertText": "RecordAlloc(ArgTypes&&... Args)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (FAllocOp)",
    "insertText": "Op(Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Op . bIsFree = false ;)",
    "insertText": "if(ShouldRecordAlloc(Op))"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CS)"
  },
  {
    "label": "WriteLineBuffer()",
    "kind": "Method",
    "detail": "Function (Op . AllocIndex = CurrentAllocationIndex + + ; Op . FrameNumber = GFrameNumberRenderThread ;)",
    "insertText": "WriteLineBuffer(Op.WriteValueStrings(LineBuffer))"
  },
  {
    "label": "TAllocPlaybackLog()",
    "kind": "Method",
    "detail": "Function (} } } ; template<FModifier,FAllocOp> class TAllocPlaybackLog : public FModifier { protected : using FFilterType = FAllocOp::FFilterType ; using FAllocType = FModifier::FAllocType ; using FModifier::HandleFatalError ; using FModifier::HandleErrorMessage ; using FModifier::OnPlaybackStart ; using FModifier::OnPlaybackEnd ; using FModifier::OnNewPlaybackFrame ; using FModifier::OnEndPlaybackFrame ; using FModifier::OnFree ; using FModifier::OnAlloc ; using FModifier::IsValidAllocation ; FFilterType CurrentFilter ; TArray<FAllocOp> Ops ; public : template<. . . ArgTypes>)",
    "insertText": "TAllocPlaybackLog(FFilterType InFilter, ArgTypes&&... Args) : FModifier(Forward<ArgTypes>(Args)...) , CurrentFilter(InFilter)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Load(FString& Filename)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<FString> AllocLog ;)",
    "insertText": "if(!FFileHelper::LoadFileToStringArray(AllocLog, *Filename))"
  },
  {
    "label": "HandleFatalError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFatalError(*FString::Printf(TEXT(\"Failed to load alloc log %s\"), *Filename))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} TMap<int64,FFilterType> AllocFilters ;)",
    "insertText": "for(int32 LineIndex = 1; LineIndex < AllocLog.Num(); ++LineIndex)"
  },
  {
    "label": "ParseIntoArray()",
    "kind": "Method",
    "detail": "Function (const FString& Line = AllocLog [ LineIndex ] ; TArray<FString> ValueStrings ; Line .)",
    "insertText": "ParseIntoArray(ValueStrings, TEXT(\",\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FAllocOp Op ;)",
    "insertText": "if(Op.ParseValueStrings(ValueStrings) < 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(Op.bIsFree)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FFilterType* FilterFind = AllocFilters .)",
    "insertText": "Find(Op.AllocIndex)"
  },
  {
    "label": "SetFilter()",
    "kind": "Method",
    "detail": "Function (continue ; } Op .)",
    "insertText": "SetFilter(*FilterFind)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { AllocFilters .)",
    "insertText": "Add(Op.AllocIndex, Op.GetFilter())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Op.MatchFilter(CurrentFilter))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Ops .)",
    "insertText": "Add(Op)"
  },
  {
    "label": "Play()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "Play(int32 MaxOpCount = INT32_MAX)"
  },
  {
    "label": "OnPlaybackStart()",
    "kind": "Method",
    "detail": "Function (const int32 NumIterations =)",
    "insertText": "OnPlaybackStart()"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const int32 OpCount =)",
    "insertText": "Min(MaxOpCount, Ops.Num())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bStartNewFrame = true ; TMap<int64,FAllocType> AllocMap ;)",
    "insertText": "for(int32 Iteration = 0; Iteration < NumIterations; ++Iteration)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FAllocOp& Op = Ops [ OpIndex ] ;)",
    "insertText": "if(bStartNewFrame)"
  },
  {
    "label": "OnNewPlaybackFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewPlaybackFrame()"
  },
  {
    "label": "OnFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFree(*AllocEntry)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (AllocMap .)",
    "insertText": "Remove(Op.AllocIndex)"
  },
  {
    "label": "OnAlloc()",
    "kind": "Method",
    "detail": "Function (} } else { FAllocType Allocation =)",
    "insertText": "OnAlloc(Op)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AllocMap .)",
    "insertText": "Add(Op.AllocIndex, MoveTemp(Allocation))"
  },
  {
    "label": "OnFree()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "OnFree(Allocation)"
  },
  {
    "label": "HandleErrorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleErrorMessage(*FString::Printf(TEXT(\"Duplicated allocation with index %lld found. This should not happen. The log may be corrupted.\"), Op.AllocIndex))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } int32 NextFrameNumber = OpIndex<OpCount - 1 ? Ops [ OpIndex + 1 ] . FrameNumber : - 1 ;)",
    "insertText": "if(Op.FrameNumber != NextFrameNumber)"
  },
  {
    "label": "OnEndPlaybackFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndPlaybackFrame()"
  },
  {
    "label": "OnPlaybackEnd()",
    "kind": "Method",
    "detail": "Function (bStartNewFrame = true ; } } })",
    "insertText": "OnPlaybackEnd(OpCount)"
  }
]