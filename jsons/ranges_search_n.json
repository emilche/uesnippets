[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Iter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter1"
  },
  {
    "label": "_Sent1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent1"
  },
  {
    "label": "_SizeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_SizeT"
  },
  {
    "label": "_Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Type"
  },
  {
    "label": "_Pred",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Pred"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_SEARCH_N_H # define _LIBCPP___ALGORITHM_RANGES_SEARCH_N_H # include<__algorithm / iterator_operations . h> # include<__algorithm / search_n . h> # include<__config> # include<__functional / identity . h> # include<__functional / ranges_operations . h> # include<__iterator / advance . h> # include<__iterator / concepts . h> # include<__iterator / distance . h> # include<__iterator / incrementable_traits . h> # include<__iterator / indirectly_comparable . h> # include<__iterator / iterator_traits . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / size . h> # include<__ranges / subrange . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__ranges_search_n_impl()",
    "kind": "Method",
    "detail": "Function (namespace __search_n { struct __fn { template<class _Iter1,class _Sent1,class _SizeT,class _Type,class _Pred,class _Proj> _LIBCPP_HIDE_FROM_ABI subrange<_Iter1>)",
    "insertText": "__ranges_search_n_impl(_Iter1 __first, _Sent1 __last, _SizeT __count, const _Type& __value, _Pred& __pred, _Proj& __proj)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (__first,__first } ; if)",
    "insertText": "constexpr(sized_sentinel_for<_Sent1, _Iter1>)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (auto __size =)",
    "insertText": "distance(__first, __last)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "advance(__first, __last)"
  },
  {
    "label": "_RangeAlgPolicy()",
    "kind": "Method",
    "detail": "Function (auto __ret = __search_n_random_access_impl<)",
    "insertText": "_RangeAlgPolicy(__first, __last, __count, __value, __pred, __proj, __size)"
  },
  {
    "label": "_RangeAlgPolicy()",
    "kind": "Method",
    "detail": "Function (} } auto __ret = std::__search_n_forward_impl<)",
    "insertText": "_RangeAlgPolicy(__first, __last, __count, __value, __pred, __proj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<forward_iterator _Iter,sentinel_for<_Iter> _Sent,class _Type,class _Pred = ranges::equal_to,class _Proj = identity> requires indirectly_comparable<_Iter,const _Type*,_Pred,_Proj> _LIBCPP_HIDE_FROM_ABI subrange<_Iter>)",
    "insertText": "operator()(_Iter __first, _Sent __last, iter_difference_t<_Iter> __count, const _Type& __value, _Pred __pred = {}, _Proj __proj = _Proj{})"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<forward_range _Range,class _Type,class _Pred = ranges::equal_to,class _Proj = identity> requires indirectly_comparable<iterator_t<_Range>,const _Type*,_Pred,_Proj> _LIBCPP_HIDE_FROM_ABI borrowed_subrange_t<_Range>)",
    "insertText": "operator()(_Range&& __range, range_difference_t<_Range> __count, const _Type& __value, _Pred __pred = {}, _Proj __proj = {})"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (auto __first =)",
    "insertText": "begin(__range)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (__first,__first } ; if)",
    "insertText": "constexpr(sized_range<_Range>)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (auto __size1 =)",
    "insertText": "size(__range)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "advance(__first, ranges::end(__range))"
  }
]