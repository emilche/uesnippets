[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "SmoothProject()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Defines . h \" # include \" Chaos / Math / Poisson . h \" namespace Chaos { template<class T> bool)",
    "insertText": "SmoothProject(const TConstArrayView<FVec3>& Points, const TArray<TVec3<int32>>& Tris, const TArray<FVec3>& PointNormals, const FVec3& Pos, const int32 TriIdx, FVec3& Weights, TArray<TArray<FVec3>>& TangentBases, T* B, T* C, TVec3<T>& C0, TVec3<T>& C1, TVec3<T>& C2, TVec3<T>& W0, TVec3<T>& W1, TVec3<T>& W2)"
  },
  {
    "label": "GetOrthogonalVector()",
    "kind": "Method",
    "detail": "Function (const int32 PtIdx = Tris [ TriIdx ] [ i ] ; const FVec3& PointNormal = PointNormals [ PtIdx ] ; TangentBases [ i ] [ 0 ] = PointNormal .)",
    "insertText": "GetOrthogonalVector().GetSafeNormal()"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (TangentBases [ i ] [ 1 ] =)",
    "insertText": "CrossProduct(TangentBases[i][0], PointNormal)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 i = 0; i < 3; i++)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const int32 PtIdx = Tris [ TriIdx ] [ j ] ; const FVec3& Pt = Points [ PtIdx ] ; const FVec3& TangentBase0 = TangentBases [ i ] [ 0 ] ; const FVec3& TangentBase1 = TangentBases [ i ] [ 1 ] ; FReal B0j =)",
    "insertText": "DotProduct(TangentBase0, Pt)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (FReal B1j =)",
    "insertText": "DotProduct(TangentBase1, Pt)"
  },
  {
    "label": "RowMaj3x3Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RowMaj3x3Set(B, 0, j, static_cast<T>(B0j))"
  },
  {
    "label": "RowMaj3x3Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RowMaj3x3Set(B, 1, j, static_cast<T>(B1j))"
  },
  {
    "label": "RowMaj3x3Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RowMaj3x3Set(B, 2, j, static_cast<T>(1.0))"
  },
  {
    "label": "RowMaj3x3Inverse()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RowMaj3x3Inverse(B, B)"
  },
  {
    "label": "PV()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "PV(FVec3::DotProduct(TangentBases[i][0], Pos), FVec3::DotProduct(TangentBases[i][1], Pos), static_cast<T>(1.0))"
  },
  {
    "label": "RowMaj3x3SetCol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RowMaj3x3SetCol(C, i, RowMaj3x3Multiply(B, PV))"
  },
  {
    "label": "RowMaj3x3Get()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RowMaj3x3Get(C, 0, 0) -= static_cast<T>(1.0)"
  },
  {
    "label": "RowMaj3x3Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RowMaj3x3Get(C, 1, 1) -= static_cast<T>(1.0)"
  },
  {
    "label": "RowMaj3x3Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RowMaj3x3Get(C, 2, 2) -= static_cast<T>(1.0)"
  },
  {
    "label": "RowMaj3x3GetRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RowMaj3x3GetRow(C, 0, C0)"
  },
  {
    "label": "RowMaj3x3GetRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RowMaj3x3GetRow(C, 1, C1)"
  },
  {
    "label": "RowMaj3x3GetRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RowMaj3x3GetRow(C, 2, C2)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (W0 =)",
    "insertText": "CrossProduct(C0, C1)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (W1 =)",
    "insertText": "CrossProduct(C0, C2)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (W2 =)",
    "insertText": "CrossProduct(C1, C2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Weights = W0 ; } else)",
    "insertText": "if(W1[0] >= 0.0 && W1[1] >= 0.0 && W1[2] >= 0.0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Weights = W1 ; } else)",
    "insertText": "if(W2[0] >= 0.0 && W2[1] >= 0.0 && W2[2] >= 0.0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Weights = W2 ; } else { return false ; } FReal WeightsSum = Weights [ 0 ] + Weights [ 1 ] + Weights [ 2 ] ;)",
    "insertText": "if(fabs(WeightsSum) < 1.0e-6)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T OneThird = static_cast<)",
    "insertText": "T(1.0 / 3)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (Weights =)",
    "insertText": "FVec3(OneThird, OneThird, OneThird)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<FVec3>> TangentBases ; TangentBases .)",
    "insertText": "SetNum(3)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TangentBases [ i ] .)",
    "insertText": "SetNum(2)"
  },
  {
    "label": "SmoothProject()",
    "kind": "Method",
    "detail": "Function (} T B [ 9 ] ; T C [ 9 ] ; TVec3<T> C0 ; TVec3<T> C1 ; TVec3<T> C2 ; TVec3<T> W0 ; TVec3<T> W1 ; TVec3<T> W2 ; return)",
    "insertText": "SmoothProject(Points, Tris, PointNormals, Pos, TriIdx, Weights, TangentBases, &B[0], &C[0], C0, C1, C2, W0, W1, W2)"
  },
  {
    "label": "SmoothProject()",
    "kind": "Method",
    "detail": "Function (} template<class T> TArray<bool>)",
    "insertText": "SmoothProject(const TConstArrayView<FVec3>& Points, const TArray<TVec3<int32>>& Tris, const TArray<FVec3>& PointNormals, const FVec3& Pos, const TArray<int32>& TriIdx, TArray<FVec3>& Weights, const bool UseFirstFound = false)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (} T B [ 9 ] ; T C [ 9 ] ; TVec3<T> C0 ; TVec3<T> C1 ; TVec3<T> C2 ; TVec3<T> W0 ; TVec3<T> W1 ; TVec3<T> W2 ; TArray<bool> RetVal ; RetVal .)",
    "insertText": "SetNumZeroed(TriIdx.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Weights .)",
    "insertText": "SetNum(TriIdx.Num())"
  },
  {
    "label": "SmoothProject()",
    "kind": "Method",
    "detail": "Function (RetVal [ i ] =)",
    "insertText": "SmoothProject(Points, Tris, PointNormals, Pos, TriIdx[i], Weights[i], TangentBases, &B[0], &C[0], C0, C1, C2, W0, W1, W2)"
  }
]