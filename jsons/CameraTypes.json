[
  {
    "label": "UCameraShakeSourceComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraShakeSourceComponent"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMinimalViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalViewInfo"
  },
  {
    "label": "FPostProcessSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPostProcessSettings"
  },
  {
    "label": "EAspectRatioAxisConstraint",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAspectRatioAxisConstraint"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FSceneViewProjectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneViewProjectionData"
  },
  {
    "label": "EAspectRatioAxisConstraint",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAspectRatioAxisConstraint"
  },
  {
    "label": "BlendViewInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendViewInfo(FMinimalViewInfo& OtherInfo, float OtherWeight)"
  },
  {
    "label": "ApplyBlendWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyBlendWeight(const float& Weight)"
  },
  {
    "label": "AddWeightedViewInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWeightedViewInfo(const FMinimalViewInfo& OtherView, const float& Weight)"
  },
  {
    "label": "CalculateProjectionMatrixGivenView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateProjectionMatrixGivenView(FMinimalViewInfo& ViewInfo, TEnumAsByte<enum EAspectRatioAxisConstraint> AspectRatioAxisConstraint, class FViewport* Viewport, struct FSceneViewProjectionData& InOutProjectionData)"
  },
  {
    "label": "CalculateProjectionMatrixGivenViewRectangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateProjectionMatrixGivenViewRectangle(FMinimalViewInfo& ViewInfo, TEnumAsByte<enum EAspectRatioAxisConstraint> AspectRatioAxisConstraint, const FIntRect& ConstrainedViewRectangle, FSceneViewProjectionData& InOutProjectionData)"
  },
  {
    "label": "AutoCalculateOrthoPlanes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AutoCalculateOrthoPlanes(FSceneViewProjectionData& InOutProjectionData)"
  },
  {
    "label": "ApplyOverscan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyOverscan(float InOverscan, bool bScaleResolutionWithOverscan = false, bool bCropOverscan = false)"
  },
  {
    "label": "ClearOverscan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearOverscan()"
  }
]