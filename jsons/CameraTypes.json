[
  {
    "label": "UCameraShakeSourceComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraShakeSourceComponent"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMinimalViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalViewInfo"
  },
  {
    "label": "FPostProcessSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPostProcessSettings"
  },
  {
    "label": "EAspectRatioAxisConstraint",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAspectRatioAxisConstraint"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FSceneViewProjectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneViewProjectionData"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # include \" Engine / EngineTypes . h \" # include \" EngineDefines . h \" # include \" Engine / Scene . h \" # include \" CameraTypes . generated . h \" class UCameraShakeSourceComponent ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (CameraLocal,World,UserDefined,} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Camera)"
  },
  {
    "label": "FMinimalViewInfo()",
    "kind": "Method",
    "detail": "Function (private : float Overscan ; FVector CameraToViewTarget ; public :)",
    "insertText": "FMinimalViewInfo() : Location(ForceInit) , Rotation(ForceInit) , FOV(90.0f) , DesiredFOV(90.0f) , FirstPersonFOV(90.0f) , FirstPersonScale(1.0f) , OrthoWidth(512.0f) , bAutoCalculateOrthoPlanes(true) , AutoPlaneShift(0.0f) , bUpdateOrthoPlanes(false) , bUseCameraHeightAsViewTarget(false) , OrthoNearClipPlane(0.0f) , OrthoFarClipPlane(UE_OLD_WORLD_MAX) , PerspectiveNearClipPlane(-1.0f) , AspectRatio(1.33333333f) , bConstrainAspectRatio(false) , bUseFirstPersonParameters(false) , bUseFieldOfViewForLOD(true) , ProjectionMode(ECameraProjectionMode::Perspective) , PostProcessBlendWeight(0.0f) , OffCenterProjectionOffset(ForceInitToZero) , OverscanResolutionFraction(1.0f) , CropFraction(1.0f) , Overscan(0.0f) , CameraToViewTarget(FVector::ZeroVector)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const FMinimalViewInfo& OtherInfo)"
  },
  {
    "label": "BlendViewInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendViewInfo(FMinimalViewInfo& OtherInfo, float OtherWeight)"
  },
  {
    "label": "ApplyBlendWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyBlendWeight(const float& Weight)"
  },
  {
    "label": "AddWeightedViewInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWeightedViewInfo(const FMinimalViewInfo& OtherView, const float& Weight)"
  },
  {
    "label": "CalculateProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "CalculateProjectionMatrix()"
  },
  {
    "label": "CalculateProjectionMatrixGivenView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateProjectionMatrixGivenView(FMinimalViewInfo& ViewInfo, TEnumAsByte<enum EAspectRatioAxisConstraint> AspectRatioAxisConstraint, class FViewport* Viewport, struct FSceneViewProjectionData& InOutProjectionData)"
  },
  {
    "label": "CalculateProjectionMatrixGivenViewRectangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateProjectionMatrixGivenViewRectangle(FMinimalViewInfo& ViewInfo, TEnumAsByte<enum EAspectRatioAxisConstraint> AspectRatioAxisConstraint, const FIntRect& ConstrainedViewRectangle, FSceneViewProjectionData& InOutProjectionData)"
  },
  {
    "label": "SetCameraToViewTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraToViewTarget(const FVector ActorLocation)"
  },
  {
    "label": "TransformWorldToFirstPerson()",
    "kind": "Method",
    "detail": "Function (CameraToViewTarget = ActorLocation - Location ; } FVector)",
    "insertText": "TransformWorldToFirstPerson(const FVector& WorldPosition, bool bIgnoreFirstPersonScale)"
  },
  {
    "label": "CalculateFirstPersonFOVCorrectionFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateFirstPersonFOVCorrectionFactor()"
  },
  {
    "label": "ApplyOverscan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyOverscan(float InOverscan, bool bScaleResolutionWithOverscan = false, bool bCropOverscan = false)"
  },
  {
    "label": "GetOverscan()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetOverscan()"
  }
]