[
  {
    "label": "TPropertyComponentHandlerImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPropertyComponentHandlerImpl"
  },
  {
    "label": "TPropertyComponentHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPropertyComponentHandler"
  },
  {
    "label": "TInitialValueProcessorImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TInitialValueProcessorImpl"
  },
  {
    "label": "TInitialValueProcessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TInitialValueProcessor"
  },
  {
    "label": "TPropertyDefinitionBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPropertyDefinitionBuilder"
  },
  {
    "label": "TCompositePropertyDefinitionBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCompositePropertyDefinitionBuilder"
  },
  {
    "label": "FPropertyRecomposerPropertyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyRecomposerPropertyInfo"
  },
  {
    "label": "FPropertyRecomposerImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyRecomposerImpl"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Delegates / DelegateCombinations . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieScenePropertyRegistry . h \" # include \" EntitySystem / MovieScenePartialProperties . inl \" # include \" EntitySystem / MovieSceneDecompositionQuery . h \" # include \" EntitySystem / MovieSceneBlenderSystem . h \" # include \" EntitySystem / MovieSceneInitialValueCache . h \" # include \" EntitySystem / MovieScenePropertySystemTypes . inl \" # include \" EntitySystem / MovieSceneOperationalTypeConversions . h \" # include \" EntitySystem / Interrogation / MovieSceneInterrogationExtension . h \" # include \" EntitySystem / Interrogation / MovieSceneInterrogationLinker . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedStateExtension . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedStateStorage . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedPropertyStorage . h \" namespace UE { namespace MovieScene { template<PropertyTraits,MetaDatatype,MetaDataIndices,CompositeIndices,. . . CompositeTypes> struct TPropertyComponentHandlerImpl ; template<PropertyTraits,. . . CompositeTypes> struct TPropertyComponentHandler : TPropertyComponentHandlerImpl<PropertyTraits,PropertyTraits::MetaDataType,TMakeIntegerSequence<int,PropertyTraits::MetaDataType::Num>,TMakeIntegerSequence<int,)",
    "insertText": "sizeof(CompositeTypes)"
  },
  {
    "label": "TInitialValueProcessorImpl()",
    "kind": "Method",
    "detail": "Function (} ; template<,,> struct TInitialValueProcessorImpl ; template<PropertyTraits,. . . MetaDataTypes,int . . . MetaDataIndices> struct TInitialValueProcessorImpl<PropertyTraits,TPropertyMetaData<MetaDataTypes . . .>,TIntegerSequence<int,MetaDataIndices . . .>> : IInitialValueProcessor { using StorageType = PropertyTraits::StorageType ; TSortedMap<FInterrogationChannel,StorageType> ValuesByChannel ; FBuiltInComponentTypes* BuiltInComponents ; IInterrogationExtension* Interrogation ; const FPropertyDefinition* PropertyDefinition ; FCustomAccessorView CustomAccessors ; FEntityAllocationWriteContext WriteContext ; TPropertyValueStorage<PropertyTraits>* CacheStorage ;)",
    "insertText": "TInitialValueProcessorImpl() : WriteContext(FEntityAllocationWriteContext::NewAllocation())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (BuiltInComponents =)",
    "insertText": "Get()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (Interrogation = nullptr ; CacheStorage = nullptr ; } void)",
    "insertText": "Initialize(UMovieSceneEntitySystemLinker* Linker, const FPropertyDefinition* Definition, FInitialValueCache* InitialValueCache)"
  },
  {
    "label": "IInterrogationExtension()",
    "kind": "Method",
    "detail": "Function (PropertyDefinition = Definition ; Interrogation = Linker -> FindExtension<)",
    "insertText": "IInterrogationExtension()"
  },
  {
    "label": "FEntityAllocationWriteContext()",
    "kind": "Method",
    "detail": "Function (WriteContext =)",
    "insertText": "FEntityAllocationWriteContext(Linker->EntityManager)"
  },
  {
    "label": "GetAccessors()",
    "kind": "Method",
    "detail": "Function (CustomAccessors = PropertyDefinition -> CustomPropertyRegistration ->)",
    "insertText": "GetAccessors()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InitialValueCache)"
  },
  {
    "label": "PropertyTraits()",
    "kind": "Method",
    "detail": "Function (CacheStorage = InitialValueCache -> GetStorage<)",
    "insertText": "PropertyTraits(Definition->InitialValueType)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Process(const FEntityAllocation* Allocation, const FComponentMask& AllocationType)"
  },
  {
    "label": "VisitInterrogationAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitInterrogationAllocation(Allocation)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(CacheStorage)"
  },
  {
    "label": "VisitAllocationCached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitAllocationCached(Allocation)"
  },
  {
    "label": "VisitAllocation()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "VisitAllocation(Allocation)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Finalize()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ValuesByChannel .)",
    "insertText": "Empty()"
  },
  {
    "label": "FCustomAccessorView()",
    "kind": "Method",
    "detail": "Function (Interrogation = nullptr ; CacheStorage = nullptr ; CustomAccessors =)",
    "insertText": "FCustomAccessorView()"
  },
  {
    "label": "VisitAllocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VisitAllocation(const FEntityAllocation* Allocation)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 Num = Allocation ->)",
    "insertText": "Num()"
  },
  {
    "label": "WriteComponents()",
    "kind": "Method",
    "detail": "Function (TComponentWriter<StorageType> InitialValues = Allocation ->)",
    "insertText": "WriteComponents(PropertyDefinition->InitialValueType.ReinterpretCast<StorageType>(), WriteContext)"
  },
  {
    "label": "ReadComponents()",
    "kind": "Method",
    "detail": "Function (TComponentReader<UObject*> BoundObjects = Allocation ->)",
    "insertText": "ReadComponents(BuiltInComponents->BoundObject)"
  },
  {
    "label": "MetaData()",
    "kind": "Method",
    "detail": "Function (TTuple<TComponentReader<MetaDataTypes> . . .>)",
    "insertText": "MetaData(Allocation->ReadComponents(PropertyDefinition->GetMetaDataComponent<MetaDataTypes>(MetaDataIndices))...)"
  },
  {
    "label": "AsPtr()",
    "kind": "Method",
    "detail": "Function (const FCustomPropertyIndex* RawIndices = CustomIndices .)",
    "insertText": "AsPtr()"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectPropertyValue(BoundObjects[Index], MetaData.template Get<MetaDataIndices>()[Index]..., CustomAccessors[RawIndices[Index].Value], InitialValues[Index])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(TOptionalComponentReader<uint16> FastOffsets = Allocation->TryReadComponents(BuiltInComponents->FastPropertyOffset))"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectPropertyValue(BoundObjects[Index], MetaData.template Get<MetaDataIndices>()[Index]..., RawOffsets[Index], InitialValues[Index])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(TOptionalComponentReader<TSharedPtr<FTrackInstancePropertyBindings>> SlowProperties = Allocation->TryReadComponents(BuiltInComponents->SlowProperty))"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectPropertyValue(BoundObjects[Index], MetaData.template Get<MetaDataIndices>()[Index]..., RawProperties[Index].Get(), InitialValues[Index])"
  },
  {
    "label": "VisitAllocationCached()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "VisitAllocationCached(const FEntityAllocation* Allocation)"
  },
  {
    "label": "WriteComponents()",
    "kind": "Method",
    "detail": "Function (TComponentWriter<FInitialValueIndex> InitialValueIndices = Allocation ->)",
    "insertText": "WriteComponents(BuiltInComponents->InitialValueIndex, WriteContext)"
  },
  {
    "label": "FindPropertyIndex()",
    "kind": "Method",
    "detail": "Function (TOptional<FInitialValueIndex> ExistingIndex = CacheStorage ->)",
    "insertText": "FindPropertyIndex(BoundObjects[Index], RawIndices[Index])"
  },
  {
    "label": "GetCachedValue()",
    "kind": "Method",
    "detail": "Function (InitialValues [ Index ] = CacheStorage ->)",
    "insertText": "GetCachedValue(ExistingIndex.GetValue())"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (} else { StorageType Value { } ;)",
    "insertText": "GetObjectPropertyValue(BoundObjects[Index], MetaData.template Get<MetaDataIndices>()[Index]..., CustomAccessors[RawIndices[Index].Value], Value)"
  },
  {
    "label": "AddInitialValue()",
    "kind": "Method",
    "detail": "Function (InitialValues [ Index ] = Value ; InitialValueIndices [ Index ] = CacheStorage ->)",
    "insertText": "AddInitialValue(BoundObjects[Index], Value, RawIndices[Index])"
  },
  {
    "label": "FindPropertyIndex()",
    "kind": "Method",
    "detail": "Function (TOptional<FInitialValueIndex> ExistingIndex = CacheStorage ->)",
    "insertText": "FindPropertyIndex(BoundObjects[Index], FastOffsets[Index])"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (} else { StorageType Value { } ;)",
    "insertText": "GetObjectPropertyValue(BoundObjects[Index], MetaData.template Get<MetaDataIndices>()[Index]..., RawOffsets[Index], Value)"
  },
  {
    "label": "AddInitialValue()",
    "kind": "Method",
    "detail": "Function (InitialValues [ Index ] = Value ; InitialValueIndices [ Index ] = CacheStorage ->)",
    "insertText": "AddInitialValue(BoundObjects[Index], Value, RawOffsets[Index])"
  },
  {
    "label": "FindPropertyIndex()",
    "kind": "Method",
    "detail": "Function (TOptional<FInitialValueIndex> ExistingIndex = CacheStorage ->)",
    "insertText": "FindPropertyIndex(BoundObjects[Index], *RawProperties[Index]->GetPropertyPath())"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (} else { StorageType Value { } ;)",
    "insertText": "GetObjectPropertyValue(BoundObjects[Index], MetaData.template Get<MetaDataIndices>()[Index]..., RawProperties[Index].Get(), Value)"
  },
  {
    "label": "AddInitialValue()",
    "kind": "Method",
    "detail": "Function (InitialValues [ Index ] = Value ; InitialValueIndices [ Index ] = CacheStorage ->)",
    "insertText": "AddInitialValue(BoundObjects[Index], Value, RawProperties[Index].Get())"
  },
  {
    "label": "VisitInterrogationAllocation()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "VisitInterrogationAllocation(const FEntityAllocation* Allocation)"
  },
  {
    "label": "ReadComponents()",
    "kind": "Method",
    "detail": "Function (TComponentReader<FInterrogationKey> OutputKeys = Allocation ->)",
    "insertText": "ReadComponents(BuiltInComponents->Interrogation.OutputKey)"
  },
  {
    "label": "GetSparseChannelInfo()",
    "kind": "Method",
    "detail": "Function (const FSparseInterrogationChannelInfo& SparseChannelInfo = Interrogation ->)",
    "insertText": "GetSparseChannelInfo()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FInterrogationChannel Channel = OutputKeys [ Index ] . Channel ;)",
    "insertText": "if(const StorageType* CachedValue = ValuesByChannel.Find(Channel))"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (InitialValues [ Index ] =* CachedValue ; continue ; } const FInterrogationChannelInfo* ChannelInfo = SparseChannelInfo .)",
    "insertText": "Find(Channel)"
  },
  {
    "label": "ResolveFastProperty()",
    "kind": "Method",
    "detail": "Function (continue ; } TOptional<FResolvedFastProperty> Property =)",
    "insertText": "ResolveFastProperty(Object, ChannelInfo->PropertyBinding, CustomAccessors)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const StorageType* CachedValue = nullptr ;)",
    "insertText": "if(!Property.IsSet())"
  },
  {
    "label": "FindCachedValue()",
    "kind": "Method",
    "detail": "Function (CachedValue = CacheStorage ->)",
    "insertText": "FindCachedValue(Object, ChannelInfo->PropertyBinding.PropertyPath)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(const FCustomPropertyIndex* CustomIndex = Property->TryGet<FCustomPropertyIndex>())"
  },
  {
    "label": "FindCachedValue()",
    "kind": "Method",
    "detail": "Function (CachedValue = CacheStorage ->)",
    "insertText": "FindCachedValue(Object, *CustomIndex)"
  },
  {
    "label": "FindCachedValue()",
    "kind": "Method",
    "detail": "Function (} else { CachedValue = CacheStorage ->)",
    "insertText": "FindCachedValue(Object, Property->Get<uint16>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CachedValue)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InitialValues [ Index ] =* CachedValue ; ValuesByChannel .)",
    "insertText": "Add(Channel, *CachedValue)"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectPropertyValue(Object, MetaData.template Get<MetaDataIndices>()[Index]..., ChannelInfo->PropertyBinding.PropertyPath, CurrentValue.Emplace())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(const FCustomPropertyIndex* Custom = Property->TryGet<FCustomPropertyIndex>())"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectPropertyValue(Object, MetaData.template Get<MetaDataIndices>()[Index]..., CustomAccessors[Custom->Value], CurrentValue.Emplace())"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (} else { const uint16 FastPtrOffset = Property -> Get<)",
    "insertText": "uint16()"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectPropertyValue(Object, MetaData.template Get<MetaDataIndices>()[Index]..., FastPtrOffset, CurrentValue.Emplace())"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} InitialValues [ Index ] = CurrentValue .)",
    "insertText": "GetValue()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValuesByChannel .)",
    "insertText": "Add(Channel, CurrentValue.GetValue())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; } } ; template<PropertyTraits> struct TInitialValueProcessor : TInitialValueProcessorImpl<PropertyTraits,PropertyTraits::MetaDataType,TMakeIntegerSequence<int,PropertyTraits::MetaDataType::Num>> { } ; template<T,U =)",
    "insertText": "decltype(T::bIsComposite)> constexpr bool IsCompositePropertyTraits(T*)"
  },
  {
    "label": "TPropertyComponentHandlerImpl()",
    "kind": "Method",
    "detail": "Function (using StorageType = PropertyTraits::StorageType ; using CompleteSetterTask = std::conditional_t<bIsComposite,TSetCompositePropertyValues<PropertyTraits,CompositeTypes . . .>,TSetPropertyValues<PropertyTraits>> ; using PreAnimatedStorageType = TPreAnimatedPropertyStorage<PropertyTraits> ; TAutoRegisterPreAnimatedStorageID<PreAnimatedStorageType> StorageID ;)",
    "insertText": "TPropertyComponentHandlerImpl()"
  },
  {
    "label": "GetPreAnimatedStateStorage()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IPreAnimatedStorage>)",
    "insertText": "GetPreAnimatedStateStorage(const FPropertyDefinition& Definition, FPreAnimatedStateExtension* Container)"
  },
  {
    "label": "FindStorage()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<PreAnimatedStorageType> Existing = Container ->)",
    "insertText": "FindStorage(StorageID)"
  },
  {
    "label": "PreAnimatedStorageType()",
    "kind": "Method",
    "detail": "Function (Existing = MakeShared<)",
    "insertText": "PreAnimatedStorageType(Definition)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (Existing ->)",
    "insertText": "Initialize(StorageID, Container)"
  },
  {
    "label": "AddStorage()",
    "kind": "Method",
    "detail": "Function (Container ->)",
    "insertText": "AddStorage(StorageID, Existing)"
  },
  {
    "label": "ScheduleSetterTasks()",
    "kind": "Method",
    "detail": "Function (} return Existing ; } void)",
    "insertText": "ScheduleSetterTasks(const FPropertyDefinition& Definition, TArrayView<const FPropertyCompositeDefinition> Composites, const FPropertyStats& Stats, IEntitySystemScheduler* TaskScheduler, UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "FEntityTaskBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEntityTaskBuilder() .Read(BuiltInComponents->BoundObject) .ReadOneOf(BuiltInComponents->CustomPropertyIndex, BuiltInComponents->FastPropertyOffset, BuiltInComponents->SlowProperty) .ReadAllOf(Definition.GetMetaDataComponent<MetaDataTypes>(MetaDataIndices)...) .ReadAllOf(Composites[CompositeIndices].ComponentTypeID.ReinterpretCast<CompositeTypes>()...) .FilterAll({ Definition.PropertyType }) .SetStat(Definition.StatID) .SetDesiredThread(Linker->EntityManager.GetGatherThread()) .template Fork_PerAllocation<CompleteSetterTask>(&Linker->EntityManager, TaskScheduler, Definition.CustomPropertyRegistration)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (using PartialSetterTask = TSetPartialPropertyValues<PropertyTraits,CompositeTypes . . .> ; FComponentMask CompletePropertyMask ;)",
    "insertText": "for(const FPropertyCompositeDefinition& Composite : Composites)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (CompletePropertyMask .)",
    "insertText": "Set(Composite.ComponentTypeID)"
  },
  {
    "label": "FEntityTaskBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEntityTaskBuilder() .Read(BuiltInComponents->BoundObject) .ReadOneOf(BuiltInComponents->CustomPropertyIndex, BuiltInComponents->FastPropertyOffset, BuiltInComponents->SlowProperty) .ReadAllOf(Definition.GetMetaDataComponent<MetaDataTypes>(MetaDataIndices)...) .ReadAnyOf(Composites[CompositeIndices].ComponentTypeID.ReinterpretCast<CompositeTypes>()...) .FilterAny({ CompletePropertyMask }) .FilterAll({ Definition.PropertyType }) .FilterOut(CompletePropertyMask) .SetStat(Definition.StatID) .SetDesiredThread(Linker->EntityManager.GetGatherThread()) .template Fork_PerAllocation<PartialSetterTask>(&Linker->EntityManager, TaskScheduler, Definition.CustomPropertyRegistration, Composites)"
  },
  {
    "label": "DispatchSetterTasks()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "DispatchSetterTasks(const FPropertyDefinition& Definition, TArrayView<const FPropertyCompositeDefinition> Composites, const FPropertyStats& Stats, FSystemTaskPrerequisites& InPrerequisites, FSystemSubsequentTasks& Subsequents, UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "FEntityTaskBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEntityTaskBuilder() .Read(BuiltInComponents->BoundObject) .ReadOneOf(BuiltInComponents->CustomPropertyIndex, BuiltInComponents->FastPropertyOffset, BuiltInComponents->SlowProperty) .ReadAllOf(Definition.GetMetaDataComponent<MetaDataTypes>(MetaDataIndices)...) .ReadAllOf(Composites[CompositeIndices].ComponentTypeID.ReinterpretCast<CompositeTypes>()...) .FilterAll({ Definition.PropertyType }) .SetStat(Definition.StatID) .SetDesiredThread(Linker->EntityManager.GetGatherThread()) .template Dispatch_PerAllocation<CompleteSetterTask>(&Linker->EntityManager, InPrerequisites, &Subsequents, Definition.CustomPropertyRegistration)"
  },
  {
    "label": "FEntityTaskBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEntityTaskBuilder() .Read(BuiltInComponents->BoundObject) .ReadOneOf(BuiltInComponents->CustomPropertyIndex, BuiltInComponents->FastPropertyOffset, BuiltInComponents->SlowProperty) .ReadAllOf(Definition.GetMetaDataComponent<MetaDataTypes>(MetaDataIndices)...) .ReadAnyOf(Composites[CompositeIndices].ComponentTypeID.ReinterpretCast<CompositeTypes>()...) .FilterAny({ CompletePropertyMask }) .FilterAll({ Definition.PropertyType }) .FilterOut(CompletePropertyMask) .SetStat(Definition.StatID) .SetDesiredThread(Linker->EntityManager.GetGatherThread()) .template Dispatch_PerAllocation<PartialSetterTask>(&Linker->EntityManager, InPrerequisites, &Subsequents, Definition.CustomPropertyRegistration, Composites)"
  },
  {
    "label": "GetInitialValueProcessor()",
    "kind": "Method",
    "detail": "Function (} } } IInitialValueProcessor*)",
    "insertText": "GetInitialValueProcessor()"
  },
  {
    "label": "RecomposeBlendOperational()",
    "kind": "Method",
    "detail": "Function (TInitialValueProcessor<PropertyTraits> Processor ; return& Processor ; } void)",
    "insertText": "RecomposeBlendOperational(const FPropertyDefinition& PropertyDefinition, TArrayView<const FPropertyCompositeDefinition> Composites, const FValueDecompositionParams& InParams, UMovieSceneBlenderSystem* Blender, FConstPropertyComponentView InCurrentValue, FPropertyComponentArrayView OutResult)"
  },
  {
    "label": "RecomposeBlendImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecomposeBlendImpl(PropertyDefinition, Composites, InParams, Blender, InCurrentValue.ReinterpretCast<StorageType>(), OutResult.ReinterpretCast<StorageType>())"
  },
  {
    "label": "RecomposeBlendImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecomposeBlendImpl(const FPropertyDefinition& PropertyDefinition, TArrayView<const FPropertyCompositeDefinition> Composites, const FValueDecompositionParams& InParams, UMovieSceneBlenderSystem* Blender, const StorageType& InCurrentValue, TArrayView<StorageType> OutResults)"
  },
  {
    "label": "IMovieSceneValueDecomposer()",
    "kind": "Method",
    "detail": "Function (IMovieSceneValueDecomposer* ValueDecomposer = Cast<)",
    "insertText": "IMovieSceneValueDecomposer(Blender)"
  },
  {
    "label": "LockDown()",
    "kind": "Method",
    "detail": "Function (EntityManager .)",
    "insertText": "LockDown()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FAlignedDecomposedValue AlignedOutputs [ NumComposites ] ; FValueDecompositionParams LocalParams = InParams ; FGraphEventArray Tasks ;)",
    "insertText": "for(int32 Index = 0; Index < NumComposites; ++Index)"
  },
  {
    "label": "DispatchDecomposeTask()",
    "kind": "Method",
    "detail": "Function (continue ; } LocalParams . ResultComponentType = Composites [ Index ] . ComponentTypeID ; FGraphEventRef Task = ValueDecomposer ->)",
    "insertText": "DispatchDecomposeTask(LocalParams, &AlignedOutputs[Index])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Tasks .)",
    "insertText": "Add(Task)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(Tasks.Num() != 0)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().WaitUntilTasksComplete(Tasks, ENamedThreads::GameThread)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} TOptionalComponentReader<StorageType> InitialValueComponent ;)",
    "insertText": "if(InParams.PropertyEntityID)"
  },
  {
    "label": "StorageType()",
    "kind": "Method",
    "detail": "Function (TComponentTypeID<StorageType> InitialValueType = PropertyDefinition . InitialValueType . ReinterpretCast<)",
    "insertText": "StorageType()"
  },
  {
    "label": "ReadComponent()",
    "kind": "Method",
    "detail": "Function (InitialValueComponent = EntityManager .)",
    "insertText": "ReadComponent(InParams.PropertyEntityID, InitialValueType)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 Index = 0; Index < LocalParams.Query.Entities.Num(); ++Index)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEntityID EntityID = LocalParams . Query . Entities [ Index ] ; uint8* Result = reinterpret_cast<)",
    "insertText": "uint8(&OutResults[Index])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const double* InitialValueComposite = nullptr ; FAlignedDecomposedValue& AlignedOutput = AlignedOutputs [ CompositeIndex ] ;)",
    "insertText": "if(InitialValueComponent)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (InitialValueComposite = reinterpret_cast<const)",
    "insertText": "double(reinterpret_cast<const uint8*>(InitialValuePtr) + Composites[CompositeIndex].CompositeOffset)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} const double NewComposite =* reinterpret_cast<const)",
    "insertText": "double(reinterpret_cast<const uint8*>(&InCurrentValue) + Composites[CompositeIndex].CompositeOffset)"
  },
  {
    "label": "Recompose()",
    "kind": "Method",
    "detail": "Function (* RecomposedComposite = AlignedOutput . Value .)",
    "insertText": "Recompose(EntityID, NewComposite, InitialValueComposite)"
  },
  {
    "label": "ReleaseLockDown()",
    "kind": "Method",
    "detail": "Function (} } } EntityManager .)",
    "insertText": "ReleaseLockDown()"
  },
  {
    "label": "RecomposeBlendChannel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecomposeBlendChannel(const FPropertyDefinition& PropertyDefinition, TArrayView<const FPropertyCompositeDefinition> Composites, int32 CompositeIndex, const FValueDecompositionParams& InParams, UMovieSceneBlenderSystem* Blender, double InCurrentValue, TArrayView<double> OutResults)"
  },
  {
    "label": "DispatchDecomposeTask()",
    "kind": "Method",
    "detail": "Function (FAlignedDecomposedValue AlignedOutput ; FValueDecompositionParams LocalParams = InParams ; LocalParams . ResultComponentType = Composite . ComponentTypeID ; FGraphEventRef Task = ValueDecomposer ->)",
    "insertText": "DispatchDecomposeTask(LocalParams, &AlignedOutput)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().WaitUntilTaskCompletes(Task, ENamedThreads::GameThread)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEntityID EntityID = LocalParams . Query . Entities [ Index ] ;)",
    "insertText": "if((PropertyDefinition.DoubleCompositeMask & (1 << CompositeIndex)) != 0)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (InitialValueComposite = reinterpret_cast<const)",
    "insertText": "double(reinterpret_cast<const uint8*>(InitialValuePtr) + Composite.CompositeOffset)"
  },
  {
    "label": "Recompose()",
    "kind": "Method",
    "detail": "Function (} const double RecomposedComposite = AlignedOutput . Value .)",
    "insertText": "Recompose(EntityID, InCurrentValue, InitialValueComposite)"
  },
  {
    "label": "RebuildOperational()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RebuildOperational(const FPropertyDefinition& PropertyDefinition, TArrayView<const FPropertyCompositeDefinition> Composites, const TArrayView<FMovieSceneEntityID>& EntityIDs, UMovieSceneEntitySystemLinker* Linker, FPropertyComponentArrayView OutResult)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FEntityManager& EntityManager = Linker -> EntityManager ;)",
    "insertText": "for(int32 Index = 0; Index < EntityIDs.Num(); ++Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEntityID EntityID = EntityIDs [ Index ] ;)",
    "insertText": "if(!EntityID)"
  },
  {
    "label": "GetEntity()",
    "kind": "Method",
    "detail": "Function (continue ; } FEntityDataLocation Location = EntityManager .)",
    "insertText": "GetEntity(EntityIDs[Index])"
  },
  {
    "label": "PatchCompositeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PatchCompositeValue(Composites, &TypedResults[Index], Location.Allocation->TryReadComponents(Composites[CompositeIndices].ComponentTypeID.ReinterpretCast<CompositeTypes>()).ComponentAtIndex(Location.ComponentOffset)...)"
  },
  {
    "label": "AddSoleChannel()",
    "kind": "Method",
    "detail": "Function (} } } ; template<PropertyTraits> struct TPropertyDefinitionBuilder { TPropertyDefinitionBuilder<PropertyTraits>&)",
    "insertText": "AddSoleChannel(TComponentTypeID<typename PropertyTraits::StorageType> InComponent)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FPropertyCompositeDefinition NewChannel = { InComponent,0 } ; Registry -> CompositeDefinitions .)",
    "insertText": "Add(NewChannel)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (Definition -> CompositeSize = 1 ;)",
    "insertText": "static_assert(!std::is_same_v<typename PropertyTraits::StorageType, float>, \"Please use double-precision composites\")"
  },
  {
    "label": "SetCustomAccessors()",
    "kind": "Method",
    "detail": "Function (Definition -> DoubleCompositeMask = 1 ; } return* this ; } template<int InlineSize> TPropertyDefinitionBuilder<PropertyTraits>&)",
    "insertText": "SetCustomAccessors(TCustomPropertyRegistration<PropertyTraits, InlineSize>* InCustomAccessors)"
  },
  {
    "label": "SetStat()",
    "kind": "Method",
    "detail": "Function (Definition -> CustomPropertyRegistration = InCustomAccessors ; return* this ; } TPropertyDefinitionBuilder<PropertyTraits>&)",
    "insertText": "SetStat(TStatId InStatID)"
  },
  {
    "label": "SetBlenderSystem()",
    "kind": "Method",
    "detail": "Function (Definition -> StatID = InStatID ; return* this ; } template<BlenderSystemType> TPropertyDefinitionBuilder<PropertyTraits>&)",
    "insertText": "SetBlenderSystem()"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (Definition -> BlenderSystemClass =)",
    "insertText": "StaticClass()"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (Definition -> BlenderSystemClass = BlenderSystemClass ; return* this ; } void)",
    "insertText": "Commit()"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (} template<HandlerType> void)",
    "insertText": "Commit(HandlerType&& InHandler)"
  },
  {
    "label": "HandlerType()",
    "kind": "Method",
    "detail": "Function (Definition -> Handler = Forward<)",
    "insertText": "HandlerType(InHandler)"
  },
  {
    "label": "TPropertyDefinitionBuilder()",
    "kind": "Method",
    "detail": "Function (} protected : FPropertyRegistry ;)",
    "insertText": "TPropertyDefinitionBuilder(FPropertyDefinition* InDefinition, FPropertyRegistry* InRegistry) : Definition(InDefinition), Registry(InRegistry)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} FPropertyDefinition* Definition ; FPropertyRegistry* Registry ; } ; template<PropertyTraits,. . . Composites> struct TCompositePropertyDefinitionBuilder { using StorageType = PropertyTraits::StorageType ;)",
    "insertText": "static_assert(sizeof...(Composites) <= 32, \"More than 32 composites is not supported\")"
  },
  {
    "label": "TCompositePropertyDefinitionBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TCompositePropertyDefinitionBuilder(FPropertyDefinition* InDefinition, FPropertyRegistry* InRegistry) : Definition(InDefinition), Registry(InRegistry)"
  },
  {
    "label": "AddComposite()",
    "kind": "Method",
    "detail": "Function (} template<T> TCompositePropertyDefinitionBuilder<PropertyTraits,Composites . . .,T>)",
    "insertText": "AddComposite(TComponentTypeID<T> InComponent, T StorageType::*DataPtr)"
  },
  {
    "label": "CompositeOffset()",
    "kind": "Method",
    "detail": "Function (const PTRINT)",
    "insertText": "CompositeOffset(PTRINT)&(((StorageType*)0)->*DataPtr)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (FPropertyCompositeDefinition NewChannel = { InComponent,static_cast<)",
    "insertText": "uint16(CompositeOffset)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Definition -> DoubleCompositeMask | = 1<<Definition -> CompositeSize ; } + + Definition -> CompositeSize ; return TCompositePropertyDefinitionBuilder<PropertyTraits,Composites . . .,)",
    "insertText": "T(Definition, Registry)"
  },
  {
    "label": "AddComposite()",
    "kind": "Method",
    "detail": "Function (} TCompositePropertyDefinitionBuilder<PropertyTraits,Composites . . .,double>)",
    "insertText": "AddComposite(TComponentTypeID<double> InComponent, double StorageType::*DataPtr)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (Definition -> DoubleCompositeMask | = 1<<Definition -> CompositeSize ; + + Definition -> CompositeSize ; return TCompositePropertyDefinitionBuilder<PropertyTraits,Composites . . .,)",
    "insertText": "double(Definition, Registry)"
  },
  {
    "label": "Composites()",
    "kind": "Method",
    "detail": "Function (Definition -> Handler = TPropertyComponentHandler<PropertyTraits,)",
    "insertText": "Composites()"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (} private : FPropertyDefinition* Definition ; FPropertyRegistry* Registry ; } ; struct FPropertyRecomposerPropertyInfo { uint16 INVALID_BLEND_CHANNEL =)",
    "insertText": "uint16(-1)"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (uint16 BlendChannel = INVALID_BLEND_CHANNEL ; UMovieSceneBlenderSystem* BlenderSystem = nullptr ; FMovieSceneEntityID PropertyEntityID ; FPropertyRecomposerPropertyInfo)",
    "insertText": "Invalid()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(FPropertyRecomposerPropertyInfo, FOnGetPropertyRecomposerPropertyInfo, FMovieSceneEntityID, UObject*)"
  },
  {
    "label": "RecomposeBlendOperational()",
    "kind": "Method",
    "detail": "Function (struct FPropertyRecomposerImpl { template<PropertyTraits> TRecompositionResult<PropertyTraits::StorageType>)",
    "insertText": "RecomposeBlendOperational(const TPropertyComponents<PropertyTraits>& InComponents, const FDecompositionQuery& InQuery, const typename PropertyTraits::StorageType& InCurrentValue)"
  },
  {
    "label": "RecomposeBlendOperational()",
    "kind": "Method",
    "detail": "Function (FOnGetPropertyRecomposerPropertyInfo OnGetPropertyInfo ; } ; template<PropertyTraits> TRecompositionResult<PropertyTraits::StorageType>)",
    "insertText": "RecomposeBlendOperational(const TPropertyComponents<PropertyTraits>& Components, const FDecompositionQuery& InQuery, const typename PropertyTraits::StorageType& InCurrentValue)"
  },
  {
    "label": "GetDefinition()",
    "kind": "Method",
    "detail": "Function (const FPropertyDefinition& PropertyDefinition = BuiltInComponents -> PropertyRegistry .)",
    "insertText": "GetDefinition(Components.CompositeID)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (TRecompositionResult<PropertyTraits::StorageType>)",
    "insertText": "Result(InCurrentValue, InQuery.Entities.Num())"
  },
  {
    "label": "RecomposeBlendOperational()",
    "kind": "Method",
    "detail": "Function (PropertyDefinition . Handler ->)",
    "insertText": "RecomposeBlendOperational(PropertyDefinition, Composites, Params, Blender, InCurrentValue, Result.Values)"
  }
]