[
  {
    "label": "TriangleMeshType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TriangleMeshType"
  },
  {
    "label": "IterableTriangleIndices",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IterableTriangleIndices"
  },
  {
    "label": "PData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PData"
  },
  {
    "label": "OrderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OrderData"
  },
  {
    "label": "TFastWindingTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFastWindingTree"
  },
  {
    "label": "FWNInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWNInfo"
  },
  {
    "label": "ComputeCoeffsSerial()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MathUtil . h \" # include \" MeshQueries . h \" # include \" Spatial / MeshAABBTree3 . h \" # include \" Util / MeshCaches . h \" # include \" MatrixTypes . h \" # include \" Async / ParallelTransformReduce . h \" namespace FastTriWinding { using namespace UE::Geometry ; using FTriangle3d = UE::Geometry::FTriangle3d ; using FMatrix3d = UE::Geometry::FMatrix3d ; template<class TriangleMeshType,class IterableTriangleIndices> void)",
    "insertText": "ComputeCoeffsSerial(const TriangleMeshType& Mesh, const IterableTriangleIndices& Triangles, const FMeshTriInfoCache& TriCache, FVector3d& P, double& R, FVector3d& Order1, FMatrix3d& Order2)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (P =)",
    "insertText": "Zero()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (R = 0 ; FVector3d P0 =)",
    "insertText": "Zero(), P1 = FVector3d::Zero(), P2 = FVector3d::Zero()"
  },
  {
    "label": "GetTriVertices()",
    "kind": "Method",
    "detail": "Function (Mesh .)",
    "insertText": "GetTriVertices(tid, P0, P1, P2)"
  },
  {
    "label": "GetTriInfo()",
    "kind": "Method",
    "detail": "Function (TriCache .)",
    "insertText": "GetTriInfo(tid, n, a, c)"
  },
  {
    "label": "FMatrix3d()",
    "kind": "Method",
    "detail": "Function (Order1 + = a* n ; FVector3d dcp = c - P ; Order2 + = a*)",
    "insertText": "FMatrix3d(dcp, n)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (RSq =)",
    "insertText": "Max(RSq, MaxDistSq)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (} R =)",
    "insertText": "Sqrt(RSq)"
  },
  {
    "label": "ComputeCoeffs()",
    "kind": "Method",
    "detail": "Function (} template<class TriangleMeshType> void)",
    "insertText": "ComputeCoeffs(const TriangleMeshType& Mesh, const TSet<int>& TriangleSet, const FMeshTriInfoCache& TriCache, FVector3d& P, double& R, FVector3d& Order1, FMatrix3d& Order2, int NumTasks = 16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int ParallelThreshold = 3 0 0 0 ;)",
    "insertText": "if(TriangleSet.Num() < ParallelThreshold)"
  },
  {
    "label": "ComputeCoeffsSerial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeCoeffsSerial(Mesh, TriangleSet, TriCache, P, R, Order1, Order2)"
  },
  {
    "label": "CentroidTransform()",
    "kind": "Method",
    "detail": "Function (PData)",
    "insertText": "CentroidTransform(int64 TriangleSubsetIndex)"
  },
  {
    "label": "TriangleArray()",
    "kind": "Method",
    "detail": "Function (int TID =)",
    "insertText": "TriangleArray(int)"
  },
  {
    "label": "CentroidReduce()",
    "kind": "Method",
    "detail": "Function (PData)",
    "insertText": "CentroidReduce(const PData& A, const PData& B)"
  },
  {
    "label": "ParallelTransformReduce()",
    "kind": "Method",
    "detail": "Function (PData Out ; Out . P = A . P + B . P ; Out . Area = A . Area + B . Area ; return Out ; } ; PData CentroidData =)",
    "insertText": "ParallelTransformReduce(TriangleArray.Num(), PData{ FVector3d::Zero(), 0.0}, CentroidTransform, CentroidReduce, NumTasks)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (OrderData)",
    "insertText": "P(int32 TriangleSubsetIndex)"
  },
  {
    "label": "ExpansionReduce()",
    "kind": "Method",
    "detail": "Function (OrderData)",
    "insertText": "ExpansionReduce(const OrderData& A, const OrderData& B)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (OrderData Out ; Out . Order1 = A . Order1 + B . Order1 ; Out . Order2 = A . Order2 + B . Order2 ; Out . RSq =)",
    "insertText": "Max(A.RSq, B.RSq)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (P = CentroidData . P ; R =)",
    "insertText": "Sqrt(Orders.RSq)"
  },
  {
    "label": "EvaluateOrder1Approx()",
    "kind": "Method",
    "detail": "Function (Order1 = Orders . Order1 ; Order2 = Orders . Order2 ; } double)",
    "insertText": "EvaluateOrder1Approx(const FVector3d& Center, const FVector3d& Order1Coeff, const FVector3d& Q)"
  },
  {
    "label": "dpq()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "dpq(Center - Q)"
  },
  {
    "label": "EvaluateOrder2Approx()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "EvaluateOrder2Approx(const FVector3d& Center, const FVector3d& Order1Coeff, const FMatrix3d& Order2Coeff, const FVector3d& Q)"
  },
  {
    "label": "hessian()",
    "kind": "Method",
    "detail": "Function (FMatrix3d)",
    "insertText": "hessian(fourPi_len3 + c * dpq.X * dpq.X, c * dpq.X * dpq.Y, c * dpq.X * dpq.Z, c * dpq.Y * dpq.X, fourPi_len3 + c * dpq.Y * dpq.Y, c * dpq.Y * dpq.Z, c * dpq.Z * dpq.X, c * dpq.Z * dpq.Y, fourPi_len3 + c * dpq.Z * dpq.Z)"
  },
  {
    "label": "dpq()",
    "kind": "Method",
    "detail": "Function (FVector3d at0 = XA* XN ; FVector3d)",
    "insertText": "dpq(P - Q)"
  },
  {
    "label": "Order2Approx()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Order2Approx(const FTriangle3d& T, const FVector3d& P, const FVector3d& XN, double XA, const FVector3d& Q)"
  },
  {
    "label": "xqxq()",
    "kind": "Method",
    "detail": "Function (FMatrix3d)",
    "insertText": "xqxq(dpq, dpq)"
  },
  {
    "label": "xqxq()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xqxq(FMathd::FourPi * len3 * len * len)"
  },
  {
    "label": "FMatrix3d()",
    "kind": "Method",
    "detail": "Function (FMatrix3d hessian =)",
    "insertText": "FMatrix3d(diag, diag, diag)"
  },
  {
    "label": "centroid()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "centroid((T.V[0].X + T.V[1].X + T.V[2].X) / 3.0, (T.V[0].Y + T.V[1].Y + T.V[2].Y) / 3.0, (T.V[0].Z + T.V[1].Z + T.V[2].Z) / 3.0)"
  },
  {
    "label": "o2_lhs()",
    "kind": "Method",
    "detail": "Function (FVector3d dcp = centroid - P ; FMatrix3d)",
    "insertText": "o2_lhs(dcp, XN)"
  },
  {
    "label": "SetTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTree(TreeToRef, bAutoBuild)"
  },
  {
    "label": "SetTree()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTree(TMeshAABBTree3<TriangleMeshType>* TreeToRef, bool bAutoBuild = true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> Tree = TreeToRef ;)",
    "insertText": "if(bAutoBuild)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build(true)"
  },
  {
    "label": "GetTree()",
    "kind": "Method",
    "detail": "Function (} } TMeshAABBTree3<TriangleMeshType>*)",
    "insertText": "GetTree()"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (Tree ->)",
    "insertText": "Build()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bForceRebuild || FastWindingCacheMeshChangeStamp != Tree->MeshChangeStamp)"
  },
  {
    "label": "build_fast_winding_cache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "build_fast_winding_cache()"
  },
  {
    "label": "IsBuilt()",
    "kind": "Method",
    "detail": "Function (FastWindingCacheMeshChangeStamp = Tree -> MeshChangeStamp ; } } bool)",
    "insertText": "IsBuilt()"
  },
  {
    "label": "FastWindingNumber()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "FastWindingNumber(const FVector3d& P)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build(false)"
  },
  {
    "label": "branch_fast_winding_num()",
    "kind": "Method",
    "detail": "Function (} private : double)",
    "insertText": "branch_fast_winding_num(int IBox, FVector3d P)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int num_tris = Tree -> IndexList [ idx ] ;)",
    "insertText": "for(int i = 1; i <= num_tris; ++i)"
  },
  {
    "label": "GetTriVertices()",
    "kind": "Method",
    "detail": "Function (FVector3d a,b,c ; int ti = Tree -> IndexList [ idx + i ] ; Tree -> Mesh ->)",
    "insertText": "GetTriVertices(ti, a, b, c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (branch_sum + = angle / FMathd::FourPi ; } } else { int iChild1 = Tree -> IndexList [ idx ] ;)",
    "insertText": "if(iChild1 < 0)"
  },
  {
    "label": "iChild1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iChild1(-iChild1)"
  },
  {
    "label": "box_contains()",
    "kind": "Method",
    "detail": "Function (bool contained = Tree ->)",
    "insertText": "box_contains(iChild1, P)"
  },
  {
    "label": "evaluate_box_fast_winding_cache()",
    "kind": "Method",
    "detail": "Function (branch_sum + =)",
    "insertText": "evaluate_box_fast_winding_cache(iChild1, P)"
  },
  {
    "label": "branch_fast_winding_num()",
    "kind": "Method",
    "detail": "Function (} else { branch_sum + =)",
    "insertText": "branch_fast_winding_num(iChild1, P)"
  },
  {
    "label": "box_contains()",
    "kind": "Method",
    "detail": "Function (} bool contained2 = Tree ->)",
    "insertText": "box_contains(iChild2, P)"
  },
  {
    "label": "evaluate_box_fast_winding_cache()",
    "kind": "Method",
    "detail": "Function (branch_sum + =)",
    "insertText": "evaluate_box_fast_winding_cache(iChild2, P)"
  },
  {
    "label": "branch_fast_winding_num()",
    "kind": "Method",
    "detail": "Function (} else { branch_sum + =)",
    "insertText": "branch_fast_winding_num(iChild2, P)"
  },
  {
    "label": "BuildTriInfoCache()",
    "kind": "Method",
    "detail": "Function (int WINDING_CACHE_THRESH = 1 ; FMeshTriInfoCache TriCache =)",
    "insertText": "BuildTriInfoCache(*Tree->Mesh)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (FastWindingCache .)",
    "insertText": "Empty()"
  },
  {
    "label": "build_fast_winding_cache()",
    "kind": "Method",
    "detail": "Function (TOptional<TSet<int>> root_hash ;)",
    "insertText": "build_fast_winding_cache(Tree->RootIndex, 0, WINDING_CACHE_THRESH, root_hash, TriCache)"
  },
  {
    "label": "build_fast_winding_cache()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "build_fast_winding_cache(int IBox, int Depth, int TriCountThresh, TOptional<TSet<int>>& TriHash, const FMeshTriInfoCache& TriCache)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (TriHash .)",
    "insertText": "Reset()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int idx = Tree -> BoxToIndex [ IBox ] ;)",
    "insertText": "if(idx < Tree->TrianglesEnd)"
  },
  {
    "label": "build_fast_winding_cache()",
    "kind": "Method",
    "detail": "Function (int num_child_tris =)",
    "insertText": "build_fast_winding_cache(iChild1, Depth + 1, TriCountThresh, TriHash, TriCache)"
  },
  {
    "label": "build_fast_winding_cache()",
    "kind": "Method",
    "detail": "Function (int num_tris_2 =)",
    "insertText": "build_fast_winding_cache(iChild2, Depth + 1, TriCountThresh, child2_hash, TriCache)"
  },
  {
    "label": "build_cache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "build_cache(num_tris_1 + num_tris_2 > TriCountThresh)"
  },
  {
    "label": "collect_triangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "collect_triangles(iChild1, child2_hash.GetValue())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TriHash = child2_hash ; } else {)",
    "insertText": "if(!TriHash.IsSet())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (TriHash .)",
    "insertText": "Emplace()"
  },
  {
    "label": "collect_triangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "collect_triangles(iChild1, TriHash.GetValue())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!child2_hash.IsSet())"
  },
  {
    "label": "collect_triangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "collect_triangles(iChild2, TriHash.GetValue())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} else { TriHash ->)",
    "insertText": "Append(child2_hash.GetValue())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(build_cache)"
  },
  {
    "label": "make_box_fast_winding_cache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_box_fast_winding_cache(IBox, TriHash.GetValue(), TriCache)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(num_tris_1 + num_tris_2)"
  },
  {
    "label": "can_use_fast_winding_cache()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "can_use_fast_winding_cache(int IBox, const FVector3d& Q)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FWNInfo* cacheInfo = FastWindingCache .)",
    "insertText": "Find(IBox)"
  },
  {
    "label": "ComputeCoeffs()",
    "kind": "Method",
    "detail": "Function (FWNInfo cacheInfo ;)",
    "insertText": "ComputeCoeffs(*Tree->Mesh, Triangles, TriCache, cacheInfo.Center, cacheInfo.R, cacheInfo.Order1Vec, cacheInfo.Order2Mat)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FastWindingCache .)",
    "insertText": "Add(IBox, cacheInfo)"
  },
  {
    "label": "evaluate_box_fast_winding_cache()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "evaluate_box_fast_winding_cache(int IBox, const FVector3d& Q)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FWNInfo& cacheInfo = FastWindingCache [ IBox ] ;)",
    "insertText": "if(FWNApproxOrder == 2)"
  },
  {
    "label": "EvaluateOrder1Approx()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "EvaluateOrder1Approx(cacheInfo.Center, cacheInfo.Order1Vec, Q)"
  },
  {
    "label": "collect_triangles()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "collect_triangles(int IBox, TSet<int>& Triangles)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Triangles .)",
    "insertText": "Add(Tree->IndexList[idx + i])"
  },
  {
    "label": "collect_triangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "collect_triangles((-iChild1) - 1, Triangles)"
  },
  {
    "label": "collect_triangles()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "collect_triangles(iChild1 - 1, Triangles)"
  },
  {
    "label": "collect_triangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "collect_triangles(Tree->IndexList[idx + 1] - 1, Triangles)"
  }
]