[
  {
    "label": "ScopedMockClockOverride",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedMockClockOverride"
  },
  {
    "label": "ScopedMockClockOverride()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_SCOPED_MOCK_CLOCK_OVERRIDE_H_ # define BASE_TEST_SCOPED_MOCK_CLOCK_OVERRIDE_H_ # include<memory> # include \" base / time / time . h \" # include \" base / time / time_override . h \" namespace base { class ScopedMockClockOverride { public :)",
    "insertText": "ScopedMockClockOverride()"
  },
  {
    "label": "ScopedMockClockOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedMockClockOverride(const ScopedMockClockOverride&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedMockClockOverride&)",
    "insertText": "operator(const ScopedMockClockOverride&)"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "Now()"
  },
  {
    "label": "NowTicks()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "NowTicks()"
  },
  {
    "label": "NowThreadTicks()",
    "kind": "Method",
    "detail": "Function (ThreadTicks)",
    "insertText": "NowThreadTicks()"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance(TimeDelta delta)"
  }
]