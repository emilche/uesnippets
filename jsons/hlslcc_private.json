[
  {
    "label": "exec_list",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "exec_list"
  },
  {
    "label": "ParseSemanticAndIndex()",
    "kind": "Method",
    "detail": "Function (# pragma once void)",
    "insertText": "ParseSemanticAndIndex(void* MemContext,const char* InSemantic,const char** OutSemantic,int* OutIndex)"
  },
  {
    "label": "MoveGlobalInstructionsToMain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveGlobalInstructionsToMain(struct exec_list* Instructions)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) void dprintf(const char* Format, ...)"
  },
  {
    "label": "GetTimeInMiliseconds()",
    "kind": "Method",
    "detail": "Function (# else # ifndef __APPLE__ # define dprintf printf # endif # endif # ifdef WIN32 # ifdef ENABLE_TIMING # include<windows . h> long long)",
    "insertText": "GetTimeInMiliseconds()"
  },
  {
    "label": "QueryPerformanceFrequency()",
    "kind": "Method",
    "detail": "Function (LARGE_INTEGER s_frequency ; BOOL s_use_qpc =)",
    "insertText": "QueryPerformanceFrequency(&s_frequency)"
  },
  {
    "label": "QueryPerformanceCounter()",
    "kind": "Method",
    "detail": "Function (LARGE_INTEGER now ;)",
    "insertText": "QueryPerformanceCounter(&now)"
  },
  {
    "label": "GetTickCount()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "GetTickCount()"
  },
  {
    "label": "dprintf_free()",
    "kind": "Method",
    "detail": "Function (} } # endif # endif void)",
    "insertText": "dprintf_free()"
  }
]