[
  {
    "label": "FDatasmithMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithMesh"
  },
  {
    "label": "IDatasmithActorElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithActorElement"
  },
  {
    "label": "IDatasmithScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithScene"
  },
  {
    "label": "FMeshDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescription"
  },
  {
    "label": "FRawMesh",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawMesh"
  },
  {
    "label": "DATASMITHCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DATASMITHCORE_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EUvGenerationPolicy",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EUvGenerationPolicy"
  },
  {
    "label": "IDatasmithTextureElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithTextureElement"
  },
  {
    "label": "IDatasmithCameraActorElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithCameraActorElement"
  },
  {
    "label": "IDatasmithLightActorElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithLightActorElement"
  },
  {
    "label": "IDatasmithMeshActorElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithMeshActorElement"
  },
  {
    "label": "IDatasmithCustomActorElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithCustomActorElement"
  },
  {
    "label": "IDatasmithMaterialIDElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithMaterialIDElement"
  },
  {
    "label": "IDatasmithPostProcessElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithPostProcessElement"
  },
  {
    "label": "SanitizeNameInplace()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" DatasmithDefinitions . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / Matrix . h \" # include \" Math / Transform . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / SharedPointer . h \" # include<stdint . h> class FDatasmithMesh ; class IDatasmithActorElement ; class IDatasmithScene ; struct FMeshDescription ; struct FRawMesh ; class FDatasmithUtils { public : void)",
    "insertText": "SanitizeNameInplace(FString& InString)"
  },
  {
    "label": "SanitizeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SanitizeName(FString InString)"
  },
  {
    "label": "SanitizeObjectName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SanitizeObjectName(FString InString)"
  },
  {
    "label": "SanitizeFileName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SanitizeFileName(FString InString)"
  },
  {
    "label": "SanitizeStringInplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SanitizeStringInplace(FString& InString)"
  },
  {
    "label": "GetEnterpriseVersionAsInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetEnterpriseVersionAsInt()"
  },
  {
    "label": "GetEnterpriseVersionAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetEnterpriseVersionAsString(bool bWithChangelist=false)"
  },
  {
    "label": "GetDatasmithFormatVersionAsFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDatasmithFormatVersionAsFloat()"
  },
  {
    "label": "GetDatasmithFormatVersionAsInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDatasmithFormatVersionAsInt()"
  },
  {
    "label": "GetDatasmithFormatVersionAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDatasmithFormatVersionAsString()"
  },
  {
    "label": "GetFileExtension()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetFileExtension()"
  },
  {
    "label": "GetCleanFilenameAndExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCleanFilenameAndExtension(const FString& InFilePath, FString& OutFilename, FString& OutExtension)"
  },
  {
    "label": "GetLongAppName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetLongAppName()"
  },
  {
    "label": "GetShortAppName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetShortAppName()"
  },
  {
    "label": "AreaTriangle3D()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "AreaTriangle3D(const FVector3f& v0, const FVector3f& v1, const FVector3f& v2)"
  },
  {
    "label": "ConvertVectorArray()",
    "kind": "Method",
    "detail": "Function (enum class EModelCoordSystem : uint8 { ZUp_LeftHanded,ZUp_RightHanded,YUp_LeftHanded,YUp_RightHanded,ZUp_RightHanded_FBXLegacy,} ; template<VecType> void)",
    "insertText": "ConvertVectorArray(EModelCoordSystem ModelCoordSys, TArray<VecType>& Array)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "Set(Vector[2], Vector[0], Vector[1])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} break ; case EModelCoordSystem::YUp_RightHanded :)",
    "insertText": "for(VecType& Vector : Array)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "Set(-Vector[2], Vector[0], Vector[1])"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "Set(-Vector[0], Vector[1], Vector[2])"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "Set(Vector[0], -Vector[1], Vector[2])"
  },
  {
    "label": "ConvertVector()",
    "kind": "Method",
    "detail": "Function (} break ; case EModelCoordSystem::ZUp_LeftHanded : default : break ; } } template<VecType> VecType)",
    "insertText": "ConvertVector(EModelCoordSystem ModelCoordSys, const VecType& V)"
  },
  {
    "label": "ConvertTransform()",
    "kind": "Method",
    "detail": "Function (} } FTransform)",
    "insertText": "ConvertTransform(EModelCoordSystem SourceCoordSystem, const FTransform& LocalTransform)"
  },
  {
    "label": "GetSymmetricMatrix()",
    "kind": "Method",
    "detail": "Function (template<Type> UE::Math::TMatrix<Type>)",
    "insertText": "GetSymmetricMatrix(const UE::Math::TVector<Type>& Origin, const UE::Math::TVector<Type>& Normal)"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (using namespace UE::Math ; TVector<Type> LocOrigin = Origin ; Type NormalXSqr = Normal . X* Normal . X ; Type NormalYSqr = Normal . Y* Normal . Y ; Type NormalZSqr = Normal . Z* Normal . Z ; TMatrix<Type> OSymmetricMatrix ; OSymmetricMatrix .)",
    "insertText": "SetIdentity()"
  },
  {
    "label": "Axis0()",
    "kind": "Method",
    "detail": "Function (TVector<Type>)",
    "insertText": "Axis0(-NormalXSqr + NormalZSqr + NormalYSqr, -2 * Normal.X * Normal.Y, -2 * Normal.X * Normal.Z)"
  },
  {
    "label": "Axis1()",
    "kind": "Method",
    "detail": "Function (TVector<Type>)",
    "insertText": "Axis1(-2 * Normal.Y * Normal.X, -NormalYSqr + NormalXSqr + NormalZSqr, -2 * Normal.Y * Normal.Z)"
  },
  {
    "label": "Axis2()",
    "kind": "Method",
    "detail": "Function (TVector<Type>)",
    "insertText": "Axis2(-2 * Normal.Z * Normal.X, -2 * Normal.Z * Normal.Y, -NormalZSqr + NormalYSqr + NormalXSqr)"
  },
  {
    "label": "SetAxes()",
    "kind": "Method",
    "detail": "Function (OSymmetricMatrix .)",
    "insertText": "SetAxes(&Axis0, &Axis1, &Axis2)"
  },
  {
    "label": "SetOrigin()",
    "kind": "Method",
    "detail": "Function (LocOrigin* = - 1 . ; SymmetricMatrix .)",
    "insertText": "SetOrigin(LocOrigin)"
  },
  {
    "label": "ToRawMesh()",
    "kind": "Method",
    "detail": "Function (SymmetricMatrix* = OrigTranslation ; return SymmetricMatrix ; } } ; class FDatasmithMeshUtils { bool)",
    "insertText": "ToRawMesh(const FDatasmithMesh& Mesh, FRawMesh& RawMesh, bool bValidateRawMesh = true)"
  },
  {
    "label": "ToMeshDescription()",
    "kind": "Method",
    "detail": "Function (public : enum EUvGenerationPolicy { Ignore,GenerateBox,} ; bool)",
    "insertText": "ToMeshDescription(FDatasmithMesh& DsMesh, FMeshDescription& MeshDescription, EUvGenerationPolicy UvGen=EUvGenerationPolicy::Ignore)"
  },
  {
    "label": "IsUVChannelValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUVChannelValid(const FDatasmithMesh& DsMesh, const int32 Channel)"
  },
  {
    "label": "CreateDefaultUVsWithLOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDefaultUVsWithLOD(FDatasmithMesh& Mesh)"
  },
  {
    "label": "ExtractVertexPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractVertexPositions(const FMeshDescription& Mesh, TArray<FVector3f>& OutPositions)"
  },
  {
    "label": "CalculateTextureHash()",
    "kind": "Method",
    "detail": "Function (} ; enum class EDSTextureUtilsError : int32 { NoError = 0,FileNotFound = - 1,InvalidFileType = - 2,FileReadIssue = - 3,InvalidData = - 4,FreeImageNotFound = - 5,FileNotSaved = - 6,ResizeFailed = - 7,} ; enum class EDSResizeTextureMode { NoResize,NearestPowerOfTwo,PreviousPowerOfTwo,NextPowerOfTwo } ; class FDatasmithTextureUtils { public : bool)",
    "insertText": "CalculateTextureHash(const TSharedPtr<class IDatasmithTextureElement>& TextureElement)"
  },
  {
    "label": "CalculateTextureHashes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateTextureHashes(const TSharedPtr<class IDatasmithScene>& Scene)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; enum class ETransformChannelComponents : uint8 { None = 0 x00,X = 0 x01,Y = 0 x02,Z = 0 x04,All = X | Y | Z,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ETransformChannelComponents)"
  },
  {
    "label": "GetChannelTypeComponents()",
    "kind": "Method",
    "detail": "Function (class FDatasmithAnimationUtils { public : ETransformChannelComponents)",
    "insertText": "GetChannelTypeComponents(EDatasmithTransformChannels Channels, EDatasmithTransformType TransformType)"
  },
  {
    "label": "SetChannelTypeComponents()",
    "kind": "Method",
    "detail": "Function (EDatasmithTransformChannels)",
    "insertText": "SetChannelTypeComponents(ETransformChannelComponents Components, EDatasmithTransformType TransformType)"
  },
  {
    "label": "GetAllCameraActorsFromScene()",
    "kind": "Method",
    "detail": "Function (} ; class FDatasmithSceneUtils { public : TArray<TSharedPtr<class IDatasmithCameraActorElement>>)",
    "insertText": "GetAllCameraActorsFromScene(const TSharedPtr<class IDatasmithScene>& Scene)"
  },
  {
    "label": "GetAllLightActorsFromScene()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<class IDatasmithLightActorElement>>)",
    "insertText": "GetAllLightActorsFromScene(const TSharedPtr<class IDatasmithScene>& Scene)"
  },
  {
    "label": "GetAllMeshActorsFromScene()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<class IDatasmithMeshActorElement>>)",
    "insertText": "GetAllMeshActorsFromScene(const TSharedPtr<class IDatasmithScene>& Scene)"
  },
  {
    "label": "GetAllCustomActorsFromScene()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<class IDatasmithCustomActorElement>>)",
    "insertText": "GetAllCustomActorsFromScene(const TSharedPtr<class IDatasmithScene>& Scene)"
  },
  {
    "label": "FindActorHierarchy()",
    "kind": "Method",
    "detail": "Function (using TActorHierarchy = TArray<TSharedPtr<class IDatasmithActorElement>,TInlineAllocator<8>> ; bool)",
    "insertText": "FindActorHierarchy(const IDatasmithScene* Scene, const TSharedPtr<IDatasmithActorElement>& ToFind, TActorHierarchy& OutHierarchy)"
  },
  {
    "label": "IsMaterialIDUsedInScene()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaterialIDUsedInScene(const TSharedPtr<class IDatasmithScene>& Scene, const TSharedPtr<class IDatasmithMaterialIDElement>& MaterialElement)"
  },
  {
    "label": "IsPostProcessUsedInScene()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPostProcessUsedInScene(const TSharedPtr<class IDatasmithScene>& Scene, const TSharedPtr<class IDatasmithPostProcessElement>& PostProcessElement)"
  },
  {
    "label": "CleanUpScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpScene(TSharedRef<class IDatasmithScene> Scene, bool bRemoveUnused = false)"
  },
  {
    "label": "FDatasmithUniqueNameProviderBase()",
    "kind": "Method",
    "detail": "Function (} ; class FDatasmithUniqueNameProviderBase { public :)",
    "insertText": "FDatasmithUniqueNameProviderBase()"
  },
  {
    "label": "FDatasmithUniqueNameProviderBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDatasmithUniqueNameProviderBase(const FDatasmithUniqueNameProviderBase& Other)"
  },
  {
    "label": "FDatasmithUniqueNameProviderBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDatasmithUniqueNameProviderBase(FDatasmithUniqueNameProviderBase&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FDatasmithUniqueNameProviderBase*)",
    "insertText": "operator(const FDatasmithUniqueNameProviderBase& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FDatasmithUniqueNameProviderBase*)",
    "insertText": "operator(FDatasmithUniqueNameProviderBase&& Other)"
  },
  {
    "label": "GenerateUniqueName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateUniqueName(const FString& BaseName, int32 CharBudget=INT32_MAX)"
  },
  {
    "label": "AddExistingName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExistingName(const FString& Name)"
  },
  {
    "label": "RemoveExistingName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveExistingName(const FString& Name)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Contains(const FString& Name)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (private : TMap<FString,int32> FrequentlyUsedNames ; FCriticalSection CriticalSection ; } ; class FDatasmithUniqueNameProvider : public FDatasmithUniqueNameProviderBase { public : using Super = FDatasmithUniqueNameProviderBase ; void)",
    "insertText": "Reserve(int32 NumberOfName)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (KnownNames .)",
    "insertText": "Reserve(NumberOfName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (KnownNames .)",
    "insertText": "Add(Name)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (KnownNames .)",
    "insertText": "Remove(Name)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (KnownNames .)",
    "insertText": "Empty()"
  }
]