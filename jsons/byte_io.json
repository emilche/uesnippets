[
  {
    "label": "UnsignedOf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnsignedOf"
  },
  {
    "label": "ByteReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ByteReader"
  },
  {
    "label": "ByteWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ByteWriter"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_BYTE_IO_H_ # define MODULES_RTP_RTCP_SOURCE_BYTE_IO_H_ # include<stdint . h> # include<limits> namespace webrtc {)",
    "insertText": "static_assert((-1 & 0x03) == 0x03, \"Only two's complement representation of signed integers supported.\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# define kSizeErrorMsg \" Byte size must be less than or equal to data type size . \" template<T> struct UnsignedOf ; template<T,unsigned int B =)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "ReadBigEndian()",
    "kind": "Method",
    "detail": "Function (template<T,unsigned int B> class ByteReader<T,B,false> { public : T)",
    "insertText": "ReadBigEndian(const uint8_t* data)"
  },
  {
    "label": "ReadLittleEndian()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "ReadLittleEndian(const uint8_t* data)"
  },
  {
    "label": "InternalReadBigEndian()",
    "kind": "Method",
    "detail": "Function (} private : T)",
    "insertText": "InternalReadBigEndian(const uint8_t* data)"
  },
  {
    "label": "val()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "val(0)"
  },
  {
    "label": "ReadBigEndian()",
    "kind": "Method",
    "detail": "Function (U unsigned_val = ByteReader<T,B,false)",
    "insertText": "ReadBigEndian(data)"
  },
  {
    "label": "ReadLittleEndian()",
    "kind": "Method",
    "detail": "Function (U unsigned_val = ByteReader<T,B,false)",
    "insertText": "ReadLittleEndian(data)"
  },
  {
    "label": "ReinterpretAsSigned()",
    "kind": "Method",
    "detail": "Function (} private : T)",
    "insertText": "ReinterpretAsSigned(U unsigned_val)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (const U kUnsignedHighestBitMask = static_cast<)",
    "insertText": "U(1) << ((sizeof(U) * 8) - 1)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (const T kSignedHighestBitMask = std::numeric_limits<T)",
    "insertText": "min()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T val ;)",
    "insertText": "if((unsigned_val & kUnsignedHighestBitMask) != 0)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (val = static_cast<)",
    "insertText": "T(unsigned_val & ~kUnsignedHighestBitMask)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (val | = kSignedHighestBitMask ; } else { val = static_cast<)",
    "insertText": "T(unsigned_val)"
  },
  {
    "label": "SignExtend()",
    "kind": "Method",
    "detail": "Function (} return val ; } U)",
    "insertText": "SignExtend(const U val)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (const uint8_t kMsb = static_cast<)",
    "insertText": "uint8_t(val >> ((B - 1) * 8))"
  },
  {
    "label": "kUsedBitsMask()",
    "kind": "Method",
    "detail": "Function (const U)",
    "insertText": "kUsedBitsMask(1 << ((B % sizeof(T)) * 8))"
  },
  {
    "label": "WriteBigEndian()",
    "kind": "Method",
    "detail": "Function (template<T,unsigned int B> class ByteWriter<T,B,false> { public : void)",
    "insertText": "WriteBigEndian(uint8_t* data, T val)"
  },
  {
    "label": "val()",
    "kind": "Method",
    "detail": "Function (data [ i ] =)",
    "insertText": "val((B - 1 - i) * 8)"
  },
  {
    "label": "WriteLittleEndian()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "WriteLittleEndian(uint8_t* data, T val)"
  },
  {
    "label": "val()",
    "kind": "Method",
    "detail": "Function (data [ i ] =)",
    "insertText": "val(i * 8)"
  },
  {
    "label": "WriteBigEndian()",
    "kind": "Method",
    "detail": "Function (ByteWriter<U,B,false)",
    "insertText": "WriteBigEndian(data, ReinterpretAsUnsigned(val))"
  },
  {
    "label": "WriteLittleEndian()",
    "kind": "Method",
    "detail": "Function (ByteWriter<U,B,false)",
    "insertText": "WriteLittleEndian(data, ReinterpretAsUnsigned(val))"
  },
  {
    "label": "ReinterpretAsUnsigned()",
    "kind": "Method",
    "detail": "Function (} private : U)",
    "insertText": "ReinterpretAsUnsigned(T val)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} private : T)",
    "insertText": "Get(const uint8_t* data, unsigned int index)"
  }
]