[
  {
    "label": "ALevelScriptActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALevelScriptActor"
  },
  {
    "label": "ALevelStreamingVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALevelStreamingVolume"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "ULevelStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreaming"
  },
  {
    "label": "IWorldPartitionCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWorldPartitionCell"
  },
  {
    "label": "FNetLevelVisibilityTransactionId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetLevelVisibilityTransactionId"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetLevelVisibilityState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetLevelVisibilityState"
  },
  {
    "label": "FStreamLevelAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamLevelAction"
  },
  {
    "label": "FLevelAnnotation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLevelAnnotation"
  },
  {
    "label": "FPackageNameMatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageNameMatcher"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "EReqLevelBlock",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EReqLevelBlock"
  },
  {
    "label": "FAckNetVisibilityTransaction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAckNetVisibilityTransaction"
  },
  {
    "label": "FStreamingLevelPrivateAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingLevelPrivateAccessor"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "UEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEngine"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "InvalidateClientPendingRequest()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / ScriptMacros . h \" # include \" UObject / UObjectAnnotation . h \" # include \" Engine / LatentActionManager . h \" # include \" LatentActions . h \" # include \" ProfilingDebugging / ProfilingHelpers . h \" # include \" GameFramework / UpdateLevelVisibilityLevelInfo . h \" # if WITH_EDITOR # include \" Folder . h \" # include \" Misc / Optional . h \" # endif class ALevelScriptActor ; class ALevelStreamingVolume ; class ULevel ; class ULevelStreaming ; class IWorldPartitionCell ; struct FNetLevelVisibilityTransactionId ; enum class ENetLevelVisibilityRequest { MakingVisible,MakingInvisible } ; struct FNetLevelVisibilityState { TOptional<bool> ClientAckedRequestCanMakeVisible ; TOptional<ENetLevelVisibilityRequest> PendingRequestType ; uint32 ServerRequestIndex = 0 ; uint32 ClientPendingRequestIndex = 0 ; uint32 ClientAckedRequestIndex = 0 ; bool bHasClientPendingRequest = false ; void)",
    "insertText": "InvalidateClientPendingRequest()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (bHasClientPendingRequest = false ; PendingRequestType .)",
    "insertText": "Reset()"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLevelStreaming, Log, All)"
  },
  {
    "label": "FStreamLevelAction()",
    "kind": "Method",
    "detail": "Function (class FStreamLevelAction : public FPendingLatentAction { public : bool bLoading ; bool bMakeVisibleAfterLoad ; bool bShouldBlock ; TWeakObjectPtr<ULevelStreaming> Level ; FName LevelName ; FLatentActionInfo LatentInfo ;)",
    "insertText": "FStreamLevelAction(bool bIsLoading, const FName& InLevelName, bool bIsMakeVisibleAfterLoad, bool bShouldBlock, const FLatentActionInfo& InLatentInfo, UWorld* World)"
  },
  {
    "label": "MakeSafeLevelName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MakeSafeLevelName(const FName& InLevelName, UWorld* InWorld)"
  },
  {
    "label": "FindAndCacheLevelStreamingObject()",
    "kind": "Method",
    "detail": "Function (ULevelStreaming*)",
    "insertText": "FindAndCacheLevelStreamingObject(const FName LevelName, UWorld* InWorld)"
  },
  {
    "label": "ActivateLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateLevel(ULevelStreaming* LevelStreamingObject)"
  },
  {
    "label": "UpdateLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateLevel(ULevelStreaming* LevelStreamingObject)"
  },
  {
    "label": "UpdateOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOperation(FLatentResponse& Response)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FString)",
    "insertText": "GetDescription()"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# endif } ; # include \" LevelStreaming . generated . h \")",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE(FLevelStreamingLoadedStatus)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE(FLevelStreamingVisibilityStatus)"
  },
  {
    "label": "EnumToString()",
    "kind": "Method",
    "detail": "Function (enum class ELevelStreamingState : uint8 { Removed,Unloaded,FailedToLoad,Loading,LoadedNotVisible,MakingVisible,LoadedVisible,MakingInvisible } ; const TCHAR*)",
    "insertText": "EnumToString(ELevelStreamingState InState)"
  },
  {
    "label": "EnumToString()",
    "kind": "Method",
    "detail": "Function (enum class ELevelStreamingTargetState : uint8 { Unloaded,UnloadedAndRemoved,LoadedNotVisible,LoadedVisible,} ; const TCHAR*)",
    "insertText": "EnumToString(ELevelStreamingTargetState InTargetState)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(abstract, editinlinenew, BlueprintType, Within=World, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() enum class UE_DEPRECATED(5.2, \"ULevelStreaming::ECurrentState has been replaced by ELevelStreamingState\")"
  },
  {
    "label": "Removed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Removed(uint8)ELevelStreamingState::Removed, Unloaded = (uint8)ELevelStreamingState::Unloaded, FailedToLoad = (uint8)ELevelStreamingState::FailedToLoad, Loading = (uint8)ELevelStreamingState::Loading, LoadedNotVisible = (uint8)ELevelStreamingState::LoadedNotVisible, MakingVisible = (uint8)ELevelStreamingState::MakingVisible, LoadedVisible = (uint8)ELevelStreamingState::LoadedVisible, MakingInvisible = (uint8)"
  },
  {
    "label": "EnumToString()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS const TCHAR*)",
    "insertText": "EnumToString(ECurrentState InCurrentState)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(ELevelStreamingState A, ECurrentState B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(ECurrentState A, ELevelStreamingState B)"
  },
  {
    "label": "FindStreamingLevel()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_ENABLE_DEPRECATION_WARNINGS ULevelStreaming*)",
    "insertText": "FindStreamingLevel(const ULevel* Level)"
  },
  {
    "label": "RemoveLevelAnnotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLevelAnnotation(const ULevel* Level)"
  },
  {
    "label": "FLevelAnnotation()",
    "kind": "Method",
    "detail": "Function (struct FLevelAnnotation {)",
    "insertText": "FLevelAnnotation()"
  },
  {
    "label": "FLevelAnnotation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLevelAnnotation(ULevelStreaming* InLevelStreaming) : LevelStreaming(InLevelStreaming)"
  },
  {
    "label": "IsDefault()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDefault()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetWorldPartitionCell()",
    "kind": "Method",
    "detail": "Function (const IWorldPartitionCell*)",
    "insertText": "GetWorldPartitionCell()"
  },
  {
    "label": "RemoveStreamingVolumeDuplicates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStreamingVolumeDuplicates()"
  },
  {
    "label": "GetLevelStreamingState()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_ENABLE_DEPRECATION_WARNINGS ELevelStreamingState)",
    "insertText": "GetLevelStreamingState()"
  },
  {
    "label": "RequestVisibilityChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestVisibilityChange(bool bVisible)"
  },
  {
    "label": "CanMakeVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMakeVisible()"
  },
  {
    "label": "CanMakeInvisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMakeInvisible()"
  },
  {
    "label": "ShouldClientUseMakingInvisibleTransactionRequest()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ShouldClientUseMakingInvisibleTransactionRequest()"
  },
  {
    "label": "ShouldClientUseMakingVisibleTransactionRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldClientUseMakingVisibleTransactionRequest()"
  },
  {
    "label": "ShouldWaitForServerAckBeforeChangingVisibilityState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldWaitForServerAckBeforeChangingVisibilityState(ENetLevelVisibilityRequest InRequestType)"
  },
  {
    "label": "AckNetVisibilityTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AckNetVisibilityTransaction(FNetLevelVisibilityTransactionId AckedClientTransactionId, bool bClientAckCanMakeVisible)"
  },
  {
    "label": "DetermineTargetState()",
    "kind": "Method",
    "detail": "Function (ELevelStreamingTargetState)",
    "insertText": "DetermineTargetState()"
  },
  {
    "label": "UpdateTargetState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateTargetState()"
  },
  {
    "label": "UpdateStreamingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStreamingState(bool& bOutUpdateAgain, bool& bOutRedetermineTarget)"
  },
  {
    "label": "OnLevelAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelAdded()"
  },
  {
    "label": "OnLevelRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelRemoved()"
  },
  {
    "label": "IsDesiredLevelLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDesiredLevelLoaded()"
  },
  {
    "label": "BeginClientNetVisibilityRequest()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "BeginClientNetVisibilityRequest(bool bInShouldBeVisible)"
  },
  {
    "label": "IsWaitingForNetVisibilityTransactionAck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWaitingForNetVisibilityTransactionAck(ENetLevelVisibilityRequest InRequestType = ENetLevelVisibilityRequest::MakingInvisible)"
  },
  {
    "label": "UpdateNetVisibilityTransactionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNetVisibilityTransactionState(bool bInShouldBeVisible, FNetLevelVisibilityTransactionId TransactionId)"
  },
  {
    "label": "GetShouldBeVisibleFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShouldBeVisibleFlag()"
  },
  {
    "label": "ShouldRequireFullVisibilityToRender()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRequireFullVisibilityToRender()"
  },
  {
    "label": "CanReplicateStreamingStatus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanReplicateStreamingStatus()"
  },
  {
    "label": "GetLevelLODIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLevelLODIndex()"
  },
  {
    "label": "GetPriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPriority()"
  },
  {
    "label": "HasLoadRequestPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLoadRequestPending()"
  },
  {
    "label": "GetAsyncRequestIDs()",
    "kind": "Method",
    "detail": "Function (} const TArray<int32>&)",
    "insertText": "GetAsyncRequestIDs()"
  },
  {
    "label": "GetShouldBeVisibleInEditor()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA bool)",
    "insertText": "GetShouldBeVisibleInEditor()"
  },
  {
    "label": "ShowInLevelCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowInLevelCollection()"
  },
  {
    "label": "GetWorldAssetPackageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorldAssetPackageName()"
  },
  {
    "label": "SetWorldAssetByPackageName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldAssetByPackageName(FName InPackageName)"
  },
  {
    "label": "RenameForPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameForPIE(int PIEInstanceID, bool bKeepWorldAssetName = false)"
  },
  {
    "label": "ShouldBlockOnUnload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBlockOnUnload()"
  },
  {
    "label": "SetLoadedLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoadedLevel(nullptr)"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "FPackageNameMatcher()",
    "kind": "Method",
    "detail": "Function (# endif struct FPackageNameMatcher {)",
    "insertText": "FPackageNameMatcher(const FName& InPackageName ) : PackageName( InPackageName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const ULevelStreaming* Candidate)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (} FName PackageName ; } ; UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetStreamingWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetStreamingWorld()"
  },
  {
    "label": "IsValidStreamingLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidStreamingLevel()"
  },
  {
    "label": "GetLevelStreamingStatus()",
    "kind": "Method",
    "detail": "Function (EStreamingStatus)",
    "insertText": "GetLevelStreamingStatus()"
  },
  {
    "label": "GetLevelStreamingStatusColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "GetLevelStreamingStatusColor(EStreamingStatus Status)"
  },
  {
    "label": "GetLevelStreamingStatusDisplayName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetLevelStreamingStatusDisplayName(EStreamingStatus Status)"
  },
  {
    "label": "DebugDrawLegend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawLegend(const UWorld* World, class UCanvas* Canvas, const FVector2D& Offset)"
  },
  {
    "label": "GetFolderPath()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const FName&)",
    "insertText": "GetFolderPath()"
  },
  {
    "label": "SetFolderPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFolderPath(const FName& InFolderPath)"
  },
  {
    "label": "GetFolderRootObject()",
    "kind": "Method",
    "detail": "Function (TOptional<FFolder::FRootObject>)",
    "insertText": "GetFolderRootObject()"
  },
  {
    "label": "DefaultAllowClientUseMakingInvisibleTransactionRequests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DefaultAllowClientUseMakingInvisibleTransactionRequests()"
  },
  {
    "label": "DefaultAllowClientUseMakingVisibleTransactionRequests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DefaultAllowClientUseMakingVisibleTransactionRequests()"
  },
  {
    "label": "ShouldServerUseMakingVisibleTransactionRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldServerUseMakingVisibleTransactionRequest()"
  },
  {
    "label": "ShouldReuseUnloadedButStillAroundLevels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldReuseUnloadedButStillAroundLevels(const ULevel* InLevel)"
  },
  {
    "label": "AllowIncrementalRemovalWhilePendingVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowIncrementalRemovalWhilePendingVisibility()"
  },
  {
    "label": "BroadcastLevelLoadedStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastLevelLoadedStatus(UWorld* PersistentWorld, FName LevelPackageName, bool bLoaded)"
  },
  {
    "label": "BroadcastLevelVisibleStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastLevelVisibleStatus(UWorld* PersistentWorld, FName LevelPackageName, bool bVisible)"
  },
  {
    "label": "RemoveLevelFromCollectionForReload()",
    "kind": "Method",
    "detail": "Function (enum EReqLevelBlock { BlockAlwaysLoadedLevelsOnly,AlwaysBlock,NeverBlock,} ; # if WITH_EDITOR void)",
    "insertText": "RemoveLevelFromCollectionForReload()"
  },
  {
    "label": "AddLevelToCollectionAfterReload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLevelToCollectionAfterReload()"
  },
  {
    "label": "RequestLevel()",
    "kind": "Method",
    "detail": "Function (# endif protected : bool)",
    "insertText": "RequestLevel(UWorld* PersistentWorld, bool bAllowLevelLoadRequests, EReqLevelBlock BlockPolicy)"
  },
  {
    "label": "PrepareLoadedLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLoadedLevel(ULevel* InLevel, UPackage* InLevelPackage, int32 InPIEInstanceID)"
  },
  {
    "label": "SetLoadedLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoadedLevel(ULevel* Level)"
  },
  {
    "label": "OnLevelLoadedChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelLoadedChanged(ULevel* Level)"
  },
  {
    "label": "OnCurrentStateChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCurrentStateChanged(ELevelStreamingState OldState, ELevelStreamingState NewState)"
  },
  {
    "label": "ValidateUniqueWorldAsset()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValidateUniqueWorldAsset(UWorld* PersistentWorld)"
  },
  {
    "label": "OnLoadingStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoadingStarted()"
  },
  {
    "label": "OnLoadingFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoadingFinished()"
  },
  {
    "label": "GetLoadedLevelPackageName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetLoadedLevelPackageName()"
  },
  {
    "label": "GetLODPackageName()",
    "kind": "Method",
    "detail": "Function (private : FName)",
    "insertText": "GetLODPackageName()"
  },
  {
    "label": "GetLODPackageNameToLoad()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetLODPackageNameToLoad()"
  },
  {
    "label": "DiscardPendingUnloadLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardPendingUnloadLevel(UWorld* PersistentWorld)"
  },
  {
    "label": "AsyncLevelLoadComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncLevelLoadComplete(const FName& PackageName, UPackage* LevelPackage, EAsyncLoadingResult::Type Result)"
  },
  {
    "label": "IsConcernedByNetVisibilityTransactionAck()",
    "kind": "Method",
    "detail": "Function (# endif FName CachedWorldAssetPackageFName ; FName CachedLoadedLevelPackageName ; FNetLevelVisibilityState NetVisibilityState ; bool)",
    "insertText": "IsConcernedByNetVisibilityTransactionAck()"
  },
  {
    "label": "ServerUpdateLevelVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerUpdateLevelVisibility(bool bIsVisible, bool bTryMakeVisible = false, FNetLevelVisibilityTransactionId TransactionId = FNetLevelVisibilityTransactionId())"
  },
  {
    "label": "Call()",
    "kind": "Method",
    "detail": "Function (struct FAckNetVisibilityTransaction ; struct FStreamingLevelPrivateAccessor ; } ; struct FAckNetVisibilityTransaction { private : void)",
    "insertText": "Call(ULevelStreaming* StreamingLevel, FNetLevelVisibilityTransactionId TransactionId, bool bClientAckCanMakeVisibleResponse)"
  },
  {
    "label": "AckNetVisibilityTransaction()",
    "kind": "Method",
    "detail": "Function (StreamingLevel ->)",
    "insertText": "AckNetVisibilityTransaction(TransactionId, bClientAckCanMakeVisibleResponse)"
  },
  {
    "label": "SetLoadedLevel()",
    "kind": "Method",
    "detail": "Function (} class APlayerController ; } ; struct FStreamingLevelPrivateAccessor { private : void)",
    "insertText": "SetLoadedLevel(ULevelStreaming* StreamingLevel, ULevel* Level)"
  },
  {
    "label": "SetLoadedLevel()",
    "kind": "Method",
    "detail": "Function (StreamingLevel ->)",
    "insertText": "SetLoadedLevel(Level)"
  },
  {
    "label": "RequestLevel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequestLevel(ULevelStreaming* StreamingLevel, UWorld* PersistentWorld, bool bAllowLevelLoadRequests, ULevelStreaming::EReqLevelBlock BlockPolicy)"
  },
  {
    "label": "OnLevelAdded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnLevelAdded(ULevelStreaming* StreamingLevel)"
  },
  {
    "label": "OnLevelRemoved()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnLevelRemoved(ULevelStreaming* StreamingLevel)"
  },
  {
    "label": "UpdateTargetState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UpdateTargetState(ULevelStreaming* StreamingLevel)"
  },
  {
    "label": "UpdateStreamingState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateStreamingState(ULevelStreaming* StreamingLevel, bool& bOutUpdateAgain, bool& bOutRedetermineTarget)"
  },
  {
    "label": "UpdateStreamingState()",
    "kind": "Method",
    "detail": "Function (StreamingLevel ->)",
    "insertText": "UpdateStreamingState(bOutUpdateAgain, bOutRedetermineTarget)"
  }
]