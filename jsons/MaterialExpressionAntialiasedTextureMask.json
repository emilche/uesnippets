[
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "ETextureColorChannel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETextureColorChannel"
  },
  {
    "label": "UMaterialExpressionAntialiasedTextureMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionAntialiasedTextureMask"
  },
  {
    "label": "FMaterialCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompiler"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Materials / MaterialExpressionTextureSampleParameter2D . h \" # include \" MaterialExpressionAntialiasedTextureMask . generated . h \" class UTexture ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (TCC_Red,TCC_Green,TCC_Blue,TCC_Alpha,TCC_MAX,} ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, Category=MaterialExpressionAntialiasedTextureMask, meta=(UIMin = \"0.0\", UIMax = \"1.0\", ClampMin = \"0.0\", ClampMax = \"1.0\"))"
  },
  {
    "label": "TextureIsValid()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "TextureIsValid(UTexture* InTexture, FString& OutMessage)"
  },
  {
    "label": "SetDefaultTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultTexture()"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Compile(class FMaterialCompiler* Compiler, int32 OutputIndex)"
  },
  {
    "label": "GetCaption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCaption(TArray<FString>& OutCaptions)"
  },
  {
    "label": "GenerateHLSLExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateHLSLExpression(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, int32 OutputIndex, UE::HLSLTree::FExpression const*& OutExpression)"
  }
]