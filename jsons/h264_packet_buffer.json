[
  {
    "label": "H264PacketBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "H264PacketBuffer"
  },
  {
    "label": "H264PacketBuffer()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_H264_PACKET_BUFFER_H_ # define MODULES_VIDEO_CODING_H264_PACKET_BUFFER_H_ # include<array> # include<memory> # include<vector> # include \" absl / base / attributes . h \" # include \" absl / types / optional . h \" # include \" modules / video_coding / packet_buffer . h \" # include \" rtc_base / numerics / sequence_number_util . h \" namespace webrtc { class H264PacketBuffer { public : using Packet = video_coding::PacketBuffer::Packet ; using InsertResult = video_coding::PacketBuffer::InsertResult ;)",
    "insertText": "H264PacketBuffer(bool idr_only_keyframes_allowed)"
  },
  {
    "label": "InsertPacket()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT InsertResult)",
    "insertText": "InsertPacket(std::unique_ptr<Packet> packet)"
  },
  {
    "label": "GetPacket()",
    "kind": "Method",
    "detail": "Function (private : int kBufferSize = 2 0 4 8 ; std::unique_ptr<Packet>&)",
    "insertText": "GetPacket(int64_t unwrapped_seq_num)"
  },
  {
    "label": "BeginningOfStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginningOfStream(const Packet& packet)"
  },
  {
    "label": "FindFrames()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<Packet>>)",
    "insertText": "FindFrames(int64_t unwrapped_seq_num)"
  },
  {
    "label": "MaybeAssembleFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaybeAssembleFrame(int64_t start_seq_num_unwrapped, int64_t end_sequence_number_unwrapped, std::vector<std::unique_ptr<Packet>>& packets)"
  }
]