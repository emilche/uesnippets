[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IsFinite()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MathUtil . h \" # include \" VectorTypes . h \" # include \" Math / Transform . h \" enum class EIntersectionResult { NotComputed,Intersects,NoIntersection,InvalidQuery } ; enum class EIntersectionType { Empty,Point,Segment,Line,Polygon,Plane,MultiSegment,Unknown } ; namespace UE { namespace Geometry { using namespace UE::Math ; namespace VectorUtil { template<RealType> bool)",
    "insertText": "IsFinite(const TVector2<RealType>& V)"
  },
  {
    "label": "IsFinite()",
    "kind": "Method",
    "detail": "Function (} template<RealType> bool)",
    "insertText": "IsFinite(const TVector<RealType>& V)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (} template<RealType> RealType)",
    "insertText": "Clamp(RealType Value, RealType MinValue, RealType MaxValue)"
  },
  {
    "label": "Normal()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TVector<RealType>)",
    "insertText": "Normal(const TVector<RealType>& V0, const TVector<RealType>& V1, const TVector<RealType>& V2)"
  },
  {
    "label": "edge1()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "edge1(V1 - V0)"
  },
  {
    "label": "edge2()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "edge2(V2 - V0)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize(edge1)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize(edge2)"
  },
  {
    "label": "vCross()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "vCross(edge2.Cross(edge1))"
  },
  {
    "label": "NormalDirection()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TVector<RealType>)",
    "insertText": "NormalDirection(const TVector<RealType>& V0, const TVector<RealType>& V1, const TVector<RealType>& V2)"
  },
  {
    "label": "Area()",
    "kind": "Method",
    "detail": "Function (} template<RealType> RealType)",
    "insertText": "Area(const TVector<RealType>& V0, const TVector<RealType>& V1, const TVector<RealType>& V2)"
  },
  {
    "label": "Edge1()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "Edge1(V1 - V0)"
  },
  {
    "label": "Edge2()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "Edge2(V2 - V0)"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> Cross = Edge2 .)",
    "insertText": "Cross(Edge1)"
  },
  {
    "label": "Area()",
    "kind": "Method",
    "detail": "Function (} template<RealType> RealType)",
    "insertText": "Area(const TVector2<RealType>& V0, const TVector2<RealType>& V1, const TVector2<RealType>& V2)"
  },
  {
    "label": "DotPerp()",
    "kind": "Method",
    "detail": "Function (RealType CrossZ =)",
    "insertText": "DotPerp(Edge1, Edge2)"
  },
  {
    "label": "SignedArea()",
    "kind": "Method",
    "detail": "Function (} template<RealType> RealType)",
    "insertText": "SignedArea(const TVector2<RealType>& V0, const TVector2<RealType>& V1, const TVector2<RealType>& V2)"
  },
  {
    "label": "IsObtuse()",
    "kind": "Method",
    "detail": "Function (} template<RealType> bool)",
    "insertText": "IsObtuse(const TVector<RealType>& V1, const TVector<RealType>& V2, const TVector<RealType>& V3)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (RealType a2 =)",
    "insertText": "DistanceSquared(V1, V2)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (RealType b2 =)",
    "insertText": "DistanceSquared(V1, V3)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (RealType c2 =)",
    "insertText": "DistanceSquared(V2, V3)"
  },
  {
    "label": "NormalArea()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TVector<RealType>)",
    "insertText": "NormalArea(const TVector<RealType>& V0, const TVector<RealType>& V1, const TVector<RealType>& V2, RealType& AreaOut)"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (FVector3d vCross = edge2 .)",
    "insertText": "Cross(edge1)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (AreaOut =)",
    "insertText": "RealType(0.5) * Normalize(vCross)"
  },
  {
    "label": "EpsilonEqual()",
    "kind": "Method",
    "detail": "Function (} template<RealType> bool)",
    "insertText": "EpsilonEqual(const TVector2<RealType>& V0, const TVector2<RealType>& V1, RealType Epsilon)"
  },
  {
    "label": "EpsilonEqual()",
    "kind": "Method",
    "detail": "Function (} template<RealType> bool)",
    "insertText": "EpsilonEqual(const TVector<RealType>& V0, const TVector<RealType>& V1, RealType Epsilon)"
  },
  {
    "label": "EpsilonEqual()",
    "kind": "Method",
    "detail": "Function (} template<RealType> bool)",
    "insertText": "EpsilonEqual(const TVector4<RealType>& V0, const TVector4<RealType>& V1, RealType Epsilon)"
  },
  {
    "label": "Min3Index()",
    "kind": "Method",
    "detail": "Function (} template<ValueVecType> int)",
    "insertText": "Min3Index(const ValueVecType& Vector3)"
  },
  {
    "label": "Max3Index()",
    "kind": "Method",
    "detail": "Function (} } template<ValueVecType> int)",
    "insertText": "Max3Index(const ValueVecType& Vector3)"
  },
  {
    "label": "MakePerpVectors()",
    "kind": "Method",
    "detail": "Function (} } template<RealType> void)",
    "insertText": "MakePerpVectors(const TVector<RealType>& Normal, TVector<RealType>& OutPerp1, TVector<RealType>& OutPerp2)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "A(RealType)1 / ((RealType)1 - Normal.Z)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (RealType B = Normal . X* Normal . Y* A ; OutPerp1 .)",
    "insertText": "X(RealType)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (OutPerp1 . Y = - B ; OutPerp1 . Z = Normal . X ; OutPerp2 . X = B ; OutPerp2 . Y = Normal . Y* Normal . Y*)",
    "insertText": "A(RealType)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (OutPerp2 . Z = - Normal . Y ; } else { RealType)",
    "insertText": "A(RealType)1 / ((RealType)1 + Normal.Z)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (OutPerp1 . Y = B ; OutPerp1 . Z = - Normal . X ; OutPerp2 . X = B ; OutPerp2 .)",
    "insertText": "Y(RealType)"
  },
  {
    "label": "MakePerpVector()",
    "kind": "Method",
    "detail": "Function (OutPerp2 . Z = - Normal . Y ; } } template<RealType> TVector<RealType>)",
    "insertText": "MakePerpVector(const TVector<RealType>& Normal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> OutPerp1 ;)",
    "insertText": "if(Normal.Z < (RealType)0)"
  },
  {
    "label": "MakePerpVector()",
    "kind": "Method",
    "detail": "Function (OutPerp1 . Y = B ; OutPerp1 . Z = - Normal . X ; } return OutPerp1 ; } template<RealType> void)",
    "insertText": "MakePerpVector(const TVector<RealType>& Normal, TVector<RealType>& OutPerp1)"
  },
  {
    "label": "MakePerpVector()",
    "kind": "Method",
    "detail": "Function (OutPerp1 =)",
    "insertText": "MakePerpVector(Normal)"
  },
  {
    "label": "PlaneAngleSignedD()",
    "kind": "Method",
    "detail": "Function (} template<RealType> RealType)",
    "insertText": "PlaneAngleSignedD(const TVector<RealType>& VFrom, const TVector<RealType>& VTo, const TVector<RealType>& PlaneN)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> vFrom = VFrom - VFrom .)",
    "insertText": "Dot(PlaneN)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize(vFrom)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize(vTo)"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> C = vFrom .)",
    "insertText": "Cross(vTo)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (} RealType fSign = C .)",
    "insertText": "Dot(PlaneN) < 0 ? (RealType)-1 : (RealType)"
  },
  {
    "label": "PlaneAngleSignedR()",
    "kind": "Method",
    "detail": "Function (} template<RealType> RealType)",
    "insertText": "PlaneAngleSignedR(const TVector<RealType>& VFrom, const TVector<RealType>& VTo, const TVector<RealType>& PlaneN)"
  },
  {
    "label": "VectorTanHalfAngle()",
    "kind": "Method",
    "detail": "Function (} template<RealType> RealType)",
    "insertText": "VectorTanHalfAngle(const TVector<RealType>& A, const TVector<RealType>& B)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType cosAngle = A .)",
    "insertText": "Dot(B)"
  },
  {
    "label": "sqr()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "sqr((RealType)1 - cosAngle) / ((RealType)1 + cosAngle)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (sqr =)",
    "insertText": "Clamp(sqr, (RealType)0, TMathUtil<RealType>::MaxReal)"
  },
  {
    "label": "VectorTanHalfAngle()",
    "kind": "Method",
    "detail": "Function (} template<RealType> RealType)",
    "insertText": "VectorTanHalfAngle(const TVector2<RealType>& A, const TVector2<RealType>& B)"
  },
  {
    "label": "VectorCot()",
    "kind": "Method",
    "detail": "Function (} template<RealType> RealType)",
    "insertText": "VectorCot(const TVector<RealType>& V1, const TVector<RealType>& V2)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType fDot = V1 .)",
    "insertText": "Dot(V2)"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (RealType lensqr1 = V1 .)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (RealType d =)",
    "insertText": "Clamp(lensqr1 * lensqr2 - fDot * fDot, (RealType)0.0, TMathUtil<RealType>::MaxReal)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (} else { return fDot / TMathUtil<RealType)",
    "insertText": "Sqrt(d)"
  },
  {
    "label": "BarycentricCoords()",
    "kind": "Method",
    "detail": "Function (} } template<RealType> TVector<RealType>)",
    "insertText": "BarycentricCoords(const TVector<RealType>& Point, const TVector<RealType>& V0, const TVector<RealType>& V1, const TVector<RealType>& V2)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> kV02 = V0 - V2 ; TVector<RealType> kV12 = V1 - V2 ; TVector<RealType> kPV2 = Point - V2 ; RealType fM00 = kV02 .)",
    "insertText": "Dot(kV02)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType fM01 = kV02 .)",
    "insertText": "Dot(kV12)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType fR0 = kV02 .)",
    "insertText": "Dot(kPV2)"
  },
  {
    "label": "fBary1()",
    "kind": "Method",
    "detail": "Function (RealType fDet = fM00* fM11 - fM01* fM01 ; RealType fInvDet = 1 . 0 / fDet ; RealType)",
    "insertText": "fBary1(fM11 * fR0 - fM01 * fR1)"
  },
  {
    "label": "fBary2()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "fBary2(fM00 * fR1 - fM01 * fR0)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (RealType fBary3 = 1 . 0 - fBary1 - fBary2 ; return TVector<)",
    "insertText": "RealType(fBary1, fBary2, fBary3)"
  },
  {
    "label": "BarycentricCoords()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TVector<RealType>)",
    "insertText": "BarycentricCoords(const TVector2<RealType>& Point, const TVector2<RealType>& V0, const TVector2<RealType>& V1, const TVector2<RealType>& V2)"
  },
  {
    "label": "fInvDet()",
    "kind": "Method",
    "detail": "Function (RealType fDet = fM00* fM11 - fM01* fM01 ; RealType)",
    "insertText": "fInvDet(RealType)"
  },
  {
    "label": "fBary3()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "fBary3(RealType)"
  },
  {
    "label": "UniformSampleTriangleBarycentricCoords()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TVector<RealType>)",
    "insertText": "UniformSampleTriangleBarycentricCoords(RealType R1, RealType R2)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (RealType SqrtR1 =)",
    "insertText": "Sqrt(R1)"
  },
  {
    "label": "UniformSampleTrianglePoint()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TVector<RealType>)",
    "insertText": "UniformSampleTrianglePoint(RealType R1, RealType R2, TVector<RealType>& A, TVector<RealType>& B, TVector<RealType>& C)"
  },
  {
    "label": "R1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "R1(RealType)"
  },
  {
    "label": "R2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "R2(RealType)"
  },
  {
    "label": "R1()",
    "kind": "Method",
    "detail": "Function (} return A +)",
    "insertText": "R1(B - A) + R2 * (C - A)"
  },
  {
    "label": "UniformSampleTrianglePoint()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TVector2<RealType>)",
    "insertText": "UniformSampleTrianglePoint(RealType R1, RealType R2, TVector2<RealType>& A, TVector2<RealType>& B, TVector2<RealType>& C)"
  },
  {
    "label": "TriSolidAngle()",
    "kind": "Method",
    "detail": "Function (} template<RealType> RealType)",
    "insertText": "TriSolidAngle(TVector<RealType> A, TVector<RealType> B, TVector<RealType> C, const TVector<RealType>& P)"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (A - = P ; B - = P ; C - = P ; RealType la = A .)",
    "insertText": "Length(), lb = B.Length(), lc = C.Length()"
  },
  {
    "label": "top()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "top(la * lb * lc) + A.Dot(B) * lc + B.Dot(C) * la + C.Dot(A)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (RealType bottom = A .)",
    "insertText": "X(B.Y * C.Z - C.Y * B.Z) - A.Y * (B.X * C.Z - C.X * B.Z) + A.Z * (B.X * C.Y - C.X * B.Y)"
  },
  {
    "label": "TriGradient()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TVector<RealType>)",
    "insertText": "TriGradient(TVector<RealType> Vi, TVector<RealType> Vj, TVector<RealType> Vk, RealType fi, RealType fj, RealType fk)"
  },
  {
    "label": "Centroid()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "Centroid(Vi + Vj + Vk) / (RealType)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Vi - = Centroid ; Vj - = Centroid ; Vk - = Centroid ; TVector<RealType> Normal = VectorUtil::Normal<)",
    "insertText": "RealType(Vi, Vj, Vk)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> Perp0,Perp1 ; VectorUtil::MakePerpVectors<)",
    "insertText": "RealType(Normal, Perp0, Perp1)"
  },
  {
    "label": "vi()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType>)",
    "insertText": "vi(Vi.Dot(Perp0), Vi.Dot(Perp1))"
  },
  {
    "label": "vj()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType>)",
    "insertText": "vj(Vj.Dot(Perp0), Vj.Dot(Perp1))"
  },
  {
    "label": "vk()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType>)",
    "insertText": "vk(Vk.Dot(Perp0), Vk.Dot(Perp1))"
  },
  {
    "label": "GradX()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType>)",
    "insertText": "GradX(fj-fi)*PerpCW(vi-vk) + (fk-fi)*PerpCW(vj-vi)"
  },
  {
    "label": "AreaScale()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "AreaScale(RealType)1 / ((RealType)2 * VectorUtil::Area<RealType>(Vi, Vj, Vk))"
  },
  {
    "label": "OpeningAngleD()",
    "kind": "Method",
    "detail": "Function (} template<RealType> RealType)",
    "insertText": "OpeningAngleD(TVector<RealType> A, TVector<RealType> B, const TVector<RealType>& P)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (A - = P ;)",
    "insertText": "Normalize(A)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (B - = P ;)",
    "insertText": "Normalize(B)"
  },
  {
    "label": "Circumcenter()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TVector2<RealType>)",
    "insertText": "Circumcenter(TVector2<RealType> A, TVector2<RealType> B, const TVector2<RealType>& C, RealType Epsilon = TMathUtilConstants<RealType>::Epsilon)"
  },
  {
    "label": "DotPerp()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType> AB = B - A ; TVector2<RealType> AC = C - A ; RealType Denom = 2*)",
    "insertText": "DotPerp(AB,AC)"
  },
  {
    "label": "Center()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType>)",
    "insertText": "Center(A.X + (AC.Y * ABLenSq - AB.Y * ACLenSq) / Denom, A.Y + (AB.X * ACLenSq - AC.X * ABLenSq) / Denom)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (RealType Cross00 = BitangentIn . Y* NormalIn . Z - BitangentIn . Z* NormalIn . Y ; RealType Cross10 = BitangentIn . Z* NormalIn . X - BitangentIn . X* NormalIn . Z ; RealType Cross20 = BitangentIn . X* NormalIn . Y - BitangentIn . Y* NormalIn . X ; RealType Determinant = TangentIn . X* Cross00 + TangentIn . Y* Cross10 + TangentIn . Z* Cross20 ;)",
    "insertText": "return(Determinant < 0) ? (RealType)-1 : (RealType)"
  },
  {
    "label": "Bitangent()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TVector<RealType>)",
    "insertText": "Bitangent(const TVector<RealType>& NormalIn, const TVector<RealType>& TangentIn, RealType BitangentSign)"
  },
  {
    "label": "TangentFromBitangent()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TVector<RealType>)",
    "insertText": "TangentFromBitangent(const TVector<RealType>& NormalIn, const TVector<RealType>& BitangentIn)"
  },
  {
    "label": "BitangentFromTangent()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TVector<RealType>)",
    "insertText": "BitangentFromTangent(const TVector<RealType>& NormalIn, const TVector<RealType>& TangentIn)"
  },
  {
    "label": "AspectRatio()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "AspectRatio(const FVector3d& v1, const FVector3d& v2, const FVector3d& v3)"
  },
  {
    "label": "TransformNormal()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TVector<RealType>)",
    "insertText": "TransformNormal(const TTransform<RealType>& Transform, const TVector<RealType>& Normal)"
  },
  {
    "label": "GetScale3D()",
    "kind": "Method",
    "detail": "Function (const TVector<RealType>& S = Transform .)",
    "insertText": "GetScale3D()"
  },
  {
    "label": "SignNonZero()",
    "kind": "Method",
    "detail": "Function (RealType DetSign =)",
    "insertText": "SignNonZero(S.X * S.Y * S.Z)"
  },
  {
    "label": "SafeInvS()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "SafeInvS(S.Y * S.Z * DetSign, S.X * S.Z * DetSign, S.X * S.Y * DetSign)"
  },
  {
    "label": "InverseTransformNormal()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TVector<RealType>)",
    "insertText": "InverseTransformNormal(const TTransform<RealType>& Transform, const TVector<RealType>& Normal)"
  },
  {
    "label": "SnapToIncrement()",
    "kind": "Method",
    "detail": "Function (} } ; template<RealType> RealType)",
    "insertText": "SnapToIncrement(RealType Value, RealType Increment, RealType Offset = 0)"
  },
  {
    "label": "Sign()",
    "kind": "Method",
    "detail": "Function (} Value - = Offset ; RealType ValueSign =)",
    "insertText": "Sign(Value)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "Abs(Value)"
  },
  {
    "label": "IntegerIncrement()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "IntegerIncrement(int64)(Value / Increment)"
  },
  {
    "label": "Remainder()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "Remainder(RealType)fmod(Value, Increment)"
  },
  {
    "label": "ValueSign()",
    "kind": "Method",
    "detail": "Function (+ + IntegerIncrement ; } return)",
    "insertText": "ValueSign(RealType)"
  }
]