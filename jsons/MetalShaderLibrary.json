[
  {
    "label": "FMetalDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalDevice"
  },
  {
    "label": "FMetalShaderLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalShaderLibrary"
  },
  {
    "label": "FShaderLibDataOwner",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderLibDataOwner"
  },
  {
    "label": "FMetalShaderDebugZipFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalShaderDebugZipFile"
  },
  {
    "label": "FMetalShaderLibrary()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MetalRHIPrivate . h \" # include \" MetalShaderResources . h \" # include \" RHIShaderLibrary . h \" # include \" ShaderCodeArchive . h \" # include \" Async / MappedFileHandle . h \" class FMetalDevice ; class FMetalShaderLibrary final : public FRHIShaderLibrary { public : # if ! USE_MMAPPED_SHADERARCHIVE using FShaderCodeArrayType = TArray<uint8> ; # else struct FShaderLibDataOwner { TArray<uint8> Mem ; TUniquePtr<IMappedFileHandle> MappedCacheFile ; TUniquePtr<IMappedFileRegion> MappedRegion ; } ; using FShaderCodeArrayType = TArrayView<const uint8> ; private : TUniquePtr<FShaderLibDataOwner> MemOwner ; public :)",
    "insertText": "FMetalShaderLibrary(FMetalDevice& Device, EShaderPlatform Platform, FString const& Name, const FString& InShaderLibraryFilename, const FMetalShaderLibraryHeader& InHeader, FSerializedShaderArchive&& InSerializedShaders, FShaderCodeArrayType&& InShaderCode, const TArray<MTLLibraryPtr>& InLibrary, TUniquePtr<FShaderLibDataOwner>&& InMemOwner) : FMetalShaderLibrary(Device, Platform, Name, InShaderLibraryFilename, InHeader, MoveTemp(InSerializedShaders), MoveTemp(InShaderCode), InLibrary)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (MemOwner =)",
    "insertText": "MoveTemp(InMemOwner)"
  },
  {
    "label": "FMetalShaderLibrary()",
    "kind": "Method",
    "detail": "Function (} # endif FCriticalSection LoadedShaderLibraryMutex ; TMap<FString,FRHIShaderLibrary*> LoadedShaderLibraryMap ;)",
    "insertText": "FMetalShaderLibrary(FMetalDevice& Device, EShaderPlatform Platform, FString const& Name, const FString& InShaderLibraryFilename, const FMetalShaderLibraryHeader& InHeader, FSerializedShaderArchive&& InSerializedShaders, FShaderCodeArrayType&& InShaderCode, const TArray<MTLLibraryPtr>& InLibrary)"
  },
  {
    "label": "FMetalShaderLibrary()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalShaderLibrary()"
  },
  {
    "label": "IsNativeLibrary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNativeLibrary()"
  },
  {
    "label": "GetNumShaders()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumShaders()"
  },
  {
    "label": "GetNumShaderMaps()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumShaderMaps()"
  },
  {
    "label": "GetSizeBytes()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSizeBytes()"
  },
  {
    "label": "GetNumShadersForShaderMap()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumShadersForShaderMap(int32 ShaderMapIndex)"
  },
  {
    "label": "GetShaderIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetShaderIndex(int32 ShaderMapIndex, int32 i)"
  },
  {
    "label": "FindShaderMapIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindShaderMapIndex(const FSHAHash& Hash)"
  },
  {
    "label": "FindShaderIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindShaderIndex(const FSHAHash& Hash)"
  },
  {
    "label": "GetShaderHash()",
    "kind": "Method",
    "detail": "Function (FSHAHash)",
    "insertText": "GetShaderHash(int32 ShaderMapIndex, int32 ShaderIndex)"
  },
  {
    "label": "PreloadShader()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "PreloadShader(int32 ShaderIndex, FGraphEventArray& OutCompletionEvents)"
  }
]