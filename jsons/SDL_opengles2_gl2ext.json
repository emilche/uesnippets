[
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef __gles2_gl2ext_h_ # define __gles2_gl2ext_h_ 1 # ifdef __cplusplus \" C \" { # endif # ifndef GL_APIENTRYP # define GL_APIENTRYP GL_APIENTRY* # endif # ifndef GL_KHR_blend_equation_advanced # define GL_KHR_blend_equation_advanced 1 # define GL_MULTIPLY_KHR 0 x9294 # define GL_SCREEN_KHR 0 x9295 # define GL_OVERLAY_KHR 0 x9296 # define GL_DARKEN_KHR 0 x9297 # define GL_LIGHTEN_KHR 0 x9298 # define GL_COLORDODGE_KHR 0 x9299 # define GL_COLORBURN_KHR 0 x929A # define GL_HARDLIGHT_KHR 0 x929B # define GL_SOFTLIGHT_KHR 0 x929C # define GL_DIFFERENCE_KHR 0 x929E # define GL_EXCLUSION_KHR 0 x92A0 # define GL_HSL_HUE_KHR 0 x92AD # define GL_HSL_SATURATION_KHR 0 x92AE # define GL_HSL_COLOR_KHR 0 x92AF # define GL_HSL_LUMINOSITY_KHR 0 x92B0 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLENDBARRIERKHRPROC) (void)"
  },
  {
    "label": "glBlendBarrierKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlendBarrierKHR(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_KHR_blend_equation_advanced_coherent # define GL_KHR_blend_equation_advanced_coherent 1 # define GL_BLEND_ADVANCED_COHERENT_KHR 0 x9285 # endif # ifndef GL_KHR_context_flush_control # define GL_KHR_context_flush_control 1 # define GL_CONTEXT_RELEASE_BEHAVIOR_KHR 0 x82FB # define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR 0 x82FC # endif # ifndef GL_KHR_debug # define GL_KHR_debug 1 typedef)",
    "insertText": "void(GL_APIENTRY *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# define GL_SAMPLER 0 x82E6 # define GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR 0 x8242 # define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR 0 x8243 # define GL_DEBUG_CALLBACK_FUNCTION_KHR 0 x8244 # define GL_DEBUG_CALLBACK_USER_PARAM_KHR 0 x8245 # define GL_DEBUG_SOURCE_API_KHR 0 x8246 # define GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR 0 x8247 # define GL_DEBUG_SOURCE_SHADER_COMPILER_KHR 0 x8248 # define GL_DEBUG_SOURCE_THIRD_PARTY_KHR 0 x8249 # define GL_DEBUG_SOURCE_APPLICATION_KHR 0 x824A # define GL_DEBUG_SOURCE_OTHER_KHR 0 x824B # define GL_DEBUG_TYPE_ERROR_KHR 0 x824C # define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR 0 x824D # define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR 0 x824E # define GL_DEBUG_TYPE_PORTABILITY_KHR 0 x824F # define GL_DEBUG_TYPE_PERFORMANCE_KHR 0 x8250 # define GL_DEBUG_TYPE_OTHER_KHR 0 x8251 # define GL_DEBUG_TYPE_MARKER_KHR 0 x8268 # define GL_DEBUG_TYPE_PUSH_GROUP_KHR 0 x8269 # define GL_DEBUG_TYPE_POP_GROUP_KHR 0 x826A # define GL_DEBUG_SEVERITY_NOTIFICATION_KHR 0 x826B # define GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR 0 x826C # define GL_DEBUG_GROUP_STACK_DEPTH_KHR 0 x826D # define GL_BUFFER_KHR 0 x82E0 # define GL_SHADER_KHR 0 x82E1 # define GL_PROGRAM_KHR 0 x82E2 # define GL_VERTEX_ARRAY_KHR 0 x8074 # define GL_QUERY_KHR 0 x82E3 # define GL_PROGRAM_PIPELINE_KHR 0 x82E4 # define GL_SAMPLER_KHR 0 x82E6 # define GL_MAX_LABEL_LENGTH_KHR 0 x82E8 # define GL_MAX_DEBUG_MESSAGE_LENGTH_KHR 0 x9143 # define GL_MAX_DEBUG_LOGGED_MESSAGES_KHR 0 x9144 # define GL_DEBUG_LOGGED_MESSAGES_KHR 0 x9145 # define GL_DEBUG_SEVERITY_HIGH_KHR 0 x9146 # define GL_DEBUG_SEVERITY_MEDIUM_KHR 0 x9147 # define GL_DEBUG_SEVERITY_LOW_KHR 0 x9148 # define GL_DEBUG_OUTPUT_KHR 0 x92E0 # define GL_CONTEXT_FLAG_DEBUG_BIT_KHR 0 x00000002 # define GL_STACK_OVERFLOW_KHR 0 x0503 # define GL_STACK_UNDERFLOW_KHR 0 x0504 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDEBUGMESSAGECONTROLKHRPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDEBUGMESSAGEINSERTKHRPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDEBUGMESSAGECALLBACKKHRPROC) (GLDEBUGPROCKHR callback, const void *userParam)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(GL_APIENTRYP PFNGLGETDEBUGMESSAGELOGKHRPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPUSHDEBUGGROUPKHRPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPOPDEBUGGROUPKHRPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLOBJECTLABELKHRPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETOBJECTLABELKHRPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLOBJECTPTRLABELKHRPROC) (const void *ptr, GLsizei length, const GLchar *label)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETOBJECTPTRLABELKHRPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPOINTERVKHRPROC) (GLenum pname, void **params)"
  },
  {
    "label": "glDebugMessageControlKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glDebugMessageControlKHR(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "glDebugMessageInsertKHR()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDebugMessageInsertKHR(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "glDebugMessageCallbackKHR()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDebugMessageCallbackKHR(GLDEBUGPROCKHR callback, const void *userParam)"
  },
  {
    "label": "glGetDebugMessageLogKHR()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLuint GL_APIENTRY)",
    "insertText": "glGetDebugMessageLogKHR(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)"
  },
  {
    "label": "glPushDebugGroupKHR()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPushDebugGroupKHR(GLenum source, GLuint id, GLsizei length, const GLchar *message)"
  },
  {
    "label": "glPopDebugGroupKHR()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPopDebugGroupKHR(void)"
  },
  {
    "label": "glObjectLabelKHR()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glObjectLabelKHR(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)"
  },
  {
    "label": "glGetObjectLabelKHR()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetObjectLabelKHR(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "glObjectPtrLabelKHR()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glObjectPtrLabelKHR(const void *ptr, GLsizei length, const GLchar *label)"
  },
  {
    "label": "glGetObjectPtrLabelKHR()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetObjectPtrLabelKHR(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "glGetPointervKHR()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPointervKHR(GLenum pname, void **params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_KHR_no_error # define GL_KHR_no_error 1 # define GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR 0 x00000008 # endif # ifndef GL_KHR_parallel_shader_compile # define GL_KHR_parallel_shader_compile 1 # define GL_MAX_SHADER_COMPILER_THREADS_KHR 0 x91B0 # define GL_COMPLETION_STATUS_KHR 0 x91B1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMAXSHADERCOMPILERTHREADSKHRPROC) (GLuint count)"
  },
  {
    "label": "glMaxShaderCompilerThreadsKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glMaxShaderCompilerThreadsKHR(GLuint count)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_KHR_robust_buffer_access_behavior # define GL_KHR_robust_buffer_access_behavior 1 # endif # ifndef GL_KHR_robustness # define GL_KHR_robustness 1 # define GL_CONTEXT_ROBUST_ACCESS_KHR 0 x90F3 # define GL_LOSE_CONTEXT_ON_RESET_KHR 0 x8252 # define GL_GUILTY_CONTEXT_RESET_KHR 0 x8253 # define GL_INNOCENT_CONTEXT_RESET_KHR 0 x8254 # define GL_UNKNOWN_CONTEXT_RESET_KHR 0 x8255 # define GL_RESET_NOTIFICATION_STRATEGY_KHR 0 x8256 # define GL_NO_RESET_NOTIFICATION_KHR 0 x8261 # define GL_CONTEXT_LOST_KHR 0 x0507 typedef)",
    "insertText": "GLenum(GL_APIENTRYP PFNGLGETGRAPHICSRESETSTATUSKHRPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLREADNPIXELSKHRPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETNUNIFORMFVKHRPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETNUNIFORMIVKHRPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETNUNIFORMUIVKHRPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params)"
  },
  {
    "label": "glGetGraphicsResetStatusKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL GLenum GL_APIENTRY)",
    "insertText": "glGetGraphicsResetStatusKHR(void)"
  },
  {
    "label": "glReadnPixelsKHR()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glReadnPixelsKHR(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)"
  },
  {
    "label": "glGetnUniformfvKHR()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetnUniformfvKHR(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)"
  },
  {
    "label": "glGetnUniformivKHR()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetnUniformivKHR(GLuint program, GLint location, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "glGetnUniformuivKHR()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetnUniformuivKHR(GLuint program, GLint location, GLsizei bufSize, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_KHR_shader_subgroup # define GL_KHR_shader_subgroup 1 # define GL_SUBGROUP_SIZE_KHR 0 x9532 # define GL_SUBGROUP_SUPPORTED_STAGES_KHR 0 x9533 # define GL_SUBGROUP_SUPPORTED_FEATURES_KHR 0 x9534 # define GL_SUBGROUP_QUAD_ALL_STAGES_KHR 0 x9535 # define GL_SUBGROUP_FEATURE_BASIC_BIT_KHR 0 x00000001 # define GL_SUBGROUP_FEATURE_VOTE_BIT_KHR 0 x00000002 # define GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR 0 x00000004 # define GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR 0 x00000008 # define GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR 0 x00000010 # define GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR 0 x00000020 # define GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR 0 x00000040 # define GL_SUBGROUP_FEATURE_QUAD_BIT_KHR 0 x00000080 # endif # ifndef GL_KHR_texture_compression_astc_hdr # define GL_KHR_texture_compression_astc_hdr 1 # define GL_COMPRESSED_RGBA_ASTC_4x4_KHR 0 x93B0 # define GL_COMPRESSED_RGBA_ASTC_5x4_KHR 0 x93B1 # define GL_COMPRESSED_RGBA_ASTC_5x5_KHR 0 x93B2 # define GL_COMPRESSED_RGBA_ASTC_6x5_KHR 0 x93B3 # define GL_COMPRESSED_RGBA_ASTC_6x6_KHR 0 x93B4 # define GL_COMPRESSED_RGBA_ASTC_8x5_KHR 0 x93B5 # define GL_COMPRESSED_RGBA_ASTC_8x6_KHR 0 x93B6 # define GL_COMPRESSED_RGBA_ASTC_8x8_KHR 0 x93B7 # define GL_COMPRESSED_RGBA_ASTC_10x5_KHR 0 x93B8 # define GL_COMPRESSED_RGBA_ASTC_10x6_KHR 0 x93B9 # define GL_COMPRESSED_RGBA_ASTC_10x8_KHR 0 x93BA # define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0 x93BB # define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0 x93BC # define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0 x93BD # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0 x93D0 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0 x93D1 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0 x93D2 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0 x93D3 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0 x93D4 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0 x93D5 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0 x93D6 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0 x93D7 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0 x93D8 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0 x93D9 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0 x93DA # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0 x93DB # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0 x93DC # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0 x93DD # endif # ifndef GL_KHR_texture_compression_astc_ldr # define GL_KHR_texture_compression_astc_ldr 1 # endif # ifndef GL_KHR_texture_compression_astc_sliced_3d # define GL_KHR_texture_compression_astc_sliced_3d 1 # endif # ifndef GL_OES_EGL_image # define GL_OES_EGL_image 1 typedef void* GLeglImageOES ; typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLEGLIMAGETARGETTEXTURE2DOESPROC) (GLenum target, GLeglImageOES image)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC) (GLenum target, GLeglImageOES image)"
  },
  {
    "label": "glEGLImageTargetTexture2DOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image)"
  },
  {
    "label": "glEGLImageTargetRenderbufferStorageOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_EGL_image_external # define GL_OES_EGL_image_external 1 # define GL_TEXTURE_EXTERNAL_OES 0 x8D65 # define GL_TEXTURE_BINDING_EXTERNAL_OES 0 x8D67 # define GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES 0 x8D68 # define GL_SAMPLER_EXTERNAL_OES 0 x8D66 # endif # ifndef GL_OES_EGL_image_external_essl3 # define GL_OES_EGL_image_external_essl3 1 # endif # ifndef GL_OES_compressed_ETC1_RGB8_sub_texture # define GL_OES_compressed_ETC1_RGB8_sub_texture 1 # endif # ifndef GL_OES_compressed_ETC1_RGB8_texture # define GL_OES_compressed_ETC1_RGB8_texture 1 # define GL_ETC1_RGB8_OES 0 x8D64 # endif # ifndef GL_OES_compressed_paletted_texture # define GL_OES_compressed_paletted_texture 1 # define GL_PALETTE4_RGB8_OES 0 x8B90 # define GL_PALETTE4_RGBA8_OES 0 x8B91 # define GL_PALETTE4_R5_G6_B5_OES 0 x8B92 # define GL_PALETTE4_RGBA4_OES 0 x8B93 # define GL_PALETTE4_RGB5_A1_OES 0 x8B94 # define GL_PALETTE8_RGB8_OES 0 x8B95 # define GL_PALETTE8_RGBA8_OES 0 x8B96 # define GL_PALETTE8_R5_G6_B5_OES 0 x8B97 # define GL_PALETTE8_RGBA4_OES 0 x8B98 # define GL_PALETTE8_RGB5_A1_OES 0 x8B99 # endif # ifndef GL_OES_copy_image # define GL_OES_copy_image 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOPYIMAGESUBDATAOESPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)"
  },
  {
    "label": "glCopyImageSubDataOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glCopyImageSubDataOES(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_depth24 # define GL_OES_depth24 1 # define GL_DEPTH_COMPONENT24_OES 0 x81A6 # endif # ifndef GL_OES_depth32 # define GL_OES_depth32 1 # define GL_DEPTH_COMPONENT32_OES 0 x81A7 # endif # ifndef GL_OES_depth_texture # define GL_OES_depth_texture 1 # endif # ifndef GL_OES_draw_buffers_indexed # define GL_OES_draw_buffers_indexed 1 # define GL_MIN 0 x8007 # define GL_MAX 0 x8008 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLENABLEIOESPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDISABLEIOESPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLENDEQUATIONIOESPROC) (GLuint buf, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLENDEQUATIONSEPARATEIOESPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLENDFUNCIOESPROC) (GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLENDFUNCSEPARATEIOESPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOLORMASKIOESPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISENABLEDIOESPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "glEnableiOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glEnableiOES(GLenum target, GLuint index)"
  },
  {
    "label": "glDisableiOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDisableiOES(GLenum target, GLuint index)"
  },
  {
    "label": "glBlendEquationiOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlendEquationiOES(GLuint buf, GLenum mode)"
  },
  {
    "label": "glBlendEquationSeparateiOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlendEquationSeparateiOES(GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glBlendFunciOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlendFunciOES(GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "glBlendFuncSeparateiOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlendFuncSeparateiOES(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "glColorMaskiOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glColorMaskiOES(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)"
  },
  {
    "label": "glIsEnablediOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsEnablediOES(GLenum target, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_draw_elements_base_vertex # define GL_OES_draw_elements_base_vertex 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXOESPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex)"
  },
  {
    "label": "glDrawElementsBaseVertexOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawElementsBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "glDrawRangeElementsBaseVertexOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawRangeElementsBaseVertexOES(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "glDrawElementsInstancedBaseVertexOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawElementsInstancedBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)"
  },
  {
    "label": "glMultiDrawElementsBaseVertexEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMultiDrawElementsBaseVertexEXT(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_element_index_uint # define GL_OES_element_index_uint 1 # endif # ifndef GL_OES_fbo_render_mipmap # define GL_OES_fbo_render_mipmap 1 # endif # ifndef GL_OES_fragment_precision_high # define GL_OES_fragment_precision_high 1 # endif # ifndef GL_OES_geometry_point_size # define GL_OES_geometry_point_size 1 # endif # ifndef GL_OES_geometry_shader # define GL_OES_geometry_shader 1 # define GL_GEOMETRY_SHADER_OES 0 x8DD9 # define GL_GEOMETRY_SHADER_BIT_OES 0 x00000004 # define GL_GEOMETRY_LINKED_VERTICES_OUT_OES 0 x8916 # define GL_GEOMETRY_LINKED_INPUT_TYPE_OES 0 x8917 # define GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES 0 x8918 # define GL_GEOMETRY_SHADER_INVOCATIONS_OES 0 x887F # define GL_LAYER_PROVOKING_VERTEX_OES 0 x825E # define GL_LINES_ADJACENCY_OES 0 x000A # define GL_LINE_STRIP_ADJACENCY_OES 0 x000B # define GL_TRIANGLES_ADJACENCY_OES 0 x000C # define GL_TRIANGLE_STRIP_ADJACENCY_OES 0 x000D # define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES 0 x8DDF # define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES 0 x8A2C # define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES 0 x8A32 # define GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES 0 x9123 # define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES 0 x9124 # define GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES 0 x8DE0 # define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES 0 x8DE1 # define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES 0 x8E5A # define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES 0 x8C29 # define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES 0 x92CF # define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES 0 x92D5 # define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES 0 x90CD # define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES 0 x90D7 # define GL_FIRST_VERTEX_CONVENTION_OES 0 x8E4D # define GL_LAST_VERTEX_CONVENTION_OES 0 x8E4E # define GL_UNDEFINED_VERTEX_OES 0 x8260 # define GL_PRIMITIVES_GENERATED_OES 0 x8C87 # define GL_FRAMEBUFFER_DEFAULT_LAYERS_OES 0 x9312 # define GL_MAX_FRAMEBUFFER_LAYERS_OES 0 x9317 # define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES 0 x8DA8 # define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES 0 x8DA7 # define GL_REFERENCED_BY_GEOMETRY_SHADER_OES 0 x9309 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERTEXTUREOESPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTextureOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferTextureOES(GLenum target, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_get_program_binary # define GL_OES_get_program_binary 1 # define GL_PROGRAM_BINARY_LENGTH_OES 0 x8741 # define GL_NUM_PROGRAM_BINARY_FORMATS_OES 0 x87FE # define GL_PROGRAM_BINARY_FORMATS_OES 0 x87FF typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPROGRAMBINARYOESPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMBINARYOESPROC) (GLuint program, GLenum binaryFormat, const void *binary, GLint length)"
  },
  {
    "label": "glGetProgramBinaryOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)"
  },
  {
    "label": "glProgramBinaryOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramBinaryOES(GLuint program, GLenum binaryFormat, const void *binary, GLint length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_gpu_shader5 # define GL_OES_gpu_shader5 1 # endif # ifndef GL_OES_mapbuffer # define GL_OES_mapbuffer 1 # define GL_WRITE_ONLY_OES 0 x88B9 # define GL_BUFFER_ACCESS_OES 0 x88BB # define GL_BUFFER_MAPPED_OES 0 x88BC # define GL_BUFFER_MAP_POINTER_OES 0 x88BD typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMAPBUFFEROESPROC) (GLenum target, GLenum access)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLUNMAPBUFFEROESPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETBUFFERPOINTERVOESPROC) (GLenum target, GLenum pname, void **params)"
  },
  {
    "label": "glMapBufferOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void* GL_APIENTRY)",
    "insertText": "glMapBufferOES(GLenum target, GLenum access)"
  },
  {
    "label": "glUnmapBufferOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glUnmapBufferOES(GLenum target)"
  },
  {
    "label": "glGetBufferPointervOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetBufferPointervOES(GLenum target, GLenum pname, void **params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_packed_depth_stencil # define GL_OES_packed_depth_stencil 1 # define GL_DEPTH_STENCIL_OES 0 x84F9 # define GL_UNSIGNED_INT_24_8_OES 0 x84FA # define GL_DEPTH24_STENCIL8_OES 0 x88F0 # endif # ifndef GL_OES_primitive_bounding_box # define GL_OES_primitive_bounding_box 1 # define GL_PRIMITIVE_BOUNDING_BOX_OES 0 x92BE typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPRIMITIVEBOUNDINGBOXOESPROC) (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)"
  },
  {
    "label": "glPrimitiveBoundingBoxOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glPrimitiveBoundingBoxOES(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_required_internalformat # define GL_OES_required_internalformat 1 # define GL_ALPHA8_OES 0 x803C # define GL_DEPTH_COMPONENT16_OES 0 x81A5 # define GL_LUMINANCE4_ALPHA4_OES 0 x8043 # define GL_LUMINANCE8_ALPHA8_OES 0 x8045 # define GL_LUMINANCE8_OES 0 x8040 # define GL_RGBA4_OES 0 x8056 # define GL_RGB5_A1_OES 0 x8057 # define GL_RGB565_OES 0 x8D62 # define GL_RGB8_OES 0 x8051 # define GL_RGBA8_OES 0 x8058 # define GL_RGB10_EXT 0 x8052 # define GL_RGB10_A2_EXT 0 x8059 # endif # ifndef GL_OES_rgb8_rgba8 # define GL_OES_rgb8_rgba8 1 # endif # ifndef GL_OES_sample_shading # define GL_OES_sample_shading 1 # define GL_SAMPLE_SHADING_OES 0 x8C36 # define GL_MIN_SAMPLE_SHADING_VALUE_OES 0 x8C37 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMINSAMPLESHADINGOESPROC) (GLfloat value)"
  },
  {
    "label": "glMinSampleShadingOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glMinSampleShadingOES(GLfloat value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_sample_variables # define GL_OES_sample_variables 1 # endif # ifndef GL_OES_shader_image_atomic # define GL_OES_shader_image_atomic 1 # endif # ifndef GL_OES_shader_io_blocks # define GL_OES_shader_io_blocks 1 # endif # ifndef GL_OES_shader_multisample_interpolation # define GL_OES_shader_multisample_interpolation 1 # define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES 0 x8E5B # define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES 0 x8E5C # define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES 0 x8E5D # endif # ifndef GL_OES_standard_derivatives # define GL_OES_standard_derivatives 1 # define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES 0 x8B8B # endif # ifndef GL_OES_stencil1 # define GL_OES_stencil1 1 # define GL_STENCIL_INDEX1_OES 0 x8D46 # endif # ifndef GL_OES_stencil4 # define GL_OES_stencil4 1 # define GL_STENCIL_INDEX4_OES 0 x8D47 # endif # ifndef GL_OES_surfaceless_context # define GL_OES_surfaceless_context 1 # define GL_FRAMEBUFFER_UNDEFINED_OES 0 x8219 # endif # ifndef GL_OES_tessellation_point_size # define GL_OES_tessellation_point_size 1 # endif # ifndef GL_OES_tessellation_shader # define GL_OES_tessellation_shader 1 # define GL_PATCHES_OES 0 x000E # define GL_PATCH_VERTICES_OES 0 x8E72 # define GL_TESS_CONTROL_OUTPUT_VERTICES_OES 0 x8E75 # define GL_TESS_GEN_MODE_OES 0 x8E76 # define GL_TESS_GEN_SPACING_OES 0 x8E77 # define GL_TESS_GEN_VERTEX_ORDER_OES 0 x8E78 # define GL_TESS_GEN_POINT_MODE_OES 0 x8E79 # define GL_ISOLINES_OES 0 x8E7A # define GL_QUADS_OES 0 x0007 # define GL_FRACTIONAL_ODD_OES 0 x8E7B # define GL_FRACTIONAL_EVEN_OES 0 x8E7C # define GL_MAX_PATCH_VERTICES_OES 0 x8E7D # define GL_MAX_TESS_GEN_LEVEL_OES 0 x8E7E # define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0 x8E7F # define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0 x8E80 # define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES 0 x8E81 # define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES 0 x8E82 # define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES 0 x8E83 # define GL_MAX_TESS_PATCH_COMPONENTS_OES 0 x8E84 # define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES 0 x8E85 # define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES 0 x8E86 # define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES 0 x8E89 # define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES 0 x8E8A # define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES 0 x886C # define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES 0 x886D # define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0 x8E1E # define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0 x8E1F # define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES 0 x92CD # define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES 0 x92CE # define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES 0 x92D3 # define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES 0 x92D4 # define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES 0 x90CB # define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES 0 x90CC # define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES 0 x90D8 # define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES 0 x90D9 # define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES 0 x8221 # define GL_IS_PER_PATCH_OES 0 x92E7 # define GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES 0 x9307 # define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES 0 x9308 # define GL_TESS_CONTROL_SHADER_OES 0 x8E88 # define GL_TESS_EVALUATION_SHADER_OES 0 x8E87 # define GL_TESS_CONTROL_SHADER_BIT_OES 0 x00000008 # define GL_TESS_EVALUATION_SHADER_BIT_OES 0 x00000010 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATCHPARAMETERIOESPROC) (GLenum pname, GLint value)"
  },
  {
    "label": "glPatchParameteriOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glPatchParameteriOES(GLenum pname, GLint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_texture_3D # define GL_OES_texture_3D 1 # define GL_TEXTURE_WRAP_R_OES 0 x8072 # define GL_TEXTURE_3D_OES 0 x806F # define GL_TEXTURE_BINDING_3D_OES 0 x806A # define GL_MAX_3D_TEXTURE_SIZE_OES 0 x8073 # define GL_SAMPLER_3D_OES 0 x8B5F # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES 0 x8CD4 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXIMAGE3DOESPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXSUBIMAGE3DOESPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOPYTEXSUBIMAGE3DOESPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DOESPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DOESPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)"
  },
  {
    "label": "glTexImage3DOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexSubImage3DOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCopyTexSubImage3DOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glCompressedTexImage3DOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage3DOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glFramebufferTexture3DOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_texture_border_clamp # define GL_OES_texture_border_clamp 1 # define GL_TEXTURE_BORDER_COLOR_OES 0 x1004 # define GL_CLAMP_TO_BORDER_OES 0 x812D typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXPARAMETERIIVOESPROC) (GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXPARAMETERIUIVOESPROC) (GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETTEXPARAMETERIIVOESPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETTEXPARAMETERIUIVOESPROC) (GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSAMPLERPARAMETERIIVOESPROC) (GLuint sampler, GLenum pname, const GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSAMPLERPARAMETERIUIVOESPROC) (GLuint sampler, GLenum pname, const GLuint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETSAMPLERPARAMETERIIVOESPROC) (GLuint sampler, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVOESPROC) (GLuint sampler, GLenum pname, GLuint *params)"
  },
  {
    "label": "glTexParameterIivOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexParameterIivOES(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTexParameterIuivOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexParameterIuivOES(GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "glGetTexParameterIivOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetTexParameterIivOES(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTexParameterIuivOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetTexParameterIuivOES(GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "glSamplerParameterIivOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glSamplerParameterIivOES(GLuint sampler, GLenum pname, const GLint *param)"
  },
  {
    "label": "glSamplerParameterIuivOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glSamplerParameterIuivOES(GLuint sampler, GLenum pname, const GLuint *param)"
  },
  {
    "label": "glGetSamplerParameterIivOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetSamplerParameterIivOES(GLuint sampler, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetSamplerParameterIuivOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetSamplerParameterIuivOES(GLuint sampler, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_texture_buffer # define GL_OES_texture_buffer 1 # define GL_TEXTURE_BUFFER_OES 0 x8C2A # define GL_TEXTURE_BUFFER_BINDING_OES 0 x8C2A # define GL_MAX_TEXTURE_BUFFER_SIZE_OES 0 x8C2B # define GL_TEXTURE_BINDING_BUFFER_OES 0 x8C2C # define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES 0 x8C2D # define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES 0 x919F # define GL_SAMPLER_BUFFER_OES 0 x8DC2 # define GL_INT_SAMPLER_BUFFER_OES 0 x8DD0 # define GL_UNSIGNED_INT_SAMPLER_BUFFER_OES 0 x8DD8 # define GL_IMAGE_BUFFER_OES 0 x9051 # define GL_INT_IMAGE_BUFFER_OES 0 x905C # define GL_UNSIGNED_INT_IMAGE_BUFFER_OES 0 x9067 # define GL_TEXTURE_BUFFER_OFFSET_OES 0 x919D # define GL_TEXTURE_BUFFER_SIZE_OES 0 x919E typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXBUFFEROESPROC) (GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXBUFFERRANGEOESPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glTexBufferOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexBufferOES(GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glTexBufferRangeOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexBufferRangeOES(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_texture_compression_astc # define GL_OES_texture_compression_astc 1 # define GL_COMPRESSED_RGBA_ASTC_3x3x3_OES 0 x93C0 # define GL_COMPRESSED_RGBA_ASTC_4x3x3_OES 0 x93C1 # define GL_COMPRESSED_RGBA_ASTC_4x4x3_OES 0 x93C2 # define GL_COMPRESSED_RGBA_ASTC_4x4x4_OES 0 x93C3 # define GL_COMPRESSED_RGBA_ASTC_5x4x4_OES 0 x93C4 # define GL_COMPRESSED_RGBA_ASTC_5x5x4_OES 0 x93C5 # define GL_COMPRESSED_RGBA_ASTC_5x5x5_OES 0 x93C6 # define GL_COMPRESSED_RGBA_ASTC_6x5x5_OES 0 x93C7 # define GL_COMPRESSED_RGBA_ASTC_6x6x5_OES 0 x93C8 # define GL_COMPRESSED_RGBA_ASTC_6x6x6_OES 0 x93C9 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES 0 x93E0 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES 0 x93E1 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES 0 x93E2 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES 0 x93E3 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES 0 x93E4 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES 0 x93E5 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES 0 x93E6 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES 0 x93E7 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES 0 x93E8 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES 0 x93E9 # endif # ifndef GL_OES_texture_cube_map_array # define GL_OES_texture_cube_map_array 1 # define GL_TEXTURE_CUBE_MAP_ARRAY_OES 0 x9009 # define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES 0 x900A # define GL_SAMPLER_CUBE_MAP_ARRAY_OES 0 x900C # define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES 0 x900D # define GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES 0 x900E # define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES 0 x900F # define GL_IMAGE_CUBE_MAP_ARRAY_OES 0 x9054 # define GL_INT_IMAGE_CUBE_MAP_ARRAY_OES 0 x905F # define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES 0 x906A # endif # ifndef GL_OES_texture_float # define GL_OES_texture_float 1 # endif # ifndef GL_OES_texture_float_linear # define GL_OES_texture_float_linear 1 # endif # ifndef GL_OES_texture_half_float # define GL_OES_texture_half_float 1 # define GL_HALF_FLOAT_OES 0 x8D61 # endif # ifndef GL_OES_texture_half_float_linear # define GL_OES_texture_half_float_linear 1 # endif # ifndef GL_OES_texture_npot # define GL_OES_texture_npot 1 # endif # ifndef GL_OES_texture_stencil8 # define GL_OES_texture_stencil8 1 # define GL_STENCIL_INDEX_OES 0 x1901 # define GL_STENCIL_INDEX8_OES 0 x8D48 # endif # ifndef GL_OES_texture_storage_multisample_2d_array # define GL_OES_texture_storage_multisample_2d_array 1 # define GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES 0 x9102 # define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES 0 x9105 # define GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0 x910B # define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0 x910C # define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0 x910D typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTexStorage3DMultisampleOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexStorage3DMultisampleOES(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_texture_view # define GL_OES_texture_view 1 # define GL_TEXTURE_VIEW_MIN_LEVEL_OES 0 x82DB # define GL_TEXTURE_VIEW_NUM_LEVELS_OES 0 x82DC # define GL_TEXTURE_VIEW_MIN_LAYER_OES 0 x82DD # define GL_TEXTURE_VIEW_NUM_LAYERS_OES 0 x82DE # define GL_TEXTURE_IMMUTABLE_LEVELS 0 x82DF typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXTUREVIEWOESPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)"
  },
  {
    "label": "glTextureViewOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glTextureViewOES(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_vertex_array_object # define GL_OES_vertex_array_object 1 # define GL_VERTEX_ARRAY_BINDING_OES 0 x85B5 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBINDVERTEXARRAYOESPROC) (GLuint array)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDELETEVERTEXARRAYSOESPROC) (GLsizei n, const GLuint *arrays)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGENVERTEXARRAYSOESPROC) (GLsizei n, GLuint *arrays)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISVERTEXARRAYOESPROC) (GLuint array)"
  },
  {
    "label": "glBindVertexArrayOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glBindVertexArrayOES(GLuint array)"
  },
  {
    "label": "glDeleteVertexArraysOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDeleteVertexArraysOES(GLsizei n, const GLuint *arrays)"
  },
  {
    "label": "glGenVertexArraysOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGenVertexArraysOES(GLsizei n, GLuint *arrays)"
  },
  {
    "label": "glIsVertexArrayOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsVertexArrayOES(GLuint array)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_vertex_half_float # define GL_OES_vertex_half_float 1 # endif # ifndef GL_OES_vertex_type_10_10_10_2 # define GL_OES_vertex_type_10_10_10_2 1 # define GL_UNSIGNED_INT_10_10_10_2_OES 0 x8DF6 # define GL_INT_10_10_10_2_OES 0 x8DF7 # endif # ifndef GL_OES_viewport_array # define GL_OES_viewport_array 1 # define GL_MAX_VIEWPORTS_OES 0 x825B # define GL_VIEWPORT_SUBPIXEL_BITS_OES 0 x825C # define GL_VIEWPORT_BOUNDS_RANGE_OES 0 x825D # define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES 0 x825F typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVIEWPORTARRAYVOESPROC) (GLuint first, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVIEWPORTINDEXEDFOESPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVIEWPORTINDEXEDFVOESPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSCISSORARRAYVOESPROC) (GLuint first, GLsizei count, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSCISSORINDEXEDOESPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSCISSORINDEXEDVOESPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDEPTHRANGEARRAYFVOESPROC) (GLuint first, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDEPTHRANGEINDEXEDFOESPROC) (GLuint index, GLfloat n, GLfloat f)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETFLOATI_VOESPROC) (GLenum target, GLuint index, GLfloat *data)"
  },
  {
    "label": "glViewportArrayvOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glViewportArrayvOES(GLuint first, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glViewportIndexedfOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glViewportIndexedfOES(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)"
  },
  {
    "label": "glViewportIndexedfvOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glViewportIndexedfvOES(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glScissorArrayvOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glScissorArrayvOES(GLuint first, GLsizei count, const GLint *v)"
  },
  {
    "label": "glScissorIndexedOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glScissorIndexedOES(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)"
  },
  {
    "label": "glScissorIndexedvOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glScissorIndexedvOES(GLuint index, const GLint *v)"
  },
  {
    "label": "glDepthRangeArrayfvOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDepthRangeArrayfvOES(GLuint first, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glDepthRangeIndexedfOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDepthRangeIndexedfOES(GLuint index, GLfloat n, GLfloat f)"
  },
  {
    "label": "glGetFloati_vOES()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetFloati_vOES(GLenum target, GLuint index, GLfloat *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_AMD_compressed_3DC_texture # define GL_AMD_compressed_3DC_texture 1 # define GL_3DC_X_AMD 0 x87F9 # define GL_3DC_XY_AMD 0 x87FA # endif # ifndef GL_AMD_compressed_ATC_texture # define GL_AMD_compressed_ATC_texture 1 # define GL_ATC_RGB_AMD 0 x8C92 # define GL_ATC_RGBA_EXPLICIT_ALPHA_AMD 0 x8C93 # define GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD 0 x87EE # endif # ifndef GL_AMD_framebuffer_multisample_advanced # define GL_AMD_framebuffer_multisample_advanced 1 # define GL_RENDERBUFFER_STORAGE_SAMPLES_AMD 0 x91B2 # define GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD 0 x91B3 # define GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD 0 x91B4 # define GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD 0 x91B5 # define GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD 0 x91B6 # define GL_SUPPORTED_MULTISAMPLE_MODES_AMD 0 x91B7 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC) (GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC) (GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glRenderbufferStorageMultisampleAdvancedAMD()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glRenderbufferStorageMultisampleAdvancedAMD(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glNamedRenderbufferStorageMultisampleAdvancedAMD()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glNamedRenderbufferStorageMultisampleAdvancedAMD(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_AMD_performance_monitor # define GL_AMD_performance_monitor 1 # define GL_COUNTER_TYPE_AMD 0 x8BC0 # define GL_COUNTER_RANGE_AMD 0 x8BC1 # define GL_UNSIGNED_INT64_AMD 0 x8BC2 # define GL_PERCENTAGE_AMD 0 x8BC3 # define GL_PERFMON_RESULT_AVAILABLE_AMD 0 x8BC4 # define GL_PERFMON_RESULT_SIZE_AMD 0 x8BC5 # define GL_PERFMON_RESULT_AMD 0 x8BC6 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint *numGroups, GLsizei groupsSize, GLuint *groups)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPERFMONITORCOUNTERSAMDPROC) (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLENDPERFMONITORAMDPROC) (GLuint monitor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)"
  },
  {
    "label": "glGetPerfMonitorGroupsAMD()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups)"
  },
  {
    "label": "glGetPerfMonitorCountersAMD()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters)"
  },
  {
    "label": "glGetPerfMonitorGroupStringAMD()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)"
  },
  {
    "label": "glGetPerfMonitorCounterStringAMD()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)"
  },
  {
    "label": "glGetPerfMonitorCounterInfoAMD()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void *data)"
  },
  {
    "label": "glGenPerfMonitorsAMD()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors)"
  },
  {
    "label": "glDeletePerfMonitorsAMD()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors)"
  },
  {
    "label": "glSelectPerfMonitorCountersAMD()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)"
  },
  {
    "label": "glBeginPerfMonitorAMD()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBeginPerfMonitorAMD(GLuint monitor)"
  },
  {
    "label": "glEndPerfMonitorAMD()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glEndPerfMonitorAMD(GLuint monitor)"
  },
  {
    "label": "glGetPerfMonitorCounterDataAMD()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_AMD_program_binary_Z400 # define GL_AMD_program_binary_Z400 1 # define GL_Z400_BINARY_AMD 0 x8740 # endif # ifndef GL_ANDROID_extension_pack_es31a # define GL_ANDROID_extension_pack_es31a 1 # endif # ifndef GL_ANGLE_depth_texture # define GL_ANGLE_depth_texture 1 # endif # ifndef GL_ANGLE_framebuffer_blit # define GL_ANGLE_framebuffer_blit 1 # define GL_READ_FRAMEBUFFER_ANGLE 0 x8CA8 # define GL_DRAW_FRAMEBUFFER_ANGLE 0 x8CA9 # define GL_DRAW_FRAMEBUFFER_BINDING_ANGLE 0 x8CA6 # define GL_READ_FRAMEBUFFER_BINDING_ANGLE 0 x8CAA typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLITFRAMEBUFFERANGLEPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "glBlitFramebufferANGLE()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ANGLE_framebuffer_multisample # define GL_ANGLE_framebuffer_multisample 1 # define GL_RENDERBUFFER_SAMPLES_ANGLE 0 x8CAB # define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE 0 x8D56 # define GL_MAX_SAMPLES_ANGLE 0 x8D57 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glRenderbufferStorageMultisampleANGLE()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ANGLE_instanced_arrays # define GL_ANGLE_instanced_arrays 1 # define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE 0 x88FE typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWARRAYSINSTANCEDANGLEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWELEMENTSINSTANCEDANGLEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVERTEXATTRIBDIVISORANGLEPROC) (GLuint index, GLuint divisor)"
  },
  {
    "label": "glDrawArraysInstancedANGLE()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount)"
  },
  {
    "label": "glDrawElementsInstancedANGLE()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)"
  },
  {
    "label": "glVertexAttribDivisorANGLE()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glVertexAttribDivisorANGLE(GLuint index, GLuint divisor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ANGLE_pack_reverse_row_order # define GL_ANGLE_pack_reverse_row_order 1 # define GL_PACK_REVERSE_ROW_ORDER_ANGLE 0 x93A4 # endif # ifndef GL_ANGLE_program_binary # define GL_ANGLE_program_binary 1 # define GL_PROGRAM_BINARY_ANGLE 0 x93A6 # endif # ifndef GL_ANGLE_texture_compression_dxt3 # define GL_ANGLE_texture_compression_dxt3 1 # define GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE 0 x83F2 # endif # ifndef GL_ANGLE_texture_compression_dxt5 # define GL_ANGLE_texture_compression_dxt5 1 # define GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE 0 x83F3 # endif # ifndef GL_ANGLE_texture_usage # define GL_ANGLE_texture_usage 1 # define GL_TEXTURE_USAGE_ANGLE 0 x93A2 # define GL_FRAMEBUFFER_ATTACHMENT_ANGLE 0 x93A3 # endif # ifndef GL_ANGLE_translated_shader_source # define GL_ANGLE_translated_shader_source 1 # define GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE 0 x93A0 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)"
  },
  {
    "label": "glGetTranslatedShaderSourceANGLE()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_APPLE_clip_distance # define GL_APPLE_clip_distance 1 # define GL_MAX_CLIP_DISTANCES_APPLE 0 x0D32 # define GL_CLIP_DISTANCE0_APPLE 0 x3000 # define GL_CLIP_DISTANCE1_APPLE 0 x3001 # define GL_CLIP_DISTANCE2_APPLE 0 x3002 # define GL_CLIP_DISTANCE3_APPLE 0 x3003 # define GL_CLIP_DISTANCE4_APPLE 0 x3004 # define GL_CLIP_DISTANCE5_APPLE 0 x3005 # define GL_CLIP_DISTANCE6_APPLE 0 x3006 # define GL_CLIP_DISTANCE7_APPLE 0 x3007 # endif # ifndef GL_APPLE_color_buffer_packed_float # define GL_APPLE_color_buffer_packed_float 1 # endif # ifndef GL_APPLE_copy_texture_levels # define GL_APPLE_copy_texture_levels 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOPYTEXTURELEVELSAPPLEPROC) (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)"
  },
  {
    "label": "glCopyTextureLevelsAPPLE()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_APPLE_framebuffer_multisample # define GL_APPLE_framebuffer_multisample 1 # define GL_RENDERBUFFER_SAMPLES_APPLE 0 x8CAB # define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE 0 x8D56 # define GL_MAX_SAMPLES_APPLE 0 x8D57 # define GL_READ_FRAMEBUFFER_APPLE 0 x8CA8 # define GL_DRAW_FRAMEBUFFER_APPLE 0 x8CA9 # define GL_DRAW_FRAMEBUFFER_BINDING_APPLE 0 x8CA6 # define GL_READ_FRAMEBUFFER_BINDING_APPLE 0 x8CAA typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC) (void)"
  },
  {
    "label": "glRenderbufferStorageMultisampleAPPLE()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glResolveMultisampleFramebufferAPPLE()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glResolveMultisampleFramebufferAPPLE(void)"
  },
  {
    "label": "GLsync()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_APPLE_rgb_422 # define GL_APPLE_rgb_422 1 # define GL_RGB_422_APPLE 0 x8A1F # define GL_UNSIGNED_SHORT_8_8_APPLE 0 x85BA # define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0 x85BB # define GL_RGB_RAW_422_APPLE 0 x8A51 # endif # ifndef GL_APPLE_sync # define GL_APPLE_sync 1 # define GL_SYNC_OBJECT_APPLE 0 x8A53 # define GL_MAX_SERVER_WAIT_TIMEOUT_APPLE 0 x9111 # define GL_OBJECT_TYPE_APPLE 0 x9112 # define GL_SYNC_CONDITION_APPLE 0 x9113 # define GL_SYNC_STATUS_APPLE 0 x9114 # define GL_SYNC_FLAGS_APPLE 0 x9115 # define GL_SYNC_FENCE_APPLE 0 x9116 # define GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE 0 x9117 # define GL_UNSIGNALED_APPLE 0 x9118 # define GL_SIGNALED_APPLE 0 x9119 # define GL_ALREADY_SIGNALED_APPLE 0 x911A # define GL_TIMEOUT_EXPIRED_APPLE 0 x911B # define GL_CONDITION_SATISFIED_APPLE 0 x911C # define GL_WAIT_FAILED_APPLE 0 x911D # define GL_SYNC_FLUSH_COMMANDS_BIT_APPLE 0 x00000001 # define GL_TIMEOUT_IGNORED_APPLE 0 xFFFFFFFFFFFFFFFFull typedef)",
    "insertText": "GLsync(GL_APIENTRYP PFNGLFENCESYNCAPPLEPROC) (GLenum condition, GLbitfield flags)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISSYNCAPPLEPROC) (GLsync sync)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDELETESYNCAPPLEPROC) (GLsync sync)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(GL_APIENTRYP PFNGLCLIENTWAITSYNCAPPLEPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLWAITSYNCAPPLEPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETINTEGER64VAPPLEPROC) (GLenum pname, GLint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETSYNCIVAPPLEPROC) (GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values)"
  },
  {
    "label": "glFenceSyncAPPLE()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL GLsync GL_APIENTRY)",
    "insertText": "glFenceSyncAPPLE(GLenum condition, GLbitfield flags)"
  },
  {
    "label": "glIsSyncAPPLE()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsSyncAPPLE(GLsync sync)"
  },
  {
    "label": "glDeleteSyncAPPLE()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDeleteSyncAPPLE(GLsync sync)"
  },
  {
    "label": "glClientWaitSyncAPPLE()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLenum GL_APIENTRY)",
    "insertText": "glClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout)"
  },
  {
    "label": "glWaitSyncAPPLE()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout)"
  },
  {
    "label": "glGetInteger64vAPPLE()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetInteger64vAPPLE(GLenum pname, GLint64 *params)"
  },
  {
    "label": "glGetSyncivAPPLE()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_APPLE_texture_format_BGRA8888 # define GL_APPLE_texture_format_BGRA8888 1 # define GL_BGRA_EXT 0 x80E1 # define GL_BGRA8_EXT 0 x93A1 # endif # ifndef GL_APPLE_texture_max_level # define GL_APPLE_texture_max_level 1 # define GL_TEXTURE_MAX_LEVEL_APPLE 0 x813D # endif # ifndef GL_APPLE_texture_packed_float # define GL_APPLE_texture_packed_float 1 # define GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE 0 x8C3B # define GL_UNSIGNED_INT_5_9_9_9_REV_APPLE 0 x8C3E # define GL_R11F_G11F_B10F_APPLE 0 x8C3A # define GL_RGB9_E5_APPLE 0 x8C3D # endif # ifndef GL_ARM_mali_program_binary # define GL_ARM_mali_program_binary 1 # define GL_MALI_PROGRAM_BINARY_ARM 0 x8F61 # endif # ifndef GL_ARM_mali_shader_binary # define GL_ARM_mali_shader_binary 1 # define GL_MALI_SHADER_BINARY_ARM 0 x8F60 # endif # ifndef GL_ARM_rgba8 # define GL_ARM_rgba8 1 # endif # ifndef GL_ARM_shader_framebuffer_fetch # define GL_ARM_shader_framebuffer_fetch 1 # define GL_FETCH_PER_SAMPLE_ARM 0 x8F65 # define GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM 0 x8F66 # endif # ifndef GL_ARM_shader_framebuffer_fetch_depth_stencil # define GL_ARM_shader_framebuffer_fetch_depth_stencil 1 # endif # ifndef GL_ARM_texture_unnormalized_coordinates # define GL_ARM_texture_unnormalized_coordinates 1 # define GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM 0 x8F6A # endif # ifndef GL_DMP_program_binary # define GL_DMP_program_binary 1 # define GL_SMAPHS30_PROGRAM_BINARY_DMP 0 x9251 # define GL_SMAPHS_PROGRAM_BINARY_DMP 0 x9252 # define GL_DMP_PROGRAM_BINARY_DMP 0 x9253 # endif # ifndef GL_DMP_shader_binary # define GL_DMP_shader_binary 1 # define GL_SHADER_BINARY_DMP 0 x9250 # endif # ifndef GL_EXT_EGL_image_array # define GL_EXT_EGL_image_array 1 # endif # ifndef GL_EXT_EGL_image_storage # define GL_EXT_EGL_image_storage 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC) (GLenum target, GLeglImageOES image, const GLint* attrib_list)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC) (GLuint texture, GLeglImageOES image, const GLint* attrib_list)"
  },
  {
    "label": "glEGLImageTargetTexStorageEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glEGLImageTargetTexStorageEXT(GLenum target, GLeglImageOES image, const GLint* attrib_list)"
  },
  {
    "label": "glEGLImageTargetTextureStorageEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glEGLImageTargetTextureStorageEXT(GLuint texture, GLeglImageOES image, const GLint* attrib_list)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_EGL_image_storage_compression # define GL_EXT_EGL_image_storage_compression 1 # define GL_SURFACE_COMPRESSION_EXT 0 x96C0 # define GL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT 0 x96C1 # define GL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT 0 x96C2 # endif # ifndef GL_EXT_YUV_target # define GL_EXT_YUV_target 1 # define GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT 0 x8BE7 # endif # ifndef GL_EXT_base_instance # define GL_EXT_base_instance 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)"
  },
  {
    "label": "glDrawArraysInstancedBaseInstanceEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawArraysInstancedBaseInstanceEXT(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)"
  },
  {
    "label": "glDrawElementsInstancedBaseInstanceEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawElementsInstancedBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance)"
  },
  {
    "label": "glDrawElementsInstancedBaseVertexBaseInstanceEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawElementsInstancedBaseVertexBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_blend_func_extended # define GL_EXT_blend_func_extended 1 # define GL_SRC1_COLOR_EXT 0 x88F9 # define GL_SRC1_ALPHA_EXT 0 x8589 # define GL_ONE_MINUS_SRC1_COLOR_EXT 0 x88FA # define GL_ONE_MINUS_SRC1_ALPHA_EXT 0 x88FB # define GL_SRC_ALPHA_SATURATE_EXT 0 x0308 # define GL_LOCATION_INDEX_EXT 0 x930F # define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT 0 x88FC typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBINDFRAGDATALOCATIONEXTPROC) (GLuint program, GLuint color, const GLchar *name)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(GL_APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC) (GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(GL_APIENTRYP PFNGLGETFRAGDATAINDEXEXTPROC) (GLuint program, const GLchar *name)"
  },
  {
    "label": "glBindFragDataLocationIndexedEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glBindFragDataLocationIndexedEXT(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)"
  },
  {
    "label": "glBindFragDataLocationEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name)"
  },
  {
    "label": "glGetProgramResourceLocationIndexEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLint GL_APIENTRY)",
    "insertText": "glGetProgramResourceLocationIndexEXT(GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "glGetFragDataIndexEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLint GL_APIENTRY)",
    "insertText": "glGetFragDataIndexEXT(GLuint program, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_blend_minmax # define GL_EXT_blend_minmax 1 # define GL_MIN_EXT 0 x8007 # define GL_MAX_EXT 0 x8008 # endif # ifndef GL_EXT_buffer_storage # define GL_EXT_buffer_storage 1 # define GL_MAP_READ_BIT 0 x0001 # define GL_MAP_WRITE_BIT 0 x0002 # define GL_MAP_PERSISTENT_BIT_EXT 0 x0040 # define GL_MAP_COHERENT_BIT_EXT 0 x0080 # define GL_DYNAMIC_STORAGE_BIT_EXT 0 x0100 # define GL_CLIENT_STORAGE_BIT_EXT 0 x0200 # define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT 0 x00004000 # define GL_BUFFER_IMMUTABLE_STORAGE_EXT 0 x821F # define GL_BUFFER_STORAGE_FLAGS_EXT 0 x8220 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBUFFERSTORAGEEXTPROC) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "glBufferStorageEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glBufferStorageEXT(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_clear_texture # define GL_EXT_clear_texture 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCLEARTEXIMAGEEXTPROC) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCLEARTEXSUBIMAGEEXTPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glClearTexImageEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glClearTexImageEXT(GLuint texture, GLint level, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glClearTexSubImageEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glClearTexSubImageEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_clip_control # define GL_EXT_clip_control 1 # define GL_LOWER_LEFT_EXT 0 x8CA1 # define GL_UPPER_LEFT_EXT 0 x8CA2 # define GL_NEGATIVE_ONE_TO_ONE_EXT 0 x935E # define GL_ZERO_TO_ONE_EXT 0 x935F # define GL_CLIP_ORIGIN_EXT 0 x935C # define GL_CLIP_DEPTH_MODE_EXT 0 x935D typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCLIPCONTROLEXTPROC) (GLenum origin, GLenum depth)"
  },
  {
    "label": "glClipControlEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glClipControlEXT(GLenum origin, GLenum depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_clip_cull_distance # define GL_EXT_clip_cull_distance 1 # define GL_MAX_CLIP_DISTANCES_EXT 0 x0D32 # define GL_MAX_CULL_DISTANCES_EXT 0 x82F9 # define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT 0 x82FA # define GL_CLIP_DISTANCE0_EXT 0 x3000 # define GL_CLIP_DISTANCE1_EXT 0 x3001 # define GL_CLIP_DISTANCE2_EXT 0 x3002 # define GL_CLIP_DISTANCE3_EXT 0 x3003 # define GL_CLIP_DISTANCE4_EXT 0 x3004 # define GL_CLIP_DISTANCE5_EXT 0 x3005 # define GL_CLIP_DISTANCE6_EXT 0 x3006 # define GL_CLIP_DISTANCE7_EXT 0 x3007 # endif # ifndef GL_EXT_color_buffer_float # define GL_EXT_color_buffer_float 1 # endif # ifndef GL_EXT_color_buffer_half_float # define GL_EXT_color_buffer_half_float 1 # define GL_RGBA16F_EXT 0 x881A # define GL_RGB16F_EXT 0 x881B # define GL_RG16F_EXT 0 x822F # define GL_R16F_EXT 0 x822D # define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT 0 x8211 # define GL_UNSIGNED_NORMALIZED_EXT 0 x8C17 # endif # ifndef GL_EXT_conservative_depth # define GL_EXT_conservative_depth 1 # endif # ifndef GL_EXT_copy_image # define GL_EXT_copy_image 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOPYIMAGESUBDATAEXTPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)"
  },
  {
    "label": "glCopyImageSubDataEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glCopyImageSubDataEXT(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_debug_label # define GL_EXT_debug_label 1 # define GL_PROGRAM_PIPELINE_OBJECT_EXT 0 x8A4F # define GL_PROGRAM_OBJECT_EXT 0 x8B40 # define GL_SHADER_OBJECT_EXT 0 x8B48 # define GL_BUFFER_OBJECT_EXT 0 x9151 # define GL_QUERY_OBJECT_EXT 0 x9153 # define GL_VERTEX_ARRAY_OBJECT_EXT 0 x9154 # define GL_TRANSFORM_FEEDBACK 0 x8E22 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLLABELOBJECTEXTPROC) (GLenum type, GLuint object, GLsizei length, const GLchar *label)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETOBJECTLABELEXTPROC) (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "glLabelObjectEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)"
  },
  {
    "label": "glGetObjectLabelEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_debug_marker # define GL_EXT_debug_marker 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLINSERTEVENTMARKEREXTPROC) (GLsizei length, const GLchar *marker)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPUSHGROUPMARKEREXTPROC) (GLsizei length, const GLchar *marker)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPOPGROUPMARKEREXTPROC) (void)"
  },
  {
    "label": "glInsertEventMarkerEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glInsertEventMarkerEXT(GLsizei length, const GLchar *marker)"
  },
  {
    "label": "glPushGroupMarkerEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPushGroupMarkerEXT(GLsizei length, const GLchar *marker)"
  },
  {
    "label": "glPopGroupMarkerEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPopGroupMarkerEXT(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_depth_clamp # define GL_EXT_depth_clamp 1 # define GL_DEPTH_CLAMP_EXT 0 x864F # endif # ifndef GL_EXT_discard_framebuffer # define GL_EXT_discard_framebuffer 1 # define GL_COLOR_EXT 0 x1800 # define GL_DEPTH_EXT 0 x1801 # define GL_STENCIL_EXT 0 x1802 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDISCARDFRAMEBUFFEREXTPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments)"
  },
  {
    "label": "glDiscardFramebufferEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_disjoint_timer_query # define GL_EXT_disjoint_timer_query 1 # define GL_QUERY_COUNTER_BITS_EXT 0 x8864 # define GL_CURRENT_QUERY_EXT 0 x8865 # define GL_QUERY_RESULT_EXT 0 x8866 # define GL_QUERY_RESULT_AVAILABLE_EXT 0 x8867 # define GL_TIME_ELAPSED_EXT 0 x88BF # define GL_TIMESTAMP_EXT 0 x8E28 # define GL_GPU_DISJOINT_EXT 0 x8FBB typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGENQUERIESEXTPROC) (GLsizei n, GLuint *ids)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDELETEQUERIESEXTPROC) (GLsizei n, const GLuint *ids)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISQUERYEXTPROC) (GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBEGINQUERYEXTPROC) (GLenum target, GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLENDQUERYEXTPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLQUERYCOUNTEREXTPROC) (GLuint id, GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETQUERYIVEXTPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETQUERYOBJECTIVEXTPROC) (GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETQUERYOBJECTUIVEXTPROC) (GLuint id, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint id, GLenum pname, GLint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint id, GLenum pname, GLuint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETINTEGER64VEXTPROC) (GLenum pname, GLint64 *data)"
  },
  {
    "label": "glGenQueriesEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glGenQueriesEXT(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glDeleteQueriesEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDeleteQueriesEXT(GLsizei n, const GLuint *ids)"
  },
  {
    "label": "glIsQueryEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsQueryEXT(GLuint id)"
  },
  {
    "label": "glBeginQueryEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBeginQueryEXT(GLenum target, GLuint id)"
  },
  {
    "label": "glEndQueryEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glEndQueryEXT(GLenum target)"
  },
  {
    "label": "glQueryCounterEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glQueryCounterEXT(GLuint id, GLenum target)"
  },
  {
    "label": "glGetQueryivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetQueryivEXT(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetQueryObjectivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetQueryObjectivEXT(GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetQueryObjectuivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint *params)"
  },
  {
    "label": "glGetQueryObjecti64vEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 *params)"
  },
  {
    "label": "glGetQueryObjectui64vEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 *params)"
  },
  {
    "label": "glGetInteger64vEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetInteger64vEXT(GLenum pname, GLint64 *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_draw_buffers # define GL_EXT_draw_buffers 1 # define GL_MAX_COLOR_ATTACHMENTS_EXT 0 x8CDF # define GL_MAX_DRAW_BUFFERS_EXT 0 x8824 # define GL_DRAW_BUFFER0_EXT 0 x8825 # define GL_DRAW_BUFFER1_EXT 0 x8826 # define GL_DRAW_BUFFER2_EXT 0 x8827 # define GL_DRAW_BUFFER3_EXT 0 x8828 # define GL_DRAW_BUFFER4_EXT 0 x8829 # define GL_DRAW_BUFFER5_EXT 0 x882A # define GL_DRAW_BUFFER6_EXT 0 x882B # define GL_DRAW_BUFFER7_EXT 0 x882C # define GL_DRAW_BUFFER8_EXT 0 x882D # define GL_DRAW_BUFFER9_EXT 0 x882E # define GL_DRAW_BUFFER10_EXT 0 x882F # define GL_DRAW_BUFFER11_EXT 0 x8830 # define GL_DRAW_BUFFER12_EXT 0 x8831 # define GL_DRAW_BUFFER13_EXT 0 x8832 # define GL_DRAW_BUFFER14_EXT 0 x8833 # define GL_DRAW_BUFFER15_EXT 0 x8834 # define GL_COLOR_ATTACHMENT0_EXT 0 x8CE0 # define GL_COLOR_ATTACHMENT1_EXT 0 x8CE1 # define GL_COLOR_ATTACHMENT2_EXT 0 x8CE2 # define GL_COLOR_ATTACHMENT3_EXT 0 x8CE3 # define GL_COLOR_ATTACHMENT4_EXT 0 x8CE4 # define GL_COLOR_ATTACHMENT5_EXT 0 x8CE5 # define GL_COLOR_ATTACHMENT6_EXT 0 x8CE6 # define GL_COLOR_ATTACHMENT7_EXT 0 x8CE7 # define GL_COLOR_ATTACHMENT8_EXT 0 x8CE8 # define GL_COLOR_ATTACHMENT9_EXT 0 x8CE9 # define GL_COLOR_ATTACHMENT10_EXT 0 x8CEA # define GL_COLOR_ATTACHMENT11_EXT 0 x8CEB # define GL_COLOR_ATTACHMENT12_EXT 0 x8CEC # define GL_COLOR_ATTACHMENT13_EXT 0 x8CED # define GL_COLOR_ATTACHMENT14_EXT 0 x8CEE # define GL_COLOR_ATTACHMENT15_EXT 0 x8CEF typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWBUFFERSEXTPROC) (GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "glDrawBuffersEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawBuffersEXT(GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_draw_buffers_indexed # define GL_EXT_draw_buffers_indexed 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLENABLEIEXTPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDISABLEIEXTPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLENDEQUATIONIEXTPROC) (GLuint buf, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLENDEQUATIONSEPARATEIEXTPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLENDFUNCIEXTPROC) (GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLENDFUNCSEPARATEIEXTPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOLORMASKIEXTPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISENABLEDIEXTPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "glEnableiEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glEnableiEXT(GLenum target, GLuint index)"
  },
  {
    "label": "glDisableiEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDisableiEXT(GLenum target, GLuint index)"
  },
  {
    "label": "glBlendEquationiEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlendEquationiEXT(GLuint buf, GLenum mode)"
  },
  {
    "label": "glBlendEquationSeparateiEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlendEquationSeparateiEXT(GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glBlendFunciEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlendFunciEXT(GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "glBlendFuncSeparateiEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlendFuncSeparateiEXT(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "glColorMaskiEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glColorMaskiEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)"
  },
  {
    "label": "glIsEnablediEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsEnablediEXT(GLenum target, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_draw_elements_base_vertex # define GL_EXT_draw_elements_base_vertex 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)"
  },
  {
    "label": "glDrawElementsBaseVertexEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawElementsBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "glDrawRangeElementsBaseVertexEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawRangeElementsBaseVertexEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "glDrawElementsInstancedBaseVertexEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawElementsInstancedBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_draw_instanced # define GL_EXT_draw_instanced 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)"
  },
  {
    "label": "glDrawArraysInstancedEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)"
  },
  {
    "label": "glDrawElementsInstancedEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_draw_transform_feedback # define GL_EXT_draw_transform_feedback 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKEXTPROC) (GLenum mode, GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDEXTPROC) (GLenum mode, GLuint id, GLsizei instancecount)"
  },
  {
    "label": "glDrawTransformFeedbackEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawTransformFeedbackEXT(GLenum mode, GLuint id)"
  },
  {
    "label": "glDrawTransformFeedbackInstancedEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawTransformFeedbackInstancedEXT(GLenum mode, GLuint id, GLsizei instancecount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_external_buffer # define GL_EXT_external_buffer 1 typedef void* GLeglClientBufferEXT ; typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBUFFERSTORAGEEXTERNALEXTPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags)"
  },
  {
    "label": "glBufferStorageExternalEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glBufferStorageExternalEXT(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags)"
  },
  {
    "label": "glNamedBufferStorageExternalEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glNamedBufferStorageExternalEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_float_blend # define GL_EXT_float_blend 1 # endif # ifndef GL_EXT_fragment_shading_rate # define GL_EXT_fragment_shading_rate 1 # define GL_SHADING_RATE_1X1_PIXELS_EXT 0 x96A6 # define GL_SHADING_RATE_1X2_PIXELS_EXT 0 x96A7 # define GL_SHADING_RATE_2X1_PIXELS_EXT 0 x96A8 # define GL_SHADING_RATE_2X2_PIXELS_EXT 0 x96A9 # define GL_SHADING_RATE_1X4_PIXELS_EXT 0 x96AA # define GL_SHADING_RATE_4X1_PIXELS_EXT 0 x96AB # define GL_SHADING_RATE_4X2_PIXELS_EXT 0 x96AC # define GL_SHADING_RATE_2X4_PIXELS_EXT 0 x96AD # define GL_SHADING_RATE_4X4_PIXELS_EXT 0 x96AE # define GL_SHADING_RATE_EXT 0 x96D0 # define GL_SHADING_RATE_ATTACHMENT_EXT 0 x96D1 # define GL_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_EXT 0 x96D2 # define GL_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_EXT 0 x96D3 # define GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_EXT 0 x96D4 # define GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_EXT 0 x96D5 # define GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_EXT 0 x96D6 # define GL_MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT 0 x96D7 # define GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT 0 x96D8 # define GL_MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT 0 x96D9 # define GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT 0 x96DA # define GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_ASPECT_RATIO_EXT 0 x96DB # define GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_LAYERS_EXT 0 x96DC # define GL_FRAGMENT_SHADING_RATE_WITH_SHADER_DEPTH_STENCIL_WRITES_SUPPORTED_EXT 0 x96DD # define GL_FRAGMENT_SHADING_RATE_WITH_SAMPLE_MASK_SUPPORTED_EXT 0 x96DE # define GL_FRAGMENT_SHADING_RATE_ATTACHMENT_WITH_DEFAULT_FRAMEBUFFER_SUPPORTED_EXT 0 x96DF # define GL_FRAGMENT_SHADING_RATE_NON_TRIVIAL_COMBINERS_SUPPORTED_EXT 0 x8F6F typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETFRAGMENTSHADINGRATESEXTPROC) (GLsizei samples, GLsizei maxCount, GLsizei *count, GLenum *shadingRates)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSHADINGRATEEXTPROC) (GLenum rate)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSHADINGRATECOMBINEROPSEXTPROC) (GLenum combinerOp0, GLenum combinerOp1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERSHADINGRATEEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint baseLayer, GLsizei numLayers, GLsizei texelWidth, GLsizei texelHeight)"
  },
  {
    "label": "glGetFragmentShadingRatesEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetFragmentShadingRatesEXT(GLsizei samples, GLsizei maxCount, GLsizei *count, GLenum *shadingRates)"
  },
  {
    "label": "glShadingRateEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glShadingRateEXT(GLenum rate)"
  },
  {
    "label": "glShadingRateCombinerOpsEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glShadingRateCombinerOpsEXT(GLenum combinerOp0, GLenum combinerOp1)"
  },
  {
    "label": "glFramebufferShadingRateEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferShadingRateEXT(GLenum target, GLenum attachment, GLuint texture, GLint baseLayer, GLsizei numLayers, GLsizei texelWidth, GLsizei texelHeight)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_geometry_point_size # define GL_EXT_geometry_point_size 1 # endif # ifndef GL_EXT_geometry_shader # define GL_EXT_geometry_shader 1 # define GL_GEOMETRY_SHADER_EXT 0 x8DD9 # define GL_GEOMETRY_SHADER_BIT_EXT 0 x00000004 # define GL_GEOMETRY_LINKED_VERTICES_OUT_EXT 0 x8916 # define GL_GEOMETRY_LINKED_INPUT_TYPE_EXT 0 x8917 # define GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT 0 x8918 # define GL_GEOMETRY_SHADER_INVOCATIONS_EXT 0 x887F # define GL_LAYER_PROVOKING_VERTEX_EXT 0 x825E # define GL_LINES_ADJACENCY_EXT 0 x000A # define GL_LINE_STRIP_ADJACENCY_EXT 0 x000B # define GL_TRIANGLES_ADJACENCY_EXT 0 x000C # define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0 x000D # define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0 x8DDF # define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT 0 x8A2C # define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT 0 x8A32 # define GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT 0 x9123 # define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT 0 x9124 # define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0 x8DE0 # define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0 x8DE1 # define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT 0 x8E5A # define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0 x8C29 # define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT 0 x92CF # define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT 0 x92D5 # define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT 0 x90CD # define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT 0 x90D7 # define GL_FIRST_VERTEX_CONVENTION_EXT 0 x8E4D # define GL_LAST_VERTEX_CONVENTION_EXT 0 x8E4E # define GL_UNDEFINED_VERTEX_EXT 0 x8260 # define GL_PRIMITIVES_GENERATED_EXT 0 x8C87 # define GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT 0 x9312 # define GL_MAX_FRAMEBUFFER_LAYERS_EXT 0 x9317 # define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0 x8DA8 # define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0 x8DA7 # define GL_REFERENCED_BY_GEOMETRY_SHADER_EXT 0 x9309 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERTEXTUREEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTextureEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_gpu_shader5 # define GL_EXT_gpu_shader5 1 # endif # ifndef GL_EXT_instanced_arrays # define GL_EXT_instanced_arrays 1 # define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT 0 x88FE typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVERTEXATTRIBDIVISOREXTPROC) (GLuint index, GLuint divisor)"
  },
  {
    "label": "glVertexAttribDivisorEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glVertexAttribDivisorEXT(GLuint index, GLuint divisor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_map_buffer_range # define GL_EXT_map_buffer_range 1 # define GL_MAP_READ_BIT_EXT 0 x0001 # define GL_MAP_WRITE_BIT_EXT 0 x0002 # define GL_MAP_INVALIDATE_RANGE_BIT_EXT 0 x0004 # define GL_MAP_INVALIDATE_BUFFER_BIT_EXT 0 x0008 # define GL_MAP_FLUSH_EXPLICIT_BIT_EXT 0 x0010 # define GL_MAP_UNSYNCHRONIZED_BIT_EXT 0 x0020 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMAPBUFFERRANGEEXTPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC) (GLenum target, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "glMapBufferRangeEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void* GL_APIENTRY)",
    "insertText": "glMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "glFlushMappedBufferRangeEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_memory_object # define GL_EXT_memory_object 1 # define GL_TEXTURE_TILING_EXT 0 x9580 # define GL_DEDICATED_MEMORY_OBJECT_EXT 0 x9581 # define GL_PROTECTED_MEMORY_OBJECT_EXT 0 x959B # define GL_NUM_TILING_TYPES_EXT 0 x9582 # define GL_TILING_TYPES_EXT 0 x9583 # define GL_OPTIMAL_TILING_EXT 0 x9584 # define GL_LINEAR_TILING_EXT 0 x9585 # define GL_NUM_DEVICE_UUIDS_EXT 0 x9596 # define GL_DEVICE_UUID_EXT 0 x9597 # define GL_DRIVER_UUID_EXT 0 x9598 # define GL_UUID_SIZE_EXT 1 6 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETUNSIGNEDBYTEVEXTPROC) (GLenum pname, GLubyte *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETUNSIGNEDBYTEI_VEXTPROC) (GLenum target, GLuint index, GLubyte *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDELETEMEMORYOBJECTSEXTPROC) (GLsizei n, const GLuint *memoryObjects)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISMEMORYOBJECTEXTPROC) (GLuint memoryObject)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCREATEMEMORYOBJECTSEXTPROC) (GLsizei n, GLuint *memoryObjects)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMEMORYOBJECTPARAMETERIVEXTPROC) (GLuint memoryObject, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC) (GLuint memoryObject, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXSTORAGEMEM2DEXTPROC) (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXSTORAGEMEM3DEXTPROC) (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBUFFERSTORAGEMEMEXTPROC) (GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXTURESTORAGEMEM2DEXTPROC) (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC) (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXTURESTORAGEMEM3DEXTPROC) (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC) (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC) (GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "glGetUnsignedBytevEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetUnsignedBytevEXT(GLenum pname, GLubyte *data)"
  },
  {
    "label": "glGetUnsignedBytei_vEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte *data)"
  },
  {
    "label": "glDeleteMemoryObjectsEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDeleteMemoryObjectsEXT(GLsizei n, const GLuint *memoryObjects)"
  },
  {
    "label": "glIsMemoryObjectEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsMemoryObjectEXT(GLuint memoryObject)"
  },
  {
    "label": "glCreateMemoryObjectsEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCreateMemoryObjectsEXT(GLsizei n, GLuint *memoryObjects)"
  },
  {
    "label": "glMemoryObjectParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint *params)"
  },
  {
    "label": "glGetMemoryObjectParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint *params)"
  },
  {
    "label": "glTexStorageMem2DEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "glTexStorageMem2DMultisampleEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "glTexStorageMem3DEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "glTexStorageMem3DMultisampleEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "glBufferStorageMemEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "glTextureStorageMem2DEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTextureStorageMem2DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "glTextureStorageMem2DMultisampleEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "glTextureStorageMem3DEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "glTextureStorageMem3DMultisampleEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "glNamedBufferStorageMemEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_memory_object_fd # define GL_EXT_memory_object_fd 1 # define GL_HANDLE_TYPE_OPAQUE_FD_EXT 0 x9586 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLIMPORTMEMORYFDEXTPROC) (GLuint memory, GLuint64 size, GLenum handleType, GLint fd)"
  },
  {
    "label": "glImportMemoryFdEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_memory_object_win32 # define GL_EXT_memory_object_win32 1 # define GL_HANDLE_TYPE_OPAQUE_WIN32_EXT 0 x9587 # define GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT 0 x9588 # define GL_DEVICE_LUID_EXT 0 x9599 # define GL_DEVICE_NODE_MASK_EXT 0 x959A # define GL_LUID_SIZE_EXT 8 # define GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT 0 x9589 # define GL_HANDLE_TYPE_D3D12_RESOURCE_EXT 0 x958A # define GL_HANDLE_TYPE_D3D11_IMAGE_EXT 0 x958B # define GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT 0 x958C typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC) (GLuint memory, GLuint64 size, GLenum handleType, void *handle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLIMPORTMEMORYWIN32NAMEEXTPROC) (GLuint memory, GLuint64 size, GLenum handleType, const void *name)"
  },
  {
    "label": "glImportMemoryWin32HandleEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void *handle)"
  },
  {
    "label": "glImportMemoryWin32NameEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const void *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_multi_draw_arrays # define GL_EXT_multi_draw_arrays 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount)"
  },
  {
    "label": "glMultiDrawArraysEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)"
  },
  {
    "label": "glMultiDrawElementsEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_multi_draw_indirect # define GL_EXT_multi_draw_indirect 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC) (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "glMultiDrawArraysIndirectEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glMultiDrawArraysIndirectEXT(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "glMultiDrawElementsIndirectEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMultiDrawElementsIndirectEXT(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_multisampled_compatibility # define GL_EXT_multisampled_compatibility 1 # define GL_MULTISAMPLE_EXT 0 x809D # define GL_SAMPLE_ALPHA_TO_ONE_EXT 0 x809F # endif # ifndef GL_EXT_multisampled_render_to_texture # define GL_EXT_multisampled_render_to_texture 1 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT 0 x8D6C # define GL_RENDERBUFFER_SAMPLES_EXT 0 x8CAB # define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0 x8D56 # define GL_MAX_SAMPLES_EXT 0 x8D57 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)"
  },
  {
    "label": "glRenderbufferStorageMultisampleEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glFramebufferTexture2DMultisampleEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_multisampled_render_to_texture2 # define GL_EXT_multisampled_render_to_texture2 1 # endif # ifndef GL_EXT_multiview_draw_buffers # define GL_EXT_multiview_draw_buffers 1 # define GL_COLOR_ATTACHMENT_EXT 0 x90F0 # define GL_MULTIVIEW_EXT 0 x90F1 # define GL_DRAW_BUFFER_EXT 0 x0C01 # define GL_READ_BUFFER_EXT 0 x0C02 # define GL_MAX_MULTIVIEW_BUFFERS_EXT 0 x90F2 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLREADBUFFERINDEXEDEXTPROC) (GLenum src, GLint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWBUFFERSINDEXEDEXTPROC) (GLint n, const GLenum *location, const GLint *indices)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETINTEGERI_VEXTPROC) (GLenum target, GLuint index, GLint *data)"
  },
  {
    "label": "glReadBufferIndexedEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glReadBufferIndexedEXT(GLenum src, GLint index)"
  },
  {
    "label": "glDrawBuffersIndexedEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawBuffersIndexedEXT(GLint n, const GLenum *location, const GLint *indices)"
  },
  {
    "label": "glGetIntegeri_vEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetIntegeri_vEXT(GLenum target, GLuint index, GLint *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_multiview_tessellation_geometry_shader # define GL_EXT_multiview_tessellation_geometry_shader 1 # endif # ifndef GL_EXT_multiview_texture_multisample # define GL_EXT_multiview_texture_multisample 1 # endif # ifndef GL_EXT_multiview_timer_query # define GL_EXT_multiview_timer_query 1 # endif # ifndef GL_EXT_occlusion_query_boolean # define GL_EXT_occlusion_query_boolean 1 # define GL_ANY_SAMPLES_PASSED_EXT 0 x8C2F # define GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT 0 x8D6A # endif # ifndef GL_EXT_polygon_offset_clamp # define GL_EXT_polygon_offset_clamp 1 # define GL_POLYGON_OFFSET_CLAMP_EXT 0 x8E1B typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPOLYGONOFFSETCLAMPEXTPROC) (GLfloat factor, GLfloat units, GLfloat clamp)"
  },
  {
    "label": "glPolygonOffsetClampEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_post_depth_coverage # define GL_EXT_post_depth_coverage 1 # endif # ifndef GL_EXT_primitive_bounding_box # define GL_EXT_primitive_bounding_box 1 # define GL_PRIMITIVE_BOUNDING_BOX_EXT 0 x92BE typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPRIMITIVEBOUNDINGBOXEXTPROC) (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)"
  },
  {
    "label": "glPrimitiveBoundingBoxEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glPrimitiveBoundingBoxEXT(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_protected_textures # define GL_EXT_protected_textures 1 # define GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT 0 x00000010 # define GL_TEXTURE_PROTECTED_EXT 0 x8BFA # endif # ifndef GL_EXT_pvrtc_sRGB # define GL_EXT_pvrtc_sRGB 1 # define GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT 0 x8A54 # define GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT 0 x8A55 # define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT 0 x8A56 # define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT 0 x8A57 # define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG 0 x93F0 # define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG 0 x93F1 # endif # ifndef GL_EXT_raster_multisample # define GL_EXT_raster_multisample 1 # define GL_RASTER_MULTISAMPLE_EXT 0 x9327 # define GL_RASTER_SAMPLES_EXT 0 x9328 # define GL_MAX_RASTER_SAMPLES_EXT 0 x9329 # define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT 0 x932A # define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0 x932B # define GL_EFFECTIVE_RASTER_SAMPLES_EXT 0 x932C typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLRASTERSAMPLESEXTPROC) (GLuint samples, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glRasterSamplesEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_read_format_bgra # define GL_EXT_read_format_bgra 1 # define GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT 0 x8365 # define GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT 0 x8366 # endif # ifndef GL_EXT_render_snorm # define GL_EXT_render_snorm 1 # define GL_R8_SNORM 0 x8F94 # define GL_RG8_SNORM 0 x8F95 # define GL_RGBA8_SNORM 0 x8F97 # define GL_R16_SNORM_EXT 0 x8F98 # define GL_RG16_SNORM_EXT 0 x8F99 # define GL_RGBA16_SNORM_EXT 0 x8F9B # endif # ifndef GL_EXT_robustness # define GL_EXT_robustness 1 # define GL_GUILTY_CONTEXT_RESET_EXT 0 x8253 # define GL_INNOCENT_CONTEXT_RESET_EXT 0 x8254 # define GL_UNKNOWN_CONTEXT_RESET_EXT 0 x8255 # define GL_CONTEXT_ROBUST_ACCESS_EXT 0 x90F3 # define GL_RESET_NOTIFICATION_STRATEGY_EXT 0 x8256 # define GL_LOSE_CONTEXT_ON_RESET_EXT 0 x8252 # define GL_NO_RESET_NOTIFICATION_EXT 0 x8261 typedef)",
    "insertText": "GLenum(GL_APIENTRYP PFNGLGETGRAPHICSRESETSTATUSEXTPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLREADNPIXELSEXTPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETNUNIFORMFVEXTPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETNUNIFORMIVEXTPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "glGetGraphicsResetStatusEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL GLenum GL_APIENTRY)",
    "insertText": "glGetGraphicsResetStatusEXT(void)"
  },
  {
    "label": "glReadnPixelsEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)"
  },
  {
    "label": "glGetnUniformfvEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)"
  },
  {
    "label": "glGetnUniformivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_sRGB # define GL_EXT_sRGB 1 # define GL_SRGB_EXT 0 x8C40 # define GL_SRGB_ALPHA_EXT 0 x8C42 # define GL_SRGB8_ALPHA8_EXT 0 x8C43 # define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT 0 x8210 # endif # ifndef GL_EXT_sRGB_write_control # define GL_EXT_sRGB_write_control 1 # define GL_FRAMEBUFFER_SRGB_EXT 0 x8DB9 # endif # ifndef GL_EXT_semaphore # define GL_EXT_semaphore 1 # define GL_LAYOUT_GENERAL_EXT 0 x958D # define GL_LAYOUT_COLOR_ATTACHMENT_EXT 0 x958E # define GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT 0 x958F # define GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT 0 x9590 # define GL_LAYOUT_SHADER_READ_ONLY_EXT 0 x9591 # define GL_LAYOUT_TRANSFER_SRC_EXT 0 x9592 # define GL_LAYOUT_TRANSFER_DST_EXT 0 x9593 # define GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT 0 x9530 # define GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT 0 x9531 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGENSEMAPHORESEXTPROC) (GLsizei n, GLuint *semaphores)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDELETESEMAPHORESEXTPROC) (GLsizei n, const GLuint *semaphores)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISSEMAPHOREEXTPROC) (GLuint semaphore)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSEMAPHOREPARAMETERUI64VEXTPROC) (GLuint semaphore, GLenum pname, const GLuint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC) (GLuint semaphore, GLenum pname, GLuint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLWAITSEMAPHOREEXTPROC) (GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSIGNALSEMAPHOREEXTPROC) (GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts)"
  },
  {
    "label": "glGenSemaphoresEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glGenSemaphoresEXT(GLsizei n, GLuint *semaphores)"
  },
  {
    "label": "glDeleteSemaphoresEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDeleteSemaphoresEXT(GLsizei n, const GLuint *semaphores)"
  },
  {
    "label": "glIsSemaphoreEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsSemaphoreEXT(GLuint semaphore)"
  },
  {
    "label": "glSemaphoreParameterui64vEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 *params)"
  },
  {
    "label": "glGetSemaphoreParameterui64vEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 *params)"
  },
  {
    "label": "glWaitSemaphoreEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts)"
  },
  {
    "label": "glSignalSemaphoreEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_semaphore_fd # define GL_EXT_semaphore_fd 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLIMPORTSEMAPHOREFDEXTPROC) (GLuint semaphore, GLenum handleType, GLint fd)"
  },
  {
    "label": "glImportSemaphoreFdEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_semaphore_win32 # define GL_EXT_semaphore_win32 1 # define GL_HANDLE_TYPE_D3D12_FENCE_EXT 0 x9594 # define GL_D3D12_FENCE_VALUE_EXT 0 x9595 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC) (GLuint semaphore, GLenum handleType, void *handle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC) (GLuint semaphore, GLenum handleType, const void *name)"
  },
  {
    "label": "glImportSemaphoreWin32HandleEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void *handle)"
  },
  {
    "label": "glImportSemaphoreWin32NameEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const void *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_separate_depth_stencil # define GL_EXT_separate_depth_stencil 1 # endif # ifndef GL_EXT_separate_shader_objects # define GL_EXT_separate_shader_objects 1 # define GL_ACTIVE_PROGRAM_EXT 0 x8259 # define GL_VERTEX_SHADER_BIT_EXT 0 x00000001 # define GL_FRAGMENT_SHADER_BIT_EXT 0 x00000002 # define GL_ALL_SHADER_BITS_EXT 0 xFFFFFFFF # define GL_PROGRAM_SEPARABLE_EXT 0 x8258 # define GL_PROGRAM_PIPELINE_BINDING_EXT 0 x825A typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLACTIVESHADERPROGRAMEXTPROC) (GLuint pipeline, GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBINDPROGRAMPIPELINEEXTPROC) (GLuint pipeline)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(GL_APIENTRYP PFNGLCREATESHADERPROGRAMVEXTPROC) (GLenum type, GLsizei count, const GLchar **strings)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDELETEPROGRAMPIPELINESEXTPROC) (GLsizei n, const GLuint *pipelines)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGENPROGRAMPIPELINESEXTPROC) (GLsizei n, GLuint *pipelines)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPROGRAMPIPELINEIVEXTPROC) (GLuint pipeline, GLenum pname, GLint *params)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISPROGRAMPIPELINEEXTPROC) (GLuint pipeline)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint program, GLint location, GLfloat v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM1FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint program, GLint location, GLint v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM1IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM2FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM2IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM3FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM3FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM3IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM3IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM4FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM4FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM4IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM4IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUSEPROGRAMSTAGESEXTPROC) (GLuint pipeline, GLbitfield stages, GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEEXTPROC) (GLuint pipeline)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM1UIEXTPROC) (GLuint program, GLint location, GLuint v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM2UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM3UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM4UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM1UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM2UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM3UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM4UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glActiveShaderProgramEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glActiveShaderProgramEXT(GLuint pipeline, GLuint program)"
  },
  {
    "label": "glBindProgramPipelineEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBindProgramPipelineEXT(GLuint pipeline)"
  },
  {
    "label": "glCreateShaderProgramvEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLuint GL_APIENTRY)",
    "insertText": "glCreateShaderProgramvEXT(GLenum type, GLsizei count, const GLchar **strings)"
  },
  {
    "label": "glDeleteProgramPipelinesEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDeleteProgramPipelinesEXT(GLsizei n, const GLuint *pipelines)"
  },
  {
    "label": "glGenProgramPipelinesEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGenProgramPipelinesEXT(GLsizei n, GLuint *pipelines)"
  },
  {
    "label": "glGetProgramPipelineInfoLogEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetProgramPipelineInfoLogEXT(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glGetProgramPipelineivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetProgramPipelineivEXT(GLuint pipeline, GLenum pname, GLint *params)"
  },
  {
    "label": "glIsProgramPipelineEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsProgramPipelineEXT(GLuint pipeline)"
  },
  {
    "label": "glProgramParameteriEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)"
  },
  {
    "label": "glProgramUniform1fEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)"
  },
  {
    "label": "glProgramUniform1fvEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform1iEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform1iEXT(GLuint program, GLint location, GLint v0)"
  },
  {
    "label": "glProgramUniform1ivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform2fEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "glProgramUniform2fvEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform2iEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "glProgramUniform2ivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform3fEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "glProgramUniform3fvEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform3iEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "glProgramUniform3ivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform4fEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "glProgramUniform4fvEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform4iEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "glProgramUniform4ivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniformMatrix2fvEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3fvEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4fvEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUseProgramStagesEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUseProgramStagesEXT(GLuint pipeline, GLbitfield stages, GLuint program)"
  },
  {
    "label": "glValidateProgramPipelineEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glValidateProgramPipelineEXT(GLuint pipeline)"
  },
  {
    "label": "glProgramUniform1uiEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)"
  },
  {
    "label": "glProgramUniform2uiEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "glProgramUniform3uiEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "glProgramUniform4uiEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "glProgramUniform1uivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform2uivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform3uivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform4uivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniformMatrix2x3fvEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3x2fvEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2x4fvEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4x2fvEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3x4fvEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4x3fvEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_shader_framebuffer_fetch # define GL_EXT_shader_framebuffer_fetch 1 # define GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT 0 x8A52 # endif # ifndef GL_EXT_shader_framebuffer_fetch_non_coherent # define GL_EXT_shader_framebuffer_fetch_non_coherent 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC) (void)"
  },
  {
    "label": "glFramebufferFetchBarrierEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferFetchBarrierEXT(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_shader_group_vote # define GL_EXT_shader_group_vote 1 # endif # ifndef GL_EXT_shader_implicit_conversions # define GL_EXT_shader_implicit_conversions 1 # endif # ifndef GL_EXT_shader_integer_mix # define GL_EXT_shader_integer_mix 1 # endif # ifndef GL_EXT_shader_io_blocks # define GL_EXT_shader_io_blocks 1 # endif # ifndef GL_EXT_shader_non_constant_global_initializers # define GL_EXT_shader_non_constant_global_initializers 1 # endif # ifndef GL_EXT_shader_pixel_local_storage # define GL_EXT_shader_pixel_local_storage 1 # define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT 0 x8F63 # define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT 0 x8F67 # define GL_SHADER_PIXEL_LOCAL_STORAGE_EXT 0 x8F64 # endif # ifndef GL_EXT_shader_pixel_local_storage2 # define GL_EXT_shader_pixel_local_storage2 1 # define GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT 0 x9650 # define GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT 0 x9651 # define GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT 0 x9652 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC) (GLuint target, GLsizei size)"
  },
  {
    "label": "GLsizei()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLsizei(GL_APIENTRYP PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC) (GLuint target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC) (GLsizei offset, GLsizei n, const GLuint *values)"
  },
  {
    "label": "glFramebufferPixelLocalStorageSizeEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferPixelLocalStorageSizeEXT(GLuint target, GLsizei size)"
  },
  {
    "label": "glGetFramebufferPixelLocalStorageSizeEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLsizei GL_APIENTRY)",
    "insertText": "glGetFramebufferPixelLocalStorageSizeEXT(GLuint target)"
  },
  {
    "label": "glClearPixelLocalStorageuiEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glClearPixelLocalStorageuiEXT(GLsizei offset, GLsizei n, const GLuint *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_shader_samples_identical # define GL_EXT_shader_samples_identical 1 # endif # ifndef GL_EXT_shader_texture_lod # define GL_EXT_shader_texture_lod 1 # endif # ifndef GL_EXT_shadow_samplers # define GL_EXT_shadow_samplers 1 # define GL_TEXTURE_COMPARE_MODE_EXT 0 x884C # define GL_TEXTURE_COMPARE_FUNC_EXT 0 x884D # define GL_COMPARE_REF_TO_TEXTURE_EXT 0 x884E # define GL_SAMPLER_2D_SHADOW_EXT 0 x8B62 # endif # ifndef GL_EXT_sparse_texture # define GL_EXT_sparse_texture 1 # define GL_TEXTURE_SPARSE_EXT 0 x91A6 # define GL_VIRTUAL_PAGE_SIZE_INDEX_EXT 0 x91A7 # define GL_NUM_SPARSE_LEVELS_EXT 0 x91AA # define GL_NUM_VIRTUAL_PAGE_SIZES_EXT 0 x91A8 # define GL_VIRTUAL_PAGE_SIZE_X_EXT 0 x9195 # define GL_VIRTUAL_PAGE_SIZE_Y_EXT 0 x9196 # define GL_VIRTUAL_PAGE_SIZE_Z_EXT 0 x9197 # define GL_TEXTURE_2D_ARRAY 0 x8C1A # define GL_TEXTURE_3D 0 x806F # define GL_MAX_SPARSE_TEXTURE_SIZE_EXT 0 x9198 # define GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT 0 x9199 # define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT 0 x919A # define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT 0 x91A9 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXPAGECOMMITMENTEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)"
  },
  {
    "label": "glTexPageCommitmentEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexPageCommitmentEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_sparse_texture2 # define GL_EXT_sparse_texture2 1 # endif # ifndef GL_EXT_tessellation_point_size # define GL_EXT_tessellation_point_size 1 # endif # ifndef GL_EXT_tessellation_shader # define GL_EXT_tessellation_shader 1 # define GL_PATCHES_EXT 0 x000E # define GL_PATCH_VERTICES_EXT 0 x8E72 # define GL_TESS_CONTROL_OUTPUT_VERTICES_EXT 0 x8E75 # define GL_TESS_GEN_MODE_EXT 0 x8E76 # define GL_TESS_GEN_SPACING_EXT 0 x8E77 # define GL_TESS_GEN_VERTEX_ORDER_EXT 0 x8E78 # define GL_TESS_GEN_POINT_MODE_EXT 0 x8E79 # define GL_ISOLINES_EXT 0 x8E7A # define GL_QUADS_EXT 0 x0007 # define GL_FRACTIONAL_ODD_EXT 0 x8E7B # define GL_FRACTIONAL_EVEN_EXT 0 x8E7C # define GL_MAX_PATCH_VERTICES_EXT 0 x8E7D # define GL_MAX_TESS_GEN_LEVEL_EXT 0 x8E7E # define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0 x8E7F # define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0 x8E80 # define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT 0 x8E81 # define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT 0 x8E82 # define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT 0 x8E83 # define GL_MAX_TESS_PATCH_COMPONENTS_EXT 0 x8E84 # define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT 0 x8E85 # define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT 0 x8E86 # define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT 0 x8E89 # define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT 0 x8E8A # define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT 0 x886C # define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT 0 x886D # define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0 x8E1E # define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0 x8E1F # define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT 0 x92CD # define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT 0 x92CE # define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT 0 x92D3 # define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT 0 x92D4 # define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT 0 x90CB # define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT 0 x90CC # define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT 0 x90D8 # define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT 0 x90D9 # define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0 x8221 # define GL_IS_PER_PATCH_EXT 0 x92E7 # define GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT 0 x9307 # define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT 0 x9308 # define GL_TESS_CONTROL_SHADER_EXT 0 x8E88 # define GL_TESS_EVALUATION_SHADER_EXT 0 x8E87 # define GL_TESS_CONTROL_SHADER_BIT_EXT 0 x00000008 # define GL_TESS_EVALUATION_SHADER_BIT_EXT 0 x00000010 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATCHPARAMETERIEXTPROC) (GLenum pname, GLint value)"
  },
  {
    "label": "glPatchParameteriEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glPatchParameteriEXT(GLenum pname, GLint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_texture_border_clamp # define GL_EXT_texture_border_clamp 1 # define GL_TEXTURE_BORDER_COLOR_EXT 0 x1004 # define GL_CLAMP_TO_BORDER_EXT 0 x812D typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSAMPLERPARAMETERIIVEXTPROC) (GLuint sampler, GLenum pname, const GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSAMPLERPARAMETERIUIVEXTPROC) (GLuint sampler, GLenum pname, const GLuint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETSAMPLERPARAMETERIIVEXTPROC) (GLuint sampler, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVEXTPROC) (GLuint sampler, GLenum pname, GLuint *params)"
  },
  {
    "label": "glTexParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTexParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "glGetTexParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTexParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "glSamplerParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glSamplerParameterIivEXT(GLuint sampler, GLenum pname, const GLint *param)"
  },
  {
    "label": "glSamplerParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glSamplerParameterIuivEXT(GLuint sampler, GLenum pname, const GLuint *param)"
  },
  {
    "label": "glGetSamplerParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetSamplerParameterIivEXT(GLuint sampler, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetSamplerParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetSamplerParameterIuivEXT(GLuint sampler, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_texture_buffer # define GL_EXT_texture_buffer 1 # define GL_TEXTURE_BUFFER_EXT 0 x8C2A # define GL_TEXTURE_BUFFER_BINDING_EXT 0 x8C2A # define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0 x8C2B # define GL_TEXTURE_BINDING_BUFFER_EXT 0 x8C2C # define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0 x8C2D # define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT 0 x919F # define GL_SAMPLER_BUFFER_EXT 0 x8DC2 # define GL_INT_SAMPLER_BUFFER_EXT 0 x8DD0 # define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0 x8DD8 # define GL_IMAGE_BUFFER_EXT 0 x9051 # define GL_INT_IMAGE_BUFFER_EXT 0 x905C # define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT 0 x9067 # define GL_TEXTURE_BUFFER_OFFSET_EXT 0 x919D # define GL_TEXTURE_BUFFER_SIZE_EXT 0 x919E typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXBUFFEREXTPROC) (GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXBUFFERRANGEEXTPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glTexBufferEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glTexBufferRangeEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexBufferRangeEXT(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_texture_compression_astc_decode_mode # define GL_EXT_texture_compression_astc_decode_mode 1 # define GL_TEXTURE_ASTC_DECODE_PRECISION_EXT 0 x8F69 # endif # ifndef GL_EXT_texture_compression_bptc # define GL_EXT_texture_compression_bptc 1 # define GL_COMPRESSED_RGBA_BPTC_UNORM_EXT 0 x8E8C # define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT 0 x8E8D # define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT 0 x8E8E # define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT 0 x8E8F # endif # ifndef GL_EXT_texture_compression_dxt1 # define GL_EXT_texture_compression_dxt1 1 # define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0 x83F0 # define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0 x83F1 # endif # ifndef GL_EXT_texture_compression_rgtc # define GL_EXT_texture_compression_rgtc 1 # define GL_COMPRESSED_RED_RGTC1_EXT 0 x8DBB # define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0 x8DBC # define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0 x8DBD # define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0 x8DBE # endif # ifndef GL_EXT_texture_compression_s3tc # define GL_EXT_texture_compression_s3tc 1 # define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0 x83F2 # define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0 x83F3 # endif # ifndef GL_EXT_texture_compression_s3tc_srgb # define GL_EXT_texture_compression_s3tc_srgb 1 # define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0 x8C4C # define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0 x8C4D # define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0 x8C4E # define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0 x8C4F # endif # ifndef GL_EXT_texture_cube_map_array # define GL_EXT_texture_cube_map_array 1 # define GL_TEXTURE_CUBE_MAP_ARRAY_EXT 0 x9009 # define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT 0 x900A # define GL_SAMPLER_CUBE_MAP_ARRAY_EXT 0 x900C # define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT 0 x900D # define GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT 0 x900E # define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT 0 x900F # define GL_IMAGE_CUBE_MAP_ARRAY_EXT 0 x9054 # define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0 x905F # define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0 x906A # endif # ifndef GL_EXT_texture_filter_anisotropic # define GL_EXT_texture_filter_anisotropic 1 # define GL_TEXTURE_MAX_ANISOTROPY_EXT 0 x84FE # define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0 x84FF # endif # ifndef GL_EXT_texture_filter_minmax # define GL_EXT_texture_filter_minmax 1 # define GL_TEXTURE_REDUCTION_MODE_EXT 0 x9366 # define GL_WEIGHTED_AVERAGE_EXT 0 x9367 # endif # ifndef GL_EXT_texture_format_BGRA8888 # define GL_EXT_texture_format_BGRA8888 1 # endif # ifndef GL_EXT_texture_format_sRGB_override # define GL_EXT_texture_format_sRGB_override 1 # define GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT 0 x8FBF # endif # ifndef GL_EXT_texture_mirror_clamp_to_edge # define GL_EXT_texture_mirror_clamp_to_edge 1 # define GL_MIRROR_CLAMP_TO_EDGE_EXT 0 x8743 # endif # ifndef GL_EXT_texture_norm16 # define GL_EXT_texture_norm16 1 # define GL_R16_EXT 0 x822A # define GL_RG16_EXT 0 x822C # define GL_RGBA16_EXT 0 x805B # define GL_RGB16_EXT 0 x8054 # define GL_RGB16_SNORM_EXT 0 x8F9A # endif # ifndef GL_EXT_texture_query_lod # define GL_EXT_texture_query_lod 1 # endif # ifndef GL_EXT_texture_rg # define GL_EXT_texture_rg 1 # define GL_RED_EXT 0 x1903 # define GL_RG_EXT 0 x8227 # define GL_R8_EXT 0 x8229 # define GL_RG8_EXT 0 x822B # endif # ifndef GL_EXT_texture_sRGB_R8 # define GL_EXT_texture_sRGB_R8 1 # define GL_SR8_EXT 0 x8FBD # endif # ifndef GL_EXT_texture_sRGB_RG8 # define GL_EXT_texture_sRGB_RG8 1 # define GL_SRG8_EXT 0 x8FBE # endif # ifndef GL_EXT_texture_sRGB_decode # define GL_EXT_texture_sRGB_decode 1 # define GL_TEXTURE_SRGB_DECODE_EXT 0 x8A48 # define GL_DECODE_EXT 0 x8A49 # define GL_SKIP_DECODE_EXT 0 x8A4A # endif # ifndef GL_EXT_texture_shadow_lod # define GL_EXT_texture_shadow_lod 1 # endif # ifndef GL_EXT_texture_storage # define GL_EXT_texture_storage 1 # define GL_TEXTURE_IMMUTABLE_FORMAT_EXT 0 x912F # define GL_ALPHA8_EXT 0 x803C # define GL_LUMINANCE8_EXT 0 x8040 # define GL_LUMINANCE8_ALPHA8_EXT 0 x8045 # define GL_RGBA32F_EXT 0 x8814 # define GL_RGB32F_EXT 0 x8815 # define GL_ALPHA32F_EXT 0 x8816 # define GL_LUMINANCE32F_EXT 0 x8818 # define GL_LUMINANCE_ALPHA32F_EXT 0 x8819 # define GL_ALPHA16F_EXT 0 x881C # define GL_LUMINANCE16F_EXT 0 x881E # define GL_LUMINANCE_ALPHA16F_EXT 0 x881F # define GL_R32F_EXT 0 x822E # define GL_RG32F_EXT 0 x8230 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXSTORAGE1DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXSTORAGE2DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXSTORAGE3DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXTURESTORAGE1DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXTURESTORAGE2DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXTURESTORAGE3DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glTexStorage1DEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "glTexStorage2DEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTexStorage3DEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glTextureStorage1DEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "glTextureStorage2DEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTextureStorage3DEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_texture_storage_compression # define GL_EXT_texture_storage_compression 1 # define GL_NUM_SURFACE_COMPRESSION_FIXED_RATES_EXT 0 x8F6E # define GL_SURFACE_COMPRESSION_FIXED_RATE_1BPC_EXT 0 x96C4 # define GL_SURFACE_COMPRESSION_FIXED_RATE_2BPC_EXT 0 x96C5 # define GL_SURFACE_COMPRESSION_FIXED_RATE_3BPC_EXT 0 x96C6 # define GL_SURFACE_COMPRESSION_FIXED_RATE_4BPC_EXT 0 x96C7 # define GL_SURFACE_COMPRESSION_FIXED_RATE_5BPC_EXT 0 x96C8 # define GL_SURFACE_COMPRESSION_FIXED_RATE_6BPC_EXT 0 x96C9 # define GL_SURFACE_COMPRESSION_FIXED_RATE_7BPC_EXT 0 x96CA # define GL_SURFACE_COMPRESSION_FIXED_RATE_8BPC_EXT 0 x96CB # define GL_SURFACE_COMPRESSION_FIXED_RATE_9BPC_EXT 0 x96CC # define GL_SURFACE_COMPRESSION_FIXED_RATE_10BPC_EXT 0 x96CD # define GL_SURFACE_COMPRESSION_FIXED_RATE_11BPC_EXT 0 x96CE # define GL_SURFACE_COMPRESSION_FIXED_RATE_12BPC_EXT 0 x96CF typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXSTORAGEATTRIBS2DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const GLint* attrib_list)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXSTORAGEATTRIBS3DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const GLint* attrib_list)"
  },
  {
    "label": "glTexStorageAttribs2DEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexStorageAttribs2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const GLint* attrib_list)"
  },
  {
    "label": "glTexStorageAttribs3DEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexStorageAttribs3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const GLint* attrib_list)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_texture_type_2_10_10_10_REV # define GL_EXT_texture_type_2_10_10_10_REV 1 # define GL_UNSIGNED_INT_2_10_10_10_REV_EXT 0 x8368 # endif # ifndef GL_EXT_texture_view # define GL_EXT_texture_view 1 # define GL_TEXTURE_VIEW_MIN_LEVEL_EXT 0 x82DB # define GL_TEXTURE_VIEW_NUM_LEVELS_EXT 0 x82DC # define GL_TEXTURE_VIEW_MIN_LAYER_EXT 0 x82DD # define GL_TEXTURE_VIEW_NUM_LAYERS_EXT 0 x82DE typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXTUREVIEWEXTPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)"
  },
  {
    "label": "glTextureViewEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glTextureViewEXT(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_unpack_subimage # define GL_EXT_unpack_subimage 1 # define GL_UNPACK_ROW_LENGTH_EXT 0 x0CF2 # define GL_UNPACK_SKIP_ROWS_EXT 0 x0CF3 # define GL_UNPACK_SKIP_PIXELS_EXT 0 x0CF4 # endif # ifndef GL_EXT_win32_keyed_mutex # define GL_EXT_win32_keyed_mutex 1 typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC) (GLuint memory, GLuint64 key, GLuint timeout)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC) (GLuint memory, GLuint64 key)"
  },
  {
    "label": "glAcquireKeyedMutexWin32EXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glAcquireKeyedMutexWin32EXT(GLuint memory, GLuint64 key, GLuint timeout)"
  },
  {
    "label": "glReleaseKeyedMutexWin32EXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glReleaseKeyedMutexWin32EXT(GLuint memory, GLuint64 key)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_window_rectangles # define GL_EXT_window_rectangles 1 # define GL_INCLUSIVE_EXT 0 x8F10 # define GL_EXCLUSIVE_EXT 0 x8F11 # define GL_WINDOW_RECTANGLE_EXT 0 x8F12 # define GL_WINDOW_RECTANGLE_MODE_EXT 0 x8F13 # define GL_MAX_WINDOW_RECTANGLES_EXT 0 x8F14 # define GL_NUM_WINDOW_RECTANGLES_EXT 0 x8F15 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLWINDOWRECTANGLESEXTPROC) (GLenum mode, GLsizei count, const GLint *box)"
  },
  {
    "label": "glWindowRectanglesEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint *box)"
  },
  {
    "label": "GLuint64()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_FJ_shader_binary_GCCSO # define GL_FJ_shader_binary_GCCSO 1 # define GL_GCCSO_SHADER_BINARY_FJ 0 x9260 # endif # ifndef GL_IMG_bindless_texture # define GL_IMG_bindless_texture 1 typedef)",
    "insertText": "GLuint64(GL_APIENTRYP PFNGLGETTEXTUREHANDLEIMGPROC) (GLuint texture)"
  },
  {
    "label": "GLuint64()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint64(GL_APIENTRYP PFNGLGETTEXTURESAMPLERHANDLEIMGPROC) (GLuint texture, GLuint sampler)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORMHANDLEUI64IMGPROC) (GLint location, GLuint64 value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORMHANDLEUI64VIMGPROC) (GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64IMGPROC) (GLuint program, GLint location, GLuint64 value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VIMGPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values)"
  },
  {
    "label": "glGetTextureHandleIMG()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL GLuint64 GL_APIENTRY)",
    "insertText": "glGetTextureHandleIMG(GLuint texture)"
  },
  {
    "label": "glGetTextureSamplerHandleIMG()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLuint64 GL_APIENTRY)",
    "insertText": "glGetTextureSamplerHandleIMG(GLuint texture, GLuint sampler)"
  },
  {
    "label": "glUniformHandleui64IMG()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniformHandleui64IMG(GLint location, GLuint64 value)"
  },
  {
    "label": "glUniformHandleui64vIMG()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniformHandleui64vIMG(GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glProgramUniformHandleui64IMG()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniformHandleui64IMG(GLuint program, GLint location, GLuint64 value)"
  },
  {
    "label": "glProgramUniformHandleui64vIMG()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniformHandleui64vIMG(GLuint program, GLint location, GLsizei count, const GLuint64 *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_IMG_framebuffer_downsample # define GL_IMG_framebuffer_downsample 1 # define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG 0 x913C # define GL_NUM_DOWNSAMPLE_SCALES_IMG 0 x913D # define GL_DOWNSAMPLE_SCALES_IMG 0 x913E # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG 0 x913F typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DDOWNSAMPLEIMGPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERDOWNSAMPLEIMGPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale)"
  },
  {
    "label": "glFramebufferTexture2DDownsampleIMG()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferTexture2DDownsampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale)"
  },
  {
    "label": "glFramebufferTextureLayerDownsampleIMG()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferTextureLayerDownsampleIMG(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_IMG_multisampled_render_to_texture # define GL_IMG_multisampled_render_to_texture 1 # define GL_RENDERBUFFER_SAMPLES_IMG 0 x9133 # define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG 0 x9134 # define GL_MAX_SAMPLES_IMG 0 x9135 # define GL_TEXTURE_SAMPLES_IMG 0 x9136 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)"
  },
  {
    "label": "glRenderbufferStorageMultisampleIMG()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glFramebufferTexture2DMultisampleIMG()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_IMG_program_binary # define GL_IMG_program_binary 1 # define GL_SGX_PROGRAM_BINARY_IMG 0 x9130 # endif # ifndef GL_IMG_read_format # define GL_IMG_read_format 1 # define GL_BGRA_IMG 0 x80E1 # define GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG 0 x8365 # endif # ifndef GL_IMG_shader_binary # define GL_IMG_shader_binary 1 # define GL_SGX_BINARY_IMG 0 x8C0A # endif # ifndef GL_IMG_texture_compression_pvrtc # define GL_IMG_texture_compression_pvrtc 1 # define GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG 0 x8C00 # define GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG 0 x8C01 # define GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG 0 x8C02 # define GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG 0 x8C03 # endif # ifndef GL_IMG_texture_compression_pvrtc2 # define GL_IMG_texture_compression_pvrtc2 1 # define GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG 0 x9137 # define GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG 0 x9138 # endif # ifndef GL_IMG_texture_filter_cubic # define GL_IMG_texture_filter_cubic 1 # define GL_CUBIC_IMG 0 x9139 # define GL_CUBIC_MIPMAP_NEAREST_IMG 0 x913A # define GL_CUBIC_MIPMAP_LINEAR_IMG 0 x913B # endif # ifndef GL_INTEL_blackhole_render # define GL_INTEL_blackhole_render 1 # define GL_BLACKHOLE_RENDER_INTEL 0 x83FC # endif # ifndef GL_INTEL_conservative_rasterization # define GL_INTEL_conservative_rasterization 1 # define GL_CONSERVATIVE_RASTERIZATION_INTEL 0 x83FE # endif # ifndef GL_INTEL_framebuffer_CMAA # define GL_INTEL_framebuffer_CMAA 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC) (void)"
  },
  {
    "label": "glApplyFramebufferAttachmentCMAAINTEL()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glApplyFramebufferAttachmentCMAAINTEL(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_INTEL_performance_query # define GL_INTEL_performance_query 1 # define GL_PERFQUERY_SINGLE_CONTEXT_INTEL 0 x00000000 # define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL 0 x00000001 # define GL_PERFQUERY_WAIT_INTEL 0 x83FB # define GL_PERFQUERY_FLUSH_INTEL 0 x83FA # define GL_PERFQUERY_DONOT_FLUSH_INTEL 0 x83F9 # define GL_PERFQUERY_COUNTER_EVENT_INTEL 0 x94F0 # define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL 0 x94F1 # define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL 0 x94F2 # define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL 0 x94F3 # define GL_PERFQUERY_COUNTER_RAW_INTEL 0 x94F4 # define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL 0 x94F5 # define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL 0 x94F8 # define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL 0 x94F9 # define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL 0 x94FA # define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL 0 x94FB # define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL 0 x94FC # define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL 0 x94FD # define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0 x94FE # define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0 x94FF # define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL 0 x9500 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBEGINPERFQUERYINTELPROC) (GLuint queryHandle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCREATEPERFQUERYINTELPROC) (GLuint queryId, GLuint *queryHandle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDELETEPERFQUERYINTELPROC) (GLuint queryHandle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLENDPERFQUERYINTELPROC) (GLuint queryHandle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETFIRSTPERFQUERYIDINTELPROC) (GLuint *queryId)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETNEXTPERFQUERYIDINTELPROC) (GLuint queryId, GLuint *nextQueryId)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPERFCOUNTERINFOINTELPROC) (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPERFQUERYDATAINTELPROC) (GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPERFQUERYIDBYNAMEINTELPROC) (GLchar *queryName, GLuint *queryId)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPERFQUERYINFOINTELPROC) (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask)"
  },
  {
    "label": "glBeginPerfQueryINTEL()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glBeginPerfQueryINTEL(GLuint queryHandle)"
  },
  {
    "label": "glCreatePerfQueryINTEL()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCreatePerfQueryINTEL(GLuint queryId, GLuint *queryHandle)"
  },
  {
    "label": "glDeletePerfQueryINTEL()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDeletePerfQueryINTEL(GLuint queryHandle)"
  },
  {
    "label": "glEndPerfQueryINTEL()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glEndPerfQueryINTEL(GLuint queryHandle)"
  },
  {
    "label": "glGetFirstPerfQueryIdINTEL()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetFirstPerfQueryIdINTEL(GLuint *queryId)"
  },
  {
    "label": "glGetNextPerfQueryIdINTEL()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint *nextQueryId)"
  },
  {
    "label": "glGetPerfCounterInfoINTEL()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue)"
  },
  {
    "label": "glGetPerfQueryDataINTEL()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten)"
  },
  {
    "label": "glGetPerfQueryIdByNameINTEL()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPerfQueryIdByNameINTEL(GLchar *queryName, GLuint *queryId)"
  },
  {
    "label": "glGetPerfQueryInfoINTEL()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_MESA_bgra # define GL_MESA_bgra 1 # define GL_BGR_EXT 0 x80E0 # endif # ifndef GL_MESA_framebuffer_flip_x # define GL_MESA_framebuffer_flip_x 1 # define GL_FRAMEBUFFER_FLIP_X_MESA 0 x8BBC # endif # ifndef GL_MESA_framebuffer_flip_y # define GL_MESA_framebuffer_flip_y 1 # define GL_FRAMEBUFFER_FLIP_Y_MESA 0 x8BBB typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERPARAMETERIMESAPROC) (GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glFramebufferParameteriMESA()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferParameteriMESA(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glGetFramebufferParameterivMESA()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetFramebufferParameterivMESA(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "GLuint64()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_MESA_framebuffer_swap_xy # define GL_MESA_framebuffer_swap_xy 1 # define GL_FRAMEBUFFER_SWAP_XY_MESA 0 x8BBD # endif # ifndef GL_MESA_program_binary_formats # define GL_MESA_program_binary_formats 1 # define GL_PROGRAM_BINARY_FORMAT_MESA 0 x875F # endif # ifndef GL_MESA_shader_integer_functions # define GL_MESA_shader_integer_functions 1 # endif # ifndef GL_NVX_blend_equation_advanced_multi_draw_buffers # define GL_NVX_blend_equation_advanced_multi_draw_buffers 1 # endif # ifndef GL_NV_bindless_texture # define GL_NV_bindless_texture 1 typedef)",
    "insertText": "GLuint64(GL_APIENTRYP PFNGLGETTEXTUREHANDLENVPROC) (GLuint texture)"
  },
  {
    "label": "GLuint64()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint64(GL_APIENTRYP PFNGLGETTEXTURESAMPLERHANDLENVPROC) (GLuint texture, GLuint sampler)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC) (GLuint64 handle)"
  },
  {
    "label": "GLuint64()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint64(GL_APIENTRYP PFNGLGETIMAGEHANDLENVPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle, GLenum access)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC) (GLuint64 handle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORMHANDLEUI64NVPROC) (GLint location, GLuint64 value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORMHANDLEUI64VNVPROC) (GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC) (GLuint program, GLint location, GLuint64 value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISTEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle)"
  },
  {
    "label": "glGetTextureHandleNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL GLuint64 GL_APIENTRY)",
    "insertText": "glGetTextureHandleNV(GLuint texture)"
  },
  {
    "label": "glGetTextureSamplerHandleNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLuint64 GL_APIENTRY)",
    "insertText": "glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler)"
  },
  {
    "label": "glMakeTextureHandleResidentNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMakeTextureHandleResidentNV(GLuint64 handle)"
  },
  {
    "label": "glMakeTextureHandleNonResidentNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMakeTextureHandleNonResidentNV(GLuint64 handle)"
  },
  {
    "label": "glGetImageHandleNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLuint64 GL_APIENTRY)",
    "insertText": "glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)"
  },
  {
    "label": "glMakeImageHandleResidentNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMakeImageHandleResidentNV(GLuint64 handle, GLenum access)"
  },
  {
    "label": "glMakeImageHandleNonResidentNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMakeImageHandleNonResidentNV(GLuint64 handle)"
  },
  {
    "label": "glUniformHandleui64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniformHandleui64NV(GLint location, GLuint64 value)"
  },
  {
    "label": "glUniformHandleui64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glProgramUniformHandleui64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value)"
  },
  {
    "label": "glProgramUniformHandleui64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values)"
  },
  {
    "label": "glIsTextureHandleResidentNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsTextureHandleResidentNV(GLuint64 handle)"
  },
  {
    "label": "glIsImageHandleResidentNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsImageHandleResidentNV(GLuint64 handle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_blend_equation_advanced # define GL_NV_blend_equation_advanced 1 # define GL_BLEND_OVERLAP_NV 0 x9281 # define GL_BLEND_PREMULTIPLIED_SRC_NV 0 x9280 # define GL_BLUE_NV 0 x1905 # define GL_COLORBURN_NV 0 x929A # define GL_COLORDODGE_NV 0 x9299 # define GL_CONJOINT_NV 0 x9284 # define GL_CONTRAST_NV 0 x92A1 # define GL_DARKEN_NV 0 x9297 # define GL_DIFFERENCE_NV 0 x929E # define GL_DISJOINT_NV 0 x9283 # define GL_DST_ATOP_NV 0 x928F # define GL_DST_IN_NV 0 x928B # define GL_DST_NV 0 x9287 # define GL_DST_OUT_NV 0 x928D # define GL_DST_OVER_NV 0 x9289 # define GL_EXCLUSION_NV 0 x92A0 # define GL_GREEN_NV 0 x1904 # define GL_HARDLIGHT_NV 0 x929B # define GL_HARDMIX_NV 0 x92A9 # define GL_HSL_COLOR_NV 0 x92AF # define GL_HSL_HUE_NV 0 x92AD # define GL_HSL_LUMINOSITY_NV 0 x92B0 # define GL_HSL_SATURATION_NV 0 x92AE # define GL_INVERT_OVG_NV 0 x92B4 # define GL_INVERT_RGB_NV 0 x92A3 # define GL_LIGHTEN_NV 0 x9298 # define GL_LINEARBURN_NV 0 x92A5 # define GL_LINEARDODGE_NV 0 x92A4 # define GL_LINEARLIGHT_NV 0 x92A7 # define GL_MINUS_CLAMPED_NV 0 x92B3 # define GL_MINUS_NV 0 x929F # define GL_MULTIPLY_NV 0 x9294 # define GL_OVERLAY_NV 0 x9296 # define GL_PINLIGHT_NV 0 x92A8 # define GL_PLUS_CLAMPED_ALPHA_NV 0 x92B2 # define GL_PLUS_CLAMPED_NV 0 x92B1 # define GL_PLUS_DARKER_NV 0 x9292 # define GL_PLUS_NV 0 x9291 # define GL_RED_NV 0 x1903 # define GL_SCREEN_NV 0 x9295 # define GL_SOFTLIGHT_NV 0 x929C # define GL_SRC_ATOP_NV 0 x928E # define GL_SRC_IN_NV 0 x928A # define GL_SRC_NV 0 x9286 # define GL_SRC_OUT_NV 0 x928C # define GL_SRC_OVER_NV 0 x9288 # define GL_UNCORRELATED_NV 0 x9282 # define GL_VIVIDLIGHT_NV 0 x92A6 # define GL_XOR_NV 0 x1506 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLENDPARAMETERINVPROC) (GLenum pname, GLint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLENDBARRIERNVPROC) (void)"
  },
  {
    "label": "glBlendParameteriNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlendParameteriNV(GLenum pname, GLint value)"
  },
  {
    "label": "glBlendBarrierNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlendBarrierNV(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_blend_equation_advanced_coherent # define GL_NV_blend_equation_advanced_coherent 1 # define GL_BLEND_ADVANCED_COHERENT_NV 0 x9285 # endif # ifndef GL_NV_blend_minmax_factor # define GL_NV_blend_minmax_factor 1 # define GL_FACTOR_MIN_AMD 0 x901C # define GL_FACTOR_MAX_AMD 0 x901D # endif # ifndef GL_NV_clip_space_w_scaling # define GL_NV_clip_space_w_scaling 1 # define GL_VIEWPORT_POSITION_W_SCALE_NV 0 x937C # define GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV 0 x937D # define GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV 0 x937E typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVIEWPORTPOSITIONWSCALENVPROC) (GLuint index, GLfloat xcoeff, GLfloat ycoeff)"
  },
  {
    "label": "glViewportPositionWScaleNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_compute_shader_derivatives # define GL_NV_compute_shader_derivatives 1 # endif # ifndef GL_NV_conditional_render # define GL_NV_conditional_render 1 # define GL_QUERY_WAIT_NV 0 x8E13 # define GL_QUERY_NO_WAIT_NV 0 x8E14 # define GL_QUERY_BY_REGION_WAIT_NV 0 x8E15 # define GL_QUERY_BY_REGION_NO_WAIT_NV 0 x8E16 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBEGINCONDITIONALRENDERNVPROC) (GLuint id, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLENDCONDITIONALRENDERNVPROC) (void)"
  },
  {
    "label": "glBeginConditionalRenderNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glBeginConditionalRenderNV(GLuint id, GLenum mode)"
  },
  {
    "label": "glEndConditionalRenderNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glEndConditionalRenderNV(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_conservative_raster # define GL_NV_conservative_raster 1 # define GL_CONSERVATIVE_RASTERIZATION_NV 0 x9346 # define GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV 0 x9347 # define GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV 0 x9348 # define GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV 0 x9349 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSUBPIXELPRECISIONBIASNVPROC) (GLuint xbits, GLuint ybits)"
  },
  {
    "label": "glSubpixelPrecisionBiasNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_conservative_raster_pre_snap # define GL_NV_conservative_raster_pre_snap 1 # define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV 0 x9550 # endif # ifndef GL_NV_conservative_raster_pre_snap_triangles # define GL_NV_conservative_raster_pre_snap_triangles 1 # define GL_CONSERVATIVE_RASTER_MODE_NV 0 x954D # define GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV 0 x954E # define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV 0 x954F typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCONSERVATIVERASTERPARAMETERINVPROC) (GLenum pname, GLint param)"
  },
  {
    "label": "glConservativeRasterParameteriNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glConservativeRasterParameteriNV(GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_copy_buffer # define GL_NV_copy_buffer 1 # define GL_COPY_READ_BUFFER_NV 0 x8F36 # define GL_COPY_WRITE_BUFFER_NV 0 x8F37 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOPYBUFFERSUBDATANVPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "glCopyBufferSubDataNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glCopyBufferSubDataNV(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_coverage_sample # define GL_NV_coverage_sample 1 # define GL_COVERAGE_COMPONENT_NV 0 x8ED0 # define GL_COVERAGE_COMPONENT4_NV 0 x8ED1 # define GL_COVERAGE_ATTACHMENT_NV 0 x8ED2 # define GL_COVERAGE_BUFFERS_NV 0 x8ED3 # define GL_COVERAGE_SAMPLES_NV 0 x8ED4 # define GL_COVERAGE_ALL_FRAGMENTS_NV 0 x8ED5 # define GL_COVERAGE_EDGE_FRAGMENTS_NV 0 x8ED6 # define GL_COVERAGE_AUTOMATIC_NV 0 x8ED7 # define GL_COVERAGE_BUFFER_BIT_NV 0 x00008000 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOVERAGEMASKNVPROC) (GLboolean mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOVERAGEOPERATIONNVPROC) (GLenum operation)"
  },
  {
    "label": "glCoverageMaskNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glCoverageMaskNV(GLboolean mask)"
  },
  {
    "label": "glCoverageOperationNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCoverageOperationNV(GLenum operation)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_depth_nonlinear # define GL_NV_depth_nonlinear 1 # define GL_DEPTH_COMPONENT16_NONLINEAR_NV 0 x8E2C # endif # ifndef GL_NV_draw_buffers # define GL_NV_draw_buffers 1 # define GL_MAX_DRAW_BUFFERS_NV 0 x8824 # define GL_DRAW_BUFFER0_NV 0 x8825 # define GL_DRAW_BUFFER1_NV 0 x8826 # define GL_DRAW_BUFFER2_NV 0 x8827 # define GL_DRAW_BUFFER3_NV 0 x8828 # define GL_DRAW_BUFFER4_NV 0 x8829 # define GL_DRAW_BUFFER5_NV 0 x882A # define GL_DRAW_BUFFER6_NV 0 x882B # define GL_DRAW_BUFFER7_NV 0 x882C # define GL_DRAW_BUFFER8_NV 0 x882D # define GL_DRAW_BUFFER9_NV 0 x882E # define GL_DRAW_BUFFER10_NV 0 x882F # define GL_DRAW_BUFFER11_NV 0 x8830 # define GL_DRAW_BUFFER12_NV 0 x8831 # define GL_DRAW_BUFFER13_NV 0 x8832 # define GL_DRAW_BUFFER14_NV 0 x8833 # define GL_DRAW_BUFFER15_NV 0 x8834 # define GL_COLOR_ATTACHMENT0_NV 0 x8CE0 # define GL_COLOR_ATTACHMENT1_NV 0 x8CE1 # define GL_COLOR_ATTACHMENT2_NV 0 x8CE2 # define GL_COLOR_ATTACHMENT3_NV 0 x8CE3 # define GL_COLOR_ATTACHMENT4_NV 0 x8CE4 # define GL_COLOR_ATTACHMENT5_NV 0 x8CE5 # define GL_COLOR_ATTACHMENT6_NV 0 x8CE6 # define GL_COLOR_ATTACHMENT7_NV 0 x8CE7 # define GL_COLOR_ATTACHMENT8_NV 0 x8CE8 # define GL_COLOR_ATTACHMENT9_NV 0 x8CE9 # define GL_COLOR_ATTACHMENT10_NV 0 x8CEA # define GL_COLOR_ATTACHMENT11_NV 0 x8CEB # define GL_COLOR_ATTACHMENT12_NV 0 x8CEC # define GL_COLOR_ATTACHMENT13_NV 0 x8CED # define GL_COLOR_ATTACHMENT14_NV 0 x8CEE # define GL_COLOR_ATTACHMENT15_NV 0 x8CEF typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWBUFFERSNVPROC) (GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "glDrawBuffersNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawBuffersNV(GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_draw_instanced # define GL_NV_draw_instanced 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWARRAYSINSTANCEDNVPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWELEMENTSINSTANCEDNVPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)"
  },
  {
    "label": "glDrawArraysInstancedNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawArraysInstancedNV(GLenum mode, GLint first, GLsizei count, GLsizei primcount)"
  },
  {
    "label": "glDrawElementsInstancedNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawElementsInstancedNV(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_draw_vulkan_image # define GL_NV_draw_vulkan_image 1 typedef)",
    "insertText": "void(GL_APIENTRY *GLVULKANPROCNV)(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWVKIMAGENVPROC) (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)"
  },
  {
    "label": "GLVULKANPROCNV()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLVULKANPROCNV(GL_APIENTRYP PFNGLGETVKPROCADDRNVPROC) (const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLWAITVKSEMAPHORENVPROC) (GLuint64 vkSemaphore)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSIGNALVKSEMAPHORENVPROC) (GLuint64 vkSemaphore)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSIGNALVKFENCENVPROC) (GLuint64 vkFence)"
  },
  {
    "label": "glDrawVkImageNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)"
  },
  {
    "label": "glGetVkProcAddrNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLVULKANPROCNV GL_APIENTRY)",
    "insertText": "glGetVkProcAddrNV(const GLchar *name)"
  },
  {
    "label": "glWaitVkSemaphoreNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glWaitVkSemaphoreNV(GLuint64 vkSemaphore)"
  },
  {
    "label": "glSignalVkSemaphoreNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glSignalVkSemaphoreNV(GLuint64 vkSemaphore)"
  },
  {
    "label": "glSignalVkFenceNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glSignalVkFenceNV(GLuint64 vkFence)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_explicit_attrib_location # define GL_NV_explicit_attrib_location 1 # endif # ifndef GL_NV_fbo_color_attachments # define GL_NV_fbo_color_attachments 1 # define GL_MAX_COLOR_ATTACHMENTS_NV 0 x8CDF # endif # ifndef GL_NV_fence # define GL_NV_fence 1 # define GL_ALL_COMPLETED_NV 0 x84F2 # define GL_FENCE_STATUS_NV 0 x84F3 # define GL_FENCE_CONDITION_NV 0 x84F4 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint *fences)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGENFENCESNVPROC) (GLsizei n, GLuint *fences)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISFENCENVPROC) (GLuint fence)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLTESTFENCENVPROC) (GLuint fence)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFINISHFENCENVPROC) (GLuint fence)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition)"
  },
  {
    "label": "glDeleteFencesNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glDeleteFencesNV(GLsizei n, const GLuint *fences)"
  },
  {
    "label": "glGenFencesNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGenFencesNV(GLsizei n, GLuint *fences)"
  },
  {
    "label": "glIsFenceNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsFenceNV(GLuint fence)"
  },
  {
    "label": "glTestFenceNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glTestFenceNV(GLuint fence)"
  },
  {
    "label": "glGetFenceivNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetFenceivNV(GLuint fence, GLenum pname, GLint *params)"
  },
  {
    "label": "glFinishFenceNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glFinishFenceNV(GLuint fence)"
  },
  {
    "label": "glSetFenceNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glSetFenceNV(GLuint fence, GLenum condition)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_fill_rectangle # define GL_NV_fill_rectangle 1 # define GL_FILL_RECTANGLE_NV 0 x933C # endif # ifndef GL_NV_fragment_coverage_to_color # define GL_NV_fragment_coverage_to_color 1 # define GL_FRAGMENT_COVERAGE_TO_COLOR_NV 0 x92DD # define GL_FRAGMENT_COVERAGE_COLOR_NV 0 x92DE typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAGMENTCOVERAGECOLORNVPROC) (GLuint color)"
  },
  {
    "label": "glFragmentCoverageColorNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glFragmentCoverageColorNV(GLuint color)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_fragment_shader_barycentric # define GL_NV_fragment_shader_barycentric 1 # endif # ifndef GL_NV_fragment_shader_interlock # define GL_NV_fragment_shader_interlock 1 # endif # ifndef GL_NV_framebuffer_blit # define GL_NV_framebuffer_blit 1 # define GL_READ_FRAMEBUFFER_NV 0 x8CA8 # define GL_DRAW_FRAMEBUFFER_NV 0 x8CA9 # define GL_DRAW_FRAMEBUFFER_BINDING_NV 0 x8CA6 # define GL_READ_FRAMEBUFFER_BINDING_NV 0 x8CAA typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLITFRAMEBUFFERNVPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "glBlitFramebufferNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlitFramebufferNV(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_framebuffer_mixed_samples # define GL_NV_framebuffer_mixed_samples 1 # define GL_COVERAGE_MODULATION_TABLE_NV 0 x9331 # define GL_COLOR_SAMPLES_NV 0 x8E20 # define GL_DEPTH_SAMPLES_NV 0 x932D # define GL_STENCIL_SAMPLES_NV 0 x932E # define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV 0 x932F # define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV 0 x9330 # define GL_COVERAGE_MODULATION_NV 0 x9332 # define GL_COVERAGE_MODULATION_TABLE_SIZE_NV 0 x9333 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOVERAGEMODULATIONTABLENVPROC) (GLsizei n, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETCOVERAGEMODULATIONTABLENVPROC) (GLsizei bufSize, GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOVERAGEMODULATIONNVPROC) (GLenum components)"
  },
  {
    "label": "glCoverageModulationTableNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glCoverageModulationTableNV(GLsizei n, const GLfloat *v)"
  },
  {
    "label": "glGetCoverageModulationTableNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetCoverageModulationTableNV(GLsizei bufSize, GLfloat *v)"
  },
  {
    "label": "glCoverageModulationNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCoverageModulationNV(GLenum components)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_framebuffer_multisample # define GL_NV_framebuffer_multisample 1 # define GL_RENDERBUFFER_SAMPLES_NV 0 x8CAB # define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV 0 x8D56 # define GL_MAX_SAMPLES_NV 0 x8D57 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glRenderbufferStorageMultisampleNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glRenderbufferStorageMultisampleNV(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_generate_mipmap_sRGB # define GL_NV_generate_mipmap_sRGB 1 # endif # ifndef GL_NV_geometry_shader_passthrough # define GL_NV_geometry_shader_passthrough 1 # endif # ifndef GL_NV_gpu_shader5 # define GL_NV_gpu_shader5 1 typedef khronos_int64_t GLint64EXT ; typedef khronos_uint64_t GLuint64EXT ; # define GL_INT64_NV 0 x140E # define GL_UNSIGNED_INT64_NV 0 x140F # define GL_INT8_NV 0 x8FE0 # define GL_INT8_VEC2_NV 0 x8FE1 # define GL_INT8_VEC3_NV 0 x8FE2 # define GL_INT8_VEC4_NV 0 x8FE3 # define GL_INT16_NV 0 x8FE4 # define GL_INT16_VEC2_NV 0 x8FE5 # define GL_INT16_VEC3_NV 0 x8FE6 # define GL_INT16_VEC4_NV 0 x8FE7 # define GL_INT64_VEC2_NV 0 x8FE9 # define GL_INT64_VEC3_NV 0 x8FEA # define GL_INT64_VEC4_NV 0 x8FEB # define GL_UNSIGNED_INT8_NV 0 x8FEC # define GL_UNSIGNED_INT8_VEC2_NV 0 x8FED # define GL_UNSIGNED_INT8_VEC3_NV 0 x8FEE # define GL_UNSIGNED_INT8_VEC4_NV 0 x8FEF # define GL_UNSIGNED_INT16_NV 0 x8FF0 # define GL_UNSIGNED_INT16_VEC2_NV 0 x8FF1 # define GL_UNSIGNED_INT16_VEC3_NV 0 x8FF2 # define GL_UNSIGNED_INT16_VEC4_NV 0 x8FF3 # define GL_UNSIGNED_INT64_VEC2_NV 0 x8FF5 # define GL_UNSIGNED_INT64_VEC3_NV 0 x8FF6 # define GL_UNSIGNED_INT64_VEC4_NV 0 x8FF7 # define GL_FLOAT16_NV 0 x8FF8 # define GL_FLOAT16_VEC2_NV 0 x8FF9 # define GL_FLOAT16_VEC3_NV 0 x8FFA # define GL_FLOAT16_VEC4_NV 0 x8FFB # define GL_PATCHES 0 x000E typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM1I64NVPROC) (GLint location, GLint64EXT x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM2I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM3I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM4I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM1I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM2I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM3I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM4I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM1UI64NVPROC) (GLint location, GLuint64EXT x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM2UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM3UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM4UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM1UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM2UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM3UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM4UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETUNIFORMI64VNVPROC) (GLuint program, GLint location, GLint64EXT *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM1I64NVPROC) (GLuint program, GLint location, GLint64EXT x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM2I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM3I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM4I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM1I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM2I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM3I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM4I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM1UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM2UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM3UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM4UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM1UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM2UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM3UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMUNIFORM4UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glUniform1i64NV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform1i64NV(GLint location, GLint64EXT x)"
  },
  {
    "label": "glUniform2i64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y)"
  },
  {
    "label": "glUniform3i64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)"
  },
  {
    "label": "glUniform4i64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)"
  },
  {
    "label": "glUniform1i64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glUniform2i64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glUniform3i64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glUniform4i64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glUniform1ui64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform1ui64NV(GLint location, GLuint64EXT x)"
  },
  {
    "label": "glUniform2ui64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y)"
  },
  {
    "label": "glUniform3ui64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)"
  },
  {
    "label": "glUniform4ui64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)"
  },
  {
    "label": "glUniform1ui64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glUniform2ui64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glUniform3ui64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glUniform4ui64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glGetUniformi64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params)"
  },
  {
    "label": "glProgramUniform1i64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x)"
  },
  {
    "label": "glProgramUniform2i64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)"
  },
  {
    "label": "glProgramUniform3i64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)"
  },
  {
    "label": "glProgramUniform4i64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)"
  },
  {
    "label": "glProgramUniform1i64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glProgramUniform2i64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glProgramUniform3i64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glProgramUniform4i64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glProgramUniform1ui64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x)"
  },
  {
    "label": "glProgramUniform2ui64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)"
  },
  {
    "label": "glProgramUniform3ui64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)"
  },
  {
    "label": "glProgramUniform4ui64NV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)"
  },
  {
    "label": "glProgramUniform1ui64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glProgramUniform2ui64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glProgramUniform3ui64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glProgramUniform4ui64vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_image_formats # define GL_NV_image_formats 1 # endif # ifndef GL_NV_instanced_arrays # define GL_NV_instanced_arrays 1 # define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV 0 x88FE typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVERTEXATTRIBDIVISORNVPROC) (GLuint index, GLuint divisor)"
  },
  {
    "label": "glVertexAttribDivisorNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glVertexAttribDivisorNV(GLuint index, GLuint divisor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_internalformat_sample_query # define GL_NV_internalformat_sample_query 1 # define GL_TEXTURE_2D_MULTISAMPLE 0 x9100 # define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0 x9102 # define GL_MULTISAMPLES_NV 0 x9371 # define GL_SUPERSAMPLE_SCALE_X_NV 0 x9372 # define GL_SUPERSAMPLE_SCALE_Y_NV 0 x9373 # define GL_CONFORMANT_NV 0 x9374 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETINTERNALFORMATSAMPLEIVNVPROC) (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint *params)"
  },
  {
    "label": "glGetInternalformatSampleivNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_memory_attachment # define GL_NV_memory_attachment 1 # define GL_ATTACHED_MEMORY_OBJECT_NV 0 x95A4 # define GL_ATTACHED_MEMORY_OFFSET_NV 0 x95A5 # define GL_MEMORY_ATTACHABLE_ALIGNMENT_NV 0 x95A6 # define GL_MEMORY_ATTACHABLE_SIZE_NV 0 x95A7 # define GL_MEMORY_ATTACHABLE_NV 0 x95A8 # define GL_DETACHED_MEMORY_INCARNATION_NV 0 x95A9 # define GL_DETACHED_TEXTURES_NV 0 x95AA # define GL_DETACHED_BUFFERS_NV 0 x95AB # define GL_MAX_DETACHED_TEXTURES_NV 0 x95AC # define GL_MAX_DETACHED_BUFFERS_NV 0 x95AD typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC) (GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLRESETMEMORYOBJECTPARAMETERNVPROC) (GLuint memory, GLenum pname)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXATTACHMEMORYNVPROC) (GLenum target, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBUFFERATTACHMEMORYNVPROC) (GLenum target, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXTUREATTACHMEMORYNVPROC) (GLuint texture, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLNAMEDBUFFERATTACHMEMORYNVPROC) (GLuint buffer, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "glGetMemoryObjectDetachedResourcesuivNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetMemoryObjectDetachedResourcesuivNV(GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint *params)"
  },
  {
    "label": "glResetMemoryObjectParameterNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glResetMemoryObjectParameterNV(GLuint memory, GLenum pname)"
  },
  {
    "label": "glTexAttachMemoryNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "glBufferAttachMemoryNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBufferAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "glTextureAttachMemoryNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTextureAttachMemoryNV(GLuint texture, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "glNamedBufferAttachMemoryNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glNamedBufferAttachMemoryNV(GLuint buffer, GLuint memory, GLuint64 offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_memory_object_sparse # define GL_NV_memory_object_sparse 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBUFFERPAGECOMMITMENTMEMNVPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXPAGECOMMITMENTMEMNVPROC) (GLenum target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC) (GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit)"
  },
  {
    "label": "glBufferPageCommitmentMemNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glBufferPageCommitmentMemNV(GLenum target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit)"
  },
  {
    "label": "glTexPageCommitmentMemNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexPageCommitmentMemNV(GLenum target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit)"
  },
  {
    "label": "glNamedBufferPageCommitmentMemNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glNamedBufferPageCommitmentMemNV(GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit)"
  },
  {
    "label": "glTexturePageCommitmentMemNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexturePageCommitmentMemNV(GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_mesh_shader # define GL_NV_mesh_shader 1 # define GL_MESH_SHADER_NV 0 x9559 # define GL_TASK_SHADER_NV 0 x955A # define GL_MAX_MESH_UNIFORM_BLOCKS_NV 0 x8E60 # define GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV 0 x8E61 # define GL_MAX_MESH_IMAGE_UNIFORMS_NV 0 x8E62 # define GL_MAX_MESH_UNIFORM_COMPONENTS_NV 0 x8E63 # define GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV 0 x8E64 # define GL_MAX_MESH_ATOMIC_COUNTERS_NV 0 x8E65 # define GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV 0 x8E66 # define GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV 0 x8E67 # define GL_MAX_TASK_UNIFORM_BLOCKS_NV 0 x8E68 # define GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV 0 x8E69 # define GL_MAX_TASK_IMAGE_UNIFORMS_NV 0 x8E6A # define GL_MAX_TASK_UNIFORM_COMPONENTS_NV 0 x8E6B # define GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV 0 x8E6C # define GL_MAX_TASK_ATOMIC_COUNTERS_NV 0 x8E6D # define GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV 0 x8E6E # define GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV 0 x8E6F # define GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV 0 x95A2 # define GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV 0 x95A3 # define GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV 0 x9536 # define GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV 0 x9537 # define GL_MAX_MESH_OUTPUT_VERTICES_NV 0 x9538 # define GL_MAX_MESH_OUTPUT_PRIMITIVES_NV 0 x9539 # define GL_MAX_TASK_OUTPUT_COUNT_NV 0 x953A # define GL_MAX_DRAW_MESH_TASKS_COUNT_NV 0 x953D # define GL_MAX_MESH_VIEWS_NV 0 x9557 # define GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV 0 x92DF # define GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV 0 x9543 # define GL_MAX_MESH_WORK_GROUP_SIZE_NV 0 x953B # define GL_MAX_TASK_WORK_GROUP_SIZE_NV 0 x953C # define GL_MESH_WORK_GROUP_SIZE_NV 0 x953E # define GL_TASK_WORK_GROUP_SIZE_NV 0 x953F # define GL_MESH_VERTICES_OUT_NV 0 x9579 # define GL_MESH_PRIMITIVES_OUT_NV 0 x957A # define GL_MESH_OUTPUT_TYPE_NV 0 x957B # define GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV 0 x959C # define GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV 0 x959D # define GL_REFERENCED_BY_MESH_SHADER_NV 0 x95A0 # define GL_REFERENCED_BY_TASK_SHADER_NV 0 x95A1 # define GL_MESH_SHADER_BIT_NV 0 x00000040 # define GL_TASK_SHADER_BIT_NV 0 x00000080 # define GL_MESH_SUBROUTINE_NV 0 x957C # define GL_TASK_SUBROUTINE_NV 0 x957D # define GL_MESH_SUBROUTINE_UNIFORM_NV 0 x957E # define GL_TASK_SUBROUTINE_UNIFORM_NV 0 x957F # define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV 0 x959E # define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV 0 x959F typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWMESHTASKSNVPROC) (GLuint first, GLuint count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWMESHTASKSINDIRECTNVPROC) (GLintptr indirect)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC) (GLintptr indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC) (GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)"
  },
  {
    "label": "glDrawMeshTasksNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawMeshTasksNV(GLuint first, GLuint count)"
  },
  {
    "label": "glDrawMeshTasksIndirectNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawMeshTasksIndirectNV(GLintptr indirect)"
  },
  {
    "label": "glMultiDrawMeshTasksIndirectNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMultiDrawMeshTasksIndirectNV(GLintptr indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "glMultiDrawMeshTasksIndirectCountNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMultiDrawMeshTasksIndirectCountNV(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_non_square_matrices # define GL_NV_non_square_matrices 1 # define GL_FLOAT_MAT2x3_NV 0 x8B65 # define GL_FLOAT_MAT2x4_NV 0 x8B66 # define GL_FLOAT_MAT3x2_NV 0 x8B67 # define GL_FLOAT_MAT3x4_NV 0 x8B68 # define GL_FLOAT_MAT4x2_NV 0 x8B69 # define GL_FLOAT_MAT4x3_NV 0 x8B6A typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORMMATRIX2X3FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORMMATRIX3X2FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORMMATRIX2X4FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORMMATRIX4X2FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORMMATRIX3X4FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORMMATRIX4X3FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix2x3fvNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniformMatrix2x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3x2fvNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniformMatrix3x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix2x4fvNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniformMatrix2x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4x2fvNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniformMatrix4x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3x4fvNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniformMatrix3x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4x3fvNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniformMatrix4x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_path_rendering # define GL_NV_path_rendering 1 typedef double GLdouble ; # define GL_PATH_FORMAT_SVG_NV 0 x9070 # define GL_PATH_FORMAT_PS_NV 0 x9071 # define GL_STANDARD_FONT_NAME_NV 0 x9072 # define GL_SYSTEM_FONT_NAME_NV 0 x9073 # define GL_FILE_NAME_NV 0 x9074 # define GL_PATH_STROKE_WIDTH_NV 0 x9075 # define GL_PATH_END_CAPS_NV 0 x9076 # define GL_PATH_INITIAL_END_CAP_NV 0 x9077 # define GL_PATH_TERMINAL_END_CAP_NV 0 x9078 # define GL_PATH_JOIN_STYLE_NV 0 x9079 # define GL_PATH_MITER_LIMIT_NV 0 x907A # define GL_PATH_DASH_CAPS_NV 0 x907B # define GL_PATH_INITIAL_DASH_CAP_NV 0 x907C # define GL_PATH_TERMINAL_DASH_CAP_NV 0 x907D # define GL_PATH_DASH_OFFSET_NV 0 x907E # define GL_PATH_CLIENT_LENGTH_NV 0 x907F # define GL_PATH_FILL_MODE_NV 0 x9080 # define GL_PATH_FILL_MASK_NV 0 x9081 # define GL_PATH_FILL_COVER_MODE_NV 0 x9082 # define GL_PATH_STROKE_COVER_MODE_NV 0 x9083 # define GL_PATH_STROKE_MASK_NV 0 x9084 # define GL_COUNT_UP_NV 0 x9088 # define GL_COUNT_DOWN_NV 0 x9089 # define GL_PATH_OBJECT_BOUNDING_BOX_NV 0 x908A # define GL_CONVEX_HULL_NV 0 x908B # define GL_BOUNDING_BOX_NV 0 x908D # define GL_TRANSLATE_X_NV 0 x908E # define GL_TRANSLATE_Y_NV 0 x908F # define GL_TRANSLATE_2D_NV 0 x9090 # define GL_TRANSLATE_3D_NV 0 x9091 # define GL_AFFINE_2D_NV 0 x9092 # define GL_AFFINE_3D_NV 0 x9094 # define GL_TRANSPOSE_AFFINE_2D_NV 0 x9096 # define GL_TRANSPOSE_AFFINE_3D_NV 0 x9098 # define GL_UTF8_NV 0 x909A # define GL_UTF16_NV 0 x909B # define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0 x909C # define GL_PATH_COMMAND_COUNT_NV 0 x909D # define GL_PATH_COORD_COUNT_NV 0 x909E # define GL_PATH_DASH_ARRAY_COUNT_NV 0 x909F # define GL_PATH_COMPUTED_LENGTH_NV 0 x90A0 # define GL_PATH_FILL_BOUNDING_BOX_NV 0 x90A1 # define GL_PATH_STROKE_BOUNDING_BOX_NV 0 x90A2 # define GL_SQUARE_NV 0 x90A3 # define GL_ROUND_NV 0 x90A4 # define GL_TRIANGULAR_NV 0 x90A5 # define GL_BEVEL_NV 0 x90A6 # define GL_MITER_REVERT_NV 0 x90A7 # define GL_MITER_TRUNCATE_NV 0 x90A8 # define GL_SKIP_MISSING_GLYPH_NV 0 x90A9 # define GL_USE_MISSING_GLYPH_NV 0 x90AA # define GL_PATH_ERROR_POSITION_NV 0 x90AB # define GL_ACCUM_ADJACENT_PAIRS_NV 0 x90AD # define GL_ADJACENT_PAIRS_NV 0 x90AE # define GL_FIRST_TO_REST_NV 0 x90AF # define GL_PATH_GEN_MODE_NV 0 x90B0 # define GL_PATH_GEN_COEFF_NV 0 x90B1 # define GL_PATH_GEN_COMPONENTS_NV 0 x90B3 # define GL_PATH_STENCIL_FUNC_NV 0 x90B7 # define GL_PATH_STENCIL_REF_NV 0 x90B8 # define GL_PATH_STENCIL_VALUE_MASK_NV 0 x90B9 # define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0 x90BD # define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0 x90BE # define GL_PATH_COVER_DEPTH_FUNC_NV 0 x90BF # define GL_PATH_DASH_OFFSET_RESET_NV 0 x90B4 # define GL_MOVE_TO_RESETS_NV 0 x90B5 # define GL_MOVE_TO_CONTINUES_NV 0 x90B6 # define GL_CLOSE_PATH_NV 0 x00 # define GL_MOVE_TO_NV 0 x02 # define GL_RELATIVE_MOVE_TO_NV 0 x03 # define GL_LINE_TO_NV 0 x04 # define GL_RELATIVE_LINE_TO_NV 0 x05 # define GL_HORIZONTAL_LINE_TO_NV 0 x06 # define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0 x07 # define GL_VERTICAL_LINE_TO_NV 0 x08 # define GL_RELATIVE_VERTICAL_LINE_TO_NV 0 x09 # define GL_QUADRATIC_CURVE_TO_NV 0 x0A # define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0 x0B # define GL_CUBIC_CURVE_TO_NV 0 x0C # define GL_RELATIVE_CUBIC_CURVE_TO_NV 0 x0D # define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0 x0E # define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0 x0F # define GL_SMOOTH_CUBIC_CURVE_TO_NV 0 x10 # define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0 x11 # define GL_SMALL_CCW_ARC_TO_NV 0 x12 # define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0 x13 # define GL_SMALL_CW_ARC_TO_NV 0 x14 # define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0 x15 # define GL_LARGE_CCW_ARC_TO_NV 0 x16 # define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0 x17 # define GL_LARGE_CW_ARC_TO_NV 0 x18 # define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0 x19 # define GL_RESTART_PATH_NV 0 xF0 # define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0 xF2 # define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0 xF4 # define GL_RECT_NV 0 xF6 # define GL_CIRCULAR_CCW_ARC_TO_NV 0 xF8 # define GL_CIRCULAR_CW_ARC_TO_NV 0 xFA # define GL_CIRCULAR_TANGENT_ARC_TO_NV 0 xFC # define GL_ARC_TO_NV 0 xFE # define GL_RELATIVE_ARC_TO_NV 0 xFF # define GL_BOLD_BIT_NV 0 x01 # define GL_ITALIC_BIT_NV 0 x02 # define GL_GLYPH_WIDTH_BIT_NV 0 x01 # define GL_GLYPH_HEIGHT_BIT_NV 0 x02 # define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0 x04 # define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0 x08 # define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0 x10 # define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0 x20 # define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0 x40 # define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0 x80 # define GL_GLYPH_HAS_KERNING_BIT_NV 0 x100 # define GL_FONT_X_MIN_BOUNDS_BIT_NV 0 x00010000 # define GL_FONT_Y_MIN_BOUNDS_BIT_NV 0 x00020000 # define GL_FONT_X_MAX_BOUNDS_BIT_NV 0 x00040000 # define GL_FONT_Y_MAX_BOUNDS_BIT_NV 0 x00080000 # define GL_FONT_UNITS_PER_EM_BIT_NV 0 x00100000 # define GL_FONT_ASCENDER_BIT_NV 0 x00200000 # define GL_FONT_DESCENDER_BIT_NV 0 x00400000 # define GL_FONT_HEIGHT_BIT_NV 0 x00800000 # define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV 0 x01000000 # define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV 0 x02000000 # define GL_FONT_UNDERLINE_POSITION_BIT_NV 0 x04000000 # define GL_FONT_UNDERLINE_THICKNESS_BIT_NV 0 x08000000 # define GL_FONT_HAS_KERNING_BIT_NV 0 x10000000 # define GL_ROUNDED_RECT_NV 0 xE8 # define GL_RELATIVE_ROUNDED_RECT_NV 0 xE9 # define GL_ROUNDED_RECT2_NV 0 xEA # define GL_RELATIVE_ROUNDED_RECT2_NV 0 xEB # define GL_ROUNDED_RECT4_NV 0 xEC # define GL_RELATIVE_ROUNDED_RECT4_NV 0 xED # define GL_ROUNDED_RECT8_NV 0 xEE # define GL_RELATIVE_ROUNDED_RECT8_NV 0 xEF # define GL_RELATIVE_RECT_NV 0 xF7 # define GL_FONT_GLYPHS_AVAILABLE_NV 0 x9368 # define GL_FONT_TARGET_UNAVAILABLE_NV 0 x9369 # define GL_FONT_UNAVAILABLE_NV 0 x936A # define GL_FONT_UNINTELLIGIBLE_NV 0 x936B # define GL_CONIC_CURVE_TO_NV 0 x1A # define GL_RELATIVE_CONIC_CURVE_TO_NV 0 x1B # define GL_FONT_NUM_GLYPH_INDICES_BIT_NV 0 x20000000 # define GL_STANDARD_FONT_FORMAT_NV 0 x936C # define GL_PATH_PROJECTION_NV 0 x1701 # define GL_PATH_MODELVIEW_NV 0 x1700 # define GL_PATH_MODELVIEW_STACK_DEPTH_NV 0 x0BA3 # define GL_PATH_MODELVIEW_MATRIX_NV 0 x0BA6 # define GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV 0 x0D36 # define GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV 0 x84E3 # define GL_PATH_PROJECTION_STACK_DEPTH_NV 0 x0BA4 # define GL_PATH_PROJECTION_MATRIX_NV 0 x0BA7 # define GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV 0 x0D38 # define GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV 0 x84E4 # define GL_FRAGMENT_INPUT_NV 0 x936D typedef)",
    "insertText": "GLuint(GL_APIENTRYP PFNGLGENPATHSNVPROC) (GLsizei range)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDELETEPATHSNVPROC) (GLuint path, GLsizei range)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISPATHNVPROC) (GLuint path)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const void *pathString)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPATHCOVERDEPTHFUNCNVPROC) (GLenum func)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y)"
  },
  {
    "label": "GLfloat()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLfloat(GL_APIENTRYP PFNGLGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXLOAD3X2FNVPROC) (GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXLOAD3X3FNVPROC) (GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC) (GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXMULT3X2FNVPROC) (GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXMULT3X3FNVPROC) (GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC) (GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSTENCILTHENCOVERFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask, GLenum coverMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(GL_APIENTRYP PFNGLPATHGLYPHINDEXRANGENVPROC) (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint *baseAndCount)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(GL_APIENTRYP PFNGLPATHGLYPHINDEXARRAYNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(GL_APIENTRYP PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC) (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC) (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPROGRAMRESOURCEFVNVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXFRUSTUMEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXLOADIDENTITYEXTPROC) (GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXLOADTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXLOADTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXLOADFEXTPROC) (GLenum mode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXLOADDEXTPROC) (GLenum mode, const GLdouble *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXMULTTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXMULTTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXMULTFEXTPROC) (GLenum mode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXMULTDEXTPROC) (GLenum mode, const GLdouble *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXORTHOEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXPOPEXTPROC) (GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXPUSHEXTPROC) (GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXROTATEFEXTPROC) (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXROTATEDEXTPROC) (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXSCALEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXSCALEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXTRANSLATEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLMATRIXTRANSLATEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glGenPathsNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL GLuint GL_APIENTRY)",
    "insertText": "glGenPathsNV(GLsizei range)"
  },
  {
    "label": "glDeletePathsNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDeletePathsNV(GLuint path, GLsizei range)"
  },
  {
    "label": "glIsPathNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsPathNV(GLuint path)"
  },
  {
    "label": "glPathCommandsNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "glPathCoordsNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "glPathSubCommandsNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "glPathSubCoordsNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "glPathStringNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPathStringNV(GLuint path, GLenum format, GLsizei length, const void *pathString)"
  },
  {
    "label": "glPathGlyphsNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "glPathGlyphRangeNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "glWeightPathsNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)"
  },
  {
    "label": "glCopyPathNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCopyPathNV(GLuint resultPath, GLuint srcPath)"
  },
  {
    "label": "glInterpolatePathsNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)"
  },
  {
    "label": "glTransformPathNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glPathParameterivNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPathParameterivNV(GLuint path, GLenum pname, const GLint *value)"
  },
  {
    "label": "glPathParameteriNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPathParameteriNV(GLuint path, GLenum pname, GLint value)"
  },
  {
    "label": "glPathParameterfvNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value)"
  },
  {
    "label": "glPathParameterfNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPathParameterfNV(GLuint path, GLenum pname, GLfloat value)"
  },
  {
    "label": "glPathDashArrayNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray)"
  },
  {
    "label": "glPathStencilFuncNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "glPathStencilDepthOffsetNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units)"
  },
  {
    "label": "glStencilFillPathNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask)"
  },
  {
    "label": "glStencilStrokePathNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask)"
  },
  {
    "label": "glStencilFillPathInstancedNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glStencilStrokePathInstancedNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glPathCoverDepthFuncNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPathCoverDepthFuncNV(GLenum func)"
  },
  {
    "label": "glCoverFillPathNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCoverFillPathNV(GLuint path, GLenum coverMode)"
  },
  {
    "label": "glCoverStrokePathNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCoverStrokePathNV(GLuint path, GLenum coverMode)"
  },
  {
    "label": "glCoverFillPathInstancedNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glCoverStrokePathInstancedNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glGetPathParameterivNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPathParameterivNV(GLuint path, GLenum pname, GLint *value)"
  },
  {
    "label": "glGetPathParameterfvNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat *value)"
  },
  {
    "label": "glGetPathCommandsNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPathCommandsNV(GLuint path, GLubyte *commands)"
  },
  {
    "label": "glGetPathCoordsNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPathCoordsNV(GLuint path, GLfloat *coords)"
  },
  {
    "label": "glGetPathDashArrayNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPathDashArrayNV(GLuint path, GLfloat *dashArray)"
  },
  {
    "label": "glGetPathMetricsNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)"
  },
  {
    "label": "glGetPathMetricRangeNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)"
  },
  {
    "label": "glGetPathSpacingNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)"
  },
  {
    "label": "glIsPointInFillPathNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y)"
  },
  {
    "label": "glIsPointInStrokePathNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y)"
  },
  {
    "label": "glGetPathLengthNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLfloat GL_APIENTRY)",
    "insertText": "glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments)"
  },
  {
    "label": "glPointAlongPathNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)"
  },
  {
    "label": "glMatrixLoad3x2fNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glMatrixLoad3x3fNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glMatrixLoadTranspose3x3fNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glMatrixMult3x2fNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixMult3x2fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glMatrixMult3x3fNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixMult3x3fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glMatrixMultTranspose3x3fNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glStencilThenCoverFillPathNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)"
  },
  {
    "label": "glStencilThenCoverStrokePathNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode)"
  },
  {
    "label": "glStencilThenCoverFillPathInstancedNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glStencilThenCoverStrokePathInstancedNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glPathGlyphIndexRangeNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLenum GL_APIENTRY)",
    "insertText": "glPathGlyphIndexRangeNV(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint *baseAndCount)"
  },
  {
    "label": "glPathGlyphIndexArrayNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLenum GL_APIENTRY)",
    "insertText": "glPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "glPathMemoryGlyphIndexArrayNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLenum GL_APIENTRY)",
    "insertText": "glPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "glProgramPathFragmentInputGenNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs)"
  },
  {
    "label": "glGetProgramResourcefvNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLfloat *params)"
  },
  {
    "label": "glMatrixFrustumEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)"
  },
  {
    "label": "glMatrixLoadIdentityEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixLoadIdentityEXT(GLenum mode)"
  },
  {
    "label": "glMatrixLoadTransposefEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m)"
  },
  {
    "label": "glMatrixLoadTransposedEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m)"
  },
  {
    "label": "glMatrixLoadfEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixLoadfEXT(GLenum mode, const GLfloat *m)"
  },
  {
    "label": "glMatrixLoaddEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixLoaddEXT(GLenum mode, const GLdouble *m)"
  },
  {
    "label": "glMatrixMultTransposefEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m)"
  },
  {
    "label": "glMatrixMultTransposedEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m)"
  },
  {
    "label": "glMatrixMultfEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixMultfEXT(GLenum mode, const GLfloat *m)"
  },
  {
    "label": "glMatrixMultdEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixMultdEXT(GLenum mode, const GLdouble *m)"
  },
  {
    "label": "glMatrixOrthoEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)"
  },
  {
    "label": "glMatrixPopEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixPopEXT(GLenum mode)"
  },
  {
    "label": "glMatrixPushEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixPushEXT(GLenum mode)"
  },
  {
    "label": "glMatrixRotatefEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glMatrixRotatedEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glMatrixScalefEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glMatrixScaledEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glMatrixTranslatefEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glMatrixTranslatedEXT()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_path_rendering_shared_edge # define GL_NV_path_rendering_shared_edge 1 # define GL_SHARED_EDGE_NV 0 xC0 # endif # ifndef GL_NV_pixel_buffer_object # define GL_NV_pixel_buffer_object 1 # define GL_PIXEL_PACK_BUFFER_NV 0 x88EB # define GL_PIXEL_UNPACK_BUFFER_NV 0 x88EC # define GL_PIXEL_PACK_BUFFER_BINDING_NV 0 x88ED # define GL_PIXEL_UNPACK_BUFFER_BINDING_NV 0 x88EF # endif # ifndef GL_NV_polygon_mode # define GL_NV_polygon_mode 1 # define GL_POLYGON_MODE_NV 0 x0B40 # define GL_POLYGON_OFFSET_POINT_NV 0 x2A01 # define GL_POLYGON_OFFSET_LINE_NV 0 x2A02 # define GL_POINT_NV 0 x1B00 # define GL_LINE_NV 0 x1B01 # define GL_FILL_NV 0 x1B02 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPOLYGONMODENVPROC) (GLenum face, GLenum mode)"
  },
  {
    "label": "glPolygonModeNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glPolygonModeNV(GLenum face, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_primitive_shading_rate # define GL_NV_primitive_shading_rate 1 # define GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV 0 x95B1 # define GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV 0 x95B2 # endif # ifndef GL_NV_read_buffer # define GL_NV_read_buffer 1 # define GL_READ_BUFFER_NV 0 x0C02 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLREADBUFFERNVPROC) (GLenum mode)"
  },
  {
    "label": "glReadBufferNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glReadBufferNV(GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_read_buffer_front # define GL_NV_read_buffer_front 1 # endif # ifndef GL_NV_read_depth # define GL_NV_read_depth 1 # endif # ifndef GL_NV_read_depth_stencil # define GL_NV_read_depth_stencil 1 # endif # ifndef GL_NV_read_stencil # define GL_NV_read_stencil 1 # endif # ifndef GL_NV_representative_fragment_test # define GL_NV_representative_fragment_test 1 # define GL_REPRESENTATIVE_FRAGMENT_TEST_NV 0 x937F # endif # ifndef GL_NV_sRGB_formats # define GL_NV_sRGB_formats 1 # define GL_SLUMINANCE_NV 0 x8C46 # define GL_SLUMINANCE_ALPHA_NV 0 x8C44 # define GL_SRGB8_NV 0 x8C41 # define GL_SLUMINANCE8_NV 0 x8C47 # define GL_SLUMINANCE8_ALPHA8_NV 0 x8C45 # define GL_COMPRESSED_SRGB_S3TC_DXT1_NV 0 x8C4C # define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV 0 x8C4D # define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV 0 x8C4E # define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV 0 x8C4F # define GL_ETC1_SRGB8_NV 0 x88EE # endif # ifndef GL_NV_sample_locations # define GL_NV_sample_locations 1 # define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV 0 x933D # define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV 0 x933E # define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV 0 x933F # define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV 0 x9340 # define GL_SAMPLE_LOCATION_NV 0 x8E50 # define GL_PROGRAMMABLE_SAMPLE_LOCATION_NV 0 x9341 # define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV 0 x9342 # define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV 0 x9343 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLenum target, GLuint start, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLRESOLVEDEPTHVALUESNVPROC) (void)"
  },
  {
    "label": "glFramebufferSampleLocationsfvNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glNamedFramebufferSampleLocationsfvNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glResolveDepthValuesNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glResolveDepthValuesNV(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_sample_mask_override_coverage # define GL_NV_sample_mask_override_coverage 1 # endif # ifndef GL_NV_scissor_exclusive # define GL_NV_scissor_exclusive 1 # define GL_SCISSOR_TEST_EXCLUSIVE_NV 0 x9555 # define GL_SCISSOR_BOX_EXCLUSIVE_NV 0 x9556 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSCISSOREXCLUSIVENVPROC) (GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSCISSOREXCLUSIVEARRAYVNVPROC) (GLuint first, GLsizei count, const GLint *v)"
  },
  {
    "label": "glScissorExclusiveNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glScissorExclusiveNV(GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glScissorExclusiveArrayvNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glScissorExclusiveArrayvNV(GLuint first, GLsizei count, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_shader_atomic_fp16_vector # define GL_NV_shader_atomic_fp16_vector 1 # endif # ifndef GL_NV_shader_noperspective_interpolation # define GL_NV_shader_noperspective_interpolation 1 # endif # ifndef GL_NV_shader_subgroup_partitioned # define GL_NV_shader_subgroup_partitioned 1 # define GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV 0 x00000100 # endif # ifndef GL_NV_shader_texture_footprint # define GL_NV_shader_texture_footprint 1 # endif # ifndef GL_NV_shading_rate_image # define GL_NV_shading_rate_image 1 # define GL_SHADING_RATE_IMAGE_NV 0 x9563 # define GL_SHADING_RATE_NO_INVOCATIONS_NV 0 x9564 # define GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV 0 x9565 # define GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV 0 x9566 # define GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV 0 x9567 # define GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV 0 x9568 # define GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV 0 x9569 # define GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV 0 x956A # define GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV 0 x956B # define GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV 0 x956C # define GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV 0 x956D # define GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV 0 x956E # define GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV 0 x956F # define GL_SHADING_RATE_IMAGE_BINDING_NV 0 x955B # define GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV 0 x955C # define GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV 0 x955D # define GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV 0 x955E # define GL_MAX_COARSE_FRAGMENT_SAMPLES_NV 0 x955F # define GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV 0 x95AE # define GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV 0 x95AF # define GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV 0 x95B0 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBINDSHADINGRATEIMAGENVPROC) (GLuint texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETSHADINGRATEIMAGEPALETTENVPROC) (GLuint viewport, GLuint entry, GLenum *rate)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC) (GLenum rate, GLuint samples, GLuint index, GLint *location)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSHADINGRATEIMAGEBARRIERNVPROC) (GLboolean synchronize)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSHADINGRATEIMAGEPALETTENVPROC) (GLuint viewport, GLuint first, GLsizei count, const GLenum *rates)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSHADINGRATESAMPLEORDERNVPROC) (GLenum order)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC) (GLenum rate, GLuint samples, const GLint *locations)"
  },
  {
    "label": "glBindShadingRateImageNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glBindShadingRateImageNV(GLuint texture)"
  },
  {
    "label": "glGetShadingRateImagePaletteNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetShadingRateImagePaletteNV(GLuint viewport, GLuint entry, GLenum *rate)"
  },
  {
    "label": "glGetShadingRateSampleLocationivNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetShadingRateSampleLocationivNV(GLenum rate, GLuint samples, GLuint index, GLint *location)"
  },
  {
    "label": "glShadingRateImageBarrierNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glShadingRateImageBarrierNV(GLboolean synchronize)"
  },
  {
    "label": "glShadingRateImagePaletteNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glShadingRateImagePaletteNV(GLuint viewport, GLuint first, GLsizei count, const GLenum *rates)"
  },
  {
    "label": "glShadingRateSampleOrderNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glShadingRateSampleOrderNV(GLenum order)"
  },
  {
    "label": "glShadingRateSampleOrderCustomNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glShadingRateSampleOrderCustomNV(GLenum rate, GLuint samples, const GLint *locations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_shadow_samplers_array # define GL_NV_shadow_samplers_array 1 # define GL_SAMPLER_2D_ARRAY_SHADOW_NV 0 x8DC4 # endif # ifndef GL_NV_shadow_samplers_cube # define GL_NV_shadow_samplers_cube 1 # define GL_SAMPLER_CUBE_SHADOW_NV 0 x8DC5 # endif # ifndef GL_NV_stereo_view_rendering # define GL_NV_stereo_view_rendering 1 # endif # ifndef GL_NV_texture_border_clamp # define GL_NV_texture_border_clamp 1 # define GL_TEXTURE_BORDER_COLOR_NV 0 x1004 # define GL_CLAMP_TO_BORDER_NV 0 x812D # endif # ifndef GL_NV_texture_compression_s3tc_update # define GL_NV_texture_compression_s3tc_update 1 # endif # ifndef GL_NV_texture_npot_2D_mipmap # define GL_NV_texture_npot_2D_mipmap 1 # endif # ifndef GL_NV_timeline_semaphore # define GL_NV_timeline_semaphore 1 # define GL_TIMELINE_SEMAPHORE_VALUE_NV 0 x9595 # define GL_SEMAPHORE_TYPE_NV 0 x95B3 # define GL_SEMAPHORE_TYPE_BINARY_NV 0 x95B4 # define GL_SEMAPHORE_TYPE_TIMELINE_NV 0 x95B5 # define GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV 0 x95B6 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCREATESEMAPHORESNVPROC) (GLsizei n, GLuint *semaphores)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSEMAPHOREPARAMETERIVNVPROC) (GLuint semaphore, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETSEMAPHOREPARAMETERIVNVPROC) (GLuint semaphore, GLenum pname, GLint *params)"
  },
  {
    "label": "glCreateSemaphoresNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glCreateSemaphoresNV(GLsizei n, GLuint *semaphores)"
  },
  {
    "label": "glSemaphoreParameterivNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glSemaphoreParameterivNV(GLuint semaphore, GLenum pname, const GLint *params)"
  },
  {
    "label": "glGetSemaphoreParameterivNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetSemaphoreParameterivNV(GLuint semaphore, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_viewport_array # define GL_NV_viewport_array 1 # define GL_MAX_VIEWPORTS_NV 0 x825B # define GL_VIEWPORT_SUBPIXEL_BITS_NV 0 x825C # define GL_VIEWPORT_BOUNDS_RANGE_NV 0 x825D # define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV 0 x825F typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVIEWPORTARRAYVNVPROC) (GLuint first, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVIEWPORTINDEXEDFNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVIEWPORTINDEXEDFVNVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSCISSORARRAYVNVPROC) (GLuint first, GLsizei count, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSCISSORINDEXEDNVPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSCISSORINDEXEDVNVPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDEPTHRANGEARRAYFVNVPROC) (GLuint first, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDEPTHRANGEINDEXEDFNVPROC) (GLuint index, GLfloat n, GLfloat f)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETFLOATI_VNVPROC) (GLenum target, GLuint index, GLfloat *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLENABLEINVPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDISABLEINVPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISENABLEDINVPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "glViewportArrayvNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glViewportArrayvNV(GLuint first, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glViewportIndexedfNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glViewportIndexedfNV(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)"
  },
  {
    "label": "glViewportIndexedfvNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glViewportIndexedfvNV(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glScissorArrayvNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glScissorArrayvNV(GLuint first, GLsizei count, const GLint *v)"
  },
  {
    "label": "glScissorIndexedNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glScissorIndexedNV(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)"
  },
  {
    "label": "glScissorIndexedvNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glScissorIndexedvNV(GLuint index, const GLint *v)"
  },
  {
    "label": "glDepthRangeArrayfvNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDepthRangeArrayfvNV(GLuint first, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glDepthRangeIndexedfNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDepthRangeIndexedfNV(GLuint index, GLfloat n, GLfloat f)"
  },
  {
    "label": "glGetFloati_vNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetFloati_vNV(GLenum target, GLuint index, GLfloat *data)"
  },
  {
    "label": "glEnableiNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glEnableiNV(GLenum target, GLuint index)"
  },
  {
    "label": "glDisableiNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDisableiNV(GLenum target, GLuint index)"
  },
  {
    "label": "glIsEnablediNV()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsEnablediNV(GLenum target, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_viewport_array2 # define GL_NV_viewport_array2 1 # endif # ifndef GL_NV_viewport_swizzle # define GL_NV_viewport_swizzle 1 # define GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV 0 x9350 # define GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV 0 x9351 # define GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV 0 x9352 # define GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV 0 x9353 # define GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV 0 x9354 # define GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV 0 x9355 # define GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV 0 x9356 # define GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV 0 x9357 # define GL_VIEWPORT_SWIZZLE_X_NV 0 x9358 # define GL_VIEWPORT_SWIZZLE_Y_NV 0 x9359 # define GL_VIEWPORT_SWIZZLE_Z_NV 0 x935A # define GL_VIEWPORT_SWIZZLE_W_NV 0 x935B typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVIEWPORTSWIZZLENVPROC) (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)"
  },
  {
    "label": "glViewportSwizzleNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OVR_multiview # define GL_OVR_multiview 1 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR 0 x9630 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR 0 x9632 # define GL_MAX_VIEWS_OVR 0 x9631 # define GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR 0 x9633 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)"
  },
  {
    "label": "glFramebufferTextureMultiviewOVR()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OVR_multiview2 # define GL_OVR_multiview2 1 # endif # ifndef GL_OVR_multiview_multisampled_render_to_texture # define GL_OVR_multiview_multisampled_render_to_texture 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews)"
  },
  {
    "label": "glFramebufferTextureMultisampleMultiviewOVR()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferTextureMultisampleMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_QCOM_YUV_texture_gather # define GL_QCOM_YUV_texture_gather 1 # endif # ifndef GL_QCOM_alpha_test # define GL_QCOM_alpha_test 1 # define GL_ALPHA_TEST_QCOM 0 x0BC0 # define GL_ALPHA_TEST_FUNC_QCOM 0 x0BC1 # define GL_ALPHA_TEST_REF_QCOM 0 x0BC2 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLALPHAFUNCQCOMPROC) (GLenum func, GLclampf ref)"
  },
  {
    "label": "glAlphaFuncQCOM()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glAlphaFuncQCOM(GLenum func, GLclampf ref)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_QCOM_binning_control # define GL_QCOM_binning_control 1 # define GL_BINNING_CONTROL_HINT_QCOM 0 x8FB0 # define GL_CPU_OPTIMIZED_QCOM 0 x8FB1 # define GL_GPU_OPTIMIZED_QCOM 0 x8FB2 # define GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM 0 x8FB3 # endif # ifndef GL_QCOM_driver_control # define GL_QCOM_driver_control 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETDRIVERCONTROLSQCOMPROC) (GLint *num, GLsizei size, GLuint *driverControls)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETDRIVERCONTROLSTRINGQCOMPROC) (GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLENABLEDRIVERCONTROLQCOMPROC) (GLuint driverControl)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDISABLEDRIVERCONTROLQCOMPROC) (GLuint driverControl)"
  },
  {
    "label": "glGetDriverControlsQCOM()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetDriverControlsQCOM(GLint *num, GLsizei size, GLuint *driverControls)"
  },
  {
    "label": "glGetDriverControlStringQCOM()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString)"
  },
  {
    "label": "glEnableDriverControlQCOM()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glEnableDriverControlQCOM(GLuint driverControl)"
  },
  {
    "label": "glDisableDriverControlQCOM()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDisableDriverControlQCOM(GLuint driverControl)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_QCOM_extended_get # define GL_QCOM_extended_get 1 # define GL_TEXTURE_WIDTH_QCOM 0 x8BD2 # define GL_TEXTURE_HEIGHT_QCOM 0 x8BD3 # define GL_TEXTURE_DEPTH_QCOM 0 x8BD4 # define GL_TEXTURE_INTERNAL_FORMAT_QCOM 0 x8BD5 # define GL_TEXTURE_FORMAT_QCOM 0 x8BD6 # define GL_TEXTURE_TYPE_QCOM 0 x8BD7 # define GL_TEXTURE_IMAGE_VALID_QCOM 0 x8BD8 # define GL_TEXTURE_NUM_LEVELS_QCOM 0 x8BD9 # define GL_TEXTURE_TARGET_QCOM 0 x8BDA # define GL_TEXTURE_OBJECT_VALID_QCOM 0 x8BDB # define GL_STATE_RESTORE 0 x8BDC typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLEXTGETTEXTURESQCOMPROC) (GLuint *textures, GLint maxTextures, GLint *numTextures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLEXTGETBUFFERSQCOMPROC) (GLuint *buffers, GLint maxBuffers, GLint *numBuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLEXTGETRENDERBUFFERSQCOMPROC) (GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLEXTGETFRAMEBUFFERSQCOMPROC) (GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC) (GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC) (GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLEXTGETTEXSUBIMAGEQCOMPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLEXTGETBUFFERPOINTERVQCOMPROC) (GLenum target, void **params)"
  },
  {
    "label": "glExtGetTexturesQCOM()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glExtGetTexturesQCOM(GLuint *textures, GLint maxTextures, GLint *numTextures)"
  },
  {
    "label": "glExtGetBuffersQCOM()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glExtGetBuffersQCOM(GLuint *buffers, GLint maxBuffers, GLint *numBuffers)"
  },
  {
    "label": "glExtGetRenderbuffersQCOM()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glExtGetRenderbuffersQCOM(GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers)"
  },
  {
    "label": "glExtGetFramebuffersQCOM()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glExtGetFramebuffersQCOM(GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers)"
  },
  {
    "label": "glExtGetTexLevelParameterivQCOM()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "glExtTexObjectStateOverrideiQCOM()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glExtGetTexSubImageQCOM()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels)"
  },
  {
    "label": "glExtGetBufferPointervQCOM()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glExtGetBufferPointervQCOM(GLenum target, void **params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_QCOM_extended_get2 # define GL_QCOM_extended_get2 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLEXTGETSHADERSQCOMPROC) (GLuint *shaders, GLint maxShaders, GLint *numShaders)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLEXTGETPROGRAMSQCOMPROC) (GLuint *programs, GLint maxPrograms, GLint *numPrograms)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLEXTISPROGRAMBINARYQCOMPROC) (GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC) (GLuint program, GLenum shadertype, GLchar *source, GLint *length)"
  },
  {
    "label": "glExtGetShadersQCOM()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glExtGetShadersQCOM(GLuint *shaders, GLint maxShaders, GLint *numShaders)"
  },
  {
    "label": "glExtGetProgramsQCOM()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glExtGetProgramsQCOM(GLuint *programs, GLint maxPrograms, GLint *numPrograms)"
  },
  {
    "label": "glExtIsProgramBinaryQCOM()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glExtIsProgramBinaryQCOM(GLuint program)"
  },
  {
    "label": "glExtGetProgramBinarySourceQCOM()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar *source, GLint *length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_QCOM_frame_extrapolation # define GL_QCOM_frame_extrapolation 1 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLEXTRAPOLATETEX2DQCOMPROC) (GLuint src1, GLuint src2, GLuint output, GLfloat scaleFactor)"
  },
  {
    "label": "glExtrapolateTex2DQCOM()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glExtrapolateTex2DQCOM(GLuint src1, GLuint src2, GLuint output, GLfloat scaleFactor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_QCOM_framebuffer_foveated # define GL_QCOM_framebuffer_foveated 1 # define GL_FOVEATION_ENABLE_BIT_QCOM 0 x00000001 # define GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM 0 x00000002 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERFOVEATIONCONFIGQCOMPROC) (GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint *providedFeatures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERFOVEATIONPARAMETERSQCOMPROC) (GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea)"
  },
  {
    "label": "glFramebufferFoveationConfigQCOM()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferFoveationConfigQCOM(GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint *providedFeatures)"
  },
  {
    "label": "glFramebufferFoveationParametersQCOM()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferFoveationParametersQCOM(GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_QCOM_motion_estimation # define GL_QCOM_motion_estimation 1 # define GL_MOTION_ESTIMATION_SEARCH_BLOCK_X_QCOM 0 x8C90 # define GL_MOTION_ESTIMATION_SEARCH_BLOCK_Y_QCOM 0 x8C91 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXESTIMATEMOTIONQCOMPROC) (GLuint ref, GLuint target, GLuint output)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXESTIMATEMOTIONREGIONSQCOMPROC) (GLuint ref, GLuint target, GLuint output, GLuint mask)"
  },
  {
    "label": "glTexEstimateMotionQCOM()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexEstimateMotionQCOM(GLuint ref, GLuint target, GLuint output)"
  },
  {
    "label": "glTexEstimateMotionRegionsQCOM()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexEstimateMotionRegionsQCOM(GLuint ref, GLuint target, GLuint output, GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_QCOM_perfmon_global_mode # define GL_QCOM_perfmon_global_mode 1 # define GL_PERFMON_GLOBAL_MODE_QCOM 0 x8FA0 # endif # ifndef GL_QCOM_render_shared_exponent # define GL_QCOM_render_shared_exponent 1 # endif # ifndef GL_QCOM_shader_framebuffer_fetch_noncoherent # define GL_QCOM_shader_framebuffer_fetch_noncoherent 1 # define GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM 0 x96A2 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERFETCHBARRIERQCOMPROC) (void)"
  },
  {
    "label": "glFramebufferFetchBarrierQCOM()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferFetchBarrierQCOM(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_QCOM_shader_framebuffer_fetch_rate # define GL_QCOM_shader_framebuffer_fetch_rate 1 # endif # ifndef GL_QCOM_shading_rate # define GL_QCOM_shading_rate 1 # define GL_SHADING_RATE_QCOM 0 x96A4 # define GL_SHADING_RATE_PRESERVE_ASPECT_RATIO_QCOM 0 x96A5 # define GL_SHADING_RATE_1X1_PIXELS_QCOM 0 x96A6 # define GL_SHADING_RATE_1X2_PIXELS_QCOM 0 x96A7 # define GL_SHADING_RATE_2X1_PIXELS_QCOM 0 x96A8 # define GL_SHADING_RATE_2X2_PIXELS_QCOM 0 x96A9 # define GL_SHADING_RATE_4X2_PIXELS_QCOM 0 x96AC # define GL_SHADING_RATE_4X4_PIXELS_QCOM 0 x96AE typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSHADINGRATEQCOMPROC) (GLenum rate)"
  },
  {
    "label": "glShadingRateQCOM()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glShadingRateQCOM(GLenum rate)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_QCOM_texture_foveated # define GL_QCOM_texture_foveated 1 # define GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM 0 x8BFB # define GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM 0 x8BFC # define GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM 0 x8BFD # define GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM 0 x8BFE # define GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM 0 x8BFF typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXTUREFOVEATIONPARAMETERSQCOMPROC) (GLuint texture, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea)"
  },
  {
    "label": "glTextureFoveationParametersQCOM()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glTextureFoveationParametersQCOM(GLuint texture, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_QCOM_texture_foveated2 # define GL_QCOM_texture_foveated2 1 # define GL_TEXTURE_FOVEATED_CUTOFF_DENSITY_QCOM 0 x96A0 # endif # ifndef GL_QCOM_texture_foveated_subsampled_layout # define GL_QCOM_texture_foveated_subsampled_layout 1 # define GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM 0 x00000004 # define GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM 0 x8FA1 # endif # ifndef GL_QCOM_tiled_rendering # define GL_QCOM_tiled_rendering 1 # define GL_COLOR_BUFFER_BIT0_QCOM 0 x00000001 # define GL_COLOR_BUFFER_BIT1_QCOM 0 x00000002 # define GL_COLOR_BUFFER_BIT2_QCOM 0 x00000004 # define GL_COLOR_BUFFER_BIT3_QCOM 0 x00000008 # define GL_COLOR_BUFFER_BIT4_QCOM 0 x00000010 # define GL_COLOR_BUFFER_BIT5_QCOM 0 x00000020 # define GL_COLOR_BUFFER_BIT6_QCOM 0 x00000040 # define GL_COLOR_BUFFER_BIT7_QCOM 0 x00000080 # define GL_DEPTH_BUFFER_BIT0_QCOM 0 x00000100 # define GL_DEPTH_BUFFER_BIT1_QCOM 0 x00000200 # define GL_DEPTH_BUFFER_BIT2_QCOM 0 x00000400 # define GL_DEPTH_BUFFER_BIT3_QCOM 0 x00000800 # define GL_DEPTH_BUFFER_BIT4_QCOM 0 x00001000 # define GL_DEPTH_BUFFER_BIT5_QCOM 0 x00002000 # define GL_DEPTH_BUFFER_BIT6_QCOM 0 x00004000 # define GL_DEPTH_BUFFER_BIT7_QCOM 0 x00008000 # define GL_STENCIL_BUFFER_BIT0_QCOM 0 x00010000 # define GL_STENCIL_BUFFER_BIT1_QCOM 0 x00020000 # define GL_STENCIL_BUFFER_BIT2_QCOM 0 x00040000 # define GL_STENCIL_BUFFER_BIT3_QCOM 0 x00080000 # define GL_STENCIL_BUFFER_BIT4_QCOM 0 x00100000 # define GL_STENCIL_BUFFER_BIT5_QCOM 0 x00200000 # define GL_STENCIL_BUFFER_BIT6_QCOM 0 x00400000 # define GL_STENCIL_BUFFER_BIT7_QCOM 0 x00800000 # define GL_MULTISAMPLE_BUFFER_BIT0_QCOM 0 x01000000 # define GL_MULTISAMPLE_BUFFER_BIT1_QCOM 0 x02000000 # define GL_MULTISAMPLE_BUFFER_BIT2_QCOM 0 x04000000 # define GL_MULTISAMPLE_BUFFER_BIT3_QCOM 0 x08000000 # define GL_MULTISAMPLE_BUFFER_BIT4_QCOM 0 x10000000 # define GL_MULTISAMPLE_BUFFER_BIT5_QCOM 0 x20000000 # define GL_MULTISAMPLE_BUFFER_BIT6_QCOM 0 x40000000 # define GL_MULTISAMPLE_BUFFER_BIT7_QCOM 0 x80000000 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSTARTTILINGQCOMPROC) (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLENDTILINGQCOMPROC) (GLbitfield preserveMask)"
  },
  {
    "label": "glStartTilingQCOM()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)"
  },
  {
    "label": "glEndTilingQCOM()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glEndTilingQCOM(GLbitfield preserveMask)"
  }
]