[
  {
    "label": "FMetalDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalDevice"
  },
  {
    "label": "FMetalRayTracingCompactionRequestHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalRayTracingCompactionRequestHandler"
  },
  {
    "label": "FMetalDeferredDeleteObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalDeferredDeleteObject"
  },
  {
    "label": "FMetalDynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalDynamicRHI"
  },
  {
    "label": "FRHICommandListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListBase"
  },
  {
    "label": "FUpdateTextureRegion2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion2D"
  },
  {
    "label": "FUpdateTextureRegion3D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion3D"
  },
  {
    "label": "IRHICommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHICommandContext"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FDeferredDeleteData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredDeleteData"
  },
  {
    "label": "IRCompiler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IRCompiler"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RHI . h \" # include \" MetalThirdParty . h \" # include \" MetalState . h \" # include \" MetalResources . h \" # include \" MetalRHIContext . h \" # include \" MetalViewport . h \" class FMetalDevice ; # if METAL_RHI_RAYTRACING class FMetalRayTracingCompactionRequestHandler ; # endif struct FMetalDeferredDeleteObject { typedef TVariant<FMetalBufferPtr,MTLTexturePtr,NS::Object*,# if PLATFORM_SUPPORTS_BINDLESS_RENDERING FRHIDescriptorHandle,# endif FMetalFence*,TUniqueFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FMetalDeferredDeleteObject()",
    "kind": "Method",
    "detail": "Function (TObjectStorage Storage ;)",
    "insertText": "FMetalDeferredDeleteObject(FMetalBufferPtr InBuffer) : Storage(TInPlaceType<FMetalBufferPtr>(), InBuffer)"
  },
  {
    "label": "FMetalDeferredDeleteObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMetalDeferredDeleteObject(MTLTexturePtr InTexture) : Storage(TInPlaceType<MTLTexturePtr>(), InTexture)"
  },
  {
    "label": "FMetalDeferredDeleteObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMetalDeferredDeleteObject(NS::Object* InObject) : Storage(TInPlaceType<NS::Object*>(), InObject)"
  },
  {
    "label": "FMetalDeferredDeleteObject()",
    "kind": "Method",
    "detail": "Function (} # if PLATFORM_SUPPORTS_BINDLESS_RENDERING)",
    "insertText": "FMetalDeferredDeleteObject(FRHIDescriptorHandle InHandle) : Storage(TInPlaceType<FRHIDescriptorHandle>(), InHandle)"
  },
  {
    "label": "FMetalDeferredDeleteObject()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "FMetalDeferredDeleteObject(FMetalFence* InFence) : Storage(TInPlaceType<FMetalFence*>(), InFence)"
  },
  {
    "label": "FMetalDeferredDeleteObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMetalDeferredDeleteObject(TUniqueFunction<void()>&& Func) : Storage(TInPlaceType<TUniqueFunction<void()>*>(), new TUniqueFunction<void()>(MoveTemp(Func)))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } ; class FMetalDynamicRHI : public FDynamicRHI { FMetalDynamicRHI* Singleton = nullptr ; public : FMetalDynamicRHI&)",
    "insertText": "Get()"
  },
  {
    "label": "FMetalDynamicRHI()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalDynamicRHI()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetInterfaceType()",
    "kind": "Method",
    "detail": "Function (} ERHIInterfaceType)",
    "insertText": "GetInterfaceType()"
  },
  {
    "label": "RHIEndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndFrame(const FRHIEndFrameArgs& Args)"
  },
  {
    "label": "RHICreateShaderLibrary()",
    "kind": "Method",
    "detail": "Function (FRHIShaderLibraryRef)",
    "insertText": "RHICreateShaderLibrary(EShaderPlatform Platform, FString const& FilePath, FString const& Name)"
  },
  {
    "label": "RHICreateSamplerState()",
    "kind": "Method",
    "detail": "Function (FSamplerStateRHIRef)",
    "insertText": "RHICreateSamplerState(const FSamplerStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateRasterizerState()",
    "kind": "Method",
    "detail": "Function (FRasterizerStateRHIRef)",
    "insertText": "RHICreateRasterizerState(const FRasterizerStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateDepthStencilState()",
    "kind": "Method",
    "detail": "Function (FDepthStencilStateRHIRef)",
    "insertText": "RHICreateDepthStencilState(const FDepthStencilStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateBlendState()",
    "kind": "Method",
    "detail": "Function (FBlendStateRHIRef)",
    "insertText": "RHICreateBlendState(const FBlendStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (FVertexDeclarationRHIRef)",
    "insertText": "RHICreateVertexDeclaration(const FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "RHICreatePixelShader()",
    "kind": "Method",
    "detail": "Function (FPixelShaderRHIRef)",
    "insertText": "RHICreatePixelShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateVertexShader()",
    "kind": "Method",
    "detail": "Function (FVertexShaderRHIRef)",
    "insertText": "RHICreateVertexShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateGeometryShader()",
    "kind": "Method",
    "detail": "Function (FGeometryShaderRHIRef)",
    "insertText": "RHICreateGeometryShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateComputeShader()",
    "kind": "Method",
    "detail": "Function (FComputeShaderRHIRef)",
    "insertText": "RHICreateComputeShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateMeshShader()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_MESH_SHADERS FMeshShaderRHIRef)",
    "insertText": "RHICreateMeshShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateAmplificationShader()",
    "kind": "Method",
    "detail": "Function (FAmplificationShaderRHIRef)",
    "insertText": "RHICreateAmplificationShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateBoundShaderState()",
    "kind": "Method",
    "detail": "Function (# endif FBoundShaderStateRHIRef)",
    "insertText": "RHICreateBoundShaderState(FRHIVertexDeclaration* VertexDeclaration, FRHIVertexShader* VertexShader, FRHIPixelShader* PixelShader, FRHIGeometryShader* GeometryShader)"
  },
  {
    "label": "RHICreateGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineStateRHIRef)",
    "insertText": "RHICreateGraphicsPipelineState(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHICreateComputePipelineState()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FRHIComputePipelineState>)",
    "insertText": "RHICreateComputePipelineState(FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "RHICreateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (FUniformBufferRHIRef)",
    "insertText": "RHICreateUniformBuffer(const void* Contents, const FRHIUniformBufferLayout* Layout, EUniformBufferUsage Usage, EUniformBufferValidation Validation)"
  },
  {
    "label": "RHICreateBuffer()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef)",
    "insertText": "RHICreateBuffer(FRHICommandListBase& RHICmdList, FRHIBufferDesc const& Desc, ERHIAccess ResourceState, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "RHIReplaceResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReplaceResources(FRHICommandListBase& RHICmdList, TArray<FRHIResourceReplaceInfo>&& ReplaceInfos)"
  },
  {
    "label": "RHILockBuffer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockBuffer(class FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, uint32 Offset, uint32 SizeRHI, EResourceLockMode LockMode)"
  },
  {
    "label": "RHIUnlockBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockBuffer(class FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer)"
  },
  {
    "label": "LockBuffer_BottomOfPipe()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "LockBuffer_BottomOfPipe(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, uint32 Offset, uint32 SizeRHI, EResourceLockMode LockMode)"
  },
  {
    "label": "UnlockBuffer_BottomOfPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockBuffer_BottomOfPipe(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer)"
  },
  {
    "label": "RHICreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (FShaderResourceViewRHIRef)",
    "insertText": "RHICreateShaderResourceView(class FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "RHICreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (FUnorderedAccessViewRHIRef)",
    "insertText": "RHICreateUnorderedAccessView(class FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "RHICreateResourceCollection()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_BINDLESS_RENDERING FRHIResourceCollectionRef)",
    "insertText": "RHICreateResourceCollection(FRHICommandListBase& RHICmdList, TConstArrayView<FRHIResourceCollectionMember> InMembers)"
  },
  {
    "label": "RHICalcTexturePlatformSize()",
    "kind": "Method",
    "detail": "Function (# endif FRHICalcTextureSizeResult)",
    "insertText": "RHICalcTexturePlatformSize(FRHITextureDesc const& Desc, uint32 FirstMipIndex)"
  },
  {
    "label": "RHIGetMinimumAlignmentForBufferBackedSRV()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "RHIGetMinimumAlignmentForBufferBackedSRV(EPixelFormat Format)"
  },
  {
    "label": "RHIGetTextureMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIGetTextureMemoryStats(FTextureMemoryStats& OutStats)"
  },
  {
    "label": "RHIGetTextureMemoryVisualizeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIGetTextureMemoryVisualizeData(FColor* TextureData,int32 SizeX,int32 SizeY,int32 Pitch,int32 PixelSize)"
  },
  {
    "label": "RHICreateTexture()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateTexture(FRHICommandListBase& RHICmdList, const FRHITextureCreateDesc& CreateDesc)"
  },
  {
    "label": "RHIAsyncCreateTexture2D()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHIAsyncCreateTexture2D(uint32 SizeX, uint32 SizeY, uint8 Format, uint32 NumMips, ETextureCreateFlags Flags, ERHIAccess InResourceState, void** InitialMipData, uint32 NumInitialMips, const TCHAR* DebugName, FGraphEventRef& OutCompletionEvent)"
  },
  {
    "label": "RHIComputeMemorySize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RHIComputeMemorySize(FRHITexture* TextureRHI)"
  },
  {
    "label": "RHIAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHIAsyncReallocateTexture2D(FRHITexture* Texture2D, int32 NewMipCount, int32 NewSizeX, int32 NewSizeY, FThreadSafeCounter* RequestStatus)"
  },
  {
    "label": "RHIFinalizeAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "RHIFinalizeAsyncReallocateTexture2D(FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "RHICancelAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "RHICancelAsyncReallocateTexture2D(FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "RHILockTexture2D()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTexture2D(FRHITexture* Texture, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail, uint64* OutLockedByteCount = nullptr)"
  },
  {
    "label": "RHIUnlockTexture2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTexture2D(FRHITexture* Texture, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHILockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUpdateTexture2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateTexture2D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion2D& UpdateRegion, uint32 SourcePitch, const uint8* SourceData)"
  },
  {
    "label": "RHIUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateTexture3D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion3D& UpdateRegion, uint32 SourceRowPitch, uint32 SourceDepthPitch, const uint8* SourceData)"
  },
  {
    "label": "RHILockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBindDebugLabelName(FRHICommandListBase& RHICmdList, FRHITexture* Texture, const TCHAR* Name)"
  },
  {
    "label": "RHIReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceData(FRHITexture* Texture,FIntRect Rect,TArray<FColor>& OutData,FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHIReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceData(FRHITexture* TextureRHI, FIntRect InRect, TArray<FLinearColor>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHIMapStagingSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIMapStagingSurface(FRHITexture* Texture, FRHIGPUFence* Fence, void*& OutData, int32& OutWidth, int32& OutHeight, uint32 GPUIndex = 0)"
  },
  {
    "label": "RHIUnmapStagingSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnmapStagingSurface(FRHITexture* Texture, uint32 GPUIndex = 0)"
  },
  {
    "label": "RHIReadSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceFloatData(FRHITexture* Texture,FIntRect Rect,TArray<FFloat16Color>& OutData,ECubeFace CubeFace,int32 ArrayIndex,int32 MipIndex)"
  },
  {
    "label": "RHIRead3DSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRead3DSurfaceFloatData(FRHITexture* Texture,FIntRect Rect,FIntPoint ZMinMax,TArray<FFloat16Color>& OutData)"
  },
  {
    "label": "RHICreateRenderQuery()",
    "kind": "Method",
    "detail": "Function (FRenderQueryRHIRef)",
    "insertText": "RHICreateRenderQuery(ERenderQueryType QueryType)"
  },
  {
    "label": "RHIGetRenderQueryResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIGetRenderQueryResult(FRHIRenderQuery* RenderQuery, uint64& OutResult, bool bWait, uint32 GPUIndex = INDEX_NONE)"
  },
  {
    "label": "RHIGetViewportBackBuffer()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHIGetViewportBackBuffer(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIAdvanceFrameForGetViewportBackBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIAdvanceFrameForGetViewportBackBuffer(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIFlushResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIFlushResources()"
  },
  {
    "label": "RHIGetGPUFrameCycles()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RHIGetGPUFrameCycles(uint32 GPUIndex = 0)"
  },
  {
    "label": "RHICreateViewport()",
    "kind": "Method",
    "detail": "Function (FViewportRHIRef)",
    "insertText": "RHICreateViewport(void* WindowHandle, uint32 SizeX, uint32 SizeY, bool bIsFullscreen, EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "RHIResizeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIResizeViewport(FRHIViewport* Viewport, uint32 SizeX, uint32 SizeY, bool bIsFullscreen)"
  },
  {
    "label": "RHIResizeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIResizeViewport(FRHIViewport* Viewport, uint32 SizeX, uint32 SizeY, bool bIsFullscreen, EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "RHITick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHITick(float DeltaTime)"
  },
  {
    "label": "RHIBlockUntilGPUIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBlockUntilGPUIdle()"
  },
  {
    "label": "RHIGetAvailableResolutions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIGetAvailableResolutions(FScreenResolutionArray& Resolutions, bool bIgnoreRefreshRate)"
  },
  {
    "label": "RHIGetSupportedResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIGetSupportedResolution(uint32& Width, uint32& Height)"
  },
  {
    "label": "RHIGetNativeDevice()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHIGetNativeDevice()"
  },
  {
    "label": "RHIGetNativeGraphicsQueue()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHIGetNativeGraphicsQueue()"
  },
  {
    "label": "RHIGetNativeComputeQueue()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHIGetNativeComputeQueue()"
  },
  {
    "label": "RHIGetNativeInstance()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHIGetNativeInstance()"
  },
  {
    "label": "RHIGetDefaultContext()",
    "kind": "Method",
    "detail": "Function (class IRHICommandContext*)",
    "insertText": "RHIGetDefaultContext()"
  },
  {
    "label": "RHIGetUploadContext()",
    "kind": "Method",
    "detail": "Function (IRHIUploadContext*)",
    "insertText": "RHIGetUploadContext()"
  },
  {
    "label": "RHIGetCommandContext()",
    "kind": "Method",
    "detail": "Function (IRHIComputeContext*)",
    "insertText": "RHIGetCommandContext(ERHIPipeline Pipeline, FRHIGPUMask GPUMask)"
  },
  {
    "label": "RHIProcessDeleteQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIProcessDeleteQueue()"
  },
  {
    "label": "RHIFinalizeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIFinalizeContext(FRHIFinalizeContextArgs&& Args, TRHIPipelineArray<IRHIPlatformCommandList*>& Output)"
  },
  {
    "label": "RHISubmitCommandLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISubmitCommandLists(FRHISubmitCommandListsArgs&& Args)"
  },
  {
    "label": "AsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "AsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, int32 NewMipCount, int32 NewSizeX, int32 NewSizeY, FThreadSafeCounter* RequestStatus)"
  },
  {
    "label": "FinalizeAsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "FinalizeAsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "CancelAsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "CancelAsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "LockTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "LockTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail, bool bNeedsDefaultRHIFlush = true, uint64* OutLockedByteCount = nullptr)"
  },
  {
    "label": "UnlockTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 MipIndex, bool bLockWithinMiptail, bool bNeedsDefaultRHIFlush = true)"
  },
  {
    "label": "RHIBeginUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (FUpdateTexture3DData)",
    "insertText": "RHIBeginUpdateTexture3D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion3D& UpdateRegion)"
  },
  {
    "label": "RHIEndUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndUpdateTexture3D(FRHICommandListBase& RHICmdList, FUpdateTexture3DData& UpdateData)"
  },
  {
    "label": "RHICreateTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICreateTransition(FRHITransition* Transition, const FRHITransitionCreateInfo& CreateInfo)"
  },
  {
    "label": "RHIReleaseTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReleaseTransition(FRHITransition* Transition)"
  },
  {
    "label": "RHICreateGPUFence()",
    "kind": "Method",
    "detail": "Function (FGPUFenceRHIRef)",
    "insertText": "RHICreateGPUFence(const FName &Name)"
  },
  {
    "label": "RHICreateStagingBuffer()",
    "kind": "Method",
    "detail": "Function (FStagingBufferRHIRef)",
    "insertText": "RHICreateStagingBuffer()"
  },
  {
    "label": "RHILockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockStagingBuffer(FRHIStagingBuffer* StagingBuffer, FRHIGPUFence* Fence, uint32 Offset, uint32 SizeRHI)"
  },
  {
    "label": "RHIUnlockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockStagingBuffer(FRHIStagingBuffer* StagingBuffer)"
  },
  {
    "label": "RHICreateShaderLibrary_RenderThread()",
    "kind": "Method",
    "detail": "Function (FRHIShaderLibraryRef)",
    "insertText": "RHICreateShaderLibrary_RenderThread(class FRHICommandListImmediate& RHICmdList, EShaderPlatform Platform, FString FilePath, FString Name)"
  },
  {
    "label": "RHIUpdateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateUniformBuffer(FRHICommandListBase& RHICmdList, FRHIUniformBuffer* UniformBufferRHI, const void* Contents)"
  },
  {
    "label": "RHIGetPlatformTextureMaxSampleCount()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "RHIGetPlatformTextureMaxSampleCount()"
  },
  {
    "label": "RHICalcRayTracingSceneSize()",
    "kind": "Method",
    "detail": "Function (# if METAL_RHI_RAYTRACING FRayTracingAccelerationStructureSize)",
    "insertText": "RHICalcRayTracingSceneSize(const FRayTracingSceneInitializer& Initializer)"
  },
  {
    "label": "RHICalcRayTracingGeometrySize()",
    "kind": "Method",
    "detail": "Function (FRayTracingAccelerationStructureSize)",
    "insertText": "RHICalcRayTracingGeometrySize(const FRayTracingGeometryInitializer& Initializer)"
  },
  {
    "label": "RHICreateRayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (FRayTracingGeometryRHIRef)",
    "insertText": "RHICreateRayTracingGeometry(FRHICommandListBase& RHICmdList, const FRayTracingGeometryInitializer& Initializer)"
  },
  {
    "label": "RHICreateRayTracingScene()",
    "kind": "Method",
    "detail": "Function (FRayTracingSceneRHIRef)",
    "insertText": "RHICreateRayTracingScene(FRayTracingSceneInitializer Initializer)"
  },
  {
    "label": "RHICreateRayTracingShader()",
    "kind": "Method",
    "detail": "Function (FRayTracingShaderRHIRef)",
    "insertText": "RHICreateRayTracingShader(TArrayView<const uint8> Code, const FSHAHash& Hash, EShaderFrequency ShaderFrequency)"
  },
  {
    "label": "RHICreateRayTracingPipelineState()",
    "kind": "Method",
    "detail": "Function (FRayTracingPipelineStateRHIRef)",
    "insertText": "RHICreateRayTracingPipelineState(const FRayTracingPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHICreateShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (FShaderBindingTableRHIRef)",
    "insertText": "RHICreateShaderBindingTable(FRHICommandListBase& RHICmdList, const FRayTracingShaderBindingTableInitializer& Initializer)"
  },
  {
    "label": "RHICreateTextureReference()",
    "kind": "Method",
    "detail": "Function (# endif FTextureReferenceRHIRef)",
    "insertText": "RHICreateTextureReference(FRHICommandListBase& RHICmdList, FRHITexture* InReferencedTexture)"
  },
  {
    "label": "RHIUpdateTextureReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateTextureReference(FRHICommandListBase& RHICmdList, FRHITextureReference* TextureRef, FRHITexture* NewTexture)"
  },
  {
    "label": "RHIComputePrecachePSOHash()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "RHIComputePrecachePSOHash(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHIMatchPrecachePSOInitializers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIMatchPrecachePSOInitializers(const FGraphicsPipelineStateInitializer& LHS, const FGraphicsPipelineStateInitializer& RHS)"
  },
  {
    "label": "RHIBeginRenderQuery_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginRenderQuery_TopOfPipe(FRHICommandListBase& RHICmdList, FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIEndRenderQuery_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderQuery_TopOfPipe(FRHICommandListBase& RHICmdList, FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "DeferredDelete()",
    "kind": "Method",
    "detail": "Function (template<. . . Args> void)",
    "insertText": "DeferredDelete(Args&&... InArgs)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&ObjectsToDeleteCS)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (ObjectsToDelete .)",
    "insertText": "Emplace(Forward<Args>(InArgs)...)"
  },
  {
    "label": "AddDeferredDeleteFence()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDeferredDeleteFence(TSharedPtr<FMetalCommandBufferFence, ESPMode::ThreadSafe> Fence)"
  },
  {
    "label": "GatherDeferredDeleteObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDeferredDeleteObjects(TArray<FMetalDeferredDeleteObject>& DeferredDeleteObjects, TArray<TSharedPtr<FMetalCommandBufferFence, ESPMode::ThreadSafe>>& WaitFences)"
  },
  {
    "label": "ProcessDeferredDeleteQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDeferredDeleteQueue()"
  }
]