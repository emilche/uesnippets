[
  {
    "label": "SModalDialogWithCheckbox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SModalDialogWithCheckbox"
  },
  {
    "label": "FDragDropConfirmation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropConfirmation"
  },
  {
    "label": "EResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EResult"
  },
  {
    "label": "FSuppressableWarningDialog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSuppressableWarningDialog"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSetupInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetupInfo"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "SGenericDialogWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGenericDialogWidget"
  },
  {
    "label": "SModalEditorDialog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SModalEditorDialog"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnMsgDlgResult, const TSharedRef<SWindow>&, EAppReturnType::Type)"
  },
  {
    "label": "OpenMsgDlgInt_NonModal()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWindow>)",
    "insertText": "OpenMsgDlgInt_NonModal(EAppMsgType::Type InMessageType, const FText& InMessage, const FText& InTitle, FOnMsgDlgResult ResultCallback)"
  },
  {
    "label": "OpenDialog()",
    "kind": "Method",
    "detail": "Function (class FDragDropConfirmation { public : enum EResult { Folder,Contents,Cancel } ; EResult)",
    "insertText": "OpenDialog(const FString& ConfirmationTitle, const FString& Message, const FString& FolderOption, const FString& ContentsOption, const FString& CancelOption)"
  },
  {
    "label": "FSetupInfo()",
    "kind": "Method",
    "detail": "Function (EMode DialogMode ; float WrapMessageAt ; FText ConfirmText ; FText CancelText ; FText CheckBoxText ; struct FSlateBrush* Image ;)",
    "insertText": "FSetupInfo(const FText& InMessage, const FText& InTitle, const FString& InIniSettingName, const FString& InIniSettingFileName=GEditorPerProjectIni ) : Message(InMessage) , Title(InTitle) , IniSettingName(InIniSettingName) , IniSettingFileName(InIniSettingFileName) , bDefaultToSuppressInTheFuture(false) , bDontPersistSuppressionAcrossSessions(false) , DialogMode(EMode::Default) , WrapMessageAt(512.0f) , ConfirmText() , CancelText() , CheckBoxText(NSLOCTEXT(\"ModalDialogs\", \"DefaultCheckBoxMessage\", \"Don't show this again\")) , Image(NULL)"
  },
  {
    "label": "FSuppressableWarningDialog()",
    "kind": "Method",
    "detail": "Function (} } ; enum EResult { Suppressed = - 1,Cancel = 0,Confirm = 1,} ;)",
    "insertText": "FSuppressableWarningDialog(const FSuppressableWarningDialog::FSetupInfo& Info)"
  },
  {
    "label": "ShowModal()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "ShowModal()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (private : FString IniSettingName ; FString ResponseIniSettingName ; FString IniSettingFileName ; FText Prompt ; TSharedPtr<SWindow> ModalWindow ; TSharedPtr<class SModalDialogWithCheckbox> MessageBox ; EMode DialogMode ; TSet<FString> SuppressedInTheSession ; } ; class SGenericDialogWidget : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGenericDialogWidget ) : _UseScrollBox(true) , _ScrollBoxMaxHeight(300)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(bool, UseScrollBox ) SLATE_ARGUMENT( int32, ScrollBoxMaxHeight ) SLATE_DEFAULT_SLOT( FArguments, Content ) SLATE_EVENT( FSimpleDelegate, OnOkPressed ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "SetWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindow(TSharedPtr<SWindow> InWindow)"
  },
  {
    "label": "OpenDialog()",
    "kind": "Method",
    "detail": "Function (MyWindow = InWindow ; } void)",
    "insertText": "OpenDialog(const FText& InDialogTitle, const TSharedRef< SWidget >& DisplayContent, const FArguments& InArgs = FArguments(), bool bAsModalDialog = false)"
  },
  {
    "label": "OnOK_Clicked()",
    "kind": "Method",
    "detail": "Function (private : FReply)",
    "insertText": "OnOK_Clicked(void)"
  },
  {
    "label": "CreateModalDialogWindow()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<SWindow> MyWindow ; FSimpleDelegate OkPressedDelegate ; } ; namespace UE::Private { TSharedRef<SWindow>)",
    "insertText": "CreateModalDialogWindow(const FText& InTitle, TSharedRef<SWidget> Contents, ESizingRule Sizing, FVector2D MinDimensions)"
  },
  {
    "label": "ShowModalDialogWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowModalDialogWindow(TSharedRef<SWindow> Window)"
  },
  {
    "label": "ShowNonModalDialogWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowNonModalDialogWindow(TSharedRef<SWindow> Window)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} template<ResultType> class SModalEditorDialog : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGenericDialogWidget)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() ResultType ShowModalDialog(const FText& InTitle)"
  },
  {
    "label": "CreateModalDialogWindow()",
    "kind": "Method",
    "detail": "Function (Window = UE::)",
    "insertText": "CreateModalDialogWindow(InTitle, AsShared(), Sizing, MinDimensions)"
  },
  {
    "label": "SetWidgetToFocusOnActivate()",
    "kind": "Method",
    "detail": "Function (Window ->)",
    "insertText": "SetWidgetToFocusOnActivate(GetWidgetToFocusOnActivate())"
  },
  {
    "label": "BindLambda()",
    "kind": "Method",
    "detail": "Function (TOptional<ResultType> Result ; OnFinished .)",
    "insertText": "BindLambda([&Result](ResultType InResult) { Result.Emplace(MoveTemp(InResult)); })"
  },
  {
    "label": "ShowModalDialogWindow()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "ShowModalDialogWindow(Window.ToSharedRef())"
  },
  {
    "label": "ShowNonModal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShowNonModal(const FText& InTitle, TDelegate<void(ResultType)> InOnFinished)"
  },
  {
    "label": "ShowNonModalDialogWindow()",
    "kind": "Method",
    "detail": "Function (OnFinished = InOnFinished ; UE::)",
    "insertText": "ShowNonModalDialogWindow(Window.ToSharedRef())"
  },
  {
    "label": "ShowNonModal()",
    "kind": "Method",
    "detail": "Function (} template<CallbackType> void)",
    "insertText": "ShowNonModal(const FText& InTitle, CallbackType InOnFinished)"
  },
  {
    "label": "BindLambda()",
    "kind": "Method",
    "detail": "Function (OnFinished .)",
    "insertText": "BindLambda(InOnFinished)"
  },
  {
    "label": "ProvideResult()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "ProvideResult(ResultType InResult)"
  },
  {
    "label": "RequestDestroyWindow()",
    "kind": "Method",
    "detail": "Function (Window ->)",
    "insertText": "RequestDestroyWindow()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Window .)",
    "insertText": "Reset()"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnFinished .)",
    "insertText": "ExecuteIfBound(MoveTemp(InResult))"
  },
  {
    "label": "GetWidgetToFocusOnActivate()",
    "kind": "Method",
    "detail": "Function (OnFinished = { } ; } TSharedPtr<SWidget>)",
    "insertText": "GetWidgetToFocusOnActivate()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<SWindow> Window ; TDelegate<)",
    "insertText": "void(ResultType)"
  },
  {
    "label": "PromptUserIfExistingObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptUserIfExistingObject(const FString& Name, const FString& Package, class UPackage*& Pkg)"
  },
  {
    "label": "PromptUserForDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptUserForDirectory(FString& OutDirectory, const FString& Message, const FString& DefaultPath)"
  }
]