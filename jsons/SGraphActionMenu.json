[
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "IToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolTip"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPanel"
  },
  {
    "label": "SSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSearchBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "FCreateWidgetForActionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateWidgetForActionData"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FGraphActionNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphActionNode"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FEdGraphSchemaAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdGraphSchemaAction"
  },
  {
    "label": "FGraphActionListBuilderBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphActionListBuilderBase"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "FCreateWidgetForActionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateWidgetForActionData"
  },
  {
    "label": "FCustomExpanderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomExpanderData"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const FCreateWidgetForActionData* InCreateData)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct( const FArguments& InArgs, bool bIsReadOnly = true )"
  },
  {
    "label": "RefreshAllActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshAllActions(bool bPreserveExpansion, bool bHandleOnSelectionEvent = true)"
  },
  {
    "label": "SetSectionExpansion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSectionExpansion(const TMap<int32, bool>& SectionExpansion)"
  },
  {
    "label": "GetFilterTextBox()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SEditableTextBox>)",
    "insertText": "GetFilterTextBox()"
  },
  {
    "label": "OnRequestRenameOnActionNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRequestRenameOnActionNode()"
  },
  {
    "label": "SelectItemByName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectItemByName(const FName& ItemName, ESelectInfo::Type SelectInfo = ESelectInfo::Direct, int32 SectionId = INDEX_NONE, bool bIsCategory = false )"
  },
  {
    "label": "ExpandCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandCategory(const FText& CategoryName)"
  },
  {
    "label": "OnMouseButtonDownEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnMouseButtonDownEvent( TWeakPtr<FEdGraphSchemaAction> InAction )"
  },
  {
    "label": "UpdateForNewActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateForNewActions(int32 IdxStart)"
  },
  {
    "label": "GenerateFilteredItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateFilteredItems(bool bPreserveExpansion)"
  },
  {
    "label": "MarkActiveSuggestion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkActiveSuggestion()"
  },
  {
    "label": "TryToSpawnActiveSuggestion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryToSpawnActiveSuggestion()"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged( const FText& InFilterText )"
  },
  {
    "label": "OnFilterTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextCommitted(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnGetChildrenForCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetChildrenForCategory( TSharedPtr<FGraphActionNode> InItem, TArray< TSharedPtr<FGraphActionNode> >& OutChildren )"
  },
  {
    "label": "MakeWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "MakeWidget( TSharedPtr<FGraphActionNode> InItem, const TSharedRef<STableViewBase>& OwnerTable, bool bIsReadOnly )"
  },
  {
    "label": "OnItemSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemSelected( TSharedPtr< FGraphActionNode > InSelectedItem, ESelectInfo::Type SelectInfo )"
  },
  {
    "label": "HandleSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSelection( TSharedPtr< FGraphActionNode > &InSelectedItem, ESelectInfo::Type InSelectionType )"
  },
  {
    "label": "OnItemDoubleClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemDoubleClicked( TSharedPtr< FGraphActionNode > InClickedItem )"
  },
  {
    "label": "OnItemDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnItemDragDetected( const FGeometry& MyGeometry, const FPointerEvent& MouseEvent )"
  },
  {
    "label": "OnNameTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNameTextCommitted(const FText& NewText, ETextCommit::Type InTextCommit, TWeakPtr< FGraphActionNode > InAction)"
  },
  {
    "label": "OnItemScrolledIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemScrolledIntoView( TSharedPtr<FGraphActionNode> InActionNode, const TSharedPtr<ITableRow>& InWidget )"
  },
  {
    "label": "OnSetExpansionRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetExpansionRecursive(TSharedPtr<FGraphActionNode> InTreeNode, bool bInIsItemExpanded)"
  },
  {
    "label": "ScoreAndAddActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScoreAndAddActions(int32 StartingIndex = INDEX_NONE)"
  },
  {
    "label": "SelectPreviousAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectPreviousAction(int32 Num = 1)"
  },
  {
    "label": "SelectNextAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNextAction(int32 Num = 1)"
  },
  {
    "label": "SelectFirstAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectFirstAction()"
  },
  {
    "label": "SelectLastAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectLastAction()"
  },
  {
    "label": "GetFirstAction()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGraphActionNode>)",
    "insertText": "GetFirstAction()"
  }
]