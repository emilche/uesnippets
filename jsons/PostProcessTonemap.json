[
  {
    "label": "FLocalExposureParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalExposureParameters"
  },
  {
    "label": "FTonemapInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTonemapInputs"
  },
  {
    "label": "SupportsFilmGrain()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" PostProcess / PostProcessEyeAdaptation . h \" # include \" PostProcess / PostProcessBloomSetup . h \" # include \" ScreenPass . h \" # include \" OverridePassSequence . h \" # include \" Math / Halton . h \" class FLocalExposureParameters ; bool)",
    "insertText": "SupportsFilmGrain(EShaderPlatform Platform)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FTonemapperOutputDeviceParameters, ) SHADER_PARAMETER(FVector3f, InverseGamma) SHADER_PARAMETER(uint32, OutputDevice) SHADER_PARAMETER(uint32, OutputGamut) SHADER_PARAMETER(float, OutputMaxLuminance) END_SHADER_PARAMETER_STRUCT() RENDERER_API FTonemapperOutputDeviceParameters GetTonemapperOutputDeviceParameters(const FSceneViewFamily& Family)"
  },
  {
    "label": "GrainRandomFromFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GrainRandomFromFrame(FVector3f* RESTRICT const Constant, uint32 FrameNumber)"
  },
  {
    "label": "Halton()",
    "kind": "Method",
    "detail": "Function (Constant -> X =)",
    "insertText": "Halton(FrameNumber & 1023, 2)"
  },
  {
    "label": "Halton()",
    "kind": "Method",
    "detail": "Function (Constant -> Y =)",
    "insertText": "Halton(FrameNumber & 1023, 3)"
  },
  {
    "label": "SupportsSceneColorApplyParametersBuffer()",
    "kind": "Method",
    "detail": "Function (} struct FTonemapInputs { FScreenPassRenderTarget OverrideOutput ; FScreenPassTextureSlice SceneColor ; FScreenPassTexture Bloom ; FRDGBufferRef SceneColorApplyParamaters = nullptr ; FRDGTextureRef LocalExposureBilateralGridTexture = nullptr ; FRDGTextureRef BlurredLogLuminanceTexture = nullptr ; FScreenPassTextureSlice ExposureFusion ; const FLocalExposureParameters* LocalExposureParameters = nullptr ; const FEyeAdaptationParameters* EyeAdaptationParameters = nullptr ; FRDGTextureRef ColorGradingTexture = nullptr ; FRDGBufferRef EyeAdaptationBuffer = nullptr ; bool bWriteAlphaChannel = false ; bool bGammaOnly = false ; bool bOutputInHDR = false ; bool bMetalMSAAHDRDecode = false ; bool)",
    "insertText": "SupportsSceneColorApplyParametersBuffer(EShaderPlatform Platform)"
  },
  {
    "label": "AddTonemapPass()",
    "kind": "Method",
    "detail": "Function (} ; FScreenPassTexture)",
    "insertText": "AddTonemapPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FTonemapInputs& Inputs)"
  },
  {
    "label": "RenderMobileCustomResolve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderMobileCustomResolve(FRHICommandList& RHICmdList, const FViewInfo& View, const int32 SubpassMSAASamples, FSceneTextures& SceneTextures)"
  },
  {
    "label": "AddMobileCustomResolvePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMobileCustomResolvePass(FRDGBuilder& GraphBuilder, const FViewInfo& View, FSceneTextures& SceneTextures, FRDGTextureRef ViewFamilyTexture)"
  },
  {
    "label": "AddAlphaInvertPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAlphaInvertPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, FSceneTextures& SceneTextures)"
  }
]