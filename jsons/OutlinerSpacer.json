[
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "TAutoRegisterViewModelTypeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAutoRegisterViewModelTypeID"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" MVVM / Extensions / IGeometryExtension . h \" # include \" MVVM / Extensions / IOutlinerExtension . h \" # include \" MVVM / Extensions / ISortableExtension . h \" # include \" MVVM / ICastable . h \" # include \" MVVM / ViewModelPtr . h \" # include \" MVVM / ViewModels / ViewModel . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / Views / STableRow . h \" class FDragDropEvent ; class SWidget ; namespace UE::Sequencer { template<T> struct TAutoRegisterViewModelTypeID ; } namespace UE { namespace Sequencer { class FOutlinerSpacer : public FViewModel,public FGeometryExtensionShim,public FOutlinerExtensionShim,public ISortableExtension,public IOutlinerDropTargetOutlinerExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FOutlinerSpacer, FViewModel, IGeometryExtension, IOutlinerExtension, ISortableExtension, IOutlinerDropTargetOutlinerExtension)"
  },
  {
    "label": "FOutlinerSpacer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOutlinerSpacer(float InDesiredSpacerHeight)"
  },
  {
    "label": "FOutlinerSpacer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FOutlinerSpacer()"
  },
  {
    "label": "SetDesiredHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDesiredHeight(float InDesiredSpacerHeight)"
  },
  {
    "label": "HasBackground()",
    "kind": "Method",
    "detail": "Function (DesiredSpacerHeight = InDesiredSpacerHeight ; } public : bool)",
    "insertText": "HasBackground()"
  },
  {
    "label": "GetIdentifier()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetIdentifier()"
  },
  {
    "label": "GetOutlinerSizing()",
    "kind": "Method",
    "detail": "Function (FOutlinerSizing)",
    "insertText": "GetOutlinerSizing()"
  },
  {
    "label": "CreateContextMenuWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateContextMenuWidget(const FCreateOutlinerContextMenuWidgetParams& InParams)"
  },
  {
    "label": "SortChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortChildren()"
  },
  {
    "label": "GetSortingKey()",
    "kind": "Method",
    "detail": "Function (FSortingKey)",
    "insertText": "GetSortingKey()"
  },
  {
    "label": "SetCustomOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomOrder(int32 InCustomOrder)"
  },
  {
    "label": "CanAcceptDrop()",
    "kind": "Method",
    "detail": "Function (TOptional<EItemDropZone>)",
    "insertText": "CanAcceptDrop(const FViewModelPtr& TargetModel, const FDragDropEvent& DragDropEvent, EItemDropZone InItemDropZone)"
  },
  {
    "label": "PerformDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformDrop(const FViewModelPtr& TargetModel, const FDragDropEvent& DragDropEvent, EItemDropZone InItemDropZone)"
  }
]