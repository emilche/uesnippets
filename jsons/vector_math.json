[
  {
    "label": "VectorMath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VectorMath"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_VECTOR_MATH_H_ # define MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_VECTOR_MATH_H_ # include \" rtc_base / system / arch . h \" # if)",
    "insertText": "defined(WEBRTC_HAS_NEON) #include <arm_neon.h> #endif #if defined(WEBRTC_ARCH_X86_FAMILY)"
  },
  {
    "label": "VectorMath()",
    "kind": "Method",
    "detail": "Function (namespace rnn_vad { class VectorMath { public :)",
    "insertText": "VectorMath(AvailableCpuFeatures cpu_features) : cpu_features_(cpu_features)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "DotProduct(rtc::ArrayView<const float> x, rtc::ArrayView<const float> y)"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(x.size(), y.size())"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_ARCH_X86_FAMILY) if (cpu_features_.avx2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(cpu_features_.sse2)"
  },
  {
    "label": "_mm_setzero_ps()",
    "kind": "Method",
    "detail": "Function (__m128 accumulator =)",
    "insertText": "_mm_setzero_ps()"
  },
  {
    "label": "incomplete_block_index()",
    "kind": "Method",
    "detail": "Function (int kBlockSizeLog2 = 2 ; int kBlockSize = 1<<kBlockSizeLog2 ; const int)",
    "insertText": "incomplete_block_index(x.size() >> kBlockSizeLog2)"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LE(i + kBlockSize, x.size())"
  },
  {
    "label": "_mm_loadu_ps()",
    "kind": "Method",
    "detail": "Function (const __m128 x_i =)",
    "insertText": "_mm_loadu_ps(&x[i])"
  },
  {
    "label": "_mm_loadu_ps()",
    "kind": "Method",
    "detail": "Function (const __m128 y_i =)",
    "insertText": "_mm_loadu_ps(&y[i])"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (const __m128 z_j =)",
    "insertText": "_mm_mul_ps(x_i, y_i)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (accumulator =)",
    "insertText": "_mm_add_ps(accumulator, z_j)"
  },
  {
    "label": "_mm_movehl_ps()",
    "kind": "Method",
    "detail": "Function (} __m128 high =)",
    "insertText": "_mm_movehl_ps(accumulator, accumulator)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (accumulator =)",
    "insertText": "_mm_add_ps(accumulator, high)"
  },
  {
    "label": "_mm_shuffle_ps()",
    "kind": "Method",
    "detail": "Function (high =)",
    "insertText": "_mm_shuffle_ps(accumulator, accumulator, 1)"
  },
  {
    "label": "_mm_cvtss_f32()",
    "kind": "Method",
    "detail": "Function (float dot_product =)",
    "insertText": "_mm_cvtss_f32(accumulator)"
  },
  {
    "label": "vdupq_n_f32()",
    "kind": "Method",
    "detail": "Function (float32x4_t accumulator =)",
    "insertText": "vdupq_n_f32(0.f)"
  },
  {
    "label": "vld1q_f32()",
    "kind": "Method",
    "detail": "Function (const float32x4_t x_i =)",
    "insertText": "vld1q_f32(&x[i])"
  },
  {
    "label": "vld1q_f32()",
    "kind": "Method",
    "detail": "Function (const float32x4_t y_i =)",
    "insertText": "vld1q_f32(&y[i])"
  },
  {
    "label": "vfmaq_f32()",
    "kind": "Method",
    "detail": "Function (accumulator =)",
    "insertText": "vfmaq_f32(accumulator, x_i, y_i)"
  },
  {
    "label": "vpadd_f32()",
    "kind": "Method",
    "detail": "Function (} const float32x2_t tmp =)",
    "insertText": "vpadd_f32(vget_low_f32(accumulator), vget_high_f32(accumulator))"
  },
  {
    "label": "vget_lane_f32()",
    "kind": "Method",
    "detail": "Function (float dot_product =)",
    "insertText": "vget_lane_f32(vpadd_f32(tmp, vrev64_f32(tmp)), 0)"
  },
  {
    "label": "DotProductAvx2()",
    "kind": "Method",
    "detail": "Function (} private : float)",
    "insertText": "DotProductAvx2(rtc::ArrayView<const float> x, rtc::ArrayView<const float> y)"
  }
]