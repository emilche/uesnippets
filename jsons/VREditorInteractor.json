[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UWidgetComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetComponent"
  },
  {
    "label": "UStaticMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshSocket"
  },
  {
    "label": "AVREditorTeleporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AVREditorTeleporter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VREDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VREDITOR_API"
  },
  {
    "label": "UVREditorMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorMode"
  },
  {
    "label": "UVREditorMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorMode"
  },
  {
    "label": "UVREditorMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorMode"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "UMotionControllerComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMotionControllerComponent"
  },
  {
    "label": "UMotionControllerComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMotionControllerComponent"
  },
  {
    "label": "UMotionControllerComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMotionControllerComponent"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "USplineComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineComponent"
  },
  {
    "label": "USplineMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineMeshComponent"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "UPointLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPointLightComponent"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "AFloatingText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AFloatingText"
  },
  {
    "label": "UVREditorMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorMode"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init( class UVREditorMode* InVRMode )"
  },
  {
    "label": "SetupComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupComponent( AActor* OwningActor )"
  },
  {
    "label": "ToggleSequencerScrubbingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSequencerScrubbingMode()"
  },
  {
    "label": "SetControllerHandSide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControllerHandSide( const FName InControllerHandSide )"
  },
  {
    "label": "SetForceShowLaser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceShowLaser( const bool bInForceShow )"
  },
  {
    "label": "ResetTrackpad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTrackpad()"
  },
  {
    "label": "SetForceLaserColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceLaserColor( const FLinearColor& InColor )"
  },
  {
    "label": "SetControllerType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControllerType( const EControllerType InControllerType )"
  },
  {
    "label": "TryOverrideControllerType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryOverrideControllerType( const EControllerType InControllerType )"
  },
  {
    "label": "SetHasUIOnForearm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasUIOnForearm( const bool bInHasUIOnForearm )"
  },
  {
    "label": "SetLastHoveredWidgetComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastHoveredWidgetComponent( UWidgetComponent* NewHoveringOverWidgetComponent )"
  },
  {
    "label": "SetIsClickingOnUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsClickingOnUI( const bool bInIsClickingOnUI )"
  },
  {
    "label": "SetIsHoveringOverUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsHoveringOverUI( const bool bInIsHoveringOverUI )"
  },
  {
    "label": "SetIsRightClickingOnUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsRightClickingOnUI( const bool bInIsRightClickingOnUI )"
  },
  {
    "label": "SetLastUIPressTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastUIPressTime( const double InLastUIPressTime )"
  },
  {
    "label": "SetUIScrollVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUIScrollVelocity( const float InUIScrollVelocity )"
  },
  {
    "label": "UpdateHandMeshRelativeTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHandMeshRelativeTransform()"
  },
  {
    "label": "ApplyButtonPressColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyButtonPressColors( const FViewportActionKeyInput& Action )"
  },
  {
    "label": "SetMotionControllerButtonPressedVisuals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMotionControllerButtonPressedVisuals( const EInputEvent Event, const FName& ParameterName, const float PressStrength )"
  },
  {
    "label": "ShowHelpForHand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowHelpForHand( const bool bShowIt )"
  },
  {
    "label": "UpdateHelpLabels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHelpLabels()"
  },
  {
    "label": "UpdateSplineLaser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSplineLaser( const FVector& InStartLocation, const FVector& InEndLocation, const FVector& InForward )"
  },
  {
    "label": "SetLaserVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLaserVisibility( const bool bVisible )"
  },
  {
    "label": "SetLaserVisuals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLaserVisuals( const FLinearColor& NewColor, const float CrawlFade, const float CrawlSpeed )"
  },
  {
    "label": "UpdateRadialMenuInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRadialMenuInput( const float DeltaTime )"
  },
  {
    "label": "SetHandMeshComponentProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHandMeshComponentProperties()"
  },
  {
    "label": "UndoRedoFromSwipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UndoRedoFromSwipe( const ETouchSwipeDirection InSwipeDirection )"
  }
]