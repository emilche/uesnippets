[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UWidgetComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetComponent"
  },
  {
    "label": "UStaticMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshSocket"
  },
  {
    "label": "AVREditorTeleporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AVREditorTeleporter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VREDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VREDITOR_API"
  },
  {
    "label": "UVREditorMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorMode"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "UMotionControllerComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMotionControllerComponent"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "USplineComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineComponent"
  },
  {
    "label": "USplineMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineMeshComponent"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "UPointLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPointLightComponent"
  },
  {
    "label": "AFloatingText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AFloatingText"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" InputCoreTypes . h \" # include \" ViewportInteractor . h \" # include \" UObject / ObjectMacros . h \" # include \" VREditorInteractor . generated . h \" class AActor ; class UWidgetComponent ; class UStaticMeshSocket ; class AVREditorTeleporter ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (None = 0,Left = 1,Right = 2,Up = 3,Down = 4 } ;)",
    "insertText": "UCLASS(Blueprintable, BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UVREditorInteractor()"
  },
  {
    "label": "GetVRMode()",
    "kind": "Method",
    "detail": "Function (class UVREditorMode&)",
    "insertText": "GetVRMode()"
  },
  {
    "label": "Shutdown_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown_Implementation()"
  },
  {
    "label": "Tick_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick_Implementation(const float DeltaTime)"
  },
  {
    "label": "CalculateDragRay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateDragRay(double& InOutDragRayLength, double& InOutDragRayVelocity)"
  },
  {
    "label": "GetHitResultFromLaserPointer()",
    "kind": "Method",
    "detail": "Function (FHitResult)",
    "insertText": "GetHitResultFromLaserPointer(TArray<AActor*>* OptionalListOfIgnoredActors = nullptr, const EHitResultGizmoFilterMode GizmoFilerMode = EHitResultGizmoFilterMode::All, TArray<UClass*>* ObjectsInFrontOfGizmo = nullptr, const bool bEvenIfBlocked = false, const float LaserLengthOverride = 0.0f)"
  },
  {
    "label": "ResetHoverState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetHoverState()"
  },
  {
    "label": "IsModifierPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModifierPressed()"
  },
  {
    "label": "PreviewInputKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreviewInputKey(class FEditorViewportClient& ViewportClient, FViewportActionKeyInput& Action, const FKey Key, const EInputEvent Event, bool& bOutWasHandled)"
  },
  {
    "label": "HandleInputKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInputKey(class FEditorViewportClient& ViewportClient, FViewportActionKeyInput& Action, const FKey Key, const EInputEvent Event, bool& bOutWasHandled)"
  },
  {
    "label": "GetTransformAndForwardVector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTransformAndForwardVector(FTransform& OutHandTransform, FVector& OutForwardVector)"
  },
  {
    "label": "HandleInputAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInputAxis(FEditorViewportClient& ViewportClient, FViewportActionKeyInput& Action, const FKey Key, const float Delta, const float DeltaTime, bool& bOutWasHandled)"
  },
  {
    "label": "ToggleSequencerScrubbingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSequencerScrubbingMode()"
  },
  {
    "label": "IsScrubbingSequencer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScrubbingSequencer()"
  },
  {
    "label": "PlayHapticEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayHapticEffect(const float Strength)"
  },
  {
    "label": "IsCarrying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCarrying()"
  },
  {
    "label": "GetTrackpadSlideDelta()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTrackpadSlideDelta(const bool Axis = 1)"
  },
  {
    "label": "ResetTrackpad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTrackpad()"
  },
  {
    "label": "IsTrackpadPositionValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTrackpadPositionValid(const int32 AxisIndex)"
  },
  {
    "label": "GetLastTrackpadPositionUpdateTime()",
    "kind": "Method",
    "detail": "Function (FTimespan&)",
    "insertText": "GetLastTrackpadPositionUpdateTime()"
  },
  {
    "label": "GetLastActiveTrackpadUpdateTime()",
    "kind": "Method",
    "detail": "Function (FTimespan&)",
    "insertText": "GetLastActiveTrackpadUpdateTime()"
  },
  {
    "label": "SetHasUIOnForearm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasUIOnForearm(const bool bInHasUIOnForearm)"
  },
  {
    "label": "HasUIOnForearm()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasUIOnForearm()"
  },
  {
    "label": "GetLastHoveredWidgetComponent()",
    "kind": "Method",
    "detail": "Function (UWidgetComponent*)",
    "insertText": "GetLastHoveredWidgetComponent()"
  },
  {
    "label": "SetLastHoveredWidgetComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastHoveredWidgetComponent(UWidgetComponent* NewHoveringOverWidgetComponent)"
  },
  {
    "label": "SetIsClickingOnUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsClickingOnUI(const bool bInIsClickingOnUI)"
  },
  {
    "label": "SetIsHoveringOverUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsHoveringOverUI(const bool bInIsHoveringOverUI)"
  },
  {
    "label": "SetIsRightClickingOnUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsRightClickingOnUI(const bool bInIsRightClickingOnUI)"
  },
  {
    "label": "IsRightClickingOnUI()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRightClickingOnUI()"
  },
  {
    "label": "SetLastUIPressTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastUIPressTime(const double InLastUIPressTime)"
  },
  {
    "label": "SetUIScrollVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUIScrollVelocity(const float InUIScrollVelocity)"
  },
  {
    "label": "GetUIScrollVelocity()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetUIScrollVelocity()"
  },
  {
    "label": "GetIsLaserBlocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsLaserBlocked()"
  },
  {
    "label": "IsActionKeyPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActionKeyPressed(FName ActionName)"
  },
  {
    "label": "PollInput()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PollInput()"
  },
  {
    "label": "ApplyButtonPressColors()",
    "kind": "Method",
    "detail": "Function (float SelectAndMoveTriggerValue ; FVector LaserStart ; FVector LaserEnd ; private : void)",
    "insertText": "ApplyButtonPressColors(const FViewportActionKeyInput& Action)"
  },
  {
    "label": "SetMotionControllerButtonPressedVisuals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMotionControllerButtonPressedVisuals(const EInputEvent Event, const FName& ParameterName, const float PressStrength)"
  },
  {
    "label": "ShowHelpForHand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowHelpForHand(const bool bShowIt)"
  },
  {
    "label": "UpdateHelpLabels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHelpLabels()"
  },
  {
    "label": "FindMeshSocketForKey()",
    "kind": "Method",
    "detail": "Function (UStaticMeshSocket*)",
    "insertText": "FindMeshSocketForKey(UStaticMesh* StaticMesh, const FKey Key)"
  },
  {
    "label": "UpdateSplineLaser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSplineLaser(const FVector& InStartLocation, const FVector& InEndLocation, const FVector& InForward)"
  },
  {
    "label": "SetLaserVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLaserVisibility(const bool bVisible)"
  },
  {
    "label": "SetLaserVisuals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLaserVisuals(const FLinearColor& NewColor, const float CrawlFade, const float CrawlSpeed)"
  },
  {
    "label": "UpdateRadialMenuInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRadialMenuInput(const float DeltaTime)"
  },
  {
    "label": "SetHandMeshComponentProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHandMeshComponentProperties()"
  },
  {
    "label": "UndoRedoFromSwipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UndoRedoFromSwipe(const ETouchSwipeDirection InSwipeDirection)"
  }
]