[
  {
    "label": "FNurbsCurveData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNurbsCurveData"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FNURBSCurve()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Geo / Curves / Curve . h \" # include \" Math / BSpline . h \" namespace UE::CADKernel { struct FNurbsCurveData { bool bIsRational = false ; int32 Dimension = 0 ; int32 Degree = 0 ; TArray<double> NodalVector ; TArray<double> Weights ; TArray<FPoint> Poles ; } ; class FNURBSCurve : public FCurve { class FEntity ; protected : int32 Degree ; TArray<double> NodalVector ; TArray<double> Weights ; TArray<FPoint> Poles ; bool bIsRational ; TArray<double> HomogeneousPoles ; int32 PoleDimension ;)",
    "insertText": "FNURBSCurve(int32 InDegree, const TArray<double>& InNodalVector, const TArray<FPoint>& InPoles, const TArray<double>& InWeights, int8 InDimension = 3)"
  },
  {
    "label": "FNURBSCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNURBSCurve(FNurbsCurveData& NurbsCurveData)"
  },
  {
    "label": "FNURBSCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNURBSCurve()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar<<Degree ; Ar .)",
    "insertText": "Serialize(NodalVector)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(Weights)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(Poles)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<bIsRational ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize()"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (} } # ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetCurveType()",
    "kind": "Method",
    "detail": "Function (# endif ECurve)",
    "insertText": "GetCurveType()"
  },
  {
    "label": "GetPoles()",
    "kind": "Method",
    "detail": "Function (} const TArray<FPoint>&)",
    "insertText": "GetPoles()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(const FPoint& OffsetDirection)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(double Coordinate, FCurvePoint& OutPoint, int32 DerivativeOrder = 0)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(*this, Coordinate, OutPoint, DerivativeOrder)"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Evaluate2DPoint(double Coordinate, FCurvePoint2D& OutPoint, int32 DerivativeOrder = 0)"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate2DPoint(*this, Coordinate, OutPoint, DerivativeOrder)"
  },
  {
    "label": "FindNotDerivableCoordinates()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindNotDerivableCoordinates(const FLinearBoundary& InBoundary, int32 DerivativeOrder, TArray<double>& OutNotDerivableCoordinates)"
  },
  {
    "label": "FindNotDerivableParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNotDerivableParameters(*this, DerivativeOrder, InBoundary, OutNotDerivableCoordinates)"
  },
  {
    "label": "ExtendTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExtendTo(const FPoint& DesiredPosition)"
  },
  {
    "label": "Invert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invert()"
  },
  {
    "label": "SetStartNodalCoordinate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartNodalCoordinate(double NewStartBoundary)"
  }
]