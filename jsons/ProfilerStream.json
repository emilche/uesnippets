[
  {
    "label": "FInclusiveTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInclusiveTime"
  },
  {
    "label": "FProfilerStackNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerStackNode"
  },
  {
    "label": "FProfilerFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerFrame"
  },
  {
    "label": "FThreadSort",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadSort"
  },
  {
    "label": "FProfilerStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerStream"
  },
  {
    "label": "FProfilerUIStackNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerUIStackNode"
  },
  {
    "label": "FProfilerUIStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerUIStream"
  },
  {
    "label": "FInclusiveTime()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if STATS # include \" HAL / ThreadSafeCounter . h \" # include \" Containers / IndirectArray . h \" # include \" Containers / ChunkedArray . h \" # include \" Misc / ScopeLock . h \" # include \" ProfilerCommon . h \" # include \" Stats / StatsData . h \" struct FInclusiveTime { uint32 DurationCycles ; int32 CallCount ; int32 Recursion ;)",
    "insertText": "FInclusiveTime() : DurationCycles( 0 ) , CallCount( 0 ) , Recursion( 0)"
  },
  {
    "label": "FProfilerStackNode()",
    "kind": "Method",
    "detail": "Function (} } ; struct FProfilerStackNode { FName StatName ; FName LongName ; TArray<FProfilerStackNode*> Children ; FProfilerStackNode* Parent ; int64 CyclesStart ; int64 CyclesEnd ; double CycleCounterStartTimeMS ; double CycleCounterEndTimeMS ; uint32 SampleIndex ; const int32 FrameIndex ;)",
    "insertText": "FProfilerStackNode(int32 InFrameIndex ) : StatName( FStatConstants::NAME_ThreadRoot ) , LongName( FStatConstants::NAME_ThreadRoot ) , Parent( nullptr ) , CyclesStart( 0 ) , CyclesEnd( 0 ) , CycleCounterStartTimeMS( 0.0f ) , CycleCounterEndTimeMS( 0.0f ) , SampleIndex( 0 ) , FrameIndex( InFrameIndex)"
  },
  {
    "label": "FProfilerStackNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FProfilerStackNode(FProfilerStackNode* InParent, const FStatMessage& StatMessage, uint32 InSampleIndex, int32 InFrameIndex ) : StatName( StatMessage.NameAndInfo.GetShortName() ) , LongName( StatMessage.NameAndInfo.GetRawName() ) , Parent( InParent ) , CyclesStart( StatMessage.GetValue_int64() ) , CyclesEnd( 0 ) , CycleCounterStartTimeMS( 0.0f ) , CycleCounterEndTimeMS( 0.0f ) , SampleIndex( InSampleIndex ) , FrameIndex( InFrameIndex)"
  },
  {
    "label": "FProfilerStackNode()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FProfilerStackNode()"
  },
  {
    "label": "GetDurationMS()",
    "kind": "Method",
    "detail": "Function (delete Child ; } } double)",
    "insertText": "GetDurationMS()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (int64 AllocatedSize =)",
    "insertText": "sizeof(*this) + Children.GetAllocatedSize()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (AllocatedSize + = StackNode ->)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "AdjustCycleCounters()",
    "kind": "Method",
    "detail": "Function (} return AllocatedSize ; } void)",
    "insertText": "AdjustCycleCounters(double CycleCounterAdjustmentMS)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (CycleCounterStartTimeMS - = CycleCounterAdjustmentMS ; CycleCounterEndTimeMS - = CycleCounterAdjustmentMS ;)",
    "insertText": "for(const auto& Child : Children)"
  },
  {
    "label": "AdjustCycleCounters()",
    "kind": "Method",
    "detail": "Function (Child ->)",
    "insertText": "AdjustCycleCounters(CycleCounterAdjustmentMS)"
  },
  {
    "label": "FProfilerFrame()",
    "kind": "Method",
    "detail": "Function (} } } ; struct FProfilerFrame { protected : enum { STACKNODE_INVALID = 0,STACKNODE_VALID = 1,} ; public : FProfilerStackNode* Root ; TMap<uint32,float> ThreadTimesMS ; int64 TargetFrame ; double FrameTimeMS ; double ElapsedTimeMS ; double LastAccessTime ; FThreadSafeCounter AccessLock ;)",
    "insertText": "FProfilerFrame(int64 InTargetFrame, double InFrameTimeMS, double InElapsedTimeMS ) : Root( new FProfilerStackNode( (int32)(InTargetFrame&MAX_int32) ) ) , TargetFrame( InTargetFrame ) , FrameTimeMS( InFrameTimeMS ) , ElapsedTimeMS( InElapsedTimeMS ) , LastAccessTime( FPlatformTime::Seconds() ) , AccessLock( STACKNODE_INVALID)"
  },
  {
    "label": "FProfilerFrame()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FProfilerFrame()"
  },
  {
    "label": "FreeMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeMemory()"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddChild(FProfilerStackNode* ProfilerStackNode)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Root -> Children .)",
    "insertText": "Add(ProfilerStackNode)"
  },
  {
    "label": "SortChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SortChildren()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FThreadSort { bool)",
    "insertText": "operator()( const FProfilerStackNode& A, const FProfilerStackNode& B)"
  },
  {
    "label": "MarkAsValid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkAsValid()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (const int32 OldLock = AccessLock .)",
    "insertText": "Set(STACKNODE_VALID)"
  },
  {
    "label": "MarkAsInvalid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkAsInvalid()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (const int32 OldLock = AccessLock .)",
    "insertText": "Set(STACKNODE_INVALID)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (delete Root ; Root = nullptr ; ThreadTimesMS .)",
    "insertText": "Empty()"
  },
  {
    "label": "AddProfilerFrame()",
    "kind": "Method",
    "detail": "Function (} } ; struct FProfilerStream { protected : TChunkedArray<FProfilerFrame*> Frames ; TArray<double> FrameTimesMS ; TArray<double> ElapsedFrameTimesMS ; TSet<FName> ThreadIDs ; FCriticalSection CriticalSection ; public : void)",
    "insertText": "AddProfilerFrame(int64 TargetFrame, FProfilerFrame* ProfilerFrame)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CriticalSection)"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (Frames .)",
    "insertText": "AddElement(ProfilerFrame)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FrameTimesMS .)",
    "insertText": "Add(ProfilerFrame->FrameTimeMS)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ElapsedFrameTimesMS .)",
    "insertText": "Add(ProfilerFrame->ElapsedTimeMS)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ThreadIDs .)",
    "insertText": "Add(NAME_GameThread)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ThreadIDs .)",
    "insertText": "Add(NAME_RenderThread)"
  },
  {
    "label": "GetProfilerFrame()",
    "kind": "Method",
    "detail": "Function (} FProfilerFrame*)",
    "insertText": "GetProfilerFrame(int32 FrameIndex)"
  },
  {
    "label": "LessEqual()",
    "kind": "Method",
    "detail": "Function (const int32 StartFrameIndex =)",
    "insertText": "LessEqual(ElapsedFrameTimesMS, StartTimeMS)"
  },
  {
    "label": "GreaterEqual()",
    "kind": "Method",
    "detail": "Function (const int32 EndFrameIndex =)",
    "insertText": "GreaterEqual(ElapsedFrameTimesMS, EndTimeMS, StartFrameIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int64 AllocatedSize = 0 ;)",
    "insertText": "for(int32 FrameIndex = 0; FrameIndex < Frames.Num(); FrameIndex++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FProfilerFrame* ProfilerFrame = Frames [ FrameIndex ] ;)",
    "insertText": "if(ProfilerFrame->IsValid())"
  },
  {
    "label": "GetNumFrames()",
    "kind": "Method",
    "detail": "Function (} } return AllocatedSize ; } int32)",
    "insertText": "GetNumFrames()"
  },
  {
    "label": "GetElapsedTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetElapsedTime()"
  },
  {
    "label": "GetFrameTimeMS()",
    "kind": "Method",
    "detail": "Function (} const double)",
    "insertText": "GetFrameTimeMS(const int32 InFrameIndex)"
  },
  {
    "label": "GetNumThreads()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "GetNumThreads()"
  },
  {
    "label": "FProfilerUIStackNode()",
    "kind": "Method",
    "detail": "Function (} } ; struct FProfilerUIStackNode { enum { THREAD_NODE_INDEX = - 1,} ;)",
    "insertText": "FProfilerUIStackNode(const FProfilerStackNode* ProfilerStackNode, int32 InGlobalNodeDepth, int32 InThreadIndex, int32 InFrameIndex ) : StatName( ProfilerStackNode->StatName ) , LongName( ProfilerStackNode->LongName ) , CycleCountersStartTimeMS( ProfilerStackNode->CycleCounterStartTimeMS ) , CycleCountersEndTimeMS( ProfilerStackNode->CycleCounterEndTimeMS ) , PositionXPx( 0.0f ) , PositionY( 0.0f ) , WidthPx( 0.0f ) , GlobalNodeDepth( InGlobalNodeDepth ) , ThreadNodeDepth( 0 ) , ThreadIndex( InThreadIndex ) , FrameIndex( InFrameIndex ) , bIsCombined( false ) , bIsCulled( false)"
  },
  {
    "label": "FProfilerUIStackNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FProfilerUIStackNode(const TArray<const FProfilerStackNode*>& ProfilerStackNodes, int32 NumStackNodes, int32 InGlobalNodeDepth, int32 InThreadIndex, int32 InFrameIndex ) : StatName( *FString::Printf( TEXT( \"[%i]\" ), NumStackNodes ) ) , LongName( *FString::Printf( TEXT( \"Combined %i items\" ), NumStackNodes ) ) , CycleCountersStartTimeMS( ProfilerStackNodes[0]->CycleCounterStartTimeMS ) , CycleCountersEndTimeMS( ProfilerStackNodes[NumStackNodes - 1]->CycleCounterEndTimeMS ) , PositionXPx( 0.0f ) , PositionY( 0.0f ) , WidthPx( 0.0f ) , GlobalNodeDepth( InGlobalNodeDepth ) , ThreadNodeDepth( 0 ) , ThreadIndex( InThreadIndex ) , FrameIndex( InFrameIndex ) , bIsCombined( true ) , bIsCulled( false)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OriginalStackNodes .)",
    "insertText": "Append(ProfilerStackNodes)"
  },
  {
    "label": "FProfilerUIStackNode()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FProfilerUIStackNode()"
  },
  {
    "label": "InitializeUIData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeUIData(const double NumMillisecondsPerWindow, const double NumPixelsPerMillisecond, const double NumMillisecondsPerSample)"
  },
  {
    "label": "PositionY()",
    "kind": "Method",
    "detail": "Function (const double NumPixels = DurationMS* NumPixelsPerMillisecond ; WidthPx = NumPixels ; PositionXPx = CycleCountersStartTimeMS* NumPixelsPerMillisecond ;)",
    "insertText": "PositionY(double)"
  },
  {
    "label": "MarkAsCulled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkAsCulled()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "CombineOrSet()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "CombineOrSet(FProfilerUIStackNode* ParentUIStackNode, const FProfilerStackNode& ProfilerStackNode, int32 GlobalNodeDepth, const double NumMillisecondsPerWindow, const double NumPixelsPerMillisecond, const double NumMillisecondsPerSample)"
  },
  {
    "label": "LinearizeStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinearizeStream()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (LinearRowsOfNodes .)",
    "insertText": "SetNum(ThreadNodes.Num()*DEFAULT_VISIBLE_THREAD_DEPTH)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (RowOfNodes .)",
    "insertText": "Reset()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const auto& ThreadNode : ThreadNodes)"
  },
  {
    "label": "LinearizeStream_Recursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinearizeStream_Recursively(&ThreadNode)"
  },
  {
    "label": "LinearizeStream_Recursively()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "LinearizeStream_Recursively(const FProfilerUIStackNode* UIStackNode)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LinearRowsOfNodes [ UIStackNode -> GlobalNodeDepth ] .)",
    "insertText": "Add(UIStackNode)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const auto& UIStackNodeChild : UIStackNode->Children)"
  },
  {
    "label": "LinearizeStream_Recursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinearizeStream_Recursively(&UIStackNodeChild)"
  }
]