[
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "TimeZoneRule()",
    "kind": "Method",
    "detail": "Function (# ifndef TZRULE_H # define TZRULE_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / uobject . h \" # include \" unicode / unistr . h \" # include \" unicode / dtrule . h \" U_NAMESPACE_BEGIN class U_I18N_API TimeZoneRule : public UObject { public : ~)",
    "insertText": "TimeZoneRule()"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (TimeZoneRule*)",
    "insertText": "clone(void)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const TimeZoneRule& that)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getName(UnicodeString& name)"
  },
  {
    "label": "getRawOffset()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getRawOffset(void)"
  },
  {
    "label": "getDSTSavings()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getDSTSavings(void)"
  },
  {
    "label": "isEquivalentTo()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isEquivalentTo(const TimeZoneRule& other)"
  },
  {
    "label": "getFirstStart()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getFirstStart(int32_t prevRawOffset, int32_t prevDSTSavings, UDate& result)"
  },
  {
    "label": "getFinalStart()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getFinalStart(int32_t prevRawOffset, int32_t prevDSTSavings, UDate& result)"
  },
  {
    "label": "getNextStart()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getNextStart(UDate base, int32_t prevRawOffset, int32_t prevDSTSavings, UBool inclusive, UDate& result)"
  },
  {
    "label": "getPreviousStart()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getPreviousStart(UDate base, int32_t prevRawOffset, int32_t prevDSTSavings, UBool inclusive, UDate& result)"
  },
  {
    "label": "TimeZoneRule()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "TimeZoneRule(const UnicodeString& name, int32_t rawOffset, int32_t dstSavings)"
  },
  {
    "label": "TimeZoneRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TimeZoneRule(const TimeZoneRule& source)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TimeZoneRule&)",
    "insertText": "operator(const TimeZoneRule& right)"
  },
  {
    "label": "InitialTimeZoneRule()",
    "kind": "Method",
    "detail": "Function (private : UnicodeString fName ; int32_t fRawOffset ; int32_t fDSTSavings ; } ; class U_I18N_API InitialTimeZoneRule : public TimeZoneRule { public :)",
    "insertText": "InitialTimeZoneRule(const UnicodeString& name, int32_t rawOffset, int32_t dstSavings)"
  },
  {
    "label": "InitialTimeZoneRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitialTimeZoneRule(const InitialTimeZoneRule& source)"
  },
  {
    "label": "InitialTimeZoneRule()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "InitialTimeZoneRule()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InitialTimeZoneRule&)",
    "insertText": "operator(const InitialTimeZoneRule& right)"
  },
  {
    "label": "getStartInYear()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getStartInYear(int32_t year, int32_t prevRawOffset, int32_t prevDSTSavings, UDate& result)"
  },
  {
    "label": "isEquivalentTo()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isEquivalentTo(const TimeZoneRule& that)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (public : UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID(void)"
  },
  {
    "label": "AnnualTimeZoneRule()",
    "kind": "Method",
    "detail": "Function (} ; class U_I18N_API AnnualTimeZoneRule : public TimeZoneRule { public : const int32_t MAX_YEAR ;)",
    "insertText": "AnnualTimeZoneRule(const UnicodeString& name, int32_t rawOffset, int32_t dstSavings, const DateTimeRule& dateTimeRule, int32_t startYear, int32_t endYear)"
  },
  {
    "label": "AnnualTimeZoneRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnualTimeZoneRule(const UnicodeString& name, int32_t rawOffset, int32_t dstSavings, DateTimeRule* dateTimeRule, int32_t startYear, int32_t endYear)"
  },
  {
    "label": "AnnualTimeZoneRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnualTimeZoneRule(const AnnualTimeZoneRule& source)"
  },
  {
    "label": "AnnualTimeZoneRule()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AnnualTimeZoneRule()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AnnualTimeZoneRule&)",
    "insertText": "operator(const AnnualTimeZoneRule& right)"
  },
  {
    "label": "getRule()",
    "kind": "Method",
    "detail": "Function (const DateTimeRule*)",
    "insertText": "getRule(void)"
  },
  {
    "label": "getStartYear()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getStartYear(void)"
  },
  {
    "label": "getEndYear()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getEndYear(void)"
  },
  {
    "label": "TimeArrayTimeZoneRule()",
    "kind": "Method",
    "detail": "Function (} ; class U_I18N_API TimeArrayTimeZoneRule : public TimeZoneRule { public :)",
    "insertText": "TimeArrayTimeZoneRule(const UnicodeString& name, int32_t rawOffset, int32_t dstSavings, const UDate* startTimes, int32_t numStartTimes, DateTimeRule::TimeRuleType timeRuleType)"
  },
  {
    "label": "TimeArrayTimeZoneRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TimeArrayTimeZoneRule(const TimeArrayTimeZoneRule& source)"
  },
  {
    "label": "TimeArrayTimeZoneRule()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TimeArrayTimeZoneRule()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TimeArrayTimeZoneRule&)",
    "insertText": "operator(const TimeArrayTimeZoneRule& right)"
  },
  {
    "label": "getTimeType()",
    "kind": "Method",
    "detail": "Function (DateTimeRule::TimeRuleType)",
    "insertText": "getTimeType(void)"
  },
  {
    "label": "getStartTimeAt()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getStartTimeAt(int32_t index, UDate& result)"
  },
  {
    "label": "countStartTimes()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "countStartTimes(void)"
  },
  {
    "label": "initStartTimes()",
    "kind": "Method",
    "detail": "Function (private : enum { TIMEARRAY_STACK_BUFFER_SIZE = 3 2 } ; UBool)",
    "insertText": "initStartTimes(const UDate source[], int32_t size, UErrorCode& ec)"
  },
  {
    "label": "getUTC()",
    "kind": "Method",
    "detail": "Function (UDate)",
    "insertText": "getUTC(UDate time, int32_t raw, int32_t dst)"
  }
]