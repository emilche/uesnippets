[
  {
    "label": "MockIceTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockIceTransport"
  },
  {
    "label": "MockIceTransport()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_MOCK_ICE_TRANSPORT_H_ # define P2P_BASE_MOCK_ICE_TRANSPORT_H_ # include<memory> # include<string> # include<vector> # include \" p2p / base / ice_transport_internal . h \" # include \" rtc_base / gunit . h \" # include \" test / gmock . h \" using::testing::_ ; using::testing::Return ; namespace cricket { class MockIceTransport : public IceTransportInternal { public :)",
    "insertText": "MockIceTransport()"
  },
  {
    "label": "SignalReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalReadyToSend(this)"
  },
  {
    "label": "SignalWritableState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalWritableState(this)"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MOCK_METHOD(int, SendPacket, (const char* data, size_t len, const rtc::PacketOptions& options, int flags), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(int, SetOption, (rtc::Socket::Option opt, int value), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(int, GetError, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(cricket::IceRole, GetIceRole, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, GetStats, (cricket::IceTransportStats * ice_transport_stats), (override))"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (IceTransportState)",
    "insertText": "GetState()"
  },
  {
    "label": "SetIceTiebreaker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIceTiebreaker(uint64_t tiebreaker)"
  },
  {
    "label": "SetIceParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIceParameters(const IceParameters& ice_params)"
  },
  {
    "label": "SetRemoteIceParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRemoteIceParameters(const IceParameters& ice_params)"
  },
  {
    "label": "SetRemoteIceMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRemoteIceMode(IceMode mode)"
  },
  {
    "label": "SetIceConfig()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIceConfig(const IceConfig& config)"
  },
  {
    "label": "GetRttEstimate()",
    "kind": "Method",
    "detail": "Function (} absl::optional<int>)",
    "insertText": "GetRttEstimate()"
  },
  {
    "label": "AddRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRemoteCandidate(const Candidate& candidate)"
  },
  {
    "label": "RemoveRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveRemoteCandidate(const Candidate& candidate)"
  },
  {
    "label": "RemoveAllRemoteCandidates()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAllRemoteCandidates()"
  },
  {
    "label": "gathering_state()",
    "kind": "Method",
    "detail": "Function (} IceGatheringState)",
    "insertText": "gathering_state()"
  }
]