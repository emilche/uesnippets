[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorModeTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeTools"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FModeTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModeTool"
  },
  {
    "label": "FModeToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModeToolkit"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "EModeTools",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EModeTools"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "FGizmoState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGizmoState"
  },
  {
    "label": "FEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdMode"
  },
  {
    "label": "FEditorModeRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeRegistry"
  },
  {
    "label": "FToolBarBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FToolBarBuilder"
  },
  {
    "label": "FEdMode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" UObject / GCObject . h \" # include \" UnrealWidgetFwd . h \" # include \" EditorComponents . h \" # include \" EngineGlobals . h \" # include \" EditorModeRegistry . h \" # include \" Tools / UEdMode . h \" # include \" Templates / SharedPointer . h \" # include \" Tools / LegacyEdModeWidgetHelpers . h \" class FCanvas ; class FEditorModeTools ; class FEditorViewportClient ; class FModeTool ; class FModeToolkit ; class FPrimitiveDrawInterface ; class FSceneView ; class FViewport ; class UTexture2D ; struct FConvexVolume ; struct FViewportClick ; enum EModeTools : int8 ; class FEditorViewportClient ; class HHitProxy ; struct FViewportClick ; class FModeTool ; class FEditorViewportClient ; struct FViewportClick ; struct FGizmoState ; class FEdMode : public TSharedFromThis<FEdMode>,public FGCObject,public FEditorCommonDrawHelper,public FLegacyEdModeWidgetHelper { public : class FEditorModeRegistry ;)",
    "insertText": "FEdMode()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "MouseEnter()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MouseEnter(FEditorViewportClient* ViewportClient,FViewport* Viewport,int32 x, int32 y)"
  },
  {
    "label": "MouseLeave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseLeave(FEditorViewportClient* ViewportClient,FViewport* Viewport)"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseMove(FEditorViewportClient* ViewportClient,FViewport* Viewport,int32 x, int32 y)"
  },
  {
    "label": "ReceivedFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReceivedFocus(FEditorViewportClient* ViewportClient,FViewport* Viewport)"
  },
  {
    "label": "LostFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LostFocus(FEditorViewportClient* ViewportClient,FViewport* Viewport)"
  },
  {
    "label": "CapturedMouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CapturedMouseMove(FEditorViewportClient* InViewportClient, FViewport* InViewport, int32 InMouseX, int32 InMouseY)"
  },
  {
    "label": "ProcessCapturedMouseMoves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessCapturedMouseMoves(FEditorViewportClient* InViewportClient, FViewport* InViewport, const TArrayView<FIntPoint>& CapturedMouseMoves)"
  },
  {
    "label": "InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputAxis(FEditorViewportClient* InViewportClient,FViewport* Viewport,int32 ControllerId,FKey Key,float Delta,float DeltaTime)"
  },
  {
    "label": "InputDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputDelta(FEditorViewportClient* InViewportClient,FViewport* InViewport,FVector& InDrag,FRotator& InRot,FVector& InScale)"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "GetActionEditDuplicate()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditDuplicate()"
  },
  {
    "label": "IsCompatibleWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleWith(FEditorModeID OtherModeID)"
  },
  {
    "label": "ActorsDuplicatedNotify()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ActorsDuplicatedNotify(TArray<AActor*>& PreDuplicateSelection, TArray<AActor*>& PostDuplicateSelection, bool bOffsetLocations)"
  },
  {
    "label": "ActorPropChangeNotify()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ActorPropChangeNotify()"
  },
  {
    "label": "MapChangeNotify()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MapChangeNotify()"
  },
  {
    "label": "DisallowMouseDeltaTracking()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DisallowMouseDeltaTracking()"
  },
  {
    "label": "SnapRotatorToGridOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SnapRotatorToGridOverride(FRotator& Rotation)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Enter()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "GetVertexTexture()",
    "kind": "Method",
    "detail": "Function (UTexture2D*)",
    "insertText": "GetVertexTexture()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget(UE::Widget::EWidgetMode CheckMode)"
  },
  {
    "label": "UsesPropertyWidgets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesPropertyWidgets()"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo()"
  },
  {
    "label": "CanAutoSave()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanAutoSave()"
  },
  {
    "label": "FrustumSelect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FrustumSelect(const FConvexVolume& InFrustum, FEditorViewportClient* InViewportClient, bool InSelect = true)"
  },
  {
    "label": "SelectNone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNone()"
  },
  {
    "label": "SelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectionChanged()"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy* HitProxy, const FViewportClick& Click)"
  },
  {
    "label": "ComputeBoundingBoxForViewportFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeBoundingBoxForViewportFocus(AActor* Actor, UPrimitiveComponent* PrimitiveComponent, FBox& InOutBox)"
  },
  {
    "label": "SetCurrentTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentTool(FModeTool* InModeTool)"
  },
  {
    "label": "FindTool()",
    "kind": "Method",
    "detail": "Function (FModeTool*)",
    "insertText": "FindTool(EModeTools InID)"
  },
  {
    "label": "GetTools()",
    "kind": "Method",
    "detail": "Function (const TArray<FModeTool*>&)",
    "insertText": "GetTools()"
  },
  {
    "label": "GetCurrentTool()",
    "kind": "Method",
    "detail": "Function (} FModeTool*)",
    "insertText": "GetCurrentTool()"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD(FEditorViewportClient* ViewportClient,FViewport* Viewport,const FSceneView* View,FCanvas* Canvas)"
  },
  {
    "label": "HandleDragDuplicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDragDuplicate()"
  },
  {
    "label": "GetToolkit()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FModeToolkit>)",
    "insertText": "GetToolkit()"
  },
  {
    "label": "GetModeManager()",
    "kind": "Method",
    "detail": "Function (class FEditorModeTools*)",
    "insertText": "GetModeManager()"
  },
  {
    "label": "BuildModeToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildModeToolbar(class FToolBarBuilder& ToolbarBuilder)"
  },
  {
    "label": "RequestDeletion()",
    "kind": "Method",
    "detail": "Function (} using FLegacyEdModeWidgetHelper::MD_MakeEditWidget ; using FLegacyEdModeWidgetHelper::MD_ValidateWidgetUsing ; using FLegacyEdModeWidgetHelper::CanCreateWidgetForStructure ; using FLegacyEdModeWidgetHelper::CanCreateWidgetForProperty ; using FLegacyEdModeWidgetHelper::ShouldCreateWidgetForProperty ; using FPropertyWidgetInfo = FLegacyEdModeWidgetHelper::FPropertyWidgetInfo ; public : void)",
    "insertText": "RequestDeletion()"
  },
  {
    "label": "OnModeUnregistered()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnModeUnregistered(FEditorModeID ModeID)"
  }
]