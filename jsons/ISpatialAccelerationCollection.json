[
  {
    "label": "FCollisionConstraintAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionConstraintAllocator"
  },
  {
    "label": "FAsyncCollisionReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncCollisionReceiver"
  },
  {
    "label": "FCollisionDetectorSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionDetectorSettings"
  },
  {
    "label": "FSpatialAccelerationBroadPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpatialAccelerationBroadPhase"
  },
  {
    "label": "IResimCacheBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IResimCacheBase"
  },
  {
    "label": "ISpatialAccelerationCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpatialAccelerationCollection"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ISpatialAcceleration . h \" # include \" Chaos / Box . h \" # include \" Chaos / Collision / StatsData . h \" # include \" GeometryParticlesfwd . h \" # include<tuple> namespace Chaos { namespace Private { class FCollisionConstraintAllocator ; } class FAsyncCollisionReceiver ; class FCollisionDetectorSettings ; class FSpatialAccelerationBroadPhase ; class IResimCacheBase ; template<TPayloadType,T,int d> class ISpatialAccelerationCollection : public ISpatialAcceleration<TPayloadType,T,d> { public :)",
    "insertText": "UE_NONCOPYABLE(ISpatialAccelerationCollection) ISpatialAccelerationCollection() : ISpatialAcceleration<TPayloadType, T, d>(StaticType) , ActiveBucketsMask(0) , AllAsyncTasksComplete(true)"
  },
  {
    "label": "AddSubstructure()",
    "kind": "Method",
    "detail": "Function (} ESpatialAcceleration StaticType = ESpatialAcceleration::Collection ; FSpatialAccelerationIdx)",
    "insertText": "AddSubstructure(TUniquePtr<ISpatialAcceleration<TPayloadType, T, d>>&& Substructure, uint16 Bucket, uint16 BucketInnerIdx)"
  },
  {
    "label": "RemoveSubstructure()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISpatialAcceleration<TPayloadType,T,d>>)",
    "insertText": "RemoveSubstructure(FSpatialAccelerationIdx Idx)"
  },
  {
    "label": "GetSubstructure()",
    "kind": "Method",
    "detail": "Function (ISpatialAcceleration<TPayloadType,T,d>*)",
    "insertText": "GetSubstructure(FSpatialAccelerationIdx Idx)"
  },
  {
    "label": "SwapSubstructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapSubstructure(ISpatialAccelerationCollection<TPayloadType, T, d>& Other, FSpatialAccelerationIdx Idx)"
  },
  {
    "label": "PBDComputeConstraintsLowLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PBDComputeConstraintsLowLevel(T Dt, FSpatialAccelerationBroadPhase& BroadPhase, Private::FCollisionConstraintAllocator* Allocator, const FCollisionDetectorSettings& Settings, IResimCacheBase* ResimCache)"
  },
  {
    "label": "GetAllSpatialIndices()",
    "kind": "Method",
    "detail": "Function (TArray<FSpatialAccelerationIdx>)",
    "insertText": "GetAllSpatialIndices()"
  },
  {
    "label": "IsBucketActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBucketActive(uint8 BucketIdx)"
  },
  {
    "label": "IsAllAsyncTasksComplete()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAllAsyncTasksComplete()"
  },
  {
    "label": "DeepAssign()",
    "kind": "Method",
    "detail": "Function (AllAsyncTasksComplete = State ; } void)",
    "insertText": "DeepAssign(const ISpatialAccelerationCollection<TPayloadType, FReal, 3>& Other)"
  },
  {
    "label": "DeepAssign()",
    "kind": "Method",
    "detail": "Function (ISpatialAcceleration<TPayloadType,FReal,3)",
    "insertText": "DeepAssign(Other)"
  },
  {
    "label": "DeepAssign()",
    "kind": "Method",
    "detail": "Function (AllAsyncTasksComplete = Other . AllAsyncTasksComplete ; } void)",
    "insertText": "DeepAssign(const ISpatialAcceleration<TPayloadType, FReal, 3>& Other)"
  },
  {
    "label": "DebugDraw()",
    "kind": "Method",
    "detail": "Function (} # if ! UE_BUILD_SHIPPING void)",
    "insertText": "DebugDraw(ISpacialDebugDrawInterface<T>* InInterface)"
  }
]