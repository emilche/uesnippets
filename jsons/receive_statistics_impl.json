[
  {
    "label": "StreamStatisticianImplInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamStatisticianImplInterface"
  },
  {
    "label": "StreamStatisticianImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamStatisticianImpl"
  },
  {
    "label": "StreamStatisticianLocked",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamStatisticianLocked"
  },
  {
    "label": "ReceiveStatisticsImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceiveStatisticsImpl"
  },
  {
    "label": "ReceiveStatisticsLocked",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceiveStatisticsLocked"
  },
  {
    "label": "StreamStatisticianImplInterface()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RECEIVE_STATISTICS_IMPL_H_ # define MODULES_RTP_RTCP_SOURCE_RECEIVE_STATISTICS_IMPL_H_ # include<algorithm> # include<functional> # include<memory> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" modules / include / module_common_types_public . h \" # include \" modules / rtp_rtcp / include / receive_statistics . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / report_block . h \" # include \" rtc_base / containers / flat_map . h \" # include \" rtc_base / rate_statistics . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class StreamStatisticianImplInterface : public StreamStatistician { public : ~)",
    "insertText": "StreamStatisticianImplInterface()"
  },
  {
    "label": "MaybeAppendReportBlockAndReset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeAppendReportBlockAndReset(std::vector<rtcp::ReportBlock>& report_blocks)"
  },
  {
    "label": "SetMaxReorderingThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxReorderingThreshold(int max_reordering_threshold)"
  },
  {
    "label": "EnableRetransmitDetection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRetransmitDetection(bool enable)"
  },
  {
    "label": "UpdateCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCounters(const RtpPacketReceived& packet)"
  },
  {
    "label": "StreamStatisticianImpl()",
    "kind": "Method",
    "detail": "Function (} ; class StreamStatisticianImpl : public StreamStatisticianImplInterface { public :)",
    "insertText": "StreamStatisticianImpl(uint32_t ssrc, Clock* clock, int max_reordering_threshold)"
  },
  {
    "label": "StreamStatisticianImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StreamStatisticianImpl()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (RtpReceiveStats)",
    "insertText": "GetStats()"
  },
  {
    "label": "GetFractionLostInPercent()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "GetFractionLostInPercent()"
  },
  {
    "label": "GetReceiveStreamDataCounters()",
    "kind": "Method",
    "detail": "Function (StreamDataCounters)",
    "insertText": "GetReceiveStreamDataCounters()"
  },
  {
    "label": "BitrateReceived()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "BitrateReceived()"
  },
  {
    "label": "IsRetransmitOfOldPacket()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsRetransmitOfOldPacket(const RtpPacketReceived& packet, int64_t now_ms)"
  },
  {
    "label": "UpdateJitter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateJitter(const RtpPacketReceived& packet, int64_t receive_time_ms)"
  },
  {
    "label": "ReviseFrequencyAndJitter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReviseFrequencyAndJitter(int payload_type_frequency)"
  },
  {
    "label": "UpdateOutOfOrder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateOutOfOrder(const RtpPacketReceived& packet, int64_t sequence_number, int64_t now_ms)"
  },
  {
    "label": "ReceivedRtpPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReceivedRtpPacket()"
  },
  {
    "label": "StreamStatisticianLocked()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "StreamStatisticianLocked()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&stream_lock_)"
  },
  {
    "label": "MaybeAppendReportBlockAndReset()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "MaybeAppendReportBlockAndReset(report_blocks)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} private : Mutex stream_lock_ ; StreamStatisticianImpl impl_)",
    "insertText": "RTC_GUARDED_BY(&stream_lock_)"
  },
  {
    "label": "ReceiveStatisticsImpl()",
    "kind": "Method",
    "detail": "Function (} ; class ReceiveStatisticsImpl : public ReceiveStatistics { public :)",
    "insertText": "ReceiveStatisticsImpl(Clock* clock, std::function<std::unique_ptr<StreamStatisticianImplInterface>( uint32_t ssrc, Clock* clock, int max_reordering_threshold)> stream_statistician_factory)"
  },
  {
    "label": "ReceiveStatisticsImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ReceiveStatisticsImpl()"
  },
  {
    "label": "RtcpReportBlocks()",
    "kind": "Method",
    "detail": "Function (std::vector<rtcp::ReportBlock>)",
    "insertText": "RtcpReportBlocks(size_t max_blocks)"
  },
  {
    "label": "OnRtpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRtpPacket(const RtpPacketReceived& packet)"
  },
  {
    "label": "GetStatistician()",
    "kind": "Method",
    "detail": "Function (StreamStatistician*)",
    "insertText": "GetStatistician(uint32_t ssrc)"
  },
  {
    "label": "SetMaxReorderingThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxReorderingThreshold(uint32_t ssrc, int max_reordering_threshold)"
  },
  {
    "label": "EnableRetransmitDetection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRetransmitDetection(uint32_t ssrc, bool enable)"
  },
  {
    "label": "GetOrCreateStatistician()",
    "kind": "Method",
    "detail": "Function (private : StreamStatisticianImplInterface*)",
    "insertText": "GetOrCreateStatistician(uint32_t ssrc)"
  },
  {
    "label": "StreamStatisticianImplInterface()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; std::function<std::unique_ptr<)",
    "insertText": "StreamStatisticianImplInterface(uint32_t ssrc, Clock* clock, int max_reordering_threshold)"
  },
  {
    "label": "ReceiveStatisticsLocked()",
    "kind": "Method",
    "detail": "Function (size_t last_returned_ssrc_idx_ ; std::vector<uint32_t> all_ssrcs_ ; int max_reordering_threshold_ ; flat_map<uint32_t,std::unique_ptr<StreamStatisticianImplInterface>> statisticians_ ; } ; class ReceiveStatisticsLocked : public ReceiveStatistics { public :)",
    "insertText": "ReceiveStatisticsLocked(Clock* clock, std::function<std::unique_ptr<StreamStatisticianImplInterface>( uint32_t ssrc, Clock* clock, int max_reordering_threshold)> stream_statitician_factory) : impl_(clock, std::move(stream_statitician_factory))"
  },
  {
    "label": "ReceiveStatisticsLocked()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ReceiveStatisticsLocked()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&receive_statistics_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} private : Mutex receive_statistics_lock_ ; ReceiveStatisticsImpl impl_)",
    "insertText": "RTC_GUARDED_BY(&receive_statistics_lock_)"
  }
]