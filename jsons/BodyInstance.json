[
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "UPhysicalMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterial"
  },
  {
    "label": "UPhysicalMaterialMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterialMask"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FBodyInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyInstance"
  },
  {
    "label": "FCollisionNotifyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionNotifyInfo"
  },
  {
    "label": "FCollisionShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionShape"
  },
  {
    "label": "FConstraintInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintInstance"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FRigidBodyState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRigidBodyState"
  },
  {
    "label": "FShapeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShapeData"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FInitBodySpawnParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitBodySpawnParams"
  },
  {
    "label": "FInitBodiesHelperBaseInternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitBodiesHelperBaseInternal"
  },
  {
    "label": "TInitBodiesHelperBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TInitBodiesHelperBase"
  },
  {
    "label": "FInitBodiesHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitBodiesHelper"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FInitBodiesHelperWithData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitBodiesHelperWithData"
  },
  {
    "label": "FCollisionResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionResponse"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRigidBodyHandle_Internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRigidBodyHandle_Internal"
  },
  {
    "label": "FBodyInstanceAsyncPhysicsTickHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyInstanceAsyncPhysicsTickHandle"
  },
  {
    "label": "ECollisionChannel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECollisionChannel"
  },
  {
    "label": "FCollisionResponseContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionResponseContainer"
  },
  {
    "label": "FWalkableSlopeOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWalkableSlopeOverride"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FBodyInstanceDelegates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyInstanceDelegates"
  },
  {
    "label": "FBodyInstanceDelegatesPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyInstanceDelegatesPtr"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "FOverlapResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlapResult"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FComponentQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentQueryParams"
  },
  {
    "label": "FCollisionResponseParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionResponseParams"
  },
  {
    "label": "FWeldInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeldInfo"
  },
  {
    "label": "UPhysicsAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsAsset"
  },
  {
    "label": "UCollisionProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCollisionProfile"
  },
  {
    "label": "FBodyInstanceCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBodyInstanceCustomization"
  },
  {
    "label": "FUpdateCollisionResponseHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateCollisionResponseHelper"
  },
  {
    "label": "FBodySetupDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBodySetupDetails"
  },
  {
    "label": "Chaos",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Chaos"
  },
  {
    "label": "FBodyInstanceCustomizationHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBodyInstanceCustomizationHelper"
  },
  {
    "label": "FFoliageTypeCustomizationHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFoliageTypeCustomizationHelpers"
  },
  {
    "label": "FBodyInstanceEditorHelpers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyInstanceEditorHelpers"
  },
  {
    "label": "FillInlineShapeArray_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Class . h \" # include \" Engine / EngineTypes . h \" # include \" CollisionQueryParams . h \" # include \" EngineDefines . h \" # include \" GameFramework / PlayerController . h \" # include \" Physics / PhysicsInterfaceCore . h \" # include \" Physics / PhysicsInterfaceTypes . h \" # include \" PhysicsPublic . h \" # include \" BodyInstanceCore . h \" # include \" BodyInstance . generated . h \" class UBodySetup ; class UPhysicalMaterial ; class UPhysicalMaterialMask ; class UPrimitiveComponent ; struct FBodyInstance ; struct FCollisionNotifyInfo ; struct FCollisionShape ; struct FConstraintInstance ; struct FPropertyChangedEvent ; struct FRigidBodyState ; struct FShapeData ; class UPrimitiveComponent ; struct FShapeData ; int32)",
    "insertText": "FillInlineShapeArray_AssumesLocked(PhysicsInterfaceTypes::FInlineShapeArray& Array, const FPhysicsActorHandle& Actor)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "USE_BODYINSTANCE_DEBUG_NAMES()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Default,SixDOF,YZPlane,XZPlane,XYPlane,CustomPlane,None } ; } struct FBodyInstance ; # ifndef CHAOS_DEBUG_NAME # define CHAOS_DEBUG_NAME 0 # endif # define)",
    "insertText": "USE_BODYINSTANCE_DEBUG_NAMES(!NO_LOGGING && CHAOS_DEBUG_NAME)"
  },
  {
    "label": "FInitBodySpawnParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInitBodySpawnParams(const UPrimitiveComponent* PrimComp)"
  },
  {
    "label": "FInitBodySpawnParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInitBodySpawnParams(bool bInStaticPhysics, bool bInPhysicsTypeDeterminesSimulation)"
  },
  {
    "label": "SetBodyInstanceExternalCollisionProfileBodySetup()",
    "kind": "Method",
    "detail": "Function (bool bStaticPhysics ; bool bPhysicsTypeDeterminesSimulation ; FPhysicsAggregateHandle Aggregate ; } ; namespace Chaos::Private { struct FInitBodiesHelperBaseInternal { protected : void)",
    "insertText": "SetBodyInstanceExternalCollisionProfileBodySetup(FBodyInstance* BodyInstance, UBodySetup* ExternalCollisionProfileBodySetup)"
  },
  {
    "label": "UpdateBodyInstanceSolverAsyncDeltaTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBodyInstanceSolverAsyncDeltaTime(FBodyInstance* BodyInstance)"
  },
  {
    "label": "TInitBodiesHelperBase()",
    "kind": "Method",
    "detail": "Function (} ; } template<InAllocatorType = FDefaultAllocator> struct TInitBodiesHelperBase : public Chaos::Private::FInitBodiesHelperBaseInternal { public :)",
    "insertText": "TInitBodiesHelperBase(TArray<FBodyInstance*, InAllocatorType>& InBodies, TArray<FTransform, InAllocatorType>& InTransforms, class UBodySetup* InBodySetup, class UPrimitiveComponent* InPrimitiveComp, FPhysScene* InRBScene, const FInitBodySpawnParams& InSpawnParams, FPhysicsAggregateHandle InAggregate)"
  },
  {
    "label": "TInitBodiesHelperBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TInitBodiesHelperBase(TArray<FBodyInstance*, InAllocatorType>& InBodies, TArray<FTransform, InAllocatorType>& InTransforms, class UBodySetup* InBodySetup, class UPrimitiveComponent* InComponent, UObject* InSourceObject, FPhysScene* InRBScene, const FInitBodySpawnParams& InSpawnParams, FPhysicsAggregateHandle InAggregate)"
  },
  {
    "label": "TInitBodiesHelperBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TInitBodiesHelperBase(const TInitBodiesHelperBase& InHelper)"
  },
  {
    "label": "TInitBodiesHelperBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TInitBodiesHelperBase(TInitBodiesHelperBase&& InHelper)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TInitBodiesHelperBase&)",
    "insertText": "operator(const TInitBodiesHelperBase& InHelper)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TInitBodiesHelperBase&)",
    "insertText": "operator(TInitBodiesHelperBase&& InHelper)"
  },
  {
    "label": "CreateShapes_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateShapes_AssumesLocked(FBodyInstance* Instance)"
  },
  {
    "label": "CreateShapesAndActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateShapesAndActors()"
  },
  {
    "label": "InitBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBodies()"
  },
  {
    "label": "UpdateSimulatingAndBlendWeight()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateSimulatingAndBlendWeight()"
  },
  {
    "label": "FInitBodiesHelper()",
    "kind": "Method",
    "detail": "Function (} ; using FInitBodiesHelperBase = TInitBodiesHelperBase<FDefaultAllocator> ; template<bool bCompileStatic,InAllocatorType = FDefaultAllocator> struct FInitBodiesHelper : public TInitBodiesHelperBase<InAllocatorType> {)",
    "insertText": "FInitBodiesHelper(TArray<FBodyInstance*, InAllocatorType>& InBodies, TArray<FTransform, InAllocatorType>& InTransforms, class UBodySetup* InBodySetup, class UPrimitiveComponent* InPrimitiveComp, FPhysScene* InRBScene, const FInitBodySpawnParams& InSpawnParams, FPhysicsAggregateHandle InAggregate)"
  },
  {
    "label": "FInitBodiesHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInitBodiesHelper(TArray<FBodyInstance*, InAllocatorType>& InBodies, TArray<FTransform, InAllocatorType>& InTransforms, class UBodySetup* InBodySetup, class UPrimitiveComponent* InComponent, class UObject* InOwnerObject, FPhysScene* InRBScene, const FInitBodySpawnParams& InSpawnParams, FPhysicsAggregateHandle InAggregate) : TInitBodiesHelperBase<InAllocatorType>(InBodies, InTransforms, InBodySetup, InComponent, InOwnerObject, InRBScene, InSpawnParams, InAggregate)"
  },
  {
    "label": "USkeletalMeshComponent()",
    "kind": "Method",
    "detail": "Function (this -> bStatic = bCompileStatic | | this -> SpawnParams . bStaticPhysics ; this -> SkelMeshComp = bCompileStatic ? nullptr : Cast<)",
    "insertText": "USkeletalMeshComponent(this->PrimitiveComp)"
  },
  {
    "label": "FInitBodiesHelperWithData()",
    "kind": "Method",
    "detail": "Function (} } } ; template<bool bCompileStatic> struct FInitBodiesHelperWithData : public FInitBodiesHelperBase {)",
    "insertText": "FInitBodiesHelperWithData()"
  },
  {
    "label": "FInitBodiesHelperWithData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInitBodiesHelperWithData(TArray<FBodyInstance*>&& InBodies, TArray<FTransform>&& InTransforms, class UBodySetup* InBodySetup, class UPrimitiveComponent* InPrimitiveComp, FPhysScene* InRBScene, const FInitBodySpawnParams& InSpawnParams, FPhysicsAggregateHandle InAggregate) : FInitBodiesHelperBase(OwnedBodies, OwnedTransforms, InBodySetup, InPrimitiveComp, InRBScene, InSpawnParams, InAggregate), OwnedBodies(MoveTemp(InBodies)), OwnedTransforms(MoveTemp(InTransforms))"
  },
  {
    "label": "USkeletalMeshComponent()",
    "kind": "Method",
    "detail": "Function (bStatic = bCompileStatic | | SpawnParams . bStaticPhysics ; SkelMeshComp = bCompileStatic ? nullptr : Cast<)",
    "insertText": "USkeletalMeshComponent(PrimitiveComp)"
  },
  {
    "label": "FInitBodiesHelperWithData()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FInitBodiesHelperWithData(const FInitBodiesHelperWithData& InHelper) : FInitBodiesHelperBase(OwnedBodies, OwnedTransforms, InHelper.BodySetup, InHelper.PrimitiveComp, InHelper.PhysScene, InHelper.SpawnParams, InHelper.Aggregate), OwnedBodies(InHelper.OwnedBodies), OwnedTransforms(InHelper.OwnedTransforms)"
  },
  {
    "label": "FInitBodiesHelperWithData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInitBodiesHelperWithData(FInitBodiesHelperWithData&& InHelper) : FInitBodiesHelperBase(OwnedBodies, OwnedTransforms, InHelper.BodySetup, InHelper.PrimitiveComp, InHelper.PhysScene, InHelper.SpawnParams, InHelper.Aggregate), OwnedBodies(MoveTemp(InHelper.OwnedBodies)), OwnedTransforms(MoveTemp(InHelper.OwnedTransforms))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FInitBodiesHelperWithData&)",
    "insertText": "operator(const FInitBodiesHelperWithData& InHelper)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FInitBodiesHelperWithData&)",
    "insertText": "operator(FInitBodiesHelperWithData&& InHelper)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (TArray<FBodyInstance*> OwnedBodies ; TArray<FTransform> OwnedTransforms ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() ENGINE_API FCollisionResponse()"
  },
  {
    "label": "FCollisionResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCollisionResponse(ECollisionResponse DefaultResponse)"
  },
  {
    "label": "SetResponse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetResponse(ECollisionChannel Channel, ECollisionResponse NewResponse)"
  },
  {
    "label": "SetAllChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAllChannels(ECollisionResponse NewResponse)"
  },
  {
    "label": "ReplaceChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceChannels(ECollisionResponse OldResponse, ECollisionResponse NewResponse)"
  },
  {
    "label": "GetResponseContainer()",
    "kind": "Method",
    "detail": "Function (} const FCollisionResponseContainer&)",
    "insertText": "GetResponseContainer()"
  },
  {
    "label": "SetResponsesArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResponsesArray(const TArray<FResponseChannel>& InChannelResponses)"
  },
  {
    "label": "UpdateResponseContainerFromArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResponseContainerFromArray()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FCollisionResponse& Other)"
  },
  {
    "label": "RemoveReponseFromArray()",
    "kind": "Method",
    "detail": "Function (} private : # if 1 bool)",
    "insertText": "RemoveReponseFromArray(ECollisionChannel Channel)"
  },
  {
    "label": "AddReponseToArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddReponseToArray(ECollisionChannel Channel, ECollisionResponse Response)"
  },
  {
    "label": "UpdateArrayFromResponseContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateArrayFromResponseContainer()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (struct FBodyInstance ; } ; template<> struct TStructOpsTypeTraits<FCollisionResponse> : public TStructOpsTypeTraitsBase2<FCollisionResponse> { enum { WithIdenticalViaEquality = true } ; } ; enum class BodyInstanceSceneState : uint8 { NotAdded,AwaitingAdd,Added,AwaitingRemove,Removed } ; namespace Chaos { class FRigidBodyHandle_Internal ; })",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Chaos::FRigidBodyHandle_Internal*)",
    "insertText": "operator()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "GetSolverAsyncDeltaTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSolverAsyncDeltaTime()"
  },
  {
    "label": "UpdateSolverAsyncDeltaTime()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateSolverAsyncDeltaTime()"
  },
  {
    "label": "UpdateInterpolateWhenSubStepping()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<UBodySetup> ExternalCollisionProfileBodySetup ; void)",
    "insertText": "UpdateInterpolateWhenSubStepping()"
  },
  {
    "label": "ShouldInterpolateWhenSubStepping()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShouldInterpolateWhenSubStepping()"
  },
  {
    "label": "GetRigidBodyState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRigidBodyState(FRigidBodyState& OutState)"
  },
  {
    "label": "UseExternalCollisionProfile()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "UseExternalCollisionProfile(UBodySetup* InExternalCollisionProfileBodySetup)"
  },
  {
    "label": "ClearExternalCollisionProfile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearExternalCollisionProfile()"
  },
  {
    "label": "SetDOFLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDOFLock(EDOFMode::Type NewDOFMode)"
  },
  {
    "label": "GetLockedAxis()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetLockedAxis()"
  },
  {
    "label": "CreateDOFLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDOFLock()"
  },
  {
    "label": "ResolveDOFMode()",
    "kind": "Method",
    "detail": "Function (EDOFMode::Type)",
    "insertText": "ResolveDOFMode(EDOFMode::Type DOFMode)"
  },
  {
    "label": "GetBodySetup()",
    "kind": "Method",
    "detail": "Function (public : UBodySetup*)",
    "insertText": "GetBodySetup()"
  },
  {
    "label": "GetPhysicsActorHandle()",
    "kind": "Method",
    "detail": "Function (FPhysicsActorHandle&)",
    "insertText": "GetPhysicsActorHandle()"
  },
  {
    "label": "GetActorReferenceWithWelding()",
    "kind": "Method",
    "detail": "Function (const FPhysicsActorHandle&)",
    "insertText": "GetActorReferenceWithWelding()"
  },
  {
    "label": "GetBodyInstanceAsyncPhysicsTickHandle()",
    "kind": "Method",
    "detail": "Function (FPhysicsActorHandle ActorHandle ; FBodyInstanceAsyncPhysicsTickHandle)",
    "insertText": "GetBodyInstanceAsyncPhysicsTickHandle()"
  },
  {
    "label": "FBodyInstance()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FBodyInstance()"
  },
  {
    "label": "LoadProfileData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadProfileData(bool bVerifyProfile)"
  },
  {
    "label": "InitBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBody(UBodySetup* Setup, const FTransform& Transform, UPrimitiveComponent* PrimComp, FPhysScene* InRBScene)"
  },
  {
    "label": "InitBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBody(Setup, Transform, PrimComp, InRBScene, FInitBodySpawnParams(PrimComp))"
  },
  {
    "label": "InitBody()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitBody(UBodySetup* Setup, const FTransform& Transform, UPrimitiveComponent* PrimComp, FPhysScene* InRBScene, const FInitBodySpawnParams& SpawnParams)"
  },
  {
    "label": "InitBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBody(UBodySetup* Setup, const FTransform& Transform, UPrimitiveComponent* PrimComp, UObject* SourceObject, FPhysScene* InRBScene, const FInitBodySpawnParams& SpawnParams)"
  },
  {
    "label": "ValidateTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateTransform(const FTransform &Transform, const FString& DebugName, const UBodySetup* Setup)"
  },
  {
    "label": "InitStaticBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitStaticBodies(const TArray<FBodyInstance*>& Bodies, const TArray<FTransform>& Transforms, UBodySetup* BodySetup, class UPrimitiveComponent* PrimitiveComp, FPhysScene* InRBScene)"
  },
  {
    "label": "InitStaticBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitStaticBodies(TArray<FBodyInstance*>&& Bodies, TArray<FTransform>&& Transforms, UBodySetup* BodySetup, class UPrimitiveComponent* PrimitiveComp, FPhysScene* InRBScene)"
  },
  {
    "label": "GetPhysicsScene()",
    "kind": "Method",
    "detail": "Function (FPhysScene*)",
    "insertText": "GetPhysicsScene()"
  },
  {
    "label": "InitDynamicProperties_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDynamicProperties_AssumesLocked()"
  },
  {
    "label": "BuildBodyFilterData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildBodyFilterData(FBodyCollisionFilterData& OutFilterData, const int32 ShapeIndex = INDEX_NONE)"
  },
  {
    "label": "BuildBodyCollisionFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildBodyCollisionFlags(FBodyCollisionFlags& OutFlags, ECollisionEnabled::Type UseCollisionEnabled, bool bUseComplexAsSimple)"
  },
  {
    "label": "GetAllShapes_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAllShapes_AssumesLocked(TArray<FPhysicsShapeHandle>& OutShapes)"
  },
  {
    "label": "TermBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TermBody(bool bNeverDeferRelease = false)"
  },
  {
    "label": "Weld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Weld(FBodyInstance* Body, const FTransform& RelativeTM)"
  },
  {
    "label": "UnWeld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnWeld(FBodyInstance* Body)"
  },
  {
    "label": "ApplyWeldOnChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWeldOnChildren()"
  },
  {
    "label": "PostShapeChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostShapeChange()"
  },
  {
    "label": "UpdateBodyScale()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateBodyScale(const FVector& InScale3D, bool bForceUpdate = false)"
  },
  {
    "label": "UpdateTriMeshVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTriMeshVertices(const TArray<FVector> & NewPositions)"
  },
  {
    "label": "GetCOMPosition()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetCOMPosition()"
  },
  {
    "label": "GetMassSpaceToWorldSpace()",
    "kind": "Method",
    "detail": "Function (} FTransform)",
    "insertText": "GetMassSpaceToWorldSpace()"
  },
  {
    "label": "GetMassSpaceLocal()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetMassSpaceLocal()"
  },
  {
    "label": "SetMassSpaceLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMassSpaceLocal(const FTransform& NewMassSpaceLocalTM)"
  },
  {
    "label": "DrawCOMPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCOMPosition(class FPrimitiveDrawInterface* PDI, float COMRenderSize, const FColor& COMRenderColor)"
  },
  {
    "label": "CopyBodyInstancePropertiesFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyBodyInstancePropertiesFrom(const FBodyInstance* FromInst)"
  },
  {
    "label": "CopyRuntimeBodyInstancePropertiesFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyRuntimeBodyInstancePropertiesFrom(const FBodyInstance* FromInst)"
  },
  {
    "label": "GetSimplePhysicalMaterial()",
    "kind": "Method",
    "detail": "Function (UPhysicalMaterial*)",
    "insertText": "GetSimplePhysicalMaterial()"
  },
  {
    "label": "GetSimplePhysicalMaterial()",
    "kind": "Method",
    "detail": "Function (UPhysicalMaterial*)",
    "insertText": "GetSimplePhysicalMaterial(const FBodyInstance* BodyInstance, TWeakObjectPtr<UPrimitiveComponent> Owner, TWeakObjectPtr<UBodySetup> BodySetupPtr)"
  },
  {
    "label": "GetComplexPhysicalMaterials()",
    "kind": "Method",
    "detail": "Function (TArray<UPhysicalMaterial*>)",
    "insertText": "GetComplexPhysicalMaterials()"
  },
  {
    "label": "GetComplexPhysicalMaterials()",
    "kind": "Method",
    "detail": "Function (TArray<UPhysicalMaterial*>)",
    "insertText": "GetComplexPhysicalMaterials(TArray<FPhysicalMaterialMaskParams>& OutPhysMaterialMasks)"
  },
  {
    "label": "GetComplexPhysicalMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComplexPhysicalMaterials(TArray<UPhysicalMaterial*> &OutPhysMaterials)"
  },
  {
    "label": "GetComplexPhysicalMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComplexPhysicalMaterials(TArray<UPhysicalMaterial*> &OutPhysMaterials, TArray<FPhysicalMaterialMaskParams>& OutPhysMaterialMasks)"
  },
  {
    "label": "GetComplexPhysicalMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComplexPhysicalMaterials(const FBodyInstance* BodyInstance, TWeakObjectPtr<UPrimitiveComponent> Owner, TArray<UPhysicalMaterial*>& OutPhysMaterials, TArray<FPhysicalMaterialMaskParams>* OutPhysMaterialMasks = nullptr)"
  },
  {
    "label": "GetWalkableSlopeOverride()",
    "kind": "Method",
    "detail": "Function (const struct FWalkableSlopeOverride&)",
    "insertText": "GetWalkableSlopeOverride()"
  },
  {
    "label": "SetWalkableSlopeOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWalkableSlopeOverride(const FWalkableSlopeOverride& NewOverride, bool bNewOverideSetting = true)"
  },
  {
    "label": "GetOverrideWalkableSlopeOnInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOverrideWalkableSlopeOnInstance()"
  },
  {
    "label": "IsDynamic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDynamic()"
  },
  {
    "label": "IsNonKinematic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNonKinematic()"
  },
  {
    "label": "GetBodyMass()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBodyMass()"
  },
  {
    "label": "GetBodyBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetBodyBounds()"
  },
  {
    "label": "GetBodyBoundsLocal()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetBodyBoundsLocal()"
  },
  {
    "label": "GetBodyInertiaTensor()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetBodyInertiaTensor()"
  },
  {
    "label": "IsInertiaConditioningEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInertiaConditioningEnabled()"
  },
  {
    "label": "ApplyAsyncPhysicsCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAsyncPhysicsCommand(FAsyncPhysicsTimestamp TimeStamp, const bool bIsInternal, APlayerController* PlayerController, const TFunction<void()>& Command)"
  },
  {
    "label": "SetInstanceSimulatePhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstanceSimulatePhysics(bool bSimulate, bool bMaintainPhysicsBlending=false, bool bPreserveExistingAttachment = false)"
  },
  {
    "label": "UpdateInstanceSimulatePhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInstanceSimulatePhysics()"
  },
  {
    "label": "IsInstanceSimulatingPhysics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInstanceSimulatingPhysics()"
  },
  {
    "label": "IsInstanceAwake()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInstanceAwake()"
  },
  {
    "label": "WakeInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeInstance()"
  },
  {
    "label": "PutInstanceToSleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutInstanceToSleep()"
  },
  {
    "label": "GetSleepThresholdMultiplier()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSleepThresholdMultiplier()"
  },
  {
    "label": "AddCustomPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCustomPhysics(FCalculateCustomPhysics& CalculateCustomPhysics)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForce(const FVector& Force, bool bAllowSubstepping = true, bool bAccelChange = false, const FAsyncPhysicsTimestamp TimeStamp = FAsyncPhysicsTimestamp(), APlayerController* PlayerController = nullptr)"
  },
  {
    "label": "AddForceAtPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceAtPosition(const FVector& Force, const FVector& Position, bool bAllowSubstepping = true, bool bIsLocalForce = false, const FAsyncPhysicsTimestamp TimeStamp = FAsyncPhysicsTimestamp(), APlayerController* PlayerController = nullptr)"
  },
  {
    "label": "ClearForces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearForces(bool bAllowSubstepping = true)"
  },
  {
    "label": "SetOneWayInteraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOneWayInteraction(bool InOneWayInteraction = true)"
  },
  {
    "label": "AddTorqueInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTorqueInRadians(const FVector& Torque, bool bAllowSubstepping = true, bool bAccelChange = false, const FAsyncPhysicsTimestamp TimeStamp = FAsyncPhysicsTimestamp(), APlayerController* PlayerController = nullptr)"
  },
  {
    "label": "ClearTorques()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTorques(bool bAllowSubstepping = true)"
  },
  {
    "label": "AddAngularImpulseInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAngularImpulseInRadians(const FVector& Impulse, bool bVelChange, const FAsyncPhysicsTimestamp TimeStamp = FAsyncPhysicsTimestamp(), APlayerController* PlayerController = nullptr)"
  },
  {
    "label": "AddImpulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImpulse(const FVector& Impulse, bool bVelChange, const FAsyncPhysicsTimestamp TimeStamp = FAsyncPhysicsTimestamp(), APlayerController* PlayerController = nullptr)"
  },
  {
    "label": "AddImpulseAtPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImpulseAtPosition(const FVector& Impulse, const FVector& Position, const FAsyncPhysicsTimestamp TimeStamp = FAsyncPhysicsTimestamp(), APlayerController* PlayerController = nullptr)"
  },
  {
    "label": "AddVelocityChangeImpulseAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVelocityChangeImpulseAtLocation(const FVector& Impulse, const FVector& Position, const FAsyncPhysicsTimestamp TimeStamp = FAsyncPhysicsTimestamp(), APlayerController* PlayerController = nullptr)"
  },
  {
    "label": "SetLinearVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearVelocity(const FVector& NewVel, bool bAddToCurrent, bool bAutoWake = true)"
  },
  {
    "label": "SetAngularVelocityInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularVelocityInRadians(const FVector& NewAngVel, bool bAddToCurrent, bool bAutoWake = true)"
  },
  {
    "label": "SetMaxAngularVelocityInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, bool bUpdateOverrideMaxAngularVelocity = true)"
  },
  {
    "label": "GetMaxAngularVelocityInRadians()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxAngularVelocityInRadians()"
  },
  {
    "label": "GetOverrideMaxDepenetrationVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOverrideMaxDepenetrationVelocity()"
  },
  {
    "label": "SetMaxDepenetrationVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxDepenetrationVelocity(float MaxVelocity)"
  },
  {
    "label": "GetMaxDepenetrationVelocity()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxDepenetrationVelocity()"
  },
  {
    "label": "SetEnableGravity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnableGravity(bool bGravityEnabled)"
  },
  {
    "label": "SetGravityGroupIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGravityGroupIndex(int32 NewGravityGroupIndex)"
  },
  {
    "label": "SetUpdateKinematicFromSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpdateKinematicFromSimulation(bool bUpdateKinematicFromSimulation)"
  },
  {
    "label": "SetContactModification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContactModification(bool bNewContactModification)"
  },
  {
    "label": "SetSmoothEdgeCollisionsEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSmoothEdgeCollisionsEnabled(bool bNewSmoothEdgeCollisions)"
  },
  {
    "label": "SetUseCCD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseCCD(bool bInUseCCD)"
  },
  {
    "label": "SetUseMACD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseMACD(bool bInUseMACD)"
  },
  {
    "label": "SetPositionSolverIterationCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPositionSolverIterationCount(uint8 PositionSolverIterationCountIn)"
  },
  {
    "label": "SetVelocitySolverIterationCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVelocitySolverIterationCount(uint8 VelocitySolverIterationCountIn)"
  },
  {
    "label": "SetProjectionSolverIterationCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProjectionSolverIterationCount(uint8 ProjectionSolverIterationCountIn)"
  },
  {
    "label": "GetUseMACD()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseMACD()"
  },
  {
    "label": "IsPhysicsDisabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPhysicsDisabled()"
  },
  {
    "label": "GetPhysicsReplicationMode()",
    "kind": "Method",
    "detail": "Function (EPhysicsReplicationMode)",
    "insertText": "GetPhysicsReplicationMode()"
  },
  {
    "label": "FBodyInstanceDelegatesPtr()",
    "kind": "Method",
    "detail": "Function (private : struct FBodyInstanceDelegates { FCalculateCustomProjection OnCalculateCustomProjection ; FRecalculatedMassProperties OnRecalculatedMassProperties ; } ; struct FBodyInstanceDelegatesPtr : public TUniquePtr<FBodyInstanceDelegates> {)",
    "insertText": "FBodyInstanceDelegatesPtr()"
  },
  {
    "label": "FBodyInstanceDelegatesPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBodyInstanceDelegatesPtr(const FBodyInstanceDelegatesPtr& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(new FBodyInstanceDelegates)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FBodyInstanceDelegatesPtr&)",
    "insertText": "operator(const FBodyInstanceDelegatesPtr& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Reset()"
  },
  {
    "label": "ExecuteOnCalculateCustomProjection()",
    "kind": "Method",
    "detail": "Function (} return* this ; } } ; FBodyInstanceDelegatesPtr BodyInstanceDelegates ; public : void)",
    "insertText": "ExecuteOnCalculateCustomProjection(FTransform& WorldTM)"
  },
  {
    "label": "OnCalculateCustomProjection()",
    "kind": "Method",
    "detail": "Function (FCalculateCustomProjection&)",
    "insertText": "OnCalculateCustomProjection()"
  },
  {
    "label": "OnRecalculatedMassProperties()",
    "kind": "Method",
    "detail": "Function (FRecalculatedMassProperties&)",
    "insertText": "OnRecalculatedMassProperties()"
  },
  {
    "label": "IsValidBodyInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidBodyInstance()"
  },
  {
    "label": "GetUnrealWorldTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetUnrealWorldTransform(bool bWithProjection = true, bool bForceGlobalPose = false)"
  },
  {
    "label": "GetUnrealWorldTransform_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetUnrealWorldTransform_AssumesLocked(bool bWithProjection = true, bool bForceGlobalPose = false)"
  },
  {
    "label": "GetKinematicTarget()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetKinematicTarget()"
  },
  {
    "label": "GetKinematicTarget_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetKinematicTarget_AssumesLocked()"
  },
  {
    "label": "SetBodyTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBodyTransform(const FTransform& NewTransform, ETeleportType Teleport, bool bAutoWake = true)"
  },
  {
    "label": "GetUnrealWorldVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetUnrealWorldVelocity()"
  },
  {
    "label": "GetUnrealWorldVelocity_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetUnrealWorldVelocity_AssumesLocked()"
  },
  {
    "label": "GetUnrealWorldAngularVelocityInRadians()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetUnrealWorldAngularVelocityInRadians()"
  },
  {
    "label": "GetUnrealWorldAngularVelocityInRadians_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetUnrealWorldAngularVelocityInRadians_AssumesLocked()"
  },
  {
    "label": "GetUnrealWorldVelocityAtPoint()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetUnrealWorldVelocityAtPoint(const FVector& Point)"
  },
  {
    "label": "GetUnrealWorldVelocityAtPoint_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetUnrealWorldVelocityAtPoint_AssumesLocked(const FVector& Point)"
  },
  {
    "label": "SetPhysMaterialOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)"
  },
  {
    "label": "SetContactReportForceThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContactReportForceThreshold(float Threshold)"
  },
  {
    "label": "SetResponseToChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetResponseToChannel(ECollisionChannel Channel, ECollisionResponse NewResponse)"
  },
  {
    "label": "SetResponseToAllChannels()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetResponseToAllChannels(ECollisionResponse NewResponse)"
  },
  {
    "label": "ReplaceResponseToChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceResponseToChannels(ECollisionResponse OldResponse, ECollisionResponse NewResponse)"
  },
  {
    "label": "SetResponseToChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetResponseToChannels(const FCollisionResponseContainer& NewResponses)"
  },
  {
    "label": "SetShapeResponseToChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetShapeResponseToChannels(const int32 ShapeIndex, const FCollisionResponseContainer& NewResponses)"
  },
  {
    "label": "GetShapeResponseToChannels()",
    "kind": "Method",
    "detail": "Function (} const FCollisionResponseContainer&)",
    "insertText": "GetShapeResponseToChannels(const int32 ShapeIndex)"
  },
  {
    "label": "GetShapeResponseToChannels()",
    "kind": "Method",
    "detail": "Function (const FCollisionResponseContainer&)",
    "insertText": "GetShapeResponseToChannels(const int32 ShapeIndex, const FCollisionResponseContainer& DefaultResponseContainer)"
  },
  {
    "label": "SetObjectType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectType(ECollisionChannel Channel)"
  },
  {
    "label": "SetShapeCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShapeCollisionEnabled(const int32 ShapeIndex, ECollisionEnabled::Type NewType, bool bUpdatePhysicsFilterData = true)"
  },
  {
    "label": "GetCollisionEnabled_CheckOwner()",
    "kind": "Method",
    "detail": "Function (private : ECollisionEnabled::Type)",
    "insertText": "GetCollisionEnabled_CheckOwner()"
  },
  {
    "label": "GetCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (public : ECollisionEnabled::Type)",
    "insertText": "GetCollisionEnabled(bool bCheckOwner = true)"
  },
  {
    "label": "GetShapeCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (} ECollisionEnabled::Type)",
    "insertText": "GetShapeCollisionEnabled(const int32 ShapeIndex)"
  },
  {
    "label": "SetCollisionProfileNameDeferred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionProfileNameDeferred(FName InCollisionProfileName)"
  },
  {
    "label": "SetCollisionProfileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionProfileName(FName InCollisionProfileName)"
  },
  {
    "label": "SetMaskFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaskFilter(FMaskFilter InMaskFilter)"
  },
  {
    "label": "DoesUseCollisionProfile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesUseCollisionProfile()"
  },
  {
    "label": "SetMassScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMassScale(float InMassScale=1.f)"
  },
  {
    "label": "UpdateMassProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMassProperties()"
  },
  {
    "label": "UpdateDampingProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDampingProperties()"
  },
  {
    "label": "UpdatePhysicalMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePhysicalMaterials()"
  },
  {
    "label": "ApplyMaterialToShape_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyMaterialToShape_AssumesLocked(const FPhysicsShapeHandle& InShape, UPhysicalMaterial* SimplePhysMat, const TArrayView<UPhysicalMaterial*>& ComplexPhysMats, const TArrayView<FPhysicalMaterialMaskParams>* ComplexPhysMatMasks = nullptr)"
  },
  {
    "label": "ApplyMaterialToInstanceShapes_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyMaterialToInstanceShapes_AssumesLocked(UPhysicalMaterial* SimplePhysMat, TArray<UPhysicalMaterial*>& ComplexPhysMats, const TArrayView<FPhysicalMaterialMaskParams>& ComplexPhysMatMasks)"
  },
  {
    "label": "UpdatePhysicsFilterData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePhysicsFilterData()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar,FBodyInstance& BodyInst)"
  },
  {
    "label": "GetBodyDebugName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBodyDebugName()"
  },
  {
    "label": "LineTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTrace(struct FHitResult& OutHit, const FVector& Start, const FVector& End, bool bTraceComplex, bool bReturnPhysicalMaterial = false)"
  },
  {
    "label": "Sweep()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Sweep(struct FHitResult& OutHit, const FVector& Start, const FVector& End, const FQuat& ShapeWorldRotation, const FCollisionShape& Shape, bool bTraceComplex)"
  },
  {
    "label": "OverlapTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapTest(const FVector& Position, const FQuat& Rotation, const struct FCollisionShape& CollisionShape, FMTDResult* OutMTD = nullptr, bool bTraceComplex = false)"
  },
  {
    "label": "OverlapTest_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapTest_AssumesLocked(const FVector& Position, const FQuat& Rotation, const struct FCollisionShape& CollisionShape, FMTDResult* OutMTD = nullptr, bool bTraceComplex = false)"
  },
  {
    "label": "OverlapTestForBodies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapTestForBodies(const FVector& Position, const FQuat& Rotation, const TArray<FBodyInstance*>& Bodies, bool bTraceComplex = false)"
  },
  {
    "label": "OverlapTestForBody()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapTestForBody(const FVector& Position, const FQuat& Rotation, FBodyInstance* Body, bool bTraceComplex = false)"
  },
  {
    "label": "OverlapMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapMulti(TArray<struct FOverlapResult>& InOutOverlaps, const class UWorld* World, const FTransform* pWorldToComponent, const FVector& Pos, const FQuat& Rot, ECollisionChannel TestChannel, const struct FComponentQueryParams& Params, const struct FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectQueryParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "OverlapMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapMulti(TArray<struct FOverlapResult>& InOutOverlaps, const class UWorld* World, const FTransform* pWorldToComponent, const FVector& Pos, const FRotator& Rot, ECollisionChannel TestChannel, const struct FComponentQueryParams& Params, const struct FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectQueryParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "AddRadialImpulseToBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialImpulseToBody(const FVector& Origin, float Radius, float Strength, uint8 Falloff, bool bVelChange = false)"
  },
  {
    "label": "AddRadialForceToBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialForceToBody(const FVector& Origin, float Radius, float Strength, uint8 Falloff, bool bAccelChange = false, bool bAllowSubstepping = true)"
  },
  {
    "label": "GetSquaredDistanceToBody()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSquaredDistanceToBody(const FVector& Point, float& OutDistanceSquared, FVector& OutPointOnBody)"
  },
  {
    "label": "GetDistanceToBody()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDistanceToBody(const FVector& Point, FVector& OutPointOnBody)"
  },
  {
    "label": "GetBodyInstanceResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBodyInstanceResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "FixupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupData(class UObject* Loader)"
  },
  {
    "label": "GetCollisionResponse()",
    "kind": "Method",
    "detail": "Function (const FCollisionResponse&)",
    "insertText": "GetCollisionResponse()"
  },
  {
    "label": "GetOriginalBodyInstance()",
    "kind": "Method",
    "detail": "Function (const FBodyInstance*)",
    "insertText": "GetOriginalBodyInstance(const FPhysicsShapeHandle& InShape)"
  },
  {
    "label": "GetRelativeBodyTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform&)",
    "insertText": "GetRelativeBodyTransform(const FPhysicsShapeHandle& InShape)"
  },
  {
    "label": "IsShapeBoundToBody()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShapeBoundToBody(const FPhysicsShapeHandle& Shape)"
  },
  {
    "label": "FWeldInfo()",
    "kind": "Method",
    "detail": "Function (public : FPhysicsUserData PhysicsUserData ; struct FWeldInfo {)",
    "insertText": "FWeldInfo(FBodyInstance* InChildBI, const FTransform& InRelativeTM) : ChildBI(InChildBI) , RelativeTM(InRelativeTM)"
  },
  {
    "label": "GetCurrentWeldInfo()",
    "kind": "Method",
    "detail": "Function (} FBodyInstance* ChildBI ; FTransform RelativeTM ; } ; const TMap<FPhysicsShapeHandle,FWeldInfo>*)",
    "insertText": "GetCurrentWeldInfo()"
  },
  {
    "label": "UpdateOneWayInteraction()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateOneWayInteraction()"
  },
  {
    "label": "UpdateMaxDepenetrationVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMaxDepenetrationVelocity()"
  },
  {
    "label": "InvalidateCollisionProfileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateCollisionProfileName()"
  },
  {
    "label": "SetWeldedBodyTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWeldedBodyTransform(FBodyInstance* TheirBody, const FTransform& NewTransform)"
  },
  {
    "label": "IsValidCollisionProfileName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidCollisionProfileName(FName InCollisionProfileName)"
  },
  {
    "label": "OverlapTestForBodiesImpl()",
    "kind": "Method",
    "detail": "Function (template<AllocatorType> bool)",
    "insertText": "OverlapTestForBodiesImpl(const FVector& Position, const FQuat& Rotation, const TArray<FBodyInstance*, AllocatorType>& Bodies, bool bTraceComplex = false)"
  },
  {
    "label": "UpdateDebugRendering()",
    "kind": "Method",
    "detail": "Function (class UPhysicsAsset ; class UCollisionProfile ; class FBodyInstanceCustomization ; struct FUpdateCollisionResponseHelper ; class FBodySetupDetails ; struct Chaos::Private::FInitBodiesHelperBaseInternal ; class FBodyInstanceCustomizationHelper ; class FFoliageTypeCustomizationHelpers ; private : void)",
    "insertText": "UpdateDebugRendering()"
  },
  {
    "label": "EnsureConsistentMobilitySimulationSettingsOnPostEditChange()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<TMap<FPhysicsShapeHandle,FWeldInfo>> ShapeToBodiesMap ; } ; template<> struct TStructOpsTypeTraits<FBodyInstance> : public TStructOpsTypeTraitsBase2<FBodyInstance> { enum { WithCopy = false } ; } ; # if WITH_EDITOR struct FBodyInstanceEditorHelpers { void)",
    "insertText": "EnsureConsistentMobilitySimulationSettingsOnPostEditChange(UPrimitiveComponent* Component, FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "FBodyInstanceEditorHelpers()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FBodyInstanceEditorHelpers()"
  },
  {
    "label": "OverlapMulti()",
    "kind": "Method",
    "detail": "Function (} } ; # endif bool)",
    "insertText": "OverlapMulti(TArray<struct FOverlapResult>& InOutOverlaps, const class UWorld* World, const FTransform* pWorldToComponent, const FVector& Pos, const FRotator& Rot, ECollisionChannel TestChannel, const FComponentQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectQueryParams)"
  },
  {
    "label": "OverlapTestForBodies()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OverlapTestForBodies(const FVector& Position, const FQuat& Rotation, const TArray<FBodyInstance*>& Bodies, bool bTraceComplex)"
  },
  {
    "label": "OverlapTestForBody()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OverlapTestForBody(const FVector& Position, const FQuat& Rotation, FBodyInstance* Body, bool bTraceComplex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<FBodyInstance*,TInlineAllocator<1>> InlineArray ; InlineArray .)",
    "insertText": "Add(Body)"
  },
  {
    "label": "OverlapTestForBodiesImpl()",
    "kind": "Method",
    "detail": "Function (} template bool)",
    "insertText": "OverlapTestForBodiesImpl(const FVector& Position, const FQuat& Rotation, const TArray<FBodyInstance*>& Bodies, bool bTraceComplex)"
  },
  {
    "label": "OverlapTestForBodiesImpl()",
    "kind": "Method",
    "detail": "Function (template bool)",
    "insertText": "OverlapTestForBodiesImpl(const FVector& Position, const FQuat& Rotation, const TArray<FBodyInstance*, TInlineAllocator<1>>& Bodies, bool bTraceComplex)"
  }
]