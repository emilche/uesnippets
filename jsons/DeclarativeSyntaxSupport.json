[
  {
    "label": "IToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolTip"
  },
  {
    "label": "SUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUserWidget"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "TSlateBaseNamedArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateBaseNamedArgs"
  },
  {
    "label": "FArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArguments"
  },
  {
    "label": "UserClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UserClass"
  },
  {
    "label": "USlateWidgetStyleAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USlateWidgetStyleAsset"
  },
  {
    "label": "ISlateStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateStyle"
  },
  {
    "label": "FSlotArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlotArguments"
  },
  {
    "label": "TAlwaysValidWidget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAlwaysValidWidget"
  },
  {
    "label": "DeclarationType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DeclarationType"
  },
  {
    "label": "NamedSlotProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NamedSlotProperty"
  },
  {
    "label": "FSlateBaseNamedArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBaseNamedArgs"
  },
  {
    "label": "T0RequiredArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "T0RequiredArgs"
  },
  {
    "label": "WidgetType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WidgetType"
  },
  {
    "label": "T1RequiredArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "T1RequiredArgs"
  },
  {
    "label": "T2RequiredArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "T2RequiredArgs"
  },
  {
    "label": "T3RequiredArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "T3RequiredArgs"
  },
  {
    "label": "T4RequiredArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "T4RequiredArgs"
  },
  {
    "label": "T5RequiredArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "T5RequiredArgs"
  },
  {
    "label": "TSlateDecl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateDecl"
  },
  {
    "label": "ExposeAsWidgetType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExposeAsWidgetType"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Layout / Clipping . h \" # include \" Widgets / WidgetPixelSnapping . h \" # include \" Layout / FlowDirection . h \" # include \" Rendering / SlateRenderTransform . h \" # include \" GenericPlatform / ICursor . h \" # include \" Types / ISlateMetaData . h \" # include \" Trace / SlateMemoryTags . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / Accessibility / SlateWidgetAccessibleTypes . h \" # include \" Templates / Identity . h \" class IToolTip ; class SUserWidget ; class SWidget ; template<WidgetType> struct TSlateBaseNamedArgs ; # define)",
    "insertText": "SNew(WidgetType, ... ) \\ MakeTDecl<WidgetType>( #WidgetType, __FILE__, __LINE__, RequiredArgs::MakeRequiredArgs(__VA_ARGS__) ) <<= TYPENAME_OUTSIDE_TEMPLATE WidgetType::FArguments() #define SAssignNew( ExposeAs, WidgetType, ... ) \\ MakeTDecl<WidgetType>( #WidgetType, __FILE__, __LINE__, RequiredArgs::MakeRequiredArgs(__VA_ARGS__) ) . Expose( ExposeAs ) <<= TYPENAME_OUTSIDE_TEMPLATE WidgetType::FArguments() #define SArgumentNew( InArgs, WidgetType, ... ) \\ MakeTDecl<WidgetType>( #WidgetType, __FILE__, __LINE__, RequiredArgs::MakeRequiredArgs(__VA_ARGS__) ) <<= InArgs #define SLATE_BEGIN_ARGS( InWidgetType)"
  },
  {
    "label": "FArguments()",
    "kind": "Method",
    "detail": "Function (\\ typedef FArguments WidgetArgsType ; \\ typedef InWidgetType WidgetType ; \\ FORCENOINLINE)",
    "insertText": "FArguments() #define SLATE_USER_ARGS( WidgetType ) \\ public: \\ static TSharedRef<WidgetType> New()"
  },
  {
    "label": "FArguments()",
    "kind": "Method",
    "detail": "Function (\\ struct FArguments ; \\ struct FArguments : public TSlateBaseNamedArgs<WidgetType> \\ { \\ typedef FArguments WidgetArgsType ; \\ FORCENOINLINE)",
    "insertText": "FArguments() #define SLATE_END_ARGS()"
  },
  {
    "label": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE(AttrType, AttrName ) \\ TAttribute< AttrType > _##AttrName #define SLATE_PRIVATE_ATTRIBUTE_FUNCTION( AttrType, AttrName ) \\ WidgetArgsType& AttrName( TAttribute< AttrType > InAttribute)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (\\ _ # # AttrName =)",
    "insertText": "MoveTemp(InAttribute)"
  },
  {
    "label": "WidgetArgsType()",
    "kind": "Method",
    "detail": "Function (\\ return static_cast<)",
    "insertText": "WidgetArgsType(this)->Me()"
  },
  {
    "label": "_Static()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ \\ template<. . . VarTypes> \\ WidgetArgsType& AttrName # #)",
    "insertText": "_Static(TIdentity_T< typename TAttribute< AttrType >::FGetter::template TFuncPtr<VarTypes...> > InFunc, VarTypes... Vars)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (\\ _ # # AttrName = TAttribute<AttrType)",
    "insertText": "Create(TAttribute< AttrType >::FGetter::CreateStatic( InFunc, Vars... ))"
  },
  {
    "label": "_Lambda()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ \\ WidgetArgsType& AttrName # #)",
    "insertText": "_Lambda(TFunction< AttrType(void) >&& InFunctor)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (\\ _ # # AttrName = TAttribute<AttrType)",
    "insertText": "Create(Forward<TFunction< AttrType(void) >>(InFunctor))"
  },
  {
    "label": "_Raw()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ \\ template<class UserClass,. . . VarTypes> \\ WidgetArgsType& AttrName # #)",
    "insertText": "_Raw(UserClass* InUserObject, typename TAttribute< AttrType >::FGetter::template TConstMethodPtr< UserClass, VarTypes... > InFunc, VarTypes... Vars)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (\\ _ # # AttrName = TAttribute<AttrType)",
    "insertText": "Create(TAttribute< AttrType >::FGetter::CreateRaw( InUserObject, InFunc, Vars... ))"
  },
  {
    "label": "AttrName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ \\ template<class UserClass,. . . VarTypes> \\ WidgetArgsType&)",
    "insertText": "AttrName(TSharedRef< UserClass > InUserObjectRef, typename TAttribute< AttrType >::FGetter::template TConstMethodPtr< UserClass, VarTypes... > InFunc, VarTypes... Vars)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (\\ _ # # AttrName = TAttribute<AttrType)",
    "insertText": "Create(TAttribute< AttrType >::FGetter::CreateSP( InUserObjectRef, InFunc, Vars... ))"
  },
  {
    "label": "AttrName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ \\ template<class UserClass,. . . VarTypes> \\ WidgetArgsType&)",
    "insertText": "AttrName(UserClass* InUserObject, typename TAttribute< AttrType >::FGetter::template TConstMethodPtr< UserClass, VarTypes... > InFunc, VarTypes... Vars)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (\\ _ # # AttrName = TAttribute<AttrType)",
    "insertText": "Create(TAttribute< AttrType >::FGetter::CreateSP( InUserObject, InFunc, Vars... ))"
  },
  {
    "label": "_UObject()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ \\ template<class UserClass,. . . VarTypes> \\ WidgetArgsType& AttrName # #)",
    "insertText": "_UObject(UserClass* InUserObject, typename TAttribute< AttrType >::FGetter::template TConstMethodPtr< UserClass, VarTypes... > InFunc, VarTypes... Vars)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (\\ _ # # AttrName = TAttribute<AttrType)",
    "insertText": "Create(TAttribute< AttrType >::FGetter::CreateUObject( InUserObject, InFunc, Vars... ))"
  },
  {
    "label": "SLATE_PRIVATE_ARGUMENT_VARIABLE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ # define)",
    "insertText": "SLATE_PRIVATE_ARGUMENT_VARIABLE(ArgType, ArgName ) \\ ArgType _##ArgName #define SLATE_PRIVATE_ARGUMENT_FUNCTION( ArgType, ArgName ) \\ WidgetArgsType& ArgName( ArgType InArg)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SLATE_ATTRIBUTE(AttrType, AttrName ) \\ SLATE_PRIVATE_ATTRIBUTE_VARIABLE( AttrType, AttrName)"
  },
  {
    "label": "SLATE_PRIVATE_ATTRIBUTE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "SLATE_PRIVATE_ATTRIBUTE_FUNCTION(AttrType, AttrName ) #define SLATE_ATTRIBUTE_DEPRECATED( AttrType, AttrName, DeprecationVersion, DeprecationMessage) \\ SLATE_PRIVATE_ATTRIBUTE_VARIABLE( AttrType, AttrName)"
  },
  {
    "label": "SLATE_PRIVATE_ARGUMENT_FUNCTION()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "SLATE_PRIVATE_ARGUMENT_FUNCTION(ArgType, ArgName ) #define SLATE_ARGUMENT_DEPRECATED( ArgType, ArgName, DeprecationVersion, DeprecationMessage) \\ SLATE_PRIVATE_ARGUMENT_VARIABLE( ArgType, ArgName)"
  },
  {
    "label": "SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_ARGTYPE_PTR()",
    "kind": "Method",
    "detail": "Function (\\ # define)",
    "insertText": "SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_ARGTYPE_PTR(ArgType, ArgName ) \\ WidgetArgsType& ArgName( const ArgType* InArg)"
  },
  {
    "label": "SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_WIDGETSTYLE_PTR()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_WIDGETSTYLE_PTR(ArgType, ArgName ) \\ WidgetArgsType& ArgName( const class USlateWidgetStyleAsset* const InSlateStyleAsset)"
  },
  {
    "label": "ArgType()",
    "kind": "Method",
    "detail": "Function (\\ _ # # ArgName = InSlateStyleAsset -> GetStyleChecked<)",
    "insertText": "ArgType()"
  },
  {
    "label": "SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_WIDGETSTYLE_WEAKPTR()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_WIDGETSTYLE_WEAKPTR(ArgType, ArgName ) \\ WidgetArgsType& ArgName( const TWeakObjectPtr< const class USlateWidgetStyleAsset >& InSlateStyleAsset)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (\\ _ # # ArgName = InSlateStyleAsset .)",
    "insertText": "Get()->GetStyleChecked< ArgType >()"
  },
  {
    "label": "SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_SLATESTYLE_PTR()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_SLATESTYLE_PTR(ArgType, ArgName ) \\ WidgetArgsType& ArgName( const class ISlateStyle* InSlateStyle, const FName& StyleName, const ANSICHAR* Specifier = nullptr)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "check(InSlateStyle != nullptr)"
  },
  {
    "label": "ArgType()",
    "kind": "Method",
    "detail": "Function (\\ _ # # ArgName =& InSlateStyle -> GetWidgetStyle<)",
    "insertText": "ArgType(StyleName, Specifier)"
  },
  {
    "label": "SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_SLATESTYLE_REF()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_SLATESTYLE_REF(ArgType, ArgName ) \\ WidgetArgsType& ArgName( const class ISlateStyle& InSlateStyle, const FName& StyleName, const ANSICHAR* Specifier = nullptr)"
  },
  {
    "label": "SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_SLATESTYLE_WEAKPTR()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_SLATESTYLE_WEAKPTR(ArgType, ArgName ) \\ WidgetArgsType& ArgName( const TWeakObjectPtr< const class ISlateStyle >& InSlateStyle, const FName& StyleName, const ANSICHAR* Specifier = nullptr)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (\\ _ # # ArgName =& InSlateStyle .)",
    "insertText": "Get()->GetWidgetStyle< ArgType >( StyleName, Specifier)"
  },
  {
    "label": "SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_SLATESTYLE_SHAREDPTR()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_SLATESTYLE_SHAREDPTR(ArgType, ArgName ) \\ WidgetArgsType& ArgName( const TSharedPtr< const class ISlateStyle >& InSlateStyle, const FName& StyleName, const ANSICHAR* Specifier = nullptr)"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SLATE_STYLE_ARGUMENT(ArgType, ArgName ) \\ SLATE_PRIVATE_STYLE_ARGUMENT_VARIABLE( ArgType, ArgName)"
  },
  {
    "label": "SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_ARGTYPE_PTR()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_ARGTYPE_PTR(ArgType, ArgName ) \\ SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_WIDGETSTYLE_PTR( ArgType, ArgName ) \\ SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_WIDGETSTYLE_WEAKPTR( ArgType, ArgName ) \\ SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_SLATESTYLE_PTR( ArgType, ArgName ) \\ SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_SLATESTYLE_REF( ArgType, ArgName ) \\ SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_SLATESTYLE_WEAKPTR( ArgType, ArgName ) \\ SLATE_PRIVATE_STYLE_ARGUMENT_FUNCTION_SLATESTYLE_SHAREDPTR( ArgType, ArgName ) #define SLATE_STYLE_ARGUMENT_DEPRECATED( ArgType, ArgName, DeprecationVersion, DeprecationMessage) \\ SLATE_PRIVATE_STYLE_ARGUMENT_VARIABLE( ArgType, ArgName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ WidgetArgsType&)",
    "insertText": "operator(SlotType& SlotToAdd)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (\\ Slots .)",
    "insertText": "Add(&SlotToAdd)"
  },
  {
    "label": "SLATE_SUPPORTS_SLOT_WITH_ARGS()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SLATE_SUPPORTS_SLOT_WITH_ARGS(SlotType)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ WidgetArgsType&)",
    "insertText": "operator(const typename SlotType::FArguments& ArgumentsForNewSlot)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (\\ Slots .)",
    "insertText": "Add(new SlotType( ArgumentsForNewSlot ))"
  },
  {
    "label": "SLATE_PRIVATE_SLOT_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SLATE_PRIVATE_SLOT_BEGIN_ARGS(SlotType, SlotParentType)"
  },
  {
    "label": "SLATE_SLOT_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (\\ using WidgetArgsType = SlotType::FSlotArguments ; \\ using SlotParentType::FSlotArguments::FSlotArguments ; # define)",
    "insertText": "SLATE_SLOT_ARGUMENT(SlotType, SlotName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ WidgetArgsType&)",
    "insertText": "operator(typename SlotType::FSlotArguments& SlotToAdd)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (\\ _ # # SlotName .)",
    "insertText": "Add(MoveTemp(SlotToAdd))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ } \\ WidgetArgsType&)",
    "insertText": "operator(typename SlotType::FSlotArguments&& SlotToAdd)"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SLATE_SLOT_BEGIN_ARGS(SlotType, SlotParentType ) \\ public: \\ struct FSlotArguments : public SlotParentType::FSlotArguments \\ SLATE_PRIVATE_SLOT_BEGIN_ARGS( SlotType, SlotParentType ) #define SLATE_SLOT_BEGIN_ARGS_OneMixin( SlotType, SlotParentType, Mixin1 ) \\ public: \\ struct FSlotArguments : public SlotParentType::FSlotArguments, public Mixin1::FSlotArgumentsMixin \\ SLATE_PRIVATE_SLOT_BEGIN_ARGS( SlotType, SlotParentType ) #define SLATE_SLOT_BEGIN_ARGS_TwoMixins( SlotType, SlotParentType, Mixin1, Mixin2 ) \\ public: \\ struct FSlotArguments : public SlotParentType::FSlotArguments, public Mixin1::FSlotArgumentsMixin, public Mixin2::FSlotArgumentsMixin \\ SLATE_PRIVATE_SLOT_BEGIN_ARGS( SlotType, SlotParentType ) #define SLATE_SLOT_BEGIN_ARGS_ThreeMixins( SlotType, SlotParentType, Mixin1, Mixin2, Mixin3 ) \\ public: \\ struct FSlotArguments : public SlotParentType::FSlotArguments, public Mixin1::FSlotArgumentsMixin, public Mixin2::FSlotArgumentsMixin, public Mixin3::FSlotArgumentsMixin \\ SLATE_PRIVATE_SLOT_BEGIN_ARGS( SlotType, SlotParentType ) #define SLATE_SLOT_BEGIN_ARGS_FourMixins( SlotType, SlotParentType, Mixin1, Mixin2, Mixin3, Mixin4 ) \\ public: \\ struct FSlotArguments : public SlotParentType::FSlotArguments, public Mixin1::FSlotArgumentsMixin, public Mixin2::FSlotArgumentsMixin, public Mixin3::FSlotArgumentsMixin, public Mixin4::FSlotArgumentsMixin \\ SLATE_PRIVATE_SLOT_BEGIN_ARGS( SlotType, SlotParentType ) #define SLATE_SLOT_END_ARGS()"
  },
  {
    "label": "TAlwaysValidWidget()",
    "kind": "Method",
    "detail": "Function (struct TAlwaysValidWidget {)",
    "insertText": "TAlwaysValidWidget() : Widget(SNullWidget::NullWidget)"
  },
  {
    "label": "NamedSlotProperty()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget> Widget ; } ; template<class DeclarationType> struct NamedSlotProperty {)",
    "insertText": "NamedSlotProperty(DeclarationType& InOwnerDeclaration, TAlwaysValidWidget& ContentToSet ) : OwnerDeclaration( InOwnerDeclaration ) , SlotContent(ContentToSet)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} DeclarationType&)",
    "insertText": "operator(const TSharedRef<SWidget>& InChild)"
  },
  {
    "label": "SLATE_NAMED_SLOT()",
    "kind": "Method",
    "detail": "Function (SlotContent . Widget = InChild ; return OwnerDeclaration ; } DeclarationType& OwnerDeclaration ; TAlwaysValidWidget& SlotContent ; } ; # define)",
    "insertText": "SLATE_NAMED_SLOT(DeclarationType, SlotName ) \\ NamedSlotProperty< DeclarationType > SlotName()"
  },
  {
    "label": "DeclarationType()",
    "kind": "Method",
    "detail": "Function (\\ return NamedSlotProperty<)",
    "insertText": "DeclarationType(*this, _##SlotName)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (\\ } \\ TAlwaysValidWidget _ # # SlotName ; \\ # define)",
    "insertText": "SLATE_DEFAULT_SLOT(DeclarationType, SlotName ) \\ SLATE_NAMED_SLOT(DeclarationType, SlotName)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SLATE_EVENT(DelegateName, EventName ) \\ WidgetArgsType& EventName( const DelegateName& InDelegate)"
  },
  {
    "label": "EventName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ WidgetArgsType&)",
    "insertText": "EventName(DelegateName&& InDelegate)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (\\ _ # # EventName =)",
    "insertText": "MoveTemp(InDelegate)"
  },
  {
    "label": "_Static()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ \\ \\ template<StaticFuncPtr,. . . VarTypes> \\ WidgetArgsType& EventName # #)",
    "insertText": "_Static(StaticFuncPtr InFunc, VarTypes... Vars)"
  },
  {
    "label": "CreateStatic()",
    "kind": "Method",
    "detail": "Function (\\ _ # # EventName =)",
    "insertText": "CreateStatic(InFunc, Vars...)"
  },
  {
    "label": "_Lambda()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ \\ template<FunctorType,. . . VarTypes> \\ WidgetArgsType& EventName # #)",
    "insertText": "_Lambda(FunctorType&& InFunctor, VarTypes... Vars)"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (\\ _ # # EventName =)",
    "insertText": "CreateLambda(Forward<FunctorType>(InFunctor), Vars...)"
  },
  {
    "label": "_Raw()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ \\ template<class UserClass,. . . VarTypes> \\ WidgetArgsType& EventName # #)",
    "insertText": "_Raw(UserClass* InUserObject, typename DelegateName::template TMethodPtr< UserClass, VarTypes... > InFunc, VarTypes... Vars)"
  },
  {
    "label": "CreateRaw()",
    "kind": "Method",
    "detail": "Function (\\ _ # # EventName =)",
    "insertText": "CreateRaw(InUserObject, InFunc, Vars...)"
  },
  {
    "label": "_Raw()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<class UserClass,. . . VarTypes> \\ WidgetArgsType& EventName # #)",
    "insertText": "_Raw(UserClass* InUserObject, typename DelegateName::template TConstMethodPtr< UserClass, VarTypes... > InFunc, VarTypes... Vars)"
  },
  {
    "label": "EventName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ \\ template<class UserClass,. . . VarTypes> \\ WidgetArgsType&)",
    "insertText": "EventName(TSharedRef< UserClass > InUserObjectRef, typename DelegateName::template TMethodPtr< UserClass, VarTypes... > InFunc, VarTypes... Vars)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (\\ _ # # EventName =)",
    "insertText": "CreateSP(InUserObjectRef, InFunc, Vars...)"
  },
  {
    "label": "EventName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<class UserClass,. . . VarTypes> \\ WidgetArgsType&)",
    "insertText": "EventName(TSharedRef< UserClass > InUserObjectRef, typename DelegateName::template TConstMethodPtr< UserClass, VarTypes... > InFunc, VarTypes... Vars)"
  },
  {
    "label": "EventName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ \\ template<class UserClass,. . . VarTypes> \\ WidgetArgsType&)",
    "insertText": "EventName(UserClass* InUserObject, typename DelegateName::template TMethodPtr< UserClass, VarTypes... > InFunc, VarTypes... Vars)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (\\ _ # # EventName =)",
    "insertText": "CreateSP(InUserObject, InFunc, Vars...)"
  },
  {
    "label": "EventName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<class UserClass,. . . VarTypes> \\ WidgetArgsType&)",
    "insertText": "EventName(UserClass* InUserObject, typename DelegateName::template TConstMethodPtr< UserClass, VarTypes... > InFunc, VarTypes... Vars)"
  },
  {
    "label": "_UObject()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ \\ template<class UserClass,. . . VarTypes> \\ WidgetArgsType& EventName # #)",
    "insertText": "_UObject(UserClass* InUserObject, typename DelegateName::template TMethodPtr< UserClass, VarTypes... > InFunc, VarTypes... Vars)"
  },
  {
    "label": "CreateUObject()",
    "kind": "Method",
    "detail": "Function (\\ _ # # EventName =)",
    "insertText": "CreateUObject(InUserObject, InFunc, Vars...)"
  },
  {
    "label": "_UObject()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<class UserClass,. . . VarTypes> \\ WidgetArgsType& EventName # #)",
    "insertText": "_UObject(UserClass* InUserObject, typename DelegateName::template TConstMethodPtr< UserClass, VarTypes... > InFunc, VarTypes... Vars)"
  },
  {
    "label": "SLATE_EVENT_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ DelegateName _ # # EventName ; \\ # define)",
    "insertText": "SLATE_EVENT_DEPRECATED(DeprecationVersion, DeprecationMessage, DelegateName, EventName, UpgradedEventName, UpgradeFuncName) \\ UE_DEPRECATED(DeprecationVersion, DeprecationMessage) \\ WidgetArgsType& EventName( const DelegateName& InDeprecatedDelegate)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(InDeprecatedDelegate.IsBound())"
  },
  {
    "label": "UpgradeFuncName()",
    "kind": "Method",
    "detail": "Function (\\ _ # # UpgradedEventName =)",
    "insertText": "UpgradeFuncName(InDeprecatedDelegate)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(InFunc)"
  },
  {
    "label": "UpgradeFuncName()",
    "kind": "Method",
    "detail": "Function (\\ _ # # UpgradedEventName =)",
    "insertText": "UpgradeFuncName(DeprecatedDelegate)"
  },
  {
    "label": "FSlateBaseNamedArgs()",
    "kind": "Method",
    "detail": "Function (\\ } \\ struct FSlateBaseNamedArgs {)",
    "insertText": "FSlateBaseNamedArgs()"
  },
  {
    "label": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE(FText, ToolTipText)"
  },
  {
    "label": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE(TSharedPtr<IToolTip>, ToolTip)"
  },
  {
    "label": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE(TOptional<EMouseCursor::Type>, Cursor)"
  },
  {
    "label": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE(EVisibility, Visibility)"
  },
  {
    "label": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE(bool, IsEnabled)"
  },
  {
    "label": "SLATE_PRIVATE_ARGUMENT_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_PRIVATE_ARGUMENT_VARIABLE(bool, ForceVolatile)"
  },
  {
    "label": "SLATE_PRIVATE_ARGUMENT_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_PRIVATE_ARGUMENT_VARIABLE(bool, EnabledAttributesUpdate)"
  },
  {
    "label": "SLATE_PRIVATE_ARGUMENT_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_PRIVATE_ARGUMENT_VARIABLE(EWidgetClipping, Clipping)"
  },
  {
    "label": "SLATE_PRIVATE_ARGUMENT_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_PRIVATE_ARGUMENT_VARIABLE(EWidgetPixelSnapping, PixelSnappingMethod)"
  },
  {
    "label": "SLATE_PRIVATE_ARGUMENT_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_PRIVATE_ARGUMENT_VARIABLE(EFlowDirectionPreference, FlowDirectionPreference)"
  },
  {
    "label": "SLATE_PRIVATE_ARGUMENT_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_PRIVATE_ARGUMENT_VARIABLE(float, RenderOpacity)"
  },
  {
    "label": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE(TOptional<FSlateRenderTransform>, RenderTransform)"
  },
  {
    "label": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE(FVector2D, RenderTransformPivot)"
  },
  {
    "label": "SLATE_PRIVATE_ARGUMENT_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_PRIVATE_ARGUMENT_VARIABLE(FName, Tag)"
  },
  {
    "label": "SLATE_PRIVATE_ARGUMENT_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_PRIVATE_ARGUMENT_VARIABLE(TOptional<FAccessibleWidgetData>, AccessibleParams)"
  },
  {
    "label": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_PRIVATE_ATTRIBUTE_VARIABLE(FText, AccessibleText)"
  },
  {
    "label": "SLATE_PRIVATE_ATTRIBUTE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<ISlateMetaData>> MetaData ; } ; template<InWidgetType> struct TSlateBaseNamedArgs : public FSlateBaseNamedArgs { typedef InWidgetType WidgetType ; typedef WidgetType::FArguments WidgetArgsType ;)",
    "insertText": "SLATE_PRIVATE_ATTRIBUTE_FUNCTION(FText, ToolTipText) SLATE_PRIVATE_ATTRIBUTE_FUNCTION(TSharedPtr<IToolTip>, ToolTip) SLATE_PRIVATE_ATTRIBUTE_FUNCTION(TOptional<EMouseCursor::Type>, Cursor) SLATE_PRIVATE_ATTRIBUTE_FUNCTION(bool, IsEnabled) SLATE_PRIVATE_ATTRIBUTE_FUNCTION(EVisibility, Visibility) SLATE_PRIVATE_ARGUMENT_FUNCTION(bool, ForceVolatile) SLATE_PRIVATE_ARGUMENT_FUNCTION(EWidgetClipping, Clipping) SLATE_PRIVATE_ARGUMENT_FUNCTION(EWidgetPixelSnapping, PixelSnappingMethod) SLATE_PRIVATE_ARGUMENT_FUNCTION(EFlowDirectionPreference, FlowDirectionPreference) SLATE_PRIVATE_ARGUMENT_FUNCTION(float, RenderOpacity) SLATE_PRIVATE_ATTRIBUTE_FUNCTION(TOptional<FSlateRenderTransform>, RenderTransform) SLATE_PRIVATE_ATTRIBUTE_FUNCTION(FVector2D, RenderTransformPivot) SLATE_PRIVATE_ARGUMENT_FUNCTION(FName, Tag) SLATE_PRIVATE_ARGUMENT_FUNCTION(TOptional<FAccessibleWidgetData>, AccessibleParams) SLATE_PRIVATE_ATTRIBUTE_FUNCTION(FText, AccessibleText) WidgetArgsType& Me()"
  },
  {
    "label": "AddMetaData()",
    "kind": "Method",
    "detail": "Function (} WidgetArgsType&)",
    "insertText": "AddMetaData(TSharedRef<ISlateMetaData> InMetaData)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MetaData .)",
    "insertText": "Add(InMetaData)"
  },
  {
    "label": "AddMetaData()",
    "kind": "Method",
    "detail": "Function (} template<MetaDataType,Arg0Type> WidgetArgsType&)",
    "insertText": "AddMetaData(Arg0Type InArg0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MetaData .)",
    "insertText": "Add(MakeShared<MetaDataType>(InArg0))"
  },
  {
    "label": "AddMetaData()",
    "kind": "Method",
    "detail": "Function (} template<MetaDataType,Arg0Type,Arg1Type> WidgetArgsType&)",
    "insertText": "AddMetaData(Arg0Type InArg0, Arg1Type InArg1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MetaData .)",
    "insertText": "Add(MakeShared<MetaDataType>(InArg0, InArg1))"
  },
  {
    "label": "T0RequiredArgs()",
    "kind": "Method",
    "detail": "Function (} } ; namespace RequiredArgs { struct T0RequiredArgs {)",
    "insertText": "T0RequiredArgs()"
  },
  {
    "label": "CallConstruct()",
    "kind": "Method",
    "detail": "Function (} template<class WidgetType> void)",
    "insertText": "CallConstruct(WidgetType* OnWidget, const typename WidgetType::FArguments& WithNamedArgs)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (OnWidget ->)",
    "insertText": "Construct(WithNamedArgs)"
  },
  {
    "label": "T1RequiredArgs()",
    "kind": "Method",
    "detail": "Function (} } ; template<Arg0Type> struct T1RequiredArgs {)",
    "insertText": "T1RequiredArgs(Arg0Type&& InArg0) : Arg0(InArg0)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (OnWidget ->)",
    "insertText": "Construct(WithNamedArgs, Forward<Arg0Type>(Arg0))"
  },
  {
    "label": "T2RequiredArgs()",
    "kind": "Method",
    "detail": "Function (} Arg0Type& Arg0 ; } ; template<Arg0Type,Arg1Type> struct T2RequiredArgs {)",
    "insertText": "T2RequiredArgs(Arg0Type&& InArg0, Arg1Type&& InArg1) : Arg0(InArg0) , Arg1(InArg1)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (OnWidget ->)",
    "insertText": "Construct(WithNamedArgs, Forward<Arg0Type>(Arg0), Forward<Arg1Type>(Arg1))"
  },
  {
    "label": "T3RequiredArgs()",
    "kind": "Method",
    "detail": "Function (} Arg0Type& Arg0 ; Arg1Type& Arg1 ; } ; template<Arg0Type,Arg1Type,Arg2Type> struct T3RequiredArgs {)",
    "insertText": "T3RequiredArgs(Arg0Type&& InArg0, Arg1Type&& InArg1, Arg2Type&& InArg2) : Arg0(InArg0) , Arg1(InArg1) , Arg2(InArg2)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (OnWidget ->)",
    "insertText": "Construct(WithNamedArgs, Forward<Arg0Type>(Arg0), Forward<Arg1Type>(Arg1), Forward<Arg2Type>(Arg2))"
  },
  {
    "label": "T4RequiredArgs()",
    "kind": "Method",
    "detail": "Function (} Arg0Type& Arg0 ; Arg1Type& Arg1 ; Arg2Type& Arg2 ; } ; template<Arg0Type,Arg1Type,Arg2Type,Arg3Type> struct T4RequiredArgs {)",
    "insertText": "T4RequiredArgs(Arg0Type&& InArg0, Arg1Type&& InArg1, Arg2Type&& InArg2, Arg3Type&& InArg3) : Arg0(InArg0) , Arg1(InArg1) , Arg2(InArg2) , Arg3(InArg3)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (OnWidget ->)",
    "insertText": "Construct(WithNamedArgs, Forward<Arg0Type>(Arg0), Forward<Arg1Type>(Arg1), Forward<Arg2Type>(Arg2), Forward<Arg3Type>(Arg3))"
  },
  {
    "label": "T5RequiredArgs()",
    "kind": "Method",
    "detail": "Function (} Arg0Type& Arg0 ; Arg1Type& Arg1 ; Arg2Type& Arg2 ; Arg3Type& Arg3 ; } ; template<Arg0Type,Arg1Type,Arg2Type,Arg3Type,Arg4Type> struct T5RequiredArgs {)",
    "insertText": "T5RequiredArgs(Arg0Type&& InArg0, Arg1Type&& InArg1, Arg2Type&& InArg2, Arg3Type&& InArg3, Arg4Type&& InArg4) : Arg0(InArg0) , Arg1(InArg1) , Arg2(InArg2) , Arg3(InArg3) , Arg4(InArg4)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (OnWidget ->)",
    "insertText": "Construct(WithNamedArgs, Forward<Arg0Type>(Arg0), Forward<Arg1Type>(Arg1), Forward<Arg2Type>(Arg2), Forward<Arg3Type>(Arg3), Forward<Arg4Type>(Arg4))"
  },
  {
    "label": "MakeRequiredArgs()",
    "kind": "Method",
    "detail": "Function (} Arg0Type& Arg0 ; Arg1Type& Arg1 ; Arg2Type& Arg2 ; Arg3Type& Arg3 ; Arg4Type& Arg4 ; } ; T0RequiredArgs)",
    "insertText": "MakeRequiredArgs()"
  },
  {
    "label": "MakeRequiredArgs()",
    "kind": "Method",
    "detail": "Function (} template<Arg0Type> T1RequiredArgs<Arg0Type&&>)",
    "insertText": "MakeRequiredArgs(Arg0Type&& InArg0)"
  },
  {
    "label": "MakeRequiredArgs()",
    "kind": "Method",
    "detail": "Function (} template<Arg0Type,Arg1Type> T2RequiredArgs<Arg0Type&&,Arg1Type&&>)",
    "insertText": "MakeRequiredArgs(Arg0Type&& InArg0, Arg1Type&& InArg1)"
  },
  {
    "label": "MakeRequiredArgs()",
    "kind": "Method",
    "detail": "Function (} template<Arg0Type,Arg1Type,Arg2Type> T3RequiredArgs<Arg0Type&&,Arg1Type&&,Arg2Type&&>)",
    "insertText": "MakeRequiredArgs(Arg0Type&& InArg0, Arg1Type&& InArg1, Arg2Type&& InArg2)"
  },
  {
    "label": "MakeRequiredArgs()",
    "kind": "Method",
    "detail": "Function (} template<Arg0Type,Arg1Type,Arg2Type,Arg3Type> T4RequiredArgs<Arg0Type&&,Arg1Type&&,Arg2Type&&,Arg3Type&&>)",
    "insertText": "MakeRequiredArgs(Arg0Type&& InArg0, Arg1Type&& InArg1, Arg2Type&& InArg2, Arg3Type&& InArg3)"
  },
  {
    "label": "MakeRequiredArgs()",
    "kind": "Method",
    "detail": "Function (} template<Arg0Type,Arg1Type,Arg2Type,Arg3Type,Arg4Type> T5RequiredArgs<Arg0Type&&,Arg1Type&&,Arg2Type&&,Arg3Type&&,Arg4Type&&>)",
    "insertText": "MakeRequiredArgs(Arg0Type&& InArg0, Arg1Type&& InArg1, Arg2Type&& InArg2, Arg3Type&& InArg3, Arg4Type&& InArg4)"
  },
  {
    "label": "TSlateDecl()",
    "kind": "Method",
    "detail": "Function (} } template<class WidgetType,RequiredArgsPayloadType> struct TSlateDecl {)",
    "insertText": "TSlateDecl(const ANSICHAR* InType, const ANSICHAR* InFile, int32 OnLine, RequiredArgsPayloadType&& InRequiredArgs ) : _RequiredArgs(InRequiredArgs)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (_Widget =)",
    "insertText": "New()"
  },
  {
    "label": "WidgetType()",
    "kind": "Method",
    "detail": "Function (} else { _Widget = MakeShared<)",
    "insertText": "WidgetType()"
  },
  {
    "label": "SetDebugInfo()",
    "kind": "Method",
    "detail": "Function (} _Widget ->)",
    "insertText": "SetDebugInfo(InType, InFile, OnLine, sizeof(WidgetType))"
  },
  {
    "label": "Expose()",
    "kind": "Method",
    "detail": "Function (} template<class ExposeAsWidgetType> TSlateDecl&&)",
    "insertText": "Expose(TSharedPtr<ExposeAsWidgetType>& OutVarToInit)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OutVarToInit = _Widget ; return)",
    "insertText": "MoveTemp(*this)"
  },
  {
    "label": "Expose()",
    "kind": "Method",
    "detail": "Function (} template<class ExposeAsWidgetType> TSlateDecl&&)",
    "insertText": "Expose(TSharedRef<ExposeAsWidgetType>& OutVarToInit)"
  },
  {
    "label": "ToSharedRef()",
    "kind": "Method",
    "detail": "Function (OutVarToInit = _Widget .)",
    "insertText": "ToSharedRef()"
  },
  {
    "label": "Expose()",
    "kind": "Method",
    "detail": "Function (} template<class ExposeAsWidgetType> TSlateDecl&&)",
    "insertText": "Expose(TWeakPtr<ExposeAsWidgetType>& OutVarToInit)"
  },
  {
    "label": "ToWeakPtr()",
    "kind": "Method",
    "detail": "Function (OutVarToInit = _Widget .)",
    "insertText": "ToWeakPtr()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<WidgetType>)",
    "insertText": "operator(const typename WidgetType::FArguments& InArgs)"
  },
  {
    "label": "SWidgetConstruct()",
    "kind": "Method",
    "detail": "Function (_Widget ->)",
    "insertText": "SWidgetConstruct(InArgs)"
  },
  {
    "label": "CallConstruct()",
    "kind": "Method",
    "detail": "Function (_RequiredArgs .)",
    "insertText": "CallConstruct(_Widget.Get(), InArgs)"
  },
  {
    "label": "CacheVolatility()",
    "kind": "Method",
    "detail": "Function (_Widget ->)",
    "insertText": "CacheVolatility()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (_Widget -> bIsDeclarativeSyntaxConstructionCompleted = true ; return)",
    "insertText": "MoveTemp(_Widget).ToSharedRef()"
  },
  {
    "label": "MakeTDecl()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<WidgetType> _Widget ; RequiredArgsPayloadType& _RequiredArgs ; } ; template<WidgetType,RequiredArgsPayloadType> TSlateDecl<WidgetType,RequiredArgsPayloadType>)",
    "insertText": "MakeTDecl(const ANSICHAR* InType, const ANSICHAR* InFile, int32 OnLine, RequiredArgsPayloadType&& InRequiredArgs)"
  },
  {
    "label": "LLM_SCOPE_BYTAG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYTAG(UI_Slate)"
  }
]