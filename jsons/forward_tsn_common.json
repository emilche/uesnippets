[
  {
    "label": "AnyForwardTsnChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnyForwardTsnChunk"
  },
  {
    "label": "SkippedStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SkippedStream"
  },
  {
    "label": "SkippedStream()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PACKET_CHUNK_FORWARD_TSN_COMMON_H_ # define NET_DCSCTP_PACKET_CHUNK_FORWARD_TSN_COMMON_H_ # include<stdint . h> # include<utility> # include<vector> # include \" api / array_view . h \" # include \" net / dcsctp / packet / chunk / chunk . h \" namespace dcsctp { class AnyForwardTsnChunk : public Chunk { public : struct SkippedStream {)",
    "insertText": "SkippedStream(StreamID stream_id, SSN ssn) : stream_id(stream_id), ssn(ssn), unordered(false), message_id(0)"
  },
  {
    "label": "SkippedStream()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SkippedStream(IsUnordered unordered, StreamID stream_id, MID message_id) : stream_id(stream_id), ssn(0), unordered(unordered), message_id(message_id)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} StreamID stream_id ; SSN ssn ; IsUnordered unordered ; MID message_id ; bool)",
    "insertText": "operator(const SkippedStream& other)"
  },
  {
    "label": "new_cumulative_tsn()",
    "kind": "Method",
    "detail": "Function (} TSN)",
    "insertText": "new_cumulative_tsn()"
  }
]