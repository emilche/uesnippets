[
  {
    "label": "FFreeTypeLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeTypeLibrary"
  },
  {
    "label": "FFreeTypeFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeTypeFace"
  },
  {
    "label": "FFTStreamHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFTStreamHandler"
  },
  {
    "label": "FFreeTypeGlyphCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeTypeGlyphCache"
  },
  {
    "label": "FCachedGlyphData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedGlyphData"
  },
  {
    "label": "FFreeTypeAdvanceCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeTypeAdvanceCache"
  },
  {
    "label": "FFreeTypeKerningCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeTypeKerningCache"
  },
  {
    "label": "FKerningPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKerningPair"
  },
  {
    "label": "FFreeTypeCacheDirectory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeTypeCacheDirectory"
  },
  {
    "label": "FFontKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFontKey"
  },
  {
    "label": "__identifier()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Fonts / FontCache . h \" # include \" Templates / IsIntegral . h \" # include \" Templates / IsFloatingPoint . h \" # include \" Misc / Optional . h \" # ifndef WITH_FREETYPE # define WITH_FREETYPE 0 # endif # ifndef WITH_FREETYPE_V210 # define WITH_FREETYPE_V210 0 # endif # if PLATFORM_COMPILER_HAS_GENERIC_KEYWORD # define generic)",
    "insertText": "__identifier(generic)"
  },
  {
    "label": "IsFaceEligibleForSdf()",
    "kind": "Method",
    "detail": "Function (# if WITH_FREETYPE bool)",
    "insertText": "IsFaceEligibleForSdf(FT_Face InFace)"
  },
  {
    "label": "IsGlyphEligibleForSdf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGlyphEligibleForSdf(FT_GlyphSlot InGlyph)"
  },
  {
    "label": "Floor26Dot6()",
    "kind": "Method",
    "detail": "Function (FT_F26Dot6)",
    "insertText": "Floor26Dot6(const FT_F26Dot6 InValue)"
  },
  {
    "label": "Ceil26Dot6()",
    "kind": "Method",
    "detail": "Function (FT_F26Dot6)",
    "insertText": "Ceil26Dot6(const FT_F26Dot6 InValue)"
  },
  {
    "label": "Round26Dot6()",
    "kind": "Method",
    "detail": "Function (FT_F26Dot6)",
    "insertText": "Round26Dot6(const FT_F26Dot6 InValue)"
  },
  {
    "label": "Determine26Dot6Ppem()",
    "kind": "Method",
    "detail": "Function (FT_F26Dot6)",
    "insertText": "Determine26Dot6Ppem(const float InFontSize, const float InFontScale, const bool InRoundPpem)"
  },
  {
    "label": "DetermineEmScale()",
    "kind": "Method",
    "detail": "Function (FT_Fixed)",
    "insertText": "DetermineEmScale(const uint16 InEmSize, const FT_F26Dot6 InPpem)"
  },
  {
    "label": "DeterminePpemAndEmScale()",
    "kind": "Method",
    "detail": "Function (FT_Fixed)",
    "insertText": "DeterminePpemAndEmScale(const uint16 InEmSize, const float InFontSize, const float InFontScale, const bool InRoundPpem)"
  },
  {
    "label": "ComputeFontPixelSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ComputeFontPixelSize(float InFontSize, float InFontScale)"
  },
  {
    "label": "ApplySizeAndScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySizeAndScale(FT_Face InFace, const float InFontSize, const float InFontScale)"
  },
  {
    "label": "ApplySizeAndScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySizeAndScale(FT_Face InFace, const uint32 RequiredFontPixelSize)"
  },
  {
    "label": "LoadGlyph()",
    "kind": "Method",
    "detail": "Function (FT_Error)",
    "insertText": "LoadGlyph(FT_Face InFace, const uint32 InGlyphIndex, const int32 InLoadFlags, const float InFontSize, const float InFontScale)"
  },
  {
    "label": "LoadGlyph()",
    "kind": "Method",
    "detail": "Function (FT_Error)",
    "insertText": "LoadGlyph(FT_Face InFace, const uint32 InGlyphIndex, const int32 InLoadFlags, const uint32 RequiredFontPixelSize)"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (FT_Pos)",
    "insertText": "GetHeight(FT_Face InFace, const EFontLayoutMethod InLayoutMethod)"
  },
  {
    "label": "GetScaledHeight()",
    "kind": "Method",
    "detail": "Function (FT_Pos)",
    "insertText": "GetScaledHeight(FT_Face InFace, const EFontLayoutMethod InLayoutMethod)"
  },
  {
    "label": "GetAscender()",
    "kind": "Method",
    "detail": "Function (FT_Pos)",
    "insertText": "GetAscender(FT_Face InFace, const EFontLayoutMethod InLayoutMethod)"
  },
  {
    "label": "GetDescender()",
    "kind": "Method",
    "detail": "Function (FT_Pos)",
    "insertText": "GetDescender(FT_Face InFace, const EFontLayoutMethod InLayoutMethod)"
  },
  {
    "label": "GetBitmapAtlasScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBitmapAtlasScale(FT_Face InFace)"
  },
  {
    "label": "GetBitmapRenderScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBitmapRenderScale(FT_Face InFace)"
  },
  {
    "label": "Convert26Dot6ToRoundedPixel()",
    "kind": "Method",
    "detail": "Function (# endif template<TRetType,TParamType> TEnableIf<TIsIntegral<TParamType>::Value,TRetType>::Type)",
    "insertText": "Convert26Dot6ToRoundedPixel(TParamType InValue)"
  },
  {
    "label": "ConvertPixelTo26Dot6()",
    "kind": "Method",
    "detail": "Function (} template<TRetType,TParamType> TEnableIf<TIsIntegral<TParamType>::Value,TRetType>::Type)",
    "insertText": "ConvertPixelTo26Dot6(TParamType InValue)"
  },
  {
    "label": "ConvertPixelTo16Dot16()",
    "kind": "Method",
    "detail": "Function (} template<TRetType,TParamType> TEnableIf<TIsIntegral<TParamType>::Value,TRetType>::Type)",
    "insertText": "ConvertPixelTo16Dot16(TParamType InValue)"
  },
  {
    "label": "FFreeTypeLibrary()",
    "kind": "Method",
    "detail": "Function (} } class FFreeTypeLibrary { public :)",
    "insertText": "FFreeTypeLibrary()"
  },
  {
    "label": "GetLibrary()",
    "kind": "Method",
    "detail": "Function (# if WITH_FREETYPE FT_Library)",
    "insertText": "GetLibrary()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFreeTypeLibrary&)",
    "insertText": "operator(const FFreeTypeLibrary&)"
  },
  {
    "label": "FFreeTypeFace()",
    "kind": "Method",
    "detail": "Function (# if WITH_FREETYPE FT_Library FTLibrary ; FT_Memory CustomMemory ; # endif } ; class FFreeTypeFace { public :)",
    "insertText": "FFreeTypeFace(const FFreeTypeLibrary* InFTLibrary, FFontFaceDataConstRef InMemory, const int32 InFaceIndex, const EFontLayoutMethod InLayoutMethod)"
  },
  {
    "label": "FFreeTypeFace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFreeTypeFace(const FFreeTypeLibrary* InFTLibrary, const FString& InFilename, const int32 InFaceIndex, const EFontLayoutMethod InLayoutMethod)"
  },
  {
    "label": "FFreeTypeFace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFreeTypeFace(const EFontLayoutMethod InLayoutMethod)"
  },
  {
    "label": "FFreeTypeFace()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FFreeTypeFace()"
  },
  {
    "label": "IsFaceLoading()",
    "kind": "Method",
    "detail": "Function (# if WITH_FREETYPE return FTFace ! = nullptr ; # else return false ; # endif } bool)",
    "insertText": "IsFaceLoading()"
  },
  {
    "label": "SupportsSdf()",
    "kind": "Method",
    "detail": "Function (# if WITH_FREETYPE return bPendingAsyncLoad ; # else return false ; # endif } bool)",
    "insertText": "SupportsSdf()"
  },
  {
    "label": "IsFaceEligibleForSdf()",
    "kind": "Method",
    "detail": "Function (# if WITH_FREETYPE return)",
    "insertText": "IsFaceEligibleForSdf(FTFace)"
  },
  {
    "label": "GetFace()",
    "kind": "Method",
    "detail": "Function (# else return false ; # endif } # if WITH_FREETYPE FT_Face)",
    "insertText": "GetFace()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if WITH_ATLAS_DEBUGGING)",
    "insertText": "check(OwnerThread == GetCurrentSlateTextureAtlasThreadId())"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (# endif return FTFace ; } FT_Pos)",
    "insertText": "GetHeight()"
  },
  {
    "label": "GetScaledHeight()",
    "kind": "Method",
    "detail": "Function (} FT_Pos)",
    "insertText": "GetScaledHeight(bool bAllowOverride)"
  },
  {
    "label": "GetAscender()",
    "kind": "Method",
    "detail": "Function (} FT_Pos)",
    "insertText": "GetAscender(bool bAllowOverride)"
  },
  {
    "label": "FT_MulFix()",
    "kind": "Method",
    "detail": "Function (FT_F26Dot6 ScaledAscender =)",
    "insertText": "FT_MulFix(AscentOverrideValue, FTFace->size->metrics.y_scale)"
  },
  {
    "label": "GetAscender()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetAscender(FTFace, LayoutMethod)"
  },
  {
    "label": "GetDescender()",
    "kind": "Method",
    "detail": "Function (} FT_Pos)",
    "insertText": "GetDescender(bool bAllowOverride)"
  },
  {
    "label": "FT_MulFix()",
    "kind": "Method",
    "detail": "Function (FT_F26Dot6 ScaledDescender =)",
    "insertText": "FT_MulFix(DescentOverrideValue, FTFace->size->metrics.y_scale)"
  },
  {
    "label": "GetBitmapAtlasScale()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetBitmapAtlasScale()"
  },
  {
    "label": "GetBitmapRenderScale()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetBitmapRenderScale()"
  },
  {
    "label": "GetAttributes()",
    "kind": "Method",
    "detail": "Function (} # endif const TSet<FName>&)",
    "insertText": "GetAttributes()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (# if WITH_FREETYPE return Memory .)",
    "insertText": "IsValid() ? Memory->GetData().GetAllocatedSize()"
  },
  {
    "label": "OverrideAscent()",
    "kind": "Method",
    "detail": "Function (# else return 0 ; # endif } void)",
    "insertText": "OverrideAscent(bool InOverride, int32 Value = 0)"
  },
  {
    "label": "FT_F26Dot6()",
    "kind": "Method",
    "detail": "Function (# if WITH_FREETYPE IsAscentOverridden = InOverride ; AscentOverrideValue = FreeTypeUtils::ConvertPixelTo26Dot6<)",
    "insertText": "FT_F26Dot6(Value)"
  },
  {
    "label": "OverrideDescent()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "OverrideDescent(bool InOverride, int32 Value = 0)"
  },
  {
    "label": "FailAsyncLoad()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "FailAsyncLoad()"
  },
  {
    "label": "CompleteAsyncLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteAsyncLoad(const FFreeTypeLibrary* InFTLibrary, FFontFaceDataConstRef InMemory, const int32 InFaceIndex)"
  },
  {
    "label": "GetAvailableSubFaces()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetAvailableSubFaces(const FFreeTypeLibrary* InFTLibrary, FFontFaceDataConstRef InMemory)"
  },
  {
    "label": "GetAvailableSubFaces()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetAvailableSubFaces(const FFreeTypeLibrary* InFTLibrary, const FString& InFilename)"
  },
  {
    "label": "ParseAttributes()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_FREETYPE void)",
    "insertText": "ParseAttributes()"
  },
  {
    "label": "FFreeTypeFace()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FFreeTypeFace(const FFreeTypeFace&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFreeTypeFace&)",
    "insertText": "operator(const FFreeTypeFace&)"
  },
  {
    "label": "FFTStreamHandler()",
    "kind": "Method",
    "detail": "Function (# if WITH_FREETYPE FT_Face FTFace ; FFontFaceDataConstPtr Memory ; bool bPendingAsyncLoad = false ; struct FFTStreamHandler {)",
    "insertText": "FFTStreamHandler()"
  },
  {
    "label": "FFTStreamHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFTStreamHandler(const FString& InFilename)"
  },
  {
    "label": "CloseFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseFile(FT_Stream InStream)"
  },
  {
    "label": "ReadData()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "ReadData(FT_Stream InStream, unsigned long InOffset, unsigned char* InBuffer, unsigned long InCount)"
  },
  {
    "label": "FindOrCache()",
    "kind": "Method",
    "detail": "Function (struct FCachedGlyphData { FT_Short Height ; FT_Glyph_Metrics GlyphMetrics ; FT_Size_Metrics SizeMetrics ; TArray<FT_Vector> OutlinePoints ; } ; bool)",
    "insertText": "FindOrCache(const uint32 InGlyphIndex, FCachedGlyphData& OutCachedGlyphData)"
  },
  {
    "label": "FFreeTypeAdvanceCache()",
    "kind": "Method",
    "detail": "Function (# endif private : # if WITH_FREETYPE FT_Face Face ; const int32 LoadFlags ; const uint32 FontRenderSize ; TMap<uint32,FCachedGlyphData> GlyphDataMap ; # endif } ; class FFreeTypeAdvanceCache { public : # if WITH_FREETYPE)",
    "insertText": "FFreeTypeAdvanceCache()"
  },
  {
    "label": "FFreeTypeAdvanceCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFreeTypeAdvanceCache(FT_Face InFace, const int32 InLoadFlags, const float InFontSize, const float InFontScale)"
  },
  {
    "label": "FindOrCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindOrCache(const uint32 InGlyphIndex, FT_Fixed& OutCachedAdvance)"
  },
  {
    "label": "FlushCache()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "FlushCache()"
  },
  {
    "label": "FFreeTypeKerningCache()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_FREETYPE FT_Face Face ; const int32 LoadFlags ; const uint32 FontRenderSize ; TMap<uint32,FT_Fixed> AdvanceMap ; # endif } ; class FFreeTypeKerningCache { public : # if WITH_FREETYPE)",
    "insertText": "FFreeTypeKerningCache(FT_Face InFace, const int32 InKerningFlags, const float InFontSize, const float InFontScale)"
  },
  {
    "label": "FindOrCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindOrCache(const uint32 InFirstGlyphIndex, const uint32 InSecondGlyphIndex, FT_Vector& OutKerning)"
  },
  {
    "label": "FKerningPair()",
    "kind": "Method",
    "detail": "Function (# endif private : # if WITH_FREETYPE struct FKerningPair {)",
    "insertText": "FKerningPair(const uint32 InFirstGlyphIndex, const uint32 InSecondGlyphIndex) : FirstGlyphIndex(InFirstGlyphIndex) , SecondGlyphIndex(InSecondGlyphIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FKerningPair& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FKerningPair& Key)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (uint32 KeyHash = 0 ; KeyHash =)",
    "insertText": "HashCombine(KeyHash, Key.FirstGlyphIndex)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (KeyHash =)",
    "insertText": "HashCombine(KeyHash, Key.SecondGlyphIndex)"
  },
  {
    "label": "GetGlyphCache()",
    "kind": "Method",
    "detail": "Function (# if WITH_FREETYPE TSharedRef<FFreeTypeGlyphCache>)",
    "insertText": "GetGlyphCache(FT_Face InFace, const int32 InLoadFlags, const float InFontSize, const float InFontScale)"
  },
  {
    "label": "GetAdvanceCache()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FFreeTypeAdvanceCache>)",
    "insertText": "GetAdvanceCache(FT_Face InFace, const int32 InLoadFlags, const float InFontSize, const float InFontScale)"
  },
  {
    "label": "GetKerningCache()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FFreeTypeKerningCache>)",
    "insertText": "GetKerningCache(FT_Face InFace, const int32 InKerningFlags, const float InFontSize, const float InFontScale)"
  },
  {
    "label": "FFontKey()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_FREETYPE class FFontKey { public :)",
    "insertText": "FFontKey(FT_Face InFace, const int32 InFlags, const float InFontSize, const float InFontScale) : Face(InFace) , Flags(InFlags) , FontRenderSize(FreeTypeUtils::ComputeFontPixelSize(InFontSize, InFontScale)) , KeyHash(0)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (KeyHash =)",
    "insertText": "GetTypeHash(Face)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (KeyHash =)",
    "insertText": "HashCombine(KeyHash, GetTypeHash(Flags))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (KeyHash =)",
    "insertText": "HashCombine(KeyHash, GetTypeHash(FontRenderSize))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FFontKey& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FFontKey& Key)"
  }
]