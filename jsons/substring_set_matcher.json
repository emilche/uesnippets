[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "AhoCorasickEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AhoCorasickEdge"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "alignas"
  },
  {
    "label": "SubstringSetMatcher()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SUBSTRING_SET_MATCHER_SUBSTRING_SET_MATCHER_H_ # define BASE_SUBSTRING_SET_MATCHER_SUBSTRING_SET_MATCHER_H_ # include<stdint . h> # include<limits> # include<set> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / check_op . h \" # include \" base / substring_set_matcher / matcher_string_pattern . h \" namespace base { class BASE_EXPORT SubstringSetMatcher { public :)",
    "insertText": "SubstringSetMatcher()"
  },
  {
    "label": "SubstringSetMatcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstringSetMatcher(const SubstringSetMatcher&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SubstringSetMatcher&)",
    "insertText": "operator(const SubstringSetMatcher&)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Build(const std::vector<MatcherStringPattern>& patterns)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Build(std::vector<const MatcherStringPattern*> patterns)"
  },
  {
    "label": "Match()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Match(const std::string& text, std::set<MatcherStringPattern::ID>* matches)"
  },
  {
    "label": "AnyMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyMatch(const std::string& text)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "kInvalidNodeID()",
    "kind": "Method",
    "detail": "Function (private : using NodeID = uint32_t ; NodeID)",
    "insertText": "kInvalidNodeID(1u << 23)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (NodeID kRootID = 0 ; struct AhoCorasickEdge { uint32_t label : 9 ; NodeID node_id : 2 3 ; } ; uint32_t kFailureNodeLabel = 0 x100 ; uint32_t kFirstSpecialLabel = kFailureNodeLabel ; uint32_t kOutputLinkLabel = 0 x101 ; uint32_t kMatchIDLabel = 0 x102 ; uint32_t kEmptyLabel = 0 x103 ; class)",
    "insertText": "alignas(AhoCorasickEdge)"
  },
  {
    "label": "AhoCorasickNode()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "AhoCorasickNode()"
  },
  {
    "label": "AhoCorasickNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AhoCorasickNode(AhoCorasickNode&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AhoCorasickNode&)",
    "insertText": "operator(AhoCorasickNode&& other)"
  },
  {
    "label": "GetEdge()",
    "kind": "Method",
    "detail": "Function (NodeID)",
    "insertText": "GetEdge(uint32_t label)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "static_assert(kNumInlineEdges == 2, \"Code below needs updating\")"
  },
  {
    "label": "SetEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEdge(uint32_t label, NodeID node)"
  },
  {
    "label": "edges()",
    "kind": "Method",
    "detail": "Function (const AhoCorasickEdge*)",
    "insertText": "edges()"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(0u, reinterpret_cast<uintptr_t>(edges_.inline_edges) % alignof(AhoCorasickEdge))"
  },
  {
    "label": "SetMatchID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMatchID(MatcherStringPattern::ID id)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!IsEndOfPattern())"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(id < kInvalidNodeID)"
  },
  {
    "label": "SetEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEdge(kMatchIDLabel, static_cast<NodeID>(id))"
  },
  {
    "label": "IsEndOfPattern()",
    "kind": "Method",
    "detail": "Function (has_outputs_ = true ; } bool)",
    "insertText": "IsEndOfPattern()"
  },
  {
    "label": "GetMatchID()",
    "kind": "Method",
    "detail": "Function (} MatcherStringPattern::ID)",
    "insertText": "GetMatchID()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(IsEndOfPattern())"
  },
  {
    "label": "SetOutputLink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOutputLink(NodeID node)"
  },
  {
    "label": "SetEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEdge(kOutputLinkLabel, node)"
  },
  {
    "label": "output_link()",
    "kind": "Method",
    "detail": "Function (has_outputs_ = true ; } } NodeID)",
    "insertText": "output_link()"
  },
  {
    "label": "EstimateMemoryUsage()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "EstimateMemoryUsage()"
  },
  {
    "label": "num_edges()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "num_edges()"
  },
  {
    "label": "GetTreeSize()",
    "kind": "Method",
    "detail": "Function (using SubstringPatternVector = std::vector<const MatcherStringPattern*> ; NodeID)",
    "insertText": "GetTreeSize(const std::vector<const MatcherStringPattern*>& patterns)"
  },
  {
    "label": "BuildAhoCorasickTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAhoCorasickTree(const SubstringPatternVector& patterns)"
  },
  {
    "label": "InsertPatternIntoAhoCorasickTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertPatternIntoAhoCorasickTree(const MatcherStringPattern* pattern)"
  },
  {
    "label": "CreateFailureAndOutputEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFailureAndOutputEdges()"
  },
  {
    "label": "AccumulateMatchesForNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateMatchesForNode(const AhoCorasickNode* node, std::set<MatcherStringPattern::ID>* matches)"
  }
]