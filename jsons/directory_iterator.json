[
  {
    "label": "_LIBCPP_HIDDEN",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_HIDDEN"
  },
  {
    "label": "directory_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "directory_iterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FILESYSTEM_DIRECTORY_ITERATOR_H # define _LIBCPP___FILESYSTEM_DIRECTORY_ITERATOR_H # include<__assert> # include<__availability> # include<__config> # include<__filesystem / directory_entry . h> # include<__filesystem / directory_options . h> # include<__filesystem / path . h> # include<__iterator / iterator_traits . h> # include<__memory / shared_ptr . h> # include<__ranges / enable_borrowed_range . h> # include<__ranges / enable_view . h> # include<cstddef> # include<system_error> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "directory_iterator()",
    "kind": "Method",
    "detail": "Function (class directory_iterator { public : typedef directory_entry value_type ; typedef ptrdiff_t difference_type ; typedef value_type const* pointer ; typedef value_type const& reference ; typedef input_iterator_tag iterator_category ; public : _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "directory_iterator()"
  },
  {
    "label": "directory_iterator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "directory_iterator(const path& __p) : directory_iterator(__p, nullptr)"
  },
  {
    "label": "directory_iterator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "directory_iterator(const path& __p, directory_options __opts) : directory_iterator(__p, nullptr, __opts)"
  },
  {
    "label": "directory_iterator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "directory_iterator(const path& __p, error_code& __ec) : directory_iterator(__p, &__ec)"
  },
  {
    "label": "directory_iterator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "directory_iterator(const path& __p, directory_options __opts, error_code& __ec) : directory_iterator(__p, &__ec, __opts)"
  },
  {
    "label": "directory_iterator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "directory_iterator(const directory_iterator&)"
  },
  {
    "label": "directory_iterator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "directory_iterator(directory_iterator&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI directory_iterator&)",
    "insertText": "operator(const directory_iterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI directory_iterator&)",
    "insertText": "operator(directory_iterator&& __o)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (__imp_ =)",
    "insertText": "move(__o.__imp_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI const directory_entry&)",
    "insertText": "operator()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__imp_, \"The end iterator cannot be dereferenced\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI __dir_element_proxy)",
    "insertText": "operator(int)"
  },
  {
    "label": "__p()",
    "kind": "Method",
    "detail": "Function (__dir_element_proxy)",
    "insertText": "__p(**this)"
  },
  {
    "label": "__increment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__increment()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator(const directory_iterator& __lhs, const directory_iterator& __rhs)"
  },
  {
    "label": "directory_iterator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_FUNC_VIS)",
    "insertText": "directory_iterator(const path&, error_code*, directory_options = directory_options::none)"
  },
  {
    "label": "__increment()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_FUNC_VIS directory_iterator&)",
    "insertText": "__increment(error_code* __ec = nullptr)"
  },
  {
    "label": "__dereference()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_FUNC_VIS const directory_entry&)",
    "insertText": "__dereference()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI directory_iterator)",
    "insertText": "begin(directory_iterator __iter)"
  }
]