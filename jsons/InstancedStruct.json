[
  {
    "label": "FConstStructView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstStructView"
  },
  {
    "label": "TConstStructView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TConstStructView"
  },
  {
    "label": "FConstSharedStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstSharedStruct"
  },
  {
    "label": "TConstSharedStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TConstSharedStruct"
  },
  {
    "label": "UUserDefinedStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserDefinedStruct"
  },
  {
    "label": "COREUOBJECT_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "COREUOBJECT_API"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "TInstancedStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TInstancedStruct"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" StructUtils . h \" # include \" InstancedStruct . generated . h \" struct FConstStructView ; template<BaseStructT> struct TConstStructView ; struct FConstSharedStruct ; template<BaseStructT> struct TConstSharedStruct ; class UUserDefinedStruct ;)",
    "insertText": "USTRUCT(BlueprintType, meta = (HasNativeMake = \"/Script/Engine.BlueprintInstancedStructLibrary.MakeInstancedStruct\"))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FInstancedStruct()"
  },
  {
    "label": "FInstancedStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstancedStruct(const UScriptStruct* InScriptStruct)"
  },
  {
    "label": "FInstancedStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstancedStruct(const FConstStructView InOther)"
  },
  {
    "label": "FInstancedStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstancedStruct(const FInstancedStruct& InOther)"
  },
  {
    "label": "InitializeAs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAs(InOther.GetScriptStruct(), InOther.GetMemory())"
  },
  {
    "label": "FInstancedStruct()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInstancedStruct(FInstancedStruct&& InOther) : FInstancedStruct(InOther.GetScriptStruct(), InOther.GetMutableMemory())"
  },
  {
    "label": "SetStructData()",
    "kind": "Method",
    "detail": "Function (InOther .)",
    "insertText": "SetStructData(nullptr,nullptr)"
  },
  {
    "label": "FInstancedStruct()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FInstancedStruct()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FInstancedStruct&)",
    "insertText": "operator(const FConstStructView InOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FInstancedStruct&)",
    "insertText": "operator(const FInstancedStruct& InOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FInstancedStruct&)",
    "insertText": "operator(FInstancedStruct&& InOther)"
  },
  {
    "label": "SetStructData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStructData(InOther.GetScriptStruct(), InOther.GetMutableMemory())"
  },
  {
    "label": "InitializeAs()",
    "kind": "Method",
    "detail": "Function (} return* this ; } void)",
    "insertText": "InitializeAs(const UScriptStruct* InScriptStruct, const uint8* InStructMemory = nullptr)"
  },
  {
    "label": "InitializeAs()",
    "kind": "Method",
    "detail": "Function (template<T,. . . TArgs> void)",
    "insertText": "InitializeAs(TArgs&&... InArgs)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (UE::StructUtils::CheckStructType<)",
    "insertText": "T()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct* Struct = TBaseStructure<T)",
    "insertText": "Get()"
  },
  {
    "label": "GetScriptStruct()",
    "kind": "Method",
    "detail": "Function (uint8* Memory = nullptr ; const UScriptStruct* CurrentScriptStruct =)",
    "insertText": "GetScriptStruct()"
  },
  {
    "label": "GetMutableMemory()",
    "kind": "Method",
    "detail": "Function (Memory =)",
    "insertText": "GetMutableMemory()"
  },
  {
    "label": "GetMinAlignment()",
    "kind": "Method",
    "detail": "Function (const int32 MinAlignment = Struct ->)",
    "insertText": "GetMinAlignment()"
  },
  {
    "label": "GetStructureSize()",
    "kind": "Method",
    "detail": "Function (const int32 RequiredSize = Struct ->)",
    "insertText": "GetStructureSize()"
  },
  {
    "label": "Memory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memory(uint8*)FMemory::Malloc(FMath::Max(1, RequiredSize), MinAlignment)"
  },
  {
    "label": "SetStructData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStructData(Struct, Memory)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(Memory)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Memory) T(Forward<TArgs>(InArgs)...)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} template<T> FInstancedStruct)",
    "insertText": "Make()"
  },
  {
    "label": "InitializeAs()",
    "kind": "Method",
    "detail": "Function (FInstancedStruct InstancedStruct ; InstancedStruct .)",
    "insertText": "InitializeAs(TBaseStructure<T>::Get(), nullptr)"
  },
  {
    "label": "InitializeAs()",
    "kind": "Method",
    "detail": "Function (FInstancedStruct InstancedStruct ; InstancedStruct .)",
    "insertText": "InitializeAs(TBaseStructure<T>::Get(), reinterpret_cast<const uint8*>(&Struct))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (FInstancedStruct InstancedStruct ; InstancedStruct . InitializeAs<)",
    "insertText": "T(Forward<TArgs>(InArgs)...)"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Identical(const FInstancedStruct* Other, uint32 PortFlags)"
  },
  {
    "label": "AddStructReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStructReferencedObjects(class FReferenceCollector& Collector)"
  },
  {
    "label": "ExportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportTextItem(FString& ValueStr, FInstancedStruct const& DefaultValue, class UObject* Parent, int32 PortFlags, class UObject* ExportRootScope)"
  },
  {
    "label": "ImportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportTextItem(const TCHAR*& Buffer, int32 PortFlags, UObject* Parent, FOutputDevice* ErrorText, FArchive* InSerializingArchive = nullptr)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeFromMismatchedTag(const FPropertyTag& Tag, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "GetPreloadDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPreloadDependencies(TArray<UObject*>& OutDeps)"
  },
  {
    "label": "NetSerialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetSerialize(FArchive& Ar, class UPackageMap* Map, bool& bOutSuccess)"
  },
  {
    "label": "FindInnerPropertyInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindInnerPropertyInstance(FName PropertyName, const FProperty*& OutProp, const void*& OutData)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (EPropertyVisitorControlFlow)",
    "insertText": "Visit(FPropertyVisitorPath& Path, const FPropertyVisitorData& Data, const TFunctionRef<EPropertyVisitorControlFlow(const FPropertyVisitorPath& , const FPropertyVisitorData& )> InFunc)"
  },
  {
    "label": "ResolveVisitedPathInfo()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "ResolveVisitedPathInfo(const FPropertyVisitorInfo& Info)"
  },
  {
    "label": "GetPtr()",
    "kind": "Method",
    "detail": "Function (} template<T> const T*)",
    "insertText": "GetPtr()"
  },
  {
    "label": "GetMutablePtr()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "GetMutablePtr()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FInstancedStruct& Other)"
  },
  {
    "label": "ReplaceScriptStructInternal()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "ReplaceScriptStructInternal(const UScriptStruct* NewStruct)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "DECLARE_DELEGATE_RetVal_ThreeParams(bool, FNetSerializeInstancedStruct, FInstancedStruct&, FArchive&, UPackageMap*)"
  },
  {
    "label": "FInstancedStruct()",
    "kind": "Method",
    "detail": "Function (FNetSerializeInstancedStruct NetSerializeScriptStructDelegate ; protected :)",
    "insertText": "FInstancedStruct(const UScriptStruct* InScriptStruct, uint8* InStructMemory) : ScriptStruct(InScriptStruct) , StructMemory(InStructMemory)"
  },
  {
    "label": "ResetStructData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetStructData()"
  },
  {
    "label": "SetStructData()",
    "kind": "Method",
    "detail": "Function (StructMemory = nullptr ; ScriptStruct = nullptr ; } void)",
    "insertText": "SetStructData(const UScriptStruct* InScriptStruct, uint8* InStructMemory)"
  },
  {
    "label": "TInstancedStruct()",
    "kind": "Method",
    "detail": "Function (ScriptStruct = InScriptStruct ; StructMemory = InStructMemory ; } TObjectPtr<const UScriptStruct> ScriptStruct = nullptr ; uint8* StructMemory = nullptr ; } ; template<> struct TStructOpsTypeTraits<FInstancedStruct> : public TStructOpsTypeTraitsBase2<FInstancedStruct> { enum { WithSerializer = true,WithIdentical = true,WithExportTextItem = true,WithImportTextItem = true,WithAddStructReferencedObjects = true,WithStructuredSerializeFromMismatchedTag = true,WithGetPreloadDependencies = true,WithNetSerializer = true,WithFindInnerPropertyInstance = true,WithClearOnFinishDestroy = true,WithVisitor = true,} ; } ; template<BaseStructT> struct TInstancedStruct { public :)",
    "insertText": "TInstancedStruct()"
  },
  {
    "label": "TInstancedStruct()",
    "kind": "Method",
    "detail": "Function (template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TInstancedStruct(const TConstStructView<T> InOther)"
  },
  {
    "label": "InitializeAsScriptStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAsScriptStruct(InOther.GetScriptStruct(), InOther.GetMemory())"
  },
  {
    "label": "TInstancedStruct()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TInstancedStruct(const TInstancedStruct<T>& InOther) : InstancedStruct(InOther.InstancedStruct)"
  },
  {
    "label": "TInstancedStruct()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TInstancedStruct(TInstancedStruct<T>&& InOther) : InstancedStruct(MoveTemp(InOther.InstancedStruct))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>> TInstancedStruct&)",
    "insertText": "operator(const TConstStructView<T> InOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InstancedStruct = InOther . InstancedStruct ; } return* this ; } template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>> TInstancedStruct&)",
    "insertText": "operator(const TInstancedStruct<T>& InOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InstancedStruct = InOther . InstancedStruct ; return* this ; } template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>> TInstancedStruct&)",
    "insertText": "operator(TInstancedStruct<T>&& InOther)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (InstancedStruct =)",
    "insertText": "MoveTemp(InOther.InstancedStruct)"
  },
  {
    "label": "InitializeAs()",
    "kind": "Method",
    "detail": "Function (InstancedStruct .)",
    "insertText": "InitializeAs(InScriptStruct, InStructMemory)"
  },
  {
    "label": "GetMemory()",
    "kind": "Method",
    "detail": "Function (} const uint8*)",
    "insertText": "GetMemory()"
  },
  {
    "label": "GetMutable()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>> T&)",
    "insertText": "GetMutable()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>> bool)",
    "insertText": "operator(const TInstancedStruct<T>& Other)"
  },
  {
    "label": "AddStructReferencedObjects()",
    "kind": "Method",
    "detail": "Function (InstancedStruct .)",
    "insertText": "AddStructReferencedObjects(Collector)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Serialize(FArchive& Ar)"
  }
]