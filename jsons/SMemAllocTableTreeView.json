[
  {
    "label": "FCallstackFrameGroupNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCallstackFrameGroupNode"
  },
  {
    "label": "FMemAllocNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemAllocNode"
  },
  {
    "label": "FMemoryRuleSpec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryRuleSpec"
  },
  {
    "label": "SMemAllocTableTreeView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMemAllocTableTreeView"
  },
  {
    "label": "FQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryParams"
  },
  {
    "label": "SMemAllocTableTreeView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" TraceServices / Model / AllocationsProvider . h \" # include \" InsightsCore / Common / Stopwatch . h \" # include \" Insights / MemoryProfiler / ViewModels / MemAllocTable . h \" # include \" Insights / Table / Widgets / SSessionTableTreeView . h \" namespace UE::Insights::MemoryProfiler { class FCallstackFrameGroupNode ; class FMemAllocNode ; class FMemoryRuleSpec ; class SMemAllocTableTreeView : public SSessionTableTreeView { public :)",
    "insertText": "SMemAllocTableTreeView()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SMemAllocTableTreeView)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, TSharedPtr<FMemAllocTable> InTablePtr)"
  },
  {
    "label": "ConstructToolbar()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "ConstructToolbar()"
  },
  {
    "label": "ConstructFooter()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "ConstructFooter()"
  },
  {
    "label": "GetMemAllocTable()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMemAllocTable>)",
    "insertText": "GetMemAllocTable()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "RebuildTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildTree(bool bResync)"
  },
  {
    "label": "SetQueryParams()",
    "kind": "Method",
    "detail": "Function (struct FQueryParams { TSharedPtr<FMemoryRuleSpec> Rule ; double TimeMarkers [ 4 ] = { 0 . 0,0 . 0,0 . 0,0 . 0 } ; bool bIncludeHeapAllocs = false ; bool bIncludeSwapAllocs = false ; } ; void)",
    "insertText": "SetQueryParams(const FQueryParams& InQueryParams)"
  },
  {
    "label": "OnQueryInvalidated()",
    "kind": "Method",
    "detail": "Function (Rule = InQueryParams . Rule ; TimeMarkers [ 0 ] = InQueryParams . TimeMarkers [ 0 ] ; TimeMarkers [ 1 ] = InQueryParams . TimeMarkers [ 1 ] ; TimeMarkers [ 2 ] = InQueryParams . TimeMarkers [ 2 ] ; TimeMarkers [ 3 ] = InQueryParams . TimeMarkers [ 3 ] ; bIncludeHeapAllocs = InQueryParams . bIncludeHeapAllocs ; bIncludeSwapAllocs = InQueryParams . bIncludeSwapAllocs ;)",
    "insertText": "OnQueryInvalidated()"
  },
  {
    "label": "GetTabIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetTabIndex()"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (TabIndex = InTabIndex ; } bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "GetAllOperationsDuration()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetAllOperationsDuration()"
  },
  {
    "label": "GetCurrentOperationName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentOperationName()"
  },
  {
    "label": "InternalCreateGroupings()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InternalCreateGroupings()"
  },
  {
    "label": "GetSingleSelectedMemAllocNode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMemAllocNode>)",
    "insertText": "GetSingleSelectedMemAllocNode()"
  },
  {
    "label": "GetSingleSelectedCallstackFrameGroupNode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCallstackFrameGroupNode>)",
    "insertText": "GetSingleSelectedCallstackFrameGroupNode()"
  },
  {
    "label": "CountSourceFiles()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CountSourceFiles(FMemAllocNode& MemAllocNode)"
  },
  {
    "label": "ExtendMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendMenu(TSharedRef<FExtender> Extender)"
  },
  {
    "label": "BuildOpenSourceSubMenuItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildOpenSourceSubMenuItems(FMenuBuilder& MenuBuilder, const TraceServices::FCallstack& Callstack)"
  },
  {
    "label": "BuildOpenSourceSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildOpenSourceSubMenu(FMenuBuilder& MenuBuilder, bool bIsAllocCallstack)"
  },
  {
    "label": "CanOpenCallstackFrameSourceFileInIDE()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanOpenCallstackFrameSourceFileInIDE()"
  },
  {
    "label": "OpenCallstackFrameSourceFileInIDE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenCallstackFrameSourceFileInIDE()"
  },
  {
    "label": "GetSelectedCallstackFrameFileName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedCallstackFrameFileName()"
  },
  {
    "label": "OpenSourceFileInIDE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenSourceFileInIDE(const TCHAR* File, uint32 Line)"
  },
  {
    "label": "ExportMemorySnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportMemorySnapshot()"
  },
  {
    "label": "IsExportMemorySnapshotAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExportMemorySnapshotAvailable()"
  },
  {
    "label": "ExtendMenuAllocation()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ExtendMenuAllocation(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "ExtendMenuCallstackFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendMenuCallstackFrame(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "ExtendMenuExportSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendMenuExportSnapshot(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "StartQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartQuery()"
  },
  {
    "label": "UpdateQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateQuery(TraceServices::IAllocationsProvider::EQueryStatus& OutStatus)"
  },
  {
    "label": "CancelQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelQuery()"
  },
  {
    "label": "ResetAndStartQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAndStartQuery()"
  },
  {
    "label": "GetSymbolResolutionStatus()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSymbolResolutionStatus()"
  },
  {
    "label": "GetSymbolResolutionTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSymbolResolutionTooltip()"
  },
  {
    "label": "UpdateQueryInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateQueryInfo()"
  },
  {
    "label": "GetQueryInfo()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetQueryInfo()"
  },
  {
    "label": "GetQueryInfoTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetQueryInfoTooltip()"
  },
  {
    "label": "GetFooterLeftText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFooterLeftText()"
  },
  {
    "label": "GetFooterCenterText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFooterCenterText()"
  },
  {
    "label": "TreeView_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnSelectionChanged(FTableTreeNodePtr SelectedItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "UpdateFilterContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFilterContext(const FFilterConfigurator& InFilterConfigurator, const FTableTreeNode& InNode)"
  },
  {
    "label": "InitFilterConfigurator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFilterConfigurator(FFilterConfigurator& InOutFilterConfigurator)"
  },
  {
    "label": "ConstructFunctionToggleButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructFunctionToggleButton()"
  },
  {
    "label": "CallstackGroupingByFunction_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallstackGroupingByFunction_OnCheckStateChanged(ECheckBoxState NewRadioState)"
  },
  {
    "label": "CallstackGroupingByFunction_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "CallstackGroupingByFunction_IsChecked()"
  },
  {
    "label": "InitAvailableViewPresets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAvailableViewPresets()"
  },
  {
    "label": "PopulateLLMTagSuggestionList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateLLMTagSuggestionList(const FString& Text, TArray<FString>& OutSuggestions)"
  },
  {
    "label": "PopulateThreadSuggestionList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateThreadSuggestionList(const FString& Text, TArray<FString>& OutSuggestions)"
  }
]