[
  {
    "label": "EmulatedIpPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EmulatedIpPacket"
  },
  {
    "label": "EmulatedNetworkReceiverInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedNetworkReceiverInterface"
  },
  {
    "label": "EmulatedNetworkOutgoingStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EmulatedNetworkOutgoingStats"
  },
  {
    "label": "EmulatedNetworkIncomingStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EmulatedNetworkIncomingStats"
  },
  {
    "label": "EmulatedNetworkStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EmulatedNetworkStats"
  },
  {
    "label": "EmulatedEndpoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedEndpoint"
  },
  {
    "label": "EmulatedEndpointImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedEndpointImpl"
  },
  {
    "label": "TcpMessageRoute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TcpMessageRoute"
  },
  {
    "label": "EmulatedIpPacket()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TEST_NETWORK_EMULATION_NETWORK_EMULATION_INTERFACES_H_ # define API_TEST_NETWORK_EMULATION_NETWORK_EMULATION_INTERFACES_H_ # include<map> # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / numerics / samples_stats_counter . h \" # include \" api / units / data_rate . h \" # include \" api / units / data_size . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / ip_address . h \" # include \" rtc_base / socket_address . h \" namespace webrtc { struct EmulatedIpPacket { public :)",
    "insertText": "EmulatedIpPacket(const rtc::SocketAddress& from, const rtc::SocketAddress& to, rtc::CopyOnWriteBuffer data, Timestamp arrival_time, uint16_t application_overhead = 0)"
  },
  {
    "label": "EmulatedIpPacket()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "EmulatedIpPacket()"
  },
  {
    "label": "EmulatedIpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmulatedIpPacket(const EmulatedIpPacket&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EmulatedIpPacket&)",
    "insertText": "operator(const EmulatedIpPacket&)"
  },
  {
    "label": "EmulatedIpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmulatedIpPacket(EmulatedIpPacket&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EmulatedIpPacket&)",
    "insertText": "operator(EmulatedIpPacket&&)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "size()"
  },
  {
    "label": "cdata()",
    "kind": "Method",
    "detail": "Function (} const uint8_t*)",
    "insertText": "cdata()"
  },
  {
    "label": "ip_packet_size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "ip_packet_size()"
  },
  {
    "label": "EmulatedNetworkReceiverInterface()",
    "kind": "Method",
    "detail": "Function (} rtc::SocketAddress from ; rtc::SocketAddress to ; rtc::CopyOnWriteBuffer data ; uint16_t headers_size ; Timestamp arrival_time ; } ; class EmulatedNetworkReceiverInterface { public : ~)",
    "insertText": "EmulatedNetworkReceiverInterface()"
  },
  {
    "label": "OnPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketReceived(EmulatedIpPacket packet)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (} ; struct EmulatedNetworkOutgoingStats { int64_t packets_sent = 0 ; DataSize bytes_sent =)",
    "insertText": "Zero()"
  },
  {
    "label": "PlusInfinity()",
    "kind": "Method",
    "detail": "Function (Timestamp first_packet_sent_time =)",
    "insertText": "PlusInfinity()"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (Timestamp last_packet_sent_time =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "AverageSendRate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "AverageSendRate()"
  },
  {
    "label": "AverageReceiveRate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "AverageReceiveRate()"
  },
  {
    "label": "PacketsSent()",
    "kind": "Method",
    "detail": "Function (} ; struct EmulatedNetworkStats { int64_t)",
    "insertText": "PacketsSent()"
  },
  {
    "label": "PacketsReceived()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "PacketsReceived()"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (} std::vector<rtc::IPAddress> local_addresses ; EmulatedNetworkOutgoingStats overall_outgoing_stats ; EmulatedNetworkIncomingStats overall_incoming_stats ; std::map<rtc::IPAddress,EmulatedNetworkOutgoingStats> outgoing_stats_per_destination ; std::map<rtc::IPAddress,EmulatedNetworkIncomingStats> incoming_stats_per_source ; SamplesStatsCounter sent_packets_queue_wait_time_us ; } ; class EmulatedEndpoint : public EmulatedNetworkReceiverInterface { public : void)",
    "insertText": "SendPacket(const rtc::SocketAddress& from, const rtc::SocketAddress& to, rtc::CopyOnWriteBuffer packet_data, uint16_t application_overhead = 0)"
  },
  {
    "label": "BindReceiver()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint16_t>)",
    "insertText": "BindReceiver(uint16_t desired_port, EmulatedNetworkReceiverInterface* receiver)"
  },
  {
    "label": "UnbindReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindReceiver(uint16_t port)"
  },
  {
    "label": "BindDefaultReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindDefaultReceiver(EmulatedNetworkReceiverInterface* receiver)"
  },
  {
    "label": "UnbindDefaultReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindDefaultReceiver()"
  },
  {
    "label": "GetPeerLocalAddress()",
    "kind": "Method",
    "detail": "Function (rtc::IPAddress)",
    "insertText": "GetPeerLocalAddress()"
  },
  {
    "label": "EmulatedEndpoint()",
    "kind": "Method",
    "detail": "Function (private : class EmulatedEndpointImpl ;)",
    "insertText": "EmulatedEndpoint()"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (} ; class TcpMessageRoute { public : void)",
    "insertText": "SendMessage(size_t size, std::function<void()> on_received)"
  },
  {
    "label": "TcpMessageRoute()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "TcpMessageRoute()"
  }
]