[
  {
    "label": "Record",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Record"
  },
  {
    "label": "RelativeRelocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RelativeRelocation"
  },
  {
    "label": "SectionRelativeRelocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SectionRelativeRelocation"
  },
  {
    "label": "VA32Relocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VA32Relocation"
  },
  {
    "label": "RVA32Relocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RVA32Relocation"
  },
  {
    "label": "VA64Relocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VA64Relocation"
  },
  {
    "label": "WouldPatchRelocation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_Coff . h \" # include \" LC_Symbols . h \" # include \" LC_ModuleCache . h \" # include \" LC_ProcessTypes . h \" namespace relocations { struct Record { coff::Relocation::Type::Enum relocationType ; uint16_t patchIndex ; uint32_t newModuleRva ; union Data { struct RelativeRelocation { uint32_t originalModuleRva ; } relativeRelocation ; struct SectionRelativeRelocation { uint32_t sectionRelativeRva ; } sectionRelativeRelocation ; struct VA32Relocation { uint32_t originalModuleRva ; } va32Relocation ; struct RVA32Relocation { uint32_t originalModuleRva ; } rva32Relocation ; struct VA64Relocation { uint32_t originalModuleRva ; } va64Relocation ; } data ; } ; bool)",
    "insertText": "WouldPatchRelocation(const ImmutableString& dstSymbolName)"
  },
  {
    "label": "WouldPatchRelocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WouldPatchRelocation(const coff::Relocation* relocation, const coff::CoffDB* coffDb, const ImmutableString& srcSymbolName, const ModuleCache::FindSymbolData& originalData)"
  },
  {
    "label": "PatchRelocation()",
    "kind": "Method",
    "detail": "Function (Record)",
    "insertText": "PatchRelocation(const coff::Relocation* relocation, const coff::CoffDB* coffDb, const types::StringSet& forceRelocationSymbols, const ModuleCache* moduleCache, const ImmutableString& srcSymbolName, const ImmutableString& dstSymbolName, const symbols::Symbol* srcSymbol, size_t newModuleIndex, void* newModuleBases[] , bool forceBackwards)"
  },
  {
    "label": "PatchRelocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PatchRelocation(const Record& record, Process::Handle processHandle, void* processModuleBases[], void* newModuleBase)"
  },
  {
    "label": "IsValidRecord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidRecord(const Record& record)"
  }
]