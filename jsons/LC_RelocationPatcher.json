[
  {
    "label": "Record",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Record"
  },
  {
    "label": "RelativeRelocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RelativeRelocation"
  },
  {
    "label": "SectionRelativeRelocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SectionRelativeRelocation"
  },
  {
    "label": "VA32Relocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VA32Relocation"
  },
  {
    "label": "RVA32Relocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RVA32Relocation"
  },
  {
    "label": "VA64Relocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VA64Relocation"
  },
  {
    "label": "WouldPatchRelocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WouldPatchRelocation(const ImmutableString& dstSymbolName)"
  },
  {
    "label": "WouldPatchRelocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WouldPatchRelocation(\n\t\tconst coff::Relocation* relocation,\n\t\tconst coff::CoffDB* coffDb,\n\t\tconst ImmutableString& srcSymbolName,\n\t\tconst ModuleCache::FindSymbolData& originalData\n\t)"
  },
  {
    "label": "PatchRelocation()",
    "kind": "Method",
    "detail": "Function (Record)",
    "insertText": "PatchRelocation(\n\t\tconst coff::Relocation* relocation,\n\t\tconst coff::CoffDB* coffDb,\n\t\tconst types::StringSet& forceRelocationSymbols,\n\t\tconst ModuleCache* moduleCache,\n\t\tconst ImmutableString& srcSymbolName,\n\t\tconst ImmutableString& dstSymbolName,\n\t\tconst symbols::Symbol* srcSymbol,\n\t\tsize_t newModuleIndex,\n\t\tvoid* newModuleBases[]\n// BEGIN EPIC MOD\n\t\t, bool forceBackwards\n// END EPIC MOD\n\t)"
  },
  {
    "label": "PatchRelocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PatchRelocation(\n\t\tconst Record& record,\n\t\tProcess::Handle processHandle,\n\t\tvoid* processModuleBases[],\n\t\tvoid* newModuleBase\n\t)"
  },
  {
    "label": "IsValidRecord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidRecord(const Record& record)"
  }
]