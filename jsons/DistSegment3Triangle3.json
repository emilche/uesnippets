[
  {
    "label": "TDistSegment3Triangle3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDistSegment3Triangle3"
  },
  {
    "label": "TDistSegment3Triangle3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" TriangleTypes . h \" # include \" SegmentTypes . h \" # include \" DistLine3Triangle3 . h \" # include \" DistPoint3Triangle3 . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<Real> class TDistSegment3Triangle3 { public : TSegment3<Real> Segment ; TTriangle3<Real> Triangle ; Real DistanceSquared = - 1 . 0 ; Real SegmentParameter ; TVector<Real> TriangleClosest,TriangleBaryCoords,SegmentClosest ;)",
    "insertText": "TDistSegment3Triangle3(const TSegment3<Real>& SegmentIn, const TTriangle3<Real>& TriangleIn) : Segment(SegmentIn), Triangle(TriangleIn)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "Get()"
  },
  {
    "label": "GetSquared()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "GetSquared()"
  },
  {
    "label": "ComputeResult()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "ComputeResult()"
  },
  {
    "label": "queryLT()",
    "kind": "Method",
    "detail": "Function (TDistLine3Triangle3<Real>)",
    "insertText": "queryLT(line, Triangle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SegmentParameter = queryLT . LineParam ;)",
    "insertText": "if(SegmentParameter >= -Segment.Extent)"
  },
  {
    "label": "EndPoint()",
    "kind": "Method",
    "detail": "Function (SegmentClosest = queryLT . LineClosest ; TriangleClosest = queryLT . TriangleClosest ; TriangleBaryCoords = queryLT . TriangleBaryCoords ; } else { SegmentClosest = Segment .)",
    "insertText": "EndPoint()"
  },
  {
    "label": "queryPT()",
    "kind": "Method",
    "detail": "Function (TDistPoint3Triangle3<Real>)",
    "insertText": "queryPT(SegmentClosest, Triangle)"
  },
  {
    "label": "StartPoint()",
    "kind": "Method",
    "detail": "Function (TriangleClosest = queryPT . ClosestTrianglePoint ; SegmentParameter = Segment . Extent ; TriangleBaryCoords = queryPT . TriangleBaryCoords ; } } else { SegmentClosest = Segment .)",
    "insertText": "StartPoint()"
  }
]