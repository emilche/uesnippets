[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UMovieScene3DTransformSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene3DTransformSection"
  },
  {
    "label": "FMovieSceneInterrogationKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneInterrogationKey"
  },
  {
    "label": "FTrajectoryKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrajectoryKey"
  },
  {
    "label": "FData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FData"
  },
  {
    "label": "UMovieScene3DTransformTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene3DTransformTrack"
  },
  {
    "label": "FData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Tracks / MovieScenePropertyTrack . h \" # include \" Sections / MovieScene3DTransformSection . h \" # include \" EntitySystem / IMovieSceneBlenderSystemSupport . h \" # include \" MovieScene3DTransformTrack . generated . h \" enum class EMovieSceneTransformChannel : uint32 ; class UMovieScene3DTransformSection ; struct FMovieSceneInterrogationKey ; struct FTrajectoryKey { struct FData {)",
    "insertText": "FData(UMovieScene3DTransformSection* InSection, TOptional<FKeyHandle> InKeyHandle, ERichCurveInterpMode InInterpMode, FName InChannelName) : Section(InSection), KeyHandle(InKeyHandle), ChannelName(InChannelName), InterpMode(InInterpMode)"
  },
  {
    "label": "FTrajectoryKey()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<UMovieScene3DTransformSection> Section ; TOptional<FKeyHandle> KeyHandle ; FName ChannelName ; ERichCurveInterpMode InterpMode ; } ;)",
    "insertText": "FTrajectoryKey(FFrameNumber InTime) : Time(InTime)"
  },
  {
    "label": "Is()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Is(ERichCurveInterpMode InInterpMode)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: virtual bool SupportsType(TSubclassOf<UMovieSceneSection> SectionClass)"
  },
  {
    "label": "CreateNewSection()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection*)",
    "insertText": "CreateNewSection()"
  },
  {
    "label": "CanRename()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA bool)",
    "insertText": "CanRename()"
  },
  {
    "label": "SetBlenderSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlenderSystem(TSubclassOf<UMovieSceneBlenderSystem> BlenderSystemClass)"
  },
  {
    "label": "GetSupportedBlenderSystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSupportedBlenderSystems(TArray<TSubclassOf<UMovieSceneBlenderSystem>>& OutSystemClasses)"
  },
  {
    "label": "GetTrajectoryData()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR TArray<FTrajectoryKey>)",
    "insertText": "GetTrajectoryData(FFrameNumber Time, int32 MaxNumDataPoints, TRange<FFrameNumber>)"
  },
  {
    "label": "GetLabelColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetLabelColor(const FMovieSceneLabelParams& LabelParams)"
  }
]