[
  {
    "label": "__cdecl()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_WRAPPED_WINDOW_PROC_H_ # define BASE_WIN_WRAPPED_WINDOW_PROC_H_ # include<windows . h> # include \" base / base_export . h \" namespace base { namespace win { using WinProcExceptionFilter = int)",
    "insertText": "__cdecl(*)(EXCEPTION_POINTERS* info)"
  },
  {
    "label": "SetWinProcExceptionFilter()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT WinProcExceptionFilter)",
    "insertText": "SetWinProcExceptionFilter(WinProcExceptionFilter filter)"
  },
  {
    "label": "CallExceptionFilter()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT int)",
    "insertText": "CallExceptionFilter(EXCEPTION_POINTERS* info)"
  },
  {
    "label": "InitializeWindowClass()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "InitializeWindowClass(const wchar_t* class_name, WNDPROC window_proc, UINT style, int class_extra, int window_extra, HCURSOR cursor, HBRUSH background, const wchar_t* menu_name, HICON large_icon, HICON small_icon, WNDCLASSEX* class_out)"
  },
  {
    "label": "WrappedWindowProc()",
    "kind": "Method",
    "detail": "Function (template<WNDPROC proc> LRESULT CALLBACK)",
    "insertText": "WrappedWindowProc(HWND hwnd, UINT message, WPARAM wparam, LPARAM lparam)"
  },
  {
    "label": "proc()",
    "kind": "Method",
    "detail": "Function (LRESULT rv = 0 ; __try { rv =)",
    "insertText": "proc(hwnd, message, wparam, lparam)"
  },
  {
    "label": "__except()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__except(CallExceptionFilter(GetExceptionInformation()))"
  }
]