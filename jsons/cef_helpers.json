[
  {
    "label": "CefDeleteOnThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefDeleteOnThread"
  },
  {
    "label": "CefDeleteOnUIThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefDeleteOnUIThread"
  },
  {
    "label": "CefDeleteOnIOThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefDeleteOnIOThread"
  },
  {
    "label": "CefDeleteOnFileBackgroundThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefDeleteOnFileBackgroundThread"
  },
  {
    "label": "CefDeleteOnFileUserVisibleThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefDeleteOnFileUserVisibleThread"
  },
  {
    "label": "CefDeleteOnFileUserBlockingThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefDeleteOnFileUserBlockingThread"
  },
  {
    "label": "CefDeleteOnRendererThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefDeleteOnRendererThread"
  },
  {
    "label": "CefScopedArgArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefScopedArgArray"
  },
  {
    "label": "CEF_REQUIRE_UI_THREAD()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_WRAPPER_CEF_HELPERS_H_ # define CEF_INCLUDE_WRAPPER_CEF_HELPERS_H_ # pragma once # include<cstring> # include<string> # include<vector> # include \" include / base / cef_bind . h \" # include \" include / base / cef_logging . h \" # include \" include / base / cef_macros . h \" # include \" include / cef_task . h \" # define)",
    "insertText": "CEF_REQUIRE_UI_THREAD() DCHECK(CefCurrentlyOn(TID_UI))"
  },
  {
    "label": "CEF_REQUIRE_IO_THREAD()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CEF_REQUIRE_IO_THREAD() DCHECK(CefCurrentlyOn(TID_IO))"
  },
  {
    "label": "CEF_REQUIRE_FILE_BACKGROUND_THREAD()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CEF_REQUIRE_FILE_BACKGROUND_THREAD() \\ DCHECK(CefCurrentlyOn(TID_FILE_BACKGROUND))"
  },
  {
    "label": "CEF_REQUIRE_FILE_USER_VISIBLE_THREAD()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CEF_REQUIRE_FILE_USER_VISIBLE_THREAD() \\ DCHECK(CefCurrentlyOn(TID_FILE_USER_VISIBLE))"
  },
  {
    "label": "CEF_REQUIRE_FILE_USER_BLOCKING_THREAD()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CEF_REQUIRE_FILE_USER_BLOCKING_THREAD() \\ DCHECK(CefCurrentlyOn(TID_FILE_USER_BLOCKING))"
  },
  {
    "label": "CEF_REQUIRE_RENDERER_THREAD()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CEF_REQUIRE_RENDERER_THREAD() DCHECK(CefCurrentlyOn(TID_RENDERER))"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (template<CefThreadId thread> struct CefDeleteOnThread { template<T> void)",
    "insertText": "Destruct(const T* x)"
  },
  {
    "label": "CefPostTask()",
    "kind": "Method",
    "detail": "Function (delete x ; } else {)",
    "insertText": "CefPostTask(thread, base::BindOnce(&CefDeleteOnThread<thread>::Destruct<T>, base::Unretained(x)))"
  },
  {
    "label": "IMPLEMENT_REFCOUNTING_EX()",
    "kind": "Method",
    "detail": "Function (} } } ; struct CefDeleteOnUIThread : public CefDeleteOnThread<TID_UI> { } ; struct CefDeleteOnIOThread : public CefDeleteOnThread<TID_IO> { } ; struct CefDeleteOnFileBackgroundThread : public CefDeleteOnThread<TID_FILE_BACKGROUND> { } ; struct CefDeleteOnFileUserVisibleThread : public CefDeleteOnThread<TID_FILE_USER_VISIBLE> { } ; struct CefDeleteOnFileUserBlockingThread : public CefDeleteOnThread<TID_FILE_USER_BLOCKING> { } ; struct CefDeleteOnRendererThread : public CefDeleteOnThread<TID_RENDERER> { } ; # define)",
    "insertText": "IMPLEMENT_REFCOUNTING_EX(ClassName, Destructor) \\ public: \\ void AddRef()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (ref_count_ .)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} \\ bool)",
    "insertText": "Release()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(ref_count_.Release())"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "Destruct(this)"
  },
  {
    "label": "HasOneRef()",
    "kind": "Method",
    "detail": "Function (\\ return true ; \\ } \\ return false ; \\ } \\ bool)",
    "insertText": "HasOneRef()"
  },
  {
    "label": "HasAtLeastOneRef()",
    "kind": "Method",
    "detail": "Function (} \\ bool)",
    "insertText": "HasAtLeastOneRef()"
  },
  {
    "label": "IMPLEMENT_REFCOUNTING_DELETE_ON_UIT()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ private : \\ CefRefCount ref_count_ # define)",
    "insertText": "IMPLEMENT_REFCOUNTING_DELETE_ON_UIT(ClassName) \\ IMPLEMENT_REFCOUNTING_EX(ClassName, CefDeleteOnUIThread) #define IMPLEMENT_REFCOUNTING_DELETE_ON_IOT(ClassName) \\ IMPLEMENT_REFCOUNTING_EX(ClassName, CefDeleteOnIOThread)"
  },
  {
    "label": "CefScopedArgArray()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CefScopedArgArray(int argc, char* argv[])"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (array_ = new char* [ argc + 1 ] ; values_ .)",
    "insertText": "resize(argc)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (values_ [ i ] = argv [ i ] ; array_ [ i ] = const_cast<)",
    "insertText": "char(values_[i].c_str())"
  },
  {
    "label": "CefScopedArgArray()",
    "kind": "Method",
    "detail": "Function (} array_ [ argc ] = NULL ; } ~)",
    "insertText": "CefScopedArgArray()"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (delete [ ] array_ ; } char**)",
    "insertText": "array()"
  }
]