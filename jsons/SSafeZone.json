[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "SSafeZone",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSafeZone"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Margin . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Layout / SBox . h \" class FArrangedChildren ; class SSafeZone : public SBox {)",
    "insertText": "SLATE_BEGIN_ARGS(SSafeZone) : _HAlign( HAlign_Fill ) , _VAlign( VAlign_Fill ) , _Padding( 0.0f ) , _Content() , _IsTitleSafe( false ) , _SafeAreaScale(1,1,1,1) , _PadLeft( true ) , _PadRight( true ) , _PadTop( true ) , _PadBottom( true ) #if WITH_EDITOR , _OverrideScreenSize() , _OverrideDpiScale()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(EHorizontalAlignment, HAlign ) SLATE_ARGUMENT( EVerticalAlignment, VAlign ) SLATE_ATTRIBUTE( FMargin, Padding ) SLATE_DEFAULT_SLOT( FArguments, Content ) SLATE_ARGUMENT( bool, IsTitleSafe ) SLATE_ARGUMENT(FMargin, SafeAreaScale) SLATE_ARGUMENT( bool, PadLeft ) SLATE_ARGUMENT( bool, PadRight ) SLATE_ARGUMENT( bool, PadTop ) SLATE_ARGUMENT( bool, PadBottom ) #if WITH_EDITOR SLATE_ARGUMENT( TOptional<FVector2D>, OverrideScreenSize ) SLATE_ARGUMENT(TOptional<float>, OverrideDpiScale ) #endif SLATE_END_ARGS() public: SLATE_API SSafeZone()"
  },
  {
    "label": "SSafeZone()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SSafeZone()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetTitleSafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTitleSafe(bool bIsTitleSafe)"
  },
  {
    "label": "SetSafeAreaScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSafeAreaScale(FMargin InSafeAreaScale)"
  },
  {
    "label": "SetSidesToPad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom)"
  },
  {
    "label": "GetSafeMargin()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetSafeMargin(float InLayoutScale)"
  },
  {
    "label": "SetOverrideScreenInformation()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SetOverrideScreenInformation(TOptional<FVector2D> InScreenSize, TOptional<float> InOverrideDpiScale)"
  },
  {
    "label": "DebugSafeAreaUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugSafeAreaUpdated(const FMargin& NewSafeZone, bool bShouldRecacheMetrics)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float LayoutScale)"
  },
  {
    "label": "SetGlobalSafeZoneScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalSafeZoneScale(TOptional<float> InScale)"
  },
  {
    "label": "GetGlobalSafeZoneScale()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetGlobalSafeZoneScale()"
  },
  {
    "label": "UpdateSafeMargin()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateSafeMargin()"
  },
  {
    "label": "ComputeScaledSafeMargin()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "ComputeScaledSafeMargin(float Scale)"
  }
]