[
  {
    "label": "IMF_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMF_EXPORT_TYPE"
  },
  {
    "label": "IMF_HIDDEN",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMF_HIDDEN"
  },
  {
    "label": "InputFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputFile"
  },
  {
    "label": "MultiPartInputFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiPartInputFile"
  },
  {
    "label": "TiledOutputFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TiledOutputFile"
  },
  {
    "label": "TiledInputFile()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_TILED_INPUT_FILE_H # define INCLUDED_IMF_TILED_INPUT_FILE_H # include \" ImfForward . h \" # include \" ImfGenericInputFile . h \" # include \" ImfThreading . h \" # include \" ImfTileDescription . h \" # include<ImathBox . h> OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER class IMF_EXPORT_TYPE TiledInputFile : public GenericInputFile { public : IMF_EXPORT)",
    "insertText": "TiledInputFile(const char fileName[], int numThreads = globalThreadCount ())"
  },
  {
    "label": "TiledInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "TiledInputFile(OPENEXR_IMF_INTERNAL_NAMESPACE::IStream& is, int numThreads = globalThreadCount ())"
  },
  {
    "label": "TiledInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT ~)",
    "insertText": "TiledInputFile()"
  },
  {
    "label": "TiledInputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TiledInputFile(const TiledInputFile& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TiledInputFile&)",
    "insertText": "operator(const TiledInputFile& other)"
  },
  {
    "label": "TiledInputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TiledInputFile(TiledInputFile&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TiledInputFile&)",
    "insertText": "operator(TiledInputFile&& other)"
  },
  {
    "label": "fileName()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const char*)",
    "insertText": "fileName()"
  },
  {
    "label": "header()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const Header&)",
    "insertText": "header()"
  },
  {
    "label": "version()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "version()"
  },
  {
    "label": "setFrameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setFrameBuffer(const FrameBuffer& frameBuffer)"
  },
  {
    "label": "frameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const FrameBuffer&)",
    "insertText": "frameBuffer()"
  },
  {
    "label": "isComplete()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "isComplete()"
  },
  {
    "label": "tileXSize()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT unsigned int)",
    "insertText": "tileXSize()"
  },
  {
    "label": "tileYSize()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT unsigned int)",
    "insertText": "tileYSize()"
  },
  {
    "label": "levelMode()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT LevelMode)",
    "insertText": "levelMode()"
  },
  {
    "label": "levelRoundingMode()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT LevelRoundingMode)",
    "insertText": "levelRoundingMode()"
  },
  {
    "label": "numLevels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numLevels()"
  },
  {
    "label": "numXLevels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numXLevels()"
  },
  {
    "label": "numYLevels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numYLevels()"
  },
  {
    "label": "isValidLevel()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "isValidLevel(int lx, int ly)"
  },
  {
    "label": "levelWidth()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "levelWidth(int lx)"
  },
  {
    "label": "levelHeight()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "levelHeight(int ly)"
  },
  {
    "label": "numXTiles()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numXTiles(int lx = 0)"
  },
  {
    "label": "numYTiles()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numYTiles(int ly = 0)"
  },
  {
    "label": "dataWindowForLevel()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT IMATH_NAMESPACE::Box2i)",
    "insertText": "dataWindowForLevel(int l = 0)"
  },
  {
    "label": "dataWindowForLevel()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT IMATH_NAMESPACE::Box2i)",
    "insertText": "dataWindowForLevel(int lx, int ly)"
  },
  {
    "label": "dataWindowForTile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT IMATH_NAMESPACE::Box2i)",
    "insertText": "dataWindowForTile(int dx, int dy, int l = 0)"
  },
  {
    "label": "dataWindowForTile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT IMATH_NAMESPACE::Box2i)",
    "insertText": "dataWindowForTile(int dx, int dy, int lx, int ly)"
  },
  {
    "label": "readTile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readTile(int dx, int dy, int l = 0)"
  },
  {
    "label": "readTile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readTile(int dx, int dy, int lx, int ly)"
  },
  {
    "label": "readTiles()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readTiles(int dx1, int dx2, int dy1, int dy2, int lx, int ly)"
  },
  {
    "label": "readTiles()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readTiles(int dx1, int dx2, int dy1, int dy2, int l = 0)"
  },
  {
    "label": "rawTileData()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "rawTileData(int& dx, int& dy, int& lx, int& ly, const char*& pixelData, int& pixelDataSize)"
  },
  {
    "label": "TiledInputFile()",
    "kind": "Method",
    "detail": "Function (struct IMF_HIDDEN Data ; private : class InputFile ; class MultiPartInputFile ; IMF_HIDDEN)",
    "insertText": "TiledInputFile(InputPartData* part)"
  },
  {
    "label": "TiledInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN)",
    "insertText": "TiledInputFile(const Header& header, OPENEXR_IMF_INTERNAL_NAMESPACE::IStream* is, int version, int numThreads)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN void)",
    "insertText": "initialize()"
  },
  {
    "label": "multiPartInitialize()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN void)",
    "insertText": "multiPartInitialize(InputPartData* part)"
  },
  {
    "label": "compatibilityInitialize()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN void)",
    "insertText": "compatibilityInitialize(OPENEXR_IMF_INTERNAL_NAMESPACE::IStream& is)"
  },
  {
    "label": "isValidTile()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN bool)",
    "insertText": "isValidTile(int dx, int dy, int lx, int ly)"
  },
  {
    "label": "bytesPerLineForTile()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN size_t)",
    "insertText": "bytesPerLineForTile(int dx, int dy, int lx, int ly)"
  },
  {
    "label": "tileOrder()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN void)",
    "insertText": "tileOrder(int dx[], int dy[], int lx[], int ly[])"
  }
]