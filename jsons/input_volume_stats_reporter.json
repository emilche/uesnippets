[
  {
    "label": "InputVolumeStatsReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputVolumeStatsReporter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VolumeUpdateStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VolumeUpdateStats"
  },
  {
    "label": "Histograms",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Histograms"
  },
  {
    "label": "InputVolumeStatsReporter()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_INPUT_VOLUME_STATS_REPORTER_H_ # define MODULES_AUDIO_PROCESSING_AGC2_INPUT_VOLUME_STATS_REPORTER_H_ # include \" absl / types / optional . h \" # include \" rtc_base / gtest_prod_util . h \" # include \" system_wrappers / include / metrics . h \" namespace webrtc { class InputVolumeStatsReporter { public : enum class InputVolumeType { kApplied = 0,kRecommended = 1,} ;)",
    "insertText": "InputVolumeStatsReporter(InputVolumeType input_volume_type)"
  },
  {
    "label": "InputVolumeStatsReporter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InputVolumeStatsReporter(const InputVolumeStatsReporter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InputVolumeStatsReporter)",
    "insertText": "operator(const InputVolumeStatsReporter&)"
  },
  {
    "label": "InputVolumeStatsReporter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "InputVolumeStatsReporter()"
  },
  {
    "label": "UpdateStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStatistics(int input_volume)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(InputVolumeStatsReporterTest, CheckVolumeUpdateStatsForEmptyStats)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(InputVolumeStatsReporterTest, CheckVolumeUpdateStatsAfterNoVolumeChange)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(InputVolumeStatsReporterTest, CheckVolumeUpdateStatsAfterVolumeIncrease)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(InputVolumeStatsReporterTest, CheckVolumeUpdateStatsAfterVolumeDecrease)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(InputVolumeStatsReporterTest, CheckVolumeUpdateStatsAfterReset)"
  },
  {
    "label": "volume_update_stats()",
    "kind": "Method",
    "detail": "Function (struct VolumeUpdateStats { int num_decreases = 0 ; int num_increases = 0 ; int sum_decreases = 0 ; int sum_increases = 0 ; } volume_update_stats_ ; VolumeUpdateStats)",
    "insertText": "volume_update_stats()"
  },
  {
    "label": "AllPointersSet()",
    "kind": "Method",
    "detail": "Function (struct Histograms { metrics::Histogram* const decrease_rate ; metrics::Histogram* const decrease_average ; metrics::Histogram* const increase_rate ; metrics::Histogram* const increase_average ; metrics::Histogram* const update_rate ; metrics::Histogram* const update_average ; bool)",
    "insertText": "AllPointersSet()"
  }
]