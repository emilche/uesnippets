[
  {
    "label": "FColoredMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColoredMaterialRenderProxy"
  },
  {
    "label": "FParticleSystemSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleSystemSceneProxy"
  },
  {
    "label": "UParticleModuleRequired",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleRequired"
  },
  {
    "label": "UParticleSystemComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSystemComponent"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "FBaseParticle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBaseParticle"
  },
  {
    "label": "FParticleMeshEmitterInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleMeshEmitterInstance"
  },
  {
    "label": "FStaticMeshLODResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshLODResources"
  },
  {
    "label": "FGlobalDynamicIndexBufferAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGlobalDynamicIndexBufferAllocation"
  },
  {
    "label": "FGlobalDynamicVertexBufferAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGlobalDynamicVertexBufferAllocation"
  },
  {
    "label": "EParticleDetailMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EParticleDetailMode"
  },
  {
    "label": "UParticleEmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleEmitter"
  },
  {
    "label": "UParticleSpriteEmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSpriteEmitter"
  },
  {
    "label": "UParticleModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModule"
  },
  {
    "label": "UParticleModuleTypeDataMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleTypeDataMesh"
  },
  {
    "label": "UParticleModuleTypeDataBeam2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleTypeDataBeam2"
  },
  {
    "label": "UParticleModuleTypeDataTrail2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleTypeDataTrail2"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "UParticleSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSystem"
  },
  {
    "label": "UParticleModuleBeamSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleBeamSource"
  },
  {
    "label": "UParticleModuleBeamTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleBeamTarget"
  },
  {
    "label": "UParticleModuleBeamNoise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleBeamNoise"
  },
  {
    "label": "UParticleModuleBeamModifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleBeamModifier"
  },
  {
    "label": "UParticleModuleTrailSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleTrailSource"
  },
  {
    "label": "UParticleModuleTrailSpawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleTrailSpawn"
  },
  {
    "label": "UParticleModuleTrailTaper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleTrailTaper"
  },
  {
    "label": "UParticleModuleOrientationAxisLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleOrientationAxisLock"
  },
  {
    "label": "UParticleLODLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleLODLevel"
  },
  {
    "label": "FDynamicBeam2EmitterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicBeam2EmitterData"
  },
  {
    "label": "FDynamicTrail2EmitterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicTrail2EmitterData"
  },
  {
    "label": "FParticleSpriteEmitterInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleSpriteEmitterInstance"
  },
  {
    "label": "FParticleBeam2EmitterInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleBeam2EmitterInstance"
  },
  {
    "label": "EParticleStates",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EParticleStates"
  },
  {
    "label": "FParticleSpriteVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleSpriteVertex"
  },
  {
    "label": "FParticleSpriteVertexNonInstanced",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleSpriteVertexNonInstanced"
  },
  {
    "label": "FParticleVertexDynamicParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleVertexDynamicParameter"
  },
  {
    "label": "FParticleBeamTrailVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleBeamTrailVertex"
  },
  {
    "label": "FParticleBeamTrailVertexDynamicParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleBeamTrailVertexDynamicParameter"
  },
  {
    "label": "FMeshParticleInstanceVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshParticleInstanceVertex"
  },
  {
    "label": "FMeshParticleInstanceVertexDynamicParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshParticleInstanceVertexDynamicParameter"
  },
  {
    "label": "FMeshParticleInstanceVertexPrevTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshParticleInstanceVertexPrevTransform"
  },
  {
    "label": "FFullSubUVPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFullSubUVPayload"
  },
  {
    "label": "FAttractorParticlePayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttractorParticlePayload"
  },
  {
    "label": "FLightParticlePayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightParticlePayload"
  },
  {
    "label": "FBeam2TypeDataPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBeam2TypeDataPayload"
  },
  {
    "label": "FBeamParticleSourceTargetPayloadData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBeamParticleSourceTargetPayloadData"
  },
  {
    "label": "FBeamParticleSourceBranchPayloadData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBeamParticleSourceBranchPayloadData"
  },
  {
    "label": "FBeamParticleModifierPayloadData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBeamParticleModifierPayloadData"
  },
  {
    "label": "FTrailsBaseTypeDataPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrailsBaseTypeDataPayload"
  },
  {
    "label": "FRibbonTypeDataPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRibbonTypeDataPayload"
  },
  {
    "label": "FAnimTrailTypeDataPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimTrailTypeDataPayload"
  },
  {
    "label": "FMeshRotationPayloadData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshRotationPayloadData"
  },
  {
    "label": "FMeshMotionBlurPayloadData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshMotionBlurPayloadData"
  },
  {
    "label": "FLocationEmitterInstancePayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLocationEmitterInstancePayload"
  },
  {
    "label": "TPreallocatedArrayProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPreallocatedArrayProxy"
  },
  {
    "label": "FModuleLocationBoneSocketParticlePayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleLocationBoneSocketParticlePayload"
  },
  {
    "label": "FOrbitChainModuleInstancePayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOrbitChainModuleInstancePayload"
  },
  {
    "label": "FParticleSpawnPerUnitInstancePayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleSpawnPerUnitInstancePayload"
  },
  {
    "label": "FParticleCollisionPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleCollisionPayload"
  },
  {
    "label": "FParticleCollisionInstancePayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleCollisionInstancePayload"
  },
  {
    "label": "FParticleEventInstancePayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleEventInstancePayload"
  },
  {
    "label": "FEmitterDynamicParameterPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmitterDynamicParameterPayload"
  },
  {
    "label": "FCameraOffsetParticlePayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCameraOffsetParticlePayload"
  },
  {
    "label": "FParticleRandomSeedInstancePayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleRandomSeedInstancePayload"
  },
  {
    "label": "FParticleOrder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleOrder"
  },
  {
    "label": "FAsyncBufferFillData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncBufferFillData"
  },
  {
    "label": "FParticleVertexFactoryBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleVertexFactoryBase"
  },
  {
    "label": "EDynamicEmitterType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDynamicEmitterType"
  },
  {
    "label": "FParticleDataContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleDataContainer"
  },
  {
    "label": "FMacroUVOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMacroUVOverride"
  },
  {
    "label": "FDynamicEmitterReplayDataBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicEmitterReplayDataBase"
  },
  {
    "label": "FDynamicEmitterDataBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicEmitterDataBase"
  },
  {
    "label": "FDynamicSpriteEmitterReplayDataBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicSpriteEmitterReplayDataBase"
  },
  {
    "label": "FParticleRequiredModule",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleRequiredModule"
  },
  {
    "label": "FDynamicSpriteEmitterDataBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicSpriteEmitterDataBase"
  },
  {
    "label": "FDynamicSpriteEmitterReplayData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicSpriteEmitterReplayData"
  },
  {
    "label": "FDynamicSpriteEmitterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicSpriteEmitterData"
  },
  {
    "label": "FDynamicMeshEmitterReplayData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicMeshEmitterReplayData"
  },
  {
    "label": "FDynamicMeshEmitterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicMeshEmitterData"
  },
  {
    "label": "FDynamicBeam2EmitterReplayData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicBeam2EmitterReplayData"
  },
  {
    "label": "FDynamicTrailsEmitterReplayData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicTrailsEmitterReplayData"
  },
  {
    "label": "FDynamicRibbonEmitterReplayData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicRibbonEmitterReplayData"
  },
  {
    "label": "FDynamicTrailsEmitterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicTrailsEmitterData"
  },
  {
    "label": "FDynamicRibbonEmitterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicRibbonEmitterData"
  },
  {
    "label": "FDynamicAnimTrailEmitterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicAnimTrailEmitterData"
  },
  {
    "label": "FParticleDynamicData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleDynamicData"
  },
  {
    "label": "FParticleMemoryStatManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleMemoryStatManager"
  },
  {
    "label": "FNullDynamicParameterVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNullDynamicParameterVertexBuffer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FParticleResetContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleResetContext"
  },
  {
    "label": "FParticleSystemCustomVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleSystemCustomVersion"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / IndirectArray . h \" # include \" Stats / Stats . h \" # include \" UObject / ObjectMacros . h \" # include \" Math / RandomStream . h \" # include \" RHI . h \" # include \" RenderResource . h \" # include \" UniformBuffer . h \" # include \" PrimitiveViewRelevance . h \" # include \" PrimitiveSceneProxy . h \" # include \" Materials / MaterialInterface . h \" # include \" MeshBatch . h \" # include \" MeshParticleVertexFactory . h \" # include \" PrimitiveSceneProxy . h \" # include \" Particles / ParticlePerfStats . h \" # include \" ParticleHelper . generated . h \" # define _ENABLE_PARTICLE_LOD_INGAME_ class FColoredMaterialRenderProxy ; class FParticleSystemSceneProxy ; class UParticleModuleRequired ; class UParticleSystemComponent ; class USkeletalMeshComponent ; class UStaticMesh ; struct FBaseParticle ; struct FParticleMeshEmitterInstance ; struct FStaticMeshLODResources ; struct FGlobalDynamicIndexBufferAllocation ; struct FGlobalDynamicVertexBufferAllocation ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogParticles, Log, All)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (PDM_Low)",
    "insertText": "UMETA(DisplayName = \"Low\"), PDM_Medium UMETA(DisplayName = \"Medium\"), PDM_High UMETA(DisplayName = \"High\"), PDM_Epic UMETA(DisplayName = \"Epic\"), PDM_MAX UMETA(Hidden)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (const int32 PDM_DefaultValue = 0 xFFFF ; # define _PARTICLES_USE_PREFETCH_ # if)",
    "insertText": "defined(_PARTICLES_USE_PREFETCH_) #define PARTICLE_PREFETCH(Index) FPlatformMisc::Prefetch( ParticleData, ParticleStride * ParticleIndices[Index] ) #define PARTICLE_INSTANCE_PREFETCH(Instance, Index) FPlatformMisc::Prefetch( Instance->ParticleData, Instance->ParticleStride * Instance->ParticleIndices[Index] ) #define PARTICLE_OWNER_PREFETCH(Index) FPlatformMisc::Prefetch( Owner->ParticleData, Owner->ParticleStride * Owner->ParticleIndices[Index] ) #else #define PARTICLE_PREFETCH(Index) #define PARTICLE_INSTANCE_PREFETCH(Instance, Index) #define PARTICLE_OWNER_PREFETCH(Index) #endif #define DECLARE_PARTICLE(Name,Address) \\ FBaseParticle& Name = *((FBaseParticle*) (Address))"
  },
  {
    "label": "DECLARE_PARTICLE_CONST()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_PARTICLE_CONST(Name,Address) \\ const FBaseParticle& Name = *((const FBaseParticle*) (Address))"
  },
  {
    "label": "DECLARE_PARTICLE_PTR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_PARTICLE_PTR(Name,Address) \\ FBaseParticle* Name = (FBaseParticle*) (Address)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# define BEGIN_UPDATE_LOOP \\ { \\)",
    "insertText": "check((Owner != NULL) && (Owner->Component != NULL))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\ int32& ActiveParticles = Owner -> ActiveParticles ; \\ uint32 CurrentOffset = Offset ; \\ const uint8* ParticleData = Owner -> ParticleData ; \\ const uint32 ParticleStride = Owner -> ParticleStride ; \\ uint16* ParticleIndices = Owner -> ParticleIndices ; \\)",
    "insertText": "for(int32 i=ActiveParticles-1; i>=0; i--)"
  },
  {
    "label": "Particle()",
    "kind": "Method",
    "detail": "Function (\\ const int32 CurrentIndex = ParticleIndices [ i ] ; \\ const uint8* ParticleBase = ParticleData + CurrentIndex* ParticleStride ; \\ FBaseParticle&)",
    "insertText": "Particle((FBaseParticle*) ParticleBase)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((Particle.Flags & STATE_Particle_Freeze) == 0)"
  },
  {
    "label": "Particle()",
    "kind": "Method",
    "detail": "Function (\\ const int32 ActiveParticles = Owner -> ActiveParticles ; \\ const uint32 ParticleStride = Owner -> ParticleStride ; \\ uint32 CurrentOffset = Offset ; \\ FBaseParticle&)",
    "insertText": "Particle(ParticleBase)"
  },
  {
    "label": "PARTICLE_ELEMENT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "PARTICLE_ELEMENT(Type,Name) \\ Type& Name = *((Type*)((uint8*)ParticleBase + CurrentOffset))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (\\ CurrentOffset + =)",
    "insertText": "sizeof(Type)"
  },
  {
    "label": "Particle_SetColorFromVector()",
    "kind": "Method",
    "detail": "Function (# define KILL_CURRENT_PARTICLE \\ { \\ ParticleIndices [ i ] = ParticleIndices [ ActiveParticles - 1 ] ; \\ ParticleIndices [ ActiveParticles - 1 ] = CurrentIndex ; \\ ActiveParticles - - ; \\ } void)",
    "insertText": "Particle_SetColorFromVector(const FVector3f& InColorVec, const float InAlpha, FLinearColor& OutColor)"
  },
  {
    "label": "INDEX_TYPEDATAMODULE()",
    "kind": "Method",
    "detail": "Function (OutColor . R = InColorVec . X ; OutColor . G = InColorVec . Y ; OutColor . B = InColorVec . Z ; OutColor . A = InAlpha ; } class UParticleEmitter ; class UParticleSpriteEmitter ; class UParticleModule ; class UParticleModuleTypeDataMesh ; class UParticleModuleTypeDataBeam2 ; class UParticleModuleTypeDataTrail2 ; class UStaticMeshComponent ; class UParticleSystem ; class UParticleSystemComponent ; class UParticleModuleBeamSource ; class UParticleModuleBeamTarget ; class UParticleModuleBeamNoise ; class UParticleModuleBeamModifier ; class UParticleModuleTrailSource ; class UParticleModuleTrailSpawn ; class UParticleModuleTrailTaper ; class UParticleModuleOrientationAxisLock ; class UParticleLODLevel ; class USkeletalMeshComponent ; class FParticleSystemSceneProxy ; struct FDynamicBeam2EmitterData ; struct FDynamicTrail2EmitterData ; struct FParticleSpriteEmitterInstance ; struct FParticleMeshEmitterInstance ; struct FParticleBeam2EmitterInstance ; struct FStaticMeshLODResources ; # define)",
    "insertText": "INDEX_TYPEDATAMODULE(INDEX_NONE - 1) #define INDEX_REQUIREDMODULE (INDEX_NONE - 2) #define INDEX_SPAWNMODULE (INDEX_NONE - 3)"
  },
  {
    "label": "STATE_CounterMask()",
    "kind": "Method",
    "detail": "Function (FVector OldLocation ; FVector Location ; FVector3f BaseVelocity ; float Rotation ; FVector3f Velocity ; float BaseRotationRate ; FVector3f BaseSize ; float RotationRate ; FVector3f Size ; int32 Flags ; FLinearColor Color ; FLinearColor BaseColor ; float RelativeTime ; float OneOverMaxLifetime ; float Placeholder0 ; float Placeholder1 ; } ; enum EParticleStates { STATE_Particle_JustSpawned = 0 x02000000,STATE_Particle_Freeze = 0 x04000000,STATE_Particle_IgnoreCollisions = 0 x08000000,STATE_Particle_FreezeTranslation = 0 x10000000,STATE_Particle_FreezeRotation = 0 x20000000,STATE_Particle_CollisionIgnoreCheck = STATE_Particle_Freeze | STATE_Particle_IgnoreCollisions | STATE_Particle_FreezeTranslation | STATE_Particle_FreezeRotation,STATE_Particle_DelayCollisions = 0 x40000000,STATE_Particle_CollisionHasOccurred = 0 x80000000,STATE_Mask = 0 xFE000000,)",
    "insertText": "STATE_CounterMask(~STATE_Mask)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"ParticlesOverview\"), STATGROUP_ParticlesOverview, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"GT Total\"), STAT_ParticlesOverview_GT, STATGROUP_ParticlesOverview,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"GT Concurrent Total\"), STAT_ParticlesOverview_GT_CNC, STATGROUP_ParticlesOverview,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"RT Total\"), STAT_ParticlesOverview_RT, STATGROUP_ParticlesOverview,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"RT Concurrent Total\"), STAT_ParticlesOverview_RT_CNC, STATGROUP_ParticlesOverview,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Sprite Particles\"),STAT_SpriteParticles,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Sprite Ptcls Spawned\"),STAT_SpriteParticlesSpawned,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Sprite Ptcls Updated\"),STAT_SpriteParticlesUpdated,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Sprite Ptcls Killed\"),STAT_SpriteParticlesKilled,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Particle Draw Calls\"),STAT_ParticleDrawCalls,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Sort Time RT\"),STAT_SortingTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Sprite Render Time RT\"),STAT_SpriteRenderingTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Sprite Tick Time GT\"),STAT_SpriteTickTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Sprite Spawn Time GT\"),STAT_SpriteSpawnTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"PSys Comp Tick Time GT\"),STAT_PSysCompTickTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Particle Collision Time GT\"),STAT_ParticleCollisionTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Particle SkelMeshSurf Time GT\"),STAT_ParticleSkelMeshSurfTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Particle Pool Time RT\"),STAT_ParticlePoolTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Particle Compute Time GT,AT\"),STAT_ParticleComputeTickTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Particle Finalize Time GT\"),STAT_ParticleFinalizeTickTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Particle GT Stall Time\"),STAT_GTSTallTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Particle Render Time RT\"),STAT_ParticleRenderingTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Particle Packing Time RT\"),STAT_ParticlePackingTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"SetTemplate Time GT\"),STAT_ParticleSetTemplateTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Initialize Time GT\"),STAT_ParticleInitializeTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Activate Time GT\"),STAT_ParticleActivateTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Async Work Time\"),STAT_ParticleAsyncTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Wait For ASync Time\"),STAT_ParticleAsyncWaitTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Update Bounds Time GT\"),STAT_ParticleUpdateBounds,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Ptcls Data GT Mem\"),STAT_GTParticleData,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Ptcls Data GT Mem MAX\"),STAT_GTParticleData_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Ptcls Data RT Mem\"),STAT_RTParticleData,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Ptcls Data RT Mem MAX\"),STAT_RTParticleData_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Ptcls Data RT Largest\"),STAT_RTParticleData_Largest,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Ptcls Data RT Largest MAX\"),STAT_RTParticleData_Largest_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynPSysComp Mem\"),STAT_DynamicPSysCompMem,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynPSysComp Mem MAX\"),STAT_DynamicPSysCompMem_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynEmitter Mem\"),STAT_DynamicEmitterMem,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynEmitter Mem MAX\"),STAT_DynamicEmitterMem_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynEmitter GTMem Waste\"),STAT_DynamicEmitterGTMem_Waste,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynEmitter GTMem Largest\"),STAT_DynamicEmitterGTMem_Largest,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynEmitter GTMem Waste MAX\"),STAT_DynamicEmitterGTMem_Waste_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynEmitter GTMem Largest MAX\"),STAT_DynamicEmitterGTMem_Largest_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynPSysComp Count\"),STAT_DynamicPSysCompCount,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynPSysComp Count MAX\"),STAT_DynamicPSysCompCount_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynEmitter Count\"),STAT_DynamicEmitterCount,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynEmitter Count Max\"),STAT_DynamicEmitterCount_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynSprite Count\"),STAT_DynamicSpriteCount,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynSprite Max\"),STAT_DynamicSpriteCount_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"DynSprite GT Mem\"),STAT_DynamicSpriteGTMem,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynSprite GT Mem Max\"),STAT_DynamicSpriteGTMem_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynSubUV Count\"),STAT_DynamicSubUVCount,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynSubUV Max\"),STAT_DynamicSubUVCount_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"DynSubUV GT Mem\"),STAT_DynamicSubUVGTMem,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynSubUV GT Mem Max\"),STAT_DynamicSubUVGTMem_Max,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynMesh Count\"),STAT_DynamicMeshCount,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynMesh Max\"),STAT_DynamicMeshCount_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"DynMesh GT Mem\"),STAT_DynamicMeshGTMem,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynMesh GT Mem Max\"),STAT_DynamicMeshGTMem_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynBeam Count\"),STAT_DynamicBeamCount,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynBeam Max\"),STAT_DynamicBeamCount_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"DynBeam GT Mem\"),STAT_DynamicBeamGTMem,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynBeam GT Mem Max\"),STAT_DynamicBeamGTMem_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynRibbon Count\"),STAT_DynamicRibbonCount,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynRibbon Max\"),STAT_DynamicRibbonCount_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"DynRibbon GT Mem\"),STAT_DynamicRibbonGTMem,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynRibbon GT Mem Max\"),STAT_DynamicRibbonGTMem_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynAnimTrail Count\"),STAT_DynamicAnimTrailCount,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynAnimTrail Max\"),STAT_DynamicAnimTrailCount_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"DynAnimTrail GT Mem\"),STAT_DynamicAnimTrailGTMem,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynAnimTrail GT Mem Max\"),STAT_DynamicAnimTrailGTMem_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"DynUntracked Mem\"),STAT_DynamicUntrackedGTMem,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DynUntracked Mem Max\"),STAT_DynamicUntrackedGTMem_MAX,STATGROUP_ParticleMem,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Sprites\"),STAT_GPUSpriteParticles,STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Sprites Spawned\"),STAT_GPUSpritesSpawned,STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Sorted Emitters\"),STAT_SortedGPUEmitters,STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Sorted Particles\"),STAT_SortedGPUParticles,STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Free Tiles\"),STAT_FreeGPUTiles,STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Sprite Tick Time\"),STAT_GPUSpriteTickTime,STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Sprite Spawn Time\"),STAT_GPUSpriteSpawnTime,STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Sprite PreRender Time\"),STAT_GPUSpritePreRenderTime,STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Sprite Render Time\"),STAT_GPUSpriteRenderingTime,STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"GPU Particle Tick Time\"),STAT_GPUParticleTickTime,STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Build Sim Commands\"),STAT_GPUParticleBuildSimCmdsTime,STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Misc1\"),STAT_GPUParticleMisc1,STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Misc2\"),STAT_GPUParticleMisc2,STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Misc3\"),STAT_GPUParticleMisc3,STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Injection Tick Time\"), STAT_GPUParticlesInjectionTime, STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Execute Simulation Commands Time\"), STAT_GPUParticlesSimulationCommands, STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Single Iteration Emitters\"), STAT_GPUSingleIterationEmitters, STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Multi Iterations Emitters\"), STAT_GPUMultiIterationsEmitters, STATGROUP_GPUParticles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Mesh Particles\"),STAT_MeshParticles,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Mesh Render Time RT\"),STAT_MeshRenderingTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Mesh Tick Time GT,AT\"),STAT_MeshTickTime,STATGROUP_Particles,)"
  },
  {
    "label": "TRAIL_EMITTER_NULL_PREV()",
    "kind": "Method",
    "detail": "Function (struct FParticleSpriteVertex { FVector3f Position ; float RelativeTime ; FVector3f OldPosition ; float ParticleId ; FVector2f Size ; float Rotation ; float SubImageIndex ; FLinearColor Color ; } ; struct FParticleSpriteVertexNonInstanced { FVector2f UV ; FVector3f Position ; float RelativeTime ; FVector3f OldPosition ; float ParticleId ; FVector2f Size ; float Rotation ; float SubImageIndex ; FLinearColor Color ; } ; struct FParticleVertexDynamicParameter { float DynamicValue [ 4 ] ; } ; struct FParticleBeamTrailVertex { FVector3f Position ; float RelativeTime ; FVector3f OldPosition ; float ParticleId ; FVector2f Size ; float Rotation ; float SubImageIndex ; FLinearColor Color ; float Tex_U ; float Tex_V ; float Tex_U2 ; float Tex_V2 ; } ; struct FParticleBeamTrailVertexDynamicParameter { float DynamicValue [ 4 ] ; } ; struct FMeshParticleInstanceVertex { FLinearColor Color ; FVector4f Transform [ 3 ] ; FVector4f Velocity ; int16 SubUVParams [ 4 ] ; float SubUVLerp ; float RelativeTime ; } ; struct FMeshParticleInstanceVertexDynamicParameter { float DynamicValue [ 4 ] ; } ; struct FMeshParticleInstanceVertexPrevTransform { FVector4f PrevTransform0 ; FVector4f PrevTransform1 ; FVector4f PrevTransform2 ; } ; # define TRAIL_EMITTER_FLAG_FORCEKILL 0 x00000000 # define TRAIL_EMITTER_FLAG_DEADTRAIL 0 x10000000 # define TRAIL_EMITTER_FLAG_MIDDLE 0 x20000000 # define TRAIL_EMITTER_FLAG_START 0 x40000000 # define TRAIL_EMITTER_FLAG_END 0 x80000000 # define TRAIL_EMITTER_FLAG_MASK 0 xf0000000 # define TRAIL_EMITTER_PREV_MASK 0 x0fffc000 # define TRAIL_EMITTER_PREV_SHIFT 1 4 # define TRAIL_EMITTER_NEXT_MASK 0 x00003fff # define TRAIL_EMITTER_NEXT_SHIFT 0 # define)",
    "insertText": "TRAIL_EMITTER_NULL_PREV(TRAIL_EMITTER_PREV_MASK >> TRAIL_EMITTER_PREV_SHIFT) #define TRAIL_EMITTER_NULL_NEXT (TRAIL_EMITTER_NEXT_MASK >> TRAIL_EMITTER_NEXT_SHIFT) #define TRAIL_EMITTER_CHECK_FLAG(val, mask, flag) ((val & mask) == flag) #define TRAIL_EMITTER_SET_FLAG(val, mask, flag) ((val & ~mask) | flag) #define TRAIL_EMITTER_GET_PREVNEXT(val, mask, shift) ((val & mask) >> shift) #define TRAIL_EMITTER_SET_PREVNEXT(val, mask, shift, setval) ((val & ~mask) | ((setval << shift) & mask)) #define TRAIL_EMITTER_IS_START(index) TRAIL_EMITTER_CHECK_FLAG(index, TRAIL_EMITTER_FLAG_MASK, TRAIL_EMITTER_FLAG_START) #define TRAIL_EMITTER_SET_START(index) TRAIL_EMITTER_SET_FLAG(index, TRAIL_EMITTER_FLAG_MASK, TRAIL_EMITTER_FLAG_START) #define TRAIL_EMITTER_IS_END(index) TRAIL_EMITTER_CHECK_FLAG(index, TRAIL_EMITTER_FLAG_MASK, TRAIL_EMITTER_FLAG_END) #define TRAIL_EMITTER_SET_END(index) TRAIL_EMITTER_SET_FLAG(index, TRAIL_EMITTER_FLAG_MASK, TRAIL_EMITTER_FLAG_END) #define TRAIL_EMITTER_IS_MIDDLE(index) TRAIL_EMITTER_CHECK_FLAG(index, TRAIL_EMITTER_FLAG_MASK, TRAIL_EMITTER_FLAG_MIDDLE) #define TRAIL_EMITTER_SET_MIDDLE(index) TRAIL_EMITTER_SET_FLAG(index, TRAIL_EMITTER_FLAG_MASK, TRAIL_EMITTER_FLAG_MIDDLE) #define TRAIL_EMITTER_IS_ONLY(index) (TRAIL_EMITTER_CHECK_FLAG(index, TRAIL_EMITTER_FLAG_MASK, TRAIL_EMITTER_FLAG_START) && \\ (TRAIL_EMITTER_GET_NEXT(index) == TRAIL_EMITTER_NULL_NEXT)) #define TRAIL_EMITTER_SET_ONLY(index) TRAIL_EMITTER_SET_FLAG(index, TRAIL_EMITTER_FLAG_MASK, TRAIL_EMITTER_FLAG_START) #define TRAIL_EMITTER_IS_FORCEKILL(index) TRAIL_EMITTER_CHECK_FLAG(index, TRAIL_EMITTER_FLAG_MASK, TRAIL_EMITTER_FLAG_FORCEKILL) #define TRAIL_EMITTER_SET_FORCEKILL(index) TRAIL_EMITTER_SET_FLAG(index, TRAIL_EMITTER_FLAG_MASK, TRAIL_EMITTER_FLAG_FORCEKILL) #define TRAIL_EMITTER_IS_DEADTRAIL(index) TRAIL_EMITTER_CHECK_FLAG(index, TRAIL_EMITTER_FLAG_MASK, TRAIL_EMITTER_FLAG_DEADTRAIL) #define TRAIL_EMITTER_SET_DEADTRAIL(index) TRAIL_EMITTER_SET_FLAG(index, TRAIL_EMITTER_FLAG_MASK, TRAIL_EMITTER_FLAG_DEADTRAIL) #define TRAIL_EMITTER_IS_HEAD(index) (TRAIL_EMITTER_IS_START(index) || TRAIL_EMITTER_IS_DEADTRAIL(index)) #define TRAIL_EMITTER_IS_HEADONLY(index) ((TRAIL_EMITTER_IS_START(index) || TRAIL_EMITTER_IS_DEADTRAIL(index)) && \\ (TRAIL_EMITTER_GET_NEXT(index) == TRAIL_EMITTER_NULL_NEXT)) #define TRAIL_EMITTER_GET_PREV(index) TRAIL_EMITTER_GET_PREVNEXT(index, TRAIL_EMITTER_PREV_MASK, TRAIL_EMITTER_PREV_SHIFT) #define TRAIL_EMITTER_SET_PREV(index, prev) TRAIL_EMITTER_SET_PREVNEXT(index, TRAIL_EMITTER_PREV_MASK, TRAIL_EMITTER_PREV_SHIFT, prev) #define TRAIL_EMITTER_GET_NEXT(index) TRAIL_EMITTER_GET_PREVNEXT(index, TRAIL_EMITTER_NEXT_MASK, TRAIL_EMITTER_NEXT_SHIFT) #define TRAIL_EMITTER_SET_NEXT(index, next) TRAIL_EMITTER_SET_PREVNEXT(index, TRAIL_EMITTER_NEXT_MASK, TRAIL_EMITTER_NEXT_SHIFT, next) DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Trail Particles\"),STAT_TrailParticles,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Trail Ptcl Render Calls\"),STAT_TrailParticlesRenderCalls,STATGROUP_TrailParticles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Trail Ptcls Spawned\"),STAT_TrailParticlesSpawned,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Trail Tick Calls\"),STAT_TrailParticlesTickCalls,STATGROUP_TrailParticles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Trail Ptcls Killed\"),STAT_TrailParticlesKilled,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Trail Ptcl Tris\"),STAT_TrailParticlesTrianglesRendered,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Trail FillVertex Time RT\"),STAT_TrailFillVertexTime,STATGROUP_TrailParticles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Trail FillIndex Time RT\"),STAT_TrailFillIndexTime,STATGROUP_TrailParticles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Trail Render Time RT\"),STAT_TrailRenderingTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Trail Tick Time GT\"),STAT_TrailTickTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"AnimTrail Notify Time GT\"),STAT_AnimTrailNotifyTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Beam Particles\"),STAT_BeamParticles,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Beam Ptcl Render Calls\"),STAT_BeamParticlesRenderCalls,STATGROUP_BeamParticles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Beam Ptcls Spawned\"),STAT_BeamParticlesSpawned,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Beam Ptcl Update Calls\"),STAT_BeamParticlesUpdateCalls,STATGROUP_BeamParticles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Beam Ptcls Updated\"),STAT_BeamParticlesUpdated,STATGROUP_BeamParticles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Beam Ptcls Killed\"),STAT_BeamParticlesKilled,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Beam Ptcl Tris\"),STAT_BeamParticlesTrianglesRendered,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Beam Spawn Time GT\"),STAT_BeamSpawnTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Beam FillVertex Time RT\"),STAT_BeamFillVertexTime,STATGROUP_BeamParticles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Beam FillIndex Time RT\"),STAT_BeamFillIndexTime,STATGROUP_BeamParticles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Beam Render Time RT\"),STAT_BeamRenderingTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Beam Tick Time GT\"),STAT_BeamTickTime,STATGROUP_Particles,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Mesh Particle Polys\"), STAT_MeshParticlePolys, STATGROUP_Particles,)"
  },
  {
    "label": "BEAM2_TYPEDATA_LOCKED()",
    "kind": "Method",
    "detail": "Function (struct FFullSubUVPayload { float ImageIndex ; float RandomImageTime ; } ; struct FAttractorParticlePayload { int32 SourceIndex ; uint32 SourcePointer ; FVector3f SourceVelocity ; } ; struct FLightParticlePayload { FVector3f ColorScale ; uint64 LightId ; float RadiusScale ; float LightExponent ; float InverseExposureBlend ; bool bValid ; bool bAffectsTranslucency ; bool bHighQuality ; } ; # define BEAM2_TYPEDATA_LOCKED_MASK 0 x80000000 # define)",
    "insertText": "BEAM2_TYPEDATA_LOCKED(x) ((x & BEAM2_TYPEDATA_LOCKED_MASK) != 0) #define BEAM2_TYPEDATA_SETLOCKED(x, Locked) (x = Locked ? (x | BEAM2_TYPEDATA_LOCKED_MASK) : (x & ~BEAM2_TYPEDATA_LOCKED_MASK)) #define BEAM2_TYPEDATA_FREQUENCY_MASK 0x00fff000 #define BEAM2_TYPEDATA_FREQUENCY_SHIFT 12 #define BEAM2_TYPEDATA_FREQUENCY(x) ((x & BEAM2_TYPEDATA_FREQUENCY_MASK) >> BEAM2_TYPEDATA_FREQUENCY_SHIFT) #define BEAM2_TYPEDATA_SETFREQUENCY(x, Freq) (x = ((x & ~BEAM2_TYPEDATA_FREQUENCY_MASK) | (Freq << BEAM2_TYPEDATA_FREQUENCY_SHIFT)))"
  },
  {
    "label": "UpdatePosition()",
    "kind": "Method",
    "detail": "Function (FVector SourcePoint ; FVector SourceTangent ; float SourceStrength ; FVector TargetPoint ; FVector TargetTangent ; float TargetStrength ; int32 Lock_Max_NumNoisePoints ; int32 InterpolationSteps ; FVector Direction ; double StepSize ; int32 Steps ; float TravelRatio ; int32 TriangleCount ; int32 Flags ; } ; struct FBeamParticleSourceTargetPayloadData { int32 ParticleIndex ; } ; struct FBeamParticleSourceBranchPayloadData { int32 NoiseIndex ; } ; struct FBeamParticleModifierPayloadData { uint32 bModifyPosition : 1 ; uint32 bScalePosition : 1 ; uint32 bModifyTangent : 1 ; uint32 bScaleTangent : 1 ; uint32 bModifyStrength : 1 ; uint32 bScaleStrength : 1 ; FVector Position ; FVector Tangent ; float Strength ; void)",
    "insertText": "UpdatePosition(FVector& Value)"
  },
  {
    "label": "UpdateTangent()",
    "kind": "Method",
    "detail": "Function (Value + = Position ; } else { Value* = Position ; } } } void)",
    "insertText": "UpdateTangent(FVector& Value, bool bAbsolute)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FVector ModTangent ;)",
    "insertText": "if(bAbsolute == false)"
  },
  {
    "label": "FindBetweenNormals()",
    "kind": "Method",
    "detail": "Function (const FQuat RotQuat =)",
    "insertText": "FindBetweenNormals(FVector(1.0f, 0.0f, 0.0f), Value)"
  },
  {
    "label": "RotateVector()",
    "kind": "Method",
    "detail": "Function (ModTangent = RotQuat .)",
    "insertText": "RotateVector(Tangent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { ModTangent = Tangent ; })",
    "insertText": "if(bScaleTangent == false)"
  },
  {
    "label": "UpdateStrength()",
    "kind": "Method",
    "detail": "Function (Value + = ModTangent ; } else { Value* = ModTangent ; } } } void)",
    "insertText": "UpdateStrength(float& Value)"
  },
  {
    "label": "TPreallocatedArrayProxy()",
    "kind": "Method",
    "detail": "Function (Value + = Strength ; } else { Value* = Strength ; } } } } ; struct FTrailsBaseTypeDataPayload { int32 Flags ; int32 TrailIndex ; int32 TriangleCount ; float SpawnTime ; float SpawnDelta ; float TiledU ; int32 SpawnedTessellationPoints ; int32 RenderingInterpCount ; float PinchScaleFactor ; uint32 bInterpolatedSpawn : 1 ; uint32 bMovementSpawned : 1 ; } ; struct FRibbonTypeDataPayload : public FTrailsBaseTypeDataPayload { FVector3f Tangent ; FVector3f Up ; int32 SourceIndex ; } ; struct FAnimTrailTypeDataPayload : public FTrailsBaseTypeDataPayload { FVector3f Direction ; FVector3f Tangent ; float Length ; float InterpolationParameter ; } ; struct FMeshRotationPayloadData { FVector3f InitialOrientation ; FVector3f InitRotation ; FVector3f Rotation ; FVector3f CurContinuousRotation ; FVector3f RotationRate ; FVector3f RotationRateBase ; } ; struct FMeshMotionBlurPayloadData { FVector3f BaseParticlePrevVelocity ; FVector3f BaseParticlePrevSize ; FVector3f PayloadPrevRotation ; FVector3f PayloadPrevOrbitOffset ; float BaseParticlePrevRotation ; float PayloadPrevCameraOffset ; } ; struct FLocationEmitterInstancePayload { int32 LastSelectedIndex ; } ; template<ElementType> class TPreallocatedArrayProxy { public :)",
    "insertText": "TPreallocatedArrayProxy() : ArrayMax(0), Array(NULL)"
  },
  {
    "label": "TPreallocatedArrayProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPreallocatedArrayProxy(uint8* ArrayStart, int32 ArraySize ) : ArrayMax( ArraySize ), Array( (ElementType*) ArrayStart)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ElementType&)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const ElementType* const RESTRICT DataEnd = Array + ArrayMax ;)",
    "insertText": "for(const ElementType* RESTRICT Data = Array; Data < DataEnd; ++Data)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} } return INDEX_NONE ; } bool)",
    "insertText": "Contains(const ElementType& Item)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "DynPayload()",
    "kind": "Method",
    "detail": "Function (const FEmitterDynamicParameterPayload*)",
    "insertText": "DynPayload((const FEmitterDynamicParameterPayload*)((uint8*)(&InParticle) + InDynamicPayloadOffset))"
  },
  {
    "label": "FParticleOrder()",
    "kind": "Method",
    "detail": "Function (OutDynamicData . X = DynPayload -> DynamicParameterValue [ 0 ] ; OutDynamicData . Y = DynPayload -> DynamicParameterValue [ 1 ] ; OutDynamicData . Z = DynPayload -> DynamicParameterValue [ 2 ] ; OutDynamicData . W = DynPayload -> DynamicParameterValue [ 3 ] ; } struct FCameraOffsetParticlePayload { float BaseOffset ; float Offset ; } ; struct FParticleRandomSeedInstancePayload { FRandomStream RandomStream ; } ; struct FParticleOrder { int32 ParticleIndex ; union { float Z ; uint32 C ; } ;)",
    "insertText": "FParticleOrder(int32 InParticleIndex,float InZ): ParticleIndex(InParticleIndex), Z(InZ)"
  },
  {
    "label": "FParticleOrder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FParticleOrder(int32 InParticleIndex,uint32 InC): ParticleIndex(InParticleIndex), C(InC)"
  },
  {
    "label": "FAsyncBufferFillData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAsyncBufferFillData { FMatrix LocalToWorld ; FMatrix WorldToLocal ; const FSceneView* View ; int32 VertexCount ; int32 VertexSize ; void* VertexData ; int32 IndexCount ; void* IndexData ; int32 OutTriangleCount ; void* DynamicParameterData ;)",
    "insertText": "FAsyncBufferFillData()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this,sizeof(FAsyncBufferFillData))"
  },
  {
    "label": "FParticleDataContainer()",
    "kind": "Method",
    "detail": "Function (} } ; class FParticleVertexFactoryBase ; enum EDynamicEmitterType { DET_Unknown = 0,DET_Sprite,DET_Mesh,DET_Beam2,DET_Ribbon,DET_AnimTrail,DET_Custom } ; struct FParticleDataContainer { int32 MemBlockSize ; int32 ParticleDataNumBytes ; int32 ParticleIndicesNumShorts ; uint8* ParticleData ; uint16* ParticleIndices ;)",
    "insertText": "FParticleDataContainer() : MemBlockSize(0) , ParticleDataNumBytes(0) , ParticleIndicesNumShorts(0) , ParticleData(nullptr) , ParticleIndices(nullptr)"
  },
  {
    "label": "FParticleDataContainer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FParticleDataContainer()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free()"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Alloc(int32 InParticleDataNumBytes, int32 InParticleIndicesNumShorts)"
  },
  {
    "label": "FMacroUVOverride()",
    "kind": "Method",
    "detail": "Function (} ; struct FMacroUVOverride {)",
    "insertText": "FMacroUVOverride() : bOverride(false), Radius(0.f), Position(0.f,0.f,0.f)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool bOverride ; float Radius ; FVector3f Position ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FMacroUVOverride& O)"
  },
  {
    "label": "FDynamicEmitterReplayDataBase()",
    "kind": "Method",
    "detail": "Function (Ar<<O . bOverride ; Ar<<O . Radius ; Ar<<O . Position ; return Ar ; } } ; struct FDynamicEmitterReplayDataBase { EDynamicEmitterType eEmitterType ; int32 ActiveParticleCount ; int32 ParticleStride ; FParticleDataContainer DataContainer ; FVector3f Scale ; int32 SortMode ; FMacroUVOverride MacroUVOverride ;)",
    "insertText": "FDynamicEmitterReplayDataBase() : eEmitterType( DET_Unknown ), ActiveParticleCount( 0 ), ParticleStride( 0 ), Scale( FVector3f( 1.0f ) ), SortMode(0)"
  },
  {
    "label": "FDynamicEmitterReplayDataBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDynamicEmitterReplayDataBase()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "EDynamicEmitterType()",
    "kind": "Method",
    "detail": "Function (int32 EmitterTypeAsInt = eEmitterType ; Ar<<EmitterTypeAsInt ; eEmitterType = static_cast<)",
    "insertText": "EDynamicEmitterType(EmitterTypeAsInt)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<ActiveParticleCount ; Ar<<ParticleStride ; TArray<uint8> ParticleData ; TArray<uint16> ParticleIndices ;)",
    "insertText": "if(!Ar.IsLoading() && !Ar.IsObjectReferenceCollector())"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (ParticleData .)",
    "insertText": "AddUninitialized(DataContainer.ParticleDataNumBytes)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(ParticleData.GetData(), DataContainer.ParticleData, DataContainer.ParticleDataNumBytes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DataContainer.ParticleIndicesNumShorts)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (ParticleIndices .)",
    "insertText": "AddUninitialized(DataContainer.ParticleIndicesNumShorts)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(ParticleIndices.GetData(), DataContainer.ParticleIndices, DataContainer.ParticleIndicesNumShorts * sizeof(uint16))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } Ar<<ParticleData ; Ar<<ParticleIndices ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (DataContainer .)",
    "insertText": "Alloc(ParticleData.Num(), ParticleIndices.Num())"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(DataContainer.ParticleData, ParticleData.GetData(), DataContainer.ParticleDataNumBytes)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(DataContainer.ParticleIndices, ParticleIndices.GetData(), DataContainer.ParticleIndicesNumShorts * sizeof(uint16))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "check(!ParticleIndices.Num())"
  },
  {
    "label": "FDynamicEmitterDataBase()",
    "kind": "Method",
    "detail": "Function (} } Ar<<Scale ; Ar<<SortMode ; Ar<<MacroUVOverride ; } } ; struct FDynamicEmitterDataBase {)",
    "insertText": "FDynamicEmitterDataBase(const class UParticleModuleRequired* RequiredModule)"
  },
  {
    "label": "FDynamicEmitterDataBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDynamicEmitterDataBase()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} void* operator)",
    "insertText": "new(size_t Size)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void operator)",
    "insertText": "delete(void *RawMemory, size_t Size)"
  },
  {
    "label": "UpdateRenderThreadResourcesEmitter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRenderThreadResourcesEmitter(const FParticleSystemSceneProxy* InOwnerProxy)"
  },
  {
    "label": "ReleaseRenderThreadResources()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseRenderThreadResources(const FParticleSystemSceneProxy* InOwnerProxy)"
  },
  {
    "label": "GetDynamicMeshElementsEmitter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDynamicMeshElementsEmitter(const FParticleSystemSceneProxy* Proxy, const FSceneView* View, const FSceneViewFamily& ViewFamily, int32 ViewIndex, FMeshElementCollector& Collector)"
  },
  {
    "label": "GetMaterialRenderProxy()",
    "kind": "Method",
    "detail": "Function (} const FMaterialRenderProxy*)",
    "insertText": "GetMaterialRenderProxy()"
  },
  {
    "label": "GatherSimpleLights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherSimpleLights(const FParticleSystemSceneProxy* Proxy, const FSceneViewFamily& ViewFamily, FSimpleLightArray& OutParticleLights)"
  },
  {
    "label": "GetSource()",
    "kind": "Method",
    "detail": "Function (} const FDynamicEmitterReplayDataBase&)",
    "insertText": "GetSource()"
  },
  {
    "label": "GetMacroUVOverride()",
    "kind": "Method",
    "detail": "Function (const FMacroUVOverride&)",
    "insertText": "GetMacroUVOverride()"
  },
  {
    "label": "FDynamicSpriteEmitterReplayDataBase()",
    "kind": "Method",
    "detail": "Function (} TStatId StatID ; uint32 bSelected : 1 ; uint32 bValid : 1 ; int32 EmitterIndex ; } ; struct FDynamicSpriteEmitterReplayDataBase : public FDynamicEmitterReplayDataBase { UMaterialInterface* MaterialInterface ; struct FParticleRequiredModule* RequiredModule ; FVector3f NormalsSphereCenter ; FVector3f NormalsCylinderDirection ; float InvDeltaSeconds ; FVector3f LWCTile ; int32 MaxDrawCount ; int32 OrbitModuleOffset ; int32 DynamicParameterDataOffset ; int32 LightDataOffset ; float LightVolumetricScatteringIntensity ; int32 CameraPayloadOffset ; int32 SubUVDataOffset ; int32 SubImages_Horizontal ; int32 SubImages_Vertical ; bool bUseLocalSpace ; bool bLockAxis ; uint8 ScreenAlignment ; uint8 LockAxisFlag ; uint8 EmitterRenderMode ; uint8 EmitterNormalsMode ; FVector2f PivotOffset ; bool bUseVelocityForMotionBlur ; bool bRemoveHMDRoll ; float MinFacingCameraBlendDistance ; float MaxFacingCameraBlendDistance ;)",
    "insertText": "FDynamicSpriteEmitterReplayDataBase()"
  },
  {
    "label": "FDynamicSpriteEmitterDataBase()",
    "kind": "Method",
    "detail": "Function (} ; struct FDynamicSpriteEmitterDataBase : public FDynamicEmitterDataBase {)",
    "insertText": "FDynamicSpriteEmitterDataBase(const UParticleModuleRequired* RequiredModule) : FDynamicEmitterDataBase(RequiredModule), bUsesDynamicParameter( false)"
  },
  {
    "label": "FDynamicSpriteEmitterDataBase()",
    "kind": "Method",
    "detail": "Function (MaterialResource = nullptr ; } ~)",
    "insertText": "FDynamicSpriteEmitterDataBase()"
  },
  {
    "label": "GetDynamicVertexStride()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDynamicVertexStride(ERHIFeatureLevel::Type)"
  },
  {
    "label": "RenderDebug()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RenderDebug(const FParticleSystemSceneProxy* Proxy, FPrimitiveDrawInterface* PDI, const FSceneView* View, bool bCrosses)"
  },
  {
    "label": "DoBufferFill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoBufferFill(FAsyncBufferFillData& Me)"
  },
  {
    "label": "BuildViewFillData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildViewFillData(const FParticleSystemSceneProxy* Proxy, const FSceneView *InView, int32 InVertexCount, int32 InVertexSize, int32 InDynamicParameterVertexSize, FGlobalDynamicIndexBuffer& DynamicIndexBuffer, FGlobalDynamicVertexBuffer& DynamicVertexBuffer, FGlobalDynamicVertexBufferAllocation& DynamicVertexAllocation, FGlobalDynamicIndexBufferAllocation& DynamicIndexAllocation, FGlobalDynamicVertexBufferAllocation* DynamicParameterAllocation, FAsyncBufferFillData& Data)"
  },
  {
    "label": "FDynamicSpriteEmitterReplayData()",
    "kind": "Method",
    "detail": "Function (const FMaterialRenderProxy* MaterialResource ; uint32 bUsesDynamicParameter : 1 ; } ; struct FDynamicSpriteEmitterReplayData : public FDynamicSpriteEmitterReplayDataBase {)",
    "insertText": "FDynamicSpriteEmitterReplayData()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "FDynamicSpriteEmitterData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDynamicSpriteEmitterData : public FDynamicSpriteEmitterDataBase {)",
    "insertText": "FDynamicSpriteEmitterData(const UParticleModuleRequired* RequiredModule) : FDynamicSpriteEmitterDataBase(RequiredModule)"
  },
  {
    "label": "FDynamicSpriteEmitterData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDynamicSpriteEmitterData()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(bool bInSelected)"
  },
  {
    "label": "GetDynamicVertexStride()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDynamicVertexStride(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetDynamicParameterVertexStride()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetDynamicParameterVertexStride()"
  },
  {
    "label": "GetSourceData()",
    "kind": "Method",
    "detail": "Function (} const FDynamicSpriteEmitterReplayDataBase*)",
    "insertText": "GetSourceData()"
  },
  {
    "label": "FDynamicMeshEmitterData()",
    "kind": "Method",
    "detail": "Function (Ar<<SubUVInterpMethod ; Ar<<SubUVDataOffset ; Ar<<SubImages_Horizontal ; Ar<<SubImages_Vertical ; Ar<<bScaleUV ; Ar<<MeshRotationOffset ; Ar<<MeshMotionBlurOffset ; Ar<<MeshAlignment ; Ar<<bMeshRotationActive ; Ar<<LockedAxis ; } } ; struct FDynamicMeshEmitterData : public FDynamicSpriteEmitterDataBase {)",
    "insertText": "FDynamicMeshEmitterData(const UParticleModuleRequired* RequiredModule)"
  },
  {
    "label": "FDynamicMeshEmitterData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDynamicMeshEmitterData()"
  },
  {
    "label": "GetMeshLODIndexFromProxy()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMeshLODIndexFromProxy(const FParticleSystemSceneProxy *InOwnerProxy)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(bool bInSelected, const FParticleMeshEmitterInstance* InEmitterInstance, UStaticMesh* InStaticMesh, bool InUseStaticMeshLODs, float InLODSizeScale, ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetInstanceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstanceData(void* InstanceData, void* DynamicParameterData, void* PrevTransformBuffer, const FParticleSystemSceneProxy* Proxy, const FSceneView* View, uint32 InstanceFactor)"
  },
  {
    "label": "GetParticleTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetParticleTransform(const FBaseParticle& InParticle, const FParticleSystemSceneProxy* Proxy, const FSceneView* View, FMatrix& OutTransformMat)"
  },
  {
    "label": "GetParticlePrevTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetParticlePrevTransform(const FBaseParticle& InParticle, const FParticleSystemSceneProxy* Proxy, const FSceneView* View, FMatrix& OutTransformMat)"
  },
  {
    "label": "CalculateParticleTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateParticleTransform(const FMatrix& ProxyLocalToWorld, const FVector& ParticleLocation, float ParticleRotation, const FVector3f& ParticleVelocity, const FVector3f& ParticleSize, const FVector3f& ParticlePayloadInitialOrientation, const FVector3f& ParticlePayloadRotation, const FVector& ParticlePayloadCameraOffset, const FVector3f& ParticlePayloadOrbitOffset, const FVector& ViewOrigin, const FVector3f& ViewDirection, FMatrix& OutTransformMat)"
  },
  {
    "label": "FDynamicBeam2EmitterData()",
    "kind": "Method",
    "detail": "Function (Ar<<VertexCount ; Ar<<IndexCount ; Ar<<IndexStride ; Ar<<TrianglesPerSheet ; Ar<<UpVectorStepSize ; Ar<<BeamDataOffset ; Ar<<InterpolatedPointsOffset ; Ar<<NoiseRateOffset ; Ar<<NoiseDeltaTimeOffset ; Ar<<TargetNoisePointsOffset ; Ar<<NextNoisePointsOffset ; Ar<<TaperValuesOffset ; Ar<<NoiseDistanceScaleOffset ; Ar<<bLowFreqNoise_Enabled ; Ar<<bHighFreqNoise_Enabled ; Ar<<bSmoothNoise_Enabled ; Ar<<bUseSource ; Ar<<bUseTarget ; Ar<<bTargetNoise ; Ar<<Sheets ; Ar<<Frequency ; Ar<<NoiseTessellation ; Ar<<NoiseRangeScale ; Ar<<NoiseTangentStrength ; Ar<<NoiseSpeed ; Ar<<NoiseLockTime ; Ar<<NoiseLockRadius ; Ar<<NoiseTension ; Ar<<TextureTile ; Ar<<TextureTileDistance ; Ar<<TaperMethod ; Ar<<InterpolationPoints ; Ar<<bRenderGeometry ; Ar<<bRenderDirectLine ; Ar<<bRenderLines ; Ar<<bRenderTessellation ; } } ; struct FDynamicBeam2EmitterData : public FDynamicSpriteEmitterDataBase { const uint32 MaxBeams = 2* 1 0 2 4 ; const uint32 MaxInterpolationPoints = 2 5 0 ; const uint32 MaxNoiseFrequency = 2 5 0 ;)",
    "insertText": "FDynamicBeam2EmitterData(const UParticleModuleRequired* RequiredModule) : FDynamicSpriteEmitterDataBase(RequiredModule) , LastFramePreRendered(-1)"
  },
  {
    "label": "FDynamicBeam2EmitterData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDynamicBeam2EmitterData()"
  },
  {
    "label": "RenderDirectLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDirectLine(const FParticleSystemSceneProxy* Proxy, FPrimitiveDrawInterface* PDI,const FSceneView* View)"
  },
  {
    "label": "RenderLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderLines(const FParticleSystemSceneProxy* Proxy, FPrimitiveDrawInterface* PDI,const FSceneView* View)"
  },
  {
    "label": "FillIndexData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FillIndexData(struct FAsyncBufferFillData& Data)"
  },
  {
    "label": "FillVertexData_NoNoise()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FillVertexData_NoNoise(struct FAsyncBufferFillData& Data)"
  },
  {
    "label": "FillData_Noise()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FillData_Noise(struct FAsyncBufferFillData& Data)"
  },
  {
    "label": "FillData_InterpolatedNoise()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FillData_InterpolatedNoise(struct FAsyncBufferFillData& Data)"
  },
  {
    "label": "GetIndexAllocInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetIndexAllocInfo(int32& OutNumIndices, int32& OutStride)"
  },
  {
    "label": "FDynamicTrailsEmitterReplayData()",
    "kind": "Method",
    "detail": "Function (FDynamicBeam2EmitterReplayData Source ; int32 LastFramePreRendered ; } ; struct FDynamicTrailsEmitterReplayData : public FDynamicSpriteEmitterReplayDataBase { int32 PrimitiveCount ; int32 VertexCount ; int32 IndexCount ; int32 IndexStride ; int32 TrailDataOffset ; int32 MaxActiveParticleCount ; int32 TrailCount ; int32 Sheets ;)",
    "insertText": "FDynamicTrailsEmitterReplayData() : PrimitiveCount(0) , VertexCount(0) , IndexCount(0) , IndexStride(0) , TrailDataOffset(-1) , MaxActiveParticleCount(0) , TrailCount(1) , Sheets(1)"
  },
  {
    "label": "FDynamicRibbonEmitterReplayData()",
    "kind": "Method",
    "detail": "Function (Ar<<PrimitiveCount ; Ar<<VertexCount ; Ar<<IndexCount ; Ar<<IndexStride ; Ar<<TrailDataOffset ; Ar<<MaxActiveParticleCount ; Ar<<TrailCount ; Ar<<Sheets ; } } ; struct FDynamicRibbonEmitterReplayData : public FDynamicTrailsEmitterReplayData { int32 MaxTessellationBetweenParticles ;)",
    "insertText": "FDynamicRibbonEmitterReplayData() : FDynamicTrailsEmitterReplayData() , MaxTessellationBetweenParticles(0)"
  },
  {
    "label": "FDynamicTrailsEmitterData()",
    "kind": "Method",
    "detail": "Function (Ar<<MaxTessellationBetweenParticles ; } } ; struct FDynamicTrailsEmitterData : public FDynamicSpriteEmitterDataBase {)",
    "insertText": "FDynamicTrailsEmitterData(const UParticleModuleRequired* RequiredModule) : FDynamicSpriteEmitterDataBase(RequiredModule) , LastFramePreRendered(-1) , bClipSourceSegement(false) , bRenderGeometry(true) , bRenderParticles(false) , bRenderTangents(false) , bRenderTessellation(false) , bTextureTileDistance(false) , DistanceTessellationStepSize(12.5f) , TangentTessellationScalar(25.0f) , TextureTileDistance(0.0f)"
  },
  {
    "label": "FDynamicTrailsEmitterData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDynamicTrailsEmitterData()"
  },
  {
    "label": "FillVertexData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FillVertexData(struct FAsyncBufferFillData& Data)"
  },
  {
    "label": "FillVertexData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillVertexData(Me)"
  },
  {
    "label": "FDynamicRibbonEmitterData()",
    "kind": "Method",
    "detail": "Function (FDynamicTrailsEmitterReplayData* SourcePointer ; int32 LastFramePreRendered ; uint32 bClipSourceSegement : 1 ; uint32 bRenderGeometry : 1 ; uint32 bRenderParticles : 1 ; uint32 bRenderTangents : 1 ; uint32 bRenderTessellation : 1 ; uint32 bTextureTileDistance : 1 ; float DistanceTessellationStepSize ; float TangentTessellationScalar ; float TextureTileDistance ; } ; struct FDynamicRibbonEmitterData : public FDynamicTrailsEmitterData {)",
    "insertText": "FDynamicRibbonEmitterData(const UParticleModuleRequired* RequiredModule) : FDynamicTrailsEmitterData(RequiredModule)"
  },
  {
    "label": "FDynamicRibbonEmitterData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDynamicRibbonEmitterData()"
  },
  {
    "label": "FDynamicAnimTrailEmitterData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDynamicAnimTrailEmitterData()"
  },
  {
    "label": "FParticleDynamicData()",
    "kind": "Method",
    "detail": "Function (FDynamicTrailsEmitterReplayData Source ; } ; class FParticleDynamicData { public :)",
    "insertText": "FParticleDynamicData() : DynamicEmitterDataArray()"
  },
  {
    "label": "FParticleDynamicData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FParticleDynamicData()"
  },
  {
    "label": "ClearEmitterDataArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearEmitterDataArray()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (FDynamicEmitterDataBase* Data = DynamicEmitterDataArray [ Index ] ; delete Data ; } DynamicEmitterDataArray .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetMemoryFootprint()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetMemoryFootprint(void)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32 EmitterIndex ; TArray<FDynamicEmitterDataBase*,TInlineAllocator<1 2>> DynamicEmitterDataArray ; FVector SystemPositionForMacroUVs ; float SystemRadiusForMacroUVs ; # if WITH_PARTICLE_PERF_STATS FParticlePerfStatsContext PerfStatContext ; # endif } ; class FParticleSystemSceneProxy final : public FPrimitiveSceneProxy { public : SIZE_T)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "FParticleSystemSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FParticleSystemSceneProxy(UParticleSystemComponent* Component, FParticleDynamicData* InDynamicData, bool bCanBeOccluded)"
  },
  {
    "label": "FParticleSystemSceneProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FParticleSystemSceneProxy()"
  },
  {
    "label": "CanBeOccluded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeOccluded()"
  },
  {
    "label": "GetCustomOcclusionBounds()",
    "kind": "Method",
    "detail": "Function (} FBoxSphereBounds)",
    "insertText": "GetCustomOcclusionBounds()"
  },
  {
    "label": "GetDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDynamicMeshElements(const TArray<const FSceneView*>& Views, const FSceneViewFamily& ViewFamily, uint32 VisibilityMap, FMeshElementCollector& Collector)"
  },
  {
    "label": "GetViewRelevance()",
    "kind": "Method",
    "detail": "Function (FPrimitiveViewRelevance)",
    "insertText": "GetViewRelevance(const FSceneView* View)"
  },
  {
    "label": "OnTransformChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransformChanged(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "GatherSimpleLights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherSimpleLights(const FSceneViewFamily& ViewFamily, FSimpleLightArray& OutParticleLights)"
  },
  {
    "label": "CreateRenderThreadResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRenderThreadResources(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRenderThreadResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRenderThreadResources()"
  },
  {
    "label": "UpdateData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateData(FParticleDynamicData* NewDynamicData)"
  },
  {
    "label": "UpdateData_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateData_RenderThread(FParticleDynamicData* NewDynamicData)"
  },
  {
    "label": "GetDynamicData()",
    "kind": "Method",
    "detail": "Function (FParticleDynamicData*)",
    "insertText": "GetDynamicData()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetAllocatedSize(void)"
  },
  {
    "label": "AdditionalSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AdditionalSize(uint32)FPrimitiveSceneProxy::GetAllocatedSize()"
  },
  {
    "label": "DetermineLODDistance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DetermineLODDistance(const FSceneView* View, int32 FrameNumber)"
  },
  {
    "label": "UpdateWorldSpacePrimitiveUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWorldSpacePrimitiveUniformBuffer(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "GetObjectPositionAndScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectPositionAndScale(const FSceneView& View, FVector2D& ObjectNDCPosition, FVector2D& ObjectMacroUVScales)"
  },
  {
    "label": "GetWorldToLocal()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetWorldToLocal()"
  },
  {
    "label": "GetCastShadow()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetCastShadow()"
  },
  {
    "label": "GetVisualizeLODIndex()",
    "kind": "Method",
    "detail": "Function (VisualizeLODIndex = InVisualizeLODIndex ; } int32)",
    "insertText": "GetVisualizeLODIndex()"
  },
  {
    "label": "GetDeselectedWireframeMatInst()",
    "kind": "Method",
    "detail": "Function (} const FColoredMaterialRenderProxy*)",
    "insertText": "GetDeselectedWireframeMatInst()"
  },
  {
    "label": "GetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (TArray<int32> MeshEmitterLODIndices ; ERHIFeatureLevel::Type)",
    "insertText": "GetFeatureLevel()"
  },
  {
    "label": "ReleaseRenderThreadResourcesForEmitterData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRenderThreadResourcesForEmitterData()"
  },
  {
    "label": "ResetParticleMemoryMaxValues()",
    "kind": "Method",
    "detail": "Function (AActor* Owner ; # if STATS double LastStatCaptureTime ; uint8 bCountedThisFrame : 1 ; # endif uint8 bCastShadow : 1 ; uint8 bManagingSignificance : 1 ; private : uint8 bCanBeOccluded : 1 ; uint8 bHasCustomOcclusionBounds : 1 ; protected : TEnumAsByte<ERHIFeatureLevel::Type> FeatureLevel ; FMaterialRelevance MaterialRelevance ; FParticleDynamicData* DynamicData ; FParticleDynamicData* LastDynamicData ; FColoredMaterialRenderProxy* DeselectedWireframeMaterialInstance ; int32 LODMethod ; float PendingLODDistance ; int32 VisualizeLODIndex ; int32 LastFramePreRendered ; TUniformBuffer<FPrimitiveUniformShaderParameters> WorldSpacePrimitiveUniformBuffer ; uint32 WorldSpaceUBHash = 0 ; UE::FMutex WorldSpacePrimitiveUniformBufferMutex ; TIndirectArray<FMeshBatch,TInlineAllocator<4>> MeshBatchPool ; int32 FirstFreeMeshBatch ; private : FBoxSphereBounds OcclusionBounds ; protected : TArray<FDynamicEmitterDataBase*> DynamicDataForThisFrame ; struct FDynamicSpriteEmitterDataBase ; # if WITH_PARTICLE_PERF_STATS public : FParticlePerfStatsContext PerfStatContext ; # endif } ; # if STATS struct FParticleMemoryStatManager { public : uint32 DynamicPSysCompCount ; uint32 DynamicPSysCompMem ; uint32 DynamicEmitterCount ; uint32 DynamicEmitterMem ; uint32 TotalGTParticleData ; uint32 TotalRTParticleData ; uint32 DynamicSpriteCount ; uint32 DynamicSubUVCount ; uint32 DynamicMeshCount ; uint32 DynamicBeamCount ; uint32 DynamicRibbonCount ; uint32 DynamicAnimTrailCount ; uint32 DynamicSpriteGTMem ; uint32 DynamicSubUVGTMem ; uint32 DynamicMeshGTMem ; uint32 DynamicBeamGTMem ; uint32 DynamicRibbonGTMem ; uint32 DynamicAnimTrailGTMem ; uint32 DynamicUntrackedGTMem ; uint32 DynamicPSysCompCount_MAX ; uint32 DynamicPSysCompMem_MAX ; uint32 DynamicEmitterCount_MAX ; uint32 DynamicEmitterMem_MAX ; uint32 DynamicEmitterGTMem_Waste_MAX ; uint32 DynamicEmitterGTMem_Largest_MAX ; uint32 TotalGTParticleData_MAX ; uint32 TotalRTParticleData_MAX ; uint32 LargestRTParticleData_MAX ; uint32 DynamicSpriteCount_MAX ; uint32 DynamicSubUVCount_MAX ; uint32 DynamicMeshCount_MAX ; uint32 DynamicBeamCount_MAX ; uint32 DynamicRibbonCount_MAX ; uint32 DynamicAnimTrailCount_MAX ; uint32 DynamicSpriteGTMem_MAX ; uint32 DynamicSubUVGTMem_MAX ; uint32 DynamicMeshGTMem_MAX ; uint32 DynamicBeamGTMem_MAX ; uint32 DynamicRibbonGTMem_MAX ; uint32 DynamicAnimTrailGTMem_MAX ; uint32 DynamicUntrackedGTMem_MAX ; void)",
    "insertText": "ResetParticleMemoryMaxValues()"
  },
  {
    "label": "DumpParticleMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpParticleMemoryStats(FOutputDevice& Ar)"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStats()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (} ; # endif class FNullDynamicParameterVertexBuffer : public FVertexBuffer { public : void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "CreateInfo()",
    "kind": "Method",
    "detail": "Function (FRHIResourceCreateInfo)",
    "insertText": "CreateInfo(TEXT(\"FNullDynamicParameterVertexBuffer\"))"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (VertexBufferRHI = RHICmdList .)",
    "insertText": "CreateBuffer(sizeof(FParticleVertexDynamicParameter), BUF_Static | BUF_VertexBuffer, 0, ERHIAccess::VertexOrIndexBuffer, CreateInfo)"
  },
  {
    "label": "Vertices()",
    "kind": "Method",
    "detail": "Function (FParticleVertexDynamicParameter*)",
    "insertText": "Vertices(FParticleVertexDynamicParameter*)RHICmdList.LockBuffer(VertexBufferRHI, 0, sizeof(FParticleVertexDynamicParameter), RLM_WriteOnly)"
  },
  {
    "label": "UnlockBuffer()",
    "kind": "Method",
    "detail": "Function (Vertices [ 0 ] . DynamicValue [ 0 ] = Vertices [ 0 ] . DynamicValue [ 1 ] = Vertices [ 0 ] . DynamicValue [ 2 ] = Vertices [ 0 ] . DynamicValue [ 3 ] = 1 . 0 f ; RHICmdList .)",
    "insertText": "UnlockBuffer(VertexBufferRHI)"
  },
  {
    "label": "GetParticleBaseSize()",
    "kind": "Method",
    "detail": "Function (} } ; TGlobalResource<FNullDynamicParameterVertexBuffer> GNullDynamicParameterVertexBuffer ; FVector3f)",
    "insertText": "GetParticleBaseSize(const FBaseParticle& Particle, bool bKeepFlipScale = false)"
  },
  {
    "label": "GetParticleSizeWithUVFlipInSign()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "GetParticleSizeWithUVFlipInSign(const FBaseParticle& Particle, const FVector2D& ScaledSize)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Low,Medium,High,Critical,Num)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Auto,Complete,DisableTick,DisableTickAndKill)",
    "insertText": "UMETA(Hidden), Num UMETA(Hidden)"
  },
  {
    "label": "AddTemplate()",
    "kind": "Method",
    "detail": "Function (class FParticleResetContext { public : TArray<class UParticleSystem*,TInlineAllocator<3 2>> SystemsToReset ; void)",
    "insertText": "AddTemplate(class UParticleSystem* Template)"
  },
  {
    "label": "AddTemplate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTemplate(class UParticleModule* Module)"
  },
  {
    "label": "AddTemplate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTemplate(class UParticleEmitter* Emitter)"
  },
  {
    "label": "FParticleResetContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FParticleResetContext()"
  },
  {
    "label": "FParticleSystemCustomVersion()",
    "kind": "Method",
    "detail": "Function (} ; struct FParticleSystemCustomVersion { enum Type { BeforeCustomVersionWasAdded = 0,SkipCookingEmittersBasedOnDetailMode,FixLegacySpawningBugs,AddEpicDetailMode,VersionPlusOne,LatestVersion = VersionPlusOne - 1 } ; const FGuid GUID ; private :)",
    "insertText": "FParticleSystemCustomVersion()"
  }
]