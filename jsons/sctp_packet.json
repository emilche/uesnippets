[
  {
    "label": "CommonHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CommonHeader"
  },
  {
    "label": "SctpPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SctpPacket"
  },
  {
    "label": "ChunkDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChunkDescriptor"
  },
  {
    "label": "Builder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Builder"
  },
  {
    "label": "ChunkDescriptor()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PACKET_SCTP_PACKET_H_ # define NET_DCSCTP_PACKET_SCTP_PACKET_H_ # include<stddef . h> # include<cstdint> # include<functional> # include<memory> # include<utility> # include<vector> # include \" api / array_view . h \" # include \" net / dcsctp / common / internal_types . h \" # include \" net / dcsctp / packet / chunk / chunk . h \" # include \" net / dcsctp / public / dcsctp_options . h \" namespace dcsctp { struct CommonHeader { uint16_t source_port ; uint16_t destination_port ; VerificationTag verification_tag ; uint32_t checksum ; } ; class SctpPacket { public : size_t kHeaderSize = 1 2 ; struct ChunkDescriptor {)",
    "insertText": "ChunkDescriptor(uint8_t type, uint8_t flags, rtc::ArrayView<const uint8_t> data) : type(type), flags(flags), data(data)"
  },
  {
    "label": "SctpPacket()",
    "kind": "Method",
    "detail": "Function (} uint8_t type ; uint8_t flags ; rtc::ArrayView<const uint8_t> data ; } ;)",
    "insertText": "SctpPacket(SctpPacket&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SctpPacket&)",
    "insertText": "operator(SctpPacket&& other)"
  },
  {
    "label": "SctpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SctpPacket(const SctpPacket&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SctpPacket&)",
    "insertText": "operator(const SctpPacket&)"
  },
  {
    "label": "Builder()",
    "kind": "Method",
    "detail": "Function (class Builder { public :)",
    "insertText": "Builder(VerificationTag verification_tag, const DcSctpOptions& options)"
  },
  {
    "label": "Builder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Builder(Builder&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Builder&)",
    "insertText": "operator(Builder&& other)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Builder&)",
    "insertText": "Add(const Chunk& chunk)"
  },
  {
    "label": "bytes_remaining()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "bytes_remaining()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "empty()"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (} std::vector<uint8_t>)",
    "insertText": "Build()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (private : VerificationTag verification_tag_ ; uint16_t source_port_ ; uint16_t dest_port_ ; size_t max_packet_size_ ; std::vector<uint8_t> out_ ; } ; absl::optional<SctpPacket>)",
    "insertText": "Parse(rtc::ArrayView<const uint8_t> data, bool disable_checksum_verification = false)"
  },
  {
    "label": "common_header()",
    "kind": "Method",
    "detail": "Function (const CommonHeader&)",
    "insertText": "common_header()"
  }
]