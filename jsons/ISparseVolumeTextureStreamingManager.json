[
  {
    "label": "UStreamableSparseVolumeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStreamableSparseVolumeTexture"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FStreamingDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingDebugInfo"
  },
  {
    "label": "FSVT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSVT"
  },
  {
    "label": "FInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstance"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IStreamingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStreamingManager"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" class UStreamableSparseVolumeTexture ; class FRDGBuilder ; namespace UE { namespace SVT { struct FStreamingDebugInfo { struct FSVT { struct FInstance { uint32 Key ; float Frame ; float FrameRate ; float RequestedBandwidth ; float AllocatedBandwidth ; float RequestedMip ; float InBudgetMip ; } ; const TCHAR* AssetName ; const float* FrameResidencyPercentages ; const float* FrameStreamingPercentages ; const FInstance* Instances ; int32 NumFrames ; int32 NumInstances ; } ; const FSVT* SVTs ; int32 NumSVTs ; float RequestedBandwidth ; float BandwidthLimit ; float BandwidthScale ; } ; enum class EStreamingRequestFlags : uint8 { None = 0,Blocking = 1 u<<0 u,HasFrameRate = 1 u<<1 u,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EStreamingRequestFlags)"
  },
  {
    "label": "Add_GameThread()",
    "kind": "Method",
    "detail": "Function (class IStreamingManager { public : void)",
    "insertText": "Add_GameThread(UStreamableSparseVolumeTexture* SparseVolumeTexture)"
  },
  {
    "label": "Remove_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove_GameThread(UStreamableSparseVolumeTexture* SparseVolumeTexture)"
  },
  {
    "label": "Request_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Request_GameThread(UStreamableSparseVolumeTexture* SparseVolumeTexture, uint32 StreamingInstanceKey, float FrameRate, float FrameIndex, float MipLevel, EStreamingRequestFlags Flags)"
  },
  {
    "label": "Update_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_GameThread()"
  },
  {
    "label": "Request()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Request(UStreamableSparseVolumeTexture* SparseVolumeTexture, uint32 StreamingInstanceKey, float FrameRate, float FrameIndex, float MipLevel, EStreamingRequestFlags Flags)"
  },
  {
    "label": "BeginAsyncUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginAsyncUpdate(FRDGBuilder& GraphBuilder, bool bUseAsyncThread = true)"
  },
  {
    "label": "EndAsyncUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndAsyncUpdate(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetStreamingDebugInfo()",
    "kind": "Method",
    "detail": "Function (const FStreamingDebugInfo*)",
    "insertText": "GetStreamingDebugInfo(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "IStreamingManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IStreamingManager()"
  },
  {
    "label": "GetStreamingManager()",
    "kind": "Method",
    "detail": "Function (} ; IStreamingManager&)",
    "insertText": "GetStreamingManager()"
  }
]