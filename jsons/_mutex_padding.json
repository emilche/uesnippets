[
  {
    "label": "padded_mutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "padded_mutex"
  },
  {
    "label": "scoped_lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scoped_lock"
  },
  {
    "label": "my_pad()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_mutex_padding_H # define __TBB_mutex_padding_H namespace tbb { namespace interface7 { namespace internal { const size_t cache_line_size = 6 4 ; template<Mutex,bool is_rw> class padded_mutex ; template<Mutex> class padded_mutex<Mutex,false> : tbb::internal::mutex_copy_deprecated_and_disabled { typedef long pad_type ; pad_type)",
    "insertText": "my_pad((sizeof(Mutex)+cache_line_size-1)/cache_line_size+1)*cache_line_size/sizeof(pad_type)"
  },
  {
    "label": "impl()",
    "kind": "Method",
    "detail": "Function (Mutex*)",
    "insertText": "impl()"
  },
  {
    "label": "padded_mutex()",
    "kind": "Method",
    "detail": "Function (} public : const bool is_rw_mutex = Mutex::is_rw_mutex ; const bool is_recursive_mutex = Mutex::is_recursive_mutex ; const bool is_fair_mutex = Mutex::is_fair_mutex ;)",
    "insertText": "padded_mutex()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(impl()) Mutex()"
  },
  {
    "label": "impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "impl()->~Mutex()"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (} class scoped_lock : tbb::internal::no_copy { Mutex::scoped_lock my_scoped_lock ; public :)",
    "insertText": "scoped_lock() : my_scoped_lock()"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "scoped_lock(padded_mutex& m ) : my_scoped_lock(*m.impl())"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "scoped_lock()"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "acquire(padded_mutex& m)"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (my_scoped_lock .)",
    "insertText": "acquire(*m.impl())"
  },
  {
    "label": "try_acquire()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "try_acquire(padded_mutex& m)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "release()"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "scoped_lock(padded_mutex& m, bool write = true ) : my_scoped_lock(*m.impl(),write)"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "acquire(padded_mutex& m, bool write = true)"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (my_scoped_lock .)",
    "insertText": "acquire(*m.impl(),write)"
  },
  {
    "label": "try_acquire()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "try_acquire(padded_mutex& m, bool write = true)"
  },
  {
    "label": "upgrade_to_writer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "upgrade_to_writer()"
  },
  {
    "label": "downgrade_to_reader()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "downgrade_to_reader()"
  }
]