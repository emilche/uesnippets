[
  {
    "label": "FAnimNodeAlphaOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNodeAlphaOptions"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / AnimInstanceProxy . h \" # include \" Animation / AnimNodeBase . h \" # include \" Animation / InputScaleBias . h \" struct FAnimNodeAlphaOptions { template<AnimNodeType> bool)",
    "insertText": "Update(AnimNodeType& InAnimNode, const FAnimationUpdateContext& InContext)"
  },
  {
    "label": "ApplyTo()",
    "kind": "Method",
    "detail": "Function (break ; case EAnimAlphaInputType::Bool : InAnimNode . ActualAlpha = InAnimNode . AlphaBoolBlend .)",
    "insertText": "ApplyTo(InAnimNode.bAlphaBoolEnabled, InContext.GetDeltaTime())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; case EAnimAlphaInputType::Curve :)",
    "insertText": "if(UAnimInstance* AnimInstance = Cast<UAnimInstance>(InContext.AnimInstanceProxy->GetAnimInstanceObject()))"
  },
  {
    "label": "ApplyTo()",
    "kind": "Method",
    "detail": "Function (InAnimNode . ActualAlpha = InAnimNode . AlphaScaleBiasClamp .)",
    "insertText": "ApplyTo(AnimInstance->GetCurveValue(InAnimNode.AlphaCurveName), InContext.GetDeltaTime())"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} break ; } ; InAnimNode . ActualAlpha = FMath::Clamp<)",
    "insertText": "float(InAnimNode.ActualAlpha, 0.f, 1.f)"
  }
]