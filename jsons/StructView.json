[
  {
    "label": "FStructView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructView"
  },
  {
    "label": "TStructView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructView"
  },
  {
    "label": "FConstStructView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstStructView"
  },
  {
    "label": "TConstStructView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TConstStructView"
  },
  {
    "label": "FStructView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" StructUtils / InstancedStruct . h \" # include \" StructUtils / SharedStruct . h \" # include \" StructUtils . h \" struct FStructView { public :)",
    "insertText": "FStructView()"
  },
  {
    "label": "FStructView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStructView(const UScriptStruct* InScriptStruct, uint8* InStructMemory = nullptr) : ScriptStruct(InScriptStruct) , StructMemory(InStructMemory)"
  },
  {
    "label": "FStructView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStructView(FInstancedStruct& InstancedStruct) : FStructView(InstancedStruct.GetScriptStruct(), InstancedStruct.GetMutableMemory())"
  },
  {
    "label": "FStructView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStructView(const FSharedStruct& SharedStruct) : FStructView(SharedStruct.GetScriptStruct(), SharedStruct.GetMemory())"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} template<T> FStructView)",
    "insertText": "Make(T& InStruct)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (UE::StructUtils::CheckStructType<)",
    "insertText": "T()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "Get()"
  },
  {
    "label": "GetPtr()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "GetPtr()"
  },
  {
    "label": "GetScriptStruct()",
    "kind": "Method",
    "detail": "Function (} const UScriptStruct*)",
    "insertText": "GetScriptStruct()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (StructMemory = nullptr ; ScriptStruct = nullptr ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherType> bool)",
    "insertText": "operator(const OtherType& Other)"
  },
  {
    "label": "TStructView()",
    "kind": "Method",
    "detail": "Function (} protected : const UScriptStruct* ScriptStruct = nullptr ; uint8* StructMemory = nullptr ; } ; template<BaseStructT> struct TStructView : FStructView { public :)",
    "insertText": "TStructView()"
  },
  {
    "label": "TStructView()",
    "kind": "Method",
    "detail": "Function (template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TStructView(BaseStructT& InStruct) : FStructView(TBaseStructure<BaseStructT>::Get(), reinterpret_cast<uint8*>(&InStruct))"
  },
  {
    "label": "TStructView()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TStructView(uint8* InStructMemory = nullptr) : FStructView(T::StaticStruct(), InStructMemory)"
  },
  {
    "label": "TStructView()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TStructView(TInstancedStruct<T>& InstancedStruct) : FStructView(InstancedStruct.GetScriptStruct(), InstancedStruct.GetMutableMemory())"
  },
  {
    "label": "TStructView()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TStructView(const TSharedStruct<T>& SharedStruct) : FStructView(SharedStruct.GetScriptStruct(), SharedStruct.GetMemory())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>> bool)",
    "insertText": "operator(const TStructView<T>& Other)"
  },
  {
    "label": "FConstStructView()",
    "kind": "Method",
    "detail": "Function (} } ; struct FConstStructView { public :)",
    "insertText": "FConstStructView()"
  },
  {
    "label": "FConstStructView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConstStructView(const UScriptStruct* InScriptStruct, const uint8* InStructMemory = nullptr) : ScriptStruct(InScriptStruct) , StructMemory(InStructMemory)"
  },
  {
    "label": "FConstStructView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstStructView(const FInstancedStruct& InstancedStruct) : FConstStructView(InstancedStruct.GetScriptStruct(), InstancedStruct.GetMemory())"
  },
  {
    "label": "FConstStructView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstStructView(const FSharedStruct& SharedStruct) : FConstStructView(SharedStruct.GetScriptStruct(), SharedStruct.GetMemory())"
  },
  {
    "label": "FConstStructView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstStructView(const FConstSharedStruct& SharedStruct) : FConstStructView(SharedStruct.GetScriptStruct(), SharedStruct.GetMemory())"
  },
  {
    "label": "FConstStructView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstStructView(const FStructView StructView) : FConstStructView(StructView.GetScriptStruct(), StructView.GetMemory())"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} template<T> FConstStructView)",
    "insertText": "Make(const T& Struct)"
  },
  {
    "label": "SetStructData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStructData(const UScriptStruct* InScriptStruct, const uint8* InStructMemory)"
  },
  {
    "label": "TConstStructView()",
    "kind": "Method",
    "detail": "Function (ScriptStruct = InScriptStruct ; StructMemory = InStructMemory ; } protected : const UScriptStruct* ScriptStruct = nullptr ; const uint8* StructMemory = nullptr ; } ; template<BaseStructT> struct TConstStructView : FConstStructView {)",
    "insertText": "TConstStructView()"
  },
  {
    "label": "TConstStructView()",
    "kind": "Method",
    "detail": "Function (template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TConstStructView(const BaseStructT& InStruct) : FConstStructView(TBaseStructure<T>::Get(), reinterpret_cast<const uint8*>(&InStruct))"
  },
  {
    "label": "TConstStructView()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TConstStructView(const uint8* InStructMemory = nullptr) : FConstStructView(T::StaticStruct(), InStructMemory)"
  },
  {
    "label": "TConstStructView()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TConstStructView(const TInstancedStruct<T>& InstancedStruct) : FConstStructView(InstancedStruct.GetScriptStruct(), InstancedStruct.GetMemory())"
  },
  {
    "label": "TConstStructView()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TConstStructView(const TSharedStruct<T>& SharedStruct) : FConstStructView(SharedStruct.GetScriptStruct(), SharedStruct.GetMemory())"
  },
  {
    "label": "TConstStructView()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TConstStructView(const TConstSharedStruct<T>& SharedStruct) : FConstStructView(SharedStruct.GetScriptStruct(), SharedStruct.GetMemory())"
  },
  {
    "label": "TConstStructView()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TConstStructView(const TStructView<T> StructView) : FConstStructView(StructView.GetScriptStruct(), StructView.GetMemory())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>> bool)",
    "insertText": "operator(const TConstStructView<T>& Other)"
  }
]