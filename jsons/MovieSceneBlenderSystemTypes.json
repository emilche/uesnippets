[
  {
    "label": "UMovieSceneBlenderSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneBlenderSystem"
  },
  {
    "label": "UMovieSceneEntitySystemLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystemLinker"
  },
  {
    "label": "FMovieSceneBlenderSystemID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneBlenderSystemID"
  },
  {
    "label": "FMovieSceneBlendChannelID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneBlendChannelID"
  },
  {
    "label": "FMovieSceneBlenderSystemID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Math / NumericLimits . h \" # include \" Templates / Casts . h \" # include \" Templates / SubclassOf . h \" # include \" Templates / TypeHash . h \" # include \" EntitySystem / MovieSceneComponentDebug . h \" class UMovieSceneBlenderSystem ; class UMovieSceneEntitySystemLinker ; struct FMovieSceneBlenderSystemID { FMovieSceneBlenderSystemID Invalid ;)",
    "insertText": "FMovieSceneBlenderSystemID() : Value(TNumericLimits<uint8>::Max())"
  },
  {
    "label": "FMovieSceneBlenderSystemID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneBlenderSystemID(uint8 InValue) : Value(InValue)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FMovieSceneBlenderSystemID A, FMovieSceneBlenderSystemID B)"
  },
  {
    "label": "FMovieSceneBlendChannelID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneBlendChannelID() : ChannelID(INVALID_BLEND_CHANNEL)"
  },
  {
    "label": "FMovieSceneBlendChannelID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneBlendChannelID(FMovieSceneBlenderSystemID InSystemID, uint16 InChannelID) : SystemID(InSystemID), ChannelID(InChannelID)"
  },
  {
    "label": "FindSystem()",
    "kind": "Method",
    "detail": "Function (UMovieSceneBlenderSystem*)",
    "insertText": "FindSystem(const UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMovieSceneBlendChannelID A, const FMovieSceneBlendChannelID B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FMovieSceneBlendChannelID A)"
  }
]