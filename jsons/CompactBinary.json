[
  {
    "label": "TStringBuilderBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStringBuilderBase"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FCbArrayView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbArrayView"
  },
  {
    "label": "FCbField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbField"
  },
  {
    "label": "FCbFieldIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldIterator"
  },
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbFieldViewIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldViewIterator"
  },
  {
    "label": "FCbObjectId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObjectId"
  },
  {
    "label": "FCbObjectView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObjectView"
  },
  {
    "label": "FCbValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbValue"
  },
  {
    "label": "FIoHashBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoHashBuilder"
  },
  {
    "label": "FDateTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDateTime"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FTimespan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimespan"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCbFieldType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldType"
  },
  {
    "label": "FCbIteratorSentinel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbIteratorSentinel"
  },
  {
    "label": "TCbFieldIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCbFieldIterator"
  },
  {
    "label": "FCbCustomById",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCbCustomById"
  },
  {
    "label": "FCbCustomByName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCbCustomByName"
  },
  {
    "label": "FIntegerParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIntegerParams"
  },
  {
    "label": "TCbBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCbBuffer"
  },
  {
    "label": "TCbBufferFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCbBufferFactory"
  },
  {
    "label": "FCbArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbArray"
  },
  {
    "label": "FCbObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObject"
  },
  {
    "label": "FUniqueBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" # include \" IO / IoHash . h \" # include \" Memory / CompositeBuffer . h \" # include \" Memory / MemoryFwd . h \" # include \" Memory / MemoryView . h \" # include \" Memory / SharedBuffer . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" String / BytesToHex . h \" # include \" Templates / Function . h \" # include \" Templates / RemoveReference . h \" # include \" Templates / UnrealTemplate . h \" # include<type_traits> template<CharType> class TStringBuilderBase ; class FArchive ; class FCbArrayView ; class FCbField ; class FCbFieldIterator ; class FCbFieldView ; class FCbFieldViewIterator ; class FCbObjectId ; class FCbObjectView ; class FCbValue ; class FIoHashBuilder ; struct FDateTime ; struct FGuid ; struct FTimespan ; template<FuncType> class TFunctionRef ; using FCbBufferAllocator = TFunctionRef<)",
    "insertText": "FUniqueBuffer(uint64 Size)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class ECbFieldType : uint8 { None = 0 x00,Null = 0 x01,Object = 0 x02,UniformObject = 0 x03,Array = 0 x04,UniformArray = 0 x05,Binary = 0 x06,String = 0 x07,IntegerPositive = 0 x08,IntegerNegative = 0 x09,Float32 = 0 x0a,Float64 = 0 x0b,BoolFalse = 0 x0c,BoolTrue = 0 x0d,ObjectAttachment = 0 x0e,BinaryAttachment = 0 x0f,Hash = 0 x10,Uuid = 0 x11,DateTime = 0 x12,TimeSpan = 0 x13,ObjectId = 0 x14,CustomById = 0 x1e,CustomByName = 0 x1f,Reserved = 0 x20,HasFieldType = 0 x40,HasFieldName = 0 x80,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECbFieldType)"
  },
  {
    "label": "ECbFieldType()",
    "kind": "Method",
    "detail": "Function (class FCbFieldType { ECbFieldType SerializedTypeMask =)",
    "insertText": "ECbFieldType(0b1001'1111)"
  },
  {
    "label": "ECbFieldType()",
    "kind": "Method",
    "detail": "Function (ECbFieldType TypeMask =)",
    "insertText": "ECbFieldType(0b0001'1111)"
  },
  {
    "label": "ECbFieldType()",
    "kind": "Method",
    "detail": "Function (ECbFieldType ObjectMask =)",
    "insertText": "ECbFieldType(0b0001'1110)"
  },
  {
    "label": "ECbFieldType()",
    "kind": "Method",
    "detail": "Function (ECbFieldType ObjectBase =)",
    "insertText": "ECbFieldType(0b0000'0010)"
  },
  {
    "label": "ECbFieldType()",
    "kind": "Method",
    "detail": "Function (ECbFieldType ArrayBase =)",
    "insertText": "ECbFieldType(0b0000'0100)"
  },
  {
    "label": "ECbFieldType()",
    "kind": "Method",
    "detail": "Function (ECbFieldType IntegerBase =)",
    "insertText": "ECbFieldType(0b0000'1000)"
  },
  {
    "label": "ECbFieldType()",
    "kind": "Method",
    "detail": "Function (ECbFieldType FloatMask =)",
    "insertText": "ECbFieldType(0b0001'1100)"
  },
  {
    "label": "ECbFieldType()",
    "kind": "Method",
    "detail": "Function (ECbFieldType BoolBase =)",
    "insertText": "ECbFieldType(0b0000'1100)"
  },
  {
    "label": "ECbFieldType()",
    "kind": "Method",
    "detail": "Function (ECbFieldType AttachmentBase =)",
    "insertText": "ECbFieldType(0b0000'1110)"
  },
  {
    "label": "StaticAssertTypeConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StaticAssertTypeConstants()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (public : ECbFieldType)",
    "insertText": "GetType(ECbFieldType Type)"
  },
  {
    "label": "HasFieldName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasFieldName(ECbFieldType Type)"
  },
  {
    "label": "IsNone()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNone(ECbFieldType Type)"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNull(ECbFieldType Type)"
  },
  {
    "label": "IsObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsObject(ECbFieldType Type)"
  },
  {
    "label": "IsArray()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsArray(ECbFieldType Type)"
  },
  {
    "label": "IsBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBinary(ECbFieldType Type)"
  },
  {
    "label": "IsString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsString(ECbFieldType Type)"
  },
  {
    "label": "IsInteger()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInteger(ECbFieldType Type)"
  },
  {
    "label": "IsFloat()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFloat(ECbFieldType Type)"
  },
  {
    "label": "IsBool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBool(ECbFieldType Type)"
  },
  {
    "label": "IsObjectAttachment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsObjectAttachment(ECbFieldType Type)"
  },
  {
    "label": "IsBinaryAttachment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBinaryAttachment(ECbFieldType Type)"
  },
  {
    "label": "IsAttachment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAttachment(ECbFieldType Type)"
  },
  {
    "label": "IsHash()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHash(ECbFieldType Type)"
  },
  {
    "label": "IsUuid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUuid(ECbFieldType Type)"
  },
  {
    "label": "IsDateTime()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDateTime(ECbFieldType Type)"
  },
  {
    "label": "IsTimeSpan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTimeSpan(ECbFieldType Type)"
  },
  {
    "label": "IsObjectId()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsObjectId(ECbFieldType Type)"
  },
  {
    "label": "IsCustomById()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCustomById(ECbFieldType Type)"
  },
  {
    "label": "IsCustomByName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCustomByName(ECbFieldType Type)"
  },
  {
    "label": "HasFields()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasFields(ECbFieldType Type)"
  },
  {
    "label": "HasUniformFields()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasUniformFields(ECbFieldType Type)"
  },
  {
    "label": "MayContainAttachments()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MayContainAttachments(ECbFieldType Type)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; using FCbFieldVisitor = TFunctionRef<)",
    "insertText": "void(FCbFieldView)"
  },
  {
    "label": "TCbFieldIterator()",
    "kind": "Method",
    "detail": "Function (class FCbIteratorSentinel { } ; template<FieldType> class TCbFieldIterator : public FieldType { public :)",
    "insertText": "TCbFieldIterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TCbFieldIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TCbFieldIterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "It()",
    "kind": "Method",
    "detail": "Function (TCbFieldIterator)",
    "insertText": "It(*this)"
  },
  {
    "label": "GetRangeSize()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetRangeSize()"
  },
  {
    "label": "GetRangeHash()",
    "kind": "Method",
    "detail": "Function (FIoHash)",
    "insertText": "GetRangeHash()"
  },
  {
    "label": "AppendRangeHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendRangeHash(FIoHashBuilder& Builder)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (using FieldType::Equals ; template<OtherFieldType> bool)",
    "insertText": "Equals(const TCbFieldIterator<OtherFieldType>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherFieldType> bool)",
    "insertText": "operator(const TCbFieldIterator<OtherFieldType>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FCbIteratorSentinel&)"
  },
  {
    "label": "CopyRangeTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyRangeTo(FMutableMemoryView Buffer)"
  },
  {
    "label": "CopyRangeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyRangeTo(FArchive& Ar)"
  },
  {
    "label": "IterateRangeAttachments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateRangeAttachments(FCbFieldVisitor Visitor)"
  },
  {
    "label": "TryGetRangeView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetRangeView(FMemoryView& OutView)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FMemoryView View ;)",
    "insertText": "if(FieldType::TryGetView(View))"
  },
  {
    "label": "MakeMemoryView()",
    "kind": "Method",
    "detail": "Function (OutView =)",
    "insertText": "MakeMemoryView(View.GetData(), FieldsEnd)"
  },
  {
    "label": "TCbFieldIterator()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "TCbFieldIterator(FieldType InField) : FieldType(MoveTemp(InField)) , FieldsEnd(FieldType::GetValueEnd())"
  },
  {
    "label": "TCbFieldIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TCbFieldIterator(FieldType&& InField, const void* InFieldsEnd) : FieldType(MoveTemp(InField)) , FieldsEnd(InFieldsEnd)"
  },
  {
    "label": "GetFieldsEnd()",
    "kind": "Method",
    "detail": "Function (} template<OtherFieldType> const void*)",
    "insertText": "GetFieldsEnd(const TCbFieldIterator<OtherFieldType>& It)"
  },
  {
    "label": "FCbObjectId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCbObjectId(const ByteArray& ObjectId)"
  },
  {
    "label": "FCbObjectId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCbObjectId(FMemoryView ObjectId)"
  },
  {
    "label": "GetBytes()",
    "kind": "Method",
    "detail": "Function (const ByteArray&)",
    "insertText": "GetBytes()"
  },
  {
    "label": "NewObjectId()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FCbObjectId)",
    "insertText": "NewObjectId()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FCbObjectId& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FCbObjectId& Id)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, const FCbObjectId& Id)"
  },
  {
    "label": "BytesToHexLower()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "BytesToHexLower(Id.GetBytes(), Builder)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Bytes, ObjectId, sizeof(ByteArray))"
  },
  {
    "label": "ToGuid()",
    "kind": "Method",
    "detail": "Function (} FGuid)",
    "insertText": "ToGuid(const FCbObjectId& Id)"
  },
  {
    "label": "FromGuid()",
    "kind": "Method",
    "detail": "Function (FCbObjectId)",
    "insertText": "FromGuid(const FGuid& Id)"
  },
  {
    "label": "MakeIntegerParams()",
    "kind": "Method",
    "detail": "Function (struct FCbCustomById { uint64 Id = 0 ; FMemoryView Data ; } ; struct FCbCustomByName { FUtf8StringView Name ; FMemoryView Data ; } ; namespace UE::CompactBinary::Private { struct FIntegerParams { uint32 IsSigned : 1 ; uint32 MagnitudeBits : 3 1 ; } ; template<IntType> FIntegerParams)",
    "insertText": "MakeIntegerParams()"
  },
  {
    "label": "IntType()",
    "kind": "Method",
    "detail": "Function (FIntegerParams Params ; Params . IsSigned =)",
    "insertText": "IntType(-1) < IntType(0)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (Params . MagnitudeBits = 8*)",
    "insertText": "sizeof(IntType)"
  },
  {
    "label": "FCbFieldView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCbFieldView(const void* Data, ECbFieldType Type = ECbFieldType::HasFieldType)"
  },
  {
    "label": "FCbFieldView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCbFieldView(const FCbValue& Value)"
  },
  {
    "label": "RemoveName()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCbFieldView)",
    "insertText": "RemoveName()"
  },
  {
    "label": "TypeWithFlags()",
    "kind": "Method",
    "detail": "Function (FCbFieldView Field ; Field . TypeWithFlags =)",
    "insertText": "TypeWithFlags(ECbFieldType::HasFieldType | ECbFieldType::HasFieldName)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (Field . Value = Value ; return Field ; } [ [ nodiscard ] ] FUtf8StringView)",
    "insertText": "GetName()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FCbValue)",
    "insertText": "GetValue()"
  },
  {
    "label": "AsObjectView()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCbObjectView)",
    "insertText": "AsObjectView()"
  },
  {
    "label": "AsArrayView()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCbArrayView)",
    "insertText": "AsArrayView()"
  },
  {
    "label": "AsBinaryView()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FMemoryView)",
    "insertText": "AsBinaryView(FMemoryView Default = FMemoryView())"
  },
  {
    "label": "AsString()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FUtf8StringView)",
    "insertText": "AsString(FUtf8StringView Default = FUtf8StringView())"
  },
  {
    "label": "AsInt8()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] int8)",
    "insertText": "AsInt8(int8 Default = 0)"
  },
  {
    "label": "AsInt16()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] int16)",
    "insertText": "AsInt16(int16 Default = 0)"
  },
  {
    "label": "AsInt32()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] int32)",
    "insertText": "AsInt32(int32 Default = 0)"
  },
  {
    "label": "AsInt64()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] int64)",
    "insertText": "AsInt64(int64 Default = 0)"
  },
  {
    "label": "AsUInt8()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] uint8)",
    "insertText": "AsUInt8(uint8 Default = 0)"
  },
  {
    "label": "AsUInt16()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] uint16)",
    "insertText": "AsUInt16(uint16 Default = 0)"
  },
  {
    "label": "AsUInt32()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] uint32)",
    "insertText": "AsUInt32(uint32 Default = 0)"
  },
  {
    "label": "AsUInt64()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] uint64)",
    "insertText": "AsUInt64(uint64 Default = 0)"
  },
  {
    "label": "AsFloat()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] float)",
    "insertText": "AsFloat(float Default = 0.0f)"
  },
  {
    "label": "AsDouble()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] double)",
    "insertText": "AsDouble(double Default = 0.0)"
  },
  {
    "label": "AsBool()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "AsBool(bool bDefault = false)"
  },
  {
    "label": "AsObjectAttachment()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FIoHash)",
    "insertText": "AsObjectAttachment(const FIoHash& Default = FIoHash())"
  },
  {
    "label": "AsBinaryAttachment()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FIoHash)",
    "insertText": "AsBinaryAttachment(const FIoHash& Default = FIoHash())"
  },
  {
    "label": "AsAttachment()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FIoHash)",
    "insertText": "AsAttachment(const FIoHash& Default = FIoHash())"
  },
  {
    "label": "AsHash()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FIoHash)",
    "insertText": "AsHash(const FIoHash& Default = FIoHash())"
  },
  {
    "label": "AsUuid()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FGuid)",
    "insertText": "AsUuid()"
  },
  {
    "label": "AsUuid()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FGuid)",
    "insertText": "AsUuid(const FGuid& Default)"
  },
  {
    "label": "AsDateTimeTicks()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] int64)",
    "insertText": "AsDateTimeTicks(int64 Default = 0)"
  },
  {
    "label": "AsDateTime()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FDateTime)",
    "insertText": "AsDateTime()"
  },
  {
    "label": "AsDateTime()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FDateTime)",
    "insertText": "AsDateTime(FDateTime Default)"
  },
  {
    "label": "AsTimeSpanTicks()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] int64)",
    "insertText": "AsTimeSpanTicks(int64 Default = 0)"
  },
  {
    "label": "AsTimeSpan()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FTimespan)",
    "insertText": "AsTimeSpan()"
  },
  {
    "label": "AsTimeSpan()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FTimespan)",
    "insertText": "AsTimeSpan(FTimespan Default)"
  },
  {
    "label": "AsObjectId()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCbObjectId)",
    "insertText": "AsObjectId(const FCbObjectId& Default = FCbObjectId())"
  },
  {
    "label": "AsCustomById()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCbCustomById)",
    "insertText": "AsCustomById(FCbCustomById Default = FCbCustomById())"
  },
  {
    "label": "AsCustomByName()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCbCustomByName)",
    "insertText": "AsCustomByName(FCbCustomByName Default = FCbCustomByName())"
  },
  {
    "label": "AsCustom()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FMemoryView)",
    "insertText": "AsCustom(uint64 Id, FMemoryView Default = FMemoryView())"
  },
  {
    "label": "AsCustom()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FMemoryView)",
    "insertText": "AsCustom(FUtf8StringView Name, FMemoryView Default = FMemoryView())"
  },
  {
    "label": "HasName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasName()"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "IsObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsObject()"
  },
  {
    "label": "IsArray()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsArray()"
  },
  {
    "label": "IsBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBinary()"
  },
  {
    "label": "IsString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsString()"
  },
  {
    "label": "IsInteger()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInteger()"
  },
  {
    "label": "IsFloat()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFloat()"
  },
  {
    "label": "IsBool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBool()"
  },
  {
    "label": "IsObjectAttachment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsObjectAttachment()"
  },
  {
    "label": "IsBinaryAttachment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBinaryAttachment()"
  },
  {
    "label": "IsAttachment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAttachment()"
  },
  {
    "label": "IsHash()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHash()"
  },
  {
    "label": "IsUuid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUuid()"
  },
  {
    "label": "IsDateTime()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDateTime()"
  },
  {
    "label": "IsTimeSpan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTimeSpan()"
  },
  {
    "label": "IsObjectId()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsObjectId()"
  },
  {
    "label": "IsCustomById()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCustomById()"
  },
  {
    "label": "IsCustomByName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCustomByName()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "HasValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasValue()"
  },
  {
    "label": "HasError()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "HasError()"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FIoHash)",
    "insertText": "GetHash()"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(FIoHashBuilder& Builder)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const FCbFieldView& Other)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(FMutableMemoryView Buffer)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(FArchive& Ar)"
  },
  {
    "label": "IterateAttachments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateAttachments(FCbFieldVisitor Visitor)"
  },
  {
    "label": "TryGetView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetView(FMemoryView& OutView)"
  },
  {
    "label": "GetView()",
    "kind": "Method",
    "detail": "Function (OutView =)",
    "insertText": "GetView()"
  },
  {
    "label": "CreateViewIterator()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCbFieldViewIterator)",
    "insertText": "CreateViewIterator()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (FCbFieldViewIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (FCbIteratorSentinel)",
    "insertText": "end()"
  },
  {
    "label": "GetViewNoType()",
    "kind": "Method",
    "detail": "Function (FMemoryView)",
    "insertText": "GetViewNoType()"
  },
  {
    "label": "GetValueView()",
    "kind": "Method",
    "detail": "Function (FMemoryView)",
    "insertText": "GetValueView()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} ECbFieldType)",
    "insertText": "GetType()"
  },
  {
    "label": "GetTypeWithFlags()",
    "kind": "Method",
    "detail": "Function (} ECbFieldType)",
    "insertText": "GetTypeWithFlags()"
  },
  {
    "label": "GetValueSize()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetValueSize()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(const void* InData, const ECbFieldType InType)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) FCbFieldView(InData, InType)"
  },
  {
    "label": "AsInteger()",
    "kind": "Method",
    "detail": "Function (} private : template<IntType> IntType)",
    "insertText": "AsInteger(IntType Default)"
  },
  {
    "label": "AsInteger()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "AsInteger(uint64 Default, UE::CompactBinary::Private::FIntegerParams Params)"
  },
  {
    "label": "MakeSingle()",
    "kind": "Method",
    "detail": "Function (private : ECbFieldType TypeWithFlags = ECbFieldType::None ; ECbFieldError Error = ECbFieldError::None ; uint32 NameLen = 0 ; const void* Value = nullptr ; } ; class FCbFieldViewIterator : public TCbFieldIterator<FCbFieldView> { public : [ [ nodiscard ] ] FCbFieldViewIterator)",
    "insertText": "MakeSingle(const FCbFieldView& Field)"
  },
  {
    "label": "MakeRange()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FCbFieldViewIterator)",
    "insertText": "MakeRange(FMemoryView View, ECbFieldType Type = ECbFieldType::HasFieldType)"
  },
  {
    "label": "FCbFieldViewIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCbFieldViewIterator()"
  },
  {
    "label": "FCbFieldViewIterator()",
    "kind": "Method",
    "detail": "Function (template<OtherFieldType>)",
    "insertText": "FCbFieldViewIterator(const TCbFieldIterator<OtherFieldType>& It) : TCbFieldIterator(ImplicitConv<FCbFieldView>(It), GetFieldsEnd(It))"
  },
  {
    "label": "FCbArrayView()",
    "kind": "Method",
    "detail": "Function (} class FCbArrayView : protected FCbFieldView { public : using FCbFieldView::FCbFieldView ;)",
    "insertText": "FCbArrayView()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "Num()"
  },
  {
    "label": "AsFieldView()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCbFieldView)",
    "insertText": "AsFieldView()"
  },
  {
    "label": "FromFieldNoCheck()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FCbArrayView)",
    "insertText": "FromFieldNoCheck(const FCbFieldView& Field)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetSize()"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const FCbArrayView& Other)"
  },
  {
    "label": "CreateViewIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateViewIterator().IterateRangeAttachments(Visitor)"
  },
  {
    "label": "FCbArrayView()",
    "kind": "Method",
    "detail": "Function (} using FCbFieldView::CreateViewIterator ; using FCbFieldView::begin ; using FCbFieldView::end ; private :)",
    "insertText": "FCbArrayView(const FCbFieldView& Field) : FCbFieldView(Field)"
  },
  {
    "label": "FCbObjectView()",
    "kind": "Method",
    "detail": "Function (} } ; class FCbObjectView : protected FCbFieldView { public : using FCbFieldView::FCbFieldView ;)",
    "insertText": "FCbObjectView()"
  },
  {
    "label": "FindView()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCbFieldView)",
    "insertText": "FindView(FUtf8StringView Name)"
  },
  {
    "label": "FindViewIgnoreCase()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCbFieldView)",
    "insertText": "FindViewIgnoreCase(FUtf8StringView Name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCbFieldView)",
    "insertText": "operator(FUtf8StringView Name)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const FCbObjectView& Other)"
  },
  {
    "label": "FCbObjectView()",
    "kind": "Method",
    "detail": "Function (} using FCbFieldView::CreateViewIterator ; using FCbFieldView::begin ; using FCbFieldView::end ; private :)",
    "insertText": "FCbObjectView(const FCbFieldView& Field) : FCbFieldView(Field)"
  },
  {
    "label": "TCbBuffer()",
    "kind": "Method",
    "detail": "Function (} } ; template<ViewType> class TCbBuffer : public ViewType { public :)",
    "insertText": "TCbBuffer()"
  },
  {
    "label": "TCbBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TCbBuffer(FSharedBuffer ValueBuffer, ECbFieldType Type = ECbFieldType::HasFieldType)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(ViewType(ValueBuffer.GetData(), Type))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Buffer =)",
    "insertText": "MoveTemp(ValueBuffer)"
  },
  {
    "label": "TCbBuffer()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TCbBuffer(const ViewType& Value, FSharedBuffer OuterBuffer) : ViewType(Value)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Buffer =)",
    "insertText": "MoveTemp(OuterBuffer)"
  },
  {
    "label": "TCbBuffer()",
    "kind": "Method",
    "detail": "Function (} } template<OtherViewType>)",
    "insertText": "TCbBuffer(const ViewType& Value, TCbBuffer<OtherViewType> OuterBuffer) : TCbBuffer(Value, MoveTemp(OuterBuffer.Buffer))"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsOwned()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOwned()"
  },
  {
    "label": "MakeOwned()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MakeOwned()"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (FUniqueBuffer MutableBuffer =)",
    "insertText": "Alloc(ViewType::GetSize())"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(MutableBuffer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(ViewType(MutableBuffer.GetData()))"
  },
  {
    "label": "MoveToShared()",
    "kind": "Method",
    "detail": "Function (Buffer = MutableBuffer .)",
    "insertText": "MoveToShared()"
  },
  {
    "label": "AsView()",
    "kind": "Method",
    "detail": "Function (} } [ [ nodiscard ] ] const ViewType&)",
    "insertText": "AsView()"
  },
  {
    "label": "CreateIterator()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCbFieldIterator)",
    "insertText": "CreateIterator()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (} private : template<OtherType> class TCbBuffer ; FSharedBuffer Buffer ; } ; template<Type,ViewType> class TCbBufferFactory { public : [ [ nodiscard ] ] Type)",
    "insertText": "Clone(const void* const Data)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] Type)",
    "insertText": "Clone(const ViewType& Value)"
  },
  {
    "label": "MakeView()",
    "kind": "Method",
    "detail": "Function (Type Owned =)",
    "insertText": "MakeView(Value)"
  },
  {
    "label": "MakeView()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] Type)",
    "insertText": "MakeView(const ViewType& Value, FSharedBuffer OuterBuffer = FSharedBuffer())"
  },
  {
    "label": "AsObject()",
    "kind": "Method",
    "detail": "Function (} } ; class FCbArray ; class FCbObject ; class FCbField : public TCbBuffer<FCbFieldView>,public TCbBufferFactory<FCbField,FCbFieldView> { public : using TCbBuffer::TCbBuffer ; [ [ nodiscard ] ] FCbObject)",
    "insertText": "AsObject()"
  },
  {
    "label": "AsArray()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCbArray)",
    "insertText": "AsArray()"
  },
  {
    "label": "AsBinary()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FSharedBuffer)",
    "insertText": "AsBinary(const FSharedBuffer& Default = FSharedBuffer())"
  },
  {
    "label": "GetBuffer()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCompositeBuffer)",
    "insertText": "GetBuffer()"
  },
  {
    "label": "FCbField()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FCbField()"
  },
  {
    "label": "CloneRange()",
    "kind": "Method",
    "detail": "Function (} class FCbFieldIterator : public TCbFieldIterator<FCbField> { public : [ [ nodiscard ] ] FCbFieldIterator)",
    "insertText": "CloneRange(const FCbFieldViewIterator& It)"
  },
  {
    "label": "CloneRange()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCbFieldIterator)",
    "insertText": "CloneRange(const FCbFieldIterator& It)"
  },
  {
    "label": "MakeSingle()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FCbFieldIterator)",
    "insertText": "MakeSingle(FCbField Field)"
  },
  {
    "label": "MakeRange()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FCbFieldIterator)",
    "insertText": "MakeRange(FSharedBuffer Buffer, ECbFieldType Type = ECbFieldType::HasFieldType)"
  },
  {
    "label": "GetView()",
    "kind": "Method",
    "detail": "Function (const void* const DataEnd = Buffer .)",
    "insertText": "GetView().GetDataEnd()"
  },
  {
    "label": "FCbFieldIterator()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FCbFieldIterator()"
  },
  {
    "label": "MakeRangeView()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FCbFieldIterator)",
    "insertText": "MakeRangeView(const FCbFieldViewIterator& It, FSharedBuffer OuterBuffer = FSharedBuffer())"
  },
  {
    "label": "MakeRangeOwned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeRangeOwned()"
  },
  {
    "label": "CloneRange()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "CloneRange(*this)"
  },
  {
    "label": "AsField()",
    "kind": "Method",
    "detail": "Function (} class FCbArray : public TCbBuffer<FCbArrayView>,public TCbBufferFactory<FCbArray,FCbArrayView> { public : using TCbBuffer::TCbBuffer ; [ [ nodiscard ] ] FCbField)",
    "insertText": "AsField()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} ; class FCbObject : public TCbBuffer<FCbObjectView>,public TCbBufferFactory<FCbObject,FCbObjectView> { public : using TCbBuffer::TCbBuffer ; [ [ nodiscard ] ] FCbField)",
    "insertText": "Find(FUtf8StringView Name)"
  },
  {
    "label": "FindIgnoreCase()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FCbField)",
    "insertText": "FindIgnoreCase(FUtf8StringView Name)"
  },
  {
    "label": "AsBinary()",
    "kind": "Method",
    "detail": "Function (} FSharedBuffer)",
    "insertText": "AsBinary(const FSharedBuffer& Default)"
  },
  {
    "label": "AsBinaryView()",
    "kind": "Method",
    "detail": "Function (const FMemoryView View =)",
    "insertText": "AsBinaryView()"
  }
]