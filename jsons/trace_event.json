[
  {
    "label": "TraceID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceID"
  },
  {
    "label": "ForceMangle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForceMangle"
  },
  {
    "label": "TraceStringWithCopy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceStringWithCopy"
  },
  {
    "label": "ARG1_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ARG1_TYPE"
  },
  {
    "label": "ARG2_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ARG2_TYPE"
  },
  {
    "label": "TraceEndOnScopeClose",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceEndOnScopeClose"
  },
  {
    "label": "Data",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Data"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_TRACE_EVENT_H_ # define RTC_BASE_TRACE_EVENT_H_ # include<string> # include \" rtc_base / event_tracer . h \" # if)",
    "insertText": "defined(TRACE_EVENT0) #error \"Another copy of trace_event.h has already been included.\" #endif #if defined(RTC_DISABLE_TRACE_EVENTS) #define RTC_TRACE_EVENTS_ENABLED 0 #else #define RTC_TRACE_EVENTS_ENABLED 1 #endif #define TRACE_VALUE_TYPE_BOOL (static_cast<unsigned char>(1)) #define TRACE_VALUE_TYPE_UINT (static_cast<unsigned char>(2)) #define TRACE_VALUE_TYPE_INT (static_cast<unsigned char>(3)) #define TRACE_VALUE_TYPE_DOUBLE (static_cast<unsigned char>(4)) #define TRACE_VALUE_TYPE_POINTER (static_cast<unsigned char>(5)) #define TRACE_VALUE_TYPE_STRING (static_cast<unsigned char>(6)) #define TRACE_VALUE_TYPE_COPY_STRING (static_cast<unsigned char>(7)) #if RTC_TRACE_EVENTS_ENABLED #define TRACE_STR_COPY(str) \\ webrtc::trace_event_internal::TraceStringWithCopy(str) #define TRACE_DISABLED_BY_DEFAULT(name) \"disabled-by-default-\" name #define TRACE_ID_MANGLE(id) \\ webrtc::trace_event_internal::TraceID::ForceMangle(id) #define TRACE_EVENT0(category, name) \\ INTERNAL_TRACE_EVENT_ADD_SCOPED(category, name) #define TRACE_EVENT1(category, name, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_SCOPED(category, name, arg1_name, arg1_val) #define TRACE_EVENT2(category, name, arg1_name, arg1_val, arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_SCOPED(category, name, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_EVENT_INSTANT0(category, name) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_INSTANT, \\ category, name, TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_INSTANT1(category, name, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_INSTANT, \\ category, name, TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val) #define TRACE_EVENT_INSTANT2(category, name, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_INSTANT, \\ category, name, TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_EVENT_COPY_INSTANT0(category, name) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_INSTANT, \\ category, name, TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_COPY_INSTANT1(category, name, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_INSTANT, \\ category, name, TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val) #define TRACE_EVENT_COPY_INSTANT2(category, name, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_INSTANT, \\ category, name, TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_EVENT_BEGIN0(category, name) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_BEGIN, \\ category, name, TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_BEGIN1(category, name, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_BEGIN, \\ category, name, TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val) #define TRACE_EVENT_BEGIN2(category, name, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_BEGIN, \\ category, name, TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_EVENT_COPY_BEGIN0(category, name) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_BEGIN, \\ category, name, TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_COPY_BEGIN1(category, name, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_BEGIN, \\ category, name, TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val) #define TRACE_EVENT_COPY_BEGIN2(category, name, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_BEGIN, \\ category, name, TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_EVENT_END0(category, name) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_END, \\ category, name, TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_END1(category, name, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_END, \\ category, name, TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val) #define TRACE_EVENT_END2(category, name, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_END, \\ category, name, TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_EVENT_COPY_END0(category, name) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_END, \\ category, name, TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_COPY_END1(category, name, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_END, \\ category, name, TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val) #define TRACE_EVENT_COPY_END2(category, name, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_END, \\ category, name, TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_COUNTER1(category, name, value) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_COUNTER, \\ category, name, TRACE_EVENT_FLAG_NONE, \\ \"value\", static_cast<int>(value)) #define TRACE_COPY_COUNTER1(category, name, value) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_COUNTER, \\ category, name, TRACE_EVENT_FLAG_COPY, \\ \"value\", static_cast<int>(value)) #define TRACE_COUNTER2(category, name, value1_name, value1_val, \\ value2_name, value2_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_COUNTER, \\ category, name, TRACE_EVENT_FLAG_NONE, \\ value1_name, static_cast<int>(value1_val), \\ value2_name, static_cast<int>(value2_val)) #define TRACE_COPY_COUNTER2(category, name, value1_name, value1_val, \\ value2_name, value2_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_COUNTER, \\ category, name, TRACE_EVENT_FLAG_COPY, \\ value1_name, static_cast<int>(value1_val), \\ value2_name, static_cast<int>(value2_val)) #define TRACE_COUNTER_ID1(category, name, id, value) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_COUNTER, \\ category, name, id, TRACE_EVENT_FLAG_NONE, \\ \"value\", static_cast<int>(value)) #define TRACE_COPY_COUNTER_ID1(category, name, id, value) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_COUNTER, \\ category, name, id, TRACE_EVENT_FLAG_COPY, \\ \"value\", static_cast<int>(value)) #define TRACE_COUNTER_ID2(category, name, id, value1_name, value1_val, \\ value2_name, value2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_COUNTER, \\ category, name, id, TRACE_EVENT_FLAG_NONE, \\ value1_name, static_cast<int>(value1_val), \\ value2_name, static_cast<int>(value2_val)) #define TRACE_COPY_COUNTER_ID2(category, name, id, value1_name, value1_val, \\ value2_name, value2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_COUNTER, \\ category, name, id, TRACE_EVENT_FLAG_COPY, \\ value1_name, static_cast<int>(value1_val), \\ value2_name, static_cast<int>(value2_val)) #define TRACE_EVENT_ASYNC_BEGIN0(category, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_BEGIN, \\ category, name, id, TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_ASYNC_BEGIN1(category, name, id, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_BEGIN, \\ category, name, id, TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val) #define TRACE_EVENT_ASYNC_BEGIN2(category, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_BEGIN, \\ category, name, id, TRACE_EVENT_FLAG_NONE, \\ arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_COPY_ASYNC_BEGIN0(category, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_BEGIN, \\ category, name, id, TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_COPY_ASYNC_BEGIN1(category, name, id, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_BEGIN, \\ category, name, id, TRACE_EVENT_FLAG_COPY, \\ arg1_name, arg1_val) #define TRACE_EVENT_COPY_ASYNC_BEGIN2(category, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_BEGIN, \\ category, name, id, TRACE_EVENT_FLAG_COPY, \\ arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_ASYNC_STEP0(category, name, id, step) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_STEP, \\ category, name, id, TRACE_EVENT_FLAG_NONE, \"step\", step) #define TRACE_EVENT_ASYNC_STEP1(category, name, id, step, \\ arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_STEP, \\ category, name, id, TRACE_EVENT_FLAG_NONE, \"step\", step, \\ arg1_name, arg1_val) #define TRACE_EVENT_COPY_ASYNC_STEP0(category, name, id, step) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_STEP, \\ category, name, id, TRACE_EVENT_FLAG_COPY, \"step\", step) #define TRACE_EVENT_COPY_ASYNC_STEP1(category, name, id, step, \\ arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_STEP, \\ category, name, id, TRACE_EVENT_FLAG_COPY, \"step\", step, \\ arg1_name, arg1_val) #define TRACE_EVENT_ASYNC_END0(category, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_END, \\ category, name, id, TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_ASYNC_END1(category, name, id, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_END, \\ category, name, id, TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val) #define TRACE_EVENT_ASYNC_END2(category, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_END, \\ category, name, id, TRACE_EVENT_FLAG_NONE, \\ arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_COPY_ASYNC_END0(category, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_END, \\ category, name, id, TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_COPY_ASYNC_END1(category, name, id, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_END, \\ category, name, id, TRACE_EVENT_FLAG_COPY, \\ arg1_name, arg1_val) #define TRACE_EVENT_COPY_ASYNC_END2(category, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_END, \\ category, name, id, TRACE_EVENT_FLAG_COPY, \\ arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_FLOW_BEGIN0(category, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_FLOW_BEGIN, \\ category, name, id, TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_FLOW_BEGIN1(category, name, id, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_FLOW_BEGIN, \\ category, name, id, TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val) #define TRACE_EVENT_FLOW_BEGIN2(category, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_FLOW_BEGIN, \\ category, name, id, TRACE_EVENT_FLAG_NONE, \\ arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_COPY_FLOW_BEGIN0(category, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_FLOW_BEGIN, \\ category, name, id, TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_COPY_FLOW_BEGIN1(category, name, id, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_FLOW_BEGIN, \\ category, name, id, TRACE_EVENT_FLAG_COPY, \\ arg1_name, arg1_val) #define TRACE_EVENT_COPY_FLOW_BEGIN2(category, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_FLOW_BEGIN, \\ category, name, id, TRACE_EVENT_FLAG_COPY, \\ arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_FLOW_STEP0(category, name, id, step) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_FLOW_STEP, \\ category, name, id, TRACE_EVENT_FLAG_NONE, \"step\", step) #define TRACE_EVENT_FLOW_STEP1(category, name, id, step, \\ arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_FLOW_STEP, \\ category, name, id, TRACE_EVENT_FLAG_NONE, \"step\", step, \\ arg1_name, arg1_val) #define TRACE_EVENT_COPY_FLOW_STEP0(category, name, id, step) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_FLOW_STEP, \\ category, name, id, TRACE_EVENT_FLAG_COPY, \"step\", step) #define TRACE_EVENT_COPY_FLOW_STEP1(category, name, id, step, \\ arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_FLOW_STEP, \\ category, name, id, TRACE_EVENT_FLAG_COPY, \"step\", step, \\ arg1_name, arg1_val) #define TRACE_EVENT_FLOW_END0(category, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_FLOW_END, \\ category, name, id, TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_FLOW_END1(category, name, id, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_FLOW_END, \\ category, name, id, TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val) #define TRACE_EVENT_FLOW_END2(category, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_FLOW_END, \\ category, name, id, TRACE_EVENT_FLAG_NONE, \\ arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_COPY_FLOW_END0(category, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_FLOW_END, \\ category, name, id, TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_COPY_FLOW_END1(category, name, id, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_FLOW_END, \\ category, name, id, TRACE_EVENT_FLAG_COPY, \\ arg1_name, arg1_val) #define TRACE_EVENT_COPY_FLOW_END2(category, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_FLOW_END, \\ category, name, id, TRACE_EVENT_FLAG_COPY, \\ arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_API_GET_CATEGORY_ENABLED \\ webrtc::EventTracer::GetCategoryEnabled #define TRACE_EVENT_API_ADD_TRACE_EVENT webrtc::EventTracer::AddTraceEvent #define INTERNAL_TRACE_EVENT_UID3(a,b) \\ trace_event_unique_##a##b #define INTERNAL_TRACE_EVENT_UID2(a,b) \\ INTERNAL_TRACE_EVENT_UID3(a,b) #define INTERNAL_TRACE_EVENT_UID(name_prefix) \\ INTERNAL_TRACE_EVENT_UID2(name_prefix, __LINE__) #if WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS #define INTERNAL_TRACE_EVENT_INFO_TYPE const unsigned char* #else #define INTERNAL_TRACE_EVENT_INFO_TYPE static const unsigned char* #endif #define INTERNAL_TRACE_EVENT_GET_CATEGORY_INFO(category) \\ INTERNAL_TRACE_EVENT_INFO_TYPE INTERNAL_TRACE_EVENT_UID(catstatic) = \\ TRACE_EVENT_API_GET_CATEGORY_ENABLED(category)"
  },
  {
    "label": "INTERNAL_TRACE_EVENT_ADD()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "INTERNAL_TRACE_EVENT_ADD(phase, category, name, flags, ...)"
  },
  {
    "label": "INTERNAL_TRACE_EVENT_GET_CATEGORY_INFO()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "INTERNAL_TRACE_EVENT_GET_CATEGORY_INFO(category)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(*INTERNAL_TRACE_EVENT_UID(catstatic))"
  },
  {
    "label": "AddTraceEvent()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::)",
    "insertText": "AddTraceEvent(\\ phase, INTERNAL_TRACE_EVENT_UID(catstatic), name, \\ webrtc::trace_event_internal::kNoEventId, flags, ##__VA_ARGS__)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) #define INTERNAL_TRACE_EVENT_ADD_SCOPED(category, name, ...) \\ INTERNAL_TRACE_EVENT_GET_CATEGORY_INFO(category)"
  },
  {
    "label": "INTERNAL_TRACE_EVENT_UID()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::trace_event_internal::TraceEndOnScopeClose \\)",
    "insertText": "INTERNAL_TRACE_EVENT_UID(profileScope)"
  },
  {
    "label": "AddTraceEvent()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::)",
    "insertText": "AddTraceEvent(\\ TRACE_EVENT_PHASE_BEGIN, \\ INTERNAL_TRACE_EVENT_UID(catstatic), \\ name, webrtc::trace_event_internal::kNoEventId, \\ TRACE_EVENT_FLAG_NONE, ##__VA_ARGS__)"
  },
  {
    "label": "INTERNAL_TRACE_EVENT_UID()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "INTERNAL_TRACE_EVENT_UID(profileScope).Initialize( \\ INTERNAL_TRACE_EVENT_UID(catstatic), name)"
  },
  {
    "label": "INTERNAL_TRACE_EVENT_ADD_WITH_ID()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "INTERNAL_TRACE_EVENT_ADD_WITH_ID(phase, category, name, id, flags, \\ ...)"
  },
  {
    "label": "trace_event_trace_id()",
    "kind": "Method",
    "detail": "Function (\\ unsigned char trace_event_flags = flags | TRACE_EVENT_FLAG_HAS_ID ; \\ webrtc::trace_event_internal::TraceID)",
    "insertText": "trace_event_trace_id(\\ id, &trace_event_flags)"
  },
  {
    "label": "AddTraceEvent()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::)",
    "insertText": "AddTraceEvent(\\ phase, INTERNAL_TRACE_EVENT_UID(catstatic), \\ name, trace_event_trace_id.data(), trace_event_flags, \\ ##__VA_ARGS__)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) #define TRACE_EVENT_PHASE_BEGIN ('B') #define TRACE_EVENT_PHASE_END ('E') #define TRACE_EVENT_PHASE_INSTANT ('I') #define TRACE_EVENT_PHASE_ASYNC_BEGIN ('S') #define TRACE_EVENT_PHASE_ASYNC_STEP ('T') #define TRACE_EVENT_PHASE_ASYNC_END ('F') #define TRACE_EVENT_PHASE_FLOW_BEGIN ('s') #define TRACE_EVENT_PHASE_FLOW_STEP ('t') #define TRACE_EVENT_PHASE_FLOW_END ('f') #define TRACE_EVENT_PHASE_METADATA ('M') #define TRACE_EVENT_PHASE_COUNTER ('C') #define TRACE_EVENT_FLAG_NONE (static_cast<unsigned char>(0)) #define TRACE_EVENT_FLAG_COPY (static_cast<unsigned char>(1 << 0)) #define TRACE_EVENT_FLAG_HAS_ID (static_cast<unsigned char>(1 << 1)) #define TRACE_EVENT_FLAG_MANGLE_ID (static_cast<unsigned char>(1 << 2))"
  },
  {
    "label": "ForceMangle()",
    "kind": "Method",
    "detail": "Function (namespace trace_event_internal { const int kZeroNumArgs = 0 ; const unsigned long long kNoEventId = 0 ; class TraceID { public : class ForceMangle { public :)",
    "insertText": "ForceMangle(unsigned long long id) : data_(id)"
  },
  {
    "label": "ForceMangle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ForceMangle(unsigned long id) : data_(id)"
  },
  {
    "label": "ForceMangle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ForceMangle(unsigned int id) : data_(id)"
  },
  {
    "label": "ForceMangle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ForceMangle(unsigned short id) : data_(id)"
  },
  {
    "label": "ForceMangle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ForceMangle(unsigned char id) : data_(id)"
  },
  {
    "label": "ForceMangle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ForceMangle(long long id) : data_(static_cast<unsigned long long>(id))"
  },
  {
    "label": "ForceMangle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ForceMangle(long id) : data_(static_cast<unsigned long long>(id))"
  },
  {
    "label": "ForceMangle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ForceMangle(int id) : data_(static_cast<unsigned long long>(id))"
  },
  {
    "label": "ForceMangle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ForceMangle(short id) : data_(static_cast<unsigned long long>(id))"
  },
  {
    "label": "ForceMangle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ForceMangle(signed char id) : data_(static_cast<unsigned long long>(id))"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} unsigned long long)",
    "insertText": "data()"
  },
  {
    "label": "TraceID()",
    "kind": "Method",
    "detail": "Function (* flags | = TRACE_EVENT_FLAG_MANGLE_ID ; })",
    "insertText": "TraceID(ForceMangle id, unsigned char* flags) : data_(id.data())"
  },
  {
    "label": "TraceID()",
    "kind": "Method",
    "detail": "Function (* flags | = TRACE_EVENT_FLAG_MANGLE_ID ; })",
    "insertText": "TraceID(unsigned long long id, unsigned char* flags) : data_(id)"
  },
  {
    "label": "TraceID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TraceID(unsigned long id, unsigned char* flags) : data_(id)"
  },
  {
    "label": "TraceID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TraceID(unsigned int id, unsigned char* flags) : data_(id)"
  },
  {
    "label": "TraceID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TraceID(unsigned short id, unsigned char* flags) : data_(id)"
  },
  {
    "label": "TraceID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TraceID(unsigned char id, unsigned char* flags) : data_(id)"
  },
  {
    "label": "TraceID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TraceID(long long id, unsigned char* flags) : data_(static_cast<unsigned long long>(id))"
  },
  {
    "label": "TraceID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TraceID(long id, unsigned char* flags) : data_(static_cast<unsigned long long>(id))"
  },
  {
    "label": "TraceID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TraceID(int id, unsigned char* flags) : data_(static_cast<unsigned long long>(id))"
  },
  {
    "label": "TraceID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TraceID(short id, unsigned char* flags) : data_(static_cast<unsigned long long>(id))"
  },
  {
    "label": "TraceID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TraceID(signed char id, unsigned char* flags) : data_(static_cast<unsigned long long>(id))"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (} operator const)",
    "insertText": "char()"
  },
  {
    "label": "INTERNAL_DECLARE_SET_TRACE_VALUE_INT()",
    "kind": "Method",
    "detail": "Function (\\ TraceValueUnion type_value ; \\ type_value . union_member = arg ; \\* type = value_type_id ; \\* value = type_value . as_uint ; \\ } # define)",
    "insertText": "INTERNAL_DECLARE_SET_TRACE_VALUE_INT(actual_type, \\ value_type_id) \\ static inline void SetTraceValue(actual_type arg, \\ unsigned char* type, \\ unsigned long long* value)"
  },
  {
    "label": "long()",
    "kind": "Method",
    "detail": "Function (\\* type = value_type_id ; \\* value = static_cast<unsigned long)",
    "insertText": "long(arg)"
  },
  {
    "label": "INTERNAL_DECLARE_SET_TRACE_VALUE_INT()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "INTERNAL_DECLARE_SET_TRACE_VALUE_INT(unsigned long long, TRACE_VALUE_TYPE_UINT) INTERNAL_DECLARE_SET_TRACE_VALUE_INT(unsigned long, TRACE_VALUE_TYPE_UINT) INTERNAL_DECLARE_SET_TRACE_VALUE_INT(unsigned int, TRACE_VALUE_TYPE_UINT) INTERNAL_DECLARE_SET_TRACE_VALUE_INT(unsigned short, TRACE_VALUE_TYPE_UINT) INTERNAL_DECLARE_SET_TRACE_VALUE_INT(unsigned char, TRACE_VALUE_TYPE_UINT) INTERNAL_DECLARE_SET_TRACE_VALUE_INT(long long, TRACE_VALUE_TYPE_INT) INTERNAL_DECLARE_SET_TRACE_VALUE_INT(long, TRACE_VALUE_TYPE_INT) INTERNAL_DECLARE_SET_TRACE_VALUE_INT(int, TRACE_VALUE_TYPE_INT) INTERNAL_DECLARE_SET_TRACE_VALUE_INT(short, TRACE_VALUE_TYPE_INT) INTERNAL_DECLARE_SET_TRACE_VALUE_INT(signed char, TRACE_VALUE_TYPE_INT) INTERNAL_DECLARE_SET_TRACE_VALUE(bool, as_bool, TRACE_VALUE_TYPE_BOOL) INTERNAL_DECLARE_SET_TRACE_VALUE(double, as_double, TRACE_VALUE_TYPE_DOUBLE) INTERNAL_DECLARE_SET_TRACE_VALUE(const void*, as_pointer, TRACE_VALUE_TYPE_POINTER) INTERNAL_DECLARE_SET_TRACE_VALUE(const char*, as_string, TRACE_VALUE_TYPE_STRING) INTERNAL_DECLARE_SET_TRACE_VALUE(const TraceStringWithCopy&, as_string, TRACE_VALUE_TYPE_COPY_STRING) #undef INTERNAL_DECLARE_SET_TRACE_VALUE #undef INTERNAL_DECLARE_SET_TRACE_VALUE_INT static inline void SetTraceValue(const std::string& arg, unsigned char* type, unsigned long long* value)"
  },
  {
    "label": "c_str()",
    "kind": "Method",
    "detail": "Function (TraceValueUnion type_value ; type_value . as_string = arg .)",
    "insertText": "c_str()"
  },
  {
    "label": "AddTraceEvent()",
    "kind": "Method",
    "detail": "Function (* type = TRACE_VALUE_TYPE_COPY_STRING ;* value = type_value . as_uint ; } void)",
    "insertText": "AddTraceEvent(char phase, const unsigned char* category_enabled, const char* name, unsigned long long id, unsigned char flags)"
  },
  {
    "label": "TRACE_EVENT_API_ADD_TRACE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_EVENT_API_ADD_TRACE_EVENT(phase, category_enabled, name, id, kZeroNumArgs, nullptr, nullptr, nullptr, flags)"
  },
  {
    "label": "AddTraceEvent()",
    "kind": "Method",
    "detail": "Function (} template<class ARG1_TYPE> void)",
    "insertText": "AddTraceEvent(char phase, const unsigned char* category_enabled, const char* name, unsigned long long id, unsigned char flags, const char* arg1_name, const ARG1_TYPE& arg1_val)"
  },
  {
    "label": "SetTraceValue()",
    "kind": "Method",
    "detail": "Function (const int num_args = 1 ; unsigned char arg_types [ 1 ] ; unsigned long long arg_values [ 1 ] ;)",
    "insertText": "SetTraceValue(arg1_val, &arg_types[0], &arg_values[0])"
  },
  {
    "label": "TRACE_EVENT_API_ADD_TRACE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_EVENT_API_ADD_TRACE_EVENT(phase, category_enabled, name, id, num_args, &arg1_name, arg_types, arg_values, flags)"
  },
  {
    "label": "AddTraceEvent()",
    "kind": "Method",
    "detail": "Function (} template<class ARG1_TYPE,class ARG2_TYPE> void)",
    "insertText": "AddTraceEvent(char phase, const unsigned char* category_enabled, const char* name, unsigned long long id, unsigned char flags, const char* arg1_name, const ARG1_TYPE& arg1_val, const char* arg2_name, const ARG2_TYPE& arg2_val)"
  },
  {
    "label": "SetTraceValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTraceValue(arg2_val, &arg_types[1], &arg_values[1])"
  },
  {
    "label": "TRACE_EVENT_API_ADD_TRACE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_EVENT_API_ADD_TRACE_EVENT(phase, category_enabled, name, id, num_args, arg_names, arg_types, arg_values, flags)"
  },
  {
    "label": "TraceEndOnScopeClose()",
    "kind": "Method",
    "detail": "Function (} class TraceEndOnScopeClose { public :)",
    "insertText": "TraceEndOnScopeClose() : p_data_(nullptr)"
  },
  {
    "label": "TraceEndOnScopeClose()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TraceEndOnScopeClose()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(const unsigned char* category_enabled, const char* name)"
  },
  {
    "label": "AddEventIfEnabled()",
    "kind": "Method",
    "detail": "Function (data_ . category_enabled = category_enabled ; data_ . name = name ; p_data_ =& data_ ; } private : void)",
    "insertText": "AddEventIfEnabled()"
  },
  {
    "label": "TRACE_EVENT_API_ADD_TRACE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_EVENT_API_ADD_TRACE_EVENT(TRACE_EVENT_PHASE_END, p_data_->category_enabled, p_data_->name, kNoEventId, kZeroNumArgs, nullptr, nullptr, nullptr, TRACE_EVENT_FLAG_NONE)"
  },
  {
    "label": "RTC_NOOP()",
    "kind": "Method",
    "detail": "Function (} } struct Data { const unsigned char* category_enabled ; const char* name ; } ; Data* p_data_ ; Data data_ ; } ; } } # else # define)",
    "insertText": "RTC_NOOP()"
  }
]