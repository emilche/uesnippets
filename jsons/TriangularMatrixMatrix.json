[
  {
    "label": "product_triangular_matrix_matrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_triangular_matrix_matrix"
  },
  {
    "label": "triangular_product_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "triangular_product_impl"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_TRIANGULAR_MATRIX_MATRIX_H # define EIGEN_TRIANGULAR_MATRIX_MATRIX_H namespace Eigen { namespace internal { template<Scalar,Index,int Mode,bool LhsIsTriangular,int LhsStorageOrder,bool ConjugateLhs,int RhsStorageOrder,bool ConjugateRhs,int ResStorageOrder,int ResInnerStride,int Version = Specialized> struct product_triangular_matrix_matrix ; template<Scalar,Index,int Mode,bool LhsIsTriangular,int LhsStorageOrder,bool ConjugateLhs,int RhsStorageOrder,bool ConjugateRhs,int ResInnerStride,int Version> struct product_triangular_matrix_matrix<Scalar,Index,Mode,LhsIsTriangular,LhsStorageOrder,ConjugateLhs,RhsStorageOrder,ConjugateRhs,RowMajor,ResInnerStride,Version> { EIGEN_STRONG_INLINE void)",
    "insertText": "run(Index rows, Index cols, Index depth, const Scalar* lhs, Index lhsStride, const Scalar* rhs, Index rhsStride, Scalar* res, Index resIncr, Index resStride, const Scalar& alpha, level3_blocking<Scalar,Scalar>& blocking)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (product_triangular_matrix_matrix<Scalar,)",
    "insertText": "Index(Mode&(UnitDiag|ZeroDiag)) | ((Mode&Upper) ? Lower : Upper), (!LhsIsTriangular), RhsStorageOrder==RowMajor ? ColMajor : RowMajor, ConjugateRhs, LhsStorageOrder==RowMajor ? ColMajor : RowMajor, ConjugateLhs, ColMajor, ResInnerStride> ::run(cols, rows, depth, rhs, rhsStride, lhs, lhsStride, res, resIncr, resStride, alpha, blocking)"
  },
  {
    "label": "EIGEN_PLAIN_ENUM_MAX()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar,Index,int Mode,int LhsStorageOrder,bool ConjugateLhs,int RhsStorageOrder,bool ConjugateRhs,int ResInnerStride,int Version> struct product_triangular_matrix_matrix<Scalar,Index,Mode,true,LhsStorageOrder,ConjugateLhs,RhsStorageOrder,ConjugateRhs,ColMajor,ResInnerStride,Version> { typedef gebp_traits<Scalar,Scalar> Traits ; enum { SmallPanelWidth = 2*)",
    "insertText": "EIGEN_PLAIN_ENUM_MAX(Traits::mr,Traits::nr), IsLower = (Mode&Lower) == Lower, SetDiag = (Mode&(ZeroDiag|UnitDiag))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (EIGEN_DONT_INLINE void)",
    "insertText": "run(Index _rows, Index _cols, Index _depth, const Scalar* _lhs, Index lhsStride, const Scalar* _rhs, Index rhsStride, Scalar* res, Index resIncr, Index resStride, const Scalar& alpha, level3_blocking<Scalar,Scalar>& blocking)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} ; template<Scalar,Index,int Mode,int LhsStorageOrder,bool ConjugateLhs,int RhsStorageOrder,bool ConjugateRhs,int ResInnerStride,int Version> EIGEN_DONT_INLINE void product_triangular_matrix_matrix<Scalar,Index,Mode,true,LhsStorageOrder,ConjugateLhs,RhsStorageOrder,ConjugateRhs,ColMajor,ResInnerStride,Version)",
    "insertText": "run(Index _rows, Index _cols, Index _depth, const Scalar* _lhs, Index lhsStride, const Scalar* _rhs, Index rhsStride, Scalar* _res, Index resIncr, Index resStride, const Scalar& alpha, level3_blocking<Scalar,Scalar>& blocking)"
  },
  {
    "label": "diagSize()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "diagSize(std::min)(_rows,_depth)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (Index rows = IsLower ? _rows : diagSize ; Index depth = IsLower ? diagSize : _depth ; Index cols = _cols ; typedef const_blas_data_mapper<Scalar,Index,LhsStorageOrder> LhsMapper ; typedef const_blas_data_mapper<Scalar,Index,RhsStorageOrder> RhsMapper ; typedef blas_data_mapper<Traits::ResScalar,Index,ColMajor,Unaligned,ResInnerStride> ResMapper ; LhsMapper)",
    "insertText": "lhs(_lhs,lhsStride)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (RhsMapper)",
    "insertText": "rhs(_rhs,rhsStride)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (ResMapper)",
    "insertText": "res(_res, resStride, resIncr)"
  },
  {
    "label": "kc()",
    "kind": "Method",
    "detail": "Function (Index kc = blocking .)",
    "insertText": "kc()"
  },
  {
    "label": "mc()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "mc(std::min)(rows,blocking.mc())"
  },
  {
    "label": "panelWidth()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "panelWidth(std::min)(Index(SmallPanelWidth),(std::min)(kc,mc))"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (std::size_t sizeA = kc* mc ; std::size_t sizeB = kc* cols ;)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(Scalar, blockA, sizeA, blocking.blockA())"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(Scalar, blockB, sizeB, blocking.blockB())"
  },
  {
    "label": "triangularBuffer()",
    "kind": "Method",
    "detail": "Function (internal::constructor_without_unaligned_array_assert a ; Matrix<Scalar,SmallPanelWidth,SmallPanelWidth,LhsStorageOrder>)",
    "insertText": "triangularBuffer(a)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (triangularBuffer .)",
    "insertText": "setZero()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (gebp_kernel<Scalar,Scalar,Index,ResMapper,Traits::mr,Traits::nr,ConjugateLhs,ConjugateRhs> gebp_kernel ; gemm_pack_lhs<Scalar,Index,LhsMapper,Traits::mr,Traits::LhsProgress,Traits::LhsPacket4Packing,LhsStorageOrder> pack_lhs ; gemm_pack_rhs<Scalar,Index,RhsMapper,Traits::nr,RhsStorageOrder> pack_rhs ;)",
    "insertText": "for(Index k2=IsLower ? depth : 0; IsLower ? k2>0 : k2<depth; IsLower ? k2-=kc : k2+=kc)"
  },
  {
    "label": "actual_kc()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "actual_kc(std::min)(IsLower ? k2 : depth-k2, kc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index actual_k2 = IsLower ? k2 - actual_kc : k2 ;)",
    "insertText": "if((!IsLower)&&(k2<rows)&&(k2+actual_kc>rows))"
  },
  {
    "label": "pack_rhs()",
    "kind": "Method",
    "detail": "Function (actual_kc = rows - k2 ; k2 = k2 + actual_kc - kc ; })",
    "insertText": "pack_rhs(blockB, rhs.getSubMapper(actual_k2,0), actual_kc, cols)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index actualPanelWidth = std::min<)",
    "insertText": "Index(actual_kc-k1, panelWidth)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index lengthTarget = IsLower ? actual_kc - k1 - actualPanelWidth : k1 ; Index startBlock = actual_k2 + k1 ; Index blockBOffset = k1 ;)",
    "insertText": "for(Index k=0;k<actualPanelWidth;++k)"
  },
  {
    "label": "pack_lhs()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "pack_lhs(blockA, LhsMapper(triangularBuffer.data(), triangularBuffer.outerStride()), actualPanelWidth, actualPanelWidth)"
  },
  {
    "label": "gebp_kernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gebp_kernel(res.getSubMapper(startBlock, 0), blockA, blockB, actualPanelWidth, actualPanelWidth, cols, alpha, actualPanelWidth, actual_kc, 0, blockBOffset)"
  },
  {
    "label": "pack_lhs()",
    "kind": "Method",
    "detail": "Function (Index startTarget = IsLower ? actual_k2 + k1 + actualPanelWidth : actual_k2 ;)",
    "insertText": "pack_lhs(blockA, lhs.getSubMapper(startTarget,startBlock), actualPanelWidth, lengthTarget)"
  },
  {
    "label": "gebp_kernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gebp_kernel(res.getSubMapper(startTarget, 0), blockA, blockB, lengthTarget, actualPanelWidth, cols, alpha, actualPanelWidth, actual_kc, 0, blockBOffset)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} } } { Index start = IsLower ? k2 : 0 ; Index end = IsLower ?)",
    "insertText": "rows(std::min)(actual_k2,rows)"
  },
  {
    "label": "actual_mc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_mc(std::min)(i2+mc,end)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (gemm_pack_lhs<Scalar,Index,LhsMapper,Traits::mr,Traits::LhsProgress,Traits::LhsPacket4Packing,LhsStorageOrder,)",
    "insertText": "false() (blockA, lhs.getSubMapper(i2, actual_k2), actual_kc, actual_mc)"
  },
  {
    "label": "gebp_kernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gebp_kernel(res.getSubMapper(i2, 0), blockA, blockB, actual_mc, actual_kc, cols, alpha, -1, -1, 0, 0)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const Index PacketBytes = packet_traits<Scalar>::size*)",
    "insertText": "sizeof(Scalar)"
  },
  {
    "label": "diagSize()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "diagSize(std::min)(_cols,_depth)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (gebp_kernel<Scalar,Scalar,Index,ResMapper,Traits::mr,Traits::nr,ConjugateLhs,ConjugateRhs> gebp_kernel ; gemm_pack_lhs<Scalar,Index,LhsMapper,Traits::mr,Traits::LhsProgress,Traits::LhsPacket4Packing,LhsStorageOrder> pack_lhs ; gemm_pack_rhs<Scalar,Index,RhsMapper,Traits::nr,RhsStorageOrder> pack_rhs ; gemm_pack_rhs<Scalar,Index,RhsMapper,Traits::nr,RhsStorageOrder,false,true> pack_rhs_panel ;)",
    "insertText": "for(Index k2=IsLower ? 0 : depth; IsLower ? k2<depth : k2>0; IsLower ? k2+=kc : k2-=kc)"
  },
  {
    "label": "actual_kc()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "actual_kc(std::min)(IsLower ? depth-k2 : k2, kc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index actual_k2 = IsLower ? k2 : k2 - actual_kc ;)",
    "insertText": "if(IsLower && (k2<cols) && (actual_k2+actual_kc>cols))"
  },
  {
    "label": "IsLower()",
    "kind": "Method",
    "detail": "Function (actual_kc = cols - k2 ; k2 = actual_k2 + actual_kc - kc ; } Index rs =)",
    "insertText": "IsLower(std::min)(cols,actual_k2)"
  },
  {
    "label": "ts()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "ts(IsLower && actual_k2>=cols)"
  },
  {
    "label": "PacketBytes()",
    "kind": "Method",
    "detail": "Function (Scalar* geb = blockB + ts* ts ; geb = geb + internal::first_aligned<)",
    "insertText": "PacketBytes(geb,PacketBytes/sizeof(Scalar))"
  },
  {
    "label": "pack_rhs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pack_rhs(geb, rhs.getSubMapper(actual_k2,IsLower ? 0 : k2), actual_kc, rs)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index actualPanelWidth = std::min<)",
    "insertText": "Index(actual_kc-j2, SmallPanelWidth)"
  },
  {
    "label": "pack_rhs_panel()",
    "kind": "Method",
    "detail": "Function (Index actual_j2 = actual_k2 + j2 ; Index panelOffset = IsLower ? j2 + actualPanelWidth : 0 ; Index panelLength = IsLower ? actual_kc - j2 - actualPanelWidth : j2 ;)",
    "insertText": "pack_rhs_panel(blockB+j2*actual_kc, rhs.getSubMapper(actual_k2+panelOffset, actual_j2), panelLength, actualPanelWidth, actual_kc, panelOffset)"
  },
  {
    "label": "pack_rhs_panel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "pack_rhs_panel(blockB+j2*actual_kc, RhsMapper(triangularBuffer.data(), triangularBuffer.outerStride()), actualPanelWidth, actualPanelWidth, actual_kc, j2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(Index i2=0; i2<rows; i2+=mc)"
  },
  {
    "label": "actual_mc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_mc(std::min)(mc,rows-i2)"
  },
  {
    "label": "pack_lhs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pack_lhs(blockA, lhs.getSubMapper(i2, actual_k2), actual_kc, actual_mc)"
  },
  {
    "label": "gebp_kernel()",
    "kind": "Method",
    "detail": "Function (Index panelLength = IsLower ? actual_kc - j2 : j2 + actualPanelWidth ; Index blockOffset = IsLower ? j2 : 0 ;)",
    "insertText": "gebp_kernel(res.getSubMapper(i2, actual_k2 + j2), blockA, blockB+j2*actual_kc, actual_mc, panelLength, actualPanelWidth, alpha, actual_kc, actual_kc, blockOffset, blockOffset)"
  },
  {
    "label": "gebp_kernel()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "gebp_kernel(res.getSubMapper(i2, IsLower ? 0 : k2), blockA, geb, actual_mc, actual_kc, rs, alpha, -1, -1, 0, 0)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } } } namespace internal { template<int Mode,bool LhsIsTriangular,Lhs,Rhs> struct triangular_product_impl<Mode,LhsIsTriangular,Lhs,false,Rhs,false> { template<Dest> void)",
    "insertText": "run(Dest& dst, const Lhs &a_lhs, const Rhs &a_rhs, const typename Dest::Scalar& alpha)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (typedef Lhs::Scalar LhsScalar ; typedef Rhs::Scalar RhsScalar ; typedef Dest::Scalar Scalar ; typedef internal::blas_traits<Lhs> LhsBlasTraits ; typedef LhsBlasTraits::DirectLinearAccessType ActualLhsType ; typedef internal::remove_all<ActualLhsType>::type ActualLhsTypeCleaned ; typedef internal::blas_traits<Rhs> RhsBlasTraits ; typedef RhsBlasTraits::DirectLinearAccessType ActualRhsType ; typedef internal::remove_all<ActualRhsType>::type ActualRhsTypeCleaned ; internal::add_const_on_value_type<ActualLhsType>::type lhs =)",
    "insertText": "extract(a_lhs)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (internal::add_const_on_value_type<ActualRhsType>::type rhs =)",
    "insertText": "extract(a_rhs)"
  },
  {
    "label": "extractScalarFactor()",
    "kind": "Method",
    "detail": "Function (LhsScalar lhs_alpha =)",
    "insertText": "extractScalarFactor(a_lhs)"
  },
  {
    "label": "extractScalarFactor()",
    "kind": "Method",
    "detail": "Function (RhsScalar rhs_alpha =)",
    "insertText": "extractScalarFactor(a_rhs)"
  },
  {
    "label": "gemm_blocking_space()",
    "kind": "Method",
    "detail": "Function (Scalar actualAlpha = alpha* lhs_alpha* rhs_alpha ; typedef)",
    "insertText": "gemm_blocking_space(Dest::Flags&RowMajorBit)"
  },
  {
    "label": "IsLower()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "IsLower(Mode&Lower)"
  },
  {
    "label": "stripedRows()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "stripedRows((!LhsIsTriangular) || (IsLower)) ? lhs.rows() : (std::min)(lhs.rows(),lhs.cols())"
  },
  {
    "label": "stripedCols()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "stripedCols((LhsIsTriangular) || (!IsLower)) ? rhs.cols() : (std::min)(rhs.cols(),rhs.rows())"
  },
  {
    "label": "LhsIsTriangular()",
    "kind": "Method",
    "detail": "Function (Index stripedDepth =)",
    "insertText": "LhsIsTriangular((!IsLower) ? lhs.cols() : (std::min)(lhs.cols(),lhs.rows())) : ((IsLower) ? rhs.rows() : (std::min)(rhs.rows(),rhs.cols()))"
  },
  {
    "label": "blocking()",
    "kind": "Method",
    "detail": "Function (BlockingType)",
    "insertText": "blocking(stripedRows, stripedCols, stripedDepth, 1, false)"
  },
  {
    "label": "LhsIsTriangular()",
    "kind": "Method",
    "detail": "Function (internal::product_triangular_matrix_matrix<Scalar,Index,Mode,)",
    "insertText": "LhsIsTriangular(internal::traits<ActualLhsTypeCleaned>::Flags&RowMajorBit) ? RowMajor : ColMajor, LhsBlasTraits::NeedToConjugate, (internal::traits<ActualRhsTypeCleaned>::Flags&RowMajorBit) ? RowMajor : ColMajor, RhsBlasTraits::NeedToConjugate, (internal::traits<Dest >::Flags&RowMajorBit) ? RowMajor : ColMajor, Dest::InnerStrideAtCompileTime> ::run( stripedRows, stripedCols, stripedDepth, &lhs.coeffRef(0,0), lhs.outerStride(), &rhs.coeffRef(0,0), rhs.outerStride(), &dst.coeffRef(0,0), dst.innerStride(), dst.outerStride(), actualAlpha, blocking)"
  },
  {
    "label": "diagSize()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "diagSize(std::min)(lhs.rows(),lhs.cols())"
  },
  {
    "label": "topRows()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "topRows(diagSize) -= ((lhs_alpha-LhsScalar(1))*a_rhs).topRows(diagSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((!LhsIsTriangular) && rhs_alpha!=RhsScalar(1))"
  },
  {
    "label": "diagSize()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "diagSize(std::min)(rhs.rows(),rhs.cols())"
  },
  {
    "label": "leftCols()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "leftCols(diagSize) -= (rhs_alpha-RhsScalar(1))*a_lhs.leftCols(diagSize)"
  }
]