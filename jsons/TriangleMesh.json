[
  {
    "label": "THierarchicalSpatialHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THierarchicalSpatialHash"
  },
  {
    "label": "TTriangleCollisionPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTriangleCollisionPoint"
  },
  {
    "label": "FPBDFlatWeightMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDFlatWeightMap"
  },
  {
    "label": "FTriangleMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTriangleMesh"
  },
  {
    "label": "FTriangleMesh()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Array . h \" # include \" Chaos / Map . h \" # include \" Chaos / Particles . h \" # include \" Chaos / SegmentMesh . h \" # include \" Containers / ContainersFwd . h \" # include \" AABBTree . h \" namespace Chaos { template<TPayloadType,T> class THierarchicalSpatialHash ; template<T> struct TTriangleCollisionPoint ; namespace Softs { class FPBDFlatWeightMap ; } class FTriangleMesh { public :)",
    "insertText": "FTriangleMesh()"
  },
  {
    "label": "FTriangleMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTriangleMesh(TArray<TVec3<int32>>&& Elements, const int32 StartIdx = 0, const int32 EndIdx = -1, const bool CullDegenerateElements=true)"
  },
  {
    "label": "FTriangleMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTriangleMesh(const FTriangleMesh& Other)"
  },
  {
    "label": "FTriangleMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTriangleMesh(FTriangleMesh&& Other)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(TArray<TVec3<int32>>&& Elements, const int32 StartIdx = 0, const int32 EndIdx = -1, const bool CullDegenerateElements=true)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const TArray<TVec3<int32>>& Elements, const int32 StartIdx = 0, const int32 EndIdx = -1, const bool CullDegenerateElements=true)"
  },
  {
    "label": "ResetAuxiliaryStructures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAuxiliaryStructures()"
  },
  {
    "label": "GetVertexRange()",
    "kind": "Method",
    "detail": "Function (TVec2<int32>)",
    "insertText": "GetVertexRange()"
  },
  {
    "label": "GetVertices()",
    "kind": "Method",
    "detail": "Function (TSet<int32>)",
    "insertText": "GetVertices()"
  },
  {
    "label": "GetVertexSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVertexSet(TSet<int32>& VertexSet)"
  },
  {
    "label": "GetVertexSetAsArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVertexSetAsArray(TArray<int32>& VertexSet)"
  },
  {
    "label": "GetElements()",
    "kind": "Method",
    "detail": "Function (MStartIdx = StartIdx ; MNumIndices = EndIdx - StartIdx + 1 ; } } const TArray<TVec3<int32>>&)",
    "insertText": "GetElements()"
  },
  {
    "label": "GetSurfaceElements()",
    "kind": "Method",
    "detail": "Function (} const TArray<TVec3<int32>>&)",
    "insertText": "GetSurfaceElements()"
  },
  {
    "label": "GetNumElements()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumElements()"
  },
  {
    "label": "GetPointToNeighborsMap()",
    "kind": "Method",
    "detail": "Function (} const TMap<int32,TSet<int32>>&)",
    "insertText": "GetPointToNeighborsMap()"
  },
  {
    "label": "GetPointToTriangleMap()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<TArray<int32>>)",
    "insertText": "GetPointToTriangleMap()"
  },
  {
    "label": "GetNRing()",
    "kind": "Method",
    "detail": "Function (} TSet<int32>)",
    "insertText": "GetNRing(const int32 Element, const int32 N)"
  },
  {
    "label": "GetNeighbors()",
    "kind": "Method",
    "detail": "Function (TSet<int32> Neighbors ; TSet<int32> LevelNeighbors,PrevLevelNeighbors ; PrevLevelNeighbors =)",
    "insertText": "GetNeighbors(Element)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Neighbors .)",
    "insertText": "Add(SubElement)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 i = 1; i < N; ++i)"
  },
  {
    "label": "GetNeighbors()",
    "kind": "Method",
    "detail": "Function (const auto& SubNeighbors =)",
    "insertText": "GetNeighbors(SubElement)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LevelNeighbors .)",
    "insertText": "Add(SubSubElement)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } } PrevLevelNeighbors = LevelNeighbors ; LevelNeighbors .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetUniqueAdjacentPoints()",
    "kind": "Method",
    "detail": "Function (} } } return Neighbors ; } TArray<Chaos::TVec2<int32>>)",
    "insertText": "GetUniqueAdjacentPoints()"
  },
  {
    "label": "GetUniqueAdjacentElements()",
    "kind": "Method",
    "detail": "Function (TArray<Chaos::TVec4<int32>>)",
    "insertText": "GetUniqueAdjacentElements()"
  },
  {
    "label": "GetFaceNormals()",
    "kind": "Method",
    "detail": "Function (template<T> TArray<TVec3<T>>)",
    "insertText": "GetFaceNormals(const TConstArrayView<TVec3<T>>& Points, const bool ReturnEmptyOnError = true)"
  },
  {
    "label": "GetFaceNormals()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "GetFaceNormals(TArray<TVec3<T>>& Normals, const TConstArrayView<TVec3<T>>& Points, const bool ReturnEmptyOnError = true)"
  },
  {
    "label": "GetPointNormals()",
    "kind": "Method",
    "detail": "Function (} TArray<FVec3>)",
    "insertText": "GetPointNormals(const TConstArrayView<FVec3>& points, const bool ReturnEmptyOnError = true, const bool bUseGlobalArray=false)"
  },
  {
    "label": "GetPointNormals()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetPointNormals(TArrayView<FVec3> PointNormals, const TConstArrayView<FVec3>& FaceNormals, const bool bUseGlobalArray)"
  },
  {
    "label": "GetPointNormals()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "GetPointNormals(TArrayView<TVec3<T>> PointNormals, const TConstArrayView<TVec3<T>>& FaceNormals, const bool bUseGlobalArray)"
  },
  {
    "label": "GetPointNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPointNormals(TArrayView<TVec3<FRealSingle>> PointNormals, const TConstArrayView<TVec3<FRealSingle>>& FaceNormals, const bool bUseGlobalArray)"
  },
  {
    "label": "GetConvexHullFromParticles()",
    "kind": "Method",
    "detail": "Function (FTriangleMesh)",
    "insertText": "GetConvexHullFromParticles(const TConstArrayView<FVec3>& points)"
  },
  {
    "label": "GetConvexHullFromParticles()",
    "kind": "Method",
    "detail": "Function (FTriangleMesh)",
    "insertText": "GetConvexHullFromParticles(const FParticles& InParticles)"
  },
  {
    "label": "GetSegmentMesh()",
    "kind": "Method",
    "detail": "Function (} const FSegmentMesh&)",
    "insertText": "GetSegmentMesh()"
  },
  {
    "label": "GetFaceToEdges()",
    "kind": "Method",
    "detail": "Function (const TArray<TVec3<int32>>&)",
    "insertText": "GetFaceToEdges()"
  },
  {
    "label": "GetEdgeToFaces()",
    "kind": "Method",
    "detail": "Function (const TArray<TVec2<int32>>&)",
    "insertText": "GetEdgeToFaces()"
  },
  {
    "label": "GetCurvatureOnEdges()",
    "kind": "Method",
    "detail": "Function (TArray<FReal>)",
    "insertText": "GetCurvatureOnEdges(const TArray<FVec3>& faceNormals)"
  },
  {
    "label": "GetCurvatureOnEdges()",
    "kind": "Method",
    "detail": "Function (TArray<FReal>)",
    "insertText": "GetCurvatureOnEdges(const TConstArrayView<FVec3>& points)"
  },
  {
    "label": "GetCurvatureOnPoints()",
    "kind": "Method",
    "detail": "Function (TArray<FReal>)",
    "insertText": "GetCurvatureOnPoints(const TArray<FReal>& edgeCurvatures)"
  },
  {
    "label": "GetCurvatureOnPoints()",
    "kind": "Method",
    "detail": "Function (TArray<FReal>)",
    "insertText": "GetCurvatureOnPoints(const TConstArrayView<FVec3>& points)"
  },
  {
    "label": "GetBoundaryPoints()",
    "kind": "Method",
    "detail": "Function (TSet<int32>)",
    "insertText": "GetBoundaryPoints()"
  },
  {
    "label": "FindCoincidentVertexRemappings()",
    "kind": "Method",
    "detail": "Function (TMap<int32,int32>)",
    "insertText": "FindCoincidentVertexRemappings(const TArray<int32>& TestIndices, const TConstArrayView<FVec3>& Points)"
  },
  {
    "label": "GetVertexImportanceOrdering()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetVertexImportanceOrdering(const TConstArrayView<FVec3>& Points, const TArray<FReal>& PointCurvatures, TArray<int32>* CoincidentVertices = nullptr, const bool RestrictToLocalIndexRange = false)"
  },
  {
    "label": "GetVertexImportanceOrdering()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetVertexImportanceOrdering(const TConstArrayView<FVec3>& Points, TArray<int32>* CoincidentVertices = nullptr, const bool RestrictToLocalIndexRange = false)"
  },
  {
    "label": "RemapVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapVertices(const TArray<int32>& Order)"
  },
  {
    "label": "RemapVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapVertices(const TMap<int32, int32>& Remapping)"
  },
  {
    "label": "RemoveDuplicateElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDuplicateElements()"
  },
  {
    "label": "RemoveDegenerateElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDegenerateElements()"
  },
  {
    "label": "InitEquilateralTriangleXY()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "InitEquilateralTriangleXY(FTriangleMesh& TriMesh, TParticles<T, 3>& Particles)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (const int32 Idx = Particles .)",
    "insertText": "Size()"
  },
  {
    "label": "AddParticles()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "AddParticles(3)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "X(Idx + 0) = FVec3((T)0., (T)0.8083, (T)0.)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "X(Idx + 1) = FVec3((T)0.7, (T)-0.4041, (T)0.)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "X(Idx + 2) = FVec3((T)-0.7, (T)-0.4041, (T)0.)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<TVec3<int32>> Elements ; Elements .)",
    "insertText": "SetNum(1)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (Elements [ 0 ] = TVec3<)",
    "insertText": "int32(Idx + 0, Idx + 1, Idx + 2)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (TriMesh .)",
    "insertText": "Init(MoveTemp(Elements))"
  },
  {
    "label": "InitEquilateralTriangleYZ()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "InitEquilateralTriangleYZ(FTriangleMesh& TriMesh, TParticles<T, 3>& Particles)"
  },
  {
    "label": "SetX()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "SetX(Idx + 0, FVec3((T)0., (T)0., (T)0.8083))"
  },
  {
    "label": "SetX()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "SetX(Idx + 1, FVec3((T)0., (T)0.7, (T)-0.4041))"
  },
  {
    "label": "SetX()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "SetX(Idx + 2, FVec3((T)0., (T)-0.7, (T)-0.4041))"
  },
  {
    "label": "BuildBVH()",
    "kind": "Method",
    "detail": "Function (} template<T> using TBVHType = TAABBTree<int32,TAABBTreeLeafArray<int32,false,T>,true,T> ; template<T> void)",
    "insertText": "BuildBVH(const TConstArrayView<TVec3<T>>& Points, TBVHType<T>& BVH)"
  },
  {
    "label": "PointProximityQuery()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "PointProximityQuery(const TBVHType<T>& BVH, const TConstArrayView<TVec3<T>>& Points, const int32 PointIndex, const TVec3<T>& PointPosition, const T PointThickness, const T ThisThickness, TFunctionRef<bool (const int32 PointIndex, const int32 TriangleIndex)> BroadphaseTest, TArray<TTriangleCollisionPoint<T>>& Result)"
  },
  {
    "label": "EdgeIntersectionQuery()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "EdgeIntersectionQuery(const TBVHType<T>& BVH, const TConstArrayView<TVec3<T>>& Points, const int32 EdgeIndex, const TVec3<T>& EdgePosition1, const TVec3<T>& EdgePosition2, TFunctionRef<bool(const int32 EdgeIndex, const int32 TriangleIndex)> BroadphaseTest, TArray<TTriangleCollisionPoint<T>>& Result)"
  },
  {
    "label": "SmoothProject()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "SmoothProject(const TBVHType<T>& BVH, const TConstArrayView<FVec3>& Points, const TArray<FVec3>& PointNormals, const FVec3& Point, int32& TriangleIndex, FVec3& Weights, const int32 MaxIters=10)"
  },
  {
    "label": "BuildSpatialHash()",
    "kind": "Method",
    "detail": "Function (template<T> using TSpatialHashType = THierarchicalSpatialHash<int32,T> ; template<T> void)",
    "insertText": "BuildSpatialHash(const TConstArrayView<TVec3<T>>& Points, TSpatialHashType<T>& SpatialHash, const T MinSpatialLodSize = (T)0.)"
  },
  {
    "label": "BuildSpatialHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSpatialHash(const TConstArrayView<TVec3<FRealSingle>>& Points, TSpatialHashType<FRealSingle>& SpatialHash, const Softs::FPBDFlatWeightMap& PointThicknesses, int32 ThicknessMapIndexOffset, const FRealSingle MinSpatialLodSize = 0.f)"
  },
  {
    "label": "PointProximityQuery()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "PointProximityQuery(const TSpatialHashType<T>& SpatialHash, const TConstArrayView<TVec3<T>>& Points, const int32 PointIndex, const TVec3<T>& PointPosition, const T PointThickness, const T ThisThickness, TFunctionRef<bool(const int32 PointIndex, const int32 TriangleIndex)> BroadphaseTest, TArray<TTriangleCollisionPoint<T>>& Result)"
  },
  {
    "label": "PointProximityQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PointProximityQuery(const TSpatialHashType<FRealSingle>& SpatialHash, const TConstArrayView<TVec3<FRealSingle>>& Points, const int32 PointIndex, const TVec3<FRealSingle>& PointPosition, const FRealSingle PointThickness, const Softs::FPBDFlatWeightMap& ThisThicknesses, const FRealSingle ThisThicknessExtraMultiplier, int32 ThicknessMapIndexOffset, TFunctionRef<bool(const int32 PointIndex, const int32 TriangleIndex)> BroadphaseTest, TArray<TTriangleCollisionPoint<FRealSingle>>& Result)"
  },
  {
    "label": "PointClosestTriangleQuery()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "PointClosestTriangleQuery(const TSpatialHashType<T>& SpatialHash, const TConstArrayView<TVec3<T>>& Points, const int32 PointIndex, const TVec3<T>& PointPosition, const T PointThickness, const T ThisThickness, TFunctionRef<bool(const int32 PointIndex, const int32 TriangleIndex)> BroadphaseTest, TArray<TTriangleCollisionPoint<T>>& Result)"
  },
  {
    "label": "EdgeIntersectionQuery()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "EdgeIntersectionQuery(const TSpatialHashType<T>& SpatialHash, const TConstArrayView<TVec3<T>>& Points, const int32 EdgeIndex, const TVec3<T>& EdgePosition1, const TVec3<T>& EdgePosition2, TFunctionRef<bool(const int32 EdgeIndex, const int32 TriangleIndex)> BroadphaseTest, TArray<TTriangleCollisionPoint<T>>& Result)"
  },
  {
    "label": "InitHelper()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitHelper(const int32 StartIdx, const int32 EndIdx, const bool CullDegenerateElements=true)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const int32 LocalIdx = GlobalIdx - MStartIdx ;)",
    "insertText": "check(LocalIdx >= 0 && LocalIdx < MNumIndices)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const int32 GlobalIdx = LocalIdx + MStartIdx ;)",
    "insertText": "check(GlobalIdx >= MStartIdx && GlobalIdx < MStartIdx + MNumIndices)"
  }
]