[
  {
    "label": "DWORD()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PAGE_ALLOCATOR_INTERNALS_WIN_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PAGE_ALLOCATOR_INTERNALS_WIN_H_ # include<versionhelpers . h> # include<cstdint> # include \" base / allocator / partition_allocator / oom . h \" # include \" base / allocator / partition_allocator / page_allocator_internal . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" # include \" base / allocator / partition_allocator / partition_alloc_notreached . h \" namespace partition_alloc::internal { namespace { using DiscardVirtualMemoryFunction =)",
    "insertText": "DWORD(WINAPI*)(PVOID virtualAddress, SIZE_T size)"
  },
  {
    "label": "DiscardVirtualMemoryFunction()",
    "kind": "Method",
    "detail": "Function (DiscardVirtualMemoryFunction s_discard_virtual_memory = reinterpret_cast<)",
    "insertText": "DiscardVirtualMemoryFunction(-1)"
  },
  {
    "label": "GetAccessFlags()",
    "kind": "Method",
    "detail": "Function (} bool kHintIsAdvisory = false ; std::atomic<int32_t> s_allocPageErrorCode { ERROR_SUCCESS } ; int)",
    "insertText": "GetAccessFlags(PageAccessibilityConfiguration accessibility)"
  },
  {
    "label": "SystemAllocPagesInternal()",
    "kind": "Method",
    "detail": "Function ([ [ fallthrough ] ] ; case PageAccessibilityConfiguration::kInaccessible : return PAGE_NOACCESS ; } } uintptr_t)",
    "insertText": "SystemAllocPagesInternal(uintptr_t hint, size_t length, PageAccessibilityConfiguration accessibility, PageTag page_tag, [[maybe_unused]] int file_descriptor_for_shared_alloc)"
  },
  {
    "label": "GetAccessFlags()",
    "kind": "Method",
    "detail": "Function (DWORD access_flag =)",
    "insertText": "GetAccessFlags(accessibility)"
  },
  {
    "label": "type_flags()",
    "kind": "Method",
    "detail": "Function (const DWORD)",
    "insertText": "type_flags(accessibility.permissions != PageAccessibilityConfiguration::kInaccessible) ? (MEM_RESERVE | MEM_COMMIT)"
  },
  {
    "label": "VirtualAlloc()",
    "kind": "Method",
    "detail": "Function (void* ret =)",
    "insertText": "VirtualAlloc(reinterpret_cast<void*>(hint), length, type_flags, access_flag)"
  },
  {
    "label": "GetLastError()",
    "kind": "Method",
    "detail": "Function (s_allocPageErrorCode =)",
    "insertText": "GetLastError()"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (} return reinterpret_cast<)",
    "insertText": "uintptr_t(ret)"
  },
  {
    "label": "TrimMappingInternal()",
    "kind": "Method",
    "detail": "Function (} uintptr_t)",
    "insertText": "TrimMappingInternal(uintptr_t base_address, size_t base_length, size_t trim_length, PageAccessibilityConfiguration accessibility, size_t pre_slack, size_t post_slack)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uintptr_t ret = base_address ;)",
    "insertText": "if(pre_slack || post_slack)"
  },
  {
    "label": "FreePages()",
    "kind": "Method",
    "detail": "Function (ret = base_address + pre_slack ;)",
    "insertText": "FreePages(base_address, base_length)"
  },
  {
    "label": "SystemAllocPages()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "SystemAllocPages(ret, trim_length, accessibility, PageTag::kChromium)"
  },
  {
    "label": "TrySetSystemPagesAccessInternal()",
    "kind": "Method",
    "detail": "Function (} return ret ; } bool)",
    "insertText": "TrySetSystemPagesAccessInternal(uintptr_t address, size_t length, PageAccessibilityConfiguration accessibility)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void* ptr = reinterpret_cast<)",
    "insertText": "void(address)"
  },
  {
    "label": "SetSystemPagesAccessInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSystemPagesAccessInternal(uintptr_t address, size_t length, PageAccessibilityConfiguration accessibility)"
  },
  {
    "label": "PA_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_CHECK(static_cast<uint32_t>(ERROR_SUCCESS) == GetLastError())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(!VirtualAlloc(ptr, length, MEM_COMMIT, GetAccessFlags(accessibility)))"
  },
  {
    "label": "PA_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_CHECK(ERROR_SUCCESS == error)"
  },
  {
    "label": "FreePagesInternal()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "FreePagesInternal(uintptr_t address, size_t length)"
  },
  {
    "label": "PA_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_CHECK(VirtualFree(reinterpret_cast<void*>(address), 0, MEM_RELEASE))"
  },
  {
    "label": "DecommitSystemPagesInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecommitSystemPagesInternal(uintptr_t address, size_t length, PageAccessibilityDisposition accessibility_disposition)"
  },
  {
    "label": "SetSystemPagesAccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSystemPagesAccess(address, length, PageAccessibilityConfiguration::kInaccessible)"
  },
  {
    "label": "DecommitAndZeroSystemPagesInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecommitAndZeroSystemPagesInternal(uintptr_t address, size_t length)"
  },
  {
    "label": "PA_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_CHECK(VirtualFree(reinterpret_cast<void*>(address), length, MEM_DECOMMIT))"
  },
  {
    "label": "RecommitSystemPagesInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecommitSystemPagesInternal(uintptr_t address, size_t length, PageAccessibilityConfiguration accessibility, PageAccessibilityDisposition accessibility_disposition)"
  },
  {
    "label": "SetSystemPagesAccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSystemPagesAccess(address, length, accessibility)"
  },
  {
    "label": "TryRecommitSystemPagesInternal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryRecommitSystemPagesInternal(uintptr_t address, size_t length, PageAccessibilityConfiguration accessibility, PageAccessibilityDisposition accessibility_disposition)"
  },
  {
    "label": "DiscardSystemPagesInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DiscardSystemPagesInternal(uintptr_t address, size_t length)"
  },
  {
    "label": "DiscardVirtualMemoryFunction()",
    "kind": "Method",
    "detail": "Function (s_discard_virtual_memory = reinterpret_cast<)",
    "insertText": "DiscardVirtualMemoryFunction(GetProcAddress( GetModuleHandle(L\"Kernel32.dll\"), \"DiscardVirtualMemory\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DWORD ret = 1 ;)",
    "insertText": "if(s_discard_virtual_memory)"
  },
  {
    "label": "s_discard_virtual_memory()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "s_discard_virtual_memory(ptr, length)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ret)"
  },
  {
    "label": "PA_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_CHECK(VirtualAlloc(ptr, length, MEM_RESET, PAGE_READWRITE))"
  }
]