[
  {
    "label": "GoogCcConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GoogCcConfig"
  },
  {
    "label": "GoogCcNetworkController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GoogCcNetworkController"
  },
  {
    "label": "GoogCcStatePrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GoogCcStatePrinter"
  },
  {
    "label": "GoogCcNetworkController()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_GOOG_CC_GOOG_CC_NETWORK_CONTROL_H_ # define MODULES_CONGESTION_CONTROLLER_GOOG_CC_GOOG_CC_NETWORK_CONTROL_H_ # include<stdint . h> # include<deque> # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / network_state_predictor . h \" # include \" api / rtc_event_log / rtc_event_log . h \" # include \" api / transport / field_trial_based_config . h \" # include \" api / transport / network_control . h \" # include \" api / transport / network_types . h \" # include \" api / units / data_rate . h \" # include \" api / units / data_size . h \" # include \" api / units / timestamp . h \" # include \" modules / congestion_controller / goog_cc / acknowledged_bitrate_estimator_interface . h \" # include \" modules / congestion_controller / goog_cc / alr_detector . h \" # include \" modules / congestion_controller / goog_cc / congestion_window_pushback_controller . h \" # include \" modules / congestion_controller / goog_cc / delay_based_bwe . h \" # include \" modules / congestion_controller / goog_cc / probe_controller . h \" # include \" modules / congestion_controller / goog_cc / send_side_bandwidth_estimation . h \" # include \" rtc_base / experiments / field_trial_parser . h \" # include \" rtc_base / experiments / rate_control_settings . h \" namespace webrtc { struct GoogCcConfig { std::unique_ptr<NetworkStateEstimator> network_state_estimator = nullptr ; std::unique_ptr<NetworkStatePredictor> network_state_predictor = nullptr ; bool feedback_only = false ; } ; class GoogCcNetworkController : public NetworkControllerInterface { public :)",
    "insertText": "GoogCcNetworkController(NetworkControllerConfig config, GoogCcConfig goog_cc_config)"
  },
  {
    "label": "GoogCcNetworkController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoogCcNetworkController()"
  },
  {
    "label": "GoogCcNetworkController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoogCcNetworkController(const GoogCcNetworkController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GoogCcNetworkController&)",
    "insertText": "operator(const GoogCcNetworkController&)"
  },
  {
    "label": "OnNetworkAvailability()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnNetworkAvailability(NetworkAvailability msg)"
  },
  {
    "label": "OnNetworkRouteChange()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnNetworkRouteChange(NetworkRouteChange msg)"
  },
  {
    "label": "OnProcessInterval()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnProcessInterval(ProcessInterval msg)"
  },
  {
    "label": "OnRemoteBitrateReport()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnRemoteBitrateReport(RemoteBitrateReport msg)"
  },
  {
    "label": "OnRoundTripTimeUpdate()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnRoundTripTimeUpdate(RoundTripTimeUpdate msg)"
  },
  {
    "label": "OnSentPacket()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnSentPacket(SentPacket msg)"
  },
  {
    "label": "OnReceivedPacket()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnReceivedPacket(ReceivedPacket msg)"
  },
  {
    "label": "OnStreamsConfig()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnStreamsConfig(StreamsConfig msg)"
  },
  {
    "label": "OnTargetRateConstraints()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnTargetRateConstraints(TargetRateConstraints msg)"
  },
  {
    "label": "OnTransportLossReport()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnTransportLossReport(TransportLossReport msg)"
  },
  {
    "label": "OnTransportPacketsFeedback()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnTransportPacketsFeedback(TransportPacketsFeedback msg)"
  },
  {
    "label": "OnNetworkStateEstimate()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnNetworkStateEstimate(NetworkStateEstimate msg)"
  },
  {
    "label": "GetNetworkState()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "GetNetworkState(Timestamp at_time)"
  },
  {
    "label": "ResetConstraints()",
    "kind": "Method",
    "detail": "Function (private : class GoogCcStatePrinter ; std::vector<ProbeClusterConfig>)",
    "insertText": "ResetConstraints(TargetRateConstraints new_constraints)"
  },
  {
    "label": "ClampConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClampConstraints()"
  },
  {
    "label": "MaybeTriggerOnNetworkChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeTriggerOnNetworkChanged(NetworkControlUpdate* update, Timestamp at_time)"
  },
  {
    "label": "UpdateCongestionWindowSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCongestionWindowSize()"
  },
  {
    "label": "GetPacingRates()",
    "kind": "Method",
    "detail": "Function (PacerConfig)",
    "insertText": "GetPacingRates(Timestamp at_time)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (const FieldTrialBasedConfig trial_based_config_ ; const FieldTrialsView* const key_value_config_ ; RtcEventLog* const event_log_ ; const bool packet_feedback_only_ ; FieldTrialFlag safe_reset_on_route_change_ ; FieldTrialFlag safe_reset_acknowledged_rate_ ; const bool use_min_allocatable_as_lower_bound_ ; const bool ignore_probes_lower_than_network_estimate_ ; const bool limit_probes_lower_than_throughput_estimate_ ; const RateControlSettings rate_control_settings_ ; const bool loss_based_stable_rate_ ; const bool pace_at_max_of_bwe_and_lower_link_capacity_ ; const bool pace_at_loss_based_bwe_when_loss_ ; const std::unique_ptr<ProbeController> probe_controller_ ; const std::unique_ptr<CongestionWindowPushbackController> congestion_window_pushback_controller_ ; std::unique_ptr<SendSideBandwidthEstimation> bandwidth_estimation_ ; std::unique_ptr<AlrDetector> alr_detector_ ; std::unique_ptr<ProbeBitrateEstimator> probe_bitrate_estimator_ ; std::unique_ptr<NetworkStateEstimator> network_estimator_ ; std::unique_ptr<NetworkStatePredictor> network_state_predictor_ ; std::unique_ptr<DelayBasedBwe> delay_based_bwe_ ; std::unique_ptr<AcknowledgedBitrateEstimatorInterface> acknowledged_bitrate_estimator_ ; absl::optional<NetworkControllerConfig> initial_config_ ; DataRate min_target_rate_ =)",
    "insertText": "Zero()"
  },
  {
    "label": "PlusInfinity()",
    "kind": "Method",
    "detail": "Function (DataRate max_data_rate_ =)",
    "insertText": "PlusInfinity()"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (absl::optional<DataRate> starting_rate_ ; bool first_packet_sent_ = false ; absl::optional<NetworkStateEstimate> estimate_ ; Timestamp next_loss_update_ =)",
    "insertText": "MinusInfinity()"
  }
]