[
  {
    "label": "FOutputDeviceRedirectorState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutputDeviceRedirectorState"
  },
  {
    "label": "FBufferedLine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBufferedLine"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FOutputDeviceRedirector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDeviceRedirector"
  },
  {
    "label": "FBufferedLine()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" CoreTypes . h \" # include \" Logging / LogVerbosity . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / OutputDevice . h \" # include \" Templates / PimplPtr . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" namespace UE::Private { struct FOutputDeviceRedirectorState ; } struct FBufferedLine { TUniquePtr<TCHAR [ ]> Data ; const FLazyName Category ; const double Time ; const ELogVerbosity::Type Verbosity ; bool bExternalAllocation ;)",
    "insertText": "FBufferedLine(const TCHAR* InData, const FName& InCategory, ELogVerbosity::Type InVerbosity, const double InTime = -1)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; enum class EOutputDeviceRedirectorFlushOptions : uint32 { None = 0,Async = 1<<0,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EOutputDeviceRedirectorFlushOptions)"
  },
  {
    "label": "FOutputDeviceRedirector()",
    "kind": "Method",
    "detail": "Function (class FOutputDeviceRedirector final : public FOutputDevice { public :)",
    "insertText": "FOutputDeviceRedirector()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FOutputDeviceRedirector*)",
    "insertText": "Get()"
  },
  {
    "label": "AddOutputDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOutputDevice(FOutputDevice* OutputDevice)"
  },
  {
    "label": "RemoveOutputDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOutputDevice(FOutputDevice* OutputDevice)"
  },
  {
    "label": "IsRedirectingTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRedirectingTo(FOutputDevice* OutputDevice)"
  },
  {
    "label": "FlushThreadedLogs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushThreadedLogs(EOutputDeviceRedirectorFlushOptions Options = EOutputDeviceRedirectorFlushOptions::None)"
  },
  {
    "label": "SerializeBacklog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeBacklog(FOutputDevice* OutputDevice)"
  },
  {
    "label": "EnableBacklog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableBacklog(bool bEnable)"
  },
  {
    "label": "SetCurrentThreadAsPrimaryThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentThreadAsPrimaryThread()"
  },
  {
    "label": "TryStartDedicatedPrimaryThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryStartDedicatedPrimaryThread()"
  },
  {
    "label": "SerializeRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeRecord(const UE::FLogRecord& Record)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* Data, ELogVerbosity::Type Verbosity, const FName& Category, const double Time)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* Data, ELogVerbosity::Type Verbosity, const FName& Category)"
  },
  {
    "label": "RedirectLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedirectLog(const FName& Category, ELogVerbosity::Type Verbosity, const TCHAR* Data)"
  },
  {
    "label": "RedirectLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedirectLog(const FLazyName& Category, ELogVerbosity::Type Verbosity, const TCHAR* Data)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "Panic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Panic()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "IsBacklogEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBacklogEnabled()"
  }
]