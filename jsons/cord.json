[
  {
    "label": "Cord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cord"
  },
  {
    "label": "CordTestPeer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CordTestPeer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Cord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cord"
  },
  {
    "label": "CharIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharIterator"
  },
  {
    "label": "ChunkIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChunkIterator"
  },
  {
    "label": "Cord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cord"
  },
  {
    "label": "CharIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharIterator"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "ChunkRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChunkRange"
  },
  {
    "label": "CharIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharIterator"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "CharRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharRange"
  },
  {
    "label": "CordTestPeer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CordTestPeer"
  },
  {
    "label": "so",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "so"
  },
  {
    "label": "InlineRep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InlineRep"
  },
  {
    "label": "Cord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cord"
  },
  {
    "label": "CordTestAccess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CordTestAccess"
  },
  {
    "label": "MakeCordFromExternal()",
    "kind": "Method",
    "detail": "Function (Cord)",
    "insertText": "MakeCordFromExternal(absl::string_view, Releaser&&)"
  },
  {
    "label": "CopyCordToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCordToString(const Cord& src, std::string* dst)"
  },
  {
    "label": "Cord()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Cord(absl::string_view src)"
  },
  {
    "label": "Cord()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Cord(T&& src)"
  },
  {
    "label": "MakeCordFromExternal()",
    "kind": "Method",
    "detail": "Function (Cord)",
    "insertText": "MakeCordFromExternal(absl::string_view data, Releaser&& releaser)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const Cord& src)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(Cord&& src)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(absl::string_view src)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(T&& src)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(CordBuffer buffer)"
  },
  {
    "label": "GetAppendBuffer()",
    "kind": "Method",
    "detail": "Function (CordBuffer)",
    "insertText": "GetAppendBuffer(size_t capacity, size_t min_capacity = 16)"
  },
  {
    "label": "GetCustomAppendBuffer()",
    "kind": "Method",
    "detail": "Function (CordBuffer)",
    "insertText": "GetCustomAppendBuffer(size_t block_size, size_t capacity,\n                                   size_t min_capacity = 16)"
  },
  {
    "label": "Prepend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prepend(const Cord& src)"
  },
  {
    "label": "Prepend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prepend(absl::string_view src)"
  },
  {
    "label": "Prepend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prepend(T&& src)"
  },
  {
    "label": "Prepend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prepend(CordBuffer buffer)"
  },
  {
    "label": "RemovePrefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePrefix(size_t n)"
  },
  {
    "label": "RemoveSuffix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSuffix(size_t n)"
  },
  {
    "label": "CopyCordToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCordToString(const Cord& src, std::string* dst)"
  },
  {
    "label": "ChunkIterator()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ChunkIterator(cord_internal::CordRep* tree)"
  },
  {
    "label": "ChunkIterator()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ChunkIterator(const Cord* cord)"
  },
  {
    "label": "InitTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTree(cord_internal::CordRep* tree)"
  },
  {
    "label": "RemoveChunkPrefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChunkPrefix(size_t n)"
  },
  {
    "label": "AdvanceAndReadBytes()",
    "kind": "Method",
    "detail": "Function (Cord)",
    "insertText": "AdvanceAndReadBytes(size_t n)"
  },
  {
    "label": "AdvanceBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceBytes(size_t n)"
  },
  {
    "label": "AdvanceBytesBtree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceBytesBtree(size_t n)"
  },
  {
    "label": "AdvanceAndRead()",
    "kind": "Method",
    "detail": "Function (Cord)",
    "insertText": "AdvanceAndRead(CharIterator* it, size_t n_bytes)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance(CharIterator* it, size_t n_bytes)"
  },
  {
    "label": "ChunkRemaining()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "ChunkRemaining(const CharIterator& it)"
  },
  {
    "label": "Flatten()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "Flatten()"
  },
  {
    "label": "SetExpectedChecksum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpectedChecksum(uint32_t crc)"
  },
  {
    "label": "Cord()",
    "kind": "Method",
    "detail": "Function (constexpr)",
    "insertText": "Cord(strings_internal::StringConstant<T>)"
  },
  {
    "label": "Cord()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Cord(absl::string_view src, MethodIdentifier method)"
  },
  {
    "label": "FlattenSlowPath()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "FlattenSlowPath()"
  },
  {
    "label": "InlineRep()",
    "kind": "Method",
    "detail": "Function (constexpr)",
    "insertText": "InlineRep(cord_internal::InlineData data)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(InlineRep* rhs)"
  },
  {
    "label": "set_data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_data(const char* data, size_t n)"
  },
  {
    "label": "reduce_size()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reduce_size(size_t n)"
  },
  {
    "label": "remove_prefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remove_prefix(size_t n)"
  },
  {
    "label": "AppendArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendArray(absl::string_view src, MethodIdentifier method)"
  },
  {
    "label": "SetTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTree(CordRep* rep, const CordzUpdateScope& scope)"
  },
  {
    "label": "SetTreeOrEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTreeOrEmpty(CordRep* rep, const CordzUpdateScope& scope)"
  },
  {
    "label": "EmplaceTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmplaceTree(CordRep* rep, MethodIdentifier method)"
  },
  {
    "label": "EmplaceTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmplaceTree(CordRep* rep, const InlineData& parent,\n                     MethodIdentifier method)"
  },
  {
    "label": "CommitTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitTree(const CordRep* old_rep, CordRep* rep,\n                    const CordzUpdateScope& scope, MethodIdentifier method)"
  },
  {
    "label": "AppendTreeToInlined()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTreeToInlined(CordRep* tree, MethodIdentifier method)"
  },
  {
    "label": "AppendTreeToTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTreeToTree(CordRep* tree, MethodIdentifier method)"
  },
  {
    "label": "AppendTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTree(CordRep* tree, MethodIdentifier method)"
  },
  {
    "label": "PrependTreeToInlined()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrependTreeToInlined(CordRep* tree, MethodIdentifier method)"
  },
  {
    "label": "PrependTreeToTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrependTreeToTree(CordRep* tree, MethodIdentifier method)"
  },
  {
    "label": "PrependTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrependTree(CordRep* tree, MethodIdentifier method)"
  },
  {
    "label": "AssignSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignSlow(const InlineRep& src)"
  },
  {
    "label": "UnrefTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnrefTree()"
  },
  {
    "label": "MaybeRemoveEmptyCrcNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeRemoveEmptyCrcNode()"
  },
  {
    "label": "GetFlatAux()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFlatAux(absl::cord_internal::CordRep* rep,\n                         absl::string_view* fragment)"
  },
  {
    "label": "DestroyCordSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyCordSlow()"
  },
  {
    "label": "GenericCompare()",
    "kind": "Method",
    "detail": "Function (ResultType)",
    "insertText": "GenericCompare(const Cord& lhs, const RHS& rhs,\n                                   size_t size_to_compare)"
  },
  {
    "label": "GetFirstChunk()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "GetFirstChunk(const Cord& c)"
  },
  {
    "label": "GetFirstChunk()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "GetFirstChunk(absl::string_view sv)"
  },
  {
    "label": "AppendImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendImpl(C&& src)"
  },
  {
    "label": "AppendPrecise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendPrecise(absl::string_view src, MethodIdentifier method)"
  },
  {
    "label": "PrependPrecise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrependPrecise(absl::string_view src, MethodIdentifier method)"
  },
  {
    "label": "GetAppendBufferSlowPath()",
    "kind": "Method",
    "detail": "Function (CordBuffer)",
    "insertText": "GetAppendBufferSlowPath(size_t block_size, size_t capacity,\n                                     size_t min_capacity)"
  },
  {
    "label": "PrependArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrependArray(absl::string_view src, MethodIdentifier method)"
  },
  {
    "label": "InitializeCordRepExternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCordRepExternal(absl::string_view data, CordRepExternal* rep)"
  },
  {
    "label": "NewExternalRep()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "NewExternalRep(data, &releaser)"
  },
  {
    "label": "as_tree()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "as_tree()"
  },
  {
    "label": "FlattenSlowPath()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FlattenSlowPath()"
  },
  {
    "label": "GetAppendBufferSlowPath()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetAppendBufferSlowPath(0, capacity, min_capacity)"
  },
  {
    "label": "GetAppendBufferSlowPath()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetAppendBufferSlowPath(block_size, capacity, min_capacity)"
  },
  {
    "label": "CompareImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CompareImpl(rhs)"
  },
  {
    "label": "EqualsImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "EqualsImpl(rhs, rhs_size)"
  },
  {
    "label": "EqualsImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "EqualsImpl(rhs, rhs_size)"
  },
  {
    "label": "AdvanceBtree()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AdvanceBtree()"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (ChunkIterator)",
    "insertText": "tmp(*this)"
  },
  {
    "label": "ChunkIterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ChunkIterator(this)"
  },
  {
    "label": "ChunkIterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ChunkIterator()"
  },
  {
    "label": "ChunkRange()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ChunkRange(this)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (CharIterator)",
    "insertText": "tmp(*this)"
  },
  {
    "label": "CharIterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CharIterator(this)"
  },
  {
    "label": "CharIterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CharIterator()"
  },
  {
    "label": "CharRange()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CharRange(this)"
  },
  {
    "label": "FlatOverhead()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "FlatOverhead()"
  },
  {
    "label": "MaxFlatLength()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MaxFlatLength()"
  },
  {
    "label": "SizeofCordRepExternal()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SizeofCordRepExternal()"
  },
  {
    "label": "SizeofCordRepSubstring()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SizeofCordRepSubstring()"
  },
  {
    "label": "FlatTagToLength()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "FlatTagToLength(uint8_t tag)"
  },
  {
    "label": "LengthToTag()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "LengthToTag(size_t s)"
  }
]