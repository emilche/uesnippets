[
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "AnalysisUsage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalysisUsage"
  },
  {
    "label": "PassInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassInfo"
  },
  {
    "label": "ImmutablePass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ImmutablePass"
  },
  {
    "label": "PMStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PMStack"
  },
  {
    "label": "AnalysisResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalysisResolver"
  },
  {
    "label": "PMDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PMDataManager"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "PassManagerType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PassManagerType"
  },
  {
    "label": "PassKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PassKind"
  },
  {
    "label": "PassOptionsCompare",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PassOptionsCompare"
  },
  {
    "label": "Pass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pass"
  },
  {
    "label": "if",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "if"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "ModulePass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModulePass"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "ImmutablePass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ImmutablePass"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "if",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "if"
  },
  {
    "label": "FunctionPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionPass"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "if",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "if"
  },
  {
    "label": "BasicBlockPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlockPass"
  },
  {
    "label": "GetPassOption()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPassOption(PassOptions &O, llvm::StringRef name, llvm::StringRef *pValue)"
  },
  {
    "label": "GetPassOptionBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPassOptionBool(PassOptions &O, llvm::StringRef name, bool *pValue, bool defaultValue)"
  },
  {
    "label": "GetPassOptionUnsigned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPassOptionUnsigned(PassOptions &O, llvm::StringRef name, unsigned *pValue, unsigned defaultValue)"
  },
  {
    "label": "GetPassOptionInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPassOptionInt(PassOptions &O, llvm::StringRef name, int *pValue, int defaultValue)"
  },
  {
    "label": "GetPassOptionUInt32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPassOptionUInt32(PassOptions &O, llvm::StringRef name, uint32_t *pValue, uint32_t defaultValue)"
  },
  {
    "label": "GetPassOptionUInt64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPassOptionUInt64(PassOptions &O, llvm::StringRef name, uint64_t *pValue, uint64_t defaultValue)"
  },
  {
    "label": "GetPassOptionFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPassOptionFloat(PassOptions &O, llvm::StringRef name, float *pValue, float defaultValue)"
  },
  {
    "label": "dumpConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dumpConfig(raw_ostream &OS)"
  },
  {
    "label": "preparePassManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "preparePassManager(PMStack &)"
  },
  {
    "label": "setResolver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setResolver(AnalysisResolver *AR)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "dumpPassStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dumpPassStructure(unsigned Offset = 0)"
  },
  {
    "label": "initializePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializePass()"
  },
  {
    "label": "doInitialization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doInitialization(Function &)"
  },
  {
    "label": "doFinalization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doFinalization(Function &)"
  }
]