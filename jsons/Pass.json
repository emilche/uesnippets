[
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "AnalysisUsage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalysisUsage"
  },
  {
    "label": "PassInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassInfo"
  },
  {
    "label": "ImmutablePass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ImmutablePass"
  },
  {
    "label": "PMStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PMStack"
  },
  {
    "label": "AnalysisResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalysisResolver"
  },
  {
    "label": "PMDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PMDataManager"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "PassManagerType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PassManagerType"
  },
  {
    "label": "PassKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PassKind"
  },
  {
    "label": "PassOptionsCompare",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PassOptionsCompare"
  },
  {
    "label": "Pass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pass"
  },
  {
    "label": "ModulePass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModulePass"
  },
  {
    "label": "FunctionPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionPass"
  },
  {
    "label": "BasicBlockPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlockPass"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_PASS_H # define LLVM_PASS_H # include \" llvm / Support / Compiler . h \" # include<string> # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / StringRef . h \" namespace llvm { class BasicBlock ; class Function ; class Module ; class AnalysisUsage ; class PassInfo ; class ImmutablePass ; class PMStack ; class AnalysisResolver ; class PMDataManager ; class raw_ostream ; class StringRef ; typedef const void* AnalysisID ; enum PassManagerType { PMT_Unknown = 0,PMT_ModulePassManager = 1,PMT_CallGraphPassManager,PMT_FunctionPassManager,PMT_LoopPassManager,PMT_RegionPassManager,PMT_BasicBlockPassManager,PMT_Last } ; enum PassKind { PT_BasicBlock,PT_Region,PT_Loop,PT_Function,PT_CallGraphSCC,PT_Module,PT_PassManager } ; typedef std::pair<llvm::StringRef,llvm::StringRef> PassOption ; typedef llvm::ArrayRef<PassOption> PassOptions ; struct PassOptionsCompare { bool)",
    "insertText": "operator()(const PassOption &a, const PassOption &b)"
  },
  {
    "label": "GetPassOptionBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPassOptionBool(PassOptions &O, llvm::StringRef name, bool *pValue, bool defaultValue)"
  },
  {
    "label": "GetPassOptionUnsigned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPassOptionUnsigned(PassOptions &O, llvm::StringRef name, unsigned *pValue, unsigned defaultValue)"
  },
  {
    "label": "GetPassOptionInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPassOptionInt(PassOptions &O, llvm::StringRef name, int *pValue, int defaultValue)"
  },
  {
    "label": "GetPassOptionUInt32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPassOptionUInt32(PassOptions &O, llvm::StringRef name, uint32_t *pValue, uint32_t defaultValue)"
  },
  {
    "label": "GetPassOptionUInt64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPassOptionUInt64(PassOptions &O, llvm::StringRef name, uint64_t *pValue, uint64_t defaultValue)"
  },
  {
    "label": "GetPassOptionFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPassOptionFloat(PassOptions &O, llvm::StringRef name, float *pValue, float defaultValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (class Pass { AnalysisResolver* Resolver ; const void* PassID ; PassKind Kind ; void)",
    "insertText": "operator(const Pass&)"
  },
  {
    "label": "Pass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pass(const Pass &)"
  },
  {
    "label": "Pass()",
    "kind": "Method",
    "detail": "Function (protected : raw_ostream* OSOverride ; public :)",
    "insertText": "Pass(PassKind K, char &pid) : Resolver(nullptr), PassID(&pid), Kind(K), OSOverride(nullptr)"
  },
  {
    "label": "Pass()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Pass()"
  },
  {
    "label": "setOSOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOSOverride(raw_ostream *OS)"
  },
  {
    "label": "applyOptions()",
    "kind": "Method",
    "detail": "Function (OSOverride = OS ; } void)",
    "insertText": "applyOptions(PassOptions O)"
  },
  {
    "label": "getPassKind()",
    "kind": "Method",
    "detail": "Function (PassKind)",
    "insertText": "getPassKind()"
  },
  {
    "label": "getPassArgument()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getPassArgument()"
  },
  {
    "label": "getPassID()",
    "kind": "Method",
    "detail": "Function (AnalysisID)",
    "insertText": "getPassID()"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "createPrinterPass()",
    "kind": "Method",
    "detail": "Function (Pass*)",
    "insertText": "createPrinterPass(raw_ostream &O, const std::string &Banner)"
  },
  {
    "label": "assignPassManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignPassManager(PMStack &, PassManagerType)"
  },
  {
    "label": "preparePassManager()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "preparePassManager(PMStack &)"
  },
  {
    "label": "getPotentialPassManagerType()",
    "kind": "Method",
    "detail": "Function (PassManagerType)",
    "insertText": "getPotentialPassManagerType()"
  },
  {
    "label": "setResolver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setResolver(AnalysisResolver *AR)"
  },
  {
    "label": "getResolver()",
    "kind": "Method",
    "detail": "Function (AnalysisResolver*)",
    "insertText": "getResolver()"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "getAdjustedAnalysisPointer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "getAdjustedAnalysisPointer(AnalysisID ID)"
  },
  {
    "label": "getAsImmutablePass()",
    "kind": "Method",
    "detail": "Function (ImmutablePass*)",
    "insertText": "getAsImmutablePass()"
  },
  {
    "label": "getAsPMDataManager()",
    "kind": "Method",
    "detail": "Function (PMDataManager*)",
    "insertText": "getAsPMDataManager()"
  },
  {
    "label": "verifyAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "verifyAnalysis()"
  },
  {
    "label": "dumpPassStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dumpPassStructure(unsigned Offset = 0)"
  },
  {
    "label": "lookupPassInfo()",
    "kind": "Method",
    "detail": "Function (const PassInfo*)",
    "insertText": "lookupPassInfo(const void *TI)"
  },
  {
    "label": "lookupPassInfo()",
    "kind": "Method",
    "detail": "Function (const PassInfo*)",
    "insertText": "lookupPassInfo(StringRef Arg)"
  },
  {
    "label": "createPass()",
    "kind": "Method",
    "detail": "Function (Pass*)",
    "insertText": "createPass(AnalysisID ID)"
  },
  {
    "label": "getAnalysisIfAvailable()",
    "kind": "Method",
    "detail": "Function (template<AnalysisType> AnalysisType*)",
    "insertText": "getAnalysisIfAvailable()"
  },
  {
    "label": "mustPreserveAnalysisID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "mustPreserveAnalysisID(char &AID)"
  },
  {
    "label": "getAnalysis()",
    "kind": "Method",
    "detail": "Function (template<AnalysisType> AnalysisType&)",
    "insertText": "getAnalysis()"
  },
  {
    "label": "getAnalysis()",
    "kind": "Method",
    "detail": "Function (template<AnalysisType> AnalysisType&)",
    "insertText": "getAnalysis(Function &F)"
  },
  {
    "label": "getAnalysisID()",
    "kind": "Method",
    "detail": "Function (template<AnalysisType> AnalysisType&)",
    "insertText": "getAnalysisID(AnalysisID PI)"
  },
  {
    "label": "getAnalysisID()",
    "kind": "Method",
    "detail": "Function (template<AnalysisType> AnalysisType&)",
    "insertText": "getAnalysisID(AnalysisID PI, Function &F)"
  },
  {
    "label": "runOnModule()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnModule(Module &M)"
  },
  {
    "label": "assignPassManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignPassManager(PMStack &PMS, PassManagerType T)"
  },
  {
    "label": "ModulePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModulePass(char &pid) : Pass(PT_Module, pid)"
  },
  {
    "label": "ModulePass()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ModulePass()"
  },
  {
    "label": "initializePass()",
    "kind": "Method",
    "detail": "Function (} ; class ImmutablePass : public ModulePass { public : void)",
    "insertText": "initializePass()"
  },
  {
    "label": "ImmutablePass()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ImmutablePass()"
  },
  {
    "label": "FunctionPass()",
    "kind": "Method",
    "detail": "Function (} ; class FunctionPass : public Pass { public :)",
    "insertText": "FunctionPass(char &pid) : Pass(PT_Function, pid)"
  },
  {
    "label": "runOnFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnFunction(Function &F)"
  },
  {
    "label": "skipOptnoneFunction()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "skipOptnoneFunction(const Function &F)"
  },
  {
    "label": "BasicBlockPass()",
    "kind": "Method",
    "detail": "Function (} ; class BasicBlockPass : public Pass { public :)",
    "insertText": "BasicBlockPass(char &pid) : Pass(PT_BasicBlock, pid)"
  },
  {
    "label": "doInitialization()",
    "kind": "Method",
    "detail": "Function (using llvm::Pass::doInitialization ; using llvm::Pass::doFinalization ; bool)",
    "insertText": "doInitialization(Function &)"
  },
  {
    "label": "runOnBasicBlock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnBasicBlock(BasicBlock &BB)"
  },
  {
    "label": "doFinalization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doFinalization(Function &)"
  },
  {
    "label": "skipOptnoneFunction()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "skipOptnoneFunction(const BasicBlock &BB)"
  }
]