[
  {
    "label": "FShaderCompilerFlags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilerFlags"
  },
  {
    "label": "FShaderCompilerInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerInput"
  },
  {
    "label": "FShaderCompilerOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerOutput"
  },
  {
    "label": "FShaderCompilerEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerEnvironment"
  },
  {
    "label": "FShaderCompilerError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerError"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShaderParameterParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderParameterParser"
  },
  {
    "label": "FPlatformConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformConfiguration"
  },
  {
    "label": "FParsedShaderParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParsedShaderParameter"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ShaderParameterMetadata . h \" # include \" ShaderCore . h \" class FShaderCompilerFlags ; struct FShaderCompilerInput ; struct FShaderCompilerOutput ; struct FShaderCompilerEnvironment ; struct FShaderCompilerError ; enum class EShaderParameterType : uint8 ; enum class EBindlessConversionType : uint8 { None,SRV,UAV,Sampler,} ; enum class EShaderParameterParserConfigurationFlags { None = 0,UseStableConstantBuffer = 1<<0,SupportsBindless = 1<<1,BindlessUsesArrays = 1<<2,AlwaysParseParams = 1<<3,ReplaceGlobals = 1<<4,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EShaderParameterParserConfigurationFlags)"
  },
  {
    "label": "FPlatformConfiguration()",
    "kind": "Method",
    "detail": "Function (public : struct FPlatformConfiguration {)",
    "insertText": "FPlatformConfiguration()"
  },
  {
    "label": "FPlatformConfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPlatformConfiguration(FStringView InConstantBufferType, EShaderParameterParserConfigurationFlags InFlags = EShaderParameterParserConfigurationFlags::None) : ConstantBufferType(InConstantBufferType) , Flags(InFlags)"
  },
  {
    "label": "EnumAddFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumAddFlags(Flags, EShaderParameterParserConfigurationFlags::UseStableConstantBuffer)"
  },
  {
    "label": "GenerateBindlessAccess()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GenerateBindlessAccess(EBindlessConversionType BindlessType, FStringView FullTypeString, FStringView ArrayNameOverride, FStringView IndexString)"
  },
  {
    "label": "ReplaceGlobal()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ReplaceGlobal(FStringView FullDeclString, FStringView ParamName)"
  },
  {
    "label": "IsFound()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FStringView> ExtraSRVTypes ; TConstArrayView<FStringView> ExtraUAVTypes ; FStringView ConstantBufferType ; EShaderParameterParserConfigurationFlags Flags = EShaderParameterParserConfigurationFlags::None ; } ; struct FParsedShaderParameter { public : TEnumAsByte<EUniformBufferBaseType> BaseType { UBMT_INVALID } ; TEnumAsByte<EShaderPrecisionModifier::Type> PrecisionModifier { EShaderPrecisionModifier::Invalid } ; uint32 NumRows = 0 u ; uint32 NumColumns = 0 u ; uint32 MemberSize = 0 u ; FStringView ParsedName ; FStringView ParsedType ; FStringView ParsedArraySize ; int32 ConstantBufferOffset = 0 ; bool)",
    "insertText": "IsFound()"
  },
  {
    "label": "FShaderParameterParser()",
    "kind": "Method",
    "detail": "Function (} int32 ParsedPragmaLineOffset = 0 ; int32 ParsedLineOffset = 0 ; int32 ParsedCharOffsetStart = INDEX_NONE ; int32 ParsedCharOffsetEnd = INDEX_NONE ; EBindlessConversionType BindlessConversionType { } ; EShaderParameterType ConstantBufferParameterType { } ; bool bGloballyCoherent = false ; bool bIsBindable = false ; EShaderCodeResourceBindingType ParsedTypeDecl = EShaderCodeResourceBindingType::Invalid ; class FShaderParameterParser ; } ;)",
    "insertText": "FShaderParameterParser()"
  },
  {
    "label": "FShaderParameterParser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderParameterParser(const FPlatformConfiguration& InPlatformConfiguration)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* kBindlessSRVPrefix =)",
    "insertText": "TEXT(\"BindlessSRV_\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* kBindlessUAVPrefix =)",
    "insertText": "TEXT(\"BindlessUAV_\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* kBindlessSamplerPrefix =)",
    "insertText": "TEXT(\"BindlessSampler_\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* kBindlessSRVArrayPrefix =)",
    "insertText": "TEXT(\"SRVDescriptorHeap_\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* kBindlessUAVArrayPrefix =)",
    "insertText": "TEXT(\"UAVDescriptorHeap_\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* kBindlessSamplerArrayPrefix =)",
    "insertText": "TEXT(\"SamplerDescriptorHeap_\")"
  },
  {
    "label": "ParseAndRemoveBindlessParameterPrefix()",
    "kind": "Method",
    "detail": "Function (EShaderParameterType)",
    "insertText": "ParseAndRemoveBindlessParameterPrefix(FStringView& InName)"
  },
  {
    "label": "ParseAndRemoveBindlessParameterPrefix()",
    "kind": "Method",
    "detail": "Function (EShaderParameterType)",
    "insertText": "ParseAndRemoveBindlessParameterPrefix(FString& InName)"
  },
  {
    "label": "RemoveBindlessParameterPrefix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveBindlessParameterPrefix(FString& InName)"
  },
  {
    "label": "GetBindlessParameterPrefix()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetBindlessParameterPrefix(EShaderParameterType InShaderParameterType)"
  },
  {
    "label": "ParseAndModify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseAndModify(const FShaderCompilerInput& CompilerInput, TArray<FShaderCompilerError>& OutErrors, FString& PreprocessedShaderSource)"
  },
  {
    "label": "FindParameterInfos()",
    "kind": "Method",
    "detail": "Function (const FParsedShaderParameter&)",
    "insertText": "FindParameterInfos(const FString& ParameterName)"
  },
  {
    "label": "FindParameterInfosUnsafe()",
    "kind": "Method",
    "detail": "Function (} const FParsedShaderParameter*)",
    "insertText": "FindParameterInfosUnsafe(const FString& ParameterName)"
  },
  {
    "label": "ValidateShaderParameterType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateShaderParameterType(const FShaderCompilerInput& CompilerInput, const FString& ShaderBindingName, int32 ReflectionOffset, int32 ReflectionSize, bool bPlatformSupportsPrecisionModifier, FShaderCompilerOutput& CompilerOutput)"
  },
  {
    "label": "ValidateShaderParameterType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameterType(const FShaderCompilerInput& CompilerInput, const FString& ShaderBindingName, int32 ReflectionOffset, int32 ReflectionSize, FShaderCompilerOutput& CompilerOutput)"
  },
  {
    "label": "ValidateShaderParameterType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameterType(CompilerInput, ShaderBindingName, ReflectionOffset, ReflectionSize, false, CompilerOutput)"
  },
  {
    "label": "ValidateShaderParameterTypes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateShaderParameterTypes(const FShaderCompilerInput& CompilerInput, bool bPlatformSupportsPrecisionModifier, FShaderCompilerOutput& CompilerOutput)"
  },
  {
    "label": "ValidateShaderParameterTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameterTypes(const FShaderCompilerInput& CompilerInput, FShaderCompilerOutput& CompilerOutput)"
  },
  {
    "label": "ValidateShaderParameterTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameterTypes(CompilerInput, false, CompilerOutput)"
  },
  {
    "label": "GetParameterFileAndLine()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetParameterFileAndLine(const FParsedShaderParameter& ParsedParameter, FString& OutFile, FString& OutLine)"
  },
  {
    "label": "DidModifyShader()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DidModifyShader()"
  },
  {
    "label": "ParseParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseParameters(const FShaderParametersMetadata* RootParametersStructure, TArray<FShaderCompilerError>& OutErrors)"
  },
  {
    "label": "RemoveMovingParametersFromSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMovingParametersFromSource(FString& PreprocessedShaderSource)"
  },
  {
    "label": "ApplyBindlessModifications()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyBindlessModifications(FString& PreprocessedShaderSource)"
  },
  {
    "label": "MoveShaderParametersToRootConstantBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveShaderParametersToRootConstantBuffer(const FShaderParametersMetadata* RootParametersStructure, FString& PreprocessedShaderSource)"
  },
  {
    "label": "ExtractFileAndLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractFileAndLine(int32 PragamLineoffset, int32 LineOffset, FString& OutFile, FString& OutLine)"
  },
  {
    "label": "GenerateBindlessParameterDeclaration()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateBindlessParameterDeclaration(const FParsedShaderParameter& ParsedParameter)"
  }
]