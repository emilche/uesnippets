[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "allocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "allocator"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "_LIBCPP_DEPRECATED_IN_CXX17",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_DEPRECATED_IN_CXX17"
  },
  {
    "label": "_Unique",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Unique"
  },
  {
    "label": "__non_trivial_if",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__non_trivial_if"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___MEMORY_ALLOCATOR_H # define _LIBCPP___MEMORY_ALLOCATOR_H # include<__config> # include<__memory / allocate_at_least . h> # include<__memory / allocator_traits . h> # include<__utility / forward . h> # include<cstddef> # include<new> # include<stdexcept> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if _LIBCPP_STD_VER<= 1 7 | |)",
    "insertText": "defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_VOID_SPECIALIZATION)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if _LIBCPP_STD_VER<= 1 7 | |)",
    "insertText": "defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)"
  },
  {
    "label": "__non_trivial_if()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_DEPRECATED_IN_CXX17 typedef const void* const_pointer ; _LIBCPP_DEPRECATED_IN_CXX17 typedef const void value_type ; template<class _Up> struct _LIBCPP_DEPRECATED_IN_CXX17 rebind { typedef allocator<_Up> other ; } ; # endif } ; # endif template<bool _Cond,class _Unique> struct __non_trivial_if { } ; template<class _Unique> struct __non_trivial_if<true,_Unique> { _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR)",
    "insertText": "__non_trivial_if()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _Tp> class _LIBCPP_TEMPLATE_VIS allocator : private __non_trivial_if<! is_void<_Tp>::value,allocator<_Tp>> {)",
    "insertText": "static_assert(!is_volatile<_Tp>::value, \"std::allocator does not support volatile types\")"
  },
  {
    "label": "allocator()",
    "kind": "Method",
    "detail": "Function (public : typedef size_t size_type ; typedef ptrdiff_t difference_type ; typedef _Tp value_type ; typedef true_type propagate_on_container_move_assignment ; typedef true_type is_always_equal ; _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17)",
    "insertText": "allocator()"
  },
  {
    "label": "allocator()",
    "kind": "Method",
    "detail": "Function (template<class _Up> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17)",
    "insertText": "allocator(const allocator<_Up>&)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _Tp*)",
    "insertText": "allocate(size_t __n)"
  },
  {
    "label": "_Tp()",
    "kind": "Method",
    "detail": "Function (} else { return static_cast<)",
    "insertText": "_Tp(_VSTD::__libcpp_allocate(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)))"
  },
  {
    "label": "allocate_at_least()",
    "kind": "Method",
    "detail": "Function (} } # if _LIBCPP_STD_VER> 2 0 [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI allocation_result<_Tp*>)",
    "insertText": "allocate_at_least(size_t __n)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 void)",
    "insertText": "deallocate(_Tp* __p, size_t __n)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (::operator)",
    "insertText": "delete(__p)"
  },
  {
    "label": "__libcpp_deallocate()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "__libcpp_deallocate((void*)__p, __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp))"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp* const_pointer ; _LIBCPP_DEPRECATED_IN_CXX17 typedef _Tp& reference ; _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp& const_reference ; template<class _Up> struct _LIBCPP_DEPRECATED_IN_CXX17 rebind { typedef allocator<_Up> other ; } ; _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY pointer)",
    "insertText": "address(reference __x)"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY const_pointer)",
    "insertText": "address(const_reference __x)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_DEPRECATED_IN_CXX17 _Tp*)",
    "insertText": "allocate(size_t __n, const void*)"
  },
  {
    "label": "max_size()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY size_type)",
    "insertText": "max_size()"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} template<class _Up,class . . . _Args> _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "construct(_Up* __p, _Args&&... __args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "destroy(pointer __p)"
  },
  {
    "label": "_Tp()",
    "kind": "Method",
    "detail": "Function (__p -> ~)",
    "insertText": "_Tp()"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 void)",
    "insertText": "deallocate(const _Tp* __p, size_t __n)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (::operator)",
    "insertText": "delete(const_cast<_Tp*>(__p))"
  },
  {
    "label": "__libcpp_deallocate()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "__libcpp_deallocate((void*) const_cast<_Tp *>(__p), __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif } ; template<class _Tp,class _Up> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 bool)",
    "insertText": "operator(const allocator<_Tp>&, const allocator<_Up>&)"
  }
]