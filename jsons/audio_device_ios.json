[
  {
    "label": "FineAudioBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FineAudioBuffer"
  },
  {
    "label": "AudioDeviceIOS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDeviceIOS"
  },
  {
    "label": "RTC_FWD_DECL_OBJC_CLASS()",
    "kind": "Method",
    "detail": "Function (# ifndef SDK_OBJC_NATIVE_SRC_AUDIO_AUDIO_DEVICE_IOS_H_ # define SDK_OBJC_NATIVE_SRC_AUDIO_AUDIO_DEVICE_IOS_H_ # include<atomic> # include<memory> # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" audio_session_observer . h \" # include \" modules / audio_device / audio_device_generic . h \" # include \" rtc_base / buffer . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" # include \" sdk / objc / base / RTCMacros . h \" # include \" voice_processing_audio_unit . h \")",
    "insertText": "RTC_FWD_DECL_OBJC_CLASS(RTCNativeAudioSessionDelegateAdapter)"
  },
  {
    "label": "AudioDeviceIOS()",
    "kind": "Method",
    "detail": "Function (namespace webrtc { class FineAudioBuffer ; namespace ios_adm { class AudioDeviceIOS : public AudioDeviceGeneric,public AudioSessionObserver,public VoiceProcessingAudioUnitObserver { public :)",
    "insertText": "AudioDeviceIOS(bool bypass_voice_processing)"
  },
  {
    "label": "AudioDeviceIOS()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioDeviceIOS()"
  },
  {
    "label": "AttachAudioBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachAudioBuffer(AudioDeviceBuffer* audioBuffer)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (InitStatus)",
    "insertText": "Init()"
  },
  {
    "label": "Terminate()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Terminate()"
  },
  {
    "label": "Initialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialized()"
  },
  {
    "label": "InitPlayout()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitPlayout()"
  },
  {
    "label": "PlayoutIsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlayoutIsInitialized()"
  },
  {
    "label": "InitRecording()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitRecording()"
  },
  {
    "label": "RecordingIsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecordingIsInitialized()"
  },
  {
    "label": "StartPlayout()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StartPlayout()"
  },
  {
    "label": "StopPlayout()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StopPlayout()"
  },
  {
    "label": "Playing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Playing()"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StartRecording()"
  },
  {
    "label": "StopRecording()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StopRecording()"
  },
  {
    "label": "Recording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Recording()"
  },
  {
    "label": "PlayoutDelay()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "PlayoutDelay(uint16_t& delayMS)"
  },
  {
    "label": "GetPlayoutUnderrunCount()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "GetPlayoutUnderrunCount()"
  },
  {
    "label": "GetRecordAudioParameters()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetRecordAudioParameters(AudioParameters* params)"
  },
  {
    "label": "ActiveAudioLayer()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "ActiveAudioLayer(AudioDeviceModule::AudioLayer& audioLayer)"
  },
  {
    "label": "PlayoutIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "PlayoutIsAvailable(bool& available)"
  },
  {
    "label": "RecordingIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RecordingIsAvailable(bool& available)"
  },
  {
    "label": "PlayoutDevices()",
    "kind": "Method",
    "detail": "Function (int16_t)",
    "insertText": "PlayoutDevices()"
  },
  {
    "label": "RecordingDevices()",
    "kind": "Method",
    "detail": "Function (int16_t)",
    "insertText": "RecordingDevices()"
  },
  {
    "label": "PlayoutDeviceName()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "PlayoutDeviceName(uint16_t index, char name[kAdmMaxDeviceNameSize], char guid[kAdmMaxGuidSize])"
  },
  {
    "label": "RecordingDeviceName()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RecordingDeviceName(uint16_t index, char name[kAdmMaxDeviceNameSize], char guid[kAdmMaxGuidSize])"
  },
  {
    "label": "SetPlayoutDevice()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetPlayoutDevice(uint16_t index)"
  },
  {
    "label": "SetPlayoutDevice()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetPlayoutDevice(AudioDeviceModule::WindowsDeviceType device)"
  },
  {
    "label": "SetRecordingDevice()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetRecordingDevice(uint16_t index)"
  },
  {
    "label": "SetRecordingDevice()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetRecordingDevice(AudioDeviceModule::WindowsDeviceType device)"
  },
  {
    "label": "InitSpeaker()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitSpeaker()"
  },
  {
    "label": "SpeakerIsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpeakerIsInitialized()"
  },
  {
    "label": "InitMicrophone()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitMicrophone()"
  },
  {
    "label": "MicrophoneIsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MicrophoneIsInitialized()"
  },
  {
    "label": "SpeakerVolumeIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SpeakerVolumeIsAvailable(bool& available)"
  },
  {
    "label": "SetSpeakerVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetSpeakerVolume(uint32_t volume)"
  },
  {
    "label": "SpeakerVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SpeakerVolume(uint32_t& volume)"
  },
  {
    "label": "MaxSpeakerVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MaxSpeakerVolume(uint32_t& maxVolume)"
  },
  {
    "label": "MinSpeakerVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MinSpeakerVolume(uint32_t& minVolume)"
  },
  {
    "label": "MicrophoneVolumeIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MicrophoneVolumeIsAvailable(bool& available)"
  },
  {
    "label": "SetMicrophoneVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetMicrophoneVolume(uint32_t volume)"
  },
  {
    "label": "MicrophoneVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MicrophoneVolume(uint32_t& volume)"
  },
  {
    "label": "MaxMicrophoneVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MaxMicrophoneVolume(uint32_t& maxVolume)"
  },
  {
    "label": "MinMicrophoneVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MinMicrophoneVolume(uint32_t& minVolume)"
  },
  {
    "label": "MicrophoneMuteIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MicrophoneMuteIsAvailable(bool& available)"
  },
  {
    "label": "SetMicrophoneMute()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetMicrophoneMute(bool enable)"
  },
  {
    "label": "MicrophoneMute()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MicrophoneMute(bool& enabled)"
  },
  {
    "label": "SpeakerMuteIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SpeakerMuteIsAvailable(bool& available)"
  },
  {
    "label": "SetSpeakerMute()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetSpeakerMute(bool enable)"
  },
  {
    "label": "SpeakerMute()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SpeakerMute(bool& enabled)"
  },
  {
    "label": "StereoPlayoutIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StereoPlayoutIsAvailable(bool& available)"
  },
  {
    "label": "SetStereoPlayout()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetStereoPlayout(bool enable)"
  },
  {
    "label": "StereoPlayout()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StereoPlayout(bool& enabled)"
  },
  {
    "label": "StereoRecordingIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StereoRecordingIsAvailable(bool& available)"
  },
  {
    "label": "SetStereoRecording()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetStereoRecording(bool enable)"
  },
  {
    "label": "StereoRecording()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StereoRecording(bool& enabled)"
  },
  {
    "label": "OnInterruptionBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInterruptionBegin()"
  },
  {
    "label": "OnInterruptionEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInterruptionEnd()"
  },
  {
    "label": "OnValidRouteChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnValidRouteChange()"
  },
  {
    "label": "OnCanPlayOrRecordChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCanPlayOrRecordChange(bool can_play_or_record)"
  },
  {
    "label": "OnChangedOutputVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChangedOutputVolume()"
  },
  {
    "label": "OnDeliverRecordedData()",
    "kind": "Method",
    "detail": "Function (OSStatus)",
    "insertText": "OnDeliverRecordedData(AudioUnitRenderActionFlags* flags, const AudioTimeStamp* time_stamp, UInt32 bus_number, UInt32 num_frames, AudioBufferList* io_data)"
  },
  {
    "label": "OnGetPlayoutData()",
    "kind": "Method",
    "detail": "Function (OSStatus)",
    "insertText": "OnGetPlayoutData(AudioUnitRenderActionFlags* flags, const AudioTimeStamp* time_stamp, UInt32 bus_number, UInt32 num_frames, AudioBufferList* io_data)"
  },
  {
    "label": "IsInterrupted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInterrupted()"
  },
  {
    "label": "HandleInterruptionBegin()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleInterruptionBegin()"
  },
  {
    "label": "HandleInterruptionEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInterruptionEnd()"
  },
  {
    "label": "HandleValidRouteChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleValidRouteChange()"
  },
  {
    "label": "HandleCanPlayOrRecordChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCanPlayOrRecordChange(bool can_play_or_record)"
  },
  {
    "label": "HandleSampleRateChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSampleRateChange()"
  },
  {
    "label": "HandlePlayoutGlitchDetected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePlayoutGlitchDetected()"
  },
  {
    "label": "HandleOutputVolumeChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOutputVolumeChange()"
  },
  {
    "label": "UpdateAudioDeviceBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAudioDeviceBuffer()"
  },
  {
    "label": "SetupAudioBuffersForActiveAudioSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupAudioBuffersForActiveAudioSession()"
  },
  {
    "label": "CreateAudioUnit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateAudioUnit()"
  },
  {
    "label": "UpdateAudioUnit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAudioUnit(bool can_play_or_record)"
  },
  {
    "label": "ConfigureAudioSession()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConfigureAudioSession()"
  },
  {
    "label": "ConfigureAudioSessionLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConfigureAudioSessionLocked()"
  },
  {
    "label": "UnconfigureAudioSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnconfigureAudioSession()"
  },
  {
    "label": "InitPlayOrRecord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitPlayOrRecord()"
  },
  {
    "label": "ShutdownPlayOrRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownPlayOrRecord()"
  },
  {
    "label": "PrepareForNewStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareForNewStart()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const bool bypass_voice_processing_ ; SequenceChecker io_thread_checker_ ; rtc::Thread* thread_ ; AudioDeviceBuffer* audio_device_buffer_ ; AudioParameters playout_parameters_ ; AudioParameters record_parameters_ ; std::unique_ptr<VoiceProcessingAudioUnit> audio_unit_ ; std::unique_ptr<FineAudioBuffer> fine_audio_buffer_ ; rtc::BufferT<int16_t> record_audio_buffer_ ; std::atomic<int> recording_ ; std::atomic<int> playing_ ; bool initialized_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (int64_t last_playout_time_)",
    "insertText": "RTC_GUARDED_BY(io_thread_checker_)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<PendingTaskSafetyFlag> safety_ =)",
    "insertText": "Create()"
  }
]