[
  {
    "label": "PointerUnionTypeSelectorReturn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointerUnionTypeSelectorReturn"
  },
  {
    "label": "PointerUnionTypeSelector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointerUnionTypeSelector"
  },
  {
    "label": "PointerUnionUIntTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerUnionUIntTraits"
  },
  {
    "label": "PointerUnion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerUnion"
  },
  {
    "label": "IsPT1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsPT1"
  },
  {
    "label": "IsPT2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsPT2"
  },
  {
    "label": "UNION_DOESNT_CONTAIN_TYPE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UNION_DOESNT_CONTAIN_TYPE"
  },
  {
    "label": "PointerLikeTypeTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerLikeTypeTraits"
  },
  {
    "label": "PointerUnion3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerUnion3"
  },
  {
    "label": "IsInnerUnion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsInnerUnion"
  },
  {
    "label": "IsPT3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsPT3"
  },
  {
    "label": "PointerUnion4",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerUnion4"
  },
  {
    "label": "DenseMapInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DenseMapInfo"
  },
  {
    "label": "getAsVoidPointer()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_POINTERUNION_H # define LLVM_ADT_POINTERUNION_H # include \" llvm / ADT / DenseMapInfo . h \" # include \" llvm / ADT / PointerIntPair . h \" # include \" llvm / Support / Compiler . h \" namespace llvm { template<T> struct PointerUnionTypeSelectorReturn { typedef T Return ; } ; template<T1,T2,RET_EQ,RET_NE> struct PointerUnionTypeSelector { typedef PointerUnionTypeSelectorReturn<RET_NE>::Return Return ; } ; template<T,RET_EQ,RET_NE> struct PointerUnionTypeSelector<T,T,RET_EQ,RET_NE> { typedef PointerUnionTypeSelectorReturn<RET_EQ>::Return Return ; } ; template<T1,T2,RET_EQ,RET_NE> struct PointerUnionTypeSelectorReturn<PointerUnionTypeSelector<T1,T2,RET_EQ,RET_NE>> { typedef PointerUnionTypeSelector<T1,T2,RET_EQ,RET_NE>::Return Return ; } ; template<PT1,PT2> class PointerUnionUIntTraits { public : void*)",
    "insertText": "getAsVoidPointer(void *P)"
  },
  {
    "label": "PointerUnion()",
    "kind": "Method",
    "detail": "Function (} ; template<PT1,PT2> class PointerUnion { public : typedef PointerIntPair<void*,1,bool,PointerUnionUIntTraits<PT1,PT2>> ValTy ; private : ValTy Val ; struct IsPT1 { const int Num = 0 ; } ; struct IsPT2 { const int Num = 1 ; } ; template<T> struct UNION_DOESNT_CONTAIN_TYPE { } ; public :)",
    "insertText": "PointerUnion()"
  },
  {
    "label": "PointerUnion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PointerUnion(PT1 V) : Val( const_cast<void *>(PointerLikeTypeTraits<PT1>::getAsVoidPointer(V)))"
  },
  {
    "label": "PointerUnion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PointerUnion(PT2 V) : Val( const_cast<void *>(PointerLikeTypeTraits<PT2>::getAsVoidPointer(V)), 1)"
  },
  {
    "label": "isNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNull()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "is()",
    "kind": "Method",
    "detail": "Function (} template<T> int)",
    "insertText": "is()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef::llvm::PointerUnionTypeSelector<PT1,T,IsPT1,::llvm::PointerUnionTypeSelector<PT2,T,IsPT2,UNION_DOESNT_CONTAIN_TYPE<T>>>::Return Ty ; int TyNo = Ty::Num ; return static_cast<)",
    "insertText": "int(Val.getInt())"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "get()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(is<T>() && \"Invalid accessor called\")"
  },
  {
    "label": "dyn_cast()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "dyn_cast()"
  },
  {
    "label": "getAddrOfPtr1()",
    "kind": "Method",
    "detail": "Function (} PT1 const*)",
    "insertText": "getAddrOfPtr1()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(is<PT1>() && \"Val is not the first pointer\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(get<PT1>() == Val.getPointer() && \"Can't get the address because PointerLikeTypeTraits changes the ptr\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const PointerUnion&)",
    "insertText": "operator(std::nullptr_t)"
  },
  {
    "label": "initWithPointer()",
    "kind": "Method",
    "detail": "Function (Val .)",
    "insertText": "initWithPointer(nullptr)"
  },
  {
    "label": "initWithPointer()",
    "kind": "Method",
    "detail": "Function (Val .)",
    "insertText": "initWithPointer(const_cast<void *>(PointerLikeTypeTraits<PT1>::getAsVoidPointer(RHS)))"
  },
  {
    "label": "setPointerAndInt()",
    "kind": "Method",
    "detail": "Function (Val .)",
    "insertText": "setPointerAndInt(const_cast<void *>(PointerLikeTypeTraits<PT2>::getAsVoidPointer(RHS)), 1)"
  },
  {
    "label": "getFromOpaqueValue()",
    "kind": "Method",
    "detail": "Function (} PointerUnion)",
    "insertText": "getFromOpaqueValue(void *VP)"
  },
  {
    "label": "getFromOpaqueValue()",
    "kind": "Method",
    "detail": "Function (PointerUnion V ; V . Val =)",
    "insertText": "getFromOpaqueValue(VP)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<PT1,PT2> bool)",
    "insertText": "operator(PointerUnion<PT1, PT2> lhs, PointerUnion<PT1, PT2> rhs)"
  },
  {
    "label": "getAsVoidPointer()",
    "kind": "Method",
    "detail": "Function (} template<PT1,PT2> class PointerLikeTypeTraits<PointerUnion<PT1,PT2>> { public : void*)",
    "insertText": "getAsVoidPointer(const PointerUnion<PT1, PT2> &P)"
  },
  {
    "label": "getFromVoidPointer()",
    "kind": "Method",
    "detail": "Function (} PointerUnion<PT1,PT2>)",
    "insertText": "getFromVoidPointer(void *P)"
  },
  {
    "label": "IsInnerUnion()",
    "kind": "Method",
    "detail": "Function (} enum { NumLowBitsAvailable = PointerLikeTypeTraits<PointerUnion<PT1,PT2>::ValTy>::NumLowBitsAvailable } ; } ; template<PT1,PT2,PT3> class PointerUnion3 { public : typedef PointerUnion<PT1,PT2> InnerUnion ; typedef PointerUnion<InnerUnion,PT3> ValTy ; private : ValTy Val ; struct IsInnerUnion { ValTy Val ;)",
    "insertText": "IsInnerUnion(ValTy val) : Val(val)"
  },
  {
    "label": "IsPT3()",
    "kind": "Method",
    "detail": "Function (} } ; struct IsPT3 { ValTy Val ;)",
    "insertText": "IsPT3(ValTy val) : Val(val)"
  },
  {
    "label": "PointerUnion3()",
    "kind": "Method",
    "detail": "Function (} } ; public :)",
    "insertText": "PointerUnion3()"
  },
  {
    "label": "PointerUnion3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PointerUnion3(PT1 V)"
  },
  {
    "label": "InnerUnion()",
    "kind": "Method",
    "detail": "Function (Val =)",
    "insertText": "InnerUnion(V)"
  },
  {
    "label": "PointerUnion3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PointerUnion3(PT2 V)"
  },
  {
    "label": "PointerUnion3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PointerUnion3(PT3 V)"
  },
  {
    "label": "Ty()",
    "kind": "Method",
    "detail": "Function (typedef::llvm::PointerUnionTypeSelector<PT1,T,IsInnerUnion,::llvm::PointerUnionTypeSelector<PT2,T,IsInnerUnion,IsPT3>>::Return Ty ; return)",
    "insertText": "Ty(Val).template is<T>()"
  },
  {
    "label": "Ty()",
    "kind": "Method",
    "detail": "Function (typedef::llvm::PointerUnionTypeSelector<PT1,T,IsInnerUnion,::llvm::PointerUnionTypeSelector<PT2,T,IsInnerUnion,IsPT3>>::Return Ty ; return)",
    "insertText": "Ty(Val).template get<T>()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Val = nullptr ; return* this ; } const PointerUnion3&)",
    "insertText": "operator(const PT1 &RHS)"
  },
  {
    "label": "InnerUnion()",
    "kind": "Method",
    "detail": "Function (Val =)",
    "insertText": "InnerUnion(RHS)"
  },
  {
    "label": "getOpaqueValue()",
    "kind": "Method",
    "detail": "Function (Val = RHS ; return* this ; } void*)",
    "insertText": "getOpaqueValue()"
  },
  {
    "label": "PointerUnion4()",
    "kind": "Method",
    "detail": "Function (} enum { NumLowBitsAvailable = PointerLikeTypeTraits<PointerUnion3<PT1,PT2,PT3>::ValTy>::NumLowBitsAvailable } ; } ; template<PT1,PT2,PT3,PT4> class PointerUnion4 { public : typedef PointerUnion<PT1,PT2> InnerUnion1 ; typedef PointerUnion<PT3,PT4> InnerUnion2 ; typedef PointerUnion<InnerUnion1,InnerUnion2> ValTy ; private : ValTy Val ; public :)",
    "insertText": "PointerUnion4()"
  },
  {
    "label": "PointerUnion4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PointerUnion4(PT1 V)"
  },
  {
    "label": "InnerUnion1()",
    "kind": "Method",
    "detail": "Function (Val =)",
    "insertText": "InnerUnion1(V)"
  },
  {
    "label": "PointerUnion4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PointerUnion4(PT2 V)"
  },
  {
    "label": "PointerUnion4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PointerUnion4(PT3 V)"
  },
  {
    "label": "InnerUnion2()",
    "kind": "Method",
    "detail": "Function (Val =)",
    "insertText": "InnerUnion2(V)"
  },
  {
    "label": "PointerUnion4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PointerUnion4(PT4 V)"
  },
  {
    "label": "Ty()",
    "kind": "Method",
    "detail": "Function (typedef::llvm::PointerUnionTypeSelector<PT1,T,InnerUnion1,::llvm::PointerUnionTypeSelector<PT2,T,InnerUnion1,InnerUnion2>>::Return Ty ; return Val . template is<)",
    "insertText": "Ty() && Val.template get<Ty>().template is<T>()"
  },
  {
    "label": "Ty()",
    "kind": "Method",
    "detail": "Function (typedef::llvm::PointerUnionTypeSelector<PT1,T,InnerUnion1,::llvm::PointerUnionTypeSelector<PT2,T,InnerUnion1,InnerUnion2>>::Return Ty ; return Val . template get<)",
    "insertText": "Ty().template get<T>()"
  },
  {
    "label": "InnerUnion1()",
    "kind": "Method",
    "detail": "Function (Val =)",
    "insertText": "InnerUnion1(RHS)"
  },
  {
    "label": "InnerUnion2()",
    "kind": "Method",
    "detail": "Function (Val =)",
    "insertText": "InnerUnion2(RHS)"
  },
  {
    "label": "getEmptyKey()",
    "kind": "Method",
    "detail": "Function (} enum { NumLowBitsAvailable = PointerLikeTypeTraits<PointerUnion4<PT1,PT2,PT3,PT4>::ValTy>::NumLowBitsAvailable } ; } ; template<T,U> struct DenseMapInfo<PointerUnion<T,U>> { typedef PointerUnion<T,U> Pair ; typedef DenseMapInfo<T> FirstInfo ; typedef DenseMapInfo<U> SecondInfo ; Pair)",
    "insertText": "getEmptyKey()"
  },
  {
    "label": "getTombstoneKey()",
    "kind": "Method",
    "detail": "Function (} Pair)",
    "insertText": "getTombstoneKey()"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getHashValue(const Pair &PairVal)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (intptr_t)",
    "insertText": "key(intptr_t)PairVal.getOpaqueValue()"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEqual(const Pair &LHS, const Pair &RHS)"
  }
]