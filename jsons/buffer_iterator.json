[
  {
    "label": "BufferIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BufferIterator"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_BUFFER_ITERATOR_H_ # define BASE_CONTAINERS_BUFFER_ITERATOR_H_ # include<string . h> # include<type_traits> # include \" base / bit_cast . h \" # include \" base / containers / span . h \" # include \" base / numerics / checked_math . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { template<B> class BufferIterator { public :)",
    "insertText": "static_assert(std::is_same<std::remove_const_t<B>, char>::value || std::is_same<std::remove_const_t<B>, unsigned char>::value, \"Underlying buffer type must be char-type.\")"
  },
  {
    "label": "BufferIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BufferIterator()"
  },
  {
    "label": "BufferIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BufferIterator(B* data, size_t size) : BufferIterator(make_span(data, size))"
  },
  {
    "label": "BufferIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BufferIterator(span<B> buffer) : buffer_(buffer), remaining_(buffer)"
  },
  {
    "label": "MutableObject()",
    "kind": "Method",
    "detail": "Function (} template<T,= std::enable_if_t<std::is_trivially_copyable_v<T>>> T*)",
    "insertText": "MutableObject()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size_t size =)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* t = reinterpret_cast<)",
    "insertText": "T(remaining_.data())"
  },
  {
    "label": "subspan()",
    "kind": "Method",
    "detail": "Function (remaining_ = remaining_ .)",
    "insertText": "subspan(size)"
  },
  {
    "label": "CopyObject()",
    "kind": "Method",
    "detail": "Function (} template<T,= std::enable_if_t<std::is_trivially_copyable_v<T>>> absl::optional<T>)",
    "insertText": "CopyObject()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (absl::optional<T> t ;)",
    "insertText": "if(remaining_.size() >= sizeof(T))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(&t.emplace(), remaining_.data(), sizeof(T))"
  },
  {
    "label": "subspan()",
    "kind": "Method",
    "detail": "Function (remaining_ = remaining_ .)",
    "insertText": "subspan(sizeof(T))"
  },
  {
    "label": "MutableSpan()",
    "kind": "Method",
    "detail": "Function (} return t ; } template<T,= std::enable_if_t<std::is_trivially_copyable_v<T>>> span<T>)",
    "insertText": "MutableSpan(size_t count)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t size ;)",
    "insertText": "if(!CheckMul(sizeof(T), count).AssignIfValid(&size)) return span<T>()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (auto result = span<)",
    "insertText": "T(reinterpret_cast<T*>(remaining_.data()), count)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Seek(size_t to)"
  },
  {
    "label": "subspan()",
    "kind": "Method",
    "detail": "Function (remaining_ = buffer_ .)",
    "insertText": "subspan(to)"
  },
  {
    "label": "TruncateTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TruncateTo(size_t size)"
  },
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (remaining_ = remaining_ .)",
    "insertText": "first(size)"
  },
  {
    "label": "total_size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "total_size()"
  },
  {
    "label": "position()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "position()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(buffer_.data() <= remaining_.data())"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(remaining_.data() <= buffer_.data() + buffer_.size())"
  }
]