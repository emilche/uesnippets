[
  {
    "label": "MemoryAllocatorDump",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryAllocatorDump"
  },
  {
    "label": "MemoryAllocatorDumpGuid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryAllocatorDumpGuid"
  },
  {
    "label": "ProcessMemoryDump",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessMemoryDump"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "UsageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UsageInfo"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_SHARED_MEMORY_TRACKER_H_ # define BASE_MEMORY_SHARED_MEMORY_TRACKER_H_ # include<map> # include<string> # include \" base / base_export . h \" # include \" base / memory / shared_memory_mapping . h \" # include \" base / synchronization / lock . h \" # include \" base / trace_event / base_tracing . h \" namespace base { namespace trace_event { class MemoryAllocatorDump ; class MemoryAllocatorDumpGuid ; class ProcessMemoryDump ; } class BASE_EXPORT SharedMemoryTracker : public trace_event::MemoryDumpProvider { public : SharedMemoryTracker*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "SharedMemoryTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SharedMemoryTracker(const SharedMemoryTracker&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SharedMemoryTracker&)",
    "insertText": "operator(const SharedMemoryTracker&)"
  },
  {
    "label": "GetDumpNameForTracing()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetDumpNameForTracing(const UnguessableToken& id)"
  },
  {
    "label": "GetGlobalDumpIdForTracing()",
    "kind": "Method",
    "detail": "Function (trace_event::MemoryAllocatorDumpGuid)",
    "insertText": "GetGlobalDumpIdForTracing(const UnguessableToken& id)"
  },
  {
    "label": "GetOrCreateSharedMemoryDump()",
    "kind": "Method",
    "detail": "Function (const trace_event::MemoryAllocatorDump*)",
    "insertText": "GetOrCreateSharedMemoryDump(const SharedMemoryMapping& shared_memory, trace_event::ProcessMemoryDump* pmd)"
  },
  {
    "label": "IncrementMemoryUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementMemoryUsage(const SharedMemoryMapping& mapping)"
  },
  {
    "label": "DecrementMemoryUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementMemoryUsage(const SharedMemoryMapping& mapping)"
  },
  {
    "label": "SharedMemoryTracker()",
    "kind": "Method",
    "detail": "Function (const char kDumpRootName [ ] ; private :)",
    "insertText": "SharedMemoryTracker()"
  },
  {
    "label": "OnMemoryDump()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnMemoryDump(const trace_event::MemoryDumpArgs& args, trace_event::ProcessMemoryDump* pmd)"
  },
  {
    "label": "GetOrCreateSharedMemoryDumpInternal()",
    "kind": "Method",
    "detail": "Function (const trace_event::MemoryAllocatorDump*)",
    "insertText": "GetOrCreateSharedMemoryDumpInternal(void* mapped_memory, size_t mapped_size, const UnguessableToken& mapped_id, trace_event::ProcessMemoryDump* pmd)"
  },
  {
    "label": "UsageInfo()",
    "kind": "Method",
    "detail": "Function (struct UsageInfo {)",
    "insertText": "UsageInfo(size_t size, const UnguessableToken& id) : mapped_size(size), mapped_id(id)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} size_t mapped_size ; UnguessableToken mapped_id ; } ; Lock usages_lock_ ; std::map<void*,UsageInfo> usages_)",
    "insertText": "GUARDED_BY(usages_lock_)"
  }
]