[
  {
    "label": "ResultSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResultSink"
  },
  {
    "label": "ResultSink()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TEST_RESULT_SINK_H_ # define MODULES_AUDIO_CODING_NETEQ_TEST_RESULT_SINK_H_ # include<cstdio> # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" api / neteq / neteq . h \" # include \" rtc_base / message_digest . h \" namespace webrtc { class ResultSink { public :)",
    "insertText": "ResultSink(absl::string_view output_file)"
  },
  {
    "label": "ResultSink()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ResultSink()"
  },
  {
    "label": "AddResult()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "AddResult(const T* test_results, size_t length)"
  },
  {
    "label": "AddResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResult(const NetEqNetworkStatistics& stats)"
  },
  {
    "label": "VerifyChecksum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyChecksum(absl::string_view ref_check_sum)"
  },
  {
    "label": "ASSERT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_EQ(length, fwrite(test_results, sizeof(T), length, output_fp_))"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} digest_ ->)",
    "insertText": "Update(test_results, sizeof(T) * length)"
  }
]