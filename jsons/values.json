[
  {
    "label": "DictAdapterForMigration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DictAdapterForMigration"
  },
  {
    "label": "DictionaryValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DictionaryValue"
  },
  {
    "label": "ListValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ListValue"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "hierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "hierarchy"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Dict",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Dict"
  },
  {
    "label": "List",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "List"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "IteratorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IteratorType"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ValueView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueView"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "CloningHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CloningHelper"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ErrorCode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ErrorCode"
  },
  {
    "label": "ErrorCode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ErrorCode"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "AlwaysTakesList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlwaysTakesList(std::unique_ptr<base::ListValue> list)"
  },
  {
    "label": "AlwaysTakesDict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlwaysTakesDict(std::unique_ptr<base::DictionaryValue> dict)"
  },
  {
    "label": "AlwaysTakesList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlwaysTakesList(std::vector<base::Value> list)"
  },
  {
    "label": "AlwaysTakesListAlternative1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlwaysTakesListAlternative1(base::Value::ConstListView list)"
  },
  {
    "label": "AlwaysTakesListAlternative2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlwaysTakesListAlternative2(base::Value::ListView& list)"
  },
  {
    "label": "AlwaysTakesListAlterantive3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlwaysTakesListAlterantive3(base::Value::ListStorage)"
  },
  {
    "label": "AlwaysTakesDict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlwaysTakesDict(base::flat_map<std::string, base::Value> dict)"
  },
  {
    "label": "AlwaysTakesDictAlternative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlwaysTakesDictAlternative(base::Value::DictStorage)"
  },
  {
    "label": "AlwaysTakesList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlwaysTakesList(base::Value::List list)"
  },
  {
    "label": "AlwaysTakesDict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlwaysTakesDict(base::Value::Dict dict)"
  },
  {
    "label": "FromUniquePtrValue()",
    "kind": "Method",
    "detail": "Function (Value)",
    "insertText": "FromUniquePtrValue(std::unique_ptr<Value> val)"
  },
  {
    "label": "ToUniquePtrValue()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Value>)",
    "insertText": "ToUniquePtrValue(Value val)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Value(Type type)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Value(bool value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Value(int value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Value(double value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Value(StringPiece value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Value(StringPiece16 value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Value(const char* value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Value(const char16_t* value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Value(const std::vector<char>& value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Value(base::span<const uint8_t> value)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "end()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "erase(iterator pos)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "erase(const_iterator pos)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(Dict dict)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Remove(StringPiece key)"
  },
  {
    "label": "Extract()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "Extract(StringPiece key)"
  },
  {
    "label": "RemoveByDottedPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveByDottedPath(StringPiece path)"
  },
  {
    "label": "ExtractByDottedPath()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ExtractByDottedPath(StringPiece path)"
  },
  {
    "label": "Dict()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Dict(const flat_map<std::string, std::unique_ptr<Value>>& storage)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "end()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserve(size_t capacity)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "erase(iterator pos)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (const_iterator)",
    "insertText": "erase(const_iterator pos)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "erase(iterator first, iterator last)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (const_iterator)",
    "insertText": "erase(const_iterator first, const_iterator last)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(Value&& value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(bool value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(int value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(double value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(StringPiece value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(StringPiece16 value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const char* value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const char16_t* value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(std::string&& value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(BlobStorage&& value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(Dict&& value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(List&& value)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "Insert(const_iterator pos, Value&& value)"
  },
  {
    "label": "EraseValue()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EraseValue(const Value& value)"
  },
  {
    "label": "List()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "List(const std::vector<Value>& storage)"
  },
  {
    "label": "GetListDeprecated()",
    "kind": "Method",
    "detail": "Function (DeprecatedListView)",
    "insertText": "GetListDeprecated()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(Value&& value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(bool value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(int value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(double value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(StringPiece value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(StringPiece16 value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const char* value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(std::string&& value)"
  },
  {
    "label": "ClearList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearList()"
  },
  {
    "label": "RemoveKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveKey(StringPiece key)"
  },
  {
    "label": "ExtractKey()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ExtractKey(StringPiece key)"
  },
  {
    "label": "RemovePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePath(StringPiece path)"
  },
  {
    "label": "DictItems()",
    "kind": "Method",
    "detail": "Function (dict_iterator_proxy)",
    "insertText": "DictItems()"
  },
  {
    "label": "DictClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DictClear()"
  },
  {
    "label": "MergeDictionary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeDictionary(const Value* dictionary)"
  },
  {
    "label": "GetAsDictionary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAsDictionary(DictionaryValue** out_value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Value(const LegacyDictStorage& storage)"
  },
  {
    "label": "DoubleStorage()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "DoubleStorage(double v)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Value(absl::monostate)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Value(DoubleStorage storage)"
  },
  {
    "label": "From()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<DictionaryValue>)",
    "insertText": "From(std::unique_ptr<Value> value)"
  },
  {
    "label": "DictionaryValue()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "DictionaryValue(const LegacyDictStorage& in_dict)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Get(StringPiece path, Value** out_value)"
  },
  {
    "label": "GetDictionary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDictionary(StringPiece path, DictionaryValue** out_value)"
  },
  {
    "label": "GetList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetList(StringPiece path, ListValue** out_value)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(DictionaryValue* other)"
  },
  {
    "label": "From()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ListValue>)",
    "insertText": "From(std::unique_ptr<Value> value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(base::Value::Dict in_dict)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(base::Value::List in_list)"
  }
]