[
  {
    "label": "DictAdapterForMigration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DictAdapterForMigration"
  },
  {
    "label": "DictionaryValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DictionaryValue"
  },
  {
    "label": "ListValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ListValue"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Dict",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Dict"
  },
  {
    "label": "List",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "List"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IteratorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IteratorType"
  },
  {
    "label": "ValueView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueView"
  },
  {
    "label": "CloningHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CloningHelper"
  },
  {
    "label": "ErrorCode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ErrorCode"
  },
  {
    "label": "FromUniquePtrValue()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_VALUES_H_ # define BASE_VALUES_H_ # include<stddef . h> # include<stdint . h> # include<array> # include<initializer_list> # include<iosfwd> # include<iterator> # include<memory> # include<string> # include<utility> # include<vector> # include \" base / base_export . h \" # include \" base / bit_cast . h \" # include \" base / compiler_specific . h \" # include \" base / containers / checked_iterators . h \" # include \" base / containers / checked_range . h \" # include \" base / containers / cxx20_erase_vector . h \" # include \" base / containers / flat_map . h \" # include \" base / containers / span . h \" # include \" base / strings / string_piece . h \" # include \" base / trace_event / base_tracing_forward . h \" # include \" base / value_iterators . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" # include \" third_party / abseil - cpp / absl / types / variant . h \" namespace base { class DictAdapterForMigration ; class DictionaryValue ; class ListValue ; class BASE_EXPORT GSL_OWNER Value { public : using BlobStorage = std::vector<uint8_t> ; using DeprecatedListStorage = std::vector<Value> ; using LegacyDictStorage = flat_map<std::string,std::unique_ptr<Value>> ; using DeprecatedListView = CheckedContiguousRange<DeprecatedListStorage> ; using DeprecatedConstListView = CheckedContiguousConstRange<DeprecatedListStorage> ; using ListView = DeprecatedListView ; using ConstListView = DeprecatedConstListView ; class Dict ; class List ; enum class Type : unsigned char { NONE = 0,BOOLEAN,INTEGER,DOUBLE,STRING,BINARY,DICT,DICTIONARY = DICT,LIST,} ; Value)",
    "insertText": "FromUniquePtrValue(std::unique_ptr<Value> val)"
  },
  {
    "label": "ToUniquePtrValue()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Value>)",
    "insertText": "ToUniquePtrValue(Value val)"
  },
  {
    "label": "AsDictionaryValue()",
    "kind": "Method",
    "detail": "Function (const DictionaryValue&)",
    "insertText": "AsDictionaryValue(const Value& val)"
  },
  {
    "label": "AsListValue()",
    "kind": "Method",
    "detail": "Function (const ListValue&)",
    "insertText": "AsListValue(const Value& val)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(Value&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Value&)",
    "insertText": "operator(Value&&)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(const Value&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Value&)",
    "insertText": "operator(const Value&)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (Value)",
    "insertText": "Clone()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(Type type)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(bool value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (template<T>)",
    "insertText": "Value(const T*)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(int value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(double value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(StringPiece value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(StringPiece16 value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(const char* value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(const char16_t* value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(std::string&& value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(const std::vector<char>& value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(base::span<const uint8_t> value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(BlobStorage&& value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(Dict&& value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(List&& value)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetTypeName(Type type)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (Type)",
    "insertText": "type()"
  },
  {
    "label": "is_none()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_none()"
  },
  {
    "label": "is_bool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_bool()"
  },
  {
    "label": "is_int()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_int()"
  },
  {
    "label": "is_double()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_double()"
  },
  {
    "label": "is_string()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_string()"
  },
  {
    "label": "is_blob()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_blob()"
  },
  {
    "label": "is_dict()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_dict()"
  },
  {
    "label": "is_list()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_list()"
  },
  {
    "label": "GetIfBool()",
    "kind": "Method",
    "detail": "Function (} absl::optional<bool>)",
    "insertText": "GetIfBool()"
  },
  {
    "label": "GetIfInt()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "GetIfInt()"
  },
  {
    "label": "GetIfDouble()",
    "kind": "Method",
    "detail": "Function (absl::optional<double>)",
    "insertText": "GetIfDouble()"
  },
  {
    "label": "GetIfString()",
    "kind": "Method",
    "detail": "Function (const std::string*)",
    "insertText": "GetIfString()"
  },
  {
    "label": "GetIfBlob()",
    "kind": "Method",
    "detail": "Function (const BlobStorage*)",
    "insertText": "GetIfBlob()"
  },
  {
    "label": "GetIfDict()",
    "kind": "Method",
    "detail": "Function (const Dict*)",
    "insertText": "GetIfDict()"
  },
  {
    "label": "GetIfList()",
    "kind": "Method",
    "detail": "Function (const List*)",
    "insertText": "GetIfList()"
  },
  {
    "label": "GetBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBool()"
  },
  {
    "label": "GetInt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetInt()"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "GetString()"
  },
  {
    "label": "GetBlob()",
    "kind": "Method",
    "detail": "Function (const BlobStorage&)",
    "insertText": "GetBlob()"
  },
  {
    "label": "GetDict()",
    "kind": "Method",
    "detail": "Function (const Dict&)",
    "insertText": "GetDict()"
  },
  {
    "label": "GetList()",
    "kind": "Method",
    "detail": "Function (const List&)",
    "insertText": "GetList()"
  },
  {
    "label": "TakeString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "TakeString()"
  },
  {
    "label": "TakeDict()",
    "kind": "Method",
    "detail": "Function (Dict)",
    "insertText": "TakeDict()"
  },
  {
    "label": "TakeList()",
    "kind": "Method",
    "detail": "Function (List)",
    "insertText": "TakeList()"
  },
  {
    "label": "Dict()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT GSL_OWNER Dict { public : using iterator = detail::dict_iterator ; using const_iterator = detail::const_dict_iterator ;)",
    "insertText": "Dict()"
  },
  {
    "label": "Dict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dict(Dict&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Dict&)",
    "insertText": "operator(Dict&&)"
  },
  {
    "label": "Dict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dict(const Dict&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Dict&)",
    "insertText": "operator(const Dict&)"
  },
  {
    "label": "Dict()",
    "kind": "Method",
    "detail": "Function (template<class IteratorType>)",
    "insertText": "Dict(std::move_iterator<IteratorType> first, std::move_iterator<IteratorType> last)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<std::pair<std::string,std::unique_ptr<Value>>> values ;)",
    "insertText": "for(auto current = first; current != last; ++current)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (auto value =* current ; values .)",
    "insertText": "emplace_back(std::move(value.first), std::make_unique<Value>(std::move(value.second)))"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} storage_ = flat_map<std::string,std::unique_ptr<)",
    "insertText": "Value(std::move(values))"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "empty()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "size()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "begin()"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (const_iterator)",
    "insertText": "cbegin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "end()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (const_iterator)",
    "insertText": "cend()"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "contains(base::StringPiece key)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "erase(iterator pos)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "erase(const_iterator pos)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(Dict dict)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const Value*)",
    "insertText": "Find(StringPiece key)"
  },
  {
    "label": "FindBool()",
    "kind": "Method",
    "detail": "Function (absl::optional<bool>)",
    "insertText": "FindBool(StringPiece key)"
  },
  {
    "label": "FindInt()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "FindInt(StringPiece key)"
  },
  {
    "label": "FindDouble()",
    "kind": "Method",
    "detail": "Function (absl::optional<double>)",
    "insertText": "FindDouble(StringPiece key)"
  },
  {
    "label": "FindString()",
    "kind": "Method",
    "detail": "Function (const std::string*)",
    "insertText": "FindString(StringPiece key)"
  },
  {
    "label": "FindBlob()",
    "kind": "Method",
    "detail": "Function (const BlobStorage*)",
    "insertText": "FindBlob(StringPiece key)"
  },
  {
    "label": "FindDict()",
    "kind": "Method",
    "detail": "Function (const Dict*)",
    "insertText": "FindDict(StringPiece key)"
  },
  {
    "label": "FindList()",
    "kind": "Method",
    "detail": "Function (const List*)",
    "insertText": "FindList(StringPiece key)"
  },
  {
    "label": "EnsureDict()",
    "kind": "Method",
    "detail": "Function (Dict*)",
    "insertText": "EnsureDict(StringPiece key)"
  },
  {
    "label": "EnsureList()",
    "kind": "Method",
    "detail": "Function (List*)",
    "insertText": "EnsureList(StringPiece key)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "Set(StringPiece key, Value&& value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "Set(StringPiece key, bool value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (template<T> Value*)",
    "insertText": "Set(StringPiece, const T*)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "Set(StringPiece key, int value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "Set(StringPiece key, double value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "Set(StringPiece key, StringPiece value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "Set(StringPiece key, StringPiece16 value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "Set(StringPiece key, const char* value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "Set(StringPiece key, const char16_t* value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "Set(StringPiece key, std::string&& value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "Set(StringPiece key, BlobStorage&& value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "Set(StringPiece key, Dict&& value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "Set(StringPiece key, List&& value)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Remove(StringPiece key)"
  },
  {
    "label": "Extract()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "Extract(StringPiece key)"
  },
  {
    "label": "FindByDottedPath()",
    "kind": "Method",
    "detail": "Function (const Value*)",
    "insertText": "FindByDottedPath(StringPiece path)"
  },
  {
    "label": "FindBoolByDottedPath()",
    "kind": "Method",
    "detail": "Function (absl::optional<bool>)",
    "insertText": "FindBoolByDottedPath(StringPiece path)"
  },
  {
    "label": "FindIntByDottedPath()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "FindIntByDottedPath(StringPiece path)"
  },
  {
    "label": "FindDoubleByDottedPath()",
    "kind": "Method",
    "detail": "Function (absl::optional<double>)",
    "insertText": "FindDoubleByDottedPath(StringPiece path)"
  },
  {
    "label": "FindStringByDottedPath()",
    "kind": "Method",
    "detail": "Function (const std::string*)",
    "insertText": "FindStringByDottedPath(StringPiece path)"
  },
  {
    "label": "FindBlobByDottedPath()",
    "kind": "Method",
    "detail": "Function (const BlobStorage*)",
    "insertText": "FindBlobByDottedPath(StringPiece path)"
  },
  {
    "label": "FindDictByDottedPath()",
    "kind": "Method",
    "detail": "Function (const Dict*)",
    "insertText": "FindDictByDottedPath(StringPiece path)"
  },
  {
    "label": "FindListByDottedPath()",
    "kind": "Method",
    "detail": "Function (const List*)",
    "insertText": "FindListByDottedPath(StringPiece path)"
  },
  {
    "label": "SetByDottedPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetByDottedPath(StringPiece path, Value&& value)"
  },
  {
    "label": "SetByDottedPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetByDottedPath(StringPiece path, bool value)"
  },
  {
    "label": "SetByDottedPath()",
    "kind": "Method",
    "detail": "Function (template<T> Value*)",
    "insertText": "SetByDottedPath(StringPiece, const T*)"
  },
  {
    "label": "SetByDottedPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetByDottedPath(StringPiece path, int value)"
  },
  {
    "label": "SetByDottedPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetByDottedPath(StringPiece path, double value)"
  },
  {
    "label": "SetByDottedPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetByDottedPath(StringPiece path, StringPiece value)"
  },
  {
    "label": "SetByDottedPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetByDottedPath(StringPiece path, StringPiece16 value)"
  },
  {
    "label": "SetByDottedPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetByDottedPath(StringPiece path, const char* value)"
  },
  {
    "label": "SetByDottedPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetByDottedPath(StringPiece path, const char16_t* value)"
  },
  {
    "label": "SetByDottedPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetByDottedPath(StringPiece path, std::string&& value)"
  },
  {
    "label": "SetByDottedPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetByDottedPath(StringPiece path, BlobStorage&& value)"
  },
  {
    "label": "SetByDottedPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetByDottedPath(StringPiece path, Dict&& value)"
  },
  {
    "label": "SetByDottedPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetByDottedPath(StringPiece path, List&& value)"
  },
  {
    "label": "RemoveByDottedPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveByDottedPath(StringPiece path)"
  },
  {
    "label": "ExtractByDottedPath()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ExtractByDottedPath(StringPiece path)"
  },
  {
    "label": "DebugString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "DebugString()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(ENABLE_BASE_TRACING) void WriteIntoTrace(perfetto::TracedValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif private : BASE_EXPORT bool)",
    "insertText": "operator(const Dict& lhs, const Dict& rhs)"
  },
  {
    "label": "Dict()",
    "kind": "Method",
    "detail": "Function (Value ;)",
    "insertText": "Dict(const flat_map<std::string, std::unique_ptr<Value>>& storage)"
  },
  {
    "label": "List()",
    "kind": "Method",
    "detail": "Function (flat_map<std::string,std::unique_ptr<Value>> storage_ ; } ; class BASE_EXPORT GSL_OWNER List { public : using iterator = CheckedContiguousIterator<Value> ; using const_iterator = CheckedContiguousConstIterator<Value> ; using value_type = Value ;)",
    "insertText": "List()"
  },
  {
    "label": "List()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "List(List&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (List&)",
    "insertText": "operator(List&&)"
  },
  {
    "label": "List()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "List(const List&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (List&)",
    "insertText": "operator(const List&)"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (const Value&)",
    "insertText": "front()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (const Value&)",
    "insertText": "back()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserve(size_t capacity)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const Value&)",
    "insertText": "operator(size_t index)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "erase(iterator first, iterator last)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (const_iterator)",
    "insertText": "erase(const_iterator first, const_iterator last)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(Value&& value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(bool value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "Append(const T*)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(int value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(double value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(StringPiece value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(StringPiece16 value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const char* value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const char16_t* value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(std::string&& value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(BlobStorage&& value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(Dict&& value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(List&& value)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "Insert(const_iterator pos, Value&& value)"
  },
  {
    "label": "EraseValue()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EraseValue(const Value& value)"
  },
  {
    "label": "EraseIf()",
    "kind": "Method",
    "detail": "Function (template<Predicate> size_t)",
    "insertText": "EraseIf(Predicate predicate)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif private : BASE_EXPORT bool)",
    "insertText": "operator(const List& lhs, const List& rhs)"
  },
  {
    "label": "List()",
    "kind": "Method",
    "detail": "Function (Value ;)",
    "insertText": "List(const std::vector<Value>& storage)"
  },
  {
    "label": "GetListDeprecated()",
    "kind": "Method",
    "detail": "Function (std::vector<Value> storage_ ; } ; DeprecatedListView)",
    "insertText": "GetListDeprecated()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "Append(const T* ptr)"
  },
  {
    "label": "ClearList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearList()"
  },
  {
    "label": "FindKey()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "FindKey(StringPiece key)"
  },
  {
    "label": "FindKeyOfType()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "FindKeyOfType(StringPiece key, Type type)"
  },
  {
    "label": "FindBoolKey()",
    "kind": "Method",
    "detail": "Function (absl::optional<bool>)",
    "insertText": "FindBoolKey(StringPiece key)"
  },
  {
    "label": "FindIntKey()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "FindIntKey(StringPiece key)"
  },
  {
    "label": "FindDoubleKey()",
    "kind": "Method",
    "detail": "Function (absl::optional<double>)",
    "insertText": "FindDoubleKey(StringPiece key)"
  },
  {
    "label": "FindStringKey()",
    "kind": "Method",
    "detail": "Function (const std::string*)",
    "insertText": "FindStringKey(StringPiece key)"
  },
  {
    "label": "FindBlobKey()",
    "kind": "Method",
    "detail": "Function (const BlobStorage*)",
    "insertText": "FindBlobKey(StringPiece key)"
  },
  {
    "label": "FindDictKey()",
    "kind": "Method",
    "detail": "Function (const Value*)",
    "insertText": "FindDictKey(StringPiece key)"
  },
  {
    "label": "FindListKey()",
    "kind": "Method",
    "detail": "Function (const Value*)",
    "insertText": "FindListKey(StringPiece key)"
  },
  {
    "label": "SetKey()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetKey(StringPiece key, Value&& value)"
  },
  {
    "label": "SetBoolKey()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetBoolKey(StringPiece key, bool val)"
  },
  {
    "label": "SetIntKey()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetIntKey(StringPiece key, int val)"
  },
  {
    "label": "SetDoubleKey()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetDoubleKey(StringPiece key, double val)"
  },
  {
    "label": "SetStringKey()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetStringKey(StringPiece key, StringPiece val)"
  },
  {
    "label": "SetStringKey()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetStringKey(StringPiece key, StringPiece16 val)"
  },
  {
    "label": "SetStringKey()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetStringKey(StringPiece key, const char* val)"
  },
  {
    "label": "SetStringKey()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetStringKey(StringPiece key, std::string&& val)"
  },
  {
    "label": "RemoveKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveKey(StringPiece key)"
  },
  {
    "label": "ExtractKey()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ExtractKey(StringPiece key)"
  },
  {
    "label": "FindPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "FindPath(StringPiece path)"
  },
  {
    "label": "FindPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "FindPath(std::initializer_list<StringPiece> path)"
  },
  {
    "label": "FindPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "FindPath(span<const StringPiece> path)"
  },
  {
    "label": "FindPathOfType()",
    "kind": "Method",
    "detail": "Function (const Value*)",
    "insertText": "FindPathOfType(StringPiece path, Type type)"
  },
  {
    "label": "FindBoolPath()",
    "kind": "Method",
    "detail": "Function (absl::optional<bool>)",
    "insertText": "FindBoolPath(StringPiece path)"
  },
  {
    "label": "FindIntPath()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "FindIntPath(StringPiece path)"
  },
  {
    "label": "FindDoublePath()",
    "kind": "Method",
    "detail": "Function (absl::optional<double>)",
    "insertText": "FindDoublePath(StringPiece path)"
  },
  {
    "label": "FindStringPath()",
    "kind": "Method",
    "detail": "Function (const std::string*)",
    "insertText": "FindStringPath(StringPiece path)"
  },
  {
    "label": "FindDictPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "FindDictPath(StringPiece path)"
  },
  {
    "label": "FindListPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "FindListPath(StringPiece path)"
  },
  {
    "label": "FindPathOfType()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "FindPathOfType(std::initializer_list<StringPiece> path, Type type)"
  },
  {
    "label": "FindPathOfType()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "FindPathOfType(span<const StringPiece> path, Type type)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetPath(StringPiece path, Value&& value)"
  },
  {
    "label": "SetBoolPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetBoolPath(StringPiece path, bool value)"
  },
  {
    "label": "SetIntPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetIntPath(StringPiece path, int value)"
  },
  {
    "label": "SetDoublePath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetDoublePath(StringPiece path, double value)"
  },
  {
    "label": "SetStringPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetStringPath(StringPiece path, StringPiece value)"
  },
  {
    "label": "SetStringPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetStringPath(StringPiece path, const char* value)"
  },
  {
    "label": "SetStringPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetStringPath(StringPiece path, std::string&& value)"
  },
  {
    "label": "SetStringPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetStringPath(StringPiece path, StringPiece16 value)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetPath(std::initializer_list<StringPiece> path, Value&& value)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetPath(span<const StringPiece> path, Value&& value)"
  },
  {
    "label": "RemovePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePath(StringPiece path)"
  },
  {
    "label": "DictItems()",
    "kind": "Method",
    "detail": "Function (using dict_iterator_proxy = detail::dict_iterator_proxy ; using const_dict_iterator_proxy = detail::const_dict_iterator_proxy ; dict_iterator_proxy)",
    "insertText": "DictItems()"
  },
  {
    "label": "DictSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "DictSize()"
  },
  {
    "label": "DictEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DictEmpty()"
  },
  {
    "label": "DictClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DictClear()"
  },
  {
    "label": "MergeDictionary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeDictionary(const Value* dictionary)"
  },
  {
    "label": "GetAsDictionary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAsDictionary(DictionaryValue** out_value)"
  },
  {
    "label": "GetAsDictionary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAsDictionary(const DictionaryValue** out_value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "operator(const Value& lhs, const Value& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "operator(const Value& lhs, bool rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(bool lhs, const Value& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "operator(const Value& lhs, const T* rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "operator(const T* lhs, const Value& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "operator(const Value& lhs, int rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(int lhs, const Value& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT bool)",
    "insertText": "operator(const Value& lhs, double rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(double lhs, const Value& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT bool)",
    "insertText": "operator(const Value& lhs, StringPiece rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(StringPiece lhs, const Value& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Value& lhs, const char* rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const char* lhs, const Value& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Value& lhs, const std::string& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const std::string& lhs, const Value& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT bool)",
    "insertText": "operator(const Value& lhs, const Value::Dict& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Value::Dict& lhs, const Value& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT bool)",
    "insertText": "operator(const Value& lhs, const Value::List& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Value::List& lhs, const Value& rhs)"
  },
  {
    "label": "EstimateMemoryUsage()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "EstimateMemoryUsage()"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (# endif template<Visitor> auto)",
    "insertText": "Visit(Visitor&& visitor)"
  },
  {
    "label": "dict()",
    "kind": "Method",
    "detail": "Function (} protected : using ListStorage = DeprecatedListStorage ; const LegacyDictStorage&)",
    "insertText": "dict()"
  },
  {
    "label": "list()",
    "kind": "Method",
    "detail": "Function (} const ListStorage&)",
    "insertText": "list()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Value(const LegacyDictStorage& storage)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(LegacyDictStorage&& storage)"
  },
  {
    "label": "DoubleStorage()",
    "kind": "Method",
    "detail": "Function (private : class ValueView ; class BASE_EXPORT DoubleStorage { public :)",
    "insertText": "DoubleStorage(double v)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "double()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "operator(const DoubleStorage& lhs, const DoubleStorage& rhs)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "alignas(4) std::array<char, sizeof(double)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "Value(absl::monostate)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(DoubleStorage storage)"
  },
  {
    "label": "DictAdapterForMigration()",
    "kind": "Method",
    "detail": "Function (class CloningHelper ; absl::variant<absl::monostate,bool,int,DoubleStorage,std::string,BlobStorage,Dict,List> data_ ; } ; class BASE_EXPORT GSL_POINTER DictAdapterForMigration { public : using iterator = detail::dict_iterator ; using const_iterator = detail::const_dict_iterator ;)",
    "insertText": "DictAdapterForMigration()"
  },
  {
    "label": "DictAdapterForMigration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DictAdapterForMigration(const Value::Dict&)"
  },
  {
    "label": "DictAdapterForMigration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DictAdapterForMigration(const DictionaryValue&)"
  },
  {
    "label": "dict_for_test()",
    "kind": "Method",
    "detail": "Function (# endif const Value::Dict&)",
    "insertText": "dict_for_test()"
  },
  {
    "label": "From()",
    "kind": "Method",
    "detail": "Function (private : const Value::Dict& dict_ ; } ; class BASE_EXPORT DictionaryValue : public Value { public : std::unique_ptr<DictionaryValue>)",
    "insertText": "From(std::unique_ptr<Value> value)"
  },
  {
    "label": "DictionaryValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DictionaryValue()"
  },
  {
    "label": "DictionaryValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DictionaryValue(const LegacyDictStorage& in_dict)"
  },
  {
    "label": "DictionaryValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DictionaryValue(LegacyDictStorage&& in_dict)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "Set(StringPiece path, std::unique_ptr<Value> in_value)"
  },
  {
    "label": "SetBoolean()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetBoolean(StringPiece path, bool in_value)"
  },
  {
    "label": "SetInteger()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetInteger(StringPiece path, int in_value)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetString(StringPiece path, StringPiece in_value)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SetString(StringPiece path, const std::u16string& in_value)"
  },
  {
    "label": "SetList()",
    "kind": "Method",
    "detail": "Function (ListValue*)",
    "insertText": "SetList(StringPiece path, std::unique_ptr<ListValue> in_value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Get(StringPiece path, const Value** out_value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Get(StringPiece path, Value** out_value)"
  },
  {
    "label": "GetInteger()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInteger(StringPiece path, int* out_value)"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetString(StringPiece path, std::string* out_value)"
  },
  {
    "label": "GetDictionary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDictionary(StringPiece path, const DictionaryValue** out_value)"
  },
  {
    "label": "GetDictionary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDictionary(StringPiece path, DictionaryValue** out_value)"
  },
  {
    "label": "GetList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetList(StringPiece path, const ListValue** out_value)"
  },
  {
    "label": "GetList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetList(StringPiece path, ListValue** out_value)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(DictionaryValue* other)"
  },
  {
    "label": "ListValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ListValue()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (using Value::Append ; void)",
    "insertText": "Append(base::Value::Dict in_dict)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(base::Value::List in_list)"
  },
  {
    "label": "ValueView()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT GSL_POINTER ValueView { public :)",
    "insertText": "ValueView()"
  },
  {
    "label": "ValueView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueView(bool value) : data_view_(value)"
  },
  {
    "label": "ValueView()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "ValueView(const T*)"
  },
  {
    "label": "ValueView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueView(int value) : data_view_(value)"
  },
  {
    "label": "ValueView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueView(double value) : data_view_(absl::in_place_type_t<Value::DoubleStorage>(), value)"
  },
  {
    "label": "ValueView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueView(StringPiece value) : data_view_(value)"
  },
  {
    "label": "ValueView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueView(const char* value) : ValueView(StringPiece(value))"
  },
  {
    "label": "ValueView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueView(const std::string& value) : ValueView(StringPiece(value))"
  },
  {
    "label": "ValueView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueView(const Value::BlobStorage& value) : data_view_(value)"
  },
  {
    "label": "ValueView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueView(const Value::Dict& value) : data_view_(value)"
  },
  {
    "label": "ValueView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueView(const Value::List& value) : data_view_(value)"
  },
  {
    "label": "ValueView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueView(const Value& value)"
  },
  {
    "label": "ToValue()",
    "kind": "Method",
    "detail": "Function (} Value)",
    "insertText": "ToValue()"
  },
  {
    "label": "data_view_for_test()",
    "kind": "Method",
    "detail": "Function (private : using ViewType = absl::variant<absl::monostate,bool,int,Value::DoubleStorage,StringPiece,std::reference_wrapper<const Value::BlobStorage>,std::reference_wrapper<const Value::Dict>,std::reference_wrapper<const Value::List>> ; public : using DoubleStorageForTest = Value::DoubleStorage ; const ViewType&)",
    "insertText": "data_view_for_test()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(ValueView root)"
  },
  {
    "label": "ValueDeserializer()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT ValueDeserializer { public : ~)",
    "insertText": "ValueDeserializer()"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Value>)",
    "insertText": "Deserialize(int* error_code, std::string* error_message)"
  },
  {
    "label": "ErrorCodeIsDataError()",
    "kind": "Method",
    "detail": "Function (enum ErrorCode { kErrorCodeNoError = 0,kErrorCodeInvalidFormat = 1,kErrorCodeFirstMetadataError = 1 0 0 0,} ; bool)",
    "insertText": "ErrorCodeIsDataError(int error_code)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& out, const Value& value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& out, const Value::Dict& dict)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& out, const Value::List& list)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& out, const DictionaryValue& value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& out, const ListValue& value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& out, const Value::Type& type)"
  }
]