[
  {
    "label": "SScrollBarTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBarTrack"
  },
  {
    "label": "SSpacer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSpacer"
  },
  {
    "label": "SImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SImage"
  },
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Styling / SlateColor . h \" # include \" Input / Reply . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Styling / SlateWidgetStyleAsset . h \" class SScrollBarTrack ; class SSpacer ; class SImage ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnUserScrolled, float)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnScrollBarVisibilityChanged, EVisibility)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SScrollBarTrack ; class SScrollBar : public SBorder { public : const float DefaultUniformPadding = 2 . 0 f ;)",
    "insertText": "SLATE_BEGIN_ARGS(SScrollBar ) : _Style( &FAppStyle::Get().GetWidgetStyle<FScrollBarStyle>(\"Scrollbar\") ) , _OnUserScrolled() , _AlwaysShowScrollbar(false) , _AlwaysShowScrollbarTrack(true) #if PLATFORM_UI_HAS_MOBILE_SCROLLBARS , _HideWhenNotInUse(true) #else , _HideWhenNotInUse(false) #endif , _PreventThrottling(false) , _Orientation( Orient_Vertical ) , _DragFocusCause( EFocusCause::Mouse ) , _Thickness() , _Padding( DefaultUniformPadding)"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FScrollBarStyle, Style ) SLATE_EVENT( FOnUserScrolled, OnUserScrolled ) SLATE_EVENT( FOnScrollBarVisibilityChanged, OnScrollBarVisibilityChanged ) SLATE_ARGUMENT( bool, AlwaysShowScrollbar ) SLATE_ARGUMENT( bool, AlwaysShowScrollbarTrack ) SLATE_ARGUMENT( bool, HideWhenNotInUse ) SLATE_ARGUMENT( bool, PreventThrottling ) SLATE_ARGUMENT( EOrientation, Orientation ) SLATE_ARGUMENT( EFocusCause, DragFocusCause ) SLATE_ATTRIBUTE( FVector2D, Thickness ) SLATE_ATTRIBUTE( FMargin, Padding ) SLATE_END_ARGS() SLATE_API void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetOnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnUserScrolled(const FOnUserScrolled& InHandler)"
  },
  {
    "label": "SetOnScrollBarVisibilityChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnScrollBarVisibilityChanged(const FOnScrollBarVisibilityChanged& InHandler)"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(float InOffsetFraction, float InThumbSizeFraction, bool bCallOnUserScrolled = false)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "IsNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNeeded()"
  },
  {
    "label": "DistanceFromTop()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DistanceFromTop()"
  },
  {
    "label": "DistanceFromBottom()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DistanceFromBottom()"
  },
  {
    "label": "ThumbSizeFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ThumbSizeFraction()"
  },
  {
    "label": "ShouldBeVisible()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "ShouldBeVisible()"
  },
  {
    "label": "IsScrolling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScrolling()"
  },
  {
    "label": "GetOrientation()",
    "kind": "Method",
    "detail": "Function (EOrientation)",
    "insertText": "GetOrientation()"
  },
  {
    "label": "SetStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStyle(const FScrollBarStyle* InStyle)"
  },
  {
    "label": "InvalidateStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateStyle()"
  },
  {
    "label": "SetUserVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserVisibility(TAttribute<EVisibility> InUserVisibility)"
  },
  {
    "label": "SetDragFocusCause()",
    "kind": "Method",
    "detail": "Function (UserVisibility = InUserVisibility ; } void)",
    "insertText": "SetDragFocusCause(EFocusCause InDragFocusCause)"
  },
  {
    "label": "SetThickness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThickness(TAttribute<FVector2D> InThickness)"
  },
  {
    "label": "SetScrollBarAlwaysVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollBarAlwaysVisible(bool InAlwaysVisible)"
  },
  {
    "label": "SetScrollBarTrackAlwaysVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollBarTrackAlwaysVisible(bool InAlwaysVisible)"
  },
  {
    "label": "SetScrollbarDisabledVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollbarDisabledVisibility(EVisibility InVisibility)"
  },
  {
    "label": "AlwaysShowScrollbar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AlwaysShowScrollbar()"
  },
  {
    "label": "BeginScrolling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginScrolling()"
  },
  {
    "label": "EndScrolling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndScrolling()"
  },
  {
    "label": "SScrollBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SScrollBar()"
  },
  {
    "label": "ExecuteOnUserScrolled()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ExecuteOnUserScrolled(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetTrackOpacity()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetTrackOpacity()"
  },
  {
    "label": "GetThumbOpacity()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetThumbOpacity()"
  },
  {
    "label": "GetDragThumbImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetDragThumbImage()"
  }
]