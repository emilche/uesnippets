[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FForceFeedbackValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForceFeedbackValues"
  },
  {
    "label": "FHapticFeedbackBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHapticFeedbackBuffer"
  },
  {
    "label": "FHapticFeedbackValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHapticFeedbackValues"
  },
  {
    "label": "FInputDeviceProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputDeviceProperty"
  },
  {
    "label": "FInputDeviceLightColorProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputDeviceLightColorProperty"
  },
  {
    "label": "FInputDeviceTriggerProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputDeviceTriggerProperty"
  },
  {
    "label": "FInputDeviceTriggerResetProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputDeviceTriggerResetProperty"
  },
  {
    "label": "FInputDeviceTriggerFeedbackProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputDeviceTriggerFeedbackProperty"
  },
  {
    "label": "FInputDeviceTriggerResistanceProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputDeviceTriggerResistanceProperty"
  },
  {
    "label": "FInputDeviceTriggerVibrationProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputDeviceTriggerVibrationProperty"
  },
  {
    "label": "FInputDeviceAnalogStickProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputDeviceAnalogStickProperty"
  },
  {
    "label": "FInputDeviceAnalogStickDeadZoneProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputDeviceAnalogStickDeadZoneProperty"
  },
  {
    "label": "IInputInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputInterface"
  },
  {
    "label": "FForceFeedbackValues()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Math / Color . h \" # include \" UObject / NameTypes . h \" enum class FForceFeedbackChannelType { LEFT_LARGE,LEFT_SMALL,RIGHT_LARGE,RIGHT_SMALL } ; struct FForceFeedbackValues { float LeftLarge ; float LeftSmall ; float RightLarge ; float RightSmall ;)",
    "insertText": "FForceFeedbackValues() : LeftLarge(0.f) , LeftSmall(0.f) , RightLarge(0.f) , RightSmall(0.f)"
  },
  {
    "label": "FHapticFeedbackBuffer()",
    "kind": "Method",
    "detail": "Function (} } ; struct FHapticFeedbackBuffer { const uint8* RawData ; uint32 CurrentPtr ; int BufferLength ; int SamplesSent ; bool bFinishedPlaying ; int SamplingRate ; float ScaleFactor ; bool bUseStereo ; uint32 CurrentSampleIndex [ 2 ] ;)",
    "insertText": "FHapticFeedbackBuffer() : CurrentPtr(0) , BufferLength(0) , SamplesSent(0) , bFinishedPlaying(false) , SamplingRate(0) , bUseStereo(false)"
  },
  {
    "label": "NeedsUpdate()",
    "kind": "Method",
    "detail": "Function (} { } bool)",
    "insertText": "NeedsUpdate()"
  },
  {
    "label": "FHapticFeedbackValues()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHapticFeedbackValues(const float InFrequency, const float InAmplitude)"
  },
  {
    "label": "Frequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Frequency(InFrequency < 0.f) ? 0.f : ((InFrequency > 1.f) ? 1.f : InFrequency)"
  },
  {
    "label": "Amplitude()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Amplitude(InAmplitude < 0.f) ? 0.f : ((InAmplitude > 1.f) ? 1.f : InAmplitude)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (HapticBuffer = NULL ; } } ; enum class EInputDeviceTriggerMask : uint8 { None = 0 x00,Left = 0 x01,Right = 0 x02,All = Left | Right } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EInputDeviceTriggerMask)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0 x00,Left = 0 x01,Right = 0 x02 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EInputDeviceAnalogStickMask)"
  },
  {
    "label": "FInputDeviceProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInputDeviceProperty(FName InName) : Name(InName)"
  },
  {
    "label": "FInputDeviceLightColorProperty()",
    "kind": "Method",
    "detail": "Function (} FName Name ; } ; struct FInputDeviceLightColorProperty : public FInputDeviceProperty {)",
    "insertText": "FInputDeviceLightColorProperty() : FInputDeviceProperty(PropertyName())"
  },
  {
    "label": "FInputDeviceLightColorProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputDeviceLightColorProperty(bool bInEnable, FColor InColor) : FInputDeviceProperty(PropertyName()) , bEnable(bInEnable) , Color(InColor)"
  },
  {
    "label": "PropertyName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "PropertyName()"
  },
  {
    "label": "FInputDeviceTriggerProperty()",
    "kind": "Method",
    "detail": "Function (} bool bEnable = true ; FColor Color = FColor::White ; } ; struct FInputDeviceTriggerProperty : public FInputDeviceProperty {)",
    "insertText": "FInputDeviceTriggerProperty(FName InName) : FInputDeviceProperty(InName)"
  },
  {
    "label": "FInputDeviceTriggerResetProperty()",
    "kind": "Method",
    "detail": "Function (} EInputDeviceTriggerMask AffectedTriggers = EInputDeviceTriggerMask::None ; } ; struct FInputDeviceTriggerResetProperty : public FInputDeviceTriggerProperty {)",
    "insertText": "FInputDeviceTriggerResetProperty() : FInputDeviceTriggerProperty(PropertyName())"
  },
  {
    "label": "FInputDeviceTriggerFeedbackProperty()",
    "kind": "Method",
    "detail": "Function (} } ; struct FInputDeviceTriggerFeedbackProperty : public FInputDeviceTriggerProperty {)",
    "insertText": "FInputDeviceTriggerFeedbackProperty() : FInputDeviceTriggerProperty(PropertyName())"
  },
  {
    "label": "FInputDeviceTriggerResistanceProperty()",
    "kind": "Method",
    "detail": "Function (} int32 Position = 0 ; int32 Strengh = 0 ; } ; struct FInputDeviceTriggerResistanceProperty : public FInputDeviceTriggerProperty {)",
    "insertText": "FInputDeviceTriggerResistanceProperty() : FInputDeviceTriggerProperty(PropertyName())"
  },
  {
    "label": "FInputDeviceTriggerVibrationProperty()",
    "kind": "Method",
    "detail": "Function (} int32 StartPosition = 0 ; int32 StartStrengh = 0 ; int32 EndPosition = 0 ; int32 EndStrengh = 0 ; } ; struct FInputDeviceTriggerVibrationProperty : public FInputDeviceTriggerProperty {)",
    "insertText": "FInputDeviceTriggerVibrationProperty() : FInputDeviceTriggerProperty(PropertyName())"
  },
  {
    "label": "FInputDeviceAnalogStickProperty()",
    "kind": "Method",
    "detail": "Function (} int32 TriggerPosition = 0 ; int32 VibrationFrequency = 0 ; int32 VibrationAmplitude = 0 ; } ; struct FInputDeviceAnalogStickProperty : public FInputDeviceProperty {)",
    "insertText": "FInputDeviceAnalogStickProperty(FName InName) : FInputDeviceProperty(InName)"
  },
  {
    "label": "FInputDeviceAnalogStickProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputDeviceAnalogStickProperty(FName InName, EInputDeviceAnalogStickMask InAffectedStick) : FInputDeviceProperty(InName) , AffectedStick(InAffectedStick)"
  },
  {
    "label": "FInputDeviceAnalogStickDeadZoneProperty()",
    "kind": "Method",
    "detail": "Function (} EInputDeviceAnalogStickMask AffectedStick = EInputDeviceAnalogStickMask::None ; } ; struct FInputDeviceAnalogStickDeadZoneProperty : public FInputDeviceAnalogStickProperty {)",
    "insertText": "FInputDeviceAnalogStickDeadZoneProperty() : FInputDeviceAnalogStickProperty(PropertyName())"
  },
  {
    "label": "FInputDeviceAnalogStickDeadZoneProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputDeviceAnalogStickDeadZoneProperty(EInputDeviceAnalogStickMask InAffectedStick, float InDeadZone) : FInputDeviceAnalogStickProperty(PropertyName(), InAffectedStick) , DeadZone(InDeadZone)"
  },
  {
    "label": "IInputInterface()",
    "kind": "Method",
    "detail": "Function (} float DeadZone = 0 ; } ; class IInputInterface { public : ~)",
    "insertText": "IInputInterface()"
  },
  {
    "label": "SetForceFeedbackChannelValue()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetForceFeedbackChannelValue(int32 ControllerId, FForceFeedbackChannelType ChannelType, float Value)"
  },
  {
    "label": "SetForceFeedbackChannelValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceFeedbackChannelValues(int32 ControllerId, const FForceFeedbackValues &Values)"
  },
  {
    "label": "SetHapticFeedbackValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHapticFeedbackValues(int32 ControllerId, int32 Hand, const FHapticFeedbackValues& Values)"
  },
  {
    "label": "SetDeviceProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDeviceProperty(int32 ControllerId, const FInputDeviceProperty* Property)"
  },
  {
    "label": "SetLightColor()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetLightColor(int32 ControllerId, FColor Color)"
  },
  {
    "label": "ResetLightColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetLightColor(int32 ControllerId)"
  }
]