[
  {
    "label": "FCombinedNavGridData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCombinedNavGridData"
  },
  {
    "label": "UNavLocalGridManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavLocalGridManager"
  },
  {
    "label": "FCombinedNavGridData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Object . h \" # include \" UObject / ScriptMacros . h \" # include \" NavLocalGridData . h \" # include \" NavLocalGridManager . generated . h \" struct FCombinedNavGridData : public FNavLocalGridData { TArray<int32> SourceIds ;)",
    "insertText": "FCombinedNavGridData()"
  },
  {
    "label": "FCombinedNavGridData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCombinedNavGridData(const TArray<FNavLocalGridData>& SourceGrids) : FNavLocalGridData(SourceGrids)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(Experimental, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: AIMODULE_API int32 AddGridData(const FNavLocalGridData& GridData, bool bUpdate = true)"
  },
  {
    "label": "RemoveGridData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGridData(int32 GridId, bool bUpdate = true)"
  },
  {
    "label": "RebuildGrids()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildGrids()"
  },
  {
    "label": "FindPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPath(const FVector& Start, const FVector& End, TArray<FVector>& PathPoints)"
  },
  {
    "label": "SetCellSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCellSize(float CellSize)"
  },
  {
    "label": "GetCellSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCellSize()"
  },
  {
    "label": "GetMaxActiveSources()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxActiveSources()"
  },
  {
    "label": "GetNumSources()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSources()"
  },
  {
    "label": "GetNumGrids()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumGrids()"
  },
  {
    "label": "GetSourceData()",
    "kind": "Method",
    "detail": "Function (} const FNavLocalGridData&)",
    "insertText": "GetSourceData(int32 SourceIdx)"
  },
  {
    "label": "GetGridIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetGridIndex(const FVector& WorldLocation)"
  },
  {
    "label": "GetVersion()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetVersion()"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (UNavLocalGridManager*)",
    "insertText": "GetCurrent(UWorld* World)"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (UNavLocalGridManager*)",
    "insertText": "GetCurrent(const UObject* WorldContextObject)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (# if WITH_ENGINE UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "ProjectGrids()",
    "kind": "Method",
    "detail": "Function (# endif protected : TArray<FCombinedNavGridData> CombinedGrids ; TArray<FNavLocalGridData> SourceGrids ; float GridCellSize ; int32 VersionNum ; int32 NextGridId ; int32 MaxActiveSourceGrids ; uint32 bNeedsRebuilds : 1 ; void)",
    "insertText": "ProjectGrids(const TArray<int32>& GridIndices)"
  },
  {
    "label": "UpdateSourceGrids()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateSourceGrids()"
  }
]