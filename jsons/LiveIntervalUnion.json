[
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "SparseBitVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseBitVector"
  },
  {
    "label": "LiveIntervalUnion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveIntervalUnion"
  },
  {
    "label": "Query",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Query"
  },
  {
    "label": "Array",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Array"
  },
  {
    "label": "overlap()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_LIVEINTERVALUNION_H # define LLVM_CODEGEN_LIVEINTERVALUNION_H # include \" llvm / ADT / IntervalMap . h \" # include \" llvm / CodeGen / LiveInterval . h \" namespace llvm { class TargetRegisterInfo ; # ifndef NDEBUG template<unsigned Element> class SparseBitVector ; typedef SparseBitVector<1 2 8> LiveVirtRegBitSet ; # endif bool)",
    "insertText": "overlap(const LiveInterval::Segment &VRSeg, const IntervalMap<SlotIndex, LiveInterval*>::const_iterator &LUSeg)"
  },
  {
    "label": "LiveIntervalUnion()",
    "kind": "Method",
    "detail": "Function (} class LiveIntervalUnion { typedef IntervalMap<SlotIndex,LiveInterval*> LiveSegments ; public : typedef LiveSegments::iterator SegmentIter ; typedef LiveSegments::Allocator Allocator ; class Query ; private : unsigned Tag ; LiveSegments Segments ; public :)",
    "insertText": "LiveIntervalUnion(Allocator &a) : Tag(0), Segments(a)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} SegmentIter)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} SegmentIter)",
    "insertText": "end()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} SegmentIter)",
    "insertText": "find(SlotIndex x)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "startIndex()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "startIndex()"
  },
  {
    "label": "getMap()",
    "kind": "Method",
    "detail": "Function (} typedef LiveSegments Map ; const Map&)",
    "insertText": "getMap()"
  },
  {
    "label": "unify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unify(LiveInterval &VirtReg)"
  },
  {
    "label": "unify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unify(VirtReg, VirtReg)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "extract(LiveInterval &VirtReg, const LiveRange &Range)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extract(LiveInterval &VirtReg)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extract(VirtReg, VirtReg)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (+ + Tag ; } void)",
    "insertText": "print(raw_ostream &OS, const TargetRegisterInfo *TRI)"
  },
  {
    "label": "verify()",
    "kind": "Method",
    "detail": "Function (# ifndef NDEBUG void)",
    "insertText": "verify(LiveVirtRegBitSet& VisitedVRegs)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (# endif class Query { LiveIntervalUnion* LiveUnion ; LiveInterval* VirtReg ; LiveInterval::iterator VirtRegI ; SegmentIter LiveUnionI ; SmallVector<LiveInterval*,4> InterferingVRegs ; bool CheckedFirstInterference ; bool SeenAllInterferences ; bool SeenUnspillableVReg ; unsigned Tag,UserTag ; public :)",
    "insertText": "Query(): LiveUnion(), VirtReg(), Tag(0), UserTag(0)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Query(LiveInterval *VReg, LiveIntervalUnion *LIU): LiveUnion(LIU), VirtReg(VReg), CheckedFirstInterference(false), SeenAllInterferences(false), SeenUnspillableVReg(false)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(VReg && LIU && \"Invalid arguments\")"
  },
  {
    "label": "getTag()",
    "kind": "Method",
    "detail": "Function (LiveUnion = LIU ; VirtReg = VReg ; Tag = LIU ->)",
    "insertText": "getTag()"
  },
  {
    "label": "virtReg()",
    "kind": "Method",
    "detail": "Function (UserTag = UTag ; } LiveInterval&)",
    "insertText": "virtReg()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(VirtReg && \"uninitialized\")"
  },
  {
    "label": "collectInterferingVRegs()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "collectInterferingVRegs(unsigned MaxInterferingRegs = UINT_MAX)"
  },
  {
    "label": "isSeenInterference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSeenInterference(LiveInterval *VReg)"
  },
  {
    "label": "seenAllInterferences()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "seenAllInterferences()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const Query&)"
  },
  {
    "label": "Array()",
    "kind": "Method",
    "detail": "Function (} ; class Array { unsigned Size ; LiveIntervalUnion* LIUs ; public :)",
    "insertText": "Array() : Size(0), LIUs(nullptr)"
  },
  {
    "label": "Array()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Array()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "init(LiveIntervalUnion::Allocator&, unsigned Size)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "size()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LiveIntervalUnion&)",
    "insertText": "operator(unsigned idx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(idx < Size && \"idx out of bounds\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Idx < Size && \"Idx out of bounds\")"
  }
]