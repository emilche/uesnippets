[
  {
    "label": "FCustomCultureImplementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCustomCultureImplementation"
  },
  {
    "label": "FCustomCultureImplementation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Internationalization / Culture . h \" # include \" Internationalization / ICustomCulture . h \" # if UE_ENABLE_ICU # include \" Internationalization / ICUCulture . h \" # else # include \" Internationalization / LegacyCulture . h \" # endif class FCustomCultureImplementation : public FCultureImplementation { public :)",
    "insertText": "FCustomCultureImplementation(const TSharedRef<ICustomCulture>& InCustomCulture) #if UE_ENABLE_ICU : FCultureImplementation(InCustomCulture->GetBaseCulture()->GetName()) #else : FCultureImplementation( FText::AsCultureInvariant(InCustomCulture->GetBaseCulture()->GetDisplayName()), InCustomCulture->GetBaseCulture()->GetEnglishName(), InCustomCulture->GetBaseCulture()->GetKeyboardLayoutId(), InCustomCulture->GetBaseCulture()->GetLCID(), InCustomCulture->GetBaseCulture()->GetName(), InCustomCulture->GetBaseCulture()->GetNativeName(), InCustomCulture->GetBaseCulture()->GetUnrealLegacyThreeLetterISOLanguageName(), InCustomCulture->GetBaseCulture()->GetThreeLetterISOLanguageName(), InCustomCulture->GetBaseCulture()->GetTwoLetterISOLanguageName(), InCustomCulture->GetBaseCulture()->GetDecimalNumberFormattingRules(), InCustomCulture->GetBaseCulture()->GetPercentFormattingRules(), InCustomCulture->GetBaseCulture()->GetCurrencyFormattingRules(FString()), InCustomCulture->GetBaseCulture()->IsRightToLeft() ) #endif , CustomCulture(InCustomCulture)"
  },
  {
    "label": "FCustomCultureImplementation()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCustomCultureImplementation()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetEnglishName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetEnglishName()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetNativeName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetNativeName()"
  },
  {
    "label": "GetUnrealLegacyThreeLetterISOLanguageName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetUnrealLegacyThreeLetterISOLanguageName()"
  },
  {
    "label": "GetThreeLetterISOLanguageName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetThreeLetterISOLanguageName()"
  },
  {
    "label": "GetTwoLetterISOLanguageName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetTwoLetterISOLanguageName()"
  },
  {
    "label": "GetNativeLanguage()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetNativeLanguage()"
  },
  {
    "label": "GetNativeRegion()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetNativeRegion()"
  },
  {
    "label": "GetRegion()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetRegion()"
  },
  {
    "label": "GetScript()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetScript()"
  },
  {
    "label": "GetVariant()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetVariant()"
  },
  {
    "label": "IsRightToLeft()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRightToLeft()"
  }
]