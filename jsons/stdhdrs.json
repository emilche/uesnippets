[
  {
    "label": "rusage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rusage"
  },
  {
    "label": "timeval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timeval"
  },
  {
    "label": "timezone",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timezone"
  },
  {
    "label": "stat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stat"
  },
  {
    "label": "LineType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LineType"
  },
  {
    "label": "P4_FD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "P4_FD"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef P4STDHDRS_H # define P4STDHDRS_H # ifdef OS_VMS # define _POSIX_EXIT # endif # include<stdio . h> # include<string . h> # include<stdlib . h> # if !)",
    "insertText": "defined(OS_QNX ) && !defined( OS_VMS ) # include <memory.h> # endif # ifdef OS_NEXT # include <libc.h> # endif # if defined( NEED_ACCESS ) || \\ defined( NEED_CHDIR ) || \\ defined( NEED_EBCDIC ) || \\ defined( NEED_FILE ) || \\ defined( NEED_FSYNC ) || \\ defined( NEED_FORK ) || \\ defined( NEED_GETCWD ) || \\ defined( NEED_GETPID ) || \\ defined( NEED_GETPWUID ) || \\ defined( NEED_GETUID ) || \\ defined( NEED_BRK ) || \\ defined( NEED_READLINK ) || \\ defined( NEED_SOCKET_IO ) || \\ defined( NEED_SLEEP ) # ifndef OS_NT # include <unistd.h> # endif # ifdef OS_VAXVMS # include <unixio.h> # endif # endif # if defined( NEED_BRK ) # if !defined( OS_NT ) && !defined( MAC_MWPEF ) && \\ !defined( OS_AS400 ) && !defined( OS_MVS ) && \\ !defined( OS_LINUX ) && !defined( OS_DARWIN ) && \\ !defined( OS_MACOSX ) # define HAVE_BRK # endif # endif # if defined( NEED_LSOF ) # if defined( OS_LINUX ) || defined( OS_DARWIN ) || defined( OS_MACOSX ) # define HAVE_LSOF # endif # endif # if defined( NEED_GETUID ) # if defined ( OS_MACOSX ) || defined ( OS_DARWIN ) || defined ( __unix__ ) # define HAVE_GETUID # endif # endif # if defined( NEED_EBCDIC ) # if defined( OS_AS400 ) # include <ebcdic.h> # endif # endif # if defined( NEED_ACCESS ) || defined( NEED_CHDIR ) # if defined( OS_NT ) || defined( OS_OS2 ) # include <direct.h> # endif # endif # if defined( NEED_ERRNO)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # include<errno . h> # endif # if)",
    "insertText": "defined(NEED_FILE) || defined(NEED_FSYNC) # ifdef OS_NT # include <io.h> # endif # endif # ifdef NEED_FCNTL # include <fcntl.h> # endif # ifdef OS_NT # define WIN32_LEAN_AND_MEAN # if !defined(NTDDI_VERSION) || (NTDDI_VERSION < 0x0501000) # undef NTDDI_VERSION # define NTDDI_VERSION 0x06010000 # endif # if !defined(_WIN32_WINNT) || (_WIN32_WINNT < 0x0601) # undef _WIN32_WINNT # define _WIN32_WINNT 0x0601 # endif # if !defined(WINVER) || (WINVER < _WIN32_WINNT) # undef WINVER # define WINVER _WIN32_WINNT # endif # endif # ifdef OS_NT # define HAVE_CRITSEC # ifdef NEED_CRITSEC # define WIN32_LEAN_AND_MEAN # include <windows.h> # endif # endif # ifdef OS_NT # define HAVE_SRWLOCK # ifdef NEED_SRWLOCK # if (_MSC_VER >= 1800) && (!defined(_WIN32_WINNT) || (_WIN32_WINNT < 0x0600)) # undef _WIN32_WINNT # define _WIN32_WINNT 0x0600 # endif # include <windows.h> # include <winldap.h> # include <winber.h> # include <wincrypt.h> # include <rpc.h> # include <rpcdce.h> # endif # endif # ifdef OS_NT # define HAVE_DBGBREAK # ifdef NEED_DBGBREAK # define WIN32_LEAN_AND_MEAN # include <windows.h> # endif # endif # include \"malloc_override.h\" # ifdef MEM_DEBUG # ifdef USE_MIMALLOC # define NEED_MIMALLOC # endif # ifdef USE_SMARTHEAP # define NEED_SMARTHEAP # endif # endif # ifdef NEED_MIMALLOC # if defined( USE_MIMALLOC ) # define HAVE_MIMALLOC # endif # endif # ifdef NEED_SMARTHEAP # if defined( USE_SMARTHEAP ) # ifdef OS_NT # include <windows.h> # endif # include <smrtheap.h> # define HAVE_SMARTHEAP # endif # endif # ifdef NEED_FLOCK # ifdef OS_NT # define WIN32_LEAN_AND_MEAN # include <windows.h> # include <io.h> # endif # ifdef __unix__ # include <sys/file.h> # ifdef LOCK_UN extern \"C\" int flock( int, int)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # if !)",
    "insertText": "defined(OS_OS2 ) && !defined( MAC_MWPEF ) && \\ !defined( OS_NT ) && !defined( OS_AS400 ) && \\ !defined( OS_VMS ) # define HAVE_FORK # ifdef NEED_FORK # ifdef OS_MACHTEN # include \"/usr/include/sys/wait.h\" # endif # include <sys/wait.h> # endif # endif # if !defined( OS_BEOS ) && !defined( OS_NT ) && \\ !defined( OS_OS2 ) # define HAVE_FSYNC # endif # ifdef NEED_GETCWD # ifdef OS_NEXT # define getcwd( b, s ) getwd( b ) # endif # if defined(OS_OS2) || defined(OS_NT) extern \"C\" char *getcwd( char *buf, size_t size)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # ifdef OS_VMS # include<unixlib . h> # endif # endif # if !)",
    "insertText": "defined(OS_OS2) # define HAVE_GETHOSTNAME # ifdef NEED_GETHOSTNAME # ifdef OS_BEOS # include <net/netdb.h> # endif # ifdef OS_VMS # include <socket.h> # endif # if defined(OS_PTX) || \\ defined(OS_QNX) || \\ defined(OS_AIX32) || \\ defined(OS_NCR) || \\ defined(OS_UNIXWARE2) extern \"C\" int gethostname( char * name, int namelen)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(OS_NT) extern \"C\" int __stdcall gethostname( char * name, int namelen)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifdef NEED_GETPID # ifdef OS_NT # define WIN32_LEAN_AND_MEAN # include<windows . h> # else # if)",
    "insertText": "defined(OS_OS2) # include <process.h> # endif # endif # endif # if !defined( OS_VMS ) && !defined( OS_NT ) && !defined( OS_BEOS ) && \\ !defined( MAC_MWPEF ) && !defined( OS_OS2 ) # define HAVE_GETPWUID # ifdef NEED_GETPWUID # include <pwd.h> # endif # endif # ifdef NEED_IOCTL # ifndef OS_NT # include <sys/ioctl.h> # endif # endif # ifdef ACCESSPERMS #define PERMSMASK ACCESSPERMS # else #ifdef S_IAMB #define PERMSMASK S_IAMB #else #define PERMSMASK 0x1FF #endif # endif # if defined(NEED_MKDIR) || defined(NEED_STAT) || defined(NEED_CHMOD) # ifdef OS_OS2 # include <direct.h> # endif # include <sys/stat.h> # ifndef S_ISLNK # define S_ISLNK(m) (((m)&S_IFMT)==S_IFLNK) # endif # ifndef S_ISDIR # define S_ISDIR(m) (((m)&S_IFMT)==S_IFDIR) # define S_ISREG(m) (((m)&S_IFMT)==S_IFREG) # endif # ifdef OS_NT # define PERM_0222 (S_IWRITE) # define PERM_0266 (S_IWRITE) # define PERM_0666 (S_IRUSR|S_IWRITE) # define PERM_0777 (S_IRUSR|S_IWRITE|S_IEXEC) # define PERM_0700 ( S_IRUSR | S_IWUSR | S_IXUSR ) # define PERM_0600 ( S_IRUSR | S_IWUSR ) # define PERM_0500 ( S_IRUSR | S_IXUSR ) # define PERM_0400 ( S_IRUSR ) # ifndef S_IRUSR # define S_IRUSR S_IREAD # define S_IWUSR S_IWRITE # define S_IXUSR S_IEXEC # endif # endif # ifndef PERM_0222 # define PERM_0222 (S_IWUSR | S_IWGRP | S_IWOTH) # define PERM_0266 (S_IWUSR | (S_IRGRP|S_IWGRP) | (S_IROTH|S_IWOTH)) # define PERM_0666 ((S_IRUSR|S_IWUSR) | (S_IRGRP|S_IWGRP) | (S_IROTH|S_IWOTH)) # define PERM_0777 (S_IRWXU | S_IRWXG | S_IRWXO) # define PERM_0700 ( S_IRWXU ) # define PERM_0600 ( S_IRUSR | S_IWUSR ) # define PERM_0500 ( S_IRUSR | S_IXUSR ) # define PERM_0400 ( S_IRUSR ) # endif # endif # if defined(NEED_STATVFS) # ifdef OS_NT # else # include <sys/statvfs.h> # endif # ifdef OS_SOLARIS # define HAVE_STATVFS_BASETYPE # endif # endif # if defined(NEED_STATFS) # ifdef OS_LINUX # define HAVE_STATFS # include <sys/statfs.h> # endif # if defined(OS_DARWIN) || defined(OS_MACOSX) || defined(OS_FREEBSD) # define HAVE_STATFS # define HAVE_STATFS_FSTYPENAME # include <sys/param.h> # include <sys/mount.h> # endif # endif # if !defined( OS_AS400 ) && !defined( OS_BEOS ) && \\ !defined( OS_HPUX68K ) && \\ !defined( OS_MACHTEN ) && !defined( OS_MVS ) && \\ !defined( OS_VMS62 ) && !defined( OS_OS2 ) && \\ !defined( OS_NEXT ) && !defined( OS_NT ) && \\ !defined( OS_QNX ) && !defined( OS_UNICOS ) && \\ !defined( OS_MPEIX ) && !defined( OS_QNXNTO ) && \\ !defined( OS_ZETA ) && \\ !defined( OS_AIX53 ) && !defined( OS_LINUXIA64 ) # define HAVE_MMAP # ifdef NEED_MMAP # ifdef OS_HPUX9 extern \"C\" caddr_t mmap(const caddr_t, size_t, int, int, int, off_t)"
  },
  {
    "label": "munmap()",
    "kind": "Method",
    "detail": "Function (\" C \" int)",
    "insertText": "munmap(const caddr_t, size_t)"
  },
  {
    "label": "pclose()",
    "kind": "Method",
    "detail": "Function (# endif # include<sys / mman . h> # define HAVE_MMAP_BTREES # endif # endif # ifdef NEED_OPENDIR # include<dirent . h> # endif # ifdef NEED_POPEN # ifdef OS_NT # define popen _popen # define pclose _pclose # endif # ifdef OS_MVS \" C \" int)",
    "insertText": "pclose(FILE *)"
  },
  {
    "label": "popen()",
    "kind": "Method",
    "detail": "Function (\" C \" FILE*)",
    "insertText": "popen(const char *, const char *)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifdef NEED_SIGNAL # ifdef OS_OSF # include \" / usr / include / sys / signal . h \" # else # include<signal . h> # endif # if)",
    "insertText": "defined(OS_NEXT ) || defined( OS_MPEIX ) # undef SIG_IGN # undef SIG_DFL # define SIG_DFL (void (*)(int))0 # define SIG_IGN (void (*)(int))1 # endif # endif # ifdef NEED_SOCKETPAIR # if defined( OS_NT ) # define WINDOWS_LEAN_AND_MEAN # include <windows.h> # include <process.h> # elif defined( OS_BEOS ) # include <net/socket.h> # else # include <sys/socket.h> # endif # if defined( AF_UNIX ) && \\ !defined( OS_AS400 ) && \\ !defined( OS_NT ) && \\ !defined( OS_QNXNTO ) && \\ !defined( OS_OS2 ) && \\ !defined( OS_VMS ) # define HAVE_SOCKETPAIR # if defined(OS_MACHTEN) || defined(OS_AIX32) || defined(OS_MVS) extern \"C\" int socketpair(int, int, int, int*)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifdef NEED_SYSLOG # if)",
    "insertText": "defined(__unix__ ) # define HAVE_SYSLOG # include <syslog.h> # elif defined( OS_NT ) # define HAVE_EVENT_LOG # include <windows.h> # endif # endif # if defined(NEED_TIME) || defined(NEED_UTIME) # include <time.h> # endif # if defined(NEED_TIME_HP) # if defined( OS_LINUX ) # define HAVE_CLOCK_GETTIME #if defined(__GLIBC__) && defined(__GLIBC_PREREQ) # if ( __GLIBC_PREREQ( 2, 10 ) && \\ ( defined(_BSD_SOURCE) || \\ _XOPEN_SOURCE >= 700 || \\ _POSIX_C_SOURCE >= 200809L ) ) || \\ ( !__GLIBC_PREREQ( 2, 10 ) && \\ __GLIBC_PREREQ( 2, 6 ) && \\ defined(_ATFILE_SOURCE) ) # define HAVE_UTIMENSAT # else # define HAVE_GETTIMEOFDAY # include <sys/time.h> # endif #else # define HAVE_UTIMENSAT #endif # elif defined( OS_NT ) # define WIN32_LEAN_AND_MEAN # include <windows.h> # define HAVE_GETSYSTEMTIME # else # define HAVE_GETTIMEOFDAY # include <sys/time.h> # endif # endif # if defined(NEED_TYPES) || 1 # if defined ( MAC_MWPEF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else # include<sys / types . h> # endif # endif # ifndef OS_VMS # define HAVE_UTIME # ifdef NEED_UTIME #)",
    "insertText": "if(defined( OS_NT ) || defined( OS_OS2 ) ) && !defined(__BORLANDC__) # include <sys/utime.h> # else # include <utime.h> # endif # endif # define HAVE_UTIMES # ifdef NEED_UTIMES # if ( defined( OS_NT ) || defined( OS_OS2 ) ) && !defined(__BORLANDC__) # include <sys/utime.h> # else # include <sys/types.h> # include <utime.h> # endif # endif # endif # ifdef NEED_SLEEP # ifdef OS_NT # define WIN32_LEAN_AND_MEAN # include <windows.h> # define sleep(x) Sleep((x) * 1000) # define msleep(x) Sleep(x)"
  },
  {
    "label": "msleep()",
    "kind": "Method",
    "detail": "Function (# endif # else # define)",
    "insertText": "msleep(x) usleep((x) * 1000) # endif # endif # ifdef NEED_WINDOWSH # ifdef OS_NT # include <windows.h> # endif # endif # define HAVE_SYMLINKS # if defined( OS_OS2 ) || \\ defined ( MAC_MWPEF ) || \\ defined( OS_VMS ) || \\ defined( OS_INTERIX ) # undef HAVE_SYMLINKS # endif # define HAVE_TRUNCATE # if defined( OS_OS2 ) || \\ defined( MAC_MWPEF ) || \\ defined( OS_BEOS ) || \\ defined( OS_QNX ) || \\ defined( OS_SCO ) || \\ defined( OS_VMS ) || \\ defined( OS_INTERIX ) || \\ defined( OS_MVS ) || \\ defined( OS_MPEIX ) || \\ defined( OS_AS400 ) # undef HAVE_TRUNCATE # endif # if defined( OS_AS400 ) || defined( OS_BEOS ) || defined( OS_FREEBSD ) || \\ defined( OS_MACHTEN ) || defined( OS_MVS ) || \\ defined( OS_VMS62 ) || defined( OS_RHAPSODY ) || defined( OS_ZETA ) # define BAD_MEMCCPY extern \"C\" void *memccpy(void *, const void *, int, size_t)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (# endif # ifdef OS_SUNOS # define)",
    "insertText": "memmove(d, s, c) bcopy(s, d, c)"
  },
  {
    "label": "bcopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bcopy(const void *src, void *dst, size_t len)"
  },
  {
    "label": "closelog()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "closelog()"
  },
  {
    "label": "fsync()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "fsync(int fd)"
  },
  {
    "label": "ftruncate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ftruncate(int fd, off_t length)"
  },
  {
    "label": "gethostname()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "gethostname(char *name, int namelen)"
  },
  {
    "label": "getrusage()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getrusage(int who, struct rusage *rusage)"
  },
  {
    "label": "gettimeofday()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "gettimeofday(struct timeval *tp, struct timezone *tzp)"
  },
  {
    "label": "lstat()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "lstat(const char *path, struct stat *sb)"
  },
  {
    "label": "munmap()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "munmap(void *addr, size_t len)"
  },
  {
    "label": "openlog()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "openlog(const char *ident, int logopt, int facility)"
  },
  {
    "label": "readlink()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "readlink(const char *path, char *buf, int bufsiz)"
  },
  {
    "label": "sbrk()",
    "kind": "Method",
    "detail": "Function (caddr_t)",
    "insertText": "sbrk(int inc)"
  },
  {
    "label": "socketpair()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "socketpair(int d, int type, int protocol, int *sv)"
  },
  {
    "label": "symlink()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "symlink(const char *name1, const char *name2)"
  },
  {
    "label": "syslog()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "syslog(int priority, const char *message ...)"
  },
  {
    "label": "tolower()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tolower(int c)"
  },
  {
    "label": "toupper()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "toupper(int c)"
  },
  {
    "label": "truncate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "truncate(const char *path, off_t length)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (} ; # endif # ifdef OS_NT # define MT_STATIC)",
    "insertText": "__declspec(thread) # define P4MT __declspec(thread) # elif !defined( OS_BEOS ) && \\ !defined( OS_AS400 ) && \\ !defined( OS_VMS ) # ifdef NEED_THREADS # define HAVE_PTHREAD # include <pthread.h> # endif # if ( defined( OS_DARWIN ) && OS_VER < 140 ) || \\ ( defined( OS_MACOSX ) && OS_VER < 1010)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (LineTypeRaw,LineTypeCr,LineTypeCrLf,LineTypeLfcrlf } ; # ifdef USE_CR # define LineTypeLocal LineTypeCr # endif # ifdef USE_CRLF # define LineTypeLocal LineTypeCrLf # endif # ifndef LineTypeLocal # define LineTypeLocal LineTypeRaw # endif # if !)",
    "insertText": "defined(OS_MVS ) && \\ !defined( OS_OS2 ) && \\ !defined( OS_QNX)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef unsigned int p4size_t ; # if)",
    "insertText": "defined(OS_MACOSX) && OS_VER < 1010 # define FOUR_CHAR_CONSTANT(_a, _b, _c, _d) \\ ((UInt32) \\ ((UInt32) (_a) << 24) | \\ ((UInt32) (_b) << 16) | \\ ((UInt32) (_c) << 8) | \\ ((UInt32) (_d))) # endif # ifdef OS_NTIA64 # define vsnprintf _vsnprintf # endif # if defined(_MSC_VER) && _MSC_VER < 1900 || \\ !defined(_MSC_VER) && defined(_MSC_FULL_VER) # define strtoll _strtoi64 # endif # if __cplusplus >= 201103L # ifndef HAS_CPP11 # define HAS_CPP11 # endif # endif # if __cplusplus >= 201402L # define HAS_CPP14 # endif # if __cplusplus >= 201703L # define HAS_CPP17 # endif # if defined(_MSC_VER) && _MSC_VER < 1900 # define HAS_BROKEN_CPP11 # endif # ifdef HAS_CPP11 # define HAS_PARALLEL_SYNC_THREADS # endif # if defined(HAS_CPP14) && defined(USE_EXTENSIONS) && USE_EXTENSIONS == 1 # define HAS_EXTENSIONS # endif # include \"sanitizers.h\" # ifdef __GNUC__ # define GCC_VERSION (__GNUC__ * 10000 \\ + __GNUC_MINOR__ * 100 \\ + __GNUC_PATCHLEVEL__) # endif # ifdef OS_NT # if defined( NEED_WIN32FIO ) # define HAVE_WIN32FIO # ifdef OS_NTX64 # define _AMD64_ # endif # ifdef OS_NTX86 # define _X86_ # endif # ifndef OS_MINGW # ifndef NOMINMAX # define NOMINMAX # endif # include <windef.h> # include <winnt.h> # else # define WIN32_LEAN_AND_MEAN # include <windows.h> # endif # ifndef INVALID_HANDLE_VALUE # define INVALID_HANDLE_VALUE ((HANDLE)(LONG_PTR)-1) # endif # define INVALID_HANDLE_VALUE2 ((HANDLE)(LONG_PTR)-2)"
  }
]