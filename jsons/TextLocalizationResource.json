[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FTextLocalizationMetaDataResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextLocalizationMetaDataResource"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FTextLocalizationResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextLocalizationResource"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "FEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntry"
  },
  {
    "label": "LoadFromFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromFile(const FString& FilePath)"
  },
  {
    "label": "LoadFromArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromArchive(FArchive& Archive, const FString& LocMetaID)"
  },
  {
    "label": "SaveToFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveToFile(const FString& FilePath)"
  },
  {
    "label": "SaveToArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveToArchive(FArchive& Archive, const FString& LocMetaID)"
  },
  {
    "label": "LoadFromDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadFromDirectory(const FString& DirectoryPath, const int32 Priority)"
  },
  {
    "label": "LoadFromFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromFile(const FString& FilePath, const int32 Priority)"
  },
  {
    "label": "LoadFromArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromArchive(FArchive& Archive, const FTextKey& LocResID, const int32 Priority)"
  },
  {
    "label": "ShouldReplaceEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldReplaceEntry(const FTextKey& Namespace, const FTextKey& Key, const FEntry& CurrentEntry, const FEntry& NewEntry)"
  },
  {
    "label": "GetNativeCultureName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNativeCultureName(const TArray<FString>& InLocalizationPaths)"
  },
  {
    "label": "GetNativeCultureName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNativeCultureName(const ELocalizedTextSourceCategory InCategory)"
  },
  {
    "label": "GetNativeProjectCultureName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNativeProjectCultureName(const bool bSkipCache = false)"
  },
  {
    "label": "ClearNativeProjectCultureName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearNativeProjectCultureName()"
  },
  {
    "label": "GetNativeEngineCultureName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNativeEngineCultureName(const bool bSkipCache = false)"
  },
  {
    "label": "ClearNativeEngineCultureName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearNativeEngineCultureName()"
  },
  {
    "label": "GetNativeEditorCultureName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNativeEditorCultureName(const bool bSkipCache = false)"
  },
  {
    "label": "ClearNativeEditorCultureName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearNativeEditorCultureName()"
  },
  {
    "label": "GetLocalizedCultureNames()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetLocalizedCultureNames(const TArray<FString>& InLocalizationPaths)"
  },
  {
    "label": "GetLocalizationTargetNameForChunkId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLocalizationTargetNameForChunkId(const FString& InLocalizationTargetName, const int32 InChunkId)"
  }
]