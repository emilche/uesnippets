[
  {
    "label": "SendQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SendQueue"
  },
  {
    "label": "DataToSend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DataToSend"
  },
  {
    "label": "DataToSend()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_TX_SEND_QUEUE_H_ # define NET_DCSCTP_TX_SEND_QUEUE_H_ # include<cstdint> # include<limits> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" net / dcsctp / common / internal_types . h \" # include \" net / dcsctp / packet / data . h \" # include \" net / dcsctp / public / types . h \" namespace dcsctp { class SendQueue { public : struct DataToSend {)",
    "insertText": "DataToSend(Data data) : data(std::move(data))"
  },
  {
    "label": "NoLimit()",
    "kind": "Method",
    "detail": "Function (} Data data ; MaxRetransmits max_retransmissions =)",
    "insertText": "NoLimit()"
  },
  {
    "label": "InfiniteFuture()",
    "kind": "Method",
    "detail": "Function (TimeMs expires_at =)",
    "insertText": "InfiniteFuture()"
  },
  {
    "label": "NotSet()",
    "kind": "Method",
    "detail": "Function (LifecycleId lifecycle_id =)",
    "insertText": "NotSet()"
  },
  {
    "label": "SendQueue()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "SendQueue()"
  },
  {
    "label": "Produce()",
    "kind": "Method",
    "detail": "Function (absl::optional<DataToSend>)",
    "insertText": "Produce(TimeMs now, size_t max_size)"
  },
  {
    "label": "Discard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Discard(IsUnordered unordered, StreamID stream_id, MID message_id)"
  },
  {
    "label": "PrepareResetStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareResetStream(StreamID stream_id)"
  },
  {
    "label": "HasStreamsReadyToBeReset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStreamsReadyToBeReset()"
  },
  {
    "label": "GetStreamsReadyToBeReset()",
    "kind": "Method",
    "detail": "Function (std::vector<StreamID>)",
    "insertText": "GetStreamsReadyToBeReset()"
  },
  {
    "label": "CommitResetStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitResetStreams()"
  },
  {
    "label": "RollbackResetStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RollbackResetStreams()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "buffered_amount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "buffered_amount(StreamID stream_id)"
  },
  {
    "label": "total_buffered_amount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "total_buffered_amount()"
  },
  {
    "label": "buffered_amount_low_threshold()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "buffered_amount_low_threshold(StreamID stream_id)"
  },
  {
    "label": "SetBufferedAmountLowThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBufferedAmountLowThreshold(StreamID stream_id, size_t bytes)"
  },
  {
    "label": "EnableMessageInterleaving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMessageInterleaving(bool enabled)"
  }
]