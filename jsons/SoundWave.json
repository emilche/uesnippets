[
  {
    "label": "FSoundWaveData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWaveData"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "EAudioSpeakers",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAudioSpeakers"
  },
  {
    "label": "FActiveSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSound"
  },
  {
    "label": "FSoundParseParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundParseParameters"
  },
  {
    "label": "FPlatformAudioCookOverrides",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformAudioCookOverrides"
  },
  {
    "label": "EDecompressionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDecompressionType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStreamedAudioChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamedAudioChunk"
  },
  {
    "label": "FStreamedAudioPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamedAudioPlatformData"
  },
  {
    "label": "FStreamedAudioAsyncCacheDerivedDataTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamedAudioAsyncCacheDerivedDataTask"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "FSoundWaveSpectralData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveSpectralData"
  },
  {
    "label": "FSoundWaveSpectralDataPerSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveSpectralDataPerSound"
  },
  {
    "label": "FSoundWaveEnvelopeDataPerSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveEnvelopeDataPerSound"
  },
  {
    "label": "FCompareSpectralDataByFrequencyHz",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareSpectralDataByFrequencyHz"
  },
  {
    "label": "FSoundWaveSpectralDataEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveSpectralDataEntry"
  },
  {
    "label": "FSoundWaveSpectralTimeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveSpectralTimeData"
  },
  {
    "label": "FSoundWaveEnvelopeTimeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveEnvelopeTimeData"
  },
  {
    "label": "FSoundWaveCuePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveCuePoint"
  },
  {
    "label": "USoundFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundFactory"
  },
  {
    "label": "ISoundWaveClient",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISoundWaveClient"
  },
  {
    "label": "FSubtitleCue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubtitleCue"
  },
  {
    "label": "UAssetImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetImportData"
  },
  {
    "label": "UCurveTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveTable"
  },
  {
    "label": "FAsyncAudioDecompressWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncAudioDecompressWorker"
  },
  {
    "label": "FEditorAudioBulkData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorAudioBulkData"
  },
  {
    "label": "UWaveformTransformationBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWaveformTransformationBase"
  },
  {
    "label": "FSoundWaveCompilingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWaveCompilingManager"
  },
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FSoundWaveProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWaveProxy"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / IndirectArray . h \" # include \" Sound / AudioSettings . h \" # include \" Sound / SoundModulationDestination . h \" # include \" UObject / ObjectMacros . h \" # include \" Misc / Guid . h \" # include \" Async / AsyncWork . h \" # include \" Async / Mutex . h \" # include \" Async / UniqueLock . h \" # include \" Sound / SoundBase . h \" # include \" Sound / SoundWaveTimecodeInfo . h \" # include \" Interfaces / Interface_AsyncCompilation . h \" # include \" Serialization / BulkData . h \" # include \" Serialization / BulkDataBuffer . h \" # include \" Serialization / EditorBulkData . h \" # include \" Sound / SoundGroups . h \" # include \" Sound / SoundWaveLoadingBehavior . h \" # include \" UObject / ObjectKey . h \" # include \" AudioMixerTypes . h \" # include \" AudioCompressionSettings . h \" # include \" UObject / PerPlatformProperties . h \" # include \" ContentStreaming . h \" # include \" IAudioProxyInitializer . h \" # include \" IWaveformTransformation . h \" # include \" ISoundWaveCloudStreaming . h \" # include \" Templates / DontCopy . h \" # include \" SoundWave . generated . h \" class FSoundWaveData ; class ITargetPlatform ; enum EAudioSpeakers : int ; struct FActiveSound ; struct FSoundParseParameters ; struct FPlatformAudioCookOverrides ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (DTYPE_Setup,DTYPE_Invalid,DTYPE_RealTime,DTYPE_Procedural,DTYPE_Xenon,DTYPE_Streaming,DTYPE_MAX,} ; enum class ESoundWavePrecacheState { NotStarted,InProgress,Done } ; uint64 InvalidAudioStreamCacheLookupID = TNumericLimits<uint64)",
    "insertText": "Max()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (struct FStreamedAudioChunk { void)",
    "insertText": "Serialize(FArchive& Ar, UObject* Owner, int32 ChunkIndex)"
  },
  {
    "label": "GetCopy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCopy(void** OutChunkData)"
  },
  {
    "label": "MoveOutAsBuffer()",
    "kind": "Method",
    "detail": "Function (FBulkDataBuffer<uint8>)",
    "insertText": "MoveOutAsBuffer()"
  },
  {
    "label": "StoreInDerivedDataCache()",
    "kind": "Method",
    "detail": "Function (int32 DataSize = 0 ; int32 AudioDataSize = 0 ; uint32 SeekOffsetInAudioFrames = INDEX_NONE ; FByteBulkData BulkData ; private : uint8* CachedDataPtr { nullptr } ; public : # if WITH_EDITORONLY_DATA FString DerivedDataKey ; bool bLoadedFromCookedPackage = false ; bool bInlineChunk = false ; uint32)",
    "insertText": "StoreInDerivedDataCache(const FString& InDerivedDataKey, const FStringView& SoundWaveName)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FStreamedAudioPlatformData()",
    "kind": "Method",
    "detail": "Function (TIndirectArray<struct FStreamedAudioChunk> Chunks ; # if WITH_EDITORONLY_DATA FString DerivedDataKey ; TDontCopy<FRWLock> AsyncTaskLock ; struct FStreamedAudioAsyncCacheDerivedDataTask* AsyncTask ; # endif)",
    "insertText": "FStreamedAudioPlatformData()"
  },
  {
    "label": "GetChunkFromDDC()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChunkFromDDC(int32 ChunkIndex, uint8** OutChunkData, bool bMakeSureChunkIsLoaded = false)"
  },
  {
    "label": "GetChunks()",
    "kind": "Method",
    "detail": "Function (TIndirectArray<struct FStreamedAudioChunk>&)",
    "insertText": "GetChunks()"
  },
  {
    "label": "GetNumChunks()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumChunks()"
  },
  {
    "label": "GetAudioFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetAudioFormat()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, class USoundWave* Owner)"
  },
  {
    "label": "Cache()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "Cache(class USoundWave& InSoundWave, const FPlatformAudioCookOverrides* CompressionOverrides, FName AudioFormatName, uint32 InFlags, const ITargetPlatform* InTargetPlatform=nullptr)"
  },
  {
    "label": "FinishCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishCache()"
  },
  {
    "label": "IsFinishedCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFinishedCache()"
  },
  {
    "label": "IsAsyncWorkComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsyncWorkComplete()"
  },
  {
    "label": "IsCompiling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompiling()"
  },
  {
    "label": "TryInlineChunkData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryInlineChunkData()"
  },
  {
    "label": "AreDerivedChunksAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreDerivedChunksAvailable(FStringView Context)"
  },
  {
    "label": "RescheduleAsyncTask()",
    "kind": "Method",
    "detail": "Function (# endif private : # if WITH_EDITORONLY_DATA class USoundWave ; bool)",
    "insertText": "RescheduleAsyncTask(FQueuedThreadPool* InThreadPool, EQueuedWorkPriority InPriority)"
  },
  {
    "label": "WaitAsyncTaskWithTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitAsyncTaskWithTimeout(float InTimeoutInSeconds)"
  },
  {
    "label": "DeserializeChunkFromDDC()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "DeserializeChunkFromDDC(TArray<uint8> SerializedData, FStreamedAudioChunk &ChunkToDeserializeInto, int32 ChunkIndex, uint8** &OutChunkData)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"SpectralData\")"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"EnvelopeData\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FCompareSpectralDataByFrequencyHz { bool)",
    "insertText": "operator()(const FSoundWaveSpectralData& A, const FSoundWaveSpectralData& B)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (BinkAudio,ADPCM,PCM,Opus,PlatformSpecific,ProjectDefined,RADAudio)",
    "insertText": "UMETA(DisplayName = \"RAD Audio\")"
  },
  {
    "label": "ToName()",
    "kind": "Method",
    "detail": "Function (namespace Audio { FName)",
    "insertText": "ToName(ESoundAssetCompressionType InDecoderType)"
  },
  {
    "label": "ToSoundAssetCompressionType()",
    "kind": "Method",
    "detail": "Function (} } ESoundAssetCompressionType)",
    "insertText": "ToSoundAssetCompressionType(EDefaultAudioCompressionType InDefaultCompressionType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(Category = Info, VisibleAnywhere, BlueprintReadOnly)"
  },
  {
    "label": "IsLoopRegion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoopRegion()"
  },
  {
    "label": "FloorToInt()",
    "kind": "Method",
    "detail": "Function (FramePosition =)",
    "insertText": "FloorToInt((float)FramePosition * Factor)"
  },
  {
    "label": "FloorToInt()",
    "kind": "Method",
    "detail": "Function (FrameLength =)",
    "insertText": "FloorToInt((float)FrameLength * Factor)"
  },
  {
    "label": "ISoundWaveClient()",
    "kind": "Method",
    "detail": "Function (} ; struct ISoundWaveClient {)",
    "insertText": "ISoundWaveClient()"
  },
  {
    "label": "OnBeginDestroy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnBeginDestroy(class USoundWave* Wave)"
  },
  {
    "label": "OnIsReadyForFinishDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnIsReadyForFinishDestroy(class USoundWave* Wave)"
  },
  {
    "label": "OnFinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishDestroy(class USoundWave* Wave)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(hidecategories=Object, editinlinenew, BlueprintType, meta= (LoadBehavior = \"LazyOnDemand\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() private: UPROPERTY(Config, EditAnywhere, Category = \"Format|Quality\", meta = (DisplayName = \"Compression\", ClampMin = \"1\", ClampMax = \"100\", EditCondition = \"SoundAssetCompressionType != ESoundAssetCompressionType::PCM && SoundAssetCompressionType != ESoundAssetCompressionType::ADPCM\"), AssetRegistrySearchable)"
  },
  {
    "label": "AddPlayingSource()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddPlayingSource()"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (NumSourcesPlaying .)",
    "insertText": "Increment()"
  },
  {
    "label": "RemovePlayingSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemovePlayingSource()"
  },
  {
    "label": "Decrement()",
    "kind": "Method",
    "detail": "Function (NumSourcesPlaying .)",
    "insertText": "Decrement()"
  },
  {
    "label": "GetSoundAssetCompressionTypeEnum()",
    "kind": "Method",
    "detail": "Function (ESoundAssetCompressionType)",
    "insertText": "GetSoundAssetCompressionTypeEnum()"
  },
  {
    "label": "GetRuntimeFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetRuntimeFormat()"
  },
  {
    "label": "GetInterpolatedCookedFFTDataForTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInterpolatedCookedFFTDataForTime(float InTime, uint32& InOutLastIndex, TArray<FSoundWaveSpectralData>& OutData, bool bLoop)"
  },
  {
    "label": "GetInterpolatedCookedEnvelopeDataForTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInterpolatedCookedEnvelopeDataForTime(float InTime, uint32& InOutLastIndex, float& OutAmplitude, bool bLoop)"
  },
  {
    "label": "GetHandleForChunkOfAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHandleForChunkOfAudio(TFunction<void(FAudioChunkHandle&&)> OnLoadCompleted, bool bForceSync = false, int32 ChunkIndex = 1, ENamedThreads::Type CallbackThread = ENamedThreads::GameThread)"
  },
  {
    "label": "RetainCompressedAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetainCompressedAudio(bool bForceSync = false)"
  },
  {
    "label": "ReleaseCompressedAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseCompressedAudio()"
  },
  {
    "label": "IsRetainingAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRetainingAudio()"
  },
  {
    "label": "OverrideLoadingBehavior()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideLoadingBehavior(ESoundWaveLoadingBehavior InLoadingBehavior)"
  },
  {
    "label": "GetLoadingBehavior()",
    "kind": "Method",
    "detail": "Function (ESoundWaveLoadingBehavior)",
    "insertText": "GetLoadingBehavior(bool bCheckSoundClasses = true)"
  },
  {
    "label": "GetTransformationChainConfig()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR const FWaveTransformUObjectConfiguration&)",
    "insertText": "GetTransformationChainConfig()"
  },
  {
    "label": "UpdateTransformations()",
    "kind": "Method",
    "detail": "Function (const FWaveTransformUObjectConfiguration&)",
    "insertText": "UpdateTransformations()"
  },
  {
    "label": "GetInterpolatedCookedFFTDataForTimeInternal()",
    "kind": "Method",
    "detail": "Function (# endif private : uint32)",
    "insertText": "GetInterpolatedCookedFFTDataForTimeInternal(float InTime, uint32 StartingIndex, TArray<FSoundWaveSpectralData>& OutData, bool bLoop)"
  },
  {
    "label": "GetInterpolatedCookedEnvelopeDataForTimeInternal()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetInterpolatedCookedEnvelopeDataForTimeInternal(float InTime, uint32 StartingIndex, float& OutAmplitude, bool bLoop)"
  },
  {
    "label": "CacheInheritedLoadingBehavior()",
    "kind": "Method",
    "detail": "Function (FThreadSafeCounter PrecacheState ; public : FThreadSafeCounter NumSourcesPlaying ; private : TArray<FSoundWaveClientPtr> SourcesPlaying ; float CachedSampleRateOverride ; void)",
    "insertText": "CacheInheritedLoadingBehavior()"
  },
  {
    "label": "UpdateAsset()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "UpdateAsset(bool bMarkDirty = true)"
  },
  {
    "label": "SerializeCuePoints()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SerializeCuePoints(FArchive& Ar, const bool bIsLoadingFromCookedArchive)"
  },
  {
    "label": "GetCompressionQuality()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "GetCompressionQuality()"
  },
  {
    "label": "GetResourceSize()",
    "kind": "Method",
    "detail": "Function (int32 ResourceID ; int32)",
    "insertText": "GetResourceSize()"
  },
  {
    "label": "GetCloudStreamingEnabledPropertyName()",
    "kind": "Method",
    "detail": "Function (public : FName)",
    "insertText": "GetCloudStreamingEnabledPropertyName()"
  },
  {
    "label": "SetCloudStreamingEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCloudStreamingEnabled(bool bEnabled)"
  },
  {
    "label": "IsCloudStreamingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCloudStreamingEnabled()"
  },
  {
    "label": "TriggerRecookForCloudStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerRecookForCloudStreaming()"
  },
  {
    "label": "GetCloudStreamingPlatformSettingsPropertyName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetCloudStreamingPlatformSettingsPropertyName()"
  },
  {
    "label": "GetCloudStreamingPlatformSettings()",
    "kind": "Method",
    "detail": "Function (} TMap<FGuid,FSoundWaveCloudStreamingPlatformSettings>&)",
    "insertText": "GetCloudStreamingPlatformSettings()"
  },
  {
    "label": "GetDefaultLoadingBehaviorCVarName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetDefaultLoadingBehaviorCVarName()"
  },
  {
    "label": "GetDefaultLoadingBehavior()",
    "kind": "Method",
    "detail": "Function (ESoundWaveLoadingBehavior)",
    "insertText": "GetDefaultLoadingBehavior()"
  },
  {
    "label": "GetResourceData()",
    "kind": "Method",
    "detail": "Function (typedef FAsyncTask<class FAsyncAudioDecompressWorker> FAsyncAudioDecompress ; FAsyncAudioDecompress* AudioDecompressor ; uint8* CachedRealtimeFirstBuffer ; int32 NumPrecacheFrames ; int32 RawPCMDataSize ; uint8* RawPCMData ; public : const uint8*)",
    "insertText": "GetResourceData()"
  },
  {
    "label": "FEditorAudioBulkData()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA struct FEditorAudioBulkData { UE::Serialization::FEditorBulkData RawData ; USoundWave* SoundWave ;)",
    "insertText": "FEditorAudioBulkData() : RawData() , SoundWave()"
  },
  {
    "label": "FEditorAudioBulkData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEditorAudioBulkData(USoundWave* Owner)"
  },
  {
    "label": "CreateFromBulkData()",
    "kind": "Method",
    "detail": "Function (SoundWave = Owner ; } void)",
    "insertText": "CreateFromBulkData(FBulkData& InBulkData, const FGuid& InGuid, UObject* Owner)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, UObject* Owner, bool bAllowRegister=true)"
  },
  {
    "label": "GetPayload()",
    "kind": "Method",
    "detail": "Function (TFuture<FSharedBuffer>)",
    "insertText": "GetPayload()"
  },
  {
    "label": "HasPayloadData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPayloadData()"
  },
  {
    "label": "UpdatePayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePayload(FSharedBuffer InPayload, UObject* Owner = nullptr)"
  },
  {
    "label": "CreateLegacyUniqueIdentifier()",
    "kind": "Method",
    "detail": "Function (RawData .)",
    "insertText": "CreateLegacyUniqueIdentifier(Owner)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (RawData .)",
    "insertText": "Reset()"
  },
  {
    "label": "UnloadData()",
    "kind": "Method",
    "detail": "Function (RawData .)",
    "insertText": "UnloadData()"
  },
  {
    "label": "DetachFromDisk()",
    "kind": "Method",
    "detail": "Function (RawData .)",
    "insertText": "DetachFromDisk(Ar, bEnsurePayloadIsLoaded)"
  },
  {
    "label": "GetPayloadSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetPayloadSize()"
  },
  {
    "label": "UpdatePayload()",
    "kind": "Method",
    "detail": "Function (RawData .)",
    "insertText": "UpdatePayload(InPayload, Owner)"
  },
  {
    "label": "UpdatePayload()",
    "kind": "Method",
    "detail": "Function (RawData .)",
    "insertText": "UpdatePayload(MoveTemp(InPayload), Owner)"
  },
  {
    "label": "SetCompressionOptions()",
    "kind": "Method",
    "detail": "Function (RawData .)",
    "insertText": "SetCompressionOptions(Option)"
  },
  {
    "label": "SetCompressionOptions()",
    "kind": "Method",
    "detail": "Function (RawData .)",
    "insertText": "SetCompressionOptions(Compressor, CompressionLevel)"
  },
  {
    "label": "GetBulkDataVersions()",
    "kind": "Method",
    "detail": "Function (RawData .)",
    "insertText": "GetBulkDataVersions(InlineArchive, OutUEVersion, OutLicenseeUEVersion, OutCustomVersions)"
  },
  {
    "label": "TearOff()",
    "kind": "Method",
    "detail": "Function (RawData .)",
    "insertText": "TearOff()"
  },
  {
    "label": "SerializeForRegistry()",
    "kind": "Method",
    "detail": "Function (RawData .)",
    "insertText": "SerializeForRegistry(Ar)"
  },
  {
    "label": "UpdateRegistrationOwner()",
    "kind": "Method",
    "detail": "Function (RawData .)",
    "insertText": "UpdateRegistrationOwner(Owner)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# endif FGuid CompressedDataGuid ; # if WITH_EDITORONLY_DATA TMap<FName,uint32> AsyncLoadingDataFormats ; FCriticalSection RawDataCriticalSection ; # endif TSortedMap<FString,FStreamedAudioPlatformData*> CookedPlatformData ; void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "IsReadyForFinishDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForFinishDestroy()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "LoadZerothChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadZerothChunk()"
  },
  {
    "label": "GetSizeOfChunk()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSizeOfChunk(uint32 ChunkIndex)"
  },
  {
    "label": "GetChunkSizeStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChunkSizeStats(uint32& OutTotalBytesOfAudioData, uint32& OutMaxChunkBytesOfAudioData)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "PostImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostImport()"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSave(FObjectPreSaveContext SaveContext)"
  },
  {
    "label": "CreateNewSoundWaveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewSoundWaveData()"
  },
  {
    "label": "CreateTransformations()",
    "kind": "Method",
    "detail": "Function (public : # endif # if WITH_EDITORONLY_DATA TArray<Audio::FTransformationPtr>)",
    "insertText": "CreateTransformations()"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "GetExporterName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetExporterName()"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDesc()"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "IsPlayable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayable()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(class FAudioDevice* AudioDevice, const UPTRINT NodeWaveInstanceHash, FActiveSound& ActiveSound, const FSoundParseParameters& ParseParams, TArray<FWaveInstance*>& WaveInstances)"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDuration()"
  },
  {
    "label": "GetSubtitlePriority()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSubtitlePriority()"
  },
  {
    "label": "SupportsSubtitles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsSubtitles()"
  },
  {
    "label": "GetSoundWavesWithCookedAnalysisData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSoundWavesWithCookedAnalysisData(TArray<USoundWave*>& OutSoundWaves)"
  },
  {
    "label": "HasCookedFFTData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCookedFFTData()"
  },
  {
    "label": "HasCookedAmplitudeEnvelopeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCookedAmplitudeEnvelopeData()"
  },
  {
    "label": "CreateSoundWaveProxy()",
    "kind": "Method",
    "detail": "Function (FSoundWaveProxyPtr)",
    "insertText": "CreateSoundWaveProxy()"
  },
  {
    "label": "CreateProxyData()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<Audio::IProxyData>)",
    "insertText": "CreateProxyData(const Audio::FProxyDataInitParams& InitParams)"
  },
  {
    "label": "OnBeginGenerate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginGenerate()"
  },
  {
    "label": "OnEndGenerate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEndGenerate()"
  },
  {
    "label": "OnEndGenerate()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnEndGenerate(ISoundGeneratorPtr Generator)"
  },
  {
    "label": "AddPlayingSource()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AddPlayingSource(const FSoundWaveClientPtr& Source)"
  },
  {
    "label": "RemovePlayingSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePlayingSource(const FSoundWaveClientPtr& Source)"
  },
  {
    "label": "IsGeneratingAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGeneratingAudio()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (bool bIsGeneratingAudio = false ; UE::TUniqueLock)",
    "insertText": "Lock(SourcesPlayingCs)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (bIsGeneratingAudio = SourcesPlaying .)",
    "insertText": "Num()"
  },
  {
    "label": "GetImportedSampleRate()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA ImportedSampleRate = InImportedSampleRate ; # endif } uint32)",
    "insertText": "GetImportedSampleRate()"
  },
  {
    "label": "SetTimecodeInfo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA return ImportedSampleRate ; # else return 0 ; # endif } # if WITH_EDITORONLY_DATA void)",
    "insertText": "SetTimecodeInfo(const FSoundWaveTimecodeInfo& InTimecode)"
  },
  {
    "label": "GetTimecodeInfo()",
    "kind": "Method",
    "detail": "Function (TOptional<FSoundWaveTimecodeInfo>)",
    "insertText": "GetTimecodeInfo()"
  },
  {
    "label": "SetSampleRate()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetSampleRate(uint32 InSampleRate)"
  },
  {
    "label": "GetResourceSizeForFormat()",
    "kind": "Method",
    "detail": "Function (SampleRate = InSampleRate ; # if ! WITH_EDITOR bCachedSampleRateFromPlatformSettings = false ; bSampleRateManuallyReset = true ; # endif } int32)",
    "insertText": "GetResourceSizeForFormat(FName Format)"
  },
  {
    "label": "FreeResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeResources(bool bStopSoundsUsingThisResource = true)"
  },
  {
    "label": "CleanupDecompressor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CleanupDecompressor(bool bForceCleanup = false)"
  },
  {
    "label": "InitAudioResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAudioResource(FByteBulkData& CompressedData)"
  },
  {
    "label": "InitAudioResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitAudioResource(FName Format)"
  },
  {
    "label": "RemoveAudioResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAudioResource()"
  },
  {
    "label": "HandleStart()",
    "kind": "Method",
    "detail": "Function (FWaveInstance&)",
    "insertText": "HandleStart(FActiveSound& ActiveSound, const UPTRINT WaveInstanceHash)"
  },
  {
    "label": "GeneratePCMData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GeneratePCMData(uint8* PCMData, const int32 SamplesNeeded)"
  },
  {
    "label": "GetCompressedData()",
    "kind": "Method",
    "detail": "Function (FByteBulkData* Data =)",
    "insertText": "GetCompressedData(Format, CompressionOverrides)"
  },
  {
    "label": "HasCompressedData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasCompressedData(FName Format, ITargetPlatform* TargetPlatform = GetRunningPlatform())"
  },
  {
    "label": "GetImportedSoundWaveData()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "GetImportedSoundWaveData(TArray<uint8>& OutRawPCMData, uint32& OutSampleRate, uint16& OutNumChannels)"
  },
  {
    "label": "GetImportedSoundWaveData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetImportedSoundWaveData(TArray<uint8>& OutRawPCMData, uint32& OutSampleRate, TArray<EAudioSpeakers>& OutChannelOrder)"
  },
  {
    "label": "InvalidateSoundWaveIfNeccessary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateSoundWaveIfNeccessary()"
  },
  {
    "label": "GetPlatformSpecificFormat()",
    "kind": "Method",
    "detail": "Function (# endif FName)",
    "insertText": "GetPlatformSpecificFormat(FName Format, const FPlatformAudioCookOverrides* CompressionOverrides)"
  },
  {
    "label": "FlushAsyncLoadingDataFormats()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_EDITOR void)",
    "insertText": "FlushAsyncLoadingDataFormats()"
  },
  {
    "label": "FlushAudioRenderingCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushAudioRenderingCommands()"
  },
  {
    "label": "BakeFFTAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeFFTAnalysis()"
  },
  {
    "label": "BakeEnvelopeAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeEnvelopeAnalysis()"
  },
  {
    "label": "LogBakedData()",
    "kind": "Method",
    "detail": "Function (FWaveTransformUObjectConfiguration TransformationChainConfig ; # endif public : # if WITH_EDITOR void)",
    "insertText": "LogBakedData()"
  },
  {
    "label": "IsCompressedDataReady()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompressedDataReady(FName Format, const FPlatformAudioCookOverrides* CompressionOverrides)"
  },
  {
    "label": "IsLoadedFromCookedData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoadedFromCookedData()"
  },
  {
    "label": "BeginGetCompressedData()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "BeginGetCompressedData(FName Format, const FPlatformAudioCookOverrides* CompressionOverrides, const ITargetPlatform* InTargetPlatform)"
  },
  {
    "label": "GetCompressedData()",
    "kind": "Method",
    "detail": "Function (FByteBulkData*)",
    "insertText": "GetCompressedData(FName Format, const FPlatformAudioCookOverrides* CompressionOverrides = GetPlatformCompressionOverridesForCurrentPlatform(), const ITargetPlatform* InTargetPlatform = GetRunningPlatform())"
  },
  {
    "label": "InvalidateCompressedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateCompressedData(bool bFreeResources = false, bool bRebuildStreamingChunks = true)"
  },
  {
    "label": "GetCurveData()",
    "kind": "Method",
    "detail": "Function (class UCurveTable*)",
    "insertText": "GetCurveData()"
  },
  {
    "label": "GetInternalCurveData()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR class UCurveTable*)",
    "insertText": "GetInternalCurveData()"
  },
  {
    "label": "SetInternalCurveData()",
    "kind": "Method",
    "detail": "Function (Curves = InCurves ; } void)",
    "insertText": "SetInternalCurveData(UCurveTable* InCurves)"
  },
  {
    "label": "GetCurvePropertyName()",
    "kind": "Method",
    "detail": "Function (InternalCurves = InCurves ; } FName)",
    "insertText": "GetCurvePropertyName()"
  },
  {
    "label": "IsStreaming()",
    "kind": "Method",
    "detail": "Function (} # endif public : bool)",
    "insertText": "IsStreaming(const TCHAR* PlatformName = nullptr)"
  },
  {
    "label": "IsStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreaming(const FPlatformAudioCookOverrides& Overrides)"
  },
  {
    "label": "IsSeekable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSeekable()"
  },
  {
    "label": "ShouldUseStreamCaching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseStreamCaching()"
  },
  {
    "label": "GetZerothChunk()",
    "kind": "Method",
    "detail": "Function (TArrayView<const uint8>)",
    "insertText": "GetZerothChunk(bool bForImmediatePlayback = false)"
  },
  {
    "label": "UpdatePlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlatformData()"
  },
  {
    "label": "CleanupCachedRunningPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupCachedRunningPlatformData()"
  },
  {
    "label": "SerializeCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeCookedPlatformData(class FArchive& Ar)"
  },
  {
    "label": "GetSampleRateForCurrentPlatform()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSampleRateForCurrentPlatform()"
  },
  {
    "label": "GetPlatformCompressionOverridesForCurrentPlatform()",
    "kind": "Method",
    "detail": "Function (const FPlatformAudioCookOverrides*)",
    "insertText": "GetPlatformCompressionOverridesForCurrentPlatform()"
  },
  {
    "label": "GetSampleRateForCompressionOverrides()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSampleRateForCompressionOverrides(const FPlatformAudioCookOverrides* CompressionOverrides)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(const TCHAR* InErrorMsg=nullptr)"
  },
  {
    "label": "ResetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetError()"
  },
  {
    "label": "HasError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasError()"
  },
  {
    "label": "GetOwnerLoadingBehavior()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA # if WITH_EDITOR ISoundWaveLoadingBehaviorUtil::FClassData)",
    "insertText": "GetOwnerLoadingBehavior(const ITargetPlatform* InTargetPlatform)"
  },
  {
    "label": "GetCuePointsScaledForSampleRate()",
    "kind": "Method",
    "detail": "Function (TMap<FName,ISoundWaveLoadingBehaviorUtil::FClassData> OwnerLoadingBehaviorCache ; FCriticalSection OwnerLoadingBehaviorCacheCS ; TArray<FSoundWaveCuePoint>)",
    "insertText": "GetCuePointsScaledForSampleRate(const float InSampleRate)"
  },
  {
    "label": "ScaleCuePointsForSampleRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScaleCuePointsForSampleRate(const float InSampleRate, TArray<FSoundWaveCuePoint>& InOutCuePoints)"
  },
  {
    "label": "GetSampleRateForTargetPlatform()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSampleRateForTargetPlatform(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "GetSizeOfFirstAudioChunkInSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSizeOfFirstAudioChunkInSeconds(const ITargetPlatform* InTargetPlatform)"
  },
  {
    "label": "BeginCacheForCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCacheForCookedPlatformData(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "IsCachedCookedPlatformDataLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCachedCookedPlatformDataLoaded(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "ClearAllCachedCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllCachedCookedPlatformData()"
  },
  {
    "label": "ClearCachedCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedCookedPlatformData(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "WillNeverCacheCookedPlatformDataAgain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WillNeverCacheCookedPlatformDataAgain()"
  },
  {
    "label": "GetRedrawThumbnail()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRedrawThumbnail()"
  },
  {
    "label": "SetRedrawThumbnail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRedrawThumbnail(bool bInRedraw)"
  },
  {
    "label": "CanVisualizeAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanVisualizeAsset()"
  },
  {
    "label": "CachePlatformData()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "CachePlatformData(bool bAsyncCache = false)"
  },
  {
    "label": "BeginCachePlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCachePlatformData()"
  },
  {
    "label": "FinishCachePlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishCachePlatformData()"
  },
  {
    "label": "ForceRebuildPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRebuildPlatformData()"
  },
  {
    "label": "GetChunkData()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "GetChunkData(int32 ChunkIndex, uint8** OutChunkData, bool bMakeSureChunkIsLoaded = false)"
  },
  {
    "label": "SetPrecacheState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrecacheState(ESoundWavePrecacheState InState)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (PrecacheState .)",
    "insertText": "Set((int32)InState)"
  },
  {
    "label": "GetPrecacheState()",
    "kind": "Method",
    "detail": "Function (} ESoundWavePrecacheState)",
    "insertText": "GetPrecacheState()"
  },
  {
    "label": "FSoundWaveData()",
    "kind": "Method",
    "detail": "Function (} private : TSharedPtr<FSoundWaveData,ESPMode::ThreadSafe> SoundWaveDataPtr { MakeShared<)",
    "insertText": "FSoundWaveData()"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (class FSoundWaveProxy ; class USoundFactory ; } ; class FSoundWaveData { public :)",
    "insertText": "UE_NONCOPYABLE(FSoundWaveData)"
  },
  {
    "label": "FSoundWaveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoundWaveData() : bIsLooping(0) , bIsTemplate(0) , bIsStreaming(0) , bIsSeekable(0) , bShouldUseStreamCaching(0) , bLoadingBehaviorOverridden(0) , bHasError(0) #if WITH_EDITOR , bLoadedFromCookedData(0)"
  },
  {
    "label": "InitializeDataFromSoundWave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeDataFromSoundWave(USoundWave& InWave)"
  },
  {
    "label": "OverrideRuntimeFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideRuntimeFormat(const FName& InRuntimeFormat)"
  },
  {
    "label": "GetGUID()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetGUID()"
  },
  {
    "label": "GetNumFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumFrames()"
  },
  {
    "label": "IsStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreaming()"
  },
  {
    "label": "WasLoadingBehaviorOverridden()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WasLoadingBehaviorOverridden()"
  },
  {
    "label": "GetCompressedData()",
    "kind": "Method",
    "detail": "Function (FByteBulkData*)",
    "insertText": "GetCompressedData(FName Format, const FPlatformAudioCookOverrides* CompressionOverrides = USoundWave::GetPlatformCompressionOverridesForCurrentPlatform())"
  },
  {
    "label": "IsZerothChunkDataLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsZerothChunkDataLoaded()"
  },
  {
    "label": "GetZerothChunkDataView()",
    "kind": "Method",
    "detail": "Function (const TArrayView<uint8>)",
    "insertText": "GetZerothChunkDataView()"
  },
  {
    "label": "HasChunkSeekTable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasChunkSeekTable(int32 InChunkIndex)"
  },
  {
    "label": "FindChunkIndexForSeeking()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindChunkIndexForSeeking(uint32 InTimeInAudioFrames)"
  },
  {
    "label": "GetCurrentChunkRevision()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR int32)",
    "insertText": "GetCurrentChunkRevision()"
  },
  {
    "label": "GetChunk()",
    "kind": "Method",
    "detail": "Function (# endif FStreamedAudioChunk&)",
    "insertText": "GetChunk(uint32 ChunkIndex)"
  },
  {
    "label": "GetChunkFromDDC()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChunkFromDDC(int32 ChunkIndex, uint8** OutChunkData, bool bMakeSureChunkIsLoaded)"
  },
  {
    "label": "GetDerivedDataKey()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA FString)",
    "insertText": "GetDerivedDataKey()"
  },
  {
    "label": "GetSizeOfFirstAudioChunkInSeconds()",
    "kind": "Method",
    "detail": "Function (FPerPlatformFloat)",
    "insertText": "GetSizeOfFirstAudioChunkInSeconds()"
  },
  {
    "label": "GetNumChannels()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumChannels()"
  },
  {
    "label": "FindRuntimeFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindRuntimeFormat(const USoundWave&)"
  },
  {
    "label": "CacheRuntimeFormatDependentState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheRuntimeFormatDependentState(const FName InFormatName)"
  },
  {
    "label": "GetZerothChunkData()",
    "kind": "Method",
    "detail": "Function (FBulkDataBuffer<uint8> ZerothChunkData ; # if WITH_EDITOR FCriticalSection LoadZerothChunkDataCriticalSection ; # endif FBulkDataBuffer<uint8>&)",
    "insertText": "GetZerothChunkData()"
  },
  {
    "label": "IMPL_AUDIOPROXY_CLASS()",
    "kind": "Method",
    "detail": "Function (FStreamedAudioPlatformData RunningPlatformData ; FAudioChunkHandle FirstChunk ; FFormatContainer CompressedFormatData ; int32 ResourceSize = 0 ; FBulkDataBuffer<uint8> ResourceData ; ESoundWaveLoadingBehavior LoadingBehavior = ESoundWaveLoadingBehavior::Uninitialized ; # if WITH_EDITORONLY_DATA FPerPlatformFloat SizeOfFirstAudioChunkInSeconds = 0 . f ; # endif # if WITH_EDITOR int32 CurrentChunkRevision = 0 ; # endif FName NameCached ; FName PackageNameCached ; FName RuntimeFormat { \" FSoundWaveProxy_InvalidFormat \" } ; FObjectKey SoundWaveKeyCached ; TArray<FSoundWaveCuePoint> CuePoints ; TArray<FSoundWaveCuePoint> LoopRegions ; ESoundAssetCompressionType SoundAssetCompressionType = ESoundAssetCompressionType::BinkAudio ; FGuid WaveGuid ; float SampleRate = 0 ; float Duration = 0 ; uint32 NumChannels = 0 ; int32 NumFrames = 0 ; uint8 bIsLooping : 1 ; uint8 bIsTemplate : 1 ; uint8 bIsStreaming : 1 ; uint8 bIsSeekable : 1 ; uint8 bShouldUseStreamCaching : 1 ; uint8 bLoadingBehaviorOverridden : 1 ; uint8 bHasError : 1 ; # if WITH_EDITOR uint8 bLoadedFromCookedData : 1 ; # endif class USoundWave ; } ; using FSoundWaveProxyPtr = TSharedPtr<FSoundWaveProxy,ESPMode::ThreadSafe> ; class FSoundWaveProxy : public Audio::TProxyData<FSoundWaveProxy> { public :)",
    "insertText": "IMPL_AUDIOPROXY_CLASS(FSoundWaveProxy)"
  },
  {
    "label": "FSoundWaveProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoundWaveProxy(USoundWave* InWave)"
  },
  {
    "label": "FSoundWaveProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoundWaveProxy(const FSoundWaveProxy& Other)"
  },
  {
    "label": "FSoundWaveProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSoundWaveProxy()"
  },
  {
    "label": "GetFName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetFName()"
  },
  {
    "label": "GetPackageName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetPackageName()"
  },
  {
    "label": "GetFObjectKey()",
    "kind": "Method",
    "detail": "Function (const FObjectKey&)",
    "insertText": "GetFObjectKey()"
  },
  {
    "label": "GetSampleRate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSampleRate()"
  },
  {
    "label": "GetCuePoints()",
    "kind": "Method",
    "detail": "Function (const TArray<FSoundWaveCuePoint>&)",
    "insertText": "GetCuePoints()"
  },
  {
    "label": "GetLoopRegions()",
    "kind": "Method",
    "detail": "Function (const TArray<FSoundWaveCuePoint>&)",
    "insertText": "GetLoopRegions()"
  },
  {
    "label": "IsLooping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLooping()"
  },
  {
    "label": "IsTemplate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTemplate()"
  },
  {
    "label": "HasCompressedData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCompressedData(FName Format, ITargetPlatform* TargetPlatform = USoundWave::GetRunningPlatform())"
  },
  {
    "label": "GetLoadingBehavior()",
    "kind": "Method",
    "detail": "Function (ESoundWaveLoadingBehavior)",
    "insertText": "GetLoadingBehavior()"
  },
  {
    "label": "GetZerothChunk()",
    "kind": "Method",
    "detail": "Function (TArrayView<const uint8>)",
    "insertText": "GetZerothChunk(const FSoundWaveProxyPtr& SoundWaveProxy, bool bForImmediatePlayback = false)"
  },
  {
    "label": "GetSoundWaveData()",
    "kind": "Method",
    "detail": "Function (const FSoundWavePtr)",
    "insertText": "GetSoundWaveData()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FSoundWaveProxy& InProxy)"
  }
]