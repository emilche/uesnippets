[
  {
    "label": "FSoundWaveData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWaveData"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "EAudioSpeakers",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAudioSpeakers"
  },
  {
    "label": "FActiveSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSound"
  },
  {
    "label": "FSoundParseParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundParseParameters"
  },
  {
    "label": "FPlatformAudioCookOverrides",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformAudioCookOverrides"
  },
  {
    "label": "EDecompressionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDecompressionType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStreamedAudioChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamedAudioChunk"
  },
  {
    "label": "FStreamedAudioPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamedAudioPlatformData"
  },
  {
    "label": "FStreamedAudioChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamedAudioChunk"
  },
  {
    "label": "FStreamedAudioAsyncCacheDerivedDataTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamedAudioAsyncCacheDerivedDataTask"
  },
  {
    "label": "FStreamedAudioChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamedAudioChunk"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "FSoundWaveSpectralData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveSpectralData"
  },
  {
    "label": "FSoundWaveSpectralDataPerSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveSpectralDataPerSound"
  },
  {
    "label": "FSoundWaveEnvelopeDataPerSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveEnvelopeDataPerSound"
  },
  {
    "label": "FCompareSpectralDataByFrequencyHz",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareSpectralDataByFrequencyHz"
  },
  {
    "label": "FSoundWaveSpectralDataEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveSpectralDataEntry"
  },
  {
    "label": "FSoundWaveSpectralTimeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveSpectralTimeData"
  },
  {
    "label": "FSoundWaveEnvelopeTimeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveEnvelopeTimeData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSoundWaveCuePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveCuePoint"
  },
  {
    "label": "USoundFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundFactory"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "ISoundWaveClient",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISoundWaveClient"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSubtitleCue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubtitleCue"
  },
  {
    "label": "UAssetImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetImportData"
  },
  {
    "label": "UCurveTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveTable"
  },
  {
    "label": "UCurveTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveTable"
  },
  {
    "label": "FAsyncAudioDecompressWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncAudioDecompressWorker"
  },
  {
    "label": "FEditorAudioBulkData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorAudioBulkData"
  },
  {
    "label": "UWaveformTransformationBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWaveformTransformationBase"
  },
  {
    "label": "FSoundWaveCompilingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWaveCompilingManager"
  },
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "vs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "vs"
  },
  {
    "label": "since",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "since"
  },
  {
    "label": "UCurveTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveTable"
  },
  {
    "label": "UCurveTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveTable"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FSoundWaveProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWaveProxy"
  },
  {
    "label": "USoundFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundFactory"
  },
  {
    "label": "FSoundWaveData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWaveData"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "FSoundWaveData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWaveData"
  },
  {
    "label": "FSoundWaveProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWaveProxy"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, UObject* Owner, int32 ChunkIndex)"
  },
  {
    "label": "GetCopy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCopy(void** OutChunkData)"
  },
  {
    "label": "MoveOutAsBuffer()",
    "kind": "Method",
    "detail": "Function (FBulkDataBuffer<uint8>)",
    "insertText": "MoveOutAsBuffer()"
  },
  {
    "label": "StoreInDerivedDataCache()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "StoreInDerivedDataCache(const FString& InDerivedDataKey, const FStringView& SoundWaveName)"
  },
  {
    "label": "FStreamedAudioPlatformData()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FStreamedAudioPlatformData()"
  },
  {
    "label": "GetChunkFromDDC()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChunkFromDDC(int32 ChunkIndex, uint8** OutChunkData, bool bMakeSureChunkIsLoaded = false)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, class USoundWave* Owner)"
  },
  {
    "label": "Cache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cache(class USoundWave& InSoundWave, const FPlatformAudioCookOverrides* CompressionOverrides, FName AudioFormatName, uint32 InFlags, const ITargetPlatform* InTargetPlatform=nullptr)"
  },
  {
    "label": "FinishCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishCache()"
  },
  {
    "label": "TryInlineChunkData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryInlineChunkData()"
  },
  {
    "label": "RescheduleAsyncTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RescheduleAsyncTask(FQueuedThreadPool* InThreadPool, EQueuedWorkPriority InPriority)"
  },
  {
    "label": "WaitAsyncTaskWithTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitAsyncTaskWithTimeout(float InTimeoutInSeconds)"
  },
  {
    "label": "DeserializeChunkFromDDC()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DeserializeChunkFromDDC(TArray<uint8> SerializedData, FStreamedAudioChunk &ChunkToDeserializeInto, int32 ChunkIndex, uint8** &OutChunkData)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "ensure(false)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"UNKNOWN\")"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "ensure(false)"
  },
  {
    "label": "SetSoundAssetCompressionType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoundAssetCompressionType(ESoundAssetCompressionType InSoundAssetCompressionType, bool bMarkDirty = true)"
  },
  {
    "label": "GetInterpolatedCookedFFTDataForTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInterpolatedCookedFFTDataForTime(float InTime, uint32& InOutLastIndex, TArray<FSoundWaveSpectralData>& OutData, bool bLoop)"
  },
  {
    "label": "GetInterpolatedCookedEnvelopeDataForTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInterpolatedCookedEnvelopeDataForTime(float InTime, uint32& InOutLastIndex, float& OutAmplitude, bool bLoop)"
  },
  {
    "label": "RetainCompressedAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetainCompressedAudio(bool bForceSync = false)"
  },
  {
    "label": "ReleaseCompressedAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseCompressedAudio()"
  },
  {
    "label": "IsRetainingAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRetainingAudio()"
  },
  {
    "label": "OverrideLoadingBehavior()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideLoadingBehavior(ESoundWaveLoadingBehavior InLoadingBehavior)"
  },
  {
    "label": "GetInterpolatedCookedFFTDataForTimeInternal()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetInterpolatedCookedFFTDataForTimeInternal(float InTime, uint32 StartingIndex, TArray<FSoundWaveSpectralData>& OutData, bool bLoop)"
  },
  {
    "label": "GetInterpolatedCookedEnvelopeDataForTimeInternal()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetInterpolatedCookedEnvelopeDataForTimeInternal(float InTime, uint32 StartingIndex, float& OutAmplitude, bool bLoop)"
  },
  {
    "label": "UpdateAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAsset(bool bMarkDirty = true)"
  },
  {
    "label": "SerializeCuePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeCuePoints(FArchive& Ar, const bool bIsLoadingFromCookedArchive)"
  },
  {
    "label": "GET_MEMBER_NAME_CHECKED()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GET_MEMBER_NAME_CHECKED(USoundWave, bEnableCloudStreaming)"
  },
  {
    "label": "SetCloudStreamingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCloudStreamingEnabled(bool bEnabled)"
  },
  {
    "label": "TriggerRecookForCloudStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerRecookForCloudStreaming()"
  },
  {
    "label": "GET_MEMBER_NAME_CHECKED()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GET_MEMBER_NAME_CHECKED(USoundWave, PlatformSettings)"
  },
  {
    "label": "GetDefaultLoadingBehavior()",
    "kind": "Method",
    "detail": "Function (ESoundWaveLoadingBehavior)",
    "insertText": "GetDefaultLoadingBehavior()"
  },
  {
    "label": "CreateFromBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFromBulkData(FBulkData& InBulkData, const FGuid& InGuid, UObject* Owner)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, UObject* Owner, bool bAllowRegister=true)"
  },
  {
    "label": "UpdatePayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePayload(FSharedBuffer InPayload, UObject* Owner = nullptr)"
  },
  {
    "label": "LoadZerothChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadZerothChunk()"
  },
  {
    "label": "PostImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostImport()"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSave(FObjectPreSaveContext SaveContext)"
  },
  {
    "label": "RescheduleAsyncTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RescheduleAsyncTask(FQueuedThreadPool* InThreadPool, EQueuedWorkPriority InPriority)"
  },
  {
    "label": "WaitAsyncTaskWithTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitAsyncTaskWithTimeout(float InTimeoutInSeconds)"
  },
  {
    "label": "CreateNewSoundWaveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewSoundWaveData()"
  },
  {
    "label": "CreateSoundWaveProxy()",
    "kind": "Method",
    "detail": "Function (FSoundWaveProxyPtr)",
    "insertText": "CreateSoundWaveProxy()"
  },
  {
    "label": "AddPlayingSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPlayingSource(const FSoundWaveClientPtr& Source)"
  },
  {
    "label": "RemovePlayingSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePlayingSource(const FSoundWaveClientPtr& Source)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (UE::TUniqueLock)",
    "insertText": "Lock(SourcesPlayingCs)"
  },
  {
    "label": "SetTimecodeInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimecodeInfo(const FSoundWaveTimecodeInfo& InTimecode)"
  },
  {
    "label": "GetResourceSizeForFormat()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetResourceSizeForFormat(FName Format)"
  },
  {
    "label": "FreeResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeResources(bool bStopSoundsUsingThisResource = true)"
  },
  {
    "label": "CleanupDecompressor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CleanupDecompressor(bool bForceCleanup = false)"
  },
  {
    "label": "InitAudioResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAudioResource(FByteBulkData& CompressedData)"
  },
  {
    "label": "InitAudioResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitAudioResource(FName Format)"
  },
  {
    "label": "RemoveAudioResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAudioResource()"
  },
  {
    "label": "InvalidateSoundWaveIfNeccessary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateSoundWaveIfNeccessary()"
  },
  {
    "label": "GetPlatformSpecificFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPlatformSpecificFormat(FName Format, const FPlatformAudioCookOverrides* CompressionOverrides)"
  },
  {
    "label": "FlushAsyncLoadingDataFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushAsyncLoadingDataFormats()"
  },
  {
    "label": "BakeFFTAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeFFTAnalysis()"
  },
  {
    "label": "BakeEnvelopeAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeEnvelopeAnalysis()"
  },
  {
    "label": "LogBakedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogBakedData()"
  },
  {
    "label": "BeginGetCompressedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginGetCompressedData(FName Format, const FPlatformAudioCookOverrides* CompressionOverrides, const ITargetPlatform* InTargetPlatform)"
  },
  {
    "label": "InvalidateCompressedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateCompressedData(bool bFreeResources = false, bool bRebuildStreamingChunks = true)"
  },
  {
    "label": "HasStreamingChunks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStreamingChunks()"
  },
  {
    "label": "GET_MEMBER_NAME_CHECKED()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GET_MEMBER_NAME_CHECKED(USoundWave, Curves)"
  },
  {
    "label": "GetZerothChunk()",
    "kind": "Method",
    "detail": "Function (uint8>)",
    "insertText": "GetZerothChunk(bool bForImmediatePlayback = false)"
  },
  {
    "label": "UpdatePlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlatformData()"
  },
  {
    "label": "CleanupCachedRunningPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupCachedRunningPlatformData()"
  },
  {
    "label": "SerializeCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeCookedPlatformData(class FArchive& Ar)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(const TCHAR* InErrorMsg=nullptr)"
  },
  {
    "label": "ResetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetError()"
  },
  {
    "label": "GetSampleRateForTargetPlatform()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSampleRateForTargetPlatform(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "SetRedrawThumbnail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRedrawThumbnail(bool bInRedraw)"
  },
  {
    "label": "CachePlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachePlatformData(bool bAsyncCache = false)"
  },
  {
    "label": "BeginCachePlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCachePlatformData()"
  },
  {
    "label": "FinishCachePlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishCachePlatformData()"
  },
  {
    "label": "ForceRebuildPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRebuildPlatformData()"
  },
  {
    "label": "GetChunkData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChunkData(int32 ChunkIndex, uint8** OutChunkData, bool bMakeSureChunkIsLoaded = false)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "UE_NONCOPYABLE(FSoundWaveData)"
  },
  {
    "label": "InitializeDataFromSoundWave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeDataFromSoundWave(USoundWave& InWave)"
  },
  {
    "label": "OverrideRuntimeFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideRuntimeFormat(const FName& InRuntimeFormat)"
  },
  {
    "label": "SetAllCuePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllCuePoints(const TArray<FSoundWaveCuePoint>& InCuePoints)"
  },
  {
    "label": "ReleaseCompressedAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseCompressedAudio()"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(const TCHAR* InErrorMsg=nullptr)"
  },
  {
    "label": "ResetError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResetError()"
  },
  {
    "label": "GetChunkData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChunkData(int32 ChunkIndex, uint8** OutChunkData, bool bMakeSureChunkIsLoaded = false)"
  },
  {
    "label": "LoadZerothChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadZerothChunk()"
  },
  {
    "label": "GetChunkFromDDC()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChunkFromDDC(int32 ChunkIndex, uint8** OutChunkData, bool bMakeSureChunkIsLoaded)"
  },
  {
    "label": "DiscardZerothChunkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardZerothChunkData()"
  },
  {
    "label": "CacheRuntimeFormatDependentState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheRuntimeFormatDependentState(const FName InFormatName)"
  },
  {
    "label": "IMPL_AUDIOPROXY_CLASS()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "IMPL_AUDIOPROXY_CLASS(FSoundWaveProxy)"
  },
  {
    "label": "FSoundWaveProxy()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FSoundWaveProxy(USoundWave* InWave)"
  },
  {
    "label": "FSoundWaveProxy()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSoundWaveProxy(const FSoundWaveProxy& Other)"
  },
  {
    "label": "ReleaseCompressedAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseCompressedAudio()"
  },
  {
    "label": "LoadZerothChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadZerothChunk()"
  },
  {
    "label": "GetChunkData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChunkData(int32 ChunkIndex, uint8** OutChunkData, bool bMakeSureChunkIsLoaded = false)"
  },
  {
    "label": "GetZerothChunk()",
    "kind": "Method",
    "detail": "Function (uint8>)",
    "insertText": "GetZerothChunk(const FSoundWaveProxyPtr& SoundWaveProxy, bool bForImmediatePlayback = false)"
  },
  {
    "label": "GetChunkFromDDC()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChunkFromDDC(int32 ChunkIndex, uint8** OutChunkData, bool bMakeSureChunkIsLoaded)"
  },
  {
    "label": "GetSoundWaveData()",
    "kind": "Method",
    "detail": "Function (FSoundWavePtr)",
    "insertText": "GetSoundWaveData()"
  }
]