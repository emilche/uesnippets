[
  {
    "label": "MX_GENSHADER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_GENSHADER_API"
  },
  {
    "label": "ShaderGenerator()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_SHADERGENERATOR_H # define MATERIALX_SHADERGENERATOR_H # include<MaterialXGenShader / Export . h> # include<MaterialXGenShader / ColorManagementSystem . h> # include<MaterialXGenShader / Factory . h> # include<MaterialXGenShader / ShaderStage . h> # include<MaterialXGenShader / Syntax . h> # include<MaterialXFormat / File . h> # include<MaterialXCore / Exception . h> MATERIALX_NAMESPACE_BEGIN class ShaderGenerator { public : ~)",
    "insertText": "ShaderGenerator()"
  },
  {
    "label": "getTarget()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getTarget()"
  },
  {
    "label": "emitScopeEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitScopeEnd(ShaderStage& stage, bool semicolon = false, bool newline = true)"
  },
  {
    "label": "emitLineBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitLineBegin(ShaderStage& stage)"
  },
  {
    "label": "emitLineEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitLineEnd(ShaderStage& stage, bool semicolon = true)"
  },
  {
    "label": "emitLineBreak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitLineBreak(ShaderStage& stage)"
  },
  {
    "label": "emitString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitString(const string& str, ShaderStage& stage)"
  },
  {
    "label": "emitLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitLine(const string& str, ShaderStage& stage, bool semicolon = true)"
  },
  {
    "label": "emitComment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitComment(const string& str, ShaderStage& stage)"
  },
  {
    "label": "emitBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitBlock(const string& str, const FilePath& sourceFilename, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitLibraryInclude()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitLibraryInclude(const FilePath& filename, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitValue()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "emitValue(const T& value, ShaderStage& stage)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (stage . addValue<)",
    "insertText": "T(value)"
  },
  {
    "label": "emitFunctionDefinition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "emitFunctionDefinition(const ShaderNode& node, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitFunctionDefinitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitFunctionDefinitions(const ShaderGraph& graph, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitFunctionCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitFunctionCall(const ShaderNode& node, GenContext& context, ShaderStage& stage, bool checkScope = true)"
  },
  {
    "label": "emitFunctionCalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitFunctionCalls(const ShaderGraph& graph, GenContext& context, ShaderStage& stage, uint32_t classification = 0u)"
  },
  {
    "label": "emitDependentFunctionCalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitDependentFunctionCalls(const ShaderNode& node, GenContext& context, ShaderStage& stage, uint32_t classification = 0u)"
  },
  {
    "label": "emitFunctionBodyBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitFunctionBodyBegin(const ShaderNode& node, GenContext& context, ShaderStage& stage, Syntax::Punctuation punc = Syntax::CURLY_BRACKETS)"
  },
  {
    "label": "emitFunctionBodyEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitFunctionBodyEnd(const ShaderNode& node, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitTypeDefinitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitTypeDefinitions(GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitInput(const ShaderInput* input, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitOutput(const ShaderOutput* output, bool includeType, bool assignValue, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitVariableDeclarations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitVariableDeclarations(const VariableBlock& block, const string& qualifier, const string& separator, GenContext& context, ShaderStage& stage, bool assignValue = true)"
  },
  {
    "label": "emitVariableDeclaration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitVariableDeclaration(const ShaderPort* variable, const string& qualifier, GenContext& context, ShaderStage& stage, bool assignValue = true)"
  },
  {
    "label": "getClosureContexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getClosureContexts(const ShaderNode& node, vector<ClosureContext*>& cct)"
  },
  {
    "label": "getUpstreamResult()",
    "kind": "Method",
    "detail": "Function (string)",
    "insertText": "getUpstreamResult(const ShaderInput* input, GenContext& context)"
  },
  {
    "label": "getSyntax()",
    "kind": "Method",
    "detail": "Function (const Syntax&)",
    "insertText": "getSyntax()"
  },
  {
    "label": "implementationRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "implementationRegistered(const string& name)"
  },
  {
    "label": "getImplementation()",
    "kind": "Method",
    "detail": "Function (ShaderNodeImplPtr)",
    "insertText": "getImplementation(const NodeDef& nodedef, GenContext& context)"
  },
  {
    "label": "setColorManagementSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setColorManagementSystem(ColorManagementSystemPtr colorManagementSystem)"
  },
  {
    "label": "getColorManagementSystem()",
    "kind": "Method",
    "detail": "Function (_colorManagementSystem = colorManagementSystem ; } ColorManagementSystemPtr)",
    "insertText": "getColorManagementSystem()"
  },
  {
    "label": "getUnitSystem()",
    "kind": "Method",
    "detail": "Function (_unitSystem = unitSystem ; } UnitSystemPtr)",
    "insertText": "getUnitSystem()"
  },
  {
    "label": "ShaderGenerator()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "ShaderGenerator(SyntaxPtr syntax)"
  },
  {
    "label": "createStage()",
    "kind": "Method",
    "detail": "Function (ShaderStagePtr)",
    "insertText": "createStage(const string& name, Shader& shader)"
  },
  {
    "label": "setFunctionName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFunctionName(const string& functionName, ShaderStage& stage)"
  },
  {
    "label": "setFunctionName()",
    "kind": "Method",
    "detail": "Function (stage .)",
    "insertText": "setFunctionName(functionName)"
  },
  {
    "label": "replaceTokens()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "replaceTokens(const StringMap& substitutions, ShaderStage& stage)"
  }
]