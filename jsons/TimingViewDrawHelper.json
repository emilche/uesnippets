[
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FDrawContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDrawContext"
  },
  {
    "label": "ITimingTrackDrawContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingTrackDrawContext"
  },
  {
    "label": "FTimingEventsTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingEventsTrack"
  },
  {
    "label": "FTimingTrackViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingTrackViewport"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTimingViewLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimingViewLayout"
  },
  {
    "label": "FTimingEventsTrackDrawState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimingEventsTrackDrawState"
  },
  {
    "label": "FBoxPrimitive",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoxPrimitive"
  },
  {
    "label": "FTextPrimitive",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextPrimitive"
  },
  {
    "label": "FTimingEventsTrackDrawStateBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingEventsTrackDrawStateBuilder"
  },
  {
    "label": "FBoxData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoxData"
  },
  {
    "label": "FTimingViewDrawHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingViewDrawHelper"
  },
  {
    "label": "FTimingEventsTrackDrawState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Math / Color . h \" # include \" Insights / ViewModels / ITimingEvent . h \" # include \" Insights / ViewModels / ITimingViewDrawHelper . h \" # include \" Insights / ViewModels / TimingEventsTrack . h \" struct FSlateBrush ; struct FDrawContext ; namespace UE::Insights { class FDrawContext ; } class ITimingTrackDrawContext ; class FTimingEventsTrack ; class FTimingTrackViewport ; enum class EDrawEventMode : uint32 ; struct FTimingViewLayout ; struct FTimingEventsTrackDrawState { struct FBoxPrimitive { int32 Depth ; float X ; float W ; FLinearColor Color ; } ; struct FTextPrimitive { int32 Depth ; float X ; FString Text ; bool bWhite ; FLinearColor Color ; } ;)",
    "insertText": "FTimingEventsTrackDrawState() : Boxes() , InsideBoxes() , Borders() , Texts() , NumLanes(0) , NumEvents(0) , NumMergedBoxes(0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetNumLanes()",
    "kind": "Method",
    "detail": "Function (NumLanes = 0 ; NumEvents = 0 ; NumMergedBoxes = 0 ; } int32)",
    "insertText": "GetNumLanes()"
  },
  {
    "label": "FBoxData()",
    "kind": "Method",
    "detail": "Function (} TArray<FBoxPrimitive> Boxes ; TArray<FBoxPrimitive> InsideBoxes ; TArray<FBoxPrimitive> Borders ; TArray<FTextPrimitive> Texts ; int32 NumLanes ; int32 NumEvents ; int32 NumMergedBoxes ; } ; class FTimingEventsTrackDrawStateBuilder : public ITimingEventsTrackDrawStateBuilder { private : struct FBoxData { float X1 ; float X2 ; uint32 Color ; FLinearColor LinearColor ;)",
    "insertText": "FBoxData() : X1(0.0f), X2(0.0f), Color(0)"
  },
  {
    "label": "FTimingEventsTrackDrawStateBuilder()",
    "kind": "Method",
    "detail": "Function (X1 = 0 . 0 f ; X2 = 0 . 0 f ; Color = 0 ; } } ; public :)",
    "insertText": "FTimingEventsTrackDrawStateBuilder(FTimingEventsTrackDrawState& InState, const FTimingTrackViewport& InViewport, float InFontScale)"
  },
  {
    "label": "FTimingEventsTrackDrawStateBuilder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTimingEventsTrackDrawStateBuilder()"
  },
  {
    "label": "FTimingEventsTrackDrawStateBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimingEventsTrackDrawStateBuilder(const FTimingEventsTrackDrawStateBuilder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTimingEventsTrackDrawStateBuilder&)",
    "insertText": "operator(const FTimingEventsTrackDrawStateBuilder&)"
  },
  {
    "label": "GetViewport()",
    "kind": "Method",
    "detail": "Function (const FTimingTrackViewport&)",
    "insertText": "GetViewport()"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(double InEventStartTime, double InEventEndTime, uint32 InEventDepth, uint32 InEventColor, GetEventNameCallback InGetEventNameCallback)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "GetMaxDepth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxDepth()"
  },
  {
    "label": "FlushBox()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "FlushBox(const FBoxData& Box, const int32 Depth)"
  },
  {
    "label": "ToInt32()",
    "kind": "Method",
    "detail": "Function (private : FTimingEventsTrackDrawState& DrawState ; const FTimingTrackViewport& Viewport ; int32 MaxDepth ; TArray<float> LastEventX2 ; TArray<FBoxData> LastBox ; const FSlateFontInfo EventFont ; float FontScale ; } ; class FTimingViewDrawHelper final : public ITimingViewDrawHelper { private : enum class EDrawLayer : int32 { TrackBackground,EventBorder,EventFill,EventText,EventHighlight,RelationBackground,Relation,HeaderBackground,HeaderText,Count,} ; int32)",
    "insertText": "ToInt32(EDrawLayer Layer)"
  },
  {
    "label": "FTimingViewDrawHelper()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FTimingViewDrawHelper(const UE::Insights::FDrawContext& InDrawContext, const FTimingTrackViewport& InViewport)"
  },
  {
    "label": "FTimingViewDrawHelper()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FTimingViewDrawHelper(const ::FDrawContext& InDrawContext, const FTimingTrackViewport& InViewport)"
  },
  {
    "label": "FTimingViewDrawHelper()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS ~)",
    "insertText": "FTimingViewDrawHelper()"
  },
  {
    "label": "FTimingViewDrawHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTimingViewDrawHelper(const FTimingViewDrawHelper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTimingViewDrawHelper&)",
    "insertText": "operator(const FTimingViewDrawHelper&)"
  },
  {
    "label": "GetWhiteBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetWhiteBrush()"
  },
  {
    "label": "GetHeaderBackgroundLayerId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHeaderBackgroundLayerId()"
  },
  {
    "label": "GetHeaderTextLayerId()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetHeaderTextLayerId()"
  },
  {
    "label": "GetRelationLayerId()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetRelationLayerId()"
  },
  {
    "label": "GetFirstLayerId()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "GetFirstLayerId()"
  },
  {
    "label": "GetDrawContext()",
    "kind": "Method",
    "detail": "Function (} const UE::Insights::FDrawContext&)",
    "insertText": "GetDrawContext()"
  },
  {
    "label": "BeginDrawTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDrawTracks()"
  },
  {
    "label": "DrawEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawEvents(const FTimingEventsTrackDrawState& DrawState, const FTimingEventsTrack& Track, const float OffsetY = 1.0f)"
  },
  {
    "label": "DrawFadedEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawFadedEvents(const FTimingEventsTrackDrawState& DrawState, const FTimingEventsTrack& Track, const float OffsetY = 1.0f, const float Opacity = 0.1f)"
  },
  {
    "label": "DrawLineEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawLineEvents(const FTimingEventsTrackDrawState& DrawState, const FTimingEventsTrack& Track, const float OffsetY = 1.0f)"
  },
  {
    "label": "DrawFadedLineEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawFadedLineEvents(const FTimingEventsTrackDrawState& DrawState, const FTimingEventsTrack& Track, const float OffsetY = 1.0f, const float Opacity = 0.1f)"
  },
  {
    "label": "DrawContextSwitchMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawContextSwitchMarkers(const FTimingEventsTrackDrawState& DrawState, float LineY, float LineH, float Opacity, bool bDrawOverlays, bool bDrawVerticalLines)"
  },
  {
    "label": "DrawMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawMarkers(const FTimingEventsTrackDrawState& DrawState, float LineY, float LineH, float Opacity)"
  },
  {
    "label": "DrawTrackHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTrackHeader(const FBaseTimingTrack& Track)"
  },
  {
    "label": "DrawTrackHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTrackHeader(const FBaseTimingTrack& Track, const int32 HeaderLayerId, const int32 HeaderTextLayerId)"
  },
  {
    "label": "EndDrawTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndDrawTracks()"
  },
  {
    "label": "DrawRelations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawRelations(const TArray<TUniquePtr<ITimingEventRelation>>& Relations, ITimingEventRelation::EDrawFilter Filter)"
  },
  {
    "label": "DrawTimingEventHighlight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTimingEventHighlight(double StartTime, double EndTime, float Y, EDrawEventMode Mode)"
  },
  {
    "label": "GetNumEvents()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumEvents()"
  }
]