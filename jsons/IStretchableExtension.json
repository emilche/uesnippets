[
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "IStretchOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStretchOperation"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "FVirtualTrackArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualTrackArea"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Misc / FrameTime . h \" # include \" Math / Vector2D . h \" # include \" MVVM / ViewModelTypeID . h \" struct FGuid ; struct FPointerEvent ; namespace UE { namespace Sequencer { class IStretchOperation ; class FViewModel ; class FVirtualTrackArea ; enum class EStretchConstraint { AnchorToStart,AnchorToEnd,} ; enum class EStretchResult { Success,Failure } ; struct FStretchParameters { double Anchor = 0 . 0 ; double Handle = 0 . 0 ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "OnInitiateStretch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnInitiateStretch(IStretchOperation& StretchOperation, EStretchConstraint Constraint, FStretchParameters* InOutGlobalParameters)"
  },
  {
    "label": "OnBeginStretch()",
    "kind": "Method",
    "detail": "Function (} EStretchResult)",
    "insertText": "OnBeginStretch(const IStretchOperation& StretchOperation, const FStretchScreenParameters& ScreenParameters, FStretchParameters* InOutParameters)"
  },
  {
    "label": "OnEndStretch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEndStretch(const IStretchOperation& StretchOperation, const FStretchScreenParameters& ScreenParametersm, FStretchParameters* InOutParameters)"
  },
  {
    "label": "IStretchOperation()",
    "kind": "Method",
    "detail": "Function (} } ; class IStretchOperation { public : ~)",
    "insertText": "IStretchOperation()"
  },
  {
    "label": "DoNotSnapTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoNotSnapTo(TSharedPtr<FViewModel> Model)"
  },
  {
    "label": "InitiateStretch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitiateStretch(TSharedPtr<FViewModel> Controller, TSharedPtr<IStretchableExtension> Target, int32 Priority, const FStretchParameters& InParams)"
  }
]