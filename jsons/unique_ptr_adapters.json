[
  {
    "label": "UniquePtrComparator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UniquePtrComparator"
  },
  {
    "label": "Deleter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Deleter"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "UniquePtrMatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UniquePtrMatcher"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_UNIQUE_PTR_ADAPTERS_H_ # define BASE_CONTAINERS_UNIQUE_PTR_ADAPTERS_H_ # include<memory> # include \" base / memory / raw_ptr . h \" namespace base { struct UniquePtrComparator { using is_transparent = int ; template<T,class Deleter = std::default_delete<T>> bool)",
    "insertText": "operator()(const std::unique_ptr<T, Deleter>& lhs, const std::unique_ptr<T, Deleter>& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,class Deleter = std::default_delete<T>> bool)",
    "insertText": "operator()(const std::unique_ptr<T, Deleter>& lhs, const T* rhs)"
  },
  {
    "label": "UniquePtrMatcher()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T,class Deleter = std::default_delete<T>> struct UniquePtrMatcher {)",
    "insertText": "UniquePtrMatcher(T* t) : t_(t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const std::unique_ptr<T, Deleter>& o)"
  },
  {
    "label": "MatchesUniquePtr()",
    "kind": "Method",
    "detail": "Function (} private : const raw_ptr<T,DanglingUntriaged> t_ ; } ; template<class T,class Deleter = std::default_delete<T>> UniquePtrMatcher<T,Deleter>)",
    "insertText": "MatchesUniquePtr(T* t)"
  }
]