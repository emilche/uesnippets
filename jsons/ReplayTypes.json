[
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ELifetimeCondition",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELifetimeCondition"
  },
  {
    "label": "FPlaybackPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlaybackPacket"
  },
  {
    "label": "FLevelNameAndTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLevelNameAndTime"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FReplayCustomVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplayCustomVersion"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FNetworkDemoHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkDemoHeader"
  },
  {
    "label": "FDeltaCheckpointData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeltaCheckpointData"
  },
  {
    "label": "FRepActorsCheckpointParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRepActorsCheckpointParams"
  },
  {
    "label": "FQueuedDemoPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedDemoPacket"
  },
  {
    "label": "FInternetAddrDemo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddrDemo"
  },
  {
    "label": "FScopedForceUnicodeInArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedForceUnicodeInArchive"
  },
  {
    "label": "FScopedStoreArchiveOffset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedStoreArchiveOffset"
  },
  {
    "label": "FReplayExternalData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplayExternalData"
  },
  {
    "label": "FOverridableReplayVersionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverridableReplayVersionData"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectVersion . h \" # include \" Misc / EngineVersion . h \" # include \" Misc / NetworkGuid . h \" # include \" Misc / NetworkVersion . h \" # include \" Net / Common / Packets / PacketTraits . h \" # include \" Net / ReplayResult . h \" # include \" IPAddress . h \" # include \" Serialization / BitReader . h \" # include \" Serialization / CustomVersion . h \" # include \" Traits / IsCharEncodingCompatibleWith . h \" # include \" ReplayTypes . generated . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogDemo, Log, All)"
  },
  {
    "label": "ClientRecorded()",
    "kind": "Method",
    "detail": "Function (class UNetConnection ; enum class EChannelCloseReason : uint8 ; enum ELifetimeCondition : int ; enum class EReplayHeaderFlags : uint32 { None = 0,)",
    "insertText": "ClientRecorded(1 << 0), HasStreamingFixes = (1 << 1), DeltaCheckpoints = (1 << 2), GameSpecificFrameData = (1 << 3), ReplayConnection = (1 << 4), ActorPrioritizationEnabled = (1 << 5), NetRelevancyEnabled = (1 << 6), AsyncRecorded = (1 << 7)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EReplayHeaderFlags)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(EReplayHeaderFlags Flag)"
  },
  {
    "label": "SkipGameSpecific()",
    "kind": "Method",
    "detail": "Function (enum class EWriteDemoFrameFlags : uint32 { None = 0,)",
    "insertText": "SkipGameSpecific(1 << 0)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EWriteDemoFrameFlags)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (struct FPlaybackPacket { TArray<uint8> Data ; float TimeSeconds ; int32 LevelIndex ; uint32 SeenLevelIndex ; void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "CountBytes(Ar)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FLevelNameAndTime() : LevelChangeTimeInMS(0)"
  },
  {
    "label": "FLevelNameAndTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLevelNameAndTime(const FString& InLevelName, uint32 InLevelChangeTimeInMS) : LevelName(InLevelName) , LevelChangeTimeInMS(InLevelChangeTimeInMS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FLevelNameAndTime& LevelNameAndTime)"
  },
  {
    "label": "FReplayCustomVersion()",
    "kind": "Method",
    "detail": "Function (HISTORY_REPLAY_INITIAL = 1,HISTORY_SAVE_ABS_TIME_MS = 2,HISTORY_INCREASE_BUFFER = 3,HISTORY_SAVE_ENGINE_VERSION = 4,HISTORY_EXTRA_VERSION = 5,HISTORY_MULTIPLE_LEVELS = 6,HISTORY_MULTIPLE_LEVELS_TIME_CHANGES = 7,HISTORY_DELETED_STARTUP_ACTORS = 8,HISTORY_HEADER_FLAGS = 9,HISTORY_LEVEL_STREAMING_FIXES = 1 0,HISTORY_SAVE_FULL_ENGINE_VERSION = 1 1,HISTORY_HEADER_GUID = 1 2,HISTORY_CHARACTER_MOVEMENT = 1 3,HISTORY_CHARACTER_MOVEMENT_NOINTERP = 1 4,HISTORY_GUID_NAMETABLE = 1 5,HISTORY_GUIDCACHE_CHECKSUMS = 1 6,HISTORY_SAVE_PACKAGE_VERSION_UE = 1 7,HISTORY_RECORDING_METADATA = 1 8,HISTORY_USE_CUSTOM_VERSION = 1 9,HISTORY_PLUS_ONE,HISTORY_LATEST = HISTORY_PLUS_ONE - 1 } ; struct FReplayCustomVersion { enum Type { BeforeCustomVersionWasAdded = 0,ReplayInitial = 1,SaveAbsTimeMs = 2,IncreaseBuffer = 3,SaveEngineVersion = 4,ExtraVersion = 5,MultipleLevels = 6,MultipleLvelsTimeChanges,DeletedStartupActors = 8,HeaderFlags = 9,LevelStreamingFixes = 1 0,SaveFullEngineVersion = 1 1,HeaderGuid = 1 2,CharacterMovement = 1 3,CharacterMovementNoInterp = 1 4,GuidNameTable = 1 5,GuidCacheChecksums = 1 6,SavePackageVersionUE = 1 7,RecordingMetadata = 1 8,CustomVersions = 1 9,VersionPlusOne,LatestVersion = VersionPlusOne - 1,MinSupportedVersion = CharacterMovement } ; const FGuid Guid ;)",
    "insertText": "FReplayCustomVersion()"
  },
  {
    "label": "FNetworkDemoHeader()",
    "kind": "Method",
    "detail": "Function (FCustomVersionContainer CustomVersions ; FGuid Guid ; float MinRecordHz ; float MaxRecordHz ; float FrameLimitInMS ; float CheckpointLimitInMS ; FString Platform ; EBuildConfiguration BuildConfig ; EBuildTargetType BuildTarget ; FEngineVersion EngineVersion ; EReplayHeaderFlags HeaderFlags ; TArray<FLevelNameAndTime> LevelNamesAndTimes ; TArray<FString> GameSpecificData ; FPackageFileVersion PackageVersionUE ; int32 PackageVersionLicenseeUE ;)",
    "insertText": "FNetworkDemoHeader()"
  },
  {
    "label": "SetDefaultNetworkVersions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultNetworkVersions()"
  },
  {
    "label": "FNetworkDemoHeader()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FNetworkDemoHeader(const FNetworkDemoHeader&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetworkDemoHeader&)",
    "insertText": "operator(const FNetworkDemoHeader&)"
  },
  {
    "label": "FNetworkDemoHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetworkDemoHeader(FNetworkDemoHeader&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetworkDemoHeader&)",
    "insertText": "operator(FNetworkDemoHeader&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS FArchive&)",
    "insertText": "operator(FArchive& Ar, FNetworkDemoHeader& Header)"
  },
  {
    "label": "GetCustomVersion()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCustomVersion(const FGuid& VersionGuid)"
  },
  {
    "label": "FQueuedDemoPacket()",
    "kind": "Method",
    "detail": "Function (} ; class FRepActorsCheckpointParams { public : const double StartCheckpointTime ; const double CheckpointMaxUploadTimePerFrame ; } ; struct FQueuedDemoPacket { TArray<uint8> Data ; int32 SizeBits ; FOutPacketTraits Traits ; uint32 SeenLevelIndex ; public :)",
    "insertText": "FQueuedDemoPacket(uint8* InData, int32 InSizeBytes, int32 InSizeBits) : Data() , SizeBits(InSizeBits) , Traits() , SeenLevelIndex(0)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "AddUninitialized(InSizeBytes)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Data.GetData(), InData, InSizeBytes)"
  },
  {
    "label": "FQueuedDemoPacket()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQueuedDemoPacket(uint8* InData, int32 InSizeBits, FOutPacketTraits& InTraits) : Data() , SizeBits(InSizeBits) , Traits(InTraits) , SeenLevelIndex(0)"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (int32 SizeBytes =)",
    "insertText": "DivideAndRoundUp(InSizeBits, 8)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "AddUninitialized(SizeBytes)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Data.GetData(), InData, SizeBytes)"
  },
  {
    "label": "FInternetAddrDemo()",
    "kind": "Method",
    "detail": "Function (} } ; class FInternetAddrDemo : public FInternetAddr { public :)",
    "insertText": "FInternetAddrDemo()"
  },
  {
    "label": "GetRawIp()",
    "kind": "Method",
    "detail": "Function (} TArray<uint8>)",
    "insertText": "GetRawIp()"
  },
  {
    "label": "SetRawIp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRawIp(const TArray<uint8>& RawAddr)"
  },
  {
    "label": "SetIp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIp(uint32 InAddr)"
  },
  {
    "label": "SetIp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIp(const TCHAR* InAddr, bool& bIsValid)"
  },
  {
    "label": "GetIp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetIp(uint32& OutAddr)"
  },
  {
    "label": "SetPort()",
    "kind": "Method",
    "detail": "Function (OutAddr = 0 ; } void)",
    "insertText": "SetPort(int32 InPort)"
  },
  {
    "label": "GetPort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetPort(int32& OutPort)"
  },
  {
    "label": "GetPort()",
    "kind": "Method",
    "detail": "Function (OutPort = 0 ; } int32)",
    "insertText": "GetPort()"
  },
  {
    "label": "SetBroadcastAddress()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBroadcastAddress()"
  },
  {
    "label": "SetLoopbackAddress()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLoopbackAddress()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString(bool bAppendPort)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FInternetAddr& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FInternetAddrDemo& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "GetConstTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetConstTypeHash()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FInternetAddrDemo& A)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FScopedForceUnicodeInArchive()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FInternetAddr> DemoInternetAddr ; } ; class FScopedForceUnicodeInArchive { public :)",
    "insertText": "FScopedForceUnicodeInArchive()"
  },
  {
    "label": "FScopedForceUnicodeInArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedForceUnicodeInArchive(FScopedForceUnicodeInArchive&&)"
  },
  {
    "label": "FScopedForceUnicodeInArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedForceUnicodeInArchive(const FScopedForceUnicodeInArchive&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedForceUnicodeInArchive&)",
    "insertText": "operator(const FScopedForceUnicodeInArchive&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedForceUnicodeInArchive&)",
    "insertText": "operator(FScopedForceUnicodeInArchive&&)"
  },
  {
    "label": "FScopedForceUnicodeInArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedForceUnicodeInArchive(FArchive& InArchive) : Archive(InArchive) , bWasUnicode(InArchive.IsForcingUnicode())"
  },
  {
    "label": "EnableFastStringSerialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableFastStringSerialization()"
  },
  {
    "label": "RestoreStringSerialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreStringSerialization()"
  },
  {
    "label": "SetForceUnicode()",
    "kind": "Method",
    "detail": "Function (Archive .)",
    "insertText": "SetForceUnicode(true)"
  },
  {
    "label": "SetForceUnicode()",
    "kind": "Method",
    "detail": "Function (Archive .)",
    "insertText": "SetForceUnicode(bWasUnicode)"
  },
  {
    "label": "FScopedStoreArchiveOffset()",
    "kind": "Method",
    "detail": "Function (} } FArchive& Archive ; bool bWasUnicode ; } ; class FScopedStoreArchiveOffset { public :)",
    "insertText": "FScopedStoreArchiveOffset()"
  },
  {
    "label": "FScopedStoreArchiveOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedStoreArchiveOffset(FScopedStoreArchiveOffset&&)"
  },
  {
    "label": "FScopedStoreArchiveOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedStoreArchiveOffset(const FScopedStoreArchiveOffset&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedStoreArchiveOffset&)",
    "insertText": "operator(const FScopedStoreArchiveOffset&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedStoreArchiveOffset&)",
    "insertText": "operator(FScopedStoreArchiveOffset&&)"
  },
  {
    "label": "FScopedStoreArchiveOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedStoreArchiveOffset(FArchive& InAr) : Ar(InAr), StartPosition(Ar.Tell())"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (const FArchivePos CurrentPosition = Ar .)",
    "insertText": "Tell()"
  },
  {
    "label": "CurrentPosition()",
    "kind": "Method",
    "detail": "Function (FArchivePos Offset =)",
    "insertText": "CurrentPosition(StartPosition + sizeof(FArchivePos))"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Seek(StartPosition)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (Ar<<Offset ; Ar .)",
    "insertText": "Seek(CurrentPosition)"
  },
  {
    "label": "FReplayExternalData()",
    "kind": "Method",
    "detail": "Function (} private : FArchive& Ar ; const FArchivePos StartPosition ; } ; class FReplayExternalData { public :)",
    "insertText": "FReplayExternalData() : TimeSeconds(0.0f)"
  },
  {
    "label": "FReplayExternalData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FReplayExternalData(FBitReader&& InReader, const float InTimeSeconds) : Reader(MoveTemp(InReader)) , TimeSeconds(InTimeSeconds)"
  },
  {
    "label": "CountMemory()",
    "kind": "Method",
    "detail": "Function (Reader .)",
    "insertText": "CountMemory(Ar)"
  },
  {
    "label": "FOverridableReplayVersionData()",
    "kind": "Method",
    "detail": "Function (FCustomVersionContainer CustomVersions ; FEngineVersion EngineVersion ; FPackageFileVersion PackageVersionUE ; int32 PackageVersionLicenseeUE ; PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FOverridableReplayVersionData(FOverridableReplayVersionData&&)"
  },
  {
    "label": "FOverridableReplayVersionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOverridableReplayVersionData(const FOverridableReplayVersionData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FOverridableReplayVersionData&)",
    "insertText": "operator(FOverridableReplayVersionData&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FOverridableReplayVersionData&)",
    "insertText": "operator(const FOverridableReplayVersionData&)"
  },
  {
    "label": "FOverridableReplayVersionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOverridableReplayVersionData(const FNetworkDemoHeader& DemoHeader) : Version (DemoHeader.Version) , EngineNetworkProtocolVersion(DemoHeader.EngineNetworkProtocolVersion) , GameNetworkProtocolVersion (DemoHeader.GameNetworkProtocolVersion) , CustomVersions (DemoHeader.CustomVersions) , EngineVersion (DemoHeader.EngineVersion) , PackageVersionUE (DemoHeader.PackageVersionUE) , PackageVersionLicenseeUE (DemoHeader.PackageVersionLicenseeUE)"
  },
  {
    "label": "ApplyVersionDataToDemoHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyVersionDataToDemoHeader(FNetworkDemoHeader& DemoHeader)"
  }
]