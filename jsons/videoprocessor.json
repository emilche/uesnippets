[
  {
    "label": "VideoProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoProcessor"
  },
  {
    "label": "VideoProcessorEncodeCompleteCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoProcessorEncodeCompleteCallback"
  },
  {
    "label": "VideoProcessorDecodeCompleteCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoProcessorDecodeCompleteCallback"
  },
  {
    "label": "VideoProcessor()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_CODECS_TEST_VIDEOPROCESSOR_H_ # define MODULES_VIDEO_CODING_CODECS_TEST_VIDEOPROCESSOR_H_ # include<stddef . h> # include<stdint . h> # include<map> # include<memory> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / test / videocodec_test_fixture . h \" # include \" api / video / encoded_image . h \" # include \" api / video / i420_buffer . h \" # include \" api / video / video_bitrate_allocation . h \" # include \" api / video / video_bitrate_allocator . h \" # include \" api / video / video_frame . h \" # include \" api / video_codecs / video_decoder . h \" # include \" api / video_codecs / video_encoder . h \" # include \" modules / include / module_common_types . h \" # include \" modules / video_coding / codecs / test / videocodec_test_stats_impl . h \" # include \" modules / video_coding / include / video_codec_interface . h \" # include \" modules / video_coding / utility / ivf_file_writer . h \" # include \" rtc_base / buffer . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / thread_annotations . h \" # include \" test / testsupport / frame_reader . h \" # include \" test / testsupport / frame_writer . h \" namespace webrtc { namespace test { class VideoProcessor { public : using VideoDecoderList = std::vector<std::unique_ptr<VideoDecoder>> ; using LayerKey = std::pair<int,int> ; using IvfFileWriterMap = std::map<LayerKey,std::unique_ptr<IvfFileWriter>> ; using FrameWriterList = std::vector<std::unique_ptr<FrameWriter>> ; using FrameStatistics = VideoCodecTestStats::FrameStatistics ;)",
    "insertText": "VideoProcessor(webrtc::VideoEncoder* encoder, VideoDecoderList* decoders, FrameReader* input_frame_reader, const VideoCodecTestFixture::Config& config, VideoCodecTestStatsImpl* stats, IvfFileWriterMap* encoded_frame_writers, FrameWriterList* decoded_frame_writers)"
  },
  {
    "label": "VideoProcessor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoProcessor()"
  },
  {
    "label": "VideoProcessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoProcessor(const VideoProcessor&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VideoProcessor&)",
    "insertText": "operator(const VideoProcessor&)"
  },
  {
    "label": "ProcessFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessFrame()"
  },
  {
    "label": "SetRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRates(size_t bitrate_kbps, double framerate_fps)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize()"
  },
  {
    "label": "VideoProcessorEncodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (private : class VideoProcessorEncodeCompleteCallback : public webrtc::EncodedImageCallback { public :)",
    "insertText": "VideoProcessorEncodeCompleteCallback(VideoProcessor* video_processor) : video_processor_(video_processor), task_queue_(TaskQueueBase::Current())"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(video_processor_)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(task_queue_)"
  },
  {
    "label": "OnEncodedImage()",
    "kind": "Method",
    "detail": "Function (} Result)",
    "insertText": "OnEncodedImage(const webrtc::EncodedImage& encoded_image, const webrtc::CodecSpecificInfo* codec_specific_info)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(codec_specific_info)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (VideoProcessor* video_processor = video_processor_ ; task_queue_ ->)",
    "insertText": "PostTask([video_processor, encoded_image, codec_specific_info = *codec_specific_info] { video_processor->FrameEncoded(encoded_image, codec_specific_info); })"
  },
  {
    "label": "FrameEncoded()",
    "kind": "Method",
    "detail": "Function (} video_processor_ ->)",
    "insertText": "FrameEncoded(encoded_image, *codec_specific_info)"
  },
  {
    "label": "VideoProcessorDecodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (} private : VideoProcessor* const video_processor_ ; TaskQueueBase* const task_queue_ ; } ; class VideoProcessorDecodeCompleteCallback : public webrtc::DecodedImageCallback { public :)",
    "insertText": "VideoProcessorDecodeCompleteCallback(VideoProcessor* video_processor, size_t simulcast_svc_idx) : video_processor_(video_processor), simulcast_svc_idx_(simulcast_svc_idx), task_queue_(TaskQueueBase::Current())"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "Decoded(webrtc::VideoFrame& image)"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decoded(webrtc::VideoFrame& image, int64_t decode_time_ms)"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Decoded(webrtc::VideoFrame& image, absl::optional<int32_t> decode_time_ms, absl::optional<uint8_t> qp)"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decoded(image)"
  },
  {
    "label": "FrameEncoded()",
    "kind": "Method",
    "detail": "Function (} private : VideoProcessor* const video_processor_ ; const size_t simulcast_svc_idx_ ; TaskQueueBase* const task_queue_ ; } ; void)",
    "insertText": "FrameEncoded(const webrtc::EncodedImage& encoded_image, const webrtc::CodecSpecificInfo& codec_specific)"
  },
  {
    "label": "FrameDecoded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameDecoded(const webrtc::VideoFrame& image, size_t simulcast_svc_idx)"
  },
  {
    "label": "DecodeFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeFrame(const EncodedImage& encoded_image, size_t simulcast_svc_idx)"
  },
  {
    "label": "BuildAndStoreSuperframe()",
    "kind": "Method",
    "detail": "Function (const webrtc::EncodedImage*)",
    "insertText": "BuildAndStoreSuperframe(const EncodedImage& encoded_image, VideoCodecType codec, size_t frame_number, size_t simulcast_svc_idx, bool inter_layer_predicted) RTC_RUN_ON(sequence_checker_)"
  },
  {
    "label": "CalcFrameQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcFrameQuality(const I420BufferInterface& decoded_frame, FrameStatistics* frame_stat)"
  },
  {
    "label": "WriteDecodedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteDecodedFrame(const I420BufferInterface& decoded_frame, FrameWriter& frame_writer)"
  },
  {
    "label": "HandleTailDrops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTailDrops()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const VideoCodecTestFixture::Config config_ ; const size_t num_simulcast_or_spatial_layers_ ; const bool analyze_frame_quality_ ; VideoCodecTestStatsImpl* const stats_ ; webrtc::VideoEncoder* const encoder_ ; VideoDecoderList* const decoders_ ; const std::unique_ptr<VideoBitrateAllocator> bitrate_allocator_ ; VideoBitrateAllocation bitrate_allocation_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  }
]