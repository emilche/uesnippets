[
  {
    "label": "FDiskCacheInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiskCacheInterface"
  },
  {
    "label": "FDiskCacheHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiskCacheHeader"
  },
  {
    "label": "RESET_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RESET_TYPE"
  },
  {
    "label": "mFileGrowSize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Containers / UnrealString . h \" # include \" Windows / WindowsHWrapper . h \" # define IL_MAX_SEMANTIC_NAME 2 5 5 class FDiskCacheInterface { const uint32 mCurrentHeaderVersion = 1 1 ; struct FDiskCacheHeader { uint32 mHeaderVersion ; uint32 mNumPsos ; uint32 mSizeInBytes ; } ; private : FString mFileName ; uint8* mFileStart ; HANDLE mFile ; HANDLE mMemoryMap ; HANDLE mMapAddress ; SIZE_T mCurrentFileMapSize ; SIZE_T mCurrentOffset ; bool mCacheExists ; bool mInErrorState ; bool mEnableDiskCache ; FDiskCacheHeader mHeader ; TArray<void*> mBackedMemory ; const SIZE_T)",
    "insertText": "mFileGrowSize(1024 * 1024)"
  },
  {
    "label": "GrowMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GrowMapping(SIZE_T size, bool firstrun)"
  },
  {
    "label": "AppendData()",
    "kind": "Method",
    "detail": "Function (public : enum RESET_TYPE { RESET_TO_FIRST_OBJECT,RESET_TO_AFTER_LAST_OBJECT } ; bool)",
    "insertText": "AppendData(const void* pData, size_t size)"
  },
  {
    "label": "SetPointerAndAdvanceFilePosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPointerAndAdvanceFilePosition(void** pDest, size_t size, bool backWithSystemMemory = false)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(RESET_TYPE type)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FString &filename, bool bEnable = true)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(uint32 numberOfPSOs)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(uint32 numberOfPSOs)"
  },
  {
    "label": "ClearDiskCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDiskCache()"
  },
  {
    "label": "ClearAndReinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAndReinitialize()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(mFileName, mEnableDiskCache)"
  },
  {
    "label": "GetNumPSOs()",
    "kind": "Method",
    "detail": "Function (} } uint32)",
    "insertText": "GetNumPSOs()"
  },
  {
    "label": "GetDataAtStart()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetDataAtStart()"
  },
  {
    "label": "FDiskCacheInterface()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDiskCacheInterface()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(memory)"
  }
]