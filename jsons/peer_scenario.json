[
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "PeerScenario",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerScenario"
  },
  {
    "label": "available",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "available"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "PeerVideoQualityPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PeerVideoQualityPair"
  },
  {
    "label": "PeerScenario()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "PeerScenario(const testing::TestInfo& test_info,\n                        TimeMode mode = TimeMode::kSimulated)"
  },
  {
    "label": "PeerScenario()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "PeerScenario(std::string file_name,\n                        TimeMode mode = TimeMode::kSimulated)"
  },
  {
    "label": "PeerScenario()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "PeerScenario(\n      std::unique_ptr<LogWriterFactoryInterface> log_writer_manager,\n      TimeMode mode = TimeMode::kSimulated)"
  },
  {
    "label": "ConnectSignaling()",
    "kind": "Method",
    "detail": "Function (SignalingRoute)",
    "insertText": "ConnectSignaling(PeerScenarioClient* caller,\n                                  PeerScenarioClient* callee,\n                                  std::vector<EmulatedNetworkNode*> send_link,\n                                  std::vector<EmulatedNetworkNode*> ret_link)"
  },
  {
    "label": "SimpleConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleConnection(PeerScenarioClient* caller,\n                        PeerScenarioClient* callee,\n                        std::vector<EmulatedNetworkNode*> send_link,\n                        std::vector<EmulatedNetworkNode*> ret_link)"
  },
  {
    "label": "AttachVideoQualityAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachVideoQualityAnalyzer(VideoQualityAnalyzer* analyzer,\n                                  VideoTrackInterface* send_track,\n                                  PeerScenarioClient* receiver)"
  },
  {
    "label": "ProcessMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMessages(TimeDelta duration)"
  },
  {
    "label": "GetLogWriterFactory()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<LogWriterFactoryInterface>)",
    "insertText": "GetLogWriterFactory(\n      std::string name)"
  }
]