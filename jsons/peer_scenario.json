[
  {
    "label": "PeerScenario",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerScenario"
  },
  {
    "label": "PeerVideoQualityPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PeerVideoQualityPair"
  },
  {
    "label": "PeerScenario()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PEER_SCENARIO_PEER_SCENARIO_H_ # define TEST_PEER_SCENARIO_PEER_SCENARIO_H_ # include<list> # include<vector> # include \" api / test / time_controller . h \" # include \" test / gtest . h \" # include \" test / logging / log_writer . h \" # include \" test / network / network_emulation_manager . h \" # include \" test / peer_scenario / peer_scenario_client . h \" # include \" test / peer_scenario / signaling_route . h \" # include \" test / scenario / stats_collection . h \" # include \" test / scenario / video_frame_matcher . h \" namespace webrtc { namespace test { class PeerScenario { public :)",
    "insertText": "PeerScenario(const testing::TestInfo& test_info, TimeMode mode = TimeMode::kSimulated)"
  },
  {
    "label": "PeerScenario()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeerScenario(std::string file_name, TimeMode mode = TimeMode::kSimulated)"
  },
  {
    "label": "PeerScenario()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeerScenario(std::unique_ptr<LogWriterFactoryInterface> log_writer_manager, TimeMode mode = TimeMode::kSimulated)"
  },
  {
    "label": "net()",
    "kind": "Method",
    "detail": "Function (NetworkEmulationManagerImpl*)",
    "insertText": "net()"
  },
  {
    "label": "CreateClient()",
    "kind": "Method",
    "detail": "Function (PeerScenarioClient*)",
    "insertText": "CreateClient(std::string name, PeerScenarioClient::Config config)"
  },
  {
    "label": "ConnectSignaling()",
    "kind": "Method",
    "detail": "Function (SignalingRoute)",
    "insertText": "ConnectSignaling(PeerScenarioClient* caller, PeerScenarioClient* callee, std::vector<EmulatedNetworkNode*> send_link, std::vector<EmulatedNetworkNode*> ret_link)"
  },
  {
    "label": "SimpleConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleConnection(PeerScenarioClient* caller, PeerScenarioClient* callee, std::vector<EmulatedNetworkNode*> send_link, std::vector<EmulatedNetworkNode*> ret_link)"
  },
  {
    "label": "AttachVideoQualityAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachVideoQualityAnalyzer(VideoQualityAnalyzer* analyzer, VideoTrackInterface* send_track, PeerScenarioClient* receiver)"
  },
  {
    "label": "WaitAndProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitAndProcess(std::atomic<bool>* event, TimeDelta max_duration = TimeDelta::Seconds(5))"
  },
  {
    "label": "ProcessMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMessages(TimeDelta duration)"
  },
  {
    "label": "PeerVideoQualityPair()",
    "kind": "Method",
    "detail": "Function (private : struct PeerVideoQualityPair { public :)",
    "insertText": "PeerVideoQualityPair(Clock* capture_clock, VideoQualityAnalyzer* analyzer) : matcher_({analyzer->Handler()}), capture_tap_(capture_clock, &matcher_), decode_tap_(capture_clock, &matcher_, 0)"
  },
  {
    "label": "clock()",
    "kind": "Method",
    "detail": "Function (} VideoFrameMatcher matcher_ ; CapturedFrameTap capture_tap_ ; DecodedFrameTap decode_tap_ ; } ; Clock*)",
    "insertText": "clock()"
  },
  {
    "label": "GetLogWriterFactory()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<LogWriterFactoryInterface>)",
    "insertText": "GetLogWriterFactory(std::string name)"
  }
]