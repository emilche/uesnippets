[
  {
    "label": "SctpDataChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SctpDataChannel"
  },
  {
    "label": "SctpDataChannelControllerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SctpDataChannelControllerInterface"
  },
  {
    "label": "InternalDataChannelInit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InternalDataChannelInit"
  },
  {
    "label": "OpenHandshakeRole",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OpenHandshakeRole"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "SctpSidAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SctpSidAllocator"
  },
  {
    "label": "SctpDataChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SctpDataChannel"
  },
  {
    "label": "HandshakeState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "HandshakeState"
  },
  {
    "label": "InternalDataChannelInit()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "InternalDataChannelInit(const DataChannelInit& base)"
  },
  {
    "label": "AllocateSid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllocateSid(rtc::SSLRole role, int* sid)"
  },
  {
    "label": "ReserveSid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReserveSid(int sid)"
  },
  {
    "label": "ReleaseSid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSid(int sid)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<SctpDataChannel>)",
    "insertText": "Create(\n      SctpDataChannelControllerInterface* controller,\n      const std::string& label,\n      const InternalDataChannelInit& config,\n      rtc::Thread* signaling_thread,\n      rtc::Thread* network_thread)"
  },
  {
    "label": "CreateProxy()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<DataChannelInterface>)",
    "insertText": "CreateProxy(\n      rtc::scoped_refptr<SctpDataChannel> channel)"
  },
  {
    "label": "controller()",
    "kind": "Method",
    "detail": "Function (the)",
    "insertText": "controller(DataChannelController)"
  },
  {
    "label": "DetachFromController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachFromController()"
  },
  {
    "label": "CloseAbruptlyWithError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseAbruptlyWithError(RTCError error)"
  },
  {
    "label": "CloseAbruptlyWithDataChannelFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseAbruptlyWithDataChannelFailure(const std::string& message)"
  },
  {
    "label": "OnTransportReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportReady(bool writable)"
  },
  {
    "label": "OnDataReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataReceived(const cricket::ReceiveDataParams& params,\n                      const rtc::CopyOnWriteBuffer& payload)"
  },
  {
    "label": "SetSctpSid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSctpSid(int sid)"
  },
  {
    "label": "OnClosingProcedureStartedRemotely()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClosingProcedureStartedRemotely(int sid)"
  },
  {
    "label": "OnClosingProcedureComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClosingProcedureComplete(int sid)"
  },
  {
    "label": "OnTransportChannelCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportChannelCreated()"
  },
  {
    "label": "OnTransportChannelClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportChannelClosed(RTCError error)"
  },
  {
    "label": "ResetInternalIdAllocatorForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetInternalIdAllocatorForTesting(int new_value)"
  },
  {
    "label": "SctpDataChannel()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "SctpDataChannel(const InternalDataChannelInit& config,\n                  SctpDataChannelControllerInterface* client,\n                  const std::string& label,\n                  rtc::Thread* signaling_thread,\n                  rtc::Thread* network_thread)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "UpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateState()"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(DataState state)"
  },
  {
    "label": "DisconnectFromTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectFromTransport()"
  },
  {
    "label": "DeliverQueuedReceivedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeliverQueuedReceivedData()"
  },
  {
    "label": "SendQueuedDataMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendQueuedDataMessages()"
  },
  {
    "label": "SendDataMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendDataMessage(const DataBuffer& buffer, bool queue_if_blocked)"
  },
  {
    "label": "QueueSendDataMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueueSendDataMessage(const DataBuffer& buffer)"
  },
  {
    "label": "SendQueuedControlMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendQueuedControlMessages()"
  },
  {
    "label": "QueueControlMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueControlMessage(const rtc::CopyOnWriteBuffer& buffer)"
  },
  {
    "label": "SendControlMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendControlMessage(const rtc::CopyOnWriteBuffer& buffer)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (error_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (controller_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (queued_control_data_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (queued_received_data_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (queued_send_data_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread_)"
  }
]