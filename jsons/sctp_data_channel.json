[
  {
    "label": "SctpDataChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SctpDataChannel"
  },
  {
    "label": "SctpDataChannelControllerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SctpDataChannelControllerInterface"
  },
  {
    "label": "InternalDataChannelInit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InternalDataChannelInit"
  },
  {
    "label": "OpenHandshakeRole",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OpenHandshakeRole"
  },
  {
    "label": "SctpSidAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SctpSidAllocator"
  },
  {
    "label": "HandshakeState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "HandshakeState"
  },
  {
    "label": "SendData()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_SCTP_DATA_CHANNEL_H_ # define PC_SCTP_DATA_CHANNEL_H_ # include<stdint . h> # include<memory> # include<set> # include<string> # include \" absl / types / optional . h \" # include \" api / data_channel_interface . h \" # include \" api / priority . h \" # include \" api / rtc_error . h \" # include \" api / scoped_refptr . h \" # include \" api / transport / data_channel_transport_interface . h \" # include \" media / base / media_channel . h \" # include \" pc / data_channel_utils . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / ssl_stream_adapter . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class SctpDataChannel ; class SctpDataChannelControllerInterface { public : bool)",
    "insertText": "SendData(int sid, const SendDataParams& params, const rtc::CopyOnWriteBuffer& payload, cricket::SendDataResult* result)"
  },
  {
    "label": "ConnectDataChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConnectDataChannel(SctpDataChannel* data_channel)"
  },
  {
    "label": "DisconnectDataChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectDataChannel(SctpDataChannel* data_channel)"
  },
  {
    "label": "AddSctpDataStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSctpDataStream(int sid)"
  },
  {
    "label": "RemoveSctpDataStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSctpDataStream(int sid)"
  },
  {
    "label": "ReadyToSendData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadyToSendData()"
  },
  {
    "label": "SctpDataChannelControllerInterface()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "SctpDataChannelControllerInterface()"
  },
  {
    "label": "InternalDataChannelInit()",
    "kind": "Method",
    "detail": "Function (} } ; struct InternalDataChannelInit : public DataChannelInit { enum OpenHandshakeRole { kOpener,kAcker,kNone } ;)",
    "insertText": "InternalDataChannelInit() : open_handshake_role(kOpener)"
  },
  {
    "label": "InternalDataChannelInit()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InternalDataChannelInit(const DataChannelInit& base)"
  },
  {
    "label": "AllocateSid()",
    "kind": "Method",
    "detail": "Function (OpenHandshakeRole open_handshake_role ; } ; class SctpSidAllocator { public : bool)",
    "insertText": "AllocateSid(rtc::SSLRole role, int* sid)"
  },
  {
    "label": "ReserveSid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReserveSid(int sid)"
  },
  {
    "label": "ReleaseSid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSid(int sid)"
  },
  {
    "label": "IsSidAvailable()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsSidAvailable(int sid)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::set<int> used_sids_ ; } ; class SctpDataChannel : public DataChannelInterface,public sigslot::has_slots<> { public : rtc::scoped_refptr<SctpDataChannel>)",
    "insertText": "Create(SctpDataChannelControllerInterface* controller, const std::string& label, const InternalDataChannelInit& config, rtc::Thread* signaling_thread, rtc::Thread* network_thread)"
  },
  {
    "label": "CreateProxy()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<DataChannelInterface>)",
    "insertText": "CreateProxy(rtc::scoped_refptr<SctpDataChannel> channel)"
  },
  {
    "label": "DetachFromController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachFromController()"
  },
  {
    "label": "RegisterObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterObserver(DataChannelObserver* observer)"
  },
  {
    "label": "UnregisterObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterObserver()"
  },
  {
    "label": "label()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "label()"
  },
  {
    "label": "ordered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ordered()"
  },
  {
    "label": "maxRetransmits()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "maxRetransmits()"
  },
  {
    "label": "maxPacketLifeTime()",
    "kind": "Method",
    "detail": "Function (} absl::optional<int>)",
    "insertText": "maxPacketLifeTime()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (DataState)",
    "insertText": "state()"
  },
  {
    "label": "error()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "error()"
  },
  {
    "label": "messages_sent()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "messages_sent()"
  },
  {
    "label": "bytes_sent()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "bytes_sent()"
  },
  {
    "label": "messages_received()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "messages_received()"
  },
  {
    "label": "bytes_received()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "bytes_received()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Send(const DataBuffer& buffer)"
  },
  {
    "label": "CloseAbruptlyWithError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseAbruptlyWithError(RTCError error)"
  },
  {
    "label": "CloseAbruptlyWithDataChannelFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseAbruptlyWithDataChannelFailure(const std::string& message)"
  },
  {
    "label": "OnTransportReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportReady(bool writable)"
  },
  {
    "label": "OnDataReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataReceived(const cricket::ReceiveDataParams& params, const rtc::CopyOnWriteBuffer& payload)"
  },
  {
    "label": "SetSctpSid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSctpSid(int sid)"
  },
  {
    "label": "OnClosingProcedureStartedRemotely()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClosingProcedureStartedRemotely(int sid)"
  },
  {
    "label": "OnClosingProcedureComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClosingProcedureComplete(int sid)"
  },
  {
    "label": "OnTransportChannelCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportChannelCreated()"
  },
  {
    "label": "OnTransportChannelClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportChannelClosed(RTCError error)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (DataChannelStats)",
    "insertText": "GetStats()"
  },
  {
    "label": "ResetInternalIdAllocatorForTesting()",
    "kind": "Method",
    "detail": "Function (sigslot::signal1<DataChannelInterface*> SignalOpened ; sigslot::signal1<DataChannelInterface*> SignalClosed ; void)",
    "insertText": "ResetInternalIdAllocatorForTesting(int new_value)"
  },
  {
    "label": "SctpDataChannel()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "SctpDataChannel(const InternalDataChannelInit& config, SctpDataChannelControllerInterface* client, const std::string& label, rtc::Thread* signaling_thread, rtc::Thread* network_thread)"
  },
  {
    "label": "SctpDataChannel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SctpDataChannel()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (private : enum HandshakeState { kHandshakeInit,kHandshakeShouldSendOpen,kHandshakeShouldSendAck,kHandshakeWaitingForAck,kHandshakeReady } ; bool)",
    "insertText": "Init()"
  },
  {
    "label": "UpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateState()"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(DataState state)"
  },
  {
    "label": "DisconnectFromTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectFromTransport()"
  },
  {
    "label": "DeliverQueuedReceivedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeliverQueuedReceivedData()"
  },
  {
    "label": "SendQueuedDataMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendQueuedDataMessages()"
  },
  {
    "label": "SendDataMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendDataMessage(const DataBuffer& buffer, bool queue_if_blocked)"
  },
  {
    "label": "QueueSendDataMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueueSendDataMessage(const DataBuffer& buffer)"
  },
  {
    "label": "SendQueuedControlMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendQueuedControlMessages()"
  },
  {
    "label": "QueueControlMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueControlMessage(const rtc::CopyOnWriteBuffer& buffer)"
  },
  {
    "label": "SendControlMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendControlMessage(const rtc::CopyOnWriteBuffer& buffer)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (rtc::Thread* const signaling_thread_ ; rtc::Thread* const network_thread_ ; const int internal_id_ ; const std::string label_ ; const InternalDataChannelInit config_ ; DataChannelObserver* observer_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread_)"
  },
  {
    "label": "DowncastProxiedDataChannelInterfaceToSctpDataChannelForTesting()",
    "kind": "Method",
    "detail": "Function (} ; SctpDataChannel*)",
    "insertText": "DowncastProxiedDataChannelInterfaceToSctpDataChannelForTesting(DataChannelInterface* channel)"
  }
]