[
  {
    "label": "FullBandErleEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FullBandErleEstimator"
  },
  {
    "label": "ErleInstantaneous",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ErleInstantaneous"
  },
  {
    "label": "FullBandErleEstimator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_FULLBAND_ERLE_ESTIMATOR_H_ # define MODULES_AUDIO_PROCESSING_AEC3_FULLBAND_ERLE_ESTIMATOR_H_ # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / audio / echo_canceller3_config . h \" # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" modules / audio_processing / logging / apm_data_dumper . h \" namespace webrtc { class FullBandErleEstimator { public :)",
    "insertText": "FullBandErleEstimator(const EchoCanceller3Config::Erle& config, size_t num_capture_channels)"
  },
  {
    "label": "FullBandErleEstimator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FullBandErleEstimator()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(rtc::ArrayView<const float> X2, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> Y2, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> E2, const std::vector<bool>& converged_filters)"
  },
  {
    "label": "FullbandErleLog2()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FullbandErleLog2()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float min_erle = erle_time_domain_log2_ [ 0 ] ;)",
    "insertText": "for(size_t ch = 1; ch < erle_time_domain_log2_.size(); ++ch)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (min_erle =)",
    "insertText": "min(min_erle, erle_time_domain_log2_[ch])"
  },
  {
    "label": "GetInstLinearQualityEstimates()",
    "kind": "Method",
    "detail": "Function (} return min_erle ; } rtc::ArrayView<const absl::optional<float>>)",
    "insertText": "GetInstLinearQualityEstimates()"
  },
  {
    "label": "UpdateQualityEstimates()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateQualityEstimates()"
  },
  {
    "label": "ErleInstantaneous()",
    "kind": "Method",
    "detail": "Function (class ErleInstantaneous { public :)",
    "insertText": "ErleInstantaneous(const EchoCanceller3Config::Erle& config)"
  },
  {
    "label": "ErleInstantaneous()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ErleInstantaneous()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Update(float Y2_sum, float E2_sum)"
  },
  {
    "label": "ResetAccumulators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAccumulators()"
  },
  {
    "label": "GetInstErleLog2()",
    "kind": "Method",
    "detail": "Function (absl::optional<float>)",
    "insertText": "GetInstErleLog2()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float value = inst_quality_estimate_ ;)",
    "insertText": "if(clamp_inst_quality_to_zero_)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (value =)",
    "insertText": "max(0.f, value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(clamp_inst_quality_to_one_)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (value =)",
    "insertText": "min(1.f, value)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} return absl::optional<)",
    "insertText": "float(value)"
  },
  {
    "label": "Dump()",
    "kind": "Method",
    "detail": "Function (} return absl::nullopt ; } void)",
    "insertText": "Dump(const std::unique_ptr<ApmDataDumper>& data_dumper)"
  },
  {
    "label": "UpdateMaxMin()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateMaxMin()"
  },
  {
    "label": "UpdateQualityEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateQualityEstimate()"
  }
]