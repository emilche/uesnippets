[
  {
    "label": "calculateBounds()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_UTIL_MAPSUTIL_HAS_BEEN_INCLUDED # define OPENVDB_UTIL_MAPSUTIL_HAS_BEEN_INCLUDED # include<openvdb / math / Maps . h> # include<algorithm> # include<cmath> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace util { template<MapType> void)",
    "insertText": "calculateBounds(const MapType& map, const BBoxd& in, BBoxd& out)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (const Vec3d& min = in .)",
    "insertText": "min()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (const Vec3d& max = in .)",
    "insertText": "max()"
  },
  {
    "label": "Vec3d()",
    "kind": "Method",
    "detail": "Function (; corners [ 1 ] =)",
    "insertText": "Vec3d(min(0), min(1), min(2))"
  },
  {
    "label": "Vec3d()",
    "kind": "Method",
    "detail": "Function (corners [ 2 ] =)",
    "insertText": "Vec3d(max(0), max(1), min(2))"
  },
  {
    "label": "Vec3d()",
    "kind": "Method",
    "detail": "Function (corners [ 3 ] =)",
    "insertText": "Vec3d(min(0), max(1), min(2))"
  },
  {
    "label": "Vec3d()",
    "kind": "Method",
    "detail": "Function (corners [ 4 ] =)",
    "insertText": "Vec3d(min(0), min(1), max(2))"
  },
  {
    "label": "Vec3d()",
    "kind": "Method",
    "detail": "Function (corners [ 5 ] =)",
    "insertText": "Vec3d(max(0), min(1), max(2))"
  },
  {
    "label": "Vec3d()",
    "kind": "Method",
    "detail": "Function (corners [ 6 ] = max ; corners [ 7 ] =)",
    "insertText": "Vec3d(min(0), max(1), max(2))"
  },
  {
    "label": "applyInverseMap()",
    "kind": "Method",
    "detail": "Function (out_min = map .)",
    "insertText": "applyInverseMap(corners[0])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (out_max = min ;)",
    "insertText": "for(int i = 1; i < 8; ++i)"
  },
  {
    "label": "applyInverseMap()",
    "kind": "Method",
    "detail": "Function (pre_image = map .)",
    "insertText": "applyInverseMap(corners[i])"
  },
  {
    "label": "out_min()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "out_min(j) = std::min( out_min(j), pre_image(j))"
  },
  {
    "label": "out_max()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "out_max(j) = std::max( out_max(j), pre_image(j))"
  },
  {
    "label": "calculateBounds()",
    "kind": "Method",
    "detail": "Function (} } } template<MapType> void)",
    "insertText": "calculateBounds(const MapType& map, const Vec3d& center, const Real radius, BBoxd& out)"
  },
  {
    "label": "applyInverseMap()",
    "kind": "Method",
    "detail": "Function (Vec3d center_pre_image = map .)",
    "insertText": "applyInverseMap(center)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (std::vector<Vec3d> coordinate_units ; coordinate_units .)",
    "insertText": "push_back(Vec3d(1,0,0))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (coordinate_units .)",
    "insertText": "push_back(Vec3d(0,1,0))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (coordinate_units .)",
    "insertText": "push_back(Vec3d(0,0,1))"
  },
  {
    "label": "applyIJT()",
    "kind": "Method",
    "detail": "Function (Vec3d temp = map .)",
    "insertText": "applyIJT(coordinate_units[direction])"
  },
  {
    "label": "out_min()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "out_min(direction) = center_pre_image(direction)"
  },
  {
    "label": "out_max()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "out_max(direction) = center_pre_image(direction)"
  },
  {
    "label": "bounding_box()",
    "kind": "Method",
    "detail": "Function (} } else { BBoxd)",
    "insertText": "bounding_box(center - radius*Vec3d(1,1,1), center + radius*Vec3d(1,1,1))"
  },
  {
    "label": "MapType()",
    "kind": "Method",
    "detail": "Function (calculateBounds<)",
    "insertText": "MapType(map, bounding_box, out)"
  },
  {
    "label": "findTangentPoints()",
    "kind": "Method",
    "detail": "Function (} } namespace { int)",
    "insertText": "findTangentPoints(const double g, const double xo, const double zo, const double r, double& xp, double& zp, double& xm, double& zm)"
  },
  {
    "label": "zp()",
    "kind": "Method",
    "detail": "Function (xp = xo - xo* rd2 / distA + r* zd* discriminate / distA ; xm = xo - xo* rd2 / distA - r* zd* discriminate / distA ;)",
    "insertText": "zp(zo*zd2 + zd*g*(x2 - r2) - xo*xo*g - r*xd*discriminate)"
  },
  {
    "label": "zm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zm(zo*zd2 + zd*g*(x2 - r2) - xo*xo*g + r*xd*discriminate)"
  },
  {
    "label": "NonlinearFrustumMap()",
    "kind": "Method",
    "detail": "Function (xp = 0 ; xm = 0 ; zp = - 1 / g ; zm = - 1 / g ; return 1 ; } return 0 ; } } template<> void calculateBounds<)",
    "insertText": "NonlinearFrustumMap(const math::NonlinearFrustumMap& frustum, const Vec3d& center, const Real radius, BBoxd& out)"
  },
  {
    "label": "secondMap()",
    "kind": "Method",
    "detail": "Function (const math::AffineMap& secondMap = frustum .)",
    "insertText": "secondMap()"
  },
  {
    "label": "NonlinearFrustumMap()",
    "kind": "Method",
    "detail": "Function (calculateBounds<)",
    "insertText": "NonlinearFrustumMap(frustum, bounding_box, out)"
  },
  {
    "label": "voxelSize()",
    "kind": "Method",
    "detail": "Function (Vec3d voxelSize = secondMap .)",
    "insertText": "voxelSize()"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (const double x_min = bbox .)",
    "insertText": "min().x()"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (const double y_min = bbox .)",
    "insertText": "min().y()"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (const double z_min = bbox .)",
    "insertText": "min().z()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (const double x_max = bbox .)",
    "insertText": "max().x()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (const double y_max = bbox .)",
    "insertText": "max().y()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (const double z_max = bbox .)",
    "insertText": "max().z()"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (out_min .)",
    "insertText": "x()"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (out_min .)",
    "insertText": "y()"
  },
  {
    "label": "findTangentPoints()",
    "kind": "Method",
    "detail": "Function (Vec3d extreme ; Vec3d extreme2 ; Vec3d pre_image ; soln_number =)",
    "insertText": "findTangentPoints(gamma, centerLS.x(), centerLS.z(), radiusLS, xp, zp, xm, zm)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (extreme .)",
    "insertText": "y() = centerLS.y()"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (extreme .)",
    "insertText": "z()"
  },
  {
    "label": "applyMap()",
    "kind": "Method",
    "detail": "Function (extreme2 = secondMap .)",
    "insertText": "applyMap(extreme)"
  },
  {
    "label": "applyInverseMap()",
    "kind": "Method",
    "detail": "Function (pre_image = frustum .)",
    "insertText": "applyInverseMap(extreme2)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (out_max .)",
    "insertText": "x() = std::max(x_min, std::min(x_max, pre_image.x()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(soln_number == 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(soln_number == 0)"
  },
  {
    "label": "findTangentPoints()",
    "kind": "Method",
    "detail": "Function (} soln_number =)",
    "insertText": "findTangentPoints(gamma, centerLS.y(), centerLS.z(), radiusLS, xp, zp, xm, zm)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (extreme .)",
    "insertText": "x() = centerLS.x()"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (out_max .)",
    "insertText": "y() = std::max(y_min, std::min(y_max, pre_image.y()))"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} double near_dist =)",
    "insertText": "max(centerLS.z() - radiusLS, 0.)"
  },
  {
    "label": "near_point()",
    "kind": "Method",
    "detail": "Function (Vec3d)",
    "insertText": "near_point(0.f, 0.f, near_dist)"
  },
  {
    "label": "far_point()",
    "kind": "Method",
    "detail": "Function (Vec3d)",
    "insertText": "far_point(0.f, 0.f, far_dist)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (out_min .)",
    "insertText": "z() = std::max(z_min, frustum.applyInverseMap(secondMap.applyMap(near_point)).z())"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (out_max .)",
    "insertText": "z() = std::min(z_max, frustum.applyInverseMap(secondMap.applyMap(far_point)).z())"
  }
]