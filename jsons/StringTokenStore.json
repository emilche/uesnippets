[
  {
    "label": "FStringTokenStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringTokenStore"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Map . h \" # include \" Iris / ReplicationSystem / NetTokenStore . h \" # include \" Misc / MemStack . h \" namespace UE::Net { class FStringTokenStore : public FNetTokenDataStore {)",
    "insertText": "UE_NONCOPYABLE(FStringTokenStore)"
  },
  {
    "label": "FStringTokenStore()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FStringTokenStore(FNetTokenStore& TokenStore)"
  },
  {
    "label": "GetOrCreateToken()",
    "kind": "Method",
    "detail": "Function (FNetToken)",
    "insertText": "GetOrCreateToken(const FString& String)"
  },
  {
    "label": "GetOrCreateToken()",
    "kind": "Method",
    "detail": "Function (FNetToken)",
    "insertText": "GetOrCreateToken(const TCHAR* Name, uint32 Length)"
  },
  {
    "label": "ResolveToken()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ResolveToken(FNetToken Token, const FNetTokenStoreState* RemoteTokenStoreState = nullptr)"
  },
  {
    "label": "ResolveRemoteToken()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ResolveRemoteToken(FNetToken Token, const FNetTokenStoreState& NetTokenStoreState)"
  },
  {
    "label": "GetTokenStoreName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetTokenStoreName()"
  },
  {
    "label": "WriteTokenData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteTokenData(FArchive& Archive, FNetTokenStoreKey TokenStoreKey)"
  },
  {
    "label": "ReadTokenData()",
    "kind": "Method",
    "detail": "Function (FNetTokenStoreKey)",
    "insertText": "ReadTokenData(FNetSerializationContext& Context, const FNetToken& NetToken)"
  },
  {
    "label": "ReadTokenData()",
    "kind": "Method",
    "detail": "Function (FNetTokenStoreKey)",
    "insertText": "ReadTokenData(FArchive& Archive, const FNetToken& NetToken)"
  },
  {
    "label": "GetOrCreatePersistentString()",
    "kind": "Method",
    "detail": "Function (FNetTokenStoreKey)",
    "insertText": "GetOrCreatePersistentString(const TCHAR* Name, uint32 Length)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (private : FName StringTokenStoreName =)",
    "insertText": "TEXT(\"StringTokenStore\")"
  }
]