[
  {
    "label": "FLightSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfo"
  },
  {
    "label": "FLightSceneInfoCompact",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfoCompact"
  },
  {
    "label": "FDynamicShadowMapChannelBindingHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicShadowMapChannelBindingHelper"
  },
  {
    "label": "FChannelInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChannelInfo"
  },
  {
    "label": "FDynamicShadowMapChannelBindingHelper()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" LightSceneInfo . h \" class FLightSceneInfo ; class FLightSceneInfoCompact ; class FDynamicShadowMapChannelBindingHelper { public : const int32 CHANNEL_COUNT = 4 ; const int32 STATIC_SHADOWING_PRIORITY = 2 ;)",
    "insertText": "FDynamicShadowMapChannelBindingHelper() : AvailableChannelCount(CHANNEL_COUNT)"
  },
  {
    "label": "IsChannelEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsChannelEnabled(int32 ChannelIndex)"
  },
  {
    "label": "DisableAllOtherChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableAllOtherChannels(int32 EnabledChannelIndex)"
  },
  {
    "label": "UpdateAvailableChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAvailableChannels(const TSparseArray<FLightSceneInfoCompact, TAlignedSparseArrayAllocator<alignof(FLightSceneInfoCompact)>>& Lights, FLightSceneInfo* LightInfo)"
  },
  {
    "label": "GetBestAvailableChannel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBestAvailableChannel()"
  },
  {
    "label": "SortLightByPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortLightByPriority(int32 ChannelIndex)"
  },
  {
    "label": "FChannelInfo()",
    "kind": "Method",
    "detail": "Function (private : struct FChannelInfo {)",
    "insertText": "FChannelInfo() : bIsAvailable(true)"
  },
  {
    "label": "AddLight()",
    "kind": "Method",
    "detail": "Function (} TArray<FLightSceneInfo*,TInlineAllocator<8>> Lights ; bool bIsAvailable ; } ; FChannelInfo Channels [ CHANNEL_COUNT ] ; int32 AvailableChannelCount ; void)",
    "insertText": "AddLight(int32 ChannelIndex, FLightSceneInfo* Light)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Channels [ ChannelIndex ] . Lights .)",
    "insertText": "Add(Light)"
  },
  {
    "label": "GetPriority()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPriority(const FLightSceneInfo* Light)"
  }
]