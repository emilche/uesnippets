[
  {
    "label": "FPBDJointSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointSolver"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FJointSolverJointState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJointSolverJointState"
  },
  {
    "label": "FJointSolverConstraintRowState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJointSolverConstraintRowState"
  },
  {
    "label": "FJointSolverConstraintRowData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJointSolverConstraintRowData"
  },
  {
    "label": "FJointSolverConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJointSolverConstraints"
  },
  {
    "label": "FJointSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJointSolver"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / PBDJointConstraintTypes . h \" # include \" Chaos / PBDJointConstraintUtilities . h \" # include \" Chaos / Utilities . h \" namespace Chaos { class FPBDJointSolver ; enum class EJointSolverConstraintUpdateType { None,Linear_Point,Linear_Spherical,Linear_Cylindrical,Linear_Planar,Linear_SphericalDrive,Linear_CircularDrive,Linear_AxialDrive,Angular_Twist,Angular_Cone,Angular_SingleLockedSwing,Angular_SingleLimitedSwing,Angular_DualConeSwing,Angular_Locked,Angular_TwistDrive,Angular_ConeDrive,Angular_SwingDrive,Angular_SLerpDrive,} ; class FJointSolverJointState { public : const int32 MaxConstrainedBodies = 2 ; void)",
    "insertText": "Init(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const FVec3& PrevP0, const FRotation3& PrevQ0, const FVec3& PrevP1, const FRotation3& PrevQ1, const FReal InvM0, const FVec3& InvIL0, const FReal InvM1, const FVec3& InvIL1, const FRigidTransform3& XL0, const FRigidTransform3& XL1)"
  },
  {
    "label": "FJointSolverConstraintRowState()",
    "kind": "Method",
    "detail": "Function (FRigidTransform3 XLs [ MaxConstrainedBodies ] ; FVec3 InvILs [ MaxConstrainedBodies ] ; FReal InvMs [ MaxConstrainedBodies ] ; FVec3 Xs [ MaxConstrainedBodies ] ; FRotation3 Rs [ MaxConstrainedBodies ] ; FVec3 Ps [ MaxConstrainedBodies ] ; FRotation3 Qs [ MaxConstrainedBodies ] ; FMatrix33 InvIs [ MaxConstrainedBodies ] ; FVec3 PrevPs [ MaxConstrainedBodies ] ; FRotation3 PrevQs [ MaxConstrainedBodies ] ; FVec3 PrevXs [ MaxConstrainedBodies ] ; FVec3 DPs [ MaxConstrainedBodies ] ; FVec3 DRs [ MaxConstrainedBodies ] ; FReal PositionTolerance ; FReal AngleTolerance ; } ; class FJointSolverConstraintRowState { public : const int32 MaxConstrainedBodies = 2 ;)",
    "insertText": "FJointSolverConstraintRowState()"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVec3(0), FVec3(0)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVec3(0), FVec3(0) } , Axis(FVec3(0)) , Error(0) , Lambda(0)"
  },
  {
    "label": "TickReset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TickReset()"
  },
  {
    "label": "FJointSolverConstraintRowData()",
    "kind": "Method",
    "detail": "Function (FVec3 DPs [ MaxConstrainedBodies ] ; FVec3 DRs [ MaxConstrainedBodies ] ; FVec3 Axis ; FReal Error ; FReal Lambda ; } ; class FJointSolverConstraintRowData { public : const int32 MaxConstrainedBodies = 2 ;)",
    "insertText": "FJointSolverConstraintRowData() : UpdateType(EJointSolverConstraintUpdateType::None) , JointIndex(INDEX_NONE) , ConstraintIndex(INDEX_NONE) , NumRows(0) , Stiffness(0) , Damping(0) , Limit(0) , bIsAccelerationMode(false) , bIsSoft(false)"
  },
  {
    "label": "FJointSolverConstraints()",
    "kind": "Method",
    "detail": "Function (} EJointSolverConstraintUpdateType UpdateType ; int32 JointIndex ; int32 ConstraintIndex ; int32 NumRows ; FReal Stiffness ; FReal Damping ; FReal Limit ; bool bIsAccelerationMode ; bool bIsSoft ; } ; class FJointSolverConstraints { public : class FPBDJointSolver ;)",
    "insertText": "FJointSolverConstraints()"
  },
  {
    "label": "GetJointIndex()",
    "kind": "Method",
    "detail": "Function (JointIndex = InJointIndex ; } int32)",
    "insertText": "GetJointIndex()"
  },
  {
    "label": "AddRotationConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRotationConstraints(TArray<FJointSolverConstraintRowData>& RowDatas, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "UpdatePositionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePositionConstraints(const TArray<FJointSolverConstraintRowData>& RowDatas, TArray<FJointSolverConstraintRowState>& RowStates, const FJointSolverJointState& JointState, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "UpdateRotationConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRotationConstraints(const TArray<FJointSolverConstraintRowData>& RowDatas, TArray<FJointSolverConstraintRowState>& RowStates, const FJointSolverJointState& JointState, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "AddPointPositionConstraint()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddPointPositionConstraint(TArray<FJointSolverConstraintRowData>& RowDatas, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "AddSphericalPositionConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSphericalPositionConstraint(TArray<FJointSolverConstraintRowData>& RowDatas, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "AddCylindricalPositionConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCylindricalPositionConstraint(TArray<FJointSolverConstraintRowData>& RowDatas, const int32 AxisIndex, const EJointMotionType AxialMotion, const EJointMotionType RadialMotion, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "AddPlanarPositionConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPlanarPositionConstraint(TArray<FJointSolverConstraintRowData>& RowDatas, const int32 AxisIndex, const EJointMotionType AxialMotion, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "AddPositionDrive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPositionDrive(TArray<FJointSolverConstraintRowData>& RowDatas, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const EJointSolverConstraintUpdateType UpdateType, const int32 AxisIndex)"
  },
  {
    "label": "AddTwistConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTwistConstraint(TArray<FJointSolverConstraintRowData>& RowDatas, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const EJointSolverConstraintUpdateType Type, const bool bUseSoftLimit)"
  },
  {
    "label": "AddSwingConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSwingConstraint(TArray<FJointSolverConstraintRowData>& RowDatas, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const EJointSolverConstraintUpdateType Type, const EJointAngularConstraintIndex ConstraintIndex, const bool bUseSoftLimit)"
  },
  {
    "label": "AddTwistDrive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTwistDrive(TArray<FJointSolverConstraintRowData>& RowDatas, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "AddSwingDrive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSwingDrive(TArray<FJointSolverConstraintRowData>& RowDatas, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const EJointSolverConstraintUpdateType Type, const EJointAngularConstraintIndex ConstraintIndex)"
  },
  {
    "label": "AddSLerpDrive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSLerpDrive(TArray<FJointSolverConstraintRowData>& RowDatas, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (int32 JointIndex ; int32 LinearRowIndexBegin ; int32 LinearRowIndexEnd ; int32 AngularRowIndexBegin ; int32 AngularRowIndexEnd ; FReal PositionTolerance ; FReal AngleTolerance ; bool bNeedSwingTwist ; bool bNeedLockedAxes ; } ; class FJointSolver { public : int32)",
    "insertText": "ApplyPositionConstraints(const FReal Dt, TArray<FJointSolverJointState>& JointStates, const TArray <FJointSolverConstraintRowData>& RowDatas, TArray <FJointSolverConstraintRowState>& RowStates, int32 JointIndexBegin, int32 JointIndexEnd, int32 RowIndexBegin, int32 RowIndexEnd)"
  },
  {
    "label": "ApplyRotationConstraints()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ApplyRotationConstraints(const FReal Dt, TArray<FJointSolverJointState>& JointStates, const TArray <FJointSolverConstraintRowData>& RowDatas, TArray <FJointSolverConstraintRowState>& RowStates, int32 JointIndexBegin, int32 JointIndexEnd, int32 RowIndexBegin, int32 RowIndexEnd)"
  },
  {
    "label": "ApplyPositionConstraint1()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ApplyPositionConstraint1(const FReal Dt, const FJointSolverJointState& JointState, const FJointSolverConstraintRowData& RowData, FJointSolverConstraintRowState& RowState)"
  },
  {
    "label": "ApplyPositionConstraint3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionConstraint3(const FReal Dt, const FJointSolverJointState& JointState, const FJointSolverConstraintRowData& RowData, FJointSolverConstraintRowState& RowState0, FJointSolverConstraintRowState& RowState1, FJointSolverConstraintRowState& RowState2)"
  },
  {
    "label": "ApplyRotationConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRotationConstraint(const FReal Dt, const FJointSolverJointState& JointState, const FJointSolverConstraintRowData& RowData, FJointSolverConstraintRowState& RowState)"
  }
]