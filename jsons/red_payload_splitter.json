[
  {
    "label": "DecoderDatabase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecoderDatabase"
  },
  {
    "label": "RedPayloadSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RedPayloadSplitter"
  },
  {
    "label": "RedPayloadSplitter()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_RED_PAYLOAD_SPLITTER_H_ # define MODULES_AUDIO_CODING_NETEQ_RED_PAYLOAD_SPLITTER_H_ # include \" modules / audio_coding / neteq / packet . h \" namespace webrtc { class DecoderDatabase ; const size_t kRedHeaderLength = 4 ; const size_t kRedLastHeaderLength = 1 ; class RedPayloadSplitter { public :)",
    "insertText": "RedPayloadSplitter()"
  },
  {
    "label": "RedPayloadSplitter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RedPayloadSplitter(const RedPayloadSplitter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RedPayloadSplitter&)",
    "insertText": "operator(const RedPayloadSplitter&)"
  },
  {
    "label": "SplitRed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitRed(PacketList* packet_list)"
  },
  {
    "label": "CheckRedPayloads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckRedPayloads(PacketList* packet_list, const DecoderDatabase& decoder_database)"
  }
]