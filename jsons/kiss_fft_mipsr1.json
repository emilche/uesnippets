[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef KISS_FFT_MIPSR1_H # define KISS_FFT_MIPSR1_H # if !)",
    "insertText": "defined(KISS_FFT_GUTS_H) #error \"This file should only be included from _kiss_fft_guts.h\" #endif #ifdef FIXED_POINT #define S_MUL_ADD(a, b, c, d) (S_MUL(a,b)+S_MUL(c,d)) #define S_MUL_SUB(a, b, c, d) (S_MUL(a,b)-S_MUL(c,d)) #undef S_MUL_ADD static inline int S_MUL_ADD(int a, int b, int c, int d)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (int m ; asm)",
    "insertText": "volatile(\"MULT $ac1, %0, %1\" : : \"r\" ((int)a), \"r\" ((int)b))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"madd $ac1, %0, %1\" : : \"r\" ((int)c), \"r\" ((int)d))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"EXTR.W %0,$ac1, %1\" : \"=r\" (m): \"i\" (15))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"msub $ac1, %0, %1\" : : \"r\" ((int)c), \"r\" ((int)d))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (kiss_fft_cpx m ; asm)",
    "insertText": "volatile(\"MULT $ac1, %0, %1\" : : \"r\" ((int)a.r), \"r\" ((int)b.r))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"msub $ac1, %0, %1\" : : \"r\" ((int)a.i), \"r\" ((int)b.i))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"EXTR.W %0,$ac1, %1\" : \"=r\" (m.r): \"i\" (15))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"MULT $ac1, %0, %1\" : : \"r\" ((int)a.r), \"r\" ((int)b.i))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"madd $ac1, %0, %1\" : : \"r\" ((int)a.i), \"r\" ((int)b.r))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"EXTR.W %0,$ac1, %1\" : \"=r\" (m.i): \"i\" (15))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"madd $ac1, %0, %1\" : : \"r\" ((int)a.i), \"r\" ((int)b.i))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"MULT $ac1, %0, %1\" : : \"r\" ((int)a.i), \"r\" ((int)b.r))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"msub $ac1, %0, %1\" : : \"r\" ((int)a.r), \"r\" ((int)b.i))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (kiss_fft_cpx* Fout0,* Fout1,* Fout2,* Fout3,* Fout4 ; int i,u ; kiss_fft_cpx scratch [ 1 3 ] ; const kiss_twiddle_cpx* tw ; kiss_twiddle_cpx ya,yb ; kiss_fft_cpx* Fout_beg = Fout ; # ifdef FIXED_POINT ya . r = 1 0 1 2 6 ; ya . i = - 3 1 1 6 4 ; yb . r = - 2 6 5 1 0 ; yb . i = - 1 9 2 6 1 ; # else ya = st -> twiddles [ fstride* m ] ; yb = st -> twiddles [ fstride* 2* m ] ; # endif tw = st -> twiddles ;)",
    "insertText": "for(i=0;i<N;i++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Fout = Fout_beg + i* mm ; Fout0 = Fout ; Fout1 = Fout0 + m ; Fout2 = Fout0 + 2* m ; Fout3 = Fout0 + 3* m ; Fout4 = Fout0 + 4* m ;)",
    "insertText": "for(u=0; u<m; ++u)"
  },
  {
    "label": "C_MUL()",
    "kind": "Method",
    "detail": "Function (scratch [ 0 ] =* Fout0 ;)",
    "insertText": "C_MUL(scratch[1] ,*Fout1, tw[u*fstride])"
  },
  {
    "label": "C_MUL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride])"
  },
  {
    "label": "C_MUL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride])"
  },
  {
    "label": "C_MUL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride])"
  },
  {
    "label": "C_ADD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "C_ADD(scratch[7],scratch[1],scratch[4])"
  },
  {
    "label": "C_SUB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "C_SUB(scratch[10],scratch[1],scratch[4])"
  },
  {
    "label": "C_ADD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "C_ADD(scratch[8],scratch[2],scratch[3])"
  },
  {
    "label": "C_SUB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "C_SUB(scratch[9],scratch[2],scratch[3])"
  },
  {
    "label": "S_MUL_ADD()",
    "kind": "Method",
    "detail": "Function (Fout0 -> r + = scratch [ 7 ] . r + scratch [ 8 ] . r ; Fout0 -> i + = scratch [ 7 ] . i + scratch [ 8 ] . i ; scratch [ 5 ] . r = scratch [ 0 ] . r +)",
    "insertText": "S_MUL_ADD(scratch[7].r,ya.r,scratch[8].r,yb.r)"
  },
  {
    "label": "S_MUL_ADD()",
    "kind": "Method",
    "detail": "Function (scratch [ 5 ] . i = scratch [ 0 ] . i +)",
    "insertText": "S_MUL_ADD(scratch[7].i,ya.r,scratch[8].i,yb.r)"
  },
  {
    "label": "S_MUL_ADD()",
    "kind": "Method",
    "detail": "Function (scratch [ 6 ] . r =)",
    "insertText": "S_MUL_ADD(scratch[10].i,ya.i,scratch[9].i,yb.i)"
  },
  {
    "label": "S_MUL_ADD()",
    "kind": "Method",
    "detail": "Function (scratch [ 6 ] . i = -)",
    "insertText": "S_MUL_ADD(scratch[10].r,ya.i,scratch[9].r,yb.i)"
  },
  {
    "label": "C_SUB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "C_SUB(*Fout1,scratch[5],scratch[6])"
  },
  {
    "label": "C_ADD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "C_ADD(*Fout4,scratch[5],scratch[6])"
  },
  {
    "label": "S_MUL_ADD()",
    "kind": "Method",
    "detail": "Function (scratch [ 1 1 ] . r = scratch [ 0 ] . r +)",
    "insertText": "S_MUL_ADD(scratch[7].r,yb.r,scratch[8].r,ya.r)"
  },
  {
    "label": "S_MUL_ADD()",
    "kind": "Method",
    "detail": "Function (scratch [ 1 1 ] . i = scratch [ 0 ] . i +)",
    "insertText": "S_MUL_ADD(scratch[7].i,yb.r,scratch[8].i,ya.r)"
  },
  {
    "label": "S_MUL_SUB()",
    "kind": "Method",
    "detail": "Function (scratch [ 1 2 ] . r =)",
    "insertText": "S_MUL_SUB(scratch[9].i,ya.i,scratch[10].i,yb.i)"
  },
  {
    "label": "S_MUL_SUB()",
    "kind": "Method",
    "detail": "Function (scratch [ 1 2 ] . i =)",
    "insertText": "S_MUL_SUB(scratch[10].r,yb.i,scratch[9].r,ya.i)"
  },
  {
    "label": "C_ADD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "C_ADD(*Fout2,scratch[11],scratch[12])"
  },
  {
    "label": "C_SUB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "C_SUB(*Fout3,scratch[11],scratch[12])"
  }
]