[
  {
    "label": "BitrateAllocationLimits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BitrateAllocationLimits"
  },
  {
    "label": "StreamsConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StreamsConfig"
  },
  {
    "label": "TargetRateConstraints",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TargetRateConstraints"
  },
  {
    "label": "NetworkAvailability",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkAvailability"
  },
  {
    "label": "NetworkRouteChange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkRouteChange"
  },
  {
    "label": "PacedPacketInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacedPacketInfo"
  },
  {
    "label": "SentPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SentPacket"
  },
  {
    "label": "ReceivedPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReceivedPacket"
  },
  {
    "label": "RemoteBitrateReport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RemoteBitrateReport"
  },
  {
    "label": "RoundTripTimeUpdate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RoundTripTimeUpdate"
  },
  {
    "label": "TransportLossReport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransportLossReport"
  },
  {
    "label": "PacketResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketResult"
  },
  {
    "label": "ReceiveTimeOrder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceiveTimeOrder"
  },
  {
    "label": "TransportPacketsFeedback",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransportPacketsFeedback"
  },
  {
    "label": "NetworkEstimate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkEstimate"
  },
  {
    "label": "PacerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacerConfig"
  },
  {
    "label": "ProbeClusterConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProbeClusterConfig"
  },
  {
    "label": "TargetTransferRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TargetTransferRate"
  },
  {
    "label": "NetworkControlUpdate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkControlUpdate"
  },
  {
    "label": "ProcessInterval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessInterval"
  },
  {
    "label": "NetworkStateEstimate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkStateEstimate"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TRANSPORT_NETWORK_TYPES_H_ # define API_TRANSPORT_NETWORK_TYPES_H_ # include<stdint . h> # include<vector> # include \" absl / types / optional . h \" # include \" api / units / data_rate . h \" # include \" api / units / data_size . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" namespace webrtc { struct BitrateAllocationLimits { DataRate min_allocatable_rate =)",
    "insertText": "Zero()"
  },
  {
    "label": "StreamsConfig()",
    "kind": "Method",
    "detail": "Function (} ; struct StreamsConfig {)",
    "insertText": "StreamsConfig()"
  },
  {
    "label": "StreamsConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StreamsConfig(const StreamsConfig&)"
  },
  {
    "label": "PlusInfinity()",
    "kind": "Method",
    "detail": "Function (Timestamp at_time =)",
    "insertText": "PlusInfinity()"
  },
  {
    "label": "TargetRateConstraints()",
    "kind": "Method",
    "detail": "Function (absl::optional<bool> requests_alr_probing ; absl::optional<double> pacing_factor ; absl::optional<DataRate> min_total_allocated_bitrate ; absl::optional<DataRate> max_padding_rate ; absl::optional<DataRate> max_total_allocated_bitrate ; } ; struct TargetRateConstraints {)",
    "insertText": "TargetRateConstraints()"
  },
  {
    "label": "TargetRateConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TargetRateConstraints(const TargetRateConstraints&)"
  },
  {
    "label": "NetworkRouteChange()",
    "kind": "Method",
    "detail": "Function (bool network_available = false ; } ; struct NetworkRouteChange {)",
    "insertText": "NetworkRouteChange()"
  },
  {
    "label": "NetworkRouteChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetworkRouteChange(const NetworkRouteChange&)"
  },
  {
    "label": "PacedPacketInfo()",
    "kind": "Method",
    "detail": "Function (TargetRateConstraints constraints ; } ; struct PacedPacketInfo {)",
    "insertText": "PacedPacketInfo()"
  },
  {
    "label": "PacedPacketInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PacedPacketInfo(int probe_cluster_id, int probe_cluster_min_probes, int probe_cluster_min_bytes)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const PacedPacketInfo& rhs)"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (} ; struct ReceivedPacket { Timestamp send_time =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "Infinity()",
    "kind": "Method",
    "detail": "Function (DataRate bandwidth =)",
    "insertText": "Infinity()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uint64_t packets_lost_delta = 0 ; uint64_t packets_received_delta = 0 ; } ; struct PacketResult { class ReceiveTimeOrder { public : bool)",
    "insertText": "operator()(const PacketResult& lhs, const PacketResult& rhs)"
  },
  {
    "label": "PacketResult()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "PacketResult()"
  },
  {
    "label": "PacketResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PacketResult(const PacketResult&)"
  },
  {
    "label": "IsReceived()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReceived()"
  },
  {
    "label": "TransportPacketsFeedback()",
    "kind": "Method",
    "detail": "Function (} ; struct TransportPacketsFeedback {)",
    "insertText": "TransportPacketsFeedback()"
  },
  {
    "label": "TransportPacketsFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransportPacketsFeedback(const TransportPacketsFeedback& other)"
  },
  {
    "label": "ReceivedWithSendInfo()",
    "kind": "Method",
    "detail": "Function (std::vector<PacketResult> packet_feedbacks ; std::vector<Timestamp> sendless_arrival_times ; std::vector<PacketResult>)",
    "insertText": "ReceivedWithSendInfo()"
  },
  {
    "label": "LostWithSendInfo()",
    "kind": "Method",
    "detail": "Function (std::vector<PacketResult>)",
    "insertText": "LostWithSendInfo()"
  },
  {
    "label": "PacketsWithFeedback()",
    "kind": "Method",
    "detail": "Function (std::vector<PacketResult>)",
    "insertText": "PacketsWithFeedback()"
  },
  {
    "label": "SortedByReceiveTime()",
    "kind": "Method",
    "detail": "Function (std::vector<PacketResult>)",
    "insertText": "SortedByReceiveTime()"
  },
  {
    "label": "data_rate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "data_rate()"
  },
  {
    "label": "NetworkControlUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetworkControlUpdate(const NetworkControlUpdate&)"
  },
  {
    "label": "NetworkControlUpdate()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetworkControlUpdate()"
  }
]