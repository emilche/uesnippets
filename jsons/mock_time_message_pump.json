[
  {
    "label": "SimpleTestTickClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleTestTickClock"
  },
  {
    "label": "MockTimeMessagePump",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockTimeMessagePump"
  },
  {
    "label": "MockTimeMessagePump()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_TEST_MOCK_TIME_MESSAGE_PUMP_H_ # define BASE_TASK_SEQUENCE_MANAGER_TEST_MOCK_TIME_MESSAGE_PUMP_H_ # include \" base / callback . h \" # include \" base / memory / raw_ptr . h \" # include \" base / message_loop / message_pump . h \" # include \" base / synchronization / waitable_event . h \" # include \" base / time / time . h \" namespace base { class SimpleTestTickClock ; namespace sequence_manager { class MockTimeMessagePump : public MessagePump { public :)",
    "insertText": "MockTimeMessagePump(SimpleTestTickClock* clock)"
  },
  {
    "label": "MockTimeMessagePump()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MockTimeMessagePump()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(Delegate* delegate)"
  },
  {
    "label": "Quit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quit()"
  },
  {
    "label": "ScheduleWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleWork()"
  },
  {
    "label": "ScheduleDelayedWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleDelayedWork(const Delegate::NextWorkInfo& next_work_info)"
  },
  {
    "label": "next_wake_up_time()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "next_wake_up_time()"
  },
  {
    "label": "SetAllowTimeToAutoAdvanceUntil()",
    "kind": "Method",
    "detail": "Function (quit_after_do_some_work_ = quit_after_do_some_work ; } void)",
    "insertText": "SetAllowTimeToAutoAdvanceUntil(TimeTicks advance_until)"
  },
  {
    "label": "SetStopWhenMessagePumpIsIdle()",
    "kind": "Method",
    "detail": "Function (allow_advance_until_ = advance_until ; } void)",
    "insertText": "SetStopWhenMessagePumpIsIdle(bool stop_when_message_pump_is_idle)"
  },
  {
    "label": "MaybeAdvanceTime()",
    "kind": "Method",
    "detail": "Function (stop_when_message_pump_is_idle_ = stop_when_message_pump_is_idle ; } private : bool)",
    "insertText": "MaybeAdvanceTime(TimeTicks target_time)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const raw_ptr<SimpleTestTickClock> clock_ ; bool keep_running_ = true ; bool stop_when_message_pump_is_idle_ = false ; bool quit_after_do_some_work_ = false ; TimeTicks next_wake_up_time_ {)",
    "insertText": "Max()"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (TimeTicks allow_advance_until_ =)",
    "insertText": "Min()"
  }
]