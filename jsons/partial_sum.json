[
  {
    "label": "_InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator"
  },
  {
    "label": "_OutputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutputIterator"
  },
  {
    "label": "_BinaryOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BinaryOperation"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___NUMERIC_PARTIAL_SUM_H # define _LIBCPP___NUMERIC_PARTIAL_SUM_H # include<__config> # include<__iterator / iterator_traits . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _InputIterator, class _OutputIterator> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _OutputIterator partial_sum(_InputIterator __first, _InputIterator __last, _OutputIterator __result)"
  },
  {
    "label": "__t()",
    "kind": "Method",
    "detail": "Function (iterator_traits<_InputIterator>::value_type)",
    "insertText": "__t(*__first)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (* __result = __t ;)",
    "insertText": "for(++__first, (void) ++__result; __first != __last; ++__first, (void) ++__result)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (# if _LIBCPP_STD_VER> 1 7 __t =)",
    "insertText": "move(__t)"
  },
  {
    "label": "partial_sum()",
    "kind": "Method",
    "detail": "Function (# else __t = __t +* __first ; # endif* __result = __t ; } } return __result ; } template<class _InputIterator,class _OutputIterator,class _BinaryOperation> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _OutputIterator)",
    "insertText": "partial_sum(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOperation __binary_op)"
  },
  {
    "label": "__binary_op()",
    "kind": "Method",
    "detail": "Function (# if _LIBCPP_STD_VER> 1 7 __t =)",
    "insertText": "__binary_op(_VSTD::move(__t), *__first)"
  },
  {
    "label": "__binary_op()",
    "kind": "Method",
    "detail": "Function (# else __t =)",
    "insertText": "__binary_op(__t, *__first)"
  }
]