[
  {
    "label": "LandscapeImageTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LandscapeImageTraits"
  },
  {
    "label": "FLandscapeTiledImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeTiledImage"
  },
  {
    "label": "DefaultValue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Internationalization / Internationalization . h \" # include \" Internationalization / Text . h \" # include \" LandscapeImageFileCache . h \" # include \" LandscapeFileFormatInterface . h \" # include \" LandscapeDataAccess . h \" template<T> class LandscapeImageTraits { public : T)",
    "insertText": "DefaultValue()"
  },
  {
    "label": "FLandscapeTiledImage()",
    "kind": "Method",
    "detail": "Function (} } ; class FLandscapeTiledImage { public :)",
    "insertText": "FLandscapeTiledImage()"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (template<T> FLandscapeFileInfo)",
    "insertText": "Load(const TCHAR* Filename)"
  },
  {
    "label": "GetTileResolution()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetTileResolution()"
  },
  {
    "label": "FindFiles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindFiles(const TCHAR* FilenamePattern, TArray<FString>& OutPaths)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "Read(TArray<T>& OutImageData, bool bFlipYAxis = false)"
  },
  {
    "label": "GetResolution()",
    "kind": "Method",
    "detail": "Function (const FIntPoint Resolution =)",
    "insertText": "GetResolution()"
  },
  {
    "label": "ReadRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadRegion(FIntRect(0, 0, Resolution.X, Resolution.Y), OutImageData, bFlipYAxis)"
  },
  {
    "label": "CheckTiledNamePath()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckTiledNamePath(const FString& Filename, FString& OutTiledFilenamePattern)"
  },
  {
    "label": "ReadRegion()",
    "kind": "Method",
    "detail": "Function (template<T> FLandscapeFileInfo)",
    "insertText": "ReadRegion(const FIntRect& Region, TArray<T>& OutImageData, bool bFlipYAxis = false, T DefaultValue = LandscapeImageTraits<T>::DefaultValue())"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (OutImageData .)",
    "insertText": "Init(DefaultValue, Region.Height() * Region.Width())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 MinTileX = Region . Min . X / TileResolution . X ; int32 MinTileY = Region . Min . Y / TileResolution . Y ; int32 MaxTileX = Region . Max . X / TileResolution . X ; int32 MaxTileY = Region . Max . Y / TileResolution . Y ;)",
    "insertText": "for(int32 TileY = MinTileY; TileY <= MaxTileY; ++TileY)"
  },
  {
    "label": "TileMin()",
    "kind": "Method",
    "detail": "Function (const FIntPoint)",
    "insertText": "TileMin(TileX * TileResolution.X, TileY * TileResolution.Y)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FString* TileFilename = TileFilenames .)",
    "insertText": "Find(FIntPoint(TileX, TileY))"
  },
  {
    "label": "ILandscapeEditorModule()",
    "kind": "Method",
    "detail": "Function (FLandscapeImageDataRef ImageData ; FLandscapeImageFileCache& LandscapeImageFileCache = FModuleManager::GetModuleChecked<)",
    "insertText": "ILandscapeEditorModule(\"LandscapeEditor\").GetImageFileCache()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (FLandscapeFileInfo TileResult = LandscapeImageFileCache . FindImage<)",
    "insertText": "T(**TileFilename, ImageData)"
  },
  {
    "label": "Clip()",
    "kind": "Method",
    "detail": "Function (FIntRect TileRegion = Region ; TileRegion - = TileMin ; TileRegion .)",
    "insertText": "Clip(FIntRect(0, 0, TileResolution.X, TileResolution.Y))"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (const FIntPoint TileCoord =)",
    "insertText": "FIntPoint(X, Y)"
  },
  {
    "label": "Width()",
    "kind": "Method",
    "detail": "Function (const FIntPoint OutCoord = TileCoord + TileMin - Region . Min ; const int32 SrcY = bFlipYAxis ? TileResolution . Y - TileCoord . Y - 1 : TileCoord . Y ; T& Dest = OutImageData [ OutCoord . Y* Region .)",
    "insertText": "Width()"
  },
  {
    "label": "BytesPerPixel()",
    "kind": "Method",
    "detail": "Function (const uint8* Src =& TileData [ ImageData .)",
    "insertText": "BytesPerPixel(SrcY * TileResolution.X + TileCoord.X)"
  },
  {
    "label": "Dest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dest(reinterpret_cast<const T*>(Src))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ImageData.BytesPerPixel == 2 && sizeof(T) == 1)"
  },
  {
    "label": "Dest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dest(reinterpret_cast<const uint16*>(Src))"
  },
  {
    "label": "FLandscapeFileInfo()",
    "kind": "Method",
    "detail": "Function (} else { Dest =* Src ; } } } } } } return)",
    "insertText": "FLandscapeFileInfo()"
  },
  {
    "label": "GetTokenRegex()",
    "kind": "Method",
    "detail": "Function (} private : TMap<FString,FString> Tokens ; FString)",
    "insertText": "GetTokenRegex(const FString& Prefix)"
  }
]