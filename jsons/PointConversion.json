[
  {
    "label": "PointAttributeVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointAttributeVector"
  },
  {
    "label": "ConversionTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConversionTraits"
  },
  {
    "label": "PopulateAttributeOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PopulateAttributeOp"
  },
  {
    "label": "ConvertPointDataGridPositionOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConvertPointDataGridPositionOp"
  },
  {
    "label": "ConvertPointDataGridAttributeOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConvertPointDataGridAttributeOp"
  },
  {
    "label": "ConvertPointDataGridGroupOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConvertPointDataGridGroupOp"
  },
  {
    "label": "CalculatePositionBounds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CalculatePositionBounds"
  },
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "createPointDataGrid()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_POINTS_POINT_CONVERSION_HAS_BEEN_INCLUDED # define OPENVDB_POINTS_POINT_CONVERSION_HAS_BEEN_INCLUDED # include<openvdb / math / Transform . h> # include<openvdb / tools / PointIndexGrid . h> # include<openvdb / tools / PointsToMask . h> # include<openvdb / util / NullInterrupter . h> # include \" AttributeArrayString . h \" # include \" AttributeSet . h \" # include \" IndexFilter . h \" # include \" PointAttribute . h \" # include \" PointDataGrid . h \" # include \" PointGroup . h \" # include<tbb / parallel_reduce . h> # include<type_traits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace points { template<CompressionT,PointDataGridT,PositionArrayT,PointIndexGridT> PointDataGridT::Ptr)",
    "insertText": "createPointDataGrid(const PointIndexGridT& pointIndexGrid, const PositionArrayT& positions, const math::Transform& xform, const Metadata* positionDefaultValue = nullptr)"
  },
  {
    "label": "createPointDataGrid()",
    "kind": "Method",
    "detail": "Function (template<CompressionT,PointDataGridT,ValueT> PointDataGridT::Ptr)",
    "insertText": "createPointDataGrid(const std::vector<ValueT>& positions, const math::Transform& xform, const Metadata* positionDefaultValue = nullptr)"
  },
  {
    "label": "populateAttribute()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT,PointIndexTreeT,PointArrayT> void)",
    "insertText": "populateAttribute(PointDataTreeT& tree, const PointIndexTreeT& pointIndexTree, const openvdb::Name& attributeName, const PointArrayT& data, const Index stride = 1, const bool insertMetadata = true)"
  },
  {
    "label": "convertPointDataGridPosition()",
    "kind": "Method",
    "detail": "Function (template<PositionAttribute,PointDataGridT,FilterT = NullFilter> void)",
    "insertText": "convertPointDataGridPosition(PositionAttribute& positionAttribute, const PointDataGridT& grid, const std::vector<Index64>& pointOffsets, const Index64 startOffset, const FilterT& filter = NullFilter(), const bool inCoreOnly = false)"
  },
  {
    "label": "convertPointDataGridAttribute()",
    "kind": "Method",
    "detail": "Function (template<TypedAttribute,PointDataTreeT,FilterT = NullFilter> void)",
    "insertText": "convertPointDataGridAttribute(TypedAttribute& attribute, const PointDataTreeT& tree, const std::vector<Index64>& pointOffsets, const Index64 startOffset, const unsigned arrayIndex, const Index stride = 1, const FilterT& filter = NullFilter(), const bool inCoreOnly = false)"
  },
  {
    "label": "convertPointDataGridGroup()",
    "kind": "Method",
    "detail": "Function (template<Group,PointDataTreeT,FilterT = NullFilter> void)",
    "insertText": "convertPointDataGridGroup(Group& group, const PointDataTreeT& tree, const std::vector<Index64>& pointOffsets, const Index64 startOffset, const AttributeSet::Descriptor::GroupIndex index, const FilterT& filter = NullFilter(), const bool inCoreOnly = false)"
  },
  {
    "label": "computeVoxelSize()",
    "kind": "Method",
    "detail": "Function (template<PositionWrapper,InterrupterT = openvdb::util::NullInterrupter> float)",
    "insertText": "computeVoxelSize(const PositionWrapper& positions, const uint32_t pointsPerVoxel, const math::Mat4d transform = math::Mat4d::identity(), const Index decimalPlaces = 5, InterrupterT* const interrupter = nullptr)"
  },
  {
    "label": "PointAttributeVector()",
    "kind": "Method",
    "detail": "Function (template<ValueType> class PointAttributeVector { public : using PosType = ValueType ; using value_type = ValueType ;)",
    "insertText": "PointAttributeVector(const std::vector<value_type>& data, const Index stride = 1) : mData(data) , mStride(stride)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "getPos()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getPos(size_t n, ValueType& xyz)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (xyz = mData [ n ] ; } void)",
    "insertText": "get(ValueType& value, size_t n)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (value = mData [ n ] ; } void)",
    "insertText": "get(ValueType& value, size_t n, openvdb::Index m)"
  },
  {
    "label": "zero()",
    "kind": "Method",
    "detail": "Function (value = mData [ n* mStride + m ] ; } private : const std::vector<value_type>& mData ; const Index mStride ; } ; namespace point_conversion_internal { template<T> struct ConversionTraits { using Handle = AttributeHandle<T,UnknownCodec> ; using WriteHandle = AttributeWriteHandle<T,UnknownCodec> ; T)",
    "insertText": "zero()"
  },
  {
    "label": "handleFromLeaf()",
    "kind": "Method",
    "detail": "Function (} template<LeafT> Handle::Ptr)",
    "insertText": "handleFromLeaf(LeafT& leaf, Index index)"
  },
  {
    "label": "constAttributeArray()",
    "kind": "Method",
    "detail": "Function (const AttributeArray& array = leaf .)",
    "insertText": "constAttributeArray(index)"
  },
  {
    "label": "writeHandleFromLeaf()",
    "kind": "Method",
    "detail": "Function (} template<LeafT> WriteHandle::Ptr)",
    "insertText": "writeHandleFromLeaf(LeafT& leaf, Index index)"
  },
  {
    "label": "attributeArray()",
    "kind": "Method",
    "detail": "Function (AttributeArray& array = leaf .)",
    "insertText": "attributeArray(index)"
  },
  {
    "label": "attributeSet()",
    "kind": "Method",
    "detail": "Function (const AttributeSet::Descriptor& descriptor = leaf .)",
    "insertText": "attributeSet().descriptor()"
  },
  {
    "label": "PopulateAttributeOp()",
    "kind": "Method",
    "detail": "Function (} } ; template<PointDataTreeType,PointIndexTreeType,AttributeListType> struct PopulateAttributeOp { using LeafManagerT = tree::LeafManager<PointDataTreeType> ; using LeafRangeT = LeafManagerT::LeafRange ; using PointIndexLeafNode = PointIndexTreeType::LeafNodeType ; using IndexArray = PointIndexLeafNode::IndexArray ; using ValueType = AttributeListType::value_type ; using HandleT = ConversionTraits<ValueType>::WriteHandle ;)",
    "insertText": "PopulateAttributeOp(const PointIndexTreeType& pointIndexTree, const AttributeListType& data, const size_t index, const Index stride = 1) : mPointIndexTree(pointIndexTree) , mData(data) , mIndex(index) , mStride(stride)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const typename LeafManagerT::LeafRange& range)"
  },
  {
    "label": "probeConstLeaf()",
    "kind": "Method",
    "detail": "Function (const PointIndexLeafNode* pointIndexLeaf = mPointIndexTree .)",
    "insertText": "probeConstLeaf(leaf->origin())"
  },
  {
    "label": "writeHandleFromLeaf()",
    "kind": "Method",
    "detail": "Function (HandleT::Ptr attributeWriteHandle = ConversionTraits<ValueType)",
    "insertText": "writeHandleFromLeaf(*leaf, static_cast<Index>(mIndex))"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (Index64 index = 0 ; const IndexArray& indices = pointIndexLeaf ->)",
    "insertText": "indices()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ValueType value ;)",
    "insertText": "for(Index i = 0; i < mStride; i++)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (mData .)",
    "insertText": "get(value, leafIndex, i)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (attributeWriteHandle ->)",
    "insertText": "set(static_cast<Index>(index), i, value)"
  },
  {
    "label": "compact()",
    "kind": "Method",
    "detail": "Function (} index + + ; } attributeWriteHandle ->)",
    "insertText": "compact()"
  },
  {
    "label": "ConvertPointDataGridPositionOp()",
    "kind": "Method",
    "detail": "Function (} } const PointIndexTreeType& mPointIndexTree ; const AttributeListType& mData ; const size_t mIndex ; const Index mStride ; } ; template<PointDataTreeType,Attribute,FilterT> struct ConvertPointDataGridPositionOp { using LeafNode = PointDataTreeType::LeafNodeType ; using ValueType = Attribute::ValueType ; using HandleT = Attribute::Handle ; using SourceHandleT = AttributeHandle<ValueType> ; using LeafManagerT = tree::LeafManager<const PointDataTreeType> ; using LeafRangeT = LeafManagerT::LeafRange ;)",
    "insertText": "ConvertPointDataGridPositionOp(Attribute& attribute, const std::vector<Index64>& pointOffsets, const Index64 startOffset, const math::Transform& transform, const size_t index, const FilterT& filter, const bool inCoreOnly) : mAttribute(attribute) , mPointOffsets(pointOffsets) , mStartOffset(startOffset) , mTransform(transform) , mIndex(index) , mFilter(filter) , mInCoreOnly(inCoreOnly)"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (} template<IterT> void)",
    "insertText": "convert(IterT& iter, HandleT& targetHandle, SourceHandleT& sourceHandle, Index64& offset)"
  },
  {
    "label": "getCoord()",
    "kind": "Method",
    "detail": "Function (const Vec3d xyz = iter .)",
    "insertText": "getCoord().asVec3d()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (const Vec3d pos = sourceHandle .)",
    "insertText": "get(*iter)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (targetHandle .)",
    "insertText": "set(static_cast<Index>(offset++), 0, mTransform.indexToWorld(pos + xyz))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "operator()(const LeafRangeT& range)"
  },
  {
    "label": "pHandle()",
    "kind": "Method",
    "detail": "Function (HandleT)",
    "insertText": "pHandle(mAttribute)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(leaf.pos() < mPointOffsets.size())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index64 offset = mStartOffset ;)",
    "insertText": "if(leaf.pos() > 0) offset += mPointOffsets[leaf.pos()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (auto handle =)",
    "insertText": "create(leaf->constAttributeArray(mIndex))"
  },
  {
    "label": "beginIndexOn()",
    "kind": "Method",
    "detail": "Function (auto iter = leaf ->)",
    "insertText": "beginIndexOn()"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "convert(iter, pHandle, *handle, offset)"
  },
  {
    "label": "beginIndexOn()",
    "kind": "Method",
    "detail": "Function (} else { auto iter = leaf ->)",
    "insertText": "beginIndexOn(mFilter)"
  },
  {
    "label": "ConvertPointDataGridAttributeOp()",
    "kind": "Method",
    "detail": "Function (} } } Attribute& mAttribute ; const std::vector<Index64>& mPointOffsets ; const Index64 mStartOffset ; const math::Transform& mTransform ; const size_t mIndex ; const FilterT& mFilter ; const bool mInCoreOnly ; } ; template<PointDataTreeType,Attribute,FilterT> struct ConvertPointDataGridAttributeOp { using LeafNode = PointDataTreeType::LeafNodeType ; using ValueType = Attribute::ValueType ; using HandleT = Attribute::Handle ; using SourceHandleT = ConversionTraits<ValueType>::Handle ; using LeafManagerT = tree::LeafManager<const PointDataTreeType> ; using LeafRangeT = LeafManagerT::LeafRange ;)",
    "insertText": "ConvertPointDataGridAttributeOp(Attribute& attribute, const std::vector<Index64>& pointOffsets, const Index64 startOffset, const size_t index, const Index stride, const FilterT& filter, const bool inCoreOnly) : mAttribute(attribute) , mPointOffsets(pointOffsets) , mStartOffset(startOffset) , mIndex(index) , mStride(stride) , mFilter(filter) , mInCoreOnly(inCoreOnly)"
  },
  {
    "label": "uniformValue()",
    "kind": "Method",
    "detail": "Function (const ValueType)",
    "insertText": "uniformValue(sourceHandle.get(0))"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (targetHandle .)",
    "insertText": "set(static_cast<Index>(offset), i, uniformValue)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} offset + + ; } } else {)",
    "insertText": "for(; iter; ++iter)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (targetHandle .)",
    "insertText": "set(static_cast<Index>(offset), i, sourceHandle.get(*iter, i))"
  },
  {
    "label": "handleFromLeaf()",
    "kind": "Method",
    "detail": "Function (SourceHandleT::Ptr handle = ConversionTraits<ValueType)",
    "insertText": "handleFromLeaf(*leaf, static_cast<Index>(mIndex))"
  },
  {
    "label": "ConvertPointDataGridGroupOp()",
    "kind": "Method",
    "detail": "Function (} } } Attribute& mAttribute ; const std::vector<Index64>& mPointOffsets ; const Index64 mStartOffset ; const size_t mIndex ; const Index mStride ; const FilterT& mFilter ; const bool mInCoreOnly ; } ; template<PointDataTreeType,Group,FilterT> struct ConvertPointDataGridGroupOp { using LeafNode = PointDataTreeType::LeafNodeType ; using GroupIndex = AttributeSet::Descriptor::GroupIndex ; using LeafManagerT = tree::LeafManager<const PointDataTreeType> ; using LeafRangeT = LeafManagerT::LeafRange ;)",
    "insertText": "ConvertPointDataGridGroupOp(Group& group, const std::vector<Index64>& pointOffsets, const Index64 startOffset, const AttributeSet::Descriptor::GroupIndex index, const FilterT& filter, const bool inCoreOnly) : mGroup(group) , mPointOffsets(pointOffsets) , mStartOffset(startOffset) , mIndex(index) , mFilter(filter) , mInCoreOnly(inCoreOnly)"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (} template<IterT> void)",
    "insertText": "convert(IterT& iter, const GroupAttributeArray& groupArray, Index64& offset)"
  },
  {
    "label": "GroupType()",
    "kind": "Method",
    "detail": "Function (const auto bitmask = static_cast<)",
    "insertText": "GroupType(1 << mIndex.second)"
  },
  {
    "label": "setOffsetOn()",
    "kind": "Method",
    "detail": "Function (mGroup .)",
    "insertText": "setOffsetOn(static_cast<Index>(offset))"
  },
  {
    "label": "constAttributeArray()",
    "kind": "Method",
    "detail": "Function (const AttributeArray& array = leaf ->)",
    "insertText": "constAttributeArray(mIndex.first)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isGroup(array))"
  },
  {
    "label": "cast()",
    "kind": "Method",
    "detail": "Function (const GroupAttributeArray& groupArray =)",
    "insertText": "cast(array)"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "convert(iter, groupArray, offset)"
  },
  {
    "label": "CalculatePositionBounds()",
    "kind": "Method",
    "detail": "Function (} } } Group& mGroup ; const std::vector<Index64>& mPointOffsets ; const Index64 mStartOffset ; const GroupIndex mIndex ; const FilterT& mFilter ; const bool mInCoreOnly ; } ; template<PositionArrayT> struct CalculatePositionBounds {)",
    "insertText": "CalculatePositionBounds(const PositionArrayT& positions, const math::Mat4d& inverse) : mPositions(positions) , mInverseMat(inverse) , mMin(std::numeric_limits<Real>::max()) , mMax(-std::numeric_limits<Real>::max())"
  },
  {
    "label": "CalculatePositionBounds()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CalculatePositionBounds(const CalculatePositionBounds& other, tbb::split) : mPositions(other.mPositions) , mInverseMat(other.mInverseMat) , mMin(std::numeric_limits<Real>::max()) , mMax(-std::numeric_limits<Real>::max())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const tbb::blocked_range<size_t>& range)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Vec3R pos ;)",
    "insertText": "for(size_t n = range.begin(), N = range.end(); n != N; ++n)"
  },
  {
    "label": "getPos()",
    "kind": "Method",
    "detail": "Function (mPositions .)",
    "insertText": "getPos(n, pos)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (pos = mInverseMat .)",
    "insertText": "transform(pos)"
  },
  {
    "label": "minComponent()",
    "kind": "Method",
    "detail": "Function (mMin =)",
    "insertText": "minComponent(mMin, pos)"
  },
  {
    "label": "maxComponent()",
    "kind": "Method",
    "detail": "Function (mMax =)",
    "insertText": "maxComponent(mMax, pos)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "join(const CalculatePositionBounds& other)"
  },
  {
    "label": "minComponent()",
    "kind": "Method",
    "detail": "Function (mMin =)",
    "insertText": "minComponent(mMin, other.mMin)"
  },
  {
    "label": "maxComponent()",
    "kind": "Method",
    "detail": "Function (mMax =)",
    "insertText": "maxComponent(mMax, other.mMax)"
  },
  {
    "label": "getBoundingBox()",
    "kind": "Method",
    "detail": "Function (} BBoxd)",
    "insertText": "getBoundingBox()"
  },
  {
    "label": "createPointDataGrid()",
    "kind": "Method",
    "detail": "Function (} private : const PositionArrayT& mPositions ; const math::Mat4d& mInverseMat ; Vec3R mMin,mMax ; } ; } template<CompressionT,PointDataGridT,PositionArrayT,PointIndexGridT> PointDataGridT::Ptr)",
    "insertText": "createPointDataGrid(const PointIndexGridT& pointIndexGrid, const PositionArrayT& positions, const math::Transform& xform, const Metadata* positionDefaultValue)"
  },
  {
    "label": "attributeType()",
    "kind": "Method",
    "detail": "Function (using PointDataTreeT = PointDataGridT::TreeType ; using LeafT = PointDataTreeT::LeafNodeType ; using PointIndexLeafT = PointIndexGridT::TreeType::LeafNodeType ; using PointIndexT = PointIndexLeafT::ValueType ; using LeafManagerT = tree::LeafManager<PointDataTreeT> ; using PositionAttributeT = TypedAttributeArray<Vec3f,CompressionT> ; const NamePair positionType =)",
    "insertText": "attributeType()"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (const auto& pointIndexTree = pointIndexGrid .)",
    "insertText": "tree()"
  },
  {
    "label": "treePtr()",
    "kind": "Method",
    "detail": "Function (PointDataTreeT::Ptr)",
    "insertText": "treePtr(new PointDataTreeT(pointIndexTree))"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (auto descriptor = AttributeSet::)",
    "insertText": "create(positionType)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (const size_t positionIndex = descriptor ->)",
    "insertText": "find(\"P\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(positionIndex != AttributeSet::INVALID_POS)"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (AttributeArray::ScopedRegistryLock lock ; LeafManagerT)",
    "insertText": "leafManager(*treePtr)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (leafManager .)",
    "insertText": "foreach([&](LeafT& leaf, size_t ) { const auto* pointIndexLeaf = pointIndexTree.probeConstLeaf(leaf.origin()); assert(pointIndexLeaf); Index pointCount(static_cast<Index>(pointIndexLeaf->indices().size())); leaf.initializeAttributes(descriptor, pointCount, &lock); auto attributeWriteHandle = AttributeWriteHandle<Vec3f, CompressionT>::create( leaf.attributeArray(positionIndex)); Index index = 0; const PointIndexT *begin = static_cast<PointIndexT*>(nullptr), *end = static_cast<PointIndexT*>(nullptr); for (auto iter = pointIndexLeaf->cbeginValueOn(); iter; ++iter) { const Coord& ijk = iter.getCoord(); const Vec3d& positionCellCenter(ijk.asVec3d()); pointIndexLeaf->getIndices(ijk, begin, end); while (begin < end) { typename PositionArrayT::value_type positionWorldSpace; positions.getPos(*begin, positionWorldSpace); const Vec3d positionIndexSpace = xform.worldToIndex(positionWorldSpace); const Vec3f positionVoxelSpace(positionIndexSpace - positionCellCenter); attributeWriteHandle->set(index++, positionVoxelSpace); ++begin; } } }, true)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (auto grid =)",
    "insertText": "create(treePtr)"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (grid ->)",
    "insertText": "setTransform(xform.copy())"
  },
  {
    "label": "pointList()",
    "kind": "Method",
    "detail": "Function (const PointAttributeVector<ValueT>)",
    "insertText": "pointList(positions)"
  },
  {
    "label": "PointIndexGrid()",
    "kind": "Method",
    "detail": "Function (tools::PointIndexGrid::Ptr pointIndexGrid = tools::createPointIndexGrid<)",
    "insertText": "PointIndexGrid(pointList, xform)"
  },
  {
    "label": "populateAttribute()",
    "kind": "Method",
    "detail": "Function (} template<PointDataTreeT,PointIndexTreeT,PointArrayT> void)",
    "insertText": "populateAttribute(PointDataTreeT& tree, const PointIndexTreeT& pointIndexTree, const openvdb::Name& attributeName, const PointArrayT& data, const Index stride, const bool insertMetadata)"
  },
  {
    "label": "cbeginLeaf()",
    "kind": "Method",
    "detail": "Function (using point_conversion_internal::PopulateAttributeOp ; using ValueType = PointArrayT::value_type ; auto iter = tree .)",
    "insertText": "cbeginLeaf()"
  },
  {
    "label": "attributeSet()",
    "kind": "Method",
    "detail": "Function (const size_t index = iter ->)",
    "insertText": "attributeSet().find(attributeName)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(KeyError, \"Attribute not found to populate - \" << attributeName << \".\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(insertMetadata)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (point_attribute_internal::MetadataStorage<PointDataTreeT,ValueType)",
    "insertText": "add(tree, data)"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (} tree::LeafManager<PointDataTreeT>)",
    "insertText": "leafManager(tree)"
  },
  {
    "label": "populate()",
    "kind": "Method",
    "detail": "Function (PopulateAttributeOp<PointDataTreeT,PointIndexTreeT,PointArrayT>)",
    "insertText": "populate(pointIndexTree, data, index, stride)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(leafManager.leafRange(), populate)"
  },
  {
    "label": "convertPointDataGridPosition()",
    "kind": "Method",
    "detail": "Function (} template<PositionAttribute,PointDataGridT,FilterT> void)",
    "insertText": "convertPointDataGridPosition(PositionAttribute& positionAttribute, const PointDataGridT& grid, const std::vector<Index64>& pointOffsets, const Index64 startOffset, const FilterT& filter, const bool inCoreOnly)"
  },
  {
    "label": "attributeSet()",
    "kind": "Method",
    "detail": "Function (const size_t positionIndex = iter ->)",
    "insertText": "attributeSet().find(\"P\")"
  },
  {
    "label": "expand()",
    "kind": "Method",
    "detail": "Function (positionAttribute .)",
    "insertText": "expand()"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (ConvertPointDataGridPositionOp<TreeType,PositionAttribute,FilterT>)",
    "insertText": "convert(positionAttribute, pointOffsets, startOffset, grid.transform(), positionIndex, filter, inCoreOnly)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(leafManager.leafRange(), convert)"
  },
  {
    "label": "convertPointDataGridAttribute()",
    "kind": "Method",
    "detail": "Function (} template<TypedAttribute,PointDataTreeT,FilterT> void)",
    "insertText": "convertPointDataGridAttribute(TypedAttribute& attribute, const PointDataTreeT& tree, const std::vector<Index64>& pointOffsets, const Index64 startOffset, const unsigned arrayIndex, const Index stride, const FilterT& filter, const bool inCoreOnly)"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (ConvertPointDataGridAttributeOp<PointDataTreeT,TypedAttribute,FilterT>)",
    "insertText": "convert(attribute, pointOffsets, startOffset, arrayIndex, stride, filter, inCoreOnly)"
  },
  {
    "label": "convertPointDataGridGroup()",
    "kind": "Method",
    "detail": "Function (} template<Group,PointDataTreeT,FilterT> void)",
    "insertText": "convertPointDataGridGroup(Group& group, const PointDataTreeT& tree, const std::vector<Index64>& pointOffsets, const Index64 startOffset, const AttributeSet::Descriptor::GroupIndex index, const FilterT& filter, const bool inCoreOnly)"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (ConvertPointDataGridGroupOp<PointDataTreeT,Group,FilterT>)",
    "insertText": "convert(group, pointOffsets, startOffset, index, filter, inCoreOnly)"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (group .)",
    "insertText": "finalize()"
  },
  {
    "label": "computeVoxelSize()",
    "kind": "Method",
    "detail": "Function (} template<PositionWrapper,InterrupterT> float)",
    "insertText": "computeVoxelSize(const PositionWrapper& positions, const uint32_t pointsPerVoxel, const math::Mat4d transform, const Index decimalPlaces, InterrupterT* const interrupter)"
  },
  {
    "label": "voxelSizeFromVolume()",
    "kind": "Method",
    "detail": "Function (using namespace point_conversion_internal ; struct Local { bool)",
    "insertText": "voxelSizeFromVolume(const double volume, const size_t estimatedVoxelCount, float& voxelSize)"
  },
  {
    "label": "minimumVoxelVolume()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "minimumVoxelVolume(3e-15)"
  },
  {
    "label": "maximumVoxelVolume()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "maximumVoxelVolume(std::numeric_limits<float>::max())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool valid = true ;)",
    "insertText": "if(voxelVolume < minimumVoxelVolume)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (voxelVolume = minimumVoxelVolume ; valid = false ; } else)",
    "insertText": "if(voxelVolume > maximumVoxelVolume)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (voxelVolume = maximumVoxelVolume ; valid = false ; } voxelSize = static_cast<)",
    "insertText": "float(math::Pow(voxelVolume, 1.0/3.0))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float truncatedVoxelSize = voxelSize ;)",
    "insertText": "for(int i = decPlaces; i < 11; i++)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (truncatedVoxelSize = static_cast<)",
    "insertText": "float(math::Truncate(double(voxelSize), i))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return truncatedVoxelSize ; } } ;)",
    "insertText": "if(pointsPerVoxel == 0) OPENVDB_THROW(ValueError, \"Points per voxel cannot be zero.\")"
  },
  {
    "label": "voxelSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "voxelSize(0.1f)"
  },
  {
    "label": "targetVoxelCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "targetVoxelCount(numPoints / size_t(pointsPerVoxel))"
  },
  {
    "label": "inverse()",
    "kind": "Method",
    "detail": "Function (math::Mat4d inverseTransform = transform .)",
    "insertText": "inverse()"
  },
  {
    "label": "unit()",
    "kind": "Method",
    "detail": "Function (inverseTransform =)",
    "insertText": "unit(inverseTransform)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (tbb::blocked_range<size_t>)",
    "insertText": "range(0, numPoints)"
  },
  {
    "label": "calculateBounds()",
    "kind": "Method",
    "detail": "Function (CalculatePositionBounds<PositionWrapper>)",
    "insertText": "calculateBounds(positions, inverseTransform)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_reduce(range, calculateBounds)"
  },
  {
    "label": "extents()",
    "kind": "Method",
    "detail": "Function (Vec3d extents = bbox .)",
    "insertText": "extents().sorted().reversed()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (volume = extents [ 0 ]* extents [ 0 ]* extents [ 0 ] ; } else { volume = extents [ 0 ]* extents [ 1 ]* extents [ 1 ] ; } } double previousVolume = volume ;)",
    "insertText": "if(!Local::voxelSizeFromVolume(volume, targetVoxelCount, voxelSize))"
  },
  {
    "label": "OPENVDB_LOG_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_LOG_DEBUG(\"Out of range, clamping voxel size.\")"
  },
  {
    "label": "voxelCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "voxelCount(1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (math::Transform::Ptr newTransform ;)",
    "insertText": "if(!math::isIdentity(transform))"
  },
  {
    "label": "matrix()",
    "kind": "Method",
    "detail": "Function (math::Mat4d)",
    "insertText": "matrix(transform)"
  },
  {
    "label": "preScale()",
    "kind": "Method",
    "detail": "Function (matrix .)",
    "insertText": "preScale(Vec3d(voxelSize) / math::getScale(matrix))"
  },
  {
    "label": "createLinearTransform()",
    "kind": "Method",
    "detail": "Function (newTransform = math::)",
    "insertText": "createLinearTransform(matrix)"
  },
  {
    "label": "createLinearTransform()",
    "kind": "Method",
    "detail": "Function (} else { newTransform = math::)",
    "insertText": "createLinearTransform(voxelSize)"
  },
  {
    "label": "MaskGrid()",
    "kind": "Method",
    "detail": "Function (} MaskGrid::Ptr mask = createGrid<)",
    "insertText": "MaskGrid(false)"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (mask ->)",
    "insertText": "setTransform(newTransform)"
  },
  {
    "label": "pointMaskOp()",
    "kind": "Method",
    "detail": "Function (tools::PointsToMask<MaskGrid,InterrupterT>)",
    "insertText": "pointMaskOp(*mask, interrupter)"
  },
  {
    "label": "addPoints()",
    "kind": "Method",
    "detail": "Function (pointMaskOp .)",
    "insertText": "addPoints(positions)"
  },
  {
    "label": "activeVoxelCount()",
    "kind": "Method",
    "detail": "Function (previousVoxelCount = voxelCount ; voxelCount = mask ->)",
    "insertText": "activeVoxelCount()"
  },
  {
    "label": "Pow3()",
    "kind": "Method",
    "detail": "Function (volume =)",
    "insertText": "Pow3(voxelSize) * static_cast<float>(voxelCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (voxelSize = previousVoxelSize ; break ; })",
    "insertText": "if(voxelSize / previousVoxelSize > 0.9f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(interrupter) interrupter->end()"
  }
]