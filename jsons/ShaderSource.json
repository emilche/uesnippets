[
  {
    "label": "FShaderSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderSource"
  },
  {
    "label": "SHADER_SOURCE_LITERAL()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / AnsiString . h \" # include \" Containers / Array . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" Misc / StringBuilder . h \" # define SHADER_SOURCE_ANSI 1 # if SHADER_SOURCE_ANSI # define)",
    "insertText": "SHADER_SOURCE_LITERAL(S) S #define SHADER_SOURCE_VIEWLITERAL(S) ANSITEXTVIEW(S) #else #define SHADER_SOURCE_LITERAL(S) TEXT(S) #define SHADER_SOURCE_VIEWLITERAL(S) TEXTVIEW(S)"
  },
  {
    "label": "SetLen()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetLen(int32 Num, EAllowShrinking AllowShrinking = EAllowShrinking::Yes)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Source .)",
    "insertText": "SetNumUninitialized(Num + ShaderSourceSimdPadding, AllowShrinking)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Source.GetData() + Num, sizeof(CharType) * ShaderSourceSimdPadding)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (SourceCompressed .)",
    "insertText": "Empty()"
  },
  {
    "label": "IsWide()",
    "kind": "Method",
    "detail": "Function (DecompressedCharCount = 0 ; } public : # if SHADER_SOURCE_ANSI typedef ANSICHAR CharType ; typedef FAnsiStringView FViewType ; typedef FAnsiString FStringType ; typedef FCStringAnsi FCStringType ; template<int NumChars> using TStringBuilder = TAnsiStringBuilder<NumChars> ; # else typedef TCHAR CharType ; typedef FStringView FViewType ; typedef FString FStringType ; typedef FCString FCStringType ; template<int NumChars> using TStringBuilder = TStringBuilder<NumChars* 2> ; # endif bool)",
    "insertText": "IsWide()"
  },
  {
    "label": "GetSimdCharCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSimdCharCount()"
  },
  {
    "label": "GetSingleCharMask()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSingleCharMask()"
  },
  {
    "label": "FShaderSource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShaderSource()"
  },
  {
    "label": "SetLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLen(0)"
  },
  {
    "label": "FShaderSource()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FShaderSource(FViewType InSrc, int32 AdditionalSlack = 0)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(FViewType InSrc, int32 AdditionalSlack = 0)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (# if ! SHADER_SOURCE_ANSI void)",
    "insertText": "Set(FAnsiStringView InSrc)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif FShaderSource&)",
    "insertText": "operator(FStringType&& InSrc)"
  },
  {
    "label": "ShrinkToLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShrinkToLen(int32 Num, EAllowShrinking AllowShrinking = EAllowShrinking::Yes)"
  },
  {
    "label": "SetLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLen(Num, AllowShrinking)"
  },
  {
    "label": "UE_ALLOWSHRINKING_BOOL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_ALLOWSHRINKING_BOOL_DEPRECATED(\"ShrinkToLen\") FORCEINLINE void ShrinkToLen(int32 Num, bool bShrink)"
  },
  {
    "label": "ShrinkToLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShrinkToLen(Num, bShrink ? EAllowShrinking::Yes : EAllowShrinking::No)"
  },
  {
    "label": "GetView()",
    "kind": "Method",
    "detail": "Function (} FViewType)",
    "insertText": "GetView()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} CharType*)",
    "insertText": "GetData()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Len()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Len()"
  },
  {
    "label": "IsCompressed()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsCompressed()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FShaderSource& ShaderSource)"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compress()"
  },
  {
    "label": "Decompress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decompress()"
  }
]