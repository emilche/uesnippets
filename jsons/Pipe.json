[
  {
    "label": "FPipe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPipe"
  },
  {
    "label": "Private",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Private"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Fundamental / Scheduler . h \" # include \" Async / Fundamental / Task . h \" # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Tasks / Task . h \" # include \" Async / EventCount . h \" # include \" Tasks / TaskPrivate . h \" # include \" Templates / Invoke . h \" # include \" Templates / UnrealTemplate . h \" # include<atomic> # include<type_traits> namespace UE::Tasks { class FPipe { public :)",
    "insertText": "UE_NONCOPYABLE(FPipe)"
  },
  {
    "label": "FPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPipe(const TCHAR* InDebugName) : DebugName(InDebugName)"
  },
  {
    "label": "FPipe()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPipe()"
  },
  {
    "label": "HasWork()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasWork()"
  },
  {
    "label": "WaitUntilEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WaitUntilEmpty(FTimespan Timeout = FTimespan::MaxValue())"
  },
  {
    "label": "Launch()",
    "kind": "Method",
    "detail": "Function (template<TaskBodyType> TTask<TInvokeResult_T<TaskBodyType>>)",
    "insertText": "Launch(const TCHAR* InDebugName, TaskBodyType&& TaskBody, ETaskPriority Priority = ETaskPriority::Default, EExtendedTaskPriority ExtendedPriority = EExtendedTaskPriority::None, ETaskFlags Flags = ETaskFlags::None)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (using FResult = TInvokeResult_T<TaskBodyType> ; using FExecutableTask = Private::TExecutableTask<std::decay_t<TaskBodyType>> ; FExecutableTask* Task =)",
    "insertText": "Create(InDebugName, Forward<TaskBodyType>(TaskBody), Priority, ExtendedPriority, Flags)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (TaskCount .)",
    "insertText": "fetch_add(1, std::memory_order_acq_rel)"
  },
  {
    "label": "SetPipe()",
    "kind": "Method",
    "detail": "Function (Task ->)",
    "insertText": "SetPipe(*this)"
  },
  {
    "label": "TryLaunch()",
    "kind": "Method",
    "detail": "Function (Task ->)",
    "insertText": "TryLaunch(sizeof(*Task))"
  },
  {
    "label": "AddPrerequisites()",
    "kind": "Method",
    "detail": "Function (Task ->)",
    "insertText": "AddPrerequisites(Forward<PrerequisitesCollectionType>(Prerequisites))"
  },
  {
    "label": "PushIntoPipe()",
    "kind": "Method",
    "detail": "Function (private : class Private::FTaskBase ; [ [ nodiscard ] ] Private::FTaskBase*)",
    "insertText": "PushIntoPipe(Private::FTaskBase& Task)"
  },
  {
    "label": "ClearTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTask(Private::FTaskBase& Task)"
  },
  {
    "label": "ExecutionStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecutionStarted()"
  },
  {
    "label": "ExecutionFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecutionFinished()"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (private : std::atomic<Private::FTaskBase*> LastTask { nullptr } ; std::atomic<uint64> TaskCount { 0 } ; UE::FEventCount EmptyEvent ; public : FORCENOINLINE const TCHAR*)",
    "insertText": "GetDebugName()"
  }
]