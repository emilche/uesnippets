[
  {
    "label": "TDistSegment2AxisAlignedBox2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDistSegment2AxisAlignedBox2"
  },
  {
    "label": "TDistSegment2AxisAlignedBox2()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DistLine2AxisAlignedBox2 . h \" # include \" Math / Box2D . h \" # include \" SegmentTypes . h \" # include \" VectorTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<Real> class TDistSegment2AxisAlignedBox2 { public : TSegment2<Real> Segment ; TBox2<Real> AxisAlignedBox ; Real DistanceSquared = - 1 . 0 ; Real SegmentParameter ; TVector2<Real> BoxClosest,SegmentClosest ;)",
    "insertText": "TDistSegment2AxisAlignedBox2(const TSegment2<Real>& SegmentIn, const TBox2<Real>& AxisAlignedBoxIn) : Segment(SegmentIn), AxisAlignedBox(AxisAlignedBoxIn)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "Get()"
  },
  {
    "label": "GetSquared()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "GetSquared()"
  },
  {
    "label": "ComputeResult()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "ComputeResult()"
  },
  {
    "label": "queryLB()",
    "kind": "Method",
    "detail": "Function (TDistLine2AxisAlignedBox2<Real>)",
    "insertText": "queryLB(line, AxisAlignedBox)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SegmentParameter = queryLB . LineParameter ;)",
    "insertText": "if(SegmentParameter >= -Segment.Extent)"
  },
  {
    "label": "EndPoint()",
    "kind": "Method",
    "detail": "Function (SegmentClosest = queryLB . LineClosest ; BoxClosest = queryLB . BoxClosest ; } else { SegmentClosest = Segment .)",
    "insertText": "EndPoint()"
  },
  {
    "label": "GetClosestPointTo()",
    "kind": "Method",
    "detail": "Function (BoxClosest = AxisAlignedBox .)",
    "insertText": "GetClosestPointTo(SegmentClosest)"
  },
  {
    "label": "sqrDist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sqrDist(SegmentClosest - BoxClosest).SquaredLength()"
  },
  {
    "label": "StartPoint()",
    "kind": "Method",
    "detail": "Function (SegmentParameter = Segment . Extent ; } } else { SegmentClosest = Segment .)",
    "insertText": "StartPoint()"
  }
]