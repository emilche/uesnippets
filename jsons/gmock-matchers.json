[
  {
    "label": "StringMatchResultListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringMatchResultListener"
  },
  {
    "label": "MatcherCastImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatcherCastImpl"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "SafeMatcherCastImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SafeMatcherCastImpl"
  },
  {
    "label": "TuplePrefix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TuplePrefix"
  },
  {
    "label": "TransformTupleValuesHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransformTupleValuesHelper"
  },
  {
    "label": "IterateOverTuple",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IterateOverTuple"
  },
  {
    "label": "AnyMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnyMatcherImpl"
  },
  {
    "label": "AnythingMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnythingMatcher"
  },
  {
    "label": "IsNullMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IsNullMatcher"
  },
  {
    "label": "NotNullMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NotNullMatcher"
  },
  {
    "label": "RefMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefMatcher"
  },
  {
    "label": "StrEqualityMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrEqualityMatcher"
  },
  {
    "label": "HasSubstrMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HasSubstrMatcher"
  },
  {
    "label": "StartsWithMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StartsWithMatcher"
  },
  {
    "label": "EndsWithMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EndsWithMatcher"
  },
  {
    "label": "PairMatchBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PairMatchBase"
  },
  {
    "label": "Eq2Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Eq2Matcher"
  },
  {
    "label": "Ne2Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Ne2Matcher"
  },
  {
    "label": "Lt2Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Lt2Matcher"
  },
  {
    "label": "Gt2Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Gt2Matcher"
  },
  {
    "label": "Le2Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Le2Matcher"
  },
  {
    "label": "Ge2Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Ge2Matcher"
  },
  {
    "label": "NotMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NotMatcherImpl"
  },
  {
    "label": "NotMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NotMatcher"
  },
  {
    "label": "AllOfMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllOfMatcherImpl"
  },
  {
    "label": "CombiningMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CombiningMatcher"
  },
  {
    "label": "VariadicMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VariadicMatcher"
  },
  {
    "label": "AnyOfMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnyOfMatcherImpl"
  },
  {
    "label": "MatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatcherImpl"
  },
  {
    "label": "SomeOfArrayMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SomeOfArrayMatcher"
  },
  {
    "label": "TrulyMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TrulyMatcher"
  },
  {
    "label": "MatcherAsPredicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatcherAsPredicate"
  },
  {
    "label": "PredicateFormatterFromMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PredicateFormatterFromMatcher"
  },
  {
    "label": "FloatingEqMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FloatingEqMatcher"
  },
  {
    "label": "FloatingEq2Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FloatingEq2Matcher"
  },
  {
    "label": "PointeeMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointeeMatcher"
  },
  {
    "label": "WhenDynamicCastToMatcherBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WhenDynamicCastToMatcherBase"
  },
  {
    "label": "WhenDynamicCastToMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WhenDynamicCastToMatcher"
  },
  {
    "label": "FieldMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldMatcher"
  },
  {
    "label": "PropertyMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PropertyMatcher"
  },
  {
    "label": "CallableTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallableTraits"
  },
  {
    "label": "ResultOfMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResultOfMatcher"
  },
  {
    "label": "SizeIsMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SizeIsMatcher"
  },
  {
    "label": "BeginEndDistanceIsMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BeginEndDistanceIsMatcher"
  },
  {
    "label": "ContainerEqMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContainerEqMatcher"
  },
  {
    "label": "LessComparator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LessComparator"
  },
  {
    "label": "WhenSortedByMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WhenSortedByMatcher"
  },
  {
    "label": "PointwiseMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointwiseMatcher"
  },
  {
    "label": "QuantifierMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QuantifierMatcherImpl"
  },
  {
    "label": "ContainsMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContainsMatcherImpl"
  },
  {
    "label": "EachMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EachMatcherImpl"
  },
  {
    "label": "ContainsMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContainsMatcher"
  },
  {
    "label": "EachMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EachMatcher"
  },
  {
    "label": "Rank1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rank1"
  },
  {
    "label": "Rank0",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rank0"
  },
  {
    "label": "KeyMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyMatcherImpl"
  },
  {
    "label": "KeyMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyMatcher"
  },
  {
    "label": "PairMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PairMatcherImpl"
  },
  {
    "label": "PairMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PairMatcher"
  },
  {
    "label": "ElementsAreMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ElementsAreMatcherImpl"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "UnorderedMatcherRequire",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnorderedMatcherRequire"
  },
  {
    "label": "Flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flags"
  },
  {
    "label": "UnorderedElementsAreMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnorderedElementsAreMatcherImpl"
  },
  {
    "label": "CastAndAppendTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CastAndAppendTransform"
  },
  {
    "label": "UnorderedElementsAreMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnorderedElementsAreMatcher"
  },
  {
    "label": "ElementsAreMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ElementsAreMatcher"
  },
  {
    "label": "UnorderedElementsAreArrayMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnorderedElementsAreArrayMatcher"
  },
  {
    "label": "ElementsAreArrayMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ElementsAreArrayMatcher"
  },
  {
    "label": "BoundSecondMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BoundSecondMatcher"
  },
  {
    "label": "OptionalMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OptionalMatcher"
  },
  {
    "label": "VariantMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VariantMatcher"
  },
  {
    "label": "AnyCastMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnyCastMatcher"
  },
  {
    "label": "ArgsTuple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArgsTuple"
  },
  {
    "label": "ArgsMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArgsMatcherImpl"
  },
  {
    "label": "InnerMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerMatcher"
  },
  {
    "label": "ArgsMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArgsMatcher"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef GMOCK_INCLUDE_GMOCK_GMOCK_MATCHERS_H_ # define GMOCK_INCLUDE_GMOCK_GMOCK_MATCHERS_H_ # include<math . h> # include<algorithm> # include<initializer_list> # include<iterator> # include<limits> # include<memory> # include<ostream> # include<sstream> # include<string> # include<type_traits> # include<utility> # include<vector> # include \" gmock / internal / gmock - internal - utils . h \" # include \" gmock / internal / gmock - port . h \" # include \" gtest / gtest . h \" # if)",
    "insertText": "defined(_MSC_VER) && _MSC_VER >= 1915 #define GMOCK_MAYBE_5046_ 5046 #else #define GMOCK_MAYBE_5046_ #endif GTEST_DISABLE_MSC_WARNINGS_PUSH_( 4251 GMOCK_MAYBE_5046_)"
  },
  {
    "label": "StringMatchResultListener()",
    "kind": "Method",
    "detail": "Function (class StringMatchResultListener : public MatchResultListener { public :)",
    "insertText": "StringMatchResultListener() : MatchResultListener(&ss_)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "str()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (ss_ .)",
    "insertText": "str(\"\")"
  },
  {
    "label": "GTEST_DISALLOW_COPY_AND_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (} private :::std::stringstream ss_ ;)",
    "insertText": "GTEST_DISALLOW_COPY_AND_ASSIGN_(StringMatchResultListener)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (} ; namespace internal { template<T,M> class MatcherCastImpl { public : Matcher<T>)",
    "insertText": "Cast(const M& polymorphic_matcher_or_value)"
  },
  {
    "label": "CastImpl()",
    "kind": "Method",
    "detail": "Function (} private : template<bool Ignore> Matcher<T>)",
    "insertText": "CastImpl(const M& polymorphic_matcher_or_value, std::true_type , bool_constant<Ignore>)"
  },
  {
    "label": "CastImpl()",
    "kind": "Method",
    "detail": "Function (} Matcher<T>)",
    "insertText": "CastImpl(const M& value, std::false_type , std::false_type)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (} ; template<T,U> class MatcherCastImpl<T,Matcher<U>> { public : Matcher<T>)",
    "insertText": "Cast(const Matcher<U>& source_matcher)"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (} private : class Impl : public MatcherInterface<T> { public :)",
    "insertText": "Impl(const Matcher<U>& source_matcher) : source_matcher_(source_matcher)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MatchAndExplain(T x, MatchResultListener* listener)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using FromType = std::remove_cv<std::remove_pointer<std::remove_reference<T>::type>::type>::type ; using ToType = std::remove_cv<std::remove_pointer<std::remove_reference<U>::type>::type>::type ;)",
    "insertText": "static_assert((std::is_pointer<typename std::remove_reference<T>::type>::value != std::is_pointer<typename std::remove_reference<U>::type>::value) || std::is_same<FromType, ToType>::value || !std::is_base_of<FromType, ToType>::value, \"Can't implicitly convert from <base> to <derived>\")"
  },
  {
    "label": "DescribeTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DescribeTo(::std::ostream* os)"
  },
  {
    "label": "DescribeTo()",
    "kind": "Method",
    "detail": "Function (source_matcher_ .)",
    "insertText": "DescribeTo(os)"
  },
  {
    "label": "DescribeNegationTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DescribeNegationTo(::std::ostream* os)"
  },
  {
    "label": "DescribeNegationTo()",
    "kind": "Method",
    "detail": "Function (source_matcher_ .)",
    "insertText": "DescribeNegationTo(os)"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (} private : const Matcher<U> source_matcher_ ;)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(Impl)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (} ; } ; template<T> class MatcherCastImpl<T,Matcher<T>> { public : Matcher<T>)",
    "insertText": "Cast(const Matcher<T>& matcher)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (} template<U> Matcher<T>)",
    "insertText": "Cast(const Matcher<U>& matcher)"
  },
  {
    "label": "GTEST_COMPILE_ASSERT_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_COMPILE_ASSERT_((std::is_convertible<T, U>::value), \"T must be implicitly convertible to U\")"
  },
  {
    "label": "GTEST_COMPILE_ASSERT_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_COMPILE_ASSERT_(std::is_reference<T>::value || !std::is_reference<U>::value, cannot_convert_non_reference_arg_to_reference)"
  },
  {
    "label": "GTEST_REMOVE_REFERENCE_AND_CONST_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GTEST_REMOVE_REFERENCE_AND_CONST_(T)"
  },
  {
    "label": "GTEST_REMOVE_REFERENCE_AND_CONST_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GTEST_REMOVE_REFERENCE_AND_CONST_(U)"
  },
  {
    "label": "GMOCK_KIND_OF_()",
    "kind": "Method",
    "detail": "Function (const bool kTIsOther =)",
    "insertText": "GMOCK_KIND_OF_(RawT)"
  },
  {
    "label": "GMOCK_KIND_OF_()",
    "kind": "Method",
    "detail": "Function (const bool kUIsOther =)",
    "insertText": "GMOCK_KIND_OF_(RawU)"
  },
  {
    "label": "GTEST_COMPILE_ASSERT_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_COMPILE_ASSERT_(kTIsOther || kUIsOther || (internal::LosslessArithmeticConvertible<RawT, RawU>::value), conversion_of_arithmetic_types_must_be_lossless)"
  },
  {
    "label": "SafeMatcherCast()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,M> Matcher<T>)",
    "insertText": "SafeMatcherCast(const M& polymorphic_matcher)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (} template<T> Matcher<T>)",
    "insertText": "A()"
  },
  {
    "label": "PrintIfNotEmpty()",
    "kind": "Method",
    "detail": "Function (namespace internal { void)",
    "insertText": "PrintIfNotEmpty(const std::string& explanation, ::std::ostream* os)"
  },
  {
    "label": "IsReadableTypeName()",
    "kind": "Method",
    "detail": "Function (* os<<\",\"<<explanation ; } } bool)",
    "insertText": "IsReadableTypeName(const std::string& type_name)"
  }
]